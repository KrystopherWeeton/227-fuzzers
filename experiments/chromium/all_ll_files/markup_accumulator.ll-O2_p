; ModuleID = '../../third_party/blink/renderer/core/editing/serializers/markup_accumulator.cc'
source_filename = "../../third_party/blink/renderer/core/editing/serializers/markup_accumulator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.54 }
%class.scoped_refptr.54 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.188", i32, [4 x i8], %"class.std::__1::unique_ptr.324", %"class.std::__1::unique_ptr.324", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.334", %"class.std::__1::unique_ptr.340", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.352", %"class.std::__1::unique_ptr.358", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.365", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.191", %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.203", %"class.std::__1::unique_ptr.209", %"class.std::__1::unique_ptr.215", %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.232", %"class.std::__1::unique_ptr.239", %"class.std::__1::unique_ptr.239", %"class.std::__1::unique_ptr.246", %"class.std::__1::unique_ptr.253", %"class.std::__1::unique_ptr.260", %"class.std::__1::unique_ptr.260", %"class.std::__1::unique_ptr.267", %"class.std::__1::unique_ptr.274", %"class.std::__1::unique_ptr.281", %"class.std::__1::unique_ptr.304", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.203" = type { %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.209" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.224" = type { %"struct.std::__1::__atomic_base.225" }
%"struct.std::__1::__atomic_base.225" = type { %"struct.std::__1::__atomic_base.226" }
%"struct.std::__1::__atomic_base.226" = type { %"struct.std::__1::__cxx_atomic_impl.227" }
%"struct.std::__1::__cxx_atomic_impl.227" = type { %"struct.std::__1::__cxx_atomic_base_impl.228" }
%"struct.std::__1::__cxx_atomic_base_impl.228" = type { i64 }
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"class.blink::Worklist.235"* }
%"class.blink::Worklist.235" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.239" = type { %"class.std::__1::__compressed_pair.240" }
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.241" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"class.blink::Worklist.242"* }
%"class.blink::Worklist.242" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.blink::Worklist.249"* }
%"class.blink::Worklist.249" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.blink::Worklist.256"* }
%"class.blink::Worklist.256" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.blink::Worklist.263"* }
%"class.blink::Worklist.263" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.267" = type { %"class.std::__1::__compressed_pair.268" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"class.blink::Worklist.270"* }
%"class.blink::Worklist.270" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.blink::Worklist.277"* }
%"class.blink::Worklist.277" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.224" }
%"class.std::__1::unique_ptr.281" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.284", %"class.std::__1::__compressed_pair.291", %"class.std::__1::__compressed_pair.296", %"class.std::__1::__compressed_pair.298", [4 x i8] }>
%"class.std::__1::unique_ptr.284" = type { %"class.std::__1::__compressed_pair.285" }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286", %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { i64 }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { float }
%"class.std::__1::unique_ptr.304" = type { %"class.std::__1::__compressed_pair.305" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.306" }
%"struct.std::__1::__compressed_pair_elem.306" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.307", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.307" = type { %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.316" }
%"class.WTF::Vector.316" = type { %"class.WTF::VectorBuffer.317" }
%"class.WTF::VectorBuffer.317" = type { %"class.WTF::VectorBufferBase.318" }
%"class.WTF::VectorBufferBase.318" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.332" }
%"class.WTF::VectorBuffer.332" = type { %"class.WTF::VectorBufferBase.333" }
%"class.WTF::VectorBufferBase.333" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.346" }
%"class.std::__1::unique_ptr.346" = type { %"class.std::__1::__compressed_pair.347" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"struct.std::__1::__compressed_pair_elem.348" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.235"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.242"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.249"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.256"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.263"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.598" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.599" }
%"struct.std::__1::__compressed_pair_elem.599" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.352" = type { %"class.std::__1::__compressed_pair.353" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.354" }
%"struct.std::__1::__compressed_pair_elem.354" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.358" = type { %"class.std::__1::__compressed_pair.359" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.364 }
%class.scoped_refptr.364 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.365" = type { %"struct.std::__1::__atomic_base.366" }
%"struct.std::__1::__atomic_base.366" = type { %"struct.std::__1::__cxx_atomic_impl.367" }
%"struct.std::__1::__cxx_atomic_impl.367" = type { %"struct.std::__1::__cxx_atomic_base_impl.368" }
%"struct.std::__1::__cxx_atomic_base_impl.368" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.140" }
%"struct.std::__1::atomic.140" = type { %"struct.std::__1::__atomic_base.141" }
%"struct.std::__1::__atomic_base.141" = type { %"struct.std::__1::__atomic_base.142" }
%"struct.std::__1::__atomic_base.142" = type { %"struct.std::__1::__cxx_atomic_impl.143" }
%"struct.std::__1::__cxx_atomic_impl.143" = type { %"struct.std::__1::__cxx_atomic_base_impl.144" }
%"struct.std::__1::__cxx_atomic_base_impl.144" = type { i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::MarkupAccumulator" = type <{ i32 (...)**, %"class.blink::MarkupFormatter", %"class.WTF::StringBuilder", i32, [4 x i8], %"class.blink::HeapHashSet", %"class.WTF::Vector.7", i32, [4 x i8] }>
%"class.blink::MarkupFormatter" = type { i32, i32 }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::Member"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase.740" }
%"class.blink::MemberBase.740" = type { %"class.blink::ShadowRoot"* }
%"class.blink::ShadowRoot" = type <{ %"class.blink::DocumentFragment", %"class.blink::TreeScope", %"class.blink::Member.410", %"class.blink::Member.734", i32, [4 x i8] }>
%"class.blink::DocumentFragment" = type { %"class.blink::ContainerNode" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.27", %"class.blink::Member.27" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.27", %"class.blink::Member.28", %"class.blink::Member.27", %"class.blink::Member.27", %"class.blink::Member.30" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.28" = type { %"class.blink::MemberBase.29" }
%"class.blink::MemberBase.29" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.30" = type { %"class.blink::MemberBase.31" }
%"class.blink::MemberBase.31" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.27" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.34", %"class.blink::Member.36", %"class.blink::Member.28", %"class.blink::Member.38", %"class.blink::Member.38", %"class.blink::Member.76", %"class.blink::Member.78", %"class.blink::Member.80", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.85", %"class.blink::HeapVector.87" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.34" = type { %"class.blink::MemberBase.35" }
%"class.blink::MemberBase.35" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.36" = type { %"class.blink::MemberBase.37" }
%"class.blink::MemberBase.37" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.136", %"class.WTF::Vector.136", i8, i32, %"class.blink::Member.147", %"class.blink::Member.149", %"class.blink::Member.151", %"class.blink::Member.153", %"class.blink::Member.155", %"class.blink::Member.157", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.160", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.166", %"class.blink::Member.168", %"class.blink::Member.93", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.171", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.52", %"class.blink::Member.381", %"class.blink::Member.52", %"class.blink::Member.52", %"class.blink::Member.52", %"class.blink::UserActionElementSet", %"class.blink::Member.390", double, double, i64, i64, %"class.blink::HeapHashSet.392", %"class.blink::HeapHashSet.399", i16, i8, %"class.blink::Member.406", %"class.blink::Member.408", %"class.blink::Member.410", %"class.blink::Member.412", %"class.blink::TextLinkColors", %"class.blink::Member.414", i8, [7 x i8], %"class.blink::HeapHashMap.416", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.52", %"class.WTF::Vector.423", %"class.blink::Member.428", %"class.blink::Member.430", i8, %"class.blink::Member.52", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.432", %"class.blink::HeapVector.434", %"class.std::__1::unique_ptr.442", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.448", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.461", %"class.WTF::Vector.463", i8, i8, %"class.std::__1::unique_ptr.468", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.474", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.482", i8, i32, %"class.blink::Member.484", %"class.blink::Member.486", %"class.blink::Member.488", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.490", %"class.WTF::HashMap.492", %"class.blink::Member.497", %"class.blink::Member.499", %"class.blink::Member.501", %"class.blink::Member.503", %"class.blink::Member.36", %"class.blink::Member.36", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.505", i8, i32, %"class.blink::Member.512", %"class.blink::Member.514", i32, %"class.blink::Member.516", %"class.blink::Member.518", %"class.blink::Member.520", %"class.std::__1::unique_ptr.522", i64, %"class.std::__1::unique_ptr.528", i32, i32, %"class.blink::Member.534", %"class.blink::Member.536", %"class.blink::Member.538", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.540", %"class.WTF::Vector.542", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.547", %"class.blink::Member.554", %"class.std::__1::unique_ptr.556", %"class.blink::Member.562", i8, i8, %"class.WTF::String", %"class.blink::Member.564", i8, [7 x i8], %"class.blink::HeapHashMap.566", %"class.blink::HeapObserverSet", %"class.blink::Member.580", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.582", i32, i8, i8, %"class.blink::WeakMember.584", %"class.blink::Member.585" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.129" }
%"class.blink::HeapHashMap.129" = type { %"class.WTF::HashMap.132" }
%"class.WTF::HashMap.132" = type { %"class.WTF::HashTable.133" }
%"class.WTF::HashTable.133" = type <{ %"struct.WTF::KeyValuePair.135"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.135" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.136" = type { %"class.WTF::VectorBuffer.137" }
%"class.WTF::VectorBuffer.137" = type { %"class.WTF::VectorBufferBase.138" }
%"class.WTF::VectorBufferBase.138" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.139 }
%class.scoped_refptr.139 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.140" }
%"class.blink::Member.147" = type { %"class.blink::MemberBase.148" }
%"class.blink::MemberBase.148" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.149" = type { %"class.blink::MemberBase.150" }
%"class.blink::MemberBase.150" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.603", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.672", i32, i8, [3 x i8], %"class.blink::HeapVector.674", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.682", %"class.blink::Member.684", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.693", %"class.blink::Member.699", %"class.blink::Member.701", i8, [7 x i8] }>
%"class.blink::Supplementable.603" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.604" }
%"class.blink::HeapHashMap.604" = type { %"class.WTF::HashMap.607" }
%"class.WTF::HashMap.607" = type { %"class.WTF::HashTable.608" }
%"class.WTF::HashTable.608" = type <{ %"struct.WTF::KeyValuePair.610"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.610" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.619" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.611" }
%"class.blink::HeapObserverSet.611" = type { i32, [4 x i8], %"class.blink::HeapHashSet.612" }
%"class.blink::HeapHashSet.612" = type { %"class.WTF::HashSet.615" }
%"class.WTF::HashSet.615" = type { %"class.WTF::HashTable.616" }
%"class.WTF::HashTable.616" = type <{ %"class.blink::WeakMember.618"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.618" = type opaque
%"class.blink::Supplementable.619" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.620" }
%"class.blink::HeapHashMap.620" = type { %"class.WTF::HashMap.623" }
%"class.WTF::HashMap.623" = type { %"class.WTF::HashTable.624" }
%"class.WTF::HashTable.624" = type <{ %"struct.WTF::KeyValuePair.626"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.626" = type { i8*, %"class.blink::Member.736" }
%"class.blink::Member.736" = type { %"class.blink::MemberBase.737" }
%"class.blink::MemberBase.737" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.738" }
%"class.blink::Member.738" = type { %"class.blink::MemberBase.739" }
%"class.blink::MemberBase.739" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.627, %"class.std::__1::unique_ptr.632", %"class.std::__1::unique_ptr.632", %"class.std::__1::unique_ptr.662", %"class.std::__1::unique_ptr.662", %"class.blink::Member.149", i32, [4 x i8], %"class.WTF::HashSet.668", i32, i32 }
%class.scoped_refptr.627 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.628", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.631 }
%"class.WTF::RefCounted.628" = type { %"class.base::RefCounted.629" }
%"class.base::RefCounted.629" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.630 }
%union.anon.630 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.631 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.632" = type { %"class.std::__1::__compressed_pair.633" }
%"class.std::__1::__compressed_pair.633" = type { %"struct.std::__1::__compressed_pair_elem.634" }
%"struct.std::__1::__compressed_pair_elem.634" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type { %"class.url::Origin", %"class.std::__1::map", %"class.std::__1::map.649", %"class.std::__1::map.658"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.635" }
%"class.std::__1::__compressed_pair.635" = type { %"struct.std::__1::__compressed_pair_elem.636" }
%"struct.std::__1::__compressed_pair_elem.636" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.637 }
%union.anon.637 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.641", %"class.std::__1::__compressed_pair.646" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.646" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"class.std::__1::map.649" = type { %"class.std::__1::__tree.650" }
%"class.std::__1::__tree.650" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.651", %"class.std::__1::__compressed_pair.655" }
%"class.std::__1::__compressed_pair.651" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"class.std::__1::__compressed_pair.655" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"class.std::__1::map.658" = type opaque
%"class.std::__1::unique_ptr.662" = type { %"class.std::__1::__compressed_pair.663" }
%"class.std::__1::__compressed_pair.663" = type { %"struct.std::__1::__compressed_pair_elem.664" }
%"struct.std::__1::__compressed_pair_elem.664" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.668" = type { %"class.WTF::HashTable.669" }
%"class.WTF::HashTable.669" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.672" = type { %"class.blink::MemberBase.673" }
%"class.blink::MemberBase.673" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.674" = type { %"class.WTF::Vector.677" }
%"class.WTF::Vector.677" = type { %"class.WTF::VectorBuffer.678" }
%"class.WTF::VectorBuffer.678" = type { %"class.WTF::VectorBufferBase.679" }
%"class.WTF::VectorBufferBase.679" = type { %"class.blink::Member.680"*, i32, i32 }
%"class.blink::Member.680" = type opaque
%"class.blink::Member.682" = type { %"class.blink::MemberBase.683" }
%"class.blink::MemberBase.683" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.684" = type { %"class.blink::MemberBase.685" }
%"class.blink::MemberBase.685" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.686", i32, i32 }
%"class.blink::HeapHashMap.686" = type { %"class.WTF::HashMap.689" }
%"class.WTF::HashMap.689" = type { %"class.WTF::HashTable.690" }
%"class.WTF::HashTable.690" = type <{ %"struct.WTF::KeyValuePair.692"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.692" = type opaque
%"class.std::__1::unique_ptr.693" = type { %"class.std::__1::__compressed_pair.694" }
%"class.std::__1::__compressed_pair.694" = type { %"struct.std::__1::__compressed_pair_elem.695" }
%"struct.std::__1::__compressed_pair_elem.695" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.699" = type { %"class.blink::MemberBase.700" }
%"class.blink::MemberBase.700" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.701" = type { %"class.blink::MemberBase.702" }
%"class.blink::MemberBase.702" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.151" = type { %"class.blink::MemberBase.152" }
%"class.blink::MemberBase.152" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.153" = type { %"class.blink::MemberBase.154" }
%"class.blink::MemberBase.154" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.155" = type { %"class.blink::MemberBase.156" }
%"class.blink::MemberBase.156" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.157" = type { %"class.blink::MemberBase.158" }
%"class.blink::MemberBase.158" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.166" = type { %"class.blink::MemberBase.167" }
%"class.blink::MemberBase.167" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type { %"class.blink::Node", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::Member.168" = type { %"class.blink::MemberBase.169" }
%"class.blink::MemberBase.169" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.93" = type { %"class.blink::MemberBase.94" }
%"class.blink::MemberBase.94" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.95", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.97, %"class.WTF::Vector.98", %"class.WTF::Vector.98", %"class.blink::Member.27", %"class.blink::Member.103", %"class.blink::HeapHashSet.107", %"class.blink::Member.36", %"class.WTF::HashSet.113", %"class.WTF::TextPosition", %"class.blink::Member.117", %"class.blink::HeapVector.119", %"class.blink::Member.126" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.95" = type { %"class.blink::MemberBase.96" }
%"class.blink::MemberBase.96" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.97 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type opaque
%"class.WTF::Vector.98" = type { %"class.WTF::VectorBuffer.99" }
%"class.WTF::VectorBuffer.99" = type { %"class.WTF::VectorBufferBase.100" }
%"class.WTF::VectorBufferBase.100" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type opaque
%"class.blink::Member.103" = type { %"class.blink::MemberBase.104" }
%"class.blink::MemberBase.104" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.105" }
%"class.blink::Member.105" = type { %"class.blink::MemberBase.106" }
%"class.blink::MemberBase.106" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.107" = type { %"class.WTF::HashSet.110" }
%"class.WTF::HashSet.110" = type { %"class.WTF::HashTable.111" }
%"class.WTF::HashTable.111" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.29" }
%"class.WTF::HashSet.113" = type { %"class.WTF::HashTable.114" }
%"class.WTF::HashTable.114" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.117" = type { %"class.blink::MemberBase.118" }
%"class.blink::MemberBase.118" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type opaque
%"class.blink::HeapVector.119" = type { %"class.WTF::Vector.122" }
%"class.WTF::Vector.122" = type { %"class.WTF::VectorBuffer.123" }
%"class.WTF::VectorBuffer.123" = type { %"class.WTF::VectorBufferBase.124" }
%"class.WTF::VectorBufferBase.124" = type { %"class.blink::Member.103"*, i32, i32 }
%"class.blink::Member.126" = type { %"class.blink::MemberBase.127" }
%"class.blink::MemberBase.127" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.170 }
%class.scoped_refptr.170 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.171" = type { %"class.WTF::VectorBuffer.172" }
%"class.WTF::VectorBuffer.172" = type { %"class.WTF::VectorBufferBase.173" }
%"class.WTF::VectorBufferBase.173" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.174 }
%class.scoped_refptr.174 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.175", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.175" = type { %"class.base::RefCounted.176" }
%"class.base::RefCounted.176" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.179" }
%"class.blink::HeapHashMap.179" = type { %"class.WTF::HashMap.182" }
%"class.WTF::HashMap.182" = type { %"class.WTF::HashTable.183" }
%"class.WTF::HashTable.183" = type <{ %"struct.WTF::KeyValuePair.185"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.185" = type { %"class.blink::WeakMember.186", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.186" = type { %"class.blink::MemberBase.187" }
%"class.blink::MemberBase.187" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::Member.381" = type { %"class.blink::MemberBase.382" }
%"class.blink::MemberBase.382" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.36", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.27", %"class.blink::Member.27", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.383" }
%"class.blink::HeapHashMap.383" = type { %"class.WTF::HashMap.386" }
%"class.WTF::HashMap.386" = type { %"class.WTF::HashTable.387" }
%"class.WTF::HashTable.387" = type <{ %"struct.WTF::KeyValuePair.389"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.389" = type opaque
%"class.blink::Member.390" = type { %"class.blink::MemberBase.391" }
%"class.blink::MemberBase.391" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.392" = type { %"class.WTF::HashSet.395" }
%"class.WTF::HashSet.395" = type { %"class.WTF::HashTable.396" }
%"class.WTF::HashTable.396" = type <{ %"class.blink::WeakMember.398"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.398" = type opaque
%"class.blink::HeapHashSet.399" = type { %"class.WTF::HashSet.402" }
%"class.WTF::HashSet.402" = type { %"class.WTF::HashTable.403" }
%"class.WTF::HashTable.403" = type <{ %"class.blink::WeakMember.405"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.405" = type opaque
%"class.blink::Member.406" = type { %"class.blink::MemberBase.407" }
%"class.blink::MemberBase.407" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.408" = type { %"class.blink::MemberBase.409" }
%"class.blink::MemberBase.409" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.412" = type { %"class.blink::MemberBase.413" }
%"class.blink::MemberBase.413" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.414" = type { %"class.blink::MemberBase.415" }
%"class.blink::MemberBase.415" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.416" = type { %"class.WTF::HashMap.419" }
%"class.WTF::HashMap.419" = type { %"class.WTF::HashTable.420" }
%"class.WTF::HashTable.420" = type <{ %"struct.WTF::KeyValuePair.422"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.422" = type opaque
%"class.WTF::Vector.423" = type { %"class.WTF::VectorBuffer.424" }
%"class.WTF::VectorBuffer.424" = type { %"class.WTF::VectorBufferBase.425" }
%"class.WTF::VectorBufferBase.425" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.428" = type { %"class.blink::MemberBase.429" }
%"class.blink::MemberBase.429" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.430" = type { %"class.blink::MemberBase.431" }
%"class.blink::MemberBase.431" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.52" = type { %"class.blink::MemberBase.53" }
%"class.blink::MemberBase.53" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.55" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.55" = type { %"class.blink::MemberBase.56" }
%"class.blink::MemberBase.56" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.59", %"class.blink::Member.61", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.59" = type { %"class.WTF::SingleThreadedBitField.60" }
%"class.WTF::SingleThreadedBitField.60" = type { i32 }
%"class.blink::Member.61" = type { %"class.blink::MemberBase.62" }
%"class.blink::MemberBase.62" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.63 }
%class.scoped_refptr.63 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.64", %"class.WTF::AtomicString", %"class.WTF::Vector.66" }
%"class.WTF::RefCounted.64" = type { %"class.base::RefCounted.65" }
%"class.base::RefCounted.65" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.66" = type { %"class.WTF::VectorBuffer.67" }
%"class.WTF::VectorBuffer.67" = type { %"class.WTF::VectorBufferBase.20", [32 x i8] }
%"class.WTF::VectorBufferBase.20" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.432" = type { %"class.blink::MemberBase.433" }
%"class.blink::MemberBase.433" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.434" = type { %"class.WTF::Vector.437" }
%"class.WTF::Vector.437" = type { %"class.WTF::VectorBuffer.438" }
%"class.WTF::VectorBuffer.438" = type { %"class.WTF::VectorBufferBase.439" }
%"class.WTF::VectorBufferBase.439" = type { %"class.blink::Member.440"*, i32, i32 }
%"class.blink::Member.440" = type opaque
%"class.std::__1::unique_ptr.442" = type { %"class.std::__1::__compressed_pair.443" }
%"class.std::__1::__compressed_pair.443" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"struct.std::__1::__compressed_pair_elem.444" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.448" = type { %"class.WTF::HashSet.451" }
%"class.WTF::HashSet.451" = type { %"class.WTF::HashTable.452" }
%"class.WTF::HashTable.452" = type <{ %"class.blink::WeakMember.454"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.454" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.455", i32, [4 x i8] }>
%"class.WTF::Vector.455" = type { %"class.WTF::VectorBuffer.456" }
%"class.WTF::VectorBuffer.456" = type { %"class.WTF::VectorBufferBase.457" }
%"class.WTF::VectorBufferBase.457" = type { %"struct.std::__1::pair.458"*, i32, i32 }
%"struct.std::__1::pair.458" = type opaque
%"class.blink::Member.461" = type { %"class.blink::MemberBase.462" }
%"class.blink::MemberBase.462" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.463" = type { %"class.WTF::VectorBuffer.464" }
%"class.WTF::VectorBuffer.464" = type { %"class.WTF::VectorBufferBase.465" }
%"class.WTF::VectorBufferBase.465" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.72" }
%"class.WTF::Vector.72" = type { %"class.WTF::VectorBuffer.73" }
%"class.WTF::VectorBuffer.73" = type { %"class.WTF::VectorBufferBase.74" }
%"class.WTF::VectorBufferBase.74" = type { %"class.blink::Member.52"*, i32, i32 }
%"class.blink::HeapVector.474" = type { %"class.WTF::Vector.477" }
%"class.WTF::Vector.477" = type { %"class.WTF::VectorBuffer.478" }
%"class.WTF::VectorBuffer.478" = type { %"class.WTF::VectorBufferBase.479" }
%"class.WTF::VectorBufferBase.479" = type { %"class.blink::Member.480"*, i32, i32 }
%"class.blink::Member.480" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.36" }
%"class.blink::Member.482" = type { %"class.blink::MemberBase.483" }
%"class.blink::MemberBase.483" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.484" = type { %"class.blink::MemberBase.485" }
%"class.blink::MemberBase.485" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.486" = type { %"class.blink::MemberBase.487" }
%"class.blink::MemberBase.487" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.488" = type { %"class.blink::MemberBase.489" }
%"class.blink::MemberBase.489" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.490" = type { %"class.blink::MemberBase.491" }
%"class.blink::MemberBase.491" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.492" = type { %"class.WTF::HashTable.493" }
%"class.WTF::HashTable.493" = type <{ %"struct.WTF::KeyValuePair.496"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.496" = type opaque
%"class.blink::Member.497" = type { %"class.blink::MemberBase.498" }
%"class.blink::MemberBase.498" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.499" = type { %"class.blink::MemberBase.500" }
%"class.blink::MemberBase.500" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.501" = type { %"class.blink::MemberBase.502" }
%"class.blink::MemberBase.502" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.503" = type { %"class.blink::MemberBase.504" }
%"class.blink::MemberBase.504" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.380", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.371, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.371 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.372" }>
%"class.base::RefCountedThreadSafe.372" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.373 }
%class.scoped_refptr.373 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.374", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.374" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.375" }
%"struct.std::__1::atomic.375" = type { %"struct.std::__1::__atomic_base.376" }
%"struct.std::__1::__atomic_base.376" = type { %"struct.std::__1::__atomic_base.377" }
%"struct.std::__1::__atomic_base.377" = type { %"struct.std::__1::__cxx_atomic_impl.378" }
%"struct.std::__1::__cxx_atomic_impl.378" = type { %"struct.std::__1::__cxx_atomic_base_impl.379" }
%"struct.std::__1::__cxx_atomic_base_impl.379" = type { i8 }
%"class.blink::WeakMember.380" = type { %"class.blink::MemberBase.37" }
%"class.blink::HeapHashSet.505" = type { %"class.WTF::HashSet.508" }
%"class.WTF::HashSet.508" = type { %"class.WTF::HashTable.509" }
%"class.WTF::HashTable.509" = type <{ %"class.blink::Member.511"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.511" = type opaque
%"class.blink::Member.512" = type { %"class.blink::MemberBase.513" }
%"class.blink::MemberBase.513" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.514" = type { %"class.blink::MemberBase.515" }
%"class.blink::MemberBase.515" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.516" = type { %"class.blink::MemberBase.517" }
%"class.blink::MemberBase.517" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.518" = type { %"class.blink::MemberBase.519" }
%"class.blink::MemberBase.519" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.520" = type { %"class.blink::MemberBase.521" }
%"class.blink::MemberBase.521" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.522" = type { %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.528" = type { %"class.std::__1::__compressed_pair.529" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.534" = type { %"class.blink::MemberBase.535" }
%"class.blink::MemberBase.535" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.536" = type { %"class.blink::MemberBase.537" }
%"class.blink::MemberBase.537" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.538" = type { %"class.blink::MemberBase.539" }
%"class.blink::MemberBase.539" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.540" = type { %"class.blink::MemberBase.541" }
%"class.blink::MemberBase.541" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.542" = type { %"class.WTF::VectorBuffer.543" }
%"class.WTF::VectorBuffer.543" = type { %"class.WTF::VectorBufferBase.544" }
%"class.WTF::VectorBufferBase.544" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.547" = type { %"class.WTF::HashMap.550" }
%"class.WTF::HashMap.550" = type { %"class.WTF::HashTable.551" }
%"class.WTF::HashTable.551" = type <{ %"struct.WTF::KeyValuePair.553"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.553" = type opaque
%"class.blink::Member.554" = type { %"class.blink::MemberBase.555" }
%"class.blink::MemberBase.555" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.562" = type { %"class.blink::MemberBase.563" }
%"class.blink::MemberBase.563" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.564" = type { %"class.blink::MemberBase.565" }
%"class.blink::MemberBase.565" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.566" = type { %"class.WTF::HashMap.569" }
%"class.WTF::HashMap.569" = type { %"class.WTF::HashTable.570" }
%"class.WTF::HashTable.570" = type <{ %"struct.WTF::KeyValuePair.572"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.572" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.573" }
%"class.blink::HeapHashSet.573" = type { %"class.WTF::HashSet.576" }
%"class.WTF::HashSet.576" = type { %"class.WTF::HashTable.577" }
%"class.WTF::HashTable.577" = type <{ %"class.blink::WeakMember.579"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.579" = type opaque
%"class.blink::Member.580" = type { %"class.blink::MemberBase.581" }
%"class.blink::MemberBase.581" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.582" = type { %"class.blink::MemberBase.583" }
%"class.blink::MemberBase.583" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.36", %"class.blink::HeapHashSet.589", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.596", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.589" = type { %"class.WTF::HashSet.592" }
%"class.WTF::HashSet.592" = type { %"class.WTF::HashTable.593" }
%"class.WTF::HashTable.593" = type <{ %"class.blink::Member.595"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.595" = type opaque
%"class.blink::HeapTaskRunnerTimer.596" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.597", { i64, i64 } }
%"class.blink::WeakMember.597" = type { %"class.blink::MemberBase.583" }
%"class.blink::WeakMember.584" = type { %"class.blink::MemberBase" }
%"class.blink::Member.585" = type { %"class.blink::MemberBase.586" }
%"class.blink::MemberBase.586" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.38" = type { %"class.blink::MemberBase.39" }
%"class.blink::MemberBase.39" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.44" }
%"class.WTF::HashMap.44" = type { %"class.WTF::HashTable.45" }
%"class.WTF::HashTable.45" = type <{ %"struct.WTF::KeyValuePair.47"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.47" = type { %"class.WTF::AtomicString", %"class.blink::Member.48" }
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.52", i32, %"class.blink::HeapVector" }
%"class.blink::Member.76" = type { %"class.blink::MemberBase.77" }
%"class.blink::MemberBase.77" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.78" = type { %"class.blink::MemberBase.79" }
%"class.blink::MemberBase.79" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.80" = type { %"class.blink::MemberBase.81" }
%"class.blink::MemberBase.81" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.82" }
%"class.blink::Member.82" = type { %"class.blink::MemberBase.83" }
%"class.blink::MemberBase.83" = type { %"class.blink::HeapHashMap.84"* }
%"class.blink::HeapHashMap.84" = type opaque
%"class.blink::Member.85" = type { %"class.blink::MemberBase.86" }
%"class.blink::MemberBase.86" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.87" = type { %"class.WTF::Vector.90" }
%"class.WTF::Vector.90" = type { %"class.WTF::VectorBuffer.91" }
%"class.WTF::VectorBuffer.91" = type { %"class.WTF::VectorBufferBase.92" }
%"class.WTF::VectorBufferBase.92" = type { %"class.blink::Member.93"*, i32, i32 }
%"class.blink::Member.410" = type { %"class.blink::MemberBase.411" }
%"class.blink::MemberBase.411" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.28", %"class.blink::HeapVector.87" }
%"class.blink::Member.734" = type { %"class.blink::MemberBase.735" }
%"class.blink::MemberBase.735" = type { %"class.blink::SlotAssignment"* }
%"class.blink::SlotAssignment" = type opaque
%"class.WTF::Vector.7" = type { %"class.WTF::VectorBuffer.8" }
%"class.WTF::VectorBuffer.8" = type { %"class.WTF::VectorBufferBase.9" }
%"class.WTF::VectorBufferBase.9" = type { %"class.blink::MarkupAccumulator::NamespaceContext"*, i32, i32 }
%"class.blink::MarkupAccumulator::NamespaceContext" = type { %"class.WTF::HashMap", %"class.WTF::HashMap.13", %"class.WTF::AtomicString" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.10" }
%"class.WTF::HashTable.10" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::HashMap.13" = type { %"class.WTF::HashTable.14" }
%"class.WTF::HashTable.14" = type <{ %"struct.WTF::KeyValuePair.17"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.17" = type { %"class.WTF::AtomicString", %"class.WTF::Vector.18" }
%"class.WTF::Vector.18" = type { %"class.WTF::VectorBuffer.19" }
%"class.WTF::VectorBuffer.19" = type { %"class.WTF::VectorBufferBase.20" }
%"class.blink::Text" = type { %"class.blink::CharacterData" }
%"class.blink::CharacterData" = type { %"class.blink::Node", i8, %"class.blink::ParkableString", %"class.WTF::String" }
%"class.blink::ParkableString" = type { %class.scoped_refptr.703 }
%class.scoped_refptr.703 = type { %"class.blink::ParkableStringImpl"* }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted.704", %"class.WTF::String", %"class.std::__1::unique_ptr.706" }
%"class.WTF::RefCounted.704" = type { %"class.base::RefCounted.705" }
%"class.base::RefCounted.705" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.706" = type { %"class.std::__1::__compressed_pair.707" }
%"class.std::__1::__compressed_pair.707" = type { %"struct.std::__1::__compressed_pair_elem.708" }
%"struct.std::__1::__compressed_pair_elem.708" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.709", %"class.std::__1::unique_ptr.719", %"class.WTF::Vector.725", i8, i32 }
%"class.std::__1::unique_ptr.709" = type { %"class.std::__1::__compressed_pair.710" }
%"class.std::__1::__compressed_pair.710" = type { %"struct.std::__1::__compressed_pair_elem.711" }
%"struct.std::__1::__compressed_pair_elem.711" = type { %"class.WTF::Vector.712"* }
%"class.WTF::Vector.712" = type { %"class.WTF::VectorBuffer.713" }
%"class.WTF::VectorBuffer.713" = type { %"class.WTF::VectorBufferBase" }
%"class.std::__1::unique_ptr.719" = type { %"class.std::__1::__compressed_pair.720" }
%"class.std::__1::__compressed_pair.720" = type { %"struct.std::__1::__compressed_pair_elem.721" }
%"struct.std::__1::__compressed_pair_elem.721" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.725" = type { %"class.WTF::VectorBuffer.726" }
%"class.WTF::VectorBuffer.726" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.blink::Attr" = type { %"class.blink::Node", %"class.blink::Member.52", %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::HTMLTemplateElement" = type <{ %"class.blink::HTMLElement", %"class.blink::Member.804", i32, [4 x i8] }>
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::Member.804" = type { %"class.blink::MemberBase.805" }
%"class.blink::MemberBase.805" = type { %"class.blink::TemplateContentDocumentFragment"* }
%"class.blink::TemplateContentDocumentFragment" = type opaque
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.61", %"class.WTF::Vector.771" }
%"class.WTF::Vector.771" = type { %"class.WTF::VectorBuffer.772" }
%"class.WTF::VectorBuffer.772" = type { %"class.WTF::VectorBufferBase.773", [64 x i8] }
%"class.WTF::VectorBufferBase.773" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.WTF::StringAppend" = type { %"class.WTF::String", %"class.WTF::AtomicString" }
%"class.WTF::StringTypeAdapter" = type { %"class.WTF::StringTypeAdapter.797" }
%"class.WTF::StringTypeAdapter.797" = type { %"class.WTF::StringView" }
%"class.WTF::StringTypeAdapter.798" = type { %"class.WTF::StringTypeAdapter.797" }
%"class.WTF::IntegerToStringConverter" = type <{ [12 x i8], [4 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringAppend.732" = type { i8*, %"class.WTF::String" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::HeapHashTableBacking" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::StringTypeAdapter.803" = type <{ i8*, i32, [4 x i8] }>

$_ZN5blink17MarkupAccumulator14SerializeNodesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEN3WTF6StringERKNS_4NodeENS_12ChildrenOnlyE = comdat any

$_ZN5blink17MarkupAccumulator28SerializeNodesWithNamespacesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEvRKNS_4NodeENS_12ChildrenOnlyE = comdat any

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN5blink17MarkupAccumulator16NamespaceContext26RecordNamespaceInformationERKNS_7ElementE = comdat any

$_ZN3WTFplINS_12AtomicStringEEENS_12StringAppendINS_6StringET_EERKS3_S4_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEEcvS1_Ev = comdat any

$_ZN5blink17MarkupAccumulator16NamespaceContextC2ERKS1_ = comdat any

$_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev = comdat any

$_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_ = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm = comdat any

$_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES5_NS1_17IdentityExtractorENS1_10MemberHashIS4_EENS1_10HashTraitsIS5_EESA_NS_13HeapAllocatorEEEE14AllocateObjectISD_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_10ShadowRootEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKS4_SG_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8ReinsertEOS3_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS5_S9_SA_EERKS1_RKS3_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_ = comdat any

$_ZN3WTF12KeyValuePairINS_12AtomicStringES1_EaSERKS2_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_ = comdat any

$_ZN3WTF5MoverINS_12KeyValuePairINS_12AtomicStringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_ = comdat any

$_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm = comdat any

$_ZNK3WTF7HashMapINS_12AtomicStringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_16AtomicStringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERKS1_SG_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_ = comdat any

$_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_12AtomicStringEEES4_EENS_16AtomicStringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S3_EERKS3_SD_EEvRT_OT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_S5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF12StringAppendINS_6StringENS_12AtomicStringEEC2ES1_S2_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEE6lengthEv = comdat any

$_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink17MarkupAccumulator16NamespaceContextEEEmm = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEEcvS3_Ev = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_7ElementEE4CallIJRKNS_17HTMLQualifiedNameEPNS_8DocumentEEEEPS1_DpOT_ = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

@_ZN3WTF10g_xml_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink9xml_names13kNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZTVN5blink17MarkupAccumulatorE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::MarkupAccumulator"*)* @_ZN5blink17MarkupAccumulatorD2Ev to i8*), i8* bitcast (void (%"class.blink::MarkupAccumulator"*)* @_ZN5blink17MarkupAccumulatorD0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)* @_ZN5blink17MarkupAccumulator13AppendElementERKNS_7ElementE to i8*), i8* bitcast (void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZN5blink17MarkupAccumulator15AppendAttributeERKNS_7ElementERKNS_9AttributeE to i8*), i8* bitcast (void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)* @_ZN5blink17MarkupAccumulator22AppendCustomAttributesERKNS_7ElementE to i8*), i8* bitcast (i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZNK5blink17MarkupAccumulator21ShouldIgnoreAttributeERKNS_7ElementERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)* @_ZNK5blink17MarkupAccumulator19ShouldIgnoreElementERKNS_7ElementE to i8*), i8* bitcast ({ %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)* @_ZNK5blink17MarkupAccumulator19GetAuxiliaryDOMTreeERKNS_7ElementE to i8*)] }, align 8
@_ZN5blink10html_names7kIsAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink11xmlns_names13kNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN3WTF18g_xmlns_with_colonE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@_ZN3WTF12g_xmlns_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [3 x i8] c"ns\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"closed\00", align 1
@_ZN5blink10html_names12kTemplateTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names15kShadowrootAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names29kShadowrootdelegatesfocusAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.3 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.6 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.7 = private unnamed_addr constant [97 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_hash_table_backing.h\00", align 1
@_ZN5blink11ThreadState26main_thread_state_storage_E = external local_unnamed_addr global [0 x i8], align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.9 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.10 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.11 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF12g_empty_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringES2_EEEEPKcv = private unnamed_addr constant [103 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::AtomicString, WTF::AtomicString>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [145 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::AtomicString, WTF::Vector<WTF::AtomicString, 0, WTF::PartitionAllocator> >]\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.13 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@.str.14 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.17 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17MarkupAccumulator16NamespaceContextEEEPKcv = private unnamed_addr constant [90 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::MarkupAccumulator::NamespaceContext]\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4

@_ZN5blink17MarkupAccumulatorC1ENS_12AbsoluteURLsENS_17SerializationTypeENS_18IncludeShadowRootsENS_11HeapHashSetINS_6MemberINS_10ShadowRootEEEN3WTF10MemberHashIS6_EENS8_10HashTraitsIS7_EEEE = hidden unnamed_addr alias void (%"class.blink::MarkupAccumulator"*, i32, i32, i32, %"class.blink::HeapHashSet"*), void (%"class.blink::MarkupAccumulator"*, i32, i32, i32, %"class.blink::HeapHashSet"*)* @_ZN5blink17MarkupAccumulatorC2ENS_12AbsoluteURLsENS_17SerializationTypeENS_18IncludeShadowRootsENS_11HeapHashSetINS_6MemberINS_10ShadowRootEEEN3WTF10MemberHashIS6_EENS8_10HashTraitsIS7_EEEE
@_ZN5blink17MarkupAccumulatorD1Ev = hidden unnamed_addr alias void (%"class.blink::MarkupAccumulator"*), void (%"class.blink::MarkupAccumulator"*)* @_ZN5blink17MarkupAccumulatorD2Ev

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator14SerializeNodesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEN3WTF6StringERKNS_4NodeENS_12ChildrenOnlyE(%"class.blink::MarkupAccumulator"*, %"class.blink::Node"* dereferenceable(64), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %4) #10
  br i1 %5, label %62, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, 1
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, %10
  br i1 %13, label %14, label %36

14:                                               ; preds = %6
  %15 = lshr i32 %12, 2
  %16 = add nuw i32 %12, 1
  %17 = add i32 %16, %15
  %18 = icmp ugt i32 %17, 4
  %19 = select i1 %18, i32 %17, i32 4
  %20 = icmp ugt i32 %19, %10
  %21 = select i1 %20, i32 %19, i32 %10
  %22 = icmp ult i32 %12, %21
  br i1 %22, label %23, label %36, !prof !2

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %7, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %24, align 8
  %26 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %25, null
  br i1 %26, label %27, label %35

27:                                               ; preds = %23
  %28 = zext i32 %21 to i64
  %29 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink17MarkupAccumulator16NamespaceContextEEEmm(i64 %28) #10
  %30 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %29, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17MarkupAccumulator16NamespaceContextEEEPKcv, i64 0, i64 0)) #10
  %31 = ptrtoint i8* %30 to i64
  %32 = bitcast %"class.WTF::Vector.7"* %7 to i64*
  store atomic i64 %31, i64* %32 monotonic, align 8
  %33 = udiv i64 %29, 56
  %34 = trunc i64 %33 to i32
  store i32 %34, i32* %11, align 8
  br label %36

35:                                               ; preds = %23
  tail call void @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.7"* %7, i32 %21) #10
  br label %36

36:                                               ; preds = %35, %27, %14, %6
  %37 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %7, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %37, align 8
  %39 = load i32, i32* %8, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %38, i64 %40
  %42 = icmp eq i32 %39, %10
  br i1 %42, label %54, label %43

43:                                               ; preds = %36
  %44 = zext i32 %10 to i64
  %45 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %38, i64 %44
  %46 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %41 to i8*
  %47 = ptrtoint %"class.blink::MarkupAccumulator::NamespaceContext"* %41 to i64
  %48 = getelementptr %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %45, i64 -1, i32 0, i32 0, i32 0
  %49 = ptrtoint %"struct.WTF::KeyValuePair"** %48 to i64
  %50 = sub i64 %49, %47
  %51 = urem i64 %50, 56
  %52 = add i64 %50, 56
  %53 = sub i64 %52, %51
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 %53, i1 false) #10
  br label %54

54:                                               ; preds = %36, %43
  store i32 %10, i32* %8, align 4
  %55 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %7, i32 %9) #10
  %56 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF10g_xml_atomE, align 8
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink9xml_names13kNamespaceURIE, align 8
  %58 = load i32, i32* %8, align 4
  %59 = add i32 %58, -1
  %60 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %7, i32 %59) #10
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"* %60, %"class.WTF::AtomicString"* dereferenceable(8) %56, %"class.WTF::AtomicString"* dereferenceable(8) %57) #10
  %61 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 7
  store i32 1, i32* %61, align 8
  br label %62

62:                                               ; preds = %54, %3
  tail call void @_ZN5blink17MarkupAccumulator28SerializeNodesWithNamespacesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEvRKNS_4NodeENS_12ChildrenOnlyE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Node"* dereferenceable(64) %1, i32 %2)
  %63 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %64 = tail call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* %63) #10
  ret %"class.WTF::StringImpl"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink17MarkupAccumulator15SerializeAsHTMLEv(%"class.blink::MarkupAccumulator"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %3 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %2) #10
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator9AddPrefixERKN3WTF12AtomicStringES4_(%"class.blink::MarkupAccumulator"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %5 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, -1
  %8 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %4, i32 %7) #10
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"* %8, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17MarkupAccumulator28SerializeNodesWithNamespacesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEvRKNS_4NodeENS_12ChildrenOnlyE(%"class.blink::MarkupAccumulator"*, %"class.blink::Node"* dereferenceable(64), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %48, label %10

10:                                               ; preds = %3
  %11 = icmp eq i32 %2, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %10
  %13 = bitcast %"class.blink::Node"* %1 to i32 (%"class.blink::Node"*)***
  %14 = load i32 (%"class.blink::Node"*)**, i32 (%"class.blink::Node"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.blink::Node"*)*, i32 (%"class.blink::Node"*)** %14, i64 30
  %16 = load i32 (%"class.blink::Node"*)*, i32 (%"class.blink::Node"*)** %15, align 8
  %17 = tail call i32 %16(%"class.blink::Node"* %1) #10
  switch i32 %17, label %27 [
    i32 3, label %18
    i32 1, label %30
    i32 2, label %22
  ]

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %20 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %21 = bitcast %"class.blink::Node"* %1 to %"class.blink::Text"*
  tail call void @_ZN5blink15MarkupFormatter10AppendTextERN3WTF13StringBuilderERKNS_4TextE(%"class.blink::MarkupFormatter"* %19, %"class.WTF::StringBuilder"* dereferenceable(48) %20, %"class.blink::Text"* dereferenceable(88) %21) #10
  br label %30

22:                                               ; preds = %12
  %23 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %24 = bitcast %"class.blink::Node"* %1 to %"class.blink::Attr"*
  %25 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Attr5valueEv(%"class.blink::Attr"* %24) #10
  %26 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 0, i32 0
  tail call void @_ZN5blink15MarkupFormatter20AppendAttributeValueERN3WTF13StringBuilderERKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %23, %"class.WTF::String"* dereferenceable(8) %26, i1 zeroext false) #10
  br label %30

27:                                               ; preds = %12
  %28 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %29 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  tail call void @_ZN5blink15MarkupFormatter17AppendStartMarkupERN3WTF13StringBuilderERKNS_4NodeE(%"class.blink::MarkupFormatter"* %28, %"class.WTF::StringBuilder"* dereferenceable(48) %29, %"class.blink::Node"* dereferenceable(64) %1) #10
  br label %30

30:                                               ; preds = %27, %22, %18, %12, %10
  %31 = icmp eq %"class.blink::Node"* %1, null
  br i1 %31, label %215, label %32

32:                                               ; preds = %30
  %33 = load i32, i32* %6, align 8
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %215, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1
  %38 = bitcast %"class.blink::Node"* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %215, label %41

41:                                               ; preds = %36, %41
  %42 = phi i64 [ %46, %41 ], [ %39, %36 ]
  %43 = inttoptr i64 %42 to %"class.blink::Node"*
  tail call void @_ZN5blink17MarkupAccumulator28SerializeNodesWithNamespacesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEvRKNS_4NodeENS_12ChildrenOnlyE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Node"* nonnull dereferenceable(64) %43, i32 0)
  %44 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %43, i64 0, i32 5, i32 0, i32 0
  %45 = bitcast %"class.blink::Node"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %215, label %41

48:                                               ; preds = %3
  %49 = bitcast %"class.blink::Node"* %1 to %"class.blink::Element"*
  %50 = bitcast %"class.blink::MarkupAccumulator"* %0 to i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)***
  %51 = load i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)**, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %51, i64 6
  %53 = load i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %52, align 8
  %54 = tail call zeroext i1 %53(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %49) #10
  br i1 %54, label %215, label %55

55:                                               ; preds = %48
  tail call void @_ZN5blink17MarkupAccumulator14PushNamespacesERKNS_7ElementE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) undef)
  %56 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #10
  %57 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %57, align 8
  %58 = icmp ne i32 %2, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %55
  %60 = bitcast %"class.blink::MarkupAccumulator"* %0 to %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)***
  %61 = load %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)**, %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*** %60, align 8
  %62 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %61, i64 2
  %63 = load %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %62, align 8
  %64 = tail call %"class.WTF::StringImpl"* %63(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %49) #10
  %65 = ptrtoint %"class.WTF::StringImpl"* %64 to i64
  %66 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %65, i64* %66, align 8
  br label %67

67:                                               ; preds = %59, %55
  %68 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %69 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %68) #10
  br i1 %69, label %70, label %72

70:                                               ; preds = %67
  %71 = tail call zeroext i1 @_ZN5blink23ElementCannotHaveEndTagERKNS_4NodeE(%"class.blink::Node"* dereferenceable(64) %1) #10
  br i1 %71, label %181, label %72

72:                                               ; preds = %70, %67
  %73 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kTemplateTagE, align 8
  %74 = icmp eq %"class.blink::Node"* %1, null
  br i1 %74, label %111, label %75

75:                                               ; preds = %72
  %76 = load i32, i32* %6, align 8
  %77 = and i32 %76, 48
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %95

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %73, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %80, align 8
  %82 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1, i32 2
  %83 = bitcast %"class.blink::Member.27"* %82 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %84 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %84, i64 0, i32 3, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %81, i64 0, i32 3, i32 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %86, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %79
  %91 = bitcast %"class.blink::Node"* %1 to %"class.blink::HTMLTemplateElement"*
  %92 = tail call %"class.blink::DocumentFragment"* @_ZNK5blink19HTMLTemplateElement7contentEv(%"class.blink::HTMLTemplateElement"* nonnull %91) #10
  %93 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %92, i64 0, i32 0, i32 0
  %94 = icmp eq %"class.blink::DocumentFragment"* %92, null
  br i1 %94, label %111, label %95

95:                                               ; preds = %75, %79, %90
  %96 = phi %"class.blink::Node"* [ %93, %90 ], [ %1, %79 ], [ %1, %75 ]
  %97 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %96, i64 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %111, label %101

101:                                              ; preds = %95
  %102 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %96, i64 1
  %103 = bitcast %"class.blink::Node"* %102 to %"class.blink::Node"**
  %104 = load %"class.blink::Node"*, %"class.blink::Node"** %103, align 8
  %105 = icmp eq %"class.blink::Node"* %104, null
  br i1 %105, label %111, label %106

106:                                              ; preds = %101, %106
  %107 = phi %"class.blink::Node"* [ %109, %106 ], [ %104, %101 ]
  tail call void @_ZN5blink17MarkupAccumulator28SerializeNodesWithNamespacesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEvRKNS_4NodeENS_12ChildrenOnlyE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Node"* nonnull dereferenceable(64) %107, i32 0)
  %108 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %107, i64 0, i32 5, i32 0, i32 0
  %109 = load %"class.blink::Node"*, %"class.blink::Node"** %108, align 8
  %110 = icmp eq %"class.blink::Node"* %109, null
  br i1 %110, label %111, label %106

111:                                              ; preds = %106, %95, %72, %101, %90
  %112 = bitcast %"class.blink::MarkupAccumulator"* %0 to { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)***
  %113 = load { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)**, { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*** %112, align 8
  %114 = getelementptr inbounds { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %113, i64 7
  %115 = load { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, { %"class.blink::Node"*, %"class.blink::Element"* } (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %114, align 8
  %116 = tail call { %"class.blink::Node"*, %"class.blink::Element"* } %115(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %49) #10
  %117 = extractvalue { %"class.blink::Node"*, %"class.blink::Element"* } %116, 0
  %118 = extractvalue { %"class.blink::Node"*, %"class.blink::Element"* } %116, 1
  %119 = icmp eq %"class.blink::Node"* %117, null
  br i1 %119, label %174, label %120

120:                                              ; preds = %111
  %121 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121) #10
  %122 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %122, align 8
  %123 = icmp ne %"class.blink::Element"* %118, null
  br i1 %123, label %124, label %132

124:                                              ; preds = %120
  %125 = bitcast %"class.blink::MarkupAccumulator"* %0 to %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)***
  %126 = load %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)**, %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*** %125, align 8
  %127 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %126, i64 2
  %128 = load %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, %"class.WTF::StringImpl"* (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %127, align 8
  %129 = tail call %"class.WTF::StringImpl"* %128(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* nonnull dereferenceable(104) %118) #10
  %130 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %131 = bitcast %"class.WTF::AtomicString"* %5 to i64*
  store i64 %130, i64* %131, align 8
  br label %132

132:                                              ; preds = %124, %120
  %133 = phi %"class.WTF::StringImpl"* [ null, %120 ], [ %129, %124 ]
  %134 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %117, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %143, label %138

138:                                              ; preds = %132
  %139 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %117, i64 1
  %140 = bitcast %"class.blink::Node"* %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %144, %132, %138
  br i1 %123, label %151, label %157

144:                                              ; preds = %138, %144
  %145 = phi i64 [ %149, %144 ], [ %141, %138 ]
  %146 = inttoptr i64 %145 to %"class.blink::Node"*
  tail call void @_ZN5blink17MarkupAccumulator28SerializeNodesWithNamespacesINS_16EditingAlgorithmINS_13NodeTraversalEEEEEvRKNS_4NodeENS_12ChildrenOnlyE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Node"* nonnull dereferenceable(64) %146, i32 0)
  %147 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %146, i64 0, i32 5, i32 0, i32 0
  %148 = bitcast %"class.blink::Node"** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %143, label %144

151:                                              ; preds = %143
  %152 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %153 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %118, i64 0, i32 2, i32 0, i32 0
  %154 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %153, align 8
  %155 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %154, i64 0, i32 3
  call void @_ZN5blink15MarkupFormatter15AppendEndMarkupERN3WTF13StringBuilderERKNS_7ElementERKNS1_12AtomicStringES9_(%"class.blink::MarkupFormatter"* %68, %"class.WTF::StringBuilder"* dereferenceable(48) %152, %"class.blink::Element"* nonnull dereferenceable(104) %118, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %155) #10
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  br label %157

157:                                              ; preds = %151, %143
  %158 = phi %"class.WTF::StringImpl"* [ %156, %151 ], [ %133, %143 ]
  %159 = icmp eq %"class.WTF::StringImpl"* %158, null
  br i1 %159, label %173, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = and i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 0
  %166 = load i32, i32* %165, align 4
  br i1 %164, label %167, label %169

167:                                              ; preds = %160
  %168 = add i32 %166, -1
  store i32 %168, i32* %165, align 4
  br label %169

169:                                              ; preds = %167, %160
  %170 = phi i32 [ %168, %167 ], [ %166, %160 ]
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %173

172:                                              ; preds = %169
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %158) #10
  br label %173

173:                                              ; preds = %157, %169, %172
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #10
  br label %174

174:                                              ; preds = %111, %173
  br i1 %58, label %181, label %175

175:                                              ; preds = %174
  %176 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %177 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1, i32 2
  %178 = bitcast %"class.blink::Member.27"* %177 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %179 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %178, align 8
  %180 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %179, i64 0, i32 3
  call void @_ZN5blink15MarkupFormatter15AppendEndMarkupERN3WTF13StringBuilderERKNS_7ElementERKNS1_12AtomicStringES9_(%"class.blink::MarkupFormatter"* %68, %"class.WTF::StringBuilder"* dereferenceable(48) %176, %"class.blink::Element"* dereferenceable(104) %49, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* dereferenceable(8) %180) #10
  br label %181

181:                                              ; preds = %70, %174, %175
  %182 = call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %68) #10
  br i1 %182, label %198, label %183

183:                                              ; preds = %181
  %184 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %185 = load i32, i32* %184, align 4
  %186 = add i32 %185, -1
  %187 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %188 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %187, align 8
  %189 = zext i32 %185 to i64
  %190 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %188, i64 %189
  %191 = zext i32 %186 to i64
  %192 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %188, i64 %191
  br label %193

193:                                              ; preds = %193, %183
  %194 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %195, %193 ], [ %192, %183 ]
  call void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"* %194) #10
  %195 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %194, i64 1
  %196 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %195, %190
  br i1 %196, label %197, label %193

197:                                              ; preds = %193
  store i32 %186, i32* %184, align 4
  br label %198

198:                                              ; preds = %181, %197
  %199 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %200 = icmp eq %"class.WTF::StringImpl"* %199, null
  br i1 %200, label %214, label %201

201:                                              ; preds = %198
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %199, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %203 = load atomic i32, i32* %202 monotonic, align 4
  %204 = and i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %199, i64 0, i32 0
  %207 = load i32, i32* %206, align 4
  br i1 %205, label %208, label %210

208:                                              ; preds = %201
  %209 = add i32 %207, -1
  store i32 %209, i32* %206, align 4
  br label %210

210:                                              ; preds = %208, %201
  %211 = phi i32 [ %209, %208 ], [ %207, %201 ]
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %214

213:                                              ; preds = %210
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %199) #10
  br label %214

214:                                              ; preds = %198, %210, %213
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #10
  br label %215

215:                                              ; preds = %41, %32, %30, %36, %214, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulatorC2ENS_12AbsoluteURLsENS_17SerializationTypeENS_18IncludeShadowRootsENS_11HeapHashSetINS_6MemberINS_10ShadowRootEEEN3WTF10MemberHashIS6_EENS8_10HashTraitsIS7_EEEE(%"class.blink::MarkupAccumulator"*, i32, i32, i32, %"class.blink::HeapHashSet"* nocapture readonly) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink17MarkupAccumulatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  tail call void @_ZN5blink15MarkupFormatterC1ENS_12AbsoluteURLsENS_17SerializationTypeE(%"class.blink::MarkupFormatter"* %7, i32 %1, i32 %2) #10
  %8 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2, i32 1
  %10 = bitcast %union.anon* %9 to i8*
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2, i32 2
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 4
  %13 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2, i32 4
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 3
  store i32 %3, i32* %14, align 8
  %15 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 5
  %16 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %15, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = bitcast %"class.blink::HeapHashSet"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 20, i1 false) #10
  %19 = load i32, i32* %17, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %56, label %21

21:                                               ; preds = %5
  tail call void @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %16, i32 %19) #10
  %22 = load i32, i32* %17, align 4
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %4, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.blink::Member"*, %"class.blink::Member"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::HeapHashSet", %"class.blink::HeapHashSet"* %4, i64 0, i32 0, i32 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %25, i64 %28
  br i1 %23, label %56, label %30

30:                                               ; preds = %21
  %31 = icmp eq i32 %27, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %30, %36
  %33 = phi %"class.blink::Member"* [ %37, %36 ], [ %25, %30 ]
  %34 = bitcast %"class.blink::Member"* %33 to i64*
  %35 = load i64, i64* %34, align 8
  switch i64 %35, label %39 [
    i64 -1, label %36
    i64 0, label %36
  ]

36:                                               ; preds = %32, %32
  %37 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %33, i64 1
  %38 = icmp eq %"class.blink::Member"* %37, %29
  br i1 %38, label %56, label %32

39:                                               ; preds = %32, %30
  %40 = phi %"class.blink::Member"* [ %25, %30 ], [ %33, %32 ]
  %41 = icmp eq %"class.blink::Member"* %40, %29
  br i1 %41, label %56, label %42

42:                                               ; preds = %39, %54
  %43 = phi %"class.blink::Member"* [ %48, %54 ], [ %40, %39 ]
  %44 = tail call { %"class.blink::Member"*, i8 } @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKS4_SG_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_(%"class.WTF::HashTable"* %16, %"class.blink::Member"* dereferenceable(8) %43, %"class.blink::Member"* dereferenceable(8) %43) #10
  %45 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %43, i64 1
  %46 = icmp eq %"class.blink::Member"* %45, %29
  br i1 %46, label %56, label %47

47:                                               ; preds = %42, %51
  %48 = phi %"class.blink::Member"* [ %52, %51 ], [ %45, %42 ]
  %49 = bitcast %"class.blink::Member"* %48 to i64*
  %50 = load i64, i64* %49, align 8
  switch i64 %50, label %54 [
    i64 -1, label %51
    i64 0, label %51
  ]

51:                                               ; preds = %47, %47
  %52 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %48, i64 1
  %53 = icmp eq %"class.blink::Member"* %52, %29
  br i1 %53, label %56, label %47

54:                                               ; preds = %47
  %55 = icmp eq %"class.blink::Member"* %48, %29
  br i1 %55, label %56, label %42

56:                                               ; preds = %36, %42, %54, %51, %5, %21, %39
  %57 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %58 = bitcast %"class.WTF::Vector.7"* %57 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 16, i1 false) #10
  ret void
}

declare void @_ZN5blink15MarkupFormatterC1ENS_12AbsoluteURLsENS_17SerializationTypeE(%"class.blink::MarkupFormatter"*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulatorD2Ev(%"class.blink::MarkupAccumulator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink17MarkupAccumulatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %4, align 8
  %6 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %5, null
  br i1 %6, label %24, label %7, !prof !2

7:                                                ; preds = %1
  %8 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12, !prof !3

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %5, i64 %13
  br label %15

15:                                               ; preds = %15, %12
  %16 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %17, %15 ], [ %5, %12 ]
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"* %16) #10
  %17 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 1
  %18 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %17, %14
  br i1 %18, label %19, label %15

19:                                               ; preds = %15
  store i32 0, i32* %9, align 4
  %20 = bitcast %"class.WTF::Vector.7"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %23) #10
  store %"class.blink::MarkupAccumulator::NamespaceContext"* null, %"class.blink::MarkupAccumulator::NamespaceContext"** %4, align 8
  br label %24

24:                                               ; preds = %1, %22
  %25 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %25) #10
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %24, %38, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulatorD0Ev(%"class.blink::MarkupAccumulator"*) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink17MarkupAccumulatorD2Ev(%"class.blink::MarkupAccumulator"* %0) #10
  %2 = bitcast %"class.blink::MarkupAccumulator"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator12AppendStringERKN3WTF6StringE(%"class.blink::MarkupAccumulator"*, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %5 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %10, align 8
  %11 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %12 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %20

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %14, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %19 = bitcast i8** %18 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %17, %"class.WTF::StringImpl"** %19, align 8
  br label %20

20:                                               ; preds = %9, %13
  %21 = phi i32 [ %16, %13 ], [ 0, %9 ]
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %21, i32* %22, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %3)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !4
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #10
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !3

46:                                               ; preds = %37
  tail call void @llvm.trap() #10
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #10
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #10
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #10
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator12AppendEndTagERKNS_7ElementERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* dereferenceable(104), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 2, i32 0, i32 0
  %7 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %7, i64 0, i32 3
  tail call void @_ZN5blink15MarkupFormatter15AppendEndMarkupERN3WTF13StringBuilderERKNS_7ElementERKNS1_12AtomicStringES9_(%"class.blink::MarkupFormatter"* %4, %"class.WTF::StringBuilder"* dereferenceable(48) %5, %"class.blink::Element"* dereferenceable(104) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %8) #10
  ret void
}

declare void @_ZN5blink15MarkupFormatter15AppendEndMarkupERN3WTF13StringBuilderERKNS_7ElementERKNS1_12AtomicStringES9_(%"class.blink::MarkupFormatter"*, %"class.WTF::StringBuilder"* dereferenceable(48), %"class.blink::Element"* dereferenceable(104), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator17AppendStartMarkupERKNS_4NodeE(%"class.blink::MarkupAccumulator"*, %"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::Node"* %1 to i32 (%"class.blink::Node"*)***
  %4 = load i32 (%"class.blink::Node"*)**, i32 (%"class.blink::Node"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.blink::Node"*)*, i32 (%"class.blink::Node"*)** %4, i64 30
  %6 = load i32 (%"class.blink::Node"*)*, i32 (%"class.blink::Node"*)** %5, align 8
  %7 = tail call i32 %6(%"class.blink::Node"* %1) #10
  switch i32 %7, label %17 [
    i32 3, label %8
    i32 1, label %20
    i32 2, label %12
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %11 = bitcast %"class.blink::Node"* %1 to %"class.blink::Text"*
  tail call void @_ZN5blink15MarkupFormatter10AppendTextERN3WTF13StringBuilderERKNS_4TextE(%"class.blink::MarkupFormatter"* %9, %"class.WTF::StringBuilder"* dereferenceable(48) %10, %"class.blink::Text"* dereferenceable(88) %11) #10
  br label %20

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %14 = bitcast %"class.blink::Node"* %1 to %"class.blink::Attr"*
  %15 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Attr5valueEv(%"class.blink::Attr"* %14) #10
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %15, i64 0, i32 0
  tail call void @_ZN5blink15MarkupFormatter20AppendAttributeValueERN3WTF13StringBuilderERKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %13, %"class.WTF::String"* dereferenceable(8) %16, i1 zeroext false) #10
  br label %20

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  tail call void @_ZN5blink15MarkupFormatter17AppendStartMarkupERN3WTF13StringBuilderERKNS_4NodeE(%"class.blink::MarkupFormatter"* %18, %"class.WTF::StringBuilder"* dereferenceable(48) %19, %"class.blink::Node"* dereferenceable(64) %1) #10
  br label %20

20:                                               ; preds = %2, %17, %12, %8
  ret void
}

declare void @_ZN5blink15MarkupFormatter10AppendTextERN3WTF13StringBuilderERKNS_4TextE(%"class.blink::MarkupFormatter"*, %"class.WTF::StringBuilder"* dereferenceable(48), %"class.blink::Text"* dereferenceable(88)) local_unnamed_addr #1

declare void @_ZN5blink15MarkupFormatter20AppendAttributeValueERN3WTF13StringBuilderERKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48), %"class.WTF::String"* dereferenceable(8), i1 zeroext) local_unnamed_addr #1

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Attr5valueEv(%"class.blink::Attr"*) local_unnamed_addr #1

declare void @_ZN5blink15MarkupFormatter17AppendStartMarkupERN3WTF13StringBuilderERKNS_4NodeE(%"class.blink::MarkupFormatter"*, %"class.WTF::StringBuilder"* dereferenceable(48), %"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator22AppendCustomAttributesERKNS_7ElementE(%"class.blink::MarkupAccumulator"* nocapture, %"class.blink::Element"* nocapture dereferenceable(104)) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink17MarkupAccumulator21ShouldIgnoreAttributeERKNS_7ElementERKNS_9AttributeE(%"class.blink::MarkupAccumulator"* nocapture readnone, %"class.blink::Element"* nocapture readnone dereferenceable(104), %"class.blink::Attribute"* nocapture readnone dereferenceable(16)) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink17MarkupAccumulator19ShouldIgnoreElementERKNS_7ElementE(%"class.blink::MarkupAccumulator"* nocapture readnone, %"class.blink::Element"* nocapture readnone dereferenceable(104)) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator13AppendElementERKNS_7ElementE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* dereferenceable(104)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::Attribute", align 8
  %4 = tail call { i8, %"class.WTF::StringImpl"* } @_ZN5blink17MarkupAccumulator18AppendStartTagOpenERKNS_7ElementE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1)
  %5 = extractvalue { i8, %"class.WTF::StringImpl"* } %4, 0
  %6 = extractvalue { i8, %"class.WTF::StringImpl"* } %4, 1
  %7 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %8 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %7) #10
  %9 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 3, i32 0, i32 0
  %10 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %11 = icmp eq %"class.blink::ElementData"* %10, null
  br i1 %8, label %12, label %149

12:                                               ; preds = %2
  br i1 %11, label %36, label %13

13:                                               ; preds = %12
  tail call void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"* %1) #10
  %14 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %15 = icmp eq %"class.blink::ElementData"* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = load i32, i32* null, align 536870912
  br label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.blink::ElementData"* %14 to %"class.blink::UniqueElementData"*
  %25 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 1, i32 1
  %26 = bitcast %"class.blink::Member.61"* %25 to %"class.blink::Attribute"**
  %27 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %26, align 8
  %28 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %24, i64 0, i32 2, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  br label %36

30:                                               ; preds = %18, %16
  %31 = phi i32 [ %17, %16 ], [ %20, %18 ]
  %32 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %14, i64 1
  %33 = bitcast %"class.blink::ElementData"* %32 to %"class.blink::Attribute"*
  %34 = lshr i32 %31, 1
  %35 = and i32 %34, 268435455
  br label %36

36:                                               ; preds = %12, %23, %30
  %37 = phi i32 [ 0, %12 ], [ %35, %30 ], [ %29, %23 ]
  %38 = phi %"class.blink::Attribute"* [ null, %12 ], [ %33, %30 ], [ %27, %23 ]
  %39 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element7IsValueEv(%"class.blink::Element"* %1) #10
  %40 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %39, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %36
  %44 = zext i32 %37 to i64
  br label %129

45:                                               ; preds = %36
  %46 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIsAttrE, align 8
  %47 = zext i32 %37 to i64
  %48 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %38, i64 %47
  %49 = icmp eq i32 %37, 0
  %50 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %46, i64 0, i32 0, i32 0
  %51 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %50, align 8
  br i1 %49, label %75, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 3, i32 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %70, %52
  %56 = phi %"class.blink::Attribute"* [ %38, %52 ], [ %71, %70 ]
  %57 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %57, align 8
  %59 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %58, %51
  br i1 %59, label %73, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %58, i64 0, i32 3, i32 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %62, %63
  br i1 %64, label %65, label %70

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %58, i64 0, i32 4, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %67, %68
  br i1 %69, label %73, label %70

70:                                               ; preds = %65, %60
  %71 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %56, i64 1
  %72 = icmp eq %"class.blink::Attribute"* %71, %48
  br i1 %72, label %75, label %55

73:                                               ; preds = %55, %65
  %74 = icmp eq %"class.blink::Attribute"* %56, null
  br i1 %74, label %75, label %129

75:                                               ; preds = %70, %45, %73
  %76 = bitcast %"class.blink::Attribute"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #10
  %77 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %51, %"class.blink::QualifiedName::QualifiedNameImpl"** %77, align 8
  %78 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %51, null
  br i1 %78, label %86, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = and i32 %81, 16777216
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %85) #10
  br label %86

86:                                               ; preds = %84, %79, %75
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %88 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %87, %"class.WTF::StringImpl"** %88, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %89, label %107, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %107

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i33
  %99 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #10
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !3

104:                                              ; preds = %95
  tail call void @llvm.trap() #10
  unreachable

105:                                              ; preds = %95
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %96, align 4
  br label %107

107:                                              ; preds = %86, %90, %105
  %108 = bitcast %"class.blink::MarkupAccumulator"* %0 to void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)***
  %109 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)**, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*** %108, align 8
  %110 = getelementptr inbounds void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %109, i64 3
  %111 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %110, align 8
  call void %111(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1, %"class.blink::Attribute"* nonnull dereferenceable(16) %3) #10
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %113 = icmp eq %"class.WTF::StringImpl"* %112, null
  br i1 %113, label %127, label %114

114:                                              ; preds = %107
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load atomic i32, i32* %115 monotonic, align 4
  %117 = and i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 0
  %120 = load i32, i32* %119, align 4
  br i1 %118, label %121, label %123

121:                                              ; preds = %114
  %122 = add i32 %120, -1
  store i32 %122, i32* %119, align 4
  br label %123

123:                                              ; preds = %121, %114
  %124 = phi i32 [ %122, %121 ], [ %120, %114 ]
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %123
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %112) #10
  br label %127

127:                                              ; preds = %107, %123, %126
  %128 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %3, i64 0, i32 0
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %128) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #10
  br label %129

129:                                              ; preds = %43, %73, %127
  %130 = phi i64 [ %44, %43 ], [ %47, %73 ], [ %47, %127 ]
  %131 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %38, i64 %130
  %132 = icmp eq i32 %37, 0
  br i1 %132, label %222, label %133

133:                                              ; preds = %129
  %134 = bitcast %"class.blink::MarkupAccumulator"* %0 to i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)***
  %135 = bitcast %"class.blink::MarkupAccumulator"* %0 to void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)***
  br label %136

136:                                              ; preds = %133, %146
  %137 = phi %"class.blink::Attribute"* [ %38, %133 ], [ %147, %146 ]
  %138 = load i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)**, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*** %134, align 8
  %139 = getelementptr inbounds i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %138, i64 5
  %140 = load i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %139, align 8
  %141 = call zeroext i1 %140(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1, %"class.blink::Attribute"* dereferenceable(16) %137) #10
  br i1 %141, label %146, label %142

142:                                              ; preds = %136
  %143 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)**, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*** %135, align 8
  %144 = getelementptr inbounds void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %143, i64 3
  %145 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %144, align 8
  call void %145(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1, %"class.blink::Attribute"* dereferenceable(16) %137) #10
  br label %146

146:                                              ; preds = %142, %136
  %147 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %137, i64 1
  %148 = icmp eq %"class.blink::Attribute"* %147, %131
  br i1 %148, label %222, label %136

149:                                              ; preds = %2
  br i1 %11, label %222, label %150

150:                                              ; preds = %149
  tail call void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"* %1) #10
  %151 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %152 = icmp eq %"class.blink::ElementData"* %151, null
  br i1 %152, label %153, label %155

153:                                              ; preds = %150
  %154 = load i32, i32* null, align 536870912
  br label %167

155:                                              ; preds = %150
  %156 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %151, i64 0, i32 0, i32 0, i32 0
  %157 = load i32, i32* %156, align 4
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %167, label %160

160:                                              ; preds = %155
  %161 = bitcast %"class.blink::ElementData"* %151 to %"class.blink::UniqueElementData"*
  %162 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %151, i64 1, i32 1
  %163 = bitcast %"class.blink::Member.61"* %162 to %"class.blink::Attribute"**
  %164 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %163, align 8
  %165 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %161, i64 0, i32 2, i32 0, i32 0, i32 2
  %166 = load i32, i32* %165, align 4
  br label %173

167:                                              ; preds = %155, %153
  %168 = phi i32 [ %154, %153 ], [ %157, %155 ]
  %169 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %151, i64 1
  %170 = bitcast %"class.blink::ElementData"* %169 to %"class.blink::Attribute"*
  %171 = lshr i32 %168, 1
  %172 = and i32 %171, 268435455
  br label %173

173:                                              ; preds = %160, %167
  %174 = phi i32 [ %172, %167 ], [ %166, %160 ]
  %175 = phi %"class.blink::Attribute"* [ %170, %167 ], [ %164, %160 ]
  %176 = zext i32 %174 to i64
  %177 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %175, i64 %176
  %178 = icmp eq i32 %174, 0
  br i1 %178, label %222, label %179

179:                                              ; preds = %173
  %180 = icmp eq i8 %5, 0
  %181 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink11xmlns_names13kNamespaceURIE, align 8
  %182 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %181, i64 0, i32 0, i32 0, i32 0
  %183 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 2, i32 0, i32 0
  %184 = bitcast %"class.blink::MarkupAccumulator"* %0 to i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)***
  %185 = bitcast %"class.blink::MarkupAccumulator"* %0 to void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)***
  br label %186

186:                                              ; preds = %179, %219
  %187 = phi %"class.blink::Attribute"* [ %175, %179 ], [ %220, %219 ]
  br i1 %180, label %210, label %188

188:                                              ; preds = %186
  %189 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %187, i64 0, i32 0, i32 0, i32 0
  %190 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %189, align 8
  %191 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %190, i64 0, i32 4, i32 0, i32 0, i32 0
  %192 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %191, align 8
  %193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %182, align 8
  %194 = icmp eq %"class.WTF::StringImpl"* %192, %193
  br i1 %194, label %195, label %210

195:                                              ; preds = %188
  %196 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %190, i64 0, i32 2, i32 0, i32 0, i32 0
  %197 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %196, align 8
  %198 = icmp eq %"class.WTF::StringImpl"* %197, null
  br i1 %198, label %203, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 1
  %201 = load i32, i32* %200, align 4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %210

203:                                              ; preds = %195, %199
  %204 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %183, align 8
  %205 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %187, i64 0, i32 1, i32 0, i32 0, i32 0
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %205, align 8
  %207 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %204, i64 0, i32 4, i32 0, i32 0, i32 0
  %208 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %207, align 8
  %209 = tail call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* %206, %"class.WTF::StringImpl"* %208) #10
  br i1 %209, label %210, label %219

210:                                              ; preds = %186, %203, %199, %188
  %211 = load i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)**, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*** %184, align 8
  %212 = getelementptr inbounds i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %211, i64 5
  %213 = load i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, i1 (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %212, align 8
  %214 = tail call zeroext i1 %213(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1, %"class.blink::Attribute"* dereferenceable(16) %187) #10
  br i1 %214, label %219, label %215

215:                                              ; preds = %210
  %216 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)**, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*** %185, align 8
  %217 = getelementptr inbounds void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %216, i64 3
  %218 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*, %"class.blink::Attribute"*)** %217, align 8
  tail call void %218(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1, %"class.blink::Attribute"* dereferenceable(16) %187) #10
  br label %219

219:                                              ; preds = %210, %215, %203
  %220 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %187, i64 1
  %221 = icmp eq %"class.blink::Attribute"* %220, %177
  br i1 %221, label %222, label %186

222:                                              ; preds = %219, %146, %149, %173, %129
  %223 = bitcast %"class.blink::MarkupAccumulator"* %0 to void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)***
  %224 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)**, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*** %223, align 8
  %225 = getelementptr inbounds void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %224, i64 4
  %226 = load void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)*, void (%"class.blink::MarkupAccumulator"*, %"class.blink::Element"*)** %225, align 8
  call void %226(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) %1) #10
  %227 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  call void @_ZN5blink15MarkupFormatter19AppendStartTagCloseERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"* %7, %"class.WTF::StringBuilder"* dereferenceable(48) %227, %"class.blink::Element"* dereferenceable(104) %1) #10
  %228 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %228, label %258, label %229

229:                                              ; preds = %222
  %230 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = load atomic i32, i32* %230 monotonic, align 4
  %232 = and i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %235 = load i32, i32* %234, align 4
  br i1 %233, label %236, label %246

236:                                              ; preds = %229
  %237 = zext i32 %235 to i33
  %238 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %237, i33 1) #10
  %239 = extractvalue { i33, i1 } %238, 1
  %240 = extractvalue { i33, i1 } %238, 0
  %241 = icmp slt i33 %240, 0
  %242 = or i1 %239, %241
  br i1 %242, label %243, label %244, !prof !3

243:                                              ; preds = %236
  call void @llvm.trap() #10
  unreachable

244:                                              ; preds = %236
  %245 = trunc i33 %240 to i32
  store i32 %245, i32* %234, align 4
  br label %246

246:                                              ; preds = %229, %244
  %247 = phi i32 [ %245, %244 ], [ %235, %229 ]
  %248 = load atomic i32, i32* %230 monotonic, align 4
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %254

251:                                              ; preds = %246
  %252 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %253 = add i32 %247, -1
  store i32 %253, i32* %252, align 4
  br label %254

254:                                              ; preds = %251, %246
  %255 = phi i32 [ %253, %251 ], [ %247, %246 ]
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %258

257:                                              ; preds = %254
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %6) #10
  br label %258

258:                                              ; preds = %222, %254, %257
  ret %"class.WTF::StringImpl"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden { i8, %"class.WTF::StringImpl"* } @_ZN5blink17MarkupAccumulator18AppendStartTagOpenERKNS_7ElementE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringImpl"*, align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = alloca %"class.WTF::AtomicString", align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = alloca %"class.WTF::StringAppend", align 8
  %9 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 2, i32 0, i32 0
  %10 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %31, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #10
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !3

28:                                               ; preds = %19
  tail call void @llvm.trap() #10
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  br label %31

31:                                               ; preds = %2, %14, %29
  %32 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %33 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %34 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %33) #10
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  tail call void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"* %33, %"class.WTF::StringBuilder"* dereferenceable(48) %36, %"class.blink::Element"* dereferenceable(104) %1) #10
  br label %721

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %39 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, -1
  %42 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %38, i32 %41) #10
  %43 = bitcast %"class.WTF::StringImpl"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43)
  %44 = tail call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator16NamespaceContext26RecordNamespaceInformationERKNS_7ElementE(%"class.blink::MarkupAccumulator::NamespaceContext"* %42, %"class.blink::Element"* dereferenceable(104) %1)
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %3, align 8
  %45 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %42, i64 0, i32 2
  %46 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %37
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i33
  %58 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #10
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !3

63:                                               ; preds = %54
  tail call void @llvm.trap() #10
  unreachable

64:                                               ; preds = %54
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %55, align 4
  br label %66

66:                                               ; preds = %37, %49, %64
  %67 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #10
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %69 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %70 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %69, i64 0, i32 4, i32 0, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  store %"class.WTF::StringImpl"* %71, %"class.WTF::StringImpl"** %68, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %91, label %73

73:                                               ; preds = %66
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %91

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i33
  %82 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #10
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !3

87:                                               ; preds = %78
  tail call void @llvm.trap() #10
  unreachable

88:                                               ; preds = %78
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %79, align 4
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  br label %91

91:                                               ; preds = %66, %73, %88
  %92 = phi %"class.WTF::StringImpl"* [ null, %66 ], [ %71, %73 ], [ %90, %88 ]
  %93 = icmp eq %"class.WTF::StringImpl"* %47, %92
  br i1 %93, label %94, label %136

94:                                               ; preds = %91
  %95 = icmp ne %"class.WTF::StringImpl"* %44, null
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %98 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %99 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %100 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %99, i64 0, i32 3
  tail call void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS1_12AtomicStringES6_(%"class.blink::MarkupFormatter"* %33, %"class.WTF::StringBuilder"* dereferenceable(48) %97, %"class.WTF::AtomicString"* dereferenceable(8) %98, %"class.WTF::AtomicString"* dereferenceable(8) %100) #10
  %101 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %98, i64 0, i32 0, i32 0, i32 0
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %101, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %121, label %104

104:                                              ; preds = %94
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %121

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i33
  %113 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %112, i33 1) #10
  %114 = extractvalue { i33, i1 } %113, 1
  %115 = extractvalue { i33, i1 } %113, 0
  %116 = icmp slt i33 %115, 0
  %117 = or i1 %114, %116
  br i1 %117, label %118, label %119, !prof !3

118:                                              ; preds = %109
  tail call void @llvm.trap() #10
  unreachable

119:                                              ; preds = %109
  %120 = trunc i33 %115 to i32
  store i32 %120, i32* %110, align 4
  br label %121

121:                                              ; preds = %119, %104, %94
  %122 = ptrtoint %"class.WTF::StringImpl"* %102 to i64
  br i1 %13, label %672, label %123

123:                                              ; preds = %121
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %129 = load i32, i32* %128, align 4
  br i1 %127, label %130, label %132

130:                                              ; preds = %123
  %131 = add i32 %129, -1
  store i32 %131, i32* %128, align 4
  br label %132

132:                                              ; preds = %130, %123
  %133 = phi i32 [ %131, %130 ], [ %129, %123 ]
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %672

135:                                              ; preds = %132
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %672

136:                                              ; preds = %91
  %137 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %137) #10
  %138 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  %139 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %140 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  store %"class.WTF::StringImpl"* %141, %"class.WTF::StringImpl"** %138, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %161, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %161

148:                                              ; preds = %143
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = zext i32 %150 to i33
  %152 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %151, i33 1) #10
  %153 = extractvalue { i33, i1 } %152, 1
  %154 = extractvalue { i33, i1 } %152, 0
  %155 = icmp slt i33 %154, 0
  %156 = or i1 %153, %155
  br i1 %156, label %157, label %158, !prof !3

157:                                              ; preds = %148
  tail call void @llvm.trap() #10
  unreachable

158:                                              ; preds = %148
  %159 = trunc i33 %154 to i32
  store i32 %159, i32* %149, align 4
  %160 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  br label %161

161:                                              ; preds = %136, %143, %158
  %162 = phi %"class.WTF::StringImpl"* [ %92, %136 ], [ %92, %143 ], [ %160, %158 ]
  %163 = bitcast %"class.WTF::AtomicString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %163) #10
  %164 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %164, align 8
  %165 = icmp eq %"class.WTF::StringImpl"* %162, null
  br i1 %165, label %311, label %166

166:                                              ; preds = %161
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %162, i64 0, i32 1
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %200, label %170

170:                                              ; preds = %166
  %171 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %172 = icmp eq %"class.WTF::StringImpl"* %171, null
  br i1 %172, label %179, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = icmp ne i32 %175, 0
  %177 = icmp ne %"class.WTF::StringImpl"* %162, %44
  %178 = or i1 %177, %176
  br i1 %178, label %181, label %200

179:                                              ; preds = %170
  %180 = icmp eq %"class.WTF::StringImpl"* %162, %44
  br i1 %180, label %200, label %181

181:                                              ; preds = %179, %173
  %182 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator29RetrievePreferredPrefixStringERKN3WTF12AtomicStringES4_(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5)
  %183 = ptrtoint %"class.WTF::StringImpl"* %182 to i64
  %184 = bitcast %"class.WTF::AtomicString"* %6 to i64*
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  store i64 %183, i64* %184, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %202, label %187

187:                                              ; preds = %181
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %196
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %185) #10
  br label %200

200:                                              ; preds = %179, %173, %166, %199, %196
  %201 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  br label %202

202:                                              ; preds = %200, %181
  %203 = phi %"class.WTF::StringImpl"* [ %201, %200 ], [ %182, %181 ]
  %204 = icmp eq %"class.WTF::StringImpl"* %203, null
  br i1 %204, label %311, label %205

205:                                              ; preds = %202
  %206 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %6)
  %207 = icmp eq %"class.WTF::StringImpl"* %206, null
  br i1 %207, label %311, label %208

208:                                              ; preds = %205
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = load atomic i32, i32* %209 monotonic, align 4
  %211 = and i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 0
  %214 = load i32, i32* %213, align 4
  br i1 %212, label %215, label %217

215:                                              ; preds = %208
  %216 = add i32 %214, -1
  store i32 %216, i32* %213, align 4
  br label %217

217:                                              ; preds = %215, %208
  %218 = phi i32 [ %216, %215 ], [ %214, %208 ]
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %206) #10
  br label %221

221:                                              ; preds = %217, %220
  %222 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %223 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %224 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %223, i64 0, i32 3
  call void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS1_12AtomicStringES6_(%"class.blink::MarkupFormatter"* %33, %"class.WTF::StringBuilder"* dereferenceable(48) %222, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %6, %"class.WTF::AtomicString"* dereferenceable(8) %224) #10
  %225 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %226 = icmp eq %"class.WTF::StringImpl"* %225, null
  br i1 %226, label %244, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %229 = load atomic i32, i32* %228 monotonic, align 4
  %230 = and i32 %229, 2
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %244

232:                                              ; preds = %227
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = zext i32 %234 to i33
  %236 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %235, i33 1) #10
  %237 = extractvalue { i33, i1 } %236, 1
  %238 = extractvalue { i33, i1 } %236, 0
  %239 = icmp slt i33 %238, 0
  %240 = or i1 %237, %239
  br i1 %240, label %241, label %242, !prof !3

241:                                              ; preds = %232
  call void @llvm.trap() #10
  unreachable

242:                                              ; preds = %232
  %243 = trunc i33 %238 to i32
  store i32 %243, i32* %233, align 4
  br label %244

244:                                              ; preds = %242, %227, %221
  %245 = ptrtoint %"class.WTF::StringImpl"* %225 to i64
  br i1 %13, label %259, label %246

246:                                              ; preds = %244
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %248 = load atomic i32, i32* %247 monotonic, align 4
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %252 = load i32, i32* %251, align 4
  br i1 %250, label %253, label %255

253:                                              ; preds = %246
  %254 = add i32 %252, -1
  store i32 %254, i32* %251, align 4
  br label %255

255:                                              ; preds = %253, %246
  %256 = phi i32 [ %254, %253 ], [ %252, %246 ]
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %255
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %259

259:                                              ; preds = %244, %255, %258
  %260 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink9xml_names13kNamespaceURIE, align 8
  %261 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %260, i64 0, i32 0, i32 0, i32 0
  %262 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %261, align 8
  %263 = icmp eq %"class.WTF::StringImpl"* %44, %262
  %264 = icmp eq %"class.WTF::StringImpl"* %44, null
  %265 = or i1 %264, %263
  br i1 %265, label %636, label %266

266:                                              ; preds = %259
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = icmp eq i32 %268, 0
  %270 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %271 = bitcast %"class.WTF::StringImpl"** %3 to %"class.WTF::AtomicString"*
  %272 = select i1 %269, %"class.WTF::AtomicString"* %270, %"class.WTF::AtomicString"* %271
  %273 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %272, i64 0, i32 0, i32 0, i32 0
  %274 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  %275 = icmp eq %"class.WTF::StringImpl"* %274, null
  br i1 %275, label %293, label %276

276:                                              ; preds = %266
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load atomic i32, i32* %277 monotonic, align 4
  %279 = and i32 %278, 2
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %293

281:                                              ; preds = %276
  %282 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 0
  %283 = load i32, i32* %282, align 4
  %284 = zext i32 %283 to i33
  %285 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %284, i33 1) #10
  %286 = extractvalue { i33, i1 } %285, 1
  %287 = extractvalue { i33, i1 } %285, 0
  %288 = icmp slt i33 %287, 0
  %289 = or i1 %286, %288
  br i1 %289, label %290, label %291, !prof !3

290:                                              ; preds = %281
  call void @llvm.trap() #10
  unreachable

291:                                              ; preds = %281
  %292 = trunc i33 %287 to i32
  store i32 %292, i32* %282, align 4
  br label %293

293:                                              ; preds = %291, %276, %266
  %294 = ptrtoint %"class.WTF::StringImpl"* %274 to i64
  %295 = bitcast %"class.WTF::AtomicString"* %45 to i64*
  %296 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  store i64 %294, i64* %295, align 8
  %297 = icmp eq %"class.WTF::StringImpl"* %296, null
  br i1 %297, label %636, label %298

298:                                              ; preds = %293
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %300 = load atomic i32, i32* %299 monotonic, align 4
  %301 = and i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %296, i64 0, i32 0
  %304 = load i32, i32* %303, align 4
  br i1 %302, label %305, label %307

305:                                              ; preds = %298
  %306 = add i32 %304, -1
  store i32 %306, i32* %303, align 4
  br label %307

307:                                              ; preds = %305, %298
  %308 = phi i32 [ %306, %305 ], [ %304, %298 ]
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %636

310:                                              ; preds = %307
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %296) #10
  br label %636

311:                                              ; preds = %205, %202, %161
  %312 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %313 = icmp eq %"class.WTF::StringImpl"* %312, null
  br i1 %313, label %548, label %314

314:                                              ; preds = %311
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %312, i64 0, i32 1
  %316 = load i32, i32* %315, align 4
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %548, label %318

318:                                              ; preds = %314
  %319 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %319) #10
  %320 = bitcast %"class.WTF::StringAppend"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %320) #10
  %321 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF18g_xmlns_with_colonE, align 8
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %312, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load atomic i32, i32* %322 monotonic, align 4
  %324 = and i32 %323, 2
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %338

326:                                              ; preds = %318
  %327 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %312, i64 0, i32 0
  %328 = load i32, i32* %327, align 4
  %329 = zext i32 %328 to i33
  %330 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %329, i33 1) #10
  %331 = extractvalue { i33, i1 } %330, 1
  %332 = extractvalue { i33, i1 } %330, 0
  %333 = icmp slt i33 %332, 0
  %334 = or i1 %331, %333
  br i1 %334, label %335, label %336, !prof !3

335:                                              ; preds = %326
  call void @llvm.trap() #10
  unreachable

336:                                              ; preds = %326
  %337 = trunc i33 %332 to i32
  store i32 %337, i32* %327, align 4
  br label %338

338:                                              ; preds = %318, %336
  %339 = call { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_12AtomicStringEEENS_12StringAppendINS_6StringET_EERKS3_S4_(%"class.WTF::String"* dereferenceable(8) %321, %"class.WTF::StringImpl"* nonnull %312)
  %340 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 0, i32 0, i32 0
  %341 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %339, 0
  store %"class.WTF::StringImpl"* %341, %"class.WTF::StringImpl"** %340, align 8
  %342 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 1, i32 0, i32 0, i32 0
  %343 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %339, 1
  store %"class.WTF::StringImpl"* %343, %"class.WTF::StringImpl"** %342, align 8
  %344 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEEcvS1_Ev(%"class.WTF::StringAppend"* nonnull %8)
  %345 = icmp eq %"class.WTF::StringImpl"* %344, null
  br i1 %345, label %369, label %346

346:                                              ; preds = %338
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %348 = load atomic i32, i32* %347 acquire, align 4
  %349 = and i32 %348, 4
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %367, label %351

351:                                              ; preds = %346
  %352 = load atomic i32, i32* %347 monotonic, align 4
  %353 = and i32 %352, 2
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %369

355:                                              ; preds = %351
  %356 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 0
  %357 = load i32, i32* %356, align 4
  %358 = zext i32 %357 to i33
  %359 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %358, i33 1) #10
  %360 = extractvalue { i33, i1 } %359, 1
  %361 = extractvalue { i33, i1 } %359, 0
  %362 = icmp slt i33 %361, 0
  %363 = or i1 %360, %362
  br i1 %363, label %364, label %365, !prof !3

364:                                              ; preds = %355
  call void @llvm.trap() #10
  unreachable

365:                                              ; preds = %355
  %366 = trunc i33 %361 to i32
  store i32 %366, i32* %356, align 4
  br label %369

367:                                              ; preds = %346
  %368 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %344) #10
  br label %369

369:                                              ; preds = %338, %351, %365, %367
  %370 = phi %"class.WTF::StringImpl"* [ %368, %367 ], [ %344, %351 ], [ %344, %365 ], [ null, %338 ]
  %371 = ptrtoint %"class.WTF::StringImpl"* %370 to i64
  %372 = bitcast %"class.WTF::AtomicString"* %7 to i64*
  store i64 %371, i64* %372, align 8
  %373 = call zeroext i1 @_ZNK5blink7Element12hasAttributeERKN3WTF12AtomicStringE(%"class.blink::Element"* %1, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7) #10
  %374 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %375 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %374, align 8
  %376 = icmp eq %"class.WTF::StringImpl"* %375, null
  br i1 %376, label %390, label %377

377:                                              ; preds = %369
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %375, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %379 = load atomic i32, i32* %378 monotonic, align 4
  %380 = and i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %375, i64 0, i32 0
  %383 = load i32, i32* %382, align 4
  br i1 %381, label %384, label %386

384:                                              ; preds = %377
  %385 = add i32 %383, -1
  store i32 %385, i32* %382, align 4
  br label %386

386:                                              ; preds = %384, %377
  %387 = phi i32 [ %385, %384 ], [ %383, %377 ]
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %389, label %390

389:                                              ; preds = %386
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %375) #10
  br label %390

390:                                              ; preds = %369, %386, %389
  br i1 %345, label %404, label %391

391:                                              ; preds = %390
  %392 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %393 = load atomic i32, i32* %392 monotonic, align 4
  %394 = and i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 0
  %397 = load i32, i32* %396, align 4
  br i1 %395, label %398, label %400

398:                                              ; preds = %391
  %399 = add i32 %397, -1
  store i32 %399, i32* %396, align 4
  br label %400

400:                                              ; preds = %398, %391
  %401 = phi i32 [ %399, %398 ], [ %397, %391 ]
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %403, label %404

403:                                              ; preds = %400
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %344) #10
  br label %404

404:                                              ; preds = %390, %400, %403
  %405 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %342, align 8
  %406 = icmp eq %"class.WTF::StringImpl"* %405, null
  br i1 %406, label %420, label %407

407:                                              ; preds = %404
  %408 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %405, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %409 = load atomic i32, i32* %408 monotonic, align 4
  %410 = and i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %405, i64 0, i32 0
  %413 = load i32, i32* %412, align 4
  br i1 %411, label %414, label %416

414:                                              ; preds = %407
  %415 = add i32 %413, -1
  store i32 %415, i32* %412, align 4
  br label %416

416:                                              ; preds = %414, %407
  %417 = phi i32 [ %415, %414 ], [ %413, %407 ]
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %420

419:                                              ; preds = %416
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %405) #10
  br label %420

420:                                              ; preds = %419, %416, %404
  %421 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %340, align 8
  %422 = icmp eq %"class.WTF::StringImpl"* %421, null
  br i1 %422, label %436, label %423

423:                                              ; preds = %420
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %421, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %425 = load atomic i32, i32* %424 monotonic, align 4
  %426 = and i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %421, i64 0, i32 0
  %429 = load i32, i32* %428, align 4
  br i1 %427, label %430, label %432

430:                                              ; preds = %423
  %431 = add i32 %429, -1
  store i32 %431, i32* %428, align 4
  br label %432

432:                                              ; preds = %430, %423
  %433 = phi i32 [ %431, %430 ], [ %429, %423 ]
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %436

435:                                              ; preds = %432
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %421) #10
  br label %436

436:                                              ; preds = %420, %432, %435
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %320) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %319) #10
  br i1 %373, label %437, label %456

437:                                              ; preds = %436
  %438 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator14GeneratePrefixERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4)
  %439 = ptrtoint %"class.WTF::StringImpl"* %438 to i64
  %440 = bitcast %"class.WTF::AtomicString"* %5 to i64*
  %441 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  store i64 %439, i64* %440, align 8
  %442 = icmp eq %"class.WTF::StringImpl"* %441, null
  br i1 %442, label %460, label %443

443:                                              ; preds = %437
  %444 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %441, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %445 = load atomic i32, i32* %444 monotonic, align 4
  %446 = and i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %441, i64 0, i32 0
  %449 = load i32, i32* %448, align 4
  br i1 %447, label %450, label %452

450:                                              ; preds = %443
  %451 = add i32 %449, -1
  store i32 %451, i32* %448, align 4
  br label %452

452:                                              ; preds = %450, %443
  %453 = phi i32 [ %451, %450 ], [ %449, %443 ]
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %460

455:                                              ; preds = %452
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %441) #10
  br label %460

456:                                              ; preds = %436
  %457 = load i32, i32* %39, align 4
  %458 = add i32 %457, -1
  %459 = call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %38, i32 %458) #10
  call void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"* %459, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #10
  br label %460

460:                                              ; preds = %437, %452, %455, %456
  %461 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %462 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %463 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %462, i64 0, i32 3
  call void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS1_12AtomicStringES6_(%"class.blink::MarkupFormatter"* %33, %"class.WTF::StringBuilder"* dereferenceable(48) %461, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %463) #10
  %464 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %465 = icmp eq %"class.WTF::StringImpl"* %464, null
  br i1 %465, label %483, label %466

466:                                              ; preds = %460
  %467 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %464, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %468 = load atomic i32, i32* %467 monotonic, align 4
  %469 = and i32 %468, 2
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %483

471:                                              ; preds = %466
  %472 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %464, i64 0, i32 0
  %473 = load i32, i32* %472, align 4
  %474 = zext i32 %473 to i33
  %475 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %474, i33 1) #10
  %476 = extractvalue { i33, i1 } %475, 1
  %477 = extractvalue { i33, i1 } %475, 0
  %478 = icmp slt i33 %477, 0
  %479 = or i1 %476, %478
  br i1 %479, label %480, label %481, !prof !3

480:                                              ; preds = %471
  call void @llvm.trap() #10
  unreachable

481:                                              ; preds = %471
  %482 = trunc i33 %477 to i32
  store i32 %482, i32* %472, align 4
  br label %483

483:                                              ; preds = %481, %466, %460
  %484 = ptrtoint %"class.WTF::StringImpl"* %464 to i64
  br i1 %13, label %498, label %485

485:                                              ; preds = %483
  %486 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %487 = load atomic i32, i32* %486 monotonic, align 4
  %488 = and i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %491 = load i32, i32* %490, align 4
  br i1 %489, label %492, label %494

492:                                              ; preds = %485
  %493 = add i32 %491, -1
  store i32 %493, i32* %490, align 4
  br label %494

494:                                              ; preds = %492, %485
  %495 = phi i32 [ %493, %492 ], [ %491, %485 ]
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %497, label %498

497:                                              ; preds = %494
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %498

498:                                              ; preds = %483, %494, %497
  %499 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  %500 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  call void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %461, %"class.WTF::AtomicString"* dereferenceable(8) %499, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::String"* nonnull dereferenceable(8) %500, i1 zeroext false) #10
  %501 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %502 = icmp eq %"class.WTF::StringImpl"* %501, null
  br i1 %502, label %636, label %503

503:                                              ; preds = %498
  %504 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %501, i64 0, i32 1
  %505 = load i32, i32* %504, align 4
  %506 = icmp eq i32 %505, 0
  %507 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %508 = bitcast %"class.WTF::StringImpl"** %3 to %"class.WTF::AtomicString"*
  %509 = select i1 %506, %"class.WTF::AtomicString"* %507, %"class.WTF::AtomicString"* %508
  %510 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %509, i64 0, i32 0, i32 0, i32 0
  %511 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %510, align 8
  %512 = icmp eq %"class.WTF::StringImpl"* %511, null
  br i1 %512, label %530, label %513

513:                                              ; preds = %503
  %514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %515 = load atomic i32, i32* %514 monotonic, align 4
  %516 = and i32 %515, 2
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %530

518:                                              ; preds = %513
  %519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 0
  %520 = load i32, i32* %519, align 4
  %521 = zext i32 %520 to i33
  %522 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %521, i33 1) #10
  %523 = extractvalue { i33, i1 } %522, 1
  %524 = extractvalue { i33, i1 } %522, 0
  %525 = icmp slt i33 %524, 0
  %526 = or i1 %523, %525
  br i1 %526, label %527, label %528, !prof !3

527:                                              ; preds = %518
  call void @llvm.trap() #10
  unreachable

528:                                              ; preds = %518
  %529 = trunc i33 %524 to i32
  store i32 %529, i32* %519, align 4
  br label %530

530:                                              ; preds = %528, %513, %503
  %531 = ptrtoint %"class.WTF::StringImpl"* %511 to i64
  %532 = bitcast %"class.WTF::AtomicString"* %45 to i64*
  %533 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  store i64 %531, i64* %532, align 8
  %534 = icmp eq %"class.WTF::StringImpl"* %533, null
  br i1 %534, label %636, label %535

535:                                              ; preds = %530
  %536 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %537 = load atomic i32, i32* %536 monotonic, align 4
  %538 = and i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 0
  %541 = load i32, i32* %540, align 4
  br i1 %539, label %542, label %544

542:                                              ; preds = %535
  %543 = add i32 %541, -1
  store i32 %543, i32* %540, align 4
  br label %544

544:                                              ; preds = %542, %535
  %545 = phi i32 [ %543, %542 ], [ %541, %535 ]
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %636

547:                                              ; preds = %544
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %533) #10
  br label %636

548:                                              ; preds = %311, %314
  %549 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %549, label %553, label %550

550:                                              ; preds = %548
  %551 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %552 = call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* nonnull %44, %"class.WTF::StringImpl"* %551) #10
  br i1 %552, label %596, label %553

553:                                              ; preds = %550, %548
  %554 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %555 = icmp eq %"class.WTF::StringImpl"* %554, null
  br i1 %555, label %573, label %556

556:                                              ; preds = %553
  %557 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %554, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %558 = load atomic i32, i32* %557 monotonic, align 4
  %559 = and i32 %558, 2
  %560 = icmp eq i32 %559, 0
  br i1 %560, label %561, label %573

561:                                              ; preds = %556
  %562 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %554, i64 0, i32 0
  %563 = load i32, i32* %562, align 4
  %564 = zext i32 %563 to i33
  %565 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %564, i33 1) #10
  %566 = extractvalue { i33, i1 } %565, 1
  %567 = extractvalue { i33, i1 } %565, 0
  %568 = icmp slt i33 %567, 0
  %569 = or i1 %566, %568
  br i1 %569, label %570, label %571, !prof !3

570:                                              ; preds = %561
  call void @llvm.trap() #10
  unreachable

571:                                              ; preds = %561
  %572 = trunc i33 %567 to i32
  store i32 %572, i32* %562, align 4
  br label %573

573:                                              ; preds = %571, %556, %553
  %574 = ptrtoint %"class.WTF::StringImpl"* %554 to i64
  %575 = bitcast %"class.WTF::AtomicString"* %45 to i64*
  %576 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  store i64 %574, i64* %575, align 8
  %577 = icmp eq %"class.WTF::StringImpl"* %576, null
  br i1 %577, label %591, label %578

578:                                              ; preds = %573
  %579 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %576, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %580 = load atomic i32, i32* %579 monotonic, align 4
  %581 = and i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %576, i64 0, i32 0
  %584 = load i32, i32* %583, align 4
  br i1 %582, label %585, label %587

585:                                              ; preds = %578
  %586 = add i32 %584, -1
  store i32 %586, i32* %583, align 4
  br label %587

587:                                              ; preds = %585, %578
  %588 = phi i32 [ %586, %585 ], [ %584, %578 ]
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %590, label %591

590:                                              ; preds = %587
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %576) #10
  br label %591

591:                                              ; preds = %573, %587, %590
  %592 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  call void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"* %33, %"class.WTF::StringBuilder"* dereferenceable(48) %592, %"class.blink::Element"* dereferenceable(104) %1) #10
  %593 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %594 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  %595 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  call void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %592, %"class.WTF::AtomicString"* dereferenceable(8) %593, %"class.WTF::AtomicString"* dereferenceable(8) %594, %"class.WTF::String"* nonnull dereferenceable(8) %595, i1 zeroext false) #10
  br label %636

596:                                              ; preds = %550
  %597 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %598 = icmp eq %"class.WTF::StringImpl"* %597, null
  br i1 %598, label %616, label %599

599:                                              ; preds = %596
  %600 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %597, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %601 = load atomic i32, i32* %600 monotonic, align 4
  %602 = and i32 %601, 2
  %603 = icmp eq i32 %602, 0
  br i1 %603, label %604, label %616

604:                                              ; preds = %599
  %605 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %597, i64 0, i32 0
  %606 = load i32, i32* %605, align 4
  %607 = zext i32 %606 to i33
  %608 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %607, i33 1) #10
  %609 = extractvalue { i33, i1 } %608, 1
  %610 = extractvalue { i33, i1 } %608, 0
  %611 = icmp slt i33 %610, 0
  %612 = or i1 %609, %611
  br i1 %612, label %613, label %614, !prof !3

613:                                              ; preds = %604
  call void @llvm.trap() #10
  unreachable

614:                                              ; preds = %604
  %615 = trunc i33 %610 to i32
  store i32 %615, i32* %605, align 4
  br label %616

616:                                              ; preds = %614, %599, %596
  %617 = ptrtoint %"class.WTF::StringImpl"* %597 to i64
  %618 = bitcast %"class.WTF::AtomicString"* %45 to i64*
  %619 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  store i64 %617, i64* %618, align 8
  %620 = icmp eq %"class.WTF::StringImpl"* %619, null
  br i1 %620, label %634, label %621

621:                                              ; preds = %616
  %622 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %619, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %623 = load atomic i32, i32* %622 monotonic, align 4
  %624 = and i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %619, i64 0, i32 0
  %627 = load i32, i32* %626, align 4
  br i1 %625, label %628, label %630

628:                                              ; preds = %621
  %629 = add i32 %627, -1
  store i32 %629, i32* %626, align 4
  br label %630

630:                                              ; preds = %628, %621
  %631 = phi i32 [ %629, %628 ], [ %627, %621 ]
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %633, label %634

633:                                              ; preds = %630
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %619) #10
  br label %634

634:                                              ; preds = %616, %630, %633
  %635 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  call void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"* %33, %"class.WTF::StringBuilder"* dereferenceable(48) %635, %"class.blink::Element"* dereferenceable(104) %1) #10
  br label %636

636:                                              ; preds = %259, %547, %544, %530, %498, %310, %307, %293, %634, %591
  %637 = phi %"class.WTF::StringImpl"* [ %44, %259 ], [ %44, %591 ], [ %44, %634 ], [ %44, %293 ], [ %44, %307 ], [ %44, %310 ], [ null, %498 ], [ %501, %530 ], [ %501, %544 ], [ %501, %547 ]
  %638 = phi i8 [ 0, %259 ], [ 1, %591 ], [ 0, %634 ], [ 0, %293 ], [ 0, %307 ], [ 0, %310 ], [ 0, %498 ], [ 0, %530 ], [ 0, %544 ], [ 0, %547 ]
  %639 = phi i64 [ %245, %259 ], [ %32, %591 ], [ %32, %634 ], [ %245, %293 ], [ %245, %307 ], [ %245, %310 ], [ %484, %498 ], [ %484, %530 ], [ %484, %544 ], [ %484, %547 ]
  %640 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %641 = icmp eq %"class.WTF::StringImpl"* %640, null
  br i1 %641, label %655, label %642

642:                                              ; preds = %636
  %643 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %640, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %644 = load atomic i32, i32* %643 monotonic, align 4
  %645 = and i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %640, i64 0, i32 0
  %648 = load i32, i32* %647, align 4
  br i1 %646, label %649, label %651

649:                                              ; preds = %642
  %650 = add i32 %648, -1
  store i32 %650, i32* %647, align 4
  br label %651

651:                                              ; preds = %649, %642
  %652 = phi i32 [ %650, %649 ], [ %648, %642 ]
  %653 = icmp eq i32 %652, 0
  br i1 %653, label %654, label %655

654:                                              ; preds = %651
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %640) #10
  br label %655

655:                                              ; preds = %636, %651, %654
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %163) #10
  %656 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %657 = icmp eq %"class.WTF::StringImpl"* %656, null
  br i1 %657, label %671, label %658

658:                                              ; preds = %655
  %659 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %656, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %660 = load atomic i32, i32* %659 monotonic, align 4
  %661 = and i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %656, i64 0, i32 0
  %664 = load i32, i32* %663, align 4
  br i1 %662, label %665, label %667

665:                                              ; preds = %658
  %666 = add i32 %664, -1
  store i32 %666, i32* %663, align 4
  br label %667

667:                                              ; preds = %665, %658
  %668 = phi i32 [ %666, %665 ], [ %664, %658 ]
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %670, label %671

670:                                              ; preds = %667
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %656) #10
  br label %671

671:                                              ; preds = %655, %667, %670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %137) #10
  br label %672

672:                                              ; preds = %135, %132, %121, %671
  %673 = phi %"class.WTF::StringImpl"* [ %637, %671 ], [ %44, %121 ], [ %44, %132 ], [ %44, %135 ]
  %674 = phi i8 [ %638, %671 ], [ %96, %121 ], [ %96, %132 ], [ %96, %135 ]
  %675 = phi i64 [ %639, %671 ], [ %122, %121 ], [ %122, %132 ], [ %122, %135 ]
  %676 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %677 = icmp eq %"class.WTF::StringImpl"* %676, null
  br i1 %677, label %691, label %678

678:                                              ; preds = %672
  %679 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %676, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %680 = load atomic i32, i32* %679 monotonic, align 4
  %681 = and i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %676, i64 0, i32 0
  %684 = load i32, i32* %683, align 4
  br i1 %682, label %685, label %687

685:                                              ; preds = %678
  %686 = add i32 %684, -1
  store i32 %686, i32* %683, align 4
  br label %687

687:                                              ; preds = %685, %678
  %688 = phi i32 [ %686, %685 ], [ %684, %678 ]
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %690, label %691

690:                                              ; preds = %687
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %676) #10
  br label %691

691:                                              ; preds = %672, %687, %690
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #10
  br i1 %48, label %705, label %692

692:                                              ; preds = %691
  %693 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %694 = load atomic i32, i32* %693 monotonic, align 4
  %695 = and i32 %694, 2
  %696 = icmp eq i32 %695, 0
  %697 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %698 = load i32, i32* %697, align 4
  br i1 %696, label %699, label %701

699:                                              ; preds = %692
  %700 = add i32 %698, -1
  store i32 %700, i32* %697, align 4
  br label %701

701:                                              ; preds = %699, %692
  %702 = phi i32 [ %700, %699 ], [ %698, %692 ]
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %704, label %705

704:                                              ; preds = %701
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #10
  br label %705

705:                                              ; preds = %691, %701, %704
  %706 = icmp eq %"class.WTF::StringImpl"* %673, null
  br i1 %706, label %720, label %707

707:                                              ; preds = %705
  %708 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %673, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %709 = load atomic i32, i32* %708 monotonic, align 4
  %710 = and i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %673, i64 0, i32 0
  %713 = load i32, i32* %712, align 4
  br i1 %711, label %714, label %716

714:                                              ; preds = %707
  %715 = add i32 %713, -1
  store i32 %715, i32* %712, align 4
  br label %716

716:                                              ; preds = %714, %707
  %717 = phi i32 [ %715, %714 ], [ %713, %707 ]
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %719, label %720

719:                                              ; preds = %716
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %673) #10
  br label %720

720:                                              ; preds = %705, %716, %719
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43)
  br label %721

721:                                              ; preds = %35, %720
  %722 = phi i8 [ 0, %35 ], [ %674, %720 ]
  %723 = phi i64 [ %32, %35 ], [ %675, %720 ]
  %724 = insertvalue { i8, %"class.WTF::StringImpl"* } undef, i8 %722, 0
  %725 = inttoptr i64 %723 to %"class.WTF::StringImpl"*
  %726 = insertvalue { i8, %"class.WTF::StringImpl"* } %724, %"class.WTF::StringImpl"* %725, 1
  ret { i8, %"class.WTF::StringImpl"* } %726
}

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element7IsValueEv(%"class.blink::Element"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator19AppendStartTagCloseERKNS_7ElementE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  tail call void @_ZN5blink15MarkupFormatter19AppendStartTagCloseERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"* %3, %"class.WTF::StringBuilder"* dereferenceable(48) %4, %"class.blink::Element"* dereferenceable(104) %1) #10
  ret void
}

declare void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"*, %"class.WTF::StringBuilder"* dereferenceable(48), %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator16NamespaceContext26RecordNamespaceInformationERKNS_7ElementE(%"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %39, label %6

6:                                                ; preds = %2
  tail call void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"* %1) #10
  %7 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %8 = icmp eq %"class.blink::ElementData"* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = load i32, i32* null, align 536870912
  br label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %7, i64 0, i32 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %11
  %17 = bitcast %"class.blink::ElementData"* %7 to %"class.blink::UniqueElementData"*
  %18 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %7, i64 1, i32 1
  %19 = bitcast %"class.blink::Member.61"* %18 to %"class.blink::Attribute"**
  %20 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %17, i64 0, i32 2, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  br label %29

23:                                               ; preds = %11, %9
  %24 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %25 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %7, i64 1
  %26 = bitcast %"class.blink::ElementData"* %25 to %"class.blink::Attribute"*
  %27 = lshr i32 %24, 1
  %28 = and i32 %27, 268435455
  br label %29

29:                                               ; preds = %16, %23
  %30 = phi i32 [ %28, %23 ], [ %22, %16 ]
  %31 = phi %"class.blink::Attribute"* [ %26, %23 ], [ %20, %16 ]
  %32 = zext i32 %30 to i64
  %33 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %31, i64 %32
  %34 = icmp eq i32 %30, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %29
  %36 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  %37 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  br label %42

39:                                               ; preds = %106, %2, %29
  %40 = phi i64 [ 0, %29 ], [ 0, %2 ], [ %107, %106 ]
  %41 = inttoptr i64 %40 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %41

42:                                               ; preds = %35, %106
  %43 = phi %"class.blink::Attribute"* [ %31, %35 ], [ %108, %106 ]
  %44 = phi i64 [ 0, %35 ], [ %107, %106 ]
  %45 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %43, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %46, i64 0, i32 2, i32 0, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %56, label %50

50:                                               ; preds = %42
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  br label %99

56:                                               ; preds = %42, %50
  %57 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %46, i64 0, i32 3, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %58, %59
  br i1 %60, label %61, label %99

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %43, i64 0, i32 1, i32 0, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %64, label %82, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i33
  %74 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %73, i33 1) #10
  %75 = extractvalue { i33, i1 } %74, 1
  %76 = extractvalue { i33, i1 } %74, 0
  %77 = icmp slt i33 %76, 0
  %78 = or i1 %75, %77
  br i1 %78, label %79, label %80, !prof !3

79:                                               ; preds = %70
  tail call void @llvm.trap() #10
  unreachable

80:                                               ; preds = %70
  %81 = trunc i33 %76 to i32
  store i32 %81, i32* %71, align 4
  br label %82

82:                                               ; preds = %80, %65, %61
  %83 = ptrtoint %"class.WTF::StringImpl"* %63 to i64
  %84 = inttoptr i64 %44 to %"class.WTF::StringImpl"*
  %85 = icmp eq i64 %44, 0
  br i1 %85, label %106, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %106

98:                                               ; preds = %95
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #10
  br label %106

99:                                               ; preds = %54, %56
  %100 = phi %"class.WTF::StringImpl"* [ %55, %54 ], [ %59, %56 ]
  %101 = icmp eq %"class.WTF::StringImpl"* %48, %100
  br i1 %101, label %102, label %106

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %46, i64 0, i32 3
  %104 = select i1 %49, %"class.WTF::AtomicString"* %38, %"class.WTF::AtomicString"* %103
  %105 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %43, i64 0, i32 1
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %104, %"class.WTF::AtomicString"* dereferenceable(8) %105)
  br label %106

106:                                              ; preds = %98, %95, %82, %99, %102
  %107 = phi i64 [ %44, %102 ], [ %44, %99 ], [ %83, %82 ], [ %83, %95 ], [ %83, %98 ]
  %108 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %43, i64 1
  %109 = icmp eq %"class.blink::Attribute"* %108, %33
  br i1 %109, label %39, label %42
}

declare void @_ZN5blink15MarkupFormatter18AppendStartTagOpenERN3WTF13StringBuilderERKNS1_12AtomicStringES6_(%"class.blink::MarkupFormatter"*, %"class.WTF::StringBuilder"* dereferenceable(48), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator29RetrievePreferredPrefixStringERKN3WTF12AtomicStringES4_(%"class.blink::MarkupAccumulator"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::Vector.18", align 8
  %6 = tail call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %41, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = icmp eq %"class.WTF::StringImpl"* %6, null
  %15 = or i1 %14, %13
  br i1 %15, label %41, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = tail call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* nonnull %6, %"class.WTF::StringImpl"* %18) #10
  br i1 %19, label %20, label %41

20:                                               ; preds = %16
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %22 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %21, %"class.WTF::StringImpl"** %22, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %23, label %210, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %210

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i33
  %33 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %32, i33 1) #10
  %34 = extractvalue { i33, i1 } %33, 1
  %35 = extractvalue { i33, i1 } %33, 0
  %36 = icmp slt i33 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %39, !prof !3

38:                                               ; preds = %29
  tail call void @llvm.trap() #10
  unreachable

39:                                               ; preds = %29
  %40 = trunc i33 %35 to i32
  store i32 %40, i32* %30, align 4
  br label %210

41:                                               ; preds = %3, %16, %10
  %42 = bitcast %"class.WTF::Vector.18"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #10
  %43 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %44 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = add i32 %45, -1
  %47 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %43, i32 %46) #10
  %48 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %47, i64 0, i32 1
  %49 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8, !noalias !5
  %51 = icmp eq %"class.WTF::StringImpl"* %50, null
  %52 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8, !noalias !5
  %53 = select i1 %51, %"class.WTF::AtomicString"* %52, %"class.WTF::AtomicString"* %1
  call void @_ZNK3WTF7HashMapINS_12AtomicStringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_16AtomicStringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector.18"* nonnull sret %5, %"class.WTF::HashMap.13"* %48, %"class.WTF::AtomicString"* dereferenceable(8) %53) #10
  %54 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %5, i64 0, i32 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %5, i64 0, i32 0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %123, label %59

59:                                               ; preds = %41
  %60 = zext i32 %56 to i64
  %61 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %54, align 8
  %62 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %61, i64 %60
  br label %63

63:                                               ; preds = %59, %120
  %64 = phi %"class.WTF::AtomicString"* [ %62, %59 ], [ %65, %120 ]
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %57, align 8
  %65 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 -1
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  store %"class.WTF::StringImpl"* %67, %"class.WTF::StringImpl"** %57, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %68, label %86, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load atomic i32, i32* %70 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %86

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = zext i32 %76 to i33
  %78 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %77, i33 1) #10
  %79 = extractvalue { i33, i1 } %78, 1
  %80 = extractvalue { i33, i1 } %78, 0
  %81 = icmp slt i33 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %84, !prof !3

83:                                               ; preds = %74
  call void @llvm.trap() #10
  unreachable

84:                                               ; preds = %74
  %85 = trunc i33 %80 to i32
  store i32 %85, i32* %75, align 4
  br label %86

86:                                               ; preds = %63, %69, %84
  %87 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4)
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %89 = call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* %87, %"class.WTF::StringImpl"* %88) #10
  %90 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %90, label %104, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  br i1 %95, label %98, label %100

98:                                               ; preds = %91
  %99 = add i32 %97, -1
  store i32 %99, i32* %96, align 4
  br label %100

100:                                              ; preds = %98, %91
  %101 = phi i32 [ %99, %98 ], [ %97, %91 ]
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %100
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %87) #10
  br label %104

104:                                              ; preds = %86, %100, %103
  %105 = or i1 %68, %89
  br i1 %105, label %119, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %67) #10
  br label %119

119:                                              ; preds = %104, %118, %115
  br i1 %89, label %171, label %120

120:                                              ; preds = %119
  %121 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %54, align 8
  %122 = icmp eq %"class.WTF::AtomicString"* %65, %121
  br i1 %122, label %123, label %63

123:                                              ; preds = %120, %41
  %124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %125 = icmp eq %"class.WTF::StringImpl"* %124, null
  br i1 %125, label %149, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = icmp ne i32 %128, 0
  %130 = icmp eq %"class.WTF::StringImpl"* %6, null
  %131 = and i1 %130, %129
  br i1 %131, label %132, label %149

132:                                              ; preds = %126
  store %"class.WTF::StringImpl"* %124, %"class.WTF::StringImpl"** %57, align 8
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = and i32 %134, 2
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %171

137:                                              ; preds = %132
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i33
  %141 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %140, i33 1) #10
  %142 = extractvalue { i33, i1 } %141, 1
  %143 = extractvalue { i33, i1 } %141, 0
  %144 = icmp slt i33 %143, 0
  %145 = or i1 %142, %144
  br i1 %145, label %146, label %147, !prof !3

146:                                              ; preds = %137
  call void @llvm.trap() #10
  unreachable

147:                                              ; preds = %137
  %148 = trunc i33 %143 to i32
  store i32 %148, i32* %138, align 4
  br label %171

149:                                              ; preds = %126, %123
  %150 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %151 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %150, i64 0, i32 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store %"class.WTF::StringImpl"* %152, %"class.WTF::StringImpl"** %57, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %171, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %171

159:                                              ; preds = %154
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  %162 = zext i32 %161 to i33
  %163 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %162, i33 1) #10
  %164 = extractvalue { i33, i1 } %163, 1
  %165 = extractvalue { i33, i1 } %163, 0
  %166 = icmp slt i33 %165, 0
  %167 = or i1 %164, %166
  br i1 %167, label %168, label %169, !prof !3

168:                                              ; preds = %159
  call void @llvm.trap() #10
  unreachable

169:                                              ; preds = %159
  %170 = trunc i33 %165 to i32
  store i32 %170, i32* %160, align 4
  br label %171

171:                                              ; preds = %119, %169, %154, %149, %147, %132
  %172 = phi %"class.WTF::StringImpl"* [ %152, %169 ], [ %152, %154 ], [ null, %149 ], [ %124, %147 ], [ %124, %132 ], [ %67, %119 ]
  %173 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %54, align 8
  %174 = icmp eq %"class.WTF::AtomicString"* %173, null
  br i1 %174, label %208, label %175, !prof !2

175:                                              ; preds = %171
  %176 = bitcast %"class.WTF::AtomicString"* %173 to i8*
  %177 = load i32, i32* %55, align 4
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %206, label %179, !prof !3

179:                                              ; preds = %175
  %180 = zext i32 %177 to i64
  %181 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %173, i64 %180
  br label %182

182:                                              ; preds = %200, %179
  %183 = phi %"class.WTF::AtomicString"* [ %201, %200 ], [ %173, %179 ]
  %184 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %183, i64 0, i32 0, i32 0, i32 0
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %184, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %200, label %187

187:                                              ; preds = %182
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %196
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %185) #10
  br label %200

200:                                              ; preds = %199, %196, %182
  %201 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %183, i64 1
  %202 = icmp eq %"class.WTF::AtomicString"* %201, %181
  br i1 %202, label %203, label %182

203:                                              ; preds = %200
  store i32 0, i32* %55, align 4
  %204 = bitcast %"class.WTF::Vector.18"* %5 to i8**
  %205 = load i8*, i8** %204, align 8
  br label %206

206:                                              ; preds = %203, %175
  %207 = phi i8* [ %205, %203 ], [ %176, %175 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %207) #10
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %54, align 8
  br label %208

208:                                              ; preds = %206, %171
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #10
  %209 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %209, label %224, label %210

210:                                              ; preds = %20, %24, %39, %208
  %211 = phi %"class.WTF::StringImpl"* [ null, %20 ], [ %21, %24 ], [ %21, %39 ], [ %172, %208 ]
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %213 = load atomic i32, i32* %212 monotonic, align 4
  %214 = and i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %217 = load i32, i32* %216, align 4
  br i1 %215, label %218, label %220

218:                                              ; preds = %210
  %219 = add i32 %217, -1
  store i32 %219, i32* %216, align 4
  br label %220

220:                                              ; preds = %218, %210
  %221 = phi i32 [ %219, %218 ], [ %217, %210 ]
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %220
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %6) #10
  br label %224

224:                                              ; preds = %208, %220, %223
  %225 = phi %"class.WTF::StringImpl"* [ %172, %208 ], [ %211, %220 ], [ %211, %223 ]
  ret %"class.WTF::StringImpl"* %225
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, -1
  %7 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %3, i32 %6) #10
  %8 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %8, align 8
  %10 = icmp eq %"struct.WTF::KeyValuePair"* %9, null
  br i1 %10, label %67, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %16 = select i1 %14, %"class.WTF::AtomicString"* %15, %"class.WTF::AtomicString"* %1
  %17 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %7, i64 0, i32 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = add i32 %18, -1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = lshr i32 %24, 8
  %26 = and i32 %25, %19
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %67, label %32

32:                                               ; preds = %11
  %33 = xor i32 %25, -1
  %34 = lshr i32 %24, 31
  %35 = add nsw i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %56, %32
  %47 = phi %"struct.WTF::KeyValuePair"* [ %28, %32 ], [ %61, %56 ]
  %48 = phi i64 [ %27, %32 ], [ %60, %56 ]
  %49 = phi i64 [ 0, %32 ], [ %58, %56 ]
  %50 = bitcast %"struct.WTF::KeyValuePair"* %47 to i8**
  %51 = load i8*, i8** %50, align 8
  %52 = icmp ne i8* %51, inttoptr (i64 -1 to i8*)
  %53 = bitcast i8* %51 to %"class.WTF::StringImpl"*
  %54 = icmp eq %"class.WTF::StringImpl"* %22, %53
  %55 = and i1 %52, %54
  br i1 %55, label %65, label %56

56:                                               ; preds = %46
  %57 = icmp eq i64 %49, 0
  %58 = select i1 %57, i64 %45, i64 %49
  %59 = add i64 %58, %48
  %60 = and i64 %59, %20
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %60
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 0, i32 0, i32 0, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %64, label %67, label %46

65:                                               ; preds = %46
  %66 = icmp eq %"struct.WTF::KeyValuePair"* %47, null
  br i1 %66, label %67, label %69

67:                                               ; preds = %56, %65, %11, %2
  %68 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %71

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %47, i64 0, i32 1
  br label %71

71:                                               ; preds = %67, %69
  %72 = phi %"class.WTF::AtomicString"* [ %70, %69 ], [ %68, %67 ]
  %73 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %93, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %93

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i33
  %85 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %84, i33 1) #10
  %86 = extractvalue { i33, i1 } %85, 1
  %87 = extractvalue { i33, i1 } %85, 0
  %88 = icmp slt i33 %87, 0
  %89 = or i1 %86, %88
  br i1 %89, label %90, label %91, !prof !3

90:                                               ; preds = %81
  tail call void @llvm.trap() #10
  unreachable

91:                                               ; preds = %81
  %92 = trunc i33 %87 to i32
  store i32 %92, i32* %82, align 4
  br label %93

93:                                               ; preds = %71, %76, %91
  ret %"class.WTF::StringImpl"* %74
}

declare zeroext i1 @_ZNK5blink7Element12hasAttributeERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_12AtomicStringEEENS_12StringAppendINS_6StringET_EERKS3_S4_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.WTF::StringAppend", align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %2, %7, %22
  %25 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %25, label %43, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #10
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !3

40:                                               ; preds = %31
  tail call void @llvm.trap() #10
  unreachable

41:                                               ; preds = %31
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %32, align 4
  br label %44

43:                                               ; preds = %24
  call void @_ZN3WTF12StringAppendINS_6StringENS_12AtomicStringEEC2ES1_S2_(%"class.WTF::StringAppend"* nonnull %3, %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"* null)
  br label %56

44:                                               ; preds = %26, %41
  call void @_ZN3WTF12StringAppendINS_6StringENS_12AtomicStringEEC2ES1_S2_(%"class.WTF::StringAppend"* nonnull %3, %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"* nonnull %1)
  %45 = load atomic i32, i32* %27 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %44
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %44
  %53 = phi i32 [ %51, %50 ], [ %49, %44 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %56

56:                                               ; preds = %43, %52, %55
  %57 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = insertvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } undef, %"class.WTF::StringImpl"* %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = insertvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %59, %"class.WTF::StringImpl"* %61, 1
  ret { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEEcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.798", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.798", align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %12 = select i1 %10, %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"* %9
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %103, label %19

19:                                               ; preds = %1
  %20 = icmp eq %"class.WTF::StringImpl"* %14, null
  %21 = select i1 %20, %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"* %14
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %103, label %26

26:                                               ; preds = %19
  %27 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %28 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend"* %0)
  %29 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %28, i8** nonnull dereferenceable(8) %6) #10
  %30 = load i8*, i8** %6, align 8
  %31 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #10
  %32 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 24, i1 false) #10
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %26
  %37 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %44

38:                                               ; preds = %26
  %39 = ptrtoint %"class.WTF::StringImpl"* %34 to i64
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  br label %44

44:                                               ; preds = %38, %36
  %45 = phi i8* [ null, %36 ], [ %43, %38 ]
  %46 = phi i64 [ %37, %36 ], [ %39, %38 ]
  %47 = phi i32 [ 0, %36 ], [ %41, %38 ]
  %48 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i64*
  store i64 %46, i64* %48, align 8
  store i8* %45, i8** %32, align 8
  store i32 %47, i32* %33, align 8
  %49 = bitcast %"class.WTF::StringTypeAdapter.798"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #10
  %50 = getelementptr inbounds %"class.WTF::StringTypeAdapter.798", %"class.WTF::StringTypeAdapter.798"* %5, i64 0, i32 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.WTF::StringTypeAdapter.798", %"class.WTF::StringTypeAdapter.798"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 24, i1 false) #10
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %54, label %56

54:                                               ; preds = %44
  %55 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %62

56:                                               ; preds = %44
  %57 = ptrtoint %"class.WTF::StringImpl"* %52 to i64
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  %61 = bitcast %"class.WTF::StringImpl"* %60 to i8*
  br label %62

62:                                               ; preds = %54, %56
  %63 = phi i8* [ null, %54 ], [ %61, %56 ]
  %64 = phi i64 [ %55, %54 ], [ %57, %56 ]
  %65 = phi i32 [ 0, %54 ], [ %59, %56 ]
  %66 = bitcast %"class.WTF::StringTypeAdapter.798"* %5 to i64*
  store i64 %64, i64* %66, align 8
  store i8* %63, i8** %50, align 8
  store i32 %65, i32* %51, align 8
  %67 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.797"* nonnull %67, i8* %30) #10
  %68 = getelementptr inbounds %"class.WTF::StringTypeAdapter.798", %"class.WTF::StringTypeAdapter.798"* %5, i64 0, i32 0
  %69 = load i32, i32* %33, align 8
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %30, i64 %70
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.797"* nonnull %68, i8* %71) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #10
  %72 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %72, label %180, label %73

73:                                               ; preds = %62
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %90

80:                                               ; preds = %73
  %81 = zext i32 %79 to i33
  %82 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #10
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !3

87:                                               ; preds = %80
  call void @llvm.trap() #10
  unreachable

88:                                               ; preds = %80
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %78, align 4
  br label %90

90:                                               ; preds = %73, %88
  %91 = phi i32 [ %89, %88 ], [ %79, %73 ]
  %92 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %93 = load atomic i32, i32* %74 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %98 = add i32 %91, -1
  store i32 %98, i32* %97, align 4
  br label %99

99:                                               ; preds = %96, %90
  %100 = phi i32 [ %98, %96 ], [ %91, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %180

102:                                              ; preds = %99
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #10
  br label %180

103:                                              ; preds = %19, %1
  %104 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %105 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend"* %0)
  %106 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %105, i16** nonnull dereferenceable(8) %7) #10
  %107 = load i16*, i16** %7, align 8
  %108 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %108) #10
  %109 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 1
  %110 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %108, i8 -86, i64 24, i1 false) #10
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %113, label %115

113:                                              ; preds = %103
  %114 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %121

115:                                              ; preds = %103
  %116 = ptrtoint %"class.WTF::StringImpl"* %111 to i64
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 1
  %120 = bitcast %"class.WTF::StringImpl"* %119 to i8*
  br label %121

121:                                              ; preds = %115, %113
  %122 = phi i8* [ null, %113 ], [ %120, %115 ]
  %123 = phi i64 [ %114, %113 ], [ %116, %115 ]
  %124 = phi i32 [ 0, %113 ], [ %118, %115 ]
  %125 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i64*
  store i64 %123, i64* %125, align 8
  store i8* %122, i8** %109, align 8
  store i32 %124, i32* %110, align 8
  %126 = bitcast %"class.WTF::StringTypeAdapter.798"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %126) #10
  %127 = getelementptr inbounds %"class.WTF::StringTypeAdapter.798", %"class.WTF::StringTypeAdapter.798"* %3, i64 0, i32 0, i32 0, i32 1
  %128 = getelementptr inbounds %"class.WTF::StringTypeAdapter.798", %"class.WTF::StringTypeAdapter.798"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %126, i8 -86, i64 24, i1 false) #10
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %131, label %133

131:                                              ; preds = %121
  %132 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %139

133:                                              ; preds = %121
  %134 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 1
  %138 = bitcast %"class.WTF::StringImpl"* %137 to i8*
  br label %139

139:                                              ; preds = %131, %133
  %140 = phi i8* [ null, %131 ], [ %138, %133 ]
  %141 = phi i64 [ %132, %131 ], [ %134, %133 ]
  %142 = phi i32 [ 0, %131 ], [ %136, %133 ]
  %143 = bitcast %"class.WTF::StringTypeAdapter.798"* %3 to i64*
  store i64 %141, i64* %143, align 8
  store i8* %140, i8** %127, align 8
  store i32 %142, i32* %128, align 8
  %144 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.797"* nonnull %144, i16* %107) #10
  %145 = getelementptr inbounds %"class.WTF::StringTypeAdapter.798", %"class.WTF::StringTypeAdapter.798"* %3, i64 0, i32 0
  %146 = load i32, i32* %110, align 8
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i16, i16* %107, i64 %147
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.797"* nonnull %145, i16* %148) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %126) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %108) #10
  %149 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %149, label %180, label %150

150:                                              ; preds = %139
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  br i1 %154, label %157, label %167

157:                                              ; preds = %150
  %158 = zext i32 %156 to i33
  %159 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %158, i33 1) #10
  %160 = extractvalue { i33, i1 } %159, 1
  %161 = extractvalue { i33, i1 } %159, 0
  %162 = icmp slt i33 %161, 0
  %163 = or i1 %160, %162
  br i1 %163, label %164, label %165, !prof !3

164:                                              ; preds = %157
  call void @llvm.trap() #10
  unreachable

165:                                              ; preds = %157
  %166 = trunc i33 %161 to i32
  store i32 %166, i32* %155, align 4
  br label %167

167:                                              ; preds = %150, %165
  %168 = phi i32 [ %166, %165 ], [ %156, %150 ]
  %169 = ptrtoint %"class.WTF::StringImpl"* %106 to i64
  %170 = load atomic i32, i32* %151 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %167
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %175 = add i32 %168, -1
  store i32 %175, i32* %174, align 4
  br label %176

176:                                              ; preds = %173, %167
  %177 = phi i32 [ %175, %173 ], [ %168, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #10
  br label %180

180:                                              ; preds = %179, %176, %139, %102, %99, %62
  %181 = phi i8* [ %27, %62 ], [ %27, %99 ], [ %27, %102 ], [ %104, %139 ], [ %104, %176 ], [ %104, %179 ]
  %182 = phi i64 [ 0, %62 ], [ %92, %99 ], [ %92, %102 ], [ 0, %139 ], [ %169, %176 ], [ %169, %179 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #10
  %183 = inttoptr i64 %182 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %183
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator14GeneratePrefixERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::StringAppend.732", align 8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %6, align 8
  %7 = bitcast %"class.WTF::StringAppend.732"* %5 to i8*
  %8 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 7
  %9 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 11
  %11 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 2
  %12 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 3
  %13 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 12
  %14 = ptrtoint i8* %10 to i64
  %15 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 10
  %16 = bitcast i8** %11 to i64*
  %17 = ptrtoint i8* %13 to i64
  %18 = getelementptr inbounds %"class.WTF::StringAppend.732", %"class.WTF::StringAppend.732"* %5, i64 0, i32 0
  %19 = getelementptr inbounds %"class.WTF::StringAppend.732", %"class.WTF::StringAppend.732"* %5, i64 0, i32 1, i32 0, i32 0
  %20 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %21 = ptrtoint i8* %15 to i64
  %22 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 9
  br label %23

23:                                               ; preds = %206, %2
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %24 = load i32, i32* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false) #10
  store i8* %10, i8** %11, align 8
  %25 = urem i32 %24, 10
  %26 = udiv i32 %24, 10
  %27 = trunc i32 %25 to i8
  %28 = or i8 %27, 48
  store i8 %28, i8* %10, align 1
  %29 = icmp ugt i32 %24, 9
  br i1 %29, label %30, label %52

30:                                               ; preds = %23
  store i8* %15, i8** %11, align 8
  %31 = urem i32 %26, 10
  %32 = trunc i32 %31 to i8
  %33 = or i8 %32, 48
  store i8 %33, i8* %15, align 2
  %34 = icmp ugt i32 %24, 99
  br i1 %34, label %35, label %52

35:                                               ; preds = %30
  %36 = udiv i32 %24, 100
  store i8* %22, i8** %11, align 8
  %37 = urem i32 %36, 10
  %38 = trunc i32 %37 to i8
  %39 = or i8 %38, 48
  store i8 %39, i8* %22, align 1
  %40 = icmp ugt i32 %24, 999
  br i1 %40, label %41, label %50

41:                                               ; preds = %35, %41
  %42 = phi i32 [ %44, %41 ], [ %36, %35 ]
  %43 = load i8*, i8** %11, align 8
  %44 = udiv i32 %42, 10
  %45 = getelementptr inbounds i8, i8* %43, i64 -1
  store i8* %45, i8** %11, align 8
  %46 = urem i32 %44, 10
  %47 = trunc i32 %46 to i8
  %48 = or i8 %47, 48
  store i8 %48, i8* %45, align 1
  %49 = icmp ugt i32 %42, 99
  br i1 %49, label %41, label %50

50:                                               ; preds = %41, %35
  %51 = load i64, i64* %16, align 8
  br label %52

52:                                               ; preds = %30, %50, %23
  %53 = phi i64 [ %14, %23 ], [ %51, %50 ], [ %21, %30 ]
  %54 = sub i64 %17, %53
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %12, align 8
  %56 = inttoptr i64 %53 to i8*
  %57 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %56, i32 %55) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #10
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %102, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %76

66:                                               ; preds = %59
  %67 = zext i32 %65 to i33
  %68 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %67, i33 1) #10
  %69 = extractvalue { i33, i1 } %68, 1
  %70 = extractvalue { i33, i1 } %68, 0
  %71 = icmp slt i33 %70, 0
  %72 = or i1 %69, %71
  br i1 %72, label %73, label %74, !prof !3

73:                                               ; preds = %66
  call void @llvm.trap() #10
  unreachable

74:                                               ; preds = %66
  %75 = trunc i33 %70 to i32
  store i32 %75, i32* %64, align 4
  br label %76

76:                                               ; preds = %74, %59
  %77 = phi i32 [ %75, %74 ], [ %65, %59 ]
  %78 = load atomic i32, i32* %60 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %91

81:                                               ; preds = %76
  %82 = zext i32 %77 to i33
  %83 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %82, i33 1) #10
  %84 = extractvalue { i33, i1 } %83, 1
  %85 = extractvalue { i33, i1 } %83, 0
  %86 = icmp slt i33 %85, 0
  %87 = or i1 %84, %86
  br i1 %87, label %88, label %89, !prof !3

88:                                               ; preds = %81
  call void @llvm.trap() #10
  unreachable

89:                                               ; preds = %81
  %90 = trunc i33 %85 to i32
  store i32 %90, i32* %64, align 4
  br label %91

91:                                               ; preds = %89, %76
  %92 = phi i32 [ %90, %89 ], [ %77, %76 ]
  %93 = load atomic i32, i32* %60 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %91
  %97 = add i32 %92, -1
  store i32 %97, i32* %64, align 4
  br label %98

98:                                               ; preds = %96, %91
  %99 = phi i32 [ %97, %96 ], [ %92, %91 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #10
  br label %102

102:                                              ; preds = %52, %98, %101
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %18, align 8
  store %"class.WTF::StringImpl"* %57, %"class.WTF::StringImpl"** %19, align 8
  %103 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendIPKcNS_6StringEEcvS3_Ev(%"class.WTF::StringAppend.732"* nonnull %5) #10
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %141, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = load atomic i32, i32* %106 acquire, align 4
  %108 = and i32 %107, 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %126, label %110

110:                                              ; preds = %105
  %111 = load atomic i32, i32* %106 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %128

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = zext i32 %116 to i33
  %118 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %117, i33 1) #10
  %119 = extractvalue { i33, i1 } %118, 1
  %120 = extractvalue { i33, i1 } %118, 0
  %121 = icmp slt i33 %120, 0
  %122 = or i1 %119, %121
  br i1 %122, label %123, label %124, !prof !3

123:                                              ; preds = %114
  call void @llvm.trap() #10
  unreachable

124:                                              ; preds = %114
  %125 = trunc i33 %120 to i32
  store i32 %125, i32* %115, align 4
  br label %128

126:                                              ; preds = %105
  %127 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %103) #10
  br label %128

128:                                              ; preds = %126, %124, %110
  %129 = phi %"class.WTF::StringImpl"* [ %103, %124 ], [ %103, %110 ], [ %127, %126 ]
  %130 = load atomic i32, i32* %106 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %128
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %128
  %138 = phi i32 [ %136, %135 ], [ %134, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %103) #10
  br label %141

141:                                              ; preds = %102, %137, %140
  %142 = phi %"class.WTF::StringImpl"* [ %129, %137 ], [ %129, %140 ], [ null, %102 ]
  %143 = ptrtoint %"class.WTF::StringImpl"* %142 to i64
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  store i64 %143, i64* %20, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %159, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %155

153:                                              ; preds = %146
  %154 = add i32 %152, -1
  store i32 %154, i32* %151, align 4
  br label %155

155:                                              ; preds = %153, %146
  %156 = phi i32 [ %154, %153 ], [ %152, %146 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #10
  br label %159

159:                                              ; preds = %158, %155, %141
  %160 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %161 = icmp eq %"class.WTF::StringImpl"* %160, null
  br i1 %161, label %175, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  br i1 %166, label %169, label %171

169:                                              ; preds = %162
  %170 = add i32 %168, -1
  store i32 %170, i32* %167, align 4
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi i32 [ %170, %169 ], [ %168, %162 ]
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %160) #10
  br label %175

175:                                              ; preds = %159, %171, %174
  br i1 %58, label %189, label %176

176:                                              ; preds = %175
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = and i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %182 = load i32, i32* %181, align 4
  br i1 %180, label %183, label %185

183:                                              ; preds = %176
  %184 = add i32 %182, -1
  store i32 %184, i32* %181, align 4
  br label %185

185:                                              ; preds = %183, %176
  %186 = phi i32 [ %184, %183 ], [ %182, %176 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #10
  br label %189

189:                                              ; preds = %175, %185, %188
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  %190 = load i32, i32* %8, align 8
  %191 = add i32 %190, 1
  store i32 %191, i32* %8, align 8
  %192 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4)
  %193 = icmp eq %"class.WTF::StringImpl"* %192, null
  br i1 %193, label %208, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 0
  %200 = load i32, i32* %199, align 4
  br i1 %198, label %201, label %203

201:                                              ; preds = %194
  %202 = add i32 %200, -1
  store i32 %202, i32* %199, align 4
  br label %203

203:                                              ; preds = %201, %194
  %204 = phi i32 [ %202, %201 ], [ %200, %194 ]
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %207, label %206

206:                                              ; preds = %203, %207
  br label %23

207:                                              ; preds = %203
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %192) #10
  br label %206

208:                                              ; preds = %189
  %209 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %210 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, -1
  %213 = call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %209, i32 %212) #10
  call void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"* %213, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* dereferenceable(8) %1) #10
  %214 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  ret %"class.WTF::StringImpl"* %214
}

declare void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), i1 zeroext) local_unnamed_addr #1

declare void @_ZN5blink15MarkupFormatter19AppendStartTagCloseERN3WTF13StringBuilderERKNS_7ElementE(%"class.blink::MarkupFormatter"*, %"class.WTF::StringBuilder"* dereferenceable(48), %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator15AppendAttributeERKNS_7ElementERKNS_9AttributeE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* dereferenceable(104), %"class.blink::Attribute"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %8 = tail call %"class.WTF::StringImpl"* @_ZNK5blink15MarkupFormatter18ResolveURLIfNeededERKNS_7ElementERKNS_9AttributeE(%"class.blink::MarkupFormatter"* %7, %"class.blink::Element"* dereferenceable(104) %1, %"class.blink::Attribute"* dereferenceable(16) %2) #10
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %6, align 8
  %9 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %7) #10
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  call void @_ZN5blink15MarkupFormatter21AppendAttributeAsHTMLERN3WTF13StringBuilderERKNS_9AttributeERKNS1_6StringE(%"class.WTF::StringBuilder"* dereferenceable(48) %11, %"class.blink::Attribute"* dereferenceable(16) %2, %"class.WTF::String"* nonnull dereferenceable(8) %4) #10
  br label %13

12:                                               ; preds = %3
  call void @_ZN5blink17MarkupAccumulator33AppendAttributeAsXMLWithNamespaceERKNS_7ElementERKNS_9AttributeERKN3WTF6StringE(%"class.blink::MarkupAccumulator"* %0, %"class.blink::Element"* dereferenceable(104) undef, %"class.blink::Attribute"* dereferenceable(16) %2, %"class.WTF::String"* nonnull dereferenceable(8) %4)
  br label %13

13:                                               ; preds = %12, %10
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  br i1 %20, label %23, label %25

23:                                               ; preds = %16
  %24 = add i32 %22, -1
  store i32 %24, i32* %21, align 4
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i32 [ %24, %23 ], [ %22, %16 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #10
  br label %29

29:                                               ; preds = %13, %25, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK5blink15MarkupFormatter18ResolveURLIfNeededERKNS_7ElementERKNS_9AttributeE(%"class.blink::MarkupFormatter"*, %"class.blink::Element"* dereferenceable(104), %"class.blink::Attribute"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN5blink15MarkupFormatter21AppendAttributeAsHTMLERN3WTF13StringBuilderERKNS_9AttributeERKNS1_6StringE(%"class.WTF::StringBuilder"* dereferenceable(48), %"class.blink::Attribute"* dereferenceable(16), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator33AppendAttributeAsXMLWithNamespaceERKNS_7ElementERKNS_9AttributeERKN3WTF6StringE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* nocapture readnone dereferenceable(104), %"class.blink::Attribute"* nocapture readonly dereferenceable(16), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %7, i64 0, i32 4
  %9 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %10, align 8
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %142, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %7, i64 0, i32 2
  %16 = tail call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator29RetrievePreferredPrefixStringERKN3WTF12AtomicStringES4_(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %8, %"class.WTF::AtomicString"* dereferenceable(8) %15)
  %17 = ptrtoint %"class.WTF::StringImpl"* %16 to i64
  %18 = bitcast %"class.WTF::AtomicString"* %5 to i64*
  store i64 %17, i64* %18, align 8
  %19 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink11xmlns_names13kNamespaceURIE, align 8
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %19, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %20, %22
  br i1 %23, label %24, label %73

24:                                               ; preds = %14
  %25 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %26 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %29, label %140

29:                                               ; preds = %24
  %30 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  %31 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %25, i64 0, i32 3, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %30, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %32, %34
  br i1 %35, label %140, label %36

36:                                               ; preds = %29
  %37 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %37, label %56, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %56

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #10
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  tail call void @llvm.trap() #10
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  br label %56

56:                                               ; preds = %53, %38, %36
  %57 = phi %"class.WTF::StringImpl"* [ %55, %53 ], [ %16, %38 ], [ %16, %36 ]
  %58 = ptrtoint %"class.WTF::StringImpl"* %34 to i64
  store i64 %58, i64* %18, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %59, label %140, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %140

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #10
  br label %140

73:                                               ; preds = %14
  %74 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %74, label %115, label %75

75:                                               ; preds = %73
  %76 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5) #10
  %77 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %78 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %77, i64 0, i32 4, i32 0, i32 0, i32 0
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  %80 = tail call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* %76, %"class.WTF::StringImpl"* %79) #10
  %81 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %81, label %95, label %82

82:                                               ; preds = %75
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  br i1 %86, label %89, label %91

89:                                               ; preds = %82
  %90 = add i32 %88, -1
  store i32 %90, i32* %87, align 4
  br label %91

91:                                               ; preds = %89, %82
  %92 = phi i32 [ %90, %89 ], [ %88, %82 ]
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %76) #10
  br i1 %80, label %140, label %96

95:                                               ; preds = %75, %91
  br i1 %80, label %140, label %96

96:                                               ; preds = %94, %95
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %98 = icmp eq %"class.WTF::StringImpl"* %97, null
  br i1 %98, label %117, label %99

99:                                               ; preds = %96
  %100 = call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5)
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %139, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #10
  br label %115

115:                                              ; preds = %73, %114, %111
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  br label %117

117:                                              ; preds = %115, %96
  %118 = phi %"class.WTF::StringImpl"* [ %116, %115 ], [ null, %96 ]
  %119 = tail call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator14GeneratePrefixERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %8)
  %120 = ptrtoint %"class.WTF::StringImpl"* %119 to i64
  store i64 %120, i64* %18, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %121, label %135, label %122

122:                                              ; preds = %117
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  br i1 %126, label %129, label %131

129:                                              ; preds = %122
  %130 = add i32 %128, -1
  store i32 %130, i32* %127, align 4
  br label %131

131:                                              ; preds = %129, %122
  %132 = phi i32 [ %130, %129 ], [ %128, %122 ]
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %131
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %118) #10
  br label %135

135:                                              ; preds = %134, %131, %117
  %136 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %137 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  %138 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 0, i32 0
  call void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %136, %"class.WTF::AtomicString"* dereferenceable(8) %137, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::String"* dereferenceable(8) %138, i1 zeroext false) #10
  br label %140

139:                                              ; preds = %99
  call void @_ZN5blink17MarkupAccumulator15AppendNamespaceERKN3WTF12AtomicStringES4_(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %8)
  br label %140

140:                                              ; preds = %29, %24, %94, %95, %72, %69, %56, %139, %135
  %141 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  br label %142

142:                                              ; preds = %4, %140
  %143 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %141, %140 ], [ %7, %4 ]
  %144 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  %145 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %143, i64 0, i32 3
  call void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %144, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %145, %"class.WTF::String"* dereferenceable(8) %3, i1 zeroext false) #10
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %147 = icmp eq %"class.WTF::StringImpl"* %146, null
  br i1 %147, label %161, label %148

148:                                              ; preds = %142
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  br i1 %152, label %155, label %157

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  store i32 %156, i32* %153, align 4
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %156, %155 ], [ %154, %148 ]
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %146) #10
  br label %161

161:                                              ; preds = %142, %157, %160
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink17MarkupAccumulator27ShouldAddNamespaceAttributeERKNS_9AttributeERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"*, %"class.blink::Attribute"* nocapture readonly dereferenceable(16), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  %9 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %10, i64 0, i32 4, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = tail call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* %12) #10
  %14 = xor i1 %13, true
  %15 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  br i1 %20, label %23, label %25

23:                                               ; preds = %16
  %24 = add i32 %22, -1
  store i32 %24, i32* %21, align 4
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i32 [ %24, %23 ], [ %22, %16 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %29

29:                                               ; preds = %3, %28, %25, %7
  %30 = phi i1 [ true, %3 ], [ %14, %7 ], [ %14, %25 ], [ %14, %28 ]
  ret i1 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator15AppendNamespaceERKN3WTF12AtomicStringES4_(%"class.blink::MarkupAccumulator"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = tail call %"class.WTF::StringImpl"* @_ZN5blink17MarkupAccumulator18LookupNamespaceURIERKN3WTF12AtomicStringE(%"class.blink::MarkupAccumulator"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  %5 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = tail call zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"* %7) #10
  br i1 %8, label %31, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, -1
  %14 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %10, i32 %13) #10
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"* %14, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #10
  %15 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  br label %25

20:                                               ; preds = %9
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 2
  br i1 %23, label %25, label %29

25:                                               ; preds = %18, %20
  %26 = phi %"class.WTF::StringBuilder"* [ %19, %18 ], [ %24, %20 ]
  %27 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %28 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  tail call void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %26, %"class.WTF::AtomicString"* dereferenceable(8) %27, %"class.WTF::AtomicString"* dereferenceable(8) %28, %"class.WTF::String"* dereferenceable(8) %5, i1 zeroext false) #10
  br label %31

29:                                               ; preds = %20
  %30 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_xmlns_atomE, align 8
  tail call void @_ZN5blink15MarkupFormatter15AppendAttributeERN3WTF13StringBuilderERKNS1_12AtomicStringES6_RKNS1_6StringEb(%"class.WTF::StringBuilder"* dereferenceable(48) %24, %"class.WTF::AtomicString"* dereferenceable(8) %30, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %5, i1 zeroext false) #10
  br label %31

31:                                               ; preds = %25, %29, %3
  %32 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #10
  br label %46

46:                                               ; preds = %31, %42, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink17MarkupAccumulator17EntityMaskForTextERKNS_4TextE(%"class.blink::MarkupAccumulator"*, %"class.blink::Text"* dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %4 = tail call i32 @_ZNK5blink15MarkupFormatter17EntityMaskForTextERKNS_4TextE(%"class.blink::MarkupFormatter"* %3, %"class.blink::Text"* dereferenceable(88) %1) #10
  ret i32 %4
}

declare i32 @_ZNK5blink15MarkupFormatter17EntityMaskForTextERKNS_4TextE(%"class.blink::MarkupFormatter"*, %"class.blink::Text"* dereferenceable(88)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator14PushNamespacesERKNS_7ElementE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* nocapture readnone dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::MarkupAccumulator::NamespaceContext", align 8
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %4) #10
  br i1 %5, label %80, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6
  %8 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, -1
  %12 = tail call dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"* %7, i32 %11) #10
  call void @_ZN5blink17MarkupAccumulator16NamespaceContextC2ERKS1_(%"class.blink::MarkupAccumulator::NamespaceContext"* nonnull %3, %"class.blink::MarkupAccumulator::NamespaceContext"* dereferenceable(56) %12)
  %13 = load i32, i32* %9, align 4
  %14 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %78, label %17, !prof !3

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %7, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %18, align 8
  %20 = zext i32 %13 to i64
  %21 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20
  %22 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %21 to i8*
  %23 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 0, i32 0, i32 2
  %25 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 0, i32 0, i32 3
  %26 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %3 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 20, i1 false) #10
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %21 to i64*
  store atomic i64 0, i64* %26 monotonic, align 8
  store atomic i64 %27, i64* %28 monotonic, align 8
  %29 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 0, i32 0, i32 1
  %30 = load i32, i32* %23, align 4
  %31 = load i32, i32* %29, align 8
  store i32 %31, i32* %23, align 4
  store i32 %30, i32* %29, align 8
  %32 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 0, i32 0, i32 2
  %33 = load i32, i32* %24, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %24, align 4
  store i32 %33, i32* %32, align 4
  %35 = load i32, i32* %25, align 8
  %36 = and i32 %35, 2147483647
  %37 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 0, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = and i32 %38, 2147483647
  %40 = and i32 %35, -2147483648
  %41 = or i32 %39, %40
  store i32 %41, i32* %25, align 8
  %42 = load i32, i32* %37, align 8
  %43 = and i32 %42, -2147483648
  %44 = or i32 %43, %36
  store i32 %44, i32* %37, align 8
  %45 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 1
  %46 = bitcast %"class.WTF::HashMap.13"* %45 to i8*
  %47 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 1
  %48 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 1, i32 0, i32 1
  %49 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 1, i32 0, i32 2
  %50 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 1, i32 0, i32 3
  %51 = bitcast %"class.WTF::HashMap.13"* %47 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 20, i1 false) #10
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"class.WTF::HashMap.13"* %45 to i64*
  store atomic i64 0, i64* %51 monotonic, align 8
  store atomic i64 %52, i64* %53 monotonic, align 8
  %54 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 1, i32 0, i32 1
  %55 = load i32, i32* %48, align 4
  %56 = load i32, i32* %54, align 8
  store i32 %56, i32* %48, align 4
  store i32 %55, i32* %54, align 8
  %57 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 1, i32 0, i32 2
  %58 = load i32, i32* %49, align 4
  %59 = load i32, i32* %57, align 4
  store i32 %59, i32* %49, align 4
  store i32 %58, i32* %57, align 4
  %60 = load i32, i32* %50, align 8
  %61 = and i32 %60, 2147483647
  %62 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 1, i32 0, i32 3
  %63 = load i32, i32* %62, align 8
  %64 = and i32 %63, 2147483647
  %65 = and i32 %60, -2147483648
  %66 = or i32 %64, %65
  store i32 %66, i32* %50, align 8
  %67 = load i32, i32* %62, align 8
  %68 = and i32 %67, -2147483648
  %69 = or i32 %68, %61
  store i32 %69, i32* %62, align 8
  %70 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %19, i64 %20, i32 2
  %71 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %3, i64 0, i32 2
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.WTF::AtomicString"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.WTF::AtomicString"* %70 to i64*
  store i64 %74, i64* %75, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %72, align 8
  %76 = load i32, i32* %9, align 4
  %77 = add i32 %76, 1
  store i32 %77, i32* %9, align 4
  br label %79

78:                                               ; preds = %6
  call void @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.7"* %7, %"class.blink::MarkupAccumulator::NamespaceContext"* nonnull dereferenceable(56) %3) #10
  br label %79

79:                                               ; preds = %17, %78
  call void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #10
  br label %80

80:                                               ; preds = %2, %79
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17MarkupAccumulator16NamespaceContextC2ERKS1_(%"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"* dereferenceable(56)) unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 0, i32 0, i32 2
  %5 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #10
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %44, label %8

8:                                                ; preds = %2
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable.10"* %3, i32 %6) #10
  %9 = load i32, i32* %4, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %15
  br i1 %10, label %44, label %17

17:                                               ; preds = %8
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %17, %23
  %20 = phi %"struct.WTF::KeyValuePair"* [ %24, %23 ], [ %12, %17 ]
  %21 = bitcast %"struct.WTF::KeyValuePair"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  switch i64 %22, label %26 [
    i64 -1, label %23
    i64 0, label %23
  ]

23:                                               ; preds = %19, %19
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 1
  %25 = icmp eq %"struct.WTF::KeyValuePair"* %24, %16
  br i1 %25, label %44, label %19

26:                                               ; preds = %19, %17
  %27 = phi %"struct.WTF::KeyValuePair"* [ %12, %17 ], [ %20, %19 ]
  %28 = icmp eq %"struct.WTF::KeyValuePair"* %27, %16
  br i1 %28, label %44, label %29

29:                                               ; preds = %26, %42
  %30 = phi %"struct.WTF::KeyValuePair"* [ %36, %42 ], [ %27, %26 ]
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 0, i32 0
  %32 = tail call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS5_S9_SA_EERKS1_RKS3_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_(%"class.WTF::HashTable.10"* %3, %"class.WTF::AtomicString"* dereferenceable(8) %31, %"struct.WTF::KeyValuePair"* dereferenceable(16) %30) #10
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 1
  %34 = icmp eq %"struct.WTF::KeyValuePair"* %33, %16
  br i1 %34, label %44, label %35

35:                                               ; preds = %29, %39
  %36 = phi %"struct.WTF::KeyValuePair"* [ %40, %39 ], [ %33, %29 ]
  %37 = bitcast %"struct.WTF::KeyValuePair"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  switch i64 %38, label %42 [
    i64 -1, label %39
    i64 0, label %39
  ]

39:                                               ; preds = %35, %35
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 1
  %41 = icmp eq %"struct.WTF::KeyValuePair"* %40, %16
  br i1 %41, label %44, label %35

42:                                               ; preds = %35
  %43 = icmp eq %"struct.WTF::KeyValuePair"* %36, %16
  br i1 %43, label %44, label %29

44:                                               ; preds = %23, %29, %42, %39, %2, %8, %26
  %45 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 1
  %46 = getelementptr inbounds %"class.WTF::HashMap.13", %"class.WTF::HashMap.13"* %45, i64 0, i32 0
  %47 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 1, i32 0, i32 2
  %48 = bitcast %"class.WTF::HashMap.13"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 20, i1 false) #10
  %49 = load i32, i32* %47, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %87, label %51

51:                                               ; preds = %44
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.14"* %46, i32 %49) #10
  %52 = load i32, i32* %47, align 4
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 1, i32 0, i32 0
  %55 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %54, align 8
  %56 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 1, i32 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %55, i64 %58
  br i1 %53, label %87, label %60

60:                                               ; preds = %51
  %61 = icmp eq i32 %57, 0
  br i1 %61, label %69, label %62

62:                                               ; preds = %60, %66
  %63 = phi %"struct.WTF::KeyValuePair.17"* [ %67, %66 ], [ %55, %60 ]
  %64 = bitcast %"struct.WTF::KeyValuePair.17"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  switch i64 %65, label %69 [
    i64 -1, label %66
    i64 0, label %66
  ]

66:                                               ; preds = %62, %62
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %63, i64 1
  %68 = icmp eq %"struct.WTF::KeyValuePair.17"* %67, %59
  br i1 %68, label %87, label %62

69:                                               ; preds = %62, %60
  %70 = phi %"struct.WTF::KeyValuePair.17"* [ %55, %60 ], [ %63, %62 ]
  %71 = icmp eq %"struct.WTF::KeyValuePair.17"* %70, %59
  br i1 %71, label %87, label %72

72:                                               ; preds = %69, %85
  %73 = phi %"struct.WTF::KeyValuePair.17"* [ %79, %85 ], [ %70, %69 ]
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %73, i64 0, i32 0
  %75 = tail call { %"struct.WTF::KeyValuePair.17"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.14"* %46, %"class.WTF::AtomicString"* dereferenceable(8) %74, %"struct.WTF::KeyValuePair.17"* dereferenceable(24) %73) #10
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %73, i64 1
  %77 = icmp eq %"struct.WTF::KeyValuePair.17"* %76, %59
  br i1 %77, label %87, label %78

78:                                               ; preds = %72, %82
  %79 = phi %"struct.WTF::KeyValuePair.17"* [ %83, %82 ], [ %76, %72 ]
  %80 = bitcast %"struct.WTF::KeyValuePair.17"* %79 to i64*
  %81 = load i64, i64* %80, align 8
  switch i64 %81, label %85 [
    i64 -1, label %82
    i64 0, label %82
  ]

82:                                               ; preds = %78, %78
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %79, i64 1
  %84 = icmp eq %"struct.WTF::KeyValuePair.17"* %83, %59
  br i1 %84, label %87, label %78

85:                                               ; preds = %78
  %86 = icmp eq %"struct.WTF::KeyValuePair.17"* %79, %59
  br i1 %86, label %87, label %72

87:                                               ; preds = %66, %72, %85, %82, %44, %51, %69
  %88 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %89, %"class.WTF::StringImpl"** %90, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %91, label %109, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %109

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i33
  %101 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %100, i33 1) #10
  %102 = extractvalue { i33, i1 } %101, 1
  %103 = extractvalue { i33, i1 } %101, 0
  %104 = icmp slt i33 %103, 0
  %105 = or i1 %102, %104
  br i1 %105, label %106, label %107, !prof !3

106:                                              ; preds = %97
  tail call void @llvm.trap() #10
  unreachable

107:                                              ; preds = %97
  %108 = trunc i33 %103 to i32
  store i32 %108, i32* %98, align 4
  br label %109

109:                                              ; preds = %87, %92, %107
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %14

12:                                               ; preds = %5
  %13 = add i32 %11, -1
  store i32 %13, i32* %10, align 4
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %11, %5 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %18

18:                                               ; preds = %1, %14, %17
  %19 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 1, i32 0, i32 0
  %20 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %19, align 8
  %21 = icmp eq %"struct.WTF::KeyValuePair.17"* %20, null
  br i1 %21, label %97, label %22, !prof !2

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %95, label %26

26:                                               ; preds = %22
  %27 = zext i32 %24 to i64
  br label %28

28:                                               ; preds = %92, %26
  %29 = phi i64 [ 0, %26 ], [ %93, %92 ]
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %20, i64 %29
  %31 = bitcast %"struct.WTF::KeyValuePair.17"* %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, inttoptr (i64 -1 to i8*)
  br i1 %33, label %92, label %34

34:                                               ; preds = %28
  %35 = bitcast i8* %32 to %"class.WTF::StringImpl"*
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %20, i64 %29, i32 1
  %37 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %37, align 8
  %39 = icmp eq %"class.WTF::AtomicString"* %38, null
  br i1 %39, label %76, label %40, !prof !2

40:                                               ; preds = %34
  %41 = bitcast %"class.WTF::AtomicString"* %38 to i8*
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %20, i64 %29, i32 1, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %72, label %45, !prof !3

45:                                               ; preds = %40
  %46 = zext i32 %43 to i64
  %47 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %38, i64 %46
  br label %48

48:                                               ; preds = %66, %45
  %49 = phi %"class.WTF::AtomicString"* [ %67, %66 ], [ %38, %45 ]
  %50 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #10
  br label %66

66:                                               ; preds = %65, %62, %48
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %49, i64 1
  %68 = icmp eq %"class.WTF::AtomicString"* %67, %47
  br i1 %68, label %69, label %48

69:                                               ; preds = %66
  store i32 0, i32* %42, align 4
  %70 = bitcast %"class.WTF::Vector.18"* %36 to i8**
  %71 = load i8*, i8** %70, align 8
  br label %72

72:                                               ; preds = %69, %40
  %73 = phi i8* [ %71, %69 ], [ %41, %40 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %73) #10
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %37, align 8
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  br label %76

76:                                               ; preds = %72, %34
  %77 = phi %"class.WTF::StringImpl"* [ %75, %72 ], [ %35, %34 ]
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #10
  br label %92

92:                                               ; preds = %91, %88, %76, %28
  %93 = add nuw nsw i64 %29, 1
  %94 = icmp eq i64 %93, %27
  br i1 %94, label %95, label %28

95:                                               ; preds = %92, %22
  %96 = bitcast %"struct.WTF::KeyValuePair.17"* %20 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %96) #10
  store %"struct.WTF::KeyValuePair.17"* null, %"struct.WTF::KeyValuePair.17"** %19, align 8
  br label %97

97:                                               ; preds = %18, %95
  %98 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 0, i32 0, i32 0
  %99 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %98, align 8
  %100 = icmp eq %"struct.WTF::KeyValuePair"* %99, null
  br i1 %100, label %104, label %101, !prof !2

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 0, i32 0, i32 1
  %103 = load i32, i32* %102, align 8
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j(%"struct.WTF::KeyValuePair"* nonnull %99, i32 %103) #10
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %98, align 8
  br label %104

104:                                              ; preds = %97, %101
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17MarkupAccumulator13PopNamespacesERKNS_7ElementE(%"class.blink::MarkupAccumulator"*, %"class.blink::Element"* nocapture readnone dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 1
  %4 = tail call zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"* %3) #10
  br i1 %4, label %20, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %10 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %9, align 8
  %11 = zext i32 %7 to i64
  %12 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %10, i64 %11
  %13 = zext i32 %8 to i64
  %14 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %10, i64 %13
  br label %15

15:                                               ; preds = %15, %5
  %16 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %17, %15 ], [ %14, %5 ]
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"* %16) #10
  %17 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 1
  %18 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %17, %12
  br i1 %18, label %19, label %15

19:                                               ; preds = %15
  store i32 %8, i32* %6, align 4
  br label %20

20:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17MarkupAccumulator16NamespaceContext3AddERKN3WTF12AtomicStringES5_(%"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::Vector.18", align 8
  %5 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 0, i32 0
  %6 = tail call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERKS1_SG_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_(%"class.WTF::HashTable.10"* %5, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #10
  %7 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %6, 1
  %8 = and i8 %7, 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %52

10:                                               ; preds = %3
  %11 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %6, 0
  %12 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %33, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %33

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i33
  %25 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %24, i33 1) #10
  %26 = extractvalue { i33, i1 } %25, 1
  %27 = extractvalue { i33, i1 } %25, 0
  %28 = icmp slt i33 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %30, label %31, !prof !3

30:                                               ; preds = %21
  tail call void @llvm.trap() #10
  unreachable

31:                                               ; preds = %21
  %32 = trunc i33 %27 to i32
  store i32 %32, i32* %22, align 4
  br label %33

33:                                               ; preds = %31, %16, %10
  %34 = ptrtoint %"class.WTF::StringImpl"* %14 to i64
  %35 = bitcast %"class.WTF::AtomicString"* %12 to i64*
  %36 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  store i64 %34, i64* %35, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %39
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %39
  %49 = phi i32 [ %47, %46 ], [ %45, %39 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #10
  br label %52

52:                                               ; preds = %3, %33, %48, %51
  %53 = bitcast %"class.WTF::Vector.18"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 0, i64 16, i1 false) #10
  %54 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %0, i64 0, i32 1, i32 0
  %55 = call { %"struct.WTF::KeyValuePair.17"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_S5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.14"* %54, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::Vector.18"* nonnull dereferenceable(16) %4) #10
  %56 = extractvalue { %"struct.WTF::KeyValuePair.17"*, i8 } %55, 0
  %57 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %4, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %57, align 8
  %59 = icmp eq %"class.WTF::AtomicString"* %58, null
  br i1 %59, label %94, label %60, !prof !2

60:                                               ; preds = %52
  %61 = bitcast %"class.WTF::AtomicString"* %58 to i8*
  %62 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %4, i64 0, i32 0, i32 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %92, label %65, !prof !3

65:                                               ; preds = %60
  %66 = zext i32 %63 to i64
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 %66
  br label %68

68:                                               ; preds = %86, %65
  %69 = phi %"class.WTF::AtomicString"* [ %87, %86 ], [ %58, %65 ]
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %69, i64 0, i32 0, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %86, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = add i32 %79, -1
  store i32 %81, i32* %78, align 4
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i32 [ %81, %80 ], [ %79, %73 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #10
  br label %86

86:                                               ; preds = %85, %82, %68
  %87 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %69, i64 1
  %88 = icmp eq %"class.WTF::AtomicString"* %87, %67
  br i1 %88, label %89, label %68

89:                                               ; preds = %86
  store i32 0, i32* %62, align 4
  %90 = bitcast %"class.WTF::Vector.18"* %4 to i8**
  %91 = load i8*, i8** %90, align 8
  br label %92

92:                                               ; preds = %89, %60
  %93 = phi i8* [ %91, %89 ], [ %61, %60 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %93) #10
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %57, align 8
  br label %94

94:                                               ; preds = %52, %92
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #10
  %95 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %56, i64 0, i32 1
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %56, i64 0, i32 1, i32 0, i32 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %56, i64 0, i32 1, i32 0, i32 0, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %97, %99
  br i1 %100, label %129, label %101, !prof !3

101:                                              ; preds = %94
  %102 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %95, i64 0, i32 0, i32 0, i32 0
  %103 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %102, align 8
  %104 = zext i32 %97 to i64
  %105 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %103, i64 %104, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %106, %"class.WTF::StringImpl"** %107, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %108, label %126, label %109

109:                                              ; preds = %101
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %126

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = zext i32 %116 to i33
  %118 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %117, i33 1) #10
  %119 = extractvalue { i33, i1 } %118, 1
  %120 = extractvalue { i33, i1 } %118, 0
  %121 = icmp slt i33 %120, 0
  %122 = or i1 %119, %121
  br i1 %122, label %123, label %124, !prof !3

123:                                              ; preds = %114
  call void @llvm.trap() #10
  unreachable

124:                                              ; preds = %114
  %125 = trunc i33 %120 to i32
  store i32 %125, i32* %115, align 4
  br label %126

126:                                              ; preds = %124, %109, %101
  %127 = load i32, i32* %96, align 4
  %128 = add i32 %127, 1
  store i32 %128, i32* %96, align 4
  br label %130

129:                                              ; preds = %94
  call void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.18"* %95, %"class.WTF::AtomicString"* dereferenceable(8) %1) #10
  br label %130

130:                                              ; preds = %126, %129
  ret void
}

declare zeroext i1 @_ZNK5blink15MarkupFormatter15SerializeAsHTMLEv(%"class.blink::MarkupFormatter"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.blink::Node"*, %"class.blink::Element"* } @_ZNK5blink17MarkupAccumulator19GetAuxiliaryDOMTreeERKNS_7ElementE(%"class.blink::MarkupAccumulator"* nocapture readonly, %"class.blink::Element"* dereferenceable(104)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = alloca %"class.blink::Document"*, align 8
  %7 = tail call %"class.blink::ShadowRoot"* @_ZNK5blink7Element13GetShadowRootEv(%"class.blink::Element"* %1) #10
  %8 = ptrtoint %"class.blink::ShadowRoot"* %7 to i64
  %9 = icmp eq %"class.blink::ShadowRoot"* %7, null
  br i1 %9, label %204, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %204

14:                                               ; preds = %10
  %15 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %16, align 8
  %17 = getelementptr inbounds %"class.blink::ShadowRoot", %"class.blink::ShadowRoot"* %7, i64 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = lshr i32 %18, 16
  %20 = and i32 %19, 3
  switch i32 %20, label %97 [
    i32 2, label %201
    i32 0, label %21
    i32 1, label %58
  ]

21:                                               ; preds = %14
  %22 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #10
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %25 = load i64, i64* %24, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  %26 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  store i64 %25, i64* %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %95, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %38, %41
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %95, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %95

57:                                               ; preds = %54
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #10
  br label %95

58:                                               ; preds = %14
  %59 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #10
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i64 6) #10
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  %61 = bitcast %"class.WTF::AtomicString"* %5 to i64*
  %62 = load i64, i64* %61, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %60, align 8
  %63 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  store i64 %62, i64* %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %95, label %66

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #10
  br label %79

79:                                               ; preds = %75, %78
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %95, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  br i1 %86, label %89, label %91

89:                                               ; preds = %82
  %90 = add i32 %88, -1
  store i32 %90, i32* %87, align 4
  br label %91

91:                                               ; preds = %89, %82
  %92 = phi i32 [ %90, %89 ], [ %88, %82 ]
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %80) #10
  br label %95

95:                                               ; preds = %94, %91, %79, %58, %57, %54, %42, %21
  %96 = phi i8* [ %22, %21 ], [ %22, %42 ], [ %22, %54 ], [ %22, %57 ], [ %59, %58 ], [ %59, %79 ], [ %59, %91 ], [ %59, %94 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %96) #10
  br label %97

97:                                               ; preds = %95, %14
  %98 = load i32, i32* %17, align 8
  %99 = and i32 %98, 196608
  %100 = icmp eq i32 %99, 65536
  br i1 %100, label %101, label %166

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %103 = load %"class.blink::Member"*, %"class.blink::Member"** %102, align 8
  %104 = icmp eq %"class.blink::Member"* %103, null
  br i1 %104, label %183, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %"class.blink::MarkupAccumulator", %"class.blink::MarkupAccumulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %107 = load i32, i32* %106, align 8
  %108 = add i32 %107, -1
  %109 = zext i32 %108 to i64
  %110 = shl i64 %8, 32
  %111 = xor i64 %110, -1
  %112 = add i64 %111, %8
  %113 = lshr i64 %112, 22
  %114 = xor i64 %113, %112
  %115 = shl i64 %114, 13
  %116 = xor i64 %115, -1
  %117 = add i64 %114, %116
  %118 = lshr i64 %117, 8
  %119 = xor i64 %118, %117
  %120 = mul i64 %119, 9
  %121 = lshr i64 %120, 15
  %122 = xor i64 %121, %120
  %123 = shl i64 %122, 27
  %124 = xor i64 %123, -1
  %125 = add i64 %122, %124
  %126 = lshr i64 %125, 31
  %127 = xor i64 %126, %125
  %128 = trunc i64 %127 to i32
  %129 = and i32 %108, %128
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %103, i64 %130
  %132 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %131, i64 0, i32 0, i32 0
  %133 = load %"class.blink::ShadowRoot"*, %"class.blink::ShadowRoot"** %132, align 8
  %134 = icmp eq %"class.blink::ShadowRoot"* %133, %7
  br i1 %134, label %163, label %135

135:                                              ; preds = %105
  %136 = xor i32 %128, -1
  %137 = lshr i32 %128, 23
  %138 = add i32 %137, %136
  %139 = shl i32 %138, 12
  %140 = xor i32 %139, %138
  %141 = lshr i32 %140, 7
  %142 = xor i32 %141, %140
  %143 = shl i32 %142, 2
  %144 = xor i32 %143, %142
  %145 = lshr i32 %144, 20
  %146 = xor i32 %145, %144
  %147 = or i32 %146, 1
  %148 = zext i32 %147 to i64
  br label %149

149:                                              ; preds = %154, %135
  %150 = phi %"class.blink::ShadowRoot"* [ %133, %135 ], [ %161, %154 ]
  %151 = phi i64 [ %130, %135 ], [ %158, %154 ]
  %152 = phi i64 [ 0, %135 ], [ %156, %154 ]
  %153 = icmp eq %"class.blink::ShadowRoot"* %150, null
  br i1 %153, label %183, label %154

154:                                              ; preds = %149
  %155 = icmp eq i64 %152, 0
  %156 = select i1 %155, i64 %148, i64 %152
  %157 = add i64 %156, %151
  %158 = and i64 %157, %109
  %159 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %103, i64 %158
  %160 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %159, i64 0, i32 0, i32 0
  %161 = load %"class.blink::ShadowRoot"*, %"class.blink::ShadowRoot"** %160, align 8
  %162 = icmp eq %"class.blink::ShadowRoot"* %161, %7
  br i1 %162, label %163, label %149

163:                                              ; preds = %154, %105
  %164 = phi %"class.blink::Member"* [ %131, %105 ], [ %159, %154 ]
  %165 = icmp eq %"class.blink::Member"* %164, null
  br i1 %165, label %183, label %166

166:                                              ; preds = %163, %97
  %167 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kTemplateTagE, align 8
  %168 = bitcast %"class.blink::Document"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %168) #10
  %169 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %170 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %169, align 8
  %171 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %170, i64 0, i32 2, i32 0, i32 0
  %172 = bitcast %"class.blink::Document"** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.blink::Document"** %6 to i64*
  store i64 %173, i64* %174, align 8
  %175 = call %"class.blink::Element"* @_ZN5blink25MakeGarbageCollectedTraitINS_7ElementEE4CallIJRKNS_17HTMLQualifiedNameEPNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8) %167, %"class.blink::Document"** nonnull dereferenceable(8) %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %168) #10
  %176 = ptrtoint %"class.blink::Element"* %175 to i64
  %177 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kShadowrootAttrE, align 8
  call void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"* %175, %"class.blink::QualifiedName"* dereferenceable(8) %177, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3) #10
  %178 = load i32, i32* %17, align 8
  %179 = and i32 %178, 524288
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %183, label %181

181:                                              ; preds = %166
  %182 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names29kShadowrootdelegatesfocusAttrE, align 8
  call void @_ZN5blink7Element19SetBooleanAttributeERKNS_13QualifiedNameEb(%"class.blink::Element"* %175, %"class.blink::QualifiedName"* dereferenceable(8) %182, i1 zeroext true) #10
  br label %183

183:                                              ; preds = %149, %163, %166, %101, %181
  %184 = phi i64 [ %8, %166 ], [ %8, %181 ], [ 0, %163 ], [ 0, %101 ], [ 0, %149 ]
  %185 = phi i64 [ %176, %166 ], [ %176, %181 ], [ 0, %163 ], [ 0, %101 ], [ 0, %149 ]
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %201, label %188

188:                                              ; preds = %183
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  br i1 %192, label %195, label %197

195:                                              ; preds = %188
  %196 = add i32 %194, -1
  store i32 %196, i32* %193, align 4
  br label %197

197:                                              ; preds = %195, %188
  %198 = phi i32 [ %196, %195 ], [ %194, %188 ]
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %186) #10
  br label %201

201:                                              ; preds = %14, %183, %197, %200
  %202 = phi i64 [ %185, %183 ], [ %185, %197 ], [ %185, %200 ], [ 0, %14 ]
  %203 = phi i64 [ %184, %183 ], [ %184, %197 ], [ %184, %200 ], [ 0, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  br label %204

204:                                              ; preds = %2, %10, %201
  %205 = phi i64 [ %203, %201 ], [ 0, %10 ], [ 0, %2 ]
  %206 = phi i64 [ %202, %201 ], [ 0, %10 ], [ 0, %2 ]
  %207 = inttoptr i64 %205 to %"class.blink::Node"*
  %208 = insertvalue { %"class.blink::Node"*, %"class.blink::Element"* } undef, %"class.blink::Node"* %207, 0
  %209 = inttoptr i64 %206 to %"class.blink::Element"*
  %210 = insertvalue { %"class.blink::Node"*, %"class.blink::Element"* } %208, %"class.blink::Element"* %209, 1
  ret { %"class.blink::Node"*, %"class.blink::Element"* } %210
}

declare %"class.blink::ShadowRoot"* @_ZNK5blink7Element13GetShadowRootEv(%"class.blink::Element"*) local_unnamed_addr #1

declare void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5blink7Element19SetBooleanAttributeERKNS_13QualifiedNameEb(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), i1 zeroext) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i8, align 1
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2, %6
  %7 = phi i32 [ %10, %6 ], [ %1, %2 ]
  %8 = phi i32 [ %9, %6 ], [ %1, %2 ]
  %9 = or i32 %8, %7
  %10 = lshr i32 %7, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %6

12:                                               ; preds = %6
  %13 = shl i32 %9, 1
  %14 = add i32 %13, 2
  %15 = icmp ugt i32 %14, 8
  %16 = select i1 %15, i32 %14, i32 8
  br label %17

17:                                               ; preds = %12, %2
  %18 = phi i32 [ 8, %2 ], [ %16, %12 ]
  %19 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %22, label %40

22:                                               ; preds = %17
  %23 = icmp slt i32 %18, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #10
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #10
  %27 = load i32, i32* %19, align 8
  br label %28

28:                                               ; preds = %22, %24
  %29 = phi i32 [ %20, %22 ], [ %27, %24 ]
  %30 = icmp ult i32 %29, %18
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #10
  store i8 -86, i8* %3, align 1
  %32 = call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb(%"class.WTF::HashTable"* %0, i32 %18, %"class.blink::Member"* null, i8* nonnull dereferenceable(1) %3) #10
  %33 = load i8, i8* %3, align 1, !range !4
  %34 = icmp eq i8 %33, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #10
  br i1 %34, label %35, label %40

35:                                               ; preds = %31, %28
  %36 = zext i32 %18 to i64
  %37 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64 %36) #10
  %38 = bitcast %"class.blink::HeapHashTableBacking"* %37 to %"class.blink::Member"*
  %39 = call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %0, %"class.blink::Member"* %38, i32 %18, %"class.blink::Member"* null) #10
  br label %40

40:                                               ; preds = %35, %31, %17
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb(%"class.WTF::HashTable"*, i32, %"class.blink::Member"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  store i8 0, i8* %3, align 1
  %6 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %7 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %6, i64 0, i32 1
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %7) #10
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !3

10:                                               ; preds = %4
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %7, i8* %11) #10
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i8* [ %11, %10 ], [ %8, %4 ]
  %14 = bitcast i8* %13 to %"class.blink::ThreadState"**
  %15 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !4
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %27, label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 13
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %23
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0)) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %23, %27
  %31 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %32 = load %"class.blink::Member"*, %"class.blink::Member"** %31, align 8
  %33 = icmp eq %"class.blink::Member"* %32, null
  br i1 %33, label %103, label %34

34:                                               ; preds = %30
  %35 = zext i32 %1 to i64
  %36 = shl nuw nsw i64 %35, 3
  %37 = bitcast %"class.blink::Member"* %32 to i8*
  %38 = call zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8* nonnull %37, i64 %36) #10
  br i1 %38, label %39, label %103

39:                                               ; preds = %34
  store i8 1, i8* %3, align 1
  %40 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = load %"class.blink::Member"*, %"class.blink::Member"** %31, align 8
  %43 = zext i32 %41 to i64
  %44 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64 %43) #10
  %45 = bitcast %"class.blink::HeapHashTableBacking"* %44 to %"class.blink::Member"*
  %46 = icmp eq i32 %41, 0
  br i1 %46, label %69, label %47

47:                                               ; preds = %39
  %48 = and i64 %43, 1
  %49 = icmp eq i32 %41, 1
  br i1 %49, label %52, label %50

50:                                               ; preds = %47
  %51 = sub nsw i64 %43, %48
  br label %80

52:                                               ; preds = %106, %47
  %53 = phi %"class.blink::Member"* [ undef, %47 ], [ %100, %106 ]
  %54 = phi i64 [ 0, %47 ], [ %109, %106 ]
  %55 = phi %"class.blink::Member"* [ null, %47 ], [ %100, %106 ]
  %56 = icmp eq i64 %48, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %52
  %58 = load %"class.blink::Member"*, %"class.blink::Member"** %31, align 8
  %59 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %58, i64 %54
  %60 = icmp eq %"class.blink::Member"* %59, %2
  %61 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %45, i64 %54
  %62 = select i1 %60, %"class.blink::Member"* %61, %"class.blink::Member"* %55
  %63 = bitcast %"class.blink::Member"* %59 to i64*
  %64 = load i64, i64* %63, align 8
  switch i64 %64, label %65 [
    i64 -1, label %66
    i64 0, label %66
  ]

65:                                               ; preds = %57
  br label %66

66:                                               ; preds = %65, %57, %57
  %67 = phi i64 [ %64, %65 ], [ 0, %57 ], [ 0, %57 ]
  %68 = bitcast %"class.blink::Member"* %61 to i64*
  store i64 %67, i64* %68, align 8
  br label %69

69:                                               ; preds = %66, %52, %39
  %70 = phi %"class.blink::Member"* [ null, %39 ], [ %53, %52 ], [ %62, %66 ]
  %71 = bitcast %"class.WTF::HashTable"* %0 to %"class.blink::HeapHashTableBacking"**
  store %"class.blink::HeapHashTableBacking"* %44, %"class.blink::HeapHashTableBacking"** %71, align 8
  %72 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.blink::HeapHashTableBacking", %"class.blink::HeapHashTableBacking"* %44, i64 0, i32 0
  %76 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %75) #10
  br label %77

77:                                               ; preds = %69, %74
  %78 = bitcast %"class.blink::Member"* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 %36, i1 false)
  %79 = call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %0, %"class.blink::Member"* %42, i32 %1, %"class.blink::Member"* %70)
  br label %103

80:                                               ; preds = %106, %50
  %81 = phi i64 [ 0, %50 ], [ %109, %106 ]
  %82 = phi %"class.blink::Member"* [ null, %50 ], [ %100, %106 ]
  %83 = phi i64 [ %51, %50 ], [ %110, %106 ]
  %84 = load %"class.blink::Member"*, %"class.blink::Member"** %31, align 8
  %85 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %84, i64 %81
  %86 = icmp eq %"class.blink::Member"* %85, %2
  %87 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %45, i64 %81
  %88 = select i1 %86, %"class.blink::Member"* %87, %"class.blink::Member"* %82
  %89 = bitcast %"class.blink::Member"* %85 to i64*
  %90 = load i64, i64* %89, align 8
  switch i64 %90, label %91 [
    i64 -1, label %92
    i64 0, label %92
  ]

91:                                               ; preds = %80
  br label %92

92:                                               ; preds = %80, %80, %91
  %93 = phi i64 [ %90, %91 ], [ 0, %80 ], [ 0, %80 ]
  %94 = bitcast %"class.blink::Member"* %87 to i64*
  store i64 %93, i64* %94, align 8
  %95 = or i64 %81, 1
  %96 = load %"class.blink::Member"*, %"class.blink::Member"** %31, align 8
  %97 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %96, i64 %95
  %98 = icmp eq %"class.blink::Member"* %97, %2
  %99 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %45, i64 %95
  %100 = select i1 %98, %"class.blink::Member"* %99, %"class.blink::Member"* %88
  %101 = bitcast %"class.blink::Member"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  switch i64 %102, label %105 [
    i64 -1, label %106
    i64 0, label %106
  ]

103:                                              ; preds = %34, %30, %77
  %104 = phi %"class.blink::Member"* [ %79, %77 ], [ null, %30 ], [ null, %34 ]
  ret %"class.blink::Member"* %104

105:                                              ; preds = %92
  br label %106

106:                                              ; preds = %105, %92, %92
  %107 = phi i64 [ %102, %105 ], [ 0, %92 ], [ 0, %92 ]
  %108 = bitcast %"class.blink::Member"* %99 to i64*
  store i64 %107, i64* %108, align 8
  %109 = add nuw nsw i64 %81, 2
  %110 = add i64 %83, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %52, label %80
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"*, %"class.blink::Member"*, i32, %"class.blink::Member"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.blink::Member"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = load %"class.blink::Member"*, %"class.blink::Member"** %10, align 8
  br label %37

14:                                               ; preds = %125, %4
  %15 = phi %"class.blink::Member"* [ null, %4 ], [ %128, %125 ]
  %16 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = bitcast %"class.blink::Member"* %1 to i8*
  tail call void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8* %19) #10
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %22 = load %"class.blink::Member"*, %"class.blink::Member"** %21, align 8
  %23 = bitcast %"class.WTF::HashTable"* %0 to i64*
  store atomic i64 %5, i64* %23 monotonic, align 8
  %24 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.blink::Member"* %1 to i8*
  %28 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %27) #10
  br label %29

29:                                               ; preds = %20, %26
  store i32 %2, i32* %6, align 8
  %30 = icmp eq %"class.blink::Member"* %22, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %29
  %32 = bitcast %"class.blink::Member"* %22 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %32) #10
  br label %33

33:                                               ; preds = %29, %31
  %34 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, -2147483648
  store i32 %36, i32* %34, align 8
  ret %"class.blink::Member"* %15

37:                                               ; preds = %9, %125
  %38 = phi i32 [ %7, %9 ], [ %126, %125 ]
  %39 = phi %"class.blink::Member"* [ %13, %9 ], [ %127, %125 ]
  %40 = phi %"class.blink::Member"* [ null, %9 ], [ %128, %125 ]
  %41 = phi i32 [ 0, %9 ], [ %129, %125 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %39, i64 %42
  %44 = bitcast %"class.blink::Member"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  switch i64 %45, label %46 [
    i64 -1, label %125
    i64 0, label %125
  ]

46:                                               ; preds = %37
  %47 = shl i64 %45, 32
  %48 = xor i64 %47, -1
  %49 = add i64 %45, %48
  %50 = lshr i64 %49, 22
  %51 = xor i64 %50, %49
  %52 = shl i64 %51, 13
  %53 = xor i64 %52, -1
  %54 = add i64 %51, %53
  %55 = lshr i64 %54, 8
  %56 = xor i64 %55, %54
  %57 = mul i64 %56, 9
  %58 = lshr i64 %57, 15
  %59 = xor i64 %58, %57
  %60 = shl i64 %59, 27
  %61 = xor i64 %60, -1
  %62 = add i64 %59, %61
  %63 = lshr i64 %62, 31
  %64 = xor i64 %63, %62
  %65 = trunc i64 %64 to i32
  %66 = and i32 %11, %65
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %1, i64 %67
  %69 = ptrtoint %"class.blink::Member"* %68 to i64
  %70 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %68, i64 0, i32 0, i32 0
  %71 = load %"class.blink::ShadowRoot"*, %"class.blink::ShadowRoot"** %70, align 8
  %72 = icmp eq %"class.blink::ShadowRoot"* %71, null
  %73 = inttoptr i64 %45 to %"class.blink::ShadowRoot"*
  br i1 %72, label %91, label %74

74:                                               ; preds = %46
  %75 = xor i32 %65, -1
  %76 = lshr i32 %65, 23
  %77 = add i32 %76, %75
  %78 = shl i32 %77, 12
  %79 = xor i32 %78, %77
  %80 = lshr i32 %79, 7
  %81 = xor i32 %80, %79
  %82 = shl i32 %81, 2
  %83 = xor i32 %82, %81
  %84 = lshr i32 %83, 20
  %85 = xor i32 %84, %83
  %86 = or i32 %85, 1
  %87 = zext i32 %86 to i64
  br label %97

88:                                               ; preds = %104
  %89 = ptrtoint %"class.blink::Member"* %111 to i64
  %90 = inttoptr i64 %106 to %"class.blink::Member"*
  br label %91

91:                                               ; preds = %88, %46
  %92 = phi i64 [ %89, %88 ], [ %69, %46 ]
  %93 = phi %"class.blink::Member"* [ %90, %88 ], [ null, %46 ]
  %94 = icmp eq %"class.blink::Member"* %93, null
  %95 = ptrtoint %"class.blink::Member"* %93 to i64
  %96 = select i1 %94, i64 %92, i64 %95
  br label %116

97:                                               ; preds = %104, %74
  %98 = phi i64 [ 0, %74 ], [ %106, %104 ]
  %99 = phi %"class.blink::ShadowRoot"* [ %71, %74 ], [ %114, %104 ]
  %100 = phi i64 [ %69, %74 ], [ %112, %104 ]
  %101 = phi i64 [ %67, %74 ], [ %110, %104 ]
  %102 = phi i64 [ 0, %74 ], [ %108, %104 ]
  %103 = icmp eq %"class.blink::ShadowRoot"* %99, %73
  br i1 %103, label %116, label %104

104:                                              ; preds = %97
  %105 = icmp eq %"class.blink::ShadowRoot"* %99, inttoptr (i64 -1 to %"class.blink::ShadowRoot"*)
  %106 = select i1 %105, i64 %100, i64 %98
  %107 = icmp eq i64 %102, 0
  %108 = select i1 %107, i64 %87, i64 %102
  %109 = add i64 %108, %101
  %110 = and i64 %109, %12
  %111 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %1, i64 %110
  %112 = ptrtoint %"class.blink::Member"* %111 to i64
  %113 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %111, i64 0, i32 0, i32 0
  %114 = load %"class.blink::ShadowRoot"*, %"class.blink::ShadowRoot"** %113, align 8
  %115 = icmp eq %"class.blink::ShadowRoot"* %114, null
  br i1 %115, label %88, label %97

116:                                              ; preds = %97, %91
  %117 = phi i64 [ %96, %91 ], [ %100, %97 ]
  %118 = inttoptr i64 %117 to %"class.blink::Member"*
  %119 = inttoptr i64 %117 to i64*
  store i64 %45, i64* %119, align 8
  %120 = load %"class.blink::Member"*, %"class.blink::Member"** %10, align 8
  %121 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %120, i64 %42
  %122 = icmp eq %"class.blink::Member"* %121, %3
  %123 = select i1 %122, %"class.blink::Member"* %118, %"class.blink::Member"* %40
  %124 = load i32, i32* %6, align 8
  br label %125

125:                                              ; preds = %37, %37, %116
  %126 = phi i32 [ %38, %37 ], [ %124, %116 ], [ %38, %37 ]
  %127 = phi %"class.blink::Member"* [ %39, %37 ], [ %120, %116 ], [ %39, %37 ]
  %128 = phi %"class.blink::Member"* [ %40, %37 ], [ %123, %116 ], [ %40, %37 ]
  %129 = add i32 %41, 1
  %130 = icmp eq i32 %129, %126
  br i1 %130, label %14, label %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.7, i64 0, i64 0), i32 77, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES5_NS1_17IdentityExtractorENS1_10MemberHashIS4_EENS1_10HashTraitsIS5_EESA_NS_13HeapAllocatorEEEE14AllocateObjectISD_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapHashTableBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapHashTableBacking"* %22
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES5_NS1_17IdentityExtractorENS1_10MemberHashIS4_EENS1_10HashTraitsIS5_EESA_NS_13HeapAllocatorEEEE14AllocateObjectISD_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %6 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %10 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %9, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %11

11:                                               ; preds = %1, %8
  %12 = phi i32 [ %6, %1 ], [ %10, %8 ]
  %13 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %5, i64 0, i32 19, i64 5
  %14 = bitcast %"class.blink::BaseArena"** %13 to %"class.blink::NormalPageArena"**
  %15 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %14, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = icmp ult i64 %0, -8
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  store i8* null, i8** %17, align 8
  br label %31

21:                                               ; preds = %11
  %22 = add nsw i64 %0, 8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %22) #10
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* %23, i8* %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  store i8* %26, i8** %17, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %21
  %29 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.9, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #10
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %31

31:                                               ; preds = %20, %21, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  %32 = add i64 %0, 15
  %33 = and i64 %32, -8
  %34 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %15, i64 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %35, %33
  br i1 %36, label %69, label %37, !prof !3

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %15, i64 0, i32 3
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %33
  store i8* %40, i8** %38, align 8
  %41 = sub i64 %35, %33
  store i64 %41, i64* %34, align 8
  %42 = bitcast i8* %39 to i32*
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %39, i64 4
  %44 = bitcast i8* %43 to i16*
  %45 = trunc i32 %12 to i16
  %46 = shl i16 %45, 2
  store atomic i16 %46, i16* %44 monotonic, align 2
  %47 = lshr exact i64 %33, 1
  %48 = trunc i64 %47 to i16
  %49 = getelementptr inbounds i8, i8* %39, i64 6
  %50 = bitcast i8* %49 to i16*
  store i16 %48, i16* %50, align 2
  %51 = ptrtoint i8* %39 to i64
  %52 = and i64 %51, -131072
  %53 = inttoptr i64 %52 to i8*
  %54 = getelementptr inbounds i8, i8* %53, i64 4400
  %55 = bitcast i8* %54 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %56 = bitcast i8* %54 to i64*
  %57 = load i64, i64* %56, align 16
  %58 = sub i64 %51, %57
  %59 = lshr i64 %58, 3
  %60 = lshr i64 %58, 6
  %61 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %55, i64 0, i32 0, i32 1, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = trunc i64 %59 to i32
  %64 = and i32 %63, 7
  %65 = shl i32 1, %64
  %66 = trunc i32 %65 to i8
  %67 = or i8 %62, %66
  store atomic i8 %67, i8* %61 release, align 1
  %68 = getelementptr inbounds i8, i8* %39, i64 8
  br label %72

69:                                               ; preds = %31
  %70 = zext i32 %12 to i64
  %71 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %15, i64 %33, i64 %70) #10
  br label %72

72:                                               ; preds = %37, %69
  %73 = phi i8* [ %68, %37 ], [ %71, %69 ]
  ret i8* %73
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*)***
  %25 = load i1 (%"class.blink::Visitor"*)**, i1 (%"class.blink::Visitor"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %25, i64 3
  %27 = load i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0) #10
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %56, label %30

30:                                               ; preds = %20
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %32

32:                                               ; preds = %53, %30
  %33 = phi i64 [ 0, %30 ], [ %54, %53 ]
  %34 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %3, i64 %33
  %35 = bitcast %"class.blink::Member"* %34 to i64*
  br i1 %28, label %36, label %43

36:                                               ; preds = %32
  %37 = load atomic i64, i64* %35 monotonic, align 8
  switch i64 %37, label %38 [
    i64 -1, label %53
    i64 0, label %53
  ]

38:                                               ; preds = %36
  %39 = inttoptr i64 %37 to i8*
  %40 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %41 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %40, i64 5
  %42 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %41, align 8
  tail call void %42(%"class.blink::Visitor"* %0, i8* nonnull %39, i8* nonnull %39, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10ShadowRootEE5TraceEPNS_7VisitorEPKv) #10
  br label %53

43:                                               ; preds = %32
  %44 = load i64, i64* %35, align 8
  switch i64 %44, label %45 [
    i64 -1, label %53
    i64 0, label %53
  ]

45:                                               ; preds = %43
  %46 = load atomic i64, i64* %35 monotonic, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %45
  %49 = inttoptr i64 %46 to i8*
  %50 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %51 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %50, i64 5
  %52 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %51, align 8
  tail call void %52(%"class.blink::Visitor"* %0, i8* nonnull %49, i8* nonnull %49, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10ShadowRootEE5TraceEPNS_7VisitorEPKv) #10
  br label %53

53:                                               ; preds = %48, %45, %43, %43, %38, %36, %36
  %54 = add nuw nsw i64 %33, 1
  %55 = icmp eq i64 %54, %23
  br i1 %55, label %56, label %32

56:                                               ; preds = %53, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_10ShadowRootEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ShadowRoot"*
  tail call void @_ZNK5blink10ShadowRoot5TraceEPNS_7VisitorE(%"class.blink::ShadowRoot"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

declare void @_ZNK5blink10ShadowRoot5TraceEPNS_7VisitorE(%"class.blink::ShadowRoot"*, %"class.blink::Visitor"*) unnamed_addr #1

declare void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8*) local_unnamed_addr #1

declare void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::Member"*, i8 } @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorIS7_S9_SA_EERKS4_SG_EENS_18HashTableAddResultISB_S4_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.blink::Member"* dereferenceable(8), %"class.blink::Member"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.blink::Member"*, %"class.blink::Member"** %4, align 8
  %6 = icmp eq %"class.blink::Member"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.blink::Member"* null)
  %9 = load %"class.blink::Member"*, %"class.blink::Member"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.blink::Member"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::Member"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %11, i64 %38
  %40 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.blink::ShadowRoot"*, %"class.blink::ShadowRoot"** %40, align 8
  %42 = icmp eq %"class.blink::ShadowRoot"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::ShadowRoot"*
  br i1 %42, label %86, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::ShadowRoot"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"class.blink::Member"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"class.blink::Member"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::ShadowRoot"* %59, %43
  br i1 %64, label %115, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::ShadowRoot"* %59, inttoptr (i64 -1 to %"class.blink::ShadowRoot"*)
  %67 = select i1 %66, %"class.blink::Member"* %60, %"class.blink::Member"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %11, i64 %71
  %73 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %72, i64 0, i32 0, i32 0
  %74 = load %"class.blink::ShadowRoot"*, %"class.blink::ShadowRoot"** %73, align 8
  %75 = icmp eq %"class.blink::ShadowRoot"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"class.blink::Member"* %67, null
  br i1 %77, label %86, label %78

78:                                               ; preds = %76
  %79 = bitcast %"class.blink::Member"* %67 to i8*
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* nonnull %79, i64 8) #10
  %80 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 2147483647
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  br label %86

86:                                               ; preds = %10, %76, %78
  %87 = phi %"class.blink::Member"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %88 = bitcast %"class.blink::Member"* %2 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %"class.blink::Member"* %87 to i64*
  store atomic i64 %89, i64* %90 monotonic, align 8
  %91 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %86
  %94 = inttoptr i64 %89 to i8*
  %95 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %94) #10
  br label %96

96:                                               ; preds = %86, %93
  %97 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %103, label %99

99:                                               ; preds = %96
  %100 = bitcast %"class.blink::Member"* %87 to i8**
  %101 = load i8*, i8** %100, align 8
  %102 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %101) #10
  br label %103

103:                                              ; preds = %96, %99
  %104 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  %107 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %108 = load i32, i32* %107, align 8
  %109 = add i32 %108, %106
  %110 = shl i32 %109, 1
  %111 = load i32, i32* %12, align 8
  %112 = icmp ult i32 %110, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %103
  %114 = tail call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.blink::Member"* %87)
  br label %115

115:                                              ; preds = %58, %103, %113
  %116 = phi i8 [ 1, %103 ], [ 1, %113 ], [ 0, %58 ]
  %117 = phi %"class.blink::Member"* [ %87, %103 ], [ %114, %113 ], [ %60, %58 ]
  %118 = insertvalue { %"class.blink::Member"*, i8 } undef, %"class.blink::Member"* %117, 0
  %119 = insertvalue { %"class.blink::Member"*, i8 } %118, i8 %116, 1
  ret { %"class.blink::Member"*, i8 } %119
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"*, %"class.blink::Member"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca i8, align 1
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %39, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #10
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %23, i8* %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #10
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %31

31:                                               ; preds = %28, %22, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  %32 = load i32, i32* %7, align 8
  %33 = icmp ult i32 %32, %14
  br i1 %33, label %34, label %39

34:                                               ; preds = %2, %31
  %35 = phi i32 [ %14, %31 ], [ 8, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %36 = call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE12ExpandBufferEjPS4_Rb(%"class.WTF::HashTable"* %0, i32 %35, %"class.blink::Member"* %1, i8* nonnull dereferenceable(1) %4) #10
  %37 = load i8, i8* %4, align 1, !range !4
  %38 = icmp eq i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br i1 %38, label %39, label %45

39:                                               ; preds = %10, %34, %31
  %40 = phi i32 [ %35, %34 ], [ %14, %31 ], [ %8, %10 ]
  %41 = zext i32 %40 to i64
  %42 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS_6MemberINS_10ShadowRootEEES6_NS2_17IdentityExtractorENS2_10MemberHashIS5_EENS2_10HashTraitsIS6_EESB_NS_13HeapAllocatorEEEEEE4CallEm(i64 %41) #10
  %43 = bitcast %"class.blink::HeapHashTableBacking"* %42 to %"class.blink::Member"*
  %44 = call %"class.blink::Member"* @_ZN3WTF9HashTableIN5blink6MemberINS1_10ShadowRootEEES4_NS_17IdentityExtractorENS_10MemberHashIS3_EENS_10HashTraitsIS4_EES9_NS1_13HeapAllocatorEE8RehashToEPS4_jSC_(%"class.WTF::HashTable"* %0, %"class.blink::Member"* %43, i32 %40, %"class.blink::Member"* %1) #10
  br label %45

45:                                               ; preds = %34, %39
  %46 = phi %"class.blink::Member"* [ %44, %39 ], [ %36, %34 ]
  ret %"class.blink::Member"* %46
}

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"*) local_unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #6

declare zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable.10"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #10
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 4
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringES2_EEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #10
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair"*
  %31 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair"* %30, i32 %17, %"struct.WTF::KeyValuePair"* null) #10
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_(%"class.WTF::HashTable.10"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.10", align 8
  %6 = bitcast %"class.WTF::HashTable.10"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.10"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair"* %1, %"struct.WTF::KeyValuePair"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.10"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.10"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair"* %22 to i64
  br label %42

24:                                               ; preds = %60
  %25 = bitcast %"class.WTF::HashTable.10"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.10"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %61, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair"* [ null, %16 ], [ %64, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %62, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair"*
  call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j(%"struct.WTF::KeyValuePair"* nonnull %37, i32 %34) #10
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret %"struct.WTF::KeyValuePair"* %33

42:                                               ; preds = %21, %60
  %43 = phi i64 [ %61, %60 ], [ %23, %21 ]
  %44 = phi i32 [ %62, %60 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair"* [ %63, %60 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair"* [ %64, %60 ], [ null, %21 ]
  %47 = phi i32 [ %65, %60 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %60
    i64 0, label %60
  ]

52:                                               ; preds = %42
  %53 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8ReinsertEOS3_(%"class.WTF::HashTable.10"* nonnull %5, %"struct.WTF::KeyValuePair"* dereferenceable(16) %49)
  %54 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %54, i64 %48
  %56 = icmp eq %"struct.WTF::KeyValuePair"* %55, %3
  %57 = select i1 %56, %"struct.WTF::KeyValuePair"* %53, %"struct.WTF::KeyValuePair"* %46
  %58 = load i32, i32* %12, align 8
  %59 = ptrtoint %"struct.WTF::KeyValuePair"* %54 to i64
  br label %60

60:                                               ; preds = %42, %42, %52
  %61 = phi i64 [ %43, %42 ], [ %59, %52 ], [ %43, %42 ]
  %62 = phi i32 [ %44, %42 ], [ %58, %52 ], [ %44, %42 ]
  %63 = phi %"struct.WTF::KeyValuePair"* [ %45, %42 ], [ %54, %52 ], [ %45, %42 ]
  %64 = phi %"struct.WTF::KeyValuePair"* [ %46, %42 ], [ %57, %52 ], [ %46, %42 ]
  %65 = add i32 %47, 1
  %66 = icmp eq i32 %65, %62
  br i1 %66, label %24, label %42
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8ReinsertEOS3_(%"class.WTF::HashTable.10"*, %"struct.WTF::KeyValuePair"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = and i32 %13, %7
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %15
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %2
  %22 = xor i32 %13, -1
  %23 = lshr i32 %12, 31
  %24 = add nsw i32 %23, %22
  %25 = shl i32 %24, 12
  %26 = xor i32 %25, %24
  %27 = lshr i32 %26, 7
  %28 = xor i32 %27, %26
  %29 = shl i32 %28, 2
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 20
  %32 = xor i32 %31, %30
  %33 = or i32 %32, 1
  %34 = zext i32 %33 to i64
  br label %43

35:                                               ; preds = %55
  %36 = ptrtoint %"struct.WTF::KeyValuePair"* %61 to i64
  br label %37

37:                                               ; preds = %35, %2
  %38 = phi i64 [ %17, %2 ], [ %36, %35 ]
  %39 = phi %"struct.WTF::KeyValuePair"* [ null, %2 ], [ %56, %35 ]
  %40 = icmp eq %"struct.WTF::KeyValuePair"* %39, null
  %41 = ptrtoint %"struct.WTF::KeyValuePair"* %39 to i64
  %42 = select i1 %40, i64 %38, i64 %41
  br label %66

43:                                               ; preds = %55, %21
  %44 = phi %"struct.WTF::KeyValuePair"* [ null, %21 ], [ %56, %55 ]
  %45 = phi i64 [ %17, %21 ], [ %62, %55 ]
  %46 = phi %"struct.WTF::KeyValuePair"* [ %16, %21 ], [ %61, %55 ]
  %47 = phi i64 [ %15, %21 ], [ %60, %55 ]
  %48 = phi i64 [ 0, %21 ], [ %58, %55 ]
  %49 = bitcast %"struct.WTF::KeyValuePair"* %46 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, inttoptr (i64 -1 to i8*)
  br i1 %51, label %55, label %52

52:                                               ; preds = %43
  %53 = bitcast i8* %50 to %"class.WTF::StringImpl"*
  %54 = icmp eq %"class.WTF::StringImpl"* %10, %53
  br i1 %54, label %66, label %55

55:                                               ; preds = %52, %43
  %56 = phi %"struct.WTF::KeyValuePair"* [ %44, %52 ], [ %46, %43 ]
  %57 = icmp eq i64 %48, 0
  %58 = select i1 %57, i64 %34, i64 %48
  %59 = add i64 %58, %47
  %60 = and i64 %59, %8
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %60
  %62 = ptrtoint %"struct.WTF::KeyValuePair"* %61 to i64
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 0, i32 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %35, label %43

66:                                               ; preds = %52, %37
  %67 = phi i64 [ %42, %37 ], [ %45, %52 ]
  %68 = inttoptr i64 %67 to %"struct.WTF::KeyValuePair"*
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %85, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = and i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 0
  %78 = load i32, i32* %77, align 4
  br i1 %76, label %79, label %81

79:                                               ; preds = %72
  %80 = add i32 %78, -1
  store i32 %80, i32* %77, align 4
  br label %81

81:                                               ; preds = %79, %72
  %82 = phi i32 [ %80, %79 ], [ %78, %72 ]
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %70) #10
  br label %85

85:                                               ; preds = %84, %81, %66
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 0, i32 0, i32 0, i32 0
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %102, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  br i1 %93, label %96, label %98

96:                                               ; preds = %89
  %97 = add i32 %95, -1
  store i32 %97, i32* %94, align 4
  br label %98

98:                                               ; preds = %96, %89
  %99 = phi i32 [ %97, %96 ], [ %95, %89 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %87) #10
  br label %102

102:                                              ; preds = %85, %98, %101
  %103 = bitcast %"struct.WTF::KeyValuePair"* %1 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = inttoptr i64 %67 to i64*
  store i64 %104, i64* %105, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1
  %107 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1
  %108 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %107, i64 0, i32 0, i32 0, i32 0
  %109 = bitcast %"class.WTF::AtomicString"* %107 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.WTF::AtomicString"* %106 to i64*
  store i64 %110, i64* %111, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %108, align 8
  ret %"struct.WTF::KeyValuePair"* %68
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j(%"struct.WTF::KeyValuePair"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %8

6:                                                ; preds = %48, %2
  %7 = bitcast %"struct.WTF::KeyValuePair"* %0 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %7) #10
  ret void

8:                                                ; preds = %48, %4
  %9 = phi i64 [ 0, %4 ], [ %49, %48 ]
  %10 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 %9
  %11 = bitcast %"struct.WTF::KeyValuePair"* %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, inttoptr (i64 -1 to i8*)
  br i1 %13, label %48, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 %9, i32 1, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %31, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  br i1 %22, label %25, label %27

25:                                               ; preds = %18
  %26 = add i32 %24, -1
  store i32 %26, i32* %23, align 4
  br label %27

27:                                               ; preds = %25, %18
  %28 = phi i32 [ %26, %25 ], [ %24, %18 ]
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #10
  br label %31

31:                                               ; preds = %30, %27, %14
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %48, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  br i1 %39, label %42, label %44

42:                                               ; preds = %35
  %43 = add i32 %41, -1
  store i32 %43, i32* %40, align 4
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i32 [ %43, %42 ], [ %41, %35 ]
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %33) #10
  br label %48

48:                                               ; preds = %47, %44, %31, %8
  %49 = add nuw nsw i64 %9, 1
  %50 = icmp eq i64 %49, %5
  br i1 %50, label %6, label %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS5_S9_SA_EERKS1_RKS3_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_(%"class.WTF::HashTable.10"*, %"class.WTF::AtomicString"* dereferenceable(8), %"struct.WTF::KeyValuePair"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %86, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #10
  %66 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"struct.WTF::KeyValuePair"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = tail call dereferenceable(16) %"struct.WTF::KeyValuePair"* @_ZN3WTF12KeyValuePairINS_12AtomicStringES1_EaSERKS2_(%"struct.WTF::KeyValuePair"* %73, %"struct.WTF::KeyValuePair"* dereferenceable(16) %2) #10
  %75 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, 1
  store i32 %77, i32* %75, align 4
  %78 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %79 = load i32, i32* %78, align 8
  %80 = add i32 %79, %77
  %81 = shl i32 %80, 1
  %82 = load i32, i32* %12, align 8
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %86, label %84

84:                                               ; preds = %72
  %85 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair"* %73)
  br label %86

86:                                               ; preds = %49, %72, %84
  %87 = phi i8 [ 1, %72 ], [ 1, %84 ], [ 0, %49 ]
  %88 = phi %"struct.WTF::KeyValuePair"* [ %73, %72 ], [ %85, %84 ], [ %42, %49 ]
  %89 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %88, 0
  %90 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %89, i8 %87, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %90
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.10"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringES2_EEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #10
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #10
  ret %"struct.WTF::KeyValuePair"* %37
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.WTF::KeyValuePair"* @_ZN3WTF12KeyValuePairINS_12AtomicStringES1_EaSERKS2_(%"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* dereferenceable(16)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #10
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !3

20:                                               ; preds = %11
  tail call void @llvm.trap() #10
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %21, %6, %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %25 = bitcast %"struct.WTF::KeyValuePair"* %0 to i64*
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %23, %38, %41
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %64, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #10
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !3

61:                                               ; preds = %52
  tail call void @llvm.trap() #10
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %64

64:                                               ; preds = %62, %47, %42
  %65 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  %66 = bitcast %"class.WTF::AtomicString"* %43 to i64*
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %43, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  store i64 %65, i64* %66, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %83, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  br i1 %74, label %77, label %79

77:                                               ; preds = %70
  %78 = add i32 %76, -1
  store i32 %78, i32* %75, align 4
  br label %79

79:                                               ; preds = %77, %70
  %80 = phi i32 [ %78, %77 ], [ %76, %70 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %79
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %68) #10
  br label %83

83:                                               ; preds = %64, %79, %82
  ret %"struct.WTF::KeyValuePair"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.14"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %66

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #10
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = mul nuw nsw i64 %27, 24
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #10
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair.17"*
  %31 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !8
  %32 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %31, i64 0, i32 0, i32 0, i32 0
  br label %33

33:                                               ; preds = %56, %26
  %34 = phi i64 [ 0, %26 ], [ %62, %56 ]
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %30, i64 %34
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8, !noalias !8
  %37 = ptrtoint %"class.WTF::StringImpl"* %36 to i64
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4, !noalias !8
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4, !noalias !8
  %47 = zext i32 %46 to i33
  %48 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #10
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !3

53:                                               ; preds = %44
  call void @llvm.trap() #10, !noalias !8
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4, !noalias !8
  br label %56

56:                                               ; preds = %54, %39, %33
  %57 = bitcast %"struct.WTF::KeyValuePair.17"* %35 to i64*
  store i64 %37, i64* %57, align 8
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %30, i64 %34, i32 1
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %30, i64 %34, i32 1, i32 0, i32 0, i32 1
  %60 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %30, i64 %34, i32 1, i32 0, i32 0, i32 2
  %61 = bitcast %"class.WTF::Vector.18"* %58 to i64*
  store atomic i64 0, i64* %61 monotonic, align 8
  store i32 0, i32* %59, align 4
  store i32 0, i32* %60, align 4
  %62 = add nuw nsw i64 %34, 1
  %63 = icmp eq i64 %62, %27
  br i1 %63, label %64, label %33

64:                                               ; preds = %56
  %65 = call %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.14"* %0, %"struct.WTF::KeyValuePair.17"* %30, i32 %17, %"struct.WTF::KeyValuePair.17"* null) #10
  br label %66

66:                                               ; preds = %64, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.14"*, %"struct.WTF::KeyValuePair.17"*, i32, %"struct.WTF::KeyValuePair.17"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair.17"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.14"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair.17"* %16 to i64
  br label %104

18:                                               ; preds = %180
  %19 = bitcast %"class.WTF::HashTable.14"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %181, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair.17"* [ null, %10 ], [ %184, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %182, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"struct.WTF::KeyValuePair.17"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %100, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %98, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %95, %29
  %32 = phi i64 [ 0, %29 ], [ %96, %95 ]
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %25, i64 %32
  %34 = bitcast %"struct.WTF::KeyValuePair.17"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, inttoptr (i64 -1 to i8*)
  br i1 %36, label %95, label %37

37:                                               ; preds = %31
  %38 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %25, i64 %32, i32 1
  %40 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %39, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %40, align 8
  %42 = icmp eq %"class.WTF::AtomicString"* %41, null
  br i1 %42, label %79, label %43, !prof !2

43:                                               ; preds = %37
  %44 = bitcast %"class.WTF::AtomicString"* %41 to i8*
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %25, i64 %32, i32 1, i32 0, i32 0, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %75, label %48, !prof !3

48:                                               ; preds = %43
  %49 = zext i32 %46 to i64
  %50 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %41, i64 %49
  br label %51

51:                                               ; preds = %69, %48
  %52 = phi %"class.WTF::AtomicString"* [ %70, %69 ], [ %41, %48 ]
  %53 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %52, i64 0, i32 0, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #10
  br label %69

69:                                               ; preds = %68, %65, %51
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %52, i64 1
  %71 = icmp eq %"class.WTF::AtomicString"* %70, %50
  br i1 %71, label %72, label %51

72:                                               ; preds = %69
  store i32 0, i32* %45, align 4
  %73 = bitcast %"class.WTF::Vector.18"* %39 to i8**
  %74 = load i8*, i8** %73, align 8
  br label %75

75:                                               ; preds = %72, %43
  %76 = phi i8* [ %74, %72 ], [ %44, %43 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #10
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %40, align 8
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %33, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  br label %79

79:                                               ; preds = %75, %37
  %80 = phi %"class.WTF::StringImpl"* [ %78, %75 ], [ %38, %37 ]
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %95, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  br i1 %86, label %89, label %91

89:                                               ; preds = %82
  %90 = add i32 %88, -1
  store i32 %90, i32* %87, align 4
  br label %91

91:                                               ; preds = %89, %82
  %92 = phi i32 [ %90, %89 ], [ %88, %82 ]
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %80) #10
  br label %95

95:                                               ; preds = %94, %91, %79, %31
  %96 = add nuw nsw i64 %32, 1
  %97 = icmp eq i64 %96, %30
  br i1 %97, label %98, label %31

98:                                               ; preds = %95, %27
  %99 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %99) #10
  br label %100

100:                                              ; preds = %20, %98
  %101 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 3
  %102 = load i32, i32* %101, align 8
  %103 = and i32 %102, -2147483648
  store i32 %103, i32* %101, align 8
  ret %"struct.WTF::KeyValuePair.17"* %23

104:                                              ; preds = %13, %180
  %105 = phi i64 [ %17, %13 ], [ %181, %180 ]
  %106 = phi i32 [ %7, %13 ], [ %182, %180 ]
  %107 = phi %"struct.WTF::KeyValuePair.17"* [ %16, %13 ], [ %183, %180 ]
  %108 = phi %"struct.WTF::KeyValuePair.17"* [ null, %13 ], [ %184, %180 ]
  %109 = phi i32 [ 0, %13 ], [ %185, %180 ]
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %107, i64 %110
  %112 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %111, i64 0, i32 0, i32 0, i32 0, i32 0
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  %114 = ptrtoint %"class.WTF::StringImpl"* %113 to i64
  switch i64 %114, label %115 [
    i64 -1, label %180
    i64 0, label %180
  ]

115:                                              ; preds = %104
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = lshr i32 %117, 8
  %119 = and i32 %118, %14
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 %120
  %122 = ptrtoint %"struct.WTF::KeyValuePair.17"* %121 to i64
  %123 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %121, i64 0, i32 0, i32 0, i32 0, i32 0
  %124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %123, align 8
  %125 = icmp eq %"class.WTF::StringImpl"* %124, null
  br i1 %125, label %142, label %126

126:                                              ; preds = %115
  %127 = xor i32 %118, -1
  %128 = lshr i32 %117, 31
  %129 = add nsw i32 %128, %127
  %130 = shl i32 %129, 12
  %131 = xor i32 %130, %129
  %132 = lshr i32 %131, 7
  %133 = xor i32 %132, %131
  %134 = shl i32 %133, 2
  %135 = xor i32 %134, %133
  %136 = lshr i32 %135, 20
  %137 = xor i32 %136, %135
  %138 = or i32 %137, 1
  %139 = zext i32 %138 to i64
  br label %148

140:                                              ; preds = %160
  %141 = ptrtoint %"struct.WTF::KeyValuePair.17"* %166 to i64
  br label %142

142:                                              ; preds = %140, %115
  %143 = phi i64 [ %122, %115 ], [ %141, %140 ]
  %144 = phi %"struct.WTF::KeyValuePair.17"* [ null, %115 ], [ %161, %140 ]
  %145 = icmp eq %"struct.WTF::KeyValuePair.17"* %144, null
  %146 = ptrtoint %"struct.WTF::KeyValuePair.17"* %144 to i64
  %147 = select i1 %145, i64 %143, i64 %146
  br label %171

148:                                              ; preds = %160, %126
  %149 = phi %"struct.WTF::KeyValuePair.17"* [ null, %126 ], [ %161, %160 ]
  %150 = phi i64 [ %122, %126 ], [ %167, %160 ]
  %151 = phi %"struct.WTF::KeyValuePair.17"* [ %121, %126 ], [ %166, %160 ]
  %152 = phi i64 [ %120, %126 ], [ %165, %160 ]
  %153 = phi i64 [ 0, %126 ], [ %163, %160 ]
  %154 = bitcast %"struct.WTF::KeyValuePair.17"* %151 to i8**
  %155 = load i8*, i8** %154, align 8
  %156 = icmp eq i8* %155, inttoptr (i64 -1 to i8*)
  br i1 %156, label %160, label %157

157:                                              ; preds = %148
  %158 = bitcast i8* %155 to %"class.WTF::StringImpl"*
  %159 = icmp eq %"class.WTF::StringImpl"* %113, %158
  br i1 %159, label %171, label %160

160:                                              ; preds = %157, %148
  %161 = phi %"struct.WTF::KeyValuePair.17"* [ %149, %157 ], [ %151, %148 ]
  %162 = icmp eq i64 %153, 0
  %163 = select i1 %162, i64 %139, i64 %153
  %164 = add i64 %163, %152
  %165 = and i64 %164, %15
  %166 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 %165
  %167 = ptrtoint %"struct.WTF::KeyValuePair.17"* %166 to i64
  %168 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %166, i64 0, i32 0, i32 0, i32 0, i32 0
  %169 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %170 = icmp eq %"class.WTF::StringImpl"* %169, null
  br i1 %170, label %140, label %148

171:                                              ; preds = %157, %142
  %172 = phi i64 [ %147, %142 ], [ %150, %157 ]
  %173 = inttoptr i64 %172 to %"struct.WTF::KeyValuePair.17"*
  tail call void @_ZN3WTF5MoverINS_12KeyValuePairINS_12AtomicStringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_(%"struct.WTF::KeyValuePair.17"* dereferenceable(24) %111, %"struct.WTF::KeyValuePair.17"* dereferenceable(24) %173) #10
  %174 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %9, align 8
  %175 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %174, i64 %110
  %176 = icmp eq %"struct.WTF::KeyValuePair.17"* %175, %3
  %177 = select i1 %176, %"struct.WTF::KeyValuePair.17"* %173, %"struct.WTF::KeyValuePair.17"* %108
  %178 = load i32, i32* %6, align 8
  %179 = ptrtoint %"struct.WTF::KeyValuePair.17"* %174 to i64
  br label %180

180:                                              ; preds = %104, %104, %171
  %181 = phi i64 [ %105, %104 ], [ %179, %171 ], [ %105, %104 ]
  %182 = phi i32 [ %106, %104 ], [ %178, %171 ], [ %106, %104 ]
  %183 = phi %"struct.WTF::KeyValuePair.17"* [ %107, %104 ], [ %174, %171 ], [ %107, %104 ]
  %184 = phi %"struct.WTF::KeyValuePair.17"* [ %108, %104 ], [ %177, %171 ], [ %108, %104 ]
  %185 = add i32 %109, 1
  %186 = icmp eq i32 %185, %182
  br i1 %186, label %18, label %104
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5MoverINS_12KeyValuePairINS_12AtomicStringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_(%"struct.WTF::KeyValuePair.17"* dereferenceable(24), %"struct.WTF::KeyValuePair.17"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 0, i32 1
  %4 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %41, label %7, !prof !2

7:                                                ; preds = %2
  %8 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  %9 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %39, label %12, !prof !3

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 %13
  br label %15

15:                                               ; preds = %33, %12
  %16 = phi %"class.WTF::AtomicString"* [ %34, %33 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #10
  br label %33

33:                                               ; preds = %32, %29, %15
  %34 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %35 = icmp eq %"class.WTF::AtomicString"* %34, %14
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  %37 = bitcast %"class.WTF::Vector.18"* %3 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi i8* [ %38, %36 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #10
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %4, align 8
  br label %41

41:                                               ; preds = %39, %2
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #10
  br label %58

58:                                               ; preds = %41, %54, %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = bitcast %"struct.WTF::KeyValuePair.17"* %0 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"struct.WTF::KeyValuePair.17"* %1 to i64*
  store i64 %61, i64* %62, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %59, align 8
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %0, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %66 = bitcast %"class.WTF::Vector.18"* %63 to i64*
  %67 = bitcast %"class.WTF::Vector.18"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 16, i1 false) #10
  %68 = load i64, i64* %66, align 8
  %69 = bitcast %"class.WTF::Vector.18"* %3 to i64*
  store atomic i64 0, i64* %66 monotonic, align 8
  store atomic i64 %68, i64* %69 monotonic, align 8
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %71 = load i32, i32* %64, align 4
  %72 = load i32, i32* %70, align 4
  store i32 %72, i32* %64, align 4
  store i32 %71, i32* %70, align 4
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %74 = load i32, i32* %65, align 4
  %75 = load i32, i32* %73, align 4
  store i32 %75, i32* %65, align 4
  store i32 %74, i32* %73, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.17"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.14"*, %"class.WTF::AtomicString"* dereferenceable(8), %"struct.WTF::KeyValuePair.17"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.17"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.14"* %0, %"struct.WTF::KeyValuePair.17"* null)
  %9 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.17"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %99, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair.17"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair.17"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair.17"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %155, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair.17"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair.17"* %53, null
  br i1 %63, label %99, label %64

64:                                               ; preds = %62
  %65 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !11
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8, !noalias !11
  %68 = ptrtoint %"class.WTF::StringImpl"* %67 to i64
  %69 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %69, label %87, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4, !noalias !11
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %87

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %77 = load i32, i32* %76, align 4, !noalias !11
  %78 = zext i32 %77 to i33
  %79 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %78, i33 1) #10
  %80 = extractvalue { i33, i1 } %79, 1
  %81 = extractvalue { i33, i1 } %79, 0
  %82 = icmp slt i33 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %84, label %85, !prof !3

84:                                               ; preds = %75
  tail call void @llvm.trap() #10, !noalias !11
  unreachable

85:                                               ; preds = %75
  %86 = trunc i33 %81 to i32
  store i32 %86, i32* %76, align 4, !noalias !11
  br label %87

87:                                               ; preds = %64, %70, %85
  %88 = bitcast %"struct.WTF::KeyValuePair.17"* %53 to i64*
  store i64 %68, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %53, i64 0, i32 1
  %90 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %53, i64 0, i32 1, i32 0, i32 0, i32 1
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %53, i64 0, i32 1, i32 0, i32 0, i32 2
  %92 = bitcast %"class.WTF::Vector.18"* %89 to i64*
  store atomic i64 0, i64* %92 monotonic, align 8
  store i32 0, i32* %90, align 4
  store i32 0, i32* %91, align 4
  %93 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = add i32 %94, 2147483647
  %96 = and i32 %95, 2147483647
  %97 = and i32 %94, -2147483648
  %98 = or i32 %96, %97
  store i32 %98, i32* %93, align 8
  br label %99

99:                                               ; preds = %10, %62, %87
  %100 = phi %"struct.WTF::KeyValuePair.17"* [ %53, %87 ], [ %58, %62 ], [ %23, %10 ]
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %101, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %121, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %121

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i33
  %113 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %112, i33 1) #10
  %114 = extractvalue { i33, i1 } %113, 1
  %115 = extractvalue { i33, i1 } %113, 0
  %116 = icmp slt i33 %115, 0
  %117 = or i1 %114, %116
  br i1 %117, label %118, label %119, !prof !3

118:                                              ; preds = %109
  tail call void @llvm.trap() #10
  unreachable

119:                                              ; preds = %109
  %120 = trunc i33 %115 to i32
  store i32 %120, i32* %110, align 4
  br label %121

121:                                              ; preds = %119, %104, %99
  %122 = ptrtoint %"class.WTF::StringImpl"* %102 to i64
  %123 = bitcast %"struct.WTF::KeyValuePair.17"* %100 to i64*
  %124 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %100, i64 0, i32 0, i32 0, i32 0, i32 0
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  store i64 %122, i64* %123, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %121
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #10
  br label %140

140:                                              ; preds = %121, %136, %139
  %141 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %100, i64 0, i32 1
  %142 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %2, i64 0, i32 1
  %143 = tail call dereferenceable(16) %"class.WTF::Vector.18"* @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.18"* %141, %"class.WTF::Vector.18"* dereferenceable(16) %142) #10
  %144 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 2
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %145, 1
  store i32 %146, i32* %144, align 4
  %147 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 3
  %148 = load i32, i32* %147, align 8
  %149 = add i32 %148, %146
  %150 = shl i32 %149, 1
  %151 = load i32, i32* %12, align 8
  %152 = icmp ult i32 %150, %151
  br i1 %152, label %155, label %153

153:                                              ; preds = %140
  %154 = tail call %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.14"* %0, %"struct.WTF::KeyValuePair.17"* %100)
  br label %155

155:                                              ; preds = %49, %140, %153
  %156 = phi i8 [ 1, %140 ], [ 1, %153 ], [ 0, %49 ]
  %157 = phi %"struct.WTF::KeyValuePair.17"* [ %100, %140 ], [ %154, %153 ], [ %42, %49 ]
  %158 = insertvalue { %"struct.WTF::KeyValuePair.17"*, i8 } undef, %"struct.WTF::KeyValuePair.17"* %157, 0
  %159 = insertvalue { %"struct.WTF::KeyValuePair.17"*, i8 } %158, i8 %156, 1
  ret { %"struct.WTF::KeyValuePair.17"*, i8 } %159
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.14"*, %"struct.WTF::KeyValuePair.17"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 24
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #10
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.17"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %31
  %39 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !14
  %40 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %39, i64 0, i32 0, i32 0, i32 0
  br label %41

41:                                               ; preds = %64, %38
  %42 = phi i64 [ 0, %38 ], [ %70, %64 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %36, i64 %42
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8, !noalias !14
  %45 = ptrtoint %"class.WTF::StringImpl"* %44 to i64
  %46 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %46, label %64, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4, !noalias !14
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !14
  %55 = zext i32 %54 to i33
  %56 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #10
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !3

61:                                               ; preds = %52
  call void @llvm.trap() #10, !noalias !14
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4, !noalias !14
  br label %64

64:                                               ; preds = %62, %47, %41
  %65 = bitcast %"struct.WTF::KeyValuePair.17"* %43 to i64*
  store i64 %45, i64* %65, align 8
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %36, i64 %42, i32 1
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %36, i64 %42, i32 1, i32 0, i32 0, i32 1
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %36, i64 %42, i32 1, i32 0, i32 0, i32 2
  %69 = bitcast %"class.WTF::Vector.18"* %66 to i64*
  store atomic i64 0, i64* %69 monotonic, align 8
  store i32 0, i32* %67, align 4
  store i32 0, i32* %68, align 4
  %70 = add nuw nsw i64 %42, 1
  %71 = icmp eq i64 %70, %33
  br i1 %71, label %72, label %41

72:                                               ; preds = %64, %31
  %73 = call %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.14"* %0, %"struct.WTF::KeyValuePair.17"* %36, i32 %32, %"struct.WTF::KeyValuePair.17"* %1) #10
  ret %"struct.WTF::KeyValuePair.17"* %73
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.18"* @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.18"*, %"class.WTF::Vector.18"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.18"* %1, %0
  br i1 %3, label %219, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::AtomicString"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #10
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 1
  %37 = icmp eq %"class.WTF::AtomicString"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::AtomicString"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #10
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 1
  %72 = icmp eq %"class.WTF::AtomicString"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector.18"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #10
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !2

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %85, align 8
  %87 = icmp eq %"class.WTF::AtomicString"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %88) #10
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #10
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::AtomicString"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::AtomicString"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !2

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #10
  %108 = bitcast %"class.WTF::Vector.18"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #10
  %112 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::AtomicString"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::AtomicString"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %127, i64 0, i32 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #10
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !3

145:                                              ; preds = %136
  tail call void @llvm.trap() #10
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::AtomicString"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %126, i64 0, i32 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #10
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %126, i64 1
  %170 = icmp eq %"class.WTF::AtomicString"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::AtomicString"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::AtomicString"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::AtomicString"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::AtomicString"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %189, i64 0, i32 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %188, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #10
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !3

208:                                              ; preds = %199
  tail call void @llvm.trap() #10
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %189, i64 1
  %214 = icmp eq %"class.WTF::AtomicString"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector.18"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.13, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF7HashMapINS_12AtomicStringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_16AtomicStringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector.18"* noalias sret, %"class.WTF::HashMap.13"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashMap.13", %"class.WTF::HashMap.13"* %1, i64 0, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.17"* %5, null
  br i1 %6, label %58, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::HashMap.13", %"class.WTF::HashMap.13"* %1, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = lshr i32 %15, 8
  %17 = and i32 %16, %10
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %5, i64 %18
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %58, label %23

23:                                               ; preds = %7
  %24 = xor i32 %16, -1
  %25 = lshr i32 %15, 31
  %26 = add nsw i32 %25, %24
  %27 = shl i32 %26, 12
  %28 = xor i32 %27, %26
  %29 = lshr i32 %28, 7
  %30 = xor i32 %29, %28
  %31 = shl i32 %30, 2
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 20
  %34 = xor i32 %33, %32
  %35 = or i32 %34, 1
  %36 = zext i32 %35 to i64
  br label %37

37:                                               ; preds = %47, %23
  %38 = phi %"struct.WTF::KeyValuePair.17"* [ %19, %23 ], [ %52, %47 ]
  %39 = phi i64 [ %18, %23 ], [ %51, %47 ]
  %40 = phi i64 [ 0, %23 ], [ %49, %47 ]
  %41 = bitcast %"struct.WTF::KeyValuePair.17"* %38 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, inttoptr (i64 -1 to i8*)
  %44 = bitcast i8* %42 to %"class.WTF::StringImpl"*
  %45 = icmp eq %"class.WTF::StringImpl"* %13, %44
  %46 = and i1 %43, %45
  br i1 %46, label %56, label %47

47:                                               ; preds = %37
  %48 = icmp eq i64 %40, 0
  %49 = select i1 %48, i64 %36, i64 %40
  %50 = add i64 %49, %39
  %51 = and i64 %50, %11
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %5, i64 %51
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %52, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %58, label %37

56:                                               ; preds = %37
  %57 = icmp eq %"struct.WTF::KeyValuePair.17"* %38, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %47, %7, %3, %56
  %59 = bitcast %"class.WTF::Vector.18"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false)
  br label %113

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %38, i64 0, i32 1, i32 0, i32 0, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %63, align 8
  %64 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %64, align 8
  %65 = icmp eq i32 %62, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %60
  %67 = zext i32 %62 to i64
  %68 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %67) #10
  %69 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %68, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #10
  %70 = ptrtoint i8* %69 to i64
  %71 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %70, i64* %71 monotonic, align 8
  %72 = lshr i64 %68, 3
  %73 = trunc i64 %72 to i32
  store i32 %73, i32* %64, align 8
  %74 = bitcast i8* %69 to %"class.WTF::AtomicString"*
  br label %75

75:                                               ; preds = %66, %60
  %76 = phi %"class.WTF::AtomicString"* [ null, %60 ], [ %74, %66 ]
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %38, i64 0, i32 1, i32 0, i32 0, i32 2
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %78, i32* %79, align 4
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %38, i64 0, i32 1, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %80, align 8
  %82 = zext i32 %78 to i64
  %83 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %81, i64 %82
  %84 = icmp eq i32 %78, 0
  br i1 %84, label %113, label %85

85:                                               ; preds = %75, %109
  %86 = phi %"class.WTF::AtomicString"* [ %110, %109 ], [ %76, %75 ]
  %87 = phi %"class.WTF::AtomicString"* [ %111, %109 ], [ %81, %75 ]
  %88 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %87, i64 0, i32 0, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %86, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %89, %"class.WTF::StringImpl"** %90, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %91, label %109, label %92

92:                                               ; preds = %85
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %109

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i33
  %101 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %100, i33 1) #10
  %102 = extractvalue { i33, i1 } %101, 1
  %103 = extractvalue { i33, i1 } %101, 0
  %104 = icmp slt i33 %103, 0
  %105 = or i1 %102, %104
  br i1 %105, label %106, label %107, !prof !3

106:                                              ; preds = %97
  tail call void @llvm.trap() #10
  unreachable

107:                                              ; preds = %97
  %108 = trunc i33 %103 to i32
  store i32 %108, i32* %98, align 4
  br label %109

109:                                              ; preds = %107, %92, %85
  %110 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %86, i64 1
  %111 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %87, i64 1
  %112 = icmp eq %"class.WTF::AtomicString"* %111, %83
  br i1 %112, label %113, label %85

113:                                              ; preds = %109, %75, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERKS1_SG_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_(%"class.WTF::HashTable.10"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %85, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #10
  %66 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"struct.WTF::KeyValuePair"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  tail call void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_12AtomicStringEEES4_EENS_16AtomicStringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S3_EERKS3_SD_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair"* dereferenceable(16) %73, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  %74 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 4
  %77 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, %76
  %80 = shl i32 %79, 1
  %81 = load i32, i32* %12, align 8
  %82 = icmp ult i32 %80, %81
  br i1 %82, label %85, label %83

83:                                               ; preds = %72
  %84 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair"* %73)
  br label %85

85:                                               ; preds = %49, %72, %83
  %86 = phi i8 [ 1, %72 ], [ 1, %83 ], [ 0, %49 ]
  %87 = phi %"struct.WTF::KeyValuePair"* [ %73, %72 ], [ %84, %83 ], [ %42, %49 ]
  %88 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %87, 0
  %89 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %88, i8 %86, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %89
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_12AtomicStringEEES4_EENS_16AtomicStringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S3_EERKS3_SD_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair"* dereferenceable(16), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %22, %7, %3
  %25 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %26 = bitcast %"struct.WTF::KeyValuePair"* %0 to i64*
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  store i64 %25, i64* %26, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #10
  br label %43

43:                                               ; preds = %24, %39, %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %45 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = icmp eq %"class.WTF::StringImpl"* %46, null
  br i1 %47, label %65, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i33
  %57 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %56, i33 1) #10
  %58 = extractvalue { i33, i1 } %57, 1
  %59 = extractvalue { i33, i1 } %57, 0
  %60 = icmp slt i33 %59, 0
  %61 = or i1 %58, %60
  br i1 %61, label %62, label %63, !prof !3

62:                                               ; preds = %53
  tail call void @llvm.trap() #10
  unreachable

63:                                               ; preds = %53
  %64 = trunc i33 %59 to i32
  store i32 %64, i32* %54, align 4
  br label %65

65:                                               ; preds = %63, %48, %43
  %66 = ptrtoint %"class.WTF::StringImpl"* %46 to i64
  %67 = bitcast %"class.WTF::AtomicString"* %44 to i64*
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %44, i64 0, i32 0, i32 0, i32 0
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  store i64 %66, i64* %67, align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %70, label %84, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %69) #10
  br label %84

84:                                               ; preds = %65, %80, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.17"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_S5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.14"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::Vector.18"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.17"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.14"* %0, %"struct.WTF::KeyValuePair.17"* null)
  %9 = load %"struct.WTF::KeyValuePair.17"*, %"struct.WTF::KeyValuePair.17"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.17"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %100, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair.17"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair.17"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair.17"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %165, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair.17"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair.17"* %53, null
  br i1 %63, label %100, label %64

64:                                               ; preds = %62
  %65 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8, !noalias !17
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8, !noalias !17
  %68 = ptrtoint %"class.WTF::StringImpl"* %67 to i64
  %69 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %69, label %87, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4, !noalias !17
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %87

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %77 = load i32, i32* %76, align 4, !noalias !17
  %78 = zext i32 %77 to i33
  %79 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %78, i33 1) #10
  %80 = extractvalue { i33, i1 } %79, 1
  %81 = extractvalue { i33, i1 } %79, 0
  %82 = icmp slt i33 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %84, label %85, !prof !3

84:                                               ; preds = %75
  tail call void @llvm.trap() #10, !noalias !17
  unreachable

85:                                               ; preds = %75
  %86 = trunc i33 %81 to i32
  store i32 %86, i32* %76, align 4, !noalias !17
  br label %87

87:                                               ; preds = %64, %70, %85
  %88 = bitcast %"struct.WTF::KeyValuePair.17"* %53 to i64*
  store i64 %68, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %53, i64 0, i32 1
  %90 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %53, i64 0, i32 1, i32 0, i32 0, i32 1
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %53, i64 0, i32 1, i32 0, i32 0, i32 2
  %92 = bitcast %"class.WTF::Vector.18"* %89 to i64*
  store atomic i64 0, i64* %92 monotonic, align 8
  store i32 0, i32* %90, align 4
  store i32 0, i32* %91, align 4
  %93 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = add i32 %94, 2147483647
  %96 = and i32 %95, 2147483647
  %97 = and i32 %94, -2147483648
  %98 = or i32 %96, %97
  store i32 %98, i32* %93, align 8
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  br label %100

100:                                              ; preds = %10, %62, %87
  %101 = phi %"class.WTF::StringImpl"* [ %99, %87 ], [ %17, %62 ], [ %17, %10 ]
  %102 = phi %"struct.WTF::KeyValuePair.17"* [ %53, %87 ], [ %58, %62 ], [ %23, %10 ]
  %103 = icmp eq %"class.WTF::StringImpl"* %101, null
  br i1 %103, label %121, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %121

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i33
  %113 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %112, i33 1) #10
  %114 = extractvalue { i33, i1 } %113, 1
  %115 = extractvalue { i33, i1 } %113, 0
  %116 = icmp slt i33 %115, 0
  %117 = or i1 %114, %116
  br i1 %117, label %118, label %119, !prof !3

118:                                              ; preds = %109
  tail call void @llvm.trap() #10
  unreachable

119:                                              ; preds = %109
  %120 = trunc i33 %115 to i32
  store i32 %120, i32* %110, align 4
  br label %121

121:                                              ; preds = %119, %104, %100
  %122 = ptrtoint %"class.WTF::StringImpl"* %101 to i64
  %123 = bitcast %"struct.WTF::KeyValuePair.17"* %102 to i64*
  %124 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %102, i64 0, i32 0, i32 0, i32 0, i32 0
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  store i64 %122, i64* %123, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %121
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #10
  br label %140

140:                                              ; preds = %121, %136, %139
  %141 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %102, i64 0, i32 1
  %142 = bitcast %"class.WTF::Vector.18"* %2 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast %"class.WTF::Vector.18"* %141 to i64*
  %145 = load i64, i64* %144, align 8
  store atomic i64 %145, i64* %142 monotonic, align 8
  store atomic i64 %143, i64* %144 monotonic, align 8
  %146 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %102, i64 0, i32 1, i32 0, i32 0, i32 1
  %147 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %2, i64 0, i32 0, i32 0, i32 1
  %148 = load i32, i32* %146, align 4
  %149 = load i32, i32* %147, align 4
  store i32 %149, i32* %146, align 4
  store i32 %148, i32* %147, align 4
  %150 = getelementptr inbounds %"struct.WTF::KeyValuePair.17", %"struct.WTF::KeyValuePair.17"* %102, i64 0, i32 1, i32 0, i32 0, i32 2
  %151 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %2, i64 0, i32 0, i32 0, i32 2
  %152 = load i32, i32* %150, align 4
  %153 = load i32, i32* %151, align 4
  store i32 %153, i32* %150, align 4
  store i32 %152, i32* %151, align 4
  %154 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 2
  %155 = load i32, i32* %154, align 4
  %156 = add i32 %155, 1
  store i32 %156, i32* %154, align 4
  %157 = getelementptr inbounds %"class.WTF::HashTable.14", %"class.WTF::HashTable.14"* %0, i64 0, i32 3
  %158 = load i32, i32* %157, align 8
  %159 = add i32 %158, %156
  %160 = shl i32 %159, 1
  %161 = load i32, i32* %12, align 8
  %162 = icmp ult i32 %160, %161
  br i1 %162, label %165, label %163

163:                                              ; preds = %140
  %164 = tail call %"struct.WTF::KeyValuePair.17"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.14"* %0, %"struct.WTF::KeyValuePair.17"* %102)
  br label %165

165:                                              ; preds = %49, %140, %163
  %166 = phi i8 [ 1, %140 ], [ 1, %163 ], [ 0, %49 ]
  %167 = phi %"struct.WTF::KeyValuePair.17"* [ %102, %140 ], [ %164, %163 ], [ %42, %49 ]
  %168 = insertvalue { %"struct.WTF::KeyValuePair.17"*, i8 } undef, %"struct.WTF::KeyValuePair.17"* %167, 0
  %169 = insertvalue { %"struct.WTF::KeyValuePair.17"*, i8 } %168, i8 %166, 1
  ret { %"struct.WTF::KeyValuePair.17"*, i8 } %169
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.18"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %8 = icmp ugt %"class.WTF::AtomicString"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::AtomicString"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !2

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::AtomicString"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::AtomicString"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::AtomicString"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::AtomicString"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !2

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector.18"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::AtomicString"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %56 = ptrtoint %"class.WTF::AtomicString"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.18", %"class.WTF::Vector.18"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !2

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::AtomicString"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::AtomicString"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::AtomicString"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !2

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector.18"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector.18"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::AtomicString"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::AtomicString"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::AtomicString"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::AtomicString"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %101, i64 0, i32 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %100, i64 %103, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #10
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !3

122:                                              ; preds = %113
  tail call void @llvm.trap() #10
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(56) %"class.blink::MarkupAccumulator::NamespaceContext"* @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.7"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.14, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %24, i64 %25
  ret %"class.blink::MarkupAccumulator::NamespaceContext"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS_6StringENS_12AtomicStringEEC2ES1_S2_(%"class.WTF::StringAppend"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %4, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #10
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !3

20:                                               ; preds = %11
  tail call void @llvm.trap() #10
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %3, %6, %21
  %24 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %24, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %25, label %55, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %43

33:                                               ; preds = %26
  %34 = zext i32 %32 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #10
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !3

40:                                               ; preds = %33
  tail call void @llvm.trap() #10
  unreachable

41:                                               ; preds = %33
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %31, align 4
  br label %43

43:                                               ; preds = %26, %41
  %44 = phi i32 [ %42, %41 ], [ %32, %26 ]
  %45 = load atomic i32, i32* %27 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %50 = add i32 %44, -1
  store i32 %50, i32* %49, align 4
  br label %51

51:                                               ; preds = %48, %43
  %52 = phi i32 [ %50, %48 ], [ %44, %43 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %55

55:                                               ; preds = %23, %51, %54
  br i1 %5, label %69, label %56

56:                                               ; preds = %55
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %69

69:                                               ; preds = %55, %65, %68
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringENS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  br label %14

14:                                               ; preds = %1, %11
  %15 = phi i32 [ %13, %11 ], [ 0, %1 ]
  %16 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  br label %22

22:                                               ; preds = %14, %19
  %23 = phi i32 [ %21, %19 ], [ 0, %14 ]
  %24 = add i32 %23, %15
  %25 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #10
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp ult i32 %24, %15
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %26, align 8
  br label %39

30:                                               ; preds = %22
  %31 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %24) #10
  %32 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %15) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0), i8* %31, i8* %32) #10
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %26, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #10
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #10
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #10
  %40 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #10
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %24, %23
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %41, align 8
  br label %54

45:                                               ; preds = %39
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %24) #10
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0), i8* %46, i8* %47) #10
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %41, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #10
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #10
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #10
  ret i32 %24
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.797"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.797"*, i16*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.7"*, %"class.blink::MarkupAccumulator::NamespaceContext"* dereferenceable(56)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %6, align 8
  %8 = icmp ugt %"class.blink::MarkupAccumulator::NamespaceContext"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %7, i64 %10
  %12 = icmp ugt %"class.blink::MarkupAccumulator::NamespaceContext"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !2

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink17MarkupAccumulator16NamespaceContextEEEmm(i64 %27) #10
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17MarkupAccumulator16NamespaceContextEEEPKcv, i64 0, i64 0)) #10
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %28, 56
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.blink::MarkupAccumulator::NamespaceContext"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.7"* %0, i32 %22) #10
  %36 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.blink::MarkupAccumulator::NamespaceContext"* %1 to i64
  %39 = ptrtoint %"class.blink::MarkupAccumulator::NamespaceContext"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = sdiv exact i64 %40, 56
  %42 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !2

52:                                               ; preds = %37
  %53 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink17MarkupAccumulator16NamespaceContextEEEmm(i64 %55) #10
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17MarkupAccumulator16NamespaceContextEEEPKcv, i64 0, i64 0)) #10
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = udiv i64 %56, 56
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.blink::MarkupAccumulator::NamespaceContext"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.7"* %0, i32 %50) #10
  %64 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72
  %74 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %73 to i8*
  %75 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 0, i32 0, i32 1
  %76 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 0, i32 0, i32 2
  %77 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 0, i32 0, i32 3
  %78 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %70 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 20, i1 false) #10
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %73 to i64*
  store atomic i64 0, i64* %78 monotonic, align 8
  store atomic i64 %79, i64* %80 monotonic, align 8
  %81 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 0, i32 0, i32 1
  %82 = load i32, i32* %75, align 4
  %83 = load i32, i32* %81, align 4
  store i32 %83, i32* %75, align 4
  store i32 %82, i32* %81, align 4
  %84 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 0, i32 0, i32 2
  %85 = load i32, i32* %76, align 4
  %86 = load i32, i32* %84, align 4
  store i32 %86, i32* %76, align 4
  store i32 %85, i32* %84, align 4
  %87 = load i32, i32* %77, align 8
  %88 = and i32 %87, 2147483647
  %89 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 0, i32 0, i32 3
  %90 = load i32, i32* %89, align 8
  %91 = and i32 %90, 2147483647
  %92 = and i32 %87, -2147483648
  %93 = or i32 %91, %92
  store i32 %93, i32* %77, align 8
  %94 = load i32, i32* %89, align 8
  %95 = and i32 %94, -2147483648
  %96 = or i32 %95, %88
  store i32 %96, i32* %89, align 8
  %97 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 1
  %98 = bitcast %"class.WTF::HashMap.13"* %97 to i8*
  %99 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 1
  %100 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 1, i32 0, i32 1
  %101 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 1, i32 0, i32 2
  %102 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 1, i32 0, i32 3
  %103 = bitcast %"class.WTF::HashMap.13"* %99 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 20, i1 false) #10
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.WTF::HashMap.13"* %97 to i64*
  store atomic i64 0, i64* %103 monotonic, align 8
  store atomic i64 %104, i64* %105 monotonic, align 8
  %106 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 1, i32 0, i32 1
  %107 = load i32, i32* %100, align 4
  %108 = load i32, i32* %106, align 4
  store i32 %108, i32* %100, align 4
  store i32 %107, i32* %106, align 4
  %109 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 1, i32 0, i32 2
  %110 = load i32, i32* %101, align 4
  %111 = load i32, i32* %109, align 4
  store i32 %111, i32* %101, align 4
  store i32 %110, i32* %109, align 4
  %112 = load i32, i32* %102, align 8
  %113 = and i32 %112, 2147483647
  %114 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 1, i32 0, i32 3
  %115 = load i32, i32* %114, align 8
  %116 = and i32 %115, 2147483647
  %117 = and i32 %112, -2147483648
  %118 = or i32 %116, %117
  store i32 %118, i32* %102, align 8
  %119 = load i32, i32* %114, align 8
  %120 = and i32 %119, -2147483648
  %121 = or i32 %120, %113
  store i32 %121, i32* %114, align 8
  %122 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %69, i64 %72, i32 2
  %123 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %70, i64 0, i32 2
  %124 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %123, i64 0, i32 0, i32 0, i32 0
  %125 = bitcast %"class.WTF::AtomicString"* %123 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.WTF::AtomicString"* %122 to i64*
  store i64 %126, i64* %127, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %124, align 8
  %128 = load i32, i32* %3, align 4
  %129 = add i32 %128, 1
  store i32 %129, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink17MarkupAccumulator16NamespaceContextELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.7"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %76

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %74, label %14

14:                                               ; preds = %4, %14
  %15 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %72, %14 ], [ %6, %4 ]
  %16 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %71, %14 ], [ null, %4 ]
  %17 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %16 to i8*
  %18 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 0, i32 0, i32 2
  %20 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 0, i32 0, i32 3
  %21 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %15 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 20, i1 false) #10
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %16 to i64*
  store atomic i64 0, i64* %21 monotonic, align 8
  store atomic i64 %22, i64* %23 monotonic, align 8
  %24 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 0, i32 0, i32 1
  %25 = load i32, i32* %18, align 4
  %26 = load i32, i32* %24, align 4
  store i32 %26, i32* %18, align 4
  store i32 %25, i32* %24, align 4
  %27 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 0, i32 0, i32 2
  %28 = load i32, i32* %19, align 4
  %29 = load i32, i32* %27, align 4
  store i32 %29, i32* %19, align 4
  store i32 %28, i32* %27, align 4
  %30 = load i32, i32* %20, align 8
  %31 = and i32 %30, 2147483647
  %32 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 0, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = and i32 %33, 2147483647
  %35 = and i32 %30, -2147483648
  %36 = or i32 %34, %35
  store i32 %36, i32* %20, align 8
  %37 = load i32, i32* %32, align 8
  %38 = and i32 %37, -2147483648
  %39 = or i32 %38, %31
  store i32 %39, i32* %32, align 8
  %40 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 1
  %41 = bitcast %"class.WTF::HashMap.13"* %40 to i8*
  %42 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 1
  %43 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 1, i32 0, i32 1
  %44 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 1, i32 0, i32 2
  %45 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 1, i32 0, i32 3
  %46 = bitcast %"class.WTF::HashMap.13"* %42 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 20, i1 false) #10
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.WTF::HashMap.13"* %40 to i64*
  store atomic i64 0, i64* %46 monotonic, align 8
  store atomic i64 %47, i64* %48 monotonic, align 8
  %49 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 1, i32 0, i32 1
  %50 = load i32, i32* %43, align 4
  %51 = load i32, i32* %49, align 4
  store i32 %51, i32* %43, align 4
  store i32 %50, i32* %49, align 4
  %52 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 1, i32 0, i32 2
  %53 = load i32, i32* %44, align 4
  %54 = load i32, i32* %52, align 4
  store i32 %54, i32* %44, align 4
  store i32 %53, i32* %52, align 4
  %55 = load i32, i32* %45, align 8
  %56 = and i32 %55, 2147483647
  %57 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 1, i32 0, i32 3
  %58 = load i32, i32* %57, align 8
  %59 = and i32 %58, 2147483647
  %60 = and i32 %55, -2147483648
  %61 = or i32 %59, %60
  store i32 %61, i32* %45, align 8
  %62 = load i32, i32* %57, align 8
  %63 = and i32 %62, -2147483648
  %64 = or i32 %63, %56
  store i32 %64, i32* %57, align 8
  %65 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 0, i32 2
  %66 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 0, i32 2
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = bitcast %"class.WTF::AtomicString"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.WTF::AtomicString"* %65 to i64*
  store i64 %69, i64* %70, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %67, align 8
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"* %15) #10
  %71 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %16, i64 1
  %72 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %15, i64 1
  %73 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %72, %10
  br i1 %73, label %74, label %14

74:                                               ; preds = %14, %4
  %75 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %75) #10
  br label %161

76:                                               ; preds = %2
  %77 = zext i32 %1 to i64
  %78 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink17MarkupAccumulator16NamespaceContextEEEmm(i64 %77) #10
  %79 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %78, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17MarkupAccumulator16NamespaceContextEEEPKcv, i64 0, i64 0)) #10
  %80 = udiv i64 %78, 56
  %81 = ptrtoint i8* %79 to i64
  %82 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 0
  %83 = load %"class.blink::MarkupAccumulator::NamespaceContext"*, %"class.blink::MarkupAccumulator::NamespaceContext"** %82, align 8
  %84 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %83, i64 %86
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %76
  %90 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %83 to i8*
  br label %156

91:                                               ; preds = %76
  %92 = bitcast i8* %79 to %"class.blink::MarkupAccumulator::NamespaceContext"*
  br label %93

93:                                               ; preds = %91, %93
  %94 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %151, %93 ], [ %83, %91 ]
  %95 = phi %"class.blink::MarkupAccumulator::NamespaceContext"* [ %150, %93 ], [ %92, %91 ]
  %96 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %95 to i8*
  %97 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 0, i32 0, i32 1
  %98 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 0, i32 0, i32 2
  %99 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 0, i32 0, i32 3
  %100 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %94 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 20, i1 false) #10
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.blink::MarkupAccumulator::NamespaceContext"* %95 to i64*
  store atomic i64 0, i64* %100 monotonic, align 8
  store atomic i64 %101, i64* %102 monotonic, align 8
  %103 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 0, i32 0, i32 1
  %104 = load i32, i32* %97, align 4
  %105 = load i32, i32* %103, align 4
  store i32 %105, i32* %97, align 4
  store i32 %104, i32* %103, align 4
  %106 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 0, i32 0, i32 2
  %107 = load i32, i32* %98, align 4
  %108 = load i32, i32* %106, align 4
  store i32 %108, i32* %98, align 4
  store i32 %107, i32* %106, align 4
  %109 = load i32, i32* %99, align 8
  %110 = and i32 %109, 2147483647
  %111 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 0, i32 0, i32 3
  %112 = load i32, i32* %111, align 8
  %113 = and i32 %112, 2147483647
  %114 = and i32 %109, -2147483648
  %115 = or i32 %113, %114
  store i32 %115, i32* %99, align 8
  %116 = load i32, i32* %111, align 8
  %117 = and i32 %116, -2147483648
  %118 = or i32 %117, %110
  store i32 %118, i32* %111, align 8
  %119 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 1
  %120 = bitcast %"class.WTF::HashMap.13"* %119 to i8*
  %121 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 1
  %122 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 1, i32 0, i32 1
  %123 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 1, i32 0, i32 2
  %124 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 1, i32 0, i32 3
  %125 = bitcast %"class.WTF::HashMap.13"* %121 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 20, i1 false) #10
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.WTF::HashMap.13"* %119 to i64*
  store atomic i64 0, i64* %125 monotonic, align 8
  store atomic i64 %126, i64* %127 monotonic, align 8
  %128 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 1, i32 0, i32 1
  %129 = load i32, i32* %122, align 4
  %130 = load i32, i32* %128, align 4
  store i32 %130, i32* %122, align 4
  store i32 %129, i32* %128, align 4
  %131 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 1, i32 0, i32 2
  %132 = load i32, i32* %123, align 4
  %133 = load i32, i32* %131, align 4
  store i32 %133, i32* %123, align 4
  store i32 %132, i32* %131, align 4
  %134 = load i32, i32* %124, align 8
  %135 = and i32 %134, 2147483647
  %136 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 1, i32 0, i32 3
  %137 = load i32, i32* %136, align 8
  %138 = and i32 %137, 2147483647
  %139 = and i32 %134, -2147483648
  %140 = or i32 %138, %139
  store i32 %140, i32* %124, align 8
  %141 = load i32, i32* %136, align 8
  %142 = and i32 %141, -2147483648
  %143 = or i32 %142, %135
  store i32 %143, i32* %136, align 8
  %144 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 0, i32 2
  %145 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 0, i32 2
  %146 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %145, i64 0, i32 0, i32 0, i32 0
  %147 = bitcast %"class.WTF::AtomicString"* %145 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.WTF::AtomicString"* %144 to i64*
  store i64 %148, i64* %149, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %146, align 8
  tail call void @_ZN5blink17MarkupAccumulator16NamespaceContextD2Ev(%"class.blink::MarkupAccumulator::NamespaceContext"* %94) #10
  %150 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %95, i64 1
  %151 = getelementptr inbounds %"class.blink::MarkupAccumulator::NamespaceContext", %"class.blink::MarkupAccumulator::NamespaceContext"* %94, i64 1
  %152 = icmp eq %"class.blink::MarkupAccumulator::NamespaceContext"* %151, %87
  br i1 %152, label %153, label %93

153:                                              ; preds = %93
  %154 = bitcast %"class.WTF::Vector.7"* %0 to i8**
  %155 = load i8*, i8** %154, align 8
  br label %156

156:                                              ; preds = %89, %153
  %157 = phi i8* [ %155, %153 ], [ %90, %89 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %157) #10
  %158 = bitcast %"class.WTF::Vector.7"* %0 to i64*
  store atomic i64 %81, i64* %158 monotonic, align 8
  %159 = trunc i64 %80 to i32
  %160 = getelementptr inbounds %"class.WTF::Vector.7", %"class.WTF::Vector.7"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %159, i32* %160, align 8
  br label %161

161:                                              ; preds = %156, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink17MarkupAccumulator16NamespaceContextEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 38310473
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 38310473) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.13, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 56
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendIPKcNS_6StringEEcvS3_Ev(%"class.WTF::StringAppend.732"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.803", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.803", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter", align 8
  %6 = alloca %"class.WTF::StringTypeAdapter.803", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.803"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.732", %"class.WTF::StringAppend.732"* %0, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #10
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.803"* nonnull %6, i8* %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringAppend.732", %"class.WTF::StringAppend.732"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  br i1 %20, label %82, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.732"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %7) #10
  %25 = load i8*, i8** %7, align 8
  %26 = bitcast %"class.WTF::StringTypeAdapter.803"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #10
  %27 = getelementptr inbounds %"class.WTF::StringTypeAdapter.803", %"class.WTF::StringTypeAdapter.803"* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 16, i1 false) #10
  %28 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.803"* nonnull %4, i8* %28) #10
  %29 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #10
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 24, i1 false) #10
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %21
  %35 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %42

36:                                               ; preds = %21
  %37 = ptrtoint %"class.WTF::StringImpl"* %32 to i64
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 1
  %41 = bitcast %"class.WTF::StringImpl"* %40 to i8*
  br label %42

42:                                               ; preds = %34, %36
  %43 = phi i8* [ null, %34 ], [ %41, %36 ]
  %44 = phi i64 [ %35, %34 ], [ %37, %36 ]
  %45 = phi i32 [ 0, %34 ], [ %39, %36 ]
  %46 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i64*
  store i64 %44, i64* %46, align 8
  store i8* %43, i8** %30, align 8
  store i32 %45, i32* %31, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.803"* nonnull %4, i8* %25) #10
  %47 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0
  %48 = load i32, i32* %27, align 8
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %25, i64 %49
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.797"* nonnull %47, i8* %50) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #10
  %51 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %51, label %143, label %52

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = and i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  br i1 %56, label %59, label %69

59:                                               ; preds = %52
  %60 = zext i32 %58 to i33
  %61 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %60, i33 1) #10
  %62 = extractvalue { i33, i1 } %61, 1
  %63 = extractvalue { i33, i1 } %61, 0
  %64 = icmp slt i33 %63, 0
  %65 = or i1 %62, %64
  br i1 %65, label %66, label %67, !prof !3

66:                                               ; preds = %59
  call void @llvm.trap() #10
  unreachable

67:                                               ; preds = %59
  %68 = trunc i33 %63 to i32
  store i32 %68, i32* %57, align 4
  br label %69

69:                                               ; preds = %52, %67
  %70 = phi i32 [ %68, %67 ], [ %58, %52 ]
  %71 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %72 = load atomic i32, i32* %53 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %77 = add i32 %70, -1
  store i32 %77, i32* %76, align 4
  br label %78

78:                                               ; preds = %75, %69
  %79 = phi i32 [ %77, %75 ], [ %70, %69 ]
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %143

81:                                               ; preds = %78
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #10
  br label %143

82:                                               ; preds = %1
  %83 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %84 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.732"* %0)
  %85 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %84, i16** nonnull dereferenceable(8) %8) #10
  %86 = load i16*, i16** %8, align 8
  %87 = bitcast %"class.WTF::StringTypeAdapter.803"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #10
  %88 = getelementptr inbounds %"class.WTF::StringTypeAdapter.803", %"class.WTF::StringTypeAdapter.803"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 -86, i64 16, i1 false) #10
  %89 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.803"* nonnull %2, i8* %89) #10
  %90 = bitcast %"class.WTF::StringTypeAdapter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %90) #10
  %91 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0, i32 0, i32 1
  %92 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %90, i8 -86, i64 24, i1 false) #10
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %95, label %97

95:                                               ; preds = %82
  %96 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %103

97:                                               ; preds = %82
  %98 = ptrtoint %"class.WTF::StringImpl"* %93 to i64
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 1
  %102 = bitcast %"class.WTF::StringImpl"* %101 to i8*
  br label %103

103:                                              ; preds = %95, %97
  %104 = phi i8* [ null, %95 ], [ %102, %97 ]
  %105 = phi i64 [ %96, %95 ], [ %98, %97 ]
  %106 = phi i32 [ 0, %95 ], [ %100, %97 ]
  %107 = bitcast %"class.WTF::StringTypeAdapter"* %3 to i64*
  store i64 %105, i64* %107, align 8
  store i8* %104, i8** %91, align 8
  store i32 %106, i32* %92, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.803"* nonnull %2, i16* %86) #10
  %108 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0
  %109 = load i32, i32* %88, align 8
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i16, i16* %86, i64 %110
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.797"* nonnull %108, i16* %111) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %90) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #10
  %112 = icmp eq %"class.WTF::StringImpl"* %85, null
  br i1 %112, label %143, label %113

113:                                              ; preds = %103
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %130

120:                                              ; preds = %113
  %121 = zext i32 %119 to i33
  %122 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %121, i33 1) #10
  %123 = extractvalue { i33, i1 } %122, 1
  %124 = extractvalue { i33, i1 } %122, 0
  %125 = icmp slt i33 %124, 0
  %126 = or i1 %123, %125
  br i1 %126, label %127, label %128, !prof !3

127:                                              ; preds = %120
  call void @llvm.trap() #10
  unreachable

128:                                              ; preds = %120
  %129 = trunc i33 %124 to i32
  store i32 %129, i32* %118, align 4
  br label %130

130:                                              ; preds = %113, %128
  %131 = phi i32 [ %129, %128 ], [ %119, %113 ]
  %132 = ptrtoint %"class.WTF::StringImpl"* %85 to i64
  %133 = load atomic i32, i32* %114 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %139

136:                                              ; preds = %130
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 0
  %138 = add i32 %131, -1
  store i32 %138, i32* %137, align 4
  br label %139

139:                                              ; preds = %136, %130
  %140 = phi i32 [ %138, %136 ], [ %131, %130 ]
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %85) #10
  br label %143

143:                                              ; preds = %142, %139, %103, %81, %78, %42
  %144 = phi i8* [ %22, %42 ], [ %22, %78 ], [ %22, %81 ], [ %83, %103 ], [ %83, %139 ], [ %83, %142 ]
  %145 = phi i64 [ 0, %42 ], [ %71, %78 ], [ %71, %81 ], [ 0, %103 ], [ %132, %139 ], [ %132, %142 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %144) #10
  %146 = inttoptr i64 %145 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %146
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.732"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.803", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.803"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.803", %"class.WTF::StringTypeAdapter.803"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.732", %"class.WTF::StringAppend.732"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.803"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.803"* nonnull %4, i8* %13) #10
  %14 = getelementptr inbounds %"class.WTF::StringAppend.732", %"class.WTF::StringAppend.732"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0), i8* %30, i8* %31) #10
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #10
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0), i8* %45, i8* %46) #10
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #10
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  ret i32 %23
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.803"*, i8*) unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.803"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.803"*, i16*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Element"* @_ZN5blink25MakeGarbageCollectedTraitINS_7ElementEE4CallIJRKNS_17HTMLQualifiedNameEPNS_8DocumentEEEEPS1_DpOT_(%"class.blink::HTMLQualifiedName"* dereferenceable(8), %"class.blink::Document"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %4 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %8 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %7, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi i32 [ %4, %2 ], [ %8, %6 ]
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %3, i64 0, i32 19, i64 6
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, 112
  br i1 %16, label %47, label %17, !prof !3

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 112
  store i8* %20, i8** %18, align 8
  %21 = add i64 %15, -112
  store i64 %21, i64* %14, align 8
  %22 = bitcast i8* %19 to i32*
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %19, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = trunc i32 %10 to i16
  %26 = shl i16 %25, 2
  store atomic i16 %26, i16* %24 monotonic, align 2
  %27 = getelementptr inbounds i8, i8* %19, i64 6
  %28 = bitcast i8* %27 to i16*
  store i16 56, i16* %28, align 2
  %29 = ptrtoint i8* %19 to i64
  %30 = and i64 %29, -131072
  %31 = inttoptr i64 %30 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 4400
  %33 = bitcast i8* %32 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %34 = bitcast i8* %32 to i64*
  %35 = load i64, i64* %34, align 16
  %36 = sub i64 %29, %35
  %37 = lshr i64 %36, 3
  %38 = lshr i64 %36, 6
  %39 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %33, i64 0, i32 0, i32 1, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 7
  %43 = shl i32 1, %42
  %44 = trunc i32 %43 to i8
  %45 = or i8 %40, %44
  store atomic i8 %45, i8* %39 release, align 1
  %46 = getelementptr inbounds i8, i8* %19, i64 8
  br label %50

47:                                               ; preds = %9
  %48 = zext i32 %10 to i64
  %49 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 112, i64 %48) #10
  br label %50

50:                                               ; preds = %17, %47
  %51 = phi i8* [ %46, %17 ], [ %49, %47 ]
  %52 = bitcast i8* %51 to %"class.blink::Element"*
  %53 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %0, i64 0, i32 0
  %54 = load %"class.blink::Document"*, %"class.blink::Document"** %1, align 8
  tail call void @_ZN5blink7ElementC1ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"* %52, %"class.blink::QualifiedName"* dereferenceable(8) %53, %"class.blink::Document"* %54, i32 1074) #10
  %55 = getelementptr inbounds i8, i8* %51, i64 -4
  %56 = bitcast i8* %55 to i16*
  %57 = load atomic i16, i16* %56 monotonic, align 2
  %58 = or i16 %57, 1
  store atomic i16 %58, i16* %56 release, align 2
  ret %"class.blink::Element"* %52
}

declare void @_ZN5blink7ElementC1ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #10
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare zeroext i1 @_ZN5blink23ElementCannotHaveEndTagERKNS_4NodeE(%"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #1

declare %"class.blink::DocumentFragment"* @_ZNK5blink19HTMLTemplateElement7contentEv(%"class.blink::HTMLTemplateElement"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK5blink17MarkupAccumulator16NamespaceContext10PrefixListERKN3WTF12AtomicStringE: argument 0"}
!7 = distinct !{!7, !"_ZNK5blink17MarkupAccumulator16NamespaceContext10PrefixListERKN3WTF12AtomicStringE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv: argument 0"}
!10 = distinct !{!10, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv: argument 0"}
!13 = distinct !{!13, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv: argument 0"}
!16 = distinct !{!16, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv: argument 0"}
!19 = distinct !{!19, !"_ZN3WTF22KeyValuePairHashTraitsINS_10HashTraitsINS_12AtomicStringEEENS1_INS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEE10EmptyValueEv"}
