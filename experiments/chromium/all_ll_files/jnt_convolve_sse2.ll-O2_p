; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/jnt_convolve_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/jnt_convolve_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_x_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = lshr i16 %15, 1
  %17 = zext i16 %16 to i64
  %18 = sub nsw i64 1, %17
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = sub nsw i32 7, %21
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 1, %25
  %27 = ashr i32 %26, 1
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %25, i32 0
  %31 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %34 = load i32, i32* %33, align 4
  %35 = trunc i32 %32 to i16
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = trunc i32 %34 to i16
  %39 = insertelement <8 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i16> %37, <8 x i16> %40, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %42 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %45 = load i32, i32* %44, align 4
  %46 = sub nsw i32 22, %25
  %47 = sub i32 %46, %21
  %48 = shl i32 1, %47
  %49 = add nsw i32 %47, -1
  %50 = shl i32 1, %49
  %51 = add nsw i32 %50, %48
  %52 = trunc i32 %51 to i16
  %53 = insertelement <8 x i16> undef, i16 %52, i32 0
  %54 = shufflevector <8 x i16> %53, <8 x i16> undef, <8 x i32> zeroinitializer
  %55 = sub nsw i32 14, %25
  %56 = sub i32 %55, %21
  %57 = shl i32 1, %56
  %58 = lshr i32 %57, 1
  %59 = trunc i32 %58 to i16
  %60 = insertelement <8 x i16> undef, i16 %59, i32 0
  %61 = and i32 %7, 15
  %62 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = zext i16 %15 to i32
  %65 = mul nuw nsw i32 %61, %64
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %63, i64 %66
  %68 = bitcast i16* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 1
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> zeroinitializer
  %71 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %72 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %73 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %74 = icmp eq i32 %4, 4
  %75 = bitcast <4 x i32> %70 to <8 x i16>
  %76 = bitcast <4 x i32> %71 to <8 x i16>
  %77 = bitcast <4 x i32> %72 to <8 x i16>
  %78 = bitcast <4 x i32> %73 to <8 x i16>
  %79 = icmp eq i32 %43, 0
  %80 = icmp eq i32 %45, 0
  %81 = sub <8 x i16> %60, %53
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %74, label %89, label %83

83:                                               ; preds = %9
  %84 = sext i32 %4 to i64
  %85 = sext i32 %5 to i64
  %86 = sext i32 %1 to i64
  %87 = sext i32 %13 to i64
  %88 = sext i32 %3 to i64
  br label %160

89:                                               ; preds = %9
  %90 = sext i32 %1 to i64
  %91 = sext i32 %13 to i64
  %92 = sext i32 %3 to i64
  br label %93

93:                                               ; preds = %89, %154
  %94 = phi i8* [ %155, %154 ], [ %19, %89 ]
  %95 = phi i16* [ %156, %154 ], [ %11, %89 ]
  %96 = phi i32 [ %158, %154 ], [ %5, %89 ]
  %97 = phi i8* [ %157, %154 ], [ %2, %89 ]
  %98 = bitcast i8* %94 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 1
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = shufflevector <16 x i8> %99, <16 x i8> %100, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = shufflevector <16 x i8> %102, <16 x i8> %103, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = shufflevector <16 x i8> %105, <16 x i8> %106, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = shufflevector <16 x i8> %108, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = shufflevector <16 x i8> %104, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = shufflevector <16 x i8> %110, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = bitcast <16 x i8> %111 to <8 x i16>
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> %75) #3
  %117 = bitcast <16 x i8> %112 to <8 x i16>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %76) #3
  %119 = bitcast <16 x i8> %113 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %77) #3
  %121 = bitcast <16 x i8> %114 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %78) #3
  %123 = add <4 x i32> %116, %29
  %124 = add <4 x i32> %123, %118
  %125 = add <4 x i32> %124, %120
  %126 = add <4 x i32> %125, %122
  %127 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %126, <4 x i32> %30) #3
  %128 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %127, <4 x i32> %23) #3
  %129 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %128, <4 x i32> %128) #3
  %130 = add <8 x i16> %129, %54
  %131 = bitcast i16* %95 to <8 x i16>*
  br i1 %79, label %153, label %132

132:                                              ; preds = %93
  %133 = load <8 x i16>, <8 x i16>* %131, align 1
  br i1 %80, label %142, label %134

134:                                              ; preds = %132
  %135 = shufflevector <8 x i16> %133, <8 x i16> %130, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %136 = shufflevector <8 x i16> %133, <8 x i16> %130, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> %41) #3
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %41) #3
  %139 = ashr <4 x i32> %137, <i32 4, i32 4, i32 4, i32 4>
  %140 = ashr <4 x i32> %138, <i32 4, i32 4, i32 4, i32 4>
  %141 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %139, <4 x i32> %140) #3
  br label %145

142:                                              ; preds = %132
  %143 = add <8 x i16> %133, %130
  %144 = ashr <8 x i16> %143, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %145

145:                                              ; preds = %134, %142
  %146 = phi <8 x i16> [ %141, %134 ], [ %144, %142 ]
  %147 = add <8 x i16> %82, %146
  %148 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %147, i32 %56) #3
  %149 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %148, <8 x i16> undef) #3
  %150 = bitcast <16 x i8> %149 to <4 x i32>
  %151 = extractelement <4 x i32> %150, i32 0
  %152 = bitcast i8* %97 to i32*
  store i32 %151, i32* %152, align 4
  br label %154

153:                                              ; preds = %93
  store <8 x i16> %130, <8 x i16>* %131, align 16
  br label %154

154:                                              ; preds = %153, %145
  %155 = getelementptr inbounds i8, i8* %94, i64 %90
  %156 = getelementptr inbounds i16, i16* %95, i64 %91
  %157 = getelementptr inbounds i8, i8* %97, i64 %92
  %158 = add nsw i32 %96, -1
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %251, label %93

160:                                              ; preds = %83, %248
  %161 = phi i64 [ 0, %83 ], [ %249, %248 ]
  %162 = mul nsw i64 %161, %86
  %163 = mul nsw i64 %161, %87
  %164 = mul nsw i64 %161, %88
  br label %165

165:                                              ; preds = %245, %160
  %166 = phi i64 [ %246, %245 ], [ 0, %160 ]
  %167 = add nsw i64 %166, %162
  %168 = getelementptr inbounds i8, i8* %19, i64 %167
  %169 = bitcast i8* %168 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 1
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %173 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = shufflevector <16 x i8> %171, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %176 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %177 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %178 = bitcast <16 x i8> %174 to <8 x i16>
  %179 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %178, <8 x i16> %75) #3
  %180 = bitcast <16 x i8> %175 to <8 x i16>
  %181 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %180, <8 x i16> %76) #3
  %182 = bitcast <16 x i8> %176 to <8 x i16>
  %183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %182, <8 x i16> %77) #3
  %184 = bitcast <16 x i8> %177 to <8 x i16>
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> %78) #3
  %186 = add <4 x i32> %181, %179
  %187 = add <4 x i32> %186, %183
  %188 = add <4 x i32> %187, %185
  %189 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %190 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = shufflevector <16 x i8> %190, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %195 = shufflevector <16 x i8> %191, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %196 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %197 = bitcast <16 x i8> %193 to <8 x i16>
  %198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %197, <8 x i16> %75) #3
  %199 = bitcast <16 x i8> %194 to <8 x i16>
  %200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %199, <8 x i16> %76) #3
  %201 = bitcast <16 x i8> %195 to <8 x i16>
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %201, <8 x i16> %77) #3
  %203 = bitcast <16 x i8> %196 to <8 x i16>
  %204 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %203, <8 x i16> %78) #3
  %205 = add <4 x i32> %200, %198
  %206 = add <4 x i32> %205, %202
  %207 = add <4 x i32> %206, %204
  %208 = shufflevector <4 x i32> %188, <4 x i32> %207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %209 = shufflevector <4 x i32> %188, <4 x i32> %207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %210 = add <4 x i32> %208, %29
  %211 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %210, <4 x i32> %30) #3
  %212 = add <4 x i32> %209, %29
  %213 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %212, <4 x i32> %30) #3
  %214 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %211, <4 x i32> %23) #3
  %215 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %213, <4 x i32> %23) #3
  %216 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %214, <4 x i32> %215) #3
  %217 = add <8 x i16> %216, %54
  %218 = add nsw i64 %166, %163
  %219 = getelementptr inbounds i16, i16* %11, i64 %218
  %220 = bitcast i16* %219 to <8 x i16>*
  br i1 %79, label %244, label %221

221:                                              ; preds = %165
  %222 = load <8 x i16>, <8 x i16>* %220, align 1
  br i1 %80, label %231, label %223

223:                                              ; preds = %221
  %224 = shufflevector <8 x i16> %222, <8 x i16> %217, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %225 = shufflevector <8 x i16> %222, <8 x i16> %217, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %226 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %224, <8 x i16> %41) #3
  %227 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %225, <8 x i16> %41) #3
  %228 = ashr <4 x i32> %226, <i32 4, i32 4, i32 4, i32 4>
  %229 = ashr <4 x i32> %227, <i32 4, i32 4, i32 4, i32 4>
  %230 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %228, <4 x i32> %229) #3
  br label %234

231:                                              ; preds = %221
  %232 = add <8 x i16> %222, %217
  %233 = ashr <8 x i16> %232, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %234

234:                                              ; preds = %223, %231
  %235 = phi <8 x i16> [ %230, %223 ], [ %233, %231 ]
  %236 = add <8 x i16> %82, %235
  %237 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %236, i32 %56) #3
  %238 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %237, <8 x i16> undef) #3
  %239 = bitcast <16 x i8> %238 to <2 x i64>
  %240 = add nsw i64 %166, %164
  %241 = getelementptr inbounds i8, i8* %2, i64 %240
  %242 = extractelement <2 x i64> %239, i32 0
  %243 = bitcast i8* %241 to i64*
  store i64 %242, i64* %243, align 1
  br label %245

244:                                              ; preds = %165
  store <8 x i16> %217, <8 x i16>* %220, align 16
  br label %245

245:                                              ; preds = %244, %234
  %246 = add nuw nsw i64 %166, 8
  %247 = icmp slt i64 %246, %84
  br i1 %247, label %165, label %248

248:                                              ; preds = %245
  %249 = add nuw nsw i64 %161, 1
  %250 = icmp slt i64 %249, %85
  br i1 %250, label %160, label %251

251:                                              ; preds = %248, %154
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_y_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = lshr i16 %15, 1
  %17 = zext i16 %16 to i32
  %18 = add nsw i32 %17, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = sub nsw i64 0, %20
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = sub nsw i32 7, %24
  %26 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %25, i32 0
  %27 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %28 = load i32, i32* %27, align 8
  %29 = trunc i32 %28 to i16
  %30 = insertelement <8 x i16> undef, i16 %29, i32 0
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i16
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = shufflevector <8 x i16> %31, <8 x i16> %36, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %41 = load i32, i32* %40, align 4
  %42 = sub nsw i32 22, %24
  %43 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %44 = load i32, i32* %43, align 8
  %45 = sub i32 %42, %44
  %46 = shl i32 1, %45
  %47 = add nsw i32 %45, -1
  %48 = shl i32 1, %47
  %49 = add nsw i32 %48, %46
  %50 = trunc i32 %49 to i16
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> zeroinitializer
  %53 = sub nsw i32 14, %24
  %54 = sub i32 %53, %44
  %55 = shl i32 1, %54
  %56 = lshr i32 %55, 1
  %57 = trunc i32 %56 to i16
  %58 = insertelement <8 x i16> undef, i16 %57, i32 0
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <8 x i32> zeroinitializer
  %60 = shl i32 1, %44
  %61 = ashr i32 %60, 1
  %62 = insertelement <4 x i32> undef, i32 %61, i32 0
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> zeroinitializer
  %64 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %44, i32 0
  %65 = and i32 %7, 15
  %66 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %67 = load i16*, i16** %66, align 8
  %68 = zext i16 %15 to i32
  %69 = mul nuw nsw i32 %65, %68
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %67, i64 %70
  %72 = bitcast i16* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 1
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %76 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %77 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %78 = icmp eq i32 %4, 4
  %79 = mul nsw i32 %1, 6
  %80 = sext i32 %79 to i64
  br i1 %78, label %106, label %81

81:                                               ; preds = %9
  %82 = sext i32 %1 to i64
  %83 = shl nsw i32 %1, 1
  %84 = sext i32 %83 to i64
  %85 = mul nsw i32 %1, 3
  %86 = sext i32 %85 to i64
  %87 = shl nsw i32 %1, 2
  %88 = sext i32 %87 to i64
  %89 = mul nsw i32 %1, 5
  %90 = sext i32 %89 to i64
  %91 = mul nsw i32 %1, 7
  %92 = sext i32 %91 to i64
  %93 = shl nsw i32 %1, 3
  %94 = sext i32 %93 to i64
  %95 = bitcast <4 x i32> %74 to <8 x i16>
  %96 = bitcast <4 x i32> %75 to <8 x i16>
  %97 = bitcast <4 x i32> %76 to <8 x i16>
  %98 = bitcast <4 x i32> %77 to <8 x i16>
  %99 = icmp ne i32 %39, 0
  %100 = icmp eq i32 %41, 0
  %101 = sub <8 x i16> %59, %52
  %102 = sext i32 %5 to i64
  %103 = sext i32 %13 to i64
  %104 = sext i32 %3 to i64
  %105 = sext i32 %4 to i64
  br label %290

106:                                              ; preds = %9
  %107 = getelementptr inbounds i8, i8* %22, i64 %80
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %109, i32 0
  %111 = bitcast i8* %22 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %112, i32 0
  %114 = sext i32 %1 to i64
  %115 = getelementptr inbounds i8, i8* %22, i64 %114
  %116 = bitcast i8* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %117, i32 0
  %119 = bitcast <4 x i32> %113 to <16 x i8>
  %120 = bitcast <4 x i32> %118 to <16 x i8>
  %121 = shufflevector <16 x i8> %119, <16 x i8> %120, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = shl nsw i32 %1, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %22, i64 %123
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %126, i32 0
  %128 = bitcast <4 x i32> %127 to <16 x i8>
  %129 = shufflevector <16 x i8> %120, <16 x i8> %128, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = mul nsw i32 %1, 3
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %22, i64 %131
  %133 = bitcast i8* %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %134, i32 0
  %136 = bitcast <4 x i32> %135 to <16 x i8>
  %137 = shufflevector <16 x i8> %128, <16 x i8> %136, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = shl nsw i32 %1, 2
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %22, i64 %139
  %141 = bitcast i8* %140 to i32*
  %142 = load i32, i32* %141, align 4
  %143 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %142, i32 0
  %144 = bitcast <4 x i32> %143 to <16 x i8>
  %145 = shufflevector <16 x i8> %136, <16 x i8> %144, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %146 = mul nsw i32 %1, 5
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %22, i64 %147
  %149 = bitcast i8* %148 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %150, i32 0
  %152 = bitcast <4 x i32> %151 to <16 x i8>
  %153 = shufflevector <16 x i8> %144, <16 x i8> %152, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %154 = bitcast <4 x i32> %110 to <16 x i8>
  %155 = shufflevector <16 x i8> %152, <16 x i8> %154, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = mul nsw i32 %1, 7
  %157 = sext i32 %156 to i64
  %158 = shl nsw i32 %1, 3
  %159 = sext i32 %158 to i64
  %160 = bitcast <4 x i32> %74 to <8 x i16>
  %161 = bitcast <4 x i32> %75 to <8 x i16>
  %162 = bitcast <4 x i32> %76 to <8 x i16>
  %163 = bitcast <4 x i32> %77 to <8 x i16>
  %164 = icmp ne i32 %39, 0
  %165 = icmp eq i32 %41, 0
  %166 = sub <8 x i16> %59, %52
  %167 = sext i32 %13 to i64
  %168 = sext i32 %3 to i64
  br label %169

169:                                              ; preds = %284, %106
  %170 = phi <16 x i8> [ %155, %106 ], [ %193, %284 ]
  %171 = phi <16 x i8> [ %153, %106 ], [ %187, %284 ]
  %172 = phi <16 x i8> [ %145, %106 ], [ %170, %284 ]
  %173 = phi <16 x i8> [ %137, %106 ], [ %171, %284 ]
  %174 = phi <16 x i8> [ %129, %106 ], [ %172, %284 ]
  %175 = phi <16 x i8> [ %121, %106 ], [ %173, %284 ]
  %176 = phi <4 x i32> [ %110, %106 ], [ %191, %284 ]
  %177 = phi i8* [ %22, %106 ], [ %285, %284 ]
  %178 = phi i16* [ %11, %106 ], [ %286, %284 ]
  %179 = phi i32 [ %5, %106 ], [ %288, %284 ]
  %180 = phi i8* [ %2, %106 ], [ %287, %284 ]
  %181 = getelementptr inbounds i8, i8* %177, i64 %157
  %182 = bitcast i8* %181 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %183, i32 0
  %185 = bitcast <4 x i32> %176 to <16 x i8>
  %186 = bitcast <4 x i32> %184 to <16 x i8>
  %187 = shufflevector <16 x i8> %185, <16 x i8> %186, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %188 = getelementptr inbounds i8, i8* %177, i64 %159
  %189 = bitcast i8* %188 to i32*
  %190 = load i32, i32* %189, align 4
  %191 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %190, i32 0
  %192 = bitcast <4 x i32> %191 to <16 x i8>
  %193 = shufflevector <16 x i8> %186, <16 x i8> %192, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = shufflevector <16 x i8> %175, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %195 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %196 = shufflevector <16 x i8> %171, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %197 = shufflevector <16 x i8> %187, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %198 = bitcast <16 x i8> %194 to <8 x i16>
  %199 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> %160) #3
  %200 = bitcast <16 x i8> %195 to <8 x i16>
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %200, <8 x i16> %161) #3
  %202 = bitcast <16 x i8> %196 to <8 x i16>
  %203 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %202, <8 x i16> %162) #3
  %204 = bitcast <16 x i8> %197 to <8 x i16>
  %205 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %204, <8 x i16> %163) #3
  %206 = add <4 x i32> %201, %199
  %207 = add <4 x i32> %206, %203
  %208 = add <4 x i32> %207, %205
  %209 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %208, <4 x i32> %26) #3
  %210 = add <4 x i32> %209, %63
  %211 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %210, <4 x i32> %64) #3
  %212 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %211, <4 x i32> %211) #3
  %213 = add <8 x i16> %212, %52
  %214 = bitcast i16* %178 to <8 x i16>*
  br i1 %164, label %215, label %236

215:                                              ; preds = %169
  %216 = load <8 x i16>, <8 x i16>* %214, align 1
  br i1 %165, label %225, label %217

217:                                              ; preds = %215
  %218 = shufflevector <8 x i16> %216, <8 x i16> %213, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %219 = shufflevector <8 x i16> %216, <8 x i16> %213, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %220 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %218, <8 x i16> %37) #3
  %221 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %219, <8 x i16> %37) #3
  %222 = ashr <4 x i32> %220, <i32 4, i32 4, i32 4, i32 4>
  %223 = ashr <4 x i32> %221, <i32 4, i32 4, i32 4, i32 4>
  %224 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %222, <4 x i32> %223) #3
  br label %228

225:                                              ; preds = %215
  %226 = add <8 x i16> %216, %213
  %227 = ashr <8 x i16> %226, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %228

228:                                              ; preds = %217, %225
  %229 = phi <8 x i16> [ %224, %217 ], [ %227, %225 ]
  %230 = add <8 x i16> %166, %229
  %231 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %230, i32 %54) #3
  %232 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> undef) #3
  %233 = bitcast <16 x i8> %232 to <4 x i32>
  %234 = extractelement <4 x i32> %233, i32 0
  %235 = bitcast i8* %180 to i32*
  store i32 %234, i32* %235, align 4
  br label %237

236:                                              ; preds = %169
  store <8 x i16> %213, <8 x i16>* %214, align 16
  br label %237

237:                                              ; preds = %236, %228
  %238 = getelementptr inbounds i8, i8* %177, i64 %114
  %239 = getelementptr inbounds i16, i16* %178, i64 %167
  %240 = getelementptr inbounds i8, i8* %180, i64 %168
  %241 = shufflevector <16 x i8> %174, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %242 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %243 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %244 = shufflevector <16 x i8> %193, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %245 = bitcast <16 x i8> %241 to <8 x i16>
  %246 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %245, <8 x i16> %160) #3
  %247 = bitcast <16 x i8> %242 to <8 x i16>
  %248 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %247, <8 x i16> %161) #3
  %249 = bitcast <16 x i8> %243 to <8 x i16>
  %250 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %249, <8 x i16> %162) #3
  %251 = bitcast <16 x i8> %244 to <8 x i16>
  %252 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %163) #3
  %253 = add <4 x i32> %248, %246
  %254 = add <4 x i32> %253, %250
  %255 = add <4 x i32> %254, %252
  %256 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %255, <4 x i32> %26) #3
  %257 = add <4 x i32> %256, %63
  %258 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %257, <4 x i32> %64) #3
  %259 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %258, <4 x i32> %258) #3
  %260 = add <8 x i16> %259, %52
  %261 = bitcast i16* %239 to <8 x i16>*
  br i1 %164, label %262, label %283

262:                                              ; preds = %237
  %263 = load <8 x i16>, <8 x i16>* %261, align 1
  br i1 %165, label %272, label %264

264:                                              ; preds = %262
  %265 = shufflevector <8 x i16> %263, <8 x i16> %260, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %266 = shufflevector <8 x i16> %263, <8 x i16> %260, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %267 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %265, <8 x i16> %37) #3
  %268 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %266, <8 x i16> %37) #3
  %269 = ashr <4 x i32> %267, <i32 4, i32 4, i32 4, i32 4>
  %270 = ashr <4 x i32> %268, <i32 4, i32 4, i32 4, i32 4>
  %271 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %269, <4 x i32> %270) #3
  br label %275

272:                                              ; preds = %262
  %273 = add <8 x i16> %263, %260
  %274 = ashr <8 x i16> %273, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %275

275:                                              ; preds = %264, %272
  %276 = phi <8 x i16> [ %271, %264 ], [ %274, %272 ]
  %277 = add <8 x i16> %166, %276
  %278 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %277, i32 %54) #3
  %279 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %278, <8 x i16> undef) #3
  %280 = bitcast <16 x i8> %279 to <4 x i32>
  %281 = extractelement <4 x i32> %280, i32 0
  %282 = bitcast i8* %240 to i32*
  store i32 %281, i32* %282, align 4
  br label %284

283:                                              ; preds = %237
  store <8 x i16> %260, <8 x i16>* %261, align 16
  br label %284

284:                                              ; preds = %283, %275
  %285 = getelementptr inbounds i8, i8* %238, i64 %114
  %286 = getelementptr inbounds i16, i16* %239, i64 %167
  %287 = getelementptr inbounds i8, i8* %240, i64 %168
  %288 = add nsw i32 %179, -2
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %500, label %169

290:                                              ; preds = %81, %497
  %291 = phi i64 [ 0, %81 ], [ %498, %497 ]
  %292 = getelementptr inbounds i8, i8* %22, i64 %291
  %293 = getelementptr inbounds i8, i8* %292, i64 %80
  %294 = bitcast i8* %293 to i64*
  %295 = load i64, i64* %294, align 1
  %296 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %295, i32 0
  %297 = bitcast i8* %292 to i64*
  %298 = load i64, i64* %297, align 1
  %299 = insertelement <2 x i64> undef, i64 %298, i32 0
  %300 = getelementptr inbounds i8, i8* %292, i64 %82
  %301 = bitcast i8* %300 to i64*
  %302 = load i64, i64* %301, align 1
  %303 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %302, i32 0
  %304 = bitcast <2 x i64> %299 to <16 x i8>
  %305 = bitcast <2 x i64> %303 to <16 x i8>
  %306 = shufflevector <16 x i8> %304, <16 x i8> %305, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %307 = getelementptr inbounds i8, i8* %292, i64 %84
  %308 = bitcast i8* %307 to i64*
  %309 = load i64, i64* %308, align 1
  %310 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %309, i32 0
  %311 = bitcast <2 x i64> %310 to <16 x i8>
  %312 = shufflevector <16 x i8> %305, <16 x i8> %311, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %313 = getelementptr inbounds i8, i8* %292, i64 %86
  %314 = bitcast i8* %313 to i64*
  %315 = load i64, i64* %314, align 1
  %316 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %315, i32 0
  %317 = bitcast <2 x i64> %316 to <16 x i8>
  %318 = shufflevector <16 x i8> %311, <16 x i8> %317, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %319 = getelementptr inbounds i8, i8* %292, i64 %88
  %320 = bitcast i8* %319 to i64*
  %321 = load i64, i64* %320, align 1
  %322 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %321, i32 0
  %323 = bitcast <2 x i64> %322 to <16 x i8>
  %324 = shufflevector <16 x i8> %317, <16 x i8> %323, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %325 = getelementptr inbounds i8, i8* %292, i64 %90
  %326 = bitcast i8* %325 to i64*
  %327 = load i64, i64* %326, align 1
  %328 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %327, i32 0
  %329 = bitcast <2 x i64> %328 to <16 x i8>
  %330 = shufflevector <16 x i8> %323, <16 x i8> %329, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %331 = bitcast <2 x i64> %296 to <16 x i8>
  %332 = shufflevector <16 x i8> %329, <16 x i8> %331, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %333

333:                                              ; preds = %494, %290
  %334 = phi i64 [ %495, %494 ], [ 0, %290 ]
  %335 = phi <16 x i8> [ %357, %494 ], [ %332, %290 ]
  %336 = phi <16 x i8> [ %351, %494 ], [ %330, %290 ]
  %337 = phi <16 x i8> [ %335, %494 ], [ %324, %290 ]
  %338 = phi <16 x i8> [ %336, %494 ], [ %318, %290 ]
  %339 = phi <16 x i8> [ %337, %494 ], [ %312, %290 ]
  %340 = phi <16 x i8> [ %338, %494 ], [ %306, %290 ]
  %341 = phi <2 x i64> [ %355, %494 ], [ %296, %290 ]
  %342 = mul nsw i64 %334, %82
  %343 = add nsw i64 %342, %291
  %344 = getelementptr inbounds i8, i8* %22, i64 %343
  %345 = getelementptr inbounds i8, i8* %344, i64 %92
  %346 = bitcast i8* %345 to i64*
  %347 = load i64, i64* %346, align 1
  %348 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %347, i32 0
  %349 = bitcast <2 x i64> %341 to <16 x i8>
  %350 = bitcast <2 x i64> %348 to <16 x i8>
  %351 = shufflevector <16 x i8> %349, <16 x i8> %350, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %352 = getelementptr inbounds i8, i8* %344, i64 %94
  %353 = bitcast i8* %352 to i64*
  %354 = load i64, i64* %353, align 1
  %355 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %354, i32 0
  %356 = bitcast <2 x i64> %355 to <16 x i8>
  %357 = shufflevector <16 x i8> %350, <16 x i8> %356, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %358 = shufflevector <16 x i8> %340, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %359 = shufflevector <16 x i8> %338, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %360 = shufflevector <16 x i8> %336, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %361 = shufflevector <16 x i8> %351, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %362 = bitcast <16 x i8> %358 to <8 x i16>
  %363 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %362, <8 x i16> %95) #3
  %364 = bitcast <16 x i8> %359 to <8 x i16>
  %365 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %364, <8 x i16> %96) #3
  %366 = bitcast <16 x i8> %360 to <8 x i16>
  %367 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %366, <8 x i16> %97) #3
  %368 = bitcast <16 x i8> %361 to <8 x i16>
  %369 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %368, <8 x i16> %98) #3
  %370 = add <4 x i32> %365, %363
  %371 = add <4 x i32> %370, %367
  %372 = add <4 x i32> %371, %369
  %373 = shufflevector <16 x i8> %340, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %374 = shufflevector <16 x i8> %338, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %375 = shufflevector <16 x i8> %336, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %376 = shufflevector <16 x i8> %351, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %377 = bitcast <16 x i8> %373 to <8 x i16>
  %378 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %377, <8 x i16> %95) #3
  %379 = bitcast <16 x i8> %374 to <8 x i16>
  %380 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %379, <8 x i16> %96) #3
  %381 = bitcast <16 x i8> %375 to <8 x i16>
  %382 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %381, <8 x i16> %97) #3
  %383 = bitcast <16 x i8> %376 to <8 x i16>
  %384 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %383, <8 x i16> %98) #3
  %385 = add <4 x i32> %380, %378
  %386 = add <4 x i32> %385, %382
  %387 = add <4 x i32> %386, %384
  %388 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %372, <4 x i32> %26) #3
  %389 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %387, <4 x i32> %26) #3
  %390 = add <4 x i32> %388, %63
  %391 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %390, <4 x i32> %64) #3
  %392 = add <4 x i32> %389, %63
  %393 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %392, <4 x i32> %64) #3
  %394 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %391, <4 x i32> %393) #3
  %395 = add <8 x i16> %394, %52
  %396 = mul nsw i64 %334, %103
  %397 = add nsw i64 %396, %291
  %398 = getelementptr inbounds i16, i16* %11, i64 %397
  %399 = bitcast i16* %398 to <8 x i16>*
  br i1 %99, label %400, label %424

400:                                              ; preds = %333
  %401 = load <8 x i16>, <8 x i16>* %399, align 1
  br i1 %100, label %410, label %402

402:                                              ; preds = %400
  %403 = shufflevector <8 x i16> %401, <8 x i16> %395, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %404 = shufflevector <8 x i16> %401, <8 x i16> %395, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %405 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %403, <8 x i16> %37) #3
  %406 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %404, <8 x i16> %37) #3
  %407 = ashr <4 x i32> %405, <i32 4, i32 4, i32 4, i32 4>
  %408 = ashr <4 x i32> %406, <i32 4, i32 4, i32 4, i32 4>
  %409 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %407, <4 x i32> %408) #3
  br label %413

410:                                              ; preds = %400
  %411 = add <8 x i16> %401, %395
  %412 = ashr <8 x i16> %411, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %413

413:                                              ; preds = %402, %410
  %414 = phi <8 x i16> [ %409, %402 ], [ %412, %410 ]
  %415 = add <8 x i16> %101, %414
  %416 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %415, i32 %54) #3
  %417 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %416, <8 x i16> undef) #3
  %418 = bitcast <16 x i8> %417 to <2 x i64>
  %419 = mul nsw i64 %334, %104
  %420 = add nsw i64 %419, %291
  %421 = getelementptr inbounds i8, i8* %2, i64 %420
  %422 = extractelement <2 x i64> %418, i32 0
  %423 = bitcast i8* %421 to i64*
  store i64 %422, i64* %423, align 1
  br label %425

424:                                              ; preds = %333
  store <8 x i16> %395, <8 x i16>* %399, align 16
  br label %425

425:                                              ; preds = %424, %413
  %426 = or i64 %334, 1
  %427 = shufflevector <16 x i8> %339, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %428 = shufflevector <16 x i8> %337, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %429 = shufflevector <16 x i8> %335, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %430 = shufflevector <16 x i8> %357, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %431 = bitcast <16 x i8> %427 to <8 x i16>
  %432 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %431, <8 x i16> %95) #3
  %433 = bitcast <16 x i8> %428 to <8 x i16>
  %434 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %433, <8 x i16> %96) #3
  %435 = bitcast <16 x i8> %429 to <8 x i16>
  %436 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %435, <8 x i16> %97) #3
  %437 = bitcast <16 x i8> %430 to <8 x i16>
  %438 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %437, <8 x i16> %98) #3
  %439 = add <4 x i32> %434, %432
  %440 = add <4 x i32> %439, %436
  %441 = add <4 x i32> %440, %438
  %442 = shufflevector <16 x i8> %339, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %443 = shufflevector <16 x i8> %337, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %444 = shufflevector <16 x i8> %335, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %445 = shufflevector <16 x i8> %357, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %446 = bitcast <16 x i8> %442 to <8 x i16>
  %447 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %446, <8 x i16> %95) #3
  %448 = bitcast <16 x i8> %443 to <8 x i16>
  %449 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %448, <8 x i16> %96) #3
  %450 = bitcast <16 x i8> %444 to <8 x i16>
  %451 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %450, <8 x i16> %97) #3
  %452 = bitcast <16 x i8> %445 to <8 x i16>
  %453 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %452, <8 x i16> %98) #3
  %454 = add <4 x i32> %449, %447
  %455 = add <4 x i32> %454, %451
  %456 = add <4 x i32> %455, %453
  %457 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %441, <4 x i32> %26) #3
  %458 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %456, <4 x i32> %26) #3
  %459 = add <4 x i32> %457, %63
  %460 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %459, <4 x i32> %64) #3
  %461 = add <4 x i32> %458, %63
  %462 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %461, <4 x i32> %64) #3
  %463 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %460, <4 x i32> %462) #3
  %464 = add <8 x i16> %463, %52
  %465 = mul nsw i64 %426, %103
  %466 = add nsw i64 %465, %291
  %467 = getelementptr inbounds i16, i16* %11, i64 %466
  %468 = bitcast i16* %467 to <8 x i16>*
  br i1 %99, label %469, label %493

469:                                              ; preds = %425
  %470 = load <8 x i16>, <8 x i16>* %468, align 1
  br i1 %100, label %479, label %471

471:                                              ; preds = %469
  %472 = shufflevector <8 x i16> %470, <8 x i16> %464, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %473 = shufflevector <8 x i16> %470, <8 x i16> %464, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %474 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %472, <8 x i16> %37) #3
  %475 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %473, <8 x i16> %37) #3
  %476 = ashr <4 x i32> %474, <i32 4, i32 4, i32 4, i32 4>
  %477 = ashr <4 x i32> %475, <i32 4, i32 4, i32 4, i32 4>
  %478 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %476, <4 x i32> %477) #3
  br label %482

479:                                              ; preds = %469
  %480 = add <8 x i16> %470, %464
  %481 = ashr <8 x i16> %480, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %482

482:                                              ; preds = %471, %479
  %483 = phi <8 x i16> [ %478, %471 ], [ %481, %479 ]
  %484 = add <8 x i16> %101, %483
  %485 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %484, i32 %54) #3
  %486 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %485, <8 x i16> undef) #3
  %487 = bitcast <16 x i8> %486 to <2 x i64>
  %488 = mul nsw i64 %426, %104
  %489 = add nsw i64 %488, %291
  %490 = getelementptr inbounds i8, i8* %2, i64 %489
  %491 = extractelement <2 x i64> %487, i32 0
  %492 = bitcast i8* %490 to i64*
  store i64 %491, i64* %492, align 1
  br label %494

493:                                              ; preds = %425
  store <8 x i16> %464, <8 x i16>* %468, align 16
  br label %494

494:                                              ; preds = %493, %482
  %495 = add nuw nsw i64 %334, 2
  %496 = icmp slt i64 %495, %102
  br i1 %496, label %333, label %497

497:                                              ; preds = %494
  %498 = add nuw nsw i64 %291, 8
  %499 = icmp slt i64 %498, %105
  br i1 %499, label %290, label %500

500:                                              ; preds = %497, %284
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_2d_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [17792 x i16], align 16
  %13 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 1
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = bitcast [17792 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 35584, i8* nonnull %17) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 35584, i1 false)
  %18 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = add i32 %5, -1
  %22 = add i32 %21, %20
  %23 = lshr i32 %20, 1
  %24 = add nsw i32 %23, -1
  %25 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = lshr i16 %26, 1
  %28 = zext i16 %27 to i64
  %29 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 7
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %24, %1
  %34 = sext i32 %33 to i64
  %35 = sub nsw i64 0, %34
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = sub nsw i64 1, %28
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  %39 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 8
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 9
  %42 = load i32, i32* %41, align 4
  %43 = trunc i32 %40 to i16
  %44 = insertelement <8 x i16> undef, i16 %43, i32 0
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = trunc i32 %42 to i16
  %47 = insertelement <8 x i16> undef, i16 %46, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = sub nsw i32 22, %51
  %53 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  %55 = sub i32 %52, %54
  %56 = shl i32 1, %55
  %57 = add nsw i32 %55, -1
  %58 = shl i32 1, %57
  %59 = add nsw i32 %58, %56
  %60 = trunc i32 %59 to i16
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = sub nsw i32 14, %51
  %64 = sub i32 %63, %54
  %65 = shl i32 1, %64
  %66 = lshr i32 %65, 1
  %67 = trunc i32 %66 to i16
  %68 = insertelement <8 x i16> undef, i16 %67, i32 0
  %69 = and i32 %8, 15
  %70 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %71 = load i16*, i16** %70, align 8
  %72 = zext i16 %26 to i32
  %73 = mul nuw nsw i32 %69, %72
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i16, i16* %71, i64 %74
  %76 = bitcast i16* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 1
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shl i32 1, %51
  %83 = ashr i32 %82, 1
  %84 = add nsw i32 %83, 16384
  %85 = insertelement <4 x i32> undef, i32 %84, i32 0
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> zeroinitializer
  %87 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %51, i32 0
  %88 = icmp sgt i32 %22, 0
  br i1 %88, label %89, label %172

89:                                               ; preds = %11
  %90 = shufflevector <2 x i64> %81, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %91 = shufflevector <2 x i64> %81, <2 x i64> undef, <2 x i32> zeroinitializer
  %92 = shufflevector <2 x i64> %79, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %93 = shufflevector <2 x i64> %79, <2 x i64> undef, <2 x i32> zeroinitializer
  %94 = icmp sgt i32 %4, 0
  %95 = bitcast <2 x i64> %93 to <8 x i16>
  %96 = bitcast <2 x i64> %92 to <8 x i16>
  %97 = bitcast <2 x i64> %91 to <8 x i16>
  %98 = bitcast <2 x i64> %90 to <8 x i16>
  %99 = sext i32 %4 to i64
  %100 = sext i32 %1 to i64
  %101 = zext i32 %22 to i64
  br label %102

102:                                              ; preds = %169, %89
  %103 = phi i64 [ 0, %89 ], [ %170, %169 ]
  br i1 %94, label %104, label %169

104:                                              ; preds = %102
  %105 = mul nsw i64 %103, %100
  %106 = shl i64 %103, 7
  %107 = and i64 %106, 4294967168
  br label %108

108:                                              ; preds = %104, %108
  %109 = phi i64 [ 0, %104 ], [ %167, %108 ]
  %110 = add nsw i64 %109, %105
  %111 = getelementptr inbounds i8, i8* %38, i64 %110
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = shufflevector <16 x i8> %113, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i8> %114 to <8 x i16>
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %95) #3
  %118 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %119 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %120 = or <16 x i8> %118, %119
  %121 = bitcast <16 x i8> %120 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %96) #3
  %123 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %124 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %125 = or <16 x i8> %123, %124
  %126 = bitcast <16 x i8> %125 to <8 x i16>
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %97) #3
  %128 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %129 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %130 = or <16 x i8> %128, %129
  %131 = bitcast <16 x i8> %130 to <8 x i16>
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %131, <8 x i16> %98) #3
  %133 = add <4 x i32> %117, %86
  %134 = add <4 x i32> %133, %122
  %135 = add <4 x i32> %134, %127
  %136 = add <4 x i32> %135, %132
  %137 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %136, <4 x i32> %87) #3
  %138 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %139 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %140 = or <16 x i8> %138, %139
  %141 = bitcast <16 x i8> %140 to <8 x i16>
  %142 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %141, <8 x i16> %95) #3
  %143 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %144 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %145 = or <16 x i8> %143, %144
  %146 = bitcast <16 x i8> %145 to <8 x i16>
  %147 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %146, <8 x i16> %96) #3
  %148 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %149 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %150 = or <16 x i8> %148, %149
  %151 = bitcast <16 x i8> %150 to <8 x i16>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> %97) #3
  %153 = shufflevector <16 x i8> %114, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %154 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0>, <16 x i8> %115, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %155 = or <16 x i8> %153, %154
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %156, <8 x i16> %98) #3
  %158 = add <4 x i32> %142, %86
  %159 = add <4 x i32> %158, %147
  %160 = add <4 x i32> %159, %152
  %161 = add <4 x i32> %160, %157
  %162 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %161, <4 x i32> %87) #3
  %163 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %137, <4 x i32> %162) #3
  %164 = add nuw nsw i64 %109, %107
  %165 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %164
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 16
  %167 = add nuw nsw i64 %109, 8
  %168 = icmp slt i64 %167, %99
  br i1 %168, label %108, label %169

169:                                              ; preds = %108, %102
  %170 = add nuw nsw i64 %103, 1
  %171 = icmp eq i64 %170, %101
  br i1 %171, label %172, label %102

172:                                              ; preds = %169, %11
  %173 = and i32 %9, 15
  %174 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %175 = load i16*, i16** %174, align 8
  %176 = mul nuw nsw i32 %173, %20
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds i16, i16* %175, i64 %177
  %179 = bitcast i16* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 1
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %184 = bitcast <4 x i32> %183 to <2 x i64>
  %185 = shl i32 1, %54
  %186 = ashr i32 %185, 1
  %187 = sub i32 21, %51
  %188 = shl i32 1, %187
  %189 = sub nsw i32 %186, %188
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %54, i32 0
  %193 = icmp sgt i32 %5, 0
  br i1 %193, label %194, label %317

194:                                              ; preds = %172
  %195 = shufflevector <2 x i64> %184, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %196 = shufflevector <2 x i64> %184, <2 x i64> undef, <2 x i32> zeroinitializer
  %197 = shufflevector <2 x i64> %182, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %198 = shufflevector <2 x i64> %182, <2 x i64> undef, <2 x i32> zeroinitializer
  %199 = icmp sgt i32 %4, 0
  %200 = bitcast <2 x i64> %198 to <8 x i16>
  %201 = bitcast <2 x i64> %197 to <8 x i16>
  %202 = bitcast <2 x i64> %196 to <8 x i16>
  %203 = bitcast <2 x i64> %195 to <8 x i16>
  %204 = icmp eq i32 %30, 0
  %205 = icmp eq i32 %32, 0
  %206 = sub <8 x i16> %68, %61
  %207 = shufflevector <8 x i16> %206, <8 x i16> undef, <8 x i32> zeroinitializer
  %208 = icmp sgt i32 %4, 4
  %209 = sext i32 %4 to i64
  %210 = sext i32 %3 to i64
  %211 = sext i32 %16 to i64
  %212 = zext i32 %5 to i64
  br label %213

213:                                              ; preds = %314, %194
  %214 = phi i64 [ 0, %194 ], [ %315, %314 ]
  br i1 %199, label %215, label %314

215:                                              ; preds = %213
  %216 = shl i64 %214, 7
  %217 = mul nsw i64 %214, %211
  %218 = mul nsw i64 %214, %210
  br label %219

219:                                              ; preds = %215, %311
  %220 = phi i64 [ 0, %215 ], [ %312, %311 ]
  %221 = add i64 %216, %220
  %222 = and i64 %221, 4294967288
  %223 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %222
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 16
  %226 = getelementptr inbounds i16, i16* %223, i64 128
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 16
  %229 = shufflevector <8 x i16> %225, <8 x i16> %228, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %230 = getelementptr inbounds i16, i16* %223, i64 256
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 16
  %233 = getelementptr inbounds i16, i16* %223, i64 384
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 16
  %236 = shufflevector <8 x i16> %232, <8 x i16> %235, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %237 = getelementptr inbounds i16, i16* %223, i64 512
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 16
  %240 = getelementptr inbounds i16, i16* %223, i64 640
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = shufflevector <8 x i16> %239, <8 x i16> %242, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %244 = getelementptr inbounds i16, i16* %223, i64 768
  %245 = bitcast i16* %244 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 16
  %247 = getelementptr inbounds i16, i16* %223, i64 896
  %248 = bitcast i16* %247 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 16
  %250 = shufflevector <8 x i16> %246, <8 x i16> %249, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %251 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %229, <8 x i16> %200) #3
  %252 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %236, <8 x i16> %201) #3
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> %202) #3
  %254 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %250, <8 x i16> %203) #3
  %255 = add <4 x i32> %252, %251
  %256 = add <4 x i32> %255, %253
  %257 = add <4 x i32> %256, %254
  %258 = shufflevector <8 x i16> %225, <8 x i16> %228, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %259 = shufflevector <8 x i16> %232, <8 x i16> %235, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %260 = shufflevector <8 x i16> %239, <8 x i16> %242, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %261 = shufflevector <8 x i16> %246, <8 x i16> %249, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %262 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %258, <8 x i16> %200) #3
  %263 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %259, <8 x i16> %201) #3
  %264 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %260, <8 x i16> %202) #3
  %265 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %261, <8 x i16> %203) #3
  %266 = add <4 x i32> %263, %262
  %267 = add <4 x i32> %266, %264
  %268 = add <4 x i32> %267, %265
  %269 = shufflevector <4 x i32> %257, <4 x i32> %268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %270 = shufflevector <4 x i32> %257, <4 x i32> %268, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %271 = add <4 x i32> %269, %191
  %272 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %271, <4 x i32> %192) #3
  %273 = add <4 x i32> %270, %191
  %274 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %273, <4 x i32> %192) #3
  %275 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %272, <4 x i32> %274) #3
  %276 = add <8 x i16> %275, %62
  %277 = add nsw i64 %220, %217
  %278 = getelementptr inbounds i16, i16* %14, i64 %277
  %279 = bitcast i16* %278 to <8 x i16>*
  br i1 %204, label %310, label %280

280:                                              ; preds = %219
  %281 = load <8 x i16>, <8 x i16>* %279, align 1
  br i1 %205, label %290, label %282

282:                                              ; preds = %280
  %283 = shufflevector <8 x i16> %281, <8 x i16> %276, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %284 = shufflevector <8 x i16> %281, <8 x i16> %276, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %283, <8 x i16> %49) #3
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %284, <8 x i16> %49) #3
  %287 = ashr <4 x i32> %285, <i32 4, i32 4, i32 4, i32 4>
  %288 = ashr <4 x i32> %286, <i32 4, i32 4, i32 4, i32 4>
  %289 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %287, <4 x i32> %288) #3
  br label %293

290:                                              ; preds = %280
  %291 = add <8 x i16> %281, %276
  %292 = ashr <8 x i16> %291, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %293

293:                                              ; preds = %282, %290
  %294 = phi <8 x i16> [ %289, %282 ], [ %292, %290 ]
  %295 = add <8 x i16> %207, %294
  %296 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %295, i32 %64) #3
  %297 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %296, <8 x i16> %296) #3
  br i1 %208, label %298, label %304

298:                                              ; preds = %293
  %299 = bitcast <16 x i8> %297 to <2 x i64>
  %300 = add nsw i64 %220, %218
  %301 = getelementptr inbounds i8, i8* %2, i64 %300
  %302 = extractelement <2 x i64> %299, i32 0
  %303 = bitcast i8* %301 to i64*
  store i64 %302, i64* %303, align 1
  br label %311

304:                                              ; preds = %293
  %305 = bitcast <16 x i8> %297 to <4 x i32>
  %306 = extractelement <4 x i32> %305, i32 0
  %307 = add nsw i64 %220, %218
  %308 = getelementptr inbounds i8, i8* %2, i64 %307
  %309 = bitcast i8* %308 to i32*
  store i32 %306, i32* %309, align 4
  br label %311

310:                                              ; preds = %219
  store <8 x i16> %276, <8 x i16>* %279, align 16
  br label %311

311:                                              ; preds = %298, %304, %310
  %312 = add nuw nsw i64 %220, 8
  %313 = icmp slt i64 %312, %209
  br i1 %313, label %219, label %314

314:                                              ; preds = %311, %213
  %315 = add nuw nsw i64 %214, 1
  %316 = icmp eq i64 %315, %212
  br i1 %316, label %317, label %213

317:                                              ; preds = %314, %172
  call void @llvm.lifetime.end.p0i8(i64 35584, i8* nonnull %17) #3
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16>, i32) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
