; ModuleID = '../../third_party/blink/renderer/core/layout/ng/table/ng_table_layout_algorithm_helpers.cc'
source_filename = "../../third_party/blink/renderer/core/layout/ng/table/ng_table_layout_algorithm_helpers.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::NGTableNode" = type { %"class.blink::NGBlockNode.base", [7 x i8] }
%"class.blink::NGBlockNode.base" = type { %"class.blink::NGLayoutInputNode.base" }
%"class.blink::NGLayoutInputNode.base" = type <{ %"class.blink::LayoutBox"*, i8 }>
%"class.blink::LayoutBox" = type { %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRect", %"class.blink::LayoutSize", %"class.blink::LayoutUnit", %"struct.blink::MinMaxSizes", %"class.blink::LayoutUnit", %class.scoped_refptr.1631, %"class.WTF::Vector.1632", %"class.std::__1::unique_ptr.1637", %"struct.blink::BoxLayoutExtraInput"*, %union.anon.1658, %"class.blink::Persistent.1659" }
%"class.blink::LayoutBoxModelObject" = type { %"class.blink::LayoutObject" }
%"class.blink::LayoutObject" = type { %"class.blink::ImageResourceObserver", %"class.blink::DisplayItemClient.base", i8, [2 x i8], %"class.blink::LayoutObject::LayoutObjectBitfields", %class.scoped_refptr, %"class.blink::UntracedMember", %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::FragmentData" }
%"class.blink::ImageResourceObserver" = type { i32 (...)** }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::LayoutObject::LayoutObjectBitfields" = type { [12 x i8] }
%class.scoped_refptr = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.731", %"class.std::__1::unique_ptr.733" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.244", %"class.blink::DataRef.443", %"class.blink::DataRef.447", %"class.blink::DataRef.647", %"class.blink::DataRef.714", %"class.blink::DataRef.718", %"class.blink::DataRef.722", %"class.blink::DataRef.726", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted", %"class.blink::DataRef.1", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::DataRef.1" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.3", %"class.blink::Font" }
%"class.WTF::RefCounted.3" = type { %"class.base::RefCounted.4" }
%"class.base::RefCounted.4" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.29 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.8, %class.scoped_refptr.11, %class.scoped_refptr.21, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.28 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.7 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.7 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.1601", [4 x i8] }>
%"class.WTF::RefCounted.1601" = type { %"class.base::RefCounted.1602" }
%"class.base::RefCounted.1602" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.8 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.9", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.9" = type { %"class.base::RefCounted.10" }
%"class.base::RefCounted.10" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.11 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.12", %"class.WTF::RefCounted.19", [4 x i8] }>
%"class.blink::FontSettings.12" = type { %"class.WTF::Vector.13" }
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { %"class.blink::FontTagValuePair.16"*, i32, i32 }
%"class.blink::FontTagValuePair.16" = type { i32, float }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.21 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.22", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.25, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.22" = type { %"class.base::RefCounted.23" }
%"class.base::RefCounted.23" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.25 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.26", [4 x i8] }>
%"class.WTF::RefCounted.26" = type { %"class.base::RefCounted.27" }
%"class.base::RefCounted.27" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.28 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.29 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.30", %"class.WTF::Vector.32", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.30" = type { %"class.base::RefCounted.31" }
%"class.base::RefCounted.31" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.32" = type { %"class.WTF::VectorBuffer.33" }
%"class.WTF::VectorBuffer.33" = type { %"class.WTF::VectorBufferBase.34", [8 x i8] }
%"class.WTF::VectorBufferBase.34" = type { %class.scoped_refptr.35*, i32, i32 }
%class.scoped_refptr.35 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.36", [4 x i8] }>
%"class.WTF::RefCounted.36" = type { %"class.base::RefCounted.37" }
%"class.base::RefCounted.37" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.56, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.36" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.40 }
%union.anon.40 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.51, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.41" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.41" }>
%"struct.std::__1::atomic.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl.44" }
%"struct.std::__1::__cxx_atomic_impl.44" = type { %"struct.std::__1::__cxx_atomic_base_impl.45" }
%"struct.std::__1::__cxx_atomic_base_impl.45" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.46" }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.51 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.54, %class.scoped_refptr.54 }
%class.scoped_refptr.54 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.56 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.57", [4 x i8] }>
%"class.WTF::RefCounted.57" = type { %"class.base::RefCounted.58" }
%"class.base::RefCounted.58" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.59", i32, [4 x i8], %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.197", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.213", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.231", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.238", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.145", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.177", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__atomic_base.97" }
%"struct.std::__1::__atomic_base.97" = type { %"struct.std::__1::__cxx_atomic_impl.98" }
%"struct.std::__1::__cxx_atomic_impl.98" = type { %"struct.std::__1::__cxx_atomic_base_impl.99" }
%"struct.std::__1::__cxx_atomic_base_impl.99" = type { i64 }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::Worklist.106"* }
%"class.blink::Worklist.106" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist.113"* }
%"class.blink::Worklist.113" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::Worklist.120"* }
%"class.blink::Worklist.120" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::Worklist.127"* }
%"class.blink::Worklist.127" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::Worklist.134"* }
%"class.blink::Worklist.134" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::Worklist.141"* }
%"class.blink::Worklist.141" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.blink::Worklist.148"* }
%"class.blink::Worklist.148" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.155", %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.169", %"class.std::__1::__compressed_pair.171", [4 x i8] }>
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157", %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { float }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.180", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.189" }
%"class.WTF::Vector.189" = type { %"class.WTF::VectorBuffer.190" }
%"class.WTF::VectorBuffer.190" = type { %"class.WTF::VectorBufferBase.191" }
%"class.WTF::VectorBufferBase.191" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.219" }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.106"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.113"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.120"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.127"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.134"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector.1594", i64 }
%"class.std::__1::vector.1594" = type { %"class.std::__1::__vector_base.1595" }
%"class.std::__1::__vector_base.1595" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.1596" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.1596" = type { %"struct.std::__1::__compressed_pair_elem.1597" }
%"struct.std::__1::__compressed_pair_elem.1597" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.237 }
%class.scoped_refptr.237 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.238" = type { %"struct.std::__1::__atomic_base.239" }
%"struct.std::__1::__atomic_base.239" = type { %"struct.std::__1::__cxx_atomic_impl.240" }
%"struct.std::__1::__cxx_atomic_impl.240" = type { %"struct.std::__1::__cxx_atomic_base_impl.241" }
%"struct.std::__1::__cxx_atomic_base_impl.241" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.242 }
%class.scoped_refptr.242 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.41" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.46" }
%"class.blink::Length" = type <{ %union.anon.243, i8, i8, i8, i8 }>
%union.anon.243 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::DataRef.244" = type { %class.scoped_refptr.245 }
%class.scoped_refptr.245 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.246", [4 x i8], %"class.blink::DataRef.248", %"class.blink::DataRef.280", %"class.WTF::Vector.284", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.289, %class.scoped_refptr.298, %"class.blink::Persistent.306", %"class.blink::Persistent.308", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.246" = type { %"class.base::RefCounted.247" }
%"class.base::RefCounted.247" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.248" = type { %class.scoped_refptr.249 }
%class.scoped_refptr.249 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.250", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.252, %class.scoped_refptr.259, %"class.blink::Persistent.270", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.250" = type { %"class.base::RefCounted.251" }
%"class.base::RefCounted.251" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.252 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.253", %"class.WTF::Vector.254" }
%"class.base::RefCountedThreadSafe.253" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%class.scoped_refptr.259 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.260", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.260" = type { %"class.base::RefCounted.261" }
%"class.base::RefCounted.261" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1748 }
%class.scoped_refptr.1748 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.1749", %"class.WTF::Vector.630", %"class.WTF::Vector.1751", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.1749" = type { %"class.base::RefCounted.1750" }
%"class.base::RefCounted.1750" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.630" = type { %"class.WTF::VectorBuffer.631" }
%"class.WTF::VectorBuffer.631" = type { %"class.WTF::VectorBufferBase.632" }
%"class.WTF::VectorBufferBase.632" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.1751" = type { %"class.WTF::VectorBuffer.1752" }
%"class.WTF::VectorBuffer.1752" = type { %"class.WTF::VectorBufferBase.1753" }
%"class.WTF::VectorBufferBase.1753" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.1754 }
%union.anon.1754 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.264" }
%"class.blink::PersistentBase.264" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.265" }
%"class.WTF::HashMap.265" = type { %"class.WTF::HashTable.266" }
%"class.WTF::HashTable.266" = type <{ %"struct.WTF::KeyValuePair.268"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.268" = type opaque
%"class.blink::PersistentNodePtr.269" = type { %"class.blink::PersistentNode"* }
%"class.blink::Persistent.270" = type { %"class.blink::PersistentBase.271" }
%"class.blink::PersistentBase.271" = type { %"class.blink::HeapVector"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.274" }
%"class.WTF::Vector.274" = type { %"class.WTF::VectorBuffer.275" }
%"class.WTF::VectorBuffer.275" = type { %"class.WTF::VectorBufferBase.276" }
%"class.WTF::VectorBufferBase.276" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.280" = type { %class.scoped_refptr.281 }
%class.scoped_refptr.281 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.282", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.282" = type { %"class.base::RefCounted.283" }
%"class.base::RefCounted.283" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.284" = type { %"class.WTF::VectorBuffer.285" }
%"class.WTF::VectorBuffer.285" = type { %"class.WTF::VectorBufferBase.286" }
%"class.WTF::VectorBufferBase.286" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.289 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.290", %"class.WTF::Vector.292" }
%"class.WTF::RefCounted.290" = type { %"class.base::RefCounted.291" }
%"class.base::RefCounted.291" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.292" = type { %"class.WTF::VectorBuffer.293" }
%"class.WTF::VectorBuffer.293" = type { %"class.WTF::VectorBufferBase.294" }
%"class.WTF::VectorBufferBase.294" = type { %"struct.std::__1::pair.295"*, i32, i32 }
%"struct.std::__1::pair.295" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.298 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.299", [4 x i8], %"class.WTF::Vector.301" }
%"class.WTF::RefCounted.299" = type { %"class.base::RefCounted.300" }
%"class.base::RefCounted.300" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.301" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.303", [28 x i8] }>
%"class.WTF::VectorBufferBase.303" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::Persistent.306" = type { %"class.blink::PersistentBase.307" }
%"class.blink::PersistentBase.307" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::Persistent.308" = type { %"class.blink::PersistentBase.309" }
%"class.blink::PersistentBase.309" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.312", %"class.blink::Member.441" }
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.314", %"class.blink::Member.326", %"class.blink::Member.320", %"class.blink::Member.328", %"class.blink::Member.328", %"class.blink::Member.372", %"class.blink::Member.374", %"class.blink::Member.376", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.381", %"class.blink::HeapVector.383" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.314" = type { %"class.blink::MemberBase.315" }
%"class.blink::MemberBase.315" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.318", %"class.blink::Member.318" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.318", %"class.blink::Member.320", %"class.blink::Member.318", %"class.blink::Member.318", %"class.blink::Member.322" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.322" = type { %"class.blink::MemberBase.323" }
%"class.blink::MemberBase.323" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.318" = type { %"class.blink::MemberBase.319" }
%"class.blink::MemberBase.319" = type { %"class.blink::Node"* }
%"class.blink::Member.326" = type { %"class.blink::MemberBase.327" }
%"class.blink::MemberBase.327" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.906", %"class.WTF::Vector.906", i8, i32, %"class.blink::Member.913", %"class.blink::Member.915", %"class.blink::Member.917", %"class.blink::Member.919", %"class.blink::Member.921", %"class.blink::Member.923", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.931", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.937", %"class.blink::Member.939", %"class.blink::Member.389", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.942", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.365", %"class.blink::Member.343", %"class.blink::Member.967", %"class.blink::Member.343", %"class.blink::Member.343", %"class.blink::Member.343", %"class.blink::UserActionElementSet", %"class.blink::Member.976", double, double, i64, i64, %"class.blink::HeapHashSet.978", %"class.blink::HeapHashSet.985", i16, i8, %"class.blink::Member.992", %"class.blink::Member.994", %"class.blink::Member.1318", %"class.blink::Member.1320", %"class.blink::TextLinkColors", %"class.blink::Member.1322", i8, [7 x i8], %"class.blink::HeapHashMap.1324", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.343", %"class.WTF::Vector.1331", %"class.blink::Member.1336", %"class.blink::Member.1338", i8, %"class.blink::Member.343", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.1340", %"class.blink::HeapVector.1342", %"class.std::__1::unique_ptr.1350", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1356", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.1369", %"class.WTF::Vector.1371", i8, i8, %"class.std::__1::unique_ptr.1376", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.365", %"class.blink::HeapVector.1382", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1390", i8, i32, %"class.blink::Member.1392", %"class.blink::Member.1394", %"class.blink::Member.1396", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1398", %"class.WTF::HashMap.1400", %"class.blink::Member.1405", %"class.blink::Member.1407", %"class.blink::Member.1409", %"class.blink::Member.1411", %"class.blink::Member.326", %"class.blink::Member.326", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1413", i8, i32, %"class.blink::Member.1420", %"class.blink::Member.1422", i32, %"class.blink::Member.1424", %"class.blink::Member.1426", %"class.blink::Member.1428", %"class.std::__1::unique_ptr.1430", i64, %"class.std::__1::unique_ptr.1436", i32, i32, %"class.blink::Member.1447", %"class.blink::Member.1449", %"class.blink::Member.1451", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1453", %"class.WTF::Vector.1455", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1460", %"class.blink::Member.1467", %"class.std::__1::unique_ptr.1469", %"class.blink::Member.1475", i8, i8, %"class.WTF::String", %"class.blink::Member.1477", i8, [7 x i8], %"class.blink::HeapHashMap.1479", %"class.blink::HeapObserverSet", %"class.blink::Member.1493", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1495", i32, i8, i8, %"class.blink::WeakMember.1497", %"class.blink::Member.1498" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.899" }
%"class.blink::HeapHashMap.899" = type { %"class.WTF::HashMap.902" }
%"class.WTF::HashMap.902" = type { %"class.WTF::HashTable.903" }
%"class.WTF::HashTable.903" = type <{ %"struct.WTF::KeyValuePair.905"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.905" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.906" = type { %"class.WTF::VectorBuffer.907" }
%"class.WTF::VectorBuffer.907" = type { %"class.WTF::VectorBufferBase.908" }
%"class.WTF::VectorBufferBase.908" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.909 }
%class.scoped_refptr.909 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.910", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.910" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::Member.913" = type { %"class.blink::MemberBase.914" }
%"class.blink::MemberBase.914" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.915" = type { %"class.blink::MemberBase.916" }
%"class.blink::MemberBase.916" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.1522", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.1563", i32, i8, [3 x i8], %"class.blink::HeapVector.1565", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.1573", %"class.blink::Member.1575", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.1584", %"class.blink::Member.1590", %"class.blink::Member.1592", i8, [7 x i8] }>
%"class.blink::Supplementable.1522" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1523" }
%"class.blink::HeapHashMap.1523" = type { %"class.WTF::HashMap.1526" }
%"class.WTF::HashMap.1526" = type { %"class.WTF::HashTable.1527" }
%"class.WTF::HashTable.1527" = type <{ %"struct.WTF::KeyValuePair.1529"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1529" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.1538" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.1530" }
%"class.blink::HeapObserverSet.1530" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1531" }
%"class.blink::HeapHashSet.1531" = type { %"class.WTF::HashSet.1534" }
%"class.WTF::HashSet.1534" = type { %"class.WTF::HashTable.1535" }
%"class.WTF::HashTable.1535" = type <{ %"class.blink::WeakMember.1537"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1537" = type opaque
%"class.blink::Supplementable.1538" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1539" }
%"class.blink::HeapHashMap.1539" = type { %"class.WTF::HashMap.1542" }
%"class.WTF::HashMap.1542" = type { %"class.WTF::HashTable.1543" }
%"class.WTF::HashTable.1543" = type <{ %"struct.WTF::KeyValuePair.1545"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1545" = type { i8*, %"class.blink::Member.1734" }
%"class.blink::Member.1734" = type { %"class.blink::MemberBase.1735" }
%"class.blink::MemberBase.1735" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1736" }
%"class.blink::Member.1736" = type { %"class.blink::MemberBase.1737" }
%"class.blink::MemberBase.1737" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.1546, %"class.std::__1::unique_ptr.1547", %"class.std::__1::unique_ptr.1547", %"class.std::__1::unique_ptr.1553", %"class.std::__1::unique_ptr.1553", %"class.blink::Member.915", i32, [4 x i8], %"class.WTF::HashSet.1559", i32, i32 }
%class.scoped_refptr.1546 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.1623", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional.1625", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.1630 }
%"class.WTF::RefCounted.1623" = type { %"class.base::RefCounted.1624" }
%"class.base::RefCounted.1624" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional.1625" = type { %"class.absl::optional_internal::optional_data.1626" }
%"class.absl::optional_internal::optional_data.1626" = type { %"class.absl::optional_internal::optional_data_base.1627" }
%"class.absl::optional_internal::optional_data_base.1627" = type { %"class.absl::optional_internal::optional_data_dtor_base.1628" }
%"class.absl::optional_internal::optional_data_dtor_base.1628" = type { i8, %union.anon.1629 }
%union.anon.1629 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.1630 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.1547" = type { %"class.std::__1::__compressed_pair.1548" }
%"class.std::__1::__compressed_pair.1548" = type { %"struct.std::__1::__compressed_pair_elem.1549" }
%"struct.std::__1::__compressed_pair_elem.1549" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.1553" = type { %"class.std::__1::__compressed_pair.1554" }
%"class.std::__1::__compressed_pair.1554" = type { %"struct.std::__1::__compressed_pair_elem.1555" }
%"struct.std::__1::__compressed_pair_elem.1555" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.1559" = type { %"class.WTF::HashTable.1560" }
%"class.WTF::HashTable.1560" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1563" = type { %"class.blink::MemberBase.1564" }
%"class.blink::MemberBase.1564" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.1565" = type { %"class.WTF::Vector.1568" }
%"class.WTF::Vector.1568" = type { %"class.WTF::VectorBuffer.1569" }
%"class.WTF::VectorBuffer.1569" = type { %"class.WTF::VectorBufferBase.1570" }
%"class.WTF::VectorBufferBase.1570" = type { %"class.blink::Member.1571"*, i32, i32 }
%"class.blink::Member.1571" = type opaque
%"class.blink::Member.1573" = type { %"class.blink::MemberBase.1574" }
%"class.blink::MemberBase.1574" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.1575" = type { %"class.blink::MemberBase.1576" }
%"class.blink::MemberBase.1576" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.1577", i32, i32 }
%"class.blink::HeapHashMap.1577" = type { %"class.WTF::HashMap.1580" }
%"class.WTF::HashMap.1580" = type { %"class.WTF::HashTable.1581" }
%"class.WTF::HashTable.1581" = type <{ %"struct.WTF::KeyValuePair.1583"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1583" = type opaque
%"class.std::__1::unique_ptr.1584" = type { %"class.std::__1::__compressed_pair.1585" }
%"class.std::__1::__compressed_pair.1585" = type { %"struct.std::__1::__compressed_pair_elem.1586" }
%"struct.std::__1::__compressed_pair_elem.1586" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.1590" = type { %"class.blink::MemberBase.1591" }
%"class.blink::MemberBase.1591" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.1592" = type { %"class.blink::MemberBase.1593" }
%"class.blink::MemberBase.1593" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.917" = type { %"class.blink::MemberBase.918" }
%"class.blink::MemberBase.918" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.919" = type { %"class.blink::MemberBase.920" }
%"class.blink::MemberBase.920" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.921" = type { %"class.blink::MemberBase.922" }
%"class.blink::MemberBase.922" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.923" = type { %"class.blink::MemberBase.924" }
%"class.blink::MemberBase.924" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.925" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.925" = type { %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.blink::KURL"* }
%"class.blink::Member.937" = type { %"class.blink::MemberBase.938" }
%"class.blink::MemberBase.938" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.939" = type { %"class.blink::MemberBase.940" }
%"class.blink::MemberBase.940" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.389" = type { %"class.blink::MemberBase.390" }
%"class.blink::MemberBase.390" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.391", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.393, %"class.WTF::Vector.412", %"class.WTF::Vector.412", %"class.blink::Member.318", %"class.blink::Member.417", %"class.blink::HeapHashSet", %"class.blink::Member.326", %"class.WTF::HashSet.425", %"class.WTF::TextPosition", %"class.blink::Member.429", %"class.blink::HeapVector.431", %"class.blink::Member.438" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.391" = type { %"class.blink::MemberBase.392" }
%"class.blink::MemberBase.392" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.393 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.394", %"class.WTF::Vector.396" }
%"class.WTF::RefCounted.394" = type { %"class.base::RefCounted.395" }
%"class.base::RefCounted.395" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.396" = type { %"class.WTF::VectorBuffer.397" }
%"class.WTF::VectorBuffer.397" = type { %"class.WTF::VectorBufferBase.398" }
%"class.WTF::VectorBufferBase.398" = type { %"class.std::__1::unique_ptr.399"*, i32, i32 }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.402", %"class.WTF::String" }
%"class.WTF::Vector.402" = type { %"class.WTF::VectorBuffer.403" }
%"class.WTF::VectorBuffer.403" = type { %"class.WTF::VectorBufferBase.404" }
%"class.WTF::VectorBufferBase.404" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.WTF::Vector.412" = type { %"class.WTF::VectorBuffer.413" }
%"class.WTF::VectorBuffer.413" = type { %"class.WTF::VectorBufferBase.414" }
%"class.WTF::VectorBufferBase.414" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type <{ %"class.blink::MediaQueryExp", i8, [7 x i8] }>
%"class.blink::Member.417" = type { %"class.blink::MemberBase.418" }
%"class.blink::MemberBase.418" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.419" }
%"class.blink::Member.419" = type { %"class.blink::MemberBase.420" }
%"class.blink::MemberBase.420" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.423" }
%"class.WTF::HashTable.423" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.321" }
%"class.blink::MemberBase.321" = type { %"class.blink::TreeScope"* }
%"class.WTF::HashSet.425" = type { %"class.WTF::HashTable.426" }
%"class.WTF::HashTable.426" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.429" = type { %"class.blink::MemberBase.430" }
%"class.blink::MemberBase.430" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.393, %"class.blink::Member.389", %"class.blink::Member.417" }
%"class.blink::HeapVector.431" = type { %"class.WTF::Vector.434" }
%"class.WTF::Vector.434" = type { %"class.WTF::VectorBuffer.435" }
%"class.WTF::VectorBuffer.435" = type { %"class.WTF::VectorBufferBase.436" }
%"class.WTF::VectorBufferBase.436" = type { %"class.blink::Member.417"*, i32, i32 }
%"class.blink::Member.438" = type { %"class.blink::MemberBase.439" }
%"class.blink::MemberBase.439" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.941 }
%class.scoped_refptr.941 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.942" = type { %"class.WTF::VectorBuffer.943" }
%"class.WTF::VectorBuffer.943" = type { %"class.WTF::VectorBufferBase.944" }
%"class.WTF::VectorBufferBase.944" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.945 }
%class.scoped_refptr.945 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.946", i32, i32, %"class.blink::Persistent.948" }
%"class.WTF::RefCounted.946" = type { %"class.base::RefCounted.947" }
%"class.base::RefCounted.947" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.948" = type { %"class.blink::PersistentBase.949" }
%"class.blink::PersistentBase.949" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.952" }
%"class.blink::HeapHashMap.952" = type { %"class.WTF::HashMap.955" }
%"class.WTF::HashMap.955" = type { %"class.WTF::HashTable.956" }
%"class.WTF::HashTable.956" = type <{ %"struct.WTF::KeyValuePair.958"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.958" = type { %"class.blink::WeakMember.959", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.959" = type { %"class.blink::MemberBase.960" }
%"class.blink::MemberBase.960" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::Member.967" = type { %"class.blink::MemberBase.968" }
%"class.blink::MemberBase.968" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.326", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.318", %"class.blink::Member.318", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.969" }
%"class.blink::HeapHashMap.969" = type { %"class.WTF::HashMap.972" }
%"class.WTF::HashMap.972" = type { %"class.WTF::HashTable.973" }
%"class.WTF::HashTable.973" = type <{ %"struct.WTF::KeyValuePair.975"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.975" = type opaque
%"class.blink::Member.976" = type { %"class.blink::MemberBase.977" }
%"class.blink::MemberBase.977" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.978" = type { %"class.WTF::HashSet.981" }
%"class.WTF::HashSet.981" = type { %"class.WTF::HashTable.982" }
%"class.WTF::HashTable.982" = type <{ %"class.blink::WeakMember.984"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.984" = type opaque
%"class.blink::HeapHashSet.985" = type { %"class.WTF::HashSet.988" }
%"class.WTF::HashSet.988" = type { %"class.WTF::HashTable.989" }
%"class.WTF::HashTable.989" = type <{ %"class.blink::WeakMember.991"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.991" = type opaque
%"class.blink::Member.992" = type { %"class.blink::MemberBase.993" }
%"class.blink::MemberBase.993" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.994" = type { %"class.blink::MemberBase.995" }
%"class.blink::MemberBase.995" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type { %"class.blink::FontSelectorClient", %"class.blink::NameClient", %"class.blink::Member.326", i32, i32, i32, %"class.blink::Member.389", %"class.blink::Member.998", %"class.blink::Member.1025", %"class.blink::HeapHashMap.1027", i8, i8, i8, [5 x i8], %"class.blink::HeapHashSet.1034", %"class.blink::HeapHashSet.1034", %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, %"class.blink::Member.1040", %"class.blink::Member.1052", %"class.blink::Member.1081", %"class.blink::Member.1083", %"class.blink::Member.1089", %"class.blink::PendingInvalidations", %"class.blink::StyleInvalidationRoot", %"class.blink::StyleRecalcRoot", %"class.blink::LayoutTreeRebuildRoot", %"class.blink::HeapHashSet.1251", %"class.blink::Member.1257", %"class.blink::HeapHashMap.1259", %"class.blink::HeapHashMap.1266", %"class.std::__1::unique_ptr.1273", i32, %"class.blink::HeapVector.1279", %"class.blink::HeapVector.1279", %"class.blink::HeapVector.1010", %"class.blink::HeapHashSet.1287", %"class.blink::HeapHashMap.1294", %"class.blink::Member.1301", %"class.blink::HeapHashMap.1303", %class.scoped_refptr.1310, %class.scoped_refptr.259, %"class.blink::Member.1215", i32, i32, %"class.blink::Color", i32, %"class.blink::Color", [4 x i8], %"class.blink::HeapHashSet.1311", %"class.blink::Member.343" }
%"class.blink::FontSelectorClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.998" = type { %"class.blink::MemberBase.999" }
%"class.blink::MemberBase.999" = type { %"class.blink::DocumentStyleSheetCollection"* }
%"class.blink::DocumentStyleSheetCollection" = type { %"class.blink::TreeScopeStyleSheetCollection" }
%"class.blink::TreeScopeStyleSheetCollection" = type { %"class.blink::StyleSheetCollection.base", %"class.blink::Member.320", %"class.blink::TreeOrderedList" }
%"class.blink::StyleSheetCollection.base" = type <{ %"class.blink::NameClient", %"class.blink::HeapVector.1002", %"class.blink::HeapVector.1010", i8 }>
%"class.blink::HeapVector.1002" = type { %"class.WTF::Vector.1005" }
%"class.WTF::Vector.1005" = type { %"class.WTF::VectorBuffer.1006" }
%"class.WTF::VectorBuffer.1006" = type { %"class.WTF::VectorBufferBase.1007" }
%"class.WTF::VectorBufferBase.1007" = type { %"class.blink::Member.1008"*, i32, i32 }
%"class.blink::Member.1008" = type opaque
%"class.blink::TreeOrderedList" = type { %"class.blink::HeapListHashSet" }
%"class.blink::HeapListHashSet" = type { %"class.WTF::ListHashSet.base", [7 x i8] }
%"class.WTF::ListHashSet.base" = type <{ %"class.WTF::HashTable.1021", %"class.blink::Member.1023", %"class.blink::Member.1023", %"struct.blink::HeapListHashSetAllocator::AllocatorProvider" }>
%"class.WTF::HashTable.1021" = type <{ %"class.blink::Member.1023"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1023" = type { %"class.blink::MemberBase.1024" }
%"class.blink::MemberBase.1024" = type { %"class.blink::HeapListHashSetNode"* }
%"class.blink::HeapListHashSetNode" = type { %"class.blink::Member.318", %"class.blink::Member.1023", %"class.blink::Member.1023" }
%"struct.blink::HeapListHashSetAllocator::AllocatorProvider" = type { i8 }
%"class.blink::Member.1025" = type { %"class.blink::MemberBase.1026" }
%"class.blink::MemberBase.1026" = type { %"class.blink::StyleRuleUsageTracker"* }
%"class.blink::StyleRuleUsageTracker" = type opaque
%"class.blink::HeapHashMap.1027" = type { %"class.WTF::HashMap.1030" }
%"class.WTF::HashMap.1030" = type { %"class.WTF::HashTable.1031" }
%"class.WTF::HashTable.1031" = type <{ %"struct.WTF::KeyValuePair.1033"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1033" = type opaque
%"class.blink::HeapHashSet.1034" = type { %"class.WTF::HashSet.1037" }
%"class.WTF::HashSet.1037" = type { %"class.WTF::HashTable.1038" }
%"class.WTF::HashTable.1038" = type <{ %"class.blink::Member.320"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1040" = type { %"class.blink::MemberBase.1041" }
%"class.blink::MemberBase.1041" = type { %"class.blink::ReferenceFilterOperation"* }
%"class.blink::ReferenceFilterOperation" = type { %"class.blink::FilterOperation.base", %"class.WTF::AtomicString", %"class.blink::Member.1042", %"class.blink::Member.1044" }
%"class.blink::FilterOperation.base" = type <{ i32 (...)**, i32 }>
%"class.blink::Member.1042" = type { %"class.blink::MemberBase.1043" }
%"class.blink::MemberBase.1043" = type { %"class.blink::SVGResource"* }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.343", %"class.blink::HeapHashMap.687" }
%"class.blink::HeapHashMap.687" = type { %"class.WTF::HashMap.690" }
%"class.WTF::HashMap.690" = type { %"class.WTF::HashTable.691" }
%"class.WTF::HashTable.691" = type <{ %"struct.WTF::KeyValuePair.693"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.693" = type opaque
%"class.blink::Member.1044" = type { %"class.blink::MemberBase.1045" }
%"class.blink::MemberBase.1045" = type { %"class.blink::Filter"* }
%"class.blink::Filter" = type { %"class.blink::FloatRect", %"class.blink::FloatRect", float, i32, %"class.blink::Member.1048", %"class.blink::Member.1050" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.1048" = type { %"class.blink::MemberBase.1049" }
%"class.blink::MemberBase.1049" = type { %"class.blink::SourceGraphic"* }
%"class.blink::SourceGraphic" = type opaque
%"class.blink::Member.1050" = type { %"class.blink::MemberBase.1051" }
%"class.blink::MemberBase.1051" = type { %"class.blink::FilterEffect"* }
%"class.blink::FilterEffect" = type { i32 (...)**, %"class.blink::HeapVector.1513", %"class.blink::Member.1044", %"class.blink::FloatRect", i8, i8, i32, [4 x %class.sk_sp.817] }
%"class.blink::HeapVector.1513" = type { %"class.WTF::Vector.1516" }
%"class.WTF::Vector.1516" = type { %"class.WTF::VectorBuffer.1517" }
%"class.WTF::VectorBuffer.1517" = type { %"class.WTF::VectorBufferBase.1518" }
%"class.WTF::VectorBufferBase.1518" = type { %"class.blink::Member.1050"*, i32, i32 }
%class.sk_sp.817 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.818, i32, %"class.absl::optional.819", i8, i32 }
%class.sk_sp.818 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.819" = type { %"class.absl::optional_internal::optional_data.820" }
%"class.absl::optional_internal::optional_data.820" = type { %"class.absl::optional_internal::optional_data_base.821" }
%"class.absl::optional_internal::optional_data_base.821" = type { %"class.absl::optional_internal::optional_data_dtor_base.822" }
%"class.absl::optional_internal::optional_data_dtor_base.822" = type { i8, %union.anon.823 }
%union.anon.823 = type { %struct.SkRect }
%"class.blink::Member.1052" = type { %"class.blink::MemberBase.1053" }
%"class.blink::MemberBase.1053" = type { %"class.blink::StyleResolver"* }
%"class.blink::StyleResolver" = type <{ %"class.blink::MatchedPropertiesCache", %"class.blink::Member.326", %class.scoped_refptr, %"class.blink::SelectorFilter", %"class.blink::Member.1025", i8, i8, [6 x i8] }>
%"class.blink::MatchedPropertiesCache" = type { %"class.blink::HeapHashMap.1056" }
%"class.blink::HeapHashMap.1056" = type { %"class.WTF::HashMap.1059" }
%"class.WTF::HashMap.1059" = type { %"class.WTF::HashTable.1060" }
%"class.WTF::HashTable.1060" = type <{ %"struct.WTF::KeyValuePair.1062"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1062" = type opaque
%"class.blink::SelectorFilter" = type { %"class.blink::HeapVector.1063", %"class.std::__1::unique_ptr.1075" }
%"class.blink::HeapVector.1063" = type { %"class.WTF::Vector.1066" }
%"class.WTF::Vector.1066" = type { %"class.WTF::VectorBuffer.1067" }
%"class.WTF::VectorBuffer.1067" = type { %"class.WTF::VectorBufferBase.1068" }
%"class.WTF::VectorBufferBase.1068" = type { %"class.blink::SelectorFilter::ParentStackFrame"*, i32, i32 }
%"class.blink::SelectorFilter::ParentStackFrame" = type { %"class.blink::Member.343", %"class.WTF::Vector.1069" }
%"class.WTF::Vector.1069" = type { %"class.WTF::VectorBuffer.1070" }
%"class.WTF::VectorBuffer.1070" = type { %"class.WTF::VectorBufferBase.1071", [16 x i8] }
%"class.WTF::VectorBufferBase.1071" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.1075" = type { %"class.std::__1::__compressed_pair.1076" }
%"class.std::__1::__compressed_pair.1076" = type { %"struct.std::__1::__compressed_pair_elem.1077" }
%"struct.std::__1::__compressed_pair_elem.1077" = type { %"class.WTF::BloomFilter"* }
%"class.WTF::BloomFilter" = type { [4096 x i8] }
%"class.blink::Member.1081" = type { %"class.blink::MemberBase.1082" }
%"class.blink::MemberBase.1082" = type { %"class.blink::ViewportStyleResolver"* }
%"class.blink::ViewportStyleResolver" = type opaque
%"class.blink::Member.1083" = type { %"class.blink::MemberBase.1084" }
%"class.blink::MemberBase.1084" = type { %"class.blink::MediaQueryEvaluator"* }
%"class.blink::MediaQueryEvaluator" = type <{ %"class.WTF::String", %"class.blink::Member.1087", i8, [7 x i8] }>
%"class.blink::Member.1087" = type { %"class.blink::MemberBase.1088" }
%"class.blink::MemberBase.1088" = type { %"class.blink::MediaValues"* }
%"class.blink::MediaValues" = type opaque
%"class.blink::Member.1089" = type { %"class.blink::MemberBase.1090" }
%"class.blink::MemberBase.1090" = type { %"class.blink::CSSGlobalRuleSet"* }
%"class.blink::CSSGlobalRuleSet" = type <{ %"class.blink::RuleFeatureSet", %"class.blink::Member.1111", i8, i8, [6 x i8] }>
%"class.blink::RuleFeatureSet" = type <{ %"struct.blink::RuleFeatureSet::FeatureMetadata", [4 x i8], %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1098", %class.scoped_refptr.1103, %class.scoped_refptr.1110, %class.scoped_refptr.1109, %"class.WTF::Vector.412", %"class.WTF::Vector.412", i8, [7 x i8] }>
%"struct.blink::RuleFeatureSet::FeatureMetadata" = type <{ i8, i8, i8, i8, i32, i8, [3 x i8] }>
%"class.WTF::HashMap.1093" = type { %"class.WTF::HashTable.1094" }
%"class.WTF::HashTable.1094" = type <{ %"struct.WTF::KeyValuePair.1097"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1097" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1762 }
%class.scoped_refptr.1762 = type { %"class.blink::InvalidationSet"* }
%"class.blink::InvalidationSet" = type <{ %"class.WTF::RefCounted.1104", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1106", %"union.blink::InvalidationSet::Backing.1107", %"union.blink::InvalidationSet::Backing.1108", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8, [5 x i8] }>
%"class.WTF::RefCounted.1104" = type { %"class.base::RefCounted.1105" }
%"class.base::RefCounted.1105" = type { %"class.base::subtle::RefCountedBase" }
%"union.blink::InvalidationSet::Backing" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1106" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1107" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1108" = type { %"class.WTF::StringImpl"* }
%"class.blink::InvalidationFlags" = type { i8 }
%"class.blink::InvalidationSet::BackingFlags" = type { i8 }
%"class.WTF::HashMap.1098" = type { %"class.WTF::HashTable.1099" }
%"class.WTF::HashTable.1099" = type <{ %"struct.WTF::KeyValuePair.1102"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1102" = type opaque
%class.scoped_refptr.1103 = type { %"class.blink::SiblingInvalidationSet"* }
%"class.blink::SiblingInvalidationSet" = type { %"class.blink::InvalidationSet.base", i32, %class.scoped_refptr.1109, %class.scoped_refptr.1109 }
%"class.blink::InvalidationSet.base" = type <{ %"class.WTF::RefCounted.1104", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1106", %"union.blink::InvalidationSet::Backing.1107", %"union.blink::InvalidationSet::Backing.1108", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8 }>
%class.scoped_refptr.1110 = type { %"class.blink::NthSiblingInvalidationSet"* }
%"class.blink::NthSiblingInvalidationSet" = type { %"class.blink::SiblingInvalidationSet" }
%class.scoped_refptr.1109 = type { %"class.blink::DescendantInvalidationSet"* }
%"class.blink::DescendantInvalidationSet" = type { %"class.blink::InvalidationSet.base", [5 x i8] }
%"class.blink::Member.1111" = type { %"class.blink::MemberBase.1112" }
%"class.blink::MemberBase.1112" = type { %"class.blink::RuleSet"* }
%"class.blink::RuleSet" = type { %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::RuleFeatureSet", %"class.blink::HeapVector.1158", %"class.blink::HeapVector.1166", %"class.blink::HeapVector.1174", %"class.blink::HeapVector.1191", %"class.blink::HeapVector.1199", %"class.blink::HeapVector.1207", %"class.blink::HeapVector.1220", %"class.WTF::Vector.1227", i32, %"class.blink::Member.1233" }
%"class.blink::HeapHashMap.1115" = type { %"class.WTF::HashMap.1118" }
%"class.WTF::HashMap.1118" = type { %"class.WTF::HashTable.1119" }
%"class.WTF::HashTable.1119" = type <{ %"struct.WTF::KeyValuePair.1121"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1121" = type { %"class.WTF::AtomicString", %"class.blink::Member.1772" }
%"class.blink::Member.1772" = type { %"class.blink::MemberBase.1773" }
%"class.blink::MemberBase.1773" = type { %"class.blink::HeapVector.1122"* }
%"class.blink::HeapVector.1122" = type { %"class.WTF::Vector.1125" }
%"class.WTF::Vector.1125" = type { %"class.WTF::VectorBuffer.1126" }
%"class.WTF::VectorBuffer.1126" = type { %"class.WTF::VectorBufferBase.1127" }
%"class.WTF::VectorBufferBase.1127" = type { %"class.blink::Member.1128"*, i32, i32 }
%"class.blink::Member.1128" = type { %"class.blink::MemberBase.1129" }
%"class.blink::MemberBase.1129" = type { %"class.blink::RuleData"* }
%"class.blink::RuleData" = type { %"class.blink::Member.1132", i64, [4 x i32] }
%"class.blink::Member.1132" = type { %"class.blink::MemberBase.1133" }
%"class.blink::MemberBase.1133" = type { %"class.blink::StyleRule"* }
%"class.blink::StyleRule" = type { %"class.blink::StyleRuleBase", i32, %"class.blink::CSSSelectorList", %"class.blink::Member.354", %"class.blink::Member.1153" }
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::CSSSelectorList" = type { %"class.blink::CSSSelector"* }
%"class.blink::CSSSelector" = type { i24, %"union.blink::CSSSelector::DataUnion" }
%"union.blink::CSSSelector::DataUnion" = type { %"class.WTF::AtomicString" }
%"class.blink::Member.354" = type { %"class.blink::MemberBase.355" }
%"class.blink::MemberBase.355" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::Member.1153" = type { %"class.blink::MemberBase.1154" }
%"class.blink::MemberBase.1154" = type { %"class.blink::CSSLazyPropertyParser"* }
%"class.blink::CSSLazyPropertyParser" = type { i32 (...)** }
%"class.blink::HeapVector.1158" = type { %"class.WTF::Vector.1161" }
%"class.WTF::Vector.1161" = type { %"class.WTF::VectorBuffer.1162" }
%"class.WTF::VectorBuffer.1162" = type { %"class.WTF::VectorBufferBase.1163" }
%"class.WTF::VectorBufferBase.1163" = type { %"class.blink::Member.1164"*, i32, i32 }
%"class.blink::Member.1164" = type { %"class.blink::MemberBase.1768" }
%"class.blink::MemberBase.1768" = type { %"class.blink::StyleRulePage"* }
%"class.blink::StyleRulePage" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.354", %"class.blink::CSSSelectorList" }
%"class.blink::HeapVector.1166" = type { %"class.WTF::Vector.1169" }
%"class.WTF::Vector.1169" = type { %"class.WTF::VectorBuffer.1170" }
%"class.WTF::VectorBuffer.1170" = type { %"class.WTF::VectorBufferBase.1171" }
%"class.WTF::VectorBufferBase.1171" = type { %"class.blink::Member.1172"*, i32, i32 }
%"class.blink::Member.1172" = type { %"class.blink::MemberBase.1769" }
%"class.blink::MemberBase.1769" = type { %"class.blink::StyleRuleFontFace"* }
%"class.blink::StyleRuleFontFace" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.354" }
%"class.blink::HeapVector.1174" = type { %"class.WTF::Vector.1177" }
%"class.WTF::Vector.1177" = type { %"class.WTF::VectorBuffer.1178" }
%"class.WTF::VectorBuffer.1178" = type { %"class.WTF::VectorBufferBase.1179" }
%"class.WTF::VectorBufferBase.1179" = type { %"class.blink::Member.1180"*, i32, i32 }
%"class.blink::Member.1180" = type { %"class.blink::MemberBase.1181" }
%"class.blink::MemberBase.1181" = type { %"class.blink::StyleRuleKeyframes"* }
%"class.blink::StyleRuleKeyframes" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.blink::HeapVector.1182", %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::HeapVector.1182" = type { %"class.WTF::Vector.1185" }
%"class.WTF::Vector.1185" = type { %"class.WTF::VectorBuffer.1186" }
%"class.WTF::VectorBuffer.1186" = type { %"class.WTF::VectorBufferBase.1187" }
%"class.WTF::VectorBufferBase.1187" = type { %"class.blink::Member.1188"*, i32, i32 }
%"class.blink::Member.1188" = type opaque
%"class.blink::HeapVector.1191" = type { %"class.WTF::Vector.1194" }
%"class.WTF::Vector.1194" = type { %"class.WTF::VectorBuffer.1195" }
%"class.WTF::VectorBuffer.1195" = type { %"class.WTF::VectorBufferBase.1196" }
%"class.WTF::VectorBufferBase.1196" = type { %"class.blink::Member.1197"*, i32, i32 }
%"class.blink::Member.1197" = type { %"class.blink::MemberBase.1770" }
%"class.blink::MemberBase.1770" = type { %"class.blink::StyleRuleProperty"* }
%"class.blink::StyleRuleProperty" = type { %"class.blink::StyleRuleBase", %"class.WTF::String", %"class.blink::Member.354" }
%"class.blink::HeapVector.1199" = type { %"class.WTF::Vector.1202" }
%"class.WTF::Vector.1202" = type { %"class.WTF::VectorBuffer.1203" }
%"class.WTF::VectorBuffer.1203" = type { %"class.WTF::VectorBufferBase.1204" }
%"class.WTF::VectorBufferBase.1204" = type { %"class.blink::Member.1205"*, i32, i32 }
%"class.blink::Member.1205" = type { %"class.blink::MemberBase.1771" }
%"class.blink::MemberBase.1771" = type { %"class.blink::StyleRuleCounterStyle"* }
%"class.blink::StyleRuleCounterStyle" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.WTF::AtomicString", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", i32, [4 x i8] }>
%"class.blink::HeapVector.1207" = type { %"class.WTF::Vector.1210" }
%"class.WTF::Vector.1210" = type { %"class.WTF::VectorBuffer.1211" }
%"class.WTF::VectorBuffer.1211" = type { %"class.WTF::VectorBufferBase.1212" }
%"class.WTF::VectorBufferBase.1212" = type { %"class.blink::Member.1213"*, i32, i32 }
%"class.blink::Member.1213" = type { %"class.blink::MemberBase.1214" }
%"class.blink::MemberBase.1214" = type { %"class.blink::StyleRuleScrollTimeline"* }
%"class.blink::StyleRuleScrollTimeline" = type { %"class.blink::StyleRuleBase", %"class.WTF::AtomicString", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215" }
%"class.blink::HeapVector.1220" = type { %"class.WTF::Vector.1223" }
%"class.WTF::Vector.1223" = type { %"class.WTF::VectorBuffer.1224" }
%"class.WTF::VectorBuffer.1224" = type { %"class.WTF::VectorBufferBase.1225" }
%"class.WTF::VectorBufferBase.1225" = type { %"class.blink::MinimalRuleData"*, i32, i32 }
%"class.blink::MinimalRuleData" = type { %"class.blink::Member.1132", i32, i32 }
%"class.WTF::Vector.1227" = type { %"class.WTF::VectorBuffer.1228" }
%"class.WTF::VectorBuffer.1228" = type { %"class.WTF::VectorBufferBase.1229" }
%"class.WTF::VectorBufferBase.1229" = type { %"class.blink::MediaQuerySetResult"*, i32, i32 }
%"class.blink::MediaQuerySetResult" = type <{ %class.scoped_refptr.1230, i8, [7 x i8] }>
%class.scoped_refptr.1230 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::Member.1233" = type { %"class.blink::MemberBase.1234" }
%"class.blink::MemberBase.1234" = type { %"class.blink::RuleSet::PendingRuleMaps"* }
%"class.blink::RuleSet::PendingRuleMaps" = type { %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237" }
%"class.blink::HeapHashMap.1237" = type { %"class.WTF::HashMap.1240" }
%"class.WTF::HashMap.1240" = type { %"class.WTF::HashTable.1241" }
%"class.WTF::HashTable.1241" = type <{ %"struct.WTF::KeyValuePair.1243"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1243" = type opaque
%"class.blink::PendingInvalidations" = type { %"class.blink::HeapHashMap.1244" }
%"class.blink::HeapHashMap.1244" = type { %"class.WTF::HashMap.1247" }
%"class.WTF::HashMap.1247" = type { %"class.WTF::HashTable.1248" }
%"class.WTF::HashTable.1248" = type <{ %"struct.WTF::KeyValuePair.1250"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1250" = type { %"class.blink::Member.314", %"class.blink::NodeInvalidationSets" }
%"class.blink::NodeInvalidationSets" = type { %"class.WTF::Vector.1763", %"class.WTF::Vector.1763" }
%"class.WTF::Vector.1763" = type { %"class.WTF::VectorBuffer.1764" }
%"class.WTF::VectorBuffer.1764" = type { %"class.WTF::VectorBufferBase.1765" }
%"class.WTF::VectorBufferBase.1765" = type { %class.scoped_refptr.1762*, i32, i32 }
%"class.blink::StyleInvalidationRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::StyleTraversalRoot.base" = type <{ i32 (...)**, %"class.blink::Member.318", i32 }>
%"class.blink::StyleRecalcRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::LayoutTreeRebuildRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::HeapHashSet.1251" = type { %"class.WTF::HashSet.1254" }
%"class.WTF::HashSet.1254" = type { %"class.WTF::HashTable.1255" }
%"class.WTF::HashTable.1255" = type <{ %"class.blink::Member.343"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1257" = type { %"class.blink::MemberBase.1258" }
%"class.blink::MemberBase.1258" = type { %"class.blink::CSSFontSelector"* }
%"class.blink::CSSFontSelector" = type opaque
%"class.blink::HeapHashMap.1259" = type { %"class.WTF::HashMap.1262" }
%"class.WTF::HashMap.1262" = type { %"class.WTF::HashTable.1263" }
%"class.WTF::HashTable.1263" = type <{ %"struct.WTF::KeyValuePair.1265"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1265" = type opaque
%"class.blink::HeapHashMap.1266" = type { %"class.WTF::HashMap.1269" }
%"class.WTF::HashMap.1269" = type { %"class.WTF::HashTable.1270" }
%"class.WTF::HashTable.1270" = type <{ %"struct.WTF::KeyValuePair.1272"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1272" = type opaque
%"class.std::__1::unique_ptr.1273" = type { %"class.std::__1::__compressed_pair.1274" }
%"class.std::__1::__compressed_pair.1274" = type { %"struct.std::__1::__compressed_pair_elem.1275" }
%"struct.std::__1::__compressed_pair_elem.1275" = type { %"class.blink::StyleResolverStats"* }
%"class.blink::StyleResolverStats" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.blink::HeapVector.1279" = type { %"class.WTF::Vector.1282" }
%"class.WTF::Vector.1282" = type { %"class.WTF::VectorBuffer.1283" }
%"class.WTF::VectorBuffer.1283" = type { %"class.WTF::VectorBufferBase.1284" }
%"class.WTF::VectorBufferBase.1284" = type { %"struct.std::__1::pair.1285"*, i32, i32 }
%"struct.std::__1::pair.1285" = type opaque
%"class.blink::HeapVector.1010" = type { %"class.WTF::Vector.1013" }
%"class.WTF::Vector.1013" = type { %"class.WTF::VectorBuffer.1014" }
%"class.WTF::VectorBuffer.1014" = type { %"class.WTF::VectorBufferBase.1015" }
%"class.WTF::VectorBufferBase.1015" = type { %"struct.std::__1::pair.1016"*, i32, i32 }
%"struct.std::__1::pair.1016" = type opaque
%"class.blink::HeapHashSet.1287" = type { %"class.WTF::HashSet.1290" }
%"class.WTF::HashSet.1290" = type { %"class.WTF::HashTable.1291" }
%"class.WTF::HashTable.1291" = type <{ %"class.blink::WeakMember.1293"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1293" = type { %"class.blink::MemberBase.390" }
%"class.blink::HeapHashMap.1294" = type { %"class.WTF::HashMap.1297" }
%"class.WTF::HashMap.1297" = type { %"class.WTF::HashTable.1298" }
%"class.WTF::HashTable.1298" = type <{ %"struct.WTF::KeyValuePair.1300"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1300" = type { %"class.WTF::AtomicString", %"class.blink::Member.1180" }
%"class.blink::Member.1301" = type { %"class.blink::MemberBase.1302" }
%"class.blink::MemberBase.1302" = type { %"class.blink::CounterStyleMap"* }
%"class.blink::CounterStyleMap" = type opaque
%"class.blink::HeapHashMap.1303" = type { %"class.WTF::HashMap.1306" }
%"class.WTF::HashMap.1306" = type { %"class.WTF::HashTable.1307" }
%"class.WTF::HashTable.1307" = type <{ %"struct.WTF::KeyValuePair.1309"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1309" = type opaque
%class.scoped_refptr.1310 = type { %"class.blink::DocumentStyleEnvironmentVariables"* }
%"class.blink::DocumentStyleEnvironmentVariables" = type opaque
%"class.blink::Member.1215" = type { %"class.blink::MemberBase.1216" }
%"class.blink::MemberBase.1216" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::HeapHashSet.1311" = type { %"class.WTF::HashSet.1314" }
%"class.WTF::HashSet.1314" = type { %"class.WTF::HashTable.1315" }
%"class.WTF::HashTable.1315" = type <{ %"class.blink::Member.1317"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1317" = type opaque
%"class.blink::Member.1318" = type { %"class.blink::MemberBase.1319" }
%"class.blink::MemberBase.1319" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.320", %"class.blink::HeapVector.383" }
%"class.blink::Member.1320" = type { %"class.blink::MemberBase.1321" }
%"class.blink::MemberBase.1321" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.1322" = type { %"class.blink::MemberBase.1323" }
%"class.blink::MemberBase.1323" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.1324" = type { %"class.WTF::HashMap.1327" }
%"class.WTF::HashMap.1327" = type { %"class.WTF::HashTable.1328" }
%"class.WTF::HashTable.1328" = type <{ %"struct.WTF::KeyValuePair.1330"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1330" = type opaque
%"class.WTF::Vector.1331" = type { %"class.WTF::VectorBuffer.1332" }
%"class.WTF::VectorBuffer.1332" = type { %"class.WTF::VectorBufferBase.1333" }
%"class.WTF::VectorBufferBase.1333" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.1336" = type { %"class.blink::MemberBase.1337" }
%"class.blink::MemberBase.1337" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.1338" = type { %"class.blink::MemberBase.1339" }
%"class.blink::MemberBase.1339" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.343" = type { %"class.blink::MemberBase.344" }
%"class.blink::MemberBase.344" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.348" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.345 }
%class.scoped_refptr.345 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.346", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.346" = type { %"class.base::RefCounted.347" }
%"class.base::RefCounted.347" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.348" = type { %"class.blink::MemberBase.349" }
%"class.blink::MemberBase.349" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.352", %"class.blink::Member.354", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.352" = type { %"class.WTF::SingleThreadedBitField.353" }
%"class.WTF::SingleThreadedBitField.353" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.358 }
%class.scoped_refptr.358 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.359", %"class.WTF::AtomicString", %"class.WTF::Vector.361" }
%"class.WTF::RefCounted.359" = type { %"class.base::RefCounted.360" }
%"class.base::RefCounted.360" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.361" = type { %"class.WTF::VectorBuffer.362" }
%"class.WTF::VectorBuffer.362" = type { %"class.WTF::VectorBufferBase.286", [32 x i8] }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.1340" = type { %"class.blink::MemberBase.1341" }
%"class.blink::MemberBase.1341" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.1342" = type { %"class.WTF::Vector.1345" }
%"class.WTF::Vector.1345" = type { %"class.WTF::VectorBuffer.1346" }
%"class.WTF::VectorBuffer.1346" = type { %"class.WTF::VectorBufferBase.1347" }
%"class.WTF::VectorBufferBase.1347" = type { %"class.blink::Member.1348"*, i32, i32 }
%"class.blink::Member.1348" = type opaque
%"class.std::__1::unique_ptr.1350" = type { %"class.std::__1::__compressed_pair.1351" }
%"class.std::__1::__compressed_pair.1351" = type { %"struct.std::__1::__compressed_pair_elem.1352" }
%"struct.std::__1::__compressed_pair_elem.1352" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.1356" = type { %"class.WTF::HashSet.1359" }
%"class.WTF::HashSet.1359" = type { %"class.WTF::HashTable.1360" }
%"class.WTF::HashTable.1360" = type <{ %"class.blink::WeakMember.1362"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1362" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.1363", i32, [4 x i8] }>
%"class.WTF::Vector.1363" = type { %"class.WTF::VectorBuffer.1364" }
%"class.WTF::VectorBuffer.1364" = type { %"class.WTF::VectorBufferBase.1365" }
%"class.WTF::VectorBufferBase.1365" = type { %"struct.std::__1::pair.1366"*, i32, i32 }
%"struct.std::__1::pair.1366" = type opaque
%"class.blink::Member.1369" = type { %"class.blink::MemberBase.1370" }
%"class.blink::MemberBase.1370" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.1371" = type { %"class.WTF::VectorBuffer.1372" }
%"class.WTF::VectorBuffer.1372" = type { %"class.WTF::VectorBufferBase.1373" }
%"class.WTF::VectorBufferBase.1373" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type <{ %"struct.blink::PhysicalRect", i8, [3 x i8] }>
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.std::__1::unique_ptr.1376" = type { %"class.std::__1::__compressed_pair.1377" }
%"class.std::__1::__compressed_pair.1377" = type { %"struct.std::__1::__compressed_pair_elem.1378" }
%"struct.std::__1::__compressed_pair_elem.1378" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.365" = type { %"class.WTF::Vector.368" }
%"class.WTF::Vector.368" = type { %"class.WTF::VectorBuffer.369" }
%"class.WTF::VectorBuffer.369" = type { %"class.WTF::VectorBufferBase.370" }
%"class.WTF::VectorBufferBase.370" = type { %"class.blink::Member.343"*, i32, i32 }
%"class.blink::HeapVector.1382" = type { %"class.WTF::Vector.1385" }
%"class.WTF::Vector.1385" = type { %"class.WTF::VectorBuffer.1386" }
%"class.WTF::VectorBuffer.1386" = type { %"class.WTF::VectorBufferBase.1387" }
%"class.WTF::VectorBufferBase.1387" = type { %"class.blink::Member.1388"*, i32, i32 }
%"class.blink::Member.1388" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.326" }
%"class.blink::Member.1390" = type { %"class.blink::MemberBase.1391" }
%"class.blink::MemberBase.1391" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1392" = type { %"class.blink::MemberBase.1393" }
%"class.blink::MemberBase.1393" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1394" = type { %"class.blink::MemberBase.1395" }
%"class.blink::MemberBase.1395" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1396" = type { %"class.blink::MemberBase.1397" }
%"class.blink::MemberBase.1397" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1398" = type { %"class.blink::MemberBase.1399" }
%"class.blink::MemberBase.1399" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1400" = type { %"class.WTF::HashTable.1401" }
%"class.WTF::HashTable.1401" = type <{ %"struct.WTF::KeyValuePair.1404"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1404" = type opaque
%"class.blink::Member.1405" = type { %"class.blink::MemberBase.1406" }
%"class.blink::MemberBase.1406" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1407" = type { %"class.blink::MemberBase.1408" }
%"class.blink::MemberBase.1408" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1409" = type { %"class.blink::MemberBase.1410" }
%"class.blink::MemberBase.1410" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1411" = type { %"class.blink::MemberBase.1412" }
%"class.blink::MemberBase.1412" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.966", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.963, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.963 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.964" }>
%"class.base::RefCountedThreadSafe.964" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.965 }
%class.scoped_refptr.965 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::WeakMember.966" = type { %"class.blink::MemberBase.327" }
%"class.blink::HeapHashSet.1413" = type { %"class.WTF::HashSet.1416" }
%"class.WTF::HashSet.1416" = type { %"class.WTF::HashTable.1417" }
%"class.WTF::HashTable.1417" = type <{ %"class.blink::Member.1419"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1419" = type opaque
%"class.blink::Member.1420" = type { %"class.blink::MemberBase.1421" }
%"class.blink::MemberBase.1421" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1422" = type { %"class.blink::MemberBase.1423" }
%"class.blink::MemberBase.1423" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1424" = type { %"class.blink::MemberBase.1425" }
%"class.blink::MemberBase.1425" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1426" = type { %"class.blink::MemberBase.1427" }
%"class.blink::MemberBase.1427" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1428" = type { %"class.blink::MemberBase.1429" }
%"class.blink::MemberBase.1429" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1430" = type { %"class.std::__1::__compressed_pair.1431" }
%"class.std::__1::__compressed_pair.1431" = type { %"struct.std::__1::__compressed_pair_elem.1432" }
%"struct.std::__1::__compressed_pair_elem.1432" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1436" = type { %"class.std::__1::__compressed_pair.1437" }
%"class.std::__1::__compressed_pair.1437" = type { %"struct.std::__1::__compressed_pair_elem.1438" }
%"struct.std::__1::__compressed_pair_elem.1438" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type { %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", i32, [4 x i8], %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", i64, i64, %"class.ukm::UkmRecorder"*, i64, %"class.blink::TaskRunnerTimer" }
%"class.WTF::HashMap.1439" = type { %"class.WTF::HashTable.1440" }
%"class.WTF::HashTable.1440" = type <{ %"struct.WTF::KeyValuePair.1443"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1443" = type opaque
%"class.blink::TaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::FontMatchingMetrics"*, { i64, i64 } }
%"class.blink::Member.1447" = type { %"class.blink::MemberBase.1448" }
%"class.blink::MemberBase.1448" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1449" = type { %"class.blink::MemberBase.1450" }
%"class.blink::MemberBase.1450" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1451" = type { %"class.blink::MemberBase.1452" }
%"class.blink::MemberBase.1452" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1453" = type { %"class.blink::MemberBase.1454" }
%"class.blink::MemberBase.1454" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.1455" = type { %"class.WTF::VectorBuffer.1456" }
%"class.WTF::VectorBuffer.1456" = type { %"class.WTF::VectorBufferBase.1457" }
%"class.WTF::VectorBufferBase.1457" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.1460" = type { %"class.WTF::HashMap.1463" }
%"class.WTF::HashMap.1463" = type { %"class.WTF::HashTable.1464" }
%"class.WTF::HashTable.1464" = type <{ %"struct.WTF::KeyValuePair.1466"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1466" = type opaque
%"class.blink::Member.1467" = type { %"class.blink::MemberBase.1468" }
%"class.blink::MemberBase.1468" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1469" = type { %"class.std::__1::__compressed_pair.1470" }
%"class.std::__1::__compressed_pair.1470" = type { %"struct.std::__1::__compressed_pair_elem.1471" }
%"struct.std::__1::__compressed_pair_elem.1471" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1475" = type { %"class.blink::MemberBase.1476" }
%"class.blink::MemberBase.1476" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1477" = type { %"class.blink::MemberBase.1478" }
%"class.blink::MemberBase.1478" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1479" = type { %"class.WTF::HashMap.1482" }
%"class.WTF::HashMap.1482" = type { %"class.WTF::HashTable.1483" }
%"class.WTF::HashTable.1483" = type <{ %"struct.WTF::KeyValuePair.1485"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1485" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1486" }
%"class.blink::HeapHashSet.1486" = type { %"class.WTF::HashSet.1489" }
%"class.WTF::HashSet.1489" = type { %"class.WTF::HashTable.1490" }
%"class.WTF::HashTable.1490" = type <{ %"class.blink::WeakMember.1492"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1492" = type opaque
%"class.blink::Member.1493" = type { %"class.blink::MemberBase.1494" }
%"class.blink::MemberBase.1494" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1495" = type { %"class.blink::MemberBase.1496" }
%"class.blink::MemberBase.1496" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.326", %"class.blink::HeapHashSet.1502", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1509", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1502" = type { %"class.WTF::HashSet.1505" }
%"class.WTF::HashSet.1505" = type { %"class.WTF::HashTable.1506" }
%"class.WTF::HashTable.1506" = type <{ %"class.blink::Member.1508"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1508" = type opaque
%"class.blink::HeapTaskRunnerTimer.1509" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1510", { i64, i64 } }
%"class.blink::WeakMember.1510" = type { %"class.blink::MemberBase.1496" }
%"class.blink::WeakMember.1497" = type { %"class.blink::MemberBase.319" }
%"class.blink::Member.1498" = type { %"class.blink::MemberBase.1499" }
%"class.blink::MemberBase.1499" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.320" = type { %"class.blink::MemberBase.321" }
%"class.blink::Member.328" = type { %"class.blink::MemberBase.329" }
%"class.blink::MemberBase.329" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.332" }
%"class.blink::HeapHashMap.332" = type { %"class.WTF::HashMap.335" }
%"class.WTF::HashMap.335" = type { %"class.WTF::HashTable.336" }
%"class.WTF::HashTable.336" = type <{ %"struct.WTF::KeyValuePair.338"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.338" = type { %"class.WTF::AtomicString", %"class.blink::Member.339" }
%"class.blink::Member.339" = type { %"class.blink::MemberBase.340" }
%"class.blink::MemberBase.340" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.343", i32, %"class.blink::HeapVector.365" }
%"class.blink::Member.372" = type { %"class.blink::MemberBase.373" }
%"class.blink::MemberBase.373" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.374" = type { %"class.blink::MemberBase.375" }
%"class.blink::MemberBase.375" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.378" }
%"class.blink::Member.378" = type { %"class.blink::MemberBase.379" }
%"class.blink::MemberBase.379" = type { %"class.blink::HeapHashMap.380"* }
%"class.blink::HeapHashMap.380" = type opaque
%"class.blink::Member.381" = type { %"class.blink::MemberBase.382" }
%"class.blink::MemberBase.382" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.383" = type { %"class.WTF::Vector.386" }
%"class.WTF::Vector.386" = type { %"class.WTF::VectorBuffer.387" }
%"class.WTF::VectorBuffer.387" = type { %"class.WTF::VectorBufferBase.388" }
%"class.WTF::VectorBufferBase.388" = type { %"class.blink::Member.389"*, i32, i32 }
%"class.blink::Member.441" = type { %"class.blink::MemberBase.442" }
%"class.blink::MemberBase.442" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.443" = type { %class.scoped_refptr.444 }
%class.scoped_refptr.444 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.445", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.445" = type { %"class.base::RefCounted.446" }
%"class.base::RefCounted.446" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.447" = type { %class.scoped_refptr.448 }
%class.scoped_refptr.448 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.449", [4 x i8], %"class.blink::DataRef.451", %"class.blink::DataRef.517", %"class.blink::TransformOperations", %class.scoped_refptr.298, %"class.blink::Persistent.641", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.449" = type { %"class.base::RefCounted.450" }
%"class.base::RefCounted.450" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.451" = type { %class.scoped_refptr.452 }
%class.scoped_refptr.452 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.453", [4 x i8], %"class.blink::DataRef.455", %"class.blink::Persistent.493", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.453" = type { %"class.base::RefCounted.454" }
%"class.base::RefCounted.454" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.455" = type { %class.scoped_refptr.456 }
%class.scoped_refptr.456 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.457", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.475, %class.scoped_refptr.478, %class.scoped_refptr.481, %class.scoped_refptr.484, %class.scoped_refptr.485, %class.scoped_refptr.486, %"class.blink::Persistent.493", %"class.blink::Persistent.508", %"class.absl::optional.512", %"class.absl::optional.512", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.457" = type { %"class.base::RefCounted.458" }
%"class.base::RefCounted.458" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.459", %"class.std::__1::unique_ptr.464" }
%"class.WTF::Vector.459" = type { %"class.WTF::VectorBuffer.460" }
%"class.WTF::VectorBuffer.460" = type { %"class.WTF::VectorBufferBase.461" }
%"class.WTF::VectorBufferBase.461" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.467", %"class.WTF::Vector.459", i32, i32 }
%"class.WTF::Vector.467" = type { %"class.WTF::VectorBuffer.468" }
%"class.WTF::VectorBuffer.468" = type { %"class.WTF::VectorBufferBase.469" }
%"class.WTF::VectorBufferBase.469" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.475 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.476", [4 x i8] }>
%"class.WTF::RefCounted.476" = type { %"class.base::RefCounted.477" }
%"class.base::RefCounted.477" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.478 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.479", [4 x i8] }>
%"class.WTF::RefCounted.479" = type { %"class.base::RefCounted.480" }
%"class.base::RefCounted.480" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.481 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.482" }>
%"class.WTF::RefCounted.482" = type { %"class.base::RefCounted.483" }
%"class.base::RefCounted.483" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.484 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.485 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.486 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.487", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.487" = type { %"class.base::RefCounted.488" }
%"class.base::RefCounted.488" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.489" }
%"class.blink::DataRef.489" = type { %class.scoped_refptr.490 }
%class.scoped_refptr.490 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.306", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.491" }
%"class.WTF::RefCounted.491" = type { %"class.base::RefCounted.492" }
%"class.base::RefCounted.492" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.508" = type { %"class.blink::PersistentBase.509" }
%"class.blink::PersistentBase.509" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.478, %"class.blink::Member", i32, [4 x i8] }>
%"class.absl::optional.512" = type { %"class.absl::optional_internal::optional_data.513" }
%"class.absl::optional_internal::optional_data.513" = type { %"class.absl::optional_internal::optional_data_base.514" }
%"class.absl::optional_internal::optional_data_base.514" = type { %"class.absl::optional_internal::optional_data_dtor_base.515" }
%"class.absl::optional_internal::optional_data_dtor_base.515" = type { i8, [3 x i8], %union.anon.516 }
%union.anon.516 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.493" = type { %"class.blink::PersistentBase.494" }
%"class.blink::PersistentBase.494" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.497" }
%"class.blink::HeapVector.497" = type { %"class.WTF::Vector.500" }
%"class.WTF::Vector.500" = type { %"class.WTF::VectorBuffer.501" }
%"class.WTF::VectorBuffer.501" = type { %"class.WTF::VectorBufferBase.502" }
%"class.WTF::VectorBufferBase.502" = type { %"class.blink::Member.503"*, i32, i32 }
%"class.blink::Member.503" = type { %"class.blink::MemberBase.504" }
%"class.blink::MemberBase.504" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.517" = type { %class.scoped_refptr.518 }
%class.scoped_refptr.518 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.519", %"class.blink::DataRef.521", %"class.blink::DataRef.525", %"class.blink::DataRef.534", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.553", %"class.std::__1::unique_ptr.564", %"class.std::__1::unique_ptr.602", %"class.std::__1::unique_ptr.613", %"class.std::__1::unique_ptr.624", %"class.WTF::Vector.630", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.519" = type { %"class.base::RefCounted.520" }
%"class.base::RefCounted.520" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.521" = type { %class.scoped_refptr.522 }
%class.scoped_refptr.522 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.523", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.523" = type { %"class.base::RefCounted.524" }
%"class.base::RefCounted.524" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.525" = type { %class.scoped_refptr.526 }
%class.scoped_refptr.526 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.527", [4 x i8], %"class.WTF::Vector.529", i8, [7 x i8] }>
%"class.WTF::RefCounted.527" = type { %"class.base::RefCounted.528" }
%"class.base::RefCounted.528" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.529" = type { %"class.WTF::VectorBuffer.530" }
%"class.WTF::VectorBuffer.530" = type { %"class.WTF::VectorBufferBase.531" }
%"class.WTF::VectorBufferBase.531" = type { i32*, i32, i32 }
%"class.blink::DataRef.534" = type { %class.scoped_refptr.535 }
%class.scoped_refptr.535 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.536", [4 x i8], %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.548", %"class.WTF::Vector.459", %"class.WTF::Vector.459", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.536" = type { %"class.base::RefCounted.537" }
%"class.base::RefCounted.537" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.538" = type { %"class.WTF::HashTable.539" }
%"class.WTF::HashTable.539" = type <{ %"struct.WTF::KeyValuePair.542"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.542" = type { %"class.WTF::String", %"class.WTF::Vector.1738" }
%"class.WTF::Vector.1738" = type { %"class.WTF::VectorBuffer.1739" }
%"class.WTF::VectorBuffer.1739" = type { %"class.WTF::VectorBufferBase.1740" }
%"class.WTF::VectorBufferBase.1740" = type { i64*, i32, i32 }
%"class.WTF::HashMap.543" = type { %"class.WTF::HashTable.544" }
%"class.WTF::HashTable.544" = type <{ %"struct.WTF::KeyValuePair.547"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.547" = type { i64, %"class.WTF::Vector.630" }
%"class.WTF::HashMap.548" = type { %"class.WTF::HashTable.549" }
%"class.WTF::HashTable.549" = type <{ %"struct.WTF::KeyValuePair.552"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.552" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.553" = type { %"class.std::__1::__compressed_pair.554" }
%"class.std::__1::__compressed_pair.554" = type { %"struct.std::__1::__compressed_pair_elem.555" }
%"struct.std::__1::__compressed_pair_elem.555" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.556" }
%"class.WTF::HashMap.556" = type { %"class.WTF::HashTable.557" }
%"class.WTF::HashTable.557" = type <{ %"struct.WTF::KeyValuePair.560"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.560" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.1743", %"class.absl::optional.1743", %"class.absl::optional.1743" }
%"class.absl::optional.1743" = type { %"class.absl::optional_internal::optional_data.1744" }
%"class.absl::optional_internal::optional_data.1744" = type { %"class.absl::optional_internal::optional_data_base.1745" }
%"class.absl::optional_internal::optional_data_base.1745" = type { %"class.absl::optional_internal::optional_data_dtor_base.1746" }
%"class.absl::optional_internal::optional_data_dtor_base.1746" = type { i8, %union.anon.1747 }
%union.anon.1747 = type { i32 }
%"class.std::__1::unique_ptr.564" = type { %"class.std::__1::__compressed_pair.565" }
%"class.std::__1::__compressed_pair.565" = type { %"struct.std::__1::__compressed_pair_elem.566" }
%"struct.std::__1::__compressed_pair_elem.566" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.284", %"class.WTF::Vector.579", %"class.WTF::Vector.567", %"class.WTF::Vector.584", %"class.WTF::Vector.589", %"class.WTF::Vector.594" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.567", %"class.WTF::Vector.567", %"class.WTF::Vector.572" }
%"class.WTF::Vector.572" = type { %"class.WTF::VectorBuffer.573" }
%"class.WTF::VectorBuffer.573" = type { %"class.WTF::VectorBufferBase.574" }
%"class.WTF::VectorBufferBase.574" = type { %class.scoped_refptr.575*, i32, i32 }
%class.scoped_refptr.575 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.576" }
%"class.base::RefCountedThreadSafe.576" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.579" = type { %"class.WTF::VectorBuffer.580" }
%"class.WTF::VectorBuffer.580" = type { %"class.WTF::VectorBufferBase.581" }
%"class.WTF::VectorBufferBase.581" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.567" = type { %"class.WTF::VectorBuffer.568" }
%"class.WTF::VectorBuffer.568" = type { %"class.WTF::VectorBufferBase.569" }
%"class.WTF::VectorBufferBase.569" = type { double*, i32, i32 }
%"class.WTF::Vector.584" = type { %"class.WTF::VectorBuffer.585" }
%"class.WTF::VectorBuffer.585" = type { %"class.WTF::VectorBufferBase.586" }
%"class.WTF::VectorBufferBase.586" = type { i32*, i32, i32 }
%"class.WTF::Vector.589" = type { %"class.WTF::VectorBuffer.590" }
%"class.WTF::VectorBuffer.590" = type { %"class.WTF::VectorBufferBase.591" }
%"class.WTF::VectorBufferBase.591" = type { i32*, i32, i32 }
%"class.WTF::Vector.594" = type { %"class.WTF::VectorBuffer.595" }
%"class.WTF::VectorBuffer.595" = type { %"class.WTF::VectorBufferBase.596" }
%"class.WTF::VectorBufferBase.596" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.602" = type { %"class.std::__1::__compressed_pair.603" }
%"class.std::__1::__compressed_pair.603" = type { %"struct.std::__1::__compressed_pair_elem.604" }
%"struct.std::__1::__compressed_pair_elem.604" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.605" }
%"class.WTF::Vector.605" = type { %"class.WTF::VectorBuffer.606" }
%"class.WTF::VectorBuffer.606" = type { %"class.WTF::VectorBufferBase.607" }
%"class.WTF::VectorBufferBase.607" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.613" = type { %"class.std::__1::__compressed_pair.614" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.615" }
%"struct.std::__1::__compressed_pair_elem.615" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.616" }
%"class.WTF::Vector.616" = type { %"class.WTF::VectorBuffer.617" }
%"class.WTF::VectorBuffer.617" = type { %"class.WTF::VectorBufferBase.618" }
%"class.WTF::VectorBufferBase.618" = type { %"class.blink::Persistent.306"*, i32, i32 }
%"class.std::__1::unique_ptr.624" = type { %"class.std::__1::__compressed_pair.625" }
%"class.std::__1::__compressed_pair.625" = type { %"struct.std::__1::__compressed_pair_elem.626" }
%"struct.std::__1::__compressed_pair_elem.626" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.306", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.635" }
%"class.WTF::Vector.635" = type { %"class.WTF::VectorBuffer.636" }
%"class.WTF::VectorBuffer.636" = type { %"class.WTF::VectorBufferBase.637" }
%"class.WTF::VectorBufferBase.637" = type { %class.scoped_refptr.638*, i32, i32 }
%class.scoped_refptr.638 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.482", [4 x i8] }>
%"class.blink::Persistent.641" = type { %"class.blink::PersistentBase.642" }
%"class.blink::PersistentBase.642" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.645" }
%"class.blink::Member.645" = type { %"class.blink::MemberBase.646" }
%"class.blink::MemberBase.646" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.647" = type { %class.scoped_refptr.648 }
%class.scoped_refptr.648 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.649", [4 x i8], %"class.blink::DataRef.651", %"class.blink::DataRef.655", %"class.blink::DataRef.676", %"class.blink::DataRef.694", %"class.blink::DataRef.706", %"class.blink::DataRef.710", %class.scoped_refptr.680, i32, [4 x i8] }>
%"class.WTF::RefCounted.649" = type { %"class.base::RefCounted.650" }
%"class.base::RefCounted.650" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.651" = type { %class.scoped_refptr.652 }
%class.scoped_refptr.652 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.653", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.653" = type { %"class.base::RefCounted.654" }
%"class.base::RefCounted.654" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.655" = type { %class.scoped_refptr.656 }
%class.scoped_refptr.656 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.657", %class.scoped_refptr.659, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.657" = type { %"class.base::RefCounted.658" }
%"class.base::RefCounted.658" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.659 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.660", %"class.std::__1::unique_ptr.666", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.479" }>
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.blink::Path"* }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.669, i32, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", i8, i8 }>
%class.sk_sp.669 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.670, %class.SkTDArray.671, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.41" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.670 = type { i8*, i32, i32 }
%class.SkTDArray.671 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.672 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.41", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.672 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.238", [3 x i8] }
%"class.blink::DataRef.676" = type { %class.scoped_refptr.677 }
%class.scoped_refptr.677 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.678", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.678" = type { %"class.base::RefCounted.679" }
%"class.base::RefCounted.679" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.680, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.694" = type { %class.scoped_refptr.695 }
%class.scoped_refptr.695 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.696", [4 x i8], %class.scoped_refptr.698, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.696" = type { %"class.base::RefCounted.697" }
%"class.base::RefCounted.697" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.698 = type { %"class.base::RefCountedData.699"* }
%"class.base::RefCountedData.699" = type { %"class.base::RefCountedThreadSafe.700", %"class.WTF::Vector.701" }
%"class.base::RefCountedThreadSafe.700" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.701" = type { %"class.WTF::VectorBuffer.702" }
%"class.WTF::VectorBuffer.702" = type { %"class.WTF::VectorBufferBase.703" }
%"class.WTF::VectorBufferBase.703" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.706" = type { %class.scoped_refptr.707 }
%class.scoped_refptr.707 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.708", %class.scoped_refptr.680, %class.scoped_refptr.680, %class.scoped_refptr.680 }
%"class.WTF::RefCounted.708" = type { %"class.base::RefCounted.709" }
%"class.base::RefCounted.709" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.710" = type { %class.scoped_refptr.711 }
%class.scoped_refptr.711 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.712", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.712" = type { %"class.base::RefCounted.713" }
%"class.base::RefCounted.713" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.680 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.681", %"class.blink::Persistent.683", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.681" = type { %"class.base::RefCounted.682" }
%"class.base::RefCounted.682" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.683" = type { %"class.blink::PersistentBase.684" }
%"class.blink::PersistentBase.684" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::DataRef.714" = type { %class.scoped_refptr.715 }
%class.scoped_refptr.715 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.716", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.716" = type { %"class.base::RefCounted.717" }
%"class.base::RefCounted.717" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.718" = type { %class.scoped_refptr.719 }
%class.scoped_refptr.719 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.720", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.720" = type { %"class.base::RefCounted.721" }
%"class.base::RefCounted.721" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.722" = type { %class.scoped_refptr.723 }
%class.scoped_refptr.723 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.724", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.724" = type { %"class.base::RefCounted.725" }
%"class.base::RefCounted.725" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.726" = type { %class.scoped_refptr.727 }
%class.scoped_refptr.727 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.728", %class.scoped_refptr.730 }
%"class.WTF::RefCounted.728" = type { %"class.base::RefCounted.729" }
%"class.base::RefCounted.729" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.730 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.897", %"class.blink::StyleVariables", %class.scoped_refptr.730 }
%"class.WTF::RefCounted.897" = type { %"class.base::RefCounted.898" }
%"class.base::RefCounted.898" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.731" = type { %"class.base::RefCounted.732" }
%"class.base::RefCounted.732" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.733" = type { %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.735" }
%"struct.std::__1::__compressed_pair_elem.735" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.736" }
%"class.std::__1::unique_ptr.736" = type { %"class.std::__1::__compressed_pair.737" }
%"class.std::__1::__compressed_pair.737" = type { %"struct.std::__1::__compressed_pair_elem.738" }
%"struct.std::__1::__compressed_pair_elem.738" = type { %"class.WTF::Vector.739"* }
%"class.WTF::Vector.739" = type { %"class.WTF::VectorBuffer.1758" }
%"class.WTF::VectorBuffer.1758" = type { %"class.WTF::VectorBufferBase.1759", [32 x i8] }
%"class.WTF::VectorBufferBase.1759" = type { %class.scoped_refptr*, i32, i32 }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.746" }
%"class.blink::MemberBase.746" = type { %"class.blink::Node"* }
%"class.blink::FragmentData" = type { %"struct.blink::PhysicalOffset", %"class.std::__1::unique_ptr.747" }
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"struct.blink::FragmentData::RareData"* }
%"struct.blink::FragmentData::RareData" = type { %"class.std::__1::unique_ptr.750", i64, %"struct.blink::PhysicalOffset", %"class.blink::LayoutUnit", %"class.std::__1::unique_ptr.756", %"class.std::__1::unique_ptr.877", i8, %"class.absl::optional.883", %class.scoped_refptr.859, %"class.blink::CullRect", %"class.blink::CullRect", %"class.std::__1::unique_ptr.888" }
%"class.std::__1::unique_ptr.750" = type { %"class.std::__1::__compressed_pair.751" }
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.blink::PaintLayer"* }
%"class.blink::PaintLayer" = type opaque
%"class.std::__1::unique_ptr.756" = type { %"class.std::__1::__compressed_pair.757" }
%"class.std::__1::__compressed_pair.757" = type { %"struct.std::__1::__compressed_pair_elem.758" }
%"struct.std::__1::__compressed_pair_elem.758" = type { %"class.blink::ObjectPaintProperties"* }
%"class.blink::ObjectPaintProperties" = type { %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.794, %class.scoped_refptr.808, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.849, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.873 }
%class.scoped_refptr.759 = type { %"class.blink::TransformPaintPropertyNode"* }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.776" }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.760", i8, i8, %class.scoped_refptr.762, i32, i32 }
%"class.WTF::RefCounted.760" = type { %"class.base::RefCounted.761" }
%"class.base::RefCounted.761" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.762 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.769, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.770", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.763" }
%"class.std::__1::unique_ptr.763" = type { %"class.std::__1::__compressed_pair.764" }
%"class.std::__1::__compressed_pair.764" = type { %"struct.std::__1::__compressed_pair_elem.765" }
%"struct.std::__1::__compressed_pair_elem.765" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%class.scoped_refptr.769 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.795", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.795" = type { %"class.WTF::RefCounted.796", i8, i8, %class.scoped_refptr.769, i32, i32 }
%"class.WTF::RefCounted.796" = type { %"class.base::RefCounted.797" }
%"class.base::RefCounted.797" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.798" }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntSize" = type { i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.798" = type { %"class.absl::optional_internal::optional_data.799" }
%"class.absl::optional_internal::optional_data.799" = type { %"class.absl::optional_internal::optional_data_base.800" }
%"class.absl::optional_internal::optional_data_base.800" = type { %"class.absl::optional_internal::optional_data_dtor_base.801" }
%"class.absl::optional_internal::optional_data_dtor_base.801" = type { i8, %union.anon.802 }
%union.anon.802 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector", %"struct.cc::TargetSnapAreaElementIds" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.803" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.770" = type { %"class.std::__1::__compressed_pair.771" }
%"class.std::__1::__compressed_pair.771" = type { %"struct.std::__1::__compressed_pair_elem.772" }
%"struct.std::__1::__compressed_pair_elem.772" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.776" = type { %"class.std::__1::__compressed_pair.777" }
%"class.std::__1::__compressed_pair.777" = type { %"struct.std::__1::__compressed_pair_elem.778" }
%"struct.std::__1::__compressed_pair_elem.778" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.779", %"class.std::__1::unique_ptr.785", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.785" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%class.scoped_refptr.794 = type { %"class.blink::ScrollPaintPropertyNode"* }
%class.scoped_refptr.808 = type { %"class.blink::TransformPaintPropertyNodeAlias"* }
%"class.blink::TransformPaintPropertyNodeAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias" }
%class.scoped_refptr.809 = type { %"class.blink::EffectPaintPropertyNode"* }
%"class.blink::EffectPaintPropertyNode" = type { %"class.blink::EffectPaintPropertyNodeOrAlias", %"struct.blink::EffectPaintPropertyNode::State" }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.810" }
%"class.blink::PaintPropertyNode.810" = type { %"class.WTF::RefCounted.811", i8, i8, %class.scoped_refptr.813, i32, i32 }
%"class.WTF::RefCounted.811" = type { %"class.base::RefCounted.812" }
%"class.base::RefCounted.812" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.813 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"struct.blink::EffectPaintPropertyNode::State" = type <{ %class.scoped_refptr.762, %class.scoped_refptr.814, %"class.blink::CompositorFilterOperations", %"class.std::__1::unique_ptr.836", float, i32, i64, %"struct.cc::ElementId", %"class.cc::DocumentTransitionSharedElementId", i8, i8, i8, [5 x i8] }>
%class.scoped_refptr.814 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.851" }
%"class.blink::PaintPropertyNode.851" = type { %"class.WTF::RefCounted.852", i8, i8, %class.scoped_refptr.814, i32, i32 }
%"class.WTF::RefCounted.852" = type { %"class.base::RefCounted.853" }
%"class.base::RefCounted.853" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.815" }
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.831" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.817, [20 x float], i32, [4 x i8], %"class.std::__1::vector.824", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector.824" = type { %"class.std::__1::__vector_base.825" }
%"class.std::__1::__vector_base.825" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.826" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.826" = type { %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.831" = type { %"struct.std::__1::__compressed_pair_elem.832" }
%"struct.std::__1::__compressed_pair_elem.832" = type { %"class.cc::FilterOperation"* }
%"class.std::__1::unique_ptr.836" = type { %"class.std::__1::__compressed_pair.837" }
%"class.std::__1::__compressed_pair.837" = type { %"struct.std::__1::__compressed_pair_elem.838" }
%"struct.std::__1::__compressed_pair_elem.838" = type { %"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo"* }
%"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo" = type { %"class.blink::CompositorFilterOperations", %"class.gfx::RRectF", %"struct.cc::ElementId" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.842" }
%"class.std::__1::vector.842" = type { %"class.std::__1::__vector_base.843" }
%"class.std::__1::__vector_base.843" = type { i32*, i32*, %"class.std::__1::__compressed_pair.844" }
%"class.std::__1::__compressed_pair.844" = type { %"struct.std::__1::__compressed_pair_elem.845" }
%"struct.std::__1::__compressed_pair_elem.845" = type { i32* }
%class.scoped_refptr.849 = type { %"class.blink::EffectPaintPropertyNodeAlias"* }
%"class.blink::EffectPaintPropertyNodeAlias" = type { %"class.blink::EffectPaintPropertyNodeOrAlias" }
%class.scoped_refptr.850 = type { %"class.blink::ClipPaintPropertyNode"* }
%"class.blink::ClipPaintPropertyNode" = type { %"class.blink::ClipPaintPropertyNodeOrAlias", %"struct.blink::ClipPaintPropertyNode::State", %"class.std::__1::unique_ptr.862" }
%"struct.blink::ClipPaintPropertyNode::State" = type { %class.scoped_refptr.762, %"class.absl::optional.854", %class.scoped_refptr.859, %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect" }
%"class.absl::optional.854" = type { %"class.absl::optional_internal::optional_data.855" }
%"class.absl::optional_internal::optional_data.855" = type { %"class.absl::optional_internal::optional_data_base.856" }
%"class.absl::optional_internal::optional_data_base.856" = type { %"class.absl::optional_internal::optional_data_dtor_base.857" }
%"class.absl::optional_internal::optional_data_dtor_base.857" = type { i8, [3 x i8], %union.anon.858 }
%union.anon.858 = type { %"class.blink::FloatClipRect" }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.862" = type { %"class.std::__1::__compressed_pair.863" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.864" }
%"struct.std::__1::__compressed_pair_elem.864" = type { %"class.blink::GeometryMapperClipCache"* }
%"class.blink::GeometryMapperClipCache" = type <{ %"class.WTF::Vector.865", i32, [4 x i8] }>
%"class.WTF::Vector.865" = type { %"class.WTF::VectorBuffer.866" }
%"class.WTF::VectorBuffer.866" = type { %"class.WTF::VectorBufferBase.867" }
%"class.WTF::VectorBufferBase.867" = type { %"struct.blink::GeometryMapperClipCache::ClipCacheEntry"*, i32, i32 }
%"struct.blink::GeometryMapperClipCache::ClipCacheEntry" = type { %"struct.blink::GeometryMapperClipCache::ClipAndTransform", %"class.blink::FloatClipRect", i8, [3 x i8] }
%"struct.blink::GeometryMapperClipCache::ClipAndTransform" = type <{ %"class.blink::ClipPaintPropertyNode"*, %"class.blink::TransformPaintPropertyNode"*, i32, [4 x i8] }>
%class.scoped_refptr.873 = type { %"class.blink::ClipPaintPropertyNodeAlias"* }
%"class.blink::ClipPaintPropertyNodeAlias" = type { %"class.blink::ClipPaintPropertyNodeOrAlias" }
%"class.std::__1::unique_ptr.877" = type { %"class.std::__1::__compressed_pair.878" }
%"class.std::__1::__compressed_pair.878" = type { %"struct.std::__1::__compressed_pair_elem.879" }
%"struct.std::__1::__compressed_pair_elem.879" = type { %"class.blink::RefCountedPropertyTreeState"* }
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.762, %class.scoped_refptr.814, %class.scoped_refptr.813 }
%"class.absl::optional.883" = type { %"class.absl::optional_internal::optional_data.884" }
%"class.absl::optional_internal::optional_data.884" = type { %"class.absl::optional_internal::optional_data_base.885" }
%"class.absl::optional_internal::optional_data_base.885" = type { %"class.absl::optional_internal::optional_data_dtor_base.886" }
%"class.absl::optional_internal::optional_data_dtor_base.886" = type { i8, %union.anon.887 }
%union.anon.887 = type { %"class.blink::IntRect" }
%class.scoped_refptr.859 = type { %"class.blink::RefCountedPath"* }
%"class.blink::RefCountedPath" = type { %"class.blink::Path", %"class.WTF::RefCounted.860", [4 x i8] }
%"class.WTF::RefCounted.860" = type { %"class.base::RefCounted.861" }
%"class.base::RefCounted.861" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CullRect" = type { %"class.blink::IntRect" }
%"class.std::__1::unique_ptr.888" = type { %"class.std::__1::__compressed_pair.889" }
%"class.std::__1::__compressed_pair.889" = type { %"struct.std::__1::__compressed_pair_elem.890" }
%"struct.std::__1::__compressed_pair_elem.890" = type { %"class.blink::FragmentData"* }
%"class.blink::LayoutRectOutsets" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::MinMaxSizes" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%class.scoped_refptr.1631 = type { %"class.blink::NGLayoutResult"* }
%"class.blink::NGLayoutResult" = type opaque
%"class.WTF::Vector.1632" = type { %"class.WTF::VectorBuffer.1633" }
%"class.WTF::VectorBuffer.1633" = type { %"class.WTF::VectorBufferBase.1634", [8 x i8] }
%"class.WTF::VectorBufferBase.1634" = type { %class.scoped_refptr.1631*, i32, i32 }
%"class.std::__1::unique_ptr.1637" = type { %"class.std::__1::__compressed_pair.1638" }
%"class.std::__1::__compressed_pair.1638" = type { %"struct.std::__1::__compressed_pair_elem.1639" }
%"struct.std::__1::__compressed_pair_elem.1639" = type { %"struct.blink::BoxOverflowModel"* }
%"struct.blink::BoxOverflowModel" = type { %"class.absl::optional.1640", %"class.absl::optional.1645", %"class.absl::optional.1650" }
%"class.absl::optional.1640" = type { %"class.absl::optional_internal::optional_data.1641" }
%"class.absl::optional_internal::optional_data.1641" = type { %"class.absl::optional_internal::optional_data_base.1642" }
%"class.absl::optional_internal::optional_data_base.1642" = type { %"class.absl::optional_internal::optional_data_dtor_base.1643" }
%"class.absl::optional_internal::optional_data_dtor_base.1643" = type { i8, %union.anon.1644 }
%union.anon.1644 = type { %"class.blink::BoxLayoutOverflowModel" }
%"class.blink::BoxLayoutOverflowModel" = type { %"class.blink::LayoutRect", %"class.blink::LayoutUnit" }
%"class.absl::optional.1645" = type { %"class.absl::optional_internal::optional_data.1646" }
%"class.absl::optional_internal::optional_data.1646" = type { %"class.absl::optional_internal::optional_data_base.1647" }
%"class.absl::optional_internal::optional_data_base.1647" = type { %"class.absl::optional_internal::optional_data_dtor_base.1648" }
%"class.absl::optional_internal::optional_data_dtor_base.1648" = type { i8, [3 x i8], %union.anon.1649 }
%union.anon.1649 = type { %"class.blink::BoxVisualOverflowModel" }
%"class.blink::BoxVisualOverflowModel" = type <{ %"class.blink::LayoutRect", %"class.blink::LayoutRect", i8, [3 x i8] }>
%"class.absl::optional.1650" = type { %"class.absl::optional_internal::optional_data.1651" }
%"class.absl::optional_internal::optional_data.1651" = type { %"class.absl::optional_internal::optional_data_base.1652" }
%"class.absl::optional_internal::optional_data_base.1652" = type { %"class.absl::optional_internal::optional_data_dtor_base.1653" }
%"class.absl::optional_internal::optional_data_dtor_base.1653" = type { i8, %union.anon.1654 }
%union.anon.1654 = type { %"struct.blink::BoxOverflowModel::PreviousOverflowData" }
%"struct.blink::BoxOverflowModel::PreviousOverflowData" = type { %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect" }
%"struct.blink::BoxLayoutExtraInput" = type opaque
%union.anon.1658 = type { %"class.blink::InlineBox"* }
%"class.blink::InlineBox" = type { %"class.blink::DisplayItemClient.base", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::LineLayoutItem", %"class.blink::LayoutPoint", %"class.blink::LayoutUnit", %"class.blink::InlineBox::InlineBoxBitfields" }
%"class.blink::InlineFlowBox" = type <{ %"class.blink::InlineBox", %"class.std::__1::unique_ptr.1603", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1603" = type { %"class.std::__1::__compressed_pair.1604" }
%"class.std::__1::__compressed_pair.1604" = type { %"struct.std::__1::__compressed_pair_elem.1605" }
%"struct.std::__1::__compressed_pair_elem.1605" = type { %"struct.blink::SimpleOverflowModel"* }
%"struct.blink::SimpleOverflowModel" = type { %"class.absl::optional.1606", %"class.absl::optional.1615" }
%"class.absl::optional.1606" = type { %"class.absl::optional_internal::optional_data.1607" }
%"class.absl::optional_internal::optional_data.1607" = type { %"class.absl::optional_internal::optional_data_base.1608" }
%"class.absl::optional_internal::optional_data_base.1608" = type { %"class.absl::optional_internal::optional_data_dtor_base.1609" }
%"class.absl::optional_internal::optional_data_dtor_base.1609" = type { i8, %union.anon.1610 }
%union.anon.1610 = type { %"class.blink::SimpleLayoutOverflowModel" }
%"class.blink::SimpleLayoutOverflowModel" = type { %"class.blink::LayoutRect" }
%"class.absl::optional.1615" = type { %"class.absl::optional_internal::optional_data.1616" }
%"class.absl::optional_internal::optional_data.1616" = type { %"class.absl::optional_internal::optional_data_base.1617" }
%"class.absl::optional_internal::optional_data_base.1617" = type { %"class.absl::optional_internal::optional_data_dtor_base.1618" }
%"class.absl::optional_internal::optional_data_dtor_base.1618" = type { i8, %union.anon.1619 }
%union.anon.1619 = type { %"class.blink::SimpleVisualOverflowModel" }
%"class.blink::SimpleVisualOverflowModel" = type { %"class.blink::LayoutRect" }
%"class.blink::LineLayoutItem" = type { %"class.blink::LayoutObject"* }
%"class.blink::InlineBox::InlineBoxBitfields" = type { i32 }
%"class.blink::Persistent.1659" = type { %"class.blink::PersistentBase.1660" }
%"class.blink::PersistentBase.1660" = type { %"struct.blink::LayoutBoxRareData"*, %"class.blink::PersistentNodePtr.269" }
%"struct.blink::LayoutBoxRareData" = type { %"class.blink::LayoutMultiColumnSpannerPlaceholder"*, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i8, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutBlock"*, %"class.blink::LayoutBox"*, %"class.std::__1::unique_ptr.1663", %"struct.blink::PhysicalRect", %"class.blink::Member.1673" }
%"class.blink::LayoutMultiColumnSpannerPlaceholder" = type opaque
%"class.blink::LayoutBlock" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16, [6 x i8] }>
%"class.blink::LayoutObjectChildList" = type { %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"* }
%"class.std::__1::unique_ptr.1663" = type { %"class.std::__1::__compressed_pair.1664" }
%"class.std::__1::__compressed_pair.1664" = type { %"struct.std::__1::__compressed_pair_elem.1665" }
%"struct.std::__1::__compressed_pair_elem.1665" = type { %"class.WTF::HashSet.1666"* }
%"class.WTF::HashSet.1666" = type { %"class.WTF::HashTable.1667" }
%"class.WTF::HashTable.1667" = type <{ %"class.blink::LayoutBox"**, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1673" = type { %"class.blink::MemberBase.1674" }
%"class.blink::MemberBase.1674" = type { %"class.blink::CustomLayoutChild"* }
%"class.blink::CustomLayoutChild" = type opaque
%"class.base::RefCountedData.1675" = type { %"class.base::RefCountedThreadSafe.1676", %"class.WTF::Vector.1677" }
%"class.base::RefCountedThreadSafe.1676" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.1677" = type { %"class.WTF::VectorBuffer.1678" }
%"class.WTF::VectorBuffer.1678" = type { %"class.WTF::VectorBufferBase.1679" }
%"class.WTF::VectorBufferBase.1679" = type { %"struct.blink::NGTableTypes::Column"*, i32, i32 }
%"struct.blink::NGTableTypes::Column" = type { %"class.absl::optional.1680", %"class.absl::optional.1680", %"class.absl::optional", %"class.blink::LayoutUnit", i8, i8, i8, i8 }
%"class.absl::optional.1680" = type { %"class.absl::optional_internal::optional_data.1681" }
%"class.absl::optional_internal::optional_data.1681" = type { %"class.absl::optional_internal::optional_data_base.1682" }
%"class.absl::optional_internal::optional_data_base.1682" = type { %"class.absl::optional_internal::optional_data_dtor_base.1683" }
%"class.absl::optional_internal::optional_data_dtor_base.1683" = type { i8, %union.anon.1684 }
%union.anon.1684 = type { %"class.blink::LayoutUnit" }
%"class.WTF::Vector.1687" = type { %"class.WTF::VectorBuffer.1688" }
%"class.WTF::VectorBuffer.1688" = type { %"class.WTF::VectorBufferBase.1689" }
%"class.WTF::VectorBufferBase.1689" = type { %"struct.blink::NGTableTypes::ColspanCell"*, i32, i32 }
%"struct.blink::NGTableTypes::ColspanCell" = type { %"struct.blink::NGTableTypes::CellInlineConstraint", i32, i32 }
%"struct.blink::NGTableTypes::CellInlineConstraint" = type <{ %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.absl::optional", %"class.blink::LayoutUnit", i8, [3 x i8] }>
%"class.WTF::Vector.1692" = type { %"class.WTF::VectorBuffer.1693" }
%"class.WTF::VectorBuffer.1693" = type { %"class.WTF::VectorBufferBase.1694" }
%"class.WTF::VectorBufferBase.1694" = type { %"class.blink::LayoutUnit"*, i32, i32 }
%"struct.blink::NGTableTypes::RowspanCell" = type { %"struct.blink::NGTableTypes::CellBlockConstraint", i32, i32 }
%"struct.blink::NGTableTypes::CellBlockConstraint" = type <{ %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"struct.blink::NGBoxStrut", i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.blink::NGBoxStrut" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.WTF::Vector.1697" = type { %"class.WTF::VectorBuffer.1698" }
%"class.WTF::VectorBuffer.1698" = type { %"class.WTF::VectorBufferBase.1699" }
%"class.WTF::VectorBufferBase.1699" = type { %"struct.blink::NGTableTypes::Row"*, i32, i32 }
%"struct.blink::NGTableTypes::Row" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.absl::optional", i32, i32, i8, i8, i8, i8 }
%"class.WTF::Vector.1702" = type { %"class.WTF::VectorBuffer.1703" }
%"class.WTF::VectorBuffer.1703" = type { %"class.WTF::VectorBufferBase.1704" }
%"class.WTF::VectorBufferBase.1704" = type { %"struct.blink::NGTableTypes::Section"*, i32, i32 }
%"struct.blink::NGTableTypes::Section" = type <{ i32, i32, %"class.blink::LayoutUnit", %"class.absl::optional", i8, i8, i8, i8 }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LayoutUnitEEEmm = comdat any

$_ZNK3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LayoutUnitEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::LayoutUnit]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5blink23NGTableAlgorithmHelpers23ComputeGridInlineMinMaxERKNS_11NGTableNodeERKN4base14RefCountedDataIN3WTF6VectorINS_12NGTableTypes6ColumnELj0ENS6_18PartitionAllocatorEEEEENS_10LayoutUnitEbbb(%"class.blink::NGTableNode"* dereferenceable(16), %"class.base::RefCountedData.1675"* nocapture readonly dereferenceable(24), i32, i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %7, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10)
  store i32 0, i32* %8, align 4
  %11 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %12 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %11, align 8
  %13 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %12, i64 %15
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %19, label %28

18:                                               ; preds = %161
  store i32 %164, i32* %8, align 4
  store i32 %163, i32* %7, align 4
  br label %19

19:                                               ; preds = %6, %18
  %20 = phi i32 [ %165, %18 ], [ 0, %6 ]
  %21 = phi i32 [ %164, %18 ], [ 0, %6 ]
  %22 = phi i32 [ %163, %18 ], [ 0, %6 ]
  %23 = phi float [ %162, %18 ], [ 0.000000e+00, %6 ]
  %24 = phi i32 [ %166, %18 ], [ 0, %6 ]
  %25 = fcmp ogt float %23, 1.000000e+02
  %26 = select i1 %25, float 1.000000e+02, float %23
  %27 = fcmp ogt float %26, 0.000000e+00
  br i1 %27, label %169, label %204

28:                                               ; preds = %6, %161
  %29 = phi float [ %162, %161 ], [ 0.000000e+00, %6 ]
  %30 = phi i32 [ %163, %161 ], [ 0, %6 ]
  %31 = phi i32 [ %164, %161 ], [ 0, %6 ]
  %32 = phi i32 [ %165, %161 ], [ 0, %6 ]
  %33 = phi %"struct.blink::NGTableTypes::Column"* [ %167, %161 ], [ %12, %6 ]
  %34 = phi i32 [ %166, %161 ], [ 0, %6 ]
  br i1 %5, label %35, label %39

35:                                               ; preds = %28
  %36 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 5
  %37 = load i8, i8* %36, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %161

39:                                               ; preds = %35, %28
  %40 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8, i8* %40, align 4, !range !2
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %133, label %43

43:                                               ; preds = %39
  br i1 %3, label %44, label %65

44:                                               ; preds = %43
  %45 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 4
  %46 = load i8, i8* %45, align 4, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %65, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %50 = load i8, i8* %49, align 4, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %65

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %54 = load i8, i8* %53, align 4, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %65, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp slt i32 %58, 0
  %60 = select i1 %59, i32 -2147483648, i32 2147483647
  %61 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %32, i32 %58) #7
  %62 = extractvalue { i32, i1 } %61, 1
  %63 = extractvalue { i32, i1 } %61, 0
  %64 = select i1 %62, i32 %60, i32 %63, !prof !3
  br label %118

65:                                               ; preds = %43, %48, %44, %52
  %66 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %67, 0
  %69 = select i1 %68, i32 -2147483648, i32 2147483647
  %70 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %32, i32 %67) #7
  %71 = extractvalue { i32, i1 } %70, 1
  %72 = extractvalue { i32, i1 } %70, 0
  %73 = select i1 %71, i32 %69, i32 %72, !prof !3
  %74 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %75 = load i8, i8* %74, align 4, !range !2
  %76 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %77 = icmp eq i8 %75, 0
  br i1 %77, label %118, label %78

78:                                               ; preds = %65
  %79 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %80 = load float, float* %79, align 4
  %81 = fcmp ogt float %80, 0.000000e+00
  br i1 %81, label %82, label %118

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %84 = load i8, i8* %83, align 4, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %87, !prof !3

86:                                               ; preds = %82
  tail call void @llvm.trap() #7
  unreachable

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %137

91:                                               ; preds = %87
  %92 = load i8, i8* %76, align 4, !range !2
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %95, !prof !3

94:                                               ; preds = %91
  tail call void @llvm.trap() #7
  unreachable

95:                                               ; preds = %91
  %96 = fdiv float 1.000000e+02, %80
  %97 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 3, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = icmp sgt i32 %98, -1
  %100 = select i1 %99, i32 -2147483648, i32 2147483647
  %101 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %89, i32 %98) #7
  %102 = extractvalue { i32, i1 } %101, 1
  %103 = extractvalue { i32, i1 } %101, 0
  %104 = select i1 %102, i32 %100, i32 %103, !prof !3
  %105 = sitofp i32 %104 to float
  %106 = fmul float %105, 1.562500e-02
  %107 = fmul float %96, %106
  %108 = fmul float %107, 6.400000e+01
  %109 = fcmp ult float %108, 0xC1E0000000000000
  %110 = fcmp ugt float %108, 0x41DFFFFFE0000000
  %111 = fcmp ogt float %108, 0xC1E0000000000000
  %112 = select i1 %111, float %108, float 0xC1E0000000000000
  %113 = fptosi float %112 to i32
  %114 = select i1 %109, i32 0, i32 2147483647
  %115 = select i1 %110, i32 %114, i32 %113
  %116 = icmp slt i32 %31, %115
  %117 = select i1 %116, i32 %115, i32 %31
  br label %137

118:                                              ; preds = %56, %65, %78
  %119 = phi i32 [ %64, %56 ], [ %73, %65 ], [ %73, %78 ]
  %120 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %121 = load i8, i8* %120, align 4, !range !2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %124, !prof !3

123:                                              ; preds = %118
  tail call void @llvm.trap() #7
  unreachable

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %126 = load i32, i32* %125, align 4
  %127 = icmp slt i32 %126, 0
  %128 = select i1 %127, i32 -2147483648, i32 2147483647
  %129 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %34, i32 %126) #7
  %130 = extractvalue { i32, i1 } %129, 1
  %131 = extractvalue { i32, i1 } %129, 0
  %132 = select i1 %130, i32 %128, i32 %131, !prof !3
  br label %137

133:                                              ; preds = %39
  %134 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %135 = load i8, i8* %134, align 4, !range !2
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %149, label %137

137:                                              ; preds = %124, %87, %95, %133
  %138 = phi i32 [ %34, %133 ], [ %132, %124 ], [ %34, %87 ], [ %34, %95 ]
  %139 = phi i32 [ %32, %133 ], [ %119, %124 ], [ %73, %87 ], [ %73, %95 ]
  %140 = phi i32 [ %31, %133 ], [ %31, %124 ], [ %31, %87 ], [ %117, %95 ]
  %141 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp slt i32 %142, 0
  %144 = select i1 %143, i32 -2147483648, i32 2147483647
  %145 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %142) #7
  %146 = extractvalue { i32, i1 } %145, 1
  %147 = extractvalue { i32, i1 } %145, 0
  %148 = select i1 %146, i32 %144, i32 %147, !prof !3
  br label %149

149:                                              ; preds = %133, %137
  %150 = phi i32 [ %34, %133 ], [ %138, %137 ]
  %151 = phi i32 [ %32, %133 ], [ %139, %137 ]
  %152 = phi i32 [ %31, %133 ], [ %140, %137 ]
  %153 = phi i32 [ %30, %133 ], [ %148, %137 ]
  %154 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %155 = load i8, i8* %154, align 4, !range !2
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %149
  %158 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %159 = load float, float* %158, align 4
  %160 = fadd float %159, %29
  br label %161

161:                                              ; preds = %149, %157, %35
  %162 = phi float [ %160, %157 ], [ %29, %149 ], [ %29, %35 ]
  %163 = phi i32 [ %153, %157 ], [ %153, %149 ], [ %30, %35 ]
  %164 = phi i32 [ %152, %157 ], [ %152, %149 ], [ %31, %35 ]
  %165 = phi i32 [ %151, %157 ], [ %151, %149 ], [ %32, %35 ]
  %166 = phi i32 [ %150, %157 ], [ %150, %149 ], [ %34, %35 ]
  %167 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %33, i64 1
  %168 = icmp eq %"struct.blink::NGTableTypes::Column"* %167, %16
  br i1 %168, label %18, label %28

169:                                              ; preds = %19
  %170 = tail call zeroext i1 @_ZNK5blink11NGTableNode22AllowColumnPercentagesEb(%"class.blink::NGTableNode"* %0, i1 zeroext %4) #7
  br i1 %170, label %171, label %204

171:                                              ; preds = %169
  %172 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172)
  store i32 0, i32* %9, align 4
  %173 = icmp eq i32 %24, 0
  br i1 %173, label %191, label %174

174:                                              ; preds = %171
  %175 = fcmp oeq float %26, 1.000000e+02
  br i1 %175, label %176, label %177

176:                                              ; preds = %174
  store i32 64000000, i32* %9, align 4
  br label %191

177:                                              ; preds = %174
  %178 = fsub float 1.000000e+02, %26
  %179 = fdiv float 1.000000e+02, %178
  %180 = sitofp i32 %24 to float
  %181 = fmul float %180, 1.562500e-02
  %182 = fmul float %181, %179
  %183 = fmul float %182, 6.400000e+01
  %184 = fcmp ult float %183, 0xC1E0000000000000
  %185 = fcmp ugt float %183, 0x41DFFFFFE0000000
  %186 = fcmp ogt float %183, 0xC1E0000000000000
  %187 = select i1 %186, float %183, float 0xC1E0000000000000
  %188 = fptosi float %187 to i32
  %189 = select i1 %184, i32 0, i32 2147483647
  %190 = select i1 %185, i32 %189, i32 %188
  store i32 %190, i32* %9, align 4
  br label %191

191:                                              ; preds = %171, %176, %177
  %192 = phi i32 [ 0, %171 ], [ 64000000, %176 ], [ %190, %177 ]
  %193 = icmp slt i32 %22, %192
  %194 = bitcast i32* %9 to %"class.blink::LayoutUnit"*
  %195 = bitcast i32* %7 to %"class.blink::LayoutUnit"*
  %196 = select i1 %193, %"class.blink::LayoutUnit"* %194, %"class.blink::LayoutUnit"* %195
  %197 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %196, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %7, align 4
  %199 = icmp slt i32 %198, %21
  %200 = bitcast i32* %8 to %"class.blink::LayoutUnit"*
  %201 = select i1 %199, %"class.blink::LayoutUnit"* %200, %"class.blink::LayoutUnit"* %195
  %202 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %201, i64 0, i32 0
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172)
  br label %204

204:                                              ; preds = %191, %169, %19
  %205 = phi i32 [ %203, %191 ], [ %22, %169 ], [ %22, %19 ]
  %206 = icmp slt i32 %20, %205
  %207 = select i1 %206, i32 %205, i32 %20
  %208 = icmp slt i32 %2, 0
  %209 = select i1 %208, i32 -2147483648, i32 2147483647
  %210 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %2) #7
  %211 = extractvalue { i32, i1 } %210, 1
  %212 = extractvalue { i32, i1 } %210, 0
  %213 = select i1 %211, i32 %209, i32 %212, !prof !3
  %214 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %207, i32 %2) #7
  %215 = extractvalue { i32, i1 } %214, 1
  %216 = extractvalue { i32, i1 } %214, 0
  %217 = select i1 %215, i32 %209, i32 %216, !prof !3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10)
  %218 = zext i32 %217 to i64
  %219 = shl nuw i64 %218, 32
  %220 = zext i32 %213 to i64
  %221 = or i64 %219, %220
  ret i64 %221
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK5blink11NGTableNode22AllowColumnPercentagesEb(%"class.blink::NGTableNode"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23NGTableAlgorithmHelpers31DistributeColspanCellsToColumnsERKN3WTF6VectorINS_12NGTableTypes11ColspanCellELj0ENS1_18PartitionAllocatorEEENS_10LayoutUnitEbPN4base14RefCountedDataINS2_INS3_6ColumnELj0ES5_EEEE(%"class.WTF::Vector.1687"* nocapture readonly dereferenceable(16), i32, i1 zeroext, %"class.base::RefCountedData.1675"*) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca %"class.WTF::Vector.1692", align 8
  %7 = alloca %"class.WTF::Vector.1692", align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::NGTableTypes::ColspanCell"*, %"struct.blink::NGTableTypes::ColspanCell"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %0, i64 0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %9, i64 %12
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %3, i64 0, i32 1, i32 0, i32 0, i32 2
  %17 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %3, i64 0, i32 1
  %18 = icmp slt i32 %1, 0
  %19 = select i1 %18, i32 -2147483648, i32 2147483647
  %20 = bitcast i32* %5 to i8*
  %21 = bitcast i32* %5 to %"class.blink::LayoutUnit"*
  %22 = bitcast %"class.WTF::Vector.1692"* %6 to i8*
  %23 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %6, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %6, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %6, i64 0, i32 0, i32 0, i32 2
  %26 = bitcast %"class.WTF::Vector.1692"* %6 to i64*
  %27 = bitcast %"class.WTF::Vector.1692"* %7 to i8*
  %28 = bitcast %"class.WTF::Vector.1692"* %7 to i64*
  %29 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %7, i64 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %7, i64 0, i32 0, i32 0, i32 2
  %31 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %7, i64 0, i32 0, i32 0, i32 0
  br label %33

32:                                               ; preds = %582, %4
  ret void

33:                                               ; preds = %15, %582
  %34 = phi %"struct.blink::NGTableTypes::ColspanCell"* [ %9, %15 ], [ %583, %582 ]
  br i1 %2, label %35, label %276

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = tail call dereferenceable(32) %"struct.blink::NGTableTypes::Column"* @_ZN3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1677"* %17, i32 %37) #7
  %39 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %38, i64 %41
  %43 = icmp eq i32 %40, 0
  br i1 %43, label %74, label %44

44:                                               ; preds = %35
  %45 = shl nuw nsw i64 %41, 5
  %46 = add nsw i64 %45, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 1
  %50 = icmp eq i64 %46, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = sub nuw nsw i64 %48, %49
  br label %80

53:                                               ; preds = %619, %44
  %54 = phi i32 [ undef, %44 ], [ %620, %619 ]
  %55 = phi i32 [ undef, %44 ], [ %621, %619 ]
  %56 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %44 ], [ %623, %619 ]
  %57 = phi i8 [ 1, %44 ], [ %622, %619 ]
  %58 = phi i32 [ 0, %44 ], [ %621, %619 ]
  %59 = phi i32 [ 0, %44 ], [ %620, %619 ]
  %60 = icmp eq i64 %49, 0
  br i1 %60, label %74, label %61

61:                                               ; preds = %53
  %62 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %56, i64 0, i32 7
  %63 = load i8, i8* %62, align 1, !range !2
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %74

65:                                               ; preds = %61
  %66 = add i32 %58, 1
  %67 = and i8 %57, 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %65
  %70 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 %1) #7
  %71 = extractvalue { i32, i1 } %70, 1
  %72 = extractvalue { i32, i1 } %70, 0
  %73 = select i1 %71, i32 %19, i32 %72, !prof !3
  br label %74

74:                                               ; preds = %53, %61, %65, %69, %35
  %75 = phi i32 [ 0, %35 ], [ %54, %53 ], [ %73, %69 ], [ %59, %65 ], [ %59, %61 ]
  %76 = phi i32 [ 0, %35 ], [ %55, %53 ], [ %66, %69 ], [ %66, %65 ], [ %58, %61 ]
  %77 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 4
  %78 = load i8, i8* %77, align 4, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %116, label %105

80:                                               ; preds = %619, %51
  %81 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %51 ], [ %623, %619 ]
  %82 = phi i8 [ 1, %51 ], [ %622, %619 ]
  %83 = phi i32 [ 0, %51 ], [ %621, %619 ]
  %84 = phi i32 [ 0, %51 ], [ %620, %619 ]
  %85 = phi i64 [ %52, %51 ], [ %624, %619 ]
  %86 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %81, i64 0, i32 7
  %87 = load i8, i8* %86, align 1, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %89, label %98

89:                                               ; preds = %80
  %90 = add i32 %83, 1
  %91 = and i8 %82, 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %84, i32 %1) #7
  %95 = extractvalue { i32, i1 } %94, 1
  %96 = extractvalue { i32, i1 } %94, 0
  %97 = select i1 %95, i32 %19, i32 %96, !prof !3
  br label %98

98:                                               ; preds = %93, %89, %80
  %99 = phi i32 [ %97, %93 ], [ %84, %89 ], [ %84, %80 ]
  %100 = phi i32 [ %90, %93 ], [ %90, %89 ], [ %83, %80 ]
  %101 = phi i8 [ %82, %93 ], [ 0, %89 ], [ %82, %80 ]
  %102 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %81, i64 1, i32 7
  %103 = load i8, i8* %102, align 1, !range !2
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %610, label %619

105:                                              ; preds = %74
  %106 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = icmp sgt i32 %75, -1
  %109 = select i1 %108, i32 -2147483648, i32 2147483647
  %110 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %107, i32 %75) #7
  %111 = extractvalue { i32, i1 } %110, 1
  %112 = extractvalue { i32, i1 } %110, 0
  %113 = select i1 %111, i32 %109, i32 %112, !prof !3
  %114 = icmp sgt i32 %113, 0
  %115 = select i1 %114, i32 %113, i32 0
  br label %116

116:                                              ; preds = %74, %105
  %117 = phi i32 [ %115, %105 ], [ 0, %74 ]
  %118 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 1, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = icmp sgt i32 %75, -1
  %121 = select i1 %120, i32 -2147483648, i32 2147483647
  %122 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %119, i32 %75) #7
  %123 = extractvalue { i32, i1 } %122, 1
  %124 = extractvalue { i32, i1 } %122, 0
  %125 = select i1 %123, i32 %121, i32 %124, !prof !3
  %126 = icmp sgt i32 %125, 0
  %127 = select i1 %126, i32 %125, i32 0
  %128 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %129 = load i8, i8* %128, align 4, !range !2
  %130 = icmp eq i8 %129, 0
  %131 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %132 = load float, float* %131, align 4
  %133 = select i1 %130, float 0.000000e+00, float %132
  %134 = uitofp i32 %76 to float
  %135 = sitofp i32 %117 to float
  %136 = fmul float %135, 1.562500e-02
  %137 = fdiv float %136, %134
  %138 = fmul float %137, 6.400000e+01
  %139 = fcmp ult float %138, 0xC1E0000000000000
  %140 = fcmp ugt float %138, 0x41DFFFFFE0000000
  %141 = fcmp ogt float %138, 0xC1E0000000000000
  %142 = select i1 %141, float %138, float 0xC1E0000000000000
  %143 = fptosi float %142 to i32
  %144 = select i1 %139, i32 0, i32 2147483647
  %145 = select i1 %140, i32 %144, i32 %143
  %146 = sitofp i32 %127 to float
  %147 = fmul float %146, 1.562500e-02
  %148 = fdiv float %147, %134
  %149 = fmul float %148, 6.400000e+01
  %150 = fcmp ult float %149, 0xC1E0000000000000
  %151 = fcmp ugt float %149, 0x41DFFFFFE0000000
  %152 = fcmp ogt float %149, 0xC1E0000000000000
  %153 = select i1 %152, float %149, float 0xC1E0000000000000
  %154 = fptosi float %153 to i32
  %155 = select i1 %150, i32 0, i32 2147483647
  %156 = select i1 %151, i32 %155, i32 %154
  br i1 %130, label %160, label %157

157:                                              ; preds = %116
  %158 = fdiv float %132, %134
  %159 = bitcast float %158 to i32
  br label %160

160:                                              ; preds = %157, %116
  %161 = phi i32 [ %159, %157 ], [ -1, %116 ]
  %162 = phi float [ %158, %157 ], [ 0xFFFFFFFFE0000000, %116 ]
  %163 = phi i8 [ 1, %157 ], [ 0, %116 ]
  %164 = phi i32 [ 0, %157 ], [ -1431655936, %116 ]
  br i1 %43, label %173, label %165

165:                                              ; preds = %160
  %166 = icmp sgt i32 %145, -1
  %167 = select i1 %166, i32 -2147483648, i32 2147483647
  %168 = icmp sgt i32 %156, -1
  %169 = select i1 %168, i32 -2147483648, i32 2147483647
  %170 = icmp ne i8 %163, 0
  %171 = zext i8 %163 to i32
  %172 = or i32 %164, %171
  br label %205

173:                                              ; preds = %254, %160
  %174 = phi i32 [ %127, %160 ], [ %255, %254 ]
  %175 = phi i32 [ %117, %160 ], [ %256, %254 ]
  %176 = phi float [ %133, %160 ], [ %257, %254 ]
  %177 = phi %"struct.blink::NGTableTypes::Column"* [ inttoptr (i64 -6148914691236517206 to %"struct.blink::NGTableTypes::Column"*), %160 ], [ %258, %254 ]
  %178 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %177, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load i8, i8* %178, align 4, !range !2
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %181, label %182, !prof !3

181:                                              ; preds = %173
  tail call void @llvm.trap() #7
  unreachable

182:                                              ; preds = %173
  %183 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %177, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %184 = load i32, i32* %183, align 4
  %185 = icmp slt i32 %175, 0
  %186 = select i1 %185, i32 -2147483648, i32 2147483647
  %187 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %184, i32 %175) #7
  %188 = extractvalue { i32, i1 } %187, 1
  %189 = extractvalue { i32, i1 } %187, 0
  %190 = select i1 %188, i32 %186, i32 %189, !prof !3
  store i32 %190, i32* %183, align 4
  %191 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %177, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %192 = load i8, i8* %191, align 4, !range !2
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %194, label %195, !prof !3

194:                                              ; preds = %182
  tail call void @llvm.trap() #7
  unreachable

195:                                              ; preds = %182
  %196 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %177, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %197 = load i32, i32* %196, align 4
  %198 = icmp slt i32 %174, 0
  %199 = select i1 %198, i32 -2147483648, i32 2147483647
  %200 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %197, i32 %174) #7
  %201 = extractvalue { i32, i1 } %200, 1
  %202 = extractvalue { i32, i1 } %200, 0
  %203 = select i1 %201, i32 %199, i32 %202, !prof !3
  store i32 %203, i32* %196, align 4
  %204 = icmp eq i8 %163, 0
  br i1 %204, label %582, label %261

205:                                              ; preds = %254, %165
  %206 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %165 ], [ %259, %254 ]
  %207 = phi %"struct.blink::NGTableTypes::Column"* [ inttoptr (i64 -6148914691236517206 to %"struct.blink::NGTableTypes::Column"*), %165 ], [ %258, %254 ]
  %208 = phi float [ %133, %165 ], [ %257, %254 ]
  %209 = phi i32 [ %117, %165 ], [ %256, %254 ]
  %210 = phi i32 [ %127, %165 ], [ %255, %254 ]
  %211 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 7
  %212 = load i8, i8* %211, align 1, !range !2
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %214, label %254

214:                                              ; preds = %205
  %215 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %209, i32 %145) #7
  %216 = extractvalue { i32, i1 } %215, 1
  %217 = extractvalue { i32, i1 } %215, 0
  %218 = select i1 %216, i32 %167, i32 %217, !prof !3
  %219 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %210, i32 %156) #7
  %220 = extractvalue { i32, i1 } %219, 1
  %221 = extractvalue { i32, i1 } %219, 0
  %222 = select i1 %220, i32 %169, i32 %221, !prof !3
  %223 = fsub float %208, %162
  %224 = select i1 %170, float %223, float %208
  %225 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %226 = load i8, i8* %225, align 4, !range !2
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %228, label %234

228:                                              ; preds = %214
  %229 = load i8, i8* %77, align 4, !range !2
  %230 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 4
  %231 = load i8, i8* %230, align 4, !range !2
  %232 = or i8 %231, %229
  store i8 %232, i8* %230, align 4
  %233 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %145, i32* %233, align 4
  store i8 1, i8* %225, align 4
  br label %234

234:                                              ; preds = %228, %214
  %235 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %236 = load i8, i8* %235, align 4, !range !2
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %238, label %244

238:                                              ; preds = %234
  %239 = load i8, i8* %77, align 4, !range !2
  %240 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 4
  %241 = load i8, i8* %240, align 4, !range !2
  %242 = or i8 %241, %239
  store i8 %242, i8* %240, align 4
  %243 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %156, i32* %243, align 4
  store i8 1, i8* %235, align 4
  br label %244

244:                                              ; preds = %238, %234
  %245 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 2
  %246 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %245, i64 0, i32 0, i32 0, i32 0, i32 0
  %247 = load i8, i8* %246, align 4, !range !2
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %249, label %254

249:                                              ; preds = %244
  br i1 %170, label %250, label %254

250:                                              ; preds = %249
  %251 = bitcast %"class.absl::optional"* %245 to i32*
  store i32 %172, i32* %251, align 4
  %252 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %253 = bitcast %union.anon.40* %252 to i32*
  store i32 %161, i32* %253, align 4
  br label %254

254:                                              ; preds = %250, %249, %244, %205
  %255 = phi i32 [ %222, %244 ], [ %222, %250 ], [ %222, %249 ], [ %210, %205 ]
  %256 = phi i32 [ %218, %244 ], [ %218, %250 ], [ %218, %249 ], [ %209, %205 ]
  %257 = phi float [ %224, %244 ], [ %223, %250 ], [ %208, %249 ], [ %208, %205 ]
  %258 = phi %"struct.blink::NGTableTypes::Column"* [ %206, %244 ], [ %206, %250 ], [ %206, %249 ], [ %207, %205 ]
  %259 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %206, i64 1
  %260 = icmp ult %"struct.blink::NGTableTypes::Column"* %259, %42
  br i1 %260, label %205, label %173

261:                                              ; preds = %195
  %262 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %177, i64 0, i32 2
  %263 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %262, i64 0, i32 0, i32 0, i32 0, i32 0
  %264 = load i8, i8* %263, align 4, !range !2
  %265 = icmp eq i8 %264, 0
  br i1 %265, label %266, label %267, !prof !3

266:                                              ; preds = %261
  tail call void @llvm.trap() #7
  unreachable

267:                                              ; preds = %261
  %268 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %177, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %269 = load float, float* %268, align 4
  %270 = fadd float %176, %269
  %271 = bitcast float %270 to i32
  %272 = bitcast %"class.absl::optional"* %262 to i64*
  %273 = zext i32 %271 to i64
  %274 = shl nuw i64 %273, 32
  %275 = or i64 %274, 1
  store i64 %275, i64* %272, align 4
  br label %582

276:                                              ; preds = %33
  %277 = load i32, i32* %16, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %582, label %279

279:                                              ; preds = %276
  %280 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 2
  %281 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 1
  %282 = load i32, i32* %281, align 4
  %283 = sub i32 %277, %282
  %284 = load i32, i32* %280, align 4
  %285 = icmp ult i32 %283, %284
  %286 = select i1 %285, i32 %283, i32 %284
  %287 = tail call dereferenceable(32) %"struct.blink::NGTableTypes::Column"* @_ZN3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1677"* %17, i32 %282) #7
  %288 = zext i32 %286 to i64
  %289 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %287, i64 %288
  %290 = icmp eq i32 %286, 0
  br i1 %290, label %300, label %291

291:                                              ; preds = %279
  %292 = shl nuw nsw i64 %288, 5
  %293 = add nsw i64 %292, -32
  %294 = lshr exact i64 %293, 5
  %295 = add nuw nsw i64 %294, 1
  %296 = and i64 %295, 1
  %297 = icmp eq i64 %293, 0
  br i1 %297, label %303, label %298

298:                                              ; preds = %291
  %299 = sub nuw nsw i64 %295, %296
  br label %355

300:                                              ; preds = %279
  %301 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 0, i32 0
  %302 = load i32, i32* %301, align 4
  br label %326

303:                                              ; preds = %593, %291
  %304 = phi i32 [ undef, %291 ], [ %594, %593 ]
  %305 = phi i8 [ 1, %291 ], [ %595, %593 ]
  %306 = phi %"struct.blink::NGTableTypes::Column"* [ %287, %291 ], [ %596, %593 ]
  %307 = phi i32 [ 0, %291 ], [ %594, %593 ]
  %308 = icmp eq i64 %296, 0
  br i1 %308, label %321, label %309

309:                                              ; preds = %303
  %310 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %306, i64 0, i32 7
  %311 = load i8, i8* %310, align 1, !range !2
  %312 = icmp eq i8 %311, 0
  %313 = and i8 %305, 1
  %314 = icmp eq i8 %313, 0
  %315 = and i1 %312, %314
  br i1 %315, label %316, label %321

316:                                              ; preds = %309
  %317 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %307, i32 %1) #7
  %318 = extractvalue { i32, i1 } %317, 1
  %319 = extractvalue { i32, i1 } %317, 0
  %320 = select i1 %318, i32 %19, i32 %319, !prof !3
  br label %321

321:                                              ; preds = %316, %309, %303
  %322 = phi i32 [ %304, %303 ], [ %320, %316 ], [ %307, %309 ]
  %323 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 0, i32 0
  %324 = load i32, i32* %323, align 4
  %325 = icmp sgt i32 %322, -1
  br i1 %325, label %326, label %329

326:                                              ; preds = %321, %300
  %327 = phi i32 [ %302, %300 ], [ %324, %321 ]
  %328 = phi i32 [ 0, %300 ], [ %322, %321 ]
  br label %329

329:                                              ; preds = %326, %321
  %330 = phi i32 [ %327, %326 ], [ %324, %321 ]
  %331 = phi i32 [ %328, %326 ], [ %322, %321 ]
  %332 = phi i32 [ -2147483648, %326 ], [ 2147483647, %321 ]
  %333 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %330, i32 %331) #7
  %334 = extractvalue { i32, i1 } %333, 1
  %335 = extractvalue { i32, i1 } %333, 0
  %336 = select i1 %334, i32 %332, i32 %335, !prof !3
  %337 = icmp sgt i32 %336, 0
  %338 = select i1 %337, i32 %336, i32 0
  %339 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 1, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %340, i32 %331) #7
  %342 = extractvalue { i32, i1 } %341, 1
  %343 = extractvalue { i32, i1 } %341, 0
  %344 = select i1 %342, i32 %332, i32 %343, !prof !3
  %345 = icmp sgt i32 %344, 0
  %346 = select i1 %345, i32 %344, i32 0
  %347 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 2
  %348 = bitcast %"class.absl::optional"* %347 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %351 = load float, float* %350, align 4
  %352 = trunc i32 %349 to i8
  %353 = icmp eq i8 %352, 0
  br i1 %353, label %471, label %354

354:                                              ; preds = %329
  br i1 %290, label %494, label %388

355:                                              ; preds = %593, %298
  %356 = phi i8 [ 1, %298 ], [ %595, %593 ]
  %357 = phi %"struct.blink::NGTableTypes::Column"* [ %287, %298 ], [ %596, %593 ]
  %358 = phi i32 [ 0, %298 ], [ %594, %593 ]
  %359 = phi i64 [ %299, %298 ], [ %597, %593 ]
  %360 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 0, i32 7
  %361 = load i8, i8* %360, align 1, !range !2
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %371

363:                                              ; preds = %355
  %364 = and i8 %356, 1
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %366, label %371

366:                                              ; preds = %363
  %367 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %358, i32 %1) #7
  %368 = extractvalue { i32, i1 } %367, 1
  %369 = extractvalue { i32, i1 } %367, 0
  %370 = select i1 %368, i32 %19, i32 %369, !prof !3
  br label %371

371:                                              ; preds = %366, %363, %355
  %372 = phi i32 [ %370, %366 ], [ %358, %363 ], [ %358, %355 ]
  %373 = phi i8 [ %356, %366 ], [ 0, %363 ], [ %356, %355 ]
  %374 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 1, i32 7
  %375 = load i8, i8* %374, align 1, !range !2
  %376 = icmp eq i8 %375, 0
  br i1 %376, label %585, label %593

377:                                              ; preds = %430
  %378 = fsub float %351, %432
  %379 = fcmp ule float %378, 0.000000e+00
  %380 = icmp ule i32 %433, %434
  %381 = or i1 %379, %380
  br i1 %381, label %471, label %382

382:                                              ; preds = %377
  %383 = icmp eq i32 %431, 0
  %384 = sitofp i32 %431 to float
  %385 = fmul float %384, 1.562500e-02
  %386 = uitofp i32 %435 to float
  %387 = fdiv float %378, %386
  br label %438

388:                                              ; preds = %354, %430
  %389 = phi %"struct.blink::NGTableTypes::Column"* [ %436, %430 ], [ %287, %354 ]
  %390 = phi i32 [ %435, %430 ], [ 0, %354 ]
  %391 = phi i32 [ %434, %430 ], [ 0, %354 ]
  %392 = phi i32 [ %433, %430 ], [ 0, %354 ]
  %393 = phi float [ %432, %430 ], [ 0.000000e+00, %354 ]
  %394 = phi i32 [ %431, %430 ], [ 0, %354 ]
  %395 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %396 = load i8, i8* %395, align 4, !range !2
  %397 = icmp eq i8 %396, 0
  br i1 %397, label %398, label %400

398:                                              ; preds = %388
  %399 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %399, align 4
  store i8 1, i8* %395, align 4
  br label %400

400:                                              ; preds = %398, %388
  %401 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %402 = load i8, i8* %401, align 4, !range !2
  %403 = icmp eq i8 %402, 0
  br i1 %403, label %404, label %406

404:                                              ; preds = %400
  %405 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %405, align 4
  store i8 1, i8* %401, align 4
  br label %406

406:                                              ; preds = %404, %400
  %407 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 7
  %408 = load i8, i8* %407, align 1, !range !2
  %409 = icmp eq i8 %408, 0
  br i1 %409, label %410, label %430

410:                                              ; preds = %406
  %411 = add i32 %392, 1
  %412 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %413 = load i8, i8* %412, align 4, !range !2
  %414 = icmp eq i8 %413, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %410
  %416 = add i32 %391, 1
  %417 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %418 = load float, float* %417, align 4
  %419 = fadd float %393, %418
  br label %430

420:                                              ; preds = %410
  %421 = add i32 %390, 1
  %422 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %423 = load i32, i32* %422, align 4
  %424 = icmp slt i32 %423, 0
  %425 = select i1 %424, i32 -2147483648, i32 2147483647
  %426 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %394, i32 %423) #7
  %427 = extractvalue { i32, i1 } %426, 1
  %428 = extractvalue { i32, i1 } %426, 0
  %429 = select i1 %427, i32 %425, i32 %428, !prof !3
  br label %430

430:                                              ; preds = %420, %415, %406
  %431 = phi i32 [ %394, %415 ], [ %429, %420 ], [ %394, %406 ]
  %432 = phi float [ %419, %415 ], [ %393, %420 ], [ %393, %406 ]
  %433 = phi i32 [ %411, %415 ], [ %411, %420 ], [ %392, %406 ]
  %434 = phi i32 [ %416, %415 ], [ %391, %420 ], [ %391, %406 ]
  %435 = phi i32 [ %390, %415 ], [ %421, %420 ], [ %390, %406 ]
  %436 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %389, i64 1
  %437 = icmp eq %"struct.blink::NGTableTypes::Column"* %436, %289
  br i1 %437, label %377, label %388

438:                                              ; preds = %468, %382
  %439 = phi %"struct.blink::NGTableTypes::Column"* [ %287, %382 ], [ %469, %468 ]
  %440 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %439, i64 0, i32 2
  %441 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %440, i64 0, i32 0, i32 0, i32 0, i32 0
  %442 = load i8, i8* %441, align 4, !range !2
  %443 = icmp eq i8 %442, 0
  br i1 %443, label %444, label %468

444:                                              ; preds = %438
  %445 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %439, i64 0, i32 7
  %446 = load i8, i8* %445, align 1, !range !2
  %447 = icmp eq i8 %446, 0
  br i1 %447, label %448, label %468

448:                                              ; preds = %444
  br i1 %383, label %461, label %449

449:                                              ; preds = %448
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20)
  store i32 0, i32* %5, align 4
  %450 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %439, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %451 = load i8, i8* %450, align 4, !range !2
  %452 = icmp eq i8 %451, 0
  %453 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %439, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %454 = select i1 %452, %"class.blink::LayoutUnit"* %21, %"class.blink::LayoutUnit"* %453
  %455 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %454, i64 0, i32 0
  %456 = load i32, i32* %455, align 4
  %457 = sitofp i32 %456 to float
  %458 = fmul float %457, 1.562500e-02
  %459 = fmul float %378, %458
  %460 = fdiv float %459, %385
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20)
  br label %461

461:                                              ; preds = %449, %448
  %462 = phi float [ %460, %449 ], [ %387, %448 ]
  %463 = bitcast float %462 to i32
  %464 = bitcast %"class.absl::optional"* %440 to i64*
  %465 = zext i32 %463 to i64
  %466 = shl nuw i64 %465, 32
  %467 = or i64 %466, 1
  store i64 %467, i64* %464, align 4
  br label %468

468:                                              ; preds = %461, %444, %438
  %469 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %439, i64 1
  %470 = icmp eq %"struct.blink::NGTableTypes::Column"* %469, %289
  br i1 %470, label %471, label %438

471:                                              ; preds = %468, %377, %329
  br i1 %290, label %494, label %472

472:                                              ; preds = %471
  %473 = shl nuw nsw i64 %288, 5
  %474 = add nsw i64 %473, -32
  %475 = and i64 %474, 32
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %477, label %491

477:                                              ; preds = %472
  %478 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %287, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %479 = load i8, i8* %478, align 4, !range !2
  %480 = icmp eq i8 %479, 0
  br i1 %480, label %481, label %483

481:                                              ; preds = %477
  %482 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %287, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %482, align 4
  store i8 1, i8* %478, align 4
  br label %483

483:                                              ; preds = %481, %477
  %484 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %287, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %485 = load i8, i8* %484, align 4, !range !2
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %487, label %489

487:                                              ; preds = %483
  %488 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %287, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %488, align 4
  store i8 1, i8* %484, align 4
  br label %489

489:                                              ; preds = %487, %483
  %490 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %287, i64 1
  br label %491

491:                                              ; preds = %489, %472
  %492 = phi %"struct.blink::NGTableTypes::Column"* [ %490, %489 ], [ %287, %472 ]
  %493 = icmp eq i64 %474, 0
  br i1 %493, label %494, label %498

494:                                              ; preds = %491, %607, %471, %354
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 16, i1 false) #7
  call fastcc void @_ZN5blink12_GLOBAL__N_144DistributeInlineSizeToComputedInlineSizeAutoENS_10LayoutUnitES1_PKNS_12NGTableTypes6ColumnES5_(%"class.WTF::Vector.1692"* nonnull sret %6, i32 %338, %"struct.blink::NGTableTypes::Column"* %287, %"struct.blink::NGTableTypes::Column"* %289) #7
  %495 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %23, align 8
  br i1 %290, label %496, label %532

496:                                              ; preds = %494
  %497 = ptrtoint %"class.blink::LayoutUnit"* %495 to i64
  br label %517

498:                                              ; preds = %491, %607
  %499 = phi %"struct.blink::NGTableTypes::Column"* [ %608, %607 ], [ %492, %491 ]
  %500 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %501 = load i8, i8* %500, align 4, !range !2
  %502 = icmp eq i8 %501, 0
  br i1 %502, label %503, label %505

503:                                              ; preds = %498
  %504 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %504, align 4
  store i8 1, i8* %500, align 4
  br label %505

505:                                              ; preds = %503, %498
  %506 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %507 = load i8, i8* %506, align 4, !range !2
  %508 = icmp eq i8 %507, 0
  br i1 %508, label %509, label %511

509:                                              ; preds = %505
  %510 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %510, align 4
  store i8 1, i8* %506, align 4
  br label %511

511:                                              ; preds = %509, %505
  %512 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %513 = load i8, i8* %512, align 4, !range !2
  %514 = icmp eq i8 %513, 0
  br i1 %514, label %599, label %601

515:                                              ; preds = %539
  %516 = load i64, i64* %26, align 8
  br label %517

517:                                              ; preds = %515, %496
  %518 = phi i64 [ %497, %496 ], [ %516, %515 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #7
  call fastcc void @_ZN5blink12_GLOBAL__N_144DistributeInlineSizeToComputedInlineSizeAutoENS_10LayoutUnitES1_PKNS_12NGTableTypes6ColumnES5_(%"class.WTF::Vector.1692"* nonnull sret %7, i32 %346, %"struct.blink::NGTableTypes::Column"* %287, %"struct.blink::NGTableTypes::Column"* %289) #7
  %519 = load i64, i64* %28, align 8
  store atomic i64 %518, i64* %28 monotonic, align 8
  store atomic i64 %519, i64* %26 monotonic, align 8
  %520 = load i32, i32* %24, align 8
  %521 = load i32, i32* %29, align 8
  store i32 %521, i32* %24, align 8
  store i32 %520, i32* %29, align 8
  %522 = load i32, i32* %25, align 4
  %523 = load i32, i32* %30, align 4
  store i32 %523, i32* %25, align 4
  store i32 %522, i32* %30, align 4
  %524 = icmp eq i64 %518, 0
  %525 = inttoptr i64 %518 to i8*
  %526 = inttoptr i64 %519 to %"class.blink::LayoutUnit"*
  br i1 %524, label %531, label %527, !prof !4

527:                                              ; preds = %517
  %528 = icmp eq i32 %522, 0
  br i1 %528, label %530, label %529, !prof !3

529:                                              ; preds = %527
  store i32 0, i32* %30, align 4
  br label %530

530:                                              ; preds = %529, %527
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %525) #7
  store %"class.blink::LayoutUnit"* null, %"class.blink::LayoutUnit"** %31, align 8
  br label %531

531:                                              ; preds = %530, %517
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #7
  br i1 %290, label %553, label %561

532:                                              ; preds = %494, %539
  %533 = phi %"struct.blink::NGTableTypes::Column"* [ %550, %539 ], [ %287, %494 ]
  %534 = phi %"class.blink::LayoutUnit"* [ %551, %539 ], [ %495, %494 ]
  %535 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %533, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %536 = load i8, i8* %535, align 4, !range !2
  %537 = icmp eq i8 %536, 0
  br i1 %537, label %538, label %539, !prof !3

538:                                              ; preds = %532
  tail call void @llvm.trap() #7
  unreachable

539:                                              ; preds = %532
  %540 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %533, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %541 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %540, i64 0, i32 0
  %542 = load i32, i32* %541, align 4
  %543 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %534, i64 0, i32 0
  %544 = load i32, i32* %543, align 4
  %545 = icmp slt i32 %542, %544
  %546 = select i1 %545, %"class.blink::LayoutUnit"* %534, %"class.blink::LayoutUnit"* %540
  %547 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %546, i64 0, i32 0
  %548 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %533, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %549 = load i32, i32* %547, align 4
  store i32 %549, i32* %548, align 4
  %550 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %533, i64 1
  %551 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %534, i64 1
  %552 = icmp eq %"struct.blink::NGTableTypes::Column"* %550, %289
  br i1 %552, label %515, label %532

553:                                              ; preds = %568, %531
  %554 = icmp eq i64 %519, 0
  %555 = inttoptr i64 %519 to i8*
  br i1 %554, label %560, label %556, !prof !4

556:                                              ; preds = %553
  %557 = icmp eq i32 %523, 0
  br i1 %557, label %559, label %558, !prof !3

558:                                              ; preds = %556
  store i32 0, i32* %25, align 4
  br label %559

559:                                              ; preds = %558, %556
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %555) #7
  store %"class.blink::LayoutUnit"* null, %"class.blink::LayoutUnit"** %23, align 8
  br label %560

560:                                              ; preds = %559, %553
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #7
  br label %582

561:                                              ; preds = %531, %568
  %562 = phi %"struct.blink::NGTableTypes::Column"* [ %579, %568 ], [ %287, %531 ]
  %563 = phi %"class.blink::LayoutUnit"* [ %580, %568 ], [ %526, %531 ]
  %564 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %562, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %565 = load i8, i8* %564, align 4, !range !2
  %566 = icmp eq i8 %565, 0
  br i1 %566, label %567, label %568, !prof !3

567:                                              ; preds = %561
  tail call void @llvm.trap() #7
  unreachable

568:                                              ; preds = %561
  %569 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %562, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %570 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %569, i64 0, i32 0
  %571 = load i32, i32* %570, align 4
  %572 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %563, i64 0, i32 0
  %573 = load i32, i32* %572, align 4
  %574 = icmp slt i32 %571, %573
  %575 = select i1 %574, %"class.blink::LayoutUnit"* %563, %"class.blink::LayoutUnit"* %569
  %576 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %575, i64 0, i32 0
  %577 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %562, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %578 = load i32, i32* %576, align 4
  store i32 %578, i32* %577, align 4
  %579 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %562, i64 1
  %580 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %563, i64 1
  %581 = icmp eq %"struct.blink::NGTableTypes::Column"* %579, %289
  br i1 %581, label %553, label %561

582:                                              ; preds = %560, %276, %267, %195
  %583 = getelementptr inbounds %"struct.blink::NGTableTypes::ColspanCell", %"struct.blink::NGTableTypes::ColspanCell"* %34, i64 1
  %584 = icmp eq %"struct.blink::NGTableTypes::ColspanCell"* %583, %13
  br i1 %584, label %32, label %33

585:                                              ; preds = %371
  %586 = and i8 %373, 1
  %587 = icmp eq i8 %586, 0
  br i1 %587, label %588, label %593

588:                                              ; preds = %585
  %589 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %372, i32 %1) #7
  %590 = extractvalue { i32, i1 } %589, 1
  %591 = extractvalue { i32, i1 } %589, 0
  %592 = select i1 %590, i32 %19, i32 %591, !prof !3
  br label %593

593:                                              ; preds = %588, %585, %371
  %594 = phi i32 [ %592, %588 ], [ %372, %585 ], [ %372, %371 ]
  %595 = phi i8 [ %373, %588 ], [ 0, %585 ], [ %373, %371 ]
  %596 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 2
  %597 = add i64 %359, -2
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %303, label %355

599:                                              ; preds = %511
  %600 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %600, align 4
  store i8 1, i8* %512, align 4
  br label %601

601:                                              ; preds = %599, %511
  %602 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %603 = load i8, i8* %602, align 4, !range !2
  %604 = icmp eq i8 %603, 0
  br i1 %604, label %605, label %607

605:                                              ; preds = %601
  %606 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %606, align 4
  store i8 1, i8* %602, align 4
  br label %607

607:                                              ; preds = %605, %601
  %608 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %499, i64 2
  %609 = icmp eq %"struct.blink::NGTableTypes::Column"* %608, %289
  br i1 %609, label %494, label %498

610:                                              ; preds = %98
  %611 = add i32 %100, 1
  %612 = and i8 %101, 1
  %613 = icmp eq i8 %612, 0
  br i1 %613, label %614, label %619

614:                                              ; preds = %610
  %615 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %99, i32 %1) #7
  %616 = extractvalue { i32, i1 } %615, 1
  %617 = extractvalue { i32, i1 } %615, 0
  %618 = select i1 %616, i32 %19, i32 %617, !prof !3
  br label %619

619:                                              ; preds = %614, %610, %98
  %620 = phi i32 [ %618, %614 ], [ %99, %610 ], [ %99, %98 ]
  %621 = phi i32 [ %611, %614 ], [ %611, %610 ], [ %100, %98 ]
  %622 = phi i8 [ %101, %614 ], [ 0, %610 ], [ %101, %98 ]
  %623 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %81, i64 2
  %624 = add i64 %85, -2
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %53, label %80
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23NGTableAlgorithmHelpers46SynchronizeAssignableTableInlineSizeAndColumnsENS_10LayoutUnitES1_bRKN4base14RefCountedDataIN3WTF6VectorINS_12NGTableTypes6ColumnELj0ENS4_18PartitionAllocatorEEEEE(%"class.WTF::Vector.1692"* noalias nocapture sret, i32, i32, i1 zeroext, %"class.base::RefCountedData.1675"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %4, i64 0, i32 1, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %5
  %13 = bitcast %"class.WTF::Vector.1692"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #7
  br label %448

14:                                               ; preds = %5
  br i1 %3, label %15, label %443

15:                                               ; preds = %14
  %16 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %0, i64 0, i32 0, i32 0, i32 1
  %19 = icmp ugt i32 %10, 4
  %20 = select i1 %19, i32 %10, i32 4
  %21 = zext i32 %20 to i64
  %22 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LayoutUnitEEEmm(i64 %21) #7, !noalias !5
  %23 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %22, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LayoutUnitEEEPKcv, i64 0, i64 0)) #7, !noalias !5
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast %"class.WTF::Vector.1692"* %0 to i64*
  store atomic i64 %24, i64* %25 monotonic, align 8, !alias.scope !5
  %26 = lshr i64 %22, 2
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %18, align 8, !alias.scope !5
  %28 = bitcast i8* %23 to %"class.blink::LayoutUnit"*
  %29 = zext i32 %10 to i64
  %30 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %28, i64 %29
  %31 = getelementptr %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %30, i64 -1, i32 0
  %32 = ptrtoint i32* %31 to i64
  %33 = sub i64 4, %24
  %34 = add i64 %33, %32
  %35 = and i64 %34, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 %35, i1 false) #7, !noalias !5
  %36 = load i32, i32* %9, align 4, !noalias !5
  store i32 %10, i32* %17, align 4, !alias.scope !5
  %37 = getelementptr inbounds %"class.base::RefCountedData.1675", %"class.base::RefCountedData.1675"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  %38 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %37, align 8, !noalias !5
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %38, i64 %39
  %41 = icmp eq i32 %36, 0
  %42 = bitcast i8* %23 to %"class.blink::LayoutUnit"*
  br i1 %41, label %227, label %43

43:                                               ; preds = %15
  %44 = sitofp i32 %1 to float
  %45 = fmul float %44, 1.562500e-02
  %46 = bitcast i32* %6 to i8*
  %47 = bitcast i32* %6 to %"class.blink::LayoutUnit"*
  %48 = shl nuw nsw i64 %39, 5
  %49 = add nuw nsw i64 %48, 137438953440
  %50 = lshr exact i64 %49, 5
  %51 = trunc i64 %50 to i32
  br label %55

52:                                               ; preds = %127
  %53 = add i32 %51, 1
  %54 = icmp eq i32 %131, 0
  br i1 %54, label %227, label %136

55:                                               ; preds = %127, %43
  %56 = phi i32 [ 0, %43 ], [ %133, %127 ]
  %57 = phi i32 [ 0, %43 ], [ %132, %127 ]
  %58 = phi i32 [ 0, %43 ], [ %131, %127 ]
  %59 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %43 ], [ %134, %127 ]
  %60 = phi i32 [ 0, %43 ], [ %130, %127 ]
  %61 = phi i32 [ 0, %43 ], [ %129, %127 ]
  %62 = phi i32 [ 0, %43 ], [ %128, %127 ]
  %63 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %64 = load i8, i8* %63, align 4, !range !2, !noalias !5
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %103, label %66

66:                                               ; preds = %55
  %67 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %68 = load float, float* %67, align 4, !noalias !5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46)
  store i32 0, i32* %6, align 4, !noalias !5
  %69 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8, i8* %69, align 4, !range !2, !noalias !5
  %71 = icmp eq i8 %70, 0
  %72 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %73 = select i1 %71, %"class.blink::LayoutUnit"* %47, %"class.blink::LayoutUnit"* %72
  %74 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %73, i64 0, i32 0
  %75 = load i32, i32* %74, align 4, !noalias !5
  %76 = add i32 %56, 1
  %77 = fmul float %45, %68
  %78 = fdiv float %77, 1.000000e+02
  %79 = fmul float %78, 6.400000e+01
  %80 = fcmp ult float %79, 0xC1E0000000000000
  %81 = fcmp ugt float %79, 0x41DFFFFFE0000000
  %82 = fcmp ogt float %79, 0xC1E0000000000000
  %83 = select i1 %82, float %79, float 0xC1E0000000000000
  %84 = fptosi float %83 to i32
  %85 = select i1 %80, i32 0, i32 2147483647
  %86 = select i1 %81, i32 %85, i32 %84
  %87 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 3, i32 0
  %88 = load i32, i32* %87, align 4, !noalias !5
  %89 = icmp slt i32 %88, 0
  %90 = select i1 %89, i32 -2147483648, i32 2147483647
  %91 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %86, i32 %88) #7
  %92 = extractvalue { i32, i1 } %91, 1
  %93 = extractvalue { i32, i1 } %91, 0
  %94 = select i1 %92, i32 %90, i32 %93, !prof !3
  %95 = icmp slt i32 %75, %94
  %96 = select i1 %95, i32 %94, i32 %75
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46)
  %97 = icmp slt i32 %96, 0
  %98 = select i1 %97, i32 -2147483648, i32 2147483647
  %99 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %61, i32 %96) #7
  %100 = extractvalue { i32, i1 } %99, 1
  %101 = extractvalue { i32, i1 } %99, 0
  %102 = select i1 %100, i32 %98, i32 %101, !prof !3
  br label %127

103:                                              ; preds = %55
  %104 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 4
  %105 = load i8, i8* %104, align 4, !range !2, !noalias !5
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %125, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %109 = load i8, i8* %108, align 4, !range !2, !noalias !5
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %125, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %113 = load i32, i32* %112, align 4, !noalias !5
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %123, label %115

115:                                              ; preds = %111
  %116 = add i32 %58, 1
  %117 = icmp slt i32 %113, 0
  %118 = select i1 %117, i32 -2147483648, i32 2147483647
  %119 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %62, i32 %113) #7
  %120 = extractvalue { i32, i1 } %119, 1
  %121 = extractvalue { i32, i1 } %119, 0
  %122 = select i1 %120, i32 %118, i32 %121, !prof !3
  br label %127

123:                                              ; preds = %111
  %124 = add i32 %60, 1
  br label %127

125:                                              ; preds = %107, %103
  %126 = add i32 %57, 1
  br label %127

127:                                              ; preds = %125, %123, %115, %66
  %128 = phi i32 [ %62, %66 ], [ %122, %115 ], [ %62, %123 ], [ %62, %125 ]
  %129 = phi i32 [ %102, %66 ], [ %61, %115 ], [ %61, %123 ], [ %61, %125 ]
  %130 = phi i32 [ %60, %66 ], [ %60, %115 ], [ %124, %123 ], [ %60, %125 ]
  %131 = phi i32 [ %58, %66 ], [ %116, %115 ], [ %58, %123 ], [ %58, %125 ]
  %132 = phi i32 [ %57, %66 ], [ %57, %115 ], [ %57, %123 ], [ %126, %125 ]
  %133 = phi i32 [ %76, %66 ], [ %56, %115 ], [ %56, %123 ], [ %56, %125 ]
  %134 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %59, i64 1
  %135 = icmp eq %"struct.blink::NGTableTypes::Column"* %134, %40
  br i1 %135, label %52, label %55

136:                                              ; preds = %52
  %137 = icmp sgt i32 %129, -1
  %138 = select i1 %137, i32 -2147483648, i32 2147483647
  %139 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %129) #7
  %140 = extractvalue { i32, i1 } %139, 1
  %141 = extractvalue { i32, i1 } %139, 0
  %142 = select i1 %140, i32 %138, i32 %141, !prof !3
  %143 = icmp sgt i32 %142, 0
  %144 = select i1 %143, i32 %142, i32 0
  %145 = icmp slt i32 %128, %144
  %146 = icmp eq i32 %132, 0
  %147 = and i1 %146, %145
  %148 = icmp sgt i32 %128, %1
  %149 = or i1 %148, %147
  br i1 %149, label %150, label %158

150:                                              ; preds = %136
  %151 = icmp eq i32 %128, 0
  br i1 %151, label %158, label %152

152:                                              ; preds = %150
  %153 = sitofp i32 %144 to float
  %154 = fmul float %153, 1.562500e-02
  %155 = sitofp i32 %128 to float
  %156 = fmul float %155, 1.562500e-02
  %157 = fdiv float %154, %156
  br label %158

158:                                              ; preds = %136, %150, %152
  %159 = phi float [ %157, %152 ], [ 1.000000e+00, %136 ], [ 1.000000e+00, %150 ]
  %160 = phi i1 [ true, %152 ], [ true, %136 ], [ false, %150 ]
  %161 = uitofp i32 %131 to float
  %162 = fdiv float %45, %161
  %163 = fmul float %162, 6.400000e+01
  %164 = fcmp ult float %163, 0xC1E0000000000000
  %165 = fcmp ugt float %163, 0x41DFFFFFE0000000
  %166 = fcmp ogt float %163, 0xC1E0000000000000
  %167 = select i1 %166, float %163, float 0xC1E0000000000000
  %168 = fptosi float %167 to i32
  %169 = select i1 %164, i32 0, i32 2147483647
  %170 = select i1 %165, i32 %169, i32 %168
  br label %171

171:                                              ; preds = %217, %158
  %172 = phi i32 [ %36, %158 ], [ %218, %217 ]
  %173 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %158 ], [ %219, %217 ]
  %174 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %158 ], [ %222, %217 ]
  %175 = phi %"class.blink::LayoutUnit"* [ %42, %158 ], [ %223, %217 ]
  %176 = phi %"class.blink::LayoutUnit"* [ null, %158 ], [ %221, %217 ]
  %177 = phi i32 [ 0, %158 ], [ %220, %217 ]
  %178 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %174, i64 0, i32 4
  %179 = load i8, i8* %178, align 4, !range !2, !noalias !5
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %217, label %181

181:                                              ; preds = %171
  %182 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %174, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %183 = load i8, i8* %182, align 4, !range !2, !noalias !5
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %217

185:                                              ; preds = %181
  %186 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %174, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %187 = load i8, i8* %186, align 4, !range !2, !noalias !5
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %217, label %189

189:                                              ; preds = %185
  %190 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %174, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %191 = load i32, i32* %190, align 4, !noalias !5
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %217, label %193

193:                                              ; preds = %189
  br i1 %160, label %194, label %206

194:                                              ; preds = %193
  %195 = sitofp i32 %191 to float
  %196 = fmul float %195, 1.562500e-02
  %197 = fmul float %159, %196
  %198 = fmul float %197, 6.400000e+01
  %199 = fcmp ult float %198, 0xC1E0000000000000
  %200 = fcmp ugt float %198, 0x41DFFFFFE0000000
  %201 = fcmp ogt float %198, 0xC1E0000000000000
  %202 = select i1 %201, float %198, float 0xC1E0000000000000
  %203 = fptosi float %202 to i32
  %204 = select i1 %199, i32 0, i32 2147483647
  %205 = select i1 %200, i32 %204, i32 %203
  br label %206

206:                                              ; preds = %194, %193
  %207 = phi i32 [ %205, %194 ], [ %170, %193 ]
  %208 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %175, i64 0, i32 0
  store i32 %207, i32* %208, align 4, !noalias !5
  %209 = icmp slt i32 %207, 0
  %210 = select i1 %209, i32 -2147483648, i32 2147483647
  %211 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %177, i32 %207) #7
  %212 = extractvalue { i32, i1 } %211, 1
  %213 = extractvalue { i32, i1 } %211, 0
  %214 = select i1 %212, i32 %210, i32 %213, !prof !3
  %215 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %37, align 8, !noalias !5
  %216 = load i32, i32* %9, align 4, !noalias !5
  br label %217

217:                                              ; preds = %206, %189, %185, %181, %171
  %218 = phi i32 [ %216, %206 ], [ %172, %189 ], [ %172, %185 ], [ %172, %181 ], [ %172, %171 ]
  %219 = phi %"struct.blink::NGTableTypes::Column"* [ %215, %206 ], [ %173, %189 ], [ %173, %185 ], [ %173, %181 ], [ %173, %171 ]
  %220 = phi i32 [ %214, %206 ], [ %177, %189 ], [ %177, %185 ], [ %177, %181 ], [ %177, %171 ]
  %221 = phi %"class.blink::LayoutUnit"* [ %175, %206 ], [ %176, %189 ], [ %176, %185 ], [ %176, %181 ], [ %176, %171 ]
  %222 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %174, i64 1
  %223 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %175, i64 1
  %224 = zext i32 %218 to i64
  %225 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %219, i64 %224
  %226 = icmp eq %"struct.blink::NGTableTypes::Column"* %222, %225
  br i1 %226, label %227, label %171

227:                                              ; preds = %217, %52, %15
  %228 = phi i32 [ %53, %52 ], [ 0, %15 ], [ %53, %217 ]
  %229 = phi i32 [ %133, %52 ], [ 0, %15 ], [ %133, %217 ]
  %230 = phi i32 [ %132, %52 ], [ 0, %15 ], [ %132, %217 ]
  %231 = phi i32 [ %130, %52 ], [ 0, %15 ], [ %130, %217 ]
  %232 = phi i32 [ %129, %52 ], [ 0, %15 ], [ %129, %217 ]
  %233 = phi %"struct.blink::NGTableTypes::Column"* [ %38, %52 ], [ %38, %15 ], [ %219, %217 ]
  %234 = phi i32 [ %36, %52 ], [ 0, %15 ], [ %218, %217 ]
  %235 = phi i32 [ 0, %52 ], [ 0, %15 ], [ %220, %217 ]
  %236 = phi %"class.blink::LayoutUnit"* [ null, %52 ], [ null, %15 ], [ %221, %217 ]
  %237 = icmp slt i32 %235, %1
  br i1 %237, label %238, label %448

238:                                              ; preds = %227
  %239 = icmp eq i32 %229, 0
  br i1 %239, label %353, label %240

240:                                              ; preds = %238
  %241 = icmp sgt i32 %235, -1
  %242 = select i1 %241, i32 -2147483648, i32 2147483647
  %243 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %235) #7
  %244 = extractvalue { i32, i1 } %243, 1
  %245 = extractvalue { i32, i1 } %243, 0
  %246 = select i1 %244, i32 %242, i32 %245, !prof !3
  %247 = icmp slt i32 %232, %246
  %248 = icmp eq i32 %230, 0
  %249 = and i1 %248, %247
  %250 = icmp sgt i32 %232, %246
  %251 = or i1 %250, %249
  br i1 %251, label %252, label %260

252:                                              ; preds = %240
  %253 = icmp eq i32 %232, 0
  br i1 %253, label %260, label %254

254:                                              ; preds = %252
  %255 = sitofp i32 %246 to float
  %256 = fmul float %255, 1.562500e-02
  %257 = sitofp i32 %232 to float
  %258 = fmul float %257, 1.562500e-02
  %259 = fdiv float %256, %258
  br label %260

260:                                              ; preds = %254, %252, %240
  %261 = phi float [ %259, %254 ], [ 1.000000e+00, %240 ], [ 1.000000e+00, %252 ]
  %262 = phi i1 [ true, %254 ], [ true, %240 ], [ false, %252 ]
  %263 = icmp eq i32 %234, 0
  br i1 %263, label %385, label %264

264:                                              ; preds = %260
  %265 = uitofp i32 %229 to float
  %266 = sitofp i32 %1 to float
  %267 = fmul float %266, 1.562500e-02
  %268 = bitcast i32* %7 to i8*
  %269 = bitcast i32* %7 to %"class.blink::LayoutUnit"*
  br label %270

270:                                              ; preds = %343, %264
  %271 = phi i32 [ %234, %264 ], [ %344, %343 ]
  %272 = phi %"struct.blink::NGTableTypes::Column"* [ %233, %264 ], [ %345, %343 ]
  %273 = phi %"struct.blink::NGTableTypes::Column"* [ %233, %264 ], [ %348, %343 ]
  %274 = phi %"class.blink::LayoutUnit"* [ %42, %264 ], [ %349, %343 ]
  %275 = phi %"class.blink::LayoutUnit"* [ %236, %264 ], [ %347, %343 ]
  %276 = phi i32 [ %235, %264 ], [ %346, %343 ]
  %277 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %273, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %278 = load i8, i8* %277, align 4, !range !2, !noalias !5
  %279 = icmp eq i8 %278, 0
  br i1 %279, label %343, label %280

280:                                              ; preds = %270
  br i1 %262, label %281, label %314

281:                                              ; preds = %280
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %268)
  store i32 0, i32* %7, align 4, !noalias !5
  %282 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %273, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %283 = load i8, i8* %282, align 4, !range !2, !noalias !5
  %284 = icmp eq i8 %283, 0
  %285 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %273, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %286 = select i1 %284, %"class.blink::LayoutUnit"* %269, %"class.blink::LayoutUnit"* %285
  %287 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %286, i64 0, i32 0
  %288 = load i32, i32* %287, align 4, !noalias !5
  %289 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %273, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %290 = load float, float* %289, align 4, !noalias !5
  %291 = fmul float %267, %290
  %292 = fdiv float %291, 1.000000e+02
  %293 = fmul float %292, 6.400000e+01
  %294 = fcmp ult float %293, 0xC1E0000000000000
  %295 = fcmp ugt float %293, 0x41DFFFFFE0000000
  %296 = fcmp ogt float %293, 0xC1E0000000000000
  %297 = select i1 %296, float %293, float 0xC1E0000000000000
  %298 = fptosi float %297 to i32
  %299 = select i1 %294, i32 0, i32 2147483647
  %300 = select i1 %295, i32 %299, i32 %298
  %301 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %273, i64 0, i32 3, i32 0
  %302 = load i32, i32* %301, align 4, !noalias !5
  %303 = icmp slt i32 %302, 0
  %304 = select i1 %303, i32 -2147483648, i32 2147483647
  %305 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %300, i32 %302) #7
  %306 = extractvalue { i32, i1 } %305, 1
  %307 = extractvalue { i32, i1 } %305, 0
  %308 = select i1 %306, i32 %304, i32 %307, !prof !3
  %309 = icmp slt i32 %288, %308
  %310 = select i1 %309, i32 %308, i32 %288
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %268)
  %311 = sitofp i32 %310 to float
  %312 = fmul float %311, 1.562500e-02
  %313 = fmul float %261, %312
  br label %324

314:                                              ; preds = %280
  %315 = icmp sgt i32 %276, -1
  %316 = select i1 %315, i32 -2147483648, i32 2147483647
  %317 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %276) #7
  %318 = extractvalue { i32, i1 } %317, 1
  %319 = extractvalue { i32, i1 } %317, 0
  %320 = select i1 %318, i32 %316, i32 %319, !prof !3
  %321 = sitofp i32 %320 to float
  %322 = fmul float %321, 1.562500e-02
  %323 = fdiv float %322, %265
  br label %324

324:                                              ; preds = %314, %281
  %325 = phi float [ %323, %314 ], [ %313, %281 ]
  %326 = fmul float %325, 6.400000e+01
  %327 = fcmp ult float %326, 0xC1E0000000000000
  %328 = fcmp ugt float %326, 0x41DFFFFFE0000000
  %329 = fcmp ogt float %326, 0xC1E0000000000000
  %330 = select i1 %329, float %326, float 0xC1E0000000000000
  %331 = fptosi float %330 to i32
  %332 = select i1 %327, i32 0, i32 2147483647
  %333 = select i1 %328, i32 %332, i32 %331
  %334 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %274, i64 0, i32 0
  store i32 %333, i32* %334, align 4
  %335 = icmp slt i32 %333, 0
  %336 = select i1 %335, i32 -2147483648, i32 2147483647
  %337 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %276, i32 %333) #7
  %338 = extractvalue { i32, i1 } %337, 1
  %339 = extractvalue { i32, i1 } %337, 0
  %340 = select i1 %338, i32 %336, i32 %339, !prof !3
  %341 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %37, align 8, !noalias !5
  %342 = load i32, i32* %9, align 4, !noalias !5
  br label %343

343:                                              ; preds = %324, %270
  %344 = phi i32 [ %342, %324 ], [ %271, %270 ]
  %345 = phi %"struct.blink::NGTableTypes::Column"* [ %341, %324 ], [ %272, %270 ]
  %346 = phi i32 [ %340, %324 ], [ %276, %270 ]
  %347 = phi %"class.blink::LayoutUnit"* [ %274, %324 ], [ %275, %270 ]
  %348 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %273, i64 1
  %349 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %274, i64 1
  %350 = zext i32 %344 to i64
  %351 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %345, i64 %350
  %352 = icmp eq %"struct.blink::NGTableTypes::Column"* %348, %351
  br i1 %352, label %353, label %270

353:                                              ; preds = %343, %238
  %354 = phi %"struct.blink::NGTableTypes::Column"* [ %233, %238 ], [ %345, %343 ]
  %355 = phi i32 [ %234, %238 ], [ %344, %343 ]
  %356 = phi i32 [ %235, %238 ], [ %346, %343 ]
  %357 = phi %"class.blink::LayoutUnit"* [ %236, %238 ], [ %347, %343 ]
  %358 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %356) #7
  %359 = icmp eq i32 %231, %228
  %360 = icmp eq i32 %355, 0
  br i1 %360, label %385, label %361

361:                                              ; preds = %353
  %362 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %16, align 8, !alias.scope !5
  %363 = extractvalue { i32, i1 } %358, 1
  %364 = icmp sgt i32 %356, -1
  %365 = select i1 %364, i32 -2147483648, i32 2147483647
  %366 = extractvalue { i32, i1 } %358, 0
  %367 = select i1 %363, i32 %365, i32 %366, !prof !3
  %368 = select i1 %359, i32 %231, i32 %230
  %369 = uitofp i32 %368 to float
  %370 = sitofp i32 %367 to float
  %371 = fmul float %370, 1.562500e-02
  %372 = fdiv float %371, %369
  %373 = fmul float %372, 6.400000e+01
  %374 = fcmp ult float %373, 0xC1E0000000000000
  %375 = fcmp ugt float %373, 0x41DFFFFFE0000000
  %376 = fcmp ogt float %373, 0xC1E0000000000000
  %377 = select i1 %376, float %373, float 0xC1E0000000000000
  %378 = fptosi float %377 to i32
  %379 = select i1 %374, i32 0, i32 2147483647
  %380 = select i1 %375, i32 %379, i32 %378
  %381 = icmp slt i32 %380, 0
  %382 = select i1 %381, i32 -2147483648, i32 2147483647
  br label %402

383:                                              ; preds = %433
  %384 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %436) #7
  br label %385

385:                                              ; preds = %260, %383, %353
  %386 = phi { i32, i1 } [ %384, %383 ], [ %358, %353 ], [ %243, %260 ]
  %387 = phi i32 [ %436, %383 ], [ %356, %353 ], [ %235, %260 ]
  %388 = phi %"class.blink::LayoutUnit"* [ %437, %383 ], [ %357, %353 ], [ %236, %260 ]
  %389 = icmp sgt i32 %387, -1
  %390 = select i1 %389, i32 -2147483648, i32 2147483647
  %391 = extractvalue { i32, i1 } %386, 1
  %392 = extractvalue { i32, i1 } %386, 0
  %393 = select i1 %391, i32 %390, i32 %392, !prof !3
  %394 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %388, i64 0, i32 0
  %395 = load i32, i32* %394, align 4, !noalias !5
  %396 = icmp slt i32 %393, 0
  %397 = select i1 %396, i32 -2147483648, i32 2147483647
  %398 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %395, i32 %393) #7
  %399 = extractvalue { i32, i1 } %398, 1
  %400 = extractvalue { i32, i1 } %398, 0
  %401 = select i1 %399, i32 %397, i32 %400, !prof !3
  store i32 %401, i32* %394, align 4, !noalias !5
  br label %448

402:                                              ; preds = %433, %361
  %403 = phi i32 [ %355, %361 ], [ %434, %433 ]
  %404 = phi %"struct.blink::NGTableTypes::Column"* [ %354, %361 ], [ %435, %433 ]
  %405 = phi %"struct.blink::NGTableTypes::Column"* [ %354, %361 ], [ %438, %433 ]
  %406 = phi %"class.blink::LayoutUnit"* [ %362, %361 ], [ %439, %433 ]
  %407 = phi %"class.blink::LayoutUnit"* [ %357, %361 ], [ %437, %433 ]
  %408 = phi i32 [ %356, %361 ], [ %436, %433 ]
  %409 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %405, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %410 = load i8, i8* %409, align 4, !range !2, !noalias !5
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %412, label %433

412:                                              ; preds = %402
  %413 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %405, i64 0, i32 4
  %414 = load i8, i8* %413, align 4, !range !2, !noalias !5
  %415 = icmp eq i8 %414, 0
  br i1 %415, label %425, label %416

416:                                              ; preds = %412
  %417 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %405, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %418 = load i8, i8* %417, align 4, !range !2, !noalias !5
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %425, label %420

420:                                              ; preds = %416
  %421 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %405, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %422 = load i32, i32* %421, align 4, !noalias !5
  %423 = icmp eq i32 %422, 0
  %424 = and i1 %359, %423
  br i1 %424, label %425, label %433

425:                                              ; preds = %420, %416, %412
  %426 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %406, i64 0, i32 0
  store i32 %380, i32* %426, align 4, !noalias !5
  %427 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %408, i32 %380) #7
  %428 = extractvalue { i32, i1 } %427, 1
  %429 = extractvalue { i32, i1 } %427, 0
  %430 = select i1 %428, i32 %382, i32 %429, !prof !3
  %431 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %37, align 8, !noalias !5
  %432 = load i32, i32* %9, align 4, !noalias !5
  br label %433

433:                                              ; preds = %425, %420, %402
  %434 = phi i32 [ %403, %402 ], [ %403, %420 ], [ %432, %425 ]
  %435 = phi %"struct.blink::NGTableTypes::Column"* [ %404, %402 ], [ %404, %420 ], [ %431, %425 ]
  %436 = phi i32 [ %408, %402 ], [ %408, %420 ], [ %430, %425 ]
  %437 = phi %"class.blink::LayoutUnit"* [ %407, %402 ], [ %407, %420 ], [ %406, %425 ]
  %438 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %405, i64 1
  %439 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %406, i64 1
  %440 = zext i32 %434 to i64
  %441 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %435, i64 %440
  %442 = icmp eq %"struct.blink::NGTableTypes::Column"* %438, %441
  br i1 %442, label %383, label %402

443:                                              ; preds = %14
  %444 = tail call dereferenceable(32) %"struct.blink::NGTableTypes::Column"* @_ZNK3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1677"* %8, i32 0) #7
  %445 = load i32, i32* %9, align 4
  %446 = zext i32 %445 to i64
  %447 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %444, i64 %446
  tail call fastcc void @_ZN5blink12_GLOBAL__N_144DistributeInlineSizeToComputedInlineSizeAutoENS_10LayoutUnitES1_PKNS_12NGTableTypes6ColumnES5_(%"class.WTF::Vector.1692"* sret %0, i32 %1, %"struct.blink::NGTableTypes::Column"* %444, %"struct.blink::NGTableTypes::Column"* %447)
  br label %448

448:                                              ; preds = %385, %227, %443, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_144DistributeInlineSizeToComputedInlineSizeAutoENS_10LayoutUnitES1_PKNS_12NGTableTypes6ColumnES5_(%"class.WTF::Vector.1692"* noalias nocapture sret, i32, %"struct.blink::NGTableTypes::Column"* readonly, %"struct.blink::NGTableTypes::Column"* readnone) unnamed_addr #0 {
  %5 = ptrtoint %"struct.blink::NGTableTypes::Column"* %2 to i64
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [4 x %"class.blink::LayoutUnit"], align 16
  %15 = bitcast [4 x %"class.blink::LayoutUnit"]* %14 to i8*
  %16 = alloca [4 x %"class.blink::LayoutUnit"], align 16
  %17 = alloca i32, align 4
  store i32 %1, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #7
  %18 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %14, i64 0, i64 0
  %19 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %14, i64 0, i64 0, i32 0
  %20 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %14, i64 0, i64 1, i32 0
  %21 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %14, i64 0, i64 2, i32 0
  %22 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %14, i64 0, i64 3, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 16, i1 false)
  %23 = bitcast [4 x %"class.blink::LayoutUnit"]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #7
  %24 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %16, i64 0, i64 1, i32 0
  %25 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %16, i64 0, i64 2, i32 0
  %26 = getelementptr inbounds [4 x %"class.blink::LayoutUnit"], [4 x %"class.blink::LayoutUnit"]* %16, i64 0, i64 3, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 16, i1 false)
  %27 = icmp eq %"struct.blink::NGTableTypes::Column"* %2, %3
  br i1 %27, label %37, label %28

28:                                               ; preds = %4
  %29 = bitcast i32* %6 to i8*
  %30 = bitcast i32* %6 to %"class.blink::LayoutUnit"*
  %31 = sitofp i32 %1 to float
  %32 = fmul float %31, 1.562500e-02
  %33 = load i32, i32* %19, align 16
  %34 = load i32, i32* %20, align 4
  %35 = load i32, i32* %24, align 4
  br label %81

36:                                               ; preds = %303
  store i32 %306, i32* %19, align 16
  store i32 %305, i32* %20, align 4
  store i32 %304, i32* %24, align 4
  br label %37

37:                                               ; preds = %36, %4
  %38 = phi i32 [ 0, %4 ], [ %313, %36 ]
  %39 = phi i32 [ 0, %4 ], [ %314, %36 ]
  %40 = phi i32 [ 0, %4 ], [ %315, %36 ]
  %41 = phi float [ 0.000000e+00, %4 ], [ %316, %36 ]
  %42 = phi i32 [ 0, %4 ], [ %317, %36 ]
  %43 = phi i32 [ 0, %4 ], [ %318, %36 ]
  %44 = phi i32 [ 0, %4 ], [ %319, %36 ]
  %45 = phi i32 [ 0, %4 ], [ %100, %36 ]
  %46 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %0, i64 0, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %0, i64 0, i32 0, i32 0, i32 2
  %48 = bitcast %"class.WTF::Vector.1692"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false) #7
  %49 = icmp eq i32 %45, 0
  br i1 %49, label %72, label %50

50:                                               ; preds = %37
  %51 = getelementptr inbounds %"class.WTF::Vector.1692", %"class.WTF::Vector.1692"* %0, i64 0, i32 0, i32 0, i32 1
  %52 = icmp ugt i32 %45, 4
  %53 = select i1 %52, i32 %45, i32 4
  %54 = zext i32 %53 to i64
  %55 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LayoutUnitEEEmm(i64 %54) #7
  %56 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %55, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LayoutUnitEEEPKcv, i64 0, i64 0)) #7
  %57 = ptrtoint i8* %56 to i64
  %58 = bitcast %"class.WTF::Vector.1692"* %0 to i64*
  store atomic i64 %57, i64* %58 monotonic, align 8
  %59 = lshr i64 %55, 2
  %60 = trunc i64 %59 to i32
  store i32 %60, i32* %51, align 8
  %61 = bitcast i8* %56 to %"class.blink::LayoutUnit"*
  %62 = zext i32 %45 to i64
  %63 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %61, i64 %62
  %64 = ptrtoint i8* %56 to i64
  %65 = getelementptr %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %63, i64 -1, i32 0
  %66 = ptrtoint i32* %65 to i64
  %67 = add i64 %66, 4
  %68 = sub i64 %67, %64
  %69 = and i64 %68, -4
  call void @llvm.memset.p0i8.i64(i8* align 4 %56, i8 0, i64 %69, i1 false) #7
  %70 = load i32, i32* %13, align 4
  %71 = load i32, i32* %19, align 16
  br label %72

72:                                               ; preds = %37, %50
  %73 = phi i32 [ %38, %37 ], [ %71, %50 ]
  %74 = phi i32 [ %1, %37 ], [ %70, %50 ]
  store i32 %45, i32* %47, align 4
  %75 = icmp slt i32 %74, %73
  %76 = bitcast i32* %13 to %"class.blink::LayoutUnit"*
  %77 = select i1 %75, %"class.blink::LayoutUnit"* %18, %"class.blink::LayoutUnit"* %76
  %78 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %77, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %13, align 4
  %80 = icmp slt i32 %73, %79
  br i1 %80, label %322, label %325

81:                                               ; preds = %28, %303
  %82 = phi i32 [ %35, %28 ], [ %304, %303 ]
  %83 = phi i32 [ %34, %28 ], [ %305, %303 ]
  %84 = phi i32 [ %33, %28 ], [ %306, %303 ]
  %85 = phi i32 [ 0, %28 ], [ %307, %303 ]
  %86 = phi i32 [ 0, %28 ], [ %308, %303 ]
  %87 = phi i32 [ 0, %28 ], [ %309, %303 ]
  %88 = phi i32 [ 0, %28 ], [ %310, %303 ]
  %89 = phi i32 [ 0, %28 ], [ %311, %303 ]
  %90 = phi i32 [ 0, %28 ], [ %312, %303 ]
  %91 = phi i32 [ 0, %28 ], [ %313, %303 ]
  %92 = phi i32 [ 0, %28 ], [ %100, %303 ]
  %93 = phi i32 [ 0, %28 ], [ %319, %303 ]
  %94 = phi i32 [ 0, %28 ], [ %318, %303 ]
  %95 = phi i32 [ 0, %28 ], [ %317, %303 ]
  %96 = phi float [ 0.000000e+00, %28 ], [ %316, %303 ]
  %97 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %28 ], [ %320, %303 ]
  %98 = phi i32 [ 0, %28 ], [ %315, %303 ]
  %99 = phi i32 [ 0, %28 ], [ %314, %303 ]
  %100 = add i32 %92, 1
  %101 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 7
  %102 = load i8, i8* %101, align 1, !range !2
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %104, label %303

104:                                              ; preds = %81
  %105 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %106 = load i8, i8* %105, align 4, !range !2
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %177, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %110 = load float, float* %109, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29)
  store i32 0, i32* %6, align 4
  %111 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load i8, i8* %111, align 4, !range !2
  %113 = icmp eq i8 %112, 0
  %114 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %115 = select i1 %113, %"class.blink::LayoutUnit"* %30, %"class.blink::LayoutUnit"* %114
  %116 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %115, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = fmul float %32, %110
  %119 = fdiv float %118, 1.000000e+02
  %120 = fmul float %119, 6.400000e+01
  %121 = fcmp ult float %120, 0xC1E0000000000000
  %122 = fcmp ugt float %120, 0x41DFFFFFE0000000
  %123 = fcmp ogt float %120, 0xC1E0000000000000
  %124 = select i1 %123, float %120, float 0xC1E0000000000000
  %125 = fptosi float %124 to i32
  %126 = select i1 %121, i32 0, i32 2147483647
  %127 = select i1 %122, i32 %126, i32 %125
  %128 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 3, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp slt i32 %129, 0
  %131 = select i1 %130, i32 -2147483648, i32 2147483647
  %132 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %127, i32 %129) #7
  %133 = extractvalue { i32, i1 } %132, 1
  %134 = extractvalue { i32, i1 } %132, 0
  %135 = select i1 %133, i32 %131, i32 %134, !prof !3
  %136 = icmp slt i32 %117, %135
  %137 = select i1 %136, i32 %135, i32 %117
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29)
  br i1 %113, label %138, label %139, !prof !3

138:                                              ; preds = %108
  store i32 %84, i32* %19, align 16
  store i32 %83, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

139:                                              ; preds = %108
  %140 = fadd float %96, %110
  %141 = add i32 %93, 1
  %142 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, 0
  %145 = select i1 %144, i32 -2147483648, i32 2147483647
  %146 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 %143) #7
  %147 = extractvalue { i32, i1 } %146, 1
  %148 = extractvalue { i32, i1 } %146, 0
  %149 = select i1 %147, i32 %145, i32 %148, !prof !3
  %150 = icmp slt i32 %137, 0
  %151 = select i1 %150, i32 -2147483648, i32 2147483647
  %152 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %90, i32 %137) #7
  %153 = extractvalue { i32, i1 } %152, 1
  %154 = extractvalue { i32, i1 } %152, 0
  %155 = select i1 %153, i32 %151, i32 %154, !prof !3
  %156 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %89, i32 %137) #7
  %157 = extractvalue { i32, i1 } %156, 1
  %158 = extractvalue { i32, i1 } %156, 0
  %159 = select i1 %157, i32 %151, i32 %158, !prof !3
  store i32 %159, i32* %21, align 8
  %160 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %88, i32 %137) #7
  %161 = extractvalue { i32, i1 } %160, 1
  %162 = extractvalue { i32, i1 } %160, 0
  %163 = select i1 %161, i32 %151, i32 %162, !prof !3
  store i32 %163, i32* %22, align 4
  %164 = load i32, i32* %142, align 4
  %165 = icmp sgt i32 %164, -1
  %166 = select i1 %165, i32 -2147483648, i32 2147483647
  %167 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %137, i32 %164) #7
  %168 = extractvalue { i32, i1 } %167, 1
  %169 = extractvalue { i32, i1 } %167, 0
  %170 = select i1 %168, i32 %166, i32 %169, !prof !3
  %171 = icmp slt i32 %170, 0
  %172 = select i1 %171, i32 -2147483648, i32 2147483647
  %173 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %87, i32 %170) #7
  %174 = extractvalue { i32, i1 } %173, 1
  %175 = extractvalue { i32, i1 } %173, 0
  %176 = select i1 %174, i32 %172, i32 %175, !prof !3
  br label %303

177:                                              ; preds = %104
  %178 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 4
  %179 = load i8, i8* %178, align 4, !range !2
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %242, label %181

181:                                              ; preds = %177
  %182 = add i32 %94, 1
  %183 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %184 = load i8, i8* %183, align 4, !range !2
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %187, !prof !3

186:                                              ; preds = %181
  store i32 %84, i32* %19, align 16
  store i32 %83, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

187:                                              ; preds = %181
  %188 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %189 = load i32, i32* %188, align 4
  %190 = icmp slt i32 %189, 0
  %191 = select i1 %190, i32 -2147483648, i32 2147483647
  %192 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %99, i32 %189) #7
  %193 = extractvalue { i32, i1 } %192, 1
  %194 = extractvalue { i32, i1 } %192, 0
  %195 = select i1 %193, i32 %191, i32 %194, !prof !3
  %196 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %197 = load i8, i8* %196, align 4, !range !2
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %199, label %200, !prof !3

199:                                              ; preds = %187
  store i32 %84, i32* %19, align 16
  store i32 %83, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

200:                                              ; preds = %187
  %201 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = icmp slt i32 %202, 0
  %204 = select i1 %203, i32 -2147483648, i32 2147483647
  %205 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 %202) #7
  %206 = extractvalue { i32, i1 } %205, 1
  %207 = extractvalue { i32, i1 } %205, 0
  %208 = select i1 %206, i32 %204, i32 %207, !prof !3
  %209 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %90, i32 %202) #7
  %210 = extractvalue { i32, i1 } %209, 1
  %211 = extractvalue { i32, i1 } %209, 0
  %212 = select i1 %210, i32 %204, i32 %211, !prof !3
  %213 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %89, i32 %189) #7
  %214 = extractvalue { i32, i1 } %213, 1
  %215 = extractvalue { i32, i1 } %213, 0
  %216 = select i1 %214, i32 %191, i32 %215, !prof !3
  store i32 %216, i32* %21, align 8
  %217 = load i8, i8* %183, align 4, !range !2
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %219, label %220, !prof !3

219:                                              ; preds = %200
  store i32 %208, i32* %19, align 16
  store i32 %212, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

220:                                              ; preds = %200
  %221 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %88, i32 %189) #7
  %222 = extractvalue { i32, i1 } %221, 1
  %223 = extractvalue { i32, i1 } %221, 0
  %224 = select i1 %222, i32 %191, i32 %223, !prof !3
  store i32 %224, i32* %22, align 4
  %225 = load i8, i8* %183, align 4, !range !2
  %226 = icmp eq i8 %225, 0
  br i1 %226, label %227, label %228, !prof !3

227:                                              ; preds = %220
  store i32 %208, i32* %19, align 16
  store i32 %212, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

228:                                              ; preds = %220
  %229 = load i32, i32* %201, align 4
  %230 = icmp sgt i32 %229, -1
  %231 = select i1 %230, i32 -2147483648, i32 2147483647
  %232 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %189, i32 %229) #7
  %233 = extractvalue { i32, i1 } %232, 1
  %234 = extractvalue { i32, i1 } %232, 0
  %235 = select i1 %233, i32 %231, i32 %234, !prof !3
  %236 = icmp slt i32 %235, 0
  %237 = select i1 %236, i32 -2147483648, i32 2147483647
  %238 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %86, i32 %235) #7
  %239 = extractvalue { i32, i1 } %238, 1
  %240 = extractvalue { i32, i1 } %238, 0
  %241 = select i1 %239, i32 %237, i32 %240, !prof !3
  store i32 %241, i32* %25, align 8
  br label %303

242:                                              ; preds = %177
  %243 = add i32 %95, 1
  %244 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %245 = load i8, i8* %244, align 4, !range !2
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %247, label %248, !prof !3

247:                                              ; preds = %242
  store i32 %84, i32* %19, align 16
  store i32 %83, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

248:                                              ; preds = %242
  %249 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %250 = load i32, i32* %249, align 4
  %251 = icmp slt i32 %250, 0
  %252 = select i1 %251, i32 -2147483648, i32 2147483647
  %253 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %98, i32 %250) #7
  %254 = extractvalue { i32, i1 } %253, 1
  %255 = extractvalue { i32, i1 } %253, 0
  %256 = select i1 %254, i32 %252, i32 %255, !prof !3
  %257 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %258 = load i8, i8* %257, align 4, !range !2
  %259 = icmp eq i8 %258, 0
  br i1 %259, label %260, label %261, !prof !3

260:                                              ; preds = %248
  store i32 %84, i32* %19, align 16
  store i32 %83, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

261:                                              ; preds = %248
  %262 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp slt i32 %263, 0
  %265 = select i1 %264, i32 -2147483648, i32 2147483647
  %266 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 %263) #7
  %267 = extractvalue { i32, i1 } %266, 1
  %268 = extractvalue { i32, i1 } %266, 0
  %269 = select i1 %267, i32 %265, i32 %268, !prof !3
  %270 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %90, i32 %263) #7
  %271 = extractvalue { i32, i1 } %270, 1
  %272 = extractvalue { i32, i1 } %270, 0
  %273 = select i1 %271, i32 %265, i32 %272, !prof !3
  %274 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %89, i32 %263) #7
  %275 = extractvalue { i32, i1 } %274, 1
  %276 = extractvalue { i32, i1 } %274, 0
  %277 = select i1 %275, i32 %265, i32 %276, !prof !3
  store i32 %277, i32* %21, align 8
  %278 = load i8, i8* %244, align 4, !range !2
  %279 = icmp eq i8 %278, 0
  br i1 %279, label %280, label %281, !prof !3

280:                                              ; preds = %261
  store i32 %269, i32* %19, align 16
  store i32 %273, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

281:                                              ; preds = %261
  %282 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %88, i32 %250) #7
  %283 = extractvalue { i32, i1 } %282, 1
  %284 = extractvalue { i32, i1 } %282, 0
  %285 = select i1 %283, i32 %252, i32 %284, !prof !3
  store i32 %285, i32* %22, align 4
  %286 = load i8, i8* %244, align 4, !range !2
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %288, label %289, !prof !3

288:                                              ; preds = %281
  store i32 %269, i32* %19, align 16
  store i32 %273, i32* %20, align 4
  store i32 %82, i32* %24, align 4
  call void @llvm.trap() #7
  unreachable

289:                                              ; preds = %281
  %290 = load i32, i32* %262, align 4
  %291 = icmp sgt i32 %290, -1
  %292 = select i1 %291, i32 -2147483648, i32 2147483647
  %293 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %250, i32 %290) #7
  %294 = extractvalue { i32, i1 } %293, 1
  %295 = extractvalue { i32, i1 } %293, 0
  %296 = select i1 %294, i32 %292, i32 %295, !prof !3
  %297 = icmp slt i32 %296, 0
  %298 = select i1 %297, i32 -2147483648, i32 2147483647
  %299 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %85, i32 %296) #7
  %300 = extractvalue { i32, i1 } %299, 1
  %301 = extractvalue { i32, i1 } %299, 0
  %302 = select i1 %300, i32 %298, i32 %301, !prof !3
  store i32 %302, i32* %26, align 4
  br label %303

303:                                              ; preds = %81, %228, %289, %139
  %304 = phi i32 [ %176, %139 ], [ %82, %289 ], [ %82, %228 ], [ %82, %81 ]
  %305 = phi i32 [ %155, %139 ], [ %273, %289 ], [ %212, %228 ], [ %83, %81 ]
  %306 = phi i32 [ %149, %139 ], [ %269, %289 ], [ %208, %228 ], [ %84, %81 ]
  %307 = phi i32 [ %85, %139 ], [ %302, %289 ], [ %85, %228 ], [ %85, %81 ]
  %308 = phi i32 [ %86, %139 ], [ %86, %289 ], [ %241, %228 ], [ %86, %81 ]
  %309 = phi i32 [ %176, %139 ], [ %87, %289 ], [ %87, %228 ], [ %87, %81 ]
  %310 = phi i32 [ %163, %139 ], [ %285, %289 ], [ %224, %228 ], [ %88, %81 ]
  %311 = phi i32 [ %159, %139 ], [ %277, %289 ], [ %216, %228 ], [ %89, %81 ]
  %312 = phi i32 [ %155, %139 ], [ %273, %289 ], [ %212, %228 ], [ %90, %81 ]
  %313 = phi i32 [ %149, %139 ], [ %269, %289 ], [ %208, %228 ], [ %91, %81 ]
  %314 = phi i32 [ %99, %139 ], [ %99, %289 ], [ %195, %228 ], [ %99, %81 ]
  %315 = phi i32 [ %98, %139 ], [ %256, %289 ], [ %98, %228 ], [ %98, %81 ]
  %316 = phi float [ %140, %139 ], [ %96, %289 ], [ %96, %228 ], [ %96, %81 ]
  %317 = phi i32 [ %95, %139 ], [ %243, %289 ], [ %95, %228 ], [ %95, %81 ]
  %318 = phi i32 [ %94, %139 ], [ %94, %289 ], [ %182, %228 ], [ %94, %81 ]
  %319 = phi i32 [ %141, %139 ], [ %93, %289 ], [ %93, %228 ], [ %93, %81 ]
  %320 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %97, i64 1
  %321 = icmp eq %"struct.blink::NGTableTypes::Column"* %320, %3
  br i1 %321, label %36, label %81

322:                                              ; preds = %72
  %323 = load i32, i32* %20, align 4
  %324 = icmp slt i32 %323, %79
  br i1 %324, label %1234, label %374

325:                                              ; preds = %72
  br i1 %27, label %1233, label %326

326:                                              ; preds = %325
  %327 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %328 = bitcast i32* %17 to i8*
  %329 = bitcast i32* %17 to %"class.blink::LayoutUnit"*
  %330 = getelementptr %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %3, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0
  %331 = ptrtoint i8* %330 to i64
  %332 = sub i64 %331, %5
  %333 = and i64 %332, 32
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %351

335:                                              ; preds = %326
  %336 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %2, i64 0, i32 7
  %337 = load i8, i8* %336, align 1, !range !2
  %338 = icmp eq i8 %337, 0
  br i1 %338, label %339, label %348

339:                                              ; preds = %335
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %328)
  store i32 0, i32* %17, align 4
  %340 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %341 = load i8, i8* %340, align 4, !range !2
  %342 = icmp eq i8 %341, 0
  %343 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %344 = select i1 %342, %"class.blink::LayoutUnit"* %329, %"class.blink::LayoutUnit"* %343
  %345 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %344, i64 0, i32 0
  %346 = load i32, i32* %345, align 4
  %347 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %327, i64 0, i32 0
  store i32 %346, i32* %347, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %328)
  br label %348

348:                                              ; preds = %339, %335
  %349 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %2, i64 1
  %350 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %327, i64 1
  br label %351

351:                                              ; preds = %348, %326
  %352 = phi %"class.blink::LayoutUnit"* [ %327, %326 ], [ %350, %348 ]
  %353 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %326 ], [ %349, %348 ]
  %354 = icmp ult i64 %332, 32
  br i1 %354, label %1233, label %355

355:                                              ; preds = %351, %1257
  %356 = phi %"class.blink::LayoutUnit"* [ %1259, %1257 ], [ %352, %351 ]
  %357 = phi %"struct.blink::NGTableTypes::Column"* [ %1258, %1257 ], [ %353, %351 ]
  %358 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 0, i32 7
  %359 = load i8, i8* %358, align 1, !range !2
  %360 = icmp eq i8 %359, 0
  br i1 %360, label %361, label %370

361:                                              ; preds = %355
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %328)
  store i32 0, i32* %17, align 4
  %362 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %363 = load i8, i8* %362, align 4, !range !2
  %364 = icmp eq i8 %363, 0
  %365 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %366 = select i1 %364, %"class.blink::LayoutUnit"* %329, %"class.blink::LayoutUnit"* %365
  %367 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %366, i64 0, i32 0
  %368 = load i32, i32* %367, align 4
  %369 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %356, i64 0, i32 0
  store i32 %368, i32* %369, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %328)
  br label %370

370:                                              ; preds = %355, %361
  %371 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 1, i32 7
  %372 = load i8, i8* %371, align 1, !range !2
  %373 = icmp eq i8 %372, 0
  br i1 %373, label %1248, label %1257

374:                                              ; preds = %322
  %375 = load i32, i32* %24, align 4
  %376 = icmp sgt i32 %73, -1
  %377 = select i1 %376, i32 -2147483648, i32 2147483647
  %378 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %79, i32 %73) #7
  %379 = extractvalue { i32, i1 } %378, 1
  %380 = extractvalue { i32, i1 } %378, 0
  %381 = select i1 %379, i32 %377, i32 %380, !prof !3
  br i1 %27, label %403, label %382

382:                                              ; preds = %374
  %383 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %384 = bitcast i32* %7 to i8*
  %385 = bitcast i32* %7 to %"class.blink::LayoutUnit"*
  %386 = sitofp i32 %79 to float
  %387 = fmul float %386, 1.562500e-02
  %388 = icmp eq i32 %375, 0
  %389 = sitofp i32 %381 to float
  %390 = fmul float %389, 1.562500e-02
  %391 = sitofp i32 %375 to float
  %392 = fmul float %391, 1.562500e-02
  %393 = uitofp i32 %44 to float
  %394 = fdiv float %390, %393
  %395 = fmul float %394, 6.400000e+01
  %396 = fcmp ult float %395, 0xC1E0000000000000
  %397 = fcmp ugt float %395, 0x41DFFFFFE0000000
  %398 = fcmp ogt float %395, 0xC1E0000000000000
  %399 = select i1 %398, float %395, float 0xC1E0000000000000
  %400 = fptosi float %399 to i32
  %401 = select i1 %396, i32 0, i32 2147483647
  %402 = select i1 %397, i32 %401, i32 %400
  br label %407

403:                                              ; preds = %496, %374
  %404 = phi i32 [ %381, %374 ], [ %497, %496 ]
  %405 = phi %"class.blink::LayoutUnit"* [ null, %374 ], [ %498, %496 ]
  %406 = icmp eq i32 %404, 0
  br i1 %406, label %1233, label %502

407:                                              ; preds = %382, %496
  %408 = phi %"class.blink::LayoutUnit"* [ %383, %382 ], [ %500, %496 ]
  %409 = phi %"class.blink::LayoutUnit"* [ null, %382 ], [ %498, %496 ]
  %410 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %382 ], [ %499, %496 ]
  %411 = phi i32 [ %381, %382 ], [ %497, %496 ]
  %412 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 7
  %413 = load i8, i8* %412, align 1, !range !2
  %414 = icmp eq i8 %413, 0
  br i1 %414, label %415, label %496

415:                                              ; preds = %407
  %416 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %417 = load i8, i8* %416, align 4, !range !2
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %487, label %419

419:                                              ; preds = %415
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %384)
  store i32 0, i32* %7, align 4
  %420 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %421 = load i8, i8* %420, align 4, !range !2
  %422 = icmp eq i8 %421, 0
  %423 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %424 = select i1 %422, %"class.blink::LayoutUnit"* %385, %"class.blink::LayoutUnit"* %423
  %425 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %424, i64 0, i32 0
  %426 = load i32, i32* %425, align 4
  %427 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %428 = load float, float* %427, align 4
  %429 = fmul float %387, %428
  %430 = fdiv float %429, 1.000000e+02
  %431 = fmul float %430, 6.400000e+01
  %432 = fcmp ult float %431, 0xC1E0000000000000
  %433 = fcmp ugt float %431, 0x41DFFFFFE0000000
  %434 = fcmp ogt float %431, 0xC1E0000000000000
  %435 = select i1 %434, float %431, float 0xC1E0000000000000
  %436 = fptosi float %435 to i32
  %437 = select i1 %432, i32 0, i32 2147483647
  %438 = select i1 %433, i32 %437, i32 %436
  %439 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 3, i32 0
  %440 = load i32, i32* %439, align 4
  %441 = icmp slt i32 %440, 0
  %442 = select i1 %441, i32 -2147483648, i32 2147483647
  %443 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %438, i32 %440) #7
  %444 = extractvalue { i32, i1 } %443, 1
  %445 = extractvalue { i32, i1 } %443, 0
  %446 = select i1 %444, i32 %442, i32 %445, !prof !3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %384)
  br i1 %422, label %447, label %448, !prof !3

447:                                              ; preds = %419
  call void @llvm.trap() #7
  unreachable

448:                                              ; preds = %419
  %449 = icmp slt i32 %426, %446
  %450 = select i1 %449, i32 %446, i32 %426
  %451 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %452 = load i32, i32* %451, align 4
  %453 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %450, i32 %452) #7
  br i1 %388, label %472, label %454

454:                                              ; preds = %448
  %455 = extractvalue { i32, i1 } %453, 1
  %456 = icmp sgt i32 %452, -1
  %457 = select i1 %456, i32 -2147483648, i32 2147483647
  %458 = extractvalue { i32, i1 } %453, 0
  %459 = select i1 %455, i32 %457, i32 %458, !prof !3
  %460 = sitofp i32 %459 to float
  %461 = fmul float %460, 1.562500e-02
  %462 = fmul float %390, %461
  %463 = fdiv float %462, %392
  %464 = fmul float %463, 6.400000e+01
  %465 = fcmp ult float %464, 0xC1E0000000000000
  %466 = fcmp ugt float %464, 0x41DFFFFFE0000000
  %467 = fcmp ogt float %464, 0xC1E0000000000000
  %468 = select i1 %467, float %464, float 0xC1E0000000000000
  %469 = fptosi float %468 to i32
  %470 = select i1 %465, i32 0, i32 2147483647
  %471 = select i1 %466, i32 %470, i32 %469
  br label %472

472:                                              ; preds = %448, %454
  %473 = phi i32 [ %471, %454 ], [ %402, %448 ]
  %474 = icmp sgt i32 %473, -1
  %475 = select i1 %474, i32 -2147483648, i32 2147483647
  %476 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %411, i32 %473) #7
  %477 = extractvalue { i32, i1 } %476, 1
  %478 = extractvalue { i32, i1 } %476, 0
  %479 = select i1 %477, i32 %475, i32 %478, !prof !3
  %480 = icmp slt i32 %473, 0
  %481 = select i1 %480, i32 -2147483648, i32 2147483647
  %482 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %452, i32 %473) #7
  %483 = extractvalue { i32, i1 } %482, 1
  %484 = extractvalue { i32, i1 } %482, 0
  %485 = select i1 %483, i32 %481, i32 %484, !prof !3
  %486 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %408, i64 0, i32 0
  store i32 %485, i32* %486, align 4
  br label %496

487:                                              ; preds = %415
  %488 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %489 = load i8, i8* %488, align 4, !range !2
  %490 = icmp eq i8 %489, 0
  br i1 %490, label %491, label %492, !prof !3

491:                                              ; preds = %487
  call void @llvm.trap() #7
  unreachable

492:                                              ; preds = %487
  %493 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %494 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %408, i64 0, i32 0
  %495 = load i32, i32* %493, align 4
  store i32 %495, i32* %494, align 4
  br label %496

496:                                              ; preds = %407, %472, %492
  %497 = phi i32 [ %479, %472 ], [ %411, %492 ], [ %411, %407 ]
  %498 = phi %"class.blink::LayoutUnit"* [ %408, %472 ], [ %409, %492 ], [ %409, %407 ]
  %499 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %410, i64 1
  %500 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %408, i64 1
  %501 = icmp eq %"struct.blink::NGTableTypes::Column"* %499, %3
  br i1 %501, label %403, label %407

502:                                              ; preds = %403
  %503 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %405, i64 0, i32 0
  %504 = load i32, i32* %503, align 4
  %505 = icmp slt i32 %404, 0
  %506 = select i1 %505, i32 -2147483648, i32 2147483647
  %507 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %504, i32 %404) #7
  %508 = extractvalue { i32, i1 } %507, 1
  %509 = extractvalue { i32, i1 } %507, 0
  %510 = select i1 %508, i32 %506, i32 %509, !prof !3
  store i32 %510, i32* %503, align 4
  br label %1233

511:                                              ; preds = %1234
  %512 = load i32, i32* %25, align 8
  %513 = load i32, i32* %20, align 4
  %514 = icmp sgt i32 %513, -1
  %515 = select i1 %514, i32 -2147483648, i32 2147483647
  %516 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %79, i32 %513) #7
  %517 = extractvalue { i32, i1 } %516, 1
  %518 = extractvalue { i32, i1 } %516, 0
  %519 = select i1 %517, i32 %515, i32 %518, !prof !3
  br i1 %27, label %541, label %520

520:                                              ; preds = %511
  %521 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %522 = bitcast i32* %8 to i8*
  %523 = bitcast i32* %8 to %"class.blink::LayoutUnit"*
  %524 = sitofp i32 %79 to float
  %525 = fmul float %524, 1.562500e-02
  %526 = icmp eq i32 %512, 0
  %527 = sitofp i32 %519 to float
  %528 = fmul float %527, 1.562500e-02
  %529 = sitofp i32 %512 to float
  %530 = fmul float %529, 1.562500e-02
  %531 = uitofp i32 %43 to float
  %532 = fdiv float %528, %531
  %533 = fmul float %532, 6.400000e+01
  %534 = fcmp ult float %533, 0xC1E0000000000000
  %535 = fcmp ugt float %533, 0x41DFFFFFE0000000
  %536 = fcmp ogt float %533, 0xC1E0000000000000
  %537 = select i1 %536, float %533, float 0xC1E0000000000000
  %538 = fptosi float %537 to i32
  %539 = select i1 %534, i32 0, i32 2147483647
  %540 = select i1 %535, i32 %539, i32 %538
  br label %545

541:                                              ; preds = %650, %511
  %542 = phi i32 [ %519, %511 ], [ %651, %650 ]
  %543 = phi %"class.blink::LayoutUnit"* [ null, %511 ], [ %652, %650 ]
  %544 = icmp eq i32 %542, 0
  br i1 %544, label %1233, label %656

545:                                              ; preds = %520, %650
  %546 = phi %"class.blink::LayoutUnit"* [ null, %520 ], [ %652, %650 ]
  %547 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %520 ], [ %653, %650 ]
  %548 = phi %"class.blink::LayoutUnit"* [ %521, %520 ], [ %654, %650 ]
  %549 = phi i32 [ %519, %520 ], [ %651, %650 ]
  %550 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 7
  %551 = load i8, i8* %550, align 1, !range !2
  %552 = icmp eq i8 %551, 0
  br i1 %552, label %553, label %650

553:                                              ; preds = %545
  %554 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %555 = load i8, i8* %554, align 4, !range !2
  %556 = icmp eq i8 %555, 0
  br i1 %556, label %588, label %557

557:                                              ; preds = %553
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %522)
  store i32 0, i32* %8, align 4
  %558 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %559 = load i8, i8* %558, align 4, !range !2
  %560 = icmp eq i8 %559, 0
  %561 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %562 = select i1 %560, %"class.blink::LayoutUnit"* %523, %"class.blink::LayoutUnit"* %561
  %563 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %562, i64 0, i32 0
  %564 = load i32, i32* %563, align 4
  %565 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %566 = load float, float* %565, align 4
  %567 = fmul float %525, %566
  %568 = fdiv float %567, 1.000000e+02
  %569 = fmul float %568, 6.400000e+01
  %570 = fcmp ult float %569, 0xC1E0000000000000
  %571 = fcmp ugt float %569, 0x41DFFFFFE0000000
  %572 = fcmp ogt float %569, 0xC1E0000000000000
  %573 = select i1 %572, float %569, float 0xC1E0000000000000
  %574 = fptosi float %573 to i32
  %575 = select i1 %570, i32 0, i32 2147483647
  %576 = select i1 %571, i32 %575, i32 %574
  %577 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 3, i32 0
  %578 = load i32, i32* %577, align 4
  %579 = icmp slt i32 %578, 0
  %580 = select i1 %579, i32 -2147483648, i32 2147483647
  %581 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %576, i32 %578) #7
  %582 = extractvalue { i32, i1 } %581, 1
  %583 = extractvalue { i32, i1 } %581, 0
  %584 = select i1 %582, i32 %580, i32 %583, !prof !3
  %585 = icmp slt i32 %564, %584
  %586 = select i1 %585, i32 %584, i32 %564
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %522)
  %587 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %548, i64 0, i32 0
  store i32 %586, i32* %587, align 4
  br label %650

588:                                              ; preds = %553
  %589 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 4
  %590 = load i8, i8* %589, align 4, !range !2
  %591 = icmp eq i8 %590, 0
  br i1 %591, label %641, label %592

592:                                              ; preds = %588
  %593 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %594 = load i8, i8* %593, align 4, !range !2
  %595 = icmp eq i8 %594, 0
  br i1 %595, label %596, label %597, !prof !3

596:                                              ; preds = %592
  call void @llvm.trap() #7
  unreachable

597:                                              ; preds = %592
  %598 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %599 = load i8, i8* %598, align 4, !range !2
  %600 = icmp eq i8 %599, 0
  br i1 %600, label %601, label %602, !prof !3

601:                                              ; preds = %597
  call void @llvm.trap() #7
  unreachable

602:                                              ; preds = %597
  %603 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %604 = load i32, i32* %603, align 4
  %605 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %606 = load i32, i32* %605, align 4
  %607 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %604, i32 %606) #7
  br i1 %526, label %626, label %608

608:                                              ; preds = %602
  %609 = extractvalue { i32, i1 } %607, 1
  %610 = icmp sgt i32 %606, -1
  %611 = select i1 %610, i32 -2147483648, i32 2147483647
  %612 = extractvalue { i32, i1 } %607, 0
  %613 = select i1 %609, i32 %611, i32 %612, !prof !3
  %614 = sitofp i32 %613 to float
  %615 = fmul float %614, 1.562500e-02
  %616 = fmul float %528, %615
  %617 = fdiv float %616, %530
  %618 = fmul float %617, 6.400000e+01
  %619 = fcmp ult float %618, 0xC1E0000000000000
  %620 = fcmp ugt float %618, 0x41DFFFFFE0000000
  %621 = fcmp ogt float %618, 0xC1E0000000000000
  %622 = select i1 %621, float %618, float 0xC1E0000000000000
  %623 = fptosi float %622 to i32
  %624 = select i1 %619, i32 0, i32 2147483647
  %625 = select i1 %620, i32 %624, i32 %623
  br label %626

626:                                              ; preds = %602, %608
  %627 = phi i32 [ %625, %608 ], [ %540, %602 ]
  %628 = icmp sgt i32 %627, -1
  %629 = select i1 %628, i32 -2147483648, i32 2147483647
  %630 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %549, i32 %627) #7
  %631 = extractvalue { i32, i1 } %630, 1
  %632 = extractvalue { i32, i1 } %630, 0
  %633 = select i1 %631, i32 %629, i32 %632, !prof !3
  %634 = icmp slt i32 %627, 0
  %635 = select i1 %634, i32 -2147483648, i32 2147483647
  %636 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %606, i32 %627) #7
  %637 = extractvalue { i32, i1 } %636, 1
  %638 = extractvalue { i32, i1 } %636, 0
  %639 = select i1 %637, i32 %635, i32 %638, !prof !3
  %640 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %548, i64 0, i32 0
  store i32 %639, i32* %640, align 4
  br label %650

641:                                              ; preds = %588
  %642 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %643 = load i8, i8* %642, align 4, !range !2
  %644 = icmp eq i8 %643, 0
  br i1 %644, label %645, label %646, !prof !3

645:                                              ; preds = %641
  call void @llvm.trap() #7
  unreachable

646:                                              ; preds = %641
  %647 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %648 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %548, i64 0, i32 0
  %649 = load i32, i32* %647, align 4
  store i32 %649, i32* %648, align 4
  br label %650

650:                                              ; preds = %545, %557, %646, %626
  %651 = phi i32 [ %549, %557 ], [ %549, %646 ], [ %633, %626 ], [ %549, %545 ]
  %652 = phi %"class.blink::LayoutUnit"* [ %546, %557 ], [ %546, %646 ], [ %548, %626 ], [ %546, %545 ]
  %653 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %547, i64 1
  %654 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %548, i64 1
  %655 = icmp eq %"struct.blink::NGTableTypes::Column"* %653, %3
  br i1 %655, label %541, label %545

656:                                              ; preds = %541
  %657 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %543, i64 0, i32 0
  %658 = load i32, i32* %657, align 4
  %659 = icmp slt i32 %542, 0
  %660 = select i1 %659, i32 -2147483648, i32 2147483647
  %661 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %658, i32 %542) #7
  %662 = extractvalue { i32, i1 } %661, 1
  %663 = extractvalue { i32, i1 } %661, 0
  %664 = select i1 %662, i32 %660, i32 %663, !prof !3
  store i32 %664, i32* %657, align 4
  br label %1233

665:                                              ; preds = %1237
  %666 = load i32, i32* %26, align 4
  %667 = load i32, i32* %21, align 8
  %668 = icmp sgt i32 %667, -1
  %669 = select i1 %668, i32 -2147483648, i32 2147483647
  %670 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %79, i32 %667) #7
  %671 = extractvalue { i32, i1 } %670, 1
  %672 = extractvalue { i32, i1 } %670, 0
  %673 = select i1 %671, i32 %669, i32 %672, !prof !3
  %674 = load i32, i32* %22, align 4
  %675 = icmp eq i32 %79, %674
  %676 = select i1 %675, i32 0, i32 %673
  br i1 %27, label %698, label %677

677:                                              ; preds = %665
  %678 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %679 = bitcast i32* %9 to i8*
  %680 = bitcast i32* %9 to %"class.blink::LayoutUnit"*
  %681 = sitofp i32 %79 to float
  %682 = fmul float %681, 1.562500e-02
  %683 = icmp eq i32 %666, 0
  %684 = sitofp i32 %673 to float
  %685 = fmul float %684, 1.562500e-02
  %686 = sitofp i32 %666 to float
  %687 = fmul float %686, 1.562500e-02
  %688 = uitofp i32 %42 to float
  %689 = fdiv float %685, %688
  %690 = fmul float %689, 6.400000e+01
  %691 = fcmp ult float %690, 0xC1E0000000000000
  %692 = fcmp ugt float %690, 0x41DFFFFFE0000000
  %693 = fcmp ogt float %690, 0xC1E0000000000000
  %694 = select i1 %693, float %690, float 0xC1E0000000000000
  %695 = fptosi float %694 to i32
  %696 = select i1 %691, i32 0, i32 2147483647
  %697 = select i1 %692, i32 %696, i32 %695
  br label %702

698:                                              ; preds = %805, %665
  %699 = phi i32 [ %676, %665 ], [ %806, %805 ]
  %700 = phi %"class.blink::LayoutUnit"* [ null, %665 ], [ %807, %805 ]
  %701 = icmp eq i32 %699, 0
  br i1 %701, label %1233, label %811

702:                                              ; preds = %677, %805
  %703 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %677 ], [ %808, %805 ]
  %704 = phi %"class.blink::LayoutUnit"* [ %678, %677 ], [ %809, %805 ]
  %705 = phi %"class.blink::LayoutUnit"* [ null, %677 ], [ %807, %805 ]
  %706 = phi i32 [ %676, %677 ], [ %806, %805 ]
  %707 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 7
  %708 = load i8, i8* %707, align 1, !range !2
  %709 = icmp eq i8 %708, 0
  br i1 %709, label %710, label %805

710:                                              ; preds = %702
  %711 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %712 = load i8, i8* %711, align 4, !range !2
  %713 = icmp eq i8 %712, 0
  br i1 %713, label %745, label %714

714:                                              ; preds = %710
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %679)
  store i32 0, i32* %9, align 4
  %715 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %716 = load i8, i8* %715, align 4, !range !2
  %717 = icmp eq i8 %716, 0
  %718 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %719 = select i1 %717, %"class.blink::LayoutUnit"* %680, %"class.blink::LayoutUnit"* %718
  %720 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %719, i64 0, i32 0
  %721 = load i32, i32* %720, align 4
  %722 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %723 = load float, float* %722, align 4
  %724 = fmul float %682, %723
  %725 = fdiv float %724, 1.000000e+02
  %726 = fmul float %725, 6.400000e+01
  %727 = fcmp ult float %726, 0xC1E0000000000000
  %728 = fcmp ugt float %726, 0x41DFFFFFE0000000
  %729 = fcmp ogt float %726, 0xC1E0000000000000
  %730 = select i1 %729, float %726, float 0xC1E0000000000000
  %731 = fptosi float %730 to i32
  %732 = select i1 %727, i32 0, i32 2147483647
  %733 = select i1 %728, i32 %732, i32 %731
  %734 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 3, i32 0
  %735 = load i32, i32* %734, align 4
  %736 = icmp slt i32 %735, 0
  %737 = select i1 %736, i32 -2147483648, i32 2147483647
  %738 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %733, i32 %735) #7
  %739 = extractvalue { i32, i1 } %738, 1
  %740 = extractvalue { i32, i1 } %738, 0
  %741 = select i1 %739, i32 %737, i32 %740, !prof !3
  %742 = icmp slt i32 %721, %741
  %743 = select i1 %742, i32 %741, i32 %721
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %679)
  %744 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %704, i64 0, i32 0
  store i32 %743, i32* %744, align 4
  br label %805

745:                                              ; preds = %710
  %746 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 4
  %747 = load i8, i8* %746, align 4, !range !2
  %748 = icmp ne i8 %747, 0
  %749 = or i1 %675, %748
  %750 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %751 = load i8, i8* %750, align 4, !range !2
  %752 = icmp eq i8 %751, 0
  br i1 %749, label %753, label %759

753:                                              ; preds = %745
  br i1 %752, label %754, label %755, !prof !3

754:                                              ; preds = %753
  call void @llvm.trap() #7
  unreachable

755:                                              ; preds = %753
  %756 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %757 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %704, i64 0, i32 0
  %758 = load i32, i32* %756, align 4
  store i32 %758, i32* %757, align 4
  br label %805

759:                                              ; preds = %745
  br i1 %752, label %760, label %761, !prof !3

760:                                              ; preds = %759
  call void @llvm.trap() #7
  unreachable

761:                                              ; preds = %759
  %762 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %763 = load i8, i8* %762, align 4, !range !2
  %764 = icmp eq i8 %763, 0
  br i1 %764, label %765, label %766, !prof !3

765:                                              ; preds = %761
  call void @llvm.trap() #7
  unreachable

766:                                              ; preds = %761
  %767 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %768 = load i32, i32* %767, align 4
  %769 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %770 = load i32, i32* %769, align 4
  %771 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %768, i32 %770) #7
  br i1 %683, label %790, label %772

772:                                              ; preds = %766
  %773 = extractvalue { i32, i1 } %771, 1
  %774 = icmp sgt i32 %770, -1
  %775 = select i1 %774, i32 -2147483648, i32 2147483647
  %776 = extractvalue { i32, i1 } %771, 0
  %777 = select i1 %773, i32 %775, i32 %776, !prof !3
  %778 = sitofp i32 %777 to float
  %779 = fmul float %778, 1.562500e-02
  %780 = fmul float %685, %779
  %781 = fdiv float %780, %687
  %782 = fmul float %781, 6.400000e+01
  %783 = fcmp ult float %782, 0xC1E0000000000000
  %784 = fcmp ugt float %782, 0x41DFFFFFE0000000
  %785 = fcmp ogt float %782, 0xC1E0000000000000
  %786 = select i1 %785, float %782, float 0xC1E0000000000000
  %787 = fptosi float %786 to i32
  %788 = select i1 %783, i32 0, i32 2147483647
  %789 = select i1 %784, i32 %788, i32 %787
  br label %790

790:                                              ; preds = %766, %772
  %791 = phi i32 [ %789, %772 ], [ %697, %766 ]
  %792 = icmp sgt i32 %791, -1
  %793 = select i1 %792, i32 -2147483648, i32 2147483647
  %794 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %706, i32 %791) #7
  %795 = extractvalue { i32, i1 } %794, 1
  %796 = extractvalue { i32, i1 } %794, 0
  %797 = select i1 %795, i32 %793, i32 %796, !prof !3
  %798 = icmp slt i32 %791, 0
  %799 = select i1 %798, i32 -2147483648, i32 2147483647
  %800 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %770, i32 %791) #7
  %801 = extractvalue { i32, i1 } %800, 1
  %802 = extractvalue { i32, i1 } %800, 0
  %803 = select i1 %801, i32 %799, i32 %802, !prof !3
  %804 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %704, i64 0, i32 0
  store i32 %803, i32* %804, align 4
  br label %805

805:                                              ; preds = %702, %714, %790, %755
  %806 = phi i32 [ %706, %714 ], [ %706, %755 ], [ %797, %790 ], [ %706, %702 ]
  %807 = phi %"class.blink::LayoutUnit"* [ %705, %714 ], [ %705, %755 ], [ %704, %790 ], [ %705, %702 ]
  %808 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %703, i64 1
  %809 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %704, i64 1
  %810 = icmp eq %"struct.blink::NGTableTypes::Column"* %808, %3
  br i1 %810, label %698, label %702

811:                                              ; preds = %698
  %812 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %700, i64 0, i32 0
  %813 = load i32, i32* %812, align 4
  %814 = icmp slt i32 %699, 0
  %815 = select i1 %814, i32 -2147483648, i32 2147483647
  %816 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %813, i32 %699) #7
  %817 = extractvalue { i32, i1 } %816, 1
  %818 = extractvalue { i32, i1 } %816, 0
  %819 = select i1 %817, i32 %815, i32 %818, !prof !3
  store i32 %819, i32* %812, align 4
  br label %1233

820:                                              ; preds = %1240
  br i1 %27, label %838, label %821

821:                                              ; preds = %820
  %822 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %823 = bitcast i32* %10 to i8*
  %824 = bitcast i32* %10 to %"class.blink::LayoutUnit"*
  %825 = sitofp i32 %79 to float
  %826 = fmul float %825, 1.562500e-02
  %827 = icmp sgt i32 %40, 0
  %828 = icmp ugt i32 %42, 33554430
  %829 = shl i32 %42, 6
  %830 = select i1 %828, i32 2147483647, i32 %829
  %831 = sext i32 %1246 to i64
  %832 = shl nsw i64 %831, 6
  %833 = sext i32 %830 to i64
  %834 = sitofp i32 %1246 to float
  %835 = fmul float %834, 1.562500e-02
  %836 = sitofp i32 %40 to float
  %837 = fmul float %836, 1.562500e-02
  br label %842

838:                                              ; preds = %960, %820
  %839 = phi i32 [ %1246, %820 ], [ %961, %960 ]
  %840 = phi %"class.blink::LayoutUnit"* [ null, %820 ], [ %962, %960 ]
  %841 = icmp eq i32 %839, 0
  br i1 %841, label %1233, label %966

842:                                              ; preds = %821, %960
  %843 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %821 ], [ %963, %960 ]
  %844 = phi %"class.blink::LayoutUnit"* [ %822, %821 ], [ %964, %960 ]
  %845 = phi %"class.blink::LayoutUnit"* [ null, %821 ], [ %962, %960 ]
  %846 = phi i32 [ %1246, %821 ], [ %961, %960 ]
  %847 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 7
  %848 = load i8, i8* %847, align 1, !range !2
  %849 = icmp eq i8 %848, 0
  br i1 %849, label %850, label %960

850:                                              ; preds = %842
  %851 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %852 = load i8, i8* %851, align 4, !range !2
  %853 = icmp eq i8 %852, 0
  br i1 %853, label %885, label %854

854:                                              ; preds = %850
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %823)
  store i32 0, i32* %10, align 4
  %855 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %856 = load i8, i8* %855, align 4, !range !2
  %857 = icmp eq i8 %856, 0
  %858 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %859 = select i1 %857, %"class.blink::LayoutUnit"* %824, %"class.blink::LayoutUnit"* %858
  %860 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %859, i64 0, i32 0
  %861 = load i32, i32* %860, align 4
  %862 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %863 = load float, float* %862, align 4
  %864 = fmul float %826, %863
  %865 = fdiv float %864, 1.000000e+02
  %866 = fmul float %865, 6.400000e+01
  %867 = fcmp ult float %866, 0xC1E0000000000000
  %868 = fcmp ugt float %866, 0x41DFFFFFE0000000
  %869 = fcmp ogt float %866, 0xC1E0000000000000
  %870 = select i1 %869, float %866, float 0xC1E0000000000000
  %871 = fptosi float %870 to i32
  %872 = select i1 %867, i32 0, i32 2147483647
  %873 = select i1 %868, i32 %872, i32 %871
  %874 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 3, i32 0
  %875 = load i32, i32* %874, align 4
  %876 = icmp slt i32 %875, 0
  %877 = select i1 %876, i32 -2147483648, i32 2147483647
  %878 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %873, i32 %875) #7
  %879 = extractvalue { i32, i1 } %878, 1
  %880 = extractvalue { i32, i1 } %878, 0
  %881 = select i1 %879, i32 %877, i32 %880, !prof !3
  %882 = icmp slt i32 %861, %881
  %883 = select i1 %882, i32 %881, i32 %861
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %823)
  %884 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %844, i64 0, i32 0
  store i32 %883, i32* %884, align 4
  br label %960

885:                                              ; preds = %850
  %886 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 4
  %887 = load i8, i8* %886, align 4, !range !2
  %888 = icmp eq i8 %887, 0
  br i1 %888, label %898, label %889

889:                                              ; preds = %885
  %890 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %891 = load i8, i8* %890, align 4, !range !2
  %892 = icmp eq i8 %891, 0
  br i1 %892, label %893, label %894, !prof !3

893:                                              ; preds = %889
  call void @llvm.trap() #7
  unreachable

894:                                              ; preds = %889
  %895 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %896 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %844, i64 0, i32 0
  %897 = load i32, i32* %895, align 4
  store i32 %897, i32* %896, align 4
  br label %960

898:                                              ; preds = %885
  br i1 %827, label %899, label %918

899:                                              ; preds = %898
  %900 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %901 = load i8, i8* %900, align 4, !range !2
  %902 = icmp eq i8 %901, 0
  br i1 %902, label %903, label %904, !prof !3

903:                                              ; preds = %899
  call void @llvm.trap() #7
  unreachable

904:                                              ; preds = %899
  %905 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %906 = load i32, i32* %905, align 4
  %907 = sitofp i32 %906 to float
  %908 = fmul float %907, 1.562500e-02
  %909 = fmul float %835, %908
  %910 = fdiv float %909, %837
  %911 = fmul float %910, 6.400000e+01
  %912 = fcmp ult float %911, 0xC1E0000000000000
  %913 = fcmp ugt float %911, 0x41DFFFFFE0000000
  %914 = fcmp ogt float %911, 0xC1E0000000000000
  %915 = select i1 %914, float %911, float 0xC1E0000000000000
  %916 = fptosi float %915 to i32
  %917 = select i1 %912, i32 0, i32 2147483647
  br i1 %913, label %937, label %934

918:                                              ; preds = %898
  %919 = sdiv i64 %832, %833
  %920 = call i1 @llvm.is.constant.i64(i64 %919) #7
  br i1 %920, label %928, label %921

921:                                              ; preds = %918
  %922 = icmp slt i64 %919, 0
  %923 = select i1 %922, i32 -2147483648, i32 2147483647
  %924 = add i64 %919, 2147483648
  %925 = icmp ult i64 %924, 4294967296
  %926 = trunc i64 %919 to i32
  %927 = select i1 %925, i32 %926, i32 %923, !prof !4
  br label %934

928:                                              ; preds = %918
  %929 = icmp sgt i64 %919, 2147483647
  br i1 %929, label %937, label %930

930:                                              ; preds = %928
  %931 = icmp sgt i64 %919, -2147483648
  %932 = select i1 %931, i64 %919, i64 -2147483648
  %933 = trunc i64 %932 to i32
  br label %934

934:                                              ; preds = %904, %930, %921
  %935 = phi i32 [ %916, %904 ], [ %927, %921 ], [ %933, %930 ]
  %936 = icmp sgt i32 %935, -1
  br i1 %936, label %937, label %939

937:                                              ; preds = %904, %928, %934
  %938 = phi i32 [ %935, %934 ], [ 2147483647, %928 ], [ %917, %904 ]
  br label %939

939:                                              ; preds = %934, %937
  %940 = phi i32 [ %938, %937 ], [ %935, %934 ]
  %941 = phi i32 [ -2147483648, %937 ], [ 2147483647, %934 ]
  %942 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %846, i32 %940) #7
  %943 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %944 = load i8, i8* %943, align 4, !range !2
  %945 = icmp eq i8 %944, 0
  br i1 %945, label %946, label %947, !prof !3

946:                                              ; preds = %939
  call void @llvm.trap() #7
  unreachable

947:                                              ; preds = %939
  %948 = extractvalue { i32, i1 } %942, 1
  %949 = extractvalue { i32, i1 } %942, 0
  %950 = select i1 %948, i32 %941, i32 %949, !prof !3
  %951 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %952 = load i32, i32* %951, align 4
  %953 = icmp slt i32 %940, 0
  %954 = select i1 %953, i32 -2147483648, i32 2147483647
  %955 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %952, i32 %940) #7
  %956 = extractvalue { i32, i1 } %955, 1
  %957 = extractvalue { i32, i1 } %955, 0
  %958 = select i1 %956, i32 %954, i32 %957, !prof !3
  %959 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %844, i64 0, i32 0
  store i32 %958, i32* %959, align 4
  br label %960

960:                                              ; preds = %842, %854, %947, %894
  %961 = phi i32 [ %846, %854 ], [ %950, %947 ], [ %846, %894 ], [ %846, %842 ]
  %962 = phi %"class.blink::LayoutUnit"* [ %845, %854 ], [ %844, %947 ], [ %845, %894 ], [ %845, %842 ]
  %963 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %843, i64 1
  %964 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %844, i64 1
  %965 = icmp eq %"struct.blink::NGTableTypes::Column"* %963, %3
  br i1 %965, label %838, label %842

966:                                              ; preds = %838
  %967 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %840, i64 0, i32 0
  %968 = load i32, i32* %967, align 4
  %969 = icmp slt i32 %839, 0
  %970 = select i1 %969, i32 -2147483648, i32 2147483647
  %971 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %968, i32 %839) #7
  %972 = extractvalue { i32, i1 } %971, 1
  %973 = extractvalue { i32, i1 } %971, 0
  %974 = select i1 %972, i32 %970, i32 %973, !prof !3
  store i32 %974, i32* %967, align 4
  br label %1233

975:                                              ; preds = %1240
  %976 = icmp eq i32 %43, 0
  br i1 %976, label %1123, label %977

977:                                              ; preds = %975
  br i1 %27, label %995, label %978

978:                                              ; preds = %977
  %979 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %980 = bitcast i32* %11 to i8*
  %981 = bitcast i32* %11 to %"class.blink::LayoutUnit"*
  %982 = sitofp i32 %79 to float
  %983 = fmul float %982, 1.562500e-02
  %984 = icmp sgt i32 %39, 0
  %985 = icmp ugt i32 %43, 33554430
  %986 = shl i32 %43, 6
  %987 = select i1 %985, i32 2147483647, i32 %986
  %988 = sext i32 %1246 to i64
  %989 = shl nsw i64 %988, 6
  %990 = sext i32 %987 to i64
  %991 = sitofp i32 %1246 to float
  %992 = fmul float %991, 1.562500e-02
  %993 = sitofp i32 %39 to float
  %994 = fmul float %993, 1.562500e-02
  br label %999

995:                                              ; preds = %1108, %977
  %996 = phi i32 [ %1246, %977 ], [ %1109, %1108 ]
  %997 = phi %"class.blink::LayoutUnit"* [ null, %977 ], [ %1110, %1108 ]
  %998 = icmp eq i32 %996, 0
  br i1 %998, label %1233, label %1114

999:                                              ; preds = %978, %1108
  %1000 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %978 ], [ %1111, %1108 ]
  %1001 = phi %"class.blink::LayoutUnit"* [ %979, %978 ], [ %1112, %1108 ]
  %1002 = phi %"class.blink::LayoutUnit"* [ null, %978 ], [ %1110, %1108 ]
  %1003 = phi i32 [ %1246, %978 ], [ %1109, %1108 ]
  %1004 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 7
  %1005 = load i8, i8* %1004, align 1, !range !2
  %1006 = icmp eq i8 %1005, 0
  br i1 %1006, label %1007, label %1108

1007:                                             ; preds = %999
  %1008 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %1009 = load i8, i8* %1008, align 4, !range !2
  %1010 = icmp eq i8 %1009, 0
  br i1 %1010, label %1042, label %1011

1011:                                             ; preds = %1007
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %980)
  store i32 0, i32* %11, align 4
  %1012 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1013 = load i8, i8* %1012, align 4, !range !2
  %1014 = icmp eq i8 %1013, 0
  %1015 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %1016 = select i1 %1014, %"class.blink::LayoutUnit"* %981, %"class.blink::LayoutUnit"* %1015
  %1017 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1016, i64 0, i32 0
  %1018 = load i32, i32* %1017, align 4
  %1019 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %1020 = load float, float* %1019, align 4
  %1021 = fmul float %983, %1020
  %1022 = fdiv float %1021, 1.000000e+02
  %1023 = fmul float %1022, 6.400000e+01
  %1024 = fcmp ult float %1023, 0xC1E0000000000000
  %1025 = fcmp ugt float %1023, 0x41DFFFFFE0000000
  %1026 = fcmp ogt float %1023, 0xC1E0000000000000
  %1027 = select i1 %1026, float %1023, float 0xC1E0000000000000
  %1028 = fptosi float %1027 to i32
  %1029 = select i1 %1024, i32 0, i32 2147483647
  %1030 = select i1 %1025, i32 %1029, i32 %1028
  %1031 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 3, i32 0
  %1032 = load i32, i32* %1031, align 4
  %1033 = icmp slt i32 %1032, 0
  %1034 = select i1 %1033, i32 -2147483648, i32 2147483647
  %1035 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1030, i32 %1032) #7
  %1036 = extractvalue { i32, i1 } %1035, 1
  %1037 = extractvalue { i32, i1 } %1035, 0
  %1038 = select i1 %1036, i32 %1034, i32 %1037, !prof !3
  %1039 = icmp slt i32 %1018, %1038
  %1040 = select i1 %1039, i32 %1038, i32 %1018
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %980)
  %1041 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1001, i64 0, i32 0
  store i32 %1040, i32* %1041, align 4
  br label %1108

1042:                                             ; preds = %1007
  %1043 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 4
  %1044 = load i8, i8* %1043, align 4, !range !2
  %1045 = icmp eq i8 %1044, 0
  br i1 %1045, label %1108, label %1046

1046:                                             ; preds = %1042
  br i1 %984, label %1047, label %1066

1047:                                             ; preds = %1046
  %1048 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1049 = load i8, i8* %1048, align 4, !range !2
  %1050 = icmp eq i8 %1049, 0
  br i1 %1050, label %1051, label %1052, !prof !3

1051:                                             ; preds = %1047
  call void @llvm.trap() #7
  unreachable

1052:                                             ; preds = %1047
  %1053 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %1054 = load i32, i32* %1053, align 4
  %1055 = sitofp i32 %1054 to float
  %1056 = fmul float %1055, 1.562500e-02
  %1057 = fmul float %992, %1056
  %1058 = fdiv float %1057, %994
  %1059 = fmul float %1058, 6.400000e+01
  %1060 = fcmp ult float %1059, 0xC1E0000000000000
  %1061 = fcmp ugt float %1059, 0x41DFFFFFE0000000
  %1062 = fcmp ogt float %1059, 0xC1E0000000000000
  %1063 = select i1 %1062, float %1059, float 0xC1E0000000000000
  %1064 = fptosi float %1063 to i32
  %1065 = select i1 %1060, i32 0, i32 2147483647
  br i1 %1061, label %1085, label %1082

1066:                                             ; preds = %1046
  %1067 = sdiv i64 %989, %990
  %1068 = call i1 @llvm.is.constant.i64(i64 %1067) #7
  br i1 %1068, label %1076, label %1069

1069:                                             ; preds = %1066
  %1070 = icmp slt i64 %1067, 0
  %1071 = select i1 %1070, i32 -2147483648, i32 2147483647
  %1072 = add i64 %1067, 2147483648
  %1073 = icmp ult i64 %1072, 4294967296
  %1074 = trunc i64 %1067 to i32
  %1075 = select i1 %1073, i32 %1074, i32 %1071, !prof !4
  br label %1082

1076:                                             ; preds = %1066
  %1077 = icmp sgt i64 %1067, 2147483647
  br i1 %1077, label %1085, label %1078

1078:                                             ; preds = %1076
  %1079 = icmp sgt i64 %1067, -2147483648
  %1080 = select i1 %1079, i64 %1067, i64 -2147483648
  %1081 = trunc i64 %1080 to i32
  br label %1082

1082:                                             ; preds = %1052, %1078, %1069
  %1083 = phi i32 [ %1064, %1052 ], [ %1075, %1069 ], [ %1081, %1078 ]
  %1084 = icmp sgt i32 %1083, -1
  br i1 %1084, label %1085, label %1087

1085:                                             ; preds = %1052, %1076, %1082
  %1086 = phi i32 [ %1083, %1082 ], [ 2147483647, %1076 ], [ %1065, %1052 ]
  br label %1087

1087:                                             ; preds = %1082, %1085
  %1088 = phi i32 [ %1086, %1085 ], [ %1083, %1082 ]
  %1089 = phi i32 [ -2147483648, %1085 ], [ 2147483647, %1082 ]
  %1090 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1003, i32 %1088) #7
  %1091 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1092 = load i8, i8* %1091, align 4, !range !2
  %1093 = icmp eq i8 %1092, 0
  br i1 %1093, label %1094, label %1095, !prof !3

1094:                                             ; preds = %1087
  call void @llvm.trap() #7
  unreachable

1095:                                             ; preds = %1087
  %1096 = extractvalue { i32, i1 } %1090, 1
  %1097 = extractvalue { i32, i1 } %1090, 0
  %1098 = select i1 %1096, i32 %1089, i32 %1097, !prof !3
  %1099 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %1100 = load i32, i32* %1099, align 4
  %1101 = icmp slt i32 %1088, 0
  %1102 = select i1 %1101, i32 -2147483648, i32 2147483647
  %1103 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1100, i32 %1088) #7
  %1104 = extractvalue { i32, i1 } %1103, 1
  %1105 = extractvalue { i32, i1 } %1103, 0
  %1106 = select i1 %1104, i32 %1102, i32 %1105, !prof !3
  %1107 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1001, i64 0, i32 0
  store i32 %1106, i32* %1107, align 4
  br label %1108

1108:                                             ; preds = %1042, %999, %1011, %1095
  %1109 = phi i32 [ %1003, %1011 ], [ %1003, %1042 ], [ %1098, %1095 ], [ %1003, %999 ]
  %1110 = phi %"class.blink::LayoutUnit"* [ %1002, %1011 ], [ %1002, %1042 ], [ %1001, %1095 ], [ %1002, %999 ]
  %1111 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1000, i64 1
  %1112 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1001, i64 1
  %1113 = icmp eq %"struct.blink::NGTableTypes::Column"* %1111, %3
  br i1 %1113, label %995, label %999

1114:                                             ; preds = %995
  %1115 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %997, i64 0, i32 0
  %1116 = load i32, i32* %1115, align 4
  %1117 = icmp slt i32 %996, 0
  %1118 = select i1 %1117, i32 -2147483648, i32 2147483647
  %1119 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1116, i32 %996) #7
  %1120 = extractvalue { i32, i1 } %1119, 1
  %1121 = extractvalue { i32, i1 } %1119, 0
  %1122 = select i1 %1120, i32 %1118, i32 %1121, !prof !3
  store i32 %1122, i32* %1115, align 4
  br label %1233

1123:                                             ; preds = %975
  %1124 = icmp eq i32 %44, 0
  br i1 %1124, label %1233, label %1125

1125:                                             ; preds = %1123
  br i1 %27, label %1145, label %1126

1126:                                             ; preds = %1125
  %1127 = load %"class.blink::LayoutUnit"*, %"class.blink::LayoutUnit"** %46, align 8
  %1128 = bitcast i32* %12 to i8*
  %1129 = bitcast i32* %12 to %"class.blink::LayoutUnit"*
  %1130 = sitofp i32 %79 to float
  %1131 = fmul float %1130, 1.562500e-02
  %1132 = fcmp une float %41, 0.000000e+00
  %1133 = sitofp i32 %1246 to float
  %1134 = fmul float %1133, 1.562500e-02
  %1135 = uitofp i32 %44 to float
  %1136 = fdiv float %1134, %1135
  %1137 = fmul float %1136, 6.400000e+01
  %1138 = fcmp ult float %1137, 0xC1E0000000000000
  %1139 = fcmp ugt float %1137, 0x41DFFFFFE0000000
  %1140 = fcmp ogt float %1137, 0xC1E0000000000000
  %1141 = select i1 %1140, float %1137, float 0xC1E0000000000000
  %1142 = fptosi float %1141 to i32
  %1143 = select i1 %1138, i32 0, i32 2147483647
  %1144 = select i1 %1139, i32 %1143, i32 %1142
  br label %1149

1145:                                             ; preds = %1218, %1125
  %1146 = phi i32 [ %1246, %1125 ], [ %1219, %1218 ]
  %1147 = phi %"class.blink::LayoutUnit"* [ null, %1125 ], [ %1220, %1218 ]
  %1148 = icmp eq i32 %1146, 0
  br i1 %1148, label %1233, label %1224

1149:                                             ; preds = %1126, %1218
  %1150 = phi %"struct.blink::NGTableTypes::Column"* [ %2, %1126 ], [ %1221, %1218 ]
  %1151 = phi %"class.blink::LayoutUnit"* [ %1127, %1126 ], [ %1222, %1218 ]
  %1152 = phi %"class.blink::LayoutUnit"* [ null, %1126 ], [ %1220, %1218 ]
  %1153 = phi i32 [ %1246, %1126 ], [ %1219, %1218 ]
  %1154 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 0, i32 7
  %1155 = load i8, i8* %1154, align 1, !range !2
  %1156 = icmp eq i8 %1155, 0
  br i1 %1156, label %1157, label %1218

1157:                                             ; preds = %1149
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1128)
  store i32 0, i32* %12, align 4
  %1158 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1159 = load i8, i8* %1158, align 4, !range !2
  %1160 = icmp eq i8 %1159, 0
  %1161 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %1162 = select i1 %1160, %"class.blink::LayoutUnit"* %1129, %"class.blink::LayoutUnit"* %1161
  %1163 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1162, i64 0, i32 0
  %1164 = load i32, i32* %1163, align 4
  %1165 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %1166 = load i8, i8* %1165, align 4, !range !2
  %1167 = icmp eq i8 %1166, 0
  br i1 %1167, label %1168, label %1169, !prof !3

1168:                                             ; preds = %1157
  call void @llvm.trap() #7
  unreachable

1169:                                             ; preds = %1157
  %1170 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %1171 = load float, float* %1170, align 4
  %1172 = fmul float %1131, %1171
  %1173 = fdiv float %1172, 1.000000e+02
  %1174 = fmul float %1173, 6.400000e+01
  %1175 = fcmp ult float %1174, 0xC1E0000000000000
  %1176 = fcmp ugt float %1174, 0x41DFFFFFE0000000
  %1177 = fcmp ogt float %1174, 0xC1E0000000000000
  %1178 = select i1 %1177, float %1174, float 0xC1E0000000000000
  %1179 = fptosi float %1178 to i32
  %1180 = select i1 %1175, i32 0, i32 2147483647
  %1181 = select i1 %1176, i32 %1180, i32 %1179
  %1182 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 0, i32 3, i32 0
  %1183 = load i32, i32* %1182, align 4
  %1184 = icmp slt i32 %1183, 0
  %1185 = select i1 %1184, i32 -2147483648, i32 2147483647
  %1186 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1181, i32 %1183) #7
  %1187 = extractvalue { i32, i1 } %1186, 1
  %1188 = extractvalue { i32, i1 } %1186, 0
  %1189 = select i1 %1187, i32 %1185, i32 %1188, !prof !3
  %1190 = icmp slt i32 %1164, %1189
  %1191 = select i1 %1190, i32 %1189, i32 %1164
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1128)
  br i1 %1132, label %1192, label %1203

1192:                                             ; preds = %1169
  %1193 = fmul float %1134, %1171
  %1194 = fdiv float %1193, %41
  %1195 = fmul float %1194, 6.400000e+01
  %1196 = fcmp ult float %1195, 0xC1E0000000000000
  %1197 = fcmp ugt float %1195, 0x41DFFFFFE0000000
  %1198 = fcmp ogt float %1195, 0xC1E0000000000000
  %1199 = select i1 %1198, float %1195, float 0xC1E0000000000000
  %1200 = fptosi float %1199 to i32
  %1201 = select i1 %1196, i32 0, i32 2147483647
  %1202 = select i1 %1197, i32 %1201, i32 %1200
  br label %1203

1203:                                             ; preds = %1169, %1192
  %1204 = phi i32 [ %1202, %1192 ], [ %1144, %1169 ]
  %1205 = icmp sgt i32 %1204, -1
  %1206 = select i1 %1205, i32 -2147483648, i32 2147483647
  %1207 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1153, i32 %1204) #7
  %1208 = extractvalue { i32, i1 } %1207, 1
  %1209 = extractvalue { i32, i1 } %1207, 0
  %1210 = select i1 %1208, i32 %1206, i32 %1209, !prof !3
  %1211 = icmp slt i32 %1204, 0
  %1212 = select i1 %1211, i32 -2147483648, i32 2147483647
  %1213 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1191, i32 %1204) #7
  %1214 = extractvalue { i32, i1 } %1213, 1
  %1215 = extractvalue { i32, i1 } %1213, 0
  %1216 = select i1 %1214, i32 %1212, i32 %1215, !prof !3
  %1217 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1151, i64 0, i32 0
  store i32 %1216, i32* %1217, align 4
  br label %1218

1218:                                             ; preds = %1149, %1203
  %1219 = phi i32 [ %1210, %1203 ], [ %1153, %1149 ]
  %1220 = phi %"class.blink::LayoutUnit"* [ %1151, %1203 ], [ %1152, %1149 ]
  %1221 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %1150, i64 1
  %1222 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1151, i64 1
  %1223 = icmp eq %"struct.blink::NGTableTypes::Column"* %1221, %3
  br i1 %1223, label %1145, label %1149

1224:                                             ; preds = %1145
  %1225 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1147, i64 0, i32 0
  %1226 = load i32, i32* %1225, align 4
  %1227 = icmp slt i32 %1146, 0
  %1228 = select i1 %1227, i32 -2147483648, i32 2147483647
  %1229 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1226, i32 %1146) #7
  %1230 = extractvalue { i32, i1 } %1229, 1
  %1231 = extractvalue { i32, i1 } %1229, 0
  %1232 = select i1 %1230, i32 %1228, i32 %1231, !prof !3
  store i32 %1232, i32* %1225, align 4
  br label %1233

1233:                                             ; preds = %351, %1257, %325, %1145, %995, %838, %403, %541, %698, %1123, %966, %1114, %1224, %811, %656, %502
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #7
  ret void

1234:                                             ; preds = %322
  %1235 = load i32, i32* %21, align 8
  %1236 = icmp slt i32 %1235, %79
  br i1 %1236, label %1237, label %511

1237:                                             ; preds = %1234
  %1238 = load i32, i32* %22, align 4
  %1239 = icmp slt i32 %1238, %79
  br i1 %1239, label %1240, label %665

1240:                                             ; preds = %1237
  %1241 = icmp sgt i32 %1238, -1
  %1242 = select i1 %1241, i32 -2147483648, i32 2147483647
  %1243 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %79, i32 %1238) #7
  %1244 = extractvalue { i32, i1 } %1243, 1
  %1245 = extractvalue { i32, i1 } %1243, 0
  %1246 = select i1 %1244, i32 %1242, i32 %1245, !prof !3
  %1247 = icmp eq i32 %42, 0
  br i1 %1247, label %975, label %820

1248:                                             ; preds = %370
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %328)
  store i32 0, i32* %17, align 4
  %1249 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1250 = load i8, i8* %1249, align 4, !range !2
  %1251 = icmp eq i8 %1250, 0
  %1252 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %1253 = select i1 %1251, %"class.blink::LayoutUnit"* %329, %"class.blink::LayoutUnit"* %1252
  %1254 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1253, i64 0, i32 0
  %1255 = load i32, i32* %1254, align 4
  %1256 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %356, i64 1, i32 0
  store i32 %1255, i32* %1256, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %328)
  br label %1257

1257:                                             ; preds = %1248, %370
  %1258 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %357, i64 2
  %1259 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %356, i64 2
  %1260 = icmp eq %"struct.blink::NGTableTypes::Column"* %1258, %3
  br i1 %1260, label %1233, label %355
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23NGTableAlgorithmHelpers27DistributeRowspanCellToRowsERKNS_12NGTableTypes11RowspanCellENS_10LayoutUnitEPN3WTF6VectorINS1_3RowELj0ENS6_18PartitionAllocatorEEE(%"struct.blink::NGTableTypes::RowspanCell"* nocapture readonly dereferenceable(52), i32, %"class.WTF::Vector.1697"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.blink::NGTableTypes::RowspanCell", %"struct.blink::NGTableTypes::RowspanCell"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"struct.blink::NGTableTypes::RowspanCell", %"struct.blink::NGTableTypes::RowspanCell"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"struct.blink::NGTableTypes::RowspanCell", %"struct.blink::NGTableTypes::RowspanCell"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_131DistributeExcessBlockSizeToRowsEjjNS_10LayoutUnitEbS1_S1_PN3WTF6VectorINS_12NGTableTypes3RowELj0ENS2_18PartitionAllocatorEEE(i32 %5, i32 %7, i32 %9, i1 zeroext true, i32 %1, i32 -64, %"class.WTF::Vector.1697"* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_131DistributeExcessBlockSizeToRowsEjjNS_10LayoutUnitEbS1_S1_PN3WTF6VectorINS_12NGTableTypes3RowELj0ENS2_18PartitionAllocatorEEE(i32, i32, i32, i1 zeroext, i32, i32, %"class.WTF::Vector.1697"* nocapture readonly) unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %586, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.WTF::Vector.1697", %"class.WTF::Vector.1697"* %6, i64 0, i32 0, i32 0, i32 0
  %16 = load %"struct.blink::NGTableTypes::Row"*, %"struct.blink::NGTableTypes::Row"** %15, align 8
  %17 = zext i32 %0 to i64
  %18 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %16, i64 %17
  %19 = add i32 %1, %0
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %16, i64 %20
  %22 = icmp eq i32 %5, -64
  %23 = sitofp i32 %5 to float
  %24 = fmul float %23, 1.562500e-02
  %25 = xor i1 %3, true
  br label %59

26:                                               ; preds = %161
  %27 = add i32 %1, -1
  %28 = icmp ugt i32 %27, 33554430
  %29 = shl i32 %27, 6
  %30 = select i1 %28, i32 2147483647, i32 %29
  %31 = sext i32 %4 to i64
  %32 = sext i32 %30 to i64
  %33 = mul nsw i64 %31, %32
  %34 = sdiv i64 %33, 64
  %35 = ashr i64 %34, 32
  %36 = trunc i64 %35 to i32
  %37 = trunc i64 %34 to i32
  %38 = ashr i32 %37, 31
  %39 = icmp eq i32 %38, %36
  br i1 %39, label %44, label %40

40:                                               ; preds = %26
  %41 = xor i32 %30, %4
  %42 = lshr i32 %41, 31
  %43 = add nuw i32 %42, 2147483647
  br label %44

44:                                               ; preds = %26, %40
  %45 = phi i32 [ %37, %26 ], [ %43, %40 ]
  %46 = icmp sgt i32 %45, -1
  %47 = select i1 %46, i32 -2147483648, i32 2147483647
  %48 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %45) #7
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = select i1 %49, i32 %47, i32 %50, !prof !3
  %52 = icmp sgt i32 %77, -1
  %53 = select i1 %52, i32 -2147483648, i32 2147483647
  %54 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %51, i32 %77) #7
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  %57 = select i1 %55, i32 %53, i32 %56, !prof !3
  %58 = icmp slt i32 %57, 1
  br i1 %58, label %586, label %169

59:                                               ; preds = %14, %161
  %60 = phi %"struct.blink::NGTableTypes::Row"* [ %18, %14 ], [ %167, %161 ]
  %61 = phi i32 [ 0, %14 ], [ %166, %161 ]
  %62 = phi i32 [ 0, %14 ], [ %165, %161 ]
  %63 = phi i32 [ 0, %14 ], [ %164, %161 ]
  %64 = phi i32 [ 0, %14 ], [ %163, %161 ]
  %65 = phi i32 [ 0, %14 ], [ %119, %161 ]
  %66 = phi i32 [ 0, %14 ], [ %110, %161 ]
  %67 = phi i32 [ 0, %14 ], [ %77, %161 ]
  %68 = phi i32 [ 0, %14 ], [ %109, %161 ]
  %69 = phi i32 [ 0, %14 ], [ %162, %161 ]
  %70 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 0
  %73 = select i1 %72, i32 -2147483648, i32 2147483647
  %74 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %67, i32 %71) #7
  %75 = extractvalue { i32, i1 } %74, 1
  %76 = extractvalue { i32, i1 } %74, 0
  %77 = select i1 %75, i32 %73, i32 %76, !prof !3
  %78 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %79 = load i8, i8* %78, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  %81 = or i1 %22, %80
  br i1 %81, label %108, label %82

82:                                               ; preds = %59
  %83 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %84 = load float, float* %83, align 4
  %85 = fmul float %24, %84
  %86 = fdiv float %85, 1.000000e+02
  %87 = fmul float %86, 6.400000e+01
  %88 = fcmp ult float %87, 0xC1E0000000000000
  %89 = fcmp ugt float %87, 0x41DFFFFFE0000000
  %90 = fcmp ogt float %87, 0xC1E0000000000000
  %91 = select i1 %90, float %87, float 0xC1E0000000000000
  %92 = fptosi float %91 to i32
  %93 = select i1 %88, i32 0, i32 2147483647
  %94 = select i1 %89, i32 %93, i32 %92
  %95 = icmp sgt i32 %71, -1
  %96 = select i1 %95, i32 -2147483648, i32 2147483647
  %97 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %94, i32 %71) #7
  %98 = extractvalue { i32, i1 } %97, 1
  %99 = extractvalue { i32, i1 } %97, 0
  %100 = select i1 %98, i32 %96, i32 %99, !prof !3
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %108

102:                                              ; preds = %82
  %103 = add i32 %66, 1
  %104 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %68, i32 %100) #7
  %105 = extractvalue { i32, i1 } %104, 1
  %106 = extractvalue { i32, i1 } %104, 0
  %107 = select i1 %105, i32 2147483647, i32 %106, !prof !3
  br label %108

108:                                              ; preds = %59, %82, %102
  %109 = phi i32 [ %68, %59 ], [ %107, %102 ], [ %68, %82 ]
  %110 = phi i32 [ %66, %59 ], [ %103, %102 ], [ %66, %82 ]
  %111 = icmp eq %"struct.blink::NGTableTypes::Row"* %18, %60
  %112 = or i1 %111, %25
  br i1 %112, label %118, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 7
  %115 = load i8, i8* %114, align 2, !range !2
  %116 = zext i8 %115 to i32
  %117 = add i32 %65, %116
  br label %118

118:                                              ; preds = %113, %108
  %119 = phi i32 [ %65, %108 ], [ %117, %113 ]
  %120 = icmp eq i32 %71, 0
  br i1 %120, label %134, label %121

121:                                              ; preds = %118
  %122 = icmp ne i8 %79, 0
  %123 = and i1 %22, %122
  br i1 %123, label %128, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 5
  %126 = load i8, i8* %125, align 4, !range !2
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %138

128:                                              ; preds = %121, %124
  %129 = add i32 %64, 1
  %130 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %69, i32 %71) #7
  %131 = extractvalue { i32, i1 } %130, 1
  %132 = extractvalue { i32, i1 } %130, 0
  %133 = select i1 %131, i32 %73, i32 %132, !prof !3
  br label %161

134:                                              ; preds = %118
  %135 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 5
  %136 = load i8, i8* %135, align 4, !range !2
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %147, label %140

138:                                              ; preds = %124
  %139 = add i32 %63, 1
  br label %161

140:                                              ; preds = %134
  br i1 %80, label %154, label %141

141:                                              ; preds = %140
  %142 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %143 = load float, float* %142, align 4
  %144 = fcmp oeq float %143, 0.000000e+00
  %145 = add i32 %63, 1
  br i1 %144, label %146, label %148

146:                                              ; preds = %141
  br label %148

147:                                              ; preds = %134
  br i1 %80, label %154, label %148

148:                                              ; preds = %146, %141, %147
  %149 = phi i32 [ %63, %147 ], [ %145, %141 ], [ %63, %146 ]
  %150 = phi i32 [ 0, %147 ], [ 1, %141 ], [ 1, %146 ]
  %151 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %152 = load float, float* %151, align 4
  %153 = fcmp oeq float %152, 0.000000e+00
  br i1 %153, label %154, label %161

154:                                              ; preds = %140, %147, %148
  %155 = phi i32 [ %63, %147 ], [ %149, %148 ], [ %63, %140 ]
  %156 = phi i32 [ 0, %147 ], [ %150, %148 ], [ 1, %140 ]
  %157 = add i32 %62, 1
  %158 = and i32 %156, 255
  %159 = xor i32 %158, 1
  %160 = add i32 %61, %159
  br label %161

161:                                              ; preds = %128, %138, %154, %148
  %162 = phi i32 [ %69, %148 ], [ %69, %154 ], [ %69, %138 ], [ %133, %128 ]
  %163 = phi i32 [ %64, %148 ], [ %64, %154 ], [ %64, %138 ], [ %129, %128 ]
  %164 = phi i32 [ %149, %148 ], [ %155, %154 ], [ %139, %138 ], [ %63, %128 ]
  %165 = phi i32 [ %62, %148 ], [ %157, %154 ], [ %62, %138 ], [ %62, %128 ]
  %166 = phi i32 [ %61, %148 ], [ %160, %154 ], [ %61, %138 ], [ %61, %128 ]
  %167 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %60, i64 1
  %168 = icmp eq %"struct.blink::NGTableTypes::Row"* %167, %21
  br i1 %168, label %26, label %59

169:                                              ; preds = %44
  %170 = icmp eq i32 %110, 0
  br i1 %170, label %298, label %171

171:                                              ; preds = %169
  %172 = sitofp i32 %57 to float
  %173 = fmul float %172, 1.562500e-02
  %174 = sitofp i32 %109 to float
  %175 = fmul float %174, 1.562500e-02
  %176 = fdiv float %173, %175
  %177 = fcmp ogt float %176, 1.000000e+00
  %178 = select i1 %177, float 1.000000e+00, float %176
  %179 = fmul float %175, %178
  %180 = fmul float %179, 6.400000e+01
  %181 = fcmp ugt float %180, 0x41DFFFFFE0000000
  %182 = fcmp ult float %180, 0xC1E0000000000000
  %183 = select i1 %182, i32 0, i32 2147483647
  %184 = fcmp ogt float %180, 0xC1E0000000000000
  %185 = select i1 %184, float %180, float 0xC1E0000000000000
  %186 = fptosi float %185 to i32
  %187 = select i1 %181, i32 %183, i32 %186
  %188 = icmp eq i32 %5, -64
  %189 = sitofp i32 %5 to float
  %190 = fmul float %189, 1.562500e-02
  br label %191

191:                                              ; preds = %171, %262
  %192 = phi i32 [ 0, %171 ], [ %263, %262 ]
  %193 = phi %"struct.blink::NGTableTypes::Row"* [ %18, %171 ], [ %267, %262 ]
  %194 = phi %"struct.blink::NGTableTypes::Row"* [ inttoptr (i64 -6148914691236517206 to %"struct.blink::NGTableTypes::Row"*), %171 ], [ %266, %262 ]
  %195 = phi i32 [ %77, %171 ], [ %265, %262 ]
  %196 = phi i32 [ %187, %171 ], [ %264, %262 ]
  %197 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %198 = load i8, i8* %197, align 4, !range !2
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %262, label %200

200:                                              ; preds = %191
  br i1 %188, label %201, label %204

201:                                              ; preds = %200
  %202 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %193, i64 0, i32 0, i32 0
  %203 = load i32, i32* %202, align 4
  br label %227

204:                                              ; preds = %200
  %205 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %206 = load float, float* %205, align 4
  %207 = fmul float %190, %206
  %208 = fdiv float %207, 1.000000e+02
  %209 = fmul float %208, 6.400000e+01
  %210 = fcmp ult float %209, 0xC1E0000000000000
  %211 = fcmp ugt float %209, 0x41DFFFFFE0000000
  %212 = fcmp ogt float %209, 0xC1E0000000000000
  %213 = select i1 %212, float %209, float 0xC1E0000000000000
  %214 = fptosi float %213 to i32
  %215 = select i1 %210, i32 0, i32 2147483647
  %216 = select i1 %211, i32 %215, i32 %214
  %217 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %193, i64 0, i32 0, i32 0
  %218 = load i32, i32* %217, align 4
  %219 = icmp sgt i32 %218, -1
  %220 = select i1 %219, i32 -2147483648, i32 2147483647
  %221 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %216, i32 %218) #7
  %222 = extractvalue { i32, i1 } %221, 1
  %223 = extractvalue { i32, i1 } %221, 0
  %224 = select i1 %222, i32 %220, i32 %223, !prof !3
  %225 = icmp sgt i32 %224, 0
  %226 = select i1 %225, i32 %224, i32 0
  br label %227

227:                                              ; preds = %201, %204
  %228 = phi i32 [ %218, %204 ], [ %203, %201 ]
  %229 = phi i32 [ %226, %204 ], [ 0, %201 ]
  %230 = sitofp i32 %229 to float
  %231 = fmul float %230, 1.562500e-02
  %232 = fmul float %178, %231
  %233 = fmul float %232, 6.400000e+01
  %234 = fcmp ult float %233, 0xC1E0000000000000
  %235 = fcmp ugt float %233, 0x41DFFFFFE0000000
  %236 = fcmp ogt float %233, 0xC1E0000000000000
  %237 = select i1 %236, float %233, float 0xC1E0000000000000
  %238 = fptosi float %237 to i32
  %239 = select i1 %234, i32 0, i32 2147483647
  %240 = select i1 %235, i32 %239, i32 %238
  %241 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %193, i64 0, i32 0, i32 0
  %242 = icmp slt i32 %240, 0
  %243 = select i1 %242, i32 -2147483648, i32 2147483647
  %244 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %228, i32 %240) #7
  %245 = extractvalue { i32, i1 } %244, 1
  %246 = extractvalue { i32, i1 } %244, 0
  %247 = select i1 %245, i32 %243, i32 %246, !prof !3
  store i32 %247, i32* %241, align 4
  %248 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %195, i32 %240) #7
  %249 = extractvalue { i32, i1 } %248, 1
  %250 = extractvalue { i32, i1 } %248, 0
  %251 = select i1 %249, i32 %243, i32 %250, !prof !3
  %252 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %192, i32 %240) #7
  %253 = extractvalue { i32, i1 } %252, 1
  %254 = extractvalue { i32, i1 } %252, 0
  %255 = select i1 %253, i32 %243, i32 %254, !prof !3
  %256 = icmp sgt i32 %240, -1
  %257 = select i1 %256, i32 -2147483648, i32 2147483647
  %258 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %196, i32 %240) #7
  %259 = extractvalue { i32, i1 } %258, 1
  %260 = extractvalue { i32, i1 } %258, 0
  %261 = select i1 %259, i32 %257, i32 %260, !prof !3
  br label %262

262:                                              ; preds = %191, %227
  %263 = phi i32 [ %255, %227 ], [ %192, %191 ]
  %264 = phi i32 [ %261, %227 ], [ %196, %191 ]
  %265 = phi i32 [ %251, %227 ], [ %195, %191 ]
  %266 = phi %"struct.blink::NGTableTypes::Row"* [ %193, %227 ], [ %194, %191 ]
  %267 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %193, i64 1
  %268 = icmp eq %"struct.blink::NGTableTypes::Row"* %267, %21
  br i1 %268, label %269, label %191

269:                                              ; preds = %262
  %270 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %266, i64 0, i32 0
  %271 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %266, i64 0, i32 0, i32 0
  %272 = load i32, i32* %271, align 4
  %273 = icmp slt i32 %264, 0
  %274 = select i1 %273, i32 -2147483648, i32 2147483647
  %275 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %272, i32 %264) #7
  %276 = extractvalue { i32, i1 } %275, 1
  %277 = extractvalue { i32, i1 } %275, 0
  %278 = select i1 %276, i32 %274, i32 %277
  store i32 %278, i32* %271, align 4
  %279 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %279)
  store i32 0, i32* %8, align 4
  %280 = icmp slt i32 %278, 0
  %281 = bitcast i32* %8 to %"class.blink::LayoutUnit"*
  %282 = select i1 %280, %"class.blink::LayoutUnit"* %281, %"class.blink::LayoutUnit"* %270
  %283 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %282, i64 0, i32 0
  %284 = load i32, i32* %283, align 4
  store i32 %284, i32* %271, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %279)
  %285 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %263, i32 %264) #7
  %286 = extractvalue { i32, i1 } %285, 1
  %287 = extractvalue { i32, i1 } %285, 0
  %288 = select i1 %286, i32 %274, i32 %287, !prof !3
  %289 = icmp slt i32 %57, %288
  %290 = select i1 %289, i32 %57, i32 %288
  %291 = icmp sgt i32 %290, -1
  %292 = select i1 %291, i32 -2147483648, i32 2147483647
  %293 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %57, i32 %290) #7
  %294 = extractvalue { i32, i1 } %293, 1
  %295 = extractvalue { i32, i1 } %293, 0
  %296 = select i1 %294, i32 %292, i32 %295, !prof !3
  %297 = icmp slt i32 %296, 1
  br i1 %297, label %586, label %298

298:                                              ; preds = %169, %269
  %299 = phi i32 [ %265, %269 ], [ %77, %169 ]
  %300 = phi i32 [ %296, %269 ], [ %57, %169 ]
  %301 = icmp eq i32 %119, 0
  br i1 %301, label %376, label %302

302:                                              ; preds = %298
  %303 = xor i1 %3, true
  %304 = icmp ugt i32 %119, 33554430
  %305 = shl i32 %119, 6
  %306 = select i1 %304, i32 2147483647, i32 %305
  %307 = sext i32 %300 to i64
  %308 = shl nsw i64 %307, 6
  %309 = sext i32 %306 to i64
  br label %326

310:                                              ; preds = %371
  %311 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %373, i64 0, i32 0
  %312 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %373, i64 0, i32 0, i32 0
  %313 = load i32, i32* %312, align 4
  %314 = icmp slt i32 %372, 0
  %315 = select i1 %314, i32 -2147483648, i32 2147483647
  %316 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %313, i32 %372) #7
  %317 = extractvalue { i32, i1 } %316, 1
  %318 = extractvalue { i32, i1 } %316, 0
  %319 = select i1 %317, i32 %315, i32 %318
  store i32 %319, i32* %312, align 4
  %320 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %320)
  store i32 0, i32* %9, align 4
  %321 = icmp slt i32 %319, 0
  %322 = bitcast i32* %9 to %"class.blink::LayoutUnit"*
  %323 = select i1 %321, %"class.blink::LayoutUnit"* %322, %"class.blink::LayoutUnit"* %311
  %324 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %323, i64 0, i32 0
  %325 = load i32, i32* %324, align 4
  store i32 %325, i32* %312, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %320)
  br label %586

326:                                              ; preds = %302, %371
  %327 = phi %"struct.blink::NGTableTypes::Row"* [ %18, %302 ], [ %374, %371 ]
  %328 = phi %"struct.blink::NGTableTypes::Row"* [ inttoptr (i64 -6148914691236517206 to %"struct.blink::NGTableTypes::Row"*), %302 ], [ %373, %371 ]
  %329 = phi i32 [ %300, %302 ], [ %372, %371 ]
  %330 = icmp eq %"struct.blink::NGTableTypes::Row"* %18, %327
  %331 = or i1 %330, %303
  br i1 %331, label %371, label %332

332:                                              ; preds = %326
  %333 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %327, i64 0, i32 7
  %334 = load i8, i8* %333, align 2, !range !2
  %335 = icmp eq i8 %334, 0
  br i1 %335, label %371, label %336

336:                                              ; preds = %332
  %337 = sdiv i64 %308, %309
  %338 = tail call i1 @llvm.is.constant.i64(i64 %337) #7
  br i1 %338, label %346, label %339

339:                                              ; preds = %336
  %340 = icmp slt i64 %337, 0
  %341 = select i1 %340, i32 -2147483648, i32 2147483647
  %342 = add i64 %337, 2147483648
  %343 = icmp ult i64 %342, 4294967296
  %344 = trunc i64 %337 to i32
  %345 = select i1 %343, i32 %344, i32 %341, !prof !4
  br label %352

346:                                              ; preds = %336
  %347 = icmp sgt i64 %337, 2147483647
  br i1 %347, label %356, label %348

348:                                              ; preds = %346
  %349 = icmp sgt i64 %337, -2147483648
  %350 = select i1 %349, i64 %337, i64 -2147483648
  %351 = trunc i64 %350 to i32
  br label %352

352:                                              ; preds = %339, %348
  %353 = phi i32 [ %345, %339 ], [ %351, %348 ]
  %354 = icmp slt i32 %353, 0
  %355 = select i1 %354, i32 -2147483648, i32 2147483647
  br label %356

356:                                              ; preds = %346, %352
  %357 = phi i32 [ %353, %352 ], [ 2147483647, %346 ]
  %358 = phi i32 [ %355, %352 ], [ 2147483647, %346 ]
  %359 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %327, i64 0, i32 0, i32 0
  %360 = load i32, i32* %359, align 4
  %361 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %360, i32 %357) #7
  %362 = extractvalue { i32, i1 } %361, 1
  %363 = extractvalue { i32, i1 } %361, 0
  %364 = select i1 %362, i32 %358, i32 %363, !prof !3
  store i32 %364, i32* %359, align 4
  %365 = icmp sgt i32 %357, -1
  %366 = select i1 %365, i32 -2147483648, i32 2147483647
  %367 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %329, i32 %357) #7
  %368 = extractvalue { i32, i1 } %367, 1
  %369 = extractvalue { i32, i1 } %367, 0
  %370 = select i1 %368, i32 %366, i32 %369, !prof !3
  br label %371

371:                                              ; preds = %332, %326, %356
  %372 = phi i32 [ %370, %356 ], [ %329, %332 ], [ %329, %326 ]
  %373 = phi %"struct.blink::NGTableTypes::Row"* [ %327, %356 ], [ %328, %332 ], [ %328, %326 ]
  %374 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %327, i64 1
  %375 = icmp eq %"struct.blink::NGTableTypes::Row"* %374, %21
  br i1 %375, label %310, label %326

376:                                              ; preds = %298
  %377 = icmp eq i32 %163, 0
  br i1 %377, label %446, label %378

378:                                              ; preds = %376
  %379 = icmp eq i32 %5, -64
  %380 = sitofp i32 %300 to float
  %381 = fmul float %380, 1.562500e-02
  %382 = sitofp i32 %162 to float
  %383 = fmul float %382, 1.562500e-02
  br label %400

384:                                              ; preds = %441
  %385 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %443, i64 0, i32 0
  %386 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %443, i64 0, i32 0, i32 0
  %387 = load i32, i32* %386, align 4
  %388 = icmp slt i32 %442, 0
  %389 = select i1 %388, i32 -2147483648, i32 2147483647
  %390 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %387, i32 %442) #7
  %391 = extractvalue { i32, i1 } %390, 1
  %392 = extractvalue { i32, i1 } %390, 0
  %393 = select i1 %391, i32 %389, i32 %392
  store i32 %393, i32* %386, align 4
  %394 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %394)
  store i32 0, i32* %10, align 4
  %395 = icmp slt i32 %393, 0
  %396 = bitcast i32* %10 to %"class.blink::LayoutUnit"*
  %397 = select i1 %395, %"class.blink::LayoutUnit"* %396, %"class.blink::LayoutUnit"* %385
  %398 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %397, i64 0, i32 0
  %399 = load i32, i32* %398, align 4
  store i32 %399, i32* %386, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %394)
  br label %586

400:                                              ; preds = %378, %441
  %401 = phi %"struct.blink::NGTableTypes::Row"* [ %18, %378 ], [ %444, %441 ]
  %402 = phi %"struct.blink::NGTableTypes::Row"* [ inttoptr (i64 -6148914691236517206 to %"struct.blink::NGTableTypes::Row"*), %378 ], [ %443, %441 ]
  %403 = phi i32 [ %300, %378 ], [ %442, %441 ]
  %404 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %401, i64 0, i32 0, i32 0
  %405 = load i32, i32* %404, align 4
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %441, label %407

407:                                              ; preds = %400
  %408 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %401, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %409 = load i8, i8* %408, align 4, !range !2
  %410 = icmp ne i8 %409, 0
  %411 = and i1 %379, %410
  br i1 %411, label %416, label %412

412:                                              ; preds = %407
  %413 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %401, i64 0, i32 5
  %414 = load i8, i8* %413, align 4, !range !2
  %415 = icmp eq i8 %414, 0
  br i1 %415, label %416, label %441

416:                                              ; preds = %407, %412
  %417 = sitofp i32 %405 to float
  %418 = fmul float %417, 1.562500e-02
  %419 = fmul float %381, %418
  %420 = fdiv float %419, %383
  %421 = fmul float %420, 6.400000e+01
  %422 = fcmp ult float %421, 0xC1E0000000000000
  %423 = fcmp ugt float %421, 0x41DFFFFFE0000000
  %424 = fcmp ogt float %421, 0xC1E0000000000000
  %425 = select i1 %424, float %421, float 0xC1E0000000000000
  %426 = fptosi float %425 to i32
  %427 = select i1 %422, i32 0, i32 2147483647
  %428 = select i1 %423, i32 %427, i32 %426
  %429 = icmp slt i32 %428, 0
  %430 = select i1 %429, i32 -2147483648, i32 2147483647
  %431 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %405, i32 %428) #7
  %432 = extractvalue { i32, i1 } %431, 1
  %433 = extractvalue { i32, i1 } %431, 0
  %434 = select i1 %432, i32 %430, i32 %433, !prof !3
  store i32 %434, i32* %404, align 4
  %435 = icmp sgt i32 %428, -1
  %436 = select i1 %435, i32 -2147483648, i32 2147483647
  %437 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %403, i32 %428) #7
  %438 = extractvalue { i32, i1 } %437, 1
  %439 = extractvalue { i32, i1 } %437, 0
  %440 = select i1 %438, i32 %436, i32 %439, !prof !3
  br label %441

441:                                              ; preds = %400, %412, %416
  %442 = phi i32 [ %440, %416 ], [ %403, %412 ], [ %403, %400 ]
  %443 = phi %"struct.blink::NGTableTypes::Row"* [ %401, %416 ], [ %402, %412 ], [ %402, %400 ]
  %444 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %401, i64 1
  %445 = icmp eq %"struct.blink::NGTableTypes::Row"* %444, %21
  br i1 %445, label %384, label %400

446:                                              ; preds = %376
  %447 = icmp eq i32 %165, 0
  br i1 %447, label %526, label %448

448:                                              ; preds = %446
  %449 = icmp eq i32 %165, %1
  br i1 %3, label %450, label %467

450:                                              ; preds = %448
  %451 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %18, i64 1
  %452 = select i1 %449, %"struct.blink::NGTableTypes::Row"* %18, %"struct.blink::NGTableTypes::Row"* %451
  %453 = icmp eq %"struct.blink::NGTableTypes::Row"* %452, %21
  br i1 %453, label %526, label %454

454:                                              ; preds = %450, %454
  %455 = phi %"struct.blink::NGTableTypes::Row"* [ %461, %454 ], [ %452, %450 ]
  %456 = phi %"struct.blink::NGTableTypes::Row"* [ %460, %454 ], [ null, %450 ]
  %457 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %455, i64 0, i32 0, i32 0
  %458 = load i32, i32* %457, align 4
  %459 = icmp eq i32 %458, 0
  %460 = select i1 %459, %"struct.blink::NGTableTypes::Row"* %455, %"struct.blink::NGTableTypes::Row"* %456
  %461 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %455, i64 1
  %462 = icmp eq %"struct.blink::NGTableTypes::Row"* %461, %21
  br i1 %462, label %463, label %454

463:                                              ; preds = %454
  %464 = icmp eq %"struct.blink::NGTableTypes::Row"* %460, null
  br i1 %464, label %526, label %465

465:                                              ; preds = %463
  %466 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %460, i64 0, i32 0, i32 0
  store i32 %300, i32* %466, align 4
  br label %586

467:                                              ; preds = %448
  %468 = add i32 %165, %164
  %469 = icmp eq i32 %468, %1
  %470 = or i1 %449, %469
  br i1 %470, label %471, label %526

471:                                              ; preds = %467
  %472 = icmp ne i32 %166, 0
  %473 = select i1 %472, i32 %166, i32 %165
  %474 = sitofp i32 %300 to float
  %475 = fmul float %474, 1.562500e-02
  %476 = uitofp i32 %473 to float
  %477 = fdiv float %475, %476
  %478 = fmul float %477, 6.400000e+01
  %479 = fcmp ult float %478, 0xC1E0000000000000
  %480 = fcmp ugt float %478, 0x41DFFFFFE0000000
  %481 = fcmp ogt float %478, 0xC1E0000000000000
  %482 = select i1 %481, float %478, float 0xC1E0000000000000
  %483 = fptosi float %482 to i32
  %484 = select i1 %479, i32 0, i32 2147483647
  %485 = select i1 %480, i32 %484, i32 %483
  %486 = icmp sgt i32 %485, -1
  %487 = select i1 %486, i32 -2147483648, i32 2147483647
  br label %504

488:                                              ; preds = %521
  %489 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %523, i64 0, i32 0
  %490 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %523, i64 0, i32 0, i32 0
  %491 = load i32, i32* %490, align 4
  %492 = icmp slt i32 %522, 0
  %493 = select i1 %492, i32 -2147483648, i32 2147483647
  %494 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %491, i32 %522) #7
  %495 = extractvalue { i32, i1 } %494, 1
  %496 = extractvalue { i32, i1 } %494, 0
  %497 = select i1 %495, i32 %493, i32 %496
  store i32 %497, i32* %490, align 4
  %498 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %498)
  store i32 0, i32* %11, align 4
  %499 = icmp slt i32 %497, 0
  %500 = bitcast i32* %11 to %"class.blink::LayoutUnit"*
  %501 = select i1 %499, %"class.blink::LayoutUnit"* %500, %"class.blink::LayoutUnit"* %489
  %502 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %501, i64 0, i32 0
  %503 = load i32, i32* %502, align 4
  store i32 %503, i32* %490, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %498)
  br label %586

504:                                              ; preds = %471, %521
  %505 = phi %"struct.blink::NGTableTypes::Row"* [ %18, %471 ], [ %524, %521 ]
  %506 = phi %"struct.blink::NGTableTypes::Row"* [ null, %471 ], [ %523, %521 ]
  %507 = phi i32 [ %300, %471 ], [ %522, %521 ]
  %508 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %505, i64 0, i32 0, i32 0
  %509 = load i32, i32* %508, align 4
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %521

511:                                              ; preds = %504
  br i1 %472, label %512, label %516

512:                                              ; preds = %511
  %513 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %505, i64 0, i32 5
  %514 = load i8, i8* %513, align 4, !range !2
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %516, label %521

516:                                              ; preds = %512, %511
  store i32 %485, i32* %508, align 4
  %517 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %507, i32 %485) #7
  %518 = extractvalue { i32, i1 } %517, 1
  %519 = extractvalue { i32, i1 } %517, 0
  %520 = select i1 %518, i32 %487, i32 %519, !prof !3
  br label %521

521:                                              ; preds = %504, %512, %516
  %522 = phi i32 [ %507, %504 ], [ %520, %516 ], [ %507, %512 ]
  %523 = phi %"struct.blink::NGTableTypes::Row"* [ %506, %504 ], [ %505, %516 ], [ %506, %512 ]
  %524 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %505, i64 1
  %525 = icmp eq %"struct.blink::NGTableTypes::Row"* %524, %21
  br i1 %525, label %488, label %504

526:                                              ; preds = %450, %446, %463, %467
  %527 = sitofp i32 %300 to float
  %528 = fmul float %527, 1.562500e-02
  %529 = sitofp i32 %299 to float
  %530 = fmul float %529, 1.562500e-02
  br label %533

531:                                              ; preds = %565
  %532 = icmp eq %"struct.blink::NGTableTypes::Row"* %567, null
  br i1 %532, label %586, label %570

533:                                              ; preds = %526, %565
  %534 = phi %"struct.blink::NGTableTypes::Row"* [ %18, %526 ], [ %568, %565 ]
  %535 = phi %"struct.blink::NGTableTypes::Row"* [ null, %526 ], [ %567, %565 ]
  %536 = phi i32 [ %300, %526 ], [ %566, %565 ]
  %537 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %534, i64 0, i32 0, i32 0
  %538 = load i32, i32* %537, align 4
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %565, label %540

540:                                              ; preds = %533
  %541 = sitofp i32 %538 to float
  %542 = fmul float %541, 1.562500e-02
  %543 = fmul float %528, %542
  %544 = fdiv float %543, %530
  %545 = fmul float %544, 6.400000e+01
  %546 = fcmp ult float %545, 0xC1E0000000000000
  %547 = fcmp ugt float %545, 0x41DFFFFFE0000000
  %548 = fcmp ogt float %545, 0xC1E0000000000000
  %549 = select i1 %548, float %545, float 0xC1E0000000000000
  %550 = fptosi float %549 to i32
  %551 = select i1 %546, i32 0, i32 2147483647
  %552 = select i1 %547, i32 %551, i32 %550
  %553 = icmp slt i32 %552, 0
  %554 = select i1 %553, i32 -2147483648, i32 2147483647
  %555 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %538, i32 %552) #7
  %556 = extractvalue { i32, i1 } %555, 1
  %557 = extractvalue { i32, i1 } %555, 0
  %558 = select i1 %556, i32 %554, i32 %557, !prof !3
  store i32 %558, i32* %537, align 4
  %559 = icmp sgt i32 %552, -1
  %560 = select i1 %559, i32 -2147483648, i32 2147483647
  %561 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %536, i32 %552) #7
  %562 = extractvalue { i32, i1 } %561, 1
  %563 = extractvalue { i32, i1 } %561, 0
  %564 = select i1 %562, i32 %560, i32 %563, !prof !3
  br label %565

565:                                              ; preds = %533, %540
  %566 = phi i32 [ %536, %533 ], [ %564, %540 ]
  %567 = phi %"struct.blink::NGTableTypes::Row"* [ %535, %533 ], [ %534, %540 ]
  %568 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %534, i64 1
  %569 = icmp eq %"struct.blink::NGTableTypes::Row"* %568, %21
  br i1 %569, label %531, label %533

570:                                              ; preds = %531
  %571 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %567, i64 0, i32 0
  %572 = getelementptr inbounds %"struct.blink::NGTableTypes::Row", %"struct.blink::NGTableTypes::Row"* %567, i64 0, i32 0, i32 0
  %573 = load i32, i32* %572, align 4
  %574 = icmp slt i32 %566, 0
  %575 = select i1 %574, i32 -2147483648, i32 2147483647
  %576 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %573, i32 %566) #7
  %577 = extractvalue { i32, i1 } %576, 1
  %578 = extractvalue { i32, i1 } %576, 0
  %579 = select i1 %577, i32 %575, i32 %578
  store i32 %579, i32* %572, align 4
  %580 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %580)
  store i32 0, i32* %12, align 4
  %581 = icmp slt i32 %579, 0
  %582 = bitcast i32* %12 to %"class.blink::LayoutUnit"*
  %583 = select i1 %581, %"class.blink::LayoutUnit"* %582, %"class.blink::LayoutUnit"* %571
  %584 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %583, i64 0, i32 0
  %585 = load i32, i32* %584, align 4
  store i32 %585, i32* %572, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %580)
  br label %586

586:                                              ; preds = %310, %384, %488, %44, %269, %465, %531, %570, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23NGTableAlgorithmHelpers37DistributeSectionFixedBlockSizeToRowsEjjNS_10LayoutUnitES1_S1_PN3WTF6VectorINS_12NGTableTypes3RowELj0ENS2_18PartitionAllocatorEEE(i32, i32, i32, i32, i32, %"class.WTF::Vector.1697"* nocapture readonly) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN5blink12_GLOBAL__N_131DistributeExcessBlockSizeToRowsEjjNS_10LayoutUnitEbS1_S1_PN3WTF6VectorINS_12NGTableTypes3RowELj0ENS2_18PartitionAllocatorEEE(i32 %0, i32 %1, i32 %2, i1 zeroext false, i32 %3, i32 %4, %"class.WTF::Vector.1697"* %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23NGTableAlgorithmHelpers34DistributeTableBlockSizeToSectionsENS_10LayoutUnitES1_PN3WTF6VectorINS_12NGTableTypes7SectionELj0ENS2_18PartitionAllocatorEEEPNS3_INS4_3RowELj0ES6_EE(i32, i32, %"class.WTF::Vector.1702"* nocapture readonly, %"class.WTF::Vector.1697"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca [5 x %"class.blink::LayoutUnit"], align 16
  %6 = bitcast [5 x %"class.blink::LayoutUnit"]* %5 to i8*
  %7 = getelementptr inbounds %"class.WTF::Vector.1702", %"class.WTF::Vector.1702"* %2, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %517, label %10

10:                                               ; preds = %4
  %11 = add i32 %8, 1
  %12 = icmp ugt i32 %11, 33554430
  %13 = shl i32 %11, 6
  %14 = select i1 %12, i32 2147483647, i32 %13
  %15 = sext i32 %14 to i64
  %16 = sext i32 %0 to i64
  %17 = mul nsw i64 %15, %16
  %18 = sdiv i64 %17, 64
  %19 = ashr i64 %18, 32
  %20 = trunc i64 %19 to i32
  %21 = trunc i64 %18 to i32
  %22 = ashr i32 %21, 31
  %23 = icmp eq i32 %22, %20
  br i1 %23, label %28, label %24

24:                                               ; preds = %10
  %25 = xor i32 %14, %0
  %26 = lshr i32 %25, 31
  %27 = add nuw i32 %26, 2147483647
  br label %28

28:                                               ; preds = %24, %10
  %29 = phi i32 [ %21, %10 ], [ %27, %24 ]
  %30 = icmp sgt i32 %29, -1
  %31 = select i1 %30, i32 -2147483648, i32 2147483647
  %32 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %29) #7
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  %35 = select i1 %33, i32 %31, i32 %34, !prof !3
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %6) #7
  %36 = getelementptr inbounds [5 x %"class.blink::LayoutUnit"], [5 x %"class.blink::LayoutUnit"]* %5, i64 0, i64 2, i32 0
  %37 = getelementptr inbounds [5 x %"class.blink::LayoutUnit"], [5 x %"class.blink::LayoutUnit"]* %5, i64 0, i64 3, i32 0
  %38 = getelementptr inbounds [5 x %"class.blink::LayoutUnit"], [5 x %"class.blink::LayoutUnit"]* %5, i64 0, i64 4, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 20, i1 false)
  %39 = icmp sgt i32 %35, 0
  %40 = select i1 %39, i32 %35, i32 0
  %41 = getelementptr inbounds %"class.WTF::Vector.1702", %"class.WTF::Vector.1702"* %2, i64 0, i32 0, i32 0, i32 0
  %42 = load %"struct.blink::NGTableTypes::Section"*, %"struct.blink::NGTableTypes::Section"** %41, align 8
  %43 = zext i32 %8 to i64
  %44 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %42, i64 %43
  %45 = sitofp i32 %40 to float
  %46 = fmul float %45, 1.562500e-02
  %47 = load i32, i32* %36, align 8
  br label %56

48:                                               ; preds = %149
  store i32 %95, i32* %36, align 8
  %49 = icmp sgt i32 %115, -1
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 %115) #7
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !3
  %55 = icmp slt i32 %54, 1
  br i1 %55, label %516, label %154

56:                                               ; preds = %28, %149
  %57 = phi i32 [ %47, %28 ], [ %95, %149 ]
  %58 = phi i32 [ 0, %28 ], [ %115, %149 ]
  %59 = phi i32 [ 0, %28 ], [ %96, %149 ]
  %60 = phi i32 [ 0, %28 ], [ %97, %149 ]
  %61 = phi i8 [ 0, %28 ], [ %151, %149 ]
  %62 = phi %"struct.blink::NGTableTypes::Section"* [ %42, %28 ], [ %152, %149 ]
  %63 = phi i32 [ 0, %28 ], [ %150, %149 ]
  %64 = phi i32 [ 0, %28 ], [ %116, %149 ]
  %65 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 6
  store i8 0, i8* %65, align 2
  %66 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 5
  %67 = load i8, i8* %66, align 1, !range !2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %94, label %69

69:                                               ; preds = %56
  %70 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 4
  %71 = load i8, i8* %70, align 4, !range !2
  %72 = icmp eq i8 %71, 0
  %73 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 2, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %72, label %76, label %84

76:                                               ; preds = %69
  br i1 %75, label %94, label %77

77:                                               ; preds = %76
  %78 = icmp slt i32 %74, 0
  %79 = select i1 %78, i32 -2147483648, i32 2147483647
  %80 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %60, i32 %74) #7
  %81 = extractvalue { i32, i1 } %80, 1
  %82 = extractvalue { i32, i1 } %80, 0
  %83 = select i1 %81, i32 %79, i32 %82, !prof !3
  br label %85

84:                                               ; preds = %69
  br i1 %75, label %94, label %85

85:                                               ; preds = %77, %84
  %86 = phi i32 [ %83, %77 ], [ %57, %84 ]
  %87 = phi i32 [ %83, %77 ], [ %60, %84 ]
  %88 = icmp slt i32 %74, 0
  %89 = select i1 %88, i32 -2147483648, i32 2147483647
  %90 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 %74) #7
  %91 = extractvalue { i32, i1 } %90, 1
  %92 = extractvalue { i32, i1 } %90, 0
  %93 = select i1 %91, i32 %89, i32 %92, !prof !3
  store i32 %93, i32* %37, align 4
  br label %94

94:                                               ; preds = %76, %85, %84, %56
  %95 = phi i32 [ %86, %85 ], [ %57, %84 ], [ %57, %56 ], [ %57, %76 ]
  %96 = phi i32 [ %93, %85 ], [ %59, %84 ], [ %59, %56 ], [ %59, %76 ]
  %97 = phi i32 [ %87, %85 ], [ %60, %84 ], [ %60, %56 ], [ %60, %76 ]
  %98 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 2, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %110, label %101

101:                                              ; preds = %94
  %102 = icmp slt i32 %99, 0
  %103 = select i1 %102, i32 -2147483648, i32 2147483647
  %104 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %58, i32 %99) #7
  %105 = extractvalue { i32, i1 } %104, 1
  %106 = extractvalue { i32, i1 } %104, 0
  %107 = select i1 %105, i32 %103, i32 %106, !prof !3
  store i32 %107, i32* %38, align 16
  %108 = load i32, i32* %98, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %101, %94
  %111 = phi i32 [ %107, %101 ], [ %58, %94 ]
  %112 = add i32 %64, 1
  br label %113

113:                                              ; preds = %101, %110
  %114 = phi i32 [ 0, %110 ], [ %108, %101 ]
  %115 = phi i32 [ %111, %110 ], [ %107, %101 ]
  %116 = phi i32 [ %112, %110 ], [ %64, %101 ]
  %117 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %118 = load i8, i8* %117, align 4, !range !2
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %149, label %120

120:                                              ; preds = %113
  %121 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %122 = load float, float* %121, align 4
  %123 = fcmp oeq float %122, 0.000000e+00
  %124 = icmp eq i32 %114, 0
  %125 = or i1 %123, %124
  br i1 %125, label %149, label %126

126:                                              ; preds = %120
  %127 = fmul float %46, %122
  %128 = fdiv float %127, 1.000000e+02
  %129 = fmul float %128, 6.400000e+01
  %130 = fcmp ult float %129, 0xC1E0000000000000
  %131 = fcmp ugt float %129, 0x41DFFFFFE0000000
  %132 = fcmp ogt float %129, 0xC1E0000000000000
  %133 = select i1 %132, float %129, float 0xC1E0000000000000
  %134 = fptosi float %133 to i32
  %135 = select i1 %130, i32 0, i32 2147483647
  %136 = select i1 %131, i32 %135, i32 %134
  %137 = icmp sgt i32 %114, -1
  %138 = select i1 %137, i32 -2147483648, i32 2147483647
  %139 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %136, i32 %114) #7
  %140 = extractvalue { i32, i1 } %139, 1
  %141 = extractvalue { i32, i1 } %139, 0
  %142 = select i1 %140, i32 %138, i32 %141, !prof !3
  %143 = icmp sgt i32 %142, 0
  %144 = select i1 %143, i32 %142, i32 0
  %145 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %63, i32 %144) #7
  %146 = extractvalue { i32, i1 } %145, 1
  %147 = extractvalue { i32, i1 } %145, 0
  %148 = select i1 %146, i32 2147483647, i32 %147, !prof !3
  br label %149

149:                                              ; preds = %120, %113, %126
  %150 = phi i32 [ %148, %126 ], [ %63, %120 ], [ %63, %113 ]
  %151 = phi i8 [ 1, %126 ], [ %61, %120 ], [ %61, %113 ]
  %152 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %62, i64 1
  %153 = icmp eq %"struct.blink::NGTableTypes::Section"* %152, %44
  br i1 %153, label %48, label %56

154:                                              ; preds = %48
  %155 = and i8 %151, 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %373, label %157

157:                                              ; preds = %154
  store i32 0, i32* %36, align 8
  store i32 0, i32* %37, align 4
  store i32 0, i32* %38, align 16
  %158 = sitofp i32 %150 to float
  %159 = fmul float %158, 1.562500e-02
  %160 = sitofp i32 %54 to float
  %161 = fmul float %160, 1.562500e-02
  %162 = fdiv float %161, %159
  %163 = fcmp ogt float %162, 1.000000e+00
  %164 = select i1 %163, float 1.000000e+00, float %162
  %165 = fmul float %159, %164
  %166 = fmul float %165, 6.400000e+01
  %167 = load %"struct.blink::NGTableTypes::Section"*, %"struct.blink::NGTableTypes::Section"** %41, align 8
  %168 = load i32, i32* %7, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %167, i64 %169
  %171 = icmp eq i32 %168, 0
  br i1 %171, label %373, label %172

172:                                              ; preds = %157
  %173 = fcmp ugt float %166, 0x41DFFFFFE0000000
  %174 = fcmp ult float %166, 0xC1E0000000000000
  %175 = select i1 %174, i32 0, i32 2147483647
  %176 = fcmp ogt float %166, 0xC1E0000000000000
  %177 = select i1 %176, float %166, float 0xC1E0000000000000
  %178 = fptosi float %177 to i32
  %179 = select i1 %173, i32 %175, i32 %178
  %180 = sitofp i32 %40 to float
  %181 = fmul float %180, 1.562500e-02
  %182 = load i32, i32* %36, align 8
  br label %187

183:                                              ; preds = %349
  store i32 %350, i32* %36, align 8
  %184 = icmp ne %"struct.blink::NGTableTypes::Section"* %354, null
  %185 = icmp ne i32 %353, 0
  %186 = and i1 %185, %184
  br i1 %186, label %357, label %373

187:                                              ; preds = %172, %349
  %188 = phi i32 [ %182, %172 ], [ %350, %349 ]
  %189 = phi i32 [ 0, %172 ], [ %351, %349 ]
  %190 = phi %"struct.blink::NGTableTypes::Section"* [ %167, %172 ], [ %355, %349 ]
  %191 = phi %"struct.blink::NGTableTypes::Section"* [ null, %172 ], [ %354, %349 ]
  %192 = phi i32 [ %179, %172 ], [ %353, %349 ]
  %193 = phi i32 [ 0, %172 ], [ %352, %349 ]
  %194 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %195 = load i8, i8* %194, align 4, !range !2
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %205, label %197

197:                                              ; preds = %187
  %198 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %199 = load float, float* %198, align 4
  %200 = fcmp une float %199, 0.000000e+00
  br i1 %200, label %201, label %205

201:                                              ; preds = %197
  %202 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 2, i32 0
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %253

205:                                              ; preds = %201, %187, %197
  %206 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 5
  %207 = load i8, i8* %206, align 1, !range !2
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %235, label %209

209:                                              ; preds = %205
  %210 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 4
  %211 = load i8, i8* %210, align 4, !range !2
  %212 = icmp eq i8 %211, 0
  %213 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 2, i32 0
  %214 = load i32, i32* %213, align 4
  %215 = icmp eq i32 %214, 0
  br i1 %212, label %216, label %224

216:                                              ; preds = %209
  br i1 %215, label %235, label %217

217:                                              ; preds = %216
  %218 = icmp slt i32 %214, 0
  %219 = select i1 %218, i32 -2147483648, i32 2147483647
  %220 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %189, i32 %214) #7
  %221 = extractvalue { i32, i1 } %220, 1
  %222 = extractvalue { i32, i1 } %220, 0
  %223 = select i1 %221, i32 %219, i32 %222, !prof !3
  br label %225

224:                                              ; preds = %209
  br i1 %215, label %235, label %225

225:                                              ; preds = %217, %224
  %226 = phi i32 [ %223, %217 ], [ %188, %224 ]
  %227 = phi i32 [ %223, %217 ], [ %189, %224 ]
  %228 = load i32, i32* %37, align 4
  %229 = icmp slt i32 %214, 0
  %230 = select i1 %229, i32 -2147483648, i32 2147483647
  %231 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %228, i32 %214) #7
  %232 = extractvalue { i32, i1 } %231, 1
  %233 = extractvalue { i32, i1 } %231, 0
  %234 = select i1 %232, i32 %230, i32 %233, !prof !3
  store i32 %234, i32* %37, align 4
  br label %235

235:                                              ; preds = %216, %225, %224, %205
  %236 = phi i32 [ %226, %225 ], [ %188, %224 ], [ %188, %205 ], [ %188, %216 ]
  %237 = phi i32 [ %227, %225 ], [ %189, %224 ], [ %189, %205 ], [ %189, %216 ]
  %238 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 2, i32 0
  %239 = load i32, i32* %238, align 4
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %251, label %241

241:                                              ; preds = %235
  %242 = load i32, i32* %38, align 16
  %243 = icmp slt i32 %239, 0
  %244 = select i1 %243, i32 -2147483648, i32 2147483647
  %245 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %242, i32 %239) #7
  %246 = extractvalue { i32, i1 } %245, 1
  %247 = extractvalue { i32, i1 } %245, 0
  %248 = select i1 %246, i32 %244, i32 %247, !prof !3
  store i32 %248, i32* %38, align 16
  %249 = load i32, i32* %238, align 4
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %349

251:                                              ; preds = %241, %235
  %252 = add i32 %193, 1
  br label %349

253:                                              ; preds = %201
  %254 = fmul float %181, %199
  %255 = fdiv float %254, 1.000000e+02
  %256 = fmul float %255, 6.400000e+01
  %257 = fcmp ult float %256, 0xC1E0000000000000
  %258 = fcmp ugt float %256, 0x41DFFFFFE0000000
  %259 = fcmp ogt float %256, 0xC1E0000000000000
  %260 = select i1 %259, float %256, float 0xC1E0000000000000
  %261 = fptosi float %260 to i32
  %262 = select i1 %257, i32 0, i32 2147483647
  %263 = select i1 %258, i32 %262, i32 %261
  %264 = icmp sgt i32 %203, -1
  %265 = select i1 %264, i32 -2147483648, i32 2147483647
  %266 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %263, i32 %203) #7
  %267 = extractvalue { i32, i1 } %266, 1
  %268 = extractvalue { i32, i1 } %266, 0
  %269 = select i1 %267, i32 %265, i32 %268, !prof !3
  %270 = icmp sgt i32 %269, 0
  %271 = select i1 %270, i32 %269, i32 0
  %272 = sitofp i32 %271 to float
  %273 = fmul float %272, 1.562500e-02
  %274 = fmul float %164, %273
  %275 = fmul float %274, 6.400000e+01
  %276 = fcmp ult float %275, 0xC1E0000000000000
  %277 = fcmp ugt float %275, 0x41DFFFFFE0000000
  %278 = fcmp ogt float %275, 0xC1E0000000000000
  %279 = select i1 %278, float %275, float 0xC1E0000000000000
  %280 = fptosi float %279 to i32
  %281 = select i1 %276, i32 0, i32 2147483647
  %282 = select i1 %277, i32 %281, i32 %280
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %298, label %284

284:                                              ; preds = %253
  %285 = icmp slt i32 %282, 0
  %286 = select i1 %285, i32 -2147483648, i32 2147483647
  %287 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %203, i32 %282) #7
  %288 = extractvalue { i32, i1 } %287, 1
  %289 = extractvalue { i32, i1 } %287, 0
  %290 = select i1 %288, i32 %286, i32 %289, !prof !3
  store i32 %290, i32* %202, align 4
  %291 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 6
  store i8 1, i8* %291, align 2
  %292 = icmp sgt i32 %282, -1
  %293 = select i1 %292, i32 -2147483648, i32 2147483647
  %294 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %192, i32 %282) #7
  %295 = extractvalue { i32, i1 } %294, 1
  %296 = extractvalue { i32, i1 } %294, 0
  %297 = select i1 %295, i32 %293, i32 %296, !prof !3
  br label %298

298:                                              ; preds = %253, %284
  %299 = phi i32 [ %290, %284 ], [ %203, %253 ]
  %300 = phi i32 [ %297, %284 ], [ %192, %253 ]
  %301 = phi %"struct.blink::NGTableTypes::Section"* [ %190, %284 ], [ %191, %253 ]
  %302 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 5
  %303 = load i8, i8* %302, align 1, !range !2
  %304 = icmp eq i8 %303, 0
  br i1 %304, label %330, label %305

305:                                              ; preds = %298
  %306 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 0, i32 4
  %307 = load i8, i8* %306, align 4, !range !2
  %308 = icmp eq i8 %307, 0
  %309 = icmp eq i32 %299, 0
  br i1 %308, label %310, label %318

310:                                              ; preds = %305
  br i1 %309, label %345, label %311

311:                                              ; preds = %310
  %312 = icmp slt i32 %299, 0
  %313 = select i1 %312, i32 -2147483648, i32 2147483647
  %314 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %189, i32 %299) #7
  %315 = extractvalue { i32, i1 } %314, 1
  %316 = extractvalue { i32, i1 } %314, 0
  %317 = select i1 %315, i32 %313, i32 %316, !prof !3
  br label %319

318:                                              ; preds = %305
  br i1 %309, label %345, label %319

319:                                              ; preds = %311, %318
  %320 = phi i32 [ %317, %311 ], [ %188, %318 ]
  %321 = phi i32 [ %317, %311 ], [ %189, %318 ]
  %322 = load i32, i32* %37, align 4
  %323 = icmp slt i32 %299, 0
  %324 = select i1 %323, i32 -2147483648, i32 2147483647
  %325 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %322, i32 %299) #7
  %326 = extractvalue { i32, i1 } %325, 1
  %327 = extractvalue { i32, i1 } %325, 0
  %328 = select i1 %326, i32 %324, i32 %327, !prof !3
  store i32 %328, i32* %37, align 4
  %329 = load i32, i32* %202, align 4
  br label %330

330:                                              ; preds = %319, %298
  %331 = phi i32 [ %320, %319 ], [ %188, %298 ]
  %332 = phi i32 [ %329, %319 ], [ %299, %298 ]
  %333 = phi i32 [ %321, %319 ], [ %189, %298 ]
  %334 = icmp eq i32 %332, 0
  br i1 %334, label %345, label %335

335:                                              ; preds = %330
  %336 = load i32, i32* %38, align 16
  %337 = icmp slt i32 %332, 0
  %338 = select i1 %337, i32 -2147483648, i32 2147483647
  %339 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %336, i32 %332) #7
  %340 = extractvalue { i32, i1 } %339, 1
  %341 = extractvalue { i32, i1 } %339, 0
  %342 = select i1 %340, i32 %338, i32 %341, !prof !3
  store i32 %342, i32* %38, align 16
  %343 = load i32, i32* %202, align 4
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %349

345:                                              ; preds = %310, %318, %335, %330
  %346 = phi i32 [ %331, %335 ], [ %331, %330 ], [ %188, %318 ], [ %188, %310 ]
  %347 = phi i32 [ %333, %335 ], [ %333, %330 ], [ %189, %318 ], [ %189, %310 ]
  %348 = add i32 %193, 1
  br label %349

349:                                              ; preds = %345, %335, %251, %241
  %350 = phi i32 [ %236, %251 ], [ %236, %241 ], [ %346, %345 ], [ %331, %335 ]
  %351 = phi i32 [ %237, %251 ], [ %237, %241 ], [ %347, %345 ], [ %333, %335 ]
  %352 = phi i32 [ %252, %251 ], [ %193, %241 ], [ %348, %345 ], [ %193, %335 ]
  %353 = phi i32 [ %192, %251 ], [ %192, %241 ], [ %300, %345 ], [ %300, %335 ]
  %354 = phi %"struct.blink::NGTableTypes::Section"* [ %191, %251 ], [ %191, %241 ], [ %301, %345 ], [ %301, %335 ]
  %355 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %190, i64 1
  %356 = icmp eq %"struct.blink::NGTableTypes::Section"* %355, %170
  br i1 %356, label %183, label %187

357:                                              ; preds = %183
  %358 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %354, i64 0, i32 2, i32 0
  %359 = load i32, i32* %358, align 4
  %360 = icmp slt i32 %353, 0
  %361 = select i1 %360, i32 -2147483648, i32 2147483647
  %362 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %359, i32 %353) #7
  %363 = extractvalue { i32, i1 } %362, 1
  %364 = extractvalue { i32, i1 } %362, 0
  %365 = select i1 %363, i32 %361, i32 %364, !prof !3
  store i32 %365, i32* %358, align 4
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %373, label %367

367:                                              ; preds = %357
  %368 = load i32, i32* %38, align 16
  %369 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %368, i32 %353) #7
  %370 = extractvalue { i32, i1 } %369, 1
  %371 = extractvalue { i32, i1 } %369, 0
  %372 = select i1 %370, i32 %361, i32 %371, !prof !3
  store i32 %372, i32* %38, align 16
  br label %373

373:                                              ; preds = %157, %357, %183, %367, %154
  %374 = phi i32 [ %97, %154 ], [ %351, %183 ], [ %351, %357 ], [ %351, %367 ], [ 0, %157 ]
  %375 = phi i32 [ %116, %154 ], [ %352, %183 ], [ %352, %357 ], [ %352, %367 ], [ 0, %157 ]
  %376 = load i32, i32* %38, align 16
  %377 = icmp sgt i32 %376, -1
  %378 = select i1 %377, i32 -2147483648, i32 2147483647
  %379 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 %376) #7
  %380 = extractvalue { i32, i1 } %379, 1
  %381 = extractvalue { i32, i1 } %379, 0
  %382 = select i1 %380, i32 %378, i32 %381, !prof !3
  %383 = icmp sgt i32 %382, 0
  br i1 %383, label %384, label %495

384:                                              ; preds = %373
  %385 = icmp sgt i32 %374, 0
  br i1 %385, label %392, label %386

386:                                              ; preds = %384
  %387 = load i32, i32* %37, align 4
  %388 = icmp sgt i32 %387, 0
  br i1 %388, label %392, label %389

389:                                              ; preds = %386
  %390 = icmp sgt i32 %376, 0
  %391 = select i1 %390, i32 4, i32 0
  br label %392

392:                                              ; preds = %389, %386, %384
  %393 = phi i32 [ 2, %384 ], [ 3, %386 ], [ %391, %389 ]
  %394 = load %"struct.blink::NGTableTypes::Section"*, %"struct.blink::NGTableTypes::Section"** %41, align 8
  %395 = load i32, i32* %7, align 4
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %394, i64 %396
  %398 = icmp eq i32 %395, 0
  br i1 %398, label %516, label %399

399:                                              ; preds = %392
  %400 = sitofp i32 %382 to float
  %401 = fmul float %400, 1.562500e-02
  %402 = uitofp i32 %375 to float
  %403 = fdiv float %401, %402
  %404 = fmul float %403, 6.400000e+01
  %405 = fcmp ult float %404, 0xC1E0000000000000
  %406 = fcmp ugt float %404, 0x41DFFFFFE0000000
  %407 = fcmp ogt float %404, 0xC1E0000000000000
  %408 = select i1 %407, float %404, float 0xC1E0000000000000
  %409 = fptosi float %408 to i32
  %410 = select i1 %405, i32 0, i32 2147483647
  %411 = select i1 %406, i32 %410, i32 %409
  %412 = zext i32 %393 to i64
  %413 = getelementptr inbounds [5 x %"class.blink::LayoutUnit"], [5 x %"class.blink::LayoutUnit"]* %5, i64 0, i64 %412, i32 0
  br label %418

414:                                              ; preds = %481
  %415 = icmp ne %"struct.blink::NGTableTypes::Section"* %483, null
  %416 = icmp ne i32 %482, 0
  %417 = and i1 %416, %415
  br i1 %417, label %486, label %495

418:                                              ; preds = %399, %481
  %419 = phi %"struct.blink::NGTableTypes::Section"* [ %394, %399 ], [ %484, %481 ]
  %420 = phi %"struct.blink::NGTableTypes::Section"* [ null, %399 ], [ %483, %481 ]
  %421 = phi i32 [ %382, %399 ], [ %482, %481 ]
  switch i32 %393, label %422 [
    i32 2, label %425
    i32 3, label %437
    i32 4, label %445
    i32 0, label %466
  ]

422:                                              ; preds = %418
  %423 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 2, i32 0
  %424 = load i32, i32* %423, align 4
  br label %449

425:                                              ; preds = %418
  %426 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 5
  %427 = load i8, i8* %426, align 1, !range !2
  %428 = icmp eq i8 %427, 0
  br i1 %428, label %481, label %429

429:                                              ; preds = %425
  %430 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 4
  %431 = load i8, i8* %430, align 4, !range !2
  %432 = icmp eq i8 %431, 0
  br i1 %432, label %433, label %481

433:                                              ; preds = %429
  %434 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 2, i32 0
  %435 = load i32, i32* %434, align 4
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %481, label %449

437:                                              ; preds = %418
  %438 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 5
  %439 = load i8, i8* %438, align 1, !range !2
  %440 = icmp eq i8 %439, 0
  br i1 %440, label %481, label %441

441:                                              ; preds = %437
  %442 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 2, i32 0
  %443 = load i32, i32* %442, align 4
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %481, label %449

445:                                              ; preds = %418
  %446 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 2, i32 0
  %447 = load i32, i32* %446, align 4
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %481, label %449

449:                                              ; preds = %422, %433, %441, %445
  %450 = phi i32 [ %424, %422 ], [ %435, %433 ], [ %443, %441 ], [ %447, %445 ]
  %451 = sitofp i32 %450 to float
  %452 = fmul float %451, 1.562500e-02
  %453 = fmul float %401, %452
  %454 = load i32, i32* %413, align 4
  %455 = sitofp i32 %454 to float
  %456 = fmul float %455, 1.562500e-02
  %457 = fdiv float %453, %456
  %458 = fmul float %457, 6.400000e+01
  %459 = fcmp ult float %458, 0xC1E0000000000000
  %460 = fcmp ugt float %458, 0x41DFFFFFE0000000
  %461 = fcmp ogt float %458, 0xC1E0000000000000
  %462 = select i1 %461, float %458, float 0xC1E0000000000000
  %463 = fptosi float %462 to i32
  %464 = select i1 %459, i32 0, i32 2147483647
  %465 = select i1 %460, i32 %464, i32 %463
  br label %466

466:                                              ; preds = %418, %449
  %467 = phi i32 [ %465, %449 ], [ %411, %418 ]
  %468 = icmp sgt i32 %467, 0
  br i1 %468, label %469, label %481

469:                                              ; preds = %466
  %470 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 2, i32 0
  %471 = load i32, i32* %470, align 4
  %472 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %471, i32 %467) #7
  %473 = extractvalue { i32, i1 } %472, 1
  %474 = extractvalue { i32, i1 } %472, 0
  %475 = select i1 %473, i32 2147483647, i32 %474, !prof !3
  store i32 %475, i32* %470, align 4
  %476 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 0, i32 6
  store i8 1, i8* %476, align 2
  %477 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %421, i32 %467) #7
  %478 = extractvalue { i32, i1 } %477, 1
  %479 = extractvalue { i32, i1 } %477, 0
  %480 = select i1 %478, i32 -2147483648, i32 %479, !prof !3
  br label %481

481:                                              ; preds = %433, %441, %445, %437, %425, %429, %466, %469
  %482 = phi i32 [ %421, %445 ], [ %421, %441 ], [ %421, %433 ], [ %480, %469 ], [ %421, %466 ], [ %421, %429 ], [ %421, %425 ], [ %421, %437 ]
  %483 = phi %"struct.blink::NGTableTypes::Section"* [ %420, %445 ], [ %420, %441 ], [ %420, %433 ], [ %419, %469 ], [ %420, %466 ], [ %420, %429 ], [ %420, %425 ], [ %420, %437 ]
  %484 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %419, i64 1
  %485 = icmp eq %"struct.blink::NGTableTypes::Section"* %484, %397
  br i1 %485, label %414, label %418

486:                                              ; preds = %414
  %487 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %483, i64 0, i32 2, i32 0
  %488 = load i32, i32* %487, align 4
  %489 = icmp slt i32 %482, 0
  %490 = select i1 %489, i32 -2147483648, i32 2147483647
  %491 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %488, i32 %482) #7
  %492 = extractvalue { i32, i1 } %491, 1
  %493 = extractvalue { i32, i1 } %491, 0
  %494 = select i1 %492, i32 %490, i32 %493, !prof !3
  store i32 %494, i32* %487, align 4
  br label %495

495:                                              ; preds = %414, %486, %373
  %496 = load i32, i32* %7, align 4
  %497 = load %"struct.blink::NGTableTypes::Section"*, %"struct.blink::NGTableTypes::Section"** %41, align 8
  %498 = zext i32 %496 to i64
  %499 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %497, i64 %498
  %500 = icmp eq i32 %496, 0
  br i1 %500, label %516, label %501

501:                                              ; preds = %495, %513
  %502 = phi %"struct.blink::NGTableTypes::Section"* [ %514, %513 ], [ %497, %495 ]
  %503 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %502, i64 0, i32 6
  %504 = load i8, i8* %503, align 2, !range !2
  %505 = icmp eq i8 %504, 0
  br i1 %505, label %513, label %506

506:                                              ; preds = %501
  %507 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %502, i64 0, i32 0
  %508 = load i32, i32* %507, align 4
  %509 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %502, i64 0, i32 1
  %510 = load i32, i32* %509, align 4
  %511 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %502, i64 0, i32 2, i32 0
  %512 = load i32, i32* %511, align 4
  call fastcc void @_ZN5blink12_GLOBAL__N_131DistributeExcessBlockSizeToRowsEjjNS_10LayoutUnitEbS1_S1_PN3WTF6VectorINS_12NGTableTypes3RowELj0ENS2_18PartitionAllocatorEEE(i32 %508, i32 %510, i32 %512, i1 zeroext false, i32 %0, i32 %512, %"class.WTF::Vector.1697"* %3)
  br label %513

513:                                              ; preds = %501, %506
  %514 = getelementptr inbounds %"struct.blink::NGTableTypes::Section", %"struct.blink::NGTableTypes::Section"* %502, i64 1
  %515 = icmp eq %"struct.blink::NGTableTypes::Section"* %514, %499
  br i1 %515, label %516, label %501

516:                                              ; preds = %513, %392, %495, %48
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %6) #7
  br label %517

517:                                              ; preds = %4, %516
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"struct.blink::NGTableTypes::Column"* @_ZN3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1677"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.1677", %"class.WTF::Vector.1677"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector.1677", %"class.WTF::Vector.1677"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %24, i64 %25
  ret %"struct.blink::NGTableTypes::Column"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LayoutUnitEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"struct.blink::NGTableTypes::Column"* @_ZNK3WTF6VectorIN5blink12NGTableTypes6ColumnELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1677"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.1677", %"class.WTF::Vector.1677"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector.1677", %"class.WTF::Vector.1677"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::NGTableTypes::Column"*, %"struct.blink::NGTableTypes::Column"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::NGTableTypes::Column", %"struct.blink::NGTableTypes::Column"* %24, i64 %25
  ret %"struct.blink::NGTableTypes::Column"* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5blink12_GLOBAL__N_151SynchronizeAssignableTableInlineSizeAndColumnsFixedENS_10LayoutUnitES1_RKN4base14RefCountedDataIN3WTF6VectorINS_12NGTableTypes6ColumnELj0ENS4_18PartitionAllocatorEEEEE: argument 0"}
!7 = distinct !{!7, !"_ZN5blink12_GLOBAL__N_151SynchronizeAssignableTableInlineSizeAndColumnsFixedENS_10LayoutUnitES1_RKN4base14RefCountedDataIN3WTF6VectorINS_12NGTableTypes6ColumnELj0ENS4_18PartitionAllocatorEEEEE"}
