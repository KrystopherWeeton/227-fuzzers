; ModuleID = '../../third_party/tflite/src/tensorflow/lite/core/api/op_resolver.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/core/api/op_resolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.tflite::OperatorCode" = type { %"class.flatbuffers::Table" }
%"class.flatbuffers::Table" = type { [1 x i8] }
%"class.tflite::OpResolver" = type { i32 (...)** }
%"class.tflite::ErrorReporter" = type { i32 (...)** }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, {}*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }

$_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names = comdat any

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [84 x i8] c"Op builtin_code out of range: %d. Are you using old TFLite binary with newer model?\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"Didn't find op for builtin opcode '%s' version '%d'\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"Operator with CUSTOM builtin_code has no custom_code.\0A\00", align 1
@_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names = linkonce_odr hidden local_unnamed_addr constant [128 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.131, i32 0, i32 0), i8* null], comdat, align 16
@.str.5 = private unnamed_addr constant [4 x i8] c"ADD\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"AVERAGE_POOL_2D\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"CONCATENATION\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"CONV_2D\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"DEPTHWISE_CONV_2D\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"DEPTH_TO_SPACE\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"DEQUANTIZE\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"EMBEDDING_LOOKUP\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"FLOOR\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"FULLY_CONNECTED\00", align 1
@.str.15 = private unnamed_addr constant [17 x i8] c"HASHTABLE_LOOKUP\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"L2_NORMALIZATION\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"L2_POOL_2D\00", align 1
@.str.18 = private unnamed_addr constant [29 x i8] c"LOCAL_RESPONSE_NORMALIZATION\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"LOGISTIC\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"LSH_PROJECTION\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"LSTM\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c"MAX_POOL_2D\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"MUL\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"RELU\00", align 1
@.str.25 = private unnamed_addr constant [13 x i8] c"RELU_N1_TO_1\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"RELU6\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"RESHAPE\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"RESIZE_BILINEAR\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"RNN\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"SOFTMAX\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"SPACE_TO_DEPTH\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"SVDF\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"TANH\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"CONCAT_EMBEDDINGS\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"SKIP_GRAM\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"CALL\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"CUSTOM\00", align 1
@.str.38 = private unnamed_addr constant [24 x i8] c"EMBEDDING_LOOKUP_SPARSE\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"PAD\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"UNIDIRECTIONAL_SEQUENCE_RNN\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"GATHER\00", align 1
@.str.42 = private unnamed_addr constant [18 x i8] c"BATCH_TO_SPACE_ND\00", align 1
@.str.43 = private unnamed_addr constant [18 x i8] c"SPACE_TO_BATCH_ND\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"TRANSPOSE\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"MEAN\00", align 1
@.str.46 = private unnamed_addr constant [4 x i8] c"SUB\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"DIV\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"SQUEEZE\00", align 1
@.str.49 = private unnamed_addr constant [29 x i8] c"UNIDIRECTIONAL_SEQUENCE_LSTM\00", align 1
@.str.50 = private unnamed_addr constant [14 x i8] c"STRIDED_SLICE\00", align 1
@.str.51 = private unnamed_addr constant [27 x i8] c"BIDIRECTIONAL_SEQUENCE_RNN\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"EXP\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"TOPK_V2\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"SPLIT\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"LOG_SOFTMAX\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"DELEGATE\00", align 1
@.str.57 = private unnamed_addr constant [28 x i8] c"BIDIRECTIONAL_SEQUENCE_LSTM\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"CAST\00", align 1
@.str.59 = private unnamed_addr constant [6 x i8] c"PRELU\00", align 1
@.str.60 = private unnamed_addr constant [8 x i8] c"MAXIMUM\00", align 1
@.str.61 = private unnamed_addr constant [8 x i8] c"ARG_MAX\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"MINIMUM\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"LESS\00", align 1
@.str.64 = private unnamed_addr constant [4 x i8] c"NEG\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"PADV2\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c"GREATER\00", align 1
@.str.67 = private unnamed_addr constant [14 x i8] c"GREATER_EQUAL\00", align 1
@.str.68 = private unnamed_addr constant [11 x i8] c"LESS_EQUAL\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"SELECT\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c"SLICE\00", align 1
@.str.71 = private unnamed_addr constant [4 x i8] c"SIN\00", align 1
@.str.72 = private unnamed_addr constant [15 x i8] c"TRANSPOSE_CONV\00", align 1
@.str.73 = private unnamed_addr constant [16 x i8] c"SPARSE_TO_DENSE\00", align 1
@.str.74 = private unnamed_addr constant [5 x i8] c"TILE\00", align 1
@.str.75 = private unnamed_addr constant [12 x i8] c"EXPAND_DIMS\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"EQUAL\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"NOT_EQUAL\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"LOG\00", align 1
@.str.79 = private unnamed_addr constant [4 x i8] c"SUM\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"SQRT\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"RSQRT\00", align 1
@.str.82 = private unnamed_addr constant [6 x i8] c"SHAPE\00", align 1
@.str.83 = private unnamed_addr constant [4 x i8] c"POW\00", align 1
@.str.84 = private unnamed_addr constant [8 x i8] c"ARG_MIN\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"FAKE_QUANT\00", align 1
@.str.86 = private unnamed_addr constant [12 x i8] c"REDUCE_PROD\00", align 1
@.str.87 = private unnamed_addr constant [11 x i8] c"REDUCE_MAX\00", align 1
@.str.88 = private unnamed_addr constant [5 x i8] c"PACK\00", align 1
@.str.89 = private unnamed_addr constant [11 x i8] c"LOGICAL_OR\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"ONE_HOT\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"LOGICAL_AND\00", align 1
@.str.92 = private unnamed_addr constant [12 x i8] c"LOGICAL_NOT\00", align 1
@.str.93 = private unnamed_addr constant [7 x i8] c"UNPACK\00", align 1
@.str.94 = private unnamed_addr constant [11 x i8] c"REDUCE_MIN\00", align 1
@.str.95 = private unnamed_addr constant [10 x i8] c"FLOOR_DIV\00", align 1
@.str.96 = private unnamed_addr constant [11 x i8] c"REDUCE_ANY\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"SQUARE\00", align 1
@.str.98 = private unnamed_addr constant [11 x i8] c"ZEROS_LIKE\00", align 1
@.str.99 = private unnamed_addr constant [5 x i8] c"FILL\00", align 1
@.str.100 = private unnamed_addr constant [10 x i8] c"FLOOR_MOD\00", align 1
@.str.101 = private unnamed_addr constant [6 x i8] c"RANGE\00", align 1
@.str.102 = private unnamed_addr constant [24 x i8] c"RESIZE_NEAREST_NEIGHBOR\00", align 1
@.str.103 = private unnamed_addr constant [11 x i8] c"LEAKY_RELU\00", align 1
@.str.104 = private unnamed_addr constant [19 x i8] c"SQUARED_DIFFERENCE\00", align 1
@.str.105 = private unnamed_addr constant [11 x i8] c"MIRROR_PAD\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"ABS\00", align 1
@.str.107 = private unnamed_addr constant [8 x i8] c"SPLIT_V\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"UNIQUE\00", align 1
@.str.109 = private unnamed_addr constant [5 x i8] c"CEIL\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"REVERSE_V2\00", align 1
@.str.111 = private unnamed_addr constant [6 x i8] c"ADD_N\00", align 1
@.str.112 = private unnamed_addr constant [10 x i8] c"GATHER_ND\00", align 1
@.str.113 = private unnamed_addr constant [4 x i8] c"COS\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c"WHERE\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"RANK\00", align 1
@.str.116 = private unnamed_addr constant [4 x i8] c"ELU\00", align 1
@.str.117 = private unnamed_addr constant [17 x i8] c"REVERSE_SEQUENCE\00", align 1
@.str.118 = private unnamed_addr constant [12 x i8] c"MATRIX_DIAG\00", align 1
@.str.119 = private unnamed_addr constant [9 x i8] c"QUANTIZE\00", align 1
@.str.120 = private unnamed_addr constant [16 x i8] c"MATRIX_SET_DIAG\00", align 1
@.str.121 = private unnamed_addr constant [6 x i8] c"ROUND\00", align 1
@.str.122 = private unnamed_addr constant [11 x i8] c"HARD_SWISH\00", align 1
@.str.123 = private unnamed_addr constant [3 x i8] c"IF\00", align 1
@.str.124 = private unnamed_addr constant [6 x i8] c"WHILE\00", align 1
@.str.125 = private unnamed_addr constant [23 x i8] c"NON_MAX_SUPPRESSION_V4\00", align 1
@.str.126 = private unnamed_addr constant [23 x i8] c"NON_MAX_SUPPRESSION_V5\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"SCATTER_ND\00", align 1
@.str.128 = private unnamed_addr constant [10 x i8] c"SELECT_V2\00", align 1
@.str.129 = private unnamed_addr constant [8 x i8] c"DENSIFY\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c"SEGMENT_SUM\00", align 1
@.str.131 = private unnamed_addr constant [13 x i8] c"BATCH_MATMUL\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration(%"struct.tflite::OperatorCode"*, %"class.tflite::OpResolver"* dereferenceable(8), %"class.tflite::ErrorReporter"*, %struct.TfLiteRegistration** nocapture) local_unnamed_addr #0 {
  store %struct.TfLiteRegistration* null, %struct.TfLiteRegistration** %3, align 8
  %5 = bitcast %"struct.tflite::OperatorCode"* %0 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = sub nsw i64 0, %7
  %9 = getelementptr inbounds %"struct.tflite::OperatorCode", %"struct.tflite::OperatorCode"* %0, i64 0, i32 0, i32 0, i64 %8
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = icmp ugt i16 %11, 4
  br i1 %12, label %13, label %43

13:                                               ; preds = %4
  %14 = getelementptr inbounds i8, i8* %9, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %13
  %19 = zext i16 %16 to i64
  %20 = getelementptr inbounds %"struct.tflite::OperatorCode", %"struct.tflite::OperatorCode"* %0, i64 0, i32 0, i32 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  br label %23

23:                                               ; preds = %13, %18
  %24 = phi i32 [ %22, %18 ], [ 0, %13 ]
  %25 = icmp ugt i16 %11, 8
  br i1 %25, label %26, label %36

26:                                               ; preds = %23
  %27 = getelementptr inbounds i8, i8* %9, i64 8
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %26
  %32 = zext i16 %29 to i64
  %33 = getelementptr inbounds %"struct.tflite::OperatorCode", %"struct.tflite::OperatorCode"* %0, i64 0, i32 0, i32 0, i64 %32
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  br label %36

36:                                               ; preds = %23, %26, %31
  %37 = phi i32 [ %35, %31 ], [ 1, %26 ], [ 1, %23 ]
  %38 = icmp ugt i32 %24, 126
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = tail call i32 (%"class.tflite::ErrorReporter"*, i8*, ...) @_ZN6tflite13ErrorReporter6ReportEPKcz(%"class.tflite::ErrorReporter"* %2, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.1, i64 0, i64 0), i32 %24) #2
  br label %82

41:                                               ; preds = %36
  %42 = icmp eq i32 %24, 32
  br i1 %42, label %56, label %43

43:                                               ; preds = %4, %41
  %44 = phi i32 [ %24, %41 ], [ 0, %4 ]
  %45 = phi i32 [ %37, %41 ], [ 1, %4 ]
  %46 = bitcast %"class.tflite::OpResolver"* %1 to %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i32, i32)***
  %47 = load %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i32, i32)**, %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i32, i32)*** %46, align 8
  %48 = load %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i32, i32)*, %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i32, i32)** %47, align 8
  %49 = tail call %struct.TfLiteRegistration* %48(%"class.tflite::OpResolver"* %1, i32 %44, i32 %45) #2
  store %struct.TfLiteRegistration* %49, %struct.TfLiteRegistration** %3, align 8
  %50 = icmp eq %struct.TfLiteRegistration* %49, null
  br i1 %50, label %51, label %82

51:                                               ; preds = %43
  %52 = zext i32 %44 to i64
  %53 = getelementptr inbounds [128 x i8*], [128 x i8*]* @_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names, i64 0, i64 %52
  %54 = load i8*, i8** %53, align 8
  %55 = tail call i32 (%"class.tflite::ErrorReporter"*, i8*, ...) @_ZN6tflite13ErrorReporter6ReportEPKcz(%"class.tflite::ErrorReporter"* %2, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0), i8* %54, i32 %45) #2
  br label %82

56:                                               ; preds = %41
  %57 = icmp ugt i16 %11, 6
  br i1 %57, label %58, label %71

58:                                               ; preds = %56
  %59 = getelementptr inbounds i8, i8* %9, i64 6
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i64
  %63 = getelementptr inbounds %"struct.tflite::OperatorCode", %"struct.tflite::OperatorCode"* %0, i64 0, i32 0, i32 0, i64 %62
  %64 = icmp eq i16 %61, 0
  br i1 %64, label %71, label %65

65:                                               ; preds = %58
  %66 = bitcast i8* %63 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %63, i64 %68
  %70 = icmp eq i8* %69, null
  br i1 %70, label %71, label %73

71:                                               ; preds = %56, %58, %65
  %72 = tail call i32 (%"class.tflite::ErrorReporter"*, i8*, ...) @_ZN6tflite13ErrorReporter6ReportEPKcz(%"class.tflite::ErrorReporter"* %2, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0)) #2
  br label %82

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast %"class.tflite::OpResolver"* %1 to %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)***
  %76 = load %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)**, %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)*** %75, align 8
  %77 = getelementptr inbounds %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)*, %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)** %76, i64 1
  %78 = load %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)*, %struct.TfLiteRegistration* (%"class.tflite::OpResolver"*, i8*, i32)** %77, align 8
  %79 = tail call %struct.TfLiteRegistration* %78(%"class.tflite::OpResolver"* %1, i8* %74, i32 %37) #2
  store %struct.TfLiteRegistration* %79, %struct.TfLiteRegistration** %3, align 8
  %80 = icmp eq %struct.TfLiteRegistration* %79, null
  %81 = zext i1 %80 to i32
  br label %82

82:                                               ; preds = %51, %43, %73, %71, %39
  %83 = phi i32 [ 1, %39 ], [ 1, %51 ], [ 0, %43 ], [ %81, %73 ], [ 1, %71 ]
  ret i32 %83
}

declare i32 @_ZN6tflite13ErrorReporter6ReportEPKcz(%"class.tflite::ErrorReporter"*, i8*, ...) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
