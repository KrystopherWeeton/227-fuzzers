; ModuleID = '../../third_party/pdfium/fxbarcode/datamatrix/BC_TextEncoder.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/datamatrix/BC_TextEncoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_TextEncoder = type { %class.CBC_C40Encoder }
%class.CBC_C40Encoder = type { %class.CBC_Encoder }
%class.CBC_Encoder = type { i32 (...)** }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CBC_EncoderContext = type { %"class.fxcrt::WideString", %"class.fxcrt::WideString", i64, i8, %"class.fxcrt::UnownedPtr", i8, i8, i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CBC_SymbolInfo* }
%class.CBC_SymbolInfo = type { i32 (...)**, %"struct.CBC_SymbolInfo::Data"* }
%"struct.CBC_SymbolInfo::Data" = type { i16, i16, i16, i8, i8, i8, i8 }

@_ZTV15CBC_TextEncoder = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_TextEncoder*)* @_ZN15CBC_TextEncoderD2Ev to i8*), i8* bitcast (void (%class.CBC_TextEncoder*)* @_ZN15CBC_TextEncoderD0Ev to i8*), i8* bitcast (i8 (%class.CBC_TextEncoder*)* @_ZN15CBC_TextEncoder15GetEncodingModeEv to i8*), i8* bitcast (i1 (%class.CBC_C40Encoder*, %class.CBC_EncoderContext*)* @_ZN14CBC_C40Encoder6EncodeEP18CBC_EncoderContext to i8*), i8* bitcast (i1 (%class.CBC_C40Encoder*, %class.CBC_EncoderContext*, %"class.fxcrt::WideString"*)* @_ZN14CBC_C40Encoder9HandleEODEP18CBC_EncoderContextPN5fxcrt10WideStringE to i8*), i8* bitcast (i32 (%class.CBC_TextEncoder*, i32, %"class.fxcrt::WideString"*)* @_ZN15CBC_TextEncoder10EncodeCharEwPN5fxcrt10WideStringE to i8*)] }, align 8

@_ZN15CBC_TextEncoderC1Ev = hidden unnamed_addr alias void (%class.CBC_TextEncoder*), void (%class.CBC_TextEncoder*)* @_ZN15CBC_TextEncoderC2Ev
@_ZN15CBC_TextEncoderD1Ev = hidden unnamed_addr alias void (%class.CBC_TextEncoder*), void (%class.CBC_TextEncoder*)* @_ZN15CBC_TextEncoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CBC_TextEncoderC2Ev(%class.CBC_TextEncoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_TextEncoder, %class.CBC_TextEncoder* %0, i64 0, i32 0
  tail call void @_ZN14CBC_C40EncoderC2Ev(%class.CBC_C40Encoder* %2) #5
  %3 = getelementptr inbounds %class.CBC_TextEncoder, %class.CBC_TextEncoder* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV15CBC_TextEncoder, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN14CBC_C40EncoderC2Ev(%class.CBC_C40Encoder*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN14CBC_C40EncoderD2Ev(%class.CBC_C40Encoder*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CBC_TextEncoderD2Ev(%class.CBC_TextEncoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_TextEncoder, %class.CBC_TextEncoder* %0, i64 0, i32 0
  tail call void @_ZN14CBC_C40EncoderD2Ev(%class.CBC_C40Encoder* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CBC_TextEncoderD0Ev(%class.CBC_TextEncoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_TextEncoder, %class.CBC_TextEncoder* %0, i64 0, i32 0
  tail call void @_ZN14CBC_C40EncoderD2Ev(%class.CBC_C40Encoder* %2) #5
  %3 = bitcast %class.CBC_TextEncoder* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i8 @_ZN15CBC_TextEncoder15GetEncodingModeEv(%class.CBC_TextEncoder* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8 2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15CBC_TextEncoder10EncodeCharEwPN5fxcrt10WideStringE(%class.CBC_TextEncoder* nocapture, i32 signext, %"class.fxcrt::WideString"*) unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, 32
  br i1 %4, label %64, label %5

5:                                                ; preds = %3
  %6 = icmp ugt i32 %1, 127
  br i1 %6, label %17, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @iswdigit(i32 %1) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = add nsw i32 %1, -44
  br label %64

12:                                               ; preds = %7
  %13 = add nsw i32 %1, -97
  %14 = icmp ult i32 %13, 26
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = add nsw i32 %1, -83
  br label %64

17:                                               ; preds = %5, %12
  %18 = icmp slt i32 %1, 32
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 0) #5
  br label %64

21:                                               ; preds = %17
  %22 = icmp slt i32 %1, 48
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 1) #5
  %25 = add nsw i32 %1, -33
  br label %64

26:                                               ; preds = %21
  %27 = add nsw i32 %1, -58
  %28 = icmp ult i32 %27, 7
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 1) #5
  %31 = add nsw i32 %1, -43
  br label %64

32:                                               ; preds = %26
  %33 = add nsw i32 %1, -91
  %34 = icmp ult i32 %33, 5
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 1) #5
  %37 = add nsw i32 %1, -69
  br label %64

38:                                               ; preds = %32
  %39 = icmp eq i32 %1, 96
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 2) #5
  br label %64

42:                                               ; preds = %38
  %43 = add nsw i32 %1, -65
  %44 = icmp ult i32 %43, 26
  br i1 %44, label %45, label %48

45:                                               ; preds = %42
  %46 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 2) #5
  %47 = add nsw i32 %1, -64
  br label %64

48:                                               ; preds = %42
  %49 = add nsw i32 %1, -123
  %50 = icmp ult i32 %49, 5
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 2) #5
  %53 = add nsw i32 %1, -96
  br label %64

54:                                               ; preds = %48
  %55 = icmp slt i32 %1, 128
  br i1 %55, label %68, label %56

56:                                               ; preds = %54
  %57 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 1) #5
  %58 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext 30) #5
  %59 = add nsw i32 %1, -128
  %60 = tail call i32 @_ZN15CBC_TextEncoder10EncodeCharEwPN5fxcrt10WideStringE(%class.CBC_TextEncoder* %0, i32 signext %59, %"class.fxcrt::WideString"* %2)
  %61 = icmp sgt i32 %60, 0
  %62 = add nsw i32 %60, 2
  %63 = select i1 %61, i32 %62, i32 0
  ret i32 %63

64:                                               ; preds = %3, %10, %15, %19, %23, %29, %35, %40, %45, %51
  %65 = phi i32 [ %53, %51 ], [ %47, %45 ], [ 0, %40 ], [ %37, %35 ], [ %31, %29 ], [ %25, %23 ], [ %1, %19 ], [ %16, %15 ], [ %11, %10 ], [ 3, %3 ]
  %66 = phi i32 [ 2, %51 ], [ 2, %45 ], [ 2, %40 ], [ 2, %35 ], [ 2, %29 ], [ 2, %23 ], [ 2, %19 ], [ 1, %15 ], [ 1, %10 ], [ 1, %3 ]
  %67 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %2, i32 signext %65) #5
  br label %68

68:                                               ; preds = %64, %54
  %69 = phi i32 [ 0, %54 ], [ %66, %64 ]
  ret i32 %69
}

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

declare zeroext i1 @_ZN14CBC_C40Encoder6EncodeEP18CBC_EncoderContext(%class.CBC_C40Encoder*, %class.CBC_EncoderContext*) unnamed_addr #1

declare zeroext i1 @_ZN14CBC_C40Encoder9HandleEODEP18CBC_EncoderContextPN5fxcrt10WideStringE(%class.CBC_C40Encoder*, %class.CBC_EncoderContext*, %"class.fxcrt::WideString"*) unnamed_addr #1

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
