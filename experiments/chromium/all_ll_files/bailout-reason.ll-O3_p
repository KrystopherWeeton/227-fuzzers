; ModuleID = '../../v8/src/codegen/bailout-reason.cc'
source_filename = "../../v8/src/codegen/bailout-reason.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZZN2v88internal16GetBailoutReasonENS0_13BailoutReasonEE15error_messages_ = internal unnamed_addr constant [12 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [10 x i8] c"no reason\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"Bailed out due to dependency change\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Code generation failed\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"Cyclic object state detected by escape analysis\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"Function is being debugged\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Optimized graph construction failed\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"Function is too big to be optimized\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"LiveEdit\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"Native function literal\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"Not enough virtual registers (regalloc)\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"Optimization disabled\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"Optimization is always disabled\00", align 1
@_ZZN2v88internal14GetAbortReasonENS0_11AbortReasonEE15error_messages_ = internal unnamed_addr constant [60 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.70, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [46 x i8] c"32 bit value in register is not zero-extended\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"API call returned invalid object\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"Allocating non-empty packed array\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"Allocation is not double aligned\00", align 1
@.str.16 = private unnamed_addr constant [54 x i8] c"Expected optimized code cell or optimization sentinel\00", align 1
@.str.17 = private unnamed_addr constant [39 x i8] c"Expected undefined or cell in register\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"Expected feedback vector\00", align 1
@.str.19 = private unnamed_addr constant [71 x i8] c"The function_data field should be a BytecodeArray on interpreter entry\00", align 1
@.str.20 = private unnamed_addr constant [35 x i8] c"FPU TOP is not zero in deoptimizer\00", align 1
@.str.21 = private unnamed_addr constant [22 x i8] c"Input string too long\00", align 1
@.str.22 = private unnamed_addr constant [17 x i8] c"Invalid bytecode\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"Cannot advance current bytecode, \00", align 1
@.str.24 = private unnamed_addr constant [26 x i8] c"Invalid HandleScope level\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"Invalid jump table index\00", align 1
@.str.26 = private unnamed_addr constant [46 x i8] c"invalid parameters and registers in generator\00", align 1
@.str.27 = private unnamed_addr constant [37 x i8] c"Missing bytecode array from function\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"The object is not tagged\00", align 1
@.str.29 = private unnamed_addr constant [21 x i8] c"The object is tagged\00", align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"Offset out of range\00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c"Operand is a smi\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"Operand is a smi and not a bound function\00", align 1
@.str.33 = private unnamed_addr constant [39 x i8] c"Operand is a smi and not a constructor\00", align 1
@.str.34 = private unnamed_addr constant [36 x i8] c"Operand is a smi and not a function\00", align 1
@.str.35 = private unnamed_addr constant [44 x i8] c"Operand is a smi and not a generator object\00", align 1
@.str.36 = private unnamed_addr constant [32 x i8] c"Operand is not a bound function\00", align 1
@.str.37 = private unnamed_addr constant [29 x i8] c"Operand is not a constructor\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"Operand is not a fixed array\00", align 1
@.str.39 = private unnamed_addr constant [26 x i8] c"Operand is not a function\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"Operand is not a generator object\00", align 1
@.str.41 = private unnamed_addr constant [21 x i8] c"Operand is not a smi\00", align 1
@.str.42 = private unnamed_addr constant [24 x i8] c"Promise already settled\00", align 1
@.str.43 = private unnamed_addr constant [32 x i8] c"Received invalid return address\00", align 1
@.str.44 = private unnamed_addr constant [37 x i8] c"Register did not match expected root\00", align 1
@.str.45 = private unnamed_addr constant [34 x i8] c"Return address not found in frame\00", align 1
@.str.46 = private unnamed_addr constant [48 x i8] c"Should not directly enter OSR-compiled function\00", align 1
@.str.47 = private unnamed_addr constant [33 x i8] c"Stack access below stack pointer\00", align 1
@.str.48 = private unnamed_addr constant [29 x i8] c"Stack frame types must match\00", align 1
@.str.49 = private unnamed_addr constant [32 x i8] c"Unaligned cell in write barrier\00", align 1
@.str.50 = private unnamed_addr constant [32 x i8] c"Unexpected additional pop value\00", align 1
@.str.51 = private unnamed_addr constant [37 x i8] c"Unexpected dynamic map checks status\00", align 1
@.str.52 = private unnamed_addr constant [45 x i8] c"Unexpected ElementsKind in array constructor\00", align 1
@.str.53 = private unnamed_addr constant [22 x i8] c"Unexpected FPCR mode.\00", align 1
@.str.54 = private unnamed_addr constant [64 x i8] c"Unexpected runtime function id for the InvokeIntrinsic bytecode\00", align 1
@.str.55 = private unnamed_addr constant [42 x i8] c"Unexpected initial map for Array function\00", align 1
@.str.56 = private unnamed_addr constant [44 x i8] c"Unexpected level after return from api call\00", align 1
@.str.57 = private unnamed_addr constant [26 x i8] c"Unexpected negative value\00", align 1
@.str.58 = private unnamed_addr constant [43 x i8] c"Unexpectedly returned from dropping frames\00", align 1
@.str.59 = private unnamed_addr constant [35 x i8] c"Unexpectedly returned from a throw\00", align 1
@.str.60 = private unnamed_addr constant [45 x i8] c"Should not return after throwing a wasm trap\00", align 1
@.str.61 = private unnamed_addr constant [44 x i8] c"The stack pointer is not the expected value\00", align 1
@.str.62 = private unnamed_addr constant [17 x i8] c"Unexpected value\00", align 1
@.str.63 = private unnamed_addr constant [29 x i8] c"Unsupported module operation\00", align 1
@.str.64 = private unnamed_addr constant [34 x i8] c"Unsupported non-primitive compare\00", align 1
@.str.65 = private unnamed_addr constant [45 x i8] c"Wrong address or value passed to RecordWrite\00", align 1
@.str.66 = private unnamed_addr constant [40 x i8] c"Wrong number of arguments for intrinsic\00", align 1
@.str.67 = private unnamed_addr constant [42 x i8] c"Wrong value in code start register passed\00", align 1
@.str.68 = private unnamed_addr constant [33 x i8] c"Wrong context passed to function\00", align 1
@.str.69 = private unnamed_addr constant [36 x i8] c"thread_in_wasm flag was already set\00", align 1
@.str.70 = private unnamed_addr constant [32 x i8] c"thread_in_wasm flag was not set\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN2v88internal16GetBailoutReasonENS0_13BailoutReasonE(i8 zeroext) local_unnamed_addr #0 {
  %2 = zext i8 %0 to i64
  %3 = getelementptr inbounds [12 x i8*], [12 x i8*]* @_ZZN2v88internal16GetBailoutReasonENS0_13BailoutReasonEE15error_messages_, i64 0, i64 %2
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN2v88internal14GetAbortReasonENS0_11AbortReasonE(i8 zeroext) local_unnamed_addr #0 {
  %2 = zext i8 %0 to i64
  %3 = getelementptr inbounds [60 x i8*], [60 x i8*]* @_ZZN2v88internal14GetAbortReasonENS0_11AbortReasonEE15error_messages_, i64 0, i64 %2
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal18IsValidAbortReasonEi(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 60
  ret i1 %2
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
