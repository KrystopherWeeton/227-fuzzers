; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/block_delay_buffer.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/block_delay_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::BlockDelayBuffer" = type { i64, i64, %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector.2"* }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.webrtc::AudioBuffer" = type { i32 (...)**, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.37", %"class.std::__1::vector.43", %"class.std::__1::vector.43", i8, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.webrtc::ChannelBuffer"* }
%"class.webrtc::ChannelBuffer" = type { %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20", i64, i64, i64, i64, i64, %"class.std::__1::vector.26", %"class.std::__1::vector.26" }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { float** }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.std::__1::vector.28"*, %"class.std::__1::vector.28"*, %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::vector.28" = type opaque
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::vector.28"* }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.webrtc::SplittingFilter"* }
%"class.webrtc::SplittingFilter" = type opaque
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"class.std::__1::unique_ptr.45"*, %"class.std::__1::unique_ptr.45"*, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::unique_ptr.45" = type opaque
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.std::__1::unique_ptr.45"* }

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2EmRKS3_ = comdat any

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2ERKS5_ = comdat any

@_ZN6webrtc16BlockDelayBufferC1Emmmm = hidden unnamed_addr alias void (%"class.webrtc::BlockDelayBuffer"*, i64, i64, i64, i64), void (%"class.webrtc::BlockDelayBuffer"*, i64, i64, i64, i64)* @_ZN6webrtc16BlockDelayBufferC2Emmmm
@_ZN6webrtc16BlockDelayBufferD1Ev = hidden unnamed_addr alias void (%"class.webrtc::BlockDelayBuffer"*), void (%"class.webrtc::BlockDelayBuffer"*)* @_ZN6webrtc16BlockDelayBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16BlockDelayBufferC2Emmmm(%"class.webrtc::BlockDelayBuffer"*, i64, i64, i64, i64) unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::vector.0", align 8
  %7 = alloca %"class.std::__1::vector.2", align 8
  %8 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 0
  store i64 %3, i64* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 1
  store i64 %4, i64* %9, align 8
  %10 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2
  %11 = bitcast %"class.std::__1::vector.0"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #5
  %12 = bitcast %"class.std::__1::vector.2"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #5
  %13 = icmp eq i64 %4, 0
  br i1 %13, label %28, label %14

14:                                               ; preds = %5
  %15 = icmp ugt i64 %4, 4611686018427387903
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = bitcast %"class.std::__1::vector.2"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %17) #6
  unreachable

18:                                               ; preds = %14
  %19 = shl i64 %4, 2
  %20 = tail call i8* @_Znwm(i64 %19) #7
  %21 = bitcast i8* %20 to float*
  %22 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 1
  %23 = bitcast %"class.std::__1::vector.2"* %7 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds float, float* %21, i64 %4
  %25 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %24, float** %25, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 0, i64 %19, i1 false)
  %26 = bitcast float** %22 to i64*
  %27 = ptrtoint float* %24 to i64
  store i64 %27, i64* %26, align 8
  br label %28

28:                                               ; preds = %5, %18
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2EmRKS3_(%"class.std::__1::vector.0"* nonnull %6, i64 %2, %"class.std::__1::vector.2"* nonnull dereferenceable(24) %7)
  %29 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #5
  %30 = icmp eq i64 %1, 0
  br i1 %30, label %51, label %31

31:                                               ; preds = %28
  %32 = icmp ugt i64 %1, 768614336404564650
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #6
  unreachable

35:                                               ; preds = %31
  %36 = mul i64 %1, 24
  %37 = call i8* @_Znwm(i64 %36) #7
  %38 = bitcast i8* %37 to %"class.std::__1::vector.0"*
  %39 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2, i32 0, i32 1
  %40 = bitcast %"class.std::__1::vector.0"** %39 to i8**
  store i8* %37, i8** %40, align 8
  %41 = bitcast %"class.std::__1::vector"* %10 to i8**
  store i8* %37, i8** %41, align 8
  %42 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %38, i64 %1
  %43 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.0"* %42, %"class.std::__1::vector.0"** %43, align 8
  br label %44

44:                                               ; preds = %44, %35
  %45 = phi %"class.std::__1::vector.0"* [ %46, %44 ], [ %38, %35 ]
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.0"* %45, %"class.std::__1::vector.0"* nonnull dereferenceable(24) %6) #5
  %46 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %45, i64 1
  %47 = icmp eq %"class.std::__1::vector.0"* %46, %42
  br i1 %47, label %48, label %44

48:                                               ; preds = %44
  %49 = bitcast %"class.std::__1::vector.0"** %39 to i64*
  %50 = ptrtoint %"class.std::__1::vector.0"* %42 to i64
  store i64 %50, i64* %49, align 8
  br label %51

51:                                               ; preds = %28, %48
  %52 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %6, i64 0, i32 0, i32 0
  %53 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %52, align 8
  %54 = icmp eq %"class.std::__1::vector.2"* %53, null
  br i1 %54, label %78, label %55

55:                                               ; preds = %51
  %56 = bitcast %"class.std::__1::vector.2"* %53 to i8*
  %57 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %6, i64 0, i32 0, i32 1
  %58 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %57, align 8
  %59 = icmp eq %"class.std::__1::vector.2"* %58, %53
  br i1 %59, label %76, label %60

60:                                               ; preds = %55, %71
  %61 = phi %"class.std::__1::vector.2"* [ %62, %71 ], [ %58, %55 ]
  %62 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %61, i64 -1
  %63 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %62, i64 0, i32 0, i32 0
  %64 = load float*, float** %63, align 8
  %65 = icmp eq float* %64, null
  br i1 %65, label %71, label %66

66:                                               ; preds = %60
  %67 = ptrtoint float* %64 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %61, i64 -1, i32 0, i32 1
  %69 = bitcast float** %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = bitcast float* %64 to i8*
  call void @_ZdlPv(i8* %70) #7
  br label %71

71:                                               ; preds = %66, %60
  %72 = icmp eq %"class.std::__1::vector.2"* %62, %53
  br i1 %72, label %73, label %60

73:                                               ; preds = %71
  %74 = bitcast %"class.std::__1::vector.0"* %6 to i8**
  %75 = load i8*, i8** %74, align 8
  br label %76

76:                                               ; preds = %73, %55
  %77 = phi i8* [ %75, %73 ], [ %56, %55 ]
  store %"class.std::__1::vector.2"* %53, %"class.std::__1::vector.2"** %57, align 8
  call void @_ZdlPv(i8* %77) #7
  br label %78

78:                                               ; preds = %51, %76
  %79 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 0
  %80 = load float*, float** %79, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %87, label %82

82:                                               ; preds = %78
  %83 = ptrtoint float* %80 to i64
  %84 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 1
  %85 = bitcast float** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = bitcast float* %80 to i8*
  call void @_ZdlPv(i8* %86) #7
  br label %87

87:                                               ; preds = %78, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  %88 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 3
  store i64 0, i64* %88, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2EmRKS3_(%"class.std::__1::vector.0"*, i64, %"class.std::__1::vector.2"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.std::__1::vector.0"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #5
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %63, label %6

6:                                                ; preds = %3
  %7 = icmp ugt i64 %1, 768614336404564650
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  %9 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %9) #6
  unreachable

10:                                               ; preds = %6
  %11 = mul i64 %1, 24
  %12 = tail call i8* @_Znwm(i64 %11) #7
  %13 = bitcast i8* %12 to %"class.std::__1::vector.2"*
  %14 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"class.std::__1::vector.2"** %14 to i8**
  store i8* %12, i8** %15, align 8
  %16 = bitcast %"class.std::__1::vector.0"* %0 to i8**
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %13, i64 %1
  %18 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.2"* %17, %"class.std::__1::vector.2"** %18, align 8
  %19 = bitcast %"class.std::__1::vector.2"** %14 to i64*
  %20 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %2, i64 0, i32 0, i32 1
  %21 = bitcast float** %20 to i64*
  %22 = bitcast %"class.std::__1::vector.2"* %2 to i64*
  %23 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %2, i64 0, i32 0, i32 0
  br label %24

24:                                               ; preds = %58, %10
  %25 = phi %"class.std::__1::vector.2"* [ %13, %10 ], [ %59, %58 ]
  %26 = bitcast %"class.std::__1::vector.2"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #5
  %27 = load i64, i64* %21, align 8
  %28 = load i64, i64* %22, align 8
  %29 = sub i64 %27, %28
  %30 = ashr exact i64 %29, 2
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %58, label %32

32:                                               ; preds = %24
  %33 = icmp ugt i64 %30, 4611686018427387903
  br i1 %33, label %34, label %36

34:                                               ; preds = %32
  %35 = bitcast %"class.std::__1::vector.2"* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #6
  unreachable

36:                                               ; preds = %32
  %37 = tail call i8* @_Znwm(i64 %29) #7
  %38 = bitcast i8* %37 to float*
  %39 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %25, i64 0, i32 0, i32 1
  %40 = bitcast float** %39 to i8**
  store i8* %37, i8** %40, align 8
  %41 = bitcast %"class.std::__1::vector.2"* %25 to i8**
  store i8* %37, i8** %41, align 8
  %42 = getelementptr inbounds float, float* %38, i64 %30
  %43 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %42, float** %43, align 8
  %44 = load float*, float** %23, align 8
  %45 = load i64, i64* %21, align 8
  %46 = bitcast float** %39 to i64*
  %47 = ptrtoint i8* %37 to i64
  %48 = ptrtoint float* %44 to i64
  %49 = sub i64 %45, %48
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %36
  %52 = lshr exact i64 %49, 2
  %53 = bitcast float* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %37, i8* align 4 %53, i64 %49, i1 false) #5
  %54 = getelementptr inbounds float, float* %38, i64 %52
  %55 = ptrtoint float* %54 to i64
  br label %56

56:                                               ; preds = %51, %36
  %57 = phi i64 [ %55, %51 ], [ %47, %36 ]
  store i64 %57, i64* %46, align 8
  br label %58

58:                                               ; preds = %56, %24
  %59 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %25, i64 1
  %60 = icmp eq %"class.std::__1::vector.2"* %59, %17
  br i1 %60, label %61, label %24

61:                                               ; preds = %58
  %62 = ptrtoint %"class.std::__1::vector.2"* %17 to i64
  store i64 %62, i64* %19, align 8
  br label %63

63:                                               ; preds = %3, %61
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16BlockDelayBufferD2Ev(%"class.webrtc::BlockDelayBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3, align 8
  %5 = icmp eq %"class.std::__1::vector.0"* %4, null
  br i1 %5, label %47, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::vector.0"* %4 to i8*
  %8 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.0"* %9, %4
  br i1 %10, label %45, label %11

11:                                               ; preds = %6, %40
  %12 = phi %"class.std::__1::vector.0"* [ %13, %40 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %13, i64 0, i32 0, i32 0
  %15 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %14, align 8
  %16 = icmp eq %"class.std::__1::vector.2"* %15, null
  br i1 %16, label %40, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.std::__1::vector.2"* %15 to i8*
  %19 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %12, i64 -1, i32 0, i32 1
  %20 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %19, align 8
  %21 = icmp eq %"class.std::__1::vector.2"* %20, %15
  br i1 %21, label %38, label %22

22:                                               ; preds = %17, %33
  %23 = phi %"class.std::__1::vector.2"* [ %24, %33 ], [ %20, %17 ]
  %24 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %23, i64 -1
  %25 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %24, i64 0, i32 0, i32 0
  %26 = load float*, float** %25, align 8
  %27 = icmp eq float* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %22
  %29 = ptrtoint float* %26 to i64
  %30 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %23, i64 -1, i32 0, i32 1
  %31 = bitcast float** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast float* %26 to i8*
  tail call void @_ZdlPv(i8* %32) #7
  br label %33

33:                                               ; preds = %28, %22
  %34 = icmp eq %"class.std::__1::vector.2"* %24, %15
  br i1 %34, label %35, label %22

35:                                               ; preds = %33
  %36 = bitcast %"class.std::__1::vector.0"* %13 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %35, %17
  %39 = phi i8* [ %37, %35 ], [ %18, %17 ]
  store %"class.std::__1::vector.2"* %15, %"class.std::__1::vector.2"** %19, align 8
  tail call void @_ZdlPv(i8* %39) #7
  br label %40

40:                                               ; preds = %38, %11
  %41 = icmp eq %"class.std::__1::vector.0"* %13, %4
  br i1 %41, label %42, label %11

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector"* %2 to i8**
  %44 = load i8*, i8** %43, align 8
  br label %45

45:                                               ; preds = %42, %6
  %46 = phi i8* [ %44, %42 ], [ %7, %6 ]
  store %"class.std::__1::vector.0"* %4, %"class.std::__1::vector.0"** %8, align 8
  tail call void @_ZdlPv(i8* %46) #7
  br label %47

47:                                               ; preds = %1, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16BlockDelayBuffer11DelaySignalEPNS_11AudioBufferE(%"class.webrtc::BlockDelayBuffer"* nocapture, %"class.webrtc::AudioBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %91, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %8, i64 0, i32 0, i32 1
  %10 = bitcast %"class.std::__1::vector.2"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.0"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 24
  %16 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 2, i32 0, i32 1
  %17 = bitcast %"class.std::__1::vector.0"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = ptrtoint %"class.std::__1::vector.0"* %8 to i64
  %20 = sub i64 %18, %19
  %21 = sdiv exact i64 %20, 24
  %22 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %6
  %26 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 10, i32 0, i32 0, i32 0
  %28 = icmp eq i64 %14, 0
  %29 = getelementptr inbounds %"class.webrtc::BlockDelayBuffer", %"class.webrtc::BlockDelayBuffer"* %0, i64 0, i32 0
  br label %32

30:                                               ; preds = %56, %6
  %31 = phi i64 [ 0, %6 ], [ %57, %56 ]
  store i64 %31, i64* %22, align 8
  br label %91

32:                                               ; preds = %25, %56
  %33 = phi i64 [ 0, %25 ], [ %58, %56 ]
  %34 = phi i64 [ 0, %25 ], [ %57, %56 ]
  %35 = load %"class.webrtc::ChannelBuffer"*, %"class.webrtc::ChannelBuffer"** %26, align 8
  %36 = icmp eq %"class.webrtc::ChannelBuffer"* %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %32
  %38 = load %"class.webrtc::ChannelBuffer"*, %"class.webrtc::ChannelBuffer"** %27, align 8
  br label %39

39:                                               ; preds = %32, %37
  %40 = phi %"class.webrtc::ChannelBuffer"* [ %38, %37 ], [ %35, %32 ]
  %41 = getelementptr inbounds %"class.webrtc::ChannelBuffer", %"class.webrtc::ChannelBuffer"* %40, i64 0, i32 7
  %42 = load i64, i64* %41, align 8
  %43 = mul i64 %42, %33
  %44 = getelementptr inbounds %"class.webrtc::ChannelBuffer", %"class.webrtc::ChannelBuffer"* %40, i64 0, i32 2, i32 0, i32 0, i32 0
  %45 = load float**, float*** %44, align 8
  %46 = getelementptr inbounds float*, float** %45, i64 %43
  %47 = select i1 %28, float** null, float** %46
  br i1 %28, label %56, label %48

48:                                               ; preds = %39
  %49 = load i64, i64* %29, align 8
  br label %50

50:                                               ; preds = %48, %60
  %51 = phi i64 [ %61, %60 ], [ %49, %48 ]
  %52 = phi i64 [ %63, %60 ], [ 0, %48 ]
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %60, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds float*, float** %47, i64 %52
  br label %65

56:                                               ; preds = %60, %39
  %57 = phi i64 [ %34, %39 ], [ %62, %60 ]
  %58 = add nuw i64 %33, 1
  %59 = icmp ult i64 %58, %21
  br i1 %59, label %32, label %30

60:                                               ; preds = %65, %50
  %61 = phi i64 [ 0, %50 ], [ %89, %65 ]
  %62 = phi i64 [ %23, %50 ], [ %87, %65 ]
  %63 = add nuw i64 %52, 1
  %64 = icmp ult i64 %63, %15
  br i1 %64, label %50, label %56

65:                                               ; preds = %54, %65
  %66 = phi i64 [ 0, %54 ], [ %88, %65 ]
  %67 = phi i64 [ %23, %54 ], [ %87, %65 ]
  %68 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %7, align 8
  %69 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %68, i64 %33, i32 0, i32 0
  %70 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %69, align 8
  %71 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %70, i64 %52, i32 0, i32 0
  %72 = load float*, float** %71, align 8
  %73 = getelementptr inbounds float, float* %72, i64 %67
  %74 = bitcast float* %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = load float*, float** %55, align 8
  %77 = getelementptr inbounds float, float* %76, i64 %66
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %74, align 4
  %80 = load float*, float** %55, align 8
  %81 = getelementptr inbounds float, float* %80, i64 %66
  %82 = bitcast float* %81 to i32*
  store i32 %75, i32* %82, align 4
  %83 = load i64, i64* %3, align 8
  %84 = add i64 %83, -1
  %85 = icmp ult i64 %67, %84
  %86 = add i64 %67, 1
  %87 = select i1 %85, i64 %86, i64 0
  %88 = add nuw i64 %66, 1
  %89 = load i64, i64* %29, align 8
  %90 = icmp ult i64 %88, %89
  br i1 %90, label %65, label %60

91:                                               ; preds = %2, %30
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.0"*, %"class.std::__1::vector.0"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.0"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #5
  %4 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.2"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.0"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #6
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #7
  %18 = bitcast i8* %17 to %"class.std::__1::vector.2"*
  %19 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.2"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.0"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.2"* %22, %"class.std::__1::vector.2"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %24, align 8
  %26 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.2"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.2"* %25, %26
  br i1 %29, label %77, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.2"*
  br label %32

32:                                               ; preds = %71, %30
  %33 = phi %"class.std::__1::vector.2"* [ %73, %71 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.2"* [ %72, %71 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.2"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #5
  %36 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %34, i64 0, i32 0, i32 1
  %37 = bitcast float** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.2"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %32
  %45 = icmp ugt i64 %42, 4611686018427387903
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"class.std::__1::vector.2"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #6
  unreachable

48:                                               ; preds = %44
  %49 = tail call i8* @_Znwm(i64 %41) #7
  %50 = bitcast i8* %49 to float*
  %51 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 0, i32 0, i32 1
  %52 = bitcast float** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"class.std::__1::vector.2"* %33 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds float, float* %50, i64 %42
  %55 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %54, float** %55, align 8
  %56 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %34, i64 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = load i64, i64* %37, align 8
  %59 = bitcast float** %51 to i64*
  %60 = ptrtoint i8* %49 to i64
  %61 = ptrtoint float* %57 to i64
  %62 = sub i64 %58, %61
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %48
  %65 = lshr exact i64 %62, 2
  %66 = bitcast float* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %66, i64 %62, i1 false) #5
  %67 = getelementptr inbounds float, float* %50, i64 %65
  %68 = ptrtoint float* %67 to i64
  br label %69

69:                                               ; preds = %64, %48
  %70 = phi i64 [ %68, %64 ], [ %60, %48 ]
  store i64 %70, i64* %59, align 8
  br label %71

71:                                               ; preds = %69, %32
  %72 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %34, i64 1
  %73 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 1
  %74 = icmp eq %"class.std::__1::vector.2"* %72, %26
  br i1 %74, label %75, label %32

75:                                               ; preds = %71
  %76 = ptrtoint %"class.std::__1::vector.2"* %73 to i64
  br label %77

77:                                               ; preds = %16, %75
  %78 = phi i64 [ %28, %16 ], [ %76, %75 ]
  store i64 %78, i64* %27, align 8
  br label %79

79:                                               ; preds = %2, %77
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
