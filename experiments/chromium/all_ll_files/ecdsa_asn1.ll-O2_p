; ModuleID = '../../third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c'
source_filename = "../../third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ec_key_st = type { %struct.ec_group_st*, %struct.ec_point_st*, %struct.EC_WRAPPED_SCALAR*, i32, i32, i32, %struct.ecdsa_method_st*, %struct.crypto_ex_data_st }
%struct.ec_group_st = type { %struct.ec_method_st*, %struct.ec_point_st*, %struct.bignum_st, i32, %struct.bn_mont_ctx_st*, %struct.bignum_st, %union.EC_FELEM, %union.EC_FELEM, i32, i32, %union.EC_FELEM, i32, %struct.bn_mont_ctx_st*, %union.EC_FELEM }
%struct.ec_method_st = type { i32 (%struct.ec_group_st*)*, void (%struct.ec_group_st*)*, i32 (%struct.ec_group_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_FELEM*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64)*, i32 (%struct.ec_group_st*, %union.EC_PRECOMP*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)* }
%struct.bignum_ctx = type opaque
%struct.EC_RAW_POINT = type { %union.EC_FELEM, %union.EC_FELEM, %union.EC_FELEM }
%struct.EC_AFFINE = type { %union.EC_FELEM, %union.EC_FELEM }
%union.EC_SCALAR = type { [9 x i64] }
%union.EC_PRECOMP = type { [31 x %struct.EC_AFFINE] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%union.EC_FELEM = type { [9 x i64] }
%struct.ec_point_st = type { %struct.ec_group_st*, %struct.EC_RAW_POINT }
%struct.EC_WRAPPED_SCALAR = type { %struct.bignum_st, %union.EC_SCALAR }
%struct.ecdsa_method_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.ec_key_st*)*, i32 (%struct.ec_key_st*)*, i64 (%struct.ec_key_st*)*, i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.ecdsa_sig_st = type { %struct.bignum_st*, %struct.bignum_st* }
%struct.cbs_st = type { i8*, i64 }

@.str = private unnamed_addr constant [64 x i8] c"../../third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ECDSA_sign(i32, i8*, i64, i8*, i32*, %struct.ec_key_st*) local_unnamed_addr #0 {
  %7 = alloca %struct.cbb_st, align 8
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds %struct.ec_key_st, %struct.ec_key_st* %5, i64 0, i32 6
  %10 = load %struct.ecdsa_method_st*, %struct.ecdsa_method_st** %9, align 8
  %11 = icmp eq %struct.ecdsa_method_st* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.ecdsa_method_st, %struct.ecdsa_method_st* %10, i64 0, i32 5
  %14 = load i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)*, i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)** %13, align 8
  %15 = icmp eq i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i32 %14(i8* %1, i64 %2, i8* %3, i32* %4, %struct.ec_key_st* %5) #5
  br label %39

18:                                               ; preds = %12, %6
  %19 = tail call %struct.ecdsa_sig_st* @ECDSA_do_sign(i8* %1, i64 %2, %struct.ec_key_st* %5) #5
  %20 = icmp eq %struct.ecdsa_sig_st* %19, null
  br i1 %20, label %36, label %21

21:                                               ; preds = %18
  %22 = bitcast %struct.cbb_st* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 32, i1 false)
  call void @CBB_zero(%struct.cbb_st* nonnull %7) #5
  store i64 -6148914691236517206, i64* %8, align 8
  %23 = call i64 @ECDSA_size(%struct.ec_key_st* %5)
  %24 = call i32 @CBB_init_fixed(%struct.cbb_st* nonnull %7, i8* %3, i64 %23) #5
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %21
  %27 = call i32 @ECDSA_SIG_marshal(%struct.cbb_st* nonnull %7, %struct.ecdsa_sig_st* nonnull %19)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %26
  %30 = call i32 @CBB_finish(%struct.cbb_st* nonnull %7, i8** null, i64* nonnull %8) #5
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29, %26, %21
  call void @ERR_put_error(i32 26, i32 0, i32 105, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 89) #5
  call void @CBB_cleanup(%struct.cbb_st* nonnull %7) #5
  br label %36

33:                                               ; preds = %29
  %34 = load i64, i64* %8, align 8
  %35 = trunc i64 %34 to i32
  br label %36

36:                                               ; preds = %18, %33, %32
  %37 = phi i32 [ %35, %33 ], [ 0, %32 ], [ 0, %18 ]
  %38 = phi i32 [ 1, %33 ], [ 0, %32 ], [ 0, %18 ]
  store i32 %37, i32* %4, align 4
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* %19) #5
  br label %39

39:                                               ; preds = %36, %16
  %40 = phi i32 [ %17, %16 ], [ %38, %36 ]
  ret i32 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.ecdsa_sig_st* @ECDSA_do_sign(i8*, i64, %struct.ec_key_st*) local_unnamed_addr #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #2

declare i32 @CBB_init_fixed(%struct.cbb_st*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @ECDSA_size(%struct.ec_key_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.ec_key_st* %0, null
  br i1 %2, label %52, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.ec_key_st, %struct.ec_key_st* %0, i64 0, i32 6
  %5 = load %struct.ecdsa_method_st*, %struct.ecdsa_method_st** %4, align 8
  %6 = icmp eq %struct.ecdsa_method_st* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.ecdsa_method_st, %struct.ecdsa_method_st* %5, i64 0, i32 4
  %9 = load i64 (%struct.ec_key_st*)*, i64 (%struct.ec_key_st*)** %8, align 8
  %10 = icmp eq i64 (%struct.ec_key_st*)* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 %9(%struct.ec_key_st* nonnull %0) #5
  br label %20

13:                                               ; preds = %7, %3
  %14 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* nonnull %0) #5
  %15 = icmp eq %struct.ec_group_st* %14, null
  br i1 %15, label %52, label %16

16:                                               ; preds = %13
  %17 = tail call %struct.bignum_st* @EC_GROUP_get0_order(%struct.ec_group_st* nonnull %14) #5
  %18 = tail call i32 @BN_num_bytes(%struct.bignum_st* %17) #5
  %19 = zext i32 %18 to i64
  br label %20

20:                                               ; preds = %16, %11
  %21 = phi i64 [ %12, %11 ], [ %19, %16 ]
  %22 = add i64 %21, 1
  %23 = icmp ult i64 %22, 128
  br i1 %23, label %30, label %24

24:                                               ; preds = %20, %24
  %25 = phi i64 [ %27, %24 ], [ 1, %20 ]
  %26 = phi i64 [ %28, %24 ], [ %22, %20 ]
  %27 = add nuw nsw i64 %25, 1
  %28 = lshr i64 %26, 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %24

30:                                               ; preds = %24, %20
  %31 = phi i64 [ 1, %20 ], [ %27, %24 ]
  %32 = add i64 %21, 2
  %33 = add i64 %32, %31
  %34 = icmp ult i64 %33, %21
  br i1 %34, label %52, label %35

35:                                               ; preds = %30
  %36 = shl i64 %33, 1
  %37 = icmp ult i64 %36, %33
  br i1 %37, label %52, label %38

38:                                               ; preds = %35
  %39 = icmp ult i64 %36, 128
  br i1 %39, label %46, label %40

40:                                               ; preds = %38, %40
  %41 = phi i64 [ %43, %40 ], [ 1, %38 ]
  %42 = phi i64 [ %44, %40 ], [ %36, %38 ]
  %43 = add nuw nsw i64 %41, 1
  %44 = lshr i64 %42, 8
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %40

46:                                               ; preds = %40, %38
  %47 = phi i64 [ 1, %38 ], [ %43, %40 ]
  %48 = or i64 %36, 1
  %49 = add i64 %47, %48
  %50 = icmp ult i64 %49, %36
  %51 = select i1 %50, i64 0, i64 %49
  br label %52

52:                                               ; preds = %46, %35, %30, %13, %1
  %53 = phi i64 [ 0, %1 ], [ 0, %13 ], [ 0, %30 ], [ %51, %46 ], [ 0, %35 ]
  ret i64 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ECDSA_SIG_marshal(%struct.cbb_st*, %struct.ecdsa_sig_st* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 536870928) #5
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %1, i64 0, i32 0
  %9 = load %struct.bignum_st*, %struct.bignum_st** %8, align 8
  %10 = call i32 @BN_marshal_asn1(%struct.cbb_st* nonnull %3, %struct.bignum_st* %9) #5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %1, i64 0, i32 1
  %14 = load %struct.bignum_st*, %struct.bignum_st** %13, align 8
  %15 = call i32 @BN_marshal_asn1(%struct.cbb_st* nonnull %3, %struct.bignum_st* %14) #5
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %12
  %18 = call i32 @CBB_flush(%struct.cbb_st* %0) #5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17, %12, %7, %2
  call void @ERR_put_error(i32 26, i32 0, i32 105, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 187) #5
  br label %21

21:                                               ; preds = %17, %20
  %22 = phi i32 [ 0, %20 ], [ 1, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #5
  ret i32 %22
}

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #2

declare void @ECDSA_SIG_free(%struct.ecdsa_sig_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ECDSA_verify(i32, i8*, i64, i8*, i64, %struct.ec_key_st*) local_unnamed_addr #0 {
  %7 = alloca %struct.cbs_st, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  store i8* null, i8** %8, align 8
  %11 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #5
  call void @CBS_init(%struct.cbs_st* nonnull %7, i8* %3, i64 %4) #5
  %12 = call %struct.ecdsa_sig_st* @ECDSA_SIG_parse(%struct.cbs_st* nonnull %7) #5
  %13 = icmp eq %struct.ecdsa_sig_st* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %6
  %15 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #5
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %6, %14
  call void @ERR_put_error(i32 26, i32 0, i32 100, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 174) #5
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* %12) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  br label %33

18:                                               ; preds = %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  store i64 -6148914691236517206, i64* %9, align 8
  %19 = call i32 @ECDSA_SIG_to_bytes(i8** nonnull %8, i64* nonnull %9, %struct.ecdsa_sig_st* nonnull %12)
  %20 = icmp ne i32 %19, 0
  %21 = load i64, i64* %9, align 8
  %22 = icmp eq i64 %21, %4
  %23 = and i1 %20, %22
  br i1 %23, label %24, label %30

24:                                               ; preds = %18
  %25 = icmp eq i64 %4, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %24
  %27 = load i8*, i8** %8, align 8
  %28 = call i32 @bcmp(i8* %3, i8* %27, i64 %4)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %18, %26
  call void @ERR_put_error(i32 26, i32 0, i32 68, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 119) #5
  br label %33

31:                                               ; preds = %24, %26
  %32 = call i32 @ECDSA_do_verify(i8* %1, i64 %2, %struct.ecdsa_sig_st* nonnull %12, %struct.ec_key_st* %5) #5
  br label %33

33:                                               ; preds = %17, %31, %30
  %34 = phi %struct.ecdsa_sig_st* [ %12, %30 ], [ %12, %31 ], [ null, %17 ]
  %35 = phi i32 [ 0, %30 ], [ %32, %31 ], [ 0, %17 ]
  %36 = load i8*, i8** %8, align 8
  call void @OPENSSL_free(i8* %36) #5
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* %34) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ecdsa_sig_st* @ECDSA_SIG_from_bytes(i8*, i64) local_unnamed_addr #0 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #5
  %5 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %3, i8* %0, i64 %1) #5
  %6 = call %struct.ecdsa_sig_st* @ECDSA_SIG_parse(%struct.cbs_st* nonnull %3)
  %7 = icmp eq %struct.ecdsa_sig_st* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #5
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %8, %2
  call void @ERR_put_error(i32 26, i32 0, i32 100, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 174) #5
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* %6) #5
  br label %12

12:                                               ; preds = %8, %11
  %13 = phi %struct.ecdsa_sig_st* [ null, %11 ], [ %6, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #5
  ret %struct.ecdsa_sig_st* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ECDSA_SIG_to_bytes(i8**, i64*, %struct.ecdsa_sig_st* nocapture readonly) local_unnamed_addr #0 {
  %4 = alloca %struct.cbb_st, align 8
  %5 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  call void @CBB_zero(%struct.cbb_st* nonnull %4) #5
  %6 = call i32 @CBB_init(%struct.cbb_st* nonnull %4, i64 0) #5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = call i32 @ECDSA_SIG_marshal(%struct.cbb_st* nonnull %4, %struct.ecdsa_sig_st* %2)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = call i32 @CBB_finish(%struct.cbb_st* nonnull %4, i8** %0, i64* %1) #5
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %11, %8, %3
  call void @ERR_put_error(i32 26, i32 0, i32 105, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 200) #5
  call void @CBB_cleanup(%struct.cbb_st* nonnull %4) #5
  br label %15

15:                                               ; preds = %11, %14
  %16 = phi i32 [ 0, %14 ], [ 1, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #5
  ret i32 %16
}

declare i32 @ECDSA_do_verify(i8*, i64, %struct.ecdsa_sig_st*, %struct.ec_key_st*) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #2

declare i32 @BN_num_bytes(%struct.bignum_st*) local_unnamed_addr #2

declare %struct.bignum_st* @EC_GROUP_get0_order(%struct.ec_group_st*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @ECDSA_SIG_max_len(i64) local_unnamed_addr #3 {
  %2 = add i64 %0, 1
  %3 = icmp ult i64 %2, 128
  br i1 %3, label %10, label %4

4:                                                ; preds = %1, %4
  %5 = phi i64 [ %7, %4 ], [ 1, %1 ]
  %6 = phi i64 [ %8, %4 ], [ %2, %1 ]
  %7 = add nuw nsw i64 %5, 1
  %8 = lshr i64 %6, 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %4

10:                                               ; preds = %4, %1
  %11 = phi i64 [ 1, %1 ], [ %7, %4 ]
  %12 = add i64 %0, 2
  %13 = add i64 %12, %11
  %14 = icmp ult i64 %13, %0
  br i1 %14, label %32, label %15

15:                                               ; preds = %10
  %16 = shl i64 %13, 1
  %17 = icmp ult i64 %16, %13
  br i1 %17, label %32, label %18

18:                                               ; preds = %15
  %19 = icmp ult i64 %16, 128
  br i1 %19, label %26, label %20

20:                                               ; preds = %18, %20
  %21 = phi i64 [ %23, %20 ], [ 1, %18 ]
  %22 = phi i64 [ %24, %20 ], [ %16, %18 ]
  %23 = add nuw nsw i64 %21, 1
  %24 = lshr i64 %22, 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %20

26:                                               ; preds = %20, %18
  %27 = phi i64 [ 1, %18 ], [ %23, %20 ]
  %28 = or i64 %16, 1
  %29 = add i64 %28, %27
  %30 = icmp ult i64 %29, %16
  %31 = select i1 %30, i64 0, i64 %29
  br label %32

32:                                               ; preds = %26, %15, %10
  %33 = phi i64 [ 0, %10 ], [ %31, %26 ], [ 0, %15 ]
  ret i64 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ecdsa_sig_st* @ECDSA_SIG_parse(%struct.cbs_st*) local_unnamed_addr #0 {
  %2 = alloca %struct.cbs_st, align 8
  %3 = tail call %struct.ecdsa_sig_st* @ECDSA_SIG_new() #5
  %4 = icmp eq %struct.ecdsa_sig_st* %3, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.cbs_st* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %7 = bitcast %struct.cbs_st* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  %8 = call i32 @CBS_get_asn1(%struct.cbs_st* %0, %struct.cbs_st* nonnull %2, i32 536870928) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %3, i64 0, i32 0
  %12 = load %struct.bignum_st*, %struct.bignum_st** %11, align 8
  %13 = call i32 @BN_parse_asn1_unsigned(%struct.cbs_st* nonnull %2, %struct.bignum_st* %12) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %3, i64 0, i32 1
  %17 = load %struct.bignum_st*, %struct.bignum_st** %16, align 8
  %18 = call i32 @BN_parse_asn1_unsigned(%struct.cbs_st* nonnull %2, %struct.bignum_st* %17) #5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = call i64 @CBS_len(%struct.cbs_st* nonnull %2) #5
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20, %15, %10, %5
  call void @ERR_put_error(i32 26, i32 0, i32 100, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 162) #5
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* nonnull %3) #5
  br label %24

24:                                               ; preds = %20, %23
  %25 = phi %struct.ecdsa_sig_st* [ null, %23 ], [ %3, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %struct.ecdsa_sig_st* [ %25, %24 ], [ null, %1 ]
  ret %struct.ecdsa_sig_st* %27
}

declare %struct.ecdsa_sig_st* @ECDSA_SIG_new() local_unnamed_addr #2

declare i32 @CBS_get_asn1(%struct.cbs_st*, %struct.cbs_st*, i32) local_unnamed_addr #2

declare i32 @BN_parse_asn1_unsigned(%struct.cbs_st*, %struct.bignum_st*) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare i32 @CBB_add_asn1(%struct.cbb_st*, %struct.cbb_st*, i32) local_unnamed_addr #2

declare i32 @BN_marshal_asn1(%struct.cbb_st*, %struct.bignum_st*) local_unnamed_addr #2

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #2

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ecdsa_sig_st* @d2i_ECDSA_SIG(%struct.ecdsa_sig_st**, i8** nocapture, i64) local_unnamed_addr #0 {
  %4 = alloca %struct.cbs_st, align 8
  %5 = icmp slt i64 %2, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %3
  %7 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = bitcast %struct.cbs_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %1, align 8
  call void @CBS_init(%struct.cbs_st* nonnull %4, i8* %9, i64 %2) #5
  %10 = call %struct.ecdsa_sig_st* @ECDSA_SIG_parse(%struct.cbs_st* nonnull %4)
  %11 = icmp eq %struct.ecdsa_sig_st* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %6
  %13 = icmp eq %struct.ecdsa_sig_st** %0, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %12
  %15 = load %struct.ecdsa_sig_st*, %struct.ecdsa_sig_st** %0, align 8
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* %15) #5
  store %struct.ecdsa_sig_st* %10, %struct.ecdsa_sig_st** %0, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = call i8* @CBS_data(%struct.cbs_st* nonnull %4) #5
  store i8* %17, i8** %1, align 8
  br label %18

18:                                               ; preds = %6, %16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  br label %19

19:                                               ; preds = %3, %18
  %20 = phi %struct.ecdsa_sig_st* [ %10, %18 ], [ null, %3 ]
  ret %struct.ecdsa_sig_st* %20
}

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_ECDSA_SIG(%struct.ecdsa_sig_st* nocapture readonly, i8**) local_unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = call i32 @CBB_init(%struct.cbb_st* nonnull %3, i64 0) #5
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = call i32 @ECDSA_SIG_marshal(%struct.cbb_st* nonnull %3, %struct.ecdsa_sig_st* %0)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7, %2
  call void @CBB_cleanup(%struct.cbb_st* nonnull %3) #5
  br label %13

11:                                               ; preds = %7
  %12 = call i32 @CBB_finish_i2d(%struct.cbb_st* nonnull %3, i8** %1) #5
  br label %13

13:                                               ; preds = %11, %10
  %14 = phi i32 [ %12, %11 ], [ -1, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #5
  ret i32 %14
}

declare i32 @CBB_finish_i2d(%struct.cbb_st*, i8**) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
