; ModuleID = '../../third_party/blink/renderer/platform/geometry/calculation_value.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/calculation_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"union.blink::CalculationValue::DataUnion" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::CalculationExpressionNode"* }
%"class.blink::CalculationExpressionNode" = type <{ i32 (...)**, %"class.WTF::RefCounted", [4 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::CalculationValue" = type <{ %"class.WTF::RefCounted.1", [4 x i8], %"union.blink::CalculationValue::DataUnion", i8, [7 x i8] }>
%"class.WTF::RefCounted.1" = type { %"class.base::RefCounted.2" }
%"class.base::RefCounted.2" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::PixelsAndPercent" = type { float, float }

@_ZTVN5blink29CalculationExpressionLeafNodeE = external unnamed_addr constant { [11 x i8*] }, align 8

@_ZN5blink16CalculationValue9DataUnionC1E13scoped_refptrIKNS_25CalculationExpressionNodeEE = hidden unnamed_addr alias void (%"union.blink::CalculationValue::DataUnion"*, %"class.blink::CalculationExpressionNode"*), void (%"union.blink::CalculationValue::DataUnion"*, %"class.blink::CalculationExpressionNode"*)* @_ZN5blink16CalculationValue9DataUnionC2E13scoped_refptrIKNS_25CalculationExpressionNodeEE
@_ZN5blink16CalculationValue9DataUnionD1Ev = hidden unnamed_addr alias void (%"union.blink::CalculationValue::DataUnion"*), void (%"union.blink::CalculationValue::DataUnion"*)* @_ZN5blink16CalculationValue9DataUnionD2Ev
@_ZN5blink16CalculationValueC1E13scoped_refptrIKNS_25CalculationExpressionNodeEENS_10ValueRangeE = hidden unnamed_addr alias void (%"class.blink::CalculationValue"*, %"class.blink::CalculationExpressionNode"*, i32), void (%"class.blink::CalculationValue"*, %"class.blink::CalculationExpressionNode"*, i32)* @_ZN5blink16CalculationValueC2E13scoped_refptrIKNS_25CalculationExpressionNodeEENS_10ValueRangeE
@_ZN5blink16CalculationValueD1Ev = hidden unnamed_addr alias void (%"class.blink::CalculationValue"*), void (%"class.blink::CalculationValue"*)* @_ZN5blink16CalculationValueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16CalculationValue9DataUnionC2E13scoped_refptrIKNS_25CalculationExpressionNodeEE(%"union.blink::CalculationValue::DataUnion"* nocapture, %"class.blink::CalculationExpressionNode"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.blink::CalculationExpressionNode"* %1 to i64
  %4 = bitcast %"union.blink::CalculationValue::DataUnion"* %0 to i64*
  store i64 %3, i64* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink16CalculationValue9DataUnionD2Ev(%"union.blink::CalculationValue::DataUnion"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationValue"* @_ZN5blink16CalculationValue16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEENS_10ValueRangeE(%"class.blink::CalculationExpressionNode"*, i32) local_unnamed_addr #2 align 2 {
  %3 = bitcast %"class.blink::CalculationExpressionNode"* %0 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %4 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %4, i64 2
  %6 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.blink::CalculationExpressionNode"* %0) #5
  br i1 %7, label %20, label %8

8:                                                ; preds = %2
  %9 = ptrtoint %"class.blink::CalculationExpressionNode"* %0 to i64
  %10 = tail call noalias i8* @malloc(i64 24) #5
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  %13 = bitcast i8* %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = getelementptr inbounds i8, i8* %10, i64 16
  %15 = icmp eq i32 %1, 1
  %16 = zext i1 %15 to i8
  %17 = shl nuw nsw i8 %16, 1
  %18 = or i8 %17, 1
  store i8 %18, i8* %14, align 8
  %19 = ptrtoint i8* %10 to i64
  br label %47

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 0, i32 2
  %22 = bitcast [4 x i8]* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = tail call noalias i8* @malloc(i64 24) #5
  %25 = bitcast i8* %24 to i32*
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds i8, i8* %24, i64 8
  %27 = bitcast i8* %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %24, i64 16
  %29 = icmp eq i32 %1, 1
  %30 = zext i1 %29 to i8
  %31 = shl nuw nsw i8 %30, 1
  store i8 %31, i8* %28, align 8
  %32 = ptrtoint i8* %24 to i64
  %33 = icmp eq %"class.blink::CalculationExpressionNode"* %0, null
  br i1 %33, label %47, label %34

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 0, i32 1, i32 0
  %36 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %35, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %36) #5
  %37 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %35, i64 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %47

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %35, i64 -2
  %42 = bitcast %"class.base::RefCounted"* %41 to %"class.blink::CalculationExpressionNode"*
  %43 = bitcast %"class.base::RefCounted"* %41 to void (%"class.blink::CalculationExpressionNode"*)***
  %44 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %44, i64 8
  %46 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %45, align 8
  tail call void %46(%"class.blink::CalculationExpressionNode"* nonnull %42) #5
  br label %47

47:                                               ; preds = %8, %20, %34, %40
  %48 = phi i64 [ %19, %8 ], [ %32, %20 ], [ %32, %34 ], [ %32, %40 ]
  %49 = inttoptr i64 %48 to %"class.blink::CalculationValue"*
  ret %"class.blink::CalculationValue"* %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16CalculationValueC2E13scoped_refptrIKNS_25CalculationExpressionNodeEENS_10ValueRangeE(%"class.blink::CalculationValue"* nocapture, %"class.blink::CalculationExpressionNode"*, i32) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.blink::CalculationExpressionNode"* %1 to i64
  %5 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %7 = bitcast %"union.blink::CalculationValue::DataUnion"* %6 to i64*
  store i64 %4, i64* %7, align 8
  %8 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i32 %2, 1
  %11 = zext i1 %10 to i8
  %12 = shl nuw nsw i8 %11, 1
  %13 = and i8 %9, -4
  %14 = or i8 %12, %13
  %15 = or i8 %14, 1
  store i8 %15, i8* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16CalculationValueD2Ev(%"class.blink::CalculationValue"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 8
  %4 = and i8 %3, 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %23, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %7, align 8
  %9 = icmp eq %"class.blink::CalculationExpressionNode"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %8, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %11, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %12) #5
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %11, i64 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %11, i64 -2
  %18 = bitcast %"class.base::RefCounted"* %17 to %"class.blink::CalculationExpressionNode"*
  %19 = bitcast %"class.base::RefCounted"* %17 to void (%"class.blink::CalculationExpressionNode"*)***
  %20 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %20, i64 8
  %22 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %21, align 8
  tail call void %22(%"class.blink::CalculationExpressionNode"* nonnull %18) #5
  br label %23

23:                                               ; preds = %16, %10, %6, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink16CalculationValue8EvaluateEf(%"class.blink::CalculationValue"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %8, align 8
  %10 = bitcast %"class.blink::CalculationExpressionNode"* %9 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %11 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %10, align 8
  %12 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %11, align 8
  %13 = tail call float %12(%"class.blink::CalculationExpressionNode"* %9, float %1) #5
  %14 = load i8, i8* %3, align 8
  br label %25

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %17 = bitcast %"union.blink::CalculationValue::DataUnion"* %16 to float*
  %18 = load float, float* %17, align 8
  %19 = bitcast %"union.blink::CalculationValue::DataUnion"* %16 to %"struct.blink::PixelsAndPercent"*
  %20 = getelementptr inbounds %"struct.blink::PixelsAndPercent", %"struct.blink::PixelsAndPercent"* %19, i64 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = fdiv float %21, 1.000000e+02
  %23 = fmul float %22, %1
  %24 = fadd float %18, %23
  br label %25

25:                                               ; preds = %15, %7
  %26 = phi i8 [ %14, %7 ], [ %4, %15 ]
  %27 = phi float [ %13, %7 ], [ %24, %15 ]
  %28 = fcmp ult float %27, 0x47EFFFFFE0000000
  %29 = fcmp ole float %27, 0xC7EFFFFFE0000000
  %30 = select i1 %29, float 0xC7EFFFFFE0000000, float %27
  %31 = select i1 %28, float %30, float 0x47EFFFFFE0000000
  %32 = and i8 %26, 2
  %33 = icmp ne i8 %32, 0
  %34 = fcmp olt float %31, 0.000000e+00
  %35 = and i1 %33, %34
  %36 = select i1 %35, float 0.000000e+00, float %31
  ret float %36
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16CalculationValueeqERKS0_(%"class.blink::CalculationValue"* nocapture readonly, %"class.blink::CalculationValue"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 3
  %8 = load i8, i8* %7, align 8
  %9 = and i8 %8, 1
  %10 = icmp ne i8 %9, 0
  br i1 %6, label %22, label %11

11:                                               ; preds = %2
  br i1 %10, label %12, label %39

12:                                               ; preds = %11
  %13 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %14 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 2, i32 0, i32 0
  %16 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %15, align 8
  %17 = bitcast %"class.blink::CalculationExpressionNode"* %14 to i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)***
  %18 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %18, i64 1
  %20 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.blink::CalculationExpressionNode"* %14, %"class.blink::CalculationExpressionNode"* dereferenceable(16) %16) #5
  br label %39

22:                                               ; preds = %2
  br i1 %10, label %39, label %23

23:                                               ; preds = %22
  %24 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %25 = bitcast %"union.blink::CalculationValue::DataUnion"* %24 to float*
  %26 = load float, float* %25, align 8
  %27 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 2
  %28 = bitcast %"union.blink::CalculationValue::DataUnion"* %27 to float*
  %29 = load float, float* %28, align 8
  %30 = fcmp oeq float %26, %29
  br i1 %30, label %31, label %39

31:                                               ; preds = %23
  %32 = bitcast %"union.blink::CalculationValue::DataUnion"* %24 to %"struct.blink::PixelsAndPercent"*
  %33 = getelementptr inbounds %"struct.blink::PixelsAndPercent", %"struct.blink::PixelsAndPercent"* %32, i64 0, i32 1
  %34 = load float, float* %33, align 4
  %35 = bitcast %"union.blink::CalculationValue::DataUnion"* %27 to %"struct.blink::PixelsAndPercent"*
  %36 = getelementptr inbounds %"struct.blink::PixelsAndPercent", %"struct.blink::PixelsAndPercent"* %35, i64 0, i32 1
  %37 = load float, float* %36, align 4
  %38 = fcmp oeq float %34, %37
  br label %39

39:                                               ; preds = %22, %23, %31, %11, %12
  %40 = phi i1 [ false, %11 ], [ %21, %12 ], [ false, %23 ], [ false, %22 ], [ %38, %31 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZNK5blink16CalculationValue21GetOrCreateExpressionEv(%"class.blink::CalculationValue"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 8
  %4 = and i8 %3, 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %7, align 8
  %9 = ptrtoint %"class.blink::CalculationExpressionNode"* %8 to i64
  %10 = icmp eq %"class.blink::CalculationExpressionNode"* %8, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %8, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %12) #5
  br label %24

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %15 = bitcast %"union.blink::CalculationValue::DataUnion"* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = tail call noalias i8* @malloc(i64 24) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 8
  %19 = bitcast i8* %18 to i32*
  store i32 1, i32* %19, align 4
  %20 = bitcast i8* %17 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %21 = getelementptr inbounds i8, i8* %17, i64 12
  %22 = bitcast i8* %21 to i64*
  store i64 %16, i64* %22, align 4
  %23 = ptrtoint i8* %17 to i64
  br label %24

24:                                               ; preds = %11, %6, %13
  %25 = phi i64 [ %23, %13 ], [ %9, %6 ], [ %9, %11 ]
  %26 = inttoptr i64 %25 to %"class.blink::CalculationExpressionNode"*
  ret %"class.blink::CalculationExpressionNode"* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationValue"* @_ZNK5blink16CalculationValue5BlendERKS0_dNS_10ValueRangeE(%"class.blink::CalculationValue"* nocapture readonly, %"class.blink::CalculationValue"* nocapture readonly dereferenceable(24), double, i32) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 8
  %7 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 3
  %8 = load i8, i8* %7, align 8
  %9 = or i8 %6, %8
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %36

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 2
  %14 = bitcast %"union.blink::CalculationValue::DataUnion"* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 8
  %16 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %17 = bitcast %"union.blink::CalculationValue::DataUnion"* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 8
  %19 = fpext <2 x float> %15 to <2 x double>
  %20 = fsub <2 x float> %18, %15
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = insertelement <2 x double> undef, double %2, i32 0
  %23 = shufflevector <2 x double> %22, <2 x double> undef, <2 x i32> zeroinitializer
  %24 = fmul <2 x double> %23, %21
  %25 = fadd <2 x double> %24, %19
  %26 = fptrunc <2 x double> %25 to <2 x float>
  %27 = tail call noalias i8* @malloc(i64 24) #5
  %28 = bitcast i8* %27 to %"class.blink::CalculationValue"*
  %29 = bitcast i8* %27 to i32*
  store i32 1, i32* %29, align 4
  %30 = getelementptr inbounds i8, i8* %27, i64 8
  %31 = bitcast i8* %30 to <2 x float>*
  store <2 x float> %26, <2 x float>* %31, align 8
  %32 = getelementptr inbounds i8, i8* %27, i64 16
  %33 = icmp eq i32 %3, 1
  %34 = zext i1 %33 to i8
  %35 = shl nuw nsw i8 %34, 1
  store i8 %35, i8* %32, align 8
  br label %137

36:                                               ; preds = %4
  %37 = and i8 %8, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 2, i32 0, i32 0
  %41 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %40, align 8
  %42 = ptrtoint %"class.blink::CalculationExpressionNode"* %41 to i64
  %43 = icmp eq %"class.blink::CalculationExpressionNode"* %41, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %41, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %45) #5
  br label %57

46:                                               ; preds = %36
  %47 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %1, i64 0, i32 2
  %48 = bitcast %"union.blink::CalculationValue::DataUnion"* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = tail call noalias i8* @malloc(i64 24) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 8
  %52 = bitcast i8* %51 to i32*
  store i32 1, i32* %52, align 4
  %53 = bitcast i8* %50 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %54 = getelementptr inbounds i8, i8* %50, i64 12
  %55 = bitcast i8* %54 to i64*
  store i64 %49, i64* %55, align 4
  %56 = ptrtoint i8* %50 to i64
  br label %57

57:                                               ; preds = %39, %44, %46
  %58 = phi i64 [ %56, %46 ], [ %42, %39 ], [ %42, %44 ]
  %59 = inttoptr i64 %58 to %"class.blink::CalculationExpressionNode"*
  %60 = fsub double 1.000000e+00, %2
  %61 = fptrunc double %60 to float
  %62 = tail call %"class.blink::CalculationExpressionNode"* @_ZN5blink39CalculationExpressionMultiplicationNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEEf(%"class.blink::CalculationExpressionNode"* %59, float %61) #5
  %63 = load i8, i8* %5, align 8
  %64 = and i8 %63, 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %73, label %66

66:                                               ; preds = %57
  %67 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %68 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %67, align 8
  %69 = ptrtoint %"class.blink::CalculationExpressionNode"* %68 to i64
  %70 = icmp eq %"class.blink::CalculationExpressionNode"* %68, null
  br i1 %70, label %84, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %68, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %72) #5
  br label %84

73:                                               ; preds = %57
  %74 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %75 = bitcast %"union.blink::CalculationValue::DataUnion"* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = tail call noalias i8* @malloc(i64 24) #5
  %78 = getelementptr inbounds i8, i8* %77, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 1, i32* %79, align 4
  %80 = bitcast i8* %77 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %80, align 8
  %81 = getelementptr inbounds i8, i8* %77, i64 12
  %82 = bitcast i8* %81 to i64*
  store i64 %76, i64* %82, align 4
  %83 = ptrtoint i8* %77 to i64
  br label %84

84:                                               ; preds = %66, %71, %73
  %85 = phi i64 [ %83, %73 ], [ %69, %66 ], [ %69, %71 ]
  %86 = inttoptr i64 %85 to %"class.blink::CalculationExpressionNode"*
  %87 = fptrunc double %2 to float
  %88 = tail call %"class.blink::CalculationExpressionNode"* @_ZN5blink39CalculationExpressionMultiplicationNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEEf(%"class.blink::CalculationExpressionNode"* %86, float %87) #5
  %89 = tail call %"class.blink::CalculationExpressionNode"* @_ZN5blink33CalculationExpressionAdditiveNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEES4_NS0_4TypeE(%"class.blink::CalculationExpressionNode"* %62, %"class.blink::CalculationExpressionNode"* %88, i32 0) #5
  %90 = bitcast %"class.blink::CalculationExpressionNode"* %89 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %91 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %90, align 8
  %92 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %91, i64 2
  %93 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %92, align 8
  %94 = tail call zeroext i1 %93(%"class.blink::CalculationExpressionNode"* %89) #5
  br i1 %94, label %107, label %95

95:                                               ; preds = %84
  %96 = ptrtoint %"class.blink::CalculationExpressionNode"* %89 to i64
  %97 = tail call noalias i8* @malloc(i64 24) #5
  %98 = bitcast i8* %97 to i32*
  store i32 1, i32* %98, align 4
  %99 = getelementptr inbounds i8, i8* %97, i64 8
  %100 = bitcast i8* %99 to i64*
  store i64 %96, i64* %100, align 8
  %101 = getelementptr inbounds i8, i8* %97, i64 16
  %102 = icmp eq i32 %3, 1
  %103 = zext i1 %102 to i8
  %104 = shl nuw nsw i8 %103, 1
  %105 = or i8 %104, 1
  store i8 %105, i8* %101, align 8
  %106 = ptrtoint i8* %97 to i64
  br label %134

107:                                              ; preds = %84
  %108 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %89, i64 0, i32 2
  %109 = bitcast [4 x i8]* %108 to i64*
  %110 = load i64, i64* %109, align 4
  %111 = tail call noalias i8* @malloc(i64 24) #5
  %112 = bitcast i8* %111 to i32*
  store i32 1, i32* %112, align 4
  %113 = getelementptr inbounds i8, i8* %111, i64 8
  %114 = bitcast i8* %113 to i64*
  store i64 %110, i64* %114, align 8
  %115 = getelementptr inbounds i8, i8* %111, i64 16
  %116 = icmp eq i32 %3, 1
  %117 = zext i1 %116 to i8
  %118 = shl nuw nsw i8 %117, 1
  store i8 %118, i8* %115, align 8
  %119 = ptrtoint i8* %111 to i64
  %120 = icmp eq %"class.blink::CalculationExpressionNode"* %89, null
  br i1 %120, label %134, label %121

121:                                              ; preds = %107
  %122 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %89, i64 0, i32 1, i32 0
  %123 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %122, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %123) #5
  %124 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %122, i64 0, i32 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %134

127:                                              ; preds = %121
  %128 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %122, i64 -2
  %129 = bitcast %"class.base::RefCounted"* %128 to %"class.blink::CalculationExpressionNode"*
  %130 = bitcast %"class.base::RefCounted"* %128 to void (%"class.blink::CalculationExpressionNode"*)***
  %131 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %130, align 8
  %132 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %131, i64 8
  %133 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %132, align 8
  tail call void %133(%"class.blink::CalculationExpressionNode"* nonnull %129) #5
  br label %134

134:                                              ; preds = %127, %121, %107, %95
  %135 = phi i64 [ %106, %95 ], [ %119, %107 ], [ %119, %121 ], [ %119, %127 ]
  %136 = inttoptr i64 %135 to %"class.blink::CalculationValue"*
  br label %137

137:                                              ; preds = %134, %12
  %138 = phi %"class.blink::CalculationValue"* [ %136, %134 ], [ %28, %12 ]
  ret %"class.blink::CalculationValue"* %138
}

declare %"class.blink::CalculationExpressionNode"* @_ZN5blink39CalculationExpressionMultiplicationNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEEf(%"class.blink::CalculationExpressionNode"*, float) local_unnamed_addr #3

declare %"class.blink::CalculationExpressionNode"* @_ZN5blink33CalculationExpressionAdditiveNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEES4_NS0_4TypeE(%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationValue"* @_ZNK5blink16CalculationValue29SubtractFromOneHundredPercentEv(%"class.blink::CalculationValue"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 8
  %4 = and i8 %3, 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %8 = bitcast %"union.blink::CalculationValue::DataUnion"* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 8
  %10 = fsub <2 x float> <float -0.000000e+00, float 1.000000e+02>, %9
  %11 = tail call noalias i8* @malloc(i64 24) #5
  %12 = bitcast i8* %11 to %"class.blink::CalculationValue"*
  %13 = bitcast i8* %11 to i32*
  store i32 1, i32* %13, align 4
  %14 = getelementptr inbounds i8, i8* %11, i64 8
  %15 = bitcast i8* %14 to <2 x float>*
  store <2 x float> %10, <2 x float>* %15, align 8
  %16 = getelementptr inbounds i8, i8* %11, i64 16
  store i8 0, i8* %16, align 8
  br label %74

17:                                               ; preds = %1
  %18 = tail call noalias i8* @malloc(i64 24) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 8
  %20 = bitcast i8* %19 to i32*
  store i32 1, i32* %20, align 4
  %21 = bitcast i8* %18 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds i8, i8* %18, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds i8, i8* %18, i64 16
  %25 = bitcast i8* %24 to i32*
  store i32 1120403456, i32* %25, align 4
  %26 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %27 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %26, align 8
  %28 = icmp eq %"class.blink::CalculationExpressionNode"* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %17
  %30 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %27, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %30) #5
  br label %31

31:                                               ; preds = %17, %29
  %32 = bitcast i8* %18 to %"class.blink::CalculationExpressionNode"*
  %33 = tail call %"class.blink::CalculationExpressionNode"* @_ZN5blink33CalculationExpressionAdditiveNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEES4_NS0_4TypeE(%"class.blink::CalculationExpressionNode"* %32, %"class.blink::CalculationExpressionNode"* %27, i32 1) #5
  %34 = bitcast %"class.blink::CalculationExpressionNode"* %33 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %35 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %34, align 8
  %36 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %35, i64 2
  %37 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %36, align 8
  %38 = tail call zeroext i1 %37(%"class.blink::CalculationExpressionNode"* %33) #5
  br i1 %38, label %47, label %39

39:                                               ; preds = %31
  %40 = ptrtoint %"class.blink::CalculationExpressionNode"* %33 to i64
  %41 = tail call noalias i8* @malloc(i64 24) #5
  %42 = bitcast i8* %41 to i32*
  store i32 1, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %41, i64 8
  %44 = bitcast i8* %43 to i64*
  store i64 %40, i64* %44, align 8
  %45 = getelementptr inbounds i8, i8* %41, i64 16
  store i8 1, i8* %45, align 8
  %46 = ptrtoint i8* %41 to i64
  br label %71

47:                                               ; preds = %31
  %48 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %33, i64 0, i32 2
  %49 = bitcast [4 x i8]* %48 to i64*
  %50 = load i64, i64* %49, align 4
  %51 = tail call noalias i8* @malloc(i64 24) #5
  %52 = bitcast i8* %51 to i32*
  store i32 1, i32* %52, align 4
  %53 = getelementptr inbounds i8, i8* %51, i64 8
  %54 = bitcast i8* %53 to i64*
  store i64 %50, i64* %54, align 8
  %55 = getelementptr inbounds i8, i8* %51, i64 16
  store i8 0, i8* %55, align 8
  %56 = ptrtoint i8* %51 to i64
  %57 = icmp eq %"class.blink::CalculationExpressionNode"* %33, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %47
  %59 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %33, i64 0, i32 1, i32 0
  %60 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %59, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %60) #5
  %61 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %59, i64 0, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %71

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %59, i64 -2
  %66 = bitcast %"class.base::RefCounted"* %65 to %"class.blink::CalculationExpressionNode"*
  %67 = bitcast %"class.base::RefCounted"* %65 to void (%"class.blink::CalculationExpressionNode"*)***
  %68 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %68, i64 8
  %70 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %69, align 8
  tail call void %70(%"class.blink::CalculationExpressionNode"* nonnull %66) #5
  br label %71

71:                                               ; preds = %39, %47, %58, %64
  %72 = phi i64 [ %46, %39 ], [ %56, %47 ], [ %56, %58 ], [ %56, %64 ]
  %73 = inttoptr i64 %72 to %"class.blink::CalculationValue"*
  br label %74

74:                                               ; preds = %71, %6
  %75 = phi %"class.blink::CalculationValue"* [ %73, %71 ], [ %12, %6 ]
  ret %"class.blink::CalculationValue"* %75
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationValue"* @_ZNK5blink16CalculationValue4ZoomEd(%"class.blink::CalculationValue"* nocapture readonly, double) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %26

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2
  %9 = bitcast %"union.blink::CalculationValue::DataUnion"* %8 to float*
  %10 = load float, float* %9, align 8
  %11 = fpext float %10 to double
  %12 = fmul double %11, %1
  %13 = fptrunc double %12 to float
  %14 = bitcast %"union.blink::CalculationValue::DataUnion"* %8 to %"struct.blink::PixelsAndPercent"*
  %15 = getelementptr inbounds %"struct.blink::PixelsAndPercent", %"struct.blink::PixelsAndPercent"* %14, i64 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = insertelement <2 x float> undef, float %13, i32 0
  %18 = insertelement <2 x float> %17, float %16, i32 1
  %19 = tail call noalias i8* @malloc(i64 24) #5
  %20 = bitcast i8* %19 to %"class.blink::CalculationValue"*
  %21 = bitcast i8* %19 to i32*
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %19, i64 8
  %23 = bitcast i8* %22 to <2 x float>*
  store <2 x float> %18, <2 x float>* %23, align 8
  %24 = getelementptr inbounds i8, i8* %19, i64 16
  %25 = and i8 %4, 2
  store i8 %25, i8* %24, align 8
  br label %80

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.blink::CalculationValue", %"class.blink::CalculationValue"* %0, i64 0, i32 2, i32 0, i32 0
  %28 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %27, align 8
  %29 = bitcast %"class.blink::CalculationExpressionNode"* %28 to %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)***
  %30 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)**, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*** %29, align 8
  %31 = getelementptr inbounds %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %30, i64 6
  %32 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %31, align 8
  %33 = tail call %"class.blink::CalculationExpressionNode"* %32(%"class.blink::CalculationExpressionNode"* %28, double %1) #5
  %34 = load i8, i8* %3, align 8
  %35 = lshr i8 %34, 1
  %36 = and i8 %35, 1
  %37 = bitcast %"class.blink::CalculationExpressionNode"* %33 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %38 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %37, align 8
  %39 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %38, i64 2
  %40 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %39, align 8
  %41 = tail call zeroext i1 %40(%"class.blink::CalculationExpressionNode"* %33) #5
  br i1 %41, label %52, label %42

42:                                               ; preds = %26
  %43 = ptrtoint %"class.blink::CalculationExpressionNode"* %33 to i64
  %44 = tail call noalias i8* @malloc(i64 24) #5
  %45 = bitcast i8* %44 to i32*
  store i32 1, i32* %45, align 4
  %46 = getelementptr inbounds i8, i8* %44, i64 8
  %47 = bitcast i8* %46 to i64*
  store i64 %43, i64* %47, align 8
  %48 = getelementptr inbounds i8, i8* %44, i64 16
  %49 = shl nuw nsw i8 %36, 1
  %50 = or i8 %49, 1
  store i8 %50, i8* %48, align 8
  %51 = ptrtoint i8* %44 to i64
  br label %77

52:                                               ; preds = %26
  %53 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %33, i64 0, i32 2
  %54 = bitcast [4 x i8]* %53 to i64*
  %55 = load i64, i64* %54, align 4
  %56 = tail call noalias i8* @malloc(i64 24) #5
  %57 = bitcast i8* %56 to i32*
  store i32 1, i32* %57, align 4
  %58 = getelementptr inbounds i8, i8* %56, i64 8
  %59 = bitcast i8* %58 to i64*
  store i64 %55, i64* %59, align 8
  %60 = getelementptr inbounds i8, i8* %56, i64 16
  %61 = shl nuw nsw i8 %36, 1
  store i8 %61, i8* %60, align 8
  %62 = ptrtoint i8* %56 to i64
  %63 = icmp eq %"class.blink::CalculationExpressionNode"* %33, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %52
  %65 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %33, i64 0, i32 1, i32 0
  %66 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %65, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %66) #5
  %67 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %65, i64 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %65, i64 -2
  %72 = bitcast %"class.base::RefCounted"* %71 to %"class.blink::CalculationExpressionNode"*
  %73 = bitcast %"class.base::RefCounted"* %71 to void (%"class.blink::CalculationExpressionNode"*)***
  %74 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %74, i64 8
  %76 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %75, align 8
  tail call void %76(%"class.blink::CalculationExpressionNode"* nonnull %72) #5
  br label %77

77:                                               ; preds = %42, %52, %64, %70
  %78 = phi i64 [ %51, %42 ], [ %62, %52 ], [ %62, %64 ], [ %62, %70 ]
  %79 = inttoptr i64 %78 to %"class.blink::CalculationValue"*
  br label %80

80:                                               ; preds = %77, %7
  %81 = phi %"class.blink::CalculationValue"* [ %79, %77 ], [ %20, %7 ]
  ret %"class.blink::CalculationValue"* %81
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
