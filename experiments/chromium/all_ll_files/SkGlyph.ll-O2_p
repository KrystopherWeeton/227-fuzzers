; ModuleID = '../../third_party/skia/src/core/SkGlyph.cpp'
source_filename = "../../third_party/skia/src/core/SkGlyph.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkIPoint = type { i32, i32 }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkScalerContext = type { i32 (...)**, %struct.SkScalerContextRec, %class.sk_sp.13, %class.sk_sp.14, %class.sk_sp.15, i8, %class.SkTMaskPreBlend }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }
%class.sk_sp.13 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.sk_sp.14 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.15 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkTMaskPreBlend = type { %class.sk_sp.16, i8*, i8*, i8* }
%class.sk_sp.16 = type { %class.SkTMaskGamma* }
%class.SkTMaskGamma = type { %class.SkRefCnt.base, [8 x [256 x i8]], i8, [3 x i8] }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%"class.SkPath::Iter" = type <{ %struct.SkPoint*, i8*, i8*, float*, %struct.SkPoint, %struct.SkPoint, i8, i8, i8, [5 x i8] }>

$_ZZN12SkArenaAlloc4makeIZNS_4makeIN7SkGlyph8PathDataEJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS4_ENUlPcE_8__invokeESD_ = comdat any

$_ZN15SkPackedGlyphID12kXYFieldMaskE = comdat any

@_ZN15SkPackedGlyphID12kXYFieldMaskE = weak_odr hidden local_unnamed_addr constant %struct.SkIPoint { i32 3, i32 786432 }, comdat, align 4
@.str = private unnamed_addr constant [44 x i8] c"../../third_party/skia/src/core/SkGlyph.cpp\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Unknown mask format.\00", align 1
@switch.table._ZN7SkGlyph10allocImageEP12SkArenaAlloc = private unnamed_addr constant [6 x i64] [i64 1, i64 1, i64 1, i64 4, i64 2, i64 1], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkGlyph4maskEv(%struct.SkMask* noalias nocapture sret, %class.SkGlyph* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %5 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 2
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 3
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %10 = bitcast i32* %9 to i64*
  store i64 -6148914691236517206, i64* %10, align 8
  %11 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 4
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.SkMask* %0 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 3
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 2
  %19 = load i16, i16* %18, align 4
  %20 = sext i16 %19 to i32
  %21 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 0
  %22 = load i16, i16* %21, align 8
  %23 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 1
  %24 = load i16, i16* %23, align 2
  store i32 %17, i32* %3, align 4
  store i32 %20, i32* %4, align 4
  %25 = sext i16 %16 to i64
  %26 = zext i16 %22 to i64
  %27 = add nsw i64 %26, %25
  %28 = icmp slt i64 %27, 2147483647
  %29 = select i1 %28, i64 %27, i64 2147483647
  %30 = icmp sgt i64 %29, -2147483647
  %31 = select i1 %30, i64 %29, i64 -2147483647
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %5, align 4
  %33 = sext i16 %19 to i64
  %34 = zext i16 %24 to i64
  %35 = add nsw i64 %34, %33
  %36 = icmp slt i64 %35, 2147483647
  %37 = select i1 %36, i64 %35, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %6, align 4
  %41 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 8
  %42 = load i8, i8* %41, align 8
  switch i8 %42, label %48 [
    i8 0, label %43
    i8 4, label %47
    i8 1, label %49
    i8 2, label %49
    i8 5, label %49
    i8 3, label %46
  ]

43:                                               ; preds = %2
  %44 = add nuw nsw i64 %26, 7
  %45 = lshr i64 %44, 3
  br label %52

46:                                               ; preds = %2
  br label %49

47:                                               ; preds = %2
  br label %49

48:                                               ; preds = %2
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

49:                                               ; preds = %47, %46, %2, %2, %2
  %50 = phi i64 [ 2, %47 ], [ 4, %46 ], [ 1, %2 ], [ 1, %2 ], [ 1, %2 ]
  %51 = mul nuw nsw i64 %50, %26
  br label %52

52:                                               ; preds = %43, %49
  %53 = phi i64 [ %45, %43 ], [ %51, %49 ]
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %7, align 8
  store i8 %42, i8* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %3 = load i16, i16* %2, align 8
  %4 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %5 = load i8, i8* %4, align 8
  %6 = zext i16 %3 to i64
  switch i8 %5, label %12 [
    i8 0, label %7
    i8 4, label %11
    i8 1, label %13
    i8 2, label %13
    i8 5, label %13
    i8 3, label %10
  ]

7:                                                ; preds = %1
  %8 = add nuw nsw i64 %6, 7
  %9 = lshr i64 %8, 3
  br label %16

10:                                               ; preds = %1
  br label %13

11:                                               ; preds = %1
  br label %13

12:                                               ; preds = %1
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

13:                                               ; preds = %11, %10, %1, %1, %1
  %14 = phi i64 [ 2, %11 ], [ 4, %10 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  %15 = mul nuw nsw i64 %14, %6
  br label %16

16:                                               ; preds = %7, %13
  %17 = phi i64 [ %9, %7 ], [ %15, %13 ]
  ret i64 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkGlyph4maskE7SkPoint(%struct.SkMask* noalias nocapture sret, %class.SkGlyph* nocapture readonly, <2 x float>) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 1
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 2
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 3
  %8 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %9 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 3
  %10 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 4
  %11 = bitcast i8** %10 to i64*
  %12 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %13 = bitcast i32* %12 to i64*
  store i64 -6148914691236517206, i64* %13, align 8
  %14 = load i64, i64* %11, align 8, !noalias !2
  %15 = bitcast %struct.SkMask* %0 to i64*
  store i64 %14, i64* %15, align 8, !alias.scope !2
  %16 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 3
  %17 = load i16, i16* %16, align 2, !noalias !2
  %18 = sext i16 %17 to i32
  %19 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 2
  %20 = load i16, i16* %19, align 4, !noalias !2
  %21 = sext i16 %20 to i32
  %22 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 0
  %23 = load i16, i16* %22, align 8, !noalias !2
  %24 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 1
  %25 = load i16, i16* %24, align 2, !noalias !2
  store i32 %18, i32* %4, align 4, !alias.scope !2
  store i32 %21, i32* %5, align 4, !alias.scope !2
  %26 = sext i16 %17 to i64
  %27 = zext i16 %23 to i64
  %28 = add nsw i64 %27, %26
  %29 = icmp slt i64 %28, 2147483647
  %30 = select i1 %29, i64 %28, i64 2147483647
  %31 = icmp sgt i64 %30, -2147483647
  %32 = select i1 %31, i64 %30, i64 -2147483647
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %6, align 4, !alias.scope !2
  %34 = sext i16 %20 to i64
  %35 = zext i16 %25 to i64
  %36 = add nsw i64 %35, %34
  %37 = icmp slt i64 %36, 2147483647
  %38 = select i1 %37, i64 %36, i64 2147483647
  %39 = icmp sgt i64 %38, -2147483647
  %40 = select i1 %39, i64 %38, i64 -2147483647
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %7, align 4, !alias.scope !2
  %42 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 8
  %43 = load i8, i8* %42, align 8, !noalias !2
  switch i8 %43, label %49 [
    i8 0, label %44
    i8 4, label %48
    i8 1, label %50
    i8 2, label %50
    i8 5, label %50
    i8 3, label %47
  ]

44:                                               ; preds = %3
  %45 = add nuw nsw i64 %27, 7
  %46 = lshr i64 %45, 3
  br label %53

47:                                               ; preds = %3
  br label %50

48:                                               ; preds = %3
  br label %50

49:                                               ; preds = %3
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11, !noalias !2
  unreachable

50:                                               ; preds = %48, %47, %3, %3, %3
  %51 = phi i64 [ 2, %48 ], [ 4, %47 ], [ 1, %3 ], [ 1, %3 ], [ 1, %3 ]
  %52 = mul nuw nsw i64 %51, %27
  br label %53

53:                                               ; preds = %44, %50
  %54 = phi i64 [ %46, %44 ], [ %52, %50 ]
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %8, align 8, !alias.scope !2
  store i8 %43, i8* %9, align 4, !alias.scope !2
  %56 = extractelement <2 x float> %2, i32 0
  %57 = tail call float @llvm.floor.f32(float %56)
  %58 = fcmp olt float %57, 0x41DFFFFFE0000000
  %59 = select i1 %58, float %57, float 0x41DFFFFFE0000000
  %60 = fcmp ogt float %59, 0xC1DFFFFFE0000000
  %61 = select i1 %60, float %59, float 0xC1DFFFFFE0000000
  %62 = fptosi float %61 to i32
  %63 = extractelement <2 x float> %2, i32 1
  %64 = tail call float @llvm.floor.f32(float %63)
  %65 = fcmp olt float %64, 0x41DFFFFFE0000000
  %66 = select i1 %65, float %64, float 0x41DFFFFFE0000000
  %67 = fcmp ogt float %66, 0xC1DFFFFFE0000000
  %68 = select i1 %67, float %66, float 0xC1DFFFFFE0000000
  %69 = fptosi float %68 to i32
  %70 = sext i16 %17 to i64
  %71 = sext i32 %62 to i64
  %72 = add nsw i64 %70, %71
  %73 = icmp slt i64 %72, 2147483647
  %74 = select i1 %73, i64 %72, i64 2147483647
  %75 = icmp sgt i64 %74, -2147483647
  %76 = select i1 %75, i64 %74, i64 -2147483647
  %77 = trunc i64 %76 to i32
  store i32 %77, i32* %4, align 4
  %78 = sext i16 %20 to i64
  %79 = sext i32 %69 to i64
  %80 = add nsw i64 %78, %79
  %81 = icmp slt i64 %80, 2147483647
  %82 = select i1 %81, i64 %80, i64 2147483647
  %83 = icmp sgt i64 %82, -2147483647
  %84 = select i1 %83, i64 %82, i64 -2147483647
  %85 = trunc i64 %84 to i32
  store i32 %85, i32* %5, align 4
  %86 = add nsw i64 %32, %71
  %87 = icmp slt i64 %86, 2147483647
  %88 = select i1 %87, i64 %86, i64 2147483647
  %89 = icmp sgt i64 %88, -2147483647
  %90 = select i1 %89, i64 %88, i64 -2147483647
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %6, align 4
  %92 = add nsw i64 %40, %79
  %93 = icmp slt i64 %92, 2147483647
  %94 = select i1 %93, i64 %92, i64 2147483647
  %95 = icmp sgt i64 %94, -2147483647
  %96 = select i1 %95, i64 %94, i64 -2147483647
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7SkGlyph11zeroMetricsEv(%class.SkGlyph* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 6
  store float 0.000000e+00, float* %2, align 8
  %3 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 7
  store float 0.000000e+00, float* %3, align 4
  %4 = bitcast %class.SkGlyph* %0 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7SkGlyph15formatAlignmentEv(%class.SkGlyph* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 8
  %4 = icmp ult i8 %3, 6
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

6:                                                ; preds = %1
  %7 = sext i8 %3 to i64
  %8 = getelementptr inbounds [6 x i64], [6 x i64]* @switch.table._ZN7SkGlyph10allocImageEP12SkArenaAlloc, i64 0, i64 %7
  %9 = load i64, i64* %8, align 8
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN7SkGlyph10allocImageEP12SkArenaAlloc(%class.SkGlyph* nocapture, %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 8
  %5 = add i16 %4, -1
  %6 = icmp ugt i16 %5, 8190
  %7 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %8 = load i8, i8* %7, align 8
  br i1 %6, label %29, label %9

9:                                                ; preds = %2
  %10 = zext i16 %4 to i64
  switch i8 %8, label %16 [
    i8 0, label %11
    i8 4, label %15
    i8 1, label %17
    i8 2, label %17
    i8 5, label %17
    i8 3, label %14
  ]

11:                                               ; preds = %9
  %12 = add nuw nsw i64 %10, 7
  %13 = lshr i64 %12, 3
  br label %20

14:                                               ; preds = %9
  br label %17

15:                                               ; preds = %9
  br label %17

16:                                               ; preds = %9
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

17:                                               ; preds = %15, %14, %9, %9, %9
  %18 = phi i64 [ 2, %15 ], [ 4, %14 ], [ 1, %9 ], [ 1, %9 ], [ 1, %9 ]
  %19 = mul nuw nsw i64 %18, %10
  br label %20

20:                                               ; preds = %17, %11
  %21 = phi i64 [ %13, %11 ], [ %19, %17 ]
  %22 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i64
  %25 = mul nsw i64 %21, %24
  %26 = icmp eq i8 %8, 2
  %27 = mul nsw i64 %25, 3
  %28 = select i1 %26, i64 %27, i64 %25
  br label %29

29:                                               ; preds = %2, %20
  %30 = phi i64 [ %28, %20 ], [ 0, %2 ]
  %31 = icmp ult i8 %8, 6
  br i1 %31, label %33, label %32

32:                                               ; preds = %29
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

33:                                               ; preds = %29
  %34 = sext i8 %8 to i64
  %35 = getelementptr inbounds [6 x i64], [6 x i64]* @switch.table._ZN7SkGlyph10allocImageEP12SkArenaAlloc, i64 0, i64 %34
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %30, 4294967296
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  tail call void @abort() #11
  unreachable

39:                                               ; preds = %33
  %40 = add nuw nsw i64 %36, 4294967295
  %41 = and i64 %40, 4294967295
  %42 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 1
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 0, %44
  %46 = and i64 %41, %45
  %47 = and i64 %30, 4294967295
  %48 = add nuw nsw i64 %46, %47
  %49 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 2
  %50 = bitcast i8** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %51, %44
  %53 = icmp ugt i64 %48, %52
  br i1 %53, label %54, label %60

54:                                               ; preds = %39
  %55 = trunc i64 %30 to i32
  %56 = trunc i64 %36 to i32
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %1, i32 %55, i32 %56) #12
  %57 = load i64, i64* %43, align 8
  %58 = sub i64 0, %57
  %59 = and i64 %41, %58
  br label %60

60:                                               ; preds = %39, %54
  %61 = phi i64 [ %57, %54 ], [ %44, %39 ]
  %62 = phi i64 [ %59, %54 ], [ %46, %39 ]
  %63 = inttoptr i64 %61 to i8*
  %64 = getelementptr inbounds i8, i8* %63, i64 %62
  %65 = getelementptr inbounds i8, i8* %64, i64 %30
  store i8* %65, i8** %42, align 8
  %66 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 4
  store i8* %64, i8** %66, align 8
  ret i64 %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7SkGlyph9imageSizeEv(%class.SkGlyph* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %3 = load i16, i16* %2, align 8
  %4 = add i16 %3, -1
  %5 = icmp ugt i16 %4, 8190
  br i1 %5, label %28, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %8 = load i8, i8* %7, align 8
  %9 = zext i16 %3 to i64
  switch i8 %8, label %15 [
    i8 0, label %10
    i8 4, label %14
    i8 1, label %16
    i8 2, label %16
    i8 5, label %16
    i8 3, label %13
  ]

10:                                               ; preds = %6
  %11 = add nuw nsw i64 %9, 7
  %12 = lshr i64 %11, 3
  br label %19

13:                                               ; preds = %6
  br label %16

14:                                               ; preds = %6
  br label %16

15:                                               ; preds = %6
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

16:                                               ; preds = %14, %13, %6, %6, %6
  %17 = phi i64 [ 2, %14 ], [ 4, %13 ], [ 1, %6 ], [ 1, %6 ], [ 1, %6 ]
  %18 = mul nuw nsw i64 %17, %9
  br label %19

19:                                               ; preds = %10, %16
  %20 = phi i64 [ %12, %10 ], [ %18, %16 ]
  %21 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i64
  %24 = mul nsw i64 %20, %23
  %25 = icmp eq i8 %8, 2
  %26 = mul nsw i64 %24, 3
  %27 = select i1 %25, i64 %26, i64 %24
  br label %28

28:                                               ; preds = %1, %19
  %29 = phi i64 [ %27, %19 ], [ 0, %1 ]
  ret i64 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkGlyph8setImageEP12SkArenaAllocP15SkScalerContext(%class.SkGlyph*, %class.SkArenaAlloc*, %class.SkScalerContext*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %9 = load i16, i16* %8, align 8
  %10 = add i16 %9, -1
  %11 = icmp ugt i16 %10, 8190
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = tail call i64 @_ZN7SkGlyph10allocImageEP12SkArenaAlloc(%class.SkGlyph* %0, %class.SkArenaAlloc* %1)
  tail call void @_ZN15SkScalerContext8getImageERK7SkGlyph(%class.SkScalerContext* %2, %class.SkGlyph* dereferenceable(40) %0) #12
  br label %14

14:                                               ; preds = %3, %7, %12
  %15 = phi i1 [ true, %12 ], [ false, %7 ], [ false, %3 ]
  ret i1 %15
}

declare void @_ZN15SkScalerContext8getImageERK7SkGlyph(%class.SkScalerContext*, %class.SkGlyph* dereferenceable(40)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkGlyph8setImageEP12SkArenaAllocPKv(%class.SkGlyph* nocapture, %class.SkArenaAlloc*, i8* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %42

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %9 = load i16, i16* %8, align 8
  %10 = add i16 %9, -1
  %11 = icmp ugt i16 %10, 8190
  br i1 %11, label %42, label %12

12:                                               ; preds = %7
  %13 = tail call i64 @_ZN7SkGlyph10allocImageEP12SkArenaAlloc(%class.SkGlyph* %0, %class.SkArenaAlloc* %1)
  %14 = load i8*, i8** %4, align 8
  %15 = load i16, i16* %8, align 8
  %16 = add i16 %15, -1
  %17 = icmp ugt i16 %16, 8190
  br i1 %17, label %40, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %20 = load i8, i8* %19, align 8
  %21 = zext i16 %15 to i64
  switch i8 %20, label %27 [
    i8 0, label %22
    i8 4, label %26
    i8 1, label %28
    i8 2, label %28
    i8 5, label %28
    i8 3, label %25
  ]

22:                                               ; preds = %18
  %23 = add nuw nsw i64 %21, 7
  %24 = lshr i64 %23, 3
  br label %31

25:                                               ; preds = %18
  br label %28

26:                                               ; preds = %18
  br label %28

27:                                               ; preds = %18
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

28:                                               ; preds = %26, %25, %18, %18, %18
  %29 = phi i64 [ 2, %26 ], [ 4, %25 ], [ 1, %18 ], [ 1, %18 ], [ 1, %18 ]
  %30 = mul nuw nsw i64 %29, %21
  br label %31

31:                                               ; preds = %28, %22
  %32 = phi i64 [ %24, %22 ], [ %30, %28 ]
  %33 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i64
  %36 = mul nsw i64 %32, %35
  %37 = icmp eq i8 %20, 2
  %38 = mul nsw i64 %36, 3
  %39 = select i1 %37, i64 %38, i64 %36
  br label %40

40:                                               ; preds = %12, %31
  %41 = phi i64 [ %39, %31 ], [ 0, %12 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 %41, i1 false)
  br label %42

42:                                               ; preds = %3, %7, %40
  %43 = phi i1 [ true, %40 ], [ false, %7 ], [ false, %3 ]
  ret i1 %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN7SkGlyph18setMetricsAndImageEP12SkArenaAllocRKS_(%class.SkGlyph* nocapture, %class.SkArenaAlloc*, %class.SkGlyph* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %93

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 6
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 6
  %12 = bitcast float* %11 to i32*
  store i32 %10, i32* %12, align 8
  %13 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 7
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 7
  %17 = bitcast float* %16 to i32*
  store i32 %15, i32* %17, align 4
  %18 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 0
  %19 = load i16, i16* %18, align 8
  %20 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  store i16 %19, i16* %20, align 8
  %21 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  store i16 %22, i16* %23, align 2
  %24 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 2
  %25 = load i16, i16* %24, align 4
  %26 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 2
  store i16 %25, i16* %26, align 4
  %27 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 3
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 3
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 9
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 8
  %34 = load i8, i8* %33, align 8
  %35 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  store i8 %34, i8* %35, align 8
  %36 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 4
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, null
  %39 = add i16 %19, -1
  %40 = icmp ugt i16 %39, 8190
  %41 = or i1 %40, %38
  br i1 %41, label %93, label %42

42:                                               ; preds = %7
  %43 = tail call i64 @_ZN7SkGlyph10allocImageEP12SkArenaAlloc(%class.SkGlyph* %0, %class.SkArenaAlloc* %1) #12
  %44 = load i8*, i8** %4, align 8
  %45 = load i16, i16* %20, align 8
  %46 = add i16 %45, -1
  %47 = icmp ugt i16 %46, 8190
  br i1 %47, label %68, label %48

48:                                               ; preds = %42
  %49 = load i8, i8* %35, align 8
  %50 = zext i16 %45 to i64
  switch i8 %49, label %56 [
    i8 0, label %51
    i8 4, label %55
    i8 1, label %57
    i8 2, label %57
    i8 5, label %57
    i8 3, label %54
  ]

51:                                               ; preds = %48
  %52 = add nuw nsw i64 %50, 7
  %53 = lshr i64 %52, 3
  br label %60

54:                                               ; preds = %48
  br label %57

55:                                               ; preds = %48
  br label %57

56:                                               ; preds = %48
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

57:                                               ; preds = %55, %54, %48, %48, %48
  %58 = phi i64 [ 2, %55 ], [ 4, %54 ], [ 1, %48 ], [ 1, %48 ], [ 1, %48 ]
  %59 = mul nuw nsw i64 %58, %50
  br label %60

60:                                               ; preds = %57, %51
  %61 = phi i64 [ %53, %51 ], [ %59, %57 ]
  %62 = load i16, i16* %23, align 2
  %63 = zext i16 %62 to i64
  %64 = mul nsw i64 %61, %63
  %65 = icmp eq i8 %49, 2
  %66 = mul nsw i64 %64, 3
  %67 = select i1 %65, i64 %66, i64 %64
  br label %68

68:                                               ; preds = %42, %60
  %69 = phi i64 [ %67, %60 ], [ 0, %42 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* nonnull align 1 %37, i64 %69, i1 false) #12
  %70 = load i16, i16* %20, align 8
  %71 = add i16 %70, -1
  %72 = icmp ugt i16 %71, 8190
  br i1 %72, label %93, label %73

73:                                               ; preds = %68
  %74 = load i8, i8* %35, align 8
  %75 = zext i16 %70 to i64
  switch i8 %74, label %81 [
    i8 0, label %76
    i8 4, label %80
    i8 1, label %82
    i8 2, label %82
    i8 5, label %82
    i8 3, label %79
  ]

76:                                               ; preds = %73
  %77 = add nuw nsw i64 %75, 7
  %78 = lshr i64 %77, 3
  br label %85

79:                                               ; preds = %73
  br label %82

80:                                               ; preds = %73
  br label %82

81:                                               ; preds = %73
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

82:                                               ; preds = %80, %79, %73, %73, %73
  %83 = phi i64 [ 2, %80 ], [ 4, %79 ], [ 1, %73 ], [ 1, %73 ], [ 1, %73 ]
  %84 = mul nuw nsw i64 %83, %75
  br label %85

85:                                               ; preds = %82, %76
  %86 = phi i64 [ %78, %76 ], [ %84, %82 ]
  %87 = load i16, i16* %23, align 2
  %88 = zext i16 %87 to i64
  %89 = mul nsw i64 %86, %88
  %90 = icmp eq i8 %74, 2
  %91 = mul nsw i64 %89, 3
  %92 = select i1 %90, i64 %91, i64 %89
  br label %93

93:                                               ; preds = %85, %68, %3, %7
  %94 = phi i64 [ 0, %7 ], [ 0, %3 ], [ %92, %85 ], [ 0, %68 ]
  ret i64 %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7SkGlyph19rowBytesUsingFormatEN6SkMask6FormatE(%class.SkGlyph* nocapture readonly, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %4 = load i16, i16* %3, align 8
  %5 = zext i16 %4 to i64
  switch i8 %1, label %11 [
    i8 0, label %6
    i8 4, label %10
    i8 1, label %12
    i8 2, label %12
    i8 5, label %12
    i8 3, label %9
  ]

6:                                                ; preds = %2
  %7 = add nuw nsw i64 %5, 7
  %8 = lshr i64 %7, 3
  br label %15

9:                                                ; preds = %2
  br label %12

10:                                               ; preds = %2
  br label %12

11:                                               ; preds = %2
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0)) #11
  unreachable

12:                                               ; preds = %10, %9, %2, %2, %2
  %13 = phi i64 [ 2, %10 ], [ 4, %9 ], [ 1, %2 ], [ 1, %2 ], [ 1, %2 ]
  %14 = mul nuw nsw i64 %13, %5
  br label %15

15:                                               ; preds = %6, %12
  %16 = phi i64 [ %8, %6 ], [ %14, %12 ]
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkGlyph11installPathEP12SkArenaAllocPK6SkPath(%class.SkGlyph* nocapture, %class.SkArenaAlloc*, %class.SkPath*) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %1, i32 41, i32 8) #12
  %5 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = sub i64 %8, %7
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds i8, i8* %4, i64 32
  store i8* %11, i8** %5, align 8
  tail call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %1, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeIN7SkGlyph8PathDataEJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS4_ENUlPcE_8__invokeESD_, i32 %10) #12
  %12 = getelementptr inbounds i8, i8* %4, i64 8
  %13 = bitcast i8* %12 to %class.SkPath*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false) #12
  tail call void @_ZN6SkPathC1Ev(%class.SkPath* %13) #12
  %14 = getelementptr inbounds i8, i8* %4, i64 24
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 5
  %16 = bitcast %"struct.SkGlyph::PathData"** %15 to i8**
  store i8* %4, i8** %16, align 8
  %17 = icmp eq %class.SkPath* %2, null
  br i1 %17, label %42, label %18

18:                                               ; preds = %3
  %19 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %13, %class.SkPath* nonnull dereferenceable(16) %2) #12
  %20 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %15, align 8
  %21 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %20, i64 0, i32 1, i32 0, i32 0
  %22 = load %class.SkPathRef*, %class.SkPathRef** %21, align 8
  %23 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %22, i64 0, i32 9
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %22, i64 0, i32 1
  %28 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %22, i64 0, i32 3, i32 0
  %29 = load %struct.SkPoint*, %struct.SkPoint** %28, align 8
  %30 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %22, i64 0, i32 3, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %27, %struct.SkPoint* %29, i32 %31) #12
  %33 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %22, i64 0, i32 10
  %34 = zext i1 %32 to i8
  store i8 %34, i8* %33, align 1
  store i8 0, i8* %23, align 8
  %35 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %15, align 8
  br label %36

36:                                               ; preds = %18, %26
  %37 = phi %"struct.SkGlyph::PathData"* [ %20, %18 ], [ %35, %26 ]
  %38 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %37, i64 0, i32 1
  %39 = tail call i32 @_ZNK6SkPath15getGenerationIDEv(%class.SkPath* %38) #12
  %40 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %15, align 8
  %41 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %40, i64 0, i32 2
  store i8 1, i8* %41, align 8
  br label %42

42:                                               ; preds = %3, %36
  ret void
}

declare dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #5

declare i32 @_ZNK6SkPath15getGenerationIDEv(%class.SkPath*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkGlyph7setPathEP12SkArenaAllocP15SkScalerContext(%class.SkGlyph* nocapture, %class.SkArenaAlloc*, %class.SkScalerContext*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPath, align 8
  %5 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 5
  %6 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %5, align 8
  %7 = icmp eq %"struct.SkGlyph::PathData"* %6, null
  br i1 %7, label %8, label %38

8:                                                ; preds = %3
  %9 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #12
  %11 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 10, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = call zeroext i1 @_ZN15SkScalerContext7getPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext* %2, i32 %12, %class.SkPath* nonnull %4) #12
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  call void @_ZN7SkGlyph11installPathEP12SkArenaAllocPK6SkPath(%class.SkGlyph* %0, %class.SkArenaAlloc* %1, %class.SkPath* nonnull %4)
  %15 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %5, align 8
  br label %30

16:                                               ; preds = %8
  %17 = call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %1, i32 41, i32 8) #12
  %18 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 1
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = ptrtoint i8* %17 to i64
  %22 = sub i64 %21, %20
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds i8, i8* %17, i64 32
  store i8* %24, i8** %18, align 8
  call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %1, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeIN7SkGlyph8PathDataEJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS4_ENUlPcE_8__invokeESD_, i32 %23) #12
  %25 = getelementptr inbounds i8, i8* %17, i64 8
  %26 = bitcast i8* %25 to %class.SkPath*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 32, i1 false) #12
  call void @_ZN6SkPathC1Ev(%class.SkPath* %26) #12
  %27 = getelementptr inbounds i8, i8* %17, i64 24
  store i8 0, i8* %27, align 8
  %28 = bitcast %"struct.SkGlyph::PathData"** %5 to i8**
  store i8* %17, i8** %28, align 8
  %29 = bitcast i8* %17 to %"struct.SkGlyph::PathData"*
  br label %30

30:                                               ; preds = %16, %14
  %31 = phi %"struct.SkGlyph::PathData"* [ %29, %16 ], [ %15, %14 ]
  %32 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %31, i64 0, i32 2
  %33 = load i8, i8* %32, align 8, !range !5
  %34 = icmp ne i8 %33, 0
  %35 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %31, i64 0, i32 1
  %36 = icmp ne %class.SkPath* %35, null
  %37 = and i1 %36, %34
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  br label %38

38:                                               ; preds = %3, %30
  %39 = phi i1 [ %37, %30 ], [ false, %3 ]
  ret i1 %39
}

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #5

declare zeroext i1 @_ZN15SkScalerContext7getPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext*, i32, %class.SkPath*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkPath* @_ZNK7SkGlyph4pathEv(%class.SkGlyph* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 5
  %3 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %2, align 8
  %4 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %3, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !5
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %3, i64 0, i32 1
  %8 = select i1 %6, %class.SkPath* null, %class.SkPath* %7
  ret %class.SkPath* %8
}

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkGlyph7setPathEP12SkArenaAllocPK6SkPath(%class.SkGlyph* nocapture, %class.SkArenaAlloc*, %class.SkPath*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 5
  %5 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %4, align 8
  %6 = icmp eq %"struct.SkGlyph::PathData"* %5, null
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  tail call void @_ZN7SkGlyph11installPathEP12SkArenaAllocPK6SkPath(%class.SkGlyph* %0, %class.SkArenaAlloc* %1, %class.SkPath* %2)
  %8 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %4, align 8
  %9 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %8, i64 0, i32 2
  %10 = load i8, i8* %9, align 8, !range !5
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %8, i64 0, i32 1
  %13 = icmp ne %class.SkPath* %12, null
  %14 = and i1 %13, %11
  br label %15

15:                                               ; preds = %3, %7
  %16 = phi i1 [ %14, %7 ], [ false, %3 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkGlyph16ensureInterceptsEPKfffPfPiP12SkArenaAlloc(%class.SkGlyph*, float* nocapture readonly, float, float, float*, i32* nocapture, %class.SkArenaAlloc*) local_unnamed_addr #1 align 2 {
  %8 = alloca %struct.SkDQuad, align 16
  %9 = alloca %struct.SkDQuad, align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca %struct.SkDCubic, align 16
  %12 = alloca %struct.SkDCubic, align 16
  %13 = alloca [3 x double], align 16
  %14 = alloca i32, align 4
  %15 = alloca [4 x %struct.SkPoint], align 16
  %16 = alloca %"class.SkPath::Iter", align 8
  %17 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 5
  %18 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %17, align 8
  %19 = icmp eq %"struct.SkGlyph::PathData"* %18, null
  br i1 %19, label %62, label %20

20:                                               ; preds = %7
  %21 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %18, i64 0, i32 0
  %22 = getelementptr inbounds float, float* %1, i64 1
  %23 = load %"struct.SkGlyph::Intercept"*, %"struct.SkGlyph::Intercept"** %21, align 8
  %24 = icmp eq %"struct.SkGlyph::Intercept"* %23, null
  br i1 %24, label %62, label %25

25:                                               ; preds = %20
  %26 = load float, float* %1, align 4
  br label %27

27:                                               ; preds = %37, %25
  %28 = phi %"struct.SkGlyph::Intercept"* [ %23, %25 ], [ %39, %37 ]
  %29 = getelementptr inbounds %"struct.SkGlyph::Intercept", %"struct.SkGlyph::Intercept"* %28, i64 0, i32 1, i64 0
  %30 = load float, float* %29, align 8
  %31 = fcmp oeq float %26, %30
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = load float, float* %22, align 4
  %34 = getelementptr inbounds %"struct.SkGlyph::Intercept", %"struct.SkGlyph::Intercept"* %28, i64 0, i32 1, i64 1
  %35 = load float, float* %34, align 4
  %36 = fcmp oeq float %33, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %32, %27
  %38 = getelementptr inbounds %"struct.SkGlyph::Intercept", %"struct.SkGlyph::Intercept"* %28, i64 0, i32 0
  %39 = load %"struct.SkGlyph::Intercept"*, %"struct.SkGlyph::Intercept"** %38, align 8
  %40 = icmp eq %"struct.SkGlyph::Intercept"* %39, null
  br i1 %40, label %62, label %27

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"struct.SkGlyph::Intercept", %"struct.SkGlyph::Intercept"* %28, i64 0, i32 2, i64 0
  %43 = load float, float* %42, align 8
  %44 = getelementptr inbounds %"struct.SkGlyph::Intercept", %"struct.SkGlyph::Intercept"* %28, i64 0, i32 2, i64 1
  %45 = load float, float* %44, align 4
  %46 = fcmp olt float %43, %45
  br i1 %46, label %47, label %982

47:                                               ; preds = %41
  %48 = icmp eq float* %4, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %47
  %50 = load i32, i32* %5, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %4, i64 %51
  %53 = fmul float %43, %2
  %54 = fadd float %53, %3
  %55 = getelementptr inbounds float, float* %52, i64 1
  store float %54, float* %52, align 4
  %56 = load float, float* %44, align 4
  %57 = fmul float %56, %2
  %58 = fadd float %57, %3
  store float %58, float* %55, align 4
  br label %59

59:                                               ; preds = %47, %49
  %60 = load i32, i32* %5, align 4
  %61 = add nsw i32 %60, 2
  store i32 %61, i32* %5, align 4
  br label %982

62:                                               ; preds = %37, %7, %20
  %63 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %6, i64 0, i32 1
  %64 = bitcast i8** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 0, %65
  %67 = and i64 %66, 7
  %68 = or i64 %67, 24
  %69 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %6, i64 0, i32 2
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %71, %65
  %73 = icmp ugt i64 %68, %72
  br i1 %73, label %74, label %78

74:                                               ; preds = %62
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %6, i32 24, i32 8) #12
  %75 = load i64, i64* %64, align 8
  %76 = sub i64 0, %75
  %77 = and i64 %76, 7
  br label %78

78:                                               ; preds = %62, %74
  %79 = phi i64 [ %75, %74 ], [ %65, %62 ]
  %80 = phi i64 [ %77, %74 ], [ %67, %62 ]
  %81 = inttoptr i64 %79 to i8*
  %82 = getelementptr inbounds i8, i8* %81, i64 %80
  %83 = getelementptr inbounds i8, i8* %82, i64 24
  store i8* %83, i8** %63, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 24, i1 false) #12
  %84 = bitcast %"struct.SkGlyph::PathData"** %17 to i64**
  %85 = load i64*, i64** %84, align 8
  %86 = load i64, i64* %85, align 8
  %87 = bitcast i8* %82 to i64*
  store i64 %86, i64* %87, align 8
  %88 = bitcast float* %1 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds i8, i8* %82, i64 8
  %91 = bitcast i8* %90 to i32*
  store i32 %89, i32* %91, align 8
  %92 = getelementptr inbounds float, float* %1, i64 1
  %93 = bitcast float* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds i8, i8* %82, i64 12
  %96 = bitcast i8* %95 to i32*
  store i32 %94, i32* %96, align 4
  %97 = getelementptr inbounds i8, i8* %82, i64 16
  %98 = bitcast i8* %97 to float*
  store float 0x47EFFFFFE0000000, float* %98, align 8
  %99 = getelementptr inbounds i8, i8* %82, i64 20
  %100 = bitcast i8* %99 to float*
  store float 0xC7EFFFFFE0000000, float* %100, align 4
  %101 = bitcast %"struct.SkGlyph::PathData"** %17 to i8***
  %102 = load i8**, i8*** %101, align 8
  store i8* %82, i8** %102, align 8
  %103 = load %"struct.SkGlyph::PathData"*, %"struct.SkGlyph::PathData"** %17, align 8
  %104 = getelementptr inbounds %"struct.SkGlyph::PathData", %"struct.SkGlyph::PathData"* %103, i64 0, i32 1
  %105 = getelementptr inbounds %class.SkPath, %class.SkPath* %104, i64 0, i32 0, i32 0
  %106 = load %class.SkPathRef*, %class.SkPathRef** %105, align 8
  %107 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 9
  %108 = load i8, i8* %107, align 8
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %119, label %110

110:                                              ; preds = %78
  %111 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 1
  %112 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 3, i32 0
  %113 = load %struct.SkPoint*, %struct.SkPoint** %112, align 8
  %114 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 3, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %111, %struct.SkPoint* %113, i32 %115) #12
  %117 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 10
  %118 = zext i1 %116 to i8
  store i8 %118, i8* %117, align 1
  store i8 0, i8* %107, align 8
  br label %119

119:                                              ; preds = %78, %110
  %120 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 1, i32 3
  %121 = load float, float* %120, align 4
  %122 = load float, float* %1, align 4
  %123 = fcmp olt float %121, %122
  br i1 %123, label %982, label %124

124:                                              ; preds = %119
  %125 = load float, float* %92, align 4
  %126 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %106, i64 0, i32 1, i32 1
  %127 = load float, float* %126, align 4
  %128 = fcmp olt float %125, %127
  br i1 %128, label %982, label %129

129:                                              ; preds = %124
  %130 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %130)
  store i32 2139095039, i32* %14, align 4
  %131 = bitcast [4 x %struct.SkPoint]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %131) #12
  %132 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 0
  %133 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 0, i32 0
  %134 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 0, i32 1
  %135 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 1, i32 0
  %136 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 1, i32 1
  %137 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 2, i32 0
  %138 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 2, i32 1
  %139 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 3, i32 0
  %140 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %15, i64 0, i64 3, i32 1
  %141 = bitcast %"class.SkPath::Iter"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %131, i8 -1, i64 32, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %141) #12
  %142 = getelementptr inbounds %"class.SkPath::Iter", %"class.SkPath::Iter"* %16, i64 0, i32 4, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %141, i8 -86, i64 32, i1 false) #12
  %143 = getelementptr inbounds %"class.SkPath::Iter", %"class.SkPath::Iter"* %16, i64 0, i32 6
  %144 = bitcast float* %142 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %144, i8 -1, i64 16, i1 false) #12
  %145 = bitcast i8* %143 to i64*
  store i64 -6148914691236517206, i64* %145, align 8
  call void @_ZN6SkPath4IterC1ERKS_b(%"class.SkPath::Iter"* nonnull %16, %class.SkPath* dereferenceable(16) %104, i1 zeroext false) #12
  %146 = bitcast %struct.SkDQuad* %8 to i8*
  %147 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %8, i64 0, i32 0, i64 1, i32 0
  %148 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %8, i64 0, i32 0, i64 2, i32 0
  %149 = bitcast [2 x double]* %10 to i8*
  %150 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %151 = fpext float %122 to double
  %152 = bitcast %struct.SkDQuad* %9 to i8*
  %153 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %9, i64 0, i32 0, i64 1, i32 0
  %154 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %9, i64 0, i32 0, i64 2, i32 0
  %155 = fpext float %125 to double
  %156 = bitcast %struct.SkDCubic* %11 to i8*
  %157 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %11, i64 0, i32 0, i64 1, i32 0
  %158 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %11, i64 0, i32 0, i64 2, i32 0
  %159 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %11, i64 0, i32 0, i64 3, i32 0
  %160 = bitcast [3 x double]* %13 to i8*
  %161 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 0
  %162 = bitcast %struct.SkDCubic* %12 to i8*
  %163 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %12, i64 0, i32 0, i64 1, i32 0
  %164 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %12, i64 0, i32 0, i64 2, i32 0
  %165 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %12, i64 0, i32 0, i64 3, i32 0
  %166 = bitcast i32* %14 to float*
  %167 = bitcast %struct.SkDQuad* %8 to <2 x double>*
  %168 = bitcast double* %147 to <2 x double>*
  %169 = bitcast double* %148 to <2 x double>*
  %170 = bitcast [4 x %struct.SkPoint]* %15 to <2 x float>*
  %171 = bitcast %struct.SkDQuad* %9 to <2 x double>*
  %172 = bitcast float* %135 to <2 x float>*
  %173 = bitcast double* %153 to <2 x double>*
  %174 = bitcast float* %137 to <2 x float>*
  %175 = bitcast double* %154 to <2 x double>*
  %176 = bitcast %struct.SkDCubic* %11 to <2 x double>*
  %177 = bitcast double* %157 to <2 x double>*
  %178 = bitcast double* %158 to <2 x double>*
  %179 = bitcast double* %159 to <2 x double>*
  %180 = bitcast [4 x %struct.SkPoint]* %15 to <2 x float>*
  %181 = bitcast %struct.SkDCubic* %12 to <2 x double>*
  %182 = bitcast float* %135 to <2 x float>*
  %183 = bitcast double* %163 to <2 x double>*
  %184 = bitcast float* %137 to <2 x float>*
  %185 = bitcast double* %164 to <2 x double>*
  %186 = bitcast float* %139 to <2 x float>*
  %187 = bitcast double* %165 to <2 x double>*
  br label %188

188:                                              ; preds = %927, %129
  %189 = phi i32 [ -8388609, %129 ], [ %928, %927 ]
  %190 = phi i32 [ -8388609, %129 ], [ %929, %927 ]
  %191 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %930, %927 ]
  %192 = phi i32 [ -8388609, %129 ], [ %931, %927 ]
  %193 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %932, %927 ]
  %194 = phi i32 [ -8388609, %129 ], [ %933, %927 ]
  %195 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %934, %927 ]
  %196 = phi i32 [ -8388609, %129 ], [ %935, %927 ]
  %197 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %936, %927 ]
  %198 = phi i32 [ -8388609, %129 ], [ %937, %927 ]
  %199 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %938, %927 ]
  %200 = phi i32 [ -8388609, %129 ], [ %939, %927 ]
  %201 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %940, %927 ]
  %202 = phi i32 [ -8388609, %129 ], [ %941, %927 ]
  %203 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %942, %927 ]
  %204 = phi i32 [ -8388609, %129 ], [ %943, %927 ]
  %205 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %944, %927 ]
  %206 = phi i32 [ -8388609, %129 ], [ %945, %927 ]
  %207 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %946, %927 ]
  %208 = phi i32 [ -8388609, %129 ], [ %947, %927 ]
  %209 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %948, %927 ]
  %210 = phi i32 [ -8388609, %129 ], [ %949, %927 ]
  %211 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %950, %927 ]
  %212 = phi i32 [ -8388609, %129 ], [ %951, %927 ]
  %213 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %952, %927 ]
  %214 = phi i32 [ -8388609, %129 ], [ %953, %927 ]
  %215 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %954, %927 ]
  %216 = phi i32 [ -8388609, %129 ], [ %955, %927 ]
  %217 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %956, %927 ]
  %218 = phi i32 [ -8388609, %129 ], [ %957, %927 ]
  %219 = phi float [ 0xC7EFFFFFE0000000, %129 ], [ %958, %927 ]
  %220 = call i32 @_ZN6SkPath4Iter4nextEP7SkPoint(%"class.SkPath::Iter"* nonnull %16, %struct.SkPoint* nonnull %132) #12
  switch i32 %220, label %927 [
    i32 6, label %959
    i32 4, label %563
    i32 1, label %221
    i32 2, label %372
  ]

221:                                              ; preds = %188
  %222 = load float, float* %134, align 4
  %223 = fsub float %122, %222
  %224 = load float, float* %136, align 4
  %225 = fsub float %224, %222
  %226 = fdiv float %223, %225
  %227 = fcmp oge float %226, 0.000000e+00
  %228 = fcmp olt float %226, 1.000000e+00
  %229 = and i1 %227, %228
  br i1 %229, label %230, label %243

230:                                              ; preds = %221
  %231 = load float, float* %133, align 16
  %232 = load float, float* %135, align 8
  %233 = fsub float %232, %231
  %234 = fmul float %226, %233
  %235 = fadd float %231, %234
  %236 = load float, float* %166, align 4
  %237 = fcmp ogt float %236, %235
  %238 = select i1 %237, float %235, float %236
  store float %238, float* %166, align 4
  %239 = fcmp olt float %209, %235
  %240 = bitcast float %235 to i32
  %241 = select i1 %239, i32 %240, i32 %208
  %242 = bitcast i32 %241 to float
  br label %243

243:                                              ; preds = %230, %221
  %244 = phi i32 [ %241, %230 ], [ %189, %221 ]
  %245 = phi i32 [ %241, %230 ], [ %190, %221 ]
  %246 = phi float [ %242, %230 ], [ %191, %221 ]
  %247 = phi i32 [ %241, %230 ], [ %192, %221 ]
  %248 = phi float [ %242, %230 ], [ %193, %221 ]
  %249 = phi i32 [ %241, %230 ], [ %194, %221 ]
  %250 = phi float [ %242, %230 ], [ %195, %221 ]
  %251 = phi i32 [ %241, %230 ], [ %196, %221 ]
  %252 = phi float [ %242, %230 ], [ %197, %221 ]
  %253 = phi i32 [ %241, %230 ], [ %198, %221 ]
  %254 = phi float [ %242, %230 ], [ %199, %221 ]
  %255 = phi i32 [ %241, %230 ], [ %200, %221 ]
  %256 = phi float [ %242, %230 ], [ %201, %221 ]
  %257 = phi i32 [ %241, %230 ], [ %202, %221 ]
  %258 = phi float [ %242, %230 ], [ %203, %221 ]
  %259 = phi i32 [ %241, %230 ], [ %204, %221 ]
  %260 = phi float [ %242, %230 ], [ %205, %221 ]
  %261 = phi i32 [ %241, %230 ], [ %206, %221 ]
  %262 = phi float [ %242, %230 ], [ %207, %221 ]
  %263 = phi i32 [ %241, %230 ], [ %208, %221 ]
  %264 = phi float [ %242, %230 ], [ %209, %221 ]
  %265 = phi i32 [ %241, %230 ], [ %210, %221 ]
  %266 = phi float [ %242, %230 ], [ %211, %221 ]
  %267 = phi i32 [ %241, %230 ], [ %212, %221 ]
  %268 = phi float [ %242, %230 ], [ %213, %221 ]
  %269 = phi i32 [ %241, %230 ], [ %214, %221 ]
  %270 = phi float [ %242, %230 ], [ %215, %221 ]
  %271 = phi i32 [ %241, %230 ], [ %216, %221 ]
  %272 = phi float [ %242, %230 ], [ %217, %221 ]
  %273 = phi i32 [ %241, %230 ], [ %218, %221 ]
  %274 = phi float [ %242, %230 ], [ %219, %221 ]
  %275 = fsub float %125, %222
  %276 = fdiv float %275, %225
  %277 = fcmp oge float %276, 0.000000e+00
  %278 = fcmp olt float %276, 1.000000e+00
  %279 = and i1 %277, %278
  br i1 %279, label %280, label %293

280:                                              ; preds = %243
  %281 = load float, float* %133, align 16
  %282 = load float, float* %135, align 8
  %283 = fsub float %282, %281
  %284 = fmul float %276, %283
  %285 = fadd float %281, %284
  %286 = load float, float* %166, align 4
  %287 = fcmp ogt float %286, %285
  %288 = select i1 %287, float %285, float %286
  store float %288, float* %166, align 4
  %289 = fcmp olt float %262, %285
  %290 = bitcast float %285 to i32
  %291 = select i1 %289, i32 %290, i32 %261
  %292 = bitcast i32 %291 to float
  br label %293

293:                                              ; preds = %280, %243
  %294 = phi i32 [ %291, %280 ], [ %244, %243 ]
  %295 = phi i32 [ %291, %280 ], [ %245, %243 ]
  %296 = phi float [ %292, %280 ], [ %246, %243 ]
  %297 = phi i32 [ %291, %280 ], [ %247, %243 ]
  %298 = phi float [ %292, %280 ], [ %248, %243 ]
  %299 = phi i32 [ %291, %280 ], [ %249, %243 ]
  %300 = phi float [ %292, %280 ], [ %250, %243 ]
  %301 = phi i32 [ %291, %280 ], [ %251, %243 ]
  %302 = phi float [ %292, %280 ], [ %252, %243 ]
  %303 = phi i32 [ %291, %280 ], [ %253, %243 ]
  %304 = phi float [ %292, %280 ], [ %254, %243 ]
  %305 = phi i32 [ %291, %280 ], [ %255, %243 ]
  %306 = phi float [ %292, %280 ], [ %256, %243 ]
  %307 = phi i32 [ %291, %280 ], [ %257, %243 ]
  %308 = phi float [ %292, %280 ], [ %258, %243 ]
  %309 = phi i32 [ %291, %280 ], [ %259, %243 ]
  %310 = phi float [ %292, %280 ], [ %260, %243 ]
  %311 = phi i32 [ %291, %280 ], [ %261, %243 ]
  %312 = phi float [ %292, %280 ], [ %262, %243 ]
  %313 = phi i32 [ %291, %280 ], [ %263, %243 ]
  %314 = phi float [ %292, %280 ], [ %264, %243 ]
  %315 = phi i32 [ %291, %280 ], [ %265, %243 ]
  %316 = phi float [ %292, %280 ], [ %266, %243 ]
  %317 = phi i32 [ %291, %280 ], [ %267, %243 ]
  %318 = phi float [ %292, %280 ], [ %268, %243 ]
  %319 = phi i32 [ %291, %280 ], [ %269, %243 ]
  %320 = phi float [ %292, %280 ], [ %270, %243 ]
  %321 = phi i32 [ %291, %280 ], [ %271, %243 ]
  %322 = phi float [ %292, %280 ], [ %272, %243 ]
  %323 = phi i32 [ %291, %280 ], [ %273, %243 ]
  %324 = phi float [ %292, %280 ], [ %274, %243 ]
  %325 = fcmp ogt float %222, %122
  %326 = fcmp olt float %222, %125
  %327 = and i1 %325, %326
  br i1 %327, label %328, label %337

328:                                              ; preds = %293
  %329 = load float, float* %133, align 16
  %330 = load float, float* %166, align 4
  %331 = fcmp ogt float %330, %329
  %332 = select i1 %331, float %329, float %330
  store float %332, float* %166, align 4
  %333 = fcmp olt float %310, %329
  %334 = bitcast float %329 to i32
  %335 = select i1 %333, i32 %334, i32 %309
  %336 = bitcast i32 %335 to float
  br label %337

337:                                              ; preds = %328, %293
  %338 = phi i32 [ %335, %328 ], [ %294, %293 ]
  %339 = phi i32 [ %335, %328 ], [ %295, %293 ]
  %340 = phi float [ %336, %328 ], [ %296, %293 ]
  %341 = phi i32 [ %335, %328 ], [ %297, %293 ]
  %342 = phi float [ %336, %328 ], [ %298, %293 ]
  %343 = phi i32 [ %335, %328 ], [ %299, %293 ]
  %344 = phi float [ %336, %328 ], [ %300, %293 ]
  %345 = phi i32 [ %335, %328 ], [ %301, %293 ]
  %346 = phi float [ %336, %328 ], [ %302, %293 ]
  %347 = phi i32 [ %335, %328 ], [ %303, %293 ]
  %348 = phi float [ %336, %328 ], [ %304, %293 ]
  %349 = phi i32 [ %335, %328 ], [ %305, %293 ]
  %350 = phi float [ %336, %328 ], [ %306, %293 ]
  %351 = phi i32 [ %335, %328 ], [ %307, %293 ]
  %352 = phi float [ %336, %328 ], [ %308, %293 ]
  %353 = phi i32 [ %335, %328 ], [ %309, %293 ]
  %354 = phi float [ %336, %328 ], [ %310, %293 ]
  %355 = phi i32 [ %335, %328 ], [ %311, %293 ]
  %356 = phi float [ %336, %328 ], [ %312, %293 ]
  %357 = phi i32 [ %335, %328 ], [ %313, %293 ]
  %358 = phi float [ %336, %328 ], [ %314, %293 ]
  %359 = phi i32 [ %335, %328 ], [ %315, %293 ]
  %360 = phi float [ %336, %328 ], [ %316, %293 ]
  %361 = phi i32 [ %335, %328 ], [ %317, %293 ]
  %362 = phi float [ %336, %328 ], [ %318, %293 ]
  %363 = phi i32 [ %335, %328 ], [ %319, %293 ]
  %364 = phi float [ %336, %328 ], [ %320, %293 ]
  %365 = phi i32 [ %335, %328 ], [ %321, %293 ]
  %366 = phi float [ %336, %328 ], [ %322, %293 ]
  %367 = phi i32 [ %335, %328 ], [ %323, %293 ]
  %368 = phi float [ %336, %328 ], [ %324, %293 ]
  %369 = fcmp ogt float %224, %122
  %370 = fcmp olt float %224, %125
  %371 = and i1 %369, %370
  br i1 %371, label %819, label %927

372:                                              ; preds = %188
  %373 = load float, float* %136, align 4
  %374 = load float, float* %134, align 4
  %375 = fcmp olt float %373, %374
  %376 = load float, float* %138, align 4
  %377 = select i1 %375, float %373, float %374
  %378 = fcmp olt float %376, %377
  %379 = select i1 %378, float %376, float %377
  %380 = fcmp ogt float %379, %125
  br i1 %380, label %927, label %381

381:                                              ; preds = %372
  %382 = fcmp olt float %374, %373
  %383 = select i1 %382, float %373, float %374
  %384 = fcmp olt float %383, %376
  %385 = select i1 %384, float %376, float %383
  %386 = fcmp olt float %385, %122
  br i1 %386, label %927, label %387

387:                                              ; preds = %381
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %146) #12
  %388 = load float, float* %133, align 16
  %389 = insertelement <2 x float> undef, float %388, i32 0
  %390 = insertelement <2 x float> %389, float %374, i32 1
  %391 = fpext <2 x float> %390 to <2 x double>
  store <2 x double> %391, <2 x double>* %167, align 16
  %392 = load float, float* %135, align 8
  %393 = insertelement <2 x float> undef, float %392, i32 0
  %394 = insertelement <2 x float> %393, float %373, i32 1
  %395 = fpext <2 x float> %394 to <2 x double>
  store <2 x double> %395, <2 x double>* %168, align 16
  %396 = load float, float* %137, align 16
  %397 = insertelement <2 x float> undef, float %396, i32 0
  %398 = insertelement <2 x float> %397, float %376, i32 1
  %399 = fpext <2 x float> %398 to <2 x double>
  store <2 x double> %399, <2 x double>* %169, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %149) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %149, i8 -1, i64 16, i1 false) #12
  %400 = call i32 @_ZNK7SkDQuad19horizontalIntersectEdPd(%struct.SkDQuad* nonnull %8, double %151, double* nonnull %150) #12
  %401 = icmp sgt i32 %400, 0
  br i1 %401, label %402, label %422

402:                                              ; preds = %387
  %403 = sext i32 %400 to i64
  br label %404

404:                                              ; preds = %404, %402
  %405 = phi i32 [ %218, %402 ], [ %419, %404 ]
  %406 = phi float [ %219, %402 ], [ %421, %404 ]
  %407 = phi i64 [ %403, %402 ], [ %408, %404 ]
  %408 = add nsw i64 %407, -1
  %409 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 %408
  %410 = load double, double* %409, align 8
  %411 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nonnull %8, double %410) #12
  %412 = extractvalue { double, double } %411, 0
  %413 = fptrunc double %412 to float
  %414 = load float, float* %166, align 4
  %415 = fcmp ogt float %414, %413
  %416 = select i1 %415, float %413, float %414
  store float %416, float* %166, align 4
  %417 = fcmp olt float %406, %413
  %418 = bitcast float %413 to i32
  %419 = select i1 %417, i32 %418, i32 %405
  %420 = icmp sgt i64 %408, 0
  %421 = bitcast i32 %419 to float
  br i1 %420, label %404, label %422

422:                                              ; preds = %404, %387
  %423 = phi i32 [ %189, %387 ], [ %419, %404 ]
  %424 = phi i32 [ %190, %387 ], [ %419, %404 ]
  %425 = phi float [ %191, %387 ], [ %421, %404 ]
  %426 = phi i32 [ %192, %387 ], [ %419, %404 ]
  %427 = phi float [ %193, %387 ], [ %421, %404 ]
  %428 = phi i32 [ %194, %387 ], [ %419, %404 ]
  %429 = phi float [ %195, %387 ], [ %421, %404 ]
  %430 = phi i32 [ %196, %387 ], [ %419, %404 ]
  %431 = phi float [ %197, %387 ], [ %421, %404 ]
  %432 = phi i32 [ %198, %387 ], [ %419, %404 ]
  %433 = phi float [ %199, %387 ], [ %421, %404 ]
  %434 = phi i32 [ %200, %387 ], [ %419, %404 ]
  %435 = phi float [ %201, %387 ], [ %421, %404 ]
  %436 = phi i32 [ %202, %387 ], [ %419, %404 ]
  %437 = phi float [ %203, %387 ], [ %421, %404 ]
  %438 = phi i32 [ %204, %387 ], [ %419, %404 ]
  %439 = phi float [ %205, %387 ], [ %421, %404 ]
  %440 = phi i32 [ %206, %387 ], [ %419, %404 ]
  %441 = phi float [ %207, %387 ], [ %421, %404 ]
  %442 = phi i32 [ %208, %387 ], [ %419, %404 ]
  %443 = phi float [ %209, %387 ], [ %421, %404 ]
  %444 = phi i32 [ %210, %387 ], [ %419, %404 ]
  %445 = phi float [ %211, %387 ], [ %421, %404 ]
  %446 = phi i32 [ %212, %387 ], [ %419, %404 ]
  %447 = phi float [ %213, %387 ], [ %421, %404 ]
  %448 = phi i32 [ %214, %387 ], [ %419, %404 ]
  %449 = phi float [ %215, %387 ], [ %421, %404 ]
  %450 = phi i32 [ %216, %387 ], [ %419, %404 ]
  %451 = phi float [ %217, %387 ], [ %421, %404 ]
  %452 = phi i32 [ %218, %387 ], [ %419, %404 ]
  %453 = phi float [ %219, %387 ], [ %421, %404 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %149) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %146) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %152) #12
  %454 = load <2 x float>, <2 x float>* %170, align 16
  %455 = fpext <2 x float> %454 to <2 x double>
  store <2 x double> %455, <2 x double>* %171, align 16
  %456 = load <2 x float>, <2 x float>* %172, align 8
  %457 = fpext <2 x float> %456 to <2 x double>
  store <2 x double> %457, <2 x double>* %173, align 16
  %458 = load <2 x float>, <2 x float>* %174, align 16
  %459 = fpext <2 x float> %458 to <2 x double>
  store <2 x double> %459, <2 x double>* %175, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %149) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %149, i8 -1, i64 16, i1 false) #12
  %460 = call i32 @_ZNK7SkDQuad19horizontalIntersectEdPd(%struct.SkDQuad* nonnull %9, double %155, double* nonnull %150) #12
  %461 = icmp sgt i32 %460, 0
  br i1 %461, label %462, label %482

462:                                              ; preds = %422
  %463 = sext i32 %460 to i64
  br label %464

464:                                              ; preds = %464, %462
  %465 = phi i32 [ %450, %462 ], [ %479, %464 ]
  %466 = phi float [ %451, %462 ], [ %481, %464 ]
  %467 = phi i64 [ %463, %462 ], [ %468, %464 ]
  %468 = add nsw i64 %467, -1
  %469 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 %468
  %470 = load double, double* %469, align 8
  %471 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nonnull %9, double %470) #12
  %472 = extractvalue { double, double } %471, 0
  %473 = fptrunc double %472 to float
  %474 = load float, float* %166, align 4
  %475 = fcmp ogt float %474, %473
  %476 = select i1 %475, float %473, float %474
  store float %476, float* %166, align 4
  %477 = fcmp olt float %466, %473
  %478 = bitcast float %473 to i32
  %479 = select i1 %477, i32 %478, i32 %465
  %480 = icmp sgt i64 %468, 0
  %481 = bitcast i32 %479 to float
  br i1 %480, label %464, label %482

482:                                              ; preds = %464, %422
  %483 = phi i32 [ %423, %422 ], [ %479, %464 ]
  %484 = phi i32 [ %424, %422 ], [ %479, %464 ]
  %485 = phi float [ %425, %422 ], [ %481, %464 ]
  %486 = phi i32 [ %426, %422 ], [ %479, %464 ]
  %487 = phi float [ %427, %422 ], [ %481, %464 ]
  %488 = phi i32 [ %428, %422 ], [ %479, %464 ]
  %489 = phi float [ %429, %422 ], [ %481, %464 ]
  %490 = phi i32 [ %430, %422 ], [ %479, %464 ]
  %491 = phi float [ %431, %422 ], [ %481, %464 ]
  %492 = phi i32 [ %432, %422 ], [ %479, %464 ]
  %493 = phi float [ %433, %422 ], [ %481, %464 ]
  %494 = phi i32 [ %434, %422 ], [ %479, %464 ]
  %495 = phi float [ %435, %422 ], [ %481, %464 ]
  %496 = phi i32 [ %436, %422 ], [ %479, %464 ]
  %497 = phi float [ %437, %422 ], [ %481, %464 ]
  %498 = phi i32 [ %438, %422 ], [ %479, %464 ]
  %499 = phi float [ %439, %422 ], [ %481, %464 ]
  %500 = phi i32 [ %440, %422 ], [ %479, %464 ]
  %501 = phi float [ %441, %422 ], [ %481, %464 ]
  %502 = phi i32 [ %442, %422 ], [ %479, %464 ]
  %503 = phi float [ %443, %422 ], [ %481, %464 ]
  %504 = phi i32 [ %444, %422 ], [ %479, %464 ]
  %505 = phi float [ %445, %422 ], [ %481, %464 ]
  %506 = phi i32 [ %446, %422 ], [ %479, %464 ]
  %507 = phi float [ %447, %422 ], [ %481, %464 ]
  %508 = phi i32 [ %448, %422 ], [ %479, %464 ]
  %509 = phi float [ %449, %422 ], [ %481, %464 ]
  %510 = phi i32 [ %450, %422 ], [ %479, %464 ]
  %511 = phi float [ %451, %422 ], [ %481, %464 ]
  %512 = phi i32 [ %452, %422 ], [ %479, %464 ]
  %513 = phi float [ %453, %422 ], [ %481, %464 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %149) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %152) #12
  %514 = load float, float* %134, align 4
  %515 = fcmp ogt float %514, %122
  %516 = fcmp olt float %514, %125
  %517 = and i1 %515, %516
  br i1 %517, label %518, label %527

518:                                              ; preds = %482
  %519 = load float, float* %133, align 16
  %520 = load float, float* %166, align 4
  %521 = fcmp ogt float %520, %519
  %522 = select i1 %521, float %519, float %520
  store float %522, float* %166, align 4
  %523 = fcmp olt float %509, %519
  %524 = bitcast float %519 to i32
  %525 = select i1 %523, i32 %524, i32 %508
  %526 = bitcast i32 %525 to float
  br label %527

527:                                              ; preds = %518, %482
  %528 = phi i32 [ %525, %518 ], [ %483, %482 ]
  %529 = phi i32 [ %525, %518 ], [ %484, %482 ]
  %530 = phi float [ %526, %518 ], [ %485, %482 ]
  %531 = phi i32 [ %525, %518 ], [ %486, %482 ]
  %532 = phi float [ %526, %518 ], [ %487, %482 ]
  %533 = phi i32 [ %525, %518 ], [ %488, %482 ]
  %534 = phi float [ %526, %518 ], [ %489, %482 ]
  %535 = phi i32 [ %525, %518 ], [ %490, %482 ]
  %536 = phi float [ %526, %518 ], [ %491, %482 ]
  %537 = phi i32 [ %525, %518 ], [ %492, %482 ]
  %538 = phi float [ %526, %518 ], [ %493, %482 ]
  %539 = phi i32 [ %525, %518 ], [ %494, %482 ]
  %540 = phi float [ %526, %518 ], [ %495, %482 ]
  %541 = phi i32 [ %525, %518 ], [ %496, %482 ]
  %542 = phi float [ %526, %518 ], [ %497, %482 ]
  %543 = phi i32 [ %525, %518 ], [ %498, %482 ]
  %544 = phi float [ %526, %518 ], [ %499, %482 ]
  %545 = phi i32 [ %525, %518 ], [ %500, %482 ]
  %546 = phi float [ %526, %518 ], [ %501, %482 ]
  %547 = phi i32 [ %525, %518 ], [ %502, %482 ]
  %548 = phi float [ %526, %518 ], [ %503, %482 ]
  %549 = phi i32 [ %525, %518 ], [ %504, %482 ]
  %550 = phi float [ %526, %518 ], [ %505, %482 ]
  %551 = phi i32 [ %525, %518 ], [ %506, %482 ]
  %552 = phi float [ %526, %518 ], [ %507, %482 ]
  %553 = phi i32 [ %525, %518 ], [ %508, %482 ]
  %554 = phi float [ %526, %518 ], [ %509, %482 ]
  %555 = phi i32 [ %525, %518 ], [ %510, %482 ]
  %556 = phi float [ %526, %518 ], [ %511, %482 ]
  %557 = phi i32 [ %525, %518 ], [ %512, %482 ]
  %558 = phi float [ %526, %518 ], [ %513, %482 ]
  %559 = load float, float* %136, align 4
  %560 = fcmp ogt float %559, %122
  %561 = fcmp olt float %559, %125
  %562 = and i1 %560, %561
  br i1 %562, label %765, label %774

563:                                              ; preds = %188
  %564 = load float, float* %136, align 4
  %565 = load float, float* %134, align 4
  %566 = fcmp olt float %564, %565
  %567 = load float, float* %138, align 4
  %568 = select i1 %566, float %564, float %565
  %569 = fcmp olt float %567, %568
  %570 = load float, float* %140, align 4
  %571 = select i1 %569, float %567, float %568
  %572 = fcmp olt float %570, %571
  %573 = select i1 %572, float %570, float %571
  %574 = fcmp ogt float %573, %125
  br i1 %574, label %927, label %575

575:                                              ; preds = %563
  %576 = fcmp olt float %565, %564
  %577 = select i1 %576, float %564, float %565
  %578 = fcmp olt float %577, %567
  %579 = select i1 %578, float %567, float %577
  %580 = fcmp olt float %579, %570
  %581 = select i1 %580, float %570, float %579
  %582 = fcmp olt float %581, %122
  br i1 %582, label %927, label %583

583:                                              ; preds = %575
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %156) #12
  %584 = load float, float* %133, align 16
  %585 = insertelement <2 x float> undef, float %584, i32 0
  %586 = insertelement <2 x float> %585, float %565, i32 1
  %587 = fpext <2 x float> %586 to <2 x double>
  store <2 x double> %587, <2 x double>* %176, align 16
  %588 = load float, float* %135, align 8
  %589 = insertelement <2 x float> undef, float %588, i32 0
  %590 = insertelement <2 x float> %589, float %564, i32 1
  %591 = fpext <2 x float> %590 to <2 x double>
  store <2 x double> %591, <2 x double>* %177, align 16
  %592 = load float, float* %137, align 16
  %593 = insertelement <2 x float> undef, float %592, i32 0
  %594 = insertelement <2 x float> %593, float %567, i32 1
  %595 = fpext <2 x float> %594 to <2 x double>
  store <2 x double> %595, <2 x double>* %178, align 16
  %596 = load float, float* %139, align 8
  %597 = insertelement <2 x float> undef, float %596, i32 0
  %598 = insertelement <2 x float> %597, float %570, i32 1
  %599 = fpext <2 x float> %598 to <2 x double>
  store <2 x double> %599, <2 x double>* %179, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %160) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %160, i8 -1, i64 24, i1 false) #12
  %600 = call i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic* nonnull %11, double %151, double* nonnull %161) #12
  %601 = icmp sgt i32 %600, 0
  br i1 %601, label %602, label %622

602:                                              ; preds = %583
  %603 = sext i32 %600 to i64
  br label %604

604:                                              ; preds = %604, %602
  %605 = phi i32 [ %200, %602 ], [ %619, %604 ]
  %606 = phi float [ %201, %602 ], [ %621, %604 ]
  %607 = phi i64 [ %603, %602 ], [ %608, %604 ]
  %608 = add nsw i64 %607, -1
  %609 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 %608
  %610 = load double, double* %609, align 8
  %611 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %11, double %610) #12
  %612 = extractvalue { double, double } %611, 0
  %613 = fptrunc double %612 to float
  %614 = load float, float* %166, align 4
  %615 = fcmp ogt float %614, %613
  %616 = select i1 %615, float %613, float %614
  store float %616, float* %166, align 4
  %617 = fcmp olt float %606, %613
  %618 = bitcast float %613 to i32
  %619 = select i1 %617, i32 %618, i32 %605
  %620 = icmp sgt i64 %608, 0
  %621 = bitcast i32 %619 to float
  br i1 %620, label %604, label %622

622:                                              ; preds = %604, %583
  %623 = phi i32 [ %189, %583 ], [ %619, %604 ]
  %624 = phi i32 [ %190, %583 ], [ %619, %604 ]
  %625 = phi float [ %191, %583 ], [ %621, %604 ]
  %626 = phi i32 [ %192, %583 ], [ %619, %604 ]
  %627 = phi float [ %193, %583 ], [ %621, %604 ]
  %628 = phi i32 [ %194, %583 ], [ %619, %604 ]
  %629 = phi float [ %195, %583 ], [ %621, %604 ]
  %630 = phi i32 [ %196, %583 ], [ %619, %604 ]
  %631 = phi float [ %197, %583 ], [ %621, %604 ]
  %632 = phi i32 [ %198, %583 ], [ %619, %604 ]
  %633 = phi float [ %199, %583 ], [ %621, %604 ]
  %634 = phi i32 [ %200, %583 ], [ %619, %604 ]
  %635 = phi float [ %201, %583 ], [ %621, %604 ]
  %636 = phi i32 [ %202, %583 ], [ %619, %604 ]
  %637 = phi float [ %203, %583 ], [ %621, %604 ]
  %638 = phi i32 [ %204, %583 ], [ %619, %604 ]
  %639 = phi float [ %205, %583 ], [ %621, %604 ]
  %640 = phi i32 [ %206, %583 ], [ %619, %604 ]
  %641 = phi float [ %207, %583 ], [ %621, %604 ]
  %642 = phi i32 [ %208, %583 ], [ %619, %604 ]
  %643 = phi float [ %209, %583 ], [ %621, %604 ]
  %644 = phi i32 [ %210, %583 ], [ %619, %604 ]
  %645 = phi float [ %211, %583 ], [ %621, %604 ]
  %646 = phi i32 [ %212, %583 ], [ %619, %604 ]
  %647 = phi float [ %213, %583 ], [ %621, %604 ]
  %648 = phi i32 [ %214, %583 ], [ %619, %604 ]
  %649 = phi float [ %215, %583 ], [ %621, %604 ]
  %650 = phi i32 [ %216, %583 ], [ %619, %604 ]
  %651 = phi float [ %217, %583 ], [ %621, %604 ]
  %652 = phi i32 [ %218, %583 ], [ %619, %604 ]
  %653 = phi float [ %219, %583 ], [ %621, %604 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %160) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %156) #12
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %162) #12
  %654 = load <2 x float>, <2 x float>* %180, align 16
  %655 = fpext <2 x float> %654 to <2 x double>
  store <2 x double> %655, <2 x double>* %181, align 16
  %656 = load <2 x float>, <2 x float>* %182, align 8
  %657 = fpext <2 x float> %656 to <2 x double>
  store <2 x double> %657, <2 x double>* %183, align 16
  %658 = load <2 x float>, <2 x float>* %184, align 16
  %659 = fpext <2 x float> %658 to <2 x double>
  store <2 x double> %659, <2 x double>* %185, align 16
  %660 = load <2 x float>, <2 x float>* %186, align 8
  %661 = fpext <2 x float> %660 to <2 x double>
  store <2 x double> %661, <2 x double>* %187, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %160) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %160, i8 -1, i64 24, i1 false) #12
  %662 = call i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic* nonnull %12, double %155, double* nonnull %161) #12
  %663 = icmp sgt i32 %662, 0
  br i1 %663, label %664, label %684

664:                                              ; preds = %622
  %665 = sext i32 %662 to i64
  br label %666

666:                                              ; preds = %666, %664
  %667 = phi i32 [ %632, %664 ], [ %681, %666 ]
  %668 = phi float [ %633, %664 ], [ %683, %666 ]
  %669 = phi i64 [ %665, %664 ], [ %670, %666 ]
  %670 = add nsw i64 %669, -1
  %671 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 %670
  %672 = load double, double* %671, align 8
  %673 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %12, double %672) #12
  %674 = extractvalue { double, double } %673, 0
  %675 = fptrunc double %674 to float
  %676 = load float, float* %166, align 4
  %677 = fcmp ogt float %676, %675
  %678 = select i1 %677, float %675, float %676
  store float %678, float* %166, align 4
  %679 = fcmp olt float %668, %675
  %680 = bitcast float %675 to i32
  %681 = select i1 %679, i32 %680, i32 %667
  %682 = icmp sgt i64 %670, 0
  %683 = bitcast i32 %681 to float
  br i1 %682, label %666, label %684

684:                                              ; preds = %666, %622
  %685 = phi i32 [ %623, %622 ], [ %681, %666 ]
  %686 = phi i32 [ %624, %622 ], [ %681, %666 ]
  %687 = phi float [ %625, %622 ], [ %683, %666 ]
  %688 = phi i32 [ %626, %622 ], [ %681, %666 ]
  %689 = phi float [ %627, %622 ], [ %683, %666 ]
  %690 = phi i32 [ %628, %622 ], [ %681, %666 ]
  %691 = phi float [ %629, %622 ], [ %683, %666 ]
  %692 = phi i32 [ %630, %622 ], [ %681, %666 ]
  %693 = phi float [ %631, %622 ], [ %683, %666 ]
  %694 = phi i32 [ %632, %622 ], [ %681, %666 ]
  %695 = phi float [ %633, %622 ], [ %683, %666 ]
  %696 = phi i32 [ %634, %622 ], [ %681, %666 ]
  %697 = phi float [ %635, %622 ], [ %683, %666 ]
  %698 = phi i32 [ %636, %622 ], [ %681, %666 ]
  %699 = phi float [ %637, %622 ], [ %683, %666 ]
  %700 = phi i32 [ %638, %622 ], [ %681, %666 ]
  %701 = phi float [ %639, %622 ], [ %683, %666 ]
  %702 = phi i32 [ %640, %622 ], [ %681, %666 ]
  %703 = phi float [ %641, %622 ], [ %683, %666 ]
  %704 = phi i32 [ %642, %622 ], [ %681, %666 ]
  %705 = phi float [ %643, %622 ], [ %683, %666 ]
  %706 = phi i32 [ %644, %622 ], [ %681, %666 ]
  %707 = phi float [ %645, %622 ], [ %683, %666 ]
  %708 = phi i32 [ %646, %622 ], [ %681, %666 ]
  %709 = phi float [ %647, %622 ], [ %683, %666 ]
  %710 = phi i32 [ %648, %622 ], [ %681, %666 ]
  %711 = phi float [ %649, %622 ], [ %683, %666 ]
  %712 = phi i32 [ %650, %622 ], [ %681, %666 ]
  %713 = phi float [ %651, %622 ], [ %683, %666 ]
  %714 = phi i32 [ %652, %622 ], [ %681, %666 ]
  %715 = phi float [ %653, %622 ], [ %683, %666 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %160) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %162) #12
  %716 = load float, float* %134, align 4
  %717 = fcmp ogt float %716, %122
  %718 = fcmp olt float %716, %125
  %719 = and i1 %717, %718
  br i1 %719, label %720, label %729

720:                                              ; preds = %684
  %721 = load float, float* %133, align 16
  %722 = load float, float* %166, align 4
  %723 = fcmp ogt float %722, %721
  %724 = select i1 %723, float %721, float %722
  store float %724, float* %166, align 4
  %725 = fcmp olt float %693, %721
  %726 = bitcast float %721 to i32
  %727 = select i1 %725, i32 %726, i32 %692
  %728 = bitcast i32 %727 to float
  br label %729

729:                                              ; preds = %720, %684
  %730 = phi i32 [ %727, %720 ], [ %685, %684 ]
  %731 = phi i32 [ %727, %720 ], [ %686, %684 ]
  %732 = phi float [ %728, %720 ], [ %687, %684 ]
  %733 = phi i32 [ %727, %720 ], [ %688, %684 ]
  %734 = phi float [ %728, %720 ], [ %689, %684 ]
  %735 = phi i32 [ %727, %720 ], [ %690, %684 ]
  %736 = phi float [ %728, %720 ], [ %691, %684 ]
  %737 = phi i32 [ %727, %720 ], [ %692, %684 ]
  %738 = phi float [ %728, %720 ], [ %693, %684 ]
  %739 = phi i32 [ %727, %720 ], [ %694, %684 ]
  %740 = phi float [ %728, %720 ], [ %695, %684 ]
  %741 = phi i32 [ %727, %720 ], [ %696, %684 ]
  %742 = phi float [ %728, %720 ], [ %697, %684 ]
  %743 = phi i32 [ %727, %720 ], [ %698, %684 ]
  %744 = phi float [ %728, %720 ], [ %699, %684 ]
  %745 = phi i32 [ %727, %720 ], [ %700, %684 ]
  %746 = phi float [ %728, %720 ], [ %701, %684 ]
  %747 = phi i32 [ %727, %720 ], [ %702, %684 ]
  %748 = phi float [ %728, %720 ], [ %703, %684 ]
  %749 = phi i32 [ %727, %720 ], [ %704, %684 ]
  %750 = phi float [ %728, %720 ], [ %705, %684 ]
  %751 = phi i32 [ %727, %720 ], [ %706, %684 ]
  %752 = phi float [ %728, %720 ], [ %707, %684 ]
  %753 = phi i32 [ %727, %720 ], [ %708, %684 ]
  %754 = phi float [ %728, %720 ], [ %709, %684 ]
  %755 = phi i32 [ %727, %720 ], [ %710, %684 ]
  %756 = phi float [ %728, %720 ], [ %711, %684 ]
  %757 = phi i32 [ %727, %720 ], [ %712, %684 ]
  %758 = phi float [ %728, %720 ], [ %713, %684 ]
  %759 = phi i32 [ %727, %720 ], [ %714, %684 ]
  %760 = phi float [ %728, %720 ], [ %715, %684 ]
  %761 = load float, float* %136, align 4
  %762 = fcmp ogt float %761, %122
  %763 = fcmp olt float %761, %125
  %764 = and i1 %762, %763
  br i1 %764, label %828, label %837

765:                                              ; preds = %527
  %766 = load float, float* %135, align 8
  %767 = load float, float* %166, align 4
  %768 = fcmp ogt float %767, %766
  %769 = select i1 %768, float %766, float %767
  store float %769, float* %166, align 4
  %770 = fcmp olt float %552, %766
  %771 = bitcast float %766 to i32
  %772 = select i1 %770, i32 %771, i32 %551
  %773 = bitcast i32 %772 to float
  br label %774

774:                                              ; preds = %765, %527
  %775 = phi i32 [ %772, %765 ], [ %528, %527 ]
  %776 = phi i32 [ %772, %765 ], [ %529, %527 ]
  %777 = phi float [ %773, %765 ], [ %530, %527 ]
  %778 = phi i32 [ %772, %765 ], [ %531, %527 ]
  %779 = phi float [ %773, %765 ], [ %532, %527 ]
  %780 = phi i32 [ %772, %765 ], [ %533, %527 ]
  %781 = phi float [ %773, %765 ], [ %534, %527 ]
  %782 = phi i32 [ %772, %765 ], [ %535, %527 ]
  %783 = phi float [ %773, %765 ], [ %536, %527 ]
  %784 = phi i32 [ %772, %765 ], [ %537, %527 ]
  %785 = phi float [ %773, %765 ], [ %538, %527 ]
  %786 = phi i32 [ %772, %765 ], [ %539, %527 ]
  %787 = phi float [ %773, %765 ], [ %540, %527 ]
  %788 = phi i32 [ %772, %765 ], [ %541, %527 ]
  %789 = phi float [ %773, %765 ], [ %542, %527 ]
  %790 = phi i32 [ %772, %765 ], [ %543, %527 ]
  %791 = phi float [ %773, %765 ], [ %544, %527 ]
  %792 = phi i32 [ %772, %765 ], [ %545, %527 ]
  %793 = phi float [ %773, %765 ], [ %546, %527 ]
  %794 = phi i32 [ %772, %765 ], [ %547, %527 ]
  %795 = phi float [ %773, %765 ], [ %548, %527 ]
  %796 = phi i32 [ %772, %765 ], [ %549, %527 ]
  %797 = phi float [ %773, %765 ], [ %550, %527 ]
  %798 = phi i32 [ %772, %765 ], [ %551, %527 ]
  %799 = phi float [ %773, %765 ], [ %552, %527 ]
  %800 = phi i32 [ %772, %765 ], [ %553, %527 ]
  %801 = phi float [ %773, %765 ], [ %554, %527 ]
  %802 = phi i32 [ %772, %765 ], [ %555, %527 ]
  %803 = phi float [ %773, %765 ], [ %556, %527 ]
  %804 = phi i32 [ %772, %765 ], [ %557, %527 ]
  %805 = phi float [ %773, %765 ], [ %558, %527 ]
  %806 = load float, float* %138, align 4
  %807 = fcmp ogt float %806, %122
  %808 = fcmp olt float %806, %125
  %809 = and i1 %807, %808
  br i1 %809, label %810, label %927

810:                                              ; preds = %774
  %811 = load float, float* %137, align 16
  %812 = load float, float* %166, align 4
  %813 = fcmp ogt float %812, %811
  %814 = select i1 %813, float %811, float %812
  store float %814, float* %166, align 4
  %815 = fcmp olt float %797, %811
  %816 = bitcast float %811 to i32
  %817 = select i1 %815, i32 %816, i32 %796
  %818 = bitcast i32 %817 to float
  br label %927

819:                                              ; preds = %337
  %820 = load float, float* %135, align 8
  %821 = load float, float* %166, align 4
  %822 = fcmp ogt float %821, %820
  %823 = select i1 %822, float %820, float %821
  store float %823, float* %166, align 4
  %824 = fcmp olt float %352, %820
  %825 = bitcast float %820 to i32
  %826 = select i1 %824, i32 %825, i32 %351
  %827 = bitcast i32 %826 to float
  br label %927

828:                                              ; preds = %729
  %829 = load float, float* %135, align 8
  %830 = load float, float* %166, align 4
  %831 = fcmp ogt float %830, %829
  %832 = select i1 %831, float %829, float %830
  store float %832, float* %166, align 4
  %833 = fcmp olt float %736, %829
  %834 = bitcast float %829 to i32
  %835 = select i1 %833, i32 %834, i32 %735
  %836 = bitcast i32 %835 to float
  br label %837

837:                                              ; preds = %828, %729
  %838 = phi i32 [ %835, %828 ], [ %730, %729 ]
  %839 = phi i32 [ %835, %828 ], [ %731, %729 ]
  %840 = phi float [ %836, %828 ], [ %732, %729 ]
  %841 = phi i32 [ %835, %828 ], [ %733, %729 ]
  %842 = phi float [ %836, %828 ], [ %734, %729 ]
  %843 = phi i32 [ %835, %828 ], [ %735, %729 ]
  %844 = phi float [ %836, %828 ], [ %736, %729 ]
  %845 = phi i32 [ %835, %828 ], [ %737, %729 ]
  %846 = phi float [ %836, %828 ], [ %738, %729 ]
  %847 = phi i32 [ %835, %828 ], [ %739, %729 ]
  %848 = phi float [ %836, %828 ], [ %740, %729 ]
  %849 = phi i32 [ %835, %828 ], [ %741, %729 ]
  %850 = phi float [ %836, %828 ], [ %742, %729 ]
  %851 = phi i32 [ %835, %828 ], [ %743, %729 ]
  %852 = phi float [ %836, %828 ], [ %744, %729 ]
  %853 = phi i32 [ %835, %828 ], [ %745, %729 ]
  %854 = phi float [ %836, %828 ], [ %746, %729 ]
  %855 = phi i32 [ %835, %828 ], [ %747, %729 ]
  %856 = phi float [ %836, %828 ], [ %748, %729 ]
  %857 = phi i32 [ %835, %828 ], [ %749, %729 ]
  %858 = phi float [ %836, %828 ], [ %750, %729 ]
  %859 = phi i32 [ %835, %828 ], [ %751, %729 ]
  %860 = phi float [ %836, %828 ], [ %752, %729 ]
  %861 = phi i32 [ %835, %828 ], [ %753, %729 ]
  %862 = phi float [ %836, %828 ], [ %754, %729 ]
  %863 = phi i32 [ %835, %828 ], [ %755, %729 ]
  %864 = phi float [ %836, %828 ], [ %756, %729 ]
  %865 = phi i32 [ %835, %828 ], [ %757, %729 ]
  %866 = phi float [ %836, %828 ], [ %758, %729 ]
  %867 = phi i32 [ %835, %828 ], [ %759, %729 ]
  %868 = phi float [ %836, %828 ], [ %760, %729 ]
  %869 = load float, float* %138, align 4
  %870 = fcmp ogt float %869, %122
  %871 = fcmp olt float %869, %125
  %872 = and i1 %870, %871
  br i1 %872, label %873, label %882

873:                                              ; preds = %837
  %874 = load float, float* %137, align 16
  %875 = load float, float* %166, align 4
  %876 = fcmp ogt float %875, %874
  %877 = select i1 %876, float %874, float %875
  store float %877, float* %166, align 4
  %878 = fcmp olt float %842, %874
  %879 = bitcast float %874 to i32
  %880 = select i1 %878, i32 %879, i32 %841
  %881 = bitcast i32 %880 to float
  br label %882

882:                                              ; preds = %873, %837
  %883 = phi i32 [ %880, %873 ], [ %838, %837 ]
  %884 = phi i32 [ %880, %873 ], [ %839, %837 ]
  %885 = phi float [ %881, %873 ], [ %840, %837 ]
  %886 = phi i32 [ %880, %873 ], [ %841, %837 ]
  %887 = phi float [ %881, %873 ], [ %842, %837 ]
  %888 = phi i32 [ %880, %873 ], [ %843, %837 ]
  %889 = phi float [ %881, %873 ], [ %844, %837 ]
  %890 = phi i32 [ %880, %873 ], [ %845, %837 ]
  %891 = phi float [ %881, %873 ], [ %846, %837 ]
  %892 = phi i32 [ %880, %873 ], [ %847, %837 ]
  %893 = phi float [ %881, %873 ], [ %848, %837 ]
  %894 = phi i32 [ %880, %873 ], [ %849, %837 ]
  %895 = phi float [ %881, %873 ], [ %850, %837 ]
  %896 = phi i32 [ %880, %873 ], [ %851, %837 ]
  %897 = phi float [ %881, %873 ], [ %852, %837 ]
  %898 = phi i32 [ %880, %873 ], [ %853, %837 ]
  %899 = phi float [ %881, %873 ], [ %854, %837 ]
  %900 = phi i32 [ %880, %873 ], [ %855, %837 ]
  %901 = phi float [ %881, %873 ], [ %856, %837 ]
  %902 = phi i32 [ %880, %873 ], [ %857, %837 ]
  %903 = phi float [ %881, %873 ], [ %858, %837 ]
  %904 = phi i32 [ %880, %873 ], [ %859, %837 ]
  %905 = phi float [ %881, %873 ], [ %860, %837 ]
  %906 = phi i32 [ %880, %873 ], [ %861, %837 ]
  %907 = phi float [ %881, %873 ], [ %862, %837 ]
  %908 = phi i32 [ %880, %873 ], [ %863, %837 ]
  %909 = phi float [ %881, %873 ], [ %864, %837 ]
  %910 = phi i32 [ %880, %873 ], [ %865, %837 ]
  %911 = phi float [ %881, %873 ], [ %866, %837 ]
  %912 = phi i32 [ %880, %873 ], [ %867, %837 ]
  %913 = phi float [ %881, %873 ], [ %868, %837 ]
  %914 = load float, float* %140, align 4
  %915 = fcmp ogt float %914, %122
  %916 = fcmp olt float %914, %125
  %917 = and i1 %915, %916
  br i1 %917, label %918, label %927

918:                                              ; preds = %882
  %919 = load float, float* %139, align 8
  %920 = load float, float* %166, align 4
  %921 = fcmp ogt float %920, %919
  %922 = select i1 %921, float %919, float %920
  store float %922, float* %166, align 4
  %923 = fcmp olt float %885, %919
  %924 = bitcast float %919 to i32
  %925 = select i1 %923, i32 %924, i32 %884
  %926 = bitcast i32 %925 to float
  br label %927

927:                                              ; preds = %918, %882, %819, %810, %774, %575, %563, %381, %372, %337, %188
  %928 = phi i32 [ %925, %918 ], [ %883, %882 ], [ %826, %819 ], [ %817, %810 ], [ %775, %774 ], [ %189, %575 ], [ %189, %563 ], [ %189, %381 ], [ %189, %372 ], [ %338, %337 ], [ %189, %188 ]
  %929 = phi i32 [ %925, %918 ], [ %884, %882 ], [ %826, %819 ], [ %817, %810 ], [ %776, %774 ], [ %190, %575 ], [ %190, %563 ], [ %190, %381 ], [ %190, %372 ], [ %339, %337 ], [ %190, %188 ]
  %930 = phi float [ %926, %918 ], [ %885, %882 ], [ %827, %819 ], [ %818, %810 ], [ %777, %774 ], [ %191, %575 ], [ %191, %563 ], [ %191, %381 ], [ %191, %372 ], [ %340, %337 ], [ %191, %188 ]
  %931 = phi i32 [ %925, %918 ], [ %886, %882 ], [ %826, %819 ], [ %817, %810 ], [ %778, %774 ], [ %192, %575 ], [ %192, %563 ], [ %192, %381 ], [ %192, %372 ], [ %341, %337 ], [ %192, %188 ]
  %932 = phi float [ %926, %918 ], [ %887, %882 ], [ %827, %819 ], [ %818, %810 ], [ %779, %774 ], [ %193, %575 ], [ %193, %563 ], [ %193, %381 ], [ %193, %372 ], [ %342, %337 ], [ %193, %188 ]
  %933 = phi i32 [ %925, %918 ], [ %888, %882 ], [ %826, %819 ], [ %817, %810 ], [ %780, %774 ], [ %194, %575 ], [ %194, %563 ], [ %194, %381 ], [ %194, %372 ], [ %343, %337 ], [ %194, %188 ]
  %934 = phi float [ %926, %918 ], [ %889, %882 ], [ %827, %819 ], [ %818, %810 ], [ %781, %774 ], [ %195, %575 ], [ %195, %563 ], [ %195, %381 ], [ %195, %372 ], [ %344, %337 ], [ %195, %188 ]
  %935 = phi i32 [ %925, %918 ], [ %890, %882 ], [ %826, %819 ], [ %817, %810 ], [ %782, %774 ], [ %196, %575 ], [ %196, %563 ], [ %196, %381 ], [ %196, %372 ], [ %345, %337 ], [ %196, %188 ]
  %936 = phi float [ %926, %918 ], [ %891, %882 ], [ %827, %819 ], [ %818, %810 ], [ %783, %774 ], [ %197, %575 ], [ %197, %563 ], [ %197, %381 ], [ %197, %372 ], [ %346, %337 ], [ %197, %188 ]
  %937 = phi i32 [ %925, %918 ], [ %892, %882 ], [ %826, %819 ], [ %817, %810 ], [ %784, %774 ], [ %198, %575 ], [ %198, %563 ], [ %198, %381 ], [ %198, %372 ], [ %347, %337 ], [ %198, %188 ]
  %938 = phi float [ %926, %918 ], [ %893, %882 ], [ %827, %819 ], [ %818, %810 ], [ %785, %774 ], [ %199, %575 ], [ %199, %563 ], [ %199, %381 ], [ %199, %372 ], [ %348, %337 ], [ %199, %188 ]
  %939 = phi i32 [ %925, %918 ], [ %894, %882 ], [ %826, %819 ], [ %817, %810 ], [ %786, %774 ], [ %200, %575 ], [ %200, %563 ], [ %200, %381 ], [ %200, %372 ], [ %349, %337 ], [ %200, %188 ]
  %940 = phi float [ %926, %918 ], [ %895, %882 ], [ %827, %819 ], [ %818, %810 ], [ %787, %774 ], [ %201, %575 ], [ %201, %563 ], [ %201, %381 ], [ %201, %372 ], [ %350, %337 ], [ %201, %188 ]
  %941 = phi i32 [ %925, %918 ], [ %896, %882 ], [ %826, %819 ], [ %817, %810 ], [ %788, %774 ], [ %202, %575 ], [ %202, %563 ], [ %202, %381 ], [ %202, %372 ], [ %351, %337 ], [ %202, %188 ]
  %942 = phi float [ %926, %918 ], [ %897, %882 ], [ %827, %819 ], [ %818, %810 ], [ %789, %774 ], [ %203, %575 ], [ %203, %563 ], [ %203, %381 ], [ %203, %372 ], [ %352, %337 ], [ %203, %188 ]
  %943 = phi i32 [ %925, %918 ], [ %898, %882 ], [ %826, %819 ], [ %817, %810 ], [ %790, %774 ], [ %204, %575 ], [ %204, %563 ], [ %204, %381 ], [ %204, %372 ], [ %353, %337 ], [ %204, %188 ]
  %944 = phi float [ %926, %918 ], [ %899, %882 ], [ %827, %819 ], [ %818, %810 ], [ %791, %774 ], [ %205, %575 ], [ %205, %563 ], [ %205, %381 ], [ %205, %372 ], [ %354, %337 ], [ %205, %188 ]
  %945 = phi i32 [ %925, %918 ], [ %900, %882 ], [ %826, %819 ], [ %817, %810 ], [ %792, %774 ], [ %206, %575 ], [ %206, %563 ], [ %206, %381 ], [ %206, %372 ], [ %355, %337 ], [ %206, %188 ]
  %946 = phi float [ %926, %918 ], [ %901, %882 ], [ %827, %819 ], [ %818, %810 ], [ %793, %774 ], [ %207, %575 ], [ %207, %563 ], [ %207, %381 ], [ %207, %372 ], [ %356, %337 ], [ %207, %188 ]
  %947 = phi i32 [ %925, %918 ], [ %902, %882 ], [ %826, %819 ], [ %817, %810 ], [ %794, %774 ], [ %208, %575 ], [ %208, %563 ], [ %208, %381 ], [ %208, %372 ], [ %357, %337 ], [ %208, %188 ]
  %948 = phi float [ %926, %918 ], [ %903, %882 ], [ %827, %819 ], [ %818, %810 ], [ %795, %774 ], [ %209, %575 ], [ %209, %563 ], [ %209, %381 ], [ %209, %372 ], [ %358, %337 ], [ %209, %188 ]
  %949 = phi i32 [ %925, %918 ], [ %904, %882 ], [ %826, %819 ], [ %817, %810 ], [ %796, %774 ], [ %210, %575 ], [ %210, %563 ], [ %210, %381 ], [ %210, %372 ], [ %359, %337 ], [ %210, %188 ]
  %950 = phi float [ %926, %918 ], [ %905, %882 ], [ %827, %819 ], [ %818, %810 ], [ %797, %774 ], [ %211, %575 ], [ %211, %563 ], [ %211, %381 ], [ %211, %372 ], [ %360, %337 ], [ %211, %188 ]
  %951 = phi i32 [ %925, %918 ], [ %906, %882 ], [ %826, %819 ], [ %817, %810 ], [ %798, %774 ], [ %212, %575 ], [ %212, %563 ], [ %212, %381 ], [ %212, %372 ], [ %361, %337 ], [ %212, %188 ]
  %952 = phi float [ %926, %918 ], [ %907, %882 ], [ %827, %819 ], [ %818, %810 ], [ %799, %774 ], [ %213, %575 ], [ %213, %563 ], [ %213, %381 ], [ %213, %372 ], [ %362, %337 ], [ %213, %188 ]
  %953 = phi i32 [ %925, %918 ], [ %908, %882 ], [ %826, %819 ], [ %817, %810 ], [ %800, %774 ], [ %214, %575 ], [ %214, %563 ], [ %214, %381 ], [ %214, %372 ], [ %363, %337 ], [ %214, %188 ]
  %954 = phi float [ %926, %918 ], [ %909, %882 ], [ %827, %819 ], [ %818, %810 ], [ %801, %774 ], [ %215, %575 ], [ %215, %563 ], [ %215, %381 ], [ %215, %372 ], [ %364, %337 ], [ %215, %188 ]
  %955 = phi i32 [ %925, %918 ], [ %910, %882 ], [ %826, %819 ], [ %817, %810 ], [ %802, %774 ], [ %216, %575 ], [ %216, %563 ], [ %216, %381 ], [ %216, %372 ], [ %365, %337 ], [ %216, %188 ]
  %956 = phi float [ %926, %918 ], [ %911, %882 ], [ %827, %819 ], [ %818, %810 ], [ %803, %774 ], [ %217, %575 ], [ %217, %563 ], [ %217, %381 ], [ %217, %372 ], [ %366, %337 ], [ %217, %188 ]
  %957 = phi i32 [ %925, %918 ], [ %912, %882 ], [ %826, %819 ], [ %817, %810 ], [ %804, %774 ], [ %218, %575 ], [ %218, %563 ], [ %218, %381 ], [ %218, %372 ], [ %367, %337 ], [ %218, %188 ]
  %958 = phi float [ %926, %918 ], [ %913, %882 ], [ %827, %819 ], [ %818, %810 ], [ %805, %774 ], [ %219, %575 ], [ %219, %563 ], [ %219, %381 ], [ %219, %372 ], [ %368, %337 ], [ %219, %188 ]
  br label %188

959:                                              ; preds = %188
  %960 = load i32, i32* %14, align 4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %141) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %130)
  %961 = bitcast i8* %97 to i32*
  store i32 %960, i32* %961, align 4
  %962 = bitcast i8* %99 to i32*
  store i32 %189, i32* %962, align 4
  %963 = bitcast i32 %960 to float
  %964 = bitcast i32 %189 to float
  %965 = fcmp ult float %963, %964
  br i1 %965, label %967, label %966

966:                                              ; preds = %959
  store float 0x47EFFFFFE0000000, float* %98, align 8
  store float 0xC7EFFFFFE0000000, float* %100, align 4
  br label %982

967:                                              ; preds = %959
  %968 = icmp eq float* %4, null
  br i1 %968, label %979, label %969

969:                                              ; preds = %967
  %970 = load i32, i32* %5, align 4
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds float, float* %4, i64 %971
  %973 = fmul float %963, %2
  %974 = fadd float %973, %3
  %975 = getelementptr inbounds float, float* %972, i64 1
  store float %974, float* %972, align 4
  %976 = load float, float* %100, align 4
  %977 = fmul float %976, %2
  %978 = fadd float %977, %3
  store float %978, float* %975, align 4
  br label %979

979:                                              ; preds = %967, %969
  %980 = load i32, i32* %5, align 4
  %981 = add nsw i32 %980, 2
  store i32 %981, i32* %5, align 4
  br label %982

982:                                              ; preds = %966, %979, %124, %119, %41, %59
  ret void
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #5

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #5

declare void @_ZN6SkPath4IterC1ERKS_b(%"class.SkPath::Iter"*, %class.SkPath* dereferenceable(16), i1 zeroext) unnamed_addr #5

declare i32 @_ZN6SkPath4Iter4nextEP7SkPoint(%"class.SkPath::Iter"*, %struct.SkPoint*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare i32 @_ZNK7SkDQuad19horizontalIntersectEdPd(%struct.SkDQuad*, double, double*) local_unnamed_addr #5

declare { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #5

declare i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic*, double, double*) local_unnamed_addr #5

declare { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #5

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #5

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeIN7SkGlyph8PathDataEJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS4_ENUlPcE_8__invokeESD_(i8*) #10 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -41
  %3 = getelementptr inbounds i8, i8* %0, i64 -33
  %4 = bitcast i8* %3 to %class.SkPath*
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %4) #12
  ret i8* %2
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK7SkGlyph4maskEv: argument 0"}
!4 = distinct !{!4, !"_ZNK7SkGlyph4maskEv"}
!5 = !{i8 0, i8 2}
