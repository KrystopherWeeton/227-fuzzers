; ModuleID = '../../third_party/flac/src/libFLAC/lpc.c'
source_filename = "../../third_party/flac/src/libFLAC/lpc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN = external local_unnamed_addr constant i32, align 4
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [108 x i8] c"FLAC__lpc_quantize_coefficients: quantizer overflow: q>qmax %d>%d shift=%d cmax=%f precision=%u lpc[%u]=%f\0A\00", align 1
@.str.1 = private unnamed_addr constant [108 x i8] c"FLAC__lpc_quantize_coefficients: quantizer overflow: q<qmin %d<%d shift=%d cmax=%f precision=%u lpc[%u]=%f\0A\00", align 1
@.str.2 = private unnamed_addr constant [94 x i8] c"FLAC__lpc_compute_residual_from_qlp_coefficients: OVERFLOW, i=%u, j=%u, c=%d, d=%d, sumo=%ld\0A\00", align 1
@.str.3 = private unnamed_addr constant [80 x i8] c"FLAC__lpc_compute_residual_from_qlp_coefficients_wide: OVERFLOW, i=%u, sum=%ld\0A\00", align 1
@.str.4 = private unnamed_addr constant [103 x i8] c"FLAC__lpc_compute_residual_from_qlp_coefficients_wide: OVERFLOW, i=%u, data=%d, sum=%ld, residual=%ld\0A\00", align 1
@.str.5 = private unnamed_addr constant [70 x i8] c"FLAC__lpc_restore_signal: OVERFLOW, i=%u, j=%u, c=%d, d=%d, sumo=%ld\0A\00", align 1
@.str.6 = private unnamed_addr constant [56 x i8] c"FLAC__lpc_restore_signal_wide: OVERFLOW, i=%u, sum=%ld\0A\00", align 1
@.str.7 = private unnamed_addr constant [79 x i8] c"FLAC__lpc_restore_signal_wide: OVERFLOW, i=%u, residual=%d, sum=%ld, data=%ld\0A\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @FLAC__lpc_window_data(i32* nocapture readonly, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %141, label %6

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 8
  br i1 %8, label %104, label %9

9:                                                ; preds = %6
  %10 = getelementptr float, float* %2, i64 %7
  %11 = getelementptr i32, i32* %0, i64 %7
  %12 = getelementptr float, float* %1, i64 %7
  %13 = bitcast i32* %11 to float*
  %14 = icmp ugt float* %13, %2
  %15 = bitcast float* %10 to i32*
  %16 = icmp ugt i32* %15, %0
  %17 = and i1 %14, %16
  %18 = icmp ugt float* %12, %2
  %19 = icmp ugt float* %10, %1
  %20 = and i1 %18, %19
  %21 = or i1 %17, %20
  br i1 %21, label %104, label %22

22:                                               ; preds = %9
  %23 = and i64 %7, 4294967288
  %24 = add nsw i64 %23, -8
  %25 = lshr exact i64 %24, 3
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 1
  %28 = icmp eq i64 %24, 0
  br i1 %28, label %78, label %29

29:                                               ; preds = %22
  %30 = sub nuw nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %75, %31 ]
  %33 = phi i64 [ %30, %29 ], [ %76, %31 ]
  %34 = getelementptr inbounds i32, i32* %0, i64 %32
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4, !alias.scope !2
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4, !alias.scope !2
  %40 = sitofp <4 x i32> %36 to <4 x float>
  %41 = sitofp <4 x i32> %39 to <4 x float>
  %42 = getelementptr inbounds float, float* %1, i64 %32
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 4, !alias.scope !5
  %45 = getelementptr inbounds float, float* %42, i64 4
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4, !alias.scope !5
  %48 = fmul <4 x float> %44, %40
  %49 = fmul <4 x float> %47, %41
  %50 = getelementptr inbounds float, float* %2, i64 %32
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %48, <4 x float>* %51, align 4, !alias.scope !7, !noalias !9
  %52 = getelementptr inbounds float, float* %50, i64 4
  %53 = bitcast float* %52 to <4 x float>*
  store <4 x float> %49, <4 x float>* %53, align 4, !alias.scope !7, !noalias !9
  %54 = or i64 %32, 8
  %55 = getelementptr inbounds i32, i32* %0, i64 %54
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4, !alias.scope !2
  %58 = getelementptr inbounds i32, i32* %55, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4, !alias.scope !2
  %61 = sitofp <4 x i32> %57 to <4 x float>
  %62 = sitofp <4 x i32> %60 to <4 x float>
  %63 = getelementptr inbounds float, float* %1, i64 %54
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !alias.scope !5
  %66 = getelementptr inbounds float, float* %63, i64 4
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 4, !alias.scope !5
  %69 = fmul <4 x float> %65, %61
  %70 = fmul <4 x float> %68, %62
  %71 = getelementptr inbounds float, float* %2, i64 %54
  %72 = bitcast float* %71 to <4 x float>*
  store <4 x float> %69, <4 x float>* %72, align 4, !alias.scope !7, !noalias !9
  %73 = getelementptr inbounds float, float* %71, i64 4
  %74 = bitcast float* %73 to <4 x float>*
  store <4 x float> %70, <4 x float>* %74, align 4, !alias.scope !7, !noalias !9
  %75 = add i64 %32, 16
  %76 = add i64 %33, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %31, !llvm.loop !10

78:                                               ; preds = %31, %22
  %79 = phi i64 [ 0, %22 ], [ %75, %31 ]
  %80 = icmp eq i64 %27, 0
  br i1 %80, label %102, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds i32, i32* %0, i64 %79
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !2
  %85 = getelementptr inbounds i32, i32* %82, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !alias.scope !2
  %88 = sitofp <4 x i32> %84 to <4 x float>
  %89 = sitofp <4 x i32> %87 to <4 x float>
  %90 = getelementptr inbounds float, float* %1, i64 %79
  %91 = bitcast float* %90 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 4, !alias.scope !5
  %93 = getelementptr inbounds float, float* %90, i64 4
  %94 = bitcast float* %93 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 4, !alias.scope !5
  %96 = fmul <4 x float> %92, %88
  %97 = fmul <4 x float> %95, %89
  %98 = getelementptr inbounds float, float* %2, i64 %79
  %99 = bitcast float* %98 to <4 x float>*
  store <4 x float> %96, <4 x float>* %99, align 4, !alias.scope !7, !noalias !9
  %100 = getelementptr inbounds float, float* %98, i64 4
  %101 = bitcast float* %100 to <4 x float>*
  store <4 x float> %97, <4 x float>* %101, align 4, !alias.scope !7, !noalias !9
  br label %102

102:                                              ; preds = %78, %81
  %103 = icmp eq i64 %23, %7
  br i1 %103, label %141, label %104

104:                                              ; preds = %102, %9, %6
  %105 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %23, %102 ]
  %106 = xor i64 %105, -1
  %107 = and i64 %7, 1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %118, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds i32, i32* %0, i64 %105
  %111 = load i32, i32* %110, align 4
  %112 = sitofp i32 %111 to float
  %113 = getelementptr inbounds float, float* %1, i64 %105
  %114 = load float, float* %113, align 4
  %115 = fmul float %114, %112
  %116 = getelementptr inbounds float, float* %2, i64 %105
  store float %115, float* %116, align 4
  %117 = or i64 %105, 1
  br label %118

118:                                              ; preds = %104, %109
  %119 = phi i64 [ %105, %104 ], [ %117, %109 ]
  %120 = sub nsw i64 0, %7
  %121 = icmp eq i64 %106, %120
  br i1 %121, label %141, label %122

122:                                              ; preds = %118, %122
  %123 = phi i64 [ %139, %122 ], [ %119, %118 ]
  %124 = getelementptr inbounds i32, i32* %0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = sitofp i32 %125 to float
  %127 = getelementptr inbounds float, float* %1, i64 %123
  %128 = load float, float* %127, align 4
  %129 = fmul float %128, %126
  %130 = getelementptr inbounds float, float* %2, i64 %123
  store float %129, float* %130, align 4
  %131 = add nuw nsw i64 %123, 1
  %132 = getelementptr inbounds i32, i32* %0, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = sitofp i32 %133 to float
  %135 = getelementptr inbounds float, float* %1, i64 %131
  %136 = load float, float* %135, align 4
  %137 = fmul float %136, %134
  %138 = getelementptr inbounds float, float* %2, i64 %131
  store float %137, float* %138, align 4
  %139 = add nuw nsw i64 %123, 2
  %140 = icmp eq i64 %139, %7
  br i1 %140, label %141, label %122, !llvm.loop !12

141:                                              ; preds = %118, %122, %102, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @FLAC__lpc_compute_autocorrelation(float* nocapture readonly, i32, i32, float* nocapture) local_unnamed_addr #0 {
  %5 = sub i32 %1, %2
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %4
  %8 = bitcast float* %3 to i8*
  %9 = zext i32 %2 to i64
  %10 = shl nuw nsw i64 %9, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 %10, i1 false)
  br label %11

11:                                               ; preds = %7, %4
  %12 = zext i32 %2 to i64
  %13 = add nsw i64 %12, -1
  %14 = getelementptr float, float* %3, i64 %12
  %15 = getelementptr float, float* %0, i64 %12
  %16 = and i64 %12, 4294967288
  %17 = add nsw i64 %16, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i32 %2, 8
  %21 = trunc i64 %13 to i32
  %22 = icmp ugt i64 %13, 4294967295
  %23 = and i64 %12, 4294967288
  %24 = and i64 %19, 1
  %25 = icmp eq i64 %17, 0
  %26 = sub nuw nsw i64 %19, %24
  %27 = icmp eq i64 %24, 0
  %28 = icmp eq i64 %23, %12
  %29 = and i64 %12, 1
  %30 = icmp eq i64 %29, 0
  %31 = sub nsw i64 0, %12
  br label %38

32:                                               ; preds = %174
  %33 = icmp ult i32 %175, %1
  br i1 %33, label %34, label %348

34:                                               ; preds = %32
  %35 = sub i32 %1, %175
  %36 = zext i32 %175 to i64
  %37 = zext i32 %1 to i64
  br label %177

38:                                               ; preds = %11, %174
  %39 = phi i32 [ 0, %11 ], [ %175, %174 ]
  %40 = zext i32 %39 to i64
  %41 = getelementptr float, float* %0, i64 %40
  %42 = getelementptr float, float* %15, i64 %40
  %43 = zext i32 %39 to i64
  %44 = getelementptr inbounds float, float* %0, i64 %43
  %45 = load float, float* %44, align 4
  br i1 %6, label %174, label %46

46:                                               ; preds = %38
  br i1 %20, label %134, label %47

47:                                               ; preds = %46
  %48 = xor i32 %39, -1
  %49 = icmp ult i32 %48, %21
  %50 = or i1 %49, %22
  br i1 %50, label %134, label %51

51:                                               ; preds = %47
  %52 = icmp ugt float* %42, %3
  %53 = icmp ult float* %41, %14
  %54 = and i1 %52, %53
  br i1 %54, label %134, label %55

55:                                               ; preds = %51
  %56 = insertelement <4 x float> undef, float %45, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = insertelement <4 x float> undef, float %45, i32 0
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %25, label %109, label %60

60:                                               ; preds = %55, %60
  %61 = phi i64 [ %106, %60 ], [ 0, %55 ]
  %62 = phi i64 [ %107, %60 ], [ %26, %55 ]
  %63 = trunc i64 %61 to i32
  %64 = add i32 %39, %63
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %0, i64 %65
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 4, !alias.scope !13
  %69 = getelementptr inbounds float, float* %66, i64 4
  %70 = bitcast float* %69 to <4 x float>*
  %71 = load <4 x float>, <4 x float>* %70, align 4, !alias.scope !13
  %72 = fmul <4 x float> %57, %68
  %73 = fmul <4 x float> %59, %71
  %74 = getelementptr inbounds float, float* %3, i64 %61
  %75 = bitcast float* %74 to <4 x float>*
  %76 = load <4 x float>, <4 x float>* %75, align 4, !alias.scope !16, !noalias !13
  %77 = getelementptr inbounds float, float* %74, i64 4
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 4, !alias.scope !16, !noalias !13
  %80 = fadd <4 x float> %76, %72
  %81 = fadd <4 x float> %79, %73
  %82 = bitcast float* %74 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !alias.scope !16, !noalias !13
  %83 = bitcast float* %77 to <4 x float>*
  store <4 x float> %81, <4 x float>* %83, align 4, !alias.scope !16, !noalias !13
  %84 = or i64 %61, 8
  %85 = trunc i64 %84 to i32
  %86 = add i32 %39, %85
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %0, i64 %87
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 4, !alias.scope !13
  %91 = getelementptr inbounds float, float* %88, i64 4
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 4, !alias.scope !13
  %94 = fmul <4 x float> %57, %90
  %95 = fmul <4 x float> %59, %93
  %96 = getelementptr inbounds float, float* %3, i64 %84
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 4, !alias.scope !16, !noalias !13
  %99 = getelementptr inbounds float, float* %96, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 4, !alias.scope !16, !noalias !13
  %102 = fadd <4 x float> %98, %94
  %103 = fadd <4 x float> %101, %95
  %104 = bitcast float* %96 to <4 x float>*
  store <4 x float> %102, <4 x float>* %104, align 4, !alias.scope !16, !noalias !13
  %105 = bitcast float* %99 to <4 x float>*
  store <4 x float> %103, <4 x float>* %105, align 4, !alias.scope !16, !noalias !13
  %106 = add i64 %61, 16
  %107 = add i64 %62, -2
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %60, !llvm.loop !18

109:                                              ; preds = %60, %55
  %110 = phi i64 [ 0, %55 ], [ %106, %60 ]
  br i1 %27, label %133, label %111

111:                                              ; preds = %109
  %112 = trunc i64 %110 to i32
  %113 = add i32 %39, %112
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds float, float* %0, i64 %114
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 4, !alias.scope !13
  %118 = getelementptr inbounds float, float* %115, i64 4
  %119 = bitcast float* %118 to <4 x float>*
  %120 = load <4 x float>, <4 x float>* %119, align 4, !alias.scope !13
  %121 = fmul <4 x float> %57, %117
  %122 = fmul <4 x float> %59, %120
  %123 = getelementptr inbounds float, float* %3, i64 %110
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 4, !alias.scope !16, !noalias !13
  %126 = getelementptr inbounds float, float* %123, i64 4
  %127 = bitcast float* %126 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 4, !alias.scope !16, !noalias !13
  %129 = fadd <4 x float> %125, %121
  %130 = fadd <4 x float> %128, %122
  %131 = bitcast float* %123 to <4 x float>*
  store <4 x float> %129, <4 x float>* %131, align 4, !alias.scope !16, !noalias !13
  %132 = bitcast float* %126 to <4 x float>*
  store <4 x float> %130, <4 x float>* %132, align 4, !alias.scope !16, !noalias !13
  br label %133

133:                                              ; preds = %109, %111
  br i1 %28, label %174, label %134

134:                                              ; preds = %133, %51, %47, %46
  %135 = phi i64 [ 0, %51 ], [ 0, %47 ], [ 0, %46 ], [ %23, %133 ]
  %136 = xor i64 %135, -1
  br i1 %30, label %148, label %137

137:                                              ; preds = %134
  %138 = trunc i64 %135 to i32
  %139 = add i32 %39, %138
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds float, float* %0, i64 %140
  %142 = load float, float* %141, align 4
  %143 = fmul float %45, %142
  %144 = getelementptr inbounds float, float* %3, i64 %135
  %145 = load float, float* %144, align 4
  %146 = fadd float %145, %143
  store float %146, float* %144, align 4
  %147 = or i64 %135, 1
  br label %148

148:                                              ; preds = %137, %134
  %149 = phi i64 [ %147, %137 ], [ %135, %134 ]
  %150 = icmp eq i64 %136, %31
  br i1 %150, label %174, label %151

151:                                              ; preds = %148, %151
  %152 = phi i64 [ %172, %151 ], [ %149, %148 ]
  %153 = trunc i64 %152 to i32
  %154 = add i32 %39, %153
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds float, float* %0, i64 %155
  %157 = load float, float* %156, align 4
  %158 = fmul float %45, %157
  %159 = getelementptr inbounds float, float* %3, i64 %152
  %160 = load float, float* %159, align 4
  %161 = fadd float %160, %158
  store float %161, float* %159, align 4
  %162 = add nuw nsw i64 %152, 1
  %163 = trunc i64 %162 to i32
  %164 = add i32 %39, %163
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %0, i64 %165
  %167 = load float, float* %166, align 4
  %168 = fmul float %45, %167
  %169 = getelementptr inbounds float, float* %3, i64 %162
  %170 = load float, float* %169, align 4
  %171 = fadd float %170, %168
  store float %171, float* %169, align 4
  %172 = add nuw nsw i64 %152, 2
  %173 = icmp eq i64 %172, %12
  br i1 %173, label %174, label %151, !llvm.loop !19

174:                                              ; preds = %148, %151, %133, %38
  %175 = add i32 %39, 1
  %176 = icmp ugt i32 %175, %5
  br i1 %176, label %32, label %38

177:                                              ; preds = %343, %34
  %178 = phi i32 [ %347, %343 ], [ 0, %34 ]
  %179 = phi i64 [ %344, %343 ], [ %36, %34 ]
  %180 = phi i32 [ %345, %343 ], [ %35, %34 ]
  %181 = sub i32 %35, %178
  %182 = zext i32 %181 to i64
  %183 = sub i32 %35, %178
  %184 = and i32 %183, -8
  %185 = zext i32 %184 to i64
  %186 = add nsw i64 %185, -8
  %187 = lshr exact i64 %186, 3
  %188 = add nuw nsw i64 %187, 1
  %189 = sub i32 %35, %178
  %190 = zext i32 %189 to i64
  %191 = getelementptr float, float* %3, i64 %190
  %192 = add i32 %175, %178
  %193 = zext i32 %192 to i64
  %194 = getelementptr float, float* %0, i64 %193
  %195 = add nuw nsw i64 %193, %190
  %196 = getelementptr float, float* %0, i64 %195
  %197 = sub i32 %35, %178
  %198 = zext i32 %197 to i64
  %199 = add nsw i64 %198, -1
  %200 = add i32 %175, %178
  %201 = sub i32 %35, %178
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds float, float* %0, i64 %179
  %204 = load float, float* %203, align 4
  %205 = trunc i64 %179 to i32
  %206 = icmp eq i32 %205, %1
  br i1 %206, label %343, label %207

207:                                              ; preds = %177
  %208 = zext i32 %180 to i64
  %209 = icmp ult i32 %201, 8
  br i1 %209, label %303, label %210

210:                                              ; preds = %207
  %211 = trunc i64 %199 to i32
  %212 = xor i32 %200, -1
  %213 = icmp ult i32 %212, %211
  %214 = icmp ugt i64 %199, 4294967295
  %215 = or i1 %213, %214
  br i1 %215, label %303, label %216

216:                                              ; preds = %210
  %217 = icmp ugt float* %196, %3
  %218 = icmp ult float* %194, %191
  %219 = and i1 %217, %218
  br i1 %219, label %303, label %220

220:                                              ; preds = %216
  %221 = and i64 %202, 4294967288
  %222 = insertelement <4 x float> undef, float %204, i32 0
  %223 = shufflevector <4 x float> %222, <4 x float> undef, <4 x i32> zeroinitializer
  %224 = insertelement <4 x float> undef, float %204, i32 0
  %225 = shufflevector <4 x float> %224, <4 x float> undef, <4 x i32> zeroinitializer
  %226 = and i64 %188, 1
  %227 = icmp eq i64 %186, 0
  br i1 %227, label %277, label %228

228:                                              ; preds = %220
  %229 = sub nuw nsw i64 %188, %226
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %274, %230 ]
  %232 = phi i64 [ %229, %228 ], [ %275, %230 ]
  %233 = add nuw i64 %231, %179
  %234 = and i64 %233, 4294967295
  %235 = getelementptr inbounds float, float* %0, i64 %234
  %236 = bitcast float* %235 to <4 x float>*
  %237 = load <4 x float>, <4 x float>* %236, align 4, !alias.scope !20
  %238 = getelementptr inbounds float, float* %235, i64 4
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 4, !alias.scope !20
  %241 = fmul <4 x float> %223, %237
  %242 = fmul <4 x float> %225, %240
  %243 = getelementptr inbounds float, float* %3, i64 %231
  %244 = bitcast float* %243 to <4 x float>*
  %245 = load <4 x float>, <4 x float>* %244, align 4, !alias.scope !23, !noalias !20
  %246 = getelementptr inbounds float, float* %243, i64 4
  %247 = bitcast float* %246 to <4 x float>*
  %248 = load <4 x float>, <4 x float>* %247, align 4, !alias.scope !23, !noalias !20
  %249 = fadd <4 x float> %245, %241
  %250 = fadd <4 x float> %248, %242
  %251 = bitcast float* %243 to <4 x float>*
  store <4 x float> %249, <4 x float>* %251, align 4, !alias.scope !23, !noalias !20
  %252 = bitcast float* %246 to <4 x float>*
  store <4 x float> %250, <4 x float>* %252, align 4, !alias.scope !23, !noalias !20
  %253 = or i64 %231, 8
  %254 = add nuw i64 %253, %179
  %255 = and i64 %254, 4294967295
  %256 = getelementptr inbounds float, float* %0, i64 %255
  %257 = bitcast float* %256 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 4, !alias.scope !20
  %259 = getelementptr inbounds float, float* %256, i64 4
  %260 = bitcast float* %259 to <4 x float>*
  %261 = load <4 x float>, <4 x float>* %260, align 4, !alias.scope !20
  %262 = fmul <4 x float> %223, %258
  %263 = fmul <4 x float> %225, %261
  %264 = getelementptr inbounds float, float* %3, i64 %253
  %265 = bitcast float* %264 to <4 x float>*
  %266 = load <4 x float>, <4 x float>* %265, align 4, !alias.scope !23, !noalias !20
  %267 = getelementptr inbounds float, float* %264, i64 4
  %268 = bitcast float* %267 to <4 x float>*
  %269 = load <4 x float>, <4 x float>* %268, align 4, !alias.scope !23, !noalias !20
  %270 = fadd <4 x float> %266, %262
  %271 = fadd <4 x float> %269, %263
  %272 = bitcast float* %264 to <4 x float>*
  store <4 x float> %270, <4 x float>* %272, align 4, !alias.scope !23, !noalias !20
  %273 = bitcast float* %267 to <4 x float>*
  store <4 x float> %271, <4 x float>* %273, align 4, !alias.scope !23, !noalias !20
  %274 = add i64 %231, 16
  %275 = add i64 %232, -2
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %230, !llvm.loop !25

277:                                              ; preds = %230, %220
  %278 = phi i64 [ 0, %220 ], [ %274, %230 ]
  %279 = icmp eq i64 %226, 0
  br i1 %279, label %301, label %280

280:                                              ; preds = %277
  %281 = add nuw i64 %278, %179
  %282 = and i64 %281, 4294967295
  %283 = getelementptr inbounds float, float* %0, i64 %282
  %284 = bitcast float* %283 to <4 x float>*
  %285 = load <4 x float>, <4 x float>* %284, align 4, !alias.scope !20
  %286 = getelementptr inbounds float, float* %283, i64 4
  %287 = bitcast float* %286 to <4 x float>*
  %288 = load <4 x float>, <4 x float>* %287, align 4, !alias.scope !20
  %289 = fmul <4 x float> %223, %285
  %290 = fmul <4 x float> %225, %288
  %291 = getelementptr inbounds float, float* %3, i64 %278
  %292 = bitcast float* %291 to <4 x float>*
  %293 = load <4 x float>, <4 x float>* %292, align 4, !alias.scope !23, !noalias !20
  %294 = getelementptr inbounds float, float* %291, i64 4
  %295 = bitcast float* %294 to <4 x float>*
  %296 = load <4 x float>, <4 x float>* %295, align 4, !alias.scope !23, !noalias !20
  %297 = fadd <4 x float> %293, %289
  %298 = fadd <4 x float> %296, %290
  %299 = bitcast float* %291 to <4 x float>*
  store <4 x float> %297, <4 x float>* %299, align 4, !alias.scope !23, !noalias !20
  %300 = bitcast float* %294 to <4 x float>*
  store <4 x float> %298, <4 x float>* %300, align 4, !alias.scope !23, !noalias !20
  br label %301

301:                                              ; preds = %277, %280
  %302 = icmp eq i64 %221, %202
  br i1 %302, label %343, label %303

303:                                              ; preds = %301, %216, %210, %207
  %304 = phi i64 [ 0, %216 ], [ 0, %210 ], [ 0, %207 ], [ %221, %301 ]
  %305 = xor i64 %304, -1
  %306 = and i64 %182, 1
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %318, label %308

308:                                              ; preds = %303
  %309 = add nuw i64 %304, %179
  %310 = and i64 %309, 4294967295
  %311 = getelementptr inbounds float, float* %0, i64 %310
  %312 = load float, float* %311, align 4
  %313 = fmul float %204, %312
  %314 = getelementptr inbounds float, float* %3, i64 %304
  %315 = load float, float* %314, align 4
  %316 = fadd float %315, %313
  store float %316, float* %314, align 4
  %317 = or i64 %304, 1
  br label %318

318:                                              ; preds = %308, %303
  %319 = phi i64 [ %317, %308 ], [ %304, %303 ]
  %320 = sub nsw i64 0, %182
  %321 = icmp eq i64 %305, %320
  br i1 %321, label %343, label %322

322:                                              ; preds = %318, %322
  %323 = phi i64 [ %341, %322 ], [ %319, %318 ]
  %324 = add nuw i64 %323, %179
  %325 = and i64 %324, 4294967295
  %326 = getelementptr inbounds float, float* %0, i64 %325
  %327 = load float, float* %326, align 4
  %328 = fmul float %204, %327
  %329 = getelementptr inbounds float, float* %3, i64 %323
  %330 = load float, float* %329, align 4
  %331 = fadd float %330, %328
  store float %331, float* %329, align 4
  %332 = add nuw nsw i64 %323, 1
  %333 = add nuw i64 %332, %179
  %334 = and i64 %333, 4294967295
  %335 = getelementptr inbounds float, float* %0, i64 %334
  %336 = load float, float* %335, align 4
  %337 = fmul float %204, %336
  %338 = getelementptr inbounds float, float* %3, i64 %332
  %339 = load float, float* %338, align 4
  %340 = fadd float %339, %337
  store float %340, float* %338, align 4
  %341 = add nuw nsw i64 %323, 2
  %342 = icmp eq i64 %341, %208
  br i1 %342, label %343, label %322, !llvm.loop !26

343:                                              ; preds = %318, %322, %301, %177
  %344 = add nuw nsw i64 %179, 1
  %345 = add i32 %180, -1
  %346 = icmp eq i64 %344, %37
  %347 = add i32 %178, 1
  br i1 %346, label %348, label %177

348:                                              ; preds = %343, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FLAC__lpc_compute_lp_coefficients(float* nocapture readonly, i32* nocapture, [32 x float]* nocapture, double* nocapture) local_unnamed_addr #2 {
  %5 = alloca [32 x double], align 16
  %6 = bitcast [32 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 256, i1 false)
  %7 = load float, float* %0, align 4
  %8 = fpext float %7 to double
  br label %9

9:                                                ; preds = %196, %4
  %10 = phi i64 [ %24, %196 ], [ 0, %4 ]
  %11 = phi double [ %197, %196 ], [ %8, %4 ]
  %12 = trunc i64 %10 to i32
  %13 = add i32 %12, -3
  %14 = lshr i32 %13, 2
  %15 = add nuw nsw i32 %14, 1
  %16 = trunc i64 %10 to i32
  %17 = add i32 %16, 1
  %18 = trunc i64 %10 to i32
  %19 = lshr i32 %18, 1
  %20 = load i32, i32* %1, align 4
  %21 = zext i32 %20 to i64
  %22 = icmp ult i64 %10, %21
  br i1 %22, label %23, label %202

23:                                               ; preds = %9
  %24 = add nuw nsw i64 %10, 1
  %25 = getelementptr inbounds float, float* %0, i64 %24
  %26 = load float, float* %25, align 4
  %27 = fsub float -0.000000e+00, %26
  %28 = fpext float %27 to double
  %29 = icmp eq i64 %10, 0
  br i1 %29, label %76, label %30

30:                                               ; preds = %23
  %31 = and i64 %10, 1
  %32 = icmp eq i64 %10, 1
  br i1 %32, label %61, label %33

33:                                               ; preds = %30
  %34 = sub nsw i64 %10, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %58, %35 ]
  %37 = phi double [ %28, %33 ], [ %57, %35 ]
  %38 = phi i64 [ %34, %33 ], [ %59, %35 ]
  %39 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %36
  %40 = load double, double* %39, align 16
  %41 = sub nsw i64 %10, %36
  %42 = and i64 %41, 4294967295
  %43 = getelementptr inbounds float, float* %0, i64 %42
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = fmul double %40, %45
  %47 = fsub double %37, %46
  %48 = or i64 %36, 1
  %49 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %48
  %50 = load double, double* %49, align 8
  %51 = sub nsw i64 %10, %48
  %52 = and i64 %51, 4294967295
  %53 = getelementptr inbounds float, float* %0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = fpext float %54 to double
  %56 = fmul double %50, %55
  %57 = fsub double %47, %56
  %58 = add nuw nsw i64 %36, 2
  %59 = add i64 %38, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %35

61:                                               ; preds = %35, %30
  %62 = phi double [ undef, %30 ], [ %57, %35 ]
  %63 = phi i64 [ 0, %30 ], [ %58, %35 ]
  %64 = phi double [ %28, %30 ], [ %57, %35 ]
  %65 = icmp eq i64 %31, 0
  br i1 %65, label %76, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %63
  %68 = load double, double* %67, align 8
  %69 = sub nsw i64 %10, %63
  %70 = and i64 %69, 4294967295
  %71 = getelementptr inbounds float, float* %0, i64 %70
  %72 = load float, float* %71, align 4
  %73 = fpext float %72 to double
  %74 = fmul double %68, %73
  %75 = fsub double %64, %74
  br label %76

76:                                               ; preds = %66, %61, %23
  %77 = phi double [ %28, %23 ], [ %62, %61 ], [ %75, %66 ]
  %78 = fdiv double %77, %11
  %79 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %10
  store double %78, double* %79, align 8
  %80 = icmp eq i32 %19, 0
  br i1 %80, label %101, label %81

81:                                               ; preds = %76
  %82 = zext i32 %19 to i64
  br label %83

83:                                               ; preds = %83, %81
  %84 = phi i64 [ 0, %81 ], [ %98, %83 ]
  %85 = phi i32 [ 0, %81 ], [ %99, %83 ]
  %86 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %84
  %87 = load double, double* %86, align 8
  %88 = xor i32 %85, -1
  %89 = add i32 %18, %88
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %90
  %92 = load double, double* %91, align 8
  %93 = fmul double %78, %92
  %94 = fadd double %87, %93
  store double %94, double* %86, align 8
  %95 = fmul double %78, %87
  %96 = load double, double* %91, align 8
  %97 = fadd double %95, %96
  store double %97, double* %91, align 8
  %98 = add nuw nsw i64 %84, 1
  %99 = add nuw nsw i32 %85, 1
  %100 = icmp eq i64 %98, %82
  br i1 %100, label %101, label %83

101:                                              ; preds = %83, %76
  %102 = and i32 %18, 1
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %101
  %105 = zext i32 %19 to i64
  %106 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %105
  %107 = load double, double* %106, align 8
  %108 = fmul double %78, %107
  %109 = fadd double %107, %108
  store double %109, double* %106, align 8
  br label %110

110:                                              ; preds = %101, %104
  %111 = fmul double %78, %78
  %112 = fsub double 1.000000e+00, %111
  %113 = icmp ult i32 %17, 4
  br i1 %113, label %183, label %114

114:                                              ; preds = %110
  %115 = trunc i64 %10 to i32
  %116 = icmp eq i32 %115, -1
  %117 = icmp ugt i64 %10, 4294967295
  %118 = or i1 %116, %117
  br i1 %118, label %183, label %119

119:                                              ; preds = %114
  %120 = and i32 %17, -4
  %121 = and i32 %15, 1
  %122 = icmp eq i32 %14, 0
  br i1 %122, label %162, label %123

123:                                              ; preds = %119
  %124 = sub nuw nsw i32 %15, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i32 [ 0, %123 ], [ %159, %125 ]
  %127 = phi i32 [ %124, %123 ], [ %160, %125 ]
  %128 = zext i32 %126 to i64
  %129 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %128
  %130 = bitcast double* %129 to <2 x double>*
  %131 = load <2 x double>, <2 x double>* %130, align 16
  %132 = getelementptr inbounds double, double* %129, i64 2
  %133 = bitcast double* %132 to <2 x double>*
  %134 = load <2 x double>, <2 x double>* %133, align 16
  %135 = fptrunc <2 x double> %131 to <2 x float>
  %136 = fptrunc <2 x double> %134 to <2 x float>
  %137 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %135
  %138 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %136
  %139 = getelementptr inbounds [32 x float], [32 x float]* %2, i64 %10, i64 %128
  %140 = bitcast float* %139 to <2 x float>*
  store <2 x float> %137, <2 x float>* %140, align 4
  %141 = getelementptr inbounds float, float* %139, i64 2
  %142 = bitcast float* %141 to <2 x float>*
  store <2 x float> %138, <2 x float>* %142, align 4
  %143 = or i32 %126, 4
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %144
  %146 = bitcast double* %145 to <2 x double>*
  %147 = load <2 x double>, <2 x double>* %146, align 16
  %148 = getelementptr inbounds double, double* %145, i64 2
  %149 = bitcast double* %148 to <2 x double>*
  %150 = load <2 x double>, <2 x double>* %149, align 16
  %151 = fptrunc <2 x double> %147 to <2 x float>
  %152 = fptrunc <2 x double> %150 to <2 x float>
  %153 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %151
  %154 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %152
  %155 = getelementptr inbounds [32 x float], [32 x float]* %2, i64 %10, i64 %144
  %156 = bitcast float* %155 to <2 x float>*
  store <2 x float> %153, <2 x float>* %156, align 4
  %157 = getelementptr inbounds float, float* %155, i64 2
  %158 = bitcast float* %157 to <2 x float>*
  store <2 x float> %154, <2 x float>* %158, align 4
  %159 = add i32 %126, 8
  %160 = add i32 %127, -2
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %125, !llvm.loop !27

162:                                              ; preds = %125, %119
  %163 = phi i32 [ 0, %119 ], [ %159, %125 ]
  %164 = icmp eq i32 %121, 0
  br i1 %164, label %181, label %165

165:                                              ; preds = %162
  %166 = zext i32 %163 to i64
  %167 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %166
  %168 = bitcast double* %167 to <2 x double>*
  %169 = load <2 x double>, <2 x double>* %168, align 16
  %170 = getelementptr inbounds double, double* %167, i64 2
  %171 = bitcast double* %170 to <2 x double>*
  %172 = load <2 x double>, <2 x double>* %171, align 16
  %173 = fptrunc <2 x double> %169 to <2 x float>
  %174 = fptrunc <2 x double> %172 to <2 x float>
  %175 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %173
  %176 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %174
  %177 = getelementptr inbounds [32 x float], [32 x float]* %2, i64 %10, i64 %166
  %178 = bitcast float* %177 to <2 x float>*
  store <2 x float> %175, <2 x float>* %178, align 4
  %179 = getelementptr inbounds float, float* %177, i64 2
  %180 = bitcast float* %179 to <2 x float>*
  store <2 x float> %176, <2 x float>* %180, align 4
  br label %181

181:                                              ; preds = %162, %165
  %182 = icmp eq i32 %17, %120
  br i1 %182, label %196, label %183

183:                                              ; preds = %181, %114, %110
  %184 = phi i32 [ 0, %114 ], [ 0, %110 ], [ %120, %181 ]
  br label %185

185:                                              ; preds = %183, %185
  %186 = phi i32 [ %193, %185 ], [ %184, %183 ]
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [32 x double], [32 x double]* %5, i64 0, i64 %187
  %189 = load double, double* %188, align 8
  %190 = fptrunc double %189 to float
  %191 = fsub float -0.000000e+00, %190
  %192 = getelementptr inbounds [32 x float], [32 x float]* %2, i64 %10, i64 %187
  store float %191, float* %192, align 4
  %193 = add i32 %186, 1
  %194 = zext i32 %193 to i64
  %195 = icmp ult i64 %10, %194
  br i1 %195, label %196, label %185, !llvm.loop !28

196:                                              ; preds = %185, %181
  %197 = fmul double %11, %112
  %198 = getelementptr inbounds double, double* %3, i64 %10
  store double %197, double* %198, align 8
  %199 = fcmp oeq double %197, 0.000000e+00
  br i1 %199, label %200, label %9

200:                                              ; preds = %196
  %201 = trunc i64 %24 to i32
  store i32 %201, i32* %1, align 4
  br label %202

202:                                              ; preds = %9, %200
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %6) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FLAC__lpc_quantize_coefficients(float* nocapture readonly, i32, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %6 = alloca i32, align 4
  %7 = add i32 %2, -1
  %8 = shl i32 1, %7
  %9 = sub nsw i32 0, %8
  %10 = add nsw i32 %8, -1
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %181, label %12

12:                                               ; preds = %5
  %13 = zext i32 %1 to i64
  %14 = add nsw i64 %13, -1
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %53, label %17

17:                                               ; preds = %12
  %18 = sub nsw i64 %13, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %50, %19 ]
  %21 = phi double [ 0.000000e+00, %17 ], [ %49, %19 ]
  %22 = phi i64 [ %18, %17 ], [ %51, %19 ]
  %23 = getelementptr inbounds float, float* %0, i64 %20
  %24 = load float, float* %23, align 4
  %25 = tail call float @llvm.fabs.f32(float %24)
  %26 = fpext float %25 to double
  %27 = fcmp olt double %21, %26
  %28 = select i1 %27, double %26, double %21
  %29 = or i64 %20, 1
  %30 = getelementptr inbounds float, float* %0, i64 %29
  %31 = load float, float* %30, align 4
  %32 = tail call float @llvm.fabs.f32(float %31)
  %33 = fpext float %32 to double
  %34 = fcmp olt double %28, %33
  %35 = select i1 %34, double %33, double %28
  %36 = or i64 %20, 2
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = load float, float* %37, align 4
  %39 = tail call float @llvm.fabs.f32(float %38)
  %40 = fpext float %39 to double
  %41 = fcmp olt double %35, %40
  %42 = select i1 %41, double %40, double %35
  %43 = or i64 %20, 3
  %44 = getelementptr inbounds float, float* %0, i64 %43
  %45 = load float, float* %44, align 4
  %46 = tail call float @llvm.fabs.f32(float %45)
  %47 = fpext float %46 to double
  %48 = fcmp olt double %42, %47
  %49 = select i1 %48, double %47, double %42
  %50 = add nuw nsw i64 %20, 4
  %51 = add i64 %22, -4
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %19

53:                                               ; preds = %19, %12
  %54 = phi double [ undef, %12 ], [ %49, %19 ]
  %55 = phi i64 [ 0, %12 ], [ %50, %19 ]
  %56 = phi double [ 0.000000e+00, %12 ], [ %49, %19 ]
  %57 = icmp eq i64 %15, 0
  br i1 %57, label %71, label %58

58:                                               ; preds = %53, %58
  %59 = phi i64 [ %68, %58 ], [ %55, %53 ]
  %60 = phi double [ %67, %58 ], [ %56, %53 ]
  %61 = phi i64 [ %69, %58 ], [ %15, %53 ]
  %62 = getelementptr inbounds float, float* %0, i64 %59
  %63 = load float, float* %62, align 4
  %64 = tail call float @llvm.fabs.f32(float %63)
  %65 = fpext float %64 to double
  %66 = fcmp olt double %60, %65
  %67 = select i1 %66, double %65, double %60
  %68 = add nuw nsw i64 %59, 1
  %69 = add i64 %61, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %58, !llvm.loop !29

71:                                               ; preds = %58, %53
  %72 = phi double [ %54, %53 ], [ %67, %58 ]
  %73 = fcmp ugt double %72, 0.000000e+00
  br i1 %73, label %74, label %181

74:                                               ; preds = %71
  %75 = load i32, i32* @FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN, align 4
  %76 = add i32 %75, -1
  %77 = shl nsw i32 -1, %76
  %78 = xor i32 %77, -1
  %79 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %79) #8
  store i32 -1431655766, i32* %6, align 4
  %80 = call double @frexp(double %72, i32* nonnull %6) #8
  %81 = load i32, i32* %6, align 4
  %82 = add nsw i32 %81, -1
  store i32 %82, i32* %6, align 4
  %83 = sub i32 %7, %81
  store i32 %83, i32* %4, align 4
  %84 = icmp sgt i32 %83, %78
  br i1 %84, label %85, label %86

85:                                               ; preds = %74
  store i32 %78, i32* %4, align 4
  br label %89

86:                                               ; preds = %74
  %87 = icmp slt i32 %83, %77
  br i1 %87, label %88, label %89

88:                                               ; preds = %86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %79) #8
  br label %181

89:                                               ; preds = %85, %86
  %90 = phi i32 [ %78, %85 ], [ %83, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %79) #8
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %137

92:                                               ; preds = %89
  br i1 %11, label %181, label %93

93:                                               ; preds = %92
  %94 = zext i32 %1 to i64
  br label %95

95:                                               ; preds = %133, %93
  %96 = phi i32 [ %90, %93 ], [ %136, %133 ]
  %97 = phi i64 [ 0, %93 ], [ %131, %133 ]
  %98 = phi double [ 0.000000e+00, %93 ], [ %135, %133 ]
  %99 = getelementptr inbounds float, float* %0, i64 %97
  %100 = load float, float* %99, align 4
  %101 = shl i32 1, %96
  %102 = sitofp i32 %101 to float
  %103 = fmul float %100, %102
  %104 = fpext float %103 to double
  %105 = fadd double %98, %104
  %106 = tail call i64 @lround(double %105) #8
  %107 = trunc i64 %106 to i32
  %108 = icmp slt i32 %8, %107
  br i1 %108, label %109, label %116

109:                                              ; preds = %95
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %111 = load i32, i32* %4, align 4
  %112 = load float, float* %99, align 4
  %113 = fpext float %112 to double
  %114 = trunc i64 %97 to i32
  %115 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %110, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str, i64 0, i64 0), i32 %107, i32 %10, i32 %111, double %72, i32 %2, i32 %114, double %113) #9
  br label %125

116:                                              ; preds = %95
  %117 = icmp slt i32 %107, %9
  br i1 %117, label %118, label %125

118:                                              ; preds = %116
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %120 = load i32, i32* %4, align 4
  %121 = load float, float* %99, align 4
  %122 = fpext float %121 to double
  %123 = trunc i64 %97 to i32
  %124 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %119, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.1, i64 0, i64 0), i32 %107, i32 %9, i32 %120, double %72, i32 %2, i32 %123, double %122) #9
  br label %125

125:                                              ; preds = %116, %118, %109
  %126 = icmp sgt i32 %8, %107
  %127 = icmp slt i32 %107, %9
  %128 = select i1 %127, i32 %9, i32 %107
  %129 = select i1 %126, i32 %128, i32 %10
  %130 = getelementptr inbounds i32, i32* %3, i64 %97
  store i32 %129, i32* %130, align 4
  %131 = add nuw nsw i64 %97, 1
  %132 = icmp eq i64 %131, %94
  br i1 %132, label %181, label %133

133:                                              ; preds = %125
  %134 = sitofp i32 %129 to double
  %135 = fsub double %105, %134
  %136 = load i32, i32* %4, align 4
  br label %95

137:                                              ; preds = %89
  br i1 %11, label %180, label %138

138:                                              ; preds = %137
  %139 = sub nsw i32 0, %90
  %140 = shl i32 1, %139
  %141 = sitofp i32 %140 to float
  %142 = zext i32 %1 to i64
  br label %143

143:                                              ; preds = %170, %138
  %144 = phi i64 [ 0, %138 ], [ %178, %170 ]
  %145 = phi double [ 0.000000e+00, %138 ], [ %176, %170 ]
  %146 = getelementptr inbounds float, float* %0, i64 %144
  %147 = load float, float* %146, align 4
  %148 = fdiv float %147, %141
  %149 = fpext float %148 to double
  %150 = fadd double %145, %149
  %151 = tail call i64 @lround(double %150) #8
  %152 = trunc i64 %151 to i32
  %153 = icmp slt i32 %8, %152
  br i1 %153, label %154, label %161

154:                                              ; preds = %143
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %156 = load i32, i32* %4, align 4
  %157 = load float, float* %146, align 4
  %158 = fpext float %157 to double
  %159 = trunc i64 %144 to i32
  %160 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %155, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str, i64 0, i64 0), i32 %152, i32 %10, i32 %156, double %72, i32 %2, i32 %159, double %158) #9
  br label %170

161:                                              ; preds = %143
  %162 = icmp slt i32 %152, %9
  br i1 %162, label %163, label %170

163:                                              ; preds = %161
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %165 = load i32, i32* %4, align 4
  %166 = load float, float* %146, align 4
  %167 = fpext float %166 to double
  %168 = trunc i64 %144 to i32
  %169 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %164, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.1, i64 0, i64 0), i32 %152, i32 %9, i32 %165, double %72, i32 %2, i32 %168, double %167) #9
  br label %170

170:                                              ; preds = %161, %163, %154
  %171 = icmp sgt i32 %8, %152
  %172 = icmp slt i32 %152, %9
  %173 = select i1 %172, i32 %9, i32 %152
  %174 = select i1 %171, i32 %173, i32 %10
  %175 = sitofp i32 %174 to double
  %176 = fsub double %150, %175
  %177 = getelementptr inbounds i32, i32* %3, i64 %144
  store i32 %174, i32* %177, align 4
  %178 = add nuw nsw i64 %144, 1
  %179 = icmp eq i64 %178, %142
  br i1 %179, label %180, label %143

180:                                              ; preds = %170, %137
  store i32 0, i32* %4, align 4
  br label %181

181:                                              ; preds = %125, %5, %92, %180, %88, %71
  %182 = phi i32 [ 1, %88 ], [ 2, %71 ], [ 0, %180 ], [ 0, %92 ], [ 2, %5 ], [ 0, %125 ]
  ret i32 %182
}

; Function Attrs: nofree nounwind
declare double @frexp(double, i32* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @lround(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @FLAC__lpc_compute_residual_from_qlp_coefficients(i32* noalias nocapture readonly, i32, i32* noalias nocapture readonly, i32, i32, i32* noalias nocapture) local_unnamed_addr #5 {
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %48, label %8

8:                                                ; preds = %6
  %9 = icmp eq i32 %3, 0
  %10 = zext i32 %3 to i64
  br label %11

11:                                               ; preds = %39, %8
  %12 = phi i32 [ 0, %8 ], [ %46, %39 ]
  %13 = phi i32* [ %5, %8 ], [ %45, %39 ]
  %14 = phi i32* [ %0, %8 ], [ %41, %39 ]
  br i1 %9, label %39, label %15

15:                                               ; preds = %11, %36
  %16 = phi i64 [ %37, %36 ], [ 0, %11 ]
  %17 = phi i32* [ %22, %36 ], [ %14, %11 ]
  %18 = phi i32 [ %25, %36 ], [ 0, %11 ]
  %19 = phi i64 [ %29, %36 ], [ 0, %11 ]
  %20 = getelementptr inbounds i32, i32* %2, i64 %16
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds i32, i32* %17, i64 -1
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %23, %21
  %25 = add nsw i32 %24, %18
  %26 = sext i32 %21 to i64
  %27 = sext i32 %23 to i64
  %28 = mul nsw i64 %27, %26
  %29 = add nsw i64 %28, %19
  %30 = add i64 %29, 2147483648
  %31 = icmp ugt i64 %30, 4294967295
  br i1 %31, label %32, label %36

32:                                               ; preds = %15
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %34 = trunc i64 %16 to i32
  %35 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.2, i64 0, i64 0), i32 %12, i32 %34, i32 %21, i32 %23, i64 %29) #9
  br label %36

36:                                               ; preds = %32, %15
  %37 = add nuw nsw i64 %16, 1
  %38 = icmp eq i64 %37, %10
  br i1 %38, label %39, label %15

39:                                               ; preds = %36, %11
  %40 = phi i32 [ 0, %11 ], [ %25, %36 ]
  %41 = getelementptr inbounds i32, i32* %14, i64 1
  %42 = load i32, i32* %14, align 4
  %43 = ashr i32 %40, %4
  %44 = sub nsw i32 %42, %43
  %45 = getelementptr inbounds i32, i32* %13, i64 1
  store i32 %44, i32* %13, align 4
  %46 = add nuw i32 %12, 1
  %47 = icmp eq i32 %46, %1
  br i1 %47, label %48, label %11

48:                                               ; preds = %39, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FLAC__lpc_compute_residual_from_qlp_coefficients_wide(i32* noalias nocapture readonly, i32, i32* noalias nocapture readonly, i32, i32, i32* noalias nocapture) local_unnamed_addr #2 {
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %114, label %8

8:                                                ; preds = %6
  %9 = icmp eq i32 %3, 0
  %10 = zext i32 %4 to i64
  %11 = zext i32 %3 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %11, 3
  %14 = icmp ult i64 %12, 3
  %15 = sub nsw i64 %11, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %106, %8
  %18 = phi i32 [ 0, %8 ], [ %112, %106 ]
  %19 = phi i32* [ %5, %8 ], [ %111, %106 ]
  %20 = phi i32* [ %0, %8 ], [ %107, %106 ]
  br i1 %9, label %86, label %21

21:                                               ; preds = %17
  br i1 %14, label %65, label %22

22:                                               ; preds = %21, %22
  %23 = phi i64 [ %62, %22 ], [ 0, %21 ]
  %24 = phi i32* [ %57, %22 ], [ %20, %21 ]
  %25 = phi i64 [ %61, %22 ], [ 0, %21 ]
  %26 = phi i64 [ %63, %22 ], [ %15, %21 ]
  %27 = getelementptr inbounds i32, i32* %2, i64 %23
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %24, i64 -1
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %32, %29
  %34 = add nsw i64 %33, %25
  %35 = or i64 %23, 1
  %36 = getelementptr inbounds i32, i32* %2, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %24, i64 -2
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = mul nsw i64 %41, %38
  %43 = add nsw i64 %42, %34
  %44 = or i64 %23, 2
  %45 = getelementptr inbounds i32, i32* %2, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %24, i64 -3
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %50, %47
  %52 = add nsw i64 %51, %43
  %53 = or i64 %23, 3
  %54 = getelementptr inbounds i32, i32* %2, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %24, i64 -4
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = mul nsw i64 %59, %56
  %61 = add nsw i64 %60, %52
  %62 = add nuw nsw i64 %23, 4
  %63 = add i64 %26, -4
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %22

65:                                               ; preds = %22, %21
  %66 = phi i64 [ undef, %21 ], [ %61, %22 ]
  %67 = phi i64 [ 0, %21 ], [ %62, %22 ]
  %68 = phi i32* [ %20, %21 ], [ %57, %22 ]
  %69 = phi i64 [ 0, %21 ], [ %61, %22 ]
  br i1 %16, label %86, label %70

70:                                               ; preds = %65, %70
  %71 = phi i64 [ %83, %70 ], [ %67, %65 ]
  %72 = phi i32* [ %78, %70 ], [ %68, %65 ]
  %73 = phi i64 [ %82, %70 ], [ %69, %65 ]
  %74 = phi i64 [ %84, %70 ], [ %13, %65 ]
  %75 = getelementptr inbounds i32, i32* %2, i64 %71
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %72, i64 -1
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, %77
  %82 = add nsw i64 %81, %73
  %83 = add nuw nsw i64 %71, 1
  %84 = add i64 %74, -1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %70, !llvm.loop !31

86:                                               ; preds = %65, %70, %17
  %87 = phi i64 [ 0, %17 ], [ %66, %65 ], [ %82, %70 ]
  %88 = ashr i64 %87, %10
  %89 = tail call i32 @FLAC__bitmath_silog2_wide(i64 %88) #8
  %90 = icmp ugt i32 %89, 32
  br i1 %90, label %91, label %94

91:                                               ; preds = %86
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %93 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.3, i64 0, i64 0), i32 %18, i64 %88) #9
  br label %114

94:                                               ; preds = %86
  %95 = load i32, i32* %20, align 4
  %96 = sext i32 %95 to i64
  %97 = sub nsw i64 %96, %88
  %98 = tail call i32 @FLAC__bitmath_silog2_wide(i64 %97) #8
  %99 = icmp ugt i32 %98, 32
  br i1 %99, label %100, label %106

100:                                              ; preds = %94
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %102 = load i32, i32* %20, align 4
  %103 = sext i32 %102 to i64
  %104 = sub nsw i64 %103, %88
  %105 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.4, i64 0, i64 0), i32 %18, i32 %102, i64 %88, i64 %104) #9
  br label %114

106:                                              ; preds = %94
  %107 = getelementptr inbounds i32, i32* %20, i64 1
  %108 = load i32, i32* %20, align 4
  %109 = trunc i64 %88 to i32
  %110 = sub nsw i32 %108, %109
  %111 = getelementptr inbounds i32, i32* %19, i64 1
  store i32 %110, i32* %19, align 4
  %112 = add nuw i32 %18, 1
  %113 = icmp eq i32 %112, %1
  br i1 %113, label %114, label %17

114:                                              ; preds = %106, %6, %100, %91
  ret void
}

declare i32 @FLAC__bitmath_silog2_wide(i64) local_unnamed_addr #6

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @FLAC__lpc_restore_signal(i32* noalias nocapture readonly, i32, i32* noalias nocapture readonly, i32, i32, i32* noalias nocapture) local_unnamed_addr #5 {
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %48, label %8

8:                                                ; preds = %6
  %9 = icmp eq i32 %3, 0
  %10 = zext i32 %3 to i64
  br label %11

11:                                               ; preds = %39, %8
  %12 = phi i32* [ %0, %8 ], [ %41, %39 ]
  %13 = phi i32 [ 0, %8 ], [ %46, %39 ]
  %14 = phi i32* [ %5, %8 ], [ %45, %39 ]
  br i1 %9, label %39, label %15

15:                                               ; preds = %11, %36
  %16 = phi i64 [ %37, %36 ], [ 0, %11 ]
  %17 = phi i32* [ %22, %36 ], [ %14, %11 ]
  %18 = phi i32 [ %25, %36 ], [ 0, %11 ]
  %19 = phi i64 [ %29, %36 ], [ 0, %11 ]
  %20 = getelementptr inbounds i32, i32* %2, i64 %16
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds i32, i32* %17, i64 -1
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %23, %21
  %25 = add nsw i32 %24, %18
  %26 = sext i32 %21 to i64
  %27 = sext i32 %23 to i64
  %28 = mul nsw i64 %27, %26
  %29 = add nsw i64 %28, %19
  %30 = add i64 %29, 2147483648
  %31 = icmp ugt i64 %30, 4294967295
  br i1 %31, label %32, label %36

32:                                               ; preds = %15
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %34 = trunc i64 %16 to i32
  %35 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 %13, i32 %34, i32 %21, i32 %23, i64 %29) #9
  br label %36

36:                                               ; preds = %32, %15
  %37 = add nuw nsw i64 %16, 1
  %38 = icmp eq i64 %37, %10
  br i1 %38, label %39, label %15

39:                                               ; preds = %36, %11
  %40 = phi i32 [ 0, %11 ], [ %25, %36 ]
  %41 = getelementptr inbounds i32, i32* %12, i64 1
  %42 = load i32, i32* %12, align 4
  %43 = ashr i32 %40, %4
  %44 = add nsw i32 %42, %43
  %45 = getelementptr inbounds i32, i32* %14, i64 1
  store i32 %44, i32* %14, align 4
  %46 = add nuw i32 %13, 1
  %47 = icmp eq i32 %46, %1
  br i1 %47, label %48, label %11

48:                                               ; preds = %39, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FLAC__lpc_restore_signal_wide(i32* noalias nocapture readonly, i32, i32* noalias nocapture readonly, i32, i32, i32* noalias nocapture) local_unnamed_addr #2 {
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %114, label %8

8:                                                ; preds = %6
  %9 = icmp eq i32 %3, 0
  %10 = zext i32 %4 to i64
  %11 = zext i32 %3 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %11, 3
  %14 = icmp ult i64 %12, 3
  %15 = sub nsw i64 %11, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %106, %8
  %18 = phi i32* [ %0, %8 ], [ %107, %106 ]
  %19 = phi i32 [ 0, %8 ], [ %112, %106 ]
  %20 = phi i32* [ %5, %8 ], [ %111, %106 ]
  br i1 %9, label %86, label %21

21:                                               ; preds = %17
  br i1 %14, label %65, label %22

22:                                               ; preds = %21, %22
  %23 = phi i64 [ %62, %22 ], [ 0, %21 ]
  %24 = phi i32* [ %57, %22 ], [ %20, %21 ]
  %25 = phi i64 [ %61, %22 ], [ 0, %21 ]
  %26 = phi i64 [ %63, %22 ], [ %15, %21 ]
  %27 = getelementptr inbounds i32, i32* %2, i64 %23
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %24, i64 -1
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %32, %29
  %34 = add nsw i64 %33, %25
  %35 = or i64 %23, 1
  %36 = getelementptr inbounds i32, i32* %2, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %24, i64 -2
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = mul nsw i64 %41, %38
  %43 = add nsw i64 %42, %34
  %44 = or i64 %23, 2
  %45 = getelementptr inbounds i32, i32* %2, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %24, i64 -3
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %50, %47
  %52 = add nsw i64 %51, %43
  %53 = or i64 %23, 3
  %54 = getelementptr inbounds i32, i32* %2, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %24, i64 -4
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = mul nsw i64 %59, %56
  %61 = add nsw i64 %60, %52
  %62 = add nuw nsw i64 %23, 4
  %63 = add i64 %26, -4
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %22

65:                                               ; preds = %22, %21
  %66 = phi i64 [ undef, %21 ], [ %61, %22 ]
  %67 = phi i64 [ 0, %21 ], [ %62, %22 ]
  %68 = phi i32* [ %20, %21 ], [ %57, %22 ]
  %69 = phi i64 [ 0, %21 ], [ %61, %22 ]
  br i1 %16, label %86, label %70

70:                                               ; preds = %65, %70
  %71 = phi i64 [ %83, %70 ], [ %67, %65 ]
  %72 = phi i32* [ %78, %70 ], [ %68, %65 ]
  %73 = phi i64 [ %82, %70 ], [ %69, %65 ]
  %74 = phi i64 [ %84, %70 ], [ %13, %65 ]
  %75 = getelementptr inbounds i32, i32* %2, i64 %71
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %72, i64 -1
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, %77
  %82 = add nsw i64 %81, %73
  %83 = add nuw nsw i64 %71, 1
  %84 = add i64 %74, -1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %70, !llvm.loop !32

86:                                               ; preds = %65, %70, %17
  %87 = phi i64 [ 0, %17 ], [ %66, %65 ], [ %82, %70 ]
  %88 = ashr i64 %87, %10
  %89 = tail call i32 @FLAC__bitmath_silog2_wide(i64 %88) #8
  %90 = icmp ugt i32 %89, 32
  br i1 %90, label %91, label %94

91:                                               ; preds = %86
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %93 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 %19, i64 %88) #9
  br label %114

94:                                               ; preds = %86
  %95 = load i32, i32* %18, align 4
  %96 = sext i32 %95 to i64
  %97 = add nsw i64 %88, %96
  %98 = tail call i32 @FLAC__bitmath_silog2_wide(i64 %97) #8
  %99 = icmp ugt i32 %98, 32
  br i1 %99, label %100, label %106

100:                                              ; preds = %94
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %102 = load i32, i32* %18, align 4
  %103 = sext i32 %102 to i64
  %104 = add nsw i64 %88, %103
  %105 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.7, i64 0, i64 0), i32 %19, i32 %102, i64 %88, i64 %104) #9
  br label %114

106:                                              ; preds = %94
  %107 = getelementptr inbounds i32, i32* %18, i64 1
  %108 = load i32, i32* %18, align 4
  %109 = trunc i64 %88 to i32
  %110 = add nsw i32 %108, %109
  %111 = getelementptr inbounds i32, i32* %20, i64 1
  store i32 %110, i32* %20, align 4
  %112 = add nuw i32 %19, 1
  %113 = icmp eq i32 %112, %1
  br i1 %113, label %114, label %17

114:                                              ; preds = %106, %6, %100, %91
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @FLAC__lpc_compute_expected_bits_per_residual_sample(double, i32) local_unnamed_addr #5 {
  %3 = fcmp ogt double %0, 0.000000e+00
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = uitofp i32 %1 to double
  %6 = fdiv double 0x3FCEBFBDFF82C58E, %5
  %7 = fmul double %6, %0
  %8 = tail call double @log(double %7) #8
  %9 = fmul double %8, 5.000000e-01
  %10 = fdiv double %9, 0x3FE62E42FEFA39EF
  %11 = fcmp oge double %10, 0.000000e+00
  %12 = select i1 %11, double %10, double 0.000000e+00
  br label %16

13:                                               ; preds = %2
  %14 = fcmp olt double %0, 0.000000e+00
  %15 = select i1 %14, double 1.000000e+32, double 0.000000e+00
  br label %16

16:                                               ; preds = %4, %13
  %17 = phi double [ %12, %4 ], [ %15, %13 ]
  ret double %17
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale(double, double) local_unnamed_addr #5 {
  %3 = fcmp ogt double %0, 0.000000e+00
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = fmul double %0, %1
  %6 = tail call double @log(double %5) #8
  %7 = fmul double %6, 5.000000e-01
  %8 = fdiv double %7, 0x3FE62E42FEFA39EF
  %9 = fcmp oge double %8, 0.000000e+00
  %10 = select i1 %9, double %8, double 0.000000e+00
  br label %14

11:                                               ; preds = %2
  %12 = fcmp olt double %0, 0.000000e+00
  %13 = select i1 %12, double 1.000000e+32, double 0.000000e+00
  br label %14

14:                                               ; preds = %11, %4
  %15 = phi double [ %10, %4 ], [ %13, %11 ]
  ret double %15
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @FLAC__lpc_compute_best_order(double* nocapture readonly, i32, i32, i32) local_unnamed_addr #5 {
  %5 = uitofp i32 %2 to double
  %6 = fdiv double 0x3FCEBFBDFF82C58E, %5
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %45, label %8

8:                                                ; preds = %4
  %9 = zext i32 %1 to i64
  br label %10

10:                                               ; preds = %28, %8
  %11 = phi i64 [ 0, %8 ], [ %40, %28 ]
  %12 = phi double [ 0x41EFFFFFFFE00000, %8 ], [ %39, %28 ]
  %13 = phi i32 [ 0, %8 ], [ %38, %28 ]
  %14 = phi i32 [ 1, %8 ], [ %41, %28 ]
  %15 = getelementptr inbounds double, double* %0, i64 %11
  %16 = load double, double* %15, align 8
  %17 = fcmp ogt double %16, 0.000000e+00
  br i1 %17, label %18, label %25

18:                                               ; preds = %10
  %19 = fmul double %6, %16
  %20 = tail call double @log(double %19) #8
  %21 = fmul double %20, 5.000000e-01
  %22 = fdiv double %21, 0x3FE62E42FEFA39EF
  %23 = fcmp oge double %22, 0.000000e+00
  %24 = select i1 %23, double %22, double 0.000000e+00
  br label %28

25:                                               ; preds = %10
  %26 = fcmp olt double %16, 0.000000e+00
  %27 = select i1 %26, double 1.000000e+32, double 0.000000e+00
  br label %28

28:                                               ; preds = %18, %25
  %29 = phi double [ %24, %18 ], [ %27, %25 ]
  %30 = sub i32 %2, %14
  %31 = uitofp i32 %30 to double
  %32 = fmul double %29, %31
  %33 = mul i32 %14, %3
  %34 = uitofp i32 %33 to double
  %35 = fadd double %32, %34
  %36 = fcmp olt double %35, %12
  %37 = trunc i64 %11 to i32
  %38 = select i1 %36, i32 %37, i32 %13
  %39 = select i1 %36, double %35, double %12
  %40 = add nuw nsw i64 %11, 1
  %41 = add i32 %14, 1
  %42 = icmp eq i64 %40, %9
  br i1 %42, label %43, label %10

43:                                               ; preds = %28
  %44 = add i32 %38, 1
  br label %45

45:                                               ; preds = %43, %4
  %46 = phi i32 [ 1, %4 ], [ %44, %43 ]
  ret i32 %46
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !11}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !11}
!26 = distinct !{!26, !11}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !30}
!30 = !{!"llvm.loop.unroll.disable"}
!31 = distinct !{!31, !30}
!32 = distinct !{!32, !30}
