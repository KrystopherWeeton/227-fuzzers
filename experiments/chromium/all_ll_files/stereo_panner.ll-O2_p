; ModuleID = '../../third_party/blink/renderer/platform/audio/stereo_panner.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/stereo_panner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::StereoPanner" = type { i8 }
%"class.blink::AudioBus" = type { %"class.WTF::ThreadSafeRefCounted", i32, %"class.WTF::Vector", i32, float }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [64 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::AudioChannel"*, i32, i32 }
%"class.blink::AudioChannel" = type <{ i64, float*, %"class.std::__1::unique_ptr", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::AudioArray"* }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink12StereoPannerC1Ef = hidden unnamed_addr alias void (%"class.blink::StereoPanner"*, float), void (%"class.blink::StereoPanner"*, float)* @_ZN5blink12StereoPannerC2Ef

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink12StereoPannerC2Ef(%"class.blink::StereoPanner"* nocapture, float) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12StereoPanner27PanWithSampleAccurateValuesEPKNS_8AudioBusEPS1_PKfj(%"class.blink::StereoPanner"* nocapture readnone, %"class.blink::AudioBus"*, %"class.blink::AudioBus"*, float* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %1, i64 0, i32 2
  %9 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 0) #5
  %10 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %9, i64 0, i32 1
  %11 = load float*, float** %10, align 8
  %12 = icmp eq float* %11, null
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %9, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %15, i64 0, i32 1
  %17 = load float*, float** %16, align 8
  br label %18

18:                                               ; preds = %5, %13
  %19 = phi float* [ %17, %13 ], [ %11, %5 ]
  %20 = icmp ugt i32 %7, 1
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 1) #5
  %23 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %22, i64 0, i32 1
  %24 = load float*, float** %23, align 8
  %25 = icmp eq float* %24, null
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %22, i64 0, i32 2, i32 0, i32 0, i32 0
  %28 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %28, i64 0, i32 1
  %30 = load float*, float** %29, align 8
  br label %31

31:                                               ; preds = %26, %21, %18
  %32 = phi float* [ %19, %18 ], [ %30, %26 ], [ %24, %21 ]
  %33 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %2, i32 0) #5
  %34 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %33, i64 0, i32 3
  store i8 0, i8* %34, align 8
  %35 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %33, i64 0, i32 1
  %36 = load float*, float** %35, align 8
  %37 = icmp eq float* %36, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %33, i64 0, i32 2, i32 0, i32 0, i32 0
  %40 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %40, i64 0, i32 1
  %42 = load float*, float** %41, align 8
  br label %43

43:                                               ; preds = %31, %38
  %44 = phi float* [ %42, %38 ], [ %36, %31 ]
  %45 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %2, i32 1) #5
  %46 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %45, i64 0, i32 3
  store i8 0, i8* %46, align 8
  %47 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %45, i64 0, i32 1
  %48 = load float*, float** %47, align 8
  %49 = icmp eq float* %48, null
  br i1 %49, label %50, label %55

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %45, i64 0, i32 2, i32 0, i32 0, i32 0
  %52 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %52, i64 0, i32 1
  %54 = load float*, float** %53, align 8
  br label %55

55:                                               ; preds = %43, %50
  %56 = phi float* [ %54, %50 ], [ %48, %43 ]
  %57 = icmp ne float* %19, null
  %58 = icmp ne float* %32, null
  %59 = and i1 %57, %58
  %60 = icmp ne float* %44, null
  %61 = and i1 %59, %60
  %62 = icmp ne float* %56, null
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %142

64:                                               ; preds = %55
  %65 = icmp eq i32 %7, 1
  %66 = icmp eq i32 %4, 0
  br i1 %65, label %68, label %67

67:                                               ; preds = %64
  br i1 %66, label %142, label %98

68:                                               ; preds = %64
  br i1 %66, label %142, label %69

69:                                               ; preds = %68, %69
  %70 = phi float* [ %78, %69 ], [ %3, %68 ]
  %71 = phi float* [ %76, %69 ], [ %19, %68 ]
  %72 = phi i32 [ %75, %69 ], [ %4, %68 ]
  %73 = phi float* [ %96, %69 ], [ %56, %68 ]
  %74 = phi float* [ %93, %69 ], [ %44, %68 ]
  %75 = add nsw i32 %72, -1
  %76 = getelementptr inbounds float, float* %71, i64 1
  %77 = load float, float* %71, align 4
  %78 = getelementptr inbounds float, float* %70, i64 1
  %79 = load float, float* %70, align 4
  %80 = fpext float %79 to double
  %81 = fcmp ult float %79, 1.000000e+00
  %82 = fcmp ole double %80, -1.000000e+00
  %83 = select i1 %82, double -1.000000e+00, double %80
  %84 = fmul double %83, 5.000000e-01
  %85 = fadd double %84, 5.000000e-01
  %86 = fmul double %85, 0x3FF921FB54442D18
  %87 = select i1 %81, double %86, double 0x3FF921FB54442D18
  %88 = tail call double @_ZN6fdlibm3cosEd(double %87) #5
  %89 = tail call double @_ZN6fdlibm3sinEd(double %87) #5
  %90 = fpext float %77 to double
  %91 = fmul double %88, %90
  %92 = fptrunc double %91 to float
  %93 = getelementptr inbounds float, float* %74, i64 1
  store float %92, float* %74, align 4
  %94 = fmul double %89, %90
  %95 = fptrunc double %94 to float
  %96 = getelementptr inbounds float, float* %73, i64 1
  store float %95, float* %73, align 4
  %97 = icmp eq i32 %75, 0
  br i1 %97, label %142, label %69

98:                                               ; preds = %67, %136
  %99 = phi i32 [ %105, %136 ], [ %4, %67 ]
  %100 = phi float* [ %110, %136 ], [ %3, %67 ]
  %101 = phi float* [ %106, %136 ], [ %19, %67 ]
  %102 = phi float* [ %138, %136 ], [ %56, %67 ]
  %103 = phi float* [ %139, %136 ], [ %44, %67 ]
  %104 = phi float* [ %108, %136 ], [ %32, %67 ]
  %105 = add nsw i32 %99, -1
  %106 = getelementptr inbounds float, float* %101, i64 1
  %107 = load float, float* %101, align 4
  %108 = getelementptr inbounds float, float* %104, i64 1
  %109 = load float, float* %104, align 4
  %110 = getelementptr inbounds float, float* %100, i64 1
  %111 = load float, float* %100, align 4
  %112 = fpext float %111 to double
  %113 = fcmp ult float %111, 1.000000e+00
  %114 = fcmp ole double %112, -1.000000e+00
  %115 = select i1 %114, double -1.000000e+00, double %112
  %116 = select i1 %113, double %115, double 1.000000e+00
  %117 = fcmp ole double %116, 0.000000e+00
  %118 = fadd double %116, 1.000000e+00
  %119 = select i1 %117, double %118, double %116
  %120 = fmul double %119, 0x3FF921FB54442D18
  %121 = tail call double @_ZN6fdlibm3cosEd(double %120) #5
  %122 = tail call double @_ZN6fdlibm3sinEd(double %120) #5
  %123 = fpext float %107 to double
  br i1 %117, label %124, label %130

124:                                              ; preds = %98
  %125 = fpext float %109 to double
  %126 = fmul double %121, %125
  %127 = fadd double %126, %123
  %128 = fptrunc double %127 to float
  store float %128, float* %103, align 4
  %129 = fmul double %122, %125
  br label %136

130:                                              ; preds = %98
  %131 = fmul double %121, %123
  %132 = fptrunc double %131 to float
  store float %132, float* %103, align 4
  %133 = fpext float %109 to double
  %134 = fmul double %122, %123
  %135 = fadd double %134, %133
  br label %136

136:                                              ; preds = %130, %124
  %137 = phi double [ %135, %130 ], [ %129, %124 ]
  %138 = getelementptr inbounds float, float* %102, i64 1
  %139 = getelementptr inbounds float, float* %103, i64 1
  %140 = fptrunc double %137 to float
  store float %140, float* %102, align 4
  %141 = icmp eq i32 %105, 0
  br i1 %141, label %142, label %98

142:                                              ; preds = %136, %69, %67, %68, %55
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"*, i32) local_unnamed_addr #3

declare double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #3

declare double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12StereoPanner16PanToTargetValueEPKNS_8AudioBusEPS1_fj(%"class.blink::StereoPanner"* nocapture readnone, %"class.blink::AudioBus"*, %"class.blink::AudioBus"*, float, i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %1, i64 0, i32 2
  %9 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 0) #5
  %10 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %9, i64 0, i32 1
  %11 = load float*, float** %10, align 8
  %12 = icmp eq float* %11, null
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %9, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %15, i64 0, i32 1
  %17 = load float*, float** %16, align 8
  br label %18

18:                                               ; preds = %5, %13
  %19 = phi float* [ %17, %13 ], [ %11, %5 ]
  %20 = icmp ugt i32 %7, 1
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 1) #5
  %23 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %22, i64 0, i32 1
  %24 = load float*, float** %23, align 8
  %25 = icmp eq float* %24, null
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %22, i64 0, i32 2, i32 0, i32 0, i32 0
  %28 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %28, i64 0, i32 1
  %30 = load float*, float** %29, align 8
  br label %31

31:                                               ; preds = %26, %21, %18
  %32 = phi float* [ %19, %18 ], [ %30, %26 ], [ %24, %21 ]
  %33 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %2, i32 0) #5
  %34 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %33, i64 0, i32 3
  store i8 0, i8* %34, align 8
  %35 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %33, i64 0, i32 1
  %36 = load float*, float** %35, align 8
  %37 = icmp eq float* %36, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %33, i64 0, i32 2, i32 0, i32 0, i32 0
  %40 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %40, i64 0, i32 1
  %42 = load float*, float** %41, align 8
  br label %43

43:                                               ; preds = %31, %38
  %44 = phi float* [ %42, %38 ], [ %36, %31 ]
  %45 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %2, i32 1) #5
  %46 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %45, i64 0, i32 3
  store i8 0, i8* %46, align 8
  %47 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %45, i64 0, i32 1
  %48 = load float*, float** %47, align 8
  %49 = icmp eq float* %48, null
  br i1 %49, label %50, label %55

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %45, i64 0, i32 2, i32 0, i32 0, i32 0
  %52 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %52, i64 0, i32 1
  %54 = load float*, float** %53, align 8
  br label %55

55:                                               ; preds = %43, %50
  %56 = phi float* [ %54, %50 ], [ %48, %43 ]
  %57 = icmp ne float* %19, null
  %58 = icmp ne float* %32, null
  %59 = and i1 %57, %58
  %60 = icmp ne float* %44, null
  %61 = and i1 %59, %60
  %62 = icmp ne float* %56, null
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %258

64:                                               ; preds = %55
  %65 = fpext float %3 to double
  %66 = fcmp ult float %3, 1.000000e+00
  %67 = fcmp ole double %65, -1.000000e+00
  %68 = select i1 %67, double -1.000000e+00, double %65
  %69 = fptrunc double %68 to float
  %70 = select i1 %66, float %69, float 1.000000e+00
  %71 = icmp eq i32 %7, 1
  br i1 %71, label %72, label %219

72:                                               ; preds = %64
  %73 = fpext float %70 to double
  %74 = fmul double %73, 5.000000e-01
  %75 = fadd double %74, 5.000000e-01
  %76 = fmul double %75, 0x3FF921FB54442D18
  %77 = tail call double @_ZN6fdlibm3cosEd(double %76) #5
  %78 = tail call double @_ZN6fdlibm3sinEd(double %76) #5
  %79 = icmp eq i32 %4, 0
  br i1 %79, label %258, label %80

80:                                               ; preds = %72
  %81 = add nsw i32 %4, -1
  %82 = zext i32 %81 to i64
  %83 = add nuw nsw i64 %82, 1
  %84 = icmp ult i64 %83, 4
  br i1 %84, label %170, label %85

85:                                               ; preds = %80
  %86 = add nsw i32 %4, -1
  %87 = zext i32 %86 to i64
  %88 = add nuw nsw i64 %87, 1
  %89 = getelementptr float, float* %44, i64 %88
  %90 = getelementptr float, float* %56, i64 %88
  %91 = getelementptr float, float* %19, i64 %88
  %92 = icmp ult float* %44, %90
  %93 = icmp ult float* %56, %89
  %94 = and i1 %92, %93
  %95 = icmp ult float* %44, %91
  %96 = icmp ult float* %19, %89
  %97 = and i1 %95, %96
  %98 = or i1 %94, %97
  %99 = icmp ult float* %56, %91
  %100 = icmp ult float* %19, %90
  %101 = and i1 %99, %100
  %102 = or i1 %98, %101
  br i1 %102, label %170, label %103

103:                                              ; preds = %85
  %104 = and i64 %83, 8589934588
  %105 = getelementptr float, float* %19, i64 %104
  %106 = trunc i64 %104 to i32
  %107 = sub i32 %4, %106
  %108 = getelementptr float, float* %56, i64 %104
  %109 = getelementptr float, float* %44, i64 %104
  %110 = insertelement <4 x double> undef, double %77, i32 0
  %111 = shufflevector <4 x double> %110, <4 x double> undef, <4 x i32> zeroinitializer
  %112 = insertelement <4 x double> undef, double %78, i32 0
  %113 = shufflevector <4 x double> %112, <4 x double> undef, <4 x i32> zeroinitializer
  %114 = add nsw i64 %104, -4
  %115 = lshr exact i64 %114, 2
  %116 = add nuw nsw i64 %115, 1
  %117 = and i64 %116, 1
  %118 = icmp eq i64 %114, 0
  br i1 %118, label %152, label %119

119:                                              ; preds = %103
  %120 = sub nuw nsw i64 %116, %117
  br label %121

121:                                              ; preds = %121, %119
  %122 = phi i64 [ 0, %119 ], [ %149, %121 ]
  %123 = phi i64 [ %120, %119 ], [ %150, %121 ]
  %124 = getelementptr float, float* %19, i64 %122
  %125 = getelementptr float, float* %56, i64 %122
  %126 = getelementptr float, float* %44, i64 %122
  %127 = bitcast float* %124 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 4, !alias.scope !2
  %129 = fpext <4 x float> %128 to <4 x double>
  %130 = fmul <4 x double> %111, %129
  %131 = fptrunc <4 x double> %130 to <4 x float>
  %132 = bitcast float* %126 to <4 x float>*
  store <4 x float> %131, <4 x float>* %132, align 4, !alias.scope !5, !noalias !7
  %133 = fmul <4 x double> %113, %129
  %134 = fptrunc <4 x double> %133 to <4 x float>
  %135 = bitcast float* %125 to <4 x float>*
  store <4 x float> %134, <4 x float>* %135, align 4, !alias.scope !9, !noalias !2
  %136 = or i64 %122, 4
  %137 = getelementptr float, float* %19, i64 %136
  %138 = getelementptr float, float* %56, i64 %136
  %139 = getelementptr float, float* %44, i64 %136
  %140 = bitcast float* %137 to <4 x float>*
  %141 = load <4 x float>, <4 x float>* %140, align 4, !alias.scope !2
  %142 = fpext <4 x float> %141 to <4 x double>
  %143 = fmul <4 x double> %111, %142
  %144 = fptrunc <4 x double> %143 to <4 x float>
  %145 = bitcast float* %139 to <4 x float>*
  store <4 x float> %144, <4 x float>* %145, align 4, !alias.scope !5, !noalias !7
  %146 = fmul <4 x double> %113, %142
  %147 = fptrunc <4 x double> %146 to <4 x float>
  %148 = bitcast float* %138 to <4 x float>*
  store <4 x float> %147, <4 x float>* %148, align 4, !alias.scope !9, !noalias !2
  %149 = add i64 %122, 8
  %150 = add i64 %123, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %121, !llvm.loop !10

152:                                              ; preds = %121, %103
  %153 = phi i64 [ 0, %103 ], [ %149, %121 ]
  %154 = icmp eq i64 %117, 0
  br i1 %154, label %168, label %155

155:                                              ; preds = %152
  %156 = getelementptr float, float* %19, i64 %153
  %157 = getelementptr float, float* %56, i64 %153
  %158 = getelementptr float, float* %44, i64 %153
  %159 = bitcast float* %156 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 4, !alias.scope !2
  %161 = fpext <4 x float> %160 to <4 x double>
  %162 = fmul <4 x double> %111, %161
  %163 = fptrunc <4 x double> %162 to <4 x float>
  %164 = bitcast float* %158 to <4 x float>*
  store <4 x float> %163, <4 x float>* %164, align 4, !alias.scope !5, !noalias !7
  %165 = fmul <4 x double> %113, %161
  %166 = fptrunc <4 x double> %165 to <4 x float>
  %167 = bitcast float* %157 to <4 x float>*
  store <4 x float> %166, <4 x float>* %167, align 4, !alias.scope !9, !noalias !2
  br label %168

168:                                              ; preds = %152, %155
  %169 = icmp eq i64 %83, %104
  br i1 %169, label %258, label %170

170:                                              ; preds = %168, %85, %80
  %171 = phi float* [ %19, %85 ], [ %19, %80 ], [ %105, %168 ]
  %172 = phi i32 [ %4, %85 ], [ %4, %80 ], [ %107, %168 ]
  %173 = phi float* [ %56, %85 ], [ %56, %80 ], [ %108, %168 ]
  %174 = phi float* [ %44, %85 ], [ %44, %80 ], [ %109, %168 ]
  %175 = and i32 %172, 1
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %188, label %177

177:                                              ; preds = %170
  %178 = add nsw i32 %172, -1
  %179 = getelementptr inbounds float, float* %171, i64 1
  %180 = load float, float* %171, align 4
  %181 = fpext float %180 to double
  %182 = fmul double %77, %181
  %183 = fptrunc double %182 to float
  %184 = getelementptr inbounds float, float* %174, i64 1
  store float %183, float* %174, align 4
  %185 = fmul double %78, %181
  %186 = fptrunc double %185 to float
  %187 = getelementptr inbounds float, float* %173, i64 1
  store float %186, float* %173, align 4
  br label %188

188:                                              ; preds = %170, %177
  %189 = phi float* [ %171, %170 ], [ %179, %177 ]
  %190 = phi i32 [ %172, %170 ], [ %178, %177 ]
  %191 = phi float* [ %173, %170 ], [ %187, %177 ]
  %192 = phi float* [ %174, %170 ], [ %184, %177 ]
  %193 = icmp eq i32 %172, 1
  br i1 %193, label %258, label %194

194:                                              ; preds = %188, %194
  %195 = phi float* [ %209, %194 ], [ %189, %188 ]
  %196 = phi i32 [ %208, %194 ], [ %190, %188 ]
  %197 = phi float* [ %217, %194 ], [ %191, %188 ]
  %198 = phi float* [ %214, %194 ], [ %192, %188 ]
  %199 = getelementptr inbounds float, float* %195, i64 1
  %200 = load float, float* %195, align 4
  %201 = fpext float %200 to double
  %202 = fmul double %77, %201
  %203 = fptrunc double %202 to float
  %204 = getelementptr inbounds float, float* %198, i64 1
  store float %203, float* %198, align 4
  %205 = fmul double %78, %201
  %206 = fptrunc double %205 to float
  %207 = getelementptr inbounds float, float* %197, i64 1
  store float %206, float* %197, align 4
  %208 = add nsw i32 %196, -2
  %209 = getelementptr inbounds float, float* %195, i64 2
  %210 = load float, float* %199, align 4
  %211 = fpext float %210 to double
  %212 = fmul double %77, %211
  %213 = fptrunc double %212 to float
  %214 = getelementptr inbounds float, float* %198, i64 2
  store float %213, float* %204, align 4
  %215 = fmul double %78, %211
  %216 = fptrunc double %215 to float
  %217 = getelementptr inbounds float, float* %197, i64 2
  store float %216, float* %207, align 4
  %218 = icmp eq i32 %208, 0
  br i1 %218, label %258, label %194, !llvm.loop !12

219:                                              ; preds = %64
  %220 = fcmp ole float %70, 0.000000e+00
  %221 = fadd float %70, 1.000000e+00
  %222 = select i1 %220, float %221, float %70
  %223 = fpext float %222 to double
  %224 = fmul double %223, 0x3FF921FB54442D18
  %225 = tail call double @_ZN6fdlibm3cosEd(double %224) #5
  %226 = tail call double @_ZN6fdlibm3sinEd(double %224) #5
  %227 = icmp eq i32 %4, 0
  br i1 %227, label %258, label %228

228:                                              ; preds = %219, %252
  %229 = phi i32 [ %234, %252 ], [ %4, %219 ]
  %230 = phi float* [ %235, %252 ], [ %19, %219 ]
  %231 = phi float* [ %237, %252 ], [ %32, %219 ]
  %232 = phi float* [ %254, %252 ], [ %56, %219 ]
  %233 = phi float* [ %255, %252 ], [ %44, %219 ]
  %234 = add nsw i32 %229, -1
  %235 = getelementptr inbounds float, float* %230, i64 1
  %236 = load float, float* %230, align 4
  %237 = getelementptr inbounds float, float* %231, i64 1
  %238 = load float, float* %231, align 4
  %239 = fpext float %236 to double
  br i1 %220, label %240, label %246

240:                                              ; preds = %228
  %241 = fpext float %238 to double
  %242 = fmul double %225, %241
  %243 = fadd double %242, %239
  %244 = fptrunc double %243 to float
  store float %244, float* %233, align 4
  %245 = fmul double %226, %241
  br label %252

246:                                              ; preds = %228
  %247 = fmul double %225, %239
  %248 = fptrunc double %247 to float
  store float %248, float* %233, align 4
  %249 = fpext float %238 to double
  %250 = fmul double %226, %239
  %251 = fadd double %250, %249
  br label %252

252:                                              ; preds = %246, %240
  %253 = phi double [ %251, %246 ], [ %245, %240 ]
  %254 = getelementptr inbounds float, float* %232, i64 1
  %255 = getelementptr inbounds float, float* %233, i64 1
  %256 = fptrunc double %253 to float
  store float %256, float* %232, align 4
  %257 = icmp eq i32 %234, 0
  br i1 %257, label %258, label %228

258:                                              ; preds = %252, %188, %194, %168, %219, %72, %55
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #5
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #5
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::AudioChannel"*, %"class.blink::AudioChannel"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %24, i64 %25
  ret %"class.blink::AudioChannel"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3}
!8 = distinct !{!8, !4}
!9 = !{!8}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
