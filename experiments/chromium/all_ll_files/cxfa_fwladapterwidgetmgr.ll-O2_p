; ModuleID = '../../third_party/pdfium/xfa/fxfa/cxfa_fwladapterwidgetmgr.cpp'
source_filename = "../../third_party/pdfium/xfa/fxfa/cxfa_fwladapterwidgetmgr.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CXFA_FWLAdapterWidgetMgr = type <{ %"class.CFWL_WidgetMgr::AdapterIface", [8 x i8] }>
%"class.CFWL_WidgetMgr::AdapterIface" = type { %"class.cppgc::GarbageCollectedMixin" }
%"class.cppgc::GarbageCollectedMixin" = type { i32 (...)** }
%"class.cppgc::Visitor" = type { i32 (...)** }
%class.CFWL_Widget = type { %class.IFWL_WidgetDelegate, %"class.CFWL_Widget::Properties", %class.CFX_RectF, i32, i64, %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.3", %"class.cppgc::internal::BasicMember.4" }
%class.IFWL_WidgetDelegate = type { %"class.cppgc::GarbageCollectedMixin" }
%"class.CFWL_Widget::Properties" = type { i32, i32, i32 }
%class.CFX_RectF = type { float, float, float, float }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.cppgc::internal::BasicMember.1" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.2" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.3" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.4" = type { %"class.cppgc::internal::MemberBase" }
%"class.CFWL_Widget::AdapterIface" = type { %"class.cppgc::GarbageCollectedMixin" }
%class.CXFA_FFWidget = type { %"class.CFWL_Widget::AdapterIface", %"class.cppgc::internal::BasicMember.6", %"class.cppgc::internal::BasicMember.7", %"class.cppgc::internal::BasicMember.8", %"class.cppgc::internal::BasicMember.9", %class.CFX_RectF }
%"class.cppgc::internal::BasicMember.6" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.7" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.8" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.9" = type { %"class.cppgc::internal::MemberBase" }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CXFA_FFDoc = type <{ %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr.11", %"class.fxcrt::UnownedPtr.12", %"class.fxcrt::UnownedPtr.13", %"class.cppgc::internal::BasicMember.14", %"class.cppgc::internal::BasicMember.15", %"class.cppgc::internal::BasicMember.16", %"class.cppgc::internal::BasicMember.7", %"class.std::__1::unique_ptr", %"class.std::__1::map", i32, [4 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.IXFA_DocEnvironment* }
%class.IXFA_DocEnvironment = type { i32 (...)** }
%"class.fxcrt::UnownedPtr.11" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%"class.fxcrt::UnownedPtr.12" = type { %"class.cppgc::Heap"* }
%"class.cppgc::Heap" = type { i32 (...)** }
%"class.fxcrt::UnownedPtr.13" = type { %class.CFX_XMLDocument* }
%class.CFX_XMLDocument = type opaque
%"class.cppgc::internal::BasicMember.14" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.15" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.16" = type { %"class.cppgc::internal::MemberBase" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFGAS_PDFFontMgr* }
%class.CFGAS_PDFFontMgr = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i64 }

@_ZTV24CXFA_FWLAdapterWidgetMgr = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CXFA_FWLAdapterWidgetMgr*, %"class.cppgc::Visitor"*)* @_ZNK24CXFA_FWLAdapterWidgetMgr5TraceEPN5cppgc7VisitorE to i8*), i8* bitcast (void (%class.CXFA_FWLAdapterWidgetMgr*)* @_ZN24CXFA_FWLAdapterWidgetMgrD2Ev to i8*), i8* bitcast (void (%class.CXFA_FWLAdapterWidgetMgr*)* @_ZN24CXFA_FWLAdapterWidgetMgrD0Ev to i8*), i8* bitcast (void (%class.CXFA_FWLAdapterWidgetMgr*, %class.CFWL_Widget*)* @_ZN24CXFA_FWLAdapterWidgetMgr13RepaintWidgetEP11CFWL_Widget to i8*), i8* bitcast (i1 (%class.CXFA_FWLAdapterWidgetMgr*, %class.CFWL_Widget*, float, float, %class.CFX_RectF*, %class.CFX_RectF*)* @_ZN24CXFA_FWLAdapterWidgetMgr11GetPopupPosEP11CFWL_WidgetffRK9CFX_RectFPS2_ to i8*)] }, align 8

@_ZN24CXFA_FWLAdapterWidgetMgrC1Ev = hidden unnamed_addr alias void (%class.CXFA_FWLAdapterWidgetMgr*), void (%class.CXFA_FWLAdapterWidgetMgr*)* @_ZN24CXFA_FWLAdapterWidgetMgrC2Ev
@_ZN24CXFA_FWLAdapterWidgetMgrD1Ev = hidden unnamed_addr alias void (%class.CXFA_FWLAdapterWidgetMgr*), void (%class.CXFA_FWLAdapterWidgetMgr*)* @_ZN24CXFA_FWLAdapterWidgetMgrD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN24CXFA_FWLAdapterWidgetMgrC2Ev(%class.CXFA_FWLAdapterWidgetMgr* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_FWLAdapterWidgetMgr, %class.CXFA_FWLAdapterWidgetMgr* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV24CXFA_FWLAdapterWidgetMgr, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN24CXFA_FWLAdapterWidgetMgrD2Ev(%class.CXFA_FWLAdapterWidgetMgr* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN24CXFA_FWLAdapterWidgetMgrD0Ev(%class.CXFA_FWLAdapterWidgetMgr* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK24CXFA_FWLAdapterWidgetMgr5TraceEPN5cppgc7VisitorE(%class.CXFA_FWLAdapterWidgetMgr* nocapture, %"class.cppgc::Visitor"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24CXFA_FWLAdapterWidgetMgr13RepaintWidgetEP11CFWL_Widget(%class.CXFA_FWLAdapterWidgetMgr* nocapture readnone, %class.CFWL_Widget* readonly) unnamed_addr #2 align 2 {
  %3 = icmp eq %class.CFWL_Widget* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.CFWL_Widget, %class.CFWL_Widget* %1, i64 0, i32 5
  %6 = bitcast %"class.cppgc::internal::BasicMember"* %5 to %"class.CFWL_Widget::AdapterIface"**
  %7 = load %"class.CFWL_Widget::AdapterIface"*, %"class.CFWL_Widget::AdapterIface"** %6, align 8
  %8 = icmp eq %"class.CFWL_Widget::AdapterIface"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = bitcast %"class.CFWL_Widget::AdapterIface"* %7 to %class.CXFA_FFWidget*
  tail call void @_ZN13CXFA_FFWidget14InvalidateRectEv(%class.CXFA_FFWidget* nonnull %10) #5
  br label %11

11:                                               ; preds = %9, %4, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN13CXFA_FFWidget14InvalidateRectEv(%class.CXFA_FFWidget*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24CXFA_FWLAdapterWidgetMgr11GetPopupPosEP11CFWL_WidgetffRK9CFX_RectFPS2_(%class.CXFA_FWLAdapterWidgetMgr* nocapture readnone, %class.CFWL_Widget* nocapture readonly, float, float, %class.CFX_RectF* dereferenceable(16), %class.CFX_RectF*) unnamed_addr #2 align 2 {
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = bitcast { <2 x float>, <2 x float> }* %7 to %class.CFX_RectF*
  %9 = alloca %class.CFX_Matrix, align 4
  %10 = getelementptr inbounds %class.CFWL_Widget, %class.CFWL_Widget* %1, i64 0, i32 5
  %11 = bitcast %"class.cppgc::internal::BasicMember"* %10 to %"class.CFWL_Widget::AdapterIface"**
  %12 = load %"class.CFWL_Widget::AdapterIface"*, %"class.CFWL_Widget::AdapterIface"** %11, align 8
  %13 = bitcast %"class.CFWL_Widget::AdapterIface"* %12 to %class.CXFA_FFWidget*
  %14 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #5
  %15 = bitcast %class.CFX_Matrix* %9 to i8*
  %16 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #5
  %17 = bitcast %"class.CFWL_Widget::AdapterIface"* %12 to void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)***
  %18 = load void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)**, void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)*, void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)** %18, i64 3
  %20 = load void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)*, void (%class.CFX_Matrix*, %class.CXFA_FFWidget*)** %19, align 8
  call void %20(%class.CFX_Matrix* nonnull sret %9, %class.CXFA_FFWidget* %13) #5
  %21 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK9CFX_RectF(%class.CFX_Matrix* nonnull %9, %class.CFX_RectF* dereferenceable(16) %4) #5
  %22 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  %23 = extractvalue { <2 x float>, <2 x float> } %21, 0
  store <2 x float> %23, <2 x float>* %22, align 8
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  %25 = extractvalue { <2 x float>, <2 x float> } %21, 1
  store <2 x float> %25, <2 x float>* %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #5
  %26 = call %class.CXFA_FFDoc* @_ZN13CXFA_FFWidget6GetDocEv(%class.CXFA_FFWidget* %13) #5
  %27 = call zeroext i1 @_ZNK10CXFA_FFDoc11GetPopupPosEP13CXFA_FFWidgetffRK9CFX_RectFPS2_(%class.CXFA_FFDoc* %26, %class.CXFA_FFWidget* %13, float %2, float %3, %class.CFX_RectF* nonnull dereferenceable(16) %8, %class.CFX_RectF* %5) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #5
  ret i1 true
}

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK9CFX_RectF(%class.CFX_Matrix*, %class.CFX_RectF* dereferenceable(16)) local_unnamed_addr #4

declare %class.CXFA_FFDoc* @_ZN13CXFA_FFWidget6GetDocEv(%class.CXFA_FFWidget*) local_unnamed_addr #4

declare zeroext i1 @_ZNK10CXFA_FFDoc11GetPopupPosEP13CXFA_FFWidgetffRK9CFX_RectFPS2_(%class.CXFA_FFDoc*, %class.CXFA_FFWidget*, float, float, %class.CFX_RectF* dereferenceable(16), %class.CFX_RectF*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
