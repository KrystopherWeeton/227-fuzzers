; ModuleID = '../../v8/src/deoptimizer/translation-array.cc'
source_filename = "../../v8/src/deoptimizer/translation-array.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::TranslationArrayIterator" = type <{ %"class.std::__1::vector", %"class.v8::internal::ByteArray", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.v8::internal::ByteArray" = type { %"class.v8::internal::TorqueGeneratedByteArray" }
%"class.v8::internal::TorqueGeneratedByteArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::TranslationArrayBuilder" = type { %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector.29", %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { i8*, i8*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5", %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.29" = type { %"class.std::__1::vector.30" }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { i32*, i32*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.v8::internal::ZoneAllocator.34" }
%"class.v8::internal::ZoneAllocator.34" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.11" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.22" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.std::__1::set.22" = type { %"class.std::__1::__tree.23" }
%"class.std::__1::__tree.23" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::FactoryBase" = type { i8 }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertENS_11__wrap_iterIPKiEEmRS5_ = comdat any

@_ZN2v88internal38FLAG_turbo_compress_translation_arraysE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [208 x i8] c"zlib_internal::UncompressHelper( zlib_internal::ZRAW, bit_cast<Cr_z_Bytef*>(uncompressed_contents_.data()), &uncompressed_size, buffer_.GetDataStartAddress() + kCompressedDataOffset, buffer_.DataSize()) == 0\00", align 1
@.str.2 = private unnamed_addr constant [203 x i8] c"zlib_internal::CompressHelper( zlib_internal::ZRAW, compressed_data.data(), &compressed_data_size, bit_cast<const Cr_z_Bytef*>(contents_for_compression_.data()), input_size, (-1), nullptr, nullptr) == 0\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"storage_.is_populated_\00", align 1

@_ZN2v88internal24TranslationArrayIteratorC1ENS0_9ByteArrayEi = hidden unnamed_addr alias void (%"class.v8::internal::TranslationArrayIterator"*, i64, i32), void (%"class.v8::internal::TranslationArrayIterator"*, i64, i32)* @_ZN2v88internal24TranslationArrayIteratorC2ENS0_9ByteArrayEi

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal24TranslationArrayIteratorC2ENS0_9ByteArrayEi(%"class.v8::internal::TranslationArrayIterator"*, i64, i32) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = bitcast %"class.v8::internal::TranslationArrayIterator"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #9
  %7 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 2
  store i32 %2, i32* %8, align 8
  %9 = load i8, i8* @_ZN2v88internal38FLAG_turbo_compress_translation_arraysE, align 1, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %39, label %11, !prof !3

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 0
  %13 = add i64 %1, 7
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sext i32 %15 to i64
  %17 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #9
  store i32 0, i32* %4, align 4
  %18 = call i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertENS_11__wrap_iterIPKiEEmRS5_(%"class.std::__1::vector"* %12, i32* null, i64 %16, i32* nonnull dereferenceable(4) %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #9
  %19 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #9
  %20 = shl nsw i32 %15, 2
  %21 = sext i32 %20 to i64
  store i64 %21, i64* %5, align 8
  %22 = bitcast %"class.v8::internal::TranslationArrayIterator"* %0 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = load i64, i64* %7, align 8
  %25 = add i64 %24, 7
  %26 = inttoptr i64 %25 to i8*
  %27 = getelementptr inbounds i8, i8* %26, i64 4
  %28 = add i64 %24, 3
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %30, 1
  %32 = add nsw i32 %31, 3
  %33 = and i32 %32, -4
  %34 = sext i32 %33 to i64
  %35 = call i32 @_ZN13zlib_internal16UncompressHelperENS_11WrapperTypeEPhPmPKhm(i32 2, i8* %23, i64* nonnull %5, i8* %27, i64 %34) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %38, label %37, !prof !3

37:                                               ; preds = %11
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([208 x i8], [208 x i8]* @.str.1, i64 0, i64 0)) #10
  unreachable

38:                                               ; preds = %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #9
  br label %39

39:                                               ; preds = %3, %38
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertENS_11__wrap_iterIPKiEEmRS5_(%"class.std::__1::vector"*, i32*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i32* %3 to i8*
  %6 = bitcast i32* %3 to i8*
  %7 = bitcast i32* %1 to i8*
  %8 = ptrtoint i32* %1 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %721, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i32** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i32*, i32** %15, align 8
  %17 = bitcast i32* %16 to i8*
  %18 = ptrtoint i32* %16 to i64
  %19 = sub i64 %14, %18
  %20 = ashr exact i64 %19, 2
  %21 = icmp ult i64 %20, %2
  br i1 %21, label %395, label %22

22:                                               ; preds = %11
  %23 = sub i64 %18, %8
  %24 = ashr exact i64 %23, 2
  %25 = icmp ult i64 %24, %2
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = bitcast i32** %15 to i64*
  br label %149

28:                                               ; preds = %22
  %29 = sub i64 %2, %24
  %30 = bitcast i32** %15 to i64*
  %31 = getelementptr inbounds i32, i32* %16, i64 %29
  %32 = icmp eq i64 %29, 0
  br i1 %32, label %144, label %33

33:                                               ; preds = %28
  %34 = shl i64 %2, 2
  %35 = add i64 %34, -4
  %36 = sub i64 %35, %23
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %40, label %62

40:                                               ; preds = %121, %62, %33
  %41 = phi i32* [ %16, %62 ], [ %16, %33 ], [ %75, %121 ]
  %42 = ptrtoint i32* %41 to i64
  %43 = xor i64 %24, -1
  %44 = add i64 %43, %2
  %45 = getelementptr i32, i32* %16, i64 %44
  %46 = ptrtoint i32* %45 to i64
  %47 = sub i64 %46, %42
  %48 = lshr i64 %47, 2
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 7
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %40, %52
  %53 = phi i32* [ %56, %52 ], [ %41, %40 ]
  %54 = phi i64 [ %57, %52 ], [ %50, %40 ]
  %55 = load i32, i32* %3, align 4
  store i32 %55, i32* %53, align 4
  %56 = getelementptr inbounds i32, i32* %53, i64 1
  %57 = add i64 %54, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %52, !llvm.loop !4

59:                                               ; preds = %52, %40
  %60 = phi i32* [ %41, %40 ], [ %56, %52 ]
  %61 = icmp ult i64 %47, 28
  br i1 %61, label %123, label %125

62:                                               ; preds = %33
  %63 = shl i64 %2, 2
  %64 = add i64 %63, -4
  %65 = sub i64 %64, %23
  %66 = lshr i64 %65, 2
  %67 = add nuw nsw i64 %66, 1
  %68 = getelementptr i32, i32* %16, i64 %67
  %69 = getelementptr i8, i8* %6, i64 1
  %70 = icmp ugt i8* %69, %17
  %71 = icmp ugt i32* %68, %3
  %72 = and i1 %70, %71
  br i1 %72, label %40, label %73

73:                                               ; preds = %62
  %74 = and i64 %38, 9223372036854775800
  %75 = getelementptr i32, i32* %16, i64 %74
  %76 = add nsw i64 %74, -8
  %77 = lshr exact i64 %76, 3
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 1
  %80 = icmp eq i64 %76, 0
  br i1 %80, label %108, label %81

81:                                               ; preds = %73
  %82 = sub nuw nsw i64 %78, %79
  %83 = load i32, i32* %3, align 4, !alias.scope !6
  %84 = insertelement <4 x i32> undef, i32 %83, i32 0
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> zeroinitializer
  %86 = insertelement <4 x i32> undef, i32 %83, i32 0
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> zeroinitializer
  %88 = load i32, i32* %3, align 4, !alias.scope !6
  %89 = insertelement <4 x i32> undef, i32 %88, i32 0
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i32> undef, i32 %88, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %93

93:                                               ; preds = %93, %81
  %94 = phi i64 [ 0, %81 ], [ %105, %93 ]
  %95 = phi i64 [ %82, %81 ], [ %106, %93 ]
  %96 = getelementptr i32, i32* %16, i64 %94
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %97, align 4, !alias.scope !9, !noalias !6
  %98 = getelementptr i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %99, align 4, !alias.scope !9, !noalias !6
  %100 = or i64 %94, 8
  %101 = getelementptr i32, i32* %16, i64 %100
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %102, align 4, !alias.scope !9, !noalias !6
  %103 = getelementptr i32, i32* %101, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %104, align 4, !alias.scope !9, !noalias !6
  %105 = add i64 %94, 16
  %106 = add i64 %95, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %93, !llvm.loop !11

108:                                              ; preds = %93, %73
  %109 = phi i64 [ 0, %73 ], [ %105, %93 ]
  %110 = icmp eq i64 %79, 0
  br i1 %110, label %121, label %111

111:                                              ; preds = %108
  %112 = getelementptr i32, i32* %16, i64 %109
  %113 = load i32, i32* %3, align 4, !alias.scope !6
  %114 = insertelement <4 x i32> undef, i32 %113, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  %116 = insertelement <4 x i32> undef, i32 %113, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 4, !alias.scope !9, !noalias !6
  %119 = getelementptr i32, i32* %112, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %120, align 4, !alias.scope !9, !noalias !6
  br label %121

121:                                              ; preds = %108, %111
  %122 = icmp eq i64 %38, %74
  br i1 %122, label %123, label %40

123:                                              ; preds = %59, %125, %121
  %124 = ptrtoint i32* %31 to i64
  br label %144

125:                                              ; preds = %59, %125
  %126 = phi i32* [ %142, %125 ], [ %60, %59 ]
  %127 = load i32, i32* %3, align 4
  store i32 %127, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %126, i64 1
  %129 = load i32, i32* %3, align 4
  store i32 %129, i32* %128, align 4
  %130 = getelementptr inbounds i32, i32* %126, i64 2
  %131 = load i32, i32* %3, align 4
  store i32 %131, i32* %130, align 4
  %132 = getelementptr inbounds i32, i32* %126, i64 3
  %133 = load i32, i32* %3, align 4
  store i32 %133, i32* %132, align 4
  %134 = getelementptr inbounds i32, i32* %126, i64 4
  %135 = load i32, i32* %3, align 4
  store i32 %135, i32* %134, align 4
  %136 = getelementptr inbounds i32, i32* %126, i64 5
  %137 = load i32, i32* %3, align 4
  store i32 %137, i32* %136, align 4
  %138 = getelementptr inbounds i32, i32* %126, i64 6
  %139 = load i32, i32* %3, align 4
  store i32 %139, i32* %138, align 4
  %140 = getelementptr inbounds i32, i32* %126, i64 7
  %141 = load i32, i32* %3, align 4
  store i32 %141, i32* %140, align 4
  %142 = getelementptr inbounds i32, i32* %126, i64 8
  %143 = icmp eq i32* %142, %31
  br i1 %143, label %123, label %125, !llvm.loop !13

144:                                              ; preds = %123, %28
  %145 = phi i64 [ %124, %123 ], [ %18, %28 ]
  store i64 %145, i64* %30, align 8
  %146 = icmp eq i64 %23, 0
  br i1 %146, label %721, label %147

147:                                              ; preds = %144
  %148 = inttoptr i64 %145 to i32*
  br label %149

149:                                              ; preds = %147, %26
  %150 = phi i64* [ %30, %147 ], [ %27, %26 ]
  %151 = phi i64 [ %145, %147 ], [ %18, %26 ]
  %152 = phi i32* [ %148, %147 ], [ %16, %26 ]
  %153 = phi i64 [ %24, %147 ], [ %2, %26 ]
  %154 = getelementptr inbounds i32, i32* %1, i64 %2
  %155 = ptrtoint i32* %154 to i64
  %156 = sub i64 %151, %155
  %157 = ashr exact i64 %156, 2
  %158 = getelementptr inbounds i32, i32* %1, i64 %157
  %159 = icmp ult i32* %158, %16
  br i1 %159, label %160, label %273

160:                                              ; preds = %149
  %161 = sub nsw i64 0, %157
  %162 = getelementptr i32, i32* %16, i64 %161
  %163 = bitcast i32* %162 to i8*
  %164 = xor i64 %8, -1
  %165 = getelementptr i8, i8* %163, i64 %164
  %166 = ptrtoint i8* %165 to i64
  %167 = lshr i64 %166, 2
  %168 = add nuw nsw i64 %167, 1
  %169 = icmp ult i64 %168, 8
  br i1 %169, label %170, label %173

170:                                              ; preds = %268, %173, %160
  %171 = phi i32* [ %152, %173 ], [ %152, %160 ], [ %191, %268 ]
  %172 = phi i32* [ %158, %173 ], [ %158, %160 ], [ %192, %268 ]
  br label %280

173:                                              ; preds = %160
  %174 = sub nsw i64 0, %157
  %175 = getelementptr i32, i32* %16, i64 %174
  %176 = bitcast i32* %175 to i8*
  %177 = xor i64 %8, -1
  %178 = getelementptr i8, i8* %176, i64 %177
  %179 = ptrtoint i8* %178 to i64
  %180 = lshr i64 %179, 2
  %181 = add nuw nsw i64 %180, 1
  %182 = getelementptr i32, i32* %152, i64 %181
  %183 = add nsw i64 %157, %180
  %184 = add i64 %183, 1
  %185 = getelementptr i32, i32* %1, i64 %184
  %186 = icmp ult i32* %152, %185
  %187 = icmp ult i32* %158, %182
  %188 = and i1 %186, %187
  br i1 %188, label %170, label %189

189:                                              ; preds = %173
  %190 = and i64 %168, 9223372036854775800
  %191 = getelementptr i32, i32* %152, i64 %190
  %192 = getelementptr i32, i32* %158, i64 %190
  %193 = add nsw i64 %190, -8
  %194 = lshr exact i64 %193, 3
  %195 = add nuw nsw i64 %194, 1
  %196 = and i64 %195, 3
  %197 = icmp ult i64 %193, 24
  br i1 %197, label %249, label %198

198:                                              ; preds = %189
  %199 = sub nsw i64 %195, %196
  br label %200

200:                                              ; preds = %200, %198
  %201 = phi i64 [ 0, %198 ], [ %246, %200 ]
  %202 = phi i64 [ %199, %198 ], [ %247, %200 ]
  %203 = getelementptr i32, i32* %152, i64 %201
  %204 = getelementptr i32, i32* %158, i64 %201
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4, !alias.scope !14
  %207 = getelementptr i32, i32* %204, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4, !alias.scope !14
  %210 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %210, align 4, !alias.scope !17, !noalias !14
  %211 = getelementptr i32, i32* %203, i64 4
  %212 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %209, <4 x i32>* %212, align 4, !alias.scope !17, !noalias !14
  %213 = or i64 %201, 8
  %214 = getelementptr i32, i32* %152, i64 %213
  %215 = getelementptr i32, i32* %158, i64 %213
  %216 = bitcast i32* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 4, !alias.scope !14
  %218 = getelementptr i32, i32* %215, i64 4
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4, !alias.scope !14
  %221 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %221, align 4, !alias.scope !17, !noalias !14
  %222 = getelementptr i32, i32* %214, i64 4
  %223 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %223, align 4, !alias.scope !17, !noalias !14
  %224 = or i64 %201, 16
  %225 = getelementptr i32, i32* %152, i64 %224
  %226 = getelementptr i32, i32* %158, i64 %224
  %227 = bitcast i32* %226 to <4 x i32>*
  %228 = load <4 x i32>, <4 x i32>* %227, align 4, !alias.scope !14
  %229 = getelementptr i32, i32* %226, i64 4
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !alias.scope !14
  %232 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %228, <4 x i32>* %232, align 4, !alias.scope !17, !noalias !14
  %233 = getelementptr i32, i32* %225, i64 4
  %234 = bitcast i32* %233 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %234, align 4, !alias.scope !17, !noalias !14
  %235 = or i64 %201, 24
  %236 = getelementptr i32, i32* %152, i64 %235
  %237 = getelementptr i32, i32* %158, i64 %235
  %238 = bitcast i32* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 4, !alias.scope !14
  %240 = getelementptr i32, i32* %237, i64 4
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4, !alias.scope !14
  %243 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %239, <4 x i32>* %243, align 4, !alias.scope !17, !noalias !14
  %244 = getelementptr i32, i32* %236, i64 4
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %245, align 4, !alias.scope !17, !noalias !14
  %246 = add i64 %201, 32
  %247 = add i64 %202, -4
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %200, !llvm.loop !19

249:                                              ; preds = %200, %189
  %250 = phi i64 [ 0, %189 ], [ %246, %200 ]
  %251 = icmp eq i64 %196, 0
  br i1 %251, label %268, label %252

252:                                              ; preds = %249, %252
  %253 = phi i64 [ %265, %252 ], [ %250, %249 ]
  %254 = phi i64 [ %266, %252 ], [ %196, %249 ]
  %255 = getelementptr i32, i32* %152, i64 %253
  %256 = getelementptr i32, i32* %158, i64 %253
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 4, !alias.scope !14
  %259 = getelementptr i32, i32* %256, i64 4
  %260 = bitcast i32* %259 to <4 x i32>*
  %261 = load <4 x i32>, <4 x i32>* %260, align 4, !alias.scope !14
  %262 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %262, align 4, !alias.scope !17, !noalias !14
  %263 = getelementptr i32, i32* %255, i64 4
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %264, align 4, !alias.scope !17, !noalias !14
  %265 = add i64 %253, 8
  %266 = add i64 %254, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %252, !llvm.loop !20

268:                                              ; preds = %252, %249
  %269 = icmp eq i64 %168, %190
  br i1 %269, label %270, label %170

270:                                              ; preds = %280, %268
  %271 = phi i32* [ %191, %268 ], [ %285, %280 ]
  %272 = ptrtoint i32* %271 to i64
  br label %273

273:                                              ; preds = %270, %149
  %274 = phi i64 [ %272, %270 ], [ %151, %149 ]
  store i64 %274, i64* %150, align 8
  %275 = icmp eq i64 %156, 0
  br i1 %275, label %287, label %276

276:                                              ; preds = %273
  %277 = sub nsw i64 0, %157
  %278 = getelementptr inbounds i32, i32* %152, i64 %277
  %279 = bitcast i32* %278 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %279, i8* align 4 %7, i64 %156, i1 false) #9
  br label %287

280:                                              ; preds = %170, %280
  %281 = phi i32* [ %285, %280 ], [ %171, %170 ]
  %282 = phi i32* [ %284, %280 ], [ %172, %170 ]
  %283 = load i32, i32* %282, align 4
  store i32 %283, i32* %281, align 4
  %284 = getelementptr inbounds i32, i32* %282, i64 1
  %285 = getelementptr inbounds i32, i32* %281, i64 1
  %286 = icmp ult i32* %284, %16
  br i1 %286, label %280, label %270, !llvm.loop !21

287:                                              ; preds = %273, %276
  %288 = icmp ugt i32* %1, %3
  br i1 %288, label %294, label %289

289:                                              ; preds = %287
  %290 = load i32*, i32** %15, align 8
  %291 = icmp ugt i32* %290, %3
  %292 = getelementptr inbounds i32, i32* %3, i64 %2
  %293 = select i1 %291, i32* %292, i32* %3
  br label %294

294:                                              ; preds = %289, %287
  %295 = phi i32* [ %3, %287 ], [ %293, %289 ]
  %296 = icmp ult i64 %153, 8
  br i1 %296, label %355, label %297

297:                                              ; preds = %294
  %298 = bitcast i32* %295 to i8*
  %299 = getelementptr i32, i32* %1, i64 %153
  %300 = getelementptr i8, i8* %298, i64 1
  %301 = icmp ugt i8* %300, %7
  %302 = icmp ult i32* %295, %299
  %303 = and i1 %301, %302
  br i1 %303, label %355, label %304

304:                                              ; preds = %297
  %305 = and i64 %153, -8
  %306 = getelementptr i32, i32* %1, i64 %305
  %307 = sub i64 %153, %305
  %308 = add i64 %305, -8
  %309 = lshr exact i64 %308, 3
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %310, 1
  %312 = icmp eq i64 %308, 0
  br i1 %312, label %340, label %313

313:                                              ; preds = %304
  %314 = sub nuw nsw i64 %310, %311
  %315 = load i32, i32* %295, align 4, !alias.scope !22
  %316 = insertelement <4 x i32> undef, i32 %315, i32 0
  %317 = shufflevector <4 x i32> %316, <4 x i32> undef, <4 x i32> zeroinitializer
  %318 = insertelement <4 x i32> undef, i32 %315, i32 0
  %319 = shufflevector <4 x i32> %318, <4 x i32> undef, <4 x i32> zeroinitializer
  %320 = load i32, i32* %295, align 4, !alias.scope !22
  %321 = insertelement <4 x i32> undef, i32 %320, i32 0
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> zeroinitializer
  %323 = insertelement <4 x i32> undef, i32 %320, i32 0
  %324 = shufflevector <4 x i32> %323, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %325

325:                                              ; preds = %325, %313
  %326 = phi i64 [ 0, %313 ], [ %337, %325 ]
  %327 = phi i64 [ %314, %313 ], [ %338, %325 ]
  %328 = getelementptr i32, i32* %1, i64 %326
  %329 = bitcast i32* %328 to <4 x i32>*
  store <4 x i32> %317, <4 x i32>* %329, align 4, !alias.scope !25, !noalias !22
  %330 = getelementptr i32, i32* %328, i64 4
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %331, align 4, !alias.scope !25, !noalias !22
  %332 = or i64 %326, 8
  %333 = getelementptr i32, i32* %1, i64 %332
  %334 = bitcast i32* %333 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %334, align 4, !alias.scope !25, !noalias !22
  %335 = getelementptr i32, i32* %333, i64 4
  %336 = bitcast i32* %335 to <4 x i32>*
  store <4 x i32> %324, <4 x i32>* %336, align 4, !alias.scope !25, !noalias !22
  %337 = add i64 %326, 16
  %338 = add i64 %327, -2
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %325, !llvm.loop !27

340:                                              ; preds = %325, %304
  %341 = phi i64 [ 0, %304 ], [ %337, %325 ]
  %342 = icmp eq i64 %311, 0
  br i1 %342, label %353, label %343

343:                                              ; preds = %340
  %344 = getelementptr i32, i32* %1, i64 %341
  %345 = load i32, i32* %295, align 4, !alias.scope !22
  %346 = insertelement <4 x i32> undef, i32 %345, i32 0
  %347 = shufflevector <4 x i32> %346, <4 x i32> undef, <4 x i32> zeroinitializer
  %348 = insertelement <4 x i32> undef, i32 %345, i32 0
  %349 = shufflevector <4 x i32> %348, <4 x i32> undef, <4 x i32> zeroinitializer
  %350 = bitcast i32* %344 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %350, align 4, !alias.scope !25, !noalias !22
  %351 = getelementptr i32, i32* %344, i64 4
  %352 = bitcast i32* %351 to <4 x i32>*
  store <4 x i32> %349, <4 x i32>* %352, align 4, !alias.scope !25, !noalias !22
  br label %353

353:                                              ; preds = %340, %343
  %354 = icmp eq i64 %153, %305
  br i1 %354, label %721, label %355

355:                                              ; preds = %353, %297, %294
  %356 = phi i32* [ %1, %297 ], [ %1, %294 ], [ %306, %353 ]
  %357 = phi i64 [ %153, %297 ], [ %153, %294 ], [ %307, %353 ]
  %358 = add i64 %357, -1
  %359 = and i64 %357, 7
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %370, label %361

361:                                              ; preds = %355, %361
  %362 = phi i32* [ %366, %361 ], [ %356, %355 ]
  %363 = phi i64 [ %367, %361 ], [ %357, %355 ]
  %364 = phi i64 [ %368, %361 ], [ %359, %355 ]
  %365 = load i32, i32* %295, align 4
  store i32 %365, i32* %362, align 4
  %366 = getelementptr inbounds i32, i32* %362, i64 1
  %367 = add i64 %363, -1
  %368 = add i64 %364, -1
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %361, !llvm.loop !28

370:                                              ; preds = %361, %355
  %371 = phi i32* [ %356, %355 ], [ %366, %361 ]
  %372 = phi i64 [ %357, %355 ], [ %367, %361 ]
  %373 = icmp ult i64 %358, 7
  br i1 %373, label %721, label %374

374:                                              ; preds = %370, %374
  %375 = phi i32* [ %392, %374 ], [ %371, %370 ]
  %376 = phi i64 [ %393, %374 ], [ %372, %370 ]
  %377 = load i32, i32* %295, align 4
  store i32 %377, i32* %375, align 4
  %378 = getelementptr inbounds i32, i32* %375, i64 1
  %379 = load i32, i32* %295, align 4
  store i32 %379, i32* %378, align 4
  %380 = getelementptr inbounds i32, i32* %375, i64 2
  %381 = load i32, i32* %295, align 4
  store i32 %381, i32* %380, align 4
  %382 = getelementptr inbounds i32, i32* %375, i64 3
  %383 = load i32, i32* %295, align 4
  store i32 %383, i32* %382, align 4
  %384 = getelementptr inbounds i32, i32* %375, i64 4
  %385 = load i32, i32* %295, align 4
  store i32 %385, i32* %384, align 4
  %386 = getelementptr inbounds i32, i32* %375, i64 5
  %387 = load i32, i32* %295, align 4
  store i32 %387, i32* %386, align 4
  %388 = getelementptr inbounds i32, i32* %375, i64 6
  %389 = load i32, i32* %295, align 4
  store i32 %389, i32* %388, align 4
  %390 = getelementptr inbounds i32, i32* %375, i64 7
  %391 = load i32, i32* %295, align 4
  store i32 %391, i32* %390, align 4
  %392 = getelementptr inbounds i32, i32* %375, i64 8
  %393 = add i64 %376, -8
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %721, label %374, !llvm.loop !29

395:                                              ; preds = %11
  %396 = bitcast i32** %15 to i64*
  %397 = bitcast %"class.std::__1::vector"* %0 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = sub i64 %18, %398
  %400 = ashr exact i64 %399, 2
  %401 = add i64 %400, %2
  %402 = icmp ugt i64 %401, 4611686018427387903
  br i1 %402, label %403, label %405

403:                                              ; preds = %395
  %404 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %404) #10
  unreachable

405:                                              ; preds = %395
  %406 = sub i64 %14, %398
  %407 = ashr exact i64 %406, 2
  %408 = icmp ult i64 %407, 2305843009213693951
  br i1 %408, label %412, label %409

409:                                              ; preds = %405
  %410 = sub i64 %8, %398
  %411 = ashr exact i64 %410, 2
  br label %422

412:                                              ; preds = %405
  %413 = ashr exact i64 %406, 1
  %414 = icmp ult i64 %413, %401
  %415 = select i1 %414, i64 %401, i64 %413
  %416 = sub i64 %8, %398
  %417 = ashr exact i64 %416, 2
  %418 = icmp eq i64 %415, 0
  br i1 %418, label %428, label %419

419:                                              ; preds = %412
  %420 = icmp ugt i64 %415, 4611686018427387903
  br i1 %420, label %421, label %422

421:                                              ; preds = %419
  tail call void @abort() #10
  unreachable

422:                                              ; preds = %409, %419
  %423 = phi i64 [ 4611686018427387903, %409 ], [ %415, %419 ]
  %424 = phi i64 [ %411, %409 ], [ %417, %419 ]
  %425 = shl i64 %423, 2
  %426 = tail call i8* @_Znwm(i64 %425) #11
  %427 = bitcast i8* %426 to i32*
  br label %428

428:                                              ; preds = %412, %422
  %429 = phi i64 [ %424, %422 ], [ %417, %412 ]
  %430 = phi i64 [ %423, %422 ], [ 0, %412 ]
  %431 = phi i32* [ %427, %422 ], [ null, %412 ]
  %432 = getelementptr inbounds i32, i32* %431, i64 %429
  %433 = getelementptr inbounds i32, i32* %431, i64 %430
  %434 = getelementptr inbounds i32, i32* %432, i64 %2
  %435 = shl nsw i64 %2, 2
  %436 = add i64 %435, -4
  %437 = lshr exact i64 %436, 2
  %438 = add nuw nsw i64 %437, 1
  %439 = icmp ult i64 %438, 8
  br i1 %439, label %502, label %440

440:                                              ; preds = %428
  %441 = bitcast i32* %432 to i8*
  %442 = shl nsw i64 %2, 2
  %443 = add i64 %442, -4
  %444 = lshr exact i64 %443, 2
  %445 = add nsw i64 %429, %444
  %446 = add i64 %445, 1
  %447 = getelementptr i32, i32* %431, i64 %446
  %448 = getelementptr i8, i8* %5, i64 1
  %449 = icmp ugt i8* %448, %441
  %450 = icmp ugt i32* %447, %3
  %451 = and i1 %449, %450
  br i1 %451, label %502, label %452

452:                                              ; preds = %440
  %453 = and i64 %438, 9223372036854775800
  %454 = getelementptr i32, i32* %432, i64 %453
  %455 = add nsw i64 %453, -8
  %456 = lshr exact i64 %455, 3
  %457 = add nuw nsw i64 %456, 1
  %458 = and i64 %457, 1
  %459 = icmp eq i64 %455, 0
  br i1 %459, label %487, label %460

460:                                              ; preds = %452
  %461 = sub nuw nsw i64 %457, %458
  %462 = load i32, i32* %3, align 4, !alias.scope !30
  %463 = insertelement <4 x i32> undef, i32 %462, i32 0
  %464 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> zeroinitializer
  %465 = insertelement <4 x i32> undef, i32 %462, i32 0
  %466 = shufflevector <4 x i32> %465, <4 x i32> undef, <4 x i32> zeroinitializer
  %467 = load i32, i32* %3, align 4, !alias.scope !30
  %468 = insertelement <4 x i32> undef, i32 %467, i32 0
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> zeroinitializer
  %470 = insertelement <4 x i32> undef, i32 %467, i32 0
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %472

472:                                              ; preds = %472, %460
  %473 = phi i64 [ 0, %460 ], [ %484, %472 ]
  %474 = phi i64 [ %461, %460 ], [ %485, %472 ]
  %475 = getelementptr i32, i32* %432, i64 %473
  %476 = bitcast i32* %475 to <4 x i32>*
  store <4 x i32> %464, <4 x i32>* %476, align 4, !alias.scope !33, !noalias !30
  %477 = getelementptr i32, i32* %475, i64 4
  %478 = bitcast i32* %477 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %478, align 4, !alias.scope !33, !noalias !30
  %479 = or i64 %473, 8
  %480 = getelementptr i32, i32* %432, i64 %479
  %481 = bitcast i32* %480 to <4 x i32>*
  store <4 x i32> %469, <4 x i32>* %481, align 4, !alias.scope !33, !noalias !30
  %482 = getelementptr i32, i32* %480, i64 4
  %483 = bitcast i32* %482 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %483, align 4, !alias.scope !33, !noalias !30
  %484 = add i64 %473, 16
  %485 = add i64 %474, -2
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %487, label %472, !llvm.loop !35

487:                                              ; preds = %472, %452
  %488 = phi i64 [ 0, %452 ], [ %484, %472 ]
  %489 = icmp eq i64 %458, 0
  br i1 %489, label %500, label %490

490:                                              ; preds = %487
  %491 = getelementptr i32, i32* %432, i64 %488
  %492 = load i32, i32* %3, align 4, !alias.scope !30
  %493 = insertelement <4 x i32> undef, i32 %492, i32 0
  %494 = shufflevector <4 x i32> %493, <4 x i32> undef, <4 x i32> zeroinitializer
  %495 = insertelement <4 x i32> undef, i32 %492, i32 0
  %496 = shufflevector <4 x i32> %495, <4 x i32> undef, <4 x i32> zeroinitializer
  %497 = bitcast i32* %491 to <4 x i32>*
  store <4 x i32> %494, <4 x i32>* %497, align 4, !alias.scope !33, !noalias !30
  %498 = getelementptr i32, i32* %491, i64 4
  %499 = bitcast i32* %498 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %499, align 4, !alias.scope !33, !noalias !30
  br label %500

500:                                              ; preds = %487, %490
  %501 = icmp eq i64 %438, %453
  br i1 %501, label %543, label %502

502:                                              ; preds = %500, %440, %428
  %503 = phi i32* [ %432, %440 ], [ %432, %428 ], [ %454, %500 ]
  %504 = ptrtoint i32* %503 to i64
  %505 = add i64 %429, %2
  %506 = add i64 %505, -1
  %507 = getelementptr i32, i32* %431, i64 %506
  %508 = ptrtoint i32* %507 to i64
  %509 = sub i64 %508, %504
  %510 = lshr i64 %509, 2
  %511 = add nuw nsw i64 %510, 1
  %512 = and i64 %511, 7
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %521, label %514

514:                                              ; preds = %502, %514
  %515 = phi i32* [ %518, %514 ], [ %503, %502 ]
  %516 = phi i64 [ %519, %514 ], [ %512, %502 ]
  %517 = load i32, i32* %3, align 4
  store i32 %517, i32* %515, align 4
  %518 = getelementptr inbounds i32, i32* %515, i64 1
  %519 = add i64 %516, -1
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %521, label %514, !llvm.loop !36

521:                                              ; preds = %514, %502
  %522 = phi i32* [ %503, %502 ], [ %518, %514 ]
  %523 = icmp ult i64 %509, 28
  br i1 %523, label %543, label %524

524:                                              ; preds = %521, %524
  %525 = phi i32* [ %541, %524 ], [ %522, %521 ]
  %526 = load i32, i32* %3, align 4
  store i32 %526, i32* %525, align 4
  %527 = getelementptr inbounds i32, i32* %525, i64 1
  %528 = load i32, i32* %3, align 4
  store i32 %528, i32* %527, align 4
  %529 = getelementptr inbounds i32, i32* %525, i64 2
  %530 = load i32, i32* %3, align 4
  store i32 %530, i32* %529, align 4
  %531 = getelementptr inbounds i32, i32* %525, i64 3
  %532 = load i32, i32* %3, align 4
  store i32 %532, i32* %531, align 4
  %533 = getelementptr inbounds i32, i32* %525, i64 4
  %534 = load i32, i32* %3, align 4
  store i32 %534, i32* %533, align 4
  %535 = getelementptr inbounds i32, i32* %525, i64 5
  %536 = load i32, i32* %3, align 4
  store i32 %536, i32* %535, align 4
  %537 = getelementptr inbounds i32, i32* %525, i64 6
  %538 = load i32, i32* %3, align 4
  store i32 %538, i32* %537, align 4
  %539 = getelementptr inbounds i32, i32* %525, i64 7
  %540 = load i32, i32* %3, align 4
  store i32 %540, i32* %539, align 4
  %541 = getelementptr inbounds i32, i32* %525, i64 8
  %542 = icmp eq i32* %434, %541
  br i1 %542, label %543, label %524, !llvm.loop !37

543:                                              ; preds = %521, %524, %500
  %544 = ptrtoint i32* %433 to i64
  %545 = load i32*, i32** %9, align 8
  %546 = ptrtoint i32* %545 to i64
  %547 = sub i64 %8, %546
  %548 = ashr exact i64 %547, 2
  %549 = sub nsw i64 0, %548
  %550 = getelementptr inbounds i32, i32* %432, i64 %549
  %551 = ptrtoint i32* %550 to i64
  %552 = icmp sgt i64 %547, 0
  br i1 %552, label %553, label %556

553:                                              ; preds = %543
  %554 = bitcast i32* %550 to i8*
  %555 = bitcast i32* %545 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %554, i8* align 4 %555, i64 %547, i1 false) #9
  br label %556

556:                                              ; preds = %553, %543
  %557 = load i32*, i32** %15, align 8
  %558 = icmp eq i32* %557, %1
  br i1 %558, label %714, label %559

559:                                              ; preds = %556
  %560 = getelementptr i32, i32* %557, i64 -1
  %561 = ptrtoint i32* %560 to i64
  %562 = sub i64 %561, %8
  %563 = lshr i64 %562, 2
  %564 = add nuw nsw i64 %563, 1
  %565 = icmp ult i64 %564, 8
  br i1 %565, label %661, label %566

566:                                              ; preds = %559
  %567 = add i64 %429, %2
  %568 = getelementptr i32, i32* %557, i64 -1
  %569 = ptrtoint i32* %568 to i64
  %570 = sub i64 %569, %8
  %571 = lshr i64 %570, 2
  %572 = add i64 %567, %571
  %573 = add i64 %572, 1
  %574 = getelementptr i32, i32* %431, i64 %573
  %575 = add nuw nsw i64 %571, 1
  %576 = getelementptr i32, i32* %1, i64 %575
  %577 = icmp ult i32* %434, %576
  %578 = icmp ugt i32* %574, %1
  %579 = and i1 %577, %578
  br i1 %579, label %661, label %580

580:                                              ; preds = %566
  %581 = and i64 %564, 9223372036854775800
  %582 = getelementptr i32, i32* %434, i64 %581
  %583 = getelementptr i32, i32* %1, i64 %581
  %584 = add nsw i64 %581, -8
  %585 = lshr exact i64 %584, 3
  %586 = add nuw nsw i64 %585, 1
  %587 = and i64 %586, 3
  %588 = icmp ult i64 %584, 24
  br i1 %588, label %640, label %589

589:                                              ; preds = %580
  %590 = sub nsw i64 %586, %587
  br label %591

591:                                              ; preds = %591, %589
  %592 = phi i64 [ 0, %589 ], [ %637, %591 ]
  %593 = phi i64 [ %590, %589 ], [ %638, %591 ]
  %594 = getelementptr i32, i32* %434, i64 %592
  %595 = getelementptr i32, i32* %1, i64 %592
  %596 = bitcast i32* %595 to <4 x i32>*
  %597 = load <4 x i32>, <4 x i32>* %596, align 4, !alias.scope !38
  %598 = getelementptr i32, i32* %595, i64 4
  %599 = bitcast i32* %598 to <4 x i32>*
  %600 = load <4 x i32>, <4 x i32>* %599, align 4, !alias.scope !38
  %601 = bitcast i32* %594 to <4 x i32>*
  store <4 x i32> %597, <4 x i32>* %601, align 4, !alias.scope !41, !noalias !38
  %602 = getelementptr i32, i32* %594, i64 4
  %603 = bitcast i32* %602 to <4 x i32>*
  store <4 x i32> %600, <4 x i32>* %603, align 4, !alias.scope !41, !noalias !38
  %604 = or i64 %592, 8
  %605 = getelementptr i32, i32* %434, i64 %604
  %606 = getelementptr i32, i32* %1, i64 %604
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 4, !alias.scope !38
  %609 = getelementptr i32, i32* %606, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4, !alias.scope !38
  %612 = bitcast i32* %605 to <4 x i32>*
  store <4 x i32> %608, <4 x i32>* %612, align 4, !alias.scope !41, !noalias !38
  %613 = getelementptr i32, i32* %605, i64 4
  %614 = bitcast i32* %613 to <4 x i32>*
  store <4 x i32> %611, <4 x i32>* %614, align 4, !alias.scope !41, !noalias !38
  %615 = or i64 %592, 16
  %616 = getelementptr i32, i32* %434, i64 %615
  %617 = getelementptr i32, i32* %1, i64 %615
  %618 = bitcast i32* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 4, !alias.scope !38
  %620 = getelementptr i32, i32* %617, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  %622 = load <4 x i32>, <4 x i32>* %621, align 4, !alias.scope !38
  %623 = bitcast i32* %616 to <4 x i32>*
  store <4 x i32> %619, <4 x i32>* %623, align 4, !alias.scope !41, !noalias !38
  %624 = getelementptr i32, i32* %616, i64 4
  %625 = bitcast i32* %624 to <4 x i32>*
  store <4 x i32> %622, <4 x i32>* %625, align 4, !alias.scope !41, !noalias !38
  %626 = or i64 %592, 24
  %627 = getelementptr i32, i32* %434, i64 %626
  %628 = getelementptr i32, i32* %1, i64 %626
  %629 = bitcast i32* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 4, !alias.scope !38
  %631 = getelementptr i32, i32* %628, i64 4
  %632 = bitcast i32* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 4, !alias.scope !38
  %634 = bitcast i32* %627 to <4 x i32>*
  store <4 x i32> %630, <4 x i32>* %634, align 4, !alias.scope !41, !noalias !38
  %635 = getelementptr i32, i32* %627, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  store <4 x i32> %633, <4 x i32>* %636, align 4, !alias.scope !41, !noalias !38
  %637 = add i64 %592, 32
  %638 = add i64 %593, -4
  %639 = icmp eq i64 %638, 0
  br i1 %639, label %640, label %591, !llvm.loop !43

640:                                              ; preds = %591, %580
  %641 = phi i64 [ 0, %580 ], [ %637, %591 ]
  %642 = icmp eq i64 %587, 0
  br i1 %642, label %659, label %643

643:                                              ; preds = %640, %643
  %644 = phi i64 [ %656, %643 ], [ %641, %640 ]
  %645 = phi i64 [ %657, %643 ], [ %587, %640 ]
  %646 = getelementptr i32, i32* %434, i64 %644
  %647 = getelementptr i32, i32* %1, i64 %644
  %648 = bitcast i32* %647 to <4 x i32>*
  %649 = load <4 x i32>, <4 x i32>* %648, align 4, !alias.scope !38
  %650 = getelementptr i32, i32* %647, i64 4
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4, !alias.scope !38
  %653 = bitcast i32* %646 to <4 x i32>*
  store <4 x i32> %649, <4 x i32>* %653, align 4, !alias.scope !41, !noalias !38
  %654 = getelementptr i32, i32* %646, i64 4
  %655 = bitcast i32* %654 to <4 x i32>*
  store <4 x i32> %652, <4 x i32>* %655, align 4, !alias.scope !41, !noalias !38
  %656 = add i64 %644, 8
  %657 = add i64 %645, -1
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %659, label %643, !llvm.loop !44

659:                                              ; preds = %643, %640
  %660 = icmp eq i64 %564, %581
  br i1 %660, label %714, label %661

661:                                              ; preds = %659, %566, %559
  %662 = phi i32* [ %434, %566 ], [ %434, %559 ], [ %582, %659 ]
  %663 = phi i32* [ %1, %566 ], [ %1, %559 ], [ %583, %659 ]
  %664 = ptrtoint i32* %663 to i64
  %665 = getelementptr i32, i32* %557, i64 -1
  %666 = ptrtoint i32* %665 to i64
  %667 = sub i64 %666, %664
  %668 = lshr i64 %667, 2
  %669 = add nuw nsw i64 %668, 1
  %670 = and i64 %669, 7
  %671 = icmp eq i64 %670, 0
  br i1 %671, label %681, label %672

672:                                              ; preds = %661, %672
  %673 = phi i32* [ %678, %672 ], [ %662, %661 ]
  %674 = phi i32* [ %677, %672 ], [ %663, %661 ]
  %675 = phi i64 [ %679, %672 ], [ %670, %661 ]
  %676 = load i32, i32* %674, align 4
  store i32 %676, i32* %673, align 4
  %677 = getelementptr inbounds i32, i32* %674, i64 1
  %678 = getelementptr inbounds i32, i32* %673, i64 1
  %679 = add i64 %675, -1
  %680 = icmp eq i64 %679, 0
  br i1 %680, label %681, label %672, !llvm.loop !45

681:                                              ; preds = %672, %661
  %682 = phi i32* [ undef, %661 ], [ %678, %672 ]
  %683 = phi i32* [ %662, %661 ], [ %678, %672 ]
  %684 = phi i32* [ %663, %661 ], [ %677, %672 ]
  %685 = icmp ult i64 %667, 28
  br i1 %685, label %714, label %686

686:                                              ; preds = %681, %686
  %687 = phi i32* [ %712, %686 ], [ %683, %681 ]
  %688 = phi i32* [ %711, %686 ], [ %684, %681 ]
  %689 = load i32, i32* %688, align 4
  store i32 %689, i32* %687, align 4
  %690 = getelementptr inbounds i32, i32* %688, i64 1
  %691 = getelementptr inbounds i32, i32* %687, i64 1
  %692 = load i32, i32* %690, align 4
  store i32 %692, i32* %691, align 4
  %693 = getelementptr inbounds i32, i32* %688, i64 2
  %694 = getelementptr inbounds i32, i32* %687, i64 2
  %695 = load i32, i32* %693, align 4
  store i32 %695, i32* %694, align 4
  %696 = getelementptr inbounds i32, i32* %688, i64 3
  %697 = getelementptr inbounds i32, i32* %687, i64 3
  %698 = load i32, i32* %696, align 4
  store i32 %698, i32* %697, align 4
  %699 = getelementptr inbounds i32, i32* %688, i64 4
  %700 = getelementptr inbounds i32, i32* %687, i64 4
  %701 = load i32, i32* %699, align 4
  store i32 %701, i32* %700, align 4
  %702 = getelementptr inbounds i32, i32* %688, i64 5
  %703 = getelementptr inbounds i32, i32* %687, i64 5
  %704 = load i32, i32* %702, align 4
  store i32 %704, i32* %703, align 4
  %705 = getelementptr inbounds i32, i32* %688, i64 6
  %706 = getelementptr inbounds i32, i32* %687, i64 6
  %707 = load i32, i32* %705, align 4
  store i32 %707, i32* %706, align 4
  %708 = getelementptr inbounds i32, i32* %688, i64 7
  %709 = getelementptr inbounds i32, i32* %687, i64 7
  %710 = load i32, i32* %708, align 4
  store i32 %710, i32* %709, align 4
  %711 = getelementptr inbounds i32, i32* %688, i64 8
  %712 = getelementptr inbounds i32, i32* %687, i64 8
  %713 = icmp eq i32* %711, %557
  br i1 %713, label %714, label %686, !llvm.loop !46

714:                                              ; preds = %681, %686, %659, %556
  %715 = phi i32* [ %434, %556 ], [ %582, %659 ], [ %682, %681 ], [ %712, %686 ]
  %716 = ptrtoint i32* %715 to i64
  %717 = load i32*, i32** %9, align 8
  store i64 %551, i64* %397, align 8
  store i64 %716, i64* %396, align 8
  store i64 %544, i64* %13, align 8
  %718 = icmp eq i32* %717, null
  br i1 %718, label %721, label %719

719:                                              ; preds = %714
  %720 = bitcast i32* %717 to i8*
  tail call void @_ZdlPv(i8* %720) #11
  br label %721

721:                                              ; preds = %370, %374, %353, %719, %714, %144, %4
  %722 = phi i32* [ %1, %4 ], [ %1, %144 ], [ %432, %714 ], [ %432, %719 ], [ %1, %353 ], [ %1, %374 ], [ %1, %370 ]
  ret i32* %722
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN13zlib_internal16UncompressHelperENS_11WrapperTypeEPhPmPKhm(i32, i8*, i64*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2v88internal24TranslationArrayIterator4NextEv(%"class.v8::internal::TranslationArrayIterator"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = load i8, i8* @_ZN2v88internal38FLAG_turbo_compress_translation_arraysE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %13, label %4, !prof !3

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %5, align 8
  %8 = sext i32 %6 to i64
  %9 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds i32, i32* %10, i64 %8
  %12 = load i32, i32* %11, align 4
  br label %45

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i8*
  %18 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %18, align 4
  %21 = sext i32 %19 to i64
  %22 = getelementptr inbounds i8, i8* %17, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = icmp sgt i8 %23, -1
  br i1 %25, label %38, label %26

26:                                               ; preds = %13
  %27 = sext i32 %20 to i64
  %28 = and i32 %24, 127
  %29 = add nsw i64 %27, 1
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %18, align 4
  %31 = getelementptr inbounds i8, i8* %17, i64 %27
  %32 = load i8, i8* %31, align 1
  %33 = and i8 %32, 127
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 7
  %36 = or i32 %35, %28
  %37 = icmp slt i8 %32, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %26, %47, %57, %67, %13
  %39 = phi i32 [ %24, %13 ], [ %36, %26 ], [ %55, %47 ], [ %65, %57 ], [ %73, %67 ]
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = lshr i32 %39, 1
  %43 = sub nsw i32 0, %42
  %44 = select i1 %41, i32 %42, i32 %43
  br label %45

45:                                               ; preds = %38, %4
  %46 = phi i32 [ %12, %4 ], [ %44, %38 ]
  ret i32 %46

47:                                               ; preds = %26
  %48 = add nsw i64 %27, 2
  %49 = trunc i64 %48 to i32
  store i32 %49, i32* %18, align 4
  %50 = getelementptr inbounds i8, i8* %17, i64 %29
  %51 = load i8, i8* %50, align 1
  %52 = and i8 %51, 127
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 14
  %55 = or i32 %54, %36
  %56 = icmp slt i8 %51, 0
  br i1 %56, label %57, label %38

57:                                               ; preds = %47
  %58 = add nsw i64 %27, 3
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %18, align 4
  %60 = getelementptr inbounds i8, i8* %17, i64 %48
  %61 = load i8, i8* %60, align 1
  %62 = and i8 %61, 127
  %63 = zext i8 %62 to i32
  %64 = shl nuw nsw i32 %63, 21
  %65 = or i32 %64, %55
  %66 = icmp slt i8 %61, 0
  br i1 %66, label %67, label %38

67:                                               ; preds = %57
  %68 = add i32 %19, 5
  store i32 %68, i32* %18, align 4
  %69 = getelementptr inbounds i8, i8* %17, i64 %58
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl i32 %71, 28
  %73 = or i32 %72, %65
  br label %38
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal24TranslationArrayIterator7HasNextEv(%"class.v8::internal::TranslationArrayIterator"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = load i8, i8* @_ZN2v88internal38FLAG_turbo_compress_translation_arraysE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  %4 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  br i1 %3, label %15, label %6, !prof !3

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.v8::internal::TranslationArrayIterator"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = lshr exact i64 %12, 2
  %14 = trunc i64 %13 to i32
  br label %22

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.v8::internal::TranslationArrayIterator", %"class.v8::internal::TranslationArrayIterator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 3
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = ashr i32 %20, 1
  br label %22

22:                                               ; preds = %15, %6
  %23 = phi i32 [ %14, %6 ], [ %21, %15 ]
  %24 = icmp slt i32 %5, %23
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = load i8, i8* @_ZN2v88internal38FLAG_turbo_compress_translation_arraysE, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %225, label %5, !prof !3

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = load i32*, i32** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = icmp eq i32* %8, %10
  %12 = ptrtoint i32* %10 to i64
  br i1 %11, label %17, label %13

13:                                               ; preds = %5
  store i32 %1, i32* %8, align 4
  %14 = getelementptr inbounds i32, i32* %8, i64 1
  %15 = ptrtoint i32* %14 to i64
  %16 = bitcast i32** %7 to i64*
  store i64 %15, i64* %16, align 8
  br label %593

17:                                               ; preds = %5
  %18 = ptrtoint i32* %8 to i64
  %19 = bitcast i32** %7 to i64*
  %20 = bitcast %"class.std::__1::vector.30"* %6 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 2
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 536870911
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector.30"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #10
  unreachable

28:                                               ; preds = %17
  %29 = bitcast i32** %9 to i64*
  %30 = sub i64 %12, %21
  %31 = ashr exact i64 %30, 2
  %32 = icmp ult i64 %31, 268435455
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 1
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %58, label %38

38:                                               ; preds = %33, %28
  %39 = phi i64 [ %36, %33 ], [ 536870911, %28 ]
  %40 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %41 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %40, align 8
  %42 = shl i64 %39, 2
  %43 = add i64 %42, 7
  %44 = and i64 %43, -8
  %45 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 3
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %48, %46
  %50 = icmp ugt i64 %44, %49
  br i1 %50, label %51, label %53, !prof !47

51:                                               ; preds = %38
  %52 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %41, i64 %44) #9
  br label %55

53:                                               ; preds = %38
  %54 = add i64 %44, %46
  store i64 %54, i64* %45, align 8
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ %52, %51 ], [ %46, %53 ]
  %57 = inttoptr i64 %56 to i32*
  br label %58

58:                                               ; preds = %55, %33
  %59 = phi i64 [ %39, %55 ], [ 0, %33 ]
  %60 = phi i32* [ %57, %55 ], [ null, %33 ]
  %61 = getelementptr inbounds i32, i32* %60, i64 %23
  %62 = getelementptr inbounds i32, i32* %60, i64 %59
  %63 = ptrtoint i32* %62 to i64
  store i32 %1, i32* %61, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 1
  %65 = ptrtoint i32* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %6, i64 0, i32 0, i32 0
  %67 = load i32*, i32** %66, align 8
  %68 = ptrtoint i32* %67 to i64
  %69 = load i32*, i32** %7, align 8
  %70 = icmp eq i32* %69, %67
  br i1 %70, label %222, label %71

71:                                               ; preds = %58
  %72 = getelementptr i32, i32* %69, i64 -1
  %73 = ptrtoint i32* %72 to i64
  %74 = sub i64 %73, %68
  %75 = lshr i64 %74, 2
  %76 = add nuw nsw i64 %75, 1
  %77 = icmp ult i64 %76, 8
  br i1 %77, label %170, label %78

78:                                               ; preds = %71
  %79 = getelementptr i32, i32* %69, i64 -1
  %80 = ptrtoint i32* %79 to i64
  %81 = sub i64 %80, %68
  %82 = lshr i64 %81, 2
  %83 = xor i64 %82, -1
  %84 = add nsw i64 %23, %83
  %85 = getelementptr i32, i32* %60, i64 %84
  %86 = xor i64 %82, -1
  %87 = getelementptr i32, i32* %69, i64 %86
  %88 = icmp ult i32* %85, %69
  %89 = icmp ult i32* %87, %61
  %90 = and i1 %88, %89
  br i1 %90, label %170, label %91

91:                                               ; preds = %78
  %92 = and i64 %76, 9223372036854775800
  %93 = sub nsw i64 0, %92
  %94 = getelementptr i32, i32* %61, i64 %93
  %95 = sub nsw i64 0, %92
  %96 = getelementptr i32, i32* %69, i64 %95
  %97 = add nsw i64 %92, -8
  %98 = lshr exact i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 1
  %101 = icmp eq i64 %97, 0
  br i1 %101, label %148, label %102

102:                                              ; preds = %91
  %103 = sub nuw nsw i64 %99, %100
  %104 = getelementptr i32, i32* %61, i64 -1
  %105 = getelementptr i32, i32* %69, i64 -1
  %106 = getelementptr i32, i32* %61, i64 -1
  %107 = getelementptr i32, i32* %69, i64 -1
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %143, %108 ]
  %110 = phi i64 [ %103, %102 ], [ %144, %108 ]
  %111 = sub i64 0, %109
  %112 = sub i64 0, %109
  %113 = getelementptr inbounds i32, i32* %104, i64 %111
  %114 = getelementptr inbounds i32, i32* %105, i64 %112
  %115 = getelementptr inbounds i32, i32* %114, i64 -3
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !alias.scope !48
  %118 = getelementptr inbounds i32, i32* %114, i64 -4
  %119 = getelementptr inbounds i32, i32* %118, i64 -3
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !alias.scope !48
  %122 = getelementptr inbounds i32, i32* %113, i64 -3
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %123, align 4, !alias.scope !51, !noalias !48
  %124 = getelementptr inbounds i32, i32* %113, i64 -4
  %125 = getelementptr inbounds i32, i32* %124, i64 -3
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %126, align 4, !alias.scope !51, !noalias !48
  %127 = sub nuw nsw i64 -8, %109
  %128 = sub nuw nsw i64 -8, %109
  %129 = getelementptr inbounds i32, i32* %106, i64 %127
  %130 = getelementptr inbounds i32, i32* %107, i64 %128
  %131 = getelementptr inbounds i32, i32* %130, i64 -3
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !alias.scope !48
  %134 = getelementptr inbounds i32, i32* %130, i64 -4
  %135 = getelementptr inbounds i32, i32* %134, i64 -3
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4, !alias.scope !48
  %138 = getelementptr inbounds i32, i32* %129, i64 -3
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %139, align 4, !alias.scope !51, !noalias !48
  %140 = getelementptr inbounds i32, i32* %129, i64 -4
  %141 = getelementptr inbounds i32, i32* %140, i64 -3
  %142 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %142, align 4, !alias.scope !51, !noalias !48
  %143 = add i64 %109, 16
  %144 = add i64 %110, -2
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %108, !llvm.loop !53

146:                                              ; preds = %108
  %147 = sub nuw nsw i64 -16, %109
  br label %148

148:                                              ; preds = %146, %91
  %149 = phi i64 [ 0, %91 ], [ %147, %146 ]
  %150 = icmp eq i64 %100, 0
  br i1 %150, label %168, label %151

151:                                              ; preds = %148
  %152 = getelementptr i32, i32* %61, i64 -1
  %153 = getelementptr i32, i32* %69, i64 -1
  %154 = getelementptr inbounds i32, i32* %152, i64 %149
  %155 = getelementptr inbounds i32, i32* %153, i64 %149
  %156 = getelementptr inbounds i32, i32* %155, i64 -3
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !alias.scope !48
  %159 = getelementptr inbounds i32, i32* %155, i64 -4
  %160 = getelementptr inbounds i32, i32* %159, i64 -3
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4, !alias.scope !48
  %163 = getelementptr inbounds i32, i32* %154, i64 -3
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %164, align 4, !alias.scope !51, !noalias !48
  %165 = getelementptr inbounds i32, i32* %154, i64 -4
  %166 = getelementptr inbounds i32, i32* %165, i64 -3
  %167 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %167, align 4, !alias.scope !51, !noalias !48
  br label %168

168:                                              ; preds = %148, %151
  %169 = icmp eq i64 %76, %92
  br i1 %169, label %222, label %170

170:                                              ; preds = %168, %78, %71
  %171 = phi i32* [ %61, %78 ], [ %61, %71 ], [ %94, %168 ]
  %172 = phi i32* [ %69, %78 ], [ %69, %71 ], [ %96, %168 ]
  %173 = getelementptr i32, i32* %172, i64 -1
  %174 = ptrtoint i32* %173 to i64
  %175 = sub i64 %174, %68
  %176 = lshr i64 %175, 2
  %177 = add nuw nsw i64 %176, 1
  %178 = and i64 %177, 7
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %189, label %180

180:                                              ; preds = %170, %180
  %181 = phi i32* [ %184, %180 ], [ %171, %170 ]
  %182 = phi i32* [ %185, %180 ], [ %172, %170 ]
  %183 = phi i64 [ %187, %180 ], [ %178, %170 ]
  %184 = getelementptr inbounds i32, i32* %181, i64 -1
  %185 = getelementptr inbounds i32, i32* %182, i64 -1
  %186 = load i32, i32* %185, align 4
  store i32 %186, i32* %184, align 4
  %187 = add i64 %183, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %180, !llvm.loop !54

189:                                              ; preds = %180, %170
  %190 = phi i32* [ undef, %170 ], [ %184, %180 ]
  %191 = phi i32* [ %171, %170 ], [ %184, %180 ]
  %192 = phi i32* [ %172, %170 ], [ %185, %180 ]
  %193 = icmp ult i64 %175, 28
  br i1 %193, label %222, label %194

194:                                              ; preds = %189, %194
  %195 = phi i32* [ %218, %194 ], [ %191, %189 ]
  %196 = phi i32* [ %219, %194 ], [ %192, %189 ]
  %197 = getelementptr inbounds i32, i32* %195, i64 -1
  %198 = getelementptr inbounds i32, i32* %196, i64 -1
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %197, align 4
  %200 = getelementptr inbounds i32, i32* %195, i64 -2
  %201 = getelementptr inbounds i32, i32* %196, i64 -2
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds i32, i32* %195, i64 -3
  %204 = getelementptr inbounds i32, i32* %196, i64 -3
  %205 = load i32, i32* %204, align 4
  store i32 %205, i32* %203, align 4
  %206 = getelementptr inbounds i32, i32* %195, i64 -4
  %207 = getelementptr inbounds i32, i32* %196, i64 -4
  %208 = load i32, i32* %207, align 4
  store i32 %208, i32* %206, align 4
  %209 = getelementptr inbounds i32, i32* %195, i64 -5
  %210 = getelementptr inbounds i32, i32* %196, i64 -5
  %211 = load i32, i32* %210, align 4
  store i32 %211, i32* %209, align 4
  %212 = getelementptr inbounds i32, i32* %195, i64 -6
  %213 = getelementptr inbounds i32, i32* %196, i64 -6
  %214 = load i32, i32* %213, align 4
  store i32 %214, i32* %212, align 4
  %215 = getelementptr inbounds i32, i32* %195, i64 -7
  %216 = getelementptr inbounds i32, i32* %196, i64 -7
  %217 = load i32, i32* %216, align 4
  store i32 %217, i32* %215, align 4
  %218 = getelementptr inbounds i32, i32* %195, i64 -8
  %219 = getelementptr inbounds i32, i32* %196, i64 -8
  %220 = load i32, i32* %219, align 4
  store i32 %220, i32* %218, align 4
  %221 = icmp eq i32* %219, %67
  br i1 %221, label %222, label %194, !llvm.loop !55

222:                                              ; preds = %189, %194, %168, %58
  %223 = phi i32* [ %61, %58 ], [ %94, %168 ], [ %190, %189 ], [ %218, %194 ]
  %224 = ptrtoint i32* %223 to i64
  store i64 %224, i64* %20, align 8
  store i64 %65, i64* %19, align 8
  store i64 %63, i64* %29, align 8
  br label %593

225:                                              ; preds = %2
  %226 = icmp slt i32 %1, 0
  %227 = sub nsw i32 0, %1
  %228 = select i1 %226, i32 %227, i32 %1
  %229 = shl nuw i32 %228, 1
  %230 = lshr i32 %1, 31
  %231 = or i32 %229, %230
  %232 = trunc i32 %231 to i8
  %233 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %234 = load i8*, i8** %233, align 8
  %235 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %236 = load i8*, i8** %235, align 8
  %237 = icmp eq i8* %234, %236
  %238 = ptrtoint i8* %236 to i64
  br i1 %237, label %243, label %239

239:                                              ; preds = %225
  store i8 %232, i8* %234, align 1
  %240 = getelementptr inbounds i8, i8* %234, i64 1
  %241 = ptrtoint i8* %240 to i64
  %242 = bitcast i8** %233 to i64*
  store i64 %241, i64* %242, align 8
  br label %407

243:                                              ; preds = %225
  %244 = ptrtoint i8* %234 to i64
  %245 = bitcast i8** %233 to i64*
  %246 = bitcast %"class.v8::internal::TranslationArrayBuilder"* %0 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = sub i64 %244, %247
  %249 = add i64 %248, 1
  %250 = icmp ugt i64 %249, 2147483647
  br i1 %250, label %251, label %253

251:                                              ; preds = %243
  %252 = bitcast %"class.v8::internal::TranslationArrayBuilder"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %252) #10
  unreachable

253:                                              ; preds = %243
  %254 = bitcast i8** %235 to i64*
  %255 = sub i64 %238, %247
  %256 = icmp ult i64 %255, 1073741823
  br i1 %256, label %257, label %262

257:                                              ; preds = %253
  %258 = shl i64 %255, 1
  %259 = icmp ult i64 %258, %249
  %260 = select i1 %259, i64 %249, i64 %258
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %281, label %262

262:                                              ; preds = %257, %253
  %263 = phi i64 [ %260, %257 ], [ 2147483647, %253 ]
  %264 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %265 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %264, align 8
  %266 = add nuw nsw i64 %263, 7
  %267 = and i64 %266, -8
  %268 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %265, i64 0, i32 2
  %269 = load i64, i64* %268, align 8
  %270 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %265, i64 0, i32 3
  %271 = load i64, i64* %270, align 8
  %272 = sub i64 %271, %269
  %273 = icmp ugt i64 %267, %272
  br i1 %273, label %274, label %276, !prof !47

274:                                              ; preds = %262
  %275 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %265, i64 %267) #9
  br label %278

276:                                              ; preds = %262
  %277 = add i64 %269, %267
  store i64 %277, i64* %268, align 8
  br label %278

278:                                              ; preds = %276, %274
  %279 = phi i64 [ %275, %274 ], [ %269, %276 ]
  %280 = inttoptr i64 %279 to i8*
  br label %281

281:                                              ; preds = %278, %257
  %282 = phi i64 [ %263, %278 ], [ 0, %257 ]
  %283 = phi i8* [ %280, %278 ], [ null, %257 ]
  %284 = getelementptr inbounds i8, i8* %283, i64 %248
  %285 = getelementptr inbounds i8, i8* %283, i64 %282
  %286 = ptrtoint i8* %285 to i64
  store i8 %232, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = ptrtoint i8* %287 to i64
  %289 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %290 = load i8*, i8** %289, align 8
  %291 = load i8*, i8** %233, align 8
  %292 = ptrtoint i8* %291 to i64
  %293 = icmp eq i8* %291, %290
  br i1 %293, label %404, label %294

294:                                              ; preds = %281
  %295 = ptrtoint i8* %290 to i64
  %296 = ptrtoint i8* %291 to i64
  %297 = sub i64 %296, %295
  %298 = icmp ult i64 %297, 16
  br i1 %298, label %394, label %299

299:                                              ; preds = %294
  %300 = sub i64 %244, %292
  %301 = sub i64 %300, %247
  %302 = getelementptr i8, i8* %290, i64 %301
  %303 = ptrtoint i8* %302 to i64
  %304 = getelementptr i8, i8* %283, i64 %303
  %305 = icmp ult i8* %304, %291
  %306 = icmp ult i8* %290, %284
  %307 = and i1 %305, %306
  br i1 %307, label %394, label %308

308:                                              ; preds = %299
  %309 = and i64 %297, -16
  %310 = sub i64 0, %309
  %311 = getelementptr i8, i8* %284, i64 %310
  %312 = sub i64 0, %309
  %313 = getelementptr i8, i8* %291, i64 %312
  %314 = add i64 %309, -16
  %315 = lshr exact i64 %314, 4
  %316 = add nuw nsw i64 %315, 1
  %317 = and i64 %316, 3
  %318 = icmp ult i64 %314, 48
  br i1 %318, label %371, label %319

319:                                              ; preds = %308
  %320 = sub nsw i64 %316, %317
  %321 = getelementptr i8, i8* %284, i64 -1
  %322 = getelementptr inbounds i8, i8* %321, i64 -8
  %323 = getelementptr inbounds i8, i8* %291, i64 -16
  %324 = getelementptr inbounds i8, i8* %322, i64 -7
  %325 = getelementptr i8, i8* %284, i64 -1
  %326 = getelementptr inbounds i8, i8* %325, i64 -8
  %327 = getelementptr inbounds i8, i8* %291, i64 -16
  %328 = getelementptr inbounds i8, i8* %326, i64 -7
  %329 = getelementptr i8, i8* %284, i64 -1
  %330 = getelementptr inbounds i8, i8* %329, i64 -8
  %331 = getelementptr inbounds i8, i8* %291, i64 -16
  %332 = getelementptr inbounds i8, i8* %330, i64 -7
  %333 = getelementptr i8, i8* %284, i64 -1
  %334 = getelementptr inbounds i8, i8* %333, i64 -8
  %335 = getelementptr inbounds i8, i8* %291, i64 -16
  %336 = getelementptr inbounds i8, i8* %334, i64 -7
  br label %337

337:                                              ; preds = %337, %319
  %338 = phi i64 [ 0, %319 ], [ %368, %337 ]
  %339 = phi i64 [ %320, %319 ], [ %369, %337 ]
  %340 = sub i64 0, %338
  %341 = sub i64 0, %338
  %342 = getelementptr inbounds i8, i8* %323, i64 %341
  %343 = bitcast i8* %342 to <2 x i64>*
  %344 = load <2 x i64>, <2 x i64>* %343, align 1, !alias.scope !56
  %345 = getelementptr inbounds i8, i8* %324, i64 %340
  %346 = bitcast i8* %345 to <2 x i64>*
  store <2 x i64> %344, <2 x i64>* %346, align 1, !alias.scope !59, !noalias !56
  %347 = sub nuw nsw i64 -16, %338
  %348 = sub nuw nsw i64 -16, %338
  %349 = getelementptr inbounds i8, i8* %327, i64 %348
  %350 = bitcast i8* %349 to <2 x i64>*
  %351 = load <2 x i64>, <2 x i64>* %350, align 1, !alias.scope !56
  %352 = getelementptr inbounds i8, i8* %328, i64 %347
  %353 = bitcast i8* %352 to <2 x i64>*
  store <2 x i64> %351, <2 x i64>* %353, align 1, !alias.scope !59, !noalias !56
  %354 = sub nuw nsw i64 -32, %338
  %355 = sub nuw nsw i64 -32, %338
  %356 = getelementptr inbounds i8, i8* %331, i64 %355
  %357 = bitcast i8* %356 to <2 x i64>*
  %358 = load <2 x i64>, <2 x i64>* %357, align 1, !alias.scope !56
  %359 = getelementptr inbounds i8, i8* %332, i64 %354
  %360 = bitcast i8* %359 to <2 x i64>*
  store <2 x i64> %358, <2 x i64>* %360, align 1, !alias.scope !59, !noalias !56
  %361 = sub nuw nsw i64 -48, %338
  %362 = sub nuw nsw i64 -48, %338
  %363 = getelementptr inbounds i8, i8* %335, i64 %362
  %364 = bitcast i8* %363 to <2 x i64>*
  %365 = load <2 x i64>, <2 x i64>* %364, align 1, !alias.scope !56
  %366 = getelementptr inbounds i8, i8* %336, i64 %361
  %367 = bitcast i8* %366 to <2 x i64>*
  store <2 x i64> %365, <2 x i64>* %367, align 1, !alias.scope !59, !noalias !56
  %368 = add i64 %338, 64
  %369 = add i64 %339, -4
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %337, !llvm.loop !61

371:                                              ; preds = %337, %308
  %372 = phi i64 [ 0, %308 ], [ %368, %337 ]
  %373 = icmp eq i64 %317, 0
  br i1 %373, label %392, label %374

374:                                              ; preds = %371
  %375 = getelementptr i8, i8* %284, i64 -1
  %376 = getelementptr inbounds i8, i8* %375, i64 -8
  %377 = getelementptr inbounds i8, i8* %291, i64 -16
  %378 = getelementptr inbounds i8, i8* %376, i64 -7
  br label %379

379:                                              ; preds = %379, %374
  %380 = phi i64 [ %372, %374 ], [ %389, %379 ]
  %381 = phi i64 [ %317, %374 ], [ %390, %379 ]
  %382 = sub i64 0, %380
  %383 = sub i64 0, %380
  %384 = getelementptr inbounds i8, i8* %377, i64 %383
  %385 = bitcast i8* %384 to <2 x i64>*
  %386 = load <2 x i64>, <2 x i64>* %385, align 1, !alias.scope !56
  %387 = getelementptr inbounds i8, i8* %378, i64 %382
  %388 = bitcast i8* %387 to <2 x i64>*
  store <2 x i64> %386, <2 x i64>* %388, align 1, !alias.scope !59, !noalias !56
  %389 = add i64 %380, 16
  %390 = add i64 %381, -1
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %379, !llvm.loop !62

392:                                              ; preds = %379, %371
  %393 = icmp eq i64 %297, %309
  br i1 %393, label %404, label %394

394:                                              ; preds = %392, %299, %294
  %395 = phi i8* [ %284, %299 ], [ %284, %294 ], [ %311, %392 ]
  %396 = phi i8* [ %291, %299 ], [ %291, %294 ], [ %313, %392 ]
  br label %397

397:                                              ; preds = %394, %397
  %398 = phi i8* [ %400, %397 ], [ %395, %394 ]
  %399 = phi i8* [ %401, %397 ], [ %396, %394 ]
  %400 = getelementptr inbounds i8, i8* %398, i64 -1
  %401 = getelementptr inbounds i8, i8* %399, i64 -1
  %402 = load i8, i8* %401, align 1
  store i8 %402, i8* %400, align 1
  %403 = icmp eq i8* %401, %290
  br i1 %403, label %404, label %397, !llvm.loop !63

404:                                              ; preds = %397, %392, %281
  %405 = phi i8* [ %284, %281 ], [ %311, %392 ], [ %400, %397 ]
  %406 = ptrtoint i8* %405 to i64
  store i64 %406, i64* %246, align 8
  store i64 %288, i64* %245, align 8
  store i64 %286, i64* %254, align 8
  br label %407

407:                                              ; preds = %239, %404
  %408 = phi i8* [ %240, %239 ], [ %287, %404 ]
  %409 = icmp ult i32 %231, 128
  br i1 %409, label %593, label %410

410:                                              ; preds = %407
  %411 = bitcast i8** %233 to i64*
  %412 = bitcast %"class.v8::internal::TranslationArrayBuilder"* %0 to i64*
  %413 = bitcast i8** %235 to i64*
  %414 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %415 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %416

416:                                              ; preds = %410, %590
  %417 = phi i8* [ %591, %590 ], [ %408, %410 ]
  %418 = phi i32 [ %422, %590 ], [ %231, %410 ]
  %419 = getelementptr inbounds i8, i8* %417, i64 -1
  %420 = load i8, i8* %419, align 1
  %421 = or i8 %420, -128
  store i8 %421, i8* %419, align 1
  %422 = lshr i32 %418, 7
  %423 = trunc i32 %422 to i8
  %424 = load i8*, i8** %233, align 8
  %425 = load i8*, i8** %235, align 8
  %426 = icmp eq i8* %424, %425
  %427 = ptrtoint i8* %425 to i64
  br i1 %426, label %431, label %428

428:                                              ; preds = %416
  store i8 %423, i8* %424, align 1
  %429 = getelementptr inbounds i8, i8* %424, i64 1
  %430 = ptrtoint i8* %429 to i64
  store i64 %430, i64* %411, align 8
  br label %590

431:                                              ; preds = %416
  %432 = ptrtoint i8* %424 to i64
  %433 = load i64, i64* %412, align 8
  %434 = sub i64 %432, %433
  %435 = add i64 %434, 1
  %436 = icmp ugt i64 %435, 2147483647
  br i1 %436, label %437, label %439

437:                                              ; preds = %431
  %438 = bitcast %"class.v8::internal::TranslationArrayBuilder"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %438) #10
  unreachable

439:                                              ; preds = %431
  %440 = sub i64 %427, %433
  %441 = icmp ult i64 %440, 1073741823
  br i1 %441, label %442, label %447

442:                                              ; preds = %439
  %443 = shl i64 %440, 1
  %444 = icmp ult i64 %443, %435
  %445 = select i1 %444, i64 %435, i64 %443
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %465, label %447

447:                                              ; preds = %442, %439
  %448 = phi i64 [ %445, %442 ], [ 2147483647, %439 ]
  %449 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %414, align 8
  %450 = add nuw nsw i64 %448, 7
  %451 = and i64 %450, -8
  %452 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %449, i64 0, i32 2
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %449, i64 0, i32 3
  %455 = load i64, i64* %454, align 8
  %456 = sub i64 %455, %453
  %457 = icmp ugt i64 %451, %456
  br i1 %457, label %458, label %460, !prof !47

458:                                              ; preds = %447
  %459 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %449, i64 %451) #9
  br label %462

460:                                              ; preds = %447
  %461 = add i64 %453, %451
  store i64 %461, i64* %452, align 8
  br label %462

462:                                              ; preds = %460, %458
  %463 = phi i64 [ %459, %458 ], [ %453, %460 ]
  %464 = inttoptr i64 %463 to i8*
  br label %465

465:                                              ; preds = %462, %442
  %466 = phi i64 [ %448, %462 ], [ 0, %442 ]
  %467 = phi i8* [ %464, %462 ], [ null, %442 ]
  %468 = getelementptr inbounds i8, i8* %467, i64 %434
  %469 = getelementptr inbounds i8, i8* %467, i64 %466
  %470 = ptrtoint i8* %469 to i64
  store i8 %423, i8* %468, align 1
  %471 = getelementptr inbounds i8, i8* %468, i64 1
  %472 = ptrtoint i8* %471 to i64
  %473 = load i8*, i8** %415, align 8
  %474 = load i8*, i8** %233, align 8
  %475 = ptrtoint i8* %474 to i64
  %476 = icmp eq i8* %474, %473
  br i1 %476, label %587, label %477

477:                                              ; preds = %465
  %478 = ptrtoint i8* %473 to i64
  %479 = ptrtoint i8* %474 to i64
  %480 = sub i64 %479, %478
  %481 = icmp ult i64 %480, 16
  br i1 %481, label %577, label %482

482:                                              ; preds = %477
  %483 = sub i64 %432, %475
  %484 = sub i64 %483, %433
  %485 = getelementptr i8, i8* %473, i64 %484
  %486 = ptrtoint i8* %485 to i64
  %487 = getelementptr i8, i8* %467, i64 %486
  %488 = icmp ult i8* %487, %474
  %489 = icmp ult i8* %473, %468
  %490 = and i1 %488, %489
  br i1 %490, label %577, label %491

491:                                              ; preds = %482
  %492 = and i64 %480, -16
  %493 = sub i64 0, %492
  %494 = getelementptr i8, i8* %468, i64 %493
  %495 = sub i64 0, %492
  %496 = getelementptr i8, i8* %474, i64 %495
  %497 = add i64 %492, -16
  %498 = lshr exact i64 %497, 4
  %499 = add nuw nsw i64 %498, 1
  %500 = and i64 %499, 3
  %501 = icmp ult i64 %497, 48
  br i1 %501, label %554, label %502

502:                                              ; preds = %491
  %503 = sub nsw i64 %499, %500
  %504 = getelementptr i8, i8* %468, i64 -1
  %505 = getelementptr inbounds i8, i8* %504, i64 -8
  %506 = getelementptr inbounds i8, i8* %474, i64 -16
  %507 = getelementptr inbounds i8, i8* %505, i64 -7
  %508 = getelementptr i8, i8* %468, i64 -1
  %509 = getelementptr inbounds i8, i8* %508, i64 -8
  %510 = getelementptr inbounds i8, i8* %474, i64 -16
  %511 = getelementptr inbounds i8, i8* %509, i64 -7
  %512 = getelementptr i8, i8* %468, i64 -1
  %513 = getelementptr inbounds i8, i8* %512, i64 -8
  %514 = getelementptr inbounds i8, i8* %474, i64 -16
  %515 = getelementptr inbounds i8, i8* %513, i64 -7
  %516 = getelementptr i8, i8* %468, i64 -1
  %517 = getelementptr inbounds i8, i8* %516, i64 -8
  %518 = getelementptr inbounds i8, i8* %474, i64 -16
  %519 = getelementptr inbounds i8, i8* %517, i64 -7
  br label %520

520:                                              ; preds = %520, %502
  %521 = phi i64 [ 0, %502 ], [ %551, %520 ]
  %522 = phi i64 [ %503, %502 ], [ %552, %520 ]
  %523 = sub i64 0, %521
  %524 = sub i64 0, %521
  %525 = getelementptr inbounds i8, i8* %506, i64 %524
  %526 = bitcast i8* %525 to <2 x i64>*
  %527 = load <2 x i64>, <2 x i64>* %526, align 1, !alias.scope !64
  %528 = getelementptr inbounds i8, i8* %507, i64 %523
  %529 = bitcast i8* %528 to <2 x i64>*
  store <2 x i64> %527, <2 x i64>* %529, align 1, !alias.scope !67, !noalias !64
  %530 = sub nuw nsw i64 -16, %521
  %531 = sub nuw nsw i64 -16, %521
  %532 = getelementptr inbounds i8, i8* %510, i64 %531
  %533 = bitcast i8* %532 to <2 x i64>*
  %534 = load <2 x i64>, <2 x i64>* %533, align 1, !alias.scope !64
  %535 = getelementptr inbounds i8, i8* %511, i64 %530
  %536 = bitcast i8* %535 to <2 x i64>*
  store <2 x i64> %534, <2 x i64>* %536, align 1, !alias.scope !67, !noalias !64
  %537 = sub nuw nsw i64 -32, %521
  %538 = sub nuw nsw i64 -32, %521
  %539 = getelementptr inbounds i8, i8* %514, i64 %538
  %540 = bitcast i8* %539 to <2 x i64>*
  %541 = load <2 x i64>, <2 x i64>* %540, align 1, !alias.scope !64
  %542 = getelementptr inbounds i8, i8* %515, i64 %537
  %543 = bitcast i8* %542 to <2 x i64>*
  store <2 x i64> %541, <2 x i64>* %543, align 1, !alias.scope !67, !noalias !64
  %544 = sub nuw nsw i64 -48, %521
  %545 = sub nuw nsw i64 -48, %521
  %546 = getelementptr inbounds i8, i8* %518, i64 %545
  %547 = bitcast i8* %546 to <2 x i64>*
  %548 = load <2 x i64>, <2 x i64>* %547, align 1, !alias.scope !64
  %549 = getelementptr inbounds i8, i8* %519, i64 %544
  %550 = bitcast i8* %549 to <2 x i64>*
  store <2 x i64> %548, <2 x i64>* %550, align 1, !alias.scope !67, !noalias !64
  %551 = add i64 %521, 64
  %552 = add i64 %522, -4
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %554, label %520, !llvm.loop !69

554:                                              ; preds = %520, %491
  %555 = phi i64 [ 0, %491 ], [ %551, %520 ]
  %556 = icmp eq i64 %500, 0
  br i1 %556, label %575, label %557

557:                                              ; preds = %554
  %558 = getelementptr i8, i8* %468, i64 -1
  %559 = getelementptr inbounds i8, i8* %558, i64 -8
  %560 = getelementptr inbounds i8, i8* %474, i64 -16
  %561 = getelementptr inbounds i8, i8* %559, i64 -7
  br label %562

562:                                              ; preds = %562, %557
  %563 = phi i64 [ %555, %557 ], [ %572, %562 ]
  %564 = phi i64 [ %500, %557 ], [ %573, %562 ]
  %565 = sub i64 0, %563
  %566 = sub i64 0, %563
  %567 = getelementptr inbounds i8, i8* %560, i64 %566
  %568 = bitcast i8* %567 to <2 x i64>*
  %569 = load <2 x i64>, <2 x i64>* %568, align 1, !alias.scope !64
  %570 = getelementptr inbounds i8, i8* %561, i64 %565
  %571 = bitcast i8* %570 to <2 x i64>*
  store <2 x i64> %569, <2 x i64>* %571, align 1, !alias.scope !67, !noalias !64
  %572 = add i64 %563, 16
  %573 = add i64 %564, -1
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %562, !llvm.loop !70

575:                                              ; preds = %562, %554
  %576 = icmp eq i64 %480, %492
  br i1 %576, label %587, label %577

577:                                              ; preds = %575, %482, %477
  %578 = phi i8* [ %468, %482 ], [ %468, %477 ], [ %494, %575 ]
  %579 = phi i8* [ %474, %482 ], [ %474, %477 ], [ %496, %575 ]
  br label %580

580:                                              ; preds = %577, %580
  %581 = phi i8* [ %583, %580 ], [ %578, %577 ]
  %582 = phi i8* [ %584, %580 ], [ %579, %577 ]
  %583 = getelementptr inbounds i8, i8* %581, i64 -1
  %584 = getelementptr inbounds i8, i8* %582, i64 -1
  %585 = load i8, i8* %584, align 1
  store i8 %585, i8* %583, align 1
  %586 = icmp eq i8* %584, %473
  br i1 %586, label %587, label %580, !llvm.loop !71

587:                                              ; preds = %580, %575, %465
  %588 = phi i8* [ %468, %465 ], [ %494, %575 ], [ %583, %580 ]
  %589 = ptrtoint i8* %588 to i64
  store i64 %589, i64* %412, align 8
  store i64 %472, i64* %411, align 8
  store i64 %470, i64* %413, align 8
  br label %590

590:                                              ; preds = %428, %587
  %591 = phi i8* [ %429, %428 ], [ %471, %587 ]
  %592 = icmp ugt i32 %418, 16383
  br i1 %592, label %416, label %593

593:                                              ; preds = %590, %407, %222, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal23TranslationArrayBuilder18ToTranslationArrayEPNS0_7FactoryE(%"class.v8::internal::TranslationArrayBuilder"* nocapture readonly, %"class.v8::internal::Factory"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = alloca %"class.v8::internal::ZoneVector", align 8
  %5 = load i8, i8* @_ZN2v88internal38FLAG_turbo_compress_translation_arraysE, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %100, label %7, !prof !3

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.30"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9
  %16 = shl i64 %14, 32
  %17 = ashr exact i64 %16, 32
  %18 = and i64 %17, -4
  %19 = tail call i64 @Cr_z_compressBound(i64 %18) #9
  store i64 %19, i64* %3, align 8
  %20 = bitcast %"class.v8::internal::ZoneVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 2
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %21, align 8
  %23 = ptrtoint %"class.v8::internal::Zone"* %22 to i64
  %24 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 1
  %25 = bitcast %"struct.std::__1::__compressed_pair_elem.6"* %24 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #9
  store i64 %23, i64* %25, align 8
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %53, label %27

27:                                               ; preds = %7
  %28 = icmp ugt i64 %19, 2147483647
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = bitcast %"class.v8::internal::ZoneVector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %30) #10
  unreachable

31:                                               ; preds = %27
  %32 = add nuw nsw i64 %19, 7
  %33 = and i64 %32, -8
  %34 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %22, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %37, %35
  %39 = icmp ugt i64 %33, %38
  br i1 %39, label %40, label %42, !prof !47

40:                                               ; preds = %31
  %41 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %22, i64 %33) #9
  br label %44

42:                                               ; preds = %31
  %43 = add i64 %35, %33
  store i64 %43, i64* %34, align 8
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi i64 [ %41, %40 ], [ %35, %42 ]
  %46 = inttoptr i64 %45 to i8*
  %47 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 1
  %48 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* %46, i8** %48, align 8
  %49 = getelementptr inbounds i8, i8* %46, i64 %19
  %50 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i8* %49, i8** %50, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 0, i64 %19, i1 false) #9
  %51 = bitcast i8** %47 to i64*
  %52 = ptrtoint i8* %49 to i64
  store i64 %52, i64* %51, align 8
  br label %53

53:                                               ; preds = %7, %44
  %54 = phi i8* [ null, %7 ], [ %46, %44 ]
  %55 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 0
  %56 = bitcast %"class.std::__1::vector.30"* %8 to i8**
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @_ZN13zlib_internal14CompressHelperENS_11WrapperTypeEPhPmPKhmiPFPvmEPFvS5_E(i32 2, i8* %54, i64* nonnull %3, i8* %57, i64 %18, i32 -1, i8* (i64)* null, void (i8*)* null) #9
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60, !prof !3

60:                                               ; preds = %53
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.2, i64 0, i64 0)) #10
  unreachable

61:                                               ; preds = %53
  %62 = load i64, i64* %3, align 8
  %63 = trunc i64 %62 to i32
  %64 = add nsw i32 %63, 4
  %65 = bitcast %"class.v8::internal::Factory"* %1 to %"class.v8::internal::FactoryBase"*
  %66 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %65, i32 %64, i8 zeroext 1) #9
  %67 = load i64, i64* %66, align 8
  %68 = load i8, i8* @_ZN2v88internal38FLAG_turbo_compress_translation_arraysE, align 1, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %75, label %70, !prof !3

70:                                               ; preds = %61
  %71 = load i64, i64* %10, align 8
  %72 = load i64, i64* %12, align 8
  %73 = sub i64 %71, %72
  %74 = ashr exact i64 %73, 2
  br label %82

75:                                               ; preds = %61
  %76 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"class.v8::internal::TranslationArrayBuilder"* %0 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %78, %80
  br label %82

82:                                               ; preds = %70, %75
  %83 = phi i64 [ %74, %70 ], [ %81, %75 ]
  %84 = trunc i64 %83 to i32
  %85 = add i64 %67, 7
  %86 = inttoptr i64 %85 to i32*
  store i32 %84, i32* %86, align 4
  %87 = load i64, i64* %66, align 8
  %88 = add i64 %87, 7
  %89 = inttoptr i64 %88 to i8*
  %90 = getelementptr inbounds i8, i8* %89, i64 4
  %91 = load i8*, i8** %55, align 8
  %92 = load i64, i64* %3, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %91, i64 %92, i1 false)
  %93 = load i8*, i8** %55, align 8
  %94 = icmp eq i8* %93, null
  br i1 %94, label %99, label %95

95:                                               ; preds = %82
  %96 = ptrtoint i8* %93 to i64
  %97 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 1
  %98 = bitcast i8** %97 to i64*
  store i64 %96, i64* %98, align 8
  br label %99

99:                                               ; preds = %82, %95
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9
  br label %118

100:                                              ; preds = %2
  %101 = bitcast %"class.v8::internal::Factory"* %1 to %"class.v8::internal::FactoryBase"*
  %102 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %103 = bitcast i8** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.v8::internal::TranslationArrayBuilder"* %0 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = sub i64 %104, %106
  %108 = trunc i64 %107 to i32
  %109 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %101, i32 %108, i8 zeroext 1) #9
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, 7
  %112 = inttoptr i64 %111 to i8*
  %113 = getelementptr inbounds %"class.v8::internal::TranslationArrayBuilder", %"class.v8::internal::TranslationArrayBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = load i64, i64* %103, align 8
  %116 = ptrtoint i8* %114 to i64
  %117 = sub i64 %115, %116
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %114, i64 %117, i1 false)
  br label %118

118:                                              ; preds = %100, %99
  %119 = phi i64* [ %109, %100 ], [ %66, %99 ]
  ret i64* %119
}

declare i64 @Cr_z_compressBound(i64) local_unnamed_addr #2

declare i32 @_ZN13zlib_internal14CompressHelperENS_11WrapperTypeEPhPmPKhmiPFPvmEPFvS5_E(i32, i8*, i64*, i8*, i64, i32, i8* (i64)*, void (i8*)*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewByteArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder29BeginBuiltinContinuationFrameENS0_14BytecodeOffsetEij(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 6) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder37BeginJSToWasmBuiltinContinuationFrameENS0_14BytecodeOffsetEijNS_4base8OptionalINS0_4wasm9ValueKindEEE(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32, i32, i16) local_unnamed_addr #0 align 2 {
  %6 = trunc i16 %4 to i8
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 21) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  switch i8 %6, label %7 [
    i8 0, label %11
    i8 1, label %8
  ], !prof !72

7:                                                ; preds = %5
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #10
  unreachable

8:                                                ; preds = %5
  %9 = lshr i16 %4, 8
  %10 = zext i16 %9 to i32
  br label %11

11:                                               ; preds = %5, %8
  %12 = phi i32 [ %10, %8 ], [ -1, %5 ]
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder39BeginJavaScriptBuiltinContinuationFrameENS0_14BytecodeOffsetEij(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 19) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder48BeginJavaScriptBuiltinContinuationWithCatchFrameENS0_14BytecodeOffsetEij(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 20) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder23BeginConstructStubFrameENS0_14BytecodeOffsetEij(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 8) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder26BeginArgumentsAdaptorFrameEij(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 0) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder21BeginInterpretedFrameENS0_14BytecodeOffsetEijii(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 18) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %4)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder17ArgumentsElementsENS0_19CreateArgumentsTypeE(%"class.v8::internal::TranslationArrayBuilder"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 1) #9
  %3 = zext i8 %1 to i32
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder15ArgumentsLengthEv(%"class.v8::internal::TranslationArrayBuilder"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder19BeginCapturedObjectEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 7) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder15DuplicateObjectEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 11) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder13StoreRegisterENS0_8RegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 23) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder18StoreInt32RegisterENS0_8RegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 14) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder18StoreInt64RegisterENS0_8RegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 16) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder19StoreUint32RegisterENS0_8RegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 25) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder17StoreBoolRegisterENS0_8RegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 4) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder18StoreFloatRegisterENS0_11XMMRegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 12) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder19StoreDoubleRegisterENS0_11XMMRegisterE(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 9) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder14StoreStackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 24) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder19StoreInt32StackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 15) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder19StoreInt64StackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 17) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder20StoreUint32StackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 26) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder18StoreBoolStackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 5) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder19StoreFloatStackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 13) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder20StoreDoubleStackSlotEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 10) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder12StoreLiteralEi(%"class.v8::internal::TranslationArrayBuilder"*, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 22) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder17AddUpdateFeedbackEii(%"class.v8::internal::TranslationArrayBuilder"*, i32, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 27) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %1)
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23TranslationArrayBuilder20StoreJSFrameFunctionEv(%"class.v8::internal::TranslationArrayBuilder"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 24) #9
  tail call void @_ZN2v88internal23TranslationArrayBuilder3AddEi(%"class.v8::internal::TranslationArrayBuilder"* %0, i32 3) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !12}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !12}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !12}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !12}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !12}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !12}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !12}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !12}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !5}
!46 = distinct !{!46, !12}
!47 = !{!"branch_weights", i32 1, i32 2000}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !12}
!54 = distinct !{!54, !5}
!55 = distinct !{!55, !12}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !12}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !12}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !12}
!70 = distinct !{!70, !5}
!71 = distinct !{!71, !12}
!72 = !{!"branch_weights", i32 1, i32 2001, i32 2000}
