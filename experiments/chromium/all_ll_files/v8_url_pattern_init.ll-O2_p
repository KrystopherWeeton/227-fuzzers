; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_url_pattern_init.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_url_pattern_init.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.76", i32, [4 x i8], %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.212", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.228", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.240", %"class.std::__1::unique_ptr.246", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.253", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.162", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.192", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.112" = type { %"struct.std::__1::__atomic_base.113" }
%"struct.std::__1::__atomic_base.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__cxx_atomic_impl.115" }
%"struct.std::__1::__cxx_atomic_impl.115" = type { %"struct.std::__1::__cxx_atomic_base_impl.116" }
%"struct.std::__1::__cxx_atomic_base_impl.116" = type { i64 }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::Worklist.151"* }
%"class.blink::Worklist.151" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist.158"* }
%"class.blink::Worklist.158" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::Worklist.165"* }
%"class.blink::Worklist.165" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.172", %"class.std::__1::__compressed_pair.179", %"class.std::__1::__compressed_pair.184", %"class.std::__1::__compressed_pair.186", [4 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174", %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { i64 }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { float }
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.195", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.204" }
%"class.WTF::Vector.204" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.220" }
%"class.WTF::VectorBuffer.220" = type { %"class.WTF::VectorBufferBase.221" }
%"class.WTF::VectorBufferBase.221" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.234" }
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.137"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.144"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.151"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.284" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.252 }
%class.scoped_refptr.252 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.253" = type { %"struct.std::__1::__atomic_base.254" }
%"struct.std::__1::__atomic_base.254" = type { %"struct.std::__1::__cxx_atomic_impl.255" }
%"struct.std::__1::__cxx_atomic_impl.255" = type { %"struct.std::__1::__cxx_atomic_base_impl.256" }
%"struct.std::__1::__cxx_atomic_base_impl.256" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::URLPatternInit" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.23", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.70", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.257", %"class.std::__1::unique_ptr.262", %"class.blink::Persistent.268", %"class.blink::Persistent.272", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.7", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", i32, i32 }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.23" = type { %"class.WTF::HashTable.24" }
%"class.WTF::HashTable.24" = type <{ %"struct.WTF::KeyValuePair.27"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.27" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.36", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.31", i8* }
%"class.WTF::HashMap.31" = type { %"class.WTF::HashTable.32" }
%"class.WTF::HashTable.32" = type <{ %"struct.WTF::KeyValuePair.35"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.35" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.36" = type { %"class.v8::PersistentValueMapBase.37" }
%"class.v8::PersistentValueMapBase.37" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.38", i8* }
%"class.WTF::HashMap.38" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"struct.WTF::KeyValuePair.42"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.42" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.43" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.54", %"class.WTF::Vector.60", i8, i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.60" = type { %"class.WTF::VectorBuffer.61" }
%"class.WTF::VectorBuffer.61" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.291, %"class.blink::Member.310", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.291 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.292", i32, i32, %"class.blink::Persistent.294" }
%"class.WTF::RefCounted.292" = type { %"class.base::RefCounted.293" }
%"class.base::RefCounted.293" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.294" = type { %"class.blink::PersistentBase.295" }
%"class.blink::PersistentBase.295" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.300" }
%"class.WTF::HashMap.300" = type { %"class.WTF::HashTable.301" }
%"class.WTF::HashTable.301" = type <{ %"struct.WTF::KeyValuePair.303"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.303" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.307" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.304" }
%"class.blink::MemberBase.304" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.307" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.307" = type { %"class.v8::TracedReference.308" }
%"class.v8::TracedReference.308" = type { %"class.v8::BasicTracedReference.309" }
%"class.v8::BasicTracedReference.309" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.310" = type { %"class.blink::MemberBase.311" }
%"class.blink::MemberBase.311" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.257" = type { %"class.WTF::VectorBuffer.258" }
%"class.WTF::VectorBuffer.258" = type { %"class.WTF::VectorBufferBase.259" }
%"class.WTF::VectorBufferBase.259" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.268" = type { %"class.blink::PersistentBase.269" }
%"class.blink::PersistentBase.269" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.272" = type { %"class.blink::PersistentBase.273" }
%"class.blink::PersistentBase.273" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.278" }
%"class.WTF::Vector.278" = type { %"class.WTF::VectorBuffer.279" }
%"class.WTF::VectorBuffer.279" = type { %"class.WTF::VectorBufferBase.280" }
%"class.WTF::VectorBufferBase.280" = type { %"struct.std::__1::pair.281"*, i32, i32 }
%"struct.std::__1::pair.281" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.312" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.v8::Int32" = type { i8 }

$_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@_ZZN5blinkL27eternalV8URLPatternInitKeysEPN2v87IsolateEE5kKeys = internal constant [9 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0)], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"baseURL\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"hash\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"hostname\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"password\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"pathname\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"protocol\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"search\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"username\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 9, i8** getelementptr inbounds ([9 x i8*], [9 x i8*]* @_ZZN5blinkL27eternalV8URLPatternInitKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.12 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16V8URLPatternInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14URLPatternInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::URLPatternInit"* nocapture, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = icmp eq %"class.v8::Value"* %1, null
  br i1 %6, label %1570, label %7

7:                                                ; preds = %4
  %8 = bitcast %"class.v8::Value"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 3
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %12, label %28

12:                                               ; preds = %7
  %13 = add i64 %9, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = and i64 %9, -4294967296
  %17 = zext i32 %15 to i64
  %18 = or i64 %16, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = icmp eq i16 %21, 67
  br i1 %22, label %23, label %28

23:                                               ; preds = %12
  %24 = add i64 %9, 23
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = ashr i32 %26, 1
  switch i32 %27, label %28 [
    i32 5, label %1570
    i32 3, label %1570
  ]

28:                                               ; preds = %23, %12, %7
  %29 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %29, label %31, label %30

30:                                               ; preds = %28
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #7
  br label %1570

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %33 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %34 = add i64 %33, 8
  %35 = inttoptr i64 %34 to %"class.blink::V8PerIsolateData"**
  %36 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %35, align 8
  %37 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %36, i8* bitcast ([9 x i8*]* @_ZZN5blinkL27eternalV8URLPatternInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.312"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.312"*)) #7
  %38 = extractvalue { i64, %"class.v8::Eternal"* } %37, 1
  %39 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %39) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %40 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %41 = bitcast %"class.v8::Eternal"* %38 to %"class.v8::Value"**
  %42 = load %"class.v8::Value"*, %"class.v8::Value"** %41, align 8
  %43 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %42) #7
  %44 = icmp eq %"class.v8::Value"* %43, null
  br i1 %44, label %45, label %51

45:                                               ; preds = %31
  %46 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %47 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %48 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %48, i64 5
  %50 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %49, align 8
  call void %50(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %46) #7
  br label %1569

51:                                               ; preds = %31
  %52 = bitcast %"class.v8::Value"* %43 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = and i64 %53, 3
  %55 = icmp eq i64 %54, 1
  br i1 %55, label %56, label %73

56:                                               ; preds = %51
  %57 = add i64 %53, -1
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = and i64 %53, -4294967296
  %61 = zext i32 %59 to i64
  %62 = or i64 %60, %61
  %63 = add i64 %62, 7
  %64 = inttoptr i64 %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = icmp eq i16 %65, 67
  br i1 %66, label %67, label %73

67:                                               ; preds = %56
  %68 = add i64 %53, 23
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = and i32 %70, -2
  %72 = icmp eq i32 %71, 10
  br i1 %72, label %209, label %73

73:                                               ; preds = %56, %51, %67
  %74 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %43, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %105, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  br i1 %80, label %83, label %93

83:                                               ; preds = %76
  %84 = zext i32 %82 to i33
  %85 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %84, i33 1) #7
  %86 = extractvalue { i33, i1 } %85, 1
  %87 = extractvalue { i33, i1 } %85, 0
  %88 = icmp slt i33 %87, 0
  %89 = or i1 %86, %88
  br i1 %89, label %90, label %91, !prof !2

90:                                               ; preds = %83
  call void @llvm.trap() #7
  unreachable

91:                                               ; preds = %83
  %92 = trunc i33 %87 to i32
  store i32 %92, i32* %81, align 4
  br label %93

93:                                               ; preds = %76, %91
  %94 = phi i32 [ %92, %91 ], [ %82, %76 ]
  %95 = load atomic i32, i32* %77 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %100 = add i32 %94, -1
  store i32 %100, i32* %99, align 4
  br label %101

101:                                              ; preds = %98, %93
  %102 = phi i32 [ %100, %98 ], [ %94, %93 ]
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #7
  br label %105

105:                                              ; preds = %73, %101, %104
  %106 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %195

109:                                              ; preds = %105
  br i1 %75, label %127, label %110

110:                                              ; preds = %109
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %129

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i33
  %119 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %118, i33 1) #7
  %120 = extractvalue { i33, i1 } %119, 1
  %121 = extractvalue { i33, i1 } %119, 0
  %122 = icmp slt i33 %121, 0
  %123 = or i1 %120, %122
  br i1 %123, label %124, label %125, !prof !2

124:                                              ; preds = %115
  call void @llvm.trap() #7
  unreachable

125:                                              ; preds = %115
  %126 = trunc i33 %121 to i32
  store i32 %126, i32* %116, align 4
  br label %129

127:                                              ; preds = %109
  %128 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 1
  br label %146

129:                                              ; preds = %110, %125
  %130 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 1
  %131 = load atomic i32, i32* %111 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #7
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !2

143:                                              ; preds = %134
  call void @llvm.trap() #7
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %146

146:                                              ; preds = %127, %144, %129
  %147 = phi i1 [ false, %144 ], [ false, %129 ], [ true, %127 ]
  %148 = phi %"class.WTF::String"* [ %130, %144 ], [ %130, %129 ], [ %128, %127 ]
  %149 = ptrtoint %"class.WTF::StringImpl"* %74 to i64
  %150 = bitcast %"class.WTF::String"* %148 to i64*
  %151 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 1, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %146
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %167

167:                                              ; preds = %146, %163, %166
  br i1 %147, label %181, label %168

168:                                              ; preds = %167
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #7
  br label %181

181:                                              ; preds = %180, %177, %167
  br i1 %75, label %209, label %182

182:                                              ; preds = %181
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %184 = load atomic i32, i32* %183 monotonic, align 4
  %185 = and i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %188 = load i32, i32* %187, align 4
  br i1 %186, label %189, label %191

189:                                              ; preds = %182
  %190 = add i32 %188, -1
  store i32 %190, i32* %187, align 4
  br label %191

191:                                              ; preds = %189, %182
  %192 = phi i32 [ %190, %189 ], [ %188, %182 ]
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %209

194:                                              ; preds = %191
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #7
  br label %209

195:                                              ; preds = %105
  br i1 %75, label %1569, label %196

196:                                              ; preds = %195
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %198 = load atomic i32, i32* %197 monotonic, align 4
  %199 = and i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  br i1 %200, label %203, label %205

203:                                              ; preds = %196
  %204 = add i32 %202, -1
  store i32 %204, i32* %201, align 4
  br label %205

205:                                              ; preds = %203, %196
  %206 = phi i32 [ %204, %203 ], [ %202, %196 ]
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %1569

208:                                              ; preds = %205
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #7
  br label %1569

209:                                              ; preds = %194, %191, %181, %67
  %210 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 1, i32 0
  %211 = bitcast %"class.v8::Name"** %210 to %"class.v8::Value"**
  %212 = load %"class.v8::Value"*, %"class.v8::Value"** %211, align 8
  %213 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %212) #7
  %214 = icmp eq %"class.v8::Value"* %213, null
  br i1 %214, label %215, label %221

215:                                              ; preds = %209
  %216 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %217 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %218 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %217, align 8
  %219 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %218, i64 5
  %220 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %219, align 8
  call void %220(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %216) #7
  br label %1569

221:                                              ; preds = %209
  %222 = bitcast %"class.v8::Value"* %213 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = and i64 %223, 3
  %225 = icmp eq i64 %224, 1
  br i1 %225, label %226, label %243

226:                                              ; preds = %221
  %227 = add i64 %223, -1
  %228 = inttoptr i64 %227 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = and i64 %223, -4294967296
  %231 = zext i32 %229 to i64
  %232 = or i64 %230, %231
  %233 = add i64 %232, 7
  %234 = inttoptr i64 %233 to i16*
  %235 = load i16, i16* %234, align 2
  %236 = icmp eq i16 %235, 67
  br i1 %236, label %237, label %243

237:                                              ; preds = %226
  %238 = add i64 %223, 23
  %239 = inttoptr i64 %238 to i32*
  %240 = load i32, i32* %239, align 4
  %241 = and i32 %240, -2
  %242 = icmp eq i32 %241, 10
  br i1 %242, label %379, label %243

243:                                              ; preds = %226, %221, %237
  %244 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %213, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %245 = icmp eq %"class.WTF::StringImpl"* %244, null
  br i1 %245, label %275, label %246

246:                                              ; preds = %243
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %248 = load atomic i32, i32* %247 monotonic, align 4
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %252 = load i32, i32* %251, align 4
  br i1 %250, label %253, label %263

253:                                              ; preds = %246
  %254 = zext i32 %252 to i33
  %255 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %254, i33 1) #7
  %256 = extractvalue { i33, i1 } %255, 1
  %257 = extractvalue { i33, i1 } %255, 0
  %258 = icmp slt i33 %257, 0
  %259 = or i1 %256, %258
  br i1 %259, label %260, label %261, !prof !2

260:                                              ; preds = %253
  call void @llvm.trap() #7
  unreachable

261:                                              ; preds = %253
  %262 = trunc i33 %257 to i32
  store i32 %262, i32* %251, align 4
  br label %263

263:                                              ; preds = %246, %261
  %264 = phi i32 [ %262, %261 ], [ %252, %246 ]
  %265 = load atomic i32, i32* %247 monotonic, align 4
  %266 = and i32 %265, 2
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %271

268:                                              ; preds = %263
  %269 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %270 = add i32 %264, -1
  store i32 %270, i32* %269, align 4
  br label %271

271:                                              ; preds = %268, %263
  %272 = phi i32 [ %270, %268 ], [ %264, %263 ]
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %275

274:                                              ; preds = %271
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %244) #7
  br label %275

275:                                              ; preds = %243, %271, %274
  %276 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %277 = load i32, i32* %276, align 8
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %365

279:                                              ; preds = %275
  br i1 %245, label %297, label %280

280:                                              ; preds = %279
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %282 = load atomic i32, i32* %281 monotonic, align 4
  %283 = and i32 %282, 2
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %299

285:                                              ; preds = %280
  %286 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = zext i32 %287 to i33
  %289 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %288, i33 1) #7
  %290 = extractvalue { i33, i1 } %289, 1
  %291 = extractvalue { i33, i1 } %289, 0
  %292 = icmp slt i33 %291, 0
  %293 = or i1 %290, %292
  br i1 %293, label %294, label %295, !prof !2

294:                                              ; preds = %285
  call void @llvm.trap() #7
  unreachable

295:                                              ; preds = %285
  %296 = trunc i33 %291 to i32
  store i32 %296, i32* %286, align 4
  br label %299

297:                                              ; preds = %279
  %298 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 2
  br label %316

299:                                              ; preds = %280, %295
  %300 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 2
  %301 = load atomic i32, i32* %281 monotonic, align 4
  %302 = and i32 %301, 2
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %316

304:                                              ; preds = %299
  %305 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %306 = load i32, i32* %305, align 4
  %307 = zext i32 %306 to i33
  %308 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %307, i33 1) #7
  %309 = extractvalue { i33, i1 } %308, 1
  %310 = extractvalue { i33, i1 } %308, 0
  %311 = icmp slt i33 %310, 0
  %312 = or i1 %309, %311
  br i1 %312, label %313, label %314, !prof !2

313:                                              ; preds = %304
  call void @llvm.trap() #7
  unreachable

314:                                              ; preds = %304
  %315 = trunc i33 %310 to i32
  store i32 %315, i32* %305, align 4
  br label %316

316:                                              ; preds = %297, %314, %299
  %317 = phi i1 [ false, %314 ], [ false, %299 ], [ true, %297 ]
  %318 = phi %"class.WTF::String"* [ %300, %314 ], [ %300, %299 ], [ %298, %297 ]
  %319 = ptrtoint %"class.WTF::StringImpl"* %244 to i64
  %320 = bitcast %"class.WTF::String"* %318 to i64*
  %321 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 2, i32 0, i32 0
  %322 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %321, align 8
  store i64 %319, i64* %320, align 8
  %323 = icmp eq %"class.WTF::StringImpl"* %322, null
  br i1 %323, label %337, label %324

324:                                              ; preds = %316
  %325 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %322, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %326 = load atomic i32, i32* %325 monotonic, align 4
  %327 = and i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %322, i64 0, i32 0
  %330 = load i32, i32* %329, align 4
  br i1 %328, label %331, label %333

331:                                              ; preds = %324
  %332 = add i32 %330, -1
  store i32 %332, i32* %329, align 4
  br label %333

333:                                              ; preds = %331, %324
  %334 = phi i32 [ %332, %331 ], [ %330, %324 ]
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %336, label %337

336:                                              ; preds = %333
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %322) #7
  br label %337

337:                                              ; preds = %316, %333, %336
  br i1 %317, label %351, label %338

338:                                              ; preds = %337
  %339 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %340 = load atomic i32, i32* %339 monotonic, align 4
  %341 = and i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %344 = load i32, i32* %343, align 4
  br i1 %342, label %345, label %347

345:                                              ; preds = %338
  %346 = add i32 %344, -1
  store i32 %346, i32* %343, align 4
  br label %347

347:                                              ; preds = %345, %338
  %348 = phi i32 [ %346, %345 ], [ %344, %338 ]
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %351

350:                                              ; preds = %347
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %244) #7
  br label %351

351:                                              ; preds = %350, %347, %337
  br i1 %245, label %379, label %352

352:                                              ; preds = %351
  %353 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %354 = load atomic i32, i32* %353 monotonic, align 4
  %355 = and i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %358 = load i32, i32* %357, align 4
  br i1 %356, label %359, label %361

359:                                              ; preds = %352
  %360 = add i32 %358, -1
  store i32 %360, i32* %357, align 4
  br label %361

361:                                              ; preds = %359, %352
  %362 = phi i32 [ %360, %359 ], [ %358, %352 ]
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %364, label %379

364:                                              ; preds = %361
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %244) #7
  br label %379

365:                                              ; preds = %275
  br i1 %245, label %1569, label %366

366:                                              ; preds = %365
  %367 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %368 = load atomic i32, i32* %367 monotonic, align 4
  %369 = and i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %372 = load i32, i32* %371, align 4
  br i1 %370, label %373, label %375

373:                                              ; preds = %366
  %374 = add i32 %372, -1
  store i32 %374, i32* %371, align 4
  br label %375

375:                                              ; preds = %373, %366
  %376 = phi i32 [ %374, %373 ], [ %372, %366 ]
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %1569

378:                                              ; preds = %375
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %244) #7
  br label %1569

379:                                              ; preds = %364, %361, %351, %237
  %380 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 2, i32 0
  %381 = bitcast %"class.v8::Name"** %380 to %"class.v8::Value"**
  %382 = load %"class.v8::Value"*, %"class.v8::Value"** %381, align 8
  %383 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %382) #7
  %384 = icmp eq %"class.v8::Value"* %383, null
  br i1 %384, label %385, label %391

385:                                              ; preds = %379
  %386 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %387 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %388 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %387, align 8
  %389 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %388, i64 5
  %390 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %389, align 8
  call void %390(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %386) #7
  br label %1569

391:                                              ; preds = %379
  %392 = bitcast %"class.v8::Value"* %383 to i64*
  %393 = load i64, i64* %392, align 8
  %394 = and i64 %393, 3
  %395 = icmp eq i64 %394, 1
  br i1 %395, label %396, label %413

396:                                              ; preds = %391
  %397 = add i64 %393, -1
  %398 = inttoptr i64 %397 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = and i64 %393, -4294967296
  %401 = zext i32 %399 to i64
  %402 = or i64 %400, %401
  %403 = add i64 %402, 7
  %404 = inttoptr i64 %403 to i16*
  %405 = load i16, i16* %404, align 2
  %406 = icmp eq i16 %405, 67
  br i1 %406, label %407, label %413

407:                                              ; preds = %396
  %408 = add i64 %393, 23
  %409 = inttoptr i64 %408 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = and i32 %410, -2
  %412 = icmp eq i32 %411, 10
  br i1 %412, label %549, label %413

413:                                              ; preds = %396, %391, %407
  %414 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %383, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %415 = icmp eq %"class.WTF::StringImpl"* %414, null
  br i1 %415, label %445, label %416

416:                                              ; preds = %413
  %417 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %418 = load atomic i32, i32* %417 monotonic, align 4
  %419 = and i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %422 = load i32, i32* %421, align 4
  br i1 %420, label %423, label %433

423:                                              ; preds = %416
  %424 = zext i32 %422 to i33
  %425 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %424, i33 1) #7
  %426 = extractvalue { i33, i1 } %425, 1
  %427 = extractvalue { i33, i1 } %425, 0
  %428 = icmp slt i33 %427, 0
  %429 = or i1 %426, %428
  br i1 %429, label %430, label %431, !prof !2

430:                                              ; preds = %423
  call void @llvm.trap() #7
  unreachable

431:                                              ; preds = %423
  %432 = trunc i33 %427 to i32
  store i32 %432, i32* %421, align 4
  br label %433

433:                                              ; preds = %416, %431
  %434 = phi i32 [ %432, %431 ], [ %422, %416 ]
  %435 = load atomic i32, i32* %417 monotonic, align 4
  %436 = and i32 %435, 2
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %441

438:                                              ; preds = %433
  %439 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %440 = add i32 %434, -1
  store i32 %440, i32* %439, align 4
  br label %441

441:                                              ; preds = %438, %433
  %442 = phi i32 [ %440, %438 ], [ %434, %433 ]
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %445

444:                                              ; preds = %441
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %414) #7
  br label %445

445:                                              ; preds = %413, %441, %444
  %446 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %447 = load i32, i32* %446, align 8
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %535

449:                                              ; preds = %445
  br i1 %415, label %467, label %450

450:                                              ; preds = %449
  %451 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %452 = load atomic i32, i32* %451 monotonic, align 4
  %453 = and i32 %452, 2
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %469

455:                                              ; preds = %450
  %456 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %457 = load i32, i32* %456, align 4
  %458 = zext i32 %457 to i33
  %459 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %458, i33 1) #7
  %460 = extractvalue { i33, i1 } %459, 1
  %461 = extractvalue { i33, i1 } %459, 0
  %462 = icmp slt i33 %461, 0
  %463 = or i1 %460, %462
  br i1 %463, label %464, label %465, !prof !2

464:                                              ; preds = %455
  call void @llvm.trap() #7
  unreachable

465:                                              ; preds = %455
  %466 = trunc i33 %461 to i32
  store i32 %466, i32* %456, align 4
  br label %469

467:                                              ; preds = %449
  %468 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 3
  br label %486

469:                                              ; preds = %450, %465
  %470 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 3
  %471 = load atomic i32, i32* %451 monotonic, align 4
  %472 = and i32 %471, 2
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %474, label %486

474:                                              ; preds = %469
  %475 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %476 = load i32, i32* %475, align 4
  %477 = zext i32 %476 to i33
  %478 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %477, i33 1) #7
  %479 = extractvalue { i33, i1 } %478, 1
  %480 = extractvalue { i33, i1 } %478, 0
  %481 = icmp slt i33 %480, 0
  %482 = or i1 %479, %481
  br i1 %482, label %483, label %484, !prof !2

483:                                              ; preds = %474
  call void @llvm.trap() #7
  unreachable

484:                                              ; preds = %474
  %485 = trunc i33 %480 to i32
  store i32 %485, i32* %475, align 4
  br label %486

486:                                              ; preds = %467, %484, %469
  %487 = phi i1 [ false, %484 ], [ false, %469 ], [ true, %467 ]
  %488 = phi %"class.WTF::String"* [ %470, %484 ], [ %470, %469 ], [ %468, %467 ]
  %489 = ptrtoint %"class.WTF::StringImpl"* %414 to i64
  %490 = bitcast %"class.WTF::String"* %488 to i64*
  %491 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 3, i32 0, i32 0
  %492 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %491, align 8
  store i64 %489, i64* %490, align 8
  %493 = icmp eq %"class.WTF::StringImpl"* %492, null
  br i1 %493, label %507, label %494

494:                                              ; preds = %486
  %495 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %492, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %496 = load atomic i32, i32* %495 monotonic, align 4
  %497 = and i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %492, i64 0, i32 0
  %500 = load i32, i32* %499, align 4
  br i1 %498, label %501, label %503

501:                                              ; preds = %494
  %502 = add i32 %500, -1
  store i32 %502, i32* %499, align 4
  br label %503

503:                                              ; preds = %501, %494
  %504 = phi i32 [ %502, %501 ], [ %500, %494 ]
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %507

506:                                              ; preds = %503
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %492) #7
  br label %507

507:                                              ; preds = %486, %503, %506
  br i1 %487, label %521, label %508

508:                                              ; preds = %507
  %509 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %510 = load atomic i32, i32* %509 monotonic, align 4
  %511 = and i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %514 = load i32, i32* %513, align 4
  br i1 %512, label %515, label %517

515:                                              ; preds = %508
  %516 = add i32 %514, -1
  store i32 %516, i32* %513, align 4
  br label %517

517:                                              ; preds = %515, %508
  %518 = phi i32 [ %516, %515 ], [ %514, %508 ]
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %520, label %521

520:                                              ; preds = %517
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %414) #7
  br label %521

521:                                              ; preds = %520, %517, %507
  br i1 %415, label %549, label %522

522:                                              ; preds = %521
  %523 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %524 = load atomic i32, i32* %523 monotonic, align 4
  %525 = and i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %528 = load i32, i32* %527, align 4
  br i1 %526, label %529, label %531

529:                                              ; preds = %522
  %530 = add i32 %528, -1
  store i32 %530, i32* %527, align 4
  br label %531

531:                                              ; preds = %529, %522
  %532 = phi i32 [ %530, %529 ], [ %528, %522 ]
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %534, label %549

534:                                              ; preds = %531
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %414) #7
  br label %549

535:                                              ; preds = %445
  br i1 %415, label %1569, label %536

536:                                              ; preds = %535
  %537 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %538 = load atomic i32, i32* %537 monotonic, align 4
  %539 = and i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %414, i64 0, i32 0
  %542 = load i32, i32* %541, align 4
  br i1 %540, label %543, label %545

543:                                              ; preds = %536
  %544 = add i32 %542, -1
  store i32 %544, i32* %541, align 4
  br label %545

545:                                              ; preds = %543, %536
  %546 = phi i32 [ %544, %543 ], [ %542, %536 ]
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %1569

548:                                              ; preds = %545
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %414) #7
  br label %1569

549:                                              ; preds = %534, %531, %521, %407
  %550 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 3, i32 0
  %551 = bitcast %"class.v8::Name"** %550 to %"class.v8::Value"**
  %552 = load %"class.v8::Value"*, %"class.v8::Value"** %551, align 8
  %553 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %552) #7
  %554 = icmp eq %"class.v8::Value"* %553, null
  br i1 %554, label %555, label %561

555:                                              ; preds = %549
  %556 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %557 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %558 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %557, align 8
  %559 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %558, i64 5
  %560 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %559, align 8
  call void %560(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %556) #7
  br label %1569

561:                                              ; preds = %549
  %562 = bitcast %"class.v8::Value"* %553 to i64*
  %563 = load i64, i64* %562, align 8
  %564 = and i64 %563, 3
  %565 = icmp eq i64 %564, 1
  br i1 %565, label %566, label %583

566:                                              ; preds = %561
  %567 = add i64 %563, -1
  %568 = inttoptr i64 %567 to i32*
  %569 = load i32, i32* %568, align 4
  %570 = and i64 %563, -4294967296
  %571 = zext i32 %569 to i64
  %572 = or i64 %570, %571
  %573 = add i64 %572, 7
  %574 = inttoptr i64 %573 to i16*
  %575 = load i16, i16* %574, align 2
  %576 = icmp eq i16 %575, 67
  br i1 %576, label %577, label %583

577:                                              ; preds = %566
  %578 = add i64 %563, 23
  %579 = inttoptr i64 %578 to i32*
  %580 = load i32, i32* %579, align 4
  %581 = and i32 %580, -2
  %582 = icmp eq i32 %581, 10
  br i1 %582, label %719, label %583

583:                                              ; preds = %566, %561, %577
  %584 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %553, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %585 = icmp eq %"class.WTF::StringImpl"* %584, null
  br i1 %585, label %615, label %586

586:                                              ; preds = %583
  %587 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %588 = load atomic i32, i32* %587 monotonic, align 4
  %589 = and i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %592 = load i32, i32* %591, align 4
  br i1 %590, label %593, label %603

593:                                              ; preds = %586
  %594 = zext i32 %592 to i33
  %595 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %594, i33 1) #7
  %596 = extractvalue { i33, i1 } %595, 1
  %597 = extractvalue { i33, i1 } %595, 0
  %598 = icmp slt i33 %597, 0
  %599 = or i1 %596, %598
  br i1 %599, label %600, label %601, !prof !2

600:                                              ; preds = %593
  call void @llvm.trap() #7
  unreachable

601:                                              ; preds = %593
  %602 = trunc i33 %597 to i32
  store i32 %602, i32* %591, align 4
  br label %603

603:                                              ; preds = %586, %601
  %604 = phi i32 [ %602, %601 ], [ %592, %586 ]
  %605 = load atomic i32, i32* %587 monotonic, align 4
  %606 = and i32 %605, 2
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %608, label %611

608:                                              ; preds = %603
  %609 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %610 = add i32 %604, -1
  store i32 %610, i32* %609, align 4
  br label %611

611:                                              ; preds = %608, %603
  %612 = phi i32 [ %610, %608 ], [ %604, %603 ]
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %614, label %615

614:                                              ; preds = %611
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %584) #7
  br label %615

615:                                              ; preds = %583, %611, %614
  %616 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %617 = load i32, i32* %616, align 8
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %619, label %705

619:                                              ; preds = %615
  br i1 %585, label %637, label %620

620:                                              ; preds = %619
  %621 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %622 = load atomic i32, i32* %621 monotonic, align 4
  %623 = and i32 %622, 2
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %639

625:                                              ; preds = %620
  %626 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %627 = load i32, i32* %626, align 4
  %628 = zext i32 %627 to i33
  %629 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %628, i33 1) #7
  %630 = extractvalue { i33, i1 } %629, 1
  %631 = extractvalue { i33, i1 } %629, 0
  %632 = icmp slt i33 %631, 0
  %633 = or i1 %630, %632
  br i1 %633, label %634, label %635, !prof !2

634:                                              ; preds = %625
  call void @llvm.trap() #7
  unreachable

635:                                              ; preds = %625
  %636 = trunc i33 %631 to i32
  store i32 %636, i32* %626, align 4
  br label %639

637:                                              ; preds = %619
  %638 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 4
  br label %656

639:                                              ; preds = %620, %635
  %640 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 4
  %641 = load atomic i32, i32* %621 monotonic, align 4
  %642 = and i32 %641, 2
  %643 = icmp eq i32 %642, 0
  br i1 %643, label %644, label %656

644:                                              ; preds = %639
  %645 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %646 = load i32, i32* %645, align 4
  %647 = zext i32 %646 to i33
  %648 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %647, i33 1) #7
  %649 = extractvalue { i33, i1 } %648, 1
  %650 = extractvalue { i33, i1 } %648, 0
  %651 = icmp slt i33 %650, 0
  %652 = or i1 %649, %651
  br i1 %652, label %653, label %654, !prof !2

653:                                              ; preds = %644
  call void @llvm.trap() #7
  unreachable

654:                                              ; preds = %644
  %655 = trunc i33 %650 to i32
  store i32 %655, i32* %645, align 4
  br label %656

656:                                              ; preds = %637, %654, %639
  %657 = phi i1 [ false, %654 ], [ false, %639 ], [ true, %637 ]
  %658 = phi %"class.WTF::String"* [ %640, %654 ], [ %640, %639 ], [ %638, %637 ]
  %659 = ptrtoint %"class.WTF::StringImpl"* %584 to i64
  %660 = bitcast %"class.WTF::String"* %658 to i64*
  %661 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 4, i32 0, i32 0
  %662 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %661, align 8
  store i64 %659, i64* %660, align 8
  %663 = icmp eq %"class.WTF::StringImpl"* %662, null
  br i1 %663, label %677, label %664

664:                                              ; preds = %656
  %665 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %662, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %666 = load atomic i32, i32* %665 monotonic, align 4
  %667 = and i32 %666, 2
  %668 = icmp eq i32 %667, 0
  %669 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %662, i64 0, i32 0
  %670 = load i32, i32* %669, align 4
  br i1 %668, label %671, label %673

671:                                              ; preds = %664
  %672 = add i32 %670, -1
  store i32 %672, i32* %669, align 4
  br label %673

673:                                              ; preds = %671, %664
  %674 = phi i32 [ %672, %671 ], [ %670, %664 ]
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %676, label %677

676:                                              ; preds = %673
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %662) #7
  br label %677

677:                                              ; preds = %656, %673, %676
  br i1 %657, label %691, label %678

678:                                              ; preds = %677
  %679 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %680 = load atomic i32, i32* %679 monotonic, align 4
  %681 = and i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %684 = load i32, i32* %683, align 4
  br i1 %682, label %685, label %687

685:                                              ; preds = %678
  %686 = add i32 %684, -1
  store i32 %686, i32* %683, align 4
  br label %687

687:                                              ; preds = %685, %678
  %688 = phi i32 [ %686, %685 ], [ %684, %678 ]
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %690, label %691

690:                                              ; preds = %687
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %584) #7
  br label %691

691:                                              ; preds = %690, %687, %677
  br i1 %585, label %719, label %692

692:                                              ; preds = %691
  %693 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %694 = load atomic i32, i32* %693 monotonic, align 4
  %695 = and i32 %694, 2
  %696 = icmp eq i32 %695, 0
  %697 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %698 = load i32, i32* %697, align 4
  br i1 %696, label %699, label %701

699:                                              ; preds = %692
  %700 = add i32 %698, -1
  store i32 %700, i32* %697, align 4
  br label %701

701:                                              ; preds = %699, %692
  %702 = phi i32 [ %700, %699 ], [ %698, %692 ]
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %704, label %719

704:                                              ; preds = %701
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %584) #7
  br label %719

705:                                              ; preds = %615
  br i1 %585, label %1569, label %706

706:                                              ; preds = %705
  %707 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %708 = load atomic i32, i32* %707 monotonic, align 4
  %709 = and i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %712 = load i32, i32* %711, align 4
  br i1 %710, label %713, label %715

713:                                              ; preds = %706
  %714 = add i32 %712, -1
  store i32 %714, i32* %711, align 4
  br label %715

715:                                              ; preds = %713, %706
  %716 = phi i32 [ %714, %713 ], [ %712, %706 ]
  %717 = icmp eq i32 %716, 0
  br i1 %717, label %718, label %1569

718:                                              ; preds = %715
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %584) #7
  br label %1569

719:                                              ; preds = %704, %701, %691, %577
  %720 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 4, i32 0
  %721 = bitcast %"class.v8::Name"** %720 to %"class.v8::Value"**
  %722 = load %"class.v8::Value"*, %"class.v8::Value"** %721, align 8
  %723 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %722) #7
  %724 = icmp eq %"class.v8::Value"* %723, null
  br i1 %724, label %725, label %731

725:                                              ; preds = %719
  %726 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %727 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %728 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %727, align 8
  %729 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %728, i64 5
  %730 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %729, align 8
  call void %730(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %726) #7
  br label %1569

731:                                              ; preds = %719
  %732 = bitcast %"class.v8::Value"* %723 to i64*
  %733 = load i64, i64* %732, align 8
  %734 = and i64 %733, 3
  %735 = icmp eq i64 %734, 1
  br i1 %735, label %736, label %753

736:                                              ; preds = %731
  %737 = add i64 %733, -1
  %738 = inttoptr i64 %737 to i32*
  %739 = load i32, i32* %738, align 4
  %740 = and i64 %733, -4294967296
  %741 = zext i32 %739 to i64
  %742 = or i64 %740, %741
  %743 = add i64 %742, 7
  %744 = inttoptr i64 %743 to i16*
  %745 = load i16, i16* %744, align 2
  %746 = icmp eq i16 %745, 67
  br i1 %746, label %747, label %753

747:                                              ; preds = %736
  %748 = add i64 %733, 23
  %749 = inttoptr i64 %748 to i32*
  %750 = load i32, i32* %749, align 4
  %751 = and i32 %750, -2
  %752 = icmp eq i32 %751, 10
  br i1 %752, label %889, label %753

753:                                              ; preds = %736, %731, %747
  %754 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %723, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %755 = icmp eq %"class.WTF::StringImpl"* %754, null
  br i1 %755, label %785, label %756

756:                                              ; preds = %753
  %757 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %758 = load atomic i32, i32* %757 monotonic, align 4
  %759 = and i32 %758, 2
  %760 = icmp eq i32 %759, 0
  %761 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %762 = load i32, i32* %761, align 4
  br i1 %760, label %763, label %773

763:                                              ; preds = %756
  %764 = zext i32 %762 to i33
  %765 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %764, i33 1) #7
  %766 = extractvalue { i33, i1 } %765, 1
  %767 = extractvalue { i33, i1 } %765, 0
  %768 = icmp slt i33 %767, 0
  %769 = or i1 %766, %768
  br i1 %769, label %770, label %771, !prof !2

770:                                              ; preds = %763
  call void @llvm.trap() #7
  unreachable

771:                                              ; preds = %763
  %772 = trunc i33 %767 to i32
  store i32 %772, i32* %761, align 4
  br label %773

773:                                              ; preds = %756, %771
  %774 = phi i32 [ %772, %771 ], [ %762, %756 ]
  %775 = load atomic i32, i32* %757 monotonic, align 4
  %776 = and i32 %775, 2
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %778, label %781

778:                                              ; preds = %773
  %779 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %780 = add i32 %774, -1
  store i32 %780, i32* %779, align 4
  br label %781

781:                                              ; preds = %778, %773
  %782 = phi i32 [ %780, %778 ], [ %774, %773 ]
  %783 = icmp eq i32 %782, 0
  br i1 %783, label %784, label %785

784:                                              ; preds = %781
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %754) #7
  br label %785

785:                                              ; preds = %753, %781, %784
  %786 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %787 = load i32, i32* %786, align 8
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %789, label %875

789:                                              ; preds = %785
  br i1 %755, label %807, label %790

790:                                              ; preds = %789
  %791 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %792 = load atomic i32, i32* %791 monotonic, align 4
  %793 = and i32 %792, 2
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %795, label %809

795:                                              ; preds = %790
  %796 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %797 = load i32, i32* %796, align 4
  %798 = zext i32 %797 to i33
  %799 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %798, i33 1) #7
  %800 = extractvalue { i33, i1 } %799, 1
  %801 = extractvalue { i33, i1 } %799, 0
  %802 = icmp slt i33 %801, 0
  %803 = or i1 %800, %802
  br i1 %803, label %804, label %805, !prof !2

804:                                              ; preds = %795
  call void @llvm.trap() #7
  unreachable

805:                                              ; preds = %795
  %806 = trunc i33 %801 to i32
  store i32 %806, i32* %796, align 4
  br label %809

807:                                              ; preds = %789
  %808 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 5
  br label %826

809:                                              ; preds = %790, %805
  %810 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 5
  %811 = load atomic i32, i32* %791 monotonic, align 4
  %812 = and i32 %811, 2
  %813 = icmp eq i32 %812, 0
  br i1 %813, label %814, label %826

814:                                              ; preds = %809
  %815 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %816 = load i32, i32* %815, align 4
  %817 = zext i32 %816 to i33
  %818 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %817, i33 1) #7
  %819 = extractvalue { i33, i1 } %818, 1
  %820 = extractvalue { i33, i1 } %818, 0
  %821 = icmp slt i33 %820, 0
  %822 = or i1 %819, %821
  br i1 %822, label %823, label %824, !prof !2

823:                                              ; preds = %814
  call void @llvm.trap() #7
  unreachable

824:                                              ; preds = %814
  %825 = trunc i33 %820 to i32
  store i32 %825, i32* %815, align 4
  br label %826

826:                                              ; preds = %807, %824, %809
  %827 = phi i1 [ false, %824 ], [ false, %809 ], [ true, %807 ]
  %828 = phi %"class.WTF::String"* [ %810, %824 ], [ %810, %809 ], [ %808, %807 ]
  %829 = ptrtoint %"class.WTF::StringImpl"* %754 to i64
  %830 = bitcast %"class.WTF::String"* %828 to i64*
  %831 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 5, i32 0, i32 0
  %832 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %831, align 8
  store i64 %829, i64* %830, align 8
  %833 = icmp eq %"class.WTF::StringImpl"* %832, null
  br i1 %833, label %847, label %834

834:                                              ; preds = %826
  %835 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %832, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %836 = load atomic i32, i32* %835 monotonic, align 4
  %837 = and i32 %836, 2
  %838 = icmp eq i32 %837, 0
  %839 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %832, i64 0, i32 0
  %840 = load i32, i32* %839, align 4
  br i1 %838, label %841, label %843

841:                                              ; preds = %834
  %842 = add i32 %840, -1
  store i32 %842, i32* %839, align 4
  br label %843

843:                                              ; preds = %841, %834
  %844 = phi i32 [ %842, %841 ], [ %840, %834 ]
  %845 = icmp eq i32 %844, 0
  br i1 %845, label %846, label %847

846:                                              ; preds = %843
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %832) #7
  br label %847

847:                                              ; preds = %826, %843, %846
  br i1 %827, label %861, label %848

848:                                              ; preds = %847
  %849 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %850 = load atomic i32, i32* %849 monotonic, align 4
  %851 = and i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %854 = load i32, i32* %853, align 4
  br i1 %852, label %855, label %857

855:                                              ; preds = %848
  %856 = add i32 %854, -1
  store i32 %856, i32* %853, align 4
  br label %857

857:                                              ; preds = %855, %848
  %858 = phi i32 [ %856, %855 ], [ %854, %848 ]
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %860, label %861

860:                                              ; preds = %857
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %754) #7
  br label %861

861:                                              ; preds = %860, %857, %847
  br i1 %755, label %889, label %862

862:                                              ; preds = %861
  %863 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %864 = load atomic i32, i32* %863 monotonic, align 4
  %865 = and i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %868 = load i32, i32* %867, align 4
  br i1 %866, label %869, label %871

869:                                              ; preds = %862
  %870 = add i32 %868, -1
  store i32 %870, i32* %867, align 4
  br label %871

871:                                              ; preds = %869, %862
  %872 = phi i32 [ %870, %869 ], [ %868, %862 ]
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %889

874:                                              ; preds = %871
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %754) #7
  br label %889

875:                                              ; preds = %785
  br i1 %755, label %1569, label %876

876:                                              ; preds = %875
  %877 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %878 = load atomic i32, i32* %877 monotonic, align 4
  %879 = and i32 %878, 2
  %880 = icmp eq i32 %879, 0
  %881 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %754, i64 0, i32 0
  %882 = load i32, i32* %881, align 4
  br i1 %880, label %883, label %885

883:                                              ; preds = %876
  %884 = add i32 %882, -1
  store i32 %884, i32* %881, align 4
  br label %885

885:                                              ; preds = %883, %876
  %886 = phi i32 [ %884, %883 ], [ %882, %876 ]
  %887 = icmp eq i32 %886, 0
  br i1 %887, label %888, label %1569

888:                                              ; preds = %885
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %754) #7
  br label %1569

889:                                              ; preds = %874, %871, %861, %747
  %890 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 5, i32 0
  %891 = bitcast %"class.v8::Name"** %890 to %"class.v8::Value"**
  %892 = load %"class.v8::Value"*, %"class.v8::Value"** %891, align 8
  %893 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %892) #7
  %894 = icmp eq %"class.v8::Value"* %893, null
  br i1 %894, label %895, label %901

895:                                              ; preds = %889
  %896 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %897 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %898 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %897, align 8
  %899 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %898, i64 5
  %900 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %899, align 8
  call void %900(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %896) #7
  br label %1569

901:                                              ; preds = %889
  %902 = bitcast %"class.v8::Value"* %893 to i64*
  %903 = load i64, i64* %902, align 8
  %904 = and i64 %903, 3
  %905 = icmp eq i64 %904, 1
  br i1 %905, label %906, label %923

906:                                              ; preds = %901
  %907 = add i64 %903, -1
  %908 = inttoptr i64 %907 to i32*
  %909 = load i32, i32* %908, align 4
  %910 = and i64 %903, -4294967296
  %911 = zext i32 %909 to i64
  %912 = or i64 %910, %911
  %913 = add i64 %912, 7
  %914 = inttoptr i64 %913 to i16*
  %915 = load i16, i16* %914, align 2
  %916 = icmp eq i16 %915, 67
  br i1 %916, label %917, label %923

917:                                              ; preds = %906
  %918 = add i64 %903, 23
  %919 = inttoptr i64 %918 to i32*
  %920 = load i32, i32* %919, align 4
  %921 = and i32 %920, -2
  %922 = icmp eq i32 %921, 10
  br i1 %922, label %1059, label %923

923:                                              ; preds = %906, %901, %917
  %924 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %893, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %925 = icmp eq %"class.WTF::StringImpl"* %924, null
  br i1 %925, label %955, label %926

926:                                              ; preds = %923
  %927 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %928 = load atomic i32, i32* %927 monotonic, align 4
  %929 = and i32 %928, 2
  %930 = icmp eq i32 %929, 0
  %931 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %932 = load i32, i32* %931, align 4
  br i1 %930, label %933, label %943

933:                                              ; preds = %926
  %934 = zext i32 %932 to i33
  %935 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %934, i33 1) #7
  %936 = extractvalue { i33, i1 } %935, 1
  %937 = extractvalue { i33, i1 } %935, 0
  %938 = icmp slt i33 %937, 0
  %939 = or i1 %936, %938
  br i1 %939, label %940, label %941, !prof !2

940:                                              ; preds = %933
  call void @llvm.trap() #7
  unreachable

941:                                              ; preds = %933
  %942 = trunc i33 %937 to i32
  store i32 %942, i32* %931, align 4
  br label %943

943:                                              ; preds = %926, %941
  %944 = phi i32 [ %942, %941 ], [ %932, %926 ]
  %945 = load atomic i32, i32* %927 monotonic, align 4
  %946 = and i32 %945, 2
  %947 = icmp eq i32 %946, 0
  br i1 %947, label %948, label %951

948:                                              ; preds = %943
  %949 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %950 = add i32 %944, -1
  store i32 %950, i32* %949, align 4
  br label %951

951:                                              ; preds = %948, %943
  %952 = phi i32 [ %950, %948 ], [ %944, %943 ]
  %953 = icmp eq i32 %952, 0
  br i1 %953, label %954, label %955

954:                                              ; preds = %951
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %924) #7
  br label %955

955:                                              ; preds = %923, %951, %954
  %956 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %957 = load i32, i32* %956, align 8
  %958 = icmp eq i32 %957, 0
  br i1 %958, label %959, label %1045

959:                                              ; preds = %955
  br i1 %925, label %977, label %960

960:                                              ; preds = %959
  %961 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %962 = load atomic i32, i32* %961 monotonic, align 4
  %963 = and i32 %962, 2
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %965, label %979

965:                                              ; preds = %960
  %966 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %967 = load i32, i32* %966, align 4
  %968 = zext i32 %967 to i33
  %969 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %968, i33 1) #7
  %970 = extractvalue { i33, i1 } %969, 1
  %971 = extractvalue { i33, i1 } %969, 0
  %972 = icmp slt i33 %971, 0
  %973 = or i1 %970, %972
  br i1 %973, label %974, label %975, !prof !2

974:                                              ; preds = %965
  call void @llvm.trap() #7
  unreachable

975:                                              ; preds = %965
  %976 = trunc i33 %971 to i32
  store i32 %976, i32* %966, align 4
  br label %979

977:                                              ; preds = %959
  %978 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 6
  br label %996

979:                                              ; preds = %960, %975
  %980 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 6
  %981 = load atomic i32, i32* %961 monotonic, align 4
  %982 = and i32 %981, 2
  %983 = icmp eq i32 %982, 0
  br i1 %983, label %984, label %996

984:                                              ; preds = %979
  %985 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %986 = load i32, i32* %985, align 4
  %987 = zext i32 %986 to i33
  %988 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %987, i33 1) #7
  %989 = extractvalue { i33, i1 } %988, 1
  %990 = extractvalue { i33, i1 } %988, 0
  %991 = icmp slt i33 %990, 0
  %992 = or i1 %989, %991
  br i1 %992, label %993, label %994, !prof !2

993:                                              ; preds = %984
  call void @llvm.trap() #7
  unreachable

994:                                              ; preds = %984
  %995 = trunc i33 %990 to i32
  store i32 %995, i32* %985, align 4
  br label %996

996:                                              ; preds = %977, %994, %979
  %997 = phi i1 [ false, %994 ], [ false, %979 ], [ true, %977 ]
  %998 = phi %"class.WTF::String"* [ %980, %994 ], [ %980, %979 ], [ %978, %977 ]
  %999 = ptrtoint %"class.WTF::StringImpl"* %924 to i64
  %1000 = bitcast %"class.WTF::String"* %998 to i64*
  %1001 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 6, i32 0, i32 0
  %1002 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1001, align 8
  store i64 %999, i64* %1000, align 8
  %1003 = icmp eq %"class.WTF::StringImpl"* %1002, null
  br i1 %1003, label %1017, label %1004

1004:                                             ; preds = %996
  %1005 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1002, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1006 = load atomic i32, i32* %1005 monotonic, align 4
  %1007 = and i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1002, i64 0, i32 0
  %1010 = load i32, i32* %1009, align 4
  br i1 %1008, label %1011, label %1013

1011:                                             ; preds = %1004
  %1012 = add i32 %1010, -1
  store i32 %1012, i32* %1009, align 4
  br label %1013

1013:                                             ; preds = %1011, %1004
  %1014 = phi i32 [ %1012, %1011 ], [ %1010, %1004 ]
  %1015 = icmp eq i32 %1014, 0
  br i1 %1015, label %1016, label %1017

1016:                                             ; preds = %1013
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1002) #7
  br label %1017

1017:                                             ; preds = %996, %1013, %1016
  br i1 %997, label %1031, label %1018

1018:                                             ; preds = %1017
  %1019 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1020 = load atomic i32, i32* %1019 monotonic, align 4
  %1021 = and i32 %1020, 2
  %1022 = icmp eq i32 %1021, 0
  %1023 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %1024 = load i32, i32* %1023, align 4
  br i1 %1022, label %1025, label %1027

1025:                                             ; preds = %1018
  %1026 = add i32 %1024, -1
  store i32 %1026, i32* %1023, align 4
  br label %1027

1027:                                             ; preds = %1025, %1018
  %1028 = phi i32 [ %1026, %1025 ], [ %1024, %1018 ]
  %1029 = icmp eq i32 %1028, 0
  br i1 %1029, label %1030, label %1031

1030:                                             ; preds = %1027
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %924) #7
  br label %1031

1031:                                             ; preds = %1030, %1027, %1017
  br i1 %925, label %1059, label %1032

1032:                                             ; preds = %1031
  %1033 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1034 = load atomic i32, i32* %1033 monotonic, align 4
  %1035 = and i32 %1034, 2
  %1036 = icmp eq i32 %1035, 0
  %1037 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %1038 = load i32, i32* %1037, align 4
  br i1 %1036, label %1039, label %1041

1039:                                             ; preds = %1032
  %1040 = add i32 %1038, -1
  store i32 %1040, i32* %1037, align 4
  br label %1041

1041:                                             ; preds = %1039, %1032
  %1042 = phi i32 [ %1040, %1039 ], [ %1038, %1032 ]
  %1043 = icmp eq i32 %1042, 0
  br i1 %1043, label %1044, label %1059

1044:                                             ; preds = %1041
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %924) #7
  br label %1059

1045:                                             ; preds = %955
  br i1 %925, label %1569, label %1046

1046:                                             ; preds = %1045
  %1047 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1048 = load atomic i32, i32* %1047 monotonic, align 4
  %1049 = and i32 %1048, 2
  %1050 = icmp eq i32 %1049, 0
  %1051 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %924, i64 0, i32 0
  %1052 = load i32, i32* %1051, align 4
  br i1 %1050, label %1053, label %1055

1053:                                             ; preds = %1046
  %1054 = add i32 %1052, -1
  store i32 %1054, i32* %1051, align 4
  br label %1055

1055:                                             ; preds = %1053, %1046
  %1056 = phi i32 [ %1054, %1053 ], [ %1052, %1046 ]
  %1057 = icmp eq i32 %1056, 0
  br i1 %1057, label %1058, label %1569

1058:                                             ; preds = %1055
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %924) #7
  br label %1569

1059:                                             ; preds = %1044, %1041, %1031, %917
  %1060 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 6, i32 0
  %1061 = bitcast %"class.v8::Name"** %1060 to %"class.v8::Value"**
  %1062 = load %"class.v8::Value"*, %"class.v8::Value"** %1061, align 8
  %1063 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %1062) #7
  %1064 = icmp eq %"class.v8::Value"* %1063, null
  br i1 %1064, label %1065, label %1071

1065:                                             ; preds = %1059
  %1066 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1067 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1068 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1067, align 8
  %1069 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1068, i64 5
  %1070 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1069, align 8
  call void %1070(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1066) #7
  br label %1569

1071:                                             ; preds = %1059
  %1072 = bitcast %"class.v8::Value"* %1063 to i64*
  %1073 = load i64, i64* %1072, align 8
  %1074 = and i64 %1073, 3
  %1075 = icmp eq i64 %1074, 1
  br i1 %1075, label %1076, label %1093

1076:                                             ; preds = %1071
  %1077 = add i64 %1073, -1
  %1078 = inttoptr i64 %1077 to i32*
  %1079 = load i32, i32* %1078, align 4
  %1080 = and i64 %1073, -4294967296
  %1081 = zext i32 %1079 to i64
  %1082 = or i64 %1080, %1081
  %1083 = add i64 %1082, 7
  %1084 = inttoptr i64 %1083 to i16*
  %1085 = load i16, i16* %1084, align 2
  %1086 = icmp eq i16 %1085, 67
  br i1 %1086, label %1087, label %1093

1087:                                             ; preds = %1076
  %1088 = add i64 %1073, 23
  %1089 = inttoptr i64 %1088 to i32*
  %1090 = load i32, i32* %1089, align 4
  %1091 = and i32 %1090, -2
  %1092 = icmp eq i32 %1091, 10
  br i1 %1092, label %1229, label %1093

1093:                                             ; preds = %1076, %1071, %1087
  %1094 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1063, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %1095 = icmp eq %"class.WTF::StringImpl"* %1094, null
  br i1 %1095, label %1125, label %1096

1096:                                             ; preds = %1093
  %1097 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1098 = load atomic i32, i32* %1097 monotonic, align 4
  %1099 = and i32 %1098, 2
  %1100 = icmp eq i32 %1099, 0
  %1101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1102 = load i32, i32* %1101, align 4
  br i1 %1100, label %1103, label %1113

1103:                                             ; preds = %1096
  %1104 = zext i32 %1102 to i33
  %1105 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1104, i33 1) #7
  %1106 = extractvalue { i33, i1 } %1105, 1
  %1107 = extractvalue { i33, i1 } %1105, 0
  %1108 = icmp slt i33 %1107, 0
  %1109 = or i1 %1106, %1108
  br i1 %1109, label %1110, label %1111, !prof !2

1110:                                             ; preds = %1103
  call void @llvm.trap() #7
  unreachable

1111:                                             ; preds = %1103
  %1112 = trunc i33 %1107 to i32
  store i32 %1112, i32* %1101, align 4
  br label %1113

1113:                                             ; preds = %1096, %1111
  %1114 = phi i32 [ %1112, %1111 ], [ %1102, %1096 ]
  %1115 = load atomic i32, i32* %1097 monotonic, align 4
  %1116 = and i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  br i1 %1117, label %1118, label %1121

1118:                                             ; preds = %1113
  %1119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1120 = add i32 %1114, -1
  store i32 %1120, i32* %1119, align 4
  br label %1121

1121:                                             ; preds = %1118, %1113
  %1122 = phi i32 [ %1120, %1118 ], [ %1114, %1113 ]
  %1123 = icmp eq i32 %1122, 0
  br i1 %1123, label %1124, label %1125

1124:                                             ; preds = %1121
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1094) #7
  br label %1125

1125:                                             ; preds = %1093, %1121, %1124
  %1126 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %1127 = load i32, i32* %1126, align 8
  %1128 = icmp eq i32 %1127, 0
  br i1 %1128, label %1129, label %1215

1129:                                             ; preds = %1125
  br i1 %1095, label %1147, label %1130

1130:                                             ; preds = %1129
  %1131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1132 = load atomic i32, i32* %1131 monotonic, align 4
  %1133 = and i32 %1132, 2
  %1134 = icmp eq i32 %1133, 0
  br i1 %1134, label %1135, label %1149

1135:                                             ; preds = %1130
  %1136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1137 = load i32, i32* %1136, align 4
  %1138 = zext i32 %1137 to i33
  %1139 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1138, i33 1) #7
  %1140 = extractvalue { i33, i1 } %1139, 1
  %1141 = extractvalue { i33, i1 } %1139, 0
  %1142 = icmp slt i33 %1141, 0
  %1143 = or i1 %1140, %1142
  br i1 %1143, label %1144, label %1145, !prof !2

1144:                                             ; preds = %1135
  call void @llvm.trap() #7
  unreachable

1145:                                             ; preds = %1135
  %1146 = trunc i33 %1141 to i32
  store i32 %1146, i32* %1136, align 4
  br label %1149

1147:                                             ; preds = %1129
  %1148 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 7
  br label %1166

1149:                                             ; preds = %1130, %1145
  %1150 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 7
  %1151 = load atomic i32, i32* %1131 monotonic, align 4
  %1152 = and i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  br i1 %1153, label %1154, label %1166

1154:                                             ; preds = %1149
  %1155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1156 = load i32, i32* %1155, align 4
  %1157 = zext i32 %1156 to i33
  %1158 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1157, i33 1) #7
  %1159 = extractvalue { i33, i1 } %1158, 1
  %1160 = extractvalue { i33, i1 } %1158, 0
  %1161 = icmp slt i33 %1160, 0
  %1162 = or i1 %1159, %1161
  br i1 %1162, label %1163, label %1164, !prof !2

1163:                                             ; preds = %1154
  call void @llvm.trap() #7
  unreachable

1164:                                             ; preds = %1154
  %1165 = trunc i33 %1160 to i32
  store i32 %1165, i32* %1155, align 4
  br label %1166

1166:                                             ; preds = %1147, %1164, %1149
  %1167 = phi i1 [ false, %1164 ], [ false, %1149 ], [ true, %1147 ]
  %1168 = phi %"class.WTF::String"* [ %1150, %1164 ], [ %1150, %1149 ], [ %1148, %1147 ]
  %1169 = ptrtoint %"class.WTF::StringImpl"* %1094 to i64
  %1170 = bitcast %"class.WTF::String"* %1168 to i64*
  %1171 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 7, i32 0, i32 0
  %1172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1171, align 8
  store i64 %1169, i64* %1170, align 8
  %1173 = icmp eq %"class.WTF::StringImpl"* %1172, null
  br i1 %1173, label %1187, label %1174

1174:                                             ; preds = %1166
  %1175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1176 = load atomic i32, i32* %1175 monotonic, align 4
  %1177 = and i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1172, i64 0, i32 0
  %1180 = load i32, i32* %1179, align 4
  br i1 %1178, label %1181, label %1183

1181:                                             ; preds = %1174
  %1182 = add i32 %1180, -1
  store i32 %1182, i32* %1179, align 4
  br label %1183

1183:                                             ; preds = %1181, %1174
  %1184 = phi i32 [ %1182, %1181 ], [ %1180, %1174 ]
  %1185 = icmp eq i32 %1184, 0
  br i1 %1185, label %1186, label %1187

1186:                                             ; preds = %1183
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1172) #7
  br label %1187

1187:                                             ; preds = %1166, %1183, %1186
  br i1 %1167, label %1201, label %1188

1188:                                             ; preds = %1187
  %1189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1190 = load atomic i32, i32* %1189 monotonic, align 4
  %1191 = and i32 %1190, 2
  %1192 = icmp eq i32 %1191, 0
  %1193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1194 = load i32, i32* %1193, align 4
  br i1 %1192, label %1195, label %1197

1195:                                             ; preds = %1188
  %1196 = add i32 %1194, -1
  store i32 %1196, i32* %1193, align 4
  br label %1197

1197:                                             ; preds = %1195, %1188
  %1198 = phi i32 [ %1196, %1195 ], [ %1194, %1188 ]
  %1199 = icmp eq i32 %1198, 0
  br i1 %1199, label %1200, label %1201

1200:                                             ; preds = %1197
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1094) #7
  br label %1201

1201:                                             ; preds = %1200, %1197, %1187
  br i1 %1095, label %1229, label %1202

1202:                                             ; preds = %1201
  %1203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1204 = load atomic i32, i32* %1203 monotonic, align 4
  %1205 = and i32 %1204, 2
  %1206 = icmp eq i32 %1205, 0
  %1207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1208 = load i32, i32* %1207, align 4
  br i1 %1206, label %1209, label %1211

1209:                                             ; preds = %1202
  %1210 = add i32 %1208, -1
  store i32 %1210, i32* %1207, align 4
  br label %1211

1211:                                             ; preds = %1209, %1202
  %1212 = phi i32 [ %1210, %1209 ], [ %1208, %1202 ]
  %1213 = icmp eq i32 %1212, 0
  br i1 %1213, label %1214, label %1229

1214:                                             ; preds = %1211
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1094) #7
  br label %1229

1215:                                             ; preds = %1125
  br i1 %1095, label %1569, label %1216

1216:                                             ; preds = %1215
  %1217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1218 = load atomic i32, i32* %1217 monotonic, align 4
  %1219 = and i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1094, i64 0, i32 0
  %1222 = load i32, i32* %1221, align 4
  br i1 %1220, label %1223, label %1225

1223:                                             ; preds = %1216
  %1224 = add i32 %1222, -1
  store i32 %1224, i32* %1221, align 4
  br label %1225

1225:                                             ; preds = %1223, %1216
  %1226 = phi i32 [ %1224, %1223 ], [ %1222, %1216 ]
  %1227 = icmp eq i32 %1226, 0
  br i1 %1227, label %1228, label %1569

1228:                                             ; preds = %1225
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1094) #7
  br label %1569

1229:                                             ; preds = %1214, %1211, %1201, %1087
  %1230 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 7, i32 0
  %1231 = bitcast %"class.v8::Name"** %1230 to %"class.v8::Value"**
  %1232 = load %"class.v8::Value"*, %"class.v8::Value"** %1231, align 8
  %1233 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %1232) #7
  %1234 = icmp eq %"class.v8::Value"* %1233, null
  br i1 %1234, label %1235, label %1241

1235:                                             ; preds = %1229
  %1236 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1237 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1238 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1237, align 8
  %1239 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1238, i64 5
  %1240 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1239, align 8
  call void %1240(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1236) #7
  br label %1569

1241:                                             ; preds = %1229
  %1242 = bitcast %"class.v8::Value"* %1233 to i64*
  %1243 = load i64, i64* %1242, align 8
  %1244 = and i64 %1243, 3
  %1245 = icmp eq i64 %1244, 1
  br i1 %1245, label %1246, label %1263

1246:                                             ; preds = %1241
  %1247 = add i64 %1243, -1
  %1248 = inttoptr i64 %1247 to i32*
  %1249 = load i32, i32* %1248, align 4
  %1250 = and i64 %1243, -4294967296
  %1251 = zext i32 %1249 to i64
  %1252 = or i64 %1250, %1251
  %1253 = add i64 %1252, 7
  %1254 = inttoptr i64 %1253 to i16*
  %1255 = load i16, i16* %1254, align 2
  %1256 = icmp eq i16 %1255, 67
  br i1 %1256, label %1257, label %1263

1257:                                             ; preds = %1246
  %1258 = add i64 %1243, 23
  %1259 = inttoptr i64 %1258 to i32*
  %1260 = load i32, i32* %1259, align 4
  %1261 = and i32 %1260, -2
  %1262 = icmp eq i32 %1261, 10
  br i1 %1262, label %1399, label %1263

1263:                                             ; preds = %1246, %1241, %1257
  %1264 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1233, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %1265 = icmp eq %"class.WTF::StringImpl"* %1264, null
  br i1 %1265, label %1295, label %1266

1266:                                             ; preds = %1263
  %1267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1268 = load atomic i32, i32* %1267 monotonic, align 4
  %1269 = and i32 %1268, 2
  %1270 = icmp eq i32 %1269, 0
  %1271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1272 = load i32, i32* %1271, align 4
  br i1 %1270, label %1273, label %1283

1273:                                             ; preds = %1266
  %1274 = zext i32 %1272 to i33
  %1275 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1274, i33 1) #7
  %1276 = extractvalue { i33, i1 } %1275, 1
  %1277 = extractvalue { i33, i1 } %1275, 0
  %1278 = icmp slt i33 %1277, 0
  %1279 = or i1 %1276, %1278
  br i1 %1279, label %1280, label %1281, !prof !2

1280:                                             ; preds = %1273
  call void @llvm.trap() #7
  unreachable

1281:                                             ; preds = %1273
  %1282 = trunc i33 %1277 to i32
  store i32 %1282, i32* %1271, align 4
  br label %1283

1283:                                             ; preds = %1266, %1281
  %1284 = phi i32 [ %1282, %1281 ], [ %1272, %1266 ]
  %1285 = load atomic i32, i32* %1267 monotonic, align 4
  %1286 = and i32 %1285, 2
  %1287 = icmp eq i32 %1286, 0
  br i1 %1287, label %1288, label %1291

1288:                                             ; preds = %1283
  %1289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1290 = add i32 %1284, -1
  store i32 %1290, i32* %1289, align 4
  br label %1291

1291:                                             ; preds = %1288, %1283
  %1292 = phi i32 [ %1290, %1288 ], [ %1284, %1283 ]
  %1293 = icmp eq i32 %1292, 0
  br i1 %1293, label %1294, label %1295

1294:                                             ; preds = %1291
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1264) #7
  br label %1295

1295:                                             ; preds = %1263, %1291, %1294
  %1296 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %1297 = load i32, i32* %1296, align 8
  %1298 = icmp eq i32 %1297, 0
  br i1 %1298, label %1299, label %1385

1299:                                             ; preds = %1295
  br i1 %1265, label %1317, label %1300

1300:                                             ; preds = %1299
  %1301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1302 = load atomic i32, i32* %1301 monotonic, align 4
  %1303 = and i32 %1302, 2
  %1304 = icmp eq i32 %1303, 0
  br i1 %1304, label %1305, label %1319

1305:                                             ; preds = %1300
  %1306 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1307 = load i32, i32* %1306, align 4
  %1308 = zext i32 %1307 to i33
  %1309 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1308, i33 1) #7
  %1310 = extractvalue { i33, i1 } %1309, 1
  %1311 = extractvalue { i33, i1 } %1309, 0
  %1312 = icmp slt i33 %1311, 0
  %1313 = or i1 %1310, %1312
  br i1 %1313, label %1314, label %1315, !prof !2

1314:                                             ; preds = %1305
  call void @llvm.trap() #7
  unreachable

1315:                                             ; preds = %1305
  %1316 = trunc i33 %1311 to i32
  store i32 %1316, i32* %1306, align 4
  br label %1319

1317:                                             ; preds = %1299
  %1318 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 8
  br label %1336

1319:                                             ; preds = %1300, %1315
  %1320 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 8
  %1321 = load atomic i32, i32* %1301 monotonic, align 4
  %1322 = and i32 %1321, 2
  %1323 = icmp eq i32 %1322, 0
  br i1 %1323, label %1324, label %1336

1324:                                             ; preds = %1319
  %1325 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1326 = load i32, i32* %1325, align 4
  %1327 = zext i32 %1326 to i33
  %1328 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1327, i33 1) #7
  %1329 = extractvalue { i33, i1 } %1328, 1
  %1330 = extractvalue { i33, i1 } %1328, 0
  %1331 = icmp slt i33 %1330, 0
  %1332 = or i1 %1329, %1331
  br i1 %1332, label %1333, label %1334, !prof !2

1333:                                             ; preds = %1324
  call void @llvm.trap() #7
  unreachable

1334:                                             ; preds = %1324
  %1335 = trunc i33 %1330 to i32
  store i32 %1335, i32* %1325, align 4
  br label %1336

1336:                                             ; preds = %1317, %1334, %1319
  %1337 = phi i1 [ false, %1334 ], [ false, %1319 ], [ true, %1317 ]
  %1338 = phi %"class.WTF::String"* [ %1320, %1334 ], [ %1320, %1319 ], [ %1318, %1317 ]
  %1339 = ptrtoint %"class.WTF::StringImpl"* %1264 to i64
  %1340 = bitcast %"class.WTF::String"* %1338 to i64*
  %1341 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 8, i32 0, i32 0
  %1342 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1341, align 8
  store i64 %1339, i64* %1340, align 8
  %1343 = icmp eq %"class.WTF::StringImpl"* %1342, null
  br i1 %1343, label %1357, label %1344

1344:                                             ; preds = %1336
  %1345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1342, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1346 = load atomic i32, i32* %1345 monotonic, align 4
  %1347 = and i32 %1346, 2
  %1348 = icmp eq i32 %1347, 0
  %1349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1342, i64 0, i32 0
  %1350 = load i32, i32* %1349, align 4
  br i1 %1348, label %1351, label %1353

1351:                                             ; preds = %1344
  %1352 = add i32 %1350, -1
  store i32 %1352, i32* %1349, align 4
  br label %1353

1353:                                             ; preds = %1351, %1344
  %1354 = phi i32 [ %1352, %1351 ], [ %1350, %1344 ]
  %1355 = icmp eq i32 %1354, 0
  br i1 %1355, label %1356, label %1357

1356:                                             ; preds = %1353
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1342) #7
  br label %1357

1357:                                             ; preds = %1336, %1353, %1356
  br i1 %1337, label %1371, label %1358

1358:                                             ; preds = %1357
  %1359 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1360 = load atomic i32, i32* %1359 monotonic, align 4
  %1361 = and i32 %1360, 2
  %1362 = icmp eq i32 %1361, 0
  %1363 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1364 = load i32, i32* %1363, align 4
  br i1 %1362, label %1365, label %1367

1365:                                             ; preds = %1358
  %1366 = add i32 %1364, -1
  store i32 %1366, i32* %1363, align 4
  br label %1367

1367:                                             ; preds = %1365, %1358
  %1368 = phi i32 [ %1366, %1365 ], [ %1364, %1358 ]
  %1369 = icmp eq i32 %1368, 0
  br i1 %1369, label %1370, label %1371

1370:                                             ; preds = %1367
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1264) #7
  br label %1371

1371:                                             ; preds = %1370, %1367, %1357
  br i1 %1265, label %1399, label %1372

1372:                                             ; preds = %1371
  %1373 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1374 = load atomic i32, i32* %1373 monotonic, align 4
  %1375 = and i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1378 = load i32, i32* %1377, align 4
  br i1 %1376, label %1379, label %1381

1379:                                             ; preds = %1372
  %1380 = add i32 %1378, -1
  store i32 %1380, i32* %1377, align 4
  br label %1381

1381:                                             ; preds = %1379, %1372
  %1382 = phi i32 [ %1380, %1379 ], [ %1378, %1372 ]
  %1383 = icmp eq i32 %1382, 0
  br i1 %1383, label %1384, label %1399

1384:                                             ; preds = %1381
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1264) #7
  br label %1399

1385:                                             ; preds = %1295
  br i1 %1265, label %1569, label %1386

1386:                                             ; preds = %1385
  %1387 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1388 = load atomic i32, i32* %1387 monotonic, align 4
  %1389 = and i32 %1388, 2
  %1390 = icmp eq i32 %1389, 0
  %1391 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1264, i64 0, i32 0
  %1392 = load i32, i32* %1391, align 4
  br i1 %1390, label %1393, label %1395

1393:                                             ; preds = %1386
  %1394 = add i32 %1392, -1
  store i32 %1394, i32* %1391, align 4
  br label %1395

1395:                                             ; preds = %1393, %1386
  %1396 = phi i32 [ %1394, %1393 ], [ %1392, %1386 ]
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1398, label %1569

1398:                                             ; preds = %1395
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1264) #7
  br label %1569

1399:                                             ; preds = %1384, %1381, %1371, %1257
  %1400 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %38, i64 8, i32 0
  %1401 = bitcast %"class.v8::Name"** %1400 to %"class.v8::Value"**
  %1402 = load %"class.v8::Value"*, %"class.v8::Value"** %1401, align 8
  %1403 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %32, %"class.v8::Context"* %40, %"class.v8::Value"* %1402) #7
  %1404 = icmp eq %"class.v8::Value"* %1403, null
  br i1 %1404, label %1405, label %1411

1405:                                             ; preds = %1399
  %1406 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1407 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1408 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1407, align 8
  %1409 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1408, i64 5
  %1410 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1409, align 8
  call void %1410(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1406) #7
  br label %1569

1411:                                             ; preds = %1399
  %1412 = bitcast %"class.v8::Value"* %1403 to i64*
  %1413 = load i64, i64* %1412, align 8
  %1414 = and i64 %1413, 3
  %1415 = icmp eq i64 %1414, 1
  br i1 %1415, label %1416, label %1433

1416:                                             ; preds = %1411
  %1417 = add i64 %1413, -1
  %1418 = inttoptr i64 %1417 to i32*
  %1419 = load i32, i32* %1418, align 4
  %1420 = and i64 %1413, -4294967296
  %1421 = zext i32 %1419 to i64
  %1422 = or i64 %1420, %1421
  %1423 = add i64 %1422, 7
  %1424 = inttoptr i64 %1423 to i16*
  %1425 = load i16, i16* %1424, align 2
  %1426 = icmp eq i16 %1425, 67
  br i1 %1426, label %1427, label %1433

1427:                                             ; preds = %1416
  %1428 = add i64 %1413, 23
  %1429 = inttoptr i64 %1428 to i32*
  %1430 = load i32, i32* %1429, align 4
  %1431 = and i32 %1430, -2
  %1432 = icmp eq i32 %1431, 10
  br i1 %1432, label %1569, label %1433

1433:                                             ; preds = %1416, %1411, %1427
  %1434 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1403, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %1435 = icmp eq %"class.WTF::StringImpl"* %1434, null
  br i1 %1435, label %1465, label %1436

1436:                                             ; preds = %1433
  %1437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1438 = load atomic i32, i32* %1437 monotonic, align 4
  %1439 = and i32 %1438, 2
  %1440 = icmp eq i32 %1439, 0
  %1441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1442 = load i32, i32* %1441, align 4
  br i1 %1440, label %1443, label %1453

1443:                                             ; preds = %1436
  %1444 = zext i32 %1442 to i33
  %1445 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1444, i33 1) #7
  %1446 = extractvalue { i33, i1 } %1445, 1
  %1447 = extractvalue { i33, i1 } %1445, 0
  %1448 = icmp slt i33 %1447, 0
  %1449 = or i1 %1446, %1448
  br i1 %1449, label %1450, label %1451, !prof !2

1450:                                             ; preds = %1443
  call void @llvm.trap() #7
  unreachable

1451:                                             ; preds = %1443
  %1452 = trunc i33 %1447 to i32
  store i32 %1452, i32* %1441, align 4
  br label %1453

1453:                                             ; preds = %1436, %1451
  %1454 = phi i32 [ %1452, %1451 ], [ %1442, %1436 ]
  %1455 = load atomic i32, i32* %1437 monotonic, align 4
  %1456 = and i32 %1455, 2
  %1457 = icmp eq i32 %1456, 0
  br i1 %1457, label %1458, label %1461

1458:                                             ; preds = %1453
  %1459 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1460 = add i32 %1454, -1
  store i32 %1460, i32* %1459, align 4
  br label %1461

1461:                                             ; preds = %1458, %1453
  %1462 = phi i32 [ %1460, %1458 ], [ %1454, %1453 ]
  %1463 = icmp eq i32 %1462, 0
  br i1 %1463, label %1464, label %1465

1464:                                             ; preds = %1461
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1434) #7
  br label %1465

1465:                                             ; preds = %1433, %1461, %1464
  %1466 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %1467 = load i32, i32* %1466, align 8
  %1468 = icmp eq i32 %1467, 0
  br i1 %1468, label %1469, label %1555

1469:                                             ; preds = %1465
  br i1 %1435, label %1487, label %1470

1470:                                             ; preds = %1469
  %1471 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1472 = load atomic i32, i32* %1471 monotonic, align 4
  %1473 = and i32 %1472, 2
  %1474 = icmp eq i32 %1473, 0
  br i1 %1474, label %1475, label %1489

1475:                                             ; preds = %1470
  %1476 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1477 = load i32, i32* %1476, align 4
  %1478 = zext i32 %1477 to i33
  %1479 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1478, i33 1) #7
  %1480 = extractvalue { i33, i1 } %1479, 1
  %1481 = extractvalue { i33, i1 } %1479, 0
  %1482 = icmp slt i33 %1481, 0
  %1483 = or i1 %1480, %1482
  br i1 %1483, label %1484, label %1485, !prof !2

1484:                                             ; preds = %1475
  call void @llvm.trap() #7
  unreachable

1485:                                             ; preds = %1475
  %1486 = trunc i33 %1481 to i32
  store i32 %1486, i32* %1476, align 4
  br label %1489

1487:                                             ; preds = %1469
  %1488 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 9
  br label %1506

1489:                                             ; preds = %1470, %1485
  %1490 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 9
  %1491 = load atomic i32, i32* %1471 monotonic, align 4
  %1492 = and i32 %1491, 2
  %1493 = icmp eq i32 %1492, 0
  br i1 %1493, label %1494, label %1506

1494:                                             ; preds = %1489
  %1495 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1496 = load i32, i32* %1495, align 4
  %1497 = zext i32 %1496 to i33
  %1498 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1497, i33 1) #7
  %1499 = extractvalue { i33, i1 } %1498, 1
  %1500 = extractvalue { i33, i1 } %1498, 0
  %1501 = icmp slt i33 %1500, 0
  %1502 = or i1 %1499, %1501
  br i1 %1502, label %1503, label %1504, !prof !2

1503:                                             ; preds = %1494
  call void @llvm.trap() #7
  unreachable

1504:                                             ; preds = %1494
  %1505 = trunc i33 %1500 to i32
  store i32 %1505, i32* %1495, align 4
  br label %1506

1506:                                             ; preds = %1487, %1504, %1489
  %1507 = phi i1 [ false, %1504 ], [ false, %1489 ], [ true, %1487 ]
  %1508 = phi %"class.WTF::String"* [ %1490, %1504 ], [ %1490, %1489 ], [ %1488, %1487 ]
  %1509 = ptrtoint %"class.WTF::StringImpl"* %1434 to i64
  %1510 = bitcast %"class.WTF::String"* %1508 to i64*
  %1511 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %2, i64 0, i32 9, i32 0, i32 0
  %1512 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1511, align 8
  store i64 %1509, i64* %1510, align 8
  %1513 = icmp eq %"class.WTF::StringImpl"* %1512, null
  br i1 %1513, label %1527, label %1514

1514:                                             ; preds = %1506
  %1515 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1512, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1516 = load atomic i32, i32* %1515 monotonic, align 4
  %1517 = and i32 %1516, 2
  %1518 = icmp eq i32 %1517, 0
  %1519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1512, i64 0, i32 0
  %1520 = load i32, i32* %1519, align 4
  br i1 %1518, label %1521, label %1523

1521:                                             ; preds = %1514
  %1522 = add i32 %1520, -1
  store i32 %1522, i32* %1519, align 4
  br label %1523

1523:                                             ; preds = %1521, %1514
  %1524 = phi i32 [ %1522, %1521 ], [ %1520, %1514 ]
  %1525 = icmp eq i32 %1524, 0
  br i1 %1525, label %1526, label %1527

1526:                                             ; preds = %1523
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1512) #7
  br label %1527

1527:                                             ; preds = %1506, %1523, %1526
  br i1 %1507, label %1541, label %1528

1528:                                             ; preds = %1527
  %1529 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1530 = load atomic i32, i32* %1529 monotonic, align 4
  %1531 = and i32 %1530, 2
  %1532 = icmp eq i32 %1531, 0
  %1533 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1534 = load i32, i32* %1533, align 4
  br i1 %1532, label %1535, label %1537

1535:                                             ; preds = %1528
  %1536 = add i32 %1534, -1
  store i32 %1536, i32* %1533, align 4
  br label %1537

1537:                                             ; preds = %1535, %1528
  %1538 = phi i32 [ %1536, %1535 ], [ %1534, %1528 ]
  %1539 = icmp eq i32 %1538, 0
  br i1 %1539, label %1540, label %1541

1540:                                             ; preds = %1537
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1434) #7
  br label %1541

1541:                                             ; preds = %1540, %1537, %1527
  br i1 %1435, label %1569, label %1542

1542:                                             ; preds = %1541
  %1543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1544 = load atomic i32, i32* %1543 monotonic, align 4
  %1545 = and i32 %1544, 2
  %1546 = icmp eq i32 %1545, 0
  %1547 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1548 = load i32, i32* %1547, align 4
  br i1 %1546, label %1549, label %1551

1549:                                             ; preds = %1542
  %1550 = add i32 %1548, -1
  store i32 %1550, i32* %1547, align 4
  br label %1551

1551:                                             ; preds = %1549, %1542
  %1552 = phi i32 [ %1550, %1549 ], [ %1548, %1542 ]
  %1553 = icmp eq i32 %1552, 0
  br i1 %1553, label %1554, label %1569

1554:                                             ; preds = %1551
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1434) #7
  br label %1569

1555:                                             ; preds = %1465
  br i1 %1435, label %1569, label %1556

1556:                                             ; preds = %1555
  %1557 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1558 = load atomic i32, i32* %1557 monotonic, align 4
  %1559 = and i32 %1558, 2
  %1560 = icmp eq i32 %1559, 0
  %1561 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1562 = load i32, i32* %1561, align 4
  br i1 %1560, label %1563, label %1565

1563:                                             ; preds = %1556
  %1564 = add i32 %1562, -1
  store i32 %1564, i32* %1561, align 4
  br label %1565

1565:                                             ; preds = %1563, %1556
  %1566 = phi i32 [ %1564, %1563 ], [ %1562, %1556 ]
  %1567 = icmp eq i32 %1566, 0
  br i1 %1567, label %1568, label %1569

1568:                                             ; preds = %1565
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1434) #7
  br label %1569

1569:                                             ; preds = %1568, %1565, %1555, %1554, %1551, %1541, %1398, %1395, %1385, %1228, %1225, %1215, %1058, %1055, %1045, %888, %885, %875, %718, %715, %705, %548, %545, %535, %378, %375, %365, %208, %205, %195, %215, %555, %895, %1235, %1427, %1405, %1065, %725, %385, %45
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %39) #7
  br label %1570

1570:                                             ; preds = %23, %23, %4, %1569, %30
  ret void
}

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::TryCatch", align 8
  %5 = alloca %"class.blink::V8StringResource", align 8
  %6 = bitcast %"class.blink::V8StringResource"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 152, i1 false)
  %7 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1, %"class.v8::Value"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 0, i64* %11, align 8
  %12 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* nonnull %5) #7
  br i1 %12, label %28, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.v8::TryCatch"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %4, %"class.v8::Isolate"* %0) #7
  %15 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %16 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %17 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %15, %"class.v8::Context"* %16) #7
  %18 = ptrtoint %"class.v8::String"* %17 to i64
  %19 = bitcast %"class.blink::V8StringResource"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = icmp eq %"class.v8::String"* %17, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %13
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #7
  br label %28

22:                                               ; preds = %13
  %23 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %4) #7
  %24 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %25 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %25, i64 5
  %27 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %26, align 8
  call void %27(%"class.blink::ExceptionState"* %2, %"class.v8::Value"* %23) #7
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #7
  br label %58

28:                                               ; preds = %3, %21
  %29 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %30 = icmp eq %"class.v8::Value"* %29, null
  br i1 %30, label %35, label %31, !prof !2

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::Value"* %29 to %"class.v8::String"*
  %33 = load i32, i32* %8, align 8
  %34 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %32, i32 %33) #7
  br label %55

35:                                               ; preds = %28
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #7
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  call void @llvm.trap() #7
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %31, %35, %38, %53
  %56 = phi %"class.WTF::StringImpl"* [ %34, %31 ], [ null, %35 ], [ %36, %38 ], [ %36, %53 ]
  %57 = call %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"* %56) #7
  br label %58

58:                                               ; preds = %55, %22
  %59 = phi %"class.WTF::StringImpl"* [ %57, %55 ], [ null, %22 ]
  %60 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %58
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %61) #7
  br label %64

64:                                               ; preds = %63, %58
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #7
  br label %80

80:                                               ; preds = %64, %76, %79
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #7
  ret %"class.WTF::StringImpl"* %59
}

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink14URLPatternInit8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::URLPatternInit"* nocapture readonly, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink18toV8URLPatternInitEPKNS_14URLPatternInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::URLPatternInit"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* undef, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink18toV8URLPatternInitEPKNS_14URLPatternInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::URLPatternInit"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %15 = add i64 %14, 8
  %16 = inttoptr i64 %15 to %"class.blink::V8PerIsolateData"**
  %17 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %16, align 8
  %18 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %17, i8* bitcast ([9 x i8*]* @_ZZN5blinkL27eternalV8URLPatternInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.312"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.312"*)) #7
  %19 = extractvalue { i64, %"class.v8::Eternal"* } %18, 1
  %20 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %21 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 1, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %42, label %24

24:                                               ; preds = %4
  %25 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #7
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"** %26, align 8
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 1
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %31 = bitcast i8** %30 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %29, %"class.WTF::StringImpl"** %31, align 8
  %32 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %28, i32* %32, align 8
  %33 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  %34 = bitcast %"class.v8::String"* %33 to %"class.v8::Value"*
  %35 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 0, i32 0
  %36 = load %"class.v8::Name"*, %"class.v8::Name"** %35, align 8
  %37 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %36, %"class.v8::Value"* %34) #7
  %38 = trunc i16 %37 to i8
  %39 = icmp ne i8 %38, 0
  %40 = icmp ugt i16 %37, 255
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %219

42:                                               ; preds = %4, %24
  %43 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 2, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %64, label %46

46:                                               ; preds = %42
  %47 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #7
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %48, align 8
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1
  %52 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %53 = bitcast i8** %52 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %51, %"class.WTF::StringImpl"** %53, align 8
  %54 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %50, i32* %54, align 8
  %55 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #7
  %56 = bitcast %"class.v8::String"* %55 to %"class.v8::Value"*
  %57 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 1, i32 0
  %58 = load %"class.v8::Name"*, %"class.v8::Name"** %57, align 8
  %59 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %58, %"class.v8::Value"* %56) #7
  %60 = trunc i16 %59 to i8
  %61 = icmp ne i8 %60, 0
  %62 = icmp ugt i16 %59, 255
  %63 = and i1 %62, %61
  br i1 %63, label %64, label %219

64:                                               ; preds = %42, %46
  %65 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 3, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %86, label %68

68:                                               ; preds = %64
  %69 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #7
  %70 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %66, %"class.WTF::StringImpl"** %70, align 8
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 1
  %74 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %75 = bitcast i8** %74 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %73, %"class.WTF::StringImpl"** %75, align 8
  %76 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %72, i32* %76, align 8
  %77 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #7
  %78 = bitcast %"class.v8::String"* %77 to %"class.v8::Value"*
  %79 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 2, i32 0
  %80 = load %"class.v8::Name"*, %"class.v8::Name"** %79, align 8
  %81 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %80, %"class.v8::Value"* %78) #7
  %82 = trunc i16 %81 to i8
  %83 = icmp ne i8 %82, 0
  %84 = icmp ugt i16 %81, 255
  %85 = and i1 %84, %83
  br i1 %85, label %86, label %219

86:                                               ; preds = %64, %68
  %87 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 4, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %89, label %108, label %90

90:                                               ; preds = %86
  %91 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %91) #7
  %92 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %88, %"class.WTF::StringImpl"** %92, align 8
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 1
  %96 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %97 = bitcast i8** %96 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %95, %"class.WTF::StringImpl"** %97, align 8
  %98 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %94, i32* %98, align 8
  %99 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %91) #7
  %100 = bitcast %"class.v8::String"* %99 to %"class.v8::Value"*
  %101 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 3, i32 0
  %102 = load %"class.v8::Name"*, %"class.v8::Name"** %101, align 8
  %103 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %102, %"class.v8::Value"* %100) #7
  %104 = trunc i16 %103 to i8
  %105 = icmp ne i8 %104, 0
  %106 = icmp ugt i16 %103, 255
  %107 = and i1 %106, %105
  br i1 %107, label %108, label %219

108:                                              ; preds = %86, %90
  %109 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 5, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %111, label %130, label %112

112:                                              ; preds = %108
  %113 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %113) #7
  %114 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %110, %"class.WTF::StringImpl"** %114, align 8
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 1
  %118 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %119 = bitcast i8** %118 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %117, %"class.WTF::StringImpl"** %119, align 8
  %120 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %116, i32* %120, align 8
  %121 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %113) #7
  %122 = bitcast %"class.v8::String"* %121 to %"class.v8::Value"*
  %123 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 4, i32 0
  %124 = load %"class.v8::Name"*, %"class.v8::Name"** %123, align 8
  %125 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %124, %"class.v8::Value"* %122) #7
  %126 = trunc i16 %125 to i8
  %127 = icmp ne i8 %126, 0
  %128 = icmp ugt i16 %125, 255
  %129 = and i1 %128, %127
  br i1 %129, label %130, label %219

130:                                              ; preds = %108, %112
  %131 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 6, i32 0, i32 0
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %133, label %152, label %134

134:                                              ; preds = %130
  %135 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %135) #7
  %136 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %132, %"class.WTF::StringImpl"** %136, align 8
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 1
  %140 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %141 = bitcast i8** %140 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %139, %"class.WTF::StringImpl"** %141, align 8
  %142 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %138, i32* %142, align 8
  %143 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #7
  %144 = bitcast %"class.v8::String"* %143 to %"class.v8::Value"*
  %145 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 5, i32 0
  %146 = load %"class.v8::Name"*, %"class.v8::Name"** %145, align 8
  %147 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %146, %"class.v8::Value"* %144) #7
  %148 = trunc i16 %147 to i8
  %149 = icmp ne i8 %148, 0
  %150 = icmp ugt i16 %147, 255
  %151 = and i1 %150, %149
  br i1 %151, label %152, label %219

152:                                              ; preds = %130, %134
  %153 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 7, i32 0, i32 0
  %154 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %153, align 8
  %155 = icmp eq %"class.WTF::StringImpl"* %154, null
  br i1 %155, label %174, label %156

156:                                              ; preds = %152
  %157 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %157) #7
  %158 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %154, %"class.WTF::StringImpl"** %158, align 8
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 1
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 1
  %162 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %163 = bitcast i8** %162 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %163, align 8
  %164 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %160, i32* %164, align 8
  %165 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %157) #7
  %166 = bitcast %"class.v8::String"* %165 to %"class.v8::Value"*
  %167 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 6, i32 0
  %168 = load %"class.v8::Name"*, %"class.v8::Name"** %167, align 8
  %169 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %168, %"class.v8::Value"* %166) #7
  %170 = trunc i16 %169 to i8
  %171 = icmp ne i8 %170, 0
  %172 = icmp ugt i16 %169, 255
  %173 = and i1 %172, %171
  br i1 %173, label %174, label %219

174:                                              ; preds = %152, %156
  %175 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 8, i32 0, i32 0
  %176 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  %177 = icmp eq %"class.WTF::StringImpl"* %176, null
  br i1 %177, label %196, label %178

178:                                              ; preds = %174
  %179 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %179) #7
  %180 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %176, %"class.WTF::StringImpl"** %180, align 8
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 1
  %184 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %185 = bitcast i8** %184 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %183, %"class.WTF::StringImpl"** %185, align 8
  %186 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %182, i32* %186, align 8
  %187 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %179) #7
  %188 = bitcast %"class.v8::String"* %187 to %"class.v8::Value"*
  %189 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 7, i32 0
  %190 = load %"class.v8::Name"*, %"class.v8::Name"** %189, align 8
  %191 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %190, %"class.v8::Value"* %188) #7
  %192 = trunc i16 %191 to i8
  %193 = icmp ne i8 %192, 0
  %194 = icmp ugt i16 %191, 255
  %195 = and i1 %194, %193
  br i1 %195, label %196, label %219

196:                                              ; preds = %174, %178
  %197 = getelementptr inbounds %"class.blink::URLPatternInit", %"class.blink::URLPatternInit"* %0, i64 0, i32 9, i32 0, i32 0
  %198 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %197, align 8
  %199 = icmp eq %"class.WTF::StringImpl"* %198, null
  br i1 %199, label %218, label %200

200:                                              ; preds = %196
  %201 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %201) #7
  %202 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %198, %"class.WTF::StringImpl"** %202, align 8
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 1
  %206 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %207 = bitcast i8** %206 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %205, %"class.WTF::StringImpl"** %207, align 8
  %208 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %204, i32* %208, align 8
  %209 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %201) #7
  %210 = bitcast %"class.v8::String"* %209 to %"class.v8::Value"*
  %211 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %19, i64 8, i32 0
  %212 = load %"class.v8::Name"*, %"class.v8::Name"** %211, align 8
  %213 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %20, %"class.v8::Name"* %212, %"class.v8::Value"* %210) #7
  %214 = trunc i16 %213 to i8
  %215 = icmp ne i8 %214, 0
  %216 = icmp ugt i16 %213, 255
  %217 = and i1 %216, %215
  br i1 %217, label %218, label %219

218:                                              ; preds = %196, %200
  br label %219

219:                                              ; preds = %46, %90, %134, %178, %200, %218, %156, %112, %68, %24
  %220 = phi i1 [ false, %24 ], [ false, %46 ], [ false, %68 ], [ false, %90 ], [ false, %112 ], [ false, %134 ], [ false, %156 ], [ false, %178 ], [ true, %218 ], [ false, %200 ]
  ret i1 %220
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::URLPatternInit"* @_ZN5blink17NativeValueTraitsINS_14URLPatternInitEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 80) #7
  %5 = bitcast i8* %4 to %"class.blink::URLPatternInit"*
  tail call void @_ZN5blink14URLPatternInitC1Ev(%"class.blink::URLPatternInit"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink16V8URLPatternInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14URLPatternInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::URLPatternInit"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::URLPatternInit"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.312"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink14URLPatternInitC1Ev(%"class.blink::URLPatternInit"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !3

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !4

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !4

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2146410443, i32 1073205}
!4 = !{!"branch_weights", i32 2000, i32 1}
