; ModuleID = '../../third_party/blink/renderer/core/html/track/vtt/vtt_tokenizer.cc'
source_filename = "../../third_party/blink/renderer/core/html/track/vtt/vtt_tokenizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::VTTTokenizer" = type { %"class.blink::SegmentedString", %"class.blink::InputStreamPreprocessor" }
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon = type { i8* }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.blink::InputStreamPreprocessor" = type <{ %"class.blink::VTTTokenizer"*, i8, [7 x i8] }>
%"class.blink::VTTToken" = type { i32, %"class.WTF::String", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.blink::DecodedHTMLEntity" = type { i32, [4 x i16] }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.1, i32, i8, i8, [2 x i8] }>
%union.anon.1 = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [16 x i8] }
%"class.WTF::VectorBufferBase.3" = type { i8*, i32, i32 }
%"class.WTF::Vector.6" = type { %"class.WTF::VectorBuffer.7" }
%"class.WTF::VectorBuffer.7" = type { %"class.WTF::VectorBufferBase.8", [16 x i8] }
%"class.WTF::VectorBufferBase.8" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.11 }
%union.anon.11 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink15SegmentedStringC2ERKN3WTF6StringE = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv = comdat any

$_ZN5blink8VTTTokenaSERKS0_ = comdat any

$_ZN3WTF13StringBuilder6AppendEh = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN3WTF13StringBuilder6AppendERKS0_ = comdat any

$_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs = comdat any

@_ZN5blinkL16kEndOfFileMarkerE = internal constant i8 0, align 1
@_ZN3WTF12g_empty_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1

@_ZN5blink12VTTTokenizerC1ERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::VTTTokenizer"*, %"class.WTF::String"*), void (%"class.blink::VTTTokenizer"*, %"class.WTF::String"*)* @_ZN5blink12VTTTokenizerC2ERKN3WTF6StringE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12VTTTokenizerC2ERKN3WTF6StringE(%"class.blink::VTTTokenizer"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::SegmentedString", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0
  tail call void @_ZN5blink15SegmentedStringC2ERKN3WTF6StringE(%"class.blink::SegmentedString"* %5, %"class.WTF::String"* dereferenceable(8) %1)
  %6 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 1, i32 0
  store %"class.blink::VTTTokenizer"* %0, %"class.blink::VTTTokenizer"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 1, i32 1
  store i8 0, i8* %7, align 8
  %8 = bitcast %"class.blink::SegmentedString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #8
  %9 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  call void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"* nonnull %4, i8* nonnull @_ZN5blinkL16kEndOfFileMarkerE, i32 1) #8
  %10 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 3
  store i8 1, i8* %10, align 8
  %11 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 4
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"** %14, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %15, label %69, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %35

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i33
  %25 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %24, i33 1) #8
  %26 = extractvalue { i33, i1 } %25, 1
  %27 = extractvalue { i33, i1 } %25, 0
  %28 = icmp slt i33 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %30, label %31, !prof !2

30:                                               ; preds = %21
  call void @llvm.trap() #8
  unreachable

31:                                               ; preds = %21
  %32 = trunc i33 %27 to i32
  store i32 %32, i32* %22, align 4
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %69, label %35

35:                                               ; preds = %16, %31
  %36 = phi %"class.WTF::StringImpl"* [ %33, %31 ], [ %13, %16 ]
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %69, label %40

40:                                               ; preds = %35
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %57, label %46

46:                                               ; preds = %40
  store i8 1, i8* %11, align 1
  %47 = icmp eq %"class.WTF::StringImpl"* %41, null
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 1
  %49 = bitcast %"class.WTF::StringImpl"* %48 to i8*
  %50 = select i1 %47, i8* null, i8* %49
  %51 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* %50, i8** %51, align 8
  %52 = zext i32 %38 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = getelementptr inbounds i8, i8* %53, i64 -1
  %55 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  store i8* %54, i8** %55, align 8
  %56 = ptrtoint i8* %50 to i64
  br label %74

57:                                               ; preds = %40
  store i8 0, i8* %11, align 1
  %58 = icmp eq %"class.WTF::StringImpl"* %41, null
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 1
  %60 = bitcast %"class.WTF::StringImpl"* %59 to i16*
  %61 = select i1 %58, i16* null, i16* %60
  %62 = bitcast %"class.blink::SegmentedString"* %3 to i16**
  store i16* %61, i16** %62, align 8
  %63 = zext i32 %38 to i64
  %64 = getelementptr inbounds i16, i16* %61, i64 %63
  %65 = getelementptr inbounds i16, i16* %64, i64 -1
  %66 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  %67 = bitcast i8** %66 to i16**
  store i16* %65, i16** %67, align 8
  %68 = ptrtoint i16* %61 to i64
  br label %74

69:                                               ; preds = %2, %35, %31
  %70 = phi i1 [ false, %35 ], [ true, %31 ], [ true, %2 ]
  %71 = phi %"class.WTF::StringImpl"* [ %36, %35 ], [ null, %31 ], [ null, %2 ]
  store i8 1, i8* %11, align 1
  %72 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %72, align 8
  %73 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  store i8* null, i8** %73, align 8
  br label %74

74:                                               ; preds = %69, %57, %46
  %75 = phi i1 [ false, %46 ], [ false, %57 ], [ %70, %69 ]
  %76 = phi %"class.WTF::StringImpl"* [ %36, %46 ], [ %36, %57 ], [ %71, %69 ]
  %77 = phi i64 [ %56, %46 ], [ %68, %57 ], [ 0, %69 ]
  %78 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 1
  %79 = bitcast i8** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 1
  store i32 0, i32* %80, align 8
  %81 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 2
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 3
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5
  %84 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 7
  %85 = bitcast %"class.WTF::Deque"* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 25, i1 false) #8
  br i1 %75, label %91, label %86

86:                                               ; preds = %74
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 0
  %90 = zext i1 %89 to i8
  br label %91

91:                                               ; preds = %74, %86
  %92 = phi i8 [ %90, %86 ], [ 1, %74 ]
  store i8 %92, i8* %84, align 1
  call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %5, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %3) #8
  %93 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %83, i64 0, i32 0, i32 0, i32 0, i32 0
  %94 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %93, align 8
  %95 = icmp eq %"class.blink::SegmentedSubstring"* %94, null
  br i1 %95, label %108, label %96

96:                                               ; preds = %91
  %97 = bitcast %"class.blink::SegmentedSubstring"* %94 to i8*
  %98 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %99, %101
  br i1 %102, label %106, label %103

103:                                              ; preds = %96
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %83) #8
  %104 = bitcast %"class.WTF::Deque"* %83 to i8**
  %105 = load i8*, i8** %104, align 8
  br label %106

106:                                              ; preds = %103, %96
  %107 = phi i8* [ %105, %103 ], [ %97, %96 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %107) #8
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %93, align 8
  br label %108

108:                                              ; preds = %106, %91
  %109 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %110 = icmp eq %"class.WTF::StringImpl"* %109, null
  br i1 %110, label %124, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  br i1 %115, label %118, label %120

118:                                              ; preds = %111
  %119 = add i32 %117, -1
  store i32 %119, i32* %116, align 4
  br label %120

120:                                              ; preds = %118, %111
  %121 = phi i32 [ %119, %118 ], [ %117, %111 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %120
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %109) #8
  br label %124

124:                                              ; preds = %108, %120, %123
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #8
  br label %140

140:                                              ; preds = %124, %136, %139
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #8
  call void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"* %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15SegmentedStringC2ERKN3WTF6StringE(%"class.blink::SegmentedString"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 3
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #8
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #8
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %24, %9, %2
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %62, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %62, label %33

33:                                               ; preds = %29
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %50, label %39

39:                                               ; preds = %33
  store i8 1, i8* %4, align 1
  %40 = icmp eq %"class.WTF::StringImpl"* %34, null
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 1
  %42 = bitcast %"class.WTF::StringImpl"* %41 to i8*
  %43 = select i1 %40, i8* null, i8* %42
  %44 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 0, i32 0
  store i8* %43, i8** %44, align 8
  %45 = zext i32 %31 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  %48 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  store i8* %47, i8** %48, align 8
  %49 = ptrtoint i8* %43 to i64
  br label %65

50:                                               ; preds = %33
  store i8 0, i8* %4, align 1
  %51 = icmp eq %"class.WTF::StringImpl"* %34, null
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 1
  %53 = bitcast %"class.WTF::StringImpl"* %52 to i16*
  %54 = select i1 %51, i16* null, i16* %53
  %55 = bitcast %"class.blink::SegmentedString"* %0 to i16**
  store i16* %54, i16** %55, align 8
  %56 = zext i32 %31 to i64
  %57 = getelementptr inbounds i16, i16* %54, i64 %56
  %58 = getelementptr inbounds i16, i16* %57, i64 -1
  %59 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  %60 = bitcast i8** %59 to i16**
  store i16* %58, i16** %60, align 8
  %61 = ptrtoint i16* %54 to i64
  br label %65

62:                                               ; preds = %29, %26
  store i8 1, i8* %4, align 1
  %63 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %63, align 8
  %64 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  store i8* null, i8** %64, align 8
  br label %65

65:                                               ; preds = %39, %50, %62
  %66 = phi i64 [ %49, %39 ], [ %61, %50 ], [ 0, %62 ]
  %67 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %68 = bitcast i8** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  store i32 0, i32* %69, align 8
  %70 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 2
  store i32 0, i32* %70, align 4
  %71 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 3
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  %73 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 7
  %74 = bitcast %"class.WTF::Deque"* %72 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 25, i1 false)
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %82, label %77

77:                                               ; preds = %65
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 0
  %81 = zext i1 %80 to i8
  br label %82

82:                                               ; preds = %65, %77
  %83 = phi i8 [ %81, %77 ], [ 1, %65 ]
  store i8 %83, i8* %73, align 1
  ret void
}

declare void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"*, i8*, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12VTTTokenizer9NextTokenERNS_8VTTTokenE(%"class.blink::VTTTokenizer"*, %"class.blink::VTTToken"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i8, align 1
  %9 = alloca %"class.blink::DecodedHTMLEntity", align 4
  %10 = alloca i16, align 2
  %11 = alloca i16, align 2
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca %"class.blink::DecodedHTMLEntity", align 4
  %17 = alloca i16, align 2
  %18 = alloca %"class.WTF::StringBuilder", align 8
  %19 = alloca %"class.WTF::StringBuilder", align 8
  %20 = alloca %"class.WTF::StringBuilder", align 8
  %21 = alloca %"class.blink::VTTToken", align 8
  %22 = alloca %"class.blink::VTTToken", align 8
  %23 = alloca %"class.blink::VTTToken", align 8
  %24 = alloca %"class.blink::VTTToken", align 8
  %25 = alloca %"class.blink::VTTToken", align 8
  %26 = alloca %"class.blink::VTTToken", align 8
  %27 = alloca %"class.blink::VTTToken", align 8
  %28 = alloca %"class.blink::VTTToken", align 8
  %29 = bitcast i16* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %29) #8
  store i16 -21846, i16* %17, align 2
  %30 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0
  %31 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 7
  %32 = load i8, i8* %31, align 1, !range !3
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %2890

34:                                               ; preds = %2
  %35 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 1
  %36 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  br label %48

44:                                               ; preds = %34
  %45 = bitcast %"class.blink::VTTTokenizer"* %0 to i16**
  %46 = load i16*, i16** %45, align 8
  %47 = load i16, i16* %46, align 2
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i16 [ %43, %39 ], [ %47, %44 ]
  store i16 %49, i16* %17, align 2
  %50 = icmp ugt i16 %49, 15
  br i1 %50, label %51, label %53

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 1, i32 1
  store i8 0, i8* %52, align 8
  br label %125

53:                                               ; preds = %48
  %54 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br i1 %54, label %55, label %2890

55:                                               ; preds = %53
  %56 = load i16, i16* %17, align 2
  %57 = icmp eq i16 %56, 0
  br i1 %57, label %58, label %125

58:                                               ; preds = %55
  %59 = load i8, i8* %36, align 1, !range !3
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %67, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = ptrtoint i8* %63 to i64
  br label %73

67:                                               ; preds = %58
  %68 = bitcast %"class.blink::VTTTokenizer"* %0 to i16**
  %69 = load i16*, i16** %68, align 8
  %70 = load i16, i16* %69, align 2
  %71 = ptrtoint i16* %69 to i64
  %72 = bitcast i16* %69 to i8*
  br label %73

73:                                               ; preds = %67, %61
  %74 = phi i8* [ %63, %61 ], [ %72, %67 ]
  %75 = phi i64 [ %66, %61 ], [ %71, %67 ]
  %76 = phi i16 [ %65, %61 ], [ %70, %67 ]
  %77 = icmp eq i16 %76, 10
  br i1 %77, label %78, label %99

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 3
  %80 = load i8, i8* %79, align 8, !range !3
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %99, label %82, !prof !2

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 3
  %84 = load i32, i32* %83, align 8
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %83, align 8
  %86 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 1
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %75, %90
  %92 = trunc i64 %91 to i32
  %93 = xor i8 %59, 1
  %94 = zext i8 %93 to i32
  %95 = ashr i32 %92, %94
  %96 = add i32 %87, 1
  %97 = add i32 %96, %95
  %98 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 2
  store i32 %97, i32* %98, align 4
  br label %99

99:                                               ; preds = %82, %78, %73
  %100 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %101 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 2
  %102 = load i8*, i8** %101, align 8
  %103 = icmp ult i8* %74, %102
  br i1 %103, label %104, label %113, !prof !4

104:                                              ; preds = %99
  br i1 %60, label %109, label %105

105:                                              ; preds = %104
  %106 = getelementptr inbounds i8, i8* %74, i64 1
  store i8* %106, i8** %100, align 8
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  br label %115

109:                                              ; preds = %104
  %110 = getelementptr inbounds i8, i8* %74, i64 2
  %111 = bitcast i8* %110 to i16*
  store i8* %110, i8** %100, align 8
  %112 = load i16, i16* %111, align 2
  br label %115

113:                                              ; preds = %99
  %114 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %115

115:                                              ; preds = %113, %109, %105
  %116 = phi i16 [ %114, %113 ], [ %108, %105 ], [ %112, %109 ]
  store i16 %116, i16* %17, align 2
  %117 = icmp ugt i16 %116, 15
  br i1 %117, label %118, label %120

118:                                              ; preds = %115
  %119 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 1, i32 1
  store i8 0, i8* %119, align 8
  br label %2890

120:                                              ; preds = %115
  %121 = load i8, i8* %31, align 1, !range !3
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %2890

123:                                              ; preds = %120
  %124 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %2890

125:                                              ; preds = %51, %55
  %126 = phi i16 [ %49, %51 ], [ %56, %55 ]
  %127 = bitcast %"class.WTF::StringBuilder"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %127) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %127, i8 -86, i64 48, i1 false)
  %128 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %128, align 8
  %129 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 1
  %130 = bitcast %union.anon.1* %129 to i8*
  store i8 0, i8* %130, align 8
  %131 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 2
  store i32 0, i32* %131, align 8
  %132 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 3
  store i8 1, i8* %132, align 4
  %133 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 4
  store i8 0, i8* %133, align 1
  %134 = bitcast %"class.WTF::StringBuilder"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %134) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %134, i8 -86, i64 48, i1 false)
  %135 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %135, align 8
  %136 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 1
  %137 = bitcast %union.anon.1* %136 to i8*
  store i8 0, i8* %137, align 8
  %138 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 2
  store i32 0, i32* %138, align 8
  %139 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 3
  store i8 1, i8* %139, align 4
  %140 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 4
  store i8 0, i8* %140, align 1
  %141 = bitcast %"class.WTF::StringBuilder"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %141) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %141, i8 -86, i64 48, i1 false)
  %142 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %20, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %142, align 8
  %143 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %20, i64 0, i32 1
  %144 = bitcast %union.anon.1* %143 to i8*
  store i8 0, i8* %144, align 8
  %145 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %20, i64 0, i32 2
  store i32 0, i32* %145, align 8
  %146 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %20, i64 0, i32 3
  store i8 1, i8* %146, align 4
  %147 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %20, i64 0, i32 4
  store i8 0, i8* %147, align 1
  %148 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %149 = bitcast %"class.blink::VTTTokenizer"* %0 to i16**
  %150 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 3
  %151 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 3
  %152 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 1
  %153 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 1
  %154 = bitcast i8** %153 to i64*
  %155 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 2
  %156 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 0, i32 0, i32 2
  %157 = getelementptr inbounds %"class.blink::VTTTokenizer", %"class.blink::VTTTokenizer"* %0, i64 0, i32 1, i32 1
  %158 = bitcast %"class.blink::DecodedHTMLEntity"* %16 to i8*
  %159 = getelementptr inbounds %"class.blink::DecodedHTMLEntity", %"class.blink::DecodedHTMLEntity"* %16, i64 0, i32 0
  %160 = getelementptr inbounds %"class.blink::DecodedHTMLEntity", %"class.blink::DecodedHTMLEntity"* %16, i64 0, i32 1
  %161 = bitcast [4 x i16]* %160 to i64*
  %162 = bitcast i16* %4 to i8*
  %163 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %164 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %19, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %165 = bitcast %union.anon.1* %136 to i16**
  %166 = bitcast %union.anon.1* %136 to %"class.WTF::Vector.6"*
  %167 = bitcast i16* %14 to i8*
  br label %168

168:                                              ; preds = %654, %125
  %169 = phi i16 [ %655, %654 ], [ %126, %125 ]
  switch i16 %169, label %572 [
    i16 38, label %170
    i16 60, label %289
    i16 0, label %440
  ]

170:                                              ; preds = %168
  %171 = load i8, i8* %36, align 1, !range !3
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %178, label %173

173:                                              ; preds = %170
  %174 = load i8*, i8** %148, align 8
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i16
  %177 = ptrtoint i8* %174 to i64
  br label %183

178:                                              ; preds = %170
  %179 = load i16*, i16** %149, align 8
  %180 = load i16, i16* %179, align 2
  %181 = ptrtoint i16* %179 to i64
  %182 = bitcast i16* %179 to i8*
  br label %183

183:                                              ; preds = %178, %173
  %184 = phi i8* [ %174, %173 ], [ %182, %178 ]
  %185 = phi i64 [ %177, %173 ], [ %181, %178 ]
  %186 = phi i16 [ %176, %173 ], [ %180, %178 ]
  %187 = icmp eq i16 %186, 10
  br i1 %187, label %188, label %203

188:                                              ; preds = %183
  %189 = load i8, i8* %150, align 8, !range !3
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %203, label %191, !prof !2

191:                                              ; preds = %188
  %192 = load i32, i32* %151, align 8
  %193 = add nsw i32 %192, 1
  store i32 %193, i32* %151, align 8
  %194 = load i32, i32* %152, align 8
  %195 = load i64, i64* %154, align 8
  %196 = sub i64 %185, %195
  %197 = trunc i64 %196 to i32
  %198 = xor i8 %171, 1
  %199 = zext i8 %198 to i32
  %200 = ashr i32 %197, %199
  %201 = add i32 %194, 1
  %202 = add i32 %201, %200
  store i32 %202, i32* %155, align 4
  br label %203

203:                                              ; preds = %191, %188, %183
  %204 = load i8*, i8** %156, align 8
  %205 = icmp ult i8* %184, %204
  br i1 %205, label %206, label %215, !prof !4

206:                                              ; preds = %203
  br i1 %172, label %211, label %207

207:                                              ; preds = %206
  %208 = getelementptr inbounds i8, i8* %184, i64 1
  store i8* %208, i8** %148, align 8
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i16
  br label %217

211:                                              ; preds = %206
  %212 = getelementptr inbounds i8, i8* %184, i64 2
  %213 = bitcast i8* %212 to i16*
  store i8* %212, i8** %148, align 8
  %214 = load i16, i16* %213, align 2
  br label %217

215:                                              ; preds = %203
  %216 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %217

217:                                              ; preds = %215, %211, %207
  %218 = phi i16 [ %216, %215 ], [ %210, %207 ], [ %214, %211 ]
  store i16 %218, i16* %17, align 2
  %219 = icmp ugt i16 %218, 15
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  store i8 0, i8* %157, align 8
  br label %226

221:                                              ; preds = %217
  %222 = load i8, i8* %31, align 1, !range !3
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %224, label %226

224:                                              ; preds = %221
  %225 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %226

226:                                              ; preds = %220, %221, %224
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #8
  store i8 0, i8* %15, align 1
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %158) #8
  store i64 -6148914691236517206, i64* %161, align 4
  store i32 0, i32* %159, align 4
  %227 = call zeroext i1 @_ZN5blink17ConsumeHTMLEntityERNS_15SegmentedStringERNS_17DecodedHTMLEntityERbDs(%"class.blink::SegmentedString"* dereferenceable(88) %30, %"class.blink::DecodedHTMLEntity"* nonnull dereferenceable(12) %16, i8* nonnull dereferenceable(1) %15, i16 zeroext 0) #8
  %228 = load i8, i8* %15, align 1, !range !3
  %229 = icmp eq i8 %228, 0
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext 38) #8
  br label %270

231:                                              ; preds = %226
  br i1 %227, label %232, label %235

232:                                              ; preds = %231
  %233 = load i32, i32* %159, align 4
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %270, label %236

235:                                              ; preds = %231
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext 38) #8
  br label %270

236:                                              ; preds = %232, %265
  %237 = phi i64 [ %266, %265 ], [ 0, %232 ]
  %238 = getelementptr inbounds %"class.blink::DecodedHTMLEntity", %"class.blink::DecodedHTMLEntity"* %16, i64 0, i32 1, i64 %237
  %239 = load i16, i16* %238, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %162)
  store i16 %239, i16* %4, align 2
  %240 = load i8, i8* %139, align 4, !range !3
  %241 = icmp ne i8 %240, 0
  %242 = icmp ult i16 %239, 256
  %243 = and i1 %242, %241
  br i1 %243, label %244, label %246

244:                                              ; preds = %236
  %245 = trunc i16 %239 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %245) #8
  br label %265

246:                                              ; preds = %236
  %247 = load i8, i8* %140, align 1
  %248 = icmp eq i8 %247, 0
  %249 = or i1 %241, %248
  br i1 %249, label %250, label %251

250:                                              ; preds = %246
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %251

251:                                              ; preds = %246, %250
  %252 = load i32, i32* %163, align 4
  %253 = load i32, i32* %164, align 8
  %254 = icmp eq i32 %252, %253
  br i1 %254, label %261, label %255, !prof !2

255:                                              ; preds = %251
  %256 = load i16*, i16** %165, align 8
  %257 = zext i32 %252 to i64
  %258 = getelementptr inbounds i16, i16* %256, i64 %257
  store i16 %239, i16* %258, align 2
  %259 = load i32, i32* %163, align 4
  %260 = add i32 %259, 1
  store i32 %260, i32* %163, align 4
  br label %262

261:                                              ; preds = %251
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %4) #8
  br label %262

262:                                              ; preds = %261, %255
  %263 = load i32, i32* %138, align 8
  %264 = add i32 %263, 1
  store i32 %264, i32* %138, align 8
  br label %265

265:                                              ; preds = %244, %262
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %162)
  %266 = add nuw nsw i64 %237, 1
  %267 = load i32, i32* %159, align 4
  %268 = zext i32 %267 to i64
  %269 = icmp ult i64 %266, %268
  br i1 %269, label %236, label %270

270:                                              ; preds = %265, %230, %232, %235
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %158) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #8
  %271 = load i8, i8* %36, align 1, !range !3
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %277, label %273

273:                                              ; preds = %270
  %274 = load i8*, i8** %148, align 8
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i16
  br label %280

277:                                              ; preds = %270
  %278 = load i16*, i16** %149, align 8
  %279 = load i16, i16* %278, align 2
  br label %280

280:                                              ; preds = %277, %273
  %281 = phi i16 [ %276, %273 ], [ %279, %277 ]
  store i16 %281, i16* %17, align 2
  %282 = icmp ugt i16 %281, 15
  br i1 %282, label %283, label %284

283:                                              ; preds = %280
  store i8 0, i8* %157, align 8
  br label %654

284:                                              ; preds = %280
  %285 = load i8, i8* %31, align 1, !range !3
  %286 = icmp eq i8 %285, 0
  br i1 %286, label %287, label %654

287:                                              ; preds = %284
  %288 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %654

289:                                              ; preds = %168
  %290 = load i32, i32* %138, align 8
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %351

292:                                              ; preds = %289
  %293 = load i8, i8* %36, align 1, !range !3
  %294 = icmp eq i8 %293, 0
  br i1 %294, label %300, label %295

295:                                              ; preds = %292
  %296 = load i8*, i8** %148, align 8
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i16
  %299 = ptrtoint i8* %296 to i64
  br label %305

300:                                              ; preds = %292
  %301 = load i16*, i16** %149, align 8
  %302 = load i16, i16* %301, align 2
  %303 = ptrtoint i16* %301 to i64
  %304 = bitcast i16* %301 to i8*
  br label %305

305:                                              ; preds = %300, %295
  %306 = phi i8* [ %296, %295 ], [ %304, %300 ]
  %307 = phi i64 [ %299, %295 ], [ %303, %300 ]
  %308 = phi i16 [ %298, %295 ], [ %302, %300 ]
  %309 = icmp eq i16 %308, 10
  br i1 %309, label %310, label %325

310:                                              ; preds = %305
  %311 = load i8, i8* %150, align 8, !range !3
  %312 = icmp eq i8 %311, 0
  br i1 %312, label %325, label %313, !prof !2

313:                                              ; preds = %310
  %314 = load i32, i32* %151, align 8
  %315 = add nsw i32 %314, 1
  store i32 %315, i32* %151, align 8
  %316 = load i32, i32* %152, align 8
  %317 = load i64, i64* %154, align 8
  %318 = sub i64 %307, %317
  %319 = trunc i64 %318 to i32
  %320 = xor i8 %293, 1
  %321 = zext i8 %320 to i32
  %322 = ashr i32 %319, %321
  %323 = add i32 %316, 1
  %324 = add i32 %323, %322
  store i32 %324, i32* %155, align 4
  br label %325

325:                                              ; preds = %313, %310, %305
  %326 = load i8*, i8** %156, align 8
  %327 = icmp ult i8* %306, %326
  br i1 %327, label %328, label %337, !prof !4

328:                                              ; preds = %325
  br i1 %294, label %333, label %329

329:                                              ; preds = %328
  %330 = getelementptr inbounds i8, i8* %306, i64 1
  store i8* %330, i8** %148, align 8
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i16
  br label %339

333:                                              ; preds = %328
  %334 = getelementptr inbounds i8, i8* %306, i64 2
  %335 = bitcast i8* %334 to i16*
  store i8* %334, i8** %148, align 8
  %336 = load i16, i16* %335, align 2
  br label %339

337:                                              ; preds = %325
  %338 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %339

339:                                              ; preds = %337, %333, %329
  %340 = phi i16 [ %338, %337 ], [ %332, %329 ], [ %336, %333 ]
  store i16 %340, i16* %17, align 2
  %341 = icmp ugt i16 %340, 15
  br i1 %341, label %342, label %343

342:                                              ; preds = %339
  store i8 0, i8* %157, align 8
  br label %349

343:                                              ; preds = %339
  %344 = load i8, i8* %31, align 1, !range !3
  %345 = icmp eq i8 %344, 0
  br i1 %345, label %346, label %349

346:                                              ; preds = %343
  %347 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  %348 = load i16, i16* %17, align 2
  br label %349

349:                                              ; preds = %342, %343, %346
  %350 = phi i16 [ %340, %342 ], [ %340, %343 ], [ %348, %346 ]
  switch i16 %350, label %826 [
    i16 32, label %656
    i16 10, label %656
    i16 9, label %656
    i16 12, label %656
    i16 46, label %712
    i16 47, label %768
  ]

351:                                              ; preds = %289
  %352 = bitcast %"class.blink::VTTToken"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %352) #8
  %353 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %354 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %21, i64 0, i32 0
  store i32 1, i32* %354, align 8, !alias.scope !5
  %355 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %21, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %353, %"class.WTF::StringImpl"** %355, align 8, !alias.scope !5
  %356 = icmp eq %"class.WTF::StringImpl"* %353, null
  br i1 %356, label %374, label %357

357:                                              ; preds = %351
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %359 = load atomic i32, i32* %358 monotonic, align 4, !noalias !5
  %360 = and i32 %359, 2
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %362, label %374

362:                                              ; preds = %357
  %363 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 0
  %364 = load i32, i32* %363, align 4, !noalias !5
  %365 = zext i32 %364 to i33
  %366 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %365, i33 1) #8
  %367 = extractvalue { i33, i1 } %366, 1
  %368 = extractvalue { i33, i1 } %366, 0
  %369 = icmp slt i33 %368, 0
  %370 = or i1 %367, %369
  br i1 %370, label %371, label %372, !prof !2

371:                                              ; preds = %362
  call void @llvm.trap() #8, !noalias !5
  unreachable

372:                                              ; preds = %362
  %373 = trunc i33 %368 to i32
  store i32 %373, i32* %363, align 4, !noalias !5
  br label %374

374:                                              ; preds = %351, %357, %372
  %375 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %21, i64 0, i32 2, i32 0, i32 0, i32 0
  %376 = bitcast %"class.WTF::StringImpl"** %375 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %376, i8 0, i64 16, i1 false) #8, !alias.scope !5
  %377 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %21) #8
  %378 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %21, i64 0, i32 3, i32 0, i32 0, i32 0
  %379 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %378, align 8
  %380 = icmp eq %"class.WTF::StringImpl"* %379, null
  br i1 %380, label %394, label %381

381:                                              ; preds = %374
  %382 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %379, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %383 = load atomic i32, i32* %382 monotonic, align 4
  %384 = and i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %379, i64 0, i32 0
  %387 = load i32, i32* %386, align 4
  br i1 %385, label %388, label %390

388:                                              ; preds = %381
  %389 = add i32 %387, -1
  store i32 %389, i32* %386, align 4
  br label %390

390:                                              ; preds = %388, %381
  %391 = phi i32 [ %389, %388 ], [ %387, %381 ]
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %394

393:                                              ; preds = %390
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %379) #8
  br label %394

394:                                              ; preds = %393, %390, %374
  %395 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %375, align 8
  %396 = icmp eq %"class.WTF::StringImpl"* %395, null
  br i1 %396, label %410, label %397

397:                                              ; preds = %394
  %398 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %399 = load atomic i32, i32* %398 monotonic, align 4
  %400 = and i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 0
  %403 = load i32, i32* %402, align 4
  br i1 %401, label %404, label %406

404:                                              ; preds = %397
  %405 = add i32 %403, -1
  store i32 %405, i32* %402, align 4
  br label %406

406:                                              ; preds = %404, %397
  %407 = phi i32 [ %405, %404 ], [ %403, %397 ]
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %410

409:                                              ; preds = %406
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %395) #8
  br label %410

410:                                              ; preds = %409, %406, %394
  %411 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %355, align 8
  %412 = icmp eq %"class.WTF::StringImpl"* %411, null
  br i1 %412, label %426, label %413

413:                                              ; preds = %410
  %414 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %411, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = load atomic i32, i32* %414 monotonic, align 4
  %416 = and i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %411, i64 0, i32 0
  %419 = load i32, i32* %418, align 4
  br i1 %417, label %420, label %422

420:                                              ; preds = %413
  %421 = add i32 %419, -1
  store i32 %421, i32* %418, align 4
  br label %422

422:                                              ; preds = %420, %413
  %423 = phi i32 [ %421, %420 ], [ %419, %413 ]
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %425, label %426

425:                                              ; preds = %422
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %411) #8
  br label %426

426:                                              ; preds = %410, %422, %425
  br i1 %356, label %2840, label %427

427:                                              ; preds = %426
  %428 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %429 = load atomic i32, i32* %428 monotonic, align 4
  %430 = and i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 0
  %433 = load i32, i32* %432, align 4
  br i1 %431, label %434, label %436

434:                                              ; preds = %427
  %435 = add i32 %433, -1
  store i32 %435, i32* %432, align 4
  br label %436

436:                                              ; preds = %434, %427
  %437 = phi i32 [ %435, %434 ], [ %433, %427 ]
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %439, label %2840

439:                                              ; preds = %436
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %353) #8
  br label %2840

440:                                              ; preds = %168
  %441 = bitcast %"class.blink::VTTToken"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %441) #8
  %442 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %443 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %22, i64 0, i32 0
  store i32 1, i32* %443, align 8, !alias.scope !8
  %444 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %22, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %442, %"class.WTF::StringImpl"** %444, align 8, !alias.scope !8
  %445 = icmp eq %"class.WTF::StringImpl"* %442, null
  br i1 %445, label %463, label %446

446:                                              ; preds = %440
  %447 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %448 = load atomic i32, i32* %447 monotonic, align 4, !noalias !8
  %449 = and i32 %448, 2
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %451, label %463

451:                                              ; preds = %446
  %452 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 0
  %453 = load i32, i32* %452, align 4, !noalias !8
  %454 = zext i32 %453 to i33
  %455 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %454, i33 1) #8
  %456 = extractvalue { i33, i1 } %455, 1
  %457 = extractvalue { i33, i1 } %455, 0
  %458 = icmp slt i33 %457, 0
  %459 = or i1 %456, %458
  br i1 %459, label %460, label %461, !prof !2

460:                                              ; preds = %451
  call void @llvm.trap() #8, !noalias !8
  unreachable

461:                                              ; preds = %451
  %462 = trunc i33 %457 to i32
  store i32 %462, i32* %452, align 4, !noalias !8
  br label %463

463:                                              ; preds = %440, %446, %461
  %464 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %22, i64 0, i32 2, i32 0, i32 0, i32 0
  %465 = bitcast %"class.WTF::StringImpl"** %464 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %465, i8 0, i64 16, i1 false) #8, !alias.scope !8
  %466 = load i8, i8* %36, align 1, !range !3
  %467 = icmp eq i8 %466, 0
  br i1 %467, label %473, label %468

468:                                              ; preds = %463
  %469 = load i8*, i8** %148, align 8
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i16
  %472 = ptrtoint i8* %469 to i64
  br label %478

473:                                              ; preds = %463
  %474 = load i16*, i16** %149, align 8
  %475 = load i16, i16* %474, align 2
  %476 = ptrtoint i16* %474 to i64
  %477 = bitcast i16* %474 to i8*
  br label %478

478:                                              ; preds = %473, %468
  %479 = phi i8* [ %469, %468 ], [ %477, %473 ]
  %480 = phi i64 [ %472, %468 ], [ %476, %473 ]
  %481 = phi i16 [ %471, %468 ], [ %475, %473 ]
  %482 = icmp eq i16 %481, 10
  br i1 %482, label %483, label %498

483:                                              ; preds = %478
  %484 = load i8, i8* %150, align 8, !range !3
  %485 = icmp eq i8 %484, 0
  br i1 %485, label %498, label %486, !prof !2

486:                                              ; preds = %483
  %487 = load i32, i32* %151, align 8
  %488 = add nsw i32 %487, 1
  store i32 %488, i32* %151, align 8
  %489 = load i32, i32* %152, align 8
  %490 = load i64, i64* %154, align 8
  %491 = sub i64 %480, %490
  %492 = trunc i64 %491 to i32
  %493 = xor i8 %466, 1
  %494 = zext i8 %493 to i32
  %495 = ashr i32 %492, %494
  %496 = add i32 %489, 1
  %497 = add i32 %496, %495
  store i32 %497, i32* %155, align 4
  br label %498

498:                                              ; preds = %486, %483, %478
  %499 = load i8*, i8** %156, align 8
  %500 = icmp ult i8* %479, %499
  br i1 %500, label %501, label %506, !prof !4

501:                                              ; preds = %498
  br i1 %467, label %504, label %502

502:                                              ; preds = %501
  %503 = getelementptr inbounds i8, i8* %479, i64 1
  store i8* %503, i8** %148, align 8
  br label %508

504:                                              ; preds = %501
  %505 = getelementptr inbounds i8, i8* %479, i64 2
  store i8* %505, i8** %148, align 8
  br label %508

506:                                              ; preds = %498
  %507 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %508

508:                                              ; preds = %502, %504, %506
  %509 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %22) #8
  %510 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %22, i64 0, i32 3, i32 0, i32 0, i32 0
  %511 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %510, align 8
  %512 = icmp eq %"class.WTF::StringImpl"* %511, null
  br i1 %512, label %526, label %513

513:                                              ; preds = %508
  %514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %515 = load atomic i32, i32* %514 monotonic, align 4
  %516 = and i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 0
  %519 = load i32, i32* %518, align 4
  br i1 %517, label %520, label %522

520:                                              ; preds = %513
  %521 = add i32 %519, -1
  store i32 %521, i32* %518, align 4
  br label %522

522:                                              ; preds = %520, %513
  %523 = phi i32 [ %521, %520 ], [ %519, %513 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %525, label %526

525:                                              ; preds = %522
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %511) #8
  br label %526

526:                                              ; preds = %525, %522, %508
  %527 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %464, align 8
  %528 = icmp eq %"class.WTF::StringImpl"* %527, null
  br i1 %528, label %542, label %529

529:                                              ; preds = %526
  %530 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %527, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %531 = load atomic i32, i32* %530 monotonic, align 4
  %532 = and i32 %531, 2
  %533 = icmp eq i32 %532, 0
  %534 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %527, i64 0, i32 0
  %535 = load i32, i32* %534, align 4
  br i1 %533, label %536, label %538

536:                                              ; preds = %529
  %537 = add i32 %535, -1
  store i32 %537, i32* %534, align 4
  br label %538

538:                                              ; preds = %536, %529
  %539 = phi i32 [ %537, %536 ], [ %535, %529 ]
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %542

541:                                              ; preds = %538
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %527) #8
  br label %542

542:                                              ; preds = %541, %538, %526
  %543 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %444, align 8
  %544 = icmp eq %"class.WTF::StringImpl"* %543, null
  br i1 %544, label %558, label %545

545:                                              ; preds = %542
  %546 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %543, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %547 = load atomic i32, i32* %546 monotonic, align 4
  %548 = and i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %543, i64 0, i32 0
  %551 = load i32, i32* %550, align 4
  br i1 %549, label %552, label %554

552:                                              ; preds = %545
  %553 = add i32 %551, -1
  store i32 %553, i32* %550, align 4
  br label %554

554:                                              ; preds = %552, %545
  %555 = phi i32 [ %553, %552 ], [ %551, %545 ]
  %556 = icmp eq i32 %555, 0
  br i1 %556, label %557, label %558

557:                                              ; preds = %554
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %543) #8
  br label %558

558:                                              ; preds = %542, %554, %557
  br i1 %445, label %2840, label %559

559:                                              ; preds = %558
  %560 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %561 = load atomic i32, i32* %560 monotonic, align 4
  %562 = and i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %442, i64 0, i32 0
  %565 = load i32, i32* %564, align 4
  br i1 %563, label %566, label %568

566:                                              ; preds = %559
  %567 = add i32 %565, -1
  store i32 %567, i32* %564, align 4
  br label %568

568:                                              ; preds = %566, %559
  %569 = phi i32 [ %567, %566 ], [ %565, %559 ]
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %571, label %2840

571:                                              ; preds = %568
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %442) #8
  br label %2840

572:                                              ; preds = %168
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %167)
  store i16 %169, i16* %14, align 2
  %573 = load i8, i8* %139, align 4, !range !3
  %574 = icmp ne i8 %573, 0
  %575 = icmp ult i16 %169, 256
  %576 = and i1 %575, %574
  br i1 %576, label %577, label %579

577:                                              ; preds = %572
  %578 = trunc i16 %169 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %578) #8
  br label %598

579:                                              ; preds = %572
  %580 = load i8, i8* %140, align 1
  %581 = icmp eq i8 %580, 0
  %582 = or i1 %574, %581
  br i1 %582, label %583, label %584

583:                                              ; preds = %579
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %584

584:                                              ; preds = %579, %583
  %585 = load i32, i32* %163, align 4
  %586 = load i32, i32* %164, align 8
  %587 = icmp eq i32 %585, %586
  br i1 %587, label %594, label %588, !prof !2

588:                                              ; preds = %584
  %589 = load i16*, i16** %165, align 8
  %590 = zext i32 %585 to i64
  %591 = getelementptr inbounds i16, i16* %589, i64 %590
  store i16 %169, i16* %591, align 2
  %592 = load i32, i32* %163, align 4
  %593 = add i32 %592, 1
  store i32 %593, i32* %163, align 4
  br label %595

594:                                              ; preds = %584
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %14) #8
  br label %595

595:                                              ; preds = %594, %588
  %596 = load i32, i32* %138, align 8
  %597 = add i32 %596, 1
  store i32 %597, i32* %138, align 8
  br label %598

598:                                              ; preds = %577, %595
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %167)
  %599 = load i8, i8* %36, align 1, !range !3
  %600 = icmp eq i8 %599, 0
  br i1 %600, label %606, label %601

601:                                              ; preds = %598
  %602 = load i8*, i8** %148, align 8
  %603 = load i8, i8* %602, align 1
  %604 = zext i8 %603 to i16
  %605 = ptrtoint i8* %602 to i64
  br label %611

606:                                              ; preds = %598
  %607 = load i16*, i16** %149, align 8
  %608 = load i16, i16* %607, align 2
  %609 = ptrtoint i16* %607 to i64
  %610 = bitcast i16* %607 to i8*
  br label %611

611:                                              ; preds = %606, %601
  %612 = phi i8* [ %602, %601 ], [ %610, %606 ]
  %613 = phi i64 [ %605, %601 ], [ %609, %606 ]
  %614 = phi i16 [ %604, %601 ], [ %608, %606 ]
  %615 = icmp eq i16 %614, 10
  br i1 %615, label %616, label %631

616:                                              ; preds = %611
  %617 = load i8, i8* %150, align 8, !range !3
  %618 = icmp eq i8 %617, 0
  br i1 %618, label %631, label %619, !prof !2

619:                                              ; preds = %616
  %620 = load i32, i32* %151, align 8
  %621 = add nsw i32 %620, 1
  store i32 %621, i32* %151, align 8
  %622 = load i32, i32* %152, align 8
  %623 = load i64, i64* %154, align 8
  %624 = sub i64 %613, %623
  %625 = trunc i64 %624 to i32
  %626 = xor i8 %599, 1
  %627 = zext i8 %626 to i32
  %628 = ashr i32 %625, %627
  %629 = add i32 %622, 1
  %630 = add i32 %629, %628
  store i32 %630, i32* %155, align 4
  br label %631

631:                                              ; preds = %619, %616, %611
  %632 = load i8*, i8** %156, align 8
  %633 = icmp ult i8* %612, %632
  br i1 %633, label %634, label %643, !prof !4

634:                                              ; preds = %631
  br i1 %600, label %639, label %635

635:                                              ; preds = %634
  %636 = getelementptr inbounds i8, i8* %612, i64 1
  store i8* %636, i8** %148, align 8
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i16
  br label %645

639:                                              ; preds = %634
  %640 = getelementptr inbounds i8, i8* %612, i64 2
  %641 = bitcast i8* %640 to i16*
  store i8* %640, i8** %148, align 8
  %642 = load i16, i16* %641, align 2
  br label %645

643:                                              ; preds = %631
  %644 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %645

645:                                              ; preds = %643, %639, %635
  %646 = phi i16 [ %644, %643 ], [ %638, %635 ], [ %642, %639 ]
  store i16 %646, i16* %17, align 2
  %647 = icmp ugt i16 %646, 15
  br i1 %647, label %648, label %649

648:                                              ; preds = %645
  store i8 0, i8* %157, align 8
  br label %654

649:                                              ; preds = %645
  %650 = load i8, i8* %31, align 1, !range !3
  %651 = icmp eq i8 %650, 0
  br i1 %651, label %652, label %654

652:                                              ; preds = %649
  %653 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %654

654:                                              ; preds = %652, %649, %648, %287, %284, %283
  %655 = load i16, i16* %17, align 2
  br label %168

656:                                              ; preds = %349, %349, %349, %349
  %657 = load i8, i8* %36, align 1, !range !3
  %658 = icmp eq i8 %657, 0
  br i1 %658, label %664, label %659

659:                                              ; preds = %656
  %660 = load i8*, i8** %148, align 8
  %661 = load i8, i8* %660, align 1
  %662 = zext i8 %661 to i16
  %663 = ptrtoint i8* %660 to i64
  br label %669

664:                                              ; preds = %656
  %665 = load i16*, i16** %149, align 8
  %666 = load i16, i16* %665, align 2
  %667 = ptrtoint i16* %665 to i64
  %668 = bitcast i16* %665 to i8*
  br label %669

669:                                              ; preds = %664, %659
  %670 = phi i8* [ %660, %659 ], [ %668, %664 ]
  %671 = phi i64 [ %663, %659 ], [ %667, %664 ]
  %672 = phi i16 [ %662, %659 ], [ %666, %664 ]
  %673 = icmp eq i16 %672, 10
  br i1 %673, label %674, label %689

674:                                              ; preds = %669
  %675 = load i8, i8* %150, align 8, !range !3
  %676 = icmp eq i8 %675, 0
  br i1 %676, label %689, label %677, !prof !2

677:                                              ; preds = %674
  %678 = load i32, i32* %151, align 8
  %679 = add nsw i32 %678, 1
  store i32 %679, i32* %151, align 8
  %680 = load i32, i32* %152, align 8
  %681 = load i64, i64* %154, align 8
  %682 = sub i64 %671, %681
  %683 = trunc i64 %682 to i32
  %684 = xor i8 %657, 1
  %685 = zext i8 %684 to i32
  %686 = ashr i32 %683, %685
  %687 = add i32 %680, 1
  %688 = add i32 %687, %686
  store i32 %688, i32* %155, align 4
  br label %689

689:                                              ; preds = %677, %674, %669
  %690 = load i8*, i8** %156, align 8
  %691 = icmp ult i8* %670, %690
  br i1 %691, label %692, label %701, !prof !4

692:                                              ; preds = %689
  br i1 %658, label %697, label %693

693:                                              ; preds = %692
  %694 = getelementptr inbounds i8, i8* %670, i64 1
  store i8* %694, i8** %148, align 8
  %695 = load i8, i8* %694, align 1
  %696 = zext i8 %695 to i16
  br label %703

697:                                              ; preds = %692
  %698 = getelementptr inbounds i8, i8* %670, i64 2
  %699 = bitcast i8* %698 to i16*
  store i8* %698, i8** %148, align 8
  %700 = load i16, i16* %699, align 2
  br label %703

701:                                              ; preds = %689
  %702 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %703

703:                                              ; preds = %701, %697, %693
  %704 = phi i16 [ %702, %701 ], [ %696, %693 ], [ %700, %697 ]
  store i16 %704, i16* %17, align 2
  %705 = icmp ugt i16 %704, 15
  br i1 %705, label %706, label %707

706:                                              ; preds = %703
  store i8 0, i8* %157, align 8
  br label %1644

707:                                              ; preds = %703
  %708 = load i8, i8* %31, align 1, !range !3
  %709 = icmp eq i8 %708, 0
  br i1 %709, label %710, label %1644

710:                                              ; preds = %707
  %711 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1644

712:                                              ; preds = %349
  %713 = load i8, i8* %36, align 1, !range !3
  %714 = icmp eq i8 %713, 0
  br i1 %714, label %720, label %715

715:                                              ; preds = %712
  %716 = load i8*, i8** %148, align 8
  %717 = load i8, i8* %716, align 1
  %718 = zext i8 %717 to i16
  %719 = ptrtoint i8* %716 to i64
  br label %725

720:                                              ; preds = %712
  %721 = load i16*, i16** %149, align 8
  %722 = load i16, i16* %721, align 2
  %723 = ptrtoint i16* %721 to i64
  %724 = bitcast i16* %721 to i8*
  br label %725

725:                                              ; preds = %720, %715
  %726 = phi i8* [ %716, %715 ], [ %724, %720 ]
  %727 = phi i64 [ %719, %715 ], [ %723, %720 ]
  %728 = phi i16 [ %718, %715 ], [ %722, %720 ]
  %729 = icmp eq i16 %728, 10
  br i1 %729, label %730, label %745

730:                                              ; preds = %725
  %731 = load i8, i8* %150, align 8, !range !3
  %732 = icmp eq i8 %731, 0
  br i1 %732, label %745, label %733, !prof !2

733:                                              ; preds = %730
  %734 = load i32, i32* %151, align 8
  %735 = add nsw i32 %734, 1
  store i32 %735, i32* %151, align 8
  %736 = load i32, i32* %152, align 8
  %737 = load i64, i64* %154, align 8
  %738 = sub i64 %727, %737
  %739 = trunc i64 %738 to i32
  %740 = xor i8 %713, 1
  %741 = zext i8 %740 to i32
  %742 = ashr i32 %739, %741
  %743 = add i32 %736, 1
  %744 = add i32 %743, %742
  store i32 %744, i32* %155, align 4
  br label %745

745:                                              ; preds = %733, %730, %725
  %746 = load i8*, i8** %156, align 8
  %747 = icmp ult i8* %726, %746
  br i1 %747, label %748, label %757, !prof !4

748:                                              ; preds = %745
  br i1 %714, label %753, label %749

749:                                              ; preds = %748
  %750 = getelementptr inbounds i8, i8* %726, i64 1
  store i8* %750, i8** %148, align 8
  %751 = load i8, i8* %750, align 1
  %752 = zext i8 %751 to i16
  br label %759

753:                                              ; preds = %748
  %754 = getelementptr inbounds i8, i8* %726, i64 2
  %755 = bitcast i8* %754 to i16*
  store i8* %754, i8** %148, align 8
  %756 = load i16, i16* %755, align 2
  br label %759

757:                                              ; preds = %745
  %758 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %759

759:                                              ; preds = %757, %753, %749
  %760 = phi i16 [ %758, %757 ], [ %752, %749 ], [ %756, %753 ]
  store i16 %760, i16* %17, align 2
  %761 = icmp ugt i16 %760, 15
  br i1 %761, label %762, label %763

762:                                              ; preds = %759
  store i8 0, i8* %157, align 8
  br label %1302

763:                                              ; preds = %759
  %764 = load i8, i8* %31, align 1, !range !3
  %765 = icmp eq i8 %764, 0
  br i1 %765, label %766, label %1302

766:                                              ; preds = %763
  %767 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1302

768:                                              ; preds = %349
  %769 = load i8, i8* %36, align 1, !range !3
  %770 = icmp eq i8 %769, 0
  br i1 %770, label %776, label %771

771:                                              ; preds = %768
  %772 = load i8*, i8** %148, align 8
  %773 = load i8, i8* %772, align 1
  %774 = zext i8 %773 to i16
  %775 = ptrtoint i8* %772 to i64
  br label %781

776:                                              ; preds = %768
  %777 = load i16*, i16** %149, align 8
  %778 = load i16, i16* %777, align 2
  %779 = ptrtoint i16* %777 to i64
  %780 = bitcast i16* %777 to i8*
  br label %781

781:                                              ; preds = %776, %771
  %782 = phi i8* [ %772, %771 ], [ %780, %776 ]
  %783 = phi i64 [ %775, %771 ], [ %779, %776 ]
  %784 = phi i16 [ %774, %771 ], [ %778, %776 ]
  %785 = icmp eq i16 %784, 10
  br i1 %785, label %786, label %801

786:                                              ; preds = %781
  %787 = load i8, i8* %150, align 8, !range !3
  %788 = icmp eq i8 %787, 0
  br i1 %788, label %801, label %789, !prof !2

789:                                              ; preds = %786
  %790 = load i32, i32* %151, align 8
  %791 = add nsw i32 %790, 1
  store i32 %791, i32* %151, align 8
  %792 = load i32, i32* %152, align 8
  %793 = load i64, i64* %154, align 8
  %794 = sub i64 %783, %793
  %795 = trunc i64 %794 to i32
  %796 = xor i8 %769, 1
  %797 = zext i8 %796 to i32
  %798 = ashr i32 %795, %797
  %799 = add i32 %792, 1
  %800 = add i32 %799, %798
  store i32 %800, i32* %155, align 4
  br label %801

801:                                              ; preds = %789, %786, %781
  %802 = load i8*, i8** %156, align 8
  %803 = icmp ult i8* %782, %802
  br i1 %803, label %804, label %813, !prof !4

804:                                              ; preds = %801
  br i1 %770, label %809, label %805

805:                                              ; preds = %804
  %806 = getelementptr inbounds i8, i8* %782, i64 1
  store i8* %806, i8** %148, align 8
  %807 = load i8, i8* %806, align 1
  %808 = zext i8 %807 to i16
  br label %815

809:                                              ; preds = %804
  %810 = getelementptr inbounds i8, i8* %782, i64 2
  %811 = bitcast i8* %810 to i16*
  store i8* %810, i8** %148, align 8
  %812 = load i16, i16* %811, align 2
  br label %815

813:                                              ; preds = %801
  %814 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %815

815:                                              ; preds = %813, %809, %805
  %816 = phi i16 [ %814, %813 ], [ %808, %805 ], [ %812, %809 ]
  store i16 %816, i16* %17, align 2
  %817 = icmp ugt i16 %816, 15
  br i1 %817, label %818, label %819

818:                                              ; preds = %815
  store i8 0, i8* %157, align 8
  br label %824

819:                                              ; preds = %815
  %820 = load i8, i8* %31, align 1, !range !3
  %821 = icmp eq i8 %820, 0
  br i1 %821, label %822, label %824

822:                                              ; preds = %819
  %823 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %824

824:                                              ; preds = %818, %819, %822
  %825 = bitcast i16* %6 to i8*
  br label %2406

826:                                              ; preds = %349
  %827 = add i16 %350, -48
  %828 = icmp ult i16 %827, 10
  br i1 %828, label %829, label %911

829:                                              ; preds = %826
  %830 = bitcast i16* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %830)
  store i16 %350, i16* %13, align 2
  %831 = load i8, i8* %139, align 4, !range !3
  %832 = icmp eq i8 %831, 0
  br i1 %832, label %835, label %833

833:                                              ; preds = %829
  %834 = trunc i16 %350 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %834) #8
  br label %853

835:                                              ; preds = %829
  %836 = load i8, i8* %140, align 1
  %837 = icmp eq i8 %836, 0
  br i1 %837, label %838, label %839

838:                                              ; preds = %835
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %839

839:                                              ; preds = %835, %838
  %840 = load i32, i32* %163, align 4
  %841 = load i32, i32* %164, align 8
  %842 = icmp eq i32 %840, %841
  br i1 %842, label %849, label %843, !prof !2

843:                                              ; preds = %839
  %844 = load i16*, i16** %165, align 8
  %845 = zext i32 %840 to i64
  %846 = getelementptr inbounds i16, i16* %844, i64 %845
  store i16 %350, i16* %846, align 2
  %847 = load i32, i32* %163, align 4
  %848 = add i32 %847, 1
  store i32 %848, i32* %163, align 4
  br label %850

849:                                              ; preds = %839
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %13) #8
  br label %850

850:                                              ; preds = %849, %843
  %851 = load i32, i32* %138, align 8
  %852 = add i32 %851, 1
  store i32 %852, i32* %138, align 8
  br label %853

853:                                              ; preds = %833, %850
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %830)
  %854 = load i8, i8* %36, align 1, !range !3
  %855 = icmp eq i8 %854, 0
  br i1 %855, label %861, label %856

856:                                              ; preds = %853
  %857 = load i8*, i8** %148, align 8
  %858 = load i8, i8* %857, align 1
  %859 = zext i8 %858 to i16
  %860 = ptrtoint i8* %857 to i64
  br label %866

861:                                              ; preds = %853
  %862 = load i16*, i16** %149, align 8
  %863 = load i16, i16* %862, align 2
  %864 = ptrtoint i16* %862 to i64
  %865 = bitcast i16* %862 to i8*
  br label %866

866:                                              ; preds = %861, %856
  %867 = phi i8* [ %857, %856 ], [ %865, %861 ]
  %868 = phi i64 [ %860, %856 ], [ %864, %861 ]
  %869 = phi i16 [ %859, %856 ], [ %863, %861 ]
  %870 = icmp eq i16 %869, 10
  br i1 %870, label %871, label %886

871:                                              ; preds = %866
  %872 = load i8, i8* %150, align 8, !range !3
  %873 = icmp eq i8 %872, 0
  br i1 %873, label %886, label %874, !prof !2

874:                                              ; preds = %871
  %875 = load i32, i32* %151, align 8
  %876 = add nsw i32 %875, 1
  store i32 %876, i32* %151, align 8
  %877 = load i32, i32* %152, align 8
  %878 = load i64, i64* %154, align 8
  %879 = sub i64 %868, %878
  %880 = trunc i64 %879 to i32
  %881 = xor i8 %854, 1
  %882 = zext i8 %881 to i32
  %883 = ashr i32 %880, %882
  %884 = add i32 %877, 1
  %885 = add i32 %884, %883
  store i32 %885, i32* %155, align 4
  br label %886

886:                                              ; preds = %874, %871, %866
  %887 = load i8*, i8** %156, align 8
  %888 = icmp ult i8* %867, %887
  br i1 %888, label %889, label %898, !prof !4

889:                                              ; preds = %886
  br i1 %855, label %894, label %890

890:                                              ; preds = %889
  %891 = getelementptr inbounds i8, i8* %867, i64 1
  store i8* %891, i8** %148, align 8
  %892 = load i8, i8* %891, align 1
  %893 = zext i8 %892 to i16
  br label %900

894:                                              ; preds = %889
  %895 = getelementptr inbounds i8, i8* %867, i64 2
  %896 = bitcast i8* %895 to i16*
  store i8* %895, i8** %148, align 8
  %897 = load i16, i16* %896, align 2
  br label %900

898:                                              ; preds = %886
  %899 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %900

900:                                              ; preds = %898, %894, %890
  %901 = phi i16 [ %899, %898 ], [ %893, %890 ], [ %897, %894 ]
  store i16 %901, i16* %17, align 2
  %902 = icmp ugt i16 %901, 15
  br i1 %902, label %903, label %904

903:                                              ; preds = %900
  store i8 0, i8* %157, align 8
  br label %909

904:                                              ; preds = %900
  %905 = load i8, i8* %31, align 1, !range !3
  %906 = icmp eq i8 %905, 0
  br i1 %906, label %907, label %909

907:                                              ; preds = %904
  %908 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %909

909:                                              ; preds = %903, %904, %907
  %910 = bitcast i16* %5 to i8*
  br label %2623

911:                                              ; preds = %826
  switch i16 %350, label %1103 [
    i16 62, label %912
    i16 0, label %912
  ]

912:                                              ; preds = %911, %911
  %913 = bitcast %"class.blink::VTTToken"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %913) #8
  %914 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %915 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %913, i8 -86, i64 32, i1 false) #8, !alias.scope !11
  %916 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 0
  store i32 2, i32* %916, align 8, !alias.scope !11
  %917 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %914, %"class.WTF::StringImpl"** %917, align 8, !alias.scope !11
  %918 = icmp eq %"class.WTF::StringImpl"* %914, null
  br i1 %918, label %936, label %919

919:                                              ; preds = %912
  %920 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %914, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %921 = load atomic i32, i32* %920 monotonic, align 4, !noalias !11
  %922 = and i32 %921, 2
  %923 = icmp eq i32 %922, 0
  br i1 %923, label %924, label %936

924:                                              ; preds = %919
  %925 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %914, i64 0, i32 0
  %926 = load i32, i32* %925, align 4, !noalias !11
  %927 = zext i32 %926 to i33
  %928 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %927, i33 1) #8
  %929 = extractvalue { i33, i1 } %928, 1
  %930 = extractvalue { i33, i1 } %928, 0
  %931 = icmp slt i33 %930, 0
  %932 = or i1 %929, %931
  br i1 %932, label %933, label %934, !prof !2

933:                                              ; preds = %924
  call void @llvm.trap() #8, !noalias !11
  unreachable

934:                                              ; preds = %924
  %935 = trunc i33 %930 to i32
  store i32 %935, i32* %925, align 4, !noalias !11
  br label %936

936:                                              ; preds = %934, %919, %912
  %937 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 2, i32 0, i32 0, i32 0
  %938 = bitcast %"class.WTF::StringImpl"** %937 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %938, i8 0, i64 16, i1 false) #8, !alias.scope !11
  %939 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 3
  %940 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %915, i64 0, i32 0, i32 0, i32 0
  %941 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %940, align 8, !noalias !11
  %942 = icmp eq %"class.WTF::StringImpl"* %941, null
  br i1 %942, label %943, label %947

943:                                              ; preds = %936
  %944 = ptrtoint %"class.WTF::StringImpl"* %941 to i64
  %945 = bitcast %"class.WTF::AtomicString"* %939 to i64*
  store i64 %944, i64* %945, align 8, !alias.scope !11
  %946 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 2
  br label %992

947:                                              ; preds = %936
  %948 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %941, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %949 = load atomic i32, i32* %948 monotonic, align 4, !noalias !11
  %950 = and i32 %949, 2
  %951 = icmp eq i32 %950, 0
  br i1 %951, label %956, label %952

952:                                              ; preds = %947
  %953 = ptrtoint %"class.WTF::StringImpl"* %941 to i64
  %954 = bitcast %"class.WTF::AtomicString"* %939 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !11
  %955 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 2
  br label %973

956:                                              ; preds = %947
  %957 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %941, i64 0, i32 0
  %958 = load i32, i32* %957, align 4, !noalias !11
  %959 = zext i32 %958 to i33
  %960 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %959, i33 1) #8
  %961 = extractvalue { i33, i1 } %960, 1
  %962 = extractvalue { i33, i1 } %960, 0
  %963 = icmp slt i33 %962, 0
  %964 = or i1 %961, %963
  br i1 %964, label %965, label %966, !prof !2

965:                                              ; preds = %956
  call void @llvm.trap() #8, !noalias !11
  unreachable

966:                                              ; preds = %956
  %967 = trunc i33 %962 to i32
  store i32 %967, i32* %957, align 4, !noalias !11
  %968 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %940, align 8, !noalias !11
  %969 = ptrtoint %"class.WTF::StringImpl"* %941 to i64
  %970 = bitcast %"class.WTF::AtomicString"* %939 to i64*
  store i64 %969, i64* %970, align 8, !alias.scope !11
  %971 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 2
  %972 = icmp eq %"class.WTF::StringImpl"* %968, null
  br i1 %972, label %992, label %973

973:                                              ; preds = %952, %966
  %974 = phi %"class.WTF::AtomicString"* [ %955, %952 ], [ %971, %966 ]
  %975 = phi %"class.WTF::StringImpl"* [ %941, %952 ], [ %968, %966 ]
  %976 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %975, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %977 = load atomic i32, i32* %976 monotonic, align 4, !noalias !11
  %978 = and i32 %977, 2
  %979 = icmp eq i32 %978, 0
  br i1 %979, label %980, label %992

980:                                              ; preds = %973
  %981 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %975, i64 0, i32 0
  %982 = load i32, i32* %981, align 4, !noalias !11
  %983 = zext i32 %982 to i33
  %984 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %983, i33 1) #8
  %985 = extractvalue { i33, i1 } %984, 1
  %986 = extractvalue { i33, i1 } %984, 0
  %987 = icmp slt i33 %986, 0
  %988 = or i1 %985, %987
  br i1 %988, label %989, label %990, !prof !2

989:                                              ; preds = %980
  call void @llvm.trap() #8, !noalias !11
  unreachable

990:                                              ; preds = %980
  %991 = trunc i33 %986 to i32
  store i32 %991, i32* %981, align 4, !noalias !11
  br label %992

992:                                              ; preds = %943, %966, %973, %990
  %993 = phi %"class.WTF::AtomicString"* [ %946, %943 ], [ %971, %966 ], [ %974, %973 ], [ %974, %990 ]
  %994 = phi %"class.WTF::StringImpl"* [ null, %943 ], [ null, %966 ], [ %975, %973 ], [ %975, %990 ]
  %995 = ptrtoint %"class.WTF::StringImpl"* %994 to i64
  %996 = bitcast %"class.WTF::AtomicString"* %993 to i64*
  store i64 %995, i64* %996, align 8, !alias.scope !11
  %997 = load i8, i8* %36, align 1, !range !3
  %998 = icmp eq i8 %997, 0
  br i1 %998, label %1004, label %999

999:                                              ; preds = %992
  %1000 = load i8*, i8** %148, align 8
  %1001 = load i8, i8* %1000, align 1
  %1002 = zext i8 %1001 to i16
  %1003 = ptrtoint i8* %1000 to i64
  br label %1009

1004:                                             ; preds = %992
  %1005 = load i16*, i16** %149, align 8
  %1006 = load i16, i16* %1005, align 2
  %1007 = ptrtoint i16* %1005 to i64
  %1008 = bitcast i16* %1005 to i8*
  br label %1009

1009:                                             ; preds = %1004, %999
  %1010 = phi i8* [ %1000, %999 ], [ %1008, %1004 ]
  %1011 = phi i64 [ %1003, %999 ], [ %1007, %1004 ]
  %1012 = phi i16 [ %1002, %999 ], [ %1006, %1004 ]
  %1013 = icmp eq i16 %1012, 10
  br i1 %1013, label %1014, label %1029

1014:                                             ; preds = %1009
  %1015 = load i8, i8* %150, align 8, !range !3
  %1016 = icmp eq i8 %1015, 0
  br i1 %1016, label %1029, label %1017, !prof !2

1017:                                             ; preds = %1014
  %1018 = load i32, i32* %151, align 8
  %1019 = add nsw i32 %1018, 1
  store i32 %1019, i32* %151, align 8
  %1020 = load i32, i32* %152, align 8
  %1021 = load i64, i64* %154, align 8
  %1022 = sub i64 %1011, %1021
  %1023 = trunc i64 %1022 to i32
  %1024 = xor i8 %997, 1
  %1025 = zext i8 %1024 to i32
  %1026 = ashr i32 %1023, %1025
  %1027 = add i32 %1020, 1
  %1028 = add i32 %1027, %1026
  store i32 %1028, i32* %155, align 4
  br label %1029

1029:                                             ; preds = %1017, %1014, %1009
  %1030 = load i8*, i8** %156, align 8
  %1031 = icmp ult i8* %1010, %1030
  br i1 %1031, label %1032, label %1037, !prof !4

1032:                                             ; preds = %1029
  br i1 %998, label %1035, label %1033

1033:                                             ; preds = %1032
  %1034 = getelementptr inbounds i8, i8* %1010, i64 1
  store i8* %1034, i8** %148, align 8
  br label %1039

1035:                                             ; preds = %1032
  %1036 = getelementptr inbounds i8, i8* %1010, i64 2
  store i8* %1036, i8** %148, align 8
  br label %1039

1037:                                             ; preds = %1029
  %1038 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1039

1039:                                             ; preds = %1033, %1035, %1037
  %1040 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %23) #8
  %1041 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %23, i64 0, i32 3, i32 0, i32 0, i32 0
  %1042 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1041, align 8
  %1043 = icmp eq %"class.WTF::StringImpl"* %1042, null
  br i1 %1043, label %1057, label %1044

1044:                                             ; preds = %1039
  %1045 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1042, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1046 = load atomic i32, i32* %1045 monotonic, align 4
  %1047 = and i32 %1046, 2
  %1048 = icmp eq i32 %1047, 0
  %1049 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1042, i64 0, i32 0
  %1050 = load i32, i32* %1049, align 4
  br i1 %1048, label %1051, label %1053

1051:                                             ; preds = %1044
  %1052 = add i32 %1050, -1
  store i32 %1052, i32* %1049, align 4
  br label %1053

1053:                                             ; preds = %1051, %1044
  %1054 = phi i32 [ %1052, %1051 ], [ %1050, %1044 ]
  %1055 = icmp eq i32 %1054, 0
  br i1 %1055, label %1056, label %1057

1056:                                             ; preds = %1053
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1042) #8
  br label %1057

1057:                                             ; preds = %1056, %1053, %1039
  %1058 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %937, align 8
  %1059 = icmp eq %"class.WTF::StringImpl"* %1058, null
  br i1 %1059, label %1073, label %1060

1060:                                             ; preds = %1057
  %1061 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1058, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1062 = load atomic i32, i32* %1061 monotonic, align 4
  %1063 = and i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1058, i64 0, i32 0
  %1066 = load i32, i32* %1065, align 4
  br i1 %1064, label %1067, label %1069

1067:                                             ; preds = %1060
  %1068 = add i32 %1066, -1
  store i32 %1068, i32* %1065, align 4
  br label %1069

1069:                                             ; preds = %1067, %1060
  %1070 = phi i32 [ %1068, %1067 ], [ %1066, %1060 ]
  %1071 = icmp eq i32 %1070, 0
  br i1 %1071, label %1072, label %1073

1072:                                             ; preds = %1069
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1058) #8
  br label %1073

1073:                                             ; preds = %1072, %1069, %1057
  %1074 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %917, align 8
  %1075 = icmp eq %"class.WTF::StringImpl"* %1074, null
  br i1 %1075, label %1089, label %1076

1076:                                             ; preds = %1073
  %1077 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1074, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1078 = load atomic i32, i32* %1077 monotonic, align 4
  %1079 = and i32 %1078, 2
  %1080 = icmp eq i32 %1079, 0
  %1081 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1074, i64 0, i32 0
  %1082 = load i32, i32* %1081, align 4
  br i1 %1080, label %1083, label %1085

1083:                                             ; preds = %1076
  %1084 = add i32 %1082, -1
  store i32 %1084, i32* %1081, align 4
  br label %1085

1085:                                             ; preds = %1083, %1076
  %1086 = phi i32 [ %1084, %1083 ], [ %1082, %1076 ]
  %1087 = icmp eq i32 %1086, 0
  br i1 %1087, label %1088, label %1089

1088:                                             ; preds = %1085
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1074) #8
  br label %1089

1089:                                             ; preds = %1073, %1085, %1088
  br i1 %918, label %2840, label %1090

1090:                                             ; preds = %1089
  %1091 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %914, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1092 = load atomic i32, i32* %1091 monotonic, align 4
  %1093 = and i32 %1092, 2
  %1094 = icmp eq i32 %1093, 0
  %1095 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %914, i64 0, i32 0
  %1096 = load i32, i32* %1095, align 4
  br i1 %1094, label %1097, label %1099

1097:                                             ; preds = %1090
  %1098 = add i32 %1096, -1
  store i32 %1098, i32* %1095, align 4
  br label %1099

1099:                                             ; preds = %1097, %1090
  %1100 = phi i32 [ %1098, %1097 ], [ %1096, %1090 ]
  %1101 = icmp eq i32 %1100, 0
  br i1 %1101, label %1102, label %2840

1102:                                             ; preds = %1099
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %914) #8
  br label %2840

1103:                                             ; preds = %911
  %1104 = bitcast i16* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1104)
  store i16 %350, i16* %12, align 2
  %1105 = load i8, i8* %139, align 4, !range !3
  %1106 = icmp ne i8 %1105, 0
  %1107 = icmp ult i16 %350, 256
  %1108 = and i1 %1107, %1106
  br i1 %1108, label %1109, label %1111

1109:                                             ; preds = %1103
  %1110 = trunc i16 %350 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %1110) #8
  br label %1130

1111:                                             ; preds = %1103
  %1112 = load i8, i8* %140, align 1
  %1113 = icmp eq i8 %1112, 0
  %1114 = or i1 %1106, %1113
  br i1 %1114, label %1115, label %1116

1115:                                             ; preds = %1111
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %1116

1116:                                             ; preds = %1111, %1115
  %1117 = load i32, i32* %163, align 4
  %1118 = load i32, i32* %164, align 8
  %1119 = icmp eq i32 %1117, %1118
  br i1 %1119, label %1126, label %1120, !prof !2

1120:                                             ; preds = %1116
  %1121 = load i16*, i16** %165, align 8
  %1122 = zext i32 %1117 to i64
  %1123 = getelementptr inbounds i16, i16* %1121, i64 %1122
  store i16 %350, i16* %1123, align 2
  %1124 = load i32, i32* %163, align 4
  %1125 = add i32 %1124, 1
  store i32 %1125, i32* %163, align 4
  br label %1127

1126:                                             ; preds = %1116
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %12) #8
  br label %1127

1127:                                             ; preds = %1126, %1120
  %1128 = load i32, i32* %138, align 8
  %1129 = add i32 %1128, 1
  store i32 %1129, i32* %138, align 8
  br label %1130

1130:                                             ; preds = %1109, %1127
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1104)
  %1131 = load i8, i8* %36, align 1, !range !3
  %1132 = icmp eq i8 %1131, 0
  br i1 %1132, label %1138, label %1133

1133:                                             ; preds = %1130
  %1134 = load i8*, i8** %148, align 8
  %1135 = load i8, i8* %1134, align 1
  %1136 = zext i8 %1135 to i16
  %1137 = ptrtoint i8* %1134 to i64
  br label %1143

1138:                                             ; preds = %1130
  %1139 = load i16*, i16** %149, align 8
  %1140 = load i16, i16* %1139, align 2
  %1141 = ptrtoint i16* %1139 to i64
  %1142 = bitcast i16* %1139 to i8*
  br label %1143

1143:                                             ; preds = %1138, %1133
  %1144 = phi i8* [ %1134, %1133 ], [ %1142, %1138 ]
  %1145 = phi i64 [ %1137, %1133 ], [ %1141, %1138 ]
  %1146 = phi i16 [ %1136, %1133 ], [ %1140, %1138 ]
  %1147 = icmp eq i16 %1146, 10
  br i1 %1147, label %1148, label %1163

1148:                                             ; preds = %1143
  %1149 = load i8, i8* %150, align 8, !range !3
  %1150 = icmp eq i8 %1149, 0
  br i1 %1150, label %1163, label %1151, !prof !2

1151:                                             ; preds = %1148
  %1152 = load i32, i32* %151, align 8
  %1153 = add nsw i32 %1152, 1
  store i32 %1153, i32* %151, align 8
  %1154 = load i32, i32* %152, align 8
  %1155 = load i64, i64* %154, align 8
  %1156 = sub i64 %1145, %1155
  %1157 = trunc i64 %1156 to i32
  %1158 = xor i8 %1131, 1
  %1159 = zext i8 %1158 to i32
  %1160 = ashr i32 %1157, %1159
  %1161 = add i32 %1154, 1
  %1162 = add i32 %1161, %1160
  store i32 %1162, i32* %155, align 4
  br label %1163

1163:                                             ; preds = %1151, %1148, %1143
  %1164 = load i8*, i8** %156, align 8
  %1165 = icmp ult i8* %1144, %1164
  br i1 %1165, label %1166, label %1175, !prof !4

1166:                                             ; preds = %1163
  br i1 %1132, label %1171, label %1167

1167:                                             ; preds = %1166
  %1168 = getelementptr inbounds i8, i8* %1144, i64 1
  store i8* %1168, i8** %148, align 8
  %1169 = load i8, i8* %1168, align 1
  %1170 = zext i8 %1169 to i16
  br label %1177

1171:                                             ; preds = %1166
  %1172 = getelementptr inbounds i8, i8* %1144, i64 2
  %1173 = bitcast i8* %1172 to i16*
  store i8* %1172, i8** %148, align 8
  %1174 = load i16, i16* %1173, align 2
  br label %1177

1175:                                             ; preds = %1163
  %1176 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1177

1177:                                             ; preds = %1175, %1171, %1167
  %1178 = phi i16 [ %1176, %1175 ], [ %1170, %1167 ], [ %1174, %1171 ]
  store i16 %1178, i16* %17, align 2
  %1179 = icmp ugt i16 %1178, 15
  br i1 %1179, label %1180, label %1181

1180:                                             ; preds = %1177
  store i8 0, i8* %157, align 8
  br label %1186

1181:                                             ; preds = %1177
  %1182 = load i8, i8* %31, align 1, !range !3
  %1183 = icmp eq i8 %1182, 0
  br i1 %1183, label %1184, label %1186

1184:                                             ; preds = %1181
  %1185 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1186

1186:                                             ; preds = %1180, %1181, %1184
  %1187 = bitcast i16* %11 to i8*
  br label %1188

1188:                                             ; preds = %1576, %1186
  %1189 = load i16, i16* %17, align 2
  switch i16 %1189, label %1499 [
    i16 32, label %1190
    i16 10, label %1190
    i16 9, label %1190
    i16 12, label %1190
    i16 46, label %1246
    i16 62, label %1308
    i16 0, label %1308
  ]

1190:                                             ; preds = %1188, %1188, %1188, %1188
  %1191 = load i8, i8* %36, align 1, !range !3
  %1192 = icmp eq i8 %1191, 0
  br i1 %1192, label %1198, label %1193

1193:                                             ; preds = %1190
  %1194 = load i8*, i8** %148, align 8
  %1195 = load i8, i8* %1194, align 1
  %1196 = zext i8 %1195 to i16
  %1197 = ptrtoint i8* %1194 to i64
  br label %1203

1198:                                             ; preds = %1190
  %1199 = load i16*, i16** %149, align 8
  %1200 = load i16, i16* %1199, align 2
  %1201 = ptrtoint i16* %1199 to i64
  %1202 = bitcast i16* %1199 to i8*
  br label %1203

1203:                                             ; preds = %1198, %1193
  %1204 = phi i8* [ %1194, %1193 ], [ %1202, %1198 ]
  %1205 = phi i64 [ %1197, %1193 ], [ %1201, %1198 ]
  %1206 = phi i16 [ %1196, %1193 ], [ %1200, %1198 ]
  %1207 = icmp eq i16 %1206, 10
  br i1 %1207, label %1208, label %1223

1208:                                             ; preds = %1203
  %1209 = load i8, i8* %150, align 8, !range !3
  %1210 = icmp eq i8 %1209, 0
  br i1 %1210, label %1223, label %1211, !prof !2

1211:                                             ; preds = %1208
  %1212 = load i32, i32* %151, align 8
  %1213 = add nsw i32 %1212, 1
  store i32 %1213, i32* %151, align 8
  %1214 = load i32, i32* %152, align 8
  %1215 = load i64, i64* %154, align 8
  %1216 = sub i64 %1205, %1215
  %1217 = trunc i64 %1216 to i32
  %1218 = xor i8 %1191, 1
  %1219 = zext i8 %1218 to i32
  %1220 = ashr i32 %1217, %1219
  %1221 = add i32 %1214, 1
  %1222 = add i32 %1221, %1220
  store i32 %1222, i32* %155, align 4
  br label %1223

1223:                                             ; preds = %1211, %1208, %1203
  %1224 = load i8*, i8** %156, align 8
  %1225 = icmp ult i8* %1204, %1224
  br i1 %1225, label %1226, label %1235, !prof !4

1226:                                             ; preds = %1223
  br i1 %1192, label %1231, label %1227

1227:                                             ; preds = %1226
  %1228 = getelementptr inbounds i8, i8* %1204, i64 1
  store i8* %1228, i8** %148, align 8
  %1229 = load i8, i8* %1228, align 1
  %1230 = zext i8 %1229 to i16
  br label %1237

1231:                                             ; preds = %1226
  %1232 = getelementptr inbounds i8, i8* %1204, i64 2
  %1233 = bitcast i8* %1232 to i16*
  store i8* %1232, i8** %148, align 8
  %1234 = load i16, i16* %1233, align 2
  br label %1237

1235:                                             ; preds = %1223
  %1236 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1237

1237:                                             ; preds = %1235, %1231, %1227
  %1238 = phi i16 [ %1236, %1235 ], [ %1230, %1227 ], [ %1234, %1231 ]
  store i16 %1238, i16* %17, align 2
  %1239 = icmp ugt i16 %1238, 15
  br i1 %1239, label %1240, label %1241

1240:                                             ; preds = %1237
  store i8 0, i8* %157, align 8
  br label %1644

1241:                                             ; preds = %1237
  %1242 = load i8, i8* %31, align 1, !range !3
  %1243 = icmp eq i8 %1242, 0
  br i1 %1243, label %1244, label %1644

1244:                                             ; preds = %1241
  %1245 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1644

1246:                                             ; preds = %1188
  %1247 = load i8, i8* %36, align 1, !range !3
  %1248 = icmp eq i8 %1247, 0
  br i1 %1248, label %1254, label %1249

1249:                                             ; preds = %1246
  %1250 = load i8*, i8** %148, align 8
  %1251 = load i8, i8* %1250, align 1
  %1252 = zext i8 %1251 to i16
  %1253 = ptrtoint i8* %1250 to i64
  br label %1259

1254:                                             ; preds = %1246
  %1255 = load i16*, i16** %149, align 8
  %1256 = load i16, i16* %1255, align 2
  %1257 = ptrtoint i16* %1255 to i64
  %1258 = bitcast i16* %1255 to i8*
  br label %1259

1259:                                             ; preds = %1254, %1249
  %1260 = phi i8* [ %1250, %1249 ], [ %1258, %1254 ]
  %1261 = phi i64 [ %1253, %1249 ], [ %1257, %1254 ]
  %1262 = phi i16 [ %1252, %1249 ], [ %1256, %1254 ]
  %1263 = icmp eq i16 %1262, 10
  br i1 %1263, label %1264, label %1279

1264:                                             ; preds = %1259
  %1265 = load i8, i8* %150, align 8, !range !3
  %1266 = icmp eq i8 %1265, 0
  br i1 %1266, label %1279, label %1267, !prof !2

1267:                                             ; preds = %1264
  %1268 = load i32, i32* %151, align 8
  %1269 = add nsw i32 %1268, 1
  store i32 %1269, i32* %151, align 8
  %1270 = load i32, i32* %152, align 8
  %1271 = load i64, i64* %154, align 8
  %1272 = sub i64 %1261, %1271
  %1273 = trunc i64 %1272 to i32
  %1274 = xor i8 %1247, 1
  %1275 = zext i8 %1274 to i32
  %1276 = ashr i32 %1273, %1275
  %1277 = add i32 %1270, 1
  %1278 = add i32 %1277, %1276
  store i32 %1278, i32* %155, align 4
  br label %1279

1279:                                             ; preds = %1267, %1264, %1259
  %1280 = load i8*, i8** %156, align 8
  %1281 = icmp ult i8* %1260, %1280
  br i1 %1281, label %1282, label %1291, !prof !4

1282:                                             ; preds = %1279
  br i1 %1248, label %1287, label %1283

1283:                                             ; preds = %1282
  %1284 = getelementptr inbounds i8, i8* %1260, i64 1
  store i8* %1284, i8** %148, align 8
  %1285 = load i8, i8* %1284, align 1
  %1286 = zext i8 %1285 to i16
  br label %1293

1287:                                             ; preds = %1282
  %1288 = getelementptr inbounds i8, i8* %1260, i64 2
  %1289 = bitcast i8* %1288 to i16*
  store i8* %1288, i8** %148, align 8
  %1290 = load i16, i16* %1289, align 2
  br label %1293

1291:                                             ; preds = %1279
  %1292 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1293

1293:                                             ; preds = %1291, %1287, %1283
  %1294 = phi i16 [ %1292, %1291 ], [ %1286, %1283 ], [ %1290, %1287 ]
  store i16 %1294, i16* %17, align 2
  %1295 = icmp ugt i16 %1294, 15
  br i1 %1295, label %1296, label %1297

1296:                                             ; preds = %1293
  store i8 0, i8* %157, align 8
  br label %1302

1297:                                             ; preds = %1293
  %1298 = load i8, i8* %31, align 1, !range !3
  %1299 = icmp eq i8 %1298, 0
  br i1 %1299, label %1300, label %1302

1300:                                             ; preds = %1297
  %1301 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1302

1302:                                             ; preds = %1300, %1297, %1296, %766, %763, %762
  %1303 = bitcast i16* %10 to i8*
  %1304 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %1305 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %1306 = bitcast %union.anon.1* %129 to i16**
  %1307 = bitcast %union.anon.1* %129 to %"class.WTF::Vector.6"*
  br label %1582

1308:                                             ; preds = %1188, %1188
  %1309 = bitcast %"class.blink::VTTToken"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1309) #8
  %1310 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %1311 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1309, i8 -86, i64 32, i1 false) #8, !alias.scope !14
  %1312 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 0
  store i32 2, i32* %1312, align 8, !alias.scope !14
  %1313 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1310, %"class.WTF::StringImpl"** %1313, align 8, !alias.scope !14
  %1314 = icmp eq %"class.WTF::StringImpl"* %1310, null
  br i1 %1314, label %1332, label %1315

1315:                                             ; preds = %1308
  %1316 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1310, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1317 = load atomic i32, i32* %1316 monotonic, align 4, !noalias !14
  %1318 = and i32 %1317, 2
  %1319 = icmp eq i32 %1318, 0
  br i1 %1319, label %1320, label %1332

1320:                                             ; preds = %1315
  %1321 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1310, i64 0, i32 0
  %1322 = load i32, i32* %1321, align 4, !noalias !14
  %1323 = zext i32 %1322 to i33
  %1324 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1323, i33 1) #8
  %1325 = extractvalue { i33, i1 } %1324, 1
  %1326 = extractvalue { i33, i1 } %1324, 0
  %1327 = icmp slt i33 %1326, 0
  %1328 = or i1 %1325, %1327
  br i1 %1328, label %1329, label %1330, !prof !2

1329:                                             ; preds = %1320
  call void @llvm.trap() #8, !noalias !14
  unreachable

1330:                                             ; preds = %1320
  %1331 = trunc i33 %1326 to i32
  store i32 %1331, i32* %1321, align 4, !noalias !14
  br label %1332

1332:                                             ; preds = %1330, %1315, %1308
  %1333 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 2, i32 0, i32 0, i32 0
  %1334 = bitcast %"class.WTF::StringImpl"** %1333 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1334, i8 0, i64 16, i1 false) #8, !alias.scope !14
  %1335 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 3
  %1336 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1311, i64 0, i32 0, i32 0, i32 0
  %1337 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1336, align 8, !noalias !14
  %1338 = icmp eq %"class.WTF::StringImpl"* %1337, null
  br i1 %1338, label %1339, label %1343

1339:                                             ; preds = %1332
  %1340 = ptrtoint %"class.WTF::StringImpl"* %1337 to i64
  %1341 = bitcast %"class.WTF::AtomicString"* %1335 to i64*
  store i64 %1340, i64* %1341, align 8, !alias.scope !14
  %1342 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 2
  br label %1388

1343:                                             ; preds = %1332
  %1344 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1337, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1345 = load atomic i32, i32* %1344 monotonic, align 4, !noalias !14
  %1346 = and i32 %1345, 2
  %1347 = icmp eq i32 %1346, 0
  br i1 %1347, label %1352, label %1348

1348:                                             ; preds = %1343
  %1349 = ptrtoint %"class.WTF::StringImpl"* %1337 to i64
  %1350 = bitcast %"class.WTF::AtomicString"* %1335 to i64*
  store i64 %1349, i64* %1350, align 8, !alias.scope !14
  %1351 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 2
  br label %1369

1352:                                             ; preds = %1343
  %1353 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1337, i64 0, i32 0
  %1354 = load i32, i32* %1353, align 4, !noalias !14
  %1355 = zext i32 %1354 to i33
  %1356 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1355, i33 1) #8
  %1357 = extractvalue { i33, i1 } %1356, 1
  %1358 = extractvalue { i33, i1 } %1356, 0
  %1359 = icmp slt i33 %1358, 0
  %1360 = or i1 %1357, %1359
  br i1 %1360, label %1361, label %1362, !prof !2

1361:                                             ; preds = %1352
  call void @llvm.trap() #8, !noalias !14
  unreachable

1362:                                             ; preds = %1352
  %1363 = trunc i33 %1358 to i32
  store i32 %1363, i32* %1353, align 4, !noalias !14
  %1364 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1336, align 8, !noalias !14
  %1365 = ptrtoint %"class.WTF::StringImpl"* %1337 to i64
  %1366 = bitcast %"class.WTF::AtomicString"* %1335 to i64*
  store i64 %1365, i64* %1366, align 8, !alias.scope !14
  %1367 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 2
  %1368 = icmp eq %"class.WTF::StringImpl"* %1364, null
  br i1 %1368, label %1388, label %1369

1369:                                             ; preds = %1348, %1362
  %1370 = phi %"class.WTF::AtomicString"* [ %1351, %1348 ], [ %1367, %1362 ]
  %1371 = phi %"class.WTF::StringImpl"* [ %1337, %1348 ], [ %1364, %1362 ]
  %1372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1371, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1373 = load atomic i32, i32* %1372 monotonic, align 4, !noalias !14
  %1374 = and i32 %1373, 2
  %1375 = icmp eq i32 %1374, 0
  br i1 %1375, label %1376, label %1388

1376:                                             ; preds = %1369
  %1377 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1371, i64 0, i32 0
  %1378 = load i32, i32* %1377, align 4, !noalias !14
  %1379 = zext i32 %1378 to i33
  %1380 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1379, i33 1) #8
  %1381 = extractvalue { i33, i1 } %1380, 1
  %1382 = extractvalue { i33, i1 } %1380, 0
  %1383 = icmp slt i33 %1382, 0
  %1384 = or i1 %1381, %1383
  br i1 %1384, label %1385, label %1386, !prof !2

1385:                                             ; preds = %1376
  call void @llvm.trap() #8, !noalias !14
  unreachable

1386:                                             ; preds = %1376
  %1387 = trunc i33 %1382 to i32
  store i32 %1387, i32* %1377, align 4, !noalias !14
  br label %1388

1388:                                             ; preds = %1339, %1362, %1369, %1386
  %1389 = phi %"class.WTF::AtomicString"* [ %1342, %1339 ], [ %1367, %1362 ], [ %1370, %1369 ], [ %1370, %1386 ]
  %1390 = phi %"class.WTF::StringImpl"* [ null, %1339 ], [ null, %1362 ], [ %1371, %1369 ], [ %1371, %1386 ]
  %1391 = ptrtoint %"class.WTF::StringImpl"* %1390 to i64
  %1392 = bitcast %"class.WTF::AtomicString"* %1389 to i64*
  store i64 %1391, i64* %1392, align 8, !alias.scope !14
  %1393 = load i8, i8* %36, align 1, !range !3
  %1394 = icmp eq i8 %1393, 0
  br i1 %1394, label %1400, label %1395

1395:                                             ; preds = %1388
  %1396 = load i8*, i8** %148, align 8
  %1397 = load i8, i8* %1396, align 1
  %1398 = zext i8 %1397 to i16
  %1399 = ptrtoint i8* %1396 to i64
  br label %1405

1400:                                             ; preds = %1388
  %1401 = load i16*, i16** %149, align 8
  %1402 = load i16, i16* %1401, align 2
  %1403 = ptrtoint i16* %1401 to i64
  %1404 = bitcast i16* %1401 to i8*
  br label %1405

1405:                                             ; preds = %1400, %1395
  %1406 = phi i8* [ %1396, %1395 ], [ %1404, %1400 ]
  %1407 = phi i64 [ %1399, %1395 ], [ %1403, %1400 ]
  %1408 = phi i16 [ %1398, %1395 ], [ %1402, %1400 ]
  %1409 = icmp eq i16 %1408, 10
  br i1 %1409, label %1410, label %1425

1410:                                             ; preds = %1405
  %1411 = load i8, i8* %150, align 8, !range !3
  %1412 = icmp eq i8 %1411, 0
  br i1 %1412, label %1425, label %1413, !prof !2

1413:                                             ; preds = %1410
  %1414 = load i32, i32* %151, align 8
  %1415 = add nsw i32 %1414, 1
  store i32 %1415, i32* %151, align 8
  %1416 = load i32, i32* %152, align 8
  %1417 = load i64, i64* %154, align 8
  %1418 = sub i64 %1407, %1417
  %1419 = trunc i64 %1418 to i32
  %1420 = xor i8 %1393, 1
  %1421 = zext i8 %1420 to i32
  %1422 = ashr i32 %1419, %1421
  %1423 = add i32 %1416, 1
  %1424 = add i32 %1423, %1422
  store i32 %1424, i32* %155, align 4
  br label %1425

1425:                                             ; preds = %1413, %1410, %1405
  %1426 = load i8*, i8** %156, align 8
  %1427 = icmp ult i8* %1406, %1426
  br i1 %1427, label %1428, label %1433, !prof !4

1428:                                             ; preds = %1425
  br i1 %1394, label %1431, label %1429

1429:                                             ; preds = %1428
  %1430 = getelementptr inbounds i8, i8* %1406, i64 1
  store i8* %1430, i8** %148, align 8
  br label %1435

1431:                                             ; preds = %1428
  %1432 = getelementptr inbounds i8, i8* %1406, i64 2
  store i8* %1432, i8** %148, align 8
  br label %1435

1433:                                             ; preds = %1425
  %1434 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1435

1435:                                             ; preds = %1429, %1431, %1433
  %1436 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %24) #8
  %1437 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %24, i64 0, i32 3, i32 0, i32 0, i32 0
  %1438 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1437, align 8
  %1439 = icmp eq %"class.WTF::StringImpl"* %1438, null
  br i1 %1439, label %1453, label %1440

1440:                                             ; preds = %1435
  %1441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1438, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1442 = load atomic i32, i32* %1441 monotonic, align 4
  %1443 = and i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1438, i64 0, i32 0
  %1446 = load i32, i32* %1445, align 4
  br i1 %1444, label %1447, label %1449

1447:                                             ; preds = %1440
  %1448 = add i32 %1446, -1
  store i32 %1448, i32* %1445, align 4
  br label %1449

1449:                                             ; preds = %1447, %1440
  %1450 = phi i32 [ %1448, %1447 ], [ %1446, %1440 ]
  %1451 = icmp eq i32 %1450, 0
  br i1 %1451, label %1452, label %1453

1452:                                             ; preds = %1449
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1438) #8
  br label %1453

1453:                                             ; preds = %1452, %1449, %1435
  %1454 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1333, align 8
  %1455 = icmp eq %"class.WTF::StringImpl"* %1454, null
  br i1 %1455, label %1469, label %1456

1456:                                             ; preds = %1453
  %1457 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1454, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1458 = load atomic i32, i32* %1457 monotonic, align 4
  %1459 = and i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  %1461 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1454, i64 0, i32 0
  %1462 = load i32, i32* %1461, align 4
  br i1 %1460, label %1463, label %1465

1463:                                             ; preds = %1456
  %1464 = add i32 %1462, -1
  store i32 %1464, i32* %1461, align 4
  br label %1465

1465:                                             ; preds = %1463, %1456
  %1466 = phi i32 [ %1464, %1463 ], [ %1462, %1456 ]
  %1467 = icmp eq i32 %1466, 0
  br i1 %1467, label %1468, label %1469

1468:                                             ; preds = %1465
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1454) #8
  br label %1469

1469:                                             ; preds = %1468, %1465, %1453
  %1470 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1313, align 8
  %1471 = icmp eq %"class.WTF::StringImpl"* %1470, null
  br i1 %1471, label %1485, label %1472

1472:                                             ; preds = %1469
  %1473 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1470, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1474 = load atomic i32, i32* %1473 monotonic, align 4
  %1475 = and i32 %1474, 2
  %1476 = icmp eq i32 %1475, 0
  %1477 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1470, i64 0, i32 0
  %1478 = load i32, i32* %1477, align 4
  br i1 %1476, label %1479, label %1481

1479:                                             ; preds = %1472
  %1480 = add i32 %1478, -1
  store i32 %1480, i32* %1477, align 4
  br label %1481

1481:                                             ; preds = %1479, %1472
  %1482 = phi i32 [ %1480, %1479 ], [ %1478, %1472 ]
  %1483 = icmp eq i32 %1482, 0
  br i1 %1483, label %1484, label %1485

1484:                                             ; preds = %1481
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1470) #8
  br label %1485

1485:                                             ; preds = %1469, %1481, %1484
  br i1 %1314, label %2840, label %1486

1486:                                             ; preds = %1485
  %1487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1310, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1488 = load atomic i32, i32* %1487 monotonic, align 4
  %1489 = and i32 %1488, 2
  %1490 = icmp eq i32 %1489, 0
  %1491 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1310, i64 0, i32 0
  %1492 = load i32, i32* %1491, align 4
  br i1 %1490, label %1493, label %1495

1493:                                             ; preds = %1486
  %1494 = add i32 %1492, -1
  store i32 %1494, i32* %1491, align 4
  br label %1495

1495:                                             ; preds = %1493, %1486
  %1496 = phi i32 [ %1494, %1493 ], [ %1492, %1486 ]
  %1497 = icmp eq i32 %1496, 0
  br i1 %1497, label %1498, label %2840

1498:                                             ; preds = %1495
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1310) #8
  br label %2840

1499:                                             ; preds = %1188
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1187)
  store i16 %1189, i16* %11, align 2
  %1500 = load i8, i8* %139, align 4, !range !3
  %1501 = icmp ne i8 %1500, 0
  %1502 = icmp ult i16 %1189, 256
  %1503 = and i1 %1502, %1501
  br i1 %1503, label %1504, label %1506

1504:                                             ; preds = %1499
  %1505 = trunc i16 %1189 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %1505) #8
  br label %1525

1506:                                             ; preds = %1499
  %1507 = load i8, i8* %140, align 1
  %1508 = icmp eq i8 %1507, 0
  %1509 = or i1 %1501, %1508
  br i1 %1509, label %1510, label %1511

1510:                                             ; preds = %1506
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %1511

1511:                                             ; preds = %1506, %1510
  %1512 = load i32, i32* %163, align 4
  %1513 = load i32, i32* %164, align 8
  %1514 = icmp eq i32 %1512, %1513
  br i1 %1514, label %1521, label %1515, !prof !2

1515:                                             ; preds = %1511
  %1516 = load i16*, i16** %165, align 8
  %1517 = zext i32 %1512 to i64
  %1518 = getelementptr inbounds i16, i16* %1516, i64 %1517
  store i16 %1189, i16* %1518, align 2
  %1519 = load i32, i32* %163, align 4
  %1520 = add i32 %1519, 1
  store i32 %1520, i32* %163, align 4
  br label %1522

1521:                                             ; preds = %1511
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %11) #8
  br label %1522

1522:                                             ; preds = %1521, %1515
  %1523 = load i32, i32* %138, align 8
  %1524 = add i32 %1523, 1
  store i32 %1524, i32* %138, align 8
  br label %1525

1525:                                             ; preds = %1504, %1522
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1187)
  %1526 = load i8, i8* %36, align 1, !range !3
  %1527 = icmp eq i8 %1526, 0
  br i1 %1527, label %1533, label %1528

1528:                                             ; preds = %1525
  %1529 = load i8*, i8** %148, align 8
  %1530 = load i8, i8* %1529, align 1
  %1531 = zext i8 %1530 to i16
  %1532 = ptrtoint i8* %1529 to i64
  br label %1538

1533:                                             ; preds = %1525
  %1534 = load i16*, i16** %149, align 8
  %1535 = load i16, i16* %1534, align 2
  %1536 = ptrtoint i16* %1534 to i64
  %1537 = bitcast i16* %1534 to i8*
  br label %1538

1538:                                             ; preds = %1533, %1528
  %1539 = phi i8* [ %1529, %1528 ], [ %1537, %1533 ]
  %1540 = phi i64 [ %1532, %1528 ], [ %1536, %1533 ]
  %1541 = phi i16 [ %1531, %1528 ], [ %1535, %1533 ]
  %1542 = icmp eq i16 %1541, 10
  br i1 %1542, label %1543, label %1558

1543:                                             ; preds = %1538
  %1544 = load i8, i8* %150, align 8, !range !3
  %1545 = icmp eq i8 %1544, 0
  br i1 %1545, label %1558, label %1546, !prof !2

1546:                                             ; preds = %1543
  %1547 = load i32, i32* %151, align 8
  %1548 = add nsw i32 %1547, 1
  store i32 %1548, i32* %151, align 8
  %1549 = load i32, i32* %152, align 8
  %1550 = load i64, i64* %154, align 8
  %1551 = sub i64 %1540, %1550
  %1552 = trunc i64 %1551 to i32
  %1553 = xor i8 %1526, 1
  %1554 = zext i8 %1553 to i32
  %1555 = ashr i32 %1552, %1554
  %1556 = add i32 %1549, 1
  %1557 = add i32 %1556, %1555
  store i32 %1557, i32* %155, align 4
  br label %1558

1558:                                             ; preds = %1546, %1543, %1538
  %1559 = load i8*, i8** %156, align 8
  %1560 = icmp ult i8* %1539, %1559
  br i1 %1560, label %1561, label %1570, !prof !4

1561:                                             ; preds = %1558
  br i1 %1527, label %1566, label %1562

1562:                                             ; preds = %1561
  %1563 = getelementptr inbounds i8, i8* %1539, i64 1
  store i8* %1563, i8** %148, align 8
  %1564 = load i8, i8* %1563, align 1
  %1565 = zext i8 %1564 to i16
  br label %1572

1566:                                             ; preds = %1561
  %1567 = getelementptr inbounds i8, i8* %1539, i64 2
  %1568 = bitcast i8* %1567 to i16*
  store i8* %1567, i8** %148, align 8
  %1569 = load i16, i16* %1568, align 2
  br label %1572

1570:                                             ; preds = %1558
  %1571 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1572

1572:                                             ; preds = %1570, %1566, %1562
  %1573 = phi i16 [ %1571, %1570 ], [ %1565, %1562 ], [ %1569, %1566 ]
  store i16 %1573, i16* %17, align 2
  %1574 = icmp ugt i16 %1573, 15
  br i1 %1574, label %1575, label %1577

1575:                                             ; preds = %1572
  store i8 0, i8* %157, align 8
  br label %1576

1576:                                             ; preds = %1575, %1577, %1580
  br label %1188

1577:                                             ; preds = %1572
  %1578 = load i8, i8* %31, align 1, !range !3
  %1579 = icmp eq i8 %1578, 0
  br i1 %1579, label %1580, label %1576

1580:                                             ; preds = %1577
  %1581 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1576

1582:                                             ; preds = %1995, %1302
  %1583 = load i16, i16* %17, align 2
  switch i16 %1583, label %1913 [
    i16 32, label %1584
    i16 10, label %1584
    i16 9, label %1584
    i16 12, label %1584
    i16 46, label %1655
    i16 62, label %1715
    i16 0, label %1715
  ]

1584:                                             ; preds = %1582, %1582, %1582, %1582
  %1585 = load i32, i32* %145, align 8
  %1586 = icmp eq i32 %1585, 0
  br i1 %1586, label %1588, label %1587

1587:                                             ; preds = %1584
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %20, i8 zeroext 32) #8
  br label %1588

1588:                                             ; preds = %1584, %1587
  call void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"* nonnull %20, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %18) #8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %18) #8
  %1589 = load i8, i8* %36, align 1, !range !3
  %1590 = icmp eq i8 %1589, 0
  br i1 %1590, label %1596, label %1591

1591:                                             ; preds = %1588
  %1592 = load i8*, i8** %148, align 8
  %1593 = load i8, i8* %1592, align 1
  %1594 = zext i8 %1593 to i16
  %1595 = ptrtoint i8* %1592 to i64
  br label %1601

1596:                                             ; preds = %1588
  %1597 = load i16*, i16** %149, align 8
  %1598 = load i16, i16* %1597, align 2
  %1599 = ptrtoint i16* %1597 to i64
  %1600 = bitcast i16* %1597 to i8*
  br label %1601

1601:                                             ; preds = %1596, %1591
  %1602 = phi i8* [ %1592, %1591 ], [ %1600, %1596 ]
  %1603 = phi i64 [ %1595, %1591 ], [ %1599, %1596 ]
  %1604 = phi i16 [ %1594, %1591 ], [ %1598, %1596 ]
  %1605 = icmp eq i16 %1604, 10
  br i1 %1605, label %1606, label %1621

1606:                                             ; preds = %1601
  %1607 = load i8, i8* %150, align 8, !range !3
  %1608 = icmp eq i8 %1607, 0
  br i1 %1608, label %1621, label %1609, !prof !2

1609:                                             ; preds = %1606
  %1610 = load i32, i32* %151, align 8
  %1611 = add nsw i32 %1610, 1
  store i32 %1611, i32* %151, align 8
  %1612 = load i32, i32* %152, align 8
  %1613 = load i64, i64* %154, align 8
  %1614 = sub i64 %1603, %1613
  %1615 = trunc i64 %1614 to i32
  %1616 = xor i8 %1589, 1
  %1617 = zext i8 %1616 to i32
  %1618 = ashr i32 %1615, %1617
  %1619 = add i32 %1612, 1
  %1620 = add i32 %1619, %1618
  store i32 %1620, i32* %155, align 4
  br label %1621

1621:                                             ; preds = %1609, %1606, %1601
  %1622 = load i8*, i8** %156, align 8
  %1623 = icmp ult i8* %1602, %1622
  br i1 %1623, label %1624, label %1633, !prof !4

1624:                                             ; preds = %1621
  br i1 %1590, label %1629, label %1625

1625:                                             ; preds = %1624
  %1626 = getelementptr inbounds i8, i8* %1602, i64 1
  store i8* %1626, i8** %148, align 8
  %1627 = load i8, i8* %1626, align 1
  %1628 = zext i8 %1627 to i16
  br label %1635

1629:                                             ; preds = %1624
  %1630 = getelementptr inbounds i8, i8* %1602, i64 2
  %1631 = bitcast i8* %1630 to i16*
  store i8* %1630, i8** %148, align 8
  %1632 = load i16, i16* %1631, align 2
  br label %1635

1633:                                             ; preds = %1621
  %1634 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1635

1635:                                             ; preds = %1633, %1629, %1625
  %1636 = phi i16 [ %1634, %1633 ], [ %1628, %1625 ], [ %1632, %1629 ]
  store i16 %1636, i16* %17, align 2
  %1637 = icmp ugt i16 %1636, 15
  br i1 %1637, label %1638, label %1639

1638:                                             ; preds = %1635
  store i8 0, i8* %157, align 8
  br label %1644

1639:                                             ; preds = %1635
  %1640 = load i8, i8* %31, align 1, !range !3
  %1641 = icmp eq i8 %1640, 0
  br i1 %1641, label %1642, label %1644

1642:                                             ; preds = %1639
  %1643 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1644

1644:                                             ; preds = %1642, %1639, %1638, %1244, %1241, %1240, %710, %707, %706
  %1645 = bitcast %"class.blink::DecodedHTMLEntity"* %9 to i8*
  %1646 = getelementptr inbounds %"class.blink::DecodedHTMLEntity", %"class.blink::DecodedHTMLEntity"* %9, i64 0, i32 0
  %1647 = getelementptr inbounds %"class.blink::DecodedHTMLEntity", %"class.blink::DecodedHTMLEntity"* %9, i64 0, i32 1
  %1648 = bitcast [4 x i16]* %1647 to i64*
  %1649 = bitcast i16* %3 to i8*
  %1650 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %1651 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %1652 = bitcast %union.anon.1* %129 to i16**
  %1653 = bitcast %union.anon.1* %129 to %"class.WTF::Vector.6"*
  %1654 = bitcast i16* %7 to i8*
  br label %1996

1655:                                             ; preds = %1582
  %1656 = load i32, i32* %145, align 8
  %1657 = icmp eq i32 %1656, 0
  br i1 %1657, label %1659, label %1658

1658:                                             ; preds = %1655
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %20, i8 zeroext 32) #8
  br label %1659

1659:                                             ; preds = %1655, %1658
  call void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"* nonnull %20, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %18) #8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %18) #8
  %1660 = load i8, i8* %36, align 1, !range !3
  %1661 = icmp eq i8 %1660, 0
  br i1 %1661, label %1667, label %1662

1662:                                             ; preds = %1659
  %1663 = load i8*, i8** %148, align 8
  %1664 = load i8, i8* %1663, align 1
  %1665 = zext i8 %1664 to i16
  %1666 = ptrtoint i8* %1663 to i64
  br label %1672

1667:                                             ; preds = %1659
  %1668 = load i16*, i16** %149, align 8
  %1669 = load i16, i16* %1668, align 2
  %1670 = ptrtoint i16* %1668 to i64
  %1671 = bitcast i16* %1668 to i8*
  br label %1672

1672:                                             ; preds = %1667, %1662
  %1673 = phi i8* [ %1663, %1662 ], [ %1671, %1667 ]
  %1674 = phi i64 [ %1666, %1662 ], [ %1670, %1667 ]
  %1675 = phi i16 [ %1665, %1662 ], [ %1669, %1667 ]
  %1676 = icmp eq i16 %1675, 10
  br i1 %1676, label %1677, label %1692

1677:                                             ; preds = %1672
  %1678 = load i8, i8* %150, align 8, !range !3
  %1679 = icmp eq i8 %1678, 0
  br i1 %1679, label %1692, label %1680, !prof !2

1680:                                             ; preds = %1677
  %1681 = load i32, i32* %151, align 8
  %1682 = add nsw i32 %1681, 1
  store i32 %1682, i32* %151, align 8
  %1683 = load i32, i32* %152, align 8
  %1684 = load i64, i64* %154, align 8
  %1685 = sub i64 %1674, %1684
  %1686 = trunc i64 %1685 to i32
  %1687 = xor i8 %1660, 1
  %1688 = zext i8 %1687 to i32
  %1689 = ashr i32 %1686, %1688
  %1690 = add i32 %1683, 1
  %1691 = add i32 %1690, %1689
  store i32 %1691, i32* %155, align 4
  br label %1692

1692:                                             ; preds = %1680, %1677, %1672
  %1693 = load i8*, i8** %156, align 8
  %1694 = icmp ult i8* %1673, %1693
  br i1 %1694, label %1695, label %1704, !prof !4

1695:                                             ; preds = %1692
  br i1 %1661, label %1700, label %1696

1696:                                             ; preds = %1695
  %1697 = getelementptr inbounds i8, i8* %1673, i64 1
  store i8* %1697, i8** %148, align 8
  %1698 = load i8, i8* %1697, align 1
  %1699 = zext i8 %1698 to i16
  br label %1706

1700:                                             ; preds = %1695
  %1701 = getelementptr inbounds i8, i8* %1673, i64 2
  %1702 = bitcast i8* %1701 to i16*
  store i8* %1701, i8** %148, align 8
  %1703 = load i16, i16* %1702, align 2
  br label %1706

1704:                                             ; preds = %1692
  %1705 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1706

1706:                                             ; preds = %1704, %1700, %1696
  %1707 = phi i16 [ %1705, %1704 ], [ %1699, %1696 ], [ %1703, %1700 ]
  store i16 %1707, i16* %17, align 2
  %1708 = icmp ugt i16 %1707, 15
  br i1 %1708, label %1709, label %1710

1709:                                             ; preds = %1706
  store i8 0, i8* %157, align 8
  br label %1995

1710:                                             ; preds = %1706
  %1711 = load i8, i8* %31, align 1, !range !3
  %1712 = icmp eq i8 %1711, 0
  br i1 %1712, label %1713, label %1995

1713:                                             ; preds = %1710
  %1714 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1995

1715:                                             ; preds = %1582, %1582
  %1716 = load i32, i32* %145, align 8
  %1717 = icmp eq i32 %1716, 0
  br i1 %1717, label %1719, label %1718

1718:                                             ; preds = %1715
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %20, i8 zeroext 32) #8
  br label %1719

1719:                                             ; preds = %1715, %1718
  call void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"* nonnull %20, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %18) #8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %18) #8
  %1720 = bitcast %"class.blink::VTTToken"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1720) #8
  %1721 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %1722 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder14ToAtomicStringEv(%"class.WTF::StringBuilder"* nonnull %20) #8
  %1723 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1720, i8 -86, i64 32, i1 false) #8, !alias.scope !17
  %1724 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %25, i64 0, i32 0
  store i32 2, i32* %1724, align 8, !alias.scope !17
  %1725 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %25, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1721, %"class.WTF::StringImpl"** %1725, align 8, !alias.scope !17
  %1726 = icmp eq %"class.WTF::StringImpl"* %1721, null
  br i1 %1726, label %1744, label %1727

1727:                                             ; preds = %1719
  %1728 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1721, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1729 = load atomic i32, i32* %1728 monotonic, align 4, !noalias !17
  %1730 = and i32 %1729, 2
  %1731 = icmp eq i32 %1730, 0
  br i1 %1731, label %1732, label %1744

1732:                                             ; preds = %1727
  %1733 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1721, i64 0, i32 0
  %1734 = load i32, i32* %1733, align 4, !noalias !17
  %1735 = zext i32 %1734 to i33
  %1736 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1735, i33 1) #8
  %1737 = extractvalue { i33, i1 } %1736, 1
  %1738 = extractvalue { i33, i1 } %1736, 0
  %1739 = icmp slt i33 %1738, 0
  %1740 = or i1 %1737, %1739
  br i1 %1740, label %1741, label %1742, !prof !2

1741:                                             ; preds = %1732
  call void @llvm.trap() #8, !noalias !17
  unreachable

1742:                                             ; preds = %1732
  %1743 = trunc i33 %1738 to i32
  store i32 %1743, i32* %1733, align 4, !noalias !17
  br label %1744

1744:                                             ; preds = %1742, %1727, %1719
  %1745 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %25, i64 0, i32 2, i32 0, i32 0, i32 0
  %1746 = bitcast %"class.WTF::StringImpl"** %1745 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1746, i8 0, i64 16, i1 false) #8, !alias.scope !17
  %1747 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %25, i64 0, i32 3
  %1748 = icmp eq %"class.WTF::StringImpl"* %1722, null
  br i1 %1748, label %1766, label %1749

1749:                                             ; preds = %1744
  %1750 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1722, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1751 = load atomic i32, i32* %1750 monotonic, align 4, !noalias !17
  %1752 = and i32 %1751, 2
  %1753 = icmp eq i32 %1752, 0
  br i1 %1753, label %1754, label %1766

1754:                                             ; preds = %1749
  %1755 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1722, i64 0, i32 0
  %1756 = load i32, i32* %1755, align 4, !noalias !17
  %1757 = zext i32 %1756 to i33
  %1758 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1757, i33 1) #8
  %1759 = extractvalue { i33, i1 } %1758, 1
  %1760 = extractvalue { i33, i1 } %1758, 0
  %1761 = icmp slt i33 %1760, 0
  %1762 = or i1 %1759, %1761
  br i1 %1762, label %1763, label %1764, !prof !2

1763:                                             ; preds = %1754
  call void @llvm.trap() #8, !noalias !17
  unreachable

1764:                                             ; preds = %1754
  %1765 = trunc i33 %1760 to i32
  store i32 %1765, i32* %1755, align 4, !noalias !17
  br label %1766

1766:                                             ; preds = %1764, %1749, %1744
  %1767 = ptrtoint %"class.WTF::StringImpl"* %1722 to i64
  %1768 = bitcast %"class.WTF::AtomicString"* %1747 to i64*
  store i64 %1767, i64* %1768, align 8, !alias.scope !17
  %1769 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %25, i64 0, i32 2
  %1770 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1723, i64 0, i32 0, i32 0, i32 0
  %1771 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1770, align 8, !noalias !17
  %1772 = icmp eq %"class.WTF::StringImpl"* %1771, null
  br i1 %1772, label %1790, label %1773

1773:                                             ; preds = %1766
  %1774 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1771, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1775 = load atomic i32, i32* %1774 monotonic, align 4, !noalias !17
  %1776 = and i32 %1775, 2
  %1777 = icmp eq i32 %1776, 0
  br i1 %1777, label %1778, label %1790

1778:                                             ; preds = %1773
  %1779 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1771, i64 0, i32 0
  %1780 = load i32, i32* %1779, align 4, !noalias !17
  %1781 = zext i32 %1780 to i33
  %1782 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1781, i33 1) #8
  %1783 = extractvalue { i33, i1 } %1782, 1
  %1784 = extractvalue { i33, i1 } %1782, 0
  %1785 = icmp slt i33 %1784, 0
  %1786 = or i1 %1783, %1785
  br i1 %1786, label %1787, label %1788, !prof !2

1787:                                             ; preds = %1778
  call void @llvm.trap() #8, !noalias !17
  unreachable

1788:                                             ; preds = %1778
  %1789 = trunc i33 %1784 to i32
  store i32 %1789, i32* %1779, align 4, !noalias !17
  br label %1790

1790:                                             ; preds = %1766, %1773, %1788
  %1791 = ptrtoint %"class.WTF::StringImpl"* %1771 to i64
  %1792 = bitcast %"class.WTF::AtomicString"* %1769 to i64*
  store i64 %1791, i64* %1792, align 8, !alias.scope !17
  %1793 = load i8, i8* %36, align 1, !range !3
  %1794 = icmp eq i8 %1793, 0
  br i1 %1794, label %1800, label %1795

1795:                                             ; preds = %1790
  %1796 = load i8*, i8** %148, align 8
  %1797 = load i8, i8* %1796, align 1
  %1798 = zext i8 %1797 to i16
  %1799 = ptrtoint i8* %1796 to i64
  br label %1805

1800:                                             ; preds = %1790
  %1801 = load i16*, i16** %149, align 8
  %1802 = load i16, i16* %1801, align 2
  %1803 = ptrtoint i16* %1801 to i64
  %1804 = bitcast i16* %1801 to i8*
  br label %1805

1805:                                             ; preds = %1800, %1795
  %1806 = phi i8* [ %1796, %1795 ], [ %1804, %1800 ]
  %1807 = phi i64 [ %1799, %1795 ], [ %1803, %1800 ]
  %1808 = phi i16 [ %1798, %1795 ], [ %1802, %1800 ]
  %1809 = icmp eq i16 %1808, 10
  br i1 %1809, label %1810, label %1825

1810:                                             ; preds = %1805
  %1811 = load i8, i8* %150, align 8, !range !3
  %1812 = icmp eq i8 %1811, 0
  br i1 %1812, label %1825, label %1813, !prof !2

1813:                                             ; preds = %1810
  %1814 = load i32, i32* %151, align 8
  %1815 = add nsw i32 %1814, 1
  store i32 %1815, i32* %151, align 8
  %1816 = load i32, i32* %152, align 8
  %1817 = load i64, i64* %154, align 8
  %1818 = sub i64 %1807, %1817
  %1819 = trunc i64 %1818 to i32
  %1820 = xor i8 %1793, 1
  %1821 = zext i8 %1820 to i32
  %1822 = ashr i32 %1819, %1821
  %1823 = add i32 %1816, 1
  %1824 = add i32 %1823, %1822
  store i32 %1824, i32* %155, align 4
  br label %1825

1825:                                             ; preds = %1813, %1810, %1805
  %1826 = load i8*, i8** %156, align 8
  %1827 = icmp ult i8* %1806, %1826
  br i1 %1827, label %1828, label %1833, !prof !4

1828:                                             ; preds = %1825
  br i1 %1794, label %1831, label %1829

1829:                                             ; preds = %1828
  %1830 = getelementptr inbounds i8, i8* %1806, i64 1
  store i8* %1830, i8** %148, align 8
  br label %1835

1831:                                             ; preds = %1828
  %1832 = getelementptr inbounds i8, i8* %1806, i64 2
  store i8* %1832, i8** %148, align 8
  br label %1835

1833:                                             ; preds = %1825
  %1834 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1835

1835:                                             ; preds = %1829, %1831, %1833
  %1836 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %25) #8
  %1837 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %25, i64 0, i32 3, i32 0, i32 0, i32 0
  %1838 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1837, align 8
  %1839 = icmp eq %"class.WTF::StringImpl"* %1838, null
  br i1 %1839, label %1853, label %1840

1840:                                             ; preds = %1835
  %1841 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1838, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1842 = load atomic i32, i32* %1841 monotonic, align 4
  %1843 = and i32 %1842, 2
  %1844 = icmp eq i32 %1843, 0
  %1845 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1838, i64 0, i32 0
  %1846 = load i32, i32* %1845, align 4
  br i1 %1844, label %1847, label %1849

1847:                                             ; preds = %1840
  %1848 = add i32 %1846, -1
  store i32 %1848, i32* %1845, align 4
  br label %1849

1849:                                             ; preds = %1847, %1840
  %1850 = phi i32 [ %1848, %1847 ], [ %1846, %1840 ]
  %1851 = icmp eq i32 %1850, 0
  br i1 %1851, label %1852, label %1853

1852:                                             ; preds = %1849
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1838) #8
  br label %1853

1853:                                             ; preds = %1852, %1849, %1835
  %1854 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1745, align 8
  %1855 = icmp eq %"class.WTF::StringImpl"* %1854, null
  br i1 %1855, label %1869, label %1856

1856:                                             ; preds = %1853
  %1857 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1854, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1858 = load atomic i32, i32* %1857 monotonic, align 4
  %1859 = and i32 %1858, 2
  %1860 = icmp eq i32 %1859, 0
  %1861 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1854, i64 0, i32 0
  %1862 = load i32, i32* %1861, align 4
  br i1 %1860, label %1863, label %1865

1863:                                             ; preds = %1856
  %1864 = add i32 %1862, -1
  store i32 %1864, i32* %1861, align 4
  br label %1865

1865:                                             ; preds = %1863, %1856
  %1866 = phi i32 [ %1864, %1863 ], [ %1862, %1856 ]
  %1867 = icmp eq i32 %1866, 0
  br i1 %1867, label %1868, label %1869

1868:                                             ; preds = %1865
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1854) #8
  br label %1869

1869:                                             ; preds = %1868, %1865, %1853
  %1870 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1725, align 8
  %1871 = icmp eq %"class.WTF::StringImpl"* %1870, null
  br i1 %1871, label %1885, label %1872

1872:                                             ; preds = %1869
  %1873 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1870, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1874 = load atomic i32, i32* %1873 monotonic, align 4
  %1875 = and i32 %1874, 2
  %1876 = icmp eq i32 %1875, 0
  %1877 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1870, i64 0, i32 0
  %1878 = load i32, i32* %1877, align 4
  br i1 %1876, label %1879, label %1881

1879:                                             ; preds = %1872
  %1880 = add i32 %1878, -1
  store i32 %1880, i32* %1877, align 4
  br label %1881

1881:                                             ; preds = %1879, %1872
  %1882 = phi i32 [ %1880, %1879 ], [ %1878, %1872 ]
  %1883 = icmp eq i32 %1882, 0
  br i1 %1883, label %1884, label %1885

1884:                                             ; preds = %1881
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1870) #8
  br label %1885

1885:                                             ; preds = %1869, %1881, %1884
  br i1 %1748, label %1899, label %1886

1886:                                             ; preds = %1885
  %1887 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1722, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1888 = load atomic i32, i32* %1887 monotonic, align 4
  %1889 = and i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1722, i64 0, i32 0
  %1892 = load i32, i32* %1891, align 4
  br i1 %1890, label %1893, label %1895

1893:                                             ; preds = %1886
  %1894 = add i32 %1892, -1
  store i32 %1894, i32* %1891, align 4
  br label %1895

1895:                                             ; preds = %1893, %1886
  %1896 = phi i32 [ %1894, %1893 ], [ %1892, %1886 ]
  %1897 = icmp eq i32 %1896, 0
  br i1 %1897, label %1898, label %1899

1898:                                             ; preds = %1895
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1722) #8
  br label %1899

1899:                                             ; preds = %1885, %1895, %1898
  br i1 %1726, label %2840, label %1900

1900:                                             ; preds = %1899
  %1901 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1721, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1902 = load atomic i32, i32* %1901 monotonic, align 4
  %1903 = and i32 %1902, 2
  %1904 = icmp eq i32 %1903, 0
  %1905 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1721, i64 0, i32 0
  %1906 = load i32, i32* %1905, align 4
  br i1 %1904, label %1907, label %1909

1907:                                             ; preds = %1900
  %1908 = add i32 %1906, -1
  store i32 %1908, i32* %1905, align 4
  br label %1909

1909:                                             ; preds = %1907, %1900
  %1910 = phi i32 [ %1908, %1907 ], [ %1906, %1900 ]
  %1911 = icmp eq i32 %1910, 0
  br i1 %1911, label %1912, label %2840

1912:                                             ; preds = %1909
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1721) #8
  br label %2840

1913:                                             ; preds = %1582
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1303)
  store i16 %1583, i16* %10, align 2
  %1914 = load i8, i8* %132, align 4, !range !3
  %1915 = icmp ne i8 %1914, 0
  %1916 = icmp ult i16 %1583, 256
  %1917 = and i1 %1916, %1915
  br i1 %1917, label %1918, label %1920

1918:                                             ; preds = %1913
  %1919 = trunc i16 %1583 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %18, i8 zeroext %1919) #8
  br label %1939

1920:                                             ; preds = %1913
  %1921 = load i8, i8* %133, align 1
  %1922 = icmp eq i8 %1921, 0
  %1923 = or i1 %1915, %1922
  br i1 %1923, label %1924, label %1925

1924:                                             ; preds = %1920
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %18, i32 1) #8
  br label %1925

1925:                                             ; preds = %1920, %1924
  %1926 = load i32, i32* %1304, align 4
  %1927 = load i32, i32* %1305, align 8
  %1928 = icmp eq i32 %1926, %1927
  br i1 %1928, label %1935, label %1929, !prof !2

1929:                                             ; preds = %1925
  %1930 = load i16*, i16** %1306, align 8
  %1931 = zext i32 %1926 to i64
  %1932 = getelementptr inbounds i16, i16* %1930, i64 %1931
  store i16 %1583, i16* %1932, align 2
  %1933 = load i32, i32* %1304, align 4
  %1934 = add i32 %1933, 1
  store i32 %1934, i32* %1304, align 4
  br label %1936

1935:                                             ; preds = %1925
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %1307, i16* nonnull dereferenceable(2) %10) #8
  br label %1936

1936:                                             ; preds = %1935, %1929
  %1937 = load i32, i32* %131, align 8
  %1938 = add i32 %1937, 1
  store i32 %1938, i32* %131, align 8
  br label %1939

1939:                                             ; preds = %1918, %1936
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1303)
  %1940 = load i8, i8* %36, align 1, !range !3
  %1941 = icmp eq i8 %1940, 0
  br i1 %1941, label %1947, label %1942

1942:                                             ; preds = %1939
  %1943 = load i8*, i8** %148, align 8
  %1944 = load i8, i8* %1943, align 1
  %1945 = zext i8 %1944 to i16
  %1946 = ptrtoint i8* %1943 to i64
  br label %1952

1947:                                             ; preds = %1939
  %1948 = load i16*, i16** %149, align 8
  %1949 = load i16, i16* %1948, align 2
  %1950 = ptrtoint i16* %1948 to i64
  %1951 = bitcast i16* %1948 to i8*
  br label %1952

1952:                                             ; preds = %1947, %1942
  %1953 = phi i8* [ %1943, %1942 ], [ %1951, %1947 ]
  %1954 = phi i64 [ %1946, %1942 ], [ %1950, %1947 ]
  %1955 = phi i16 [ %1945, %1942 ], [ %1949, %1947 ]
  %1956 = icmp eq i16 %1955, 10
  br i1 %1956, label %1957, label %1972

1957:                                             ; preds = %1952
  %1958 = load i8, i8* %150, align 8, !range !3
  %1959 = icmp eq i8 %1958, 0
  br i1 %1959, label %1972, label %1960, !prof !2

1960:                                             ; preds = %1957
  %1961 = load i32, i32* %151, align 8
  %1962 = add nsw i32 %1961, 1
  store i32 %1962, i32* %151, align 8
  %1963 = load i32, i32* %152, align 8
  %1964 = load i64, i64* %154, align 8
  %1965 = sub i64 %1954, %1964
  %1966 = trunc i64 %1965 to i32
  %1967 = xor i8 %1940, 1
  %1968 = zext i8 %1967 to i32
  %1969 = ashr i32 %1966, %1968
  %1970 = add i32 %1963, 1
  %1971 = add i32 %1970, %1969
  store i32 %1971, i32* %155, align 4
  br label %1972

1972:                                             ; preds = %1960, %1957, %1952
  %1973 = load i8*, i8** %156, align 8
  %1974 = icmp ult i8* %1953, %1973
  br i1 %1974, label %1975, label %1984, !prof !4

1975:                                             ; preds = %1972
  br i1 %1941, label %1980, label %1976

1976:                                             ; preds = %1975
  %1977 = getelementptr inbounds i8, i8* %1953, i64 1
  store i8* %1977, i8** %148, align 8
  %1978 = load i8, i8* %1977, align 1
  %1979 = zext i8 %1978 to i16
  br label %1986

1980:                                             ; preds = %1975
  %1981 = getelementptr inbounds i8, i8* %1953, i64 2
  %1982 = bitcast i8* %1981 to i16*
  store i8* %1981, i8** %148, align 8
  %1983 = load i16, i16* %1982, align 2
  br label %1986

1984:                                             ; preds = %1972
  %1985 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %1986

1986:                                             ; preds = %1984, %1980, %1976
  %1987 = phi i16 [ %1985, %1984 ], [ %1979, %1976 ], [ %1983, %1980 ]
  store i16 %1987, i16* %17, align 2
  %1988 = icmp ugt i16 %1987, 15
  br i1 %1988, label %1989, label %1990

1989:                                             ; preds = %1986
  store i8 0, i8* %157, align 8
  br label %1995

1990:                                             ; preds = %1986
  %1991 = load i8, i8* %31, align 1, !range !3
  %1992 = icmp eq i8 %1991, 0
  br i1 %1992, label %1993, label %1995

1993:                                             ; preds = %1990
  %1994 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %1995

1995:                                             ; preds = %1993, %1990, %1989, %1713, %1710, %1709
  br label %1582

1996:                                             ; preds = %2405, %1644
  %1997 = load i16, i16* %17, align 2
  switch i16 %1997, label %2323 [
    i16 38, label %1998
    i16 62, label %2117
    i16 0, label %2117
  ]

1998:                                             ; preds = %1996
  %1999 = load i8, i8* %36, align 1, !range !3
  %2000 = icmp eq i8 %1999, 0
  br i1 %2000, label %2006, label %2001

2001:                                             ; preds = %1998
  %2002 = load i8*, i8** %148, align 8
  %2003 = load i8, i8* %2002, align 1
  %2004 = zext i8 %2003 to i16
  %2005 = ptrtoint i8* %2002 to i64
  br label %2011

2006:                                             ; preds = %1998
  %2007 = load i16*, i16** %149, align 8
  %2008 = load i16, i16* %2007, align 2
  %2009 = ptrtoint i16* %2007 to i64
  %2010 = bitcast i16* %2007 to i8*
  br label %2011

2011:                                             ; preds = %2006, %2001
  %2012 = phi i8* [ %2002, %2001 ], [ %2010, %2006 ]
  %2013 = phi i64 [ %2005, %2001 ], [ %2009, %2006 ]
  %2014 = phi i16 [ %2004, %2001 ], [ %2008, %2006 ]
  %2015 = icmp eq i16 %2014, 10
  br i1 %2015, label %2016, label %2031

2016:                                             ; preds = %2011
  %2017 = load i8, i8* %150, align 8, !range !3
  %2018 = icmp eq i8 %2017, 0
  br i1 %2018, label %2031, label %2019, !prof !2

2019:                                             ; preds = %2016
  %2020 = load i32, i32* %151, align 8
  %2021 = add nsw i32 %2020, 1
  store i32 %2021, i32* %151, align 8
  %2022 = load i32, i32* %152, align 8
  %2023 = load i64, i64* %154, align 8
  %2024 = sub i64 %2013, %2023
  %2025 = trunc i64 %2024 to i32
  %2026 = xor i8 %1999, 1
  %2027 = zext i8 %2026 to i32
  %2028 = ashr i32 %2025, %2027
  %2029 = add i32 %2022, 1
  %2030 = add i32 %2029, %2028
  store i32 %2030, i32* %155, align 4
  br label %2031

2031:                                             ; preds = %2019, %2016, %2011
  %2032 = load i8*, i8** %156, align 8
  %2033 = icmp ult i8* %2012, %2032
  br i1 %2033, label %2034, label %2043, !prof !4

2034:                                             ; preds = %2031
  br i1 %2000, label %2039, label %2035

2035:                                             ; preds = %2034
  %2036 = getelementptr inbounds i8, i8* %2012, i64 1
  store i8* %2036, i8** %148, align 8
  %2037 = load i8, i8* %2036, align 1
  %2038 = zext i8 %2037 to i16
  br label %2045

2039:                                             ; preds = %2034
  %2040 = getelementptr inbounds i8, i8* %2012, i64 2
  %2041 = bitcast i8* %2040 to i16*
  store i8* %2040, i8** %148, align 8
  %2042 = load i16, i16* %2041, align 2
  br label %2045

2043:                                             ; preds = %2031
  %2044 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2045

2045:                                             ; preds = %2043, %2039, %2035
  %2046 = phi i16 [ %2044, %2043 ], [ %2038, %2035 ], [ %2042, %2039 ]
  store i16 %2046, i16* %17, align 2
  %2047 = icmp ugt i16 %2046, 15
  br i1 %2047, label %2048, label %2049

2048:                                             ; preds = %2045
  store i8 0, i8* %157, align 8
  br label %2054

2049:                                             ; preds = %2045
  %2050 = load i8, i8* %31, align 1, !range !3
  %2051 = icmp eq i8 %2050, 0
  br i1 %2051, label %2052, label %2054

2052:                                             ; preds = %2049
  %2053 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %2054

2054:                                             ; preds = %2048, %2049, %2052
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #8
  store i8 0, i8* %8, align 1
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1645) #8
  store i64 -6148914691236517206, i64* %1648, align 4
  store i32 0, i32* %1646, align 4
  %2055 = call zeroext i1 @_ZN5blink17ConsumeHTMLEntityERNS_15SegmentedStringERNS_17DecodedHTMLEntityERbDs(%"class.blink::SegmentedString"* dereferenceable(88) %30, %"class.blink::DecodedHTMLEntity"* nonnull dereferenceable(12) %9, i8* nonnull dereferenceable(1) %8, i16 zeroext 62) #8
  %2056 = load i8, i8* %8, align 1, !range !3
  %2057 = icmp eq i8 %2056, 0
  br i1 %2057, label %2059, label %2058

2058:                                             ; preds = %2054
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %18, i8 zeroext 38) #8
  br label %2098

2059:                                             ; preds = %2054
  br i1 %2055, label %2060, label %2063

2060:                                             ; preds = %2059
  %2061 = load i32, i32* %1646, align 4
  %2062 = icmp eq i32 %2061, 0
  br i1 %2062, label %2098, label %2064

2063:                                             ; preds = %2059
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %18, i8 zeroext 38) #8
  br label %2098

2064:                                             ; preds = %2060, %2093
  %2065 = phi i64 [ %2094, %2093 ], [ 0, %2060 ]
  %2066 = getelementptr inbounds %"class.blink::DecodedHTMLEntity", %"class.blink::DecodedHTMLEntity"* %9, i64 0, i32 1, i64 %2065
  %2067 = load i16, i16* %2066, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1649)
  store i16 %2067, i16* %3, align 2
  %2068 = load i8, i8* %132, align 4, !range !3
  %2069 = icmp ne i8 %2068, 0
  %2070 = icmp ult i16 %2067, 256
  %2071 = and i1 %2070, %2069
  br i1 %2071, label %2072, label %2074

2072:                                             ; preds = %2064
  %2073 = trunc i16 %2067 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %18, i8 zeroext %2073) #8
  br label %2093

2074:                                             ; preds = %2064
  %2075 = load i8, i8* %133, align 1
  %2076 = icmp eq i8 %2075, 0
  %2077 = or i1 %2069, %2076
  br i1 %2077, label %2078, label %2079

2078:                                             ; preds = %2074
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %18, i32 1) #8
  br label %2079

2079:                                             ; preds = %2074, %2078
  %2080 = load i32, i32* %1650, align 4
  %2081 = load i32, i32* %1651, align 8
  %2082 = icmp eq i32 %2080, %2081
  br i1 %2082, label %2089, label %2083, !prof !2

2083:                                             ; preds = %2079
  %2084 = load i16*, i16** %1652, align 8
  %2085 = zext i32 %2080 to i64
  %2086 = getelementptr inbounds i16, i16* %2084, i64 %2085
  store i16 %2067, i16* %2086, align 2
  %2087 = load i32, i32* %1650, align 4
  %2088 = add i32 %2087, 1
  store i32 %2088, i32* %1650, align 4
  br label %2090

2089:                                             ; preds = %2079
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %1653, i16* nonnull dereferenceable(2) %3) #8
  br label %2090

2090:                                             ; preds = %2089, %2083
  %2091 = load i32, i32* %131, align 8
  %2092 = add i32 %2091, 1
  store i32 %2092, i32* %131, align 8
  br label %2093

2093:                                             ; preds = %2072, %2090
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1649)
  %2094 = add nuw nsw i64 %2065, 1
  %2095 = load i32, i32* %1646, align 4
  %2096 = zext i32 %2095 to i64
  %2097 = icmp ult i64 %2094, %2096
  br i1 %2097, label %2064, label %2098

2098:                                             ; preds = %2093, %2058, %2060, %2063
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1645) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #8
  %2099 = load i8, i8* %36, align 1, !range !3
  %2100 = icmp eq i8 %2099, 0
  br i1 %2100, label %2105, label %2101

2101:                                             ; preds = %2098
  %2102 = load i8*, i8** %148, align 8
  %2103 = load i8, i8* %2102, align 1
  %2104 = zext i8 %2103 to i16
  br label %2108

2105:                                             ; preds = %2098
  %2106 = load i16*, i16** %149, align 8
  %2107 = load i16, i16* %2106, align 2
  br label %2108

2108:                                             ; preds = %2105, %2101
  %2109 = phi i16 [ %2104, %2101 ], [ %2107, %2105 ]
  store i16 %2109, i16* %17, align 2
  %2110 = icmp ugt i16 %2109, 15
  br i1 %2110, label %2111, label %2112

2111:                                             ; preds = %2108
  store i8 0, i8* %157, align 8
  br label %2405

2112:                                             ; preds = %2108
  %2113 = load i8, i8* %31, align 1, !range !3
  %2114 = icmp eq i8 %2113, 0
  br i1 %2114, label %2115, label %2405

2115:                                             ; preds = %2112
  %2116 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %2405

2117:                                             ; preds = %1996, %1996
  %2118 = bitcast %"class.blink::VTTToken"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2118) #8
  %2119 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %2120 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder14ToAtomicStringEv(%"class.WTF::StringBuilder"* nonnull %20) #8
  %2121 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder14ToAtomicStringEv(%"class.WTF::StringBuilder"* nonnull %18) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2118, i8 -86, i64 32, i1 false) #8, !alias.scope !20
  %2122 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %26, i64 0, i32 0
  store i32 2, i32* %2122, align 8, !alias.scope !20
  %2123 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %26, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2119, %"class.WTF::StringImpl"** %2123, align 8, !alias.scope !20
  %2124 = icmp eq %"class.WTF::StringImpl"* %2119, null
  br i1 %2124, label %2142, label %2125

2125:                                             ; preds = %2117
  %2126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2119, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2127 = load atomic i32, i32* %2126 monotonic, align 4, !noalias !20
  %2128 = and i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  br i1 %2129, label %2130, label %2142

2130:                                             ; preds = %2125
  %2131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2119, i64 0, i32 0
  %2132 = load i32, i32* %2131, align 4, !noalias !20
  %2133 = zext i32 %2132 to i33
  %2134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %2133, i33 1) #8
  %2135 = extractvalue { i33, i1 } %2134, 1
  %2136 = extractvalue { i33, i1 } %2134, 0
  %2137 = icmp slt i33 %2136, 0
  %2138 = or i1 %2135, %2137
  br i1 %2138, label %2139, label %2140, !prof !2

2139:                                             ; preds = %2130
  call void @llvm.trap() #8, !noalias !20
  unreachable

2140:                                             ; preds = %2130
  %2141 = trunc i33 %2136 to i32
  store i32 %2141, i32* %2131, align 4, !noalias !20
  br label %2142

2142:                                             ; preds = %2140, %2125, %2117
  %2143 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %26, i64 0, i32 2, i32 0, i32 0, i32 0
  %2144 = bitcast %"class.WTF::StringImpl"** %2143 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2144, i8 0, i64 16, i1 false) #8, !alias.scope !20
  %2145 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %26, i64 0, i32 3
  %2146 = icmp eq %"class.WTF::StringImpl"* %2120, null
  br i1 %2146, label %2164, label %2147

2147:                                             ; preds = %2142
  %2148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2149 = load atomic i32, i32* %2148 monotonic, align 4, !noalias !20
  %2150 = and i32 %2149, 2
  %2151 = icmp eq i32 %2150, 0
  br i1 %2151, label %2152, label %2164

2152:                                             ; preds = %2147
  %2153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2120, i64 0, i32 0
  %2154 = load i32, i32* %2153, align 4, !noalias !20
  %2155 = zext i32 %2154 to i33
  %2156 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %2155, i33 1) #8
  %2157 = extractvalue { i33, i1 } %2156, 1
  %2158 = extractvalue { i33, i1 } %2156, 0
  %2159 = icmp slt i33 %2158, 0
  %2160 = or i1 %2157, %2159
  br i1 %2160, label %2161, label %2162, !prof !2

2161:                                             ; preds = %2152
  call void @llvm.trap() #8, !noalias !20
  unreachable

2162:                                             ; preds = %2152
  %2163 = trunc i33 %2158 to i32
  store i32 %2163, i32* %2153, align 4, !noalias !20
  br label %2164

2164:                                             ; preds = %2162, %2147, %2142
  %2165 = ptrtoint %"class.WTF::StringImpl"* %2120 to i64
  %2166 = bitcast %"class.WTF::AtomicString"* %2145 to i64*
  store i64 %2165, i64* %2166, align 8, !alias.scope !20
  %2167 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %26, i64 0, i32 2
  %2168 = icmp eq %"class.WTF::StringImpl"* %2121, null
  br i1 %2168, label %2186, label %2169

2169:                                             ; preds = %2164
  %2170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2121, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2171 = load atomic i32, i32* %2170 monotonic, align 4, !noalias !20
  %2172 = and i32 %2171, 2
  %2173 = icmp eq i32 %2172, 0
  br i1 %2173, label %2174, label %2186

2174:                                             ; preds = %2169
  %2175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2121, i64 0, i32 0
  %2176 = load i32, i32* %2175, align 4, !noalias !20
  %2177 = zext i32 %2176 to i33
  %2178 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %2177, i33 1) #8
  %2179 = extractvalue { i33, i1 } %2178, 1
  %2180 = extractvalue { i33, i1 } %2178, 0
  %2181 = icmp slt i33 %2180, 0
  %2182 = or i1 %2179, %2181
  br i1 %2182, label %2183, label %2184, !prof !2

2183:                                             ; preds = %2174
  call void @llvm.trap() #8, !noalias !20
  unreachable

2184:                                             ; preds = %2174
  %2185 = trunc i33 %2180 to i32
  store i32 %2185, i32* %2175, align 4, !noalias !20
  br label %2186

2186:                                             ; preds = %2164, %2169, %2184
  %2187 = ptrtoint %"class.WTF::StringImpl"* %2121 to i64
  %2188 = bitcast %"class.WTF::AtomicString"* %2167 to i64*
  store i64 %2187, i64* %2188, align 8, !alias.scope !20
  %2189 = load i8, i8* %36, align 1, !range !3
  %2190 = icmp eq i8 %2189, 0
  br i1 %2190, label %2196, label %2191

2191:                                             ; preds = %2186
  %2192 = load i8*, i8** %148, align 8
  %2193 = load i8, i8* %2192, align 1
  %2194 = zext i8 %2193 to i16
  %2195 = ptrtoint i8* %2192 to i64
  br label %2201

2196:                                             ; preds = %2186
  %2197 = load i16*, i16** %149, align 8
  %2198 = load i16, i16* %2197, align 2
  %2199 = ptrtoint i16* %2197 to i64
  %2200 = bitcast i16* %2197 to i8*
  br label %2201

2201:                                             ; preds = %2196, %2191
  %2202 = phi i8* [ %2192, %2191 ], [ %2200, %2196 ]
  %2203 = phi i64 [ %2195, %2191 ], [ %2199, %2196 ]
  %2204 = phi i16 [ %2194, %2191 ], [ %2198, %2196 ]
  %2205 = icmp eq i16 %2204, 10
  br i1 %2205, label %2206, label %2221

2206:                                             ; preds = %2201
  %2207 = load i8, i8* %150, align 8, !range !3
  %2208 = icmp eq i8 %2207, 0
  br i1 %2208, label %2221, label %2209, !prof !2

2209:                                             ; preds = %2206
  %2210 = load i32, i32* %151, align 8
  %2211 = add nsw i32 %2210, 1
  store i32 %2211, i32* %151, align 8
  %2212 = load i32, i32* %152, align 8
  %2213 = load i64, i64* %154, align 8
  %2214 = sub i64 %2203, %2213
  %2215 = trunc i64 %2214 to i32
  %2216 = xor i8 %2189, 1
  %2217 = zext i8 %2216 to i32
  %2218 = ashr i32 %2215, %2217
  %2219 = add i32 %2212, 1
  %2220 = add i32 %2219, %2218
  store i32 %2220, i32* %155, align 4
  br label %2221

2221:                                             ; preds = %2209, %2206, %2201
  %2222 = load i8*, i8** %156, align 8
  %2223 = icmp ult i8* %2202, %2222
  br i1 %2223, label %2224, label %2229, !prof !4

2224:                                             ; preds = %2221
  br i1 %2190, label %2227, label %2225

2225:                                             ; preds = %2224
  %2226 = getelementptr inbounds i8, i8* %2202, i64 1
  store i8* %2226, i8** %148, align 8
  br label %2231

2227:                                             ; preds = %2224
  %2228 = getelementptr inbounds i8, i8* %2202, i64 2
  store i8* %2228, i8** %148, align 8
  br label %2231

2229:                                             ; preds = %2221
  %2230 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2231

2231:                                             ; preds = %2225, %2227, %2229
  %2232 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %26) #8
  %2233 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %26, i64 0, i32 3, i32 0, i32 0, i32 0
  %2234 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2233, align 8
  %2235 = icmp eq %"class.WTF::StringImpl"* %2234, null
  br i1 %2235, label %2249, label %2236

2236:                                             ; preds = %2231
  %2237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2234, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2238 = load atomic i32, i32* %2237 monotonic, align 4
  %2239 = and i32 %2238, 2
  %2240 = icmp eq i32 %2239, 0
  %2241 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2234, i64 0, i32 0
  %2242 = load i32, i32* %2241, align 4
  br i1 %2240, label %2243, label %2245

2243:                                             ; preds = %2236
  %2244 = add i32 %2242, -1
  store i32 %2244, i32* %2241, align 4
  br label %2245

2245:                                             ; preds = %2243, %2236
  %2246 = phi i32 [ %2244, %2243 ], [ %2242, %2236 ]
  %2247 = icmp eq i32 %2246, 0
  br i1 %2247, label %2248, label %2249

2248:                                             ; preds = %2245
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2234) #8
  br label %2249

2249:                                             ; preds = %2248, %2245, %2231
  %2250 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2143, align 8
  %2251 = icmp eq %"class.WTF::StringImpl"* %2250, null
  br i1 %2251, label %2265, label %2252

2252:                                             ; preds = %2249
  %2253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2250, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2254 = load atomic i32, i32* %2253 monotonic, align 4
  %2255 = and i32 %2254, 2
  %2256 = icmp eq i32 %2255, 0
  %2257 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2250, i64 0, i32 0
  %2258 = load i32, i32* %2257, align 4
  br i1 %2256, label %2259, label %2261

2259:                                             ; preds = %2252
  %2260 = add i32 %2258, -1
  store i32 %2260, i32* %2257, align 4
  br label %2261

2261:                                             ; preds = %2259, %2252
  %2262 = phi i32 [ %2260, %2259 ], [ %2258, %2252 ]
  %2263 = icmp eq i32 %2262, 0
  br i1 %2263, label %2264, label %2265

2264:                                             ; preds = %2261
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2250) #8
  br label %2265

2265:                                             ; preds = %2264, %2261, %2249
  %2266 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2123, align 8
  %2267 = icmp eq %"class.WTF::StringImpl"* %2266, null
  br i1 %2267, label %2281, label %2268

2268:                                             ; preds = %2265
  %2269 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2266, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2270 = load atomic i32, i32* %2269 monotonic, align 4
  %2271 = and i32 %2270, 2
  %2272 = icmp eq i32 %2271, 0
  %2273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2266, i64 0, i32 0
  %2274 = load i32, i32* %2273, align 4
  br i1 %2272, label %2275, label %2277

2275:                                             ; preds = %2268
  %2276 = add i32 %2274, -1
  store i32 %2276, i32* %2273, align 4
  br label %2277

2277:                                             ; preds = %2275, %2268
  %2278 = phi i32 [ %2276, %2275 ], [ %2274, %2268 ]
  %2279 = icmp eq i32 %2278, 0
  br i1 %2279, label %2280, label %2281

2280:                                             ; preds = %2277
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2266) #8
  br label %2281

2281:                                             ; preds = %2265, %2277, %2280
  br i1 %2168, label %2295, label %2282

2282:                                             ; preds = %2281
  %2283 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2121, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2284 = load atomic i32, i32* %2283 monotonic, align 4
  %2285 = and i32 %2284, 2
  %2286 = icmp eq i32 %2285, 0
  %2287 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2121, i64 0, i32 0
  %2288 = load i32, i32* %2287, align 4
  br i1 %2286, label %2289, label %2291

2289:                                             ; preds = %2282
  %2290 = add i32 %2288, -1
  store i32 %2290, i32* %2287, align 4
  br label %2291

2291:                                             ; preds = %2289, %2282
  %2292 = phi i32 [ %2290, %2289 ], [ %2288, %2282 ]
  %2293 = icmp eq i32 %2292, 0
  br i1 %2293, label %2294, label %2295

2294:                                             ; preds = %2291
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2121) #8
  br label %2295

2295:                                             ; preds = %2281, %2291, %2294
  br i1 %2146, label %2309, label %2296

2296:                                             ; preds = %2295
  %2297 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2298 = load atomic i32, i32* %2297 monotonic, align 4
  %2299 = and i32 %2298, 2
  %2300 = icmp eq i32 %2299, 0
  %2301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2120, i64 0, i32 0
  %2302 = load i32, i32* %2301, align 4
  br i1 %2300, label %2303, label %2305

2303:                                             ; preds = %2296
  %2304 = add i32 %2302, -1
  store i32 %2304, i32* %2301, align 4
  br label %2305

2305:                                             ; preds = %2303, %2296
  %2306 = phi i32 [ %2304, %2303 ], [ %2302, %2296 ]
  %2307 = icmp eq i32 %2306, 0
  br i1 %2307, label %2308, label %2309

2308:                                             ; preds = %2305
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2120) #8
  br label %2309

2309:                                             ; preds = %2295, %2305, %2308
  br i1 %2124, label %2840, label %2310

2310:                                             ; preds = %2309
  %2311 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2119, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2312 = load atomic i32, i32* %2311 monotonic, align 4
  %2313 = and i32 %2312, 2
  %2314 = icmp eq i32 %2313, 0
  %2315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2119, i64 0, i32 0
  %2316 = load i32, i32* %2315, align 4
  br i1 %2314, label %2317, label %2319

2317:                                             ; preds = %2310
  %2318 = add i32 %2316, -1
  store i32 %2318, i32* %2315, align 4
  br label %2319

2319:                                             ; preds = %2317, %2310
  %2320 = phi i32 [ %2318, %2317 ], [ %2316, %2310 ]
  %2321 = icmp eq i32 %2320, 0
  br i1 %2321, label %2322, label %2840

2322:                                             ; preds = %2319
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2119) #8
  br label %2840

2323:                                             ; preds = %1996
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1654)
  store i16 %1997, i16* %7, align 2
  %2324 = load i8, i8* %132, align 4, !range !3
  %2325 = icmp ne i8 %2324, 0
  %2326 = icmp ult i16 %1997, 256
  %2327 = and i1 %2326, %2325
  br i1 %2327, label %2328, label %2330

2328:                                             ; preds = %2323
  %2329 = trunc i16 %1997 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %18, i8 zeroext %2329) #8
  br label %2349

2330:                                             ; preds = %2323
  %2331 = load i8, i8* %133, align 1
  %2332 = icmp eq i8 %2331, 0
  %2333 = or i1 %2325, %2332
  br i1 %2333, label %2334, label %2335

2334:                                             ; preds = %2330
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %18, i32 1) #8
  br label %2335

2335:                                             ; preds = %2330, %2334
  %2336 = load i32, i32* %1650, align 4
  %2337 = load i32, i32* %1651, align 8
  %2338 = icmp eq i32 %2336, %2337
  br i1 %2338, label %2345, label %2339, !prof !2

2339:                                             ; preds = %2335
  %2340 = load i16*, i16** %1652, align 8
  %2341 = zext i32 %2336 to i64
  %2342 = getelementptr inbounds i16, i16* %2340, i64 %2341
  store i16 %1997, i16* %2342, align 2
  %2343 = load i32, i32* %1650, align 4
  %2344 = add i32 %2343, 1
  store i32 %2344, i32* %1650, align 4
  br label %2346

2345:                                             ; preds = %2335
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %1653, i16* nonnull dereferenceable(2) %7) #8
  br label %2346

2346:                                             ; preds = %2345, %2339
  %2347 = load i32, i32* %131, align 8
  %2348 = add i32 %2347, 1
  store i32 %2348, i32* %131, align 8
  br label %2349

2349:                                             ; preds = %2328, %2346
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1654)
  %2350 = load i8, i8* %36, align 1, !range !3
  %2351 = icmp eq i8 %2350, 0
  br i1 %2351, label %2357, label %2352

2352:                                             ; preds = %2349
  %2353 = load i8*, i8** %148, align 8
  %2354 = load i8, i8* %2353, align 1
  %2355 = zext i8 %2354 to i16
  %2356 = ptrtoint i8* %2353 to i64
  br label %2362

2357:                                             ; preds = %2349
  %2358 = load i16*, i16** %149, align 8
  %2359 = load i16, i16* %2358, align 2
  %2360 = ptrtoint i16* %2358 to i64
  %2361 = bitcast i16* %2358 to i8*
  br label %2362

2362:                                             ; preds = %2357, %2352
  %2363 = phi i8* [ %2353, %2352 ], [ %2361, %2357 ]
  %2364 = phi i64 [ %2356, %2352 ], [ %2360, %2357 ]
  %2365 = phi i16 [ %2355, %2352 ], [ %2359, %2357 ]
  %2366 = icmp eq i16 %2365, 10
  br i1 %2366, label %2367, label %2382

2367:                                             ; preds = %2362
  %2368 = load i8, i8* %150, align 8, !range !3
  %2369 = icmp eq i8 %2368, 0
  br i1 %2369, label %2382, label %2370, !prof !2

2370:                                             ; preds = %2367
  %2371 = load i32, i32* %151, align 8
  %2372 = add nsw i32 %2371, 1
  store i32 %2372, i32* %151, align 8
  %2373 = load i32, i32* %152, align 8
  %2374 = load i64, i64* %154, align 8
  %2375 = sub i64 %2364, %2374
  %2376 = trunc i64 %2375 to i32
  %2377 = xor i8 %2350, 1
  %2378 = zext i8 %2377 to i32
  %2379 = ashr i32 %2376, %2378
  %2380 = add i32 %2373, 1
  %2381 = add i32 %2380, %2379
  store i32 %2381, i32* %155, align 4
  br label %2382

2382:                                             ; preds = %2370, %2367, %2362
  %2383 = load i8*, i8** %156, align 8
  %2384 = icmp ult i8* %2363, %2383
  br i1 %2384, label %2385, label %2394, !prof !4

2385:                                             ; preds = %2382
  br i1 %2351, label %2390, label %2386

2386:                                             ; preds = %2385
  %2387 = getelementptr inbounds i8, i8* %2363, i64 1
  store i8* %2387, i8** %148, align 8
  %2388 = load i8, i8* %2387, align 1
  %2389 = zext i8 %2388 to i16
  br label %2396

2390:                                             ; preds = %2385
  %2391 = getelementptr inbounds i8, i8* %2363, i64 2
  %2392 = bitcast i8* %2391 to i16*
  store i8* %2391, i8** %148, align 8
  %2393 = load i16, i16* %2392, align 2
  br label %2396

2394:                                             ; preds = %2382
  %2395 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2396

2396:                                             ; preds = %2394, %2390, %2386
  %2397 = phi i16 [ %2395, %2394 ], [ %2389, %2386 ], [ %2393, %2390 ]
  store i16 %2397, i16* %17, align 2
  %2398 = icmp ugt i16 %2397, 15
  br i1 %2398, label %2399, label %2400

2399:                                             ; preds = %2396
  store i8 0, i8* %157, align 8
  br label %2405

2400:                                             ; preds = %2396
  %2401 = load i8, i8* %31, align 1, !range !3
  %2402 = icmp eq i8 %2401, 0
  br i1 %2402, label %2403, label %2405

2403:                                             ; preds = %2400
  %2404 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %2405

2405:                                             ; preds = %2403, %2400, %2399, %2115, %2112, %2111
  br label %1996

2406:                                             ; preds = %2617, %824
  %2407 = load i16, i16* %17, align 2
  switch i16 %2407, label %2540 [
    i16 62, label %2408
    i16 0, label %2408
  ]

2408:                                             ; preds = %2406, %2406
  %2409 = bitcast %"class.blink::VTTToken"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2409) #8
  %2410 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %2411 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %27, i64 0, i32 0
  store i32 3, i32* %2411, align 8, !alias.scope !23
  %2412 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %27, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2410, %"class.WTF::StringImpl"** %2412, align 8, !alias.scope !23
  %2413 = icmp eq %"class.WTF::StringImpl"* %2410, null
  br i1 %2413, label %2431, label %2414

2414:                                             ; preds = %2408
  %2415 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2416 = load atomic i32, i32* %2415 monotonic, align 4, !noalias !23
  %2417 = and i32 %2416, 2
  %2418 = icmp eq i32 %2417, 0
  br i1 %2418, label %2419, label %2431

2419:                                             ; preds = %2414
  %2420 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2410, i64 0, i32 0
  %2421 = load i32, i32* %2420, align 4, !noalias !23
  %2422 = zext i32 %2421 to i33
  %2423 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %2422, i33 1) #8
  %2424 = extractvalue { i33, i1 } %2423, 1
  %2425 = extractvalue { i33, i1 } %2423, 0
  %2426 = icmp slt i33 %2425, 0
  %2427 = or i1 %2424, %2426
  br i1 %2427, label %2428, label %2429, !prof !2

2428:                                             ; preds = %2419
  call void @llvm.trap() #8, !noalias !23
  unreachable

2429:                                             ; preds = %2419
  %2430 = trunc i33 %2425 to i32
  store i32 %2430, i32* %2420, align 4, !noalias !23
  br label %2431

2431:                                             ; preds = %2408, %2414, %2429
  %2432 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %27, i64 0, i32 2, i32 0, i32 0, i32 0
  %2433 = bitcast %"class.WTF::StringImpl"** %2432 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2433, i8 0, i64 16, i1 false) #8, !alias.scope !23
  %2434 = load i8, i8* %36, align 1, !range !3
  %2435 = icmp eq i8 %2434, 0
  br i1 %2435, label %2441, label %2436

2436:                                             ; preds = %2431
  %2437 = load i8*, i8** %148, align 8
  %2438 = load i8, i8* %2437, align 1
  %2439 = zext i8 %2438 to i16
  %2440 = ptrtoint i8* %2437 to i64
  br label %2446

2441:                                             ; preds = %2431
  %2442 = load i16*, i16** %149, align 8
  %2443 = load i16, i16* %2442, align 2
  %2444 = ptrtoint i16* %2442 to i64
  %2445 = bitcast i16* %2442 to i8*
  br label %2446

2446:                                             ; preds = %2441, %2436
  %2447 = phi i8* [ %2437, %2436 ], [ %2445, %2441 ]
  %2448 = phi i64 [ %2440, %2436 ], [ %2444, %2441 ]
  %2449 = phi i16 [ %2439, %2436 ], [ %2443, %2441 ]
  %2450 = icmp eq i16 %2449, 10
  br i1 %2450, label %2451, label %2466

2451:                                             ; preds = %2446
  %2452 = load i8, i8* %150, align 8, !range !3
  %2453 = icmp eq i8 %2452, 0
  br i1 %2453, label %2466, label %2454, !prof !2

2454:                                             ; preds = %2451
  %2455 = load i32, i32* %151, align 8
  %2456 = add nsw i32 %2455, 1
  store i32 %2456, i32* %151, align 8
  %2457 = load i32, i32* %152, align 8
  %2458 = load i64, i64* %154, align 8
  %2459 = sub i64 %2448, %2458
  %2460 = trunc i64 %2459 to i32
  %2461 = xor i8 %2434, 1
  %2462 = zext i8 %2461 to i32
  %2463 = ashr i32 %2460, %2462
  %2464 = add i32 %2457, 1
  %2465 = add i32 %2464, %2463
  store i32 %2465, i32* %155, align 4
  br label %2466

2466:                                             ; preds = %2454, %2451, %2446
  %2467 = load i8*, i8** %156, align 8
  %2468 = icmp ult i8* %2447, %2467
  br i1 %2468, label %2469, label %2474, !prof !4

2469:                                             ; preds = %2466
  br i1 %2435, label %2472, label %2470

2470:                                             ; preds = %2469
  %2471 = getelementptr inbounds i8, i8* %2447, i64 1
  store i8* %2471, i8** %148, align 8
  br label %2476

2472:                                             ; preds = %2469
  %2473 = getelementptr inbounds i8, i8* %2447, i64 2
  store i8* %2473, i8** %148, align 8
  br label %2476

2474:                                             ; preds = %2466
  %2475 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2476

2476:                                             ; preds = %2470, %2472, %2474
  %2477 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %27) #8
  %2478 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %27, i64 0, i32 3, i32 0, i32 0, i32 0
  %2479 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2478, align 8
  %2480 = icmp eq %"class.WTF::StringImpl"* %2479, null
  br i1 %2480, label %2494, label %2481

2481:                                             ; preds = %2476
  %2482 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2479, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2483 = load atomic i32, i32* %2482 monotonic, align 4
  %2484 = and i32 %2483, 2
  %2485 = icmp eq i32 %2484, 0
  %2486 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2479, i64 0, i32 0
  %2487 = load i32, i32* %2486, align 4
  br i1 %2485, label %2488, label %2490

2488:                                             ; preds = %2481
  %2489 = add i32 %2487, -1
  store i32 %2489, i32* %2486, align 4
  br label %2490

2490:                                             ; preds = %2488, %2481
  %2491 = phi i32 [ %2489, %2488 ], [ %2487, %2481 ]
  %2492 = icmp eq i32 %2491, 0
  br i1 %2492, label %2493, label %2494

2493:                                             ; preds = %2490
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2479) #8
  br label %2494

2494:                                             ; preds = %2493, %2490, %2476
  %2495 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2432, align 8
  %2496 = icmp eq %"class.WTF::StringImpl"* %2495, null
  br i1 %2496, label %2510, label %2497

2497:                                             ; preds = %2494
  %2498 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2495, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2499 = load atomic i32, i32* %2498 monotonic, align 4
  %2500 = and i32 %2499, 2
  %2501 = icmp eq i32 %2500, 0
  %2502 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2495, i64 0, i32 0
  %2503 = load i32, i32* %2502, align 4
  br i1 %2501, label %2504, label %2506

2504:                                             ; preds = %2497
  %2505 = add i32 %2503, -1
  store i32 %2505, i32* %2502, align 4
  br label %2506

2506:                                             ; preds = %2504, %2497
  %2507 = phi i32 [ %2505, %2504 ], [ %2503, %2497 ]
  %2508 = icmp eq i32 %2507, 0
  br i1 %2508, label %2509, label %2510

2509:                                             ; preds = %2506
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2495) #8
  br label %2510

2510:                                             ; preds = %2509, %2506, %2494
  %2511 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2412, align 8
  %2512 = icmp eq %"class.WTF::StringImpl"* %2511, null
  br i1 %2512, label %2526, label %2513

2513:                                             ; preds = %2510
  %2514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2511, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2515 = load atomic i32, i32* %2514 monotonic, align 4
  %2516 = and i32 %2515, 2
  %2517 = icmp eq i32 %2516, 0
  %2518 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2511, i64 0, i32 0
  %2519 = load i32, i32* %2518, align 4
  br i1 %2517, label %2520, label %2522

2520:                                             ; preds = %2513
  %2521 = add i32 %2519, -1
  store i32 %2521, i32* %2518, align 4
  br label %2522

2522:                                             ; preds = %2520, %2513
  %2523 = phi i32 [ %2521, %2520 ], [ %2519, %2513 ]
  %2524 = icmp eq i32 %2523, 0
  br i1 %2524, label %2525, label %2526

2525:                                             ; preds = %2522
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2511) #8
  br label %2526

2526:                                             ; preds = %2510, %2522, %2525
  br i1 %2413, label %2840, label %2527

2527:                                             ; preds = %2526
  %2528 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2529 = load atomic i32, i32* %2528 monotonic, align 4
  %2530 = and i32 %2529, 2
  %2531 = icmp eq i32 %2530, 0
  %2532 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2410, i64 0, i32 0
  %2533 = load i32, i32* %2532, align 4
  br i1 %2531, label %2534, label %2536

2534:                                             ; preds = %2527
  %2535 = add i32 %2533, -1
  store i32 %2535, i32* %2532, align 4
  br label %2536

2536:                                             ; preds = %2534, %2527
  %2537 = phi i32 [ %2535, %2534 ], [ %2533, %2527 ]
  %2538 = icmp eq i32 %2537, 0
  br i1 %2538, label %2539, label %2840

2539:                                             ; preds = %2536
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2410) #8
  br label %2840

2540:                                             ; preds = %2406
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %825)
  store i16 %2407, i16* %6, align 2
  %2541 = load i8, i8* %139, align 4, !range !3
  %2542 = icmp ne i8 %2541, 0
  %2543 = icmp ult i16 %2407, 256
  %2544 = and i1 %2543, %2542
  br i1 %2544, label %2545, label %2547

2545:                                             ; preds = %2540
  %2546 = trunc i16 %2407 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %2546) #8
  br label %2566

2547:                                             ; preds = %2540
  %2548 = load i8, i8* %140, align 1
  %2549 = icmp eq i8 %2548, 0
  %2550 = or i1 %2542, %2549
  br i1 %2550, label %2551, label %2552

2551:                                             ; preds = %2547
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %2552

2552:                                             ; preds = %2547, %2551
  %2553 = load i32, i32* %163, align 4
  %2554 = load i32, i32* %164, align 8
  %2555 = icmp eq i32 %2553, %2554
  br i1 %2555, label %2562, label %2556, !prof !2

2556:                                             ; preds = %2552
  %2557 = load i16*, i16** %165, align 8
  %2558 = zext i32 %2553 to i64
  %2559 = getelementptr inbounds i16, i16* %2557, i64 %2558
  store i16 %2407, i16* %2559, align 2
  %2560 = load i32, i32* %163, align 4
  %2561 = add i32 %2560, 1
  store i32 %2561, i32* %163, align 4
  br label %2563

2562:                                             ; preds = %2552
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %6) #8
  br label %2563

2563:                                             ; preds = %2562, %2556
  %2564 = load i32, i32* %138, align 8
  %2565 = add i32 %2564, 1
  store i32 %2565, i32* %138, align 8
  br label %2566

2566:                                             ; preds = %2545, %2563
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %825)
  %2567 = load i8, i8* %36, align 1, !range !3
  %2568 = icmp eq i8 %2567, 0
  br i1 %2568, label %2574, label %2569

2569:                                             ; preds = %2566
  %2570 = load i8*, i8** %148, align 8
  %2571 = load i8, i8* %2570, align 1
  %2572 = zext i8 %2571 to i16
  %2573 = ptrtoint i8* %2570 to i64
  br label %2579

2574:                                             ; preds = %2566
  %2575 = load i16*, i16** %149, align 8
  %2576 = load i16, i16* %2575, align 2
  %2577 = ptrtoint i16* %2575 to i64
  %2578 = bitcast i16* %2575 to i8*
  br label %2579

2579:                                             ; preds = %2574, %2569
  %2580 = phi i8* [ %2570, %2569 ], [ %2578, %2574 ]
  %2581 = phi i64 [ %2573, %2569 ], [ %2577, %2574 ]
  %2582 = phi i16 [ %2572, %2569 ], [ %2576, %2574 ]
  %2583 = icmp eq i16 %2582, 10
  br i1 %2583, label %2584, label %2599

2584:                                             ; preds = %2579
  %2585 = load i8, i8* %150, align 8, !range !3
  %2586 = icmp eq i8 %2585, 0
  br i1 %2586, label %2599, label %2587, !prof !2

2587:                                             ; preds = %2584
  %2588 = load i32, i32* %151, align 8
  %2589 = add nsw i32 %2588, 1
  store i32 %2589, i32* %151, align 8
  %2590 = load i32, i32* %152, align 8
  %2591 = load i64, i64* %154, align 8
  %2592 = sub i64 %2581, %2591
  %2593 = trunc i64 %2592 to i32
  %2594 = xor i8 %2567, 1
  %2595 = zext i8 %2594 to i32
  %2596 = ashr i32 %2593, %2595
  %2597 = add i32 %2590, 1
  %2598 = add i32 %2597, %2596
  store i32 %2598, i32* %155, align 4
  br label %2599

2599:                                             ; preds = %2587, %2584, %2579
  %2600 = load i8*, i8** %156, align 8
  %2601 = icmp ult i8* %2580, %2600
  br i1 %2601, label %2602, label %2611, !prof !4

2602:                                             ; preds = %2599
  br i1 %2568, label %2607, label %2603

2603:                                             ; preds = %2602
  %2604 = getelementptr inbounds i8, i8* %2580, i64 1
  store i8* %2604, i8** %148, align 8
  %2605 = load i8, i8* %2604, align 1
  %2606 = zext i8 %2605 to i16
  br label %2613

2607:                                             ; preds = %2602
  %2608 = getelementptr inbounds i8, i8* %2580, i64 2
  %2609 = bitcast i8* %2608 to i16*
  store i8* %2608, i8** %148, align 8
  %2610 = load i16, i16* %2609, align 2
  br label %2613

2611:                                             ; preds = %2599
  %2612 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2613

2613:                                             ; preds = %2611, %2607, %2603
  %2614 = phi i16 [ %2612, %2611 ], [ %2606, %2603 ], [ %2610, %2607 ]
  store i16 %2614, i16* %17, align 2
  %2615 = icmp ugt i16 %2614, 15
  br i1 %2615, label %2616, label %2618

2616:                                             ; preds = %2613
  store i8 0, i8* %157, align 8
  br label %2617

2617:                                             ; preds = %2616, %2618, %2621
  br label %2406

2618:                                             ; preds = %2613
  %2619 = load i8, i8* %31, align 1, !range !3
  %2620 = icmp eq i8 %2619, 0
  br i1 %2620, label %2621, label %2617

2621:                                             ; preds = %2618
  %2622 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %2617

2623:                                             ; preds = %2834, %909
  %2624 = load i16, i16* %17, align 2
  switch i16 %2624, label %2757 [
    i16 62, label %2625
    i16 0, label %2625
  ]

2625:                                             ; preds = %2623, %2623
  %2626 = bitcast %"class.blink::VTTToken"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2626) #8
  %2627 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %2628 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %28, i64 0, i32 0
  store i32 4, i32* %2628, align 8, !alias.scope !26
  %2629 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %28, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2627, %"class.WTF::StringImpl"** %2629, align 8, !alias.scope !26
  %2630 = icmp eq %"class.WTF::StringImpl"* %2627, null
  br i1 %2630, label %2648, label %2631

2631:                                             ; preds = %2625
  %2632 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2627, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2633 = load atomic i32, i32* %2632 monotonic, align 4, !noalias !26
  %2634 = and i32 %2633, 2
  %2635 = icmp eq i32 %2634, 0
  br i1 %2635, label %2636, label %2648

2636:                                             ; preds = %2631
  %2637 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2627, i64 0, i32 0
  %2638 = load i32, i32* %2637, align 4, !noalias !26
  %2639 = zext i32 %2638 to i33
  %2640 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %2639, i33 1) #8
  %2641 = extractvalue { i33, i1 } %2640, 1
  %2642 = extractvalue { i33, i1 } %2640, 0
  %2643 = icmp slt i33 %2642, 0
  %2644 = or i1 %2641, %2643
  br i1 %2644, label %2645, label %2646, !prof !2

2645:                                             ; preds = %2636
  call void @llvm.trap() #8, !noalias !26
  unreachable

2646:                                             ; preds = %2636
  %2647 = trunc i33 %2642 to i32
  store i32 %2647, i32* %2637, align 4, !noalias !26
  br label %2648

2648:                                             ; preds = %2625, %2631, %2646
  %2649 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %28, i64 0, i32 2, i32 0, i32 0, i32 0
  %2650 = bitcast %"class.WTF::StringImpl"** %2649 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2650, i8 0, i64 16, i1 false) #8, !alias.scope !26
  %2651 = load i8, i8* %36, align 1, !range !3
  %2652 = icmp eq i8 %2651, 0
  br i1 %2652, label %2658, label %2653

2653:                                             ; preds = %2648
  %2654 = load i8*, i8** %148, align 8
  %2655 = load i8, i8* %2654, align 1
  %2656 = zext i8 %2655 to i16
  %2657 = ptrtoint i8* %2654 to i64
  br label %2663

2658:                                             ; preds = %2648
  %2659 = load i16*, i16** %149, align 8
  %2660 = load i16, i16* %2659, align 2
  %2661 = ptrtoint i16* %2659 to i64
  %2662 = bitcast i16* %2659 to i8*
  br label %2663

2663:                                             ; preds = %2658, %2653
  %2664 = phi i8* [ %2654, %2653 ], [ %2662, %2658 ]
  %2665 = phi i64 [ %2657, %2653 ], [ %2661, %2658 ]
  %2666 = phi i16 [ %2656, %2653 ], [ %2660, %2658 ]
  %2667 = icmp eq i16 %2666, 10
  br i1 %2667, label %2668, label %2683

2668:                                             ; preds = %2663
  %2669 = load i8, i8* %150, align 8, !range !3
  %2670 = icmp eq i8 %2669, 0
  br i1 %2670, label %2683, label %2671, !prof !2

2671:                                             ; preds = %2668
  %2672 = load i32, i32* %151, align 8
  %2673 = add nsw i32 %2672, 1
  store i32 %2673, i32* %151, align 8
  %2674 = load i32, i32* %152, align 8
  %2675 = load i64, i64* %154, align 8
  %2676 = sub i64 %2665, %2675
  %2677 = trunc i64 %2676 to i32
  %2678 = xor i8 %2651, 1
  %2679 = zext i8 %2678 to i32
  %2680 = ashr i32 %2677, %2679
  %2681 = add i32 %2674, 1
  %2682 = add i32 %2681, %2680
  store i32 %2682, i32* %155, align 4
  br label %2683

2683:                                             ; preds = %2671, %2668, %2663
  %2684 = load i8*, i8** %156, align 8
  %2685 = icmp ult i8* %2664, %2684
  br i1 %2685, label %2686, label %2691, !prof !4

2686:                                             ; preds = %2683
  br i1 %2652, label %2689, label %2687

2687:                                             ; preds = %2686
  %2688 = getelementptr inbounds i8, i8* %2664, i64 1
  store i8* %2688, i8** %148, align 8
  br label %2693

2689:                                             ; preds = %2686
  %2690 = getelementptr inbounds i8, i8* %2664, i64 2
  store i8* %2690, i8** %148, align 8
  br label %2693

2691:                                             ; preds = %2683
  %2692 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2693

2693:                                             ; preds = %2687, %2689, %2691
  %2694 = call dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"* %1, %"class.blink::VTTToken"* nonnull dereferenceable(32) %28) #8
  %2695 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %28, i64 0, i32 3, i32 0, i32 0, i32 0
  %2696 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2695, align 8
  %2697 = icmp eq %"class.WTF::StringImpl"* %2696, null
  br i1 %2697, label %2711, label %2698

2698:                                             ; preds = %2693
  %2699 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2696, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2700 = load atomic i32, i32* %2699 monotonic, align 4
  %2701 = and i32 %2700, 2
  %2702 = icmp eq i32 %2701, 0
  %2703 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2696, i64 0, i32 0
  %2704 = load i32, i32* %2703, align 4
  br i1 %2702, label %2705, label %2707

2705:                                             ; preds = %2698
  %2706 = add i32 %2704, -1
  store i32 %2706, i32* %2703, align 4
  br label %2707

2707:                                             ; preds = %2705, %2698
  %2708 = phi i32 [ %2706, %2705 ], [ %2704, %2698 ]
  %2709 = icmp eq i32 %2708, 0
  br i1 %2709, label %2710, label %2711

2710:                                             ; preds = %2707
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2696) #8
  br label %2711

2711:                                             ; preds = %2710, %2707, %2693
  %2712 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2649, align 8
  %2713 = icmp eq %"class.WTF::StringImpl"* %2712, null
  br i1 %2713, label %2727, label %2714

2714:                                             ; preds = %2711
  %2715 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2712, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2716 = load atomic i32, i32* %2715 monotonic, align 4
  %2717 = and i32 %2716, 2
  %2718 = icmp eq i32 %2717, 0
  %2719 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2712, i64 0, i32 0
  %2720 = load i32, i32* %2719, align 4
  br i1 %2718, label %2721, label %2723

2721:                                             ; preds = %2714
  %2722 = add i32 %2720, -1
  store i32 %2722, i32* %2719, align 4
  br label %2723

2723:                                             ; preds = %2721, %2714
  %2724 = phi i32 [ %2722, %2721 ], [ %2720, %2714 ]
  %2725 = icmp eq i32 %2724, 0
  br i1 %2725, label %2726, label %2727

2726:                                             ; preds = %2723
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2712) #8
  br label %2727

2727:                                             ; preds = %2726, %2723, %2711
  %2728 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2629, align 8
  %2729 = icmp eq %"class.WTF::StringImpl"* %2728, null
  br i1 %2729, label %2743, label %2730

2730:                                             ; preds = %2727
  %2731 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2728, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2732 = load atomic i32, i32* %2731 monotonic, align 4
  %2733 = and i32 %2732, 2
  %2734 = icmp eq i32 %2733, 0
  %2735 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2728, i64 0, i32 0
  %2736 = load i32, i32* %2735, align 4
  br i1 %2734, label %2737, label %2739

2737:                                             ; preds = %2730
  %2738 = add i32 %2736, -1
  store i32 %2738, i32* %2735, align 4
  br label %2739

2739:                                             ; preds = %2737, %2730
  %2740 = phi i32 [ %2738, %2737 ], [ %2736, %2730 ]
  %2741 = icmp eq i32 %2740, 0
  br i1 %2741, label %2742, label %2743

2742:                                             ; preds = %2739
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2728) #8
  br label %2743

2743:                                             ; preds = %2727, %2739, %2742
  br i1 %2630, label %2840, label %2744

2744:                                             ; preds = %2743
  %2745 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2627, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2746 = load atomic i32, i32* %2745 monotonic, align 4
  %2747 = and i32 %2746, 2
  %2748 = icmp eq i32 %2747, 0
  %2749 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2627, i64 0, i32 0
  %2750 = load i32, i32* %2749, align 4
  br i1 %2748, label %2751, label %2753

2751:                                             ; preds = %2744
  %2752 = add i32 %2750, -1
  store i32 %2752, i32* %2749, align 4
  br label %2753

2753:                                             ; preds = %2751, %2744
  %2754 = phi i32 [ %2752, %2751 ], [ %2750, %2744 ]
  %2755 = icmp eq i32 %2754, 0
  br i1 %2755, label %2756, label %2840

2756:                                             ; preds = %2753
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2627) #8
  br label %2840

2757:                                             ; preds = %2623
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %910)
  store i16 %2624, i16* %5, align 2
  %2758 = load i8, i8* %139, align 4, !range !3
  %2759 = icmp ne i8 %2758, 0
  %2760 = icmp ult i16 %2624, 256
  %2761 = and i1 %2760, %2759
  br i1 %2761, label %2762, label %2764

2762:                                             ; preds = %2757
  %2763 = trunc i16 %2624 to i8
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %19, i8 zeroext %2763) #8
  br label %2783

2764:                                             ; preds = %2757
  %2765 = load i8, i8* %140, align 1
  %2766 = icmp eq i8 %2765, 0
  %2767 = or i1 %2759, %2766
  br i1 %2767, label %2768, label %2769

2768:                                             ; preds = %2764
  call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* nonnull %19, i32 1) #8
  br label %2769

2769:                                             ; preds = %2764, %2768
  %2770 = load i32, i32* %163, align 4
  %2771 = load i32, i32* %164, align 8
  %2772 = icmp eq i32 %2770, %2771
  br i1 %2772, label %2779, label %2773, !prof !2

2773:                                             ; preds = %2769
  %2774 = load i16*, i16** %165, align 8
  %2775 = zext i32 %2770 to i64
  %2776 = getelementptr inbounds i16, i16* %2774, i64 %2775
  store i16 %2624, i16* %2776, align 2
  %2777 = load i32, i32* %163, align 4
  %2778 = add i32 %2777, 1
  store i32 %2778, i32* %163, align 4
  br label %2780

2779:                                             ; preds = %2769
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %166, i16* nonnull dereferenceable(2) %5) #8
  br label %2780

2780:                                             ; preds = %2779, %2773
  %2781 = load i32, i32* %138, align 8
  %2782 = add i32 %2781, 1
  store i32 %2782, i32* %138, align 8
  br label %2783

2783:                                             ; preds = %2762, %2780
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %910)
  %2784 = load i8, i8* %36, align 1, !range !3
  %2785 = icmp eq i8 %2784, 0
  br i1 %2785, label %2791, label %2786

2786:                                             ; preds = %2783
  %2787 = load i8*, i8** %148, align 8
  %2788 = load i8, i8* %2787, align 1
  %2789 = zext i8 %2788 to i16
  %2790 = ptrtoint i8* %2787 to i64
  br label %2796

2791:                                             ; preds = %2783
  %2792 = load i16*, i16** %149, align 8
  %2793 = load i16, i16* %2792, align 2
  %2794 = ptrtoint i16* %2792 to i64
  %2795 = bitcast i16* %2792 to i8*
  br label %2796

2796:                                             ; preds = %2791, %2786
  %2797 = phi i8* [ %2787, %2786 ], [ %2795, %2791 ]
  %2798 = phi i64 [ %2790, %2786 ], [ %2794, %2791 ]
  %2799 = phi i16 [ %2789, %2786 ], [ %2793, %2791 ]
  %2800 = icmp eq i16 %2799, 10
  br i1 %2800, label %2801, label %2816

2801:                                             ; preds = %2796
  %2802 = load i8, i8* %150, align 8, !range !3
  %2803 = icmp eq i8 %2802, 0
  br i1 %2803, label %2816, label %2804, !prof !2

2804:                                             ; preds = %2801
  %2805 = load i32, i32* %151, align 8
  %2806 = add nsw i32 %2805, 1
  store i32 %2806, i32* %151, align 8
  %2807 = load i32, i32* %152, align 8
  %2808 = load i64, i64* %154, align 8
  %2809 = sub i64 %2798, %2808
  %2810 = trunc i64 %2809 to i32
  %2811 = xor i8 %2784, 1
  %2812 = zext i8 %2811 to i32
  %2813 = ashr i32 %2810, %2812
  %2814 = add i32 %2807, 1
  %2815 = add i32 %2814, %2813
  store i32 %2815, i32* %155, align 4
  br label %2816

2816:                                             ; preds = %2804, %2801, %2796
  %2817 = load i8*, i8** %156, align 8
  %2818 = icmp ult i8* %2797, %2817
  br i1 %2818, label %2819, label %2828, !prof !4

2819:                                             ; preds = %2816
  br i1 %2785, label %2824, label %2820

2820:                                             ; preds = %2819
  %2821 = getelementptr inbounds i8, i8* %2797, i64 1
  store i8* %2821, i8** %148, align 8
  %2822 = load i8, i8* %2821, align 1
  %2823 = zext i8 %2822 to i16
  br label %2830

2824:                                             ; preds = %2819
  %2825 = getelementptr inbounds i8, i8* %2797, i64 2
  %2826 = bitcast i8* %2825 to i16*
  store i8* %2825, i8** %148, align 8
  %2827 = load i16, i16* %2826, align 2
  br label %2830

2828:                                             ; preds = %2816
  %2829 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %30) #8
  br label %2830

2830:                                             ; preds = %2828, %2824, %2820
  %2831 = phi i16 [ %2829, %2828 ], [ %2823, %2820 ], [ %2827, %2824 ]
  store i16 %2831, i16* %17, align 2
  %2832 = icmp ugt i16 %2831, 15
  br i1 %2832, label %2833, label %2835

2833:                                             ; preds = %2830
  store i8 0, i8* %157, align 8
  br label %2834

2834:                                             ; preds = %2833, %2835, %2838
  br label %2623

2835:                                             ; preds = %2830
  %2836 = load i8, i8* %31, align 1, !range !3
  %2837 = icmp eq i8 %2836, 0
  br i1 %2837, label %2838, label %2834

2838:                                             ; preds = %2835
  %2839 = call zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"* %35, %"class.blink::SegmentedString"* dereferenceable(88) %30, i16* nonnull dereferenceable(2) %17) #8
  br label %2834

2840:                                             ; preds = %2756, %2753, %2743, %2539, %2536, %2526, %2322, %2319, %2309, %1912, %1909, %1899, %1498, %1495, %1485, %1102, %1099, %1089, %571, %568, %558, %439, %436, %426
  %2841 = phi i8* [ %352, %426 ], [ %352, %436 ], [ %352, %439 ], [ %441, %558 ], [ %441, %568 ], [ %441, %571 ], [ %913, %1089 ], [ %913, %1099 ], [ %913, %1102 ], [ %1309, %1485 ], [ %1309, %1495 ], [ %1309, %1498 ], [ %1720, %1899 ], [ %1720, %1909 ], [ %1720, %1912 ], [ %2118, %2309 ], [ %2118, %2319 ], [ %2118, %2322 ], [ %2409, %2526 ], [ %2409, %2536 ], [ %2409, %2539 ], [ %2626, %2743 ], [ %2626, %2753 ], [ %2626, %2756 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2841) #8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %20) #8
  %2842 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %142, align 8
  %2843 = icmp eq %"class.WTF::StringImpl"* %2842, null
  br i1 %2843, label %2857, label %2844

2844:                                             ; preds = %2840
  %2845 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2842, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2846 = load atomic i32, i32* %2845 monotonic, align 4
  %2847 = and i32 %2846, 2
  %2848 = icmp eq i32 %2847, 0
  %2849 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2842, i64 0, i32 0
  %2850 = load i32, i32* %2849, align 4
  br i1 %2848, label %2851, label %2853

2851:                                             ; preds = %2844
  %2852 = add i32 %2850, -1
  store i32 %2852, i32* %2849, align 4
  br label %2853

2853:                                             ; preds = %2851, %2844
  %2854 = phi i32 [ %2852, %2851 ], [ %2850, %2844 ]
  %2855 = icmp eq i32 %2854, 0
  br i1 %2855, label %2856, label %2857

2856:                                             ; preds = %2853
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2842) #8
  br label %2857

2857:                                             ; preds = %2840, %2853, %2856
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %141) #8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %19) #8
  %2858 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %135, align 8
  %2859 = icmp eq %"class.WTF::StringImpl"* %2858, null
  br i1 %2859, label %2873, label %2860

2860:                                             ; preds = %2857
  %2861 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2858, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2862 = load atomic i32, i32* %2861 monotonic, align 4
  %2863 = and i32 %2862, 2
  %2864 = icmp eq i32 %2863, 0
  %2865 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2858, i64 0, i32 0
  %2866 = load i32, i32* %2865, align 4
  br i1 %2864, label %2867, label %2869

2867:                                             ; preds = %2860
  %2868 = add i32 %2866, -1
  store i32 %2868, i32* %2865, align 4
  br label %2869

2869:                                             ; preds = %2867, %2860
  %2870 = phi i32 [ %2868, %2867 ], [ %2866, %2860 ]
  %2871 = icmp eq i32 %2870, 0
  br i1 %2871, label %2872, label %2873

2872:                                             ; preds = %2869
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2858) #8
  br label %2873

2873:                                             ; preds = %2857, %2869, %2872
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %134) #8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %18) #8
  %2874 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %2875 = icmp eq %"class.WTF::StringImpl"* %2874, null
  br i1 %2875, label %2889, label %2876

2876:                                             ; preds = %2873
  %2877 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2874, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2878 = load atomic i32, i32* %2877 monotonic, align 4
  %2879 = and i32 %2878, 2
  %2880 = icmp eq i32 %2879, 0
  %2881 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2874, i64 0, i32 0
  %2882 = load i32, i32* %2881, align 4
  br i1 %2880, label %2883, label %2885

2883:                                             ; preds = %2876
  %2884 = add i32 %2882, -1
  store i32 %2884, i32* %2881, align 4
  br label %2885

2885:                                             ; preds = %2883, %2876
  %2886 = phi i32 [ %2884, %2883 ], [ %2882, %2876 ]
  %2887 = icmp eq i32 %2886, 0
  br i1 %2887, label %2888, label %2889

2888:                                             ; preds = %2885
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2874) #8
  br label %2889

2889:                                             ; preds = %2873, %2885, %2888
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %127) #8
  br label %2890

2890:                                             ; preds = %2, %123, %120, %118, %53, %2889
  %2891 = phi i1 [ true, %2889 ], [ false, %53 ], [ false, %2 ], [ false, %118 ], [ false, %120 ], [ false, %123 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %29) #8
  ret i1 %2891
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder14ToAtomicStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %9
  br i1 %6, label %37, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %95, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %14
  br label %16

16:                                               ; preds = %13, %34
  %17 = phi %"class.blink::SegmentedSubstring"* [ %35, %34 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 0, i32 5, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #8
  br label %34

34:                                               ; preds = %33, %30, %16
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 1
  %36 = icmp eq %"class.blink::SegmentedSubstring"* %35, %10
  br i1 %36, label %95, label %16

37:                                               ; preds = %1
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %63, label %39

39:                                               ; preds = %37, %57
  %40 = phi %"class.blink::SegmentedSubstring"* [ %58, %57 ], [ %8, %37 ]
  %41 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 0, i32 5, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #8
  br label %57

57:                                               ; preds = %56, %53, %39
  %58 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 1
  %59 = icmp eq %"class.blink::SegmentedSubstring"* %58, %10
  br i1 %59, label %60, label %39

60:                                               ; preds = %57
  %61 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %62 = load i32, i32* %2, align 8
  br label %63

63:                                               ; preds = %60, %37
  %64 = phi i32 [ %62, %60 ], [ %3, %37 ]
  %65 = phi %"class.blink::SegmentedSubstring"* [ %61, %60 ], [ %8, %37 ]
  %66 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %68
  %70 = icmp eq i32 %64, %67
  br i1 %70, label %95, label %71

71:                                               ; preds = %63
  %72 = zext i32 %64 to i64
  %73 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %72
  br label %74

74:                                               ; preds = %71, %92
  %75 = phi %"class.blink::SegmentedSubstring"* [ %93, %92 ], [ %73, %71 ]
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #8
  br label %92

92:                                               ; preds = %91, %88, %74
  %93 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 1
  %94 = icmp eq %"class.blink::SegmentedSubstring"* %93, %69
  br i1 %94, label %95, label %74

95:                                               ; preds = %34, %92, %63, %11
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.blink::VTTToken"* @_ZN5blink8VTTTokenaSERKS0_(%"class.blink::VTTToken"*, %"class.blink::VTTToken"* dereferenceable(32)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %1, i64 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #8
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #8
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %25, %10, %2
  %28 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %29 = bitcast %"class.WTF::String"* %6 to i64*
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  store i64 %28, i64* %29, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #8
  br label %46

46:                                               ; preds = %27, %42, %45
  %47 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %0, i64 0, i32 2
  %48 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %68, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %68

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i33
  %60 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #8
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !2

65:                                               ; preds = %56
  tail call void @llvm.trap() #8
  unreachable

66:                                               ; preds = %56
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %57, align 4
  br label %68

68:                                               ; preds = %66, %51, %46
  %69 = ptrtoint %"class.WTF::StringImpl"* %49 to i64
  %70 = bitcast %"class.WTF::AtomicString"* %47 to i64*
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %47, i64 0, i32 0, i32 0, i32 0
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  store i64 %69, i64* %70, align 8
  %73 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %73, label %87, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  br i1 %78, label %81, label %83

81:                                               ; preds = %74
  %82 = add i32 %80, -1
  store i32 %82, i32* %79, align 4
  br label %83

83:                                               ; preds = %81, %74
  %84 = phi i32 [ %82, %81 ], [ %80, %74 ]
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %72) #8
  br label %87

87:                                               ; preds = %68, %83, %86
  %88 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %0, i64 0, i32 3
  %89 = getelementptr inbounds %"class.blink::VTTToken", %"class.blink::VTTToken"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %109, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %109

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i33
  %101 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %100, i33 1) #8
  %102 = extractvalue { i33, i1 } %101, 1
  %103 = extractvalue { i33, i1 } %101, 0
  %104 = icmp slt i33 %103, 0
  %105 = or i1 %102, %104
  br i1 %105, label %106, label %107, !prof !2

106:                                              ; preds = %97
  tail call void @llvm.trap() #8
  unreachable

107:                                              ; preds = %97
  %108 = trunc i33 %103 to i32
  store i32 %108, i32* %98, align 4
  br label %109

109:                                              ; preds = %107, %92, %87
  %110 = ptrtoint %"class.WTF::StringImpl"* %90 to i64
  %111 = bitcast %"class.WTF::AtomicString"* %88 to i64*
  %112 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %88, i64 0, i32 0, i32 0, i32 0
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  store i64 %110, i64* %111, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %128, label %115

115:                                              ; preds = %109
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #8
  br label %128

128:                                              ; preds = %109, %124, %127
  ret %"class.blink::VTTToken"* %0
}

declare zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"*, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i8, align 1
  store i8 %1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = zext i8 %1 to i16
  %10 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10)
  store i16 %9, i16* %3, align 2
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #8
  br label %15

15:                                               ; preds = %14, %8
  %16 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %29, label %22, !prof !2

22:                                               ; preds = %15
  %23 = bitcast %union.anon.1* %16 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %18 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  store i16 %9, i16* %26, align 2
  %27 = load i32, i32* %17, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %17, align 4
  br label %31

29:                                               ; preds = %15
  %30 = bitcast %union.anon.1* %16 to %"class.WTF::Vector.6"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"* %30, i16* nonnull dereferenceable(2) %3) #8
  br label %31

31:                                               ; preds = %22, %29
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10)
  br label %59

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #8
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %54, label %47, !prof !2

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = zext i32 %43 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 %1, i8* %51, align 1
  %52 = load i32, i32* %42, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %42, align 4
  br label %55

54:                                               ; preds = %40
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"* %41, i8* nonnull dereferenceable(1) %4) #8
  br label %55

55:                                               ; preds = %47, %54
  %56 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 8
  br label %59

59:                                               ; preds = %55, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #8
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #8
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #8
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #8
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !2

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #8
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.2"* %18, i8* nonnull %6) #8
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #8
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !4

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #8
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !4

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.2"* %46, i8* %42) #8
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #8
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.2"*, i8*) local_unnamed_addr #6 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #8
  ret void
}

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.6"*, i16* dereferenceable(2)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.6"* %0, i32 %5) #8
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.6"* %0, i32 %5) #8
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.6"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #8
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.6"* %0, i32 %27) #8
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.6"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !2

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #8
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.7"* %19, i16* nonnull %6) #8
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #8
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #8
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.7"* %53, i16* %48) #8
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.7"*, i16*) local_unnamed_addr #6 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #8
  ret void
}

declare zeroext i1 @_ZN5blink17ConsumeHTMLEntityERNS_15SegmentedStringERNS_17DecodedHTMLEntityERbDs(%"class.blink::SegmentedString"* dereferenceable(88), %"class.blink::DecodedHTMLEntity"* dereferenceable(12), i8* dereferenceable(1), i16 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"*, %"class.WTF::StringBuilder"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %94, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %68

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %68, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #8
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %23
  tail call void @llvm.trap() #8
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %35

35:                                               ; preds = %33, %18
  %36 = ptrtoint %"class.WTF::StringImpl"* %16 to i64
  %37 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  store i64 %36, i64* %37, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %41
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %49, %48 ], [ %47, %41 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #8
  br label %54

54:                                               ; preds = %35, %50, %53
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  br label %60

60:                                               ; preds = %54, %57
  %61 = phi i32 [ %59, %57 ], [ 0, %54 ]
  store i32 %61, i32* %7, align 8
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %66 = trunc i32 %64 to i8
  %67 = and i8 %66, 1
  store i8 %67, i8* %65, align 4
  br label %94

68:                                               ; preds = %10, %6, %14
  %69 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 3
  %70 = load i8, i8* %69, align 4, !range !3
  %71 = icmp eq i8 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %71, label %84, label %75

75:                                               ; preds = %68
  br i1 %74, label %79, label %76

76:                                               ; preds = %75
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  %78 = bitcast %"class.WTF::StringImpl"* %77 to i8*
  br label %82

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  br label %82

82:                                               ; preds = %76, %79
  %83 = phi i8* [ %81, %79 ], [ %78, %76 ]
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %83, i32 %4) #8
  br label %94

84:                                               ; preds = %68
  br i1 %74, label %88, label %85

85:                                               ; preds = %84
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  %87 = bitcast %"class.WTF::StringImpl"* %86 to i16*
  br label %92

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 1
  %90 = bitcast %union.anon.1* %89 to i16**
  %91 = load i16*, i16** %90, align 8
  br label %92

92:                                               ; preds = %85, %88
  %93 = phi i16* [ %91, %88 ], [ %87, %85 ]
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %93, i32 %4) #8
  br label %94

94:                                               ; preds = %2, %60, %92, %82
  ret void
}

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink23InputStreamPreprocessorINS_12VTTTokenizerEE32ProcessNextInputSpecialCharacterERNS_15SegmentedStringERDs(%"class.blink::InputStreamPreprocessor"*, %"class.blink::SegmentedString"* dereferenceable(88), i16* dereferenceable(2)) local_unnamed_addr #0 comdat align 2 {
  %4 = load i16, i16* %2, align 2
  %5 = getelementptr inbounds %"class.blink::InputStreamPreprocessor", %"class.blink::InputStreamPreprocessor"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 3
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 3
  %8 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 1
  %9 = bitcast %"class.blink::SegmentedString"* %1 to i64*
  %10 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 4
  %13 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 2
  %14 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 2
  %16 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 7
  %17 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 6
  br label %18

18:                                               ; preds = %95, %3
  %19 = phi i16 [ %96, %95 ], [ %4, %3 ]
  %20 = icmp eq i16 %19, 10
  br i1 %20, label %21, label %65

21:                                               ; preds = %18
  %22 = load i8, i8* %5, align 8, !range !3
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %69, label %24

24:                                               ; preds = %21
  store i8 0, i8* %5, align 8
  %25 = load i8, i8* %6, align 8, !range !3
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %29, !prof !2

27:                                               ; preds = %24
  %28 = load i8*, i8** %14, align 8
  br label %44

29:                                               ; preds = %24
  %30 = load i32, i32* %7, align 8
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %7, align 8
  %32 = load i32, i32* %8, align 8
  %33 = load i64, i64* %9, align 8
  %34 = load i64, i64* %11, align 8
  %35 = sub i64 %33, %34
  %36 = trunc i64 %35 to i32
  %37 = load i8, i8* %12, align 1, !range !3
  %38 = xor i8 %37, 1
  %39 = zext i8 %38 to i32
  %40 = ashr i32 %36, %39
  %41 = add i32 %32, 1
  %42 = add i32 %41, %40
  store i32 %42, i32* %13, align 4
  %43 = inttoptr i64 %33 to i8*
  br label %44

44:                                               ; preds = %29, %27
  %45 = phi i8* [ %28, %27 ], [ %43, %29 ]
  %46 = load i8*, i8** %15, align 8
  %47 = icmp ult i8* %45, %46
  br i1 %47, label %48, label %59, !prof !4

48:                                               ; preds = %44
  %49 = load i8, i8* %12, align 1, !range !3
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %55, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %52, i8** %14, align 8
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i16
  br label %61

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8, i8* %45, i64 2
  %57 = bitcast i8* %56 to i16*
  store i8* %56, i8** %14, align 8
  %58 = load i16, i16* %57, align 2
  br label %61

59:                                               ; preds = %44
  %60 = tail call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %1) #8
  br label %61

61:                                               ; preds = %51, %55, %59
  %62 = phi i16 [ %60, %59 ], [ %54, %51 ], [ %58, %55 ]
  store i16 %62, i16* %2, align 2
  %63 = load i8, i8* %16, align 1, !range !3
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %99

65:                                               ; preds = %18, %61
  %66 = phi i16 [ %62, %61 ], [ %19, %18 ]
  %67 = icmp eq i16 %66, 13
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  store i16 10, i16* %2, align 2
  store i8 1, i8* %5, align 8
  br label %99

69:                                               ; preds = %21, %65
  store i8 0, i8* %5, align 8
  %70 = load i16, i16* %2, align 2
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %99

72:                                               ; preds = %69
  %73 = load i8, i8* %17, align 8, !range !3
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %78, label %75

75:                                               ; preds = %72
  %76 = tail call i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"* %1) #8
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %99, label %78

78:                                               ; preds = %72, %75
  %79 = load i8*, i8** %14, align 8
  %80 = load i8*, i8** %15, align 8
  %81 = icmp ult i8* %79, %80
  br i1 %81, label %82, label %93, !prof !4

82:                                               ; preds = %78
  %83 = load i8, i8* %12, align 1, !range !3
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds i8, i8* %79, i64 1
  store i8* %86, i8** %14, align 8
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  br label %95

89:                                               ; preds = %82
  %90 = getelementptr inbounds i8, i8* %79, i64 2
  %91 = bitcast i8* %90 to i16*
  store i8* %90, i8** %14, align 8
  %92 = load i16, i16* %91, align 2
  br label %95

93:                                               ; preds = %78
  %94 = tail call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %1) #8
  br label %95

95:                                               ; preds = %85, %89, %93
  %96 = phi i16 [ %94, %93 ], [ %88, %85 ], [ %92, %89 ]
  store i16 %96, i16* %2, align 2
  %97 = load i8, i8* %16, align 1, !range !3
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %18, label %99

99:                                               ; preds = %61, %95, %75, %69, %68
  %100 = phi i1 [ true, %68 ], [ true, %75 ], [ true, %69 ], [ false, %95 ], [ false, %61 ]
  ret i1 %100
}

declare i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5blink8VTTToken11StringTokenERKN3WTF6StringE: argument 0"}
!7 = distinct !{!7, !"_ZN5blink8VTTToken11StringTokenERKN3WTF6StringE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN5blink8VTTToken11StringTokenERKN3WTF6StringE: argument 0"}
!10 = distinct !{!10, !"_ZN5blink8VTTToken11StringTokenERKN3WTF6StringE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_: argument 0"}
!13 = distinct !{!13, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_: argument 0"}
!16 = distinct !{!16, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_: argument 0"}
!19 = distinct !{!19, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_: argument 0"}
!22 = distinct !{!22, !"_ZN5blink8VTTToken8StartTagERKN3WTF6StringERKNS1_12AtomicStringES7_"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN5blink8VTTToken6EndTagERKN3WTF6StringE: argument 0"}
!25 = distinct !{!25, !"_ZN5blink8VTTToken6EndTagERKN3WTF6StringE"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN5blink8VTTToken12TimestampTagERKN3WTF6StringE: argument 0"}
!28 = distinct !{!28, !"_ZN5blink8VTTToken12TimestampTagERKN3WTF6StringE"}
