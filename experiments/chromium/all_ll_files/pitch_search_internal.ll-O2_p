; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/pitch_search_internal.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/pitch_search_internal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array.19" = type { [14 x i32] }
%"class.webrtc::rnn_vad::VectorMath" = type { %"struct.webrtc::AvailableCpuFeatures" }
%"struct.webrtc::AvailableCpuFeatures" = type { i8, i8, i8 }
%"struct.std::__1::array" = type { [294 x float] }
%"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex" = type { %"struct.std::__1::array.12", i32 }
%"struct.std::__1::array.12" = type { [10 x i32] }

@_ZN6webrtc7rnn_vad12_GLOBAL__N_123kSubHarmonicMultipliersE = internal unnamed_addr constant %"struct.std::__1::array.19" { [14 x i32] [i32 3, i32 2, i32 3, i32 2, i32 5, i32 2, i32 3, i32 2, i32 3, i32 2, i32 5, i32 2, i32 3, i32 2] }, align 4
@_ZZN6webrtc7rnn_vad12_GLOBAL__N_137IsAlternativePitchStrongerThanInitialENS0_9PitchInfoES2_S2_iE29kInitialPitchPeriodThresholds = internal unnamed_addr constant %"struct.std::__1::array.19" { [14 x i32] [i32 20, i32 45, i32 80, i32 125, i32 180, i32 245, i32 320, i32 405, i32 500, i32 605, i32 720, i32 845, i32 980, i32 1125] }, align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad10Decimate2xEN3rtc9ArrayViewIKfLl864EEENS2_IfLl432EEE(float*, float*) local_unnamed_addr #0 {
  %3 = getelementptr float, float* %1, i64 432
  %4 = getelementptr float, float* %0, i64 863
  %5 = icmp ugt float* %4, %1
  %6 = icmp ugt float* %3, %0
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %10

8:                                                ; preds = %10, %2
  %9 = phi i64 [ 0, %2 ], [ 424, %10 ]
  br label %30

10:                                               ; preds = %2, %61
  %11 = phi i64 [ %77, %61 ], [ 0, %2 ]
  %12 = shl nuw nsw i64 %11, 1
  %13 = shl nuw i64 %11, 1
  %14 = or i64 %13, 8
  %15 = getelementptr inbounds float, float* %0, i64 %12
  %16 = getelementptr inbounds float, float* %0, i64 %14
  %17 = bitcast float* %15 to <8 x i32>*
  %18 = bitcast float* %16 to <8 x i32>*
  %19 = load <8 x i32>, <8 x i32>* %17, align 4
  %20 = load <8 x i32>, <8 x i32>* %18, align 4
  %21 = shufflevector <8 x i32> %19, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %22 = shufflevector <8 x i32> %20, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %23 = getelementptr inbounds float, float* %1, i64 %11
  %24 = bitcast float* %23 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %24, align 4, !alias.scope !2, !noalias !5
  %25 = getelementptr inbounds float, float* %23, i64 4
  %26 = bitcast float* %25 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %26, align 4, !alias.scope !2, !noalias !5
  %27 = or i64 %11, 8
  %28 = icmp eq i64 %27, 424
  br i1 %28, label %8, label %61, !llvm.loop !7

29:                                               ; preds = %30
  ret void

30:                                               ; preds = %30, %8
  %31 = phi i64 [ %9, %8 ], [ %59, %30 ]
  %32 = shl nuw nsw i64 %31, 1
  %33 = getelementptr inbounds float, float* %0, i64 %32
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds float, float* %1, i64 %31
  %37 = bitcast float* %36 to i32*
  store i32 %35, i32* %37, align 4
  %38 = or i64 %31, 1
  %39 = shl nuw nsw i64 %38, 1
  %40 = getelementptr inbounds float, float* %0, i64 %39
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds float, float* %1, i64 %38
  %44 = bitcast float* %43 to i32*
  store i32 %42, i32* %44, align 4
  %45 = or i64 %31, 2
  %46 = shl nuw nsw i64 %45, 1
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds float, float* %1, i64 %45
  %51 = bitcast float* %50 to i32*
  store i32 %49, i32* %51, align 4
  %52 = or i64 %31, 3
  %53 = shl nuw nsw i64 %52, 1
  %54 = getelementptr inbounds float, float* %0, i64 %53
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds float, float* %1, i64 %52
  %58 = bitcast float* %57 to i32*
  store i32 %56, i32* %58, align 4
  %59 = add nuw nsw i64 %31, 4
  %60 = icmp eq i64 %59, 432
  br i1 %60, label %29, label %30, !llvm.loop !9

61:                                               ; preds = %10
  %62 = shl nuw nsw i64 %27, 1
  %63 = shl nuw i64 %27, 1
  %64 = or i64 %63, 8
  %65 = getelementptr inbounds float, float* %0, i64 %62
  %66 = getelementptr inbounds float, float* %0, i64 %64
  %67 = bitcast float* %65 to <8 x i32>*
  %68 = bitcast float* %66 to <8 x i32>*
  %69 = load <8 x i32>, <8 x i32>* %67, align 4
  %70 = load <8 x i32>, <8 x i32>* %68, align 4
  %71 = shufflevector <8 x i32> %69, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %72 = shufflevector <8 x i32> %70, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %73 = getelementptr inbounds float, float* %1, i64 %27
  %74 = bitcast float* %73 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %74, align 4, !alias.scope !2, !noalias !5
  %75 = getelementptr inbounds float, float* %73, i64 4
  %76 = bitcast float* %75 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %76, align 4, !alias.scope !2, !noalias !5
  %77 = add nuw nsw i64 %11, 16
  br label %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad38ComputeSlidingFrameSquareEnergies24kHzEN3rtc9ArrayViewIKfLl864EEENS2_IfLl385EEENS_20AvailableCpuFeaturesE(float*, float*, i24) local_unnamed_addr #2 {
  %4 = alloca %"class.webrtc::rnn_vad::VectorMath", align 4
  %5 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %5) #5
  %6 = bitcast %"class.webrtc::rnn_vad::VectorMath"* %4 to i24*
  store i24 %2, i24* %6, align 4
  %7 = and i24 %2, 65280
  %8 = icmp eq i24 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %4, float* %0, i64 480, float* %0, i64 480) #5
  br label %100

11:                                               ; preds = %3
  %12 = trunc i24 %2 to i8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %60, label %20

14:                                               ; preds = %20
  %15 = shufflevector <4 x float> %57, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %16 = fadd <4 x float> %57, %15
  %17 = shufflevector <4 x float> %16, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %18 = fadd <4 x float> %16, %17
  %19 = extractelement <4 x float> %18, i32 0
  br label %100

20:                                               ; preds = %11, %20
  %21 = phi i64 [ %58, %20 ], [ 0, %11 ]
  %22 = phi <4 x float> [ %57, %20 ], [ zeroinitializer, %11 ]
  %23 = getelementptr inbounds float, float* %0, i64 %21
  %24 = bitcast float* %23 to <4 x float>*
  %25 = load <4 x float>, <4 x float>* %24, align 1
  %26 = fmul <4 x float> %25, %25
  %27 = fadd <4 x float> %22, %26
  %28 = or i64 %21, 4
  %29 = getelementptr inbounds float, float* %0, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %31 = load <4 x float>, <4 x float>* %30, align 1
  %32 = fmul <4 x float> %31, %31
  %33 = fadd <4 x float> %27, %32
  %34 = add nuw nsw i64 %21, 8
  %35 = getelementptr inbounds float, float* %0, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 1
  %38 = fmul <4 x float> %37, %37
  %39 = fadd <4 x float> %33, %38
  %40 = add nuw nsw i64 %21, 12
  %41 = getelementptr inbounds float, float* %0, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 1
  %44 = fmul <4 x float> %43, %43
  %45 = fadd <4 x float> %39, %44
  %46 = add nuw nsw i64 %21, 16
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 1
  %50 = fmul <4 x float> %49, %49
  %51 = fadd <4 x float> %45, %50
  %52 = add nuw nsw i64 %21, 20
  %53 = getelementptr inbounds float, float* %0, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 1
  %56 = fmul <4 x float> %55, %55
  %57 = fadd <4 x float> %51, %56
  %58 = add nuw nsw i64 %21, 24
  %59 = icmp ult i64 %58, 480
  br i1 %59, label %20, label %14

60:                                               ; preds = %11, %60
  %61 = phi float [ %96, %60 ], [ 0.000000e+00, %11 ]
  %62 = phi float* [ %98, %60 ], [ %0, %11 ]
  %63 = phi i64 [ %97, %60 ], [ 0, %11 ]
  %64 = getelementptr inbounds float, float* %0, i64 %63
  %65 = load float, float* %64, align 4
  %66 = load float, float* %62, align 4
  %67 = fmul float %65, %66
  %68 = fadd float %61, %67
  %69 = add nuw nsw i64 %63, 1
  %70 = getelementptr inbounds float, float* %62, i64 1
  %71 = getelementptr inbounds float, float* %0, i64 %69
  %72 = load float, float* %71, align 4
  %73 = load float, float* %70, align 4
  %74 = fmul float %72, %73
  %75 = fadd float %68, %74
  %76 = add nuw nsw i64 %63, 2
  %77 = getelementptr inbounds float, float* %62, i64 2
  %78 = getelementptr inbounds float, float* %0, i64 %76
  %79 = load float, float* %78, align 4
  %80 = load float, float* %77, align 4
  %81 = fmul float %79, %80
  %82 = fadd float %75, %81
  %83 = add nuw nsw i64 %63, 3
  %84 = getelementptr inbounds float, float* %62, i64 3
  %85 = getelementptr inbounds float, float* %0, i64 %83
  %86 = load float, float* %85, align 4
  %87 = load float, float* %84, align 4
  %88 = fmul float %86, %87
  %89 = fadd float %82, %88
  %90 = add nuw nsw i64 %63, 4
  %91 = getelementptr inbounds float, float* %62, i64 4
  %92 = getelementptr inbounds float, float* %0, i64 %90
  %93 = load float, float* %92, align 4
  %94 = load float, float* %91, align 4
  %95 = fmul float %93, %94
  %96 = fadd float %89, %95
  %97 = add nuw nsw i64 %63, 5
  %98 = getelementptr inbounds float, float* %62, i64 5
  %99 = icmp eq i64 %97, 480
  br i1 %99, label %100, label %60

100:                                              ; preds = %60, %14, %9
  %101 = phi float [ %10, %9 ], [ %19, %14 ], [ %96, %60 ]
  store float %101, float* %1, align 4
  br label %103

102:                                              ; preds = %103
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %5) #5
  ret void

103:                                              ; preds = %103, %100
  %104 = phi float [ %101, %100 ], [ %138, %103 ]
  %105 = phi i64 [ 0, %100 ], [ %134, %103 ]
  %106 = getelementptr inbounds float, float* %0, i64 %105
  %107 = load float, float* %106, align 4
  %108 = fmul float %107, %107
  %109 = fsub float %104, %108
  %110 = add nuw nsw i64 %105, 480
  %111 = getelementptr inbounds float, float* %0, i64 %110
  %112 = load float, float* %111, align 4
  %113 = fmul float %112, %112
  %114 = fadd float %109, %113
  %115 = fcmp ogt float %114, 1.000000e+00
  %116 = bitcast float %114 to i32
  %117 = select i1 %115, i32 %116, i32 1065353216
  %118 = or i64 %105, 1
  %119 = getelementptr inbounds float, float* %1, i64 %118
  %120 = bitcast float* %119 to i32*
  store i32 %117, i32* %120, align 4
  %121 = bitcast i32 %117 to float
  %122 = getelementptr inbounds float, float* %0, i64 %118
  %123 = load float, float* %122, align 4
  %124 = fmul float %123, %123
  %125 = fsub float %121, %124
  %126 = add nuw nsw i64 %105, 481
  %127 = getelementptr inbounds float, float* %0, i64 %126
  %128 = load float, float* %127, align 4
  %129 = fmul float %128, %128
  %130 = fadd float %125, %129
  %131 = fcmp ogt float %130, 1.000000e+00
  %132 = bitcast float %130 to i32
  %133 = select i1 %131, i32 %132, i32 1065353216
  %134 = add nuw nsw i64 %105, 2
  %135 = getelementptr inbounds float, float* %1, i64 %134
  %136 = bitcast float* %135 to i32*
  store i32 %133, i32* %136, align 4
  %137 = icmp eq i64 %134, 384
  %138 = bitcast i32 %133 to float
  br i1 %137, label %102, label %103
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc7rnn_vad23ComputePitchPeriod12kHzEN3rtc9ArrayViewIKfLl432EEENS2_IS3_Ll147EEENS_20AvailableCpuFeaturesE(float*, float*, i24) local_unnamed_addr #2 {
  %4 = alloca %"class.webrtc::rnn_vad::VectorMath", align 4
  %5 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %4, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %5) #5
  %6 = bitcast %"class.webrtc::rnn_vad::VectorMath"* %4 to i24*
  store i24 %2, i24* %6, align 4
  %7 = and i24 %2, 65280
  %8 = icmp eq i24 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %4, float* %0, i64 241, float* %0, i64 241) #5
  br label %75

11:                                               ; preds = %3
  %12 = trunc i24 %2 to i8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %64, label %24

14:                                               ; preds = %24
  %15 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %16 = fadd <4 x float> %61, %15
  %17 = shufflevector <4 x float> %16, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %18 = fadd <4 x float> %16, %17
  %19 = extractelement <4 x float> %18, i32 0
  %20 = getelementptr inbounds float, float* %0, i64 240
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, %21
  %23 = fadd float %19, %22
  br label %75

24:                                               ; preds = %11, %24
  %25 = phi i64 [ %62, %24 ], [ 0, %11 ]
  %26 = phi <4 x float> [ %61, %24 ], [ zeroinitializer, %11 ]
  %27 = getelementptr inbounds float, float* %0, i64 %25
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 1
  %30 = fmul <4 x float> %29, %29
  %31 = fadd <4 x float> %26, %30
  %32 = or i64 %25, 4
  %33 = getelementptr inbounds float, float* %0, i64 %32
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 1
  %36 = fmul <4 x float> %35, %35
  %37 = fadd <4 x float> %31, %36
  %38 = add nuw nsw i64 %25, 8
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 1
  %42 = fmul <4 x float> %41, %41
  %43 = fadd <4 x float> %37, %42
  %44 = add nuw nsw i64 %25, 12
  %45 = getelementptr inbounds float, float* %0, i64 %44
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 1
  %48 = fmul <4 x float> %47, %47
  %49 = fadd <4 x float> %43, %48
  %50 = add nuw nsw i64 %25, 16
  %51 = getelementptr inbounds float, float* %0, i64 %50
  %52 = bitcast float* %51 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 1
  %54 = fmul <4 x float> %53, %53
  %55 = fadd <4 x float> %49, %54
  %56 = add nuw nsw i64 %25, 20
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 1
  %60 = fmul <4 x float> %59, %59
  %61 = fadd <4 x float> %55, %60
  %62 = add nuw nsw i64 %25, 24
  %63 = icmp ult i64 %62, 240
  br i1 %63, label %24, label %14

64:                                               ; preds = %11, %133
  %65 = phi float [ %153, %133 ], [ 0.000000e+00, %11 ]
  %66 = phi float* [ %155, %133 ], [ %0, %11 ]
  %67 = phi i64 [ %154, %133 ], [ 0, %11 ]
  %68 = getelementptr inbounds float, float* %0, i64 %67
  %69 = load float, float* %68, align 4
  %70 = load float, float* %66, align 4
  %71 = fmul float %69, %70
  %72 = fadd float %65, %71
  %73 = or i64 %67, 1
  %74 = icmp eq i64 %73, 241
  br i1 %74, label %75, label %133

75:                                               ; preds = %64, %14, %9
  %76 = phi float [ %10, %9 ], [ %23, %14 ], [ %72, %64 ]
  %77 = fadd float %76, 1.000000e+00
  %78 = bitcast float %77 to i32
  br label %84

79:                                               ; preds = %111
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %5) #5
  %80 = zext i32 %117 to i64
  %81 = shl nuw i64 %80, 32
  %82 = zext i32 %114 to i64
  %83 = or i64 %81, %82
  ret i64 %83

84:                                               ; preds = %111, %75
  %85 = phi float [ %77, %75 ], [ %132, %111 ]
  %86 = phi i32 [ %78, %75 ], [ %129, %111 ]
  %87 = phi i64 [ 0, %75 ], [ %130, %111 ]
  %88 = phi i32 [ 1, %75 ], [ %117, %111 ]
  %89 = phi float [ -1.000000e+00, %75 ], [ %116, %111 ]
  %90 = phi i32 [ 0, %75 ], [ %115, %111 ]
  %91 = phi i32 [ 0, %75 ], [ %114, %111 ]
  %92 = phi float [ -1.000000e+00, %75 ], [ %113, %111 ]
  %93 = phi i32 [ 0, %75 ], [ %112, %111 ]
  %94 = getelementptr inbounds float, float* %1, i64 %87
  %95 = load float, float* %94, align 4
  %96 = fcmp ogt float %95, 0.000000e+00
  br i1 %96, label %97, label %111

97:                                               ; preds = %84
  %98 = fmul float %95, %95
  %99 = bitcast i32 %90 to float
  %100 = fmul float %98, %99
  %101 = bitcast i32 %86 to float
  %102 = fmul float %89, %101
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %104, label %111

104:                                              ; preds = %97
  %105 = bitcast i32 %93 to float
  %106 = fmul float %98, %105
  %107 = fmul float %92, %101
  %108 = fcmp ogt float %106, %107
  %109 = trunc i64 %87 to i32
  br i1 %108, label %111, label %110

110:                                              ; preds = %104
  br label %111

111:                                              ; preds = %97, %110, %104, %84
  %112 = phi i32 [ %93, %84 ], [ %93, %110 ], [ %93, %97 ], [ %86, %104 ]
  %113 = phi float [ %92, %84 ], [ %92, %110 ], [ %92, %97 ], [ %98, %104 ]
  %114 = phi i32 [ %91, %84 ], [ %91, %110 ], [ %91, %97 ], [ %109, %104 ]
  %115 = phi i32 [ %90, %84 ], [ %86, %110 ], [ %90, %97 ], [ %93, %104 ]
  %116 = phi float [ %89, %84 ], [ %98, %110 ], [ %89, %97 ], [ %92, %104 ]
  %117 = phi i32 [ %88, %84 ], [ %109, %110 ], [ %88, %97 ], [ %91, %104 ]
  %118 = getelementptr inbounds float, float* %0, i64 %87
  %119 = load float, float* %118, align 4
  %120 = add nuw nsw i64 %87, 240
  %121 = getelementptr inbounds float, float* %0, i64 %120
  %122 = load float, float* %121, align 4
  %123 = fmul float %119, %119
  %124 = fsub float %85, %123
  %125 = fmul float %122, %122
  %126 = fadd float %125, %124
  %127 = fcmp ogt float %126, 0.000000e+00
  %128 = bitcast float %126 to i32
  %129 = select i1 %127, i32 %128, i32 0
  %130 = add nuw nsw i64 %87, 1
  %131 = icmp eq i64 %130, 147
  %132 = bitcast i32 %129 to float
  br i1 %131, label %79, label %84

133:                                              ; preds = %64
  %134 = getelementptr inbounds float, float* %66, i64 1
  %135 = getelementptr inbounds float, float* %0, i64 %73
  %136 = load float, float* %135, align 4
  %137 = load float, float* %134, align 4
  %138 = fmul float %136, %137
  %139 = fadd float %72, %138
  %140 = or i64 %67, 2
  %141 = getelementptr inbounds float, float* %66, i64 2
  %142 = getelementptr inbounds float, float* %0, i64 %140
  %143 = load float, float* %142, align 4
  %144 = load float, float* %141, align 4
  %145 = fmul float %143, %144
  %146 = fadd float %139, %145
  %147 = or i64 %67, 3
  %148 = getelementptr inbounds float, float* %66, i64 3
  %149 = getelementptr inbounds float, float* %0, i64 %147
  %150 = load float, float* %149, align 4
  %151 = load float, float* %148, align 4
  %152 = fmul float %150, %151
  %153 = fadd float %146, %152
  %154 = add nuw nsw i64 %67, 4
  %155 = getelementptr inbounds float, float* %66, i64 4
  br label %64
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc7rnn_vad23ComputePitchPeriod48kHzEN3rtc9ArrayViewIKfLl864EEENS2_IS3_Ll385EEENS0_21CandidatePitchPeriodsENS_20AvailableCpuFeaturesE(float*, float*, i64, i24) local_unnamed_addr #2 {
  %5 = alloca %"struct.std::__1::array", align 4
  %6 = alloca %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex", align 4
  %7 = alloca %"class.webrtc::rnn_vad::VectorMath", align 4
  %8 = trunc i64 %2 to i32
  %9 = lshr i64 %2, 32
  %10 = trunc i64 %9 to i32
  %11 = bitcast %"struct.std::__1::array"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1176, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -1, i64 1176, i1 false)
  %12 = bitcast %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 -86, i64 40, i1 false)
  %13 = getelementptr inbounds %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex", %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex"* %6, i64 0, i32 1
  store i32 0, i32* %13, align 4
  %14 = icmp sgt i32 %8, %10
  %15 = select i1 %14, i32 %10, i32 %8
  %16 = icmp sgt i32 %15, 2
  %17 = select i1 %16, i32 %15, i32 2
  %18 = add nsw i32 %17, -2
  %19 = icmp slt i32 %15, 291
  %20 = select i1 %19, i32 %15, i32 291
  %21 = add nsw i32 %20, 2
  %22 = zext i32 %21 to i64
  %23 = shl nuw i64 %22, 32
  %24 = zext i32 %18 to i64
  %25 = or i64 %23, %24
  %26 = select i1 %14, i32 %8, i32 %10
  %27 = icmp sgt i32 %26, 2
  %28 = select i1 %27, i32 %26, i32 2
  %29 = add nsw i32 %28, -2
  %30 = icmp slt i32 %26, 291
  %31 = select i1 %30, i32 %26, i32 291
  %32 = add nsw i32 %31, 2
  %33 = zext i32 %32 to i64
  %34 = shl nuw i64 %33, 32
  %35 = zext i32 %29 to i64
  %36 = or i64 %34, %35
  %37 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %7, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %37) #5
  %38 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %7, i64 0, i32 0, i32 1
  %39 = bitcast %"class.webrtc::rnn_vad::VectorMath"* %7 to i24*
  store i24 %3, i24* %39, align 4
  %40 = add nsw i32 %20, 3
  %41 = icmp slt i32 %40, %29
  br i1 %41, label %191, label %42

42:                                               ; preds = %4
  %43 = or i64 %34, %24
  %44 = icmp sgt i32 %18, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %42
  %46 = shl nuw i64 %24, 32
  %47 = add i64 %46, -4294967296
  %48 = ashr exact i64 %47, 32
  %49 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %48
  store float 0.000000e+00, float* %49, align 4
  br label %50

50:                                               ; preds = %45, %42
  %51 = icmp slt i32 %32, 293
  br i1 %51, label %52, label %56

52:                                               ; preds = %50
  %53 = add i64 %43, 4294967296
  %54 = ashr i64 %53, 32
  %55 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %54
  store float 0.000000e+00, float* %55, align 4
  br label %56

56:                                               ; preds = %52, %50
  %57 = icmp sgt i32 %18, %32
  br i1 %57, label %487, label %58

58:                                               ; preds = %56
  %59 = sext i32 %18 to i64
  %60 = sext i32 %32 to i64
  %61 = getelementptr inbounds float, float* %0, i64 384
  br label %62

62:                                               ; preds = %182, %58
  %63 = phi i64 [ %189, %182 ], [ %59, %58 ]
  %64 = trunc i64 %63 to i32
  %65 = shl i64 %63, 32
  %66 = ashr exact i64 %65, 32
  %67 = icmp ult i32 %64, 864
  br i1 %67, label %68, label %75

68:                                               ; preds = %62
  %69 = getelementptr inbounds float, float* %0, i64 %66
  %70 = sub nuw nsw i64 864, %66
  %71 = icmp ult i64 %70, 480
  %72 = select i1 %71, i64 %70, i64 480
  %73 = icmp eq i64 %72, 0
  %74 = select i1 %73, float* null, float* %69
  br label %75

75:                                               ; preds = %68, %62
  %76 = phi i64 [ %72, %68 ], [ 0, %62 ]
  %77 = phi float* [ %74, %68 ], [ null, %62 ]
  %78 = load i8, i8* %38, align 1, !range !10
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %84, label %80

80:                                               ; preds = %75
  %81 = icmp eq i64 %76, 0
  %82 = select i1 %81, float* null, float* %77
  %83 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %7, float* %61, i64 480, float* %82, i64 %76) #5
  br label %182

84:                                               ; preds = %75
  %85 = load i8, i8* %37, align 4, !range !10
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %142, label %93

87:                                               ; preds = %93
  %88 = shufflevector <4 x float> %139, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %89 = fadd <4 x float> %139, %88
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %91 = fadd <4 x float> %89, %90
  %92 = extractelement <4 x float> %91, i32 0
  br label %182

93:                                               ; preds = %84, %93
  %94 = phi i64 [ %140, %93 ], [ 0, %84 ]
  %95 = phi <4 x float> [ %139, %93 ], [ zeroinitializer, %84 ]
  %96 = getelementptr inbounds float, float* %61, i64 %94
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 1
  %99 = getelementptr inbounds float, float* %77, i64 %94
  %100 = bitcast float* %99 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 1
  %102 = fmul <4 x float> %98, %101
  %103 = fadd <4 x float> %95, %102
  %104 = add nuw nsw i64 %94, 4
  %105 = getelementptr inbounds float, float* %61, i64 %104
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 1
  %108 = getelementptr inbounds float, float* %77, i64 %104
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 1
  %111 = fmul <4 x float> %107, %110
  %112 = fadd <4 x float> %103, %111
  %113 = add nuw nsw i64 %94, 8
  %114 = getelementptr inbounds float, float* %61, i64 %113
  %115 = bitcast float* %114 to <4 x float>*
  %116 = load <4 x float>, <4 x float>* %115, align 1
  %117 = getelementptr inbounds float, float* %77, i64 %113
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 1
  %120 = fmul <4 x float> %116, %119
  %121 = fadd <4 x float> %112, %120
  %122 = add nuw nsw i64 %94, 12
  %123 = getelementptr inbounds float, float* %61, i64 %122
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 1
  %126 = getelementptr inbounds float, float* %77, i64 %122
  %127 = bitcast float* %126 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 1
  %129 = fmul <4 x float> %125, %128
  %130 = fadd <4 x float> %121, %129
  %131 = add nuw nsw i64 %94, 16
  %132 = getelementptr inbounds float, float* %61, i64 %131
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 1
  %135 = getelementptr inbounds float, float* %77, i64 %131
  %136 = bitcast float* %135 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 1
  %138 = fmul <4 x float> %134, %137
  %139 = fadd <4 x float> %130, %138
  %140 = add nuw nsw i64 %94, 20
  %141 = icmp ult i64 %140, 480
  br i1 %141, label %93, label %87

142:                                              ; preds = %84, %142
  %143 = phi float [ %178, %142 ], [ 0.000000e+00, %84 ]
  %144 = phi float* [ %180, %142 ], [ %77, %84 ]
  %145 = phi i64 [ %179, %142 ], [ 384, %84 ]
  %146 = getelementptr inbounds float, float* %0, i64 %145
  %147 = load float, float* %146, align 4
  %148 = load float, float* %144, align 4
  %149 = fmul float %147, %148
  %150 = fadd float %143, %149
  %151 = add nuw nsw i64 %145, 1
  %152 = getelementptr inbounds float, float* %144, i64 1
  %153 = getelementptr inbounds float, float* %0, i64 %151
  %154 = load float, float* %153, align 4
  %155 = load float, float* %152, align 4
  %156 = fmul float %154, %155
  %157 = fadd float %150, %156
  %158 = add nuw nsw i64 %145, 2
  %159 = getelementptr inbounds float, float* %144, i64 2
  %160 = getelementptr inbounds float, float* %0, i64 %158
  %161 = load float, float* %160, align 4
  %162 = load float, float* %159, align 4
  %163 = fmul float %161, %162
  %164 = fadd float %157, %163
  %165 = add nuw nsw i64 %145, 3
  %166 = getelementptr inbounds float, float* %144, i64 3
  %167 = getelementptr inbounds float, float* %0, i64 %165
  %168 = load float, float* %167, align 4
  %169 = load float, float* %166, align 4
  %170 = fmul float %168, %169
  %171 = fadd float %164, %170
  %172 = add nuw nsw i64 %145, 4
  %173 = getelementptr inbounds float, float* %144, i64 4
  %174 = getelementptr inbounds float, float* %0, i64 %172
  %175 = load float, float* %174, align 4
  %176 = load float, float* %173, align 4
  %177 = fmul float %175, %176
  %178 = fadd float %171, %177
  %179 = add nuw nsw i64 %145, 5
  %180 = getelementptr inbounds float, float* %144, i64 5
  %181 = icmp eq i64 %179, 864
  br i1 %181, label %182, label %142

182:                                              ; preds = %142, %80, %87
  %183 = phi float [ %83, %80 ], [ %92, %87 ], [ %178, %142 ]
  %184 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %63
  store float %183, float* %184, align 4
  %185 = load i32, i32* %13, align 4
  %186 = add nsw i32 %185, 1
  store i32 %186, i32* %13, align 4
  %187 = sext i32 %185 to i64
  %188 = getelementptr inbounds %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex", %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex"* %6, i64 0, i32 0, i32 0, i64 %187
  store i32 %64, i32* %188, align 4
  %189 = add nsw i64 %63, 1
  %190 = icmp slt i64 %63, %60
  br i1 %190, label %62, label %487

191:                                              ; preds = %4
  %192 = icmp sgt i32 %18, 0
  br i1 %192, label %193, label %198

193:                                              ; preds = %191
  %194 = shl nuw i64 %24, 32
  %195 = add i64 %194, -4294967296
  %196 = ashr exact i64 %195, 32
  %197 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %196
  store float 0.000000e+00, float* %197, align 4
  br label %198

198:                                              ; preds = %193, %191
  %199 = icmp slt i32 %21, 293
  br i1 %199, label %200, label %204

200:                                              ; preds = %198
  %201 = add i64 %25, 4294967296
  %202 = ashr i64 %201, 32
  %203 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %202
  store float 0.000000e+00, float* %203, align 4
  br label %204

204:                                              ; preds = %200, %198
  %205 = icmp sgt i32 %18, %21
  br i1 %205, label %339, label %206

206:                                              ; preds = %204
  %207 = sext i32 %18 to i64
  %208 = sext i32 %21 to i64
  %209 = getelementptr inbounds float, float* %0, i64 384
  br label %210

210:                                              ; preds = %330, %206
  %211 = phi i64 [ %337, %330 ], [ %207, %206 ]
  %212 = trunc i64 %211 to i32
  %213 = shl i64 %211, 32
  %214 = ashr exact i64 %213, 32
  %215 = icmp ult i32 %212, 864
  br i1 %215, label %216, label %223

216:                                              ; preds = %210
  %217 = getelementptr inbounds float, float* %0, i64 %214
  %218 = sub nuw nsw i64 864, %214
  %219 = icmp ult i64 %218, 480
  %220 = select i1 %219, i64 %218, i64 480
  %221 = icmp eq i64 %220, 0
  %222 = select i1 %221, float* null, float* %217
  br label %223

223:                                              ; preds = %216, %210
  %224 = phi i64 [ %220, %216 ], [ 0, %210 ]
  %225 = phi float* [ %222, %216 ], [ null, %210 ]
  %226 = load i8, i8* %38, align 1, !range !10
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %232, label %228

228:                                              ; preds = %223
  %229 = icmp eq i64 %224, 0
  %230 = select i1 %229, float* null, float* %225
  %231 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %7, float* %209, i64 480, float* %230, i64 %224) #5
  br label %330

232:                                              ; preds = %223
  %233 = load i8, i8* %37, align 4, !range !10
  %234 = icmp eq i8 %233, 0
  br i1 %234, label %290, label %241

235:                                              ; preds = %241
  %236 = shufflevector <4 x float> %287, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %237 = fadd <4 x float> %287, %236
  %238 = shufflevector <4 x float> %237, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %239 = fadd <4 x float> %237, %238
  %240 = extractelement <4 x float> %239, i32 0
  br label %330

241:                                              ; preds = %232, %241
  %242 = phi i64 [ %288, %241 ], [ 0, %232 ]
  %243 = phi <4 x float> [ %287, %241 ], [ zeroinitializer, %232 ]
  %244 = getelementptr inbounds float, float* %209, i64 %242
  %245 = bitcast float* %244 to <4 x float>*
  %246 = load <4 x float>, <4 x float>* %245, align 1
  %247 = getelementptr inbounds float, float* %225, i64 %242
  %248 = bitcast float* %247 to <4 x float>*
  %249 = load <4 x float>, <4 x float>* %248, align 1
  %250 = fmul <4 x float> %246, %249
  %251 = fadd <4 x float> %243, %250
  %252 = add nuw nsw i64 %242, 4
  %253 = getelementptr inbounds float, float* %209, i64 %252
  %254 = bitcast float* %253 to <4 x float>*
  %255 = load <4 x float>, <4 x float>* %254, align 1
  %256 = getelementptr inbounds float, float* %225, i64 %252
  %257 = bitcast float* %256 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 1
  %259 = fmul <4 x float> %255, %258
  %260 = fadd <4 x float> %251, %259
  %261 = add nuw nsw i64 %242, 8
  %262 = getelementptr inbounds float, float* %209, i64 %261
  %263 = bitcast float* %262 to <4 x float>*
  %264 = load <4 x float>, <4 x float>* %263, align 1
  %265 = getelementptr inbounds float, float* %225, i64 %261
  %266 = bitcast float* %265 to <4 x float>*
  %267 = load <4 x float>, <4 x float>* %266, align 1
  %268 = fmul <4 x float> %264, %267
  %269 = fadd <4 x float> %260, %268
  %270 = add nuw nsw i64 %242, 12
  %271 = getelementptr inbounds float, float* %209, i64 %270
  %272 = bitcast float* %271 to <4 x float>*
  %273 = load <4 x float>, <4 x float>* %272, align 1
  %274 = getelementptr inbounds float, float* %225, i64 %270
  %275 = bitcast float* %274 to <4 x float>*
  %276 = load <4 x float>, <4 x float>* %275, align 1
  %277 = fmul <4 x float> %273, %276
  %278 = fadd <4 x float> %269, %277
  %279 = add nuw nsw i64 %242, 16
  %280 = getelementptr inbounds float, float* %209, i64 %279
  %281 = bitcast float* %280 to <4 x float>*
  %282 = load <4 x float>, <4 x float>* %281, align 1
  %283 = getelementptr inbounds float, float* %225, i64 %279
  %284 = bitcast float* %283 to <4 x float>*
  %285 = load <4 x float>, <4 x float>* %284, align 1
  %286 = fmul <4 x float> %282, %285
  %287 = fadd <4 x float> %278, %286
  %288 = add nuw nsw i64 %242, 20
  %289 = icmp ult i64 %288, 480
  br i1 %289, label %241, label %235

290:                                              ; preds = %232, %290
  %291 = phi float [ %326, %290 ], [ 0.000000e+00, %232 ]
  %292 = phi float* [ %328, %290 ], [ %225, %232 ]
  %293 = phi i64 [ %327, %290 ], [ 384, %232 ]
  %294 = getelementptr inbounds float, float* %0, i64 %293
  %295 = load float, float* %294, align 4
  %296 = load float, float* %292, align 4
  %297 = fmul float %295, %296
  %298 = fadd float %291, %297
  %299 = add nuw nsw i64 %293, 1
  %300 = getelementptr inbounds float, float* %292, i64 1
  %301 = getelementptr inbounds float, float* %0, i64 %299
  %302 = load float, float* %301, align 4
  %303 = load float, float* %300, align 4
  %304 = fmul float %302, %303
  %305 = fadd float %298, %304
  %306 = add nuw nsw i64 %293, 2
  %307 = getelementptr inbounds float, float* %292, i64 2
  %308 = getelementptr inbounds float, float* %0, i64 %306
  %309 = load float, float* %308, align 4
  %310 = load float, float* %307, align 4
  %311 = fmul float %309, %310
  %312 = fadd float %305, %311
  %313 = add nuw nsw i64 %293, 3
  %314 = getelementptr inbounds float, float* %292, i64 3
  %315 = getelementptr inbounds float, float* %0, i64 %313
  %316 = load float, float* %315, align 4
  %317 = load float, float* %314, align 4
  %318 = fmul float %316, %317
  %319 = fadd float %312, %318
  %320 = add nuw nsw i64 %293, 4
  %321 = getelementptr inbounds float, float* %292, i64 4
  %322 = getelementptr inbounds float, float* %0, i64 %320
  %323 = load float, float* %322, align 4
  %324 = load float, float* %321, align 4
  %325 = fmul float %323, %324
  %326 = fadd float %319, %325
  %327 = add nuw nsw i64 %293, 5
  %328 = getelementptr inbounds float, float* %292, i64 5
  %329 = icmp eq i64 %327, 864
  br i1 %329, label %330, label %290

330:                                              ; preds = %290, %228, %235
  %331 = phi float [ %231, %228 ], [ %240, %235 ], [ %326, %290 ]
  %332 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %211
  store float %331, float* %332, align 4
  %333 = load i32, i32* %13, align 4
  %334 = add nsw i32 %333, 1
  store i32 %334, i32* %13, align 4
  %335 = sext i32 %333 to i64
  %336 = getelementptr inbounds %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex", %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex"* %6, i64 0, i32 0, i32 0, i64 %335
  store i32 %212, i32* %336, align 4
  %337 = add nsw i64 %211, 1
  %338 = icmp slt i64 %211, %208
  br i1 %338, label %210, label %339

339:                                              ; preds = %330, %204
  %340 = icmp sgt i32 %29, 0
  br i1 %340, label %341, label %346

341:                                              ; preds = %339
  %342 = shl nuw i64 %35, 32
  %343 = add i64 %342, -4294967296
  %344 = ashr exact i64 %343, 32
  %345 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %344
  store float 0.000000e+00, float* %345, align 4
  br label %346

346:                                              ; preds = %341, %339
  %347 = icmp slt i32 %32, 293
  br i1 %347, label %348, label %352

348:                                              ; preds = %346
  %349 = add i64 %36, 4294967296
  %350 = ashr i64 %349, 32
  %351 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %350
  store float 0.000000e+00, float* %351, align 4
  br label %352

352:                                              ; preds = %348, %346
  %353 = icmp sgt i32 %29, %32
  br i1 %353, label %487, label %354

354:                                              ; preds = %352
  %355 = sext i32 %29 to i64
  %356 = sext i32 %32 to i64
  %357 = getelementptr inbounds float, float* %0, i64 384
  br label %358

358:                                              ; preds = %478, %354
  %359 = phi i64 [ %485, %478 ], [ %355, %354 ]
  %360 = trunc i64 %359 to i32
  %361 = shl i64 %359, 32
  %362 = ashr exact i64 %361, 32
  %363 = icmp ult i32 %360, 864
  br i1 %363, label %364, label %371

364:                                              ; preds = %358
  %365 = getelementptr inbounds float, float* %0, i64 %362
  %366 = sub nuw nsw i64 864, %362
  %367 = icmp ult i64 %366, 480
  %368 = select i1 %367, i64 %366, i64 480
  %369 = icmp eq i64 %368, 0
  %370 = select i1 %369, float* null, float* %365
  br label %371

371:                                              ; preds = %364, %358
  %372 = phi i64 [ %368, %364 ], [ 0, %358 ]
  %373 = phi float* [ %370, %364 ], [ null, %358 ]
  %374 = load i8, i8* %38, align 1, !range !10
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %380, label %376

376:                                              ; preds = %371
  %377 = icmp eq i64 %372, 0
  %378 = select i1 %377, float* null, float* %373
  %379 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %7, float* %357, i64 480, float* %378, i64 %372) #5
  br label %478

380:                                              ; preds = %371
  %381 = load i8, i8* %37, align 4, !range !10
  %382 = icmp eq i8 %381, 0
  br i1 %382, label %438, label %389

383:                                              ; preds = %389
  %384 = shufflevector <4 x float> %435, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %385 = fadd <4 x float> %435, %384
  %386 = shufflevector <4 x float> %385, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %387 = fadd <4 x float> %385, %386
  %388 = extractelement <4 x float> %387, i32 0
  br label %478

389:                                              ; preds = %380, %389
  %390 = phi i64 [ %436, %389 ], [ 0, %380 ]
  %391 = phi <4 x float> [ %435, %389 ], [ zeroinitializer, %380 ]
  %392 = getelementptr inbounds float, float* %357, i64 %390
  %393 = bitcast float* %392 to <4 x float>*
  %394 = load <4 x float>, <4 x float>* %393, align 1
  %395 = getelementptr inbounds float, float* %373, i64 %390
  %396 = bitcast float* %395 to <4 x float>*
  %397 = load <4 x float>, <4 x float>* %396, align 1
  %398 = fmul <4 x float> %394, %397
  %399 = fadd <4 x float> %391, %398
  %400 = add nuw nsw i64 %390, 4
  %401 = getelementptr inbounds float, float* %357, i64 %400
  %402 = bitcast float* %401 to <4 x float>*
  %403 = load <4 x float>, <4 x float>* %402, align 1
  %404 = getelementptr inbounds float, float* %373, i64 %400
  %405 = bitcast float* %404 to <4 x float>*
  %406 = load <4 x float>, <4 x float>* %405, align 1
  %407 = fmul <4 x float> %403, %406
  %408 = fadd <4 x float> %399, %407
  %409 = add nuw nsw i64 %390, 8
  %410 = getelementptr inbounds float, float* %357, i64 %409
  %411 = bitcast float* %410 to <4 x float>*
  %412 = load <4 x float>, <4 x float>* %411, align 1
  %413 = getelementptr inbounds float, float* %373, i64 %409
  %414 = bitcast float* %413 to <4 x float>*
  %415 = load <4 x float>, <4 x float>* %414, align 1
  %416 = fmul <4 x float> %412, %415
  %417 = fadd <4 x float> %408, %416
  %418 = add nuw nsw i64 %390, 12
  %419 = getelementptr inbounds float, float* %357, i64 %418
  %420 = bitcast float* %419 to <4 x float>*
  %421 = load <4 x float>, <4 x float>* %420, align 1
  %422 = getelementptr inbounds float, float* %373, i64 %418
  %423 = bitcast float* %422 to <4 x float>*
  %424 = load <4 x float>, <4 x float>* %423, align 1
  %425 = fmul <4 x float> %421, %424
  %426 = fadd <4 x float> %417, %425
  %427 = add nuw nsw i64 %390, 16
  %428 = getelementptr inbounds float, float* %357, i64 %427
  %429 = bitcast float* %428 to <4 x float>*
  %430 = load <4 x float>, <4 x float>* %429, align 1
  %431 = getelementptr inbounds float, float* %373, i64 %427
  %432 = bitcast float* %431 to <4 x float>*
  %433 = load <4 x float>, <4 x float>* %432, align 1
  %434 = fmul <4 x float> %430, %433
  %435 = fadd <4 x float> %426, %434
  %436 = add nuw nsw i64 %390, 20
  %437 = icmp ult i64 %436, 480
  br i1 %437, label %389, label %383

438:                                              ; preds = %380, %438
  %439 = phi float [ %474, %438 ], [ 0.000000e+00, %380 ]
  %440 = phi float* [ %476, %438 ], [ %373, %380 ]
  %441 = phi i64 [ %475, %438 ], [ 384, %380 ]
  %442 = getelementptr inbounds float, float* %0, i64 %441
  %443 = load float, float* %442, align 4
  %444 = load float, float* %440, align 4
  %445 = fmul float %443, %444
  %446 = fadd float %439, %445
  %447 = add nuw nsw i64 %441, 1
  %448 = getelementptr inbounds float, float* %440, i64 1
  %449 = getelementptr inbounds float, float* %0, i64 %447
  %450 = load float, float* %449, align 4
  %451 = load float, float* %448, align 4
  %452 = fmul float %450, %451
  %453 = fadd float %446, %452
  %454 = add nuw nsw i64 %441, 2
  %455 = getelementptr inbounds float, float* %440, i64 2
  %456 = getelementptr inbounds float, float* %0, i64 %454
  %457 = load float, float* %456, align 4
  %458 = load float, float* %455, align 4
  %459 = fmul float %457, %458
  %460 = fadd float %453, %459
  %461 = add nuw nsw i64 %441, 3
  %462 = getelementptr inbounds float, float* %440, i64 3
  %463 = getelementptr inbounds float, float* %0, i64 %461
  %464 = load float, float* %463, align 4
  %465 = load float, float* %462, align 4
  %466 = fmul float %464, %465
  %467 = fadd float %460, %466
  %468 = add nuw nsw i64 %441, 4
  %469 = getelementptr inbounds float, float* %440, i64 4
  %470 = getelementptr inbounds float, float* %0, i64 %468
  %471 = load float, float* %470, align 4
  %472 = load float, float* %469, align 4
  %473 = fmul float %471, %472
  %474 = fadd float %467, %473
  %475 = add nuw nsw i64 %441, 5
  %476 = getelementptr inbounds float, float* %440, i64 5
  %477 = icmp eq i64 %475, 864
  br i1 %477, label %478, label %438

478:                                              ; preds = %438, %376, %383
  %479 = phi float [ %379, %376 ], [ %388, %383 ], [ %474, %438 ]
  %480 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %359
  store float %479, float* %480, align 4
  %481 = load i32, i32* %13, align 4
  %482 = add nsw i32 %481, 1
  store i32 %482, i32* %13, align 4
  %483 = sext i32 %481 to i64
  %484 = getelementptr inbounds %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex", %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex"* %6, i64 0, i32 0, i32 0, i64 %483
  store i32 %360, i32* %484, align 4
  %485 = add nsw i64 %359, 1
  %486 = icmp slt i64 %359, %356
  br i1 %486, label %358, label %487

487:                                              ; preds = %182, %478, %352, %56
  %488 = getelementptr inbounds %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex", %"class.webrtc::rnn_vad::(anonymous namespace)::InvertedLagsIndex"* %6, i64 0, i32 0, i32 0, i64 0
  %489 = load i32, i32* %13, align 4
  %490 = icmp eq i32 %489, 0
  br i1 %490, label %558, label %491

491:                                              ; preds = %487
  %492 = sext i32 %489 to i64
  %493 = shl nsw i64 %492, 2
  %494 = add nsw i64 %493, -4
  %495 = lshr exact i64 %494, 2
  %496 = add nuw nsw i64 %495, 1
  %497 = and i64 %496, 1
  %498 = icmp eq i64 %494, 0
  br i1 %498, label %501, label %499

499:                                              ; preds = %491
  %500 = sub nuw nsw i64 %496, %497
  br label %527

501:                                              ; preds = %599, %491
  %502 = phi i32 [ undef, %491 ], [ %602, %599 ]
  %503 = phi i32* [ %488, %491 ], [ %603, %599 ]
  %504 = phi i32 [ 0, %491 ], [ %602, %599 ]
  %505 = phi float [ 0.000000e+00, %491 ], [ %601, %599 ]
  %506 = phi float [ -1.000000e+00, %491 ], [ %600, %599 ]
  %507 = icmp eq i64 %497, 0
  br i1 %507, label %522, label %508

508:                                              ; preds = %501
  %509 = load i32, i32* %503, align 4
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %510
  %512 = load float, float* %511, align 4
  %513 = fcmp ogt float %512, 0.000000e+00
  br i1 %513, label %514, label %522

514:                                              ; preds = %508
  %515 = fmul float %512, %512
  %516 = getelementptr inbounds float, float* %1, i64 %510
  %517 = load float, float* %516, align 4
  %518 = fmul float %505, %515
  %519 = fmul float %506, %517
  %520 = fcmp ogt float %518, %519
  %521 = select i1 %520, i32 %509, i32 %504
  br label %522

522:                                              ; preds = %514, %508, %501
  %523 = phi i32 [ %502, %501 ], [ %504, %508 ], [ %521, %514 ]
  %524 = icmp eq i32 %523, 0
  %525 = icmp sgt i32 %523, 292
  %526 = or i1 %524, %525
  br i1 %526, label %558, label %561

527:                                              ; preds = %599, %499
  %528 = phi i32* [ %488, %499 ], [ %603, %599 ]
  %529 = phi i32 [ 0, %499 ], [ %602, %599 ]
  %530 = phi float [ 0.000000e+00, %499 ], [ %601, %599 ]
  %531 = phi float [ -1.000000e+00, %499 ], [ %600, %599 ]
  %532 = phi i64 [ %500, %499 ], [ %604, %599 ]
  %533 = load i32, i32* %528, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %534
  %536 = load float, float* %535, align 4
  %537 = fcmp ogt float %536, 0.000000e+00
  br i1 %537, label %538, label %548

538:                                              ; preds = %527
  %539 = fmul float %536, %536
  %540 = getelementptr inbounds float, float* %1, i64 %534
  %541 = load float, float* %540, align 4
  %542 = fmul float %530, %539
  %543 = fmul float %531, %541
  %544 = fcmp ogt float %542, %543
  %545 = select i1 %544, float %539, float %531
  %546 = select i1 %544, float %541, float %530
  %547 = select i1 %544, i32 %533, i32 %529
  br label %548

548:                                              ; preds = %538, %527
  %549 = phi float [ %531, %527 ], [ %545, %538 ]
  %550 = phi float [ %530, %527 ], [ %546, %538 ]
  %551 = phi i32 [ %529, %527 ], [ %547, %538 ]
  %552 = getelementptr inbounds i32, i32* %528, i64 1
  %553 = load i32, i32* %552, align 4
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %554
  %556 = load float, float* %555, align 4
  %557 = fcmp ogt float %556, 0.000000e+00
  br i1 %557, label %589, label %599

558:                                              ; preds = %522, %487
  %559 = phi i32 [ %523, %522 ], [ 0, %487 ]
  %560 = shl nsw i32 %559, 1
  br label %587

561:                                              ; preds = %522
  %562 = add nsw i32 %523, 1
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %563
  %565 = load float, float* %564, align 4
  %566 = sext i32 %523 to i64
  %567 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %566
  %568 = load float, float* %567, align 4
  %569 = add nsw i32 %523, -1
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %570
  %572 = load float, float* %571, align 4
  %573 = fsub float %572, %565
  %574 = fsub float %568, %565
  %575 = fmul float %574, 0x3FE6666660000000
  %576 = fcmp ogt float %573, %575
  br i1 %576, label %583, label %577

577:                                              ; preds = %561
  %578 = fsub float %565, %572
  %579 = fsub float %568, %572
  %580 = fmul float %579, 0x3FE6666660000000
  %581 = fcmp ogt float %578, %580
  %582 = sext i1 %581 to i32
  br label %583

583:                                              ; preds = %577, %561
  %584 = phi i32 [ 1, %561 ], [ %582, %577 ]
  %585 = shl i32 %523, 1
  %586 = add nsw i32 %584, %585
  br label %587

587:                                              ; preds = %558, %583
  %588 = phi i32 [ %560, %558 ], [ %586, %583 ]
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %37) #5
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 1176, i8* nonnull %11) #5
  ret i32 %588

589:                                              ; preds = %548
  %590 = fmul float %556, %556
  %591 = getelementptr inbounds float, float* %1, i64 %554
  %592 = load float, float* %591, align 4
  %593 = fmul float %550, %590
  %594 = fmul float %549, %592
  %595 = fcmp ogt float %593, %594
  %596 = select i1 %595, float %590, float %549
  %597 = select i1 %595, float %592, float %550
  %598 = select i1 %595, i32 %553, i32 %551
  br label %599

599:                                              ; preds = %589, %548
  %600 = phi float [ %549, %548 ], [ %596, %589 ]
  %601 = phi float [ %550, %548 ], [ %597, %589 ]
  %602 = phi i32 [ %551, %548 ], [ %598, %589 ]
  %603 = getelementptr inbounds i32, i32* %528, i64 2
  %604 = add i64 %532, -2
  %605 = icmp eq i64 %604, 0
  br i1 %605, label %501, label %527
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc7rnn_vad31ComputeExtendedPitchPeriod48kHzEN3rtc9ArrayViewIKfLl864EEENS2_IS3_Ll385EEEiNS0_9PitchInfoENS_20AvailableCpuFeaturesE(float*, float*, i32, i64, i24) local_unnamed_addr #2 {
  %6 = alloca %"class.webrtc::rnn_vad::VectorMath", align 4
  %7 = trunc i64 %3 to i32
  %8 = getelementptr inbounds float, float* %1, i64 384
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %6, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %10) #5
  %11 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %6, i64 0, i32 0, i32 1
  %12 = bitcast %"class.webrtc::rnn_vad::VectorMath"* %6 to i24*
  store i24 %4, i24* %12, align 4
  %13 = sdiv i32 %2, 2
  %14 = icmp slt i32 %13, 383
  %15 = select i1 %14, i32 %13, i32 383
  %16 = sub nsw i32 384, %15
  %17 = getelementptr inbounds float, float* %0, i64 384
  %18 = sext i32 %16 to i64
  %19 = icmp ult i32 %16, 864
  %20 = trunc i24 %4 to i8
  br i1 %19, label %21, label %28

21:                                               ; preds = %5
  %22 = getelementptr inbounds float, float* %0, i64 %18
  %23 = sub nuw nsw i64 864, %18
  %24 = icmp ult i64 %23, 480
  %25 = select i1 %24, i64 %23, i64 480
  %26 = icmp eq i64 %25, 0
  %27 = select i1 %26, float* null, float* %22
  br label %28

28:                                               ; preds = %21, %5
  %29 = phi i64 [ %25, %21 ], [ 0, %5 ]
  %30 = phi float* [ %27, %21 ], [ null, %5 ]
  %31 = and i24 %4, 65280
  %32 = icmp eq i24 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %28
  %34 = icmp eq i64 %29, 0
  %35 = select i1 %34, float* null, float* %30
  %36 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %6, float* %17, i64 480, float* %35, i64 %29) #5
  br label %134

37:                                               ; preds = %28
  %38 = icmp eq i8 %20, 0
  br i1 %38, label %94, label %45

39:                                               ; preds = %45
  %40 = shufflevector <4 x float> %91, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %41 = fadd <4 x float> %91, %40
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = fadd <4 x float> %41, %42
  %44 = extractelement <4 x float> %43, i32 0
  br label %134

45:                                               ; preds = %37, %45
  %46 = phi i64 [ %92, %45 ], [ 0, %37 ]
  %47 = phi <4 x float> [ %91, %45 ], [ zeroinitializer, %37 ]
  %48 = getelementptr inbounds float, float* %17, i64 %46
  %49 = bitcast float* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 1
  %51 = getelementptr inbounds float, float* %30, i64 %46
  %52 = bitcast float* %51 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 1
  %54 = fmul <4 x float> %50, %53
  %55 = fadd <4 x float> %47, %54
  %56 = add nuw nsw i64 %46, 4
  %57 = getelementptr inbounds float, float* %17, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 1
  %60 = getelementptr inbounds float, float* %30, i64 %56
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 1
  %63 = fmul <4 x float> %59, %62
  %64 = fadd <4 x float> %55, %63
  %65 = add nuw nsw i64 %46, 8
  %66 = getelementptr inbounds float, float* %17, i64 %65
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 1
  %69 = getelementptr inbounds float, float* %30, i64 %65
  %70 = bitcast float* %69 to <4 x float>*
  %71 = load <4 x float>, <4 x float>* %70, align 1
  %72 = fmul <4 x float> %68, %71
  %73 = fadd <4 x float> %64, %72
  %74 = add nuw nsw i64 %46, 12
  %75 = getelementptr inbounds float, float* %17, i64 %74
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 1
  %78 = getelementptr inbounds float, float* %30, i64 %74
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 1
  %81 = fmul <4 x float> %77, %80
  %82 = fadd <4 x float> %73, %81
  %83 = add nuw nsw i64 %46, 16
  %84 = getelementptr inbounds float, float* %17, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 1
  %87 = getelementptr inbounds float, float* %30, i64 %83
  %88 = bitcast float* %87 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 1
  %90 = fmul <4 x float> %86, %89
  %91 = fadd <4 x float> %82, %90
  %92 = add nuw nsw i64 %46, 20
  %93 = icmp ult i64 %92, 480
  br i1 %93, label %45, label %39

94:                                               ; preds = %37, %94
  %95 = phi float [ %130, %94 ], [ 0.000000e+00, %37 ]
  %96 = phi float* [ %132, %94 ], [ %30, %37 ]
  %97 = phi i64 [ %131, %94 ], [ 384, %37 ]
  %98 = getelementptr inbounds float, float* %0, i64 %97
  %99 = load float, float* %98, align 4
  %100 = load float, float* %96, align 4
  %101 = fmul float %99, %100
  %102 = fadd float %95, %101
  %103 = add nuw nsw i64 %97, 1
  %104 = getelementptr inbounds float, float* %96, i64 1
  %105 = getelementptr inbounds float, float* %0, i64 %103
  %106 = load float, float* %105, align 4
  %107 = load float, float* %104, align 4
  %108 = fmul float %106, %107
  %109 = fadd float %102, %108
  %110 = add nuw nsw i64 %97, 2
  %111 = getelementptr inbounds float, float* %96, i64 2
  %112 = getelementptr inbounds float, float* %0, i64 %110
  %113 = load float, float* %112, align 4
  %114 = load float, float* %111, align 4
  %115 = fmul float %113, %114
  %116 = fadd float %109, %115
  %117 = add nuw nsw i64 %97, 3
  %118 = getelementptr inbounds float, float* %96, i64 3
  %119 = getelementptr inbounds float, float* %0, i64 %117
  %120 = load float, float* %119, align 4
  %121 = load float, float* %118, align 4
  %122 = fmul float %120, %121
  %123 = fadd float %116, %122
  %124 = add nuw nsw i64 %97, 4
  %125 = getelementptr inbounds float, float* %96, i64 4
  %126 = getelementptr inbounds float, float* %0, i64 %124
  %127 = load float, float* %126, align 4
  %128 = load float, float* %125, align 4
  %129 = fmul float %127, %128
  %130 = fadd float %123, %129
  %131 = add nuw nsw i64 %97, 5
  %132 = getelementptr inbounds float, float* %96, i64 5
  %133 = icmp eq i64 %131, 864
  br i1 %133, label %134, label %94

134:                                              ; preds = %94, %33, %39
  %135 = phi float [ %36, %33 ], [ %44, %39 ], [ %130, %94 ]
  %136 = getelementptr inbounds float, float* %1, i64 %18
  %137 = load float, float* %136, align 4
  %138 = fmul float %9, %137
  %139 = fadd float %138, 1.000000e+00
  %140 = call float @sqrtf(float %139) #5
  %141 = fdiv float %135, %140
  %142 = sdiv i32 %7, 2
  %143 = shl nsw i32 %15, 1
  %144 = icmp slt i32 %15, 59
  br i1 %144, label %154, label %145

145:                                              ; preds = %134
  %146 = sdiv i32 %143, 59
  %147 = lshr i64 %3, 32
  %148 = trunc i64 %147 to i32
  %149 = bitcast i32 %148 to float
  %150 = fmul float %149, 5.000000e-01
  %151 = fmul float %141, 0x3FE6666660000000
  %152 = fmul float %141, 0x3FEB333340000000
  %153 = sext i32 %146 to i64
  br label %162

154:                                              ; preds = %462, %134
  %155 = phi float [ %141, %134 ], [ %463, %462 ]
  %156 = phi float [ %135, %134 ], [ %464, %462 ]
  %157 = phi i32 [ %13, %134 ], [ %465, %462 ]
  %158 = phi float [ %137, %134 ], [ %466, %462 ]
  %159 = fcmp ogt float %156, 0.000000e+00
  %160 = select i1 %159, float %156, float 0.000000e+00
  %161 = fcmp ugt float %158, %160
  br i1 %161, label %470, label %473

162:                                              ; preds = %462, %145
  %163 = phi float [ %463, %462 ], [ %141, %145 ]
  %164 = phi float [ %464, %462 ], [ %135, %145 ]
  %165 = phi i64 [ %467, %462 ], [ 2, %145 ]
  %166 = phi i32 [ %468, %462 ], [ 2, %145 ]
  %167 = phi float [ %466, %462 ], [ %137, %145 ]
  %168 = phi i32 [ %465, %462 ], [ %15, %145 ]
  %169 = shl nuw nsw i32 %166, 1
  %170 = trunc i64 %165 to i32
  %171 = add i32 %143, %170
  %172 = sdiv i32 %171, %169
  %173 = add nsw i64 %165, -2
  %174 = getelementptr inbounds %"struct.std::__1::array.19", %"struct.std::__1::array.19"* @_ZN6webrtc7rnn_vad12_GLOBAL__N_123kSubHarmonicMultipliersE, i64 0, i32 0, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = mul i32 %175, %143
  %177 = trunc i64 %165 to i32
  %178 = add nsw i32 %176, %177
  %179 = trunc i64 %165 to i32
  %180 = shl i32 %179, 1
  %181 = sdiv i32 %178, %180
  %182 = icmp eq i64 %165, 2
  %183 = icmp sgt i32 %181, 384
  %184 = and i1 %182, %183
  %185 = select i1 %184, i32 %15, i32 %181
  %186 = sub nsw i32 384, %172
  %187 = sext i32 %186 to i64
  %188 = icmp ult i32 %186, 864
  br i1 %188, label %189, label %196

189:                                              ; preds = %162
  %190 = getelementptr inbounds float, float* %0, i64 %187
  %191 = sub nuw nsw i64 864, %187
  %192 = icmp ult i64 %191, 480
  %193 = select i1 %192, i64 %191, i64 480
  %194 = icmp eq i64 %193, 0
  %195 = select i1 %194, float* null, float* %190
  br label %196

196:                                              ; preds = %189, %162
  %197 = phi i64 [ %193, %189 ], [ 0, %162 ]
  %198 = phi float* [ %195, %189 ], [ null, %162 ]
  %199 = load i8, i8* %11, align 1, !range !10
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %205, label %201

201:                                              ; preds = %196
  %202 = icmp eq i64 %197, 0
  %203 = select i1 %202, float* null, float* %198
  %204 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %6, float* %17, i64 480, float* %203, i64 %197) #5
  br label %303

205:                                              ; preds = %196
  %206 = load i8, i8* %10, align 4, !range !10
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %263, label %214

208:                                              ; preds = %214
  %209 = shufflevector <4 x float> %260, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %210 = fadd <4 x float> %260, %209
  %211 = shufflevector <4 x float> %210, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %212 = fadd <4 x float> %210, %211
  %213 = extractelement <4 x float> %212, i32 0
  br label %303

214:                                              ; preds = %205, %214
  %215 = phi i64 [ %261, %214 ], [ 0, %205 ]
  %216 = phi <4 x float> [ %260, %214 ], [ zeroinitializer, %205 ]
  %217 = getelementptr inbounds float, float* %17, i64 %215
  %218 = bitcast float* %217 to <4 x float>*
  %219 = load <4 x float>, <4 x float>* %218, align 1
  %220 = getelementptr inbounds float, float* %198, i64 %215
  %221 = bitcast float* %220 to <4 x float>*
  %222 = load <4 x float>, <4 x float>* %221, align 1
  %223 = fmul <4 x float> %219, %222
  %224 = fadd <4 x float> %216, %223
  %225 = add nuw nsw i64 %215, 4
  %226 = getelementptr inbounds float, float* %17, i64 %225
  %227 = bitcast float* %226 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 1
  %229 = getelementptr inbounds float, float* %198, i64 %225
  %230 = bitcast float* %229 to <4 x float>*
  %231 = load <4 x float>, <4 x float>* %230, align 1
  %232 = fmul <4 x float> %228, %231
  %233 = fadd <4 x float> %224, %232
  %234 = add nuw nsw i64 %215, 8
  %235 = getelementptr inbounds float, float* %17, i64 %234
  %236 = bitcast float* %235 to <4 x float>*
  %237 = load <4 x float>, <4 x float>* %236, align 1
  %238 = getelementptr inbounds float, float* %198, i64 %234
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 1
  %241 = fmul <4 x float> %237, %240
  %242 = fadd <4 x float> %233, %241
  %243 = add nuw nsw i64 %215, 12
  %244 = getelementptr inbounds float, float* %17, i64 %243
  %245 = bitcast float* %244 to <4 x float>*
  %246 = load <4 x float>, <4 x float>* %245, align 1
  %247 = getelementptr inbounds float, float* %198, i64 %243
  %248 = bitcast float* %247 to <4 x float>*
  %249 = load <4 x float>, <4 x float>* %248, align 1
  %250 = fmul <4 x float> %246, %249
  %251 = fadd <4 x float> %242, %250
  %252 = add nuw nsw i64 %215, 16
  %253 = getelementptr inbounds float, float* %17, i64 %252
  %254 = bitcast float* %253 to <4 x float>*
  %255 = load <4 x float>, <4 x float>* %254, align 1
  %256 = getelementptr inbounds float, float* %198, i64 %252
  %257 = bitcast float* %256 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 1
  %259 = fmul <4 x float> %255, %258
  %260 = fadd <4 x float> %251, %259
  %261 = add nuw nsw i64 %215, 20
  %262 = icmp ult i64 %261, 480
  br i1 %262, label %214, label %208

263:                                              ; preds = %205, %263
  %264 = phi float [ %299, %263 ], [ 0.000000e+00, %205 ]
  %265 = phi float* [ %301, %263 ], [ %198, %205 ]
  %266 = phi i64 [ %300, %263 ], [ 384, %205 ]
  %267 = getelementptr inbounds float, float* %0, i64 %266
  %268 = load float, float* %267, align 4
  %269 = load float, float* %265, align 4
  %270 = fmul float %268, %269
  %271 = fadd float %264, %270
  %272 = add nuw nsw i64 %266, 1
  %273 = getelementptr inbounds float, float* %265, i64 1
  %274 = getelementptr inbounds float, float* %0, i64 %272
  %275 = load float, float* %274, align 4
  %276 = load float, float* %273, align 4
  %277 = fmul float %275, %276
  %278 = fadd float %271, %277
  %279 = add nuw nsw i64 %266, 2
  %280 = getelementptr inbounds float, float* %265, i64 2
  %281 = getelementptr inbounds float, float* %0, i64 %279
  %282 = load float, float* %281, align 4
  %283 = load float, float* %280, align 4
  %284 = fmul float %282, %283
  %285 = fadd float %278, %284
  %286 = add nuw nsw i64 %266, 3
  %287 = getelementptr inbounds float, float* %265, i64 3
  %288 = getelementptr inbounds float, float* %0, i64 %286
  %289 = load float, float* %288, align 4
  %290 = load float, float* %287, align 4
  %291 = fmul float %289, %290
  %292 = fadd float %285, %291
  %293 = add nuw nsw i64 %266, 4
  %294 = getelementptr inbounds float, float* %265, i64 4
  %295 = getelementptr inbounds float, float* %0, i64 %293
  %296 = load float, float* %295, align 4
  %297 = load float, float* %294, align 4
  %298 = fmul float %296, %297
  %299 = fadd float %292, %298
  %300 = add nuw nsw i64 %266, 5
  %301 = getelementptr inbounds float, float* %265, i64 5
  %302 = icmp eq i64 %300, 864
  br i1 %302, label %303, label %263

303:                                              ; preds = %263, %201, %208
  %304 = phi float [ %204, %201 ], [ %213, %208 ], [ %299, %263 ]
  %305 = sub nsw i32 384, %185
  %306 = sext i32 %305 to i64
  %307 = icmp ult i32 %305, 864
  br i1 %307, label %308, label %315

308:                                              ; preds = %303
  %309 = getelementptr inbounds float, float* %0, i64 %306
  %310 = sub nuw nsw i64 864, %306
  %311 = icmp ult i64 %310, 480
  %312 = select i1 %311, i64 %310, i64 480
  %313 = icmp eq i64 %312, 0
  %314 = select i1 %313, float* null, float* %309
  br label %315

315:                                              ; preds = %308, %303
  %316 = phi i64 [ %312, %308 ], [ 0, %303 ]
  %317 = phi float* [ %314, %308 ], [ null, %303 ]
  %318 = load i8, i8* %11, align 1, !range !10
  %319 = icmp eq i8 %318, 0
  br i1 %319, label %324, label %320

320:                                              ; preds = %315
  %321 = icmp eq i64 %316, 0
  %322 = select i1 %321, float* null, float* %317
  %323 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %6, float* %17, i64 480, float* %322, i64 %316) #5
  br label %422

324:                                              ; preds = %315
  %325 = load i8, i8* %10, align 4, !range !10
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %382, label %333

327:                                              ; preds = %333
  %328 = shufflevector <4 x float> %379, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %329 = fadd <4 x float> %379, %328
  %330 = shufflevector <4 x float> %329, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %331 = fadd <4 x float> %329, %330
  %332 = extractelement <4 x float> %331, i32 0
  br label %422

333:                                              ; preds = %324, %333
  %334 = phi i64 [ %380, %333 ], [ 0, %324 ]
  %335 = phi <4 x float> [ %379, %333 ], [ zeroinitializer, %324 ]
  %336 = getelementptr inbounds float, float* %17, i64 %334
  %337 = bitcast float* %336 to <4 x float>*
  %338 = load <4 x float>, <4 x float>* %337, align 1
  %339 = getelementptr inbounds float, float* %317, i64 %334
  %340 = bitcast float* %339 to <4 x float>*
  %341 = load <4 x float>, <4 x float>* %340, align 1
  %342 = fmul <4 x float> %338, %341
  %343 = fadd <4 x float> %335, %342
  %344 = add nuw nsw i64 %334, 4
  %345 = getelementptr inbounds float, float* %17, i64 %344
  %346 = bitcast float* %345 to <4 x float>*
  %347 = load <4 x float>, <4 x float>* %346, align 1
  %348 = getelementptr inbounds float, float* %317, i64 %344
  %349 = bitcast float* %348 to <4 x float>*
  %350 = load <4 x float>, <4 x float>* %349, align 1
  %351 = fmul <4 x float> %347, %350
  %352 = fadd <4 x float> %343, %351
  %353 = add nuw nsw i64 %334, 8
  %354 = getelementptr inbounds float, float* %17, i64 %353
  %355 = bitcast float* %354 to <4 x float>*
  %356 = load <4 x float>, <4 x float>* %355, align 1
  %357 = getelementptr inbounds float, float* %317, i64 %353
  %358 = bitcast float* %357 to <4 x float>*
  %359 = load <4 x float>, <4 x float>* %358, align 1
  %360 = fmul <4 x float> %356, %359
  %361 = fadd <4 x float> %352, %360
  %362 = add nuw nsw i64 %334, 12
  %363 = getelementptr inbounds float, float* %17, i64 %362
  %364 = bitcast float* %363 to <4 x float>*
  %365 = load <4 x float>, <4 x float>* %364, align 1
  %366 = getelementptr inbounds float, float* %317, i64 %362
  %367 = bitcast float* %366 to <4 x float>*
  %368 = load <4 x float>, <4 x float>* %367, align 1
  %369 = fmul <4 x float> %365, %368
  %370 = fadd <4 x float> %361, %369
  %371 = add nuw nsw i64 %334, 16
  %372 = getelementptr inbounds float, float* %17, i64 %371
  %373 = bitcast float* %372 to <4 x float>*
  %374 = load <4 x float>, <4 x float>* %373, align 1
  %375 = getelementptr inbounds float, float* %317, i64 %371
  %376 = bitcast float* %375 to <4 x float>*
  %377 = load <4 x float>, <4 x float>* %376, align 1
  %378 = fmul <4 x float> %374, %377
  %379 = fadd <4 x float> %370, %378
  %380 = add nuw nsw i64 %334, 20
  %381 = icmp ult i64 %380, 480
  br i1 %381, label %333, label %327

382:                                              ; preds = %324, %382
  %383 = phi float [ %418, %382 ], [ 0.000000e+00, %324 ]
  %384 = phi float* [ %420, %382 ], [ %317, %324 ]
  %385 = phi i64 [ %419, %382 ], [ 384, %324 ]
  %386 = getelementptr inbounds float, float* %0, i64 %385
  %387 = load float, float* %386, align 4
  %388 = load float, float* %384, align 4
  %389 = fmul float %387, %388
  %390 = fadd float %383, %389
  %391 = add nuw nsw i64 %385, 1
  %392 = getelementptr inbounds float, float* %384, i64 1
  %393 = getelementptr inbounds float, float* %0, i64 %391
  %394 = load float, float* %393, align 4
  %395 = load float, float* %392, align 4
  %396 = fmul float %394, %395
  %397 = fadd float %390, %396
  %398 = add nuw nsw i64 %385, 2
  %399 = getelementptr inbounds float, float* %384, i64 2
  %400 = getelementptr inbounds float, float* %0, i64 %398
  %401 = load float, float* %400, align 4
  %402 = load float, float* %399, align 4
  %403 = fmul float %401, %402
  %404 = fadd float %397, %403
  %405 = add nuw nsw i64 %385, 3
  %406 = getelementptr inbounds float, float* %384, i64 3
  %407 = getelementptr inbounds float, float* %0, i64 %405
  %408 = load float, float* %407, align 4
  %409 = load float, float* %406, align 4
  %410 = fmul float %408, %409
  %411 = fadd float %404, %410
  %412 = add nuw nsw i64 %385, 4
  %413 = getelementptr inbounds float, float* %384, i64 4
  %414 = getelementptr inbounds float, float* %0, i64 %412
  %415 = load float, float* %414, align 4
  %416 = load float, float* %413, align 4
  %417 = fmul float %415, %416
  %418 = fadd float %411, %417
  %419 = add nuw nsw i64 %385, 5
  %420 = getelementptr inbounds float, float* %384, i64 5
  %421 = icmp eq i64 %419, 864
  br i1 %421, label %422, label %382

422:                                              ; preds = %382, %320, %327
  %423 = phi float [ %323, %320 ], [ %332, %327 ], [ %418, %382 ]
  %424 = fadd float %304, %423
  %425 = fmul float %424, 5.000000e-01
  %426 = getelementptr inbounds float, float* %1, i64 %187
  %427 = load float, float* %426, align 4
  %428 = getelementptr inbounds float, float* %1, i64 %306
  %429 = load float, float* %428, align 4
  %430 = fadd float %427, %429
  %431 = fmul float %430, 5.000000e-01
  %432 = fmul float %9, %431
  %433 = fadd float %432, 1.000000e+00
  %434 = call float @sqrtf(float %433) #5
  %435 = fdiv float %425, %434
  %436 = sub nsw i32 %172, %142
  %437 = icmp slt i32 %436, 0
  %438 = sub nsw i32 0, %436
  %439 = select i1 %437, i32 %438, i32 %436
  %440 = icmp slt i32 %439, 2
  br i1 %440, label %448, label %441

441:                                              ; preds = %422
  %442 = icmp eq i32 %439, 2
  br i1 %442, label %443, label %448

443:                                              ; preds = %441
  %444 = getelementptr inbounds %"struct.std::__1::array.19", %"struct.std::__1::array.19"* @_ZZN6webrtc7rnn_vad12_GLOBAL__N_137IsAlternativePitchStrongerThanInitialENS0_9PitchInfoES2_S2_iE29kInitialPitchPeriodThresholds, i64 0, i32 0, i64 %173
  %445 = load i32, i32* %444, align 4
  %446 = icmp slt i32 %445, %15
  %447 = select i1 %446, float %150, float 0.000000e+00
  br label %448

448:                                              ; preds = %443, %441, %422
  %449 = phi float [ 0.000000e+00, %441 ], [ %149, %422 ], [ %447, %443 ]
  %450 = fsub float %151, %449
  %451 = fcmp ogt float %450, 0x3FD3333340000000
  %452 = select i1 %451, float %450, float 0x3FD3333340000000
  %453 = icmp slt i32 %172, 90
  br i1 %453, label %454, label %458

454:                                              ; preds = %448
  %455 = fsub float %152, %449
  %456 = fcmp ogt float %455, 0x3FD99999A0000000
  %457 = select i1 %456, float %455, float 0x3FD99999A0000000
  br label %458

458:                                              ; preds = %448, %454
  %459 = phi float [ %457, %454 ], [ %452, %448 ]
  %460 = fcmp olt float %459, %435
  br i1 %460, label %461, label %462

461:                                              ; preds = %458
  br label %462

462:                                              ; preds = %461, %458
  %463 = phi float [ %435, %461 ], [ %163, %458 ]
  %464 = phi float [ %425, %461 ], [ %164, %458 ]
  %465 = phi i32 [ %172, %461 ], [ %168, %458 ]
  %466 = phi float [ %431, %461 ], [ %167, %458 ]
  %467 = add nuw nsw i64 %165, 1
  %468 = add nuw nsw i32 %166, 1
  %469 = icmp slt i64 %165, %153
  br i1 %469, label %162, label %154

470:                                              ; preds = %154
  %471 = fadd float %158, 1.000000e+00
  %472 = fdiv float %160, %471
  br label %473

473:                                              ; preds = %154, %470
  %474 = phi float [ %472, %470 ], [ 1.000000e+00, %154 ]
  %475 = fcmp olt float %474, %155
  %476 = select i1 %475, float %474, float %155
  %477 = bitcast float %476 to i32
  %478 = add i32 %157, -1
  %479 = icmp ult i32 %478, 383
  br i1 %479, label %480, label %841

480:                                              ; preds = %473
  %481 = sub nuw nsw i32 384, %157
  %482 = sub nuw nsw i32 385, %157
  %483 = icmp ult i32 %482, 864
  %484 = sext i32 %482 to i64
  %485 = getelementptr inbounds float, float* %0, i64 %484
  %486 = select i1 %483, float* %485, float* null
  %487 = load i8, i8* %11, align 1, !range !10
  %488 = icmp eq i8 %487, 0
  br i1 %488, label %494, label %489

489:                                              ; preds = %480
  %490 = select i1 %483, i64 480, i64 0
  %491 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %6, float* %17, i64 480, float* %486, i64 %490) #5
  %492 = load i8, i8* %11, align 1, !range !10
  %493 = icmp eq i8 %492, 0
  br label %595

494:                                              ; preds = %480
  %495 = load i8, i8* %10, align 4, !range !10
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %552, label %503

497:                                              ; preds = %503
  %498 = shufflevector <4 x float> %549, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %499 = fadd <4 x float> %549, %498
  %500 = shufflevector <4 x float> %499, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %501 = fadd <4 x float> %499, %500
  %502 = extractelement <4 x float> %501, i32 0
  br label %592

503:                                              ; preds = %494, %503
  %504 = phi i64 [ %550, %503 ], [ 0, %494 ]
  %505 = phi <4 x float> [ %549, %503 ], [ zeroinitializer, %494 ]
  %506 = getelementptr inbounds float, float* %17, i64 %504
  %507 = bitcast float* %506 to <4 x float>*
  %508 = load <4 x float>, <4 x float>* %507, align 1
  %509 = getelementptr inbounds float, float* %486, i64 %504
  %510 = bitcast float* %509 to <4 x float>*
  %511 = load <4 x float>, <4 x float>* %510, align 1
  %512 = fmul <4 x float> %508, %511
  %513 = fadd <4 x float> %505, %512
  %514 = add nuw nsw i64 %504, 4
  %515 = getelementptr inbounds float, float* %17, i64 %514
  %516 = bitcast float* %515 to <4 x float>*
  %517 = load <4 x float>, <4 x float>* %516, align 1
  %518 = getelementptr inbounds float, float* %486, i64 %514
  %519 = bitcast float* %518 to <4 x float>*
  %520 = load <4 x float>, <4 x float>* %519, align 1
  %521 = fmul <4 x float> %517, %520
  %522 = fadd <4 x float> %513, %521
  %523 = add nuw nsw i64 %504, 8
  %524 = getelementptr inbounds float, float* %17, i64 %523
  %525 = bitcast float* %524 to <4 x float>*
  %526 = load <4 x float>, <4 x float>* %525, align 1
  %527 = getelementptr inbounds float, float* %486, i64 %523
  %528 = bitcast float* %527 to <4 x float>*
  %529 = load <4 x float>, <4 x float>* %528, align 1
  %530 = fmul <4 x float> %526, %529
  %531 = fadd <4 x float> %522, %530
  %532 = add nuw nsw i64 %504, 12
  %533 = getelementptr inbounds float, float* %17, i64 %532
  %534 = bitcast float* %533 to <4 x float>*
  %535 = load <4 x float>, <4 x float>* %534, align 1
  %536 = getelementptr inbounds float, float* %486, i64 %532
  %537 = bitcast float* %536 to <4 x float>*
  %538 = load <4 x float>, <4 x float>* %537, align 1
  %539 = fmul <4 x float> %535, %538
  %540 = fadd <4 x float> %531, %539
  %541 = add nuw nsw i64 %504, 16
  %542 = getelementptr inbounds float, float* %17, i64 %541
  %543 = bitcast float* %542 to <4 x float>*
  %544 = load <4 x float>, <4 x float>* %543, align 1
  %545 = getelementptr inbounds float, float* %486, i64 %541
  %546 = bitcast float* %545 to <4 x float>*
  %547 = load <4 x float>, <4 x float>* %546, align 1
  %548 = fmul <4 x float> %544, %547
  %549 = fadd <4 x float> %540, %548
  %550 = add nuw nsw i64 %504, 20
  %551 = icmp ult i64 %550, 480
  br i1 %551, label %503, label %497

552:                                              ; preds = %494, %552
  %553 = phi float [ %588, %552 ], [ 0.000000e+00, %494 ]
  %554 = phi float* [ %590, %552 ], [ %486, %494 ]
  %555 = phi i64 [ %589, %552 ], [ 384, %494 ]
  %556 = getelementptr inbounds float, float* %0, i64 %555
  %557 = load float, float* %556, align 4
  %558 = load float, float* %554, align 4
  %559 = fmul float %557, %558
  %560 = fadd float %553, %559
  %561 = add nuw nsw i64 %555, 1
  %562 = getelementptr inbounds float, float* %554, i64 1
  %563 = getelementptr inbounds float, float* %0, i64 %561
  %564 = load float, float* %563, align 4
  %565 = load float, float* %562, align 4
  %566 = fmul float %564, %565
  %567 = fadd float %560, %566
  %568 = add nuw nsw i64 %555, 2
  %569 = getelementptr inbounds float, float* %554, i64 2
  %570 = getelementptr inbounds float, float* %0, i64 %568
  %571 = load float, float* %570, align 4
  %572 = load float, float* %569, align 4
  %573 = fmul float %571, %572
  %574 = fadd float %567, %573
  %575 = add nuw nsw i64 %555, 3
  %576 = getelementptr inbounds float, float* %554, i64 3
  %577 = getelementptr inbounds float, float* %0, i64 %575
  %578 = load float, float* %577, align 4
  %579 = load float, float* %576, align 4
  %580 = fmul float %578, %579
  %581 = fadd float %574, %580
  %582 = add nuw nsw i64 %555, 4
  %583 = getelementptr inbounds float, float* %554, i64 4
  %584 = getelementptr inbounds float, float* %0, i64 %582
  %585 = load float, float* %584, align 4
  %586 = load float, float* %583, align 4
  %587 = fmul float %585, %586
  %588 = fadd float %581, %587
  %589 = add nuw nsw i64 %555, 5
  %590 = getelementptr inbounds float, float* %554, i64 5
  %591 = icmp eq i64 %589, 864
  br i1 %591, label %592, label %552

592:                                              ; preds = %552, %497
  %593 = phi float [ %502, %497 ], [ %588, %552 ]
  %594 = icmp ult i32 %481, 864
  br i1 %594, label %595, label %609

595:                                              ; preds = %592, %489
  %596 = phi i1 [ %493, %489 ], [ true, %592 ]
  %597 = phi float [ %491, %489 ], [ %593, %592 ]
  %598 = sext i32 %481 to i64
  %599 = getelementptr inbounds float, float* %0, i64 %598
  %600 = sub nuw nsw i64 864, %598
  %601 = icmp ult i64 %600, 480
  %602 = select i1 %601, i64 %600, i64 480
  %603 = icmp eq i64 %602, 0
  %604 = select i1 %603, float* null, float* %599
  br i1 %596, label %605, label %607

605:                                              ; preds = %595
  %606 = load i8, i8* %10, align 4, !range !10
  br label %609

607:                                              ; preds = %595
  %608 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %6, float* %17, i64 480, float* %604, i64 %602) #5
  br label %709

609:                                              ; preds = %605, %592
  %610 = phi i8 [ %606, %605 ], [ %495, %592 ]
  %611 = phi float* [ %604, %605 ], [ null, %592 ]
  %612 = phi float [ %597, %605 ], [ %593, %592 ]
  %613 = icmp eq i8 %610, 0
  br i1 %613, label %669, label %620

614:                                              ; preds = %620
  %615 = shufflevector <4 x float> %666, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %616 = fadd <4 x float> %666, %615
  %617 = shufflevector <4 x float> %616, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %618 = fadd <4 x float> %616, %617
  %619 = extractelement <4 x float> %618, i32 0
  br label %709

620:                                              ; preds = %609, %620
  %621 = phi i64 [ %667, %620 ], [ 0, %609 ]
  %622 = phi <4 x float> [ %666, %620 ], [ zeroinitializer, %609 ]
  %623 = getelementptr inbounds float, float* %17, i64 %621
  %624 = bitcast float* %623 to <4 x float>*
  %625 = load <4 x float>, <4 x float>* %624, align 1
  %626 = getelementptr inbounds float, float* %611, i64 %621
  %627 = bitcast float* %626 to <4 x float>*
  %628 = load <4 x float>, <4 x float>* %627, align 1
  %629 = fmul <4 x float> %625, %628
  %630 = fadd <4 x float> %622, %629
  %631 = add nuw nsw i64 %621, 4
  %632 = getelementptr inbounds float, float* %17, i64 %631
  %633 = bitcast float* %632 to <4 x float>*
  %634 = load <4 x float>, <4 x float>* %633, align 1
  %635 = getelementptr inbounds float, float* %611, i64 %631
  %636 = bitcast float* %635 to <4 x float>*
  %637 = load <4 x float>, <4 x float>* %636, align 1
  %638 = fmul <4 x float> %634, %637
  %639 = fadd <4 x float> %630, %638
  %640 = add nuw nsw i64 %621, 8
  %641 = getelementptr inbounds float, float* %17, i64 %640
  %642 = bitcast float* %641 to <4 x float>*
  %643 = load <4 x float>, <4 x float>* %642, align 1
  %644 = getelementptr inbounds float, float* %611, i64 %640
  %645 = bitcast float* %644 to <4 x float>*
  %646 = load <4 x float>, <4 x float>* %645, align 1
  %647 = fmul <4 x float> %643, %646
  %648 = fadd <4 x float> %639, %647
  %649 = add nuw nsw i64 %621, 12
  %650 = getelementptr inbounds float, float* %17, i64 %649
  %651 = bitcast float* %650 to <4 x float>*
  %652 = load <4 x float>, <4 x float>* %651, align 1
  %653 = getelementptr inbounds float, float* %611, i64 %649
  %654 = bitcast float* %653 to <4 x float>*
  %655 = load <4 x float>, <4 x float>* %654, align 1
  %656 = fmul <4 x float> %652, %655
  %657 = fadd <4 x float> %648, %656
  %658 = add nuw nsw i64 %621, 16
  %659 = getelementptr inbounds float, float* %17, i64 %658
  %660 = bitcast float* %659 to <4 x float>*
  %661 = load <4 x float>, <4 x float>* %660, align 1
  %662 = getelementptr inbounds float, float* %611, i64 %658
  %663 = bitcast float* %662 to <4 x float>*
  %664 = load <4 x float>, <4 x float>* %663, align 1
  %665 = fmul <4 x float> %661, %664
  %666 = fadd <4 x float> %657, %665
  %667 = add nuw nsw i64 %621, 20
  %668 = icmp ult i64 %667, 480
  br i1 %668, label %620, label %614

669:                                              ; preds = %609, %669
  %670 = phi float [ %705, %669 ], [ 0.000000e+00, %609 ]
  %671 = phi float* [ %707, %669 ], [ %611, %609 ]
  %672 = phi i64 [ %706, %669 ], [ 384, %609 ]
  %673 = getelementptr inbounds float, float* %0, i64 %672
  %674 = load float, float* %673, align 4
  %675 = load float, float* %671, align 4
  %676 = fmul float %674, %675
  %677 = fadd float %670, %676
  %678 = add nuw nsw i64 %672, 1
  %679 = getelementptr inbounds float, float* %671, i64 1
  %680 = getelementptr inbounds float, float* %0, i64 %678
  %681 = load float, float* %680, align 4
  %682 = load float, float* %679, align 4
  %683 = fmul float %681, %682
  %684 = fadd float %677, %683
  %685 = add nuw nsw i64 %672, 2
  %686 = getelementptr inbounds float, float* %671, i64 2
  %687 = getelementptr inbounds float, float* %0, i64 %685
  %688 = load float, float* %687, align 4
  %689 = load float, float* %686, align 4
  %690 = fmul float %688, %689
  %691 = fadd float %684, %690
  %692 = add nuw nsw i64 %672, 3
  %693 = getelementptr inbounds float, float* %671, i64 3
  %694 = getelementptr inbounds float, float* %0, i64 %692
  %695 = load float, float* %694, align 4
  %696 = load float, float* %693, align 4
  %697 = fmul float %695, %696
  %698 = fadd float %691, %697
  %699 = add nuw nsw i64 %672, 4
  %700 = getelementptr inbounds float, float* %671, i64 4
  %701 = getelementptr inbounds float, float* %0, i64 %699
  %702 = load float, float* %701, align 4
  %703 = load float, float* %700, align 4
  %704 = fmul float %702, %703
  %705 = fadd float %698, %704
  %706 = add nuw nsw i64 %672, 5
  %707 = getelementptr inbounds float, float* %671, i64 5
  %708 = icmp eq i64 %706, 864
  br i1 %708, label %709, label %669

709:                                              ; preds = %669, %614, %607
  %710 = phi float [ %597, %607 ], [ %612, %614 ], [ %612, %669 ]
  %711 = phi float [ %608, %607 ], [ %619, %614 ], [ %705, %669 ]
  %712 = sub i32 383, %157
  %713 = sext i32 %712 to i64
  %714 = icmp ult i32 %712, 864
  br i1 %714, label %715, label %722

715:                                              ; preds = %709
  %716 = getelementptr inbounds float, float* %0, i64 %713
  %717 = sub nuw nsw i64 864, %713
  %718 = icmp ult i64 %717, 480
  %719 = select i1 %718, i64 %717, i64 480
  %720 = icmp eq i64 %719, 0
  %721 = select i1 %720, float* null, float* %716
  br label %722

722:                                              ; preds = %715, %709
  %723 = phi i64 [ %719, %715 ], [ 0, %709 ]
  %724 = phi float* [ %721, %715 ], [ null, %709 ]
  %725 = load i8, i8* %11, align 1, !range !10
  %726 = icmp eq i8 %725, 0
  br i1 %726, label %731, label %727

727:                                              ; preds = %722
  %728 = icmp eq i64 %723, 0
  %729 = select i1 %728, float* null, float* %724
  %730 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nonnull %6, float* %17, i64 480, float* %729, i64 %723) #5
  br label %829

731:                                              ; preds = %722
  %732 = load i8, i8* %10, align 4, !range !10
  %733 = icmp eq i8 %732, 0
  br i1 %733, label %789, label %740

734:                                              ; preds = %740
  %735 = shufflevector <4 x float> %786, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %736 = fadd <4 x float> %786, %735
  %737 = shufflevector <4 x float> %736, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %738 = fadd <4 x float> %736, %737
  %739 = extractelement <4 x float> %738, i32 0
  br label %829

740:                                              ; preds = %731, %740
  %741 = phi i64 [ %787, %740 ], [ 0, %731 ]
  %742 = phi <4 x float> [ %786, %740 ], [ zeroinitializer, %731 ]
  %743 = getelementptr inbounds float, float* %17, i64 %741
  %744 = bitcast float* %743 to <4 x float>*
  %745 = load <4 x float>, <4 x float>* %744, align 1
  %746 = getelementptr inbounds float, float* %724, i64 %741
  %747 = bitcast float* %746 to <4 x float>*
  %748 = load <4 x float>, <4 x float>* %747, align 1
  %749 = fmul <4 x float> %745, %748
  %750 = fadd <4 x float> %742, %749
  %751 = add nuw nsw i64 %741, 4
  %752 = getelementptr inbounds float, float* %17, i64 %751
  %753 = bitcast float* %752 to <4 x float>*
  %754 = load <4 x float>, <4 x float>* %753, align 1
  %755 = getelementptr inbounds float, float* %724, i64 %751
  %756 = bitcast float* %755 to <4 x float>*
  %757 = load <4 x float>, <4 x float>* %756, align 1
  %758 = fmul <4 x float> %754, %757
  %759 = fadd <4 x float> %750, %758
  %760 = add nuw nsw i64 %741, 8
  %761 = getelementptr inbounds float, float* %17, i64 %760
  %762 = bitcast float* %761 to <4 x float>*
  %763 = load <4 x float>, <4 x float>* %762, align 1
  %764 = getelementptr inbounds float, float* %724, i64 %760
  %765 = bitcast float* %764 to <4 x float>*
  %766 = load <4 x float>, <4 x float>* %765, align 1
  %767 = fmul <4 x float> %763, %766
  %768 = fadd <4 x float> %759, %767
  %769 = add nuw nsw i64 %741, 12
  %770 = getelementptr inbounds float, float* %17, i64 %769
  %771 = bitcast float* %770 to <4 x float>*
  %772 = load <4 x float>, <4 x float>* %771, align 1
  %773 = getelementptr inbounds float, float* %724, i64 %769
  %774 = bitcast float* %773 to <4 x float>*
  %775 = load <4 x float>, <4 x float>* %774, align 1
  %776 = fmul <4 x float> %772, %775
  %777 = fadd <4 x float> %768, %776
  %778 = add nuw nsw i64 %741, 16
  %779 = getelementptr inbounds float, float* %17, i64 %778
  %780 = bitcast float* %779 to <4 x float>*
  %781 = load <4 x float>, <4 x float>* %780, align 1
  %782 = getelementptr inbounds float, float* %724, i64 %778
  %783 = bitcast float* %782 to <4 x float>*
  %784 = load <4 x float>, <4 x float>* %783, align 1
  %785 = fmul <4 x float> %781, %784
  %786 = fadd <4 x float> %777, %785
  %787 = add nuw nsw i64 %741, 20
  %788 = icmp ult i64 %787, 480
  br i1 %788, label %740, label %734

789:                                              ; preds = %731, %789
  %790 = phi float [ %825, %789 ], [ 0.000000e+00, %731 ]
  %791 = phi float* [ %827, %789 ], [ %724, %731 ]
  %792 = phi i64 [ %826, %789 ], [ 384, %731 ]
  %793 = getelementptr inbounds float, float* %0, i64 %792
  %794 = load float, float* %793, align 4
  %795 = load float, float* %791, align 4
  %796 = fmul float %794, %795
  %797 = fadd float %790, %796
  %798 = add nuw nsw i64 %792, 1
  %799 = getelementptr inbounds float, float* %791, i64 1
  %800 = getelementptr inbounds float, float* %0, i64 %798
  %801 = load float, float* %800, align 4
  %802 = load float, float* %799, align 4
  %803 = fmul float %801, %802
  %804 = fadd float %797, %803
  %805 = add nuw nsw i64 %792, 2
  %806 = getelementptr inbounds float, float* %791, i64 2
  %807 = getelementptr inbounds float, float* %0, i64 %805
  %808 = load float, float* %807, align 4
  %809 = load float, float* %806, align 4
  %810 = fmul float %808, %809
  %811 = fadd float %804, %810
  %812 = add nuw nsw i64 %792, 3
  %813 = getelementptr inbounds float, float* %791, i64 3
  %814 = getelementptr inbounds float, float* %0, i64 %812
  %815 = load float, float* %814, align 4
  %816 = load float, float* %813, align 4
  %817 = fmul float %815, %816
  %818 = fadd float %811, %817
  %819 = add nuw nsw i64 %792, 4
  %820 = getelementptr inbounds float, float* %791, i64 4
  %821 = getelementptr inbounds float, float* %0, i64 %819
  %822 = load float, float* %821, align 4
  %823 = load float, float* %820, align 4
  %824 = fmul float %822, %823
  %825 = fadd float %818, %824
  %826 = add nuw nsw i64 %792, 5
  %827 = getelementptr inbounds float, float* %791, i64 5
  %828 = icmp eq i64 %826, 864
  br i1 %828, label %829, label %789

829:                                              ; preds = %789, %734, %727
  %830 = phi float [ %730, %727 ], [ %739, %734 ], [ %825, %789 ]
  %831 = fsub float %830, %710
  %832 = fsub float %711, %710
  %833 = fmul float %832, 0x3FE6666660000000
  %834 = fcmp ogt float %831, %833
  br i1 %834, label %841, label %835

835:                                              ; preds = %829
  %836 = fsub float %710, %830
  %837 = fsub float %711, %830
  %838 = fmul float %837, 0x3FE6666660000000
  %839 = fcmp ogt float %836, %838
  %840 = sext i1 %839 to i32
  br label %841

841:                                              ; preds = %473, %829, %835
  %842 = phi i32 [ 0, %473 ], [ 1, %829 ], [ %840, %835 ]
  %843 = shl i32 %157, 1
  %844 = add nsw i32 %842, %843
  %845 = icmp sgt i32 %844, 60
  %846 = select i1 %845, i32 %844, i32 60
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %10) #5
  %847 = zext i32 %477 to i64
  %848 = shl nuw i64 %847, 32
  %849 = zext i32 %846 to i64
  %850 = or i64 %848, %849
  ret i64 %850
}

declare float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"*, float*, i64, float*, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{i8 0, i8 2}
