; ModuleID = '../../components/translate/core/language_detection/ngram_hash.cc'
source_filename = "../../components/translate/core/language_detection/ngram_hash.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, {}*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.flexbuffers::Reference" = type { i8*, i8, i8, i32 }
%"class.flexbuffers::Map" = type { %"class.flexbuffers::Vector" }
%"class.flexbuffers::Vector" = type { %"class.flexbuffers::Sized" }
%"class.flexbuffers::Sized" = type { %"class.flexbuffers::Object.base", i64 }
%"class.flexbuffers::Object.base" = type <{ i8*, i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.translate::TokenizedOutput" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.6" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.8" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::pair"* }
%"class.(anonymous namespace)::NGramHashParams" = type <{ %"class.translate::TokenizedOutput", i64, %"class.std::__1::vector", %"class.std::__1::vector", i32, i8, [3 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.flexbuffers::String" = type { %"class.flexbuffers::Sized" }

$_ZNK11flexbuffers3MapixEPKc = comdat any

$_ZNK11flexbuffers9Reference7AsInt64Ev = comdat any

$_ZN11flexbuffers10KeyCompareIhEEiPKvS2_ = comdat any

$_ZN11flexbuffers10KeyCompareItEEiPKvS2_ = comdat any

$_ZN11flexbuffers10KeyCompareIjEEiPKvS2_ = comdat any

$_ZN11flexbuffers10KeyCompareImEEiPKvS2_ = comdat any

$_ZNK11flexbuffers9Reference8AsStringEv = comdat any

$_ZNK11flexbuffers9Reference8AsUInt64Ev = comdat any

$_ZNSt3__16vectorINS_4pairImmEENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZZN11flexbuffers3Map8EmptyMapEvE9empty_map = comdat any

$_ZZN11flexbuffers6String11EmptyStringEvE12empty_string = comdat any

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8
@_ZZN9translate19Register_NGRAM_HASHEvE1r = internal global %struct.TfLiteRegistration { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN12_GLOBAL__N_14InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN12_GLOBAL__N_14FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN12_GLOBAL__N_16ResizeEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"ngram_lengths\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"vocab_sizes\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"max_splits\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"lowercase_input\00", align 1
@_ZZN11flexbuffers3Map8EmptyMapEvE9empty_map = linkonce_odr hidden constant [4 x i8] c"\00\00\01\00", comdat, align 1
@_ZZN11flexbuffers6String11EmptyStringEvE12empty_string = linkonce_odr hidden local_unnamed_addr global i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), comdat, align 8
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.9 = private unnamed_addr constant [65 x i8] c"../../components/translate/core/language_detection/ngram_hash.cc\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c"output != nullptr\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"Output must by dynamic.\00", align 1
@.str.12 = private unnamed_addr constant [27 x i8] c"Output type must be Int32.\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"Empty input not supported.\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c"`ngram_lengths` must be non-empty.\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"`vocab_sizes` must be non-empty.\00", align 1
@.str.16 = private unnamed_addr constant [61 x i8] c"Sizes of `ngram_lengths` and `vocab_sizes` must be the same.\00", align 1
@.str.17 = private unnamed_addr constant [26 x i8] c"`max_splits` must be > 0.\00", align 1
@switch.table._ZNK11flexbuffers3MapixEPKc = private unnamed_addr constant [8 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareIhEEiPKvS2_, i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareItEEiPKvS2_, i32 (i8*, i8*)* null, i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareIjEEiPKvS2_, i32 (i8*, i8*)* null, i32 (i8*, i8*)* null, i32 (i8*, i8*)* null, i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareImEEiPKvS2_], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.TfLiteRegistration* @_ZN9translate19Register_NGRAM_HASHEv() local_unnamed_addr #0 {
  ret %struct.TfLiteRegistration* @_ZZN9translate19Register_NGRAM_HASHEvE1r
}

; Function Attrs: nounwind ssp uwtable
define internal nonnull i8* @_ZN12_GLOBAL__N_14InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8*, i64) #1 {
  %4 = alloca %"class.flexbuffers::Reference", align 8
  %5 = alloca %"class.flexbuffers::Reference", align 8
  %6 = alloca %"class.flexbuffers::Map", align 8
  %7 = alloca %"class.flexbuffers::Reference", align 8
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca %"class.std::__1::vector", align 8
  %10 = alloca %"class.flexbuffers::Reference", align 8
  %11 = alloca %"class.flexbuffers::Reference", align 8
  %12 = bitcast %"class.flexbuffers::Map"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #13
  %13 = getelementptr inbounds i8, i8* %1, i64 %2
  %14 = getelementptr inbounds i8, i8* %13, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 -1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %15 to i64
  %19 = sub nsw i64 0, %18
  %20 = getelementptr inbounds i8, i8* %16, i64 %19
  %21 = zext i8 %17 to i32
  %22 = and i32 %21, 3
  %23 = shl i32 256, %22
  %24 = and i32 %21, 252
  %25 = icmp eq i32 %24, 36
  br i1 %25, label %26, label %79

26:                                               ; preds = %3
  %27 = icmp ult i8 %15, 4
  br i1 %27, label %28, label %37

28:                                               ; preds = %26
  %29 = icmp ult i8 %15, 2
  br i1 %29, label %30, label %33

30:                                               ; preds = %28
  %31 = load i8, i8* %20, align 1, !noalias !2
  %32 = zext i8 %31 to i64
  br label %46

33:                                               ; preds = %28
  %34 = bitcast i8* %20 to i16*
  %35 = load i16, i16* %34, align 2, !noalias !2
  %36 = zext i16 %35 to i64
  br label %46

37:                                               ; preds = %26
  %38 = icmp ult i8 %15, 8
  br i1 %38, label %39, label %43

39:                                               ; preds = %37
  %40 = bitcast i8* %20 to i32*
  %41 = load i32, i32* %40, align 4, !noalias !2
  %42 = zext i32 %41 to i64
  br label %46

43:                                               ; preds = %37
  %44 = bitcast i8* %20 to i64*
  %45 = load i64, i64* %44, align 8, !noalias !2
  br label %46

46:                                               ; preds = %43, %39, %33, %30
  %47 = phi i64 [ %32, %30 ], [ %36, %33 ], [ %42, %39 ], [ %45, %43 ]
  %48 = sub i64 0, %47
  %49 = getelementptr inbounds i8, i8* %20, i64 %48
  %50 = lshr exact i32 %23, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8* %49, i8** %52, align 8, !alias.scope !2
  %53 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  store i8 %51, i8* %53, align 8, !alias.scope !2
  %54 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %6, i64 0, i32 0, i32 0, i32 1
  %55 = zext i32 %50 to i64
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds i8, i8* %49, i64 %56
  %58 = icmp ult i8 %51, 4
  br i1 %58, label %59, label %68

59:                                               ; preds = %46
  %60 = icmp ult i8 %51, 2
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  %62 = load i8, i8* %57, align 1, !noalias !2
  %63 = zext i8 %62 to i64
  br label %77

64:                                               ; preds = %59
  %65 = bitcast i8* %57 to i16*
  %66 = load i16, i16* %65, align 2, !noalias !2
  %67 = zext i16 %66 to i64
  br label %77

68:                                               ; preds = %46
  %69 = icmp ult i8 %51, 8
  br i1 %69, label %70, label %74

70:                                               ; preds = %68
  %71 = bitcast i8* %57 to i32*
  %72 = load i32, i32* %71, align 4, !noalias !2
  %73 = zext i32 %72 to i64
  br label %77

74:                                               ; preds = %68
  %75 = bitcast i8* %57 to i64*
  %76 = load i64, i64* %75, align 8, !noalias !2
  br label %77

77:                                               ; preds = %74, %70, %64, %61
  %78 = phi i64 [ %63, %61 ], [ %67, %64 ], [ %73, %70 ], [ %76, %74 ]
  store i64 %78, i64* %54, align 8, !alias.scope !2
  br label %83

79:                                               ; preds = %3
  %80 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN11flexbuffers3Map8EmptyMapEvE9empty_map, i64 1, i64 0), i8** %80, align 8, !alias.scope !5
  %81 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  store i8 1, i8* %81, align 8, !alias.scope !5
  %82 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %6, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %82, align 8, !alias.scope !5
  br label %83

83:                                               ; preds = %77, %79
  %84 = bitcast %"class.flexbuffers::Reference"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %84) #13
  %85 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %86 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %7, i64 0, i32 0
  %87 = extractvalue { i8*, i64 } %85, 0
  store i8* %87, i8** %86, align 8
  %88 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %7, i64 0, i32 1
  %89 = bitcast i8* %88 to i64*
  %90 = extractvalue { i8*, i64 } %85, 1
  store i64 %90, i64* %89, align 8
  %91 = call i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"* nonnull %7)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %84) #13
  %92 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #13
  %93 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %94 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %95 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %96 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 -86, i64 24, i1 false)
  %97 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %98 = extractvalue { i8*, i64 } %97, 0
  %99 = extractvalue { i8*, i64 } %97, 1
  %100 = lshr i64 %99, 32
  %101 = trunc i64 %100 to i32
  switch i32 %101, label %102 [
    i32 36, label %103
    i32 15, label %103
    i32 14, label %103
    i32 13, label %103
    i32 12, label %103
    i32 11, label %103
  ]

102:                                              ; preds = %83
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 0, i64 24, i1 false) #13, !alias.scope !8
  br label %196

103:                                              ; preds = %83, %83, %83, %83, %83, %83
  %104 = trunc i64 %99 to i8
  %105 = icmp ult i8 %104, 4
  br i1 %105, label %106, label %115

106:                                              ; preds = %103
  %107 = icmp ult i8 %104, 2
  br i1 %107, label %108, label %111

108:                                              ; preds = %106
  %109 = load i8, i8* %98, align 1, !noalias !11
  %110 = zext i8 %109 to i64
  br label %124

111:                                              ; preds = %106
  %112 = bitcast i8* %98 to i16*
  %113 = load i16, i16* %112, align 2, !noalias !11
  %114 = zext i16 %113 to i64
  br label %124

115:                                              ; preds = %103
  %116 = icmp ult i8 %104, 8
  br i1 %116, label %117, label %121

117:                                              ; preds = %115
  %118 = bitcast i8* %98 to i32*
  %119 = load i32, i32* %118, align 4, !noalias !11
  %120 = zext i32 %119 to i64
  br label %124

121:                                              ; preds = %115
  %122 = bitcast i8* %98 to i64*
  %123 = load i64, i64* %122, align 8, !noalias !11
  br label %124

124:                                              ; preds = %121, %117, %111, %108
  %125 = phi i64 [ %110, %108 ], [ %114, %111 ], [ %120, %117 ], [ %123, %121 ]
  %126 = sub i64 0, %125
  %127 = getelementptr inbounds i8, i8* %98, i64 %126
  %128 = lshr i64 %99, 8
  %129 = trunc i64 %128 to i8
  %130 = add nsw i32 %101, -10
  %131 = and i64 %128, 255
  %132 = sub nsw i64 0, %131
  %133 = getelementptr inbounds i8, i8* %127, i64 %132
  %134 = icmp ult i8 %129, 4
  br i1 %134, label %135, label %144

135:                                              ; preds = %124
  %136 = icmp ult i8 %129, 2
  br i1 %136, label %137, label %140

137:                                              ; preds = %135
  %138 = load i8, i8* %133, align 1, !noalias !11
  %139 = zext i8 %138 to i64
  br label %153

140:                                              ; preds = %135
  %141 = bitcast i8* %133 to i16*
  %142 = load i16, i16* %141, align 2, !noalias !11
  %143 = zext i16 %142 to i64
  br label %153

144:                                              ; preds = %124
  %145 = icmp ult i8 %129, 8
  br i1 %145, label %146, label %150

146:                                              ; preds = %144
  %147 = bitcast i8* %133 to i32*
  %148 = load i32, i32* %147, align 4, !noalias !11
  %149 = zext i32 %148 to i64
  br label %153

150:                                              ; preds = %144
  %151 = bitcast i8* %133 to i64*
  %152 = load i64, i64* %151, align 8, !noalias !11
  br label %153

153:                                              ; preds = %137, %140, %146, %150
  %154 = phi i64 [ %139, %137 ], [ %143, %140 ], [ %149, %146 ], [ %152, %150 ]
  %155 = icmp eq i32 %130, 5
  %156 = select i1 %155, i32 4, i32 %130
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 0, i64 24, i1 false) #13, !alias.scope !8
  %157 = icmp eq i64 %154, 0
  br i1 %157, label %196, label %158

158:                                              ; preds = %153
  %159 = icmp ugt i64 %154, 4611686018427387903
  br i1 %159, label %160, label %162

160:                                              ; preds = %158
  %161 = bitcast %"class.std::__1::vector"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %161) #14
  unreachable

162:                                              ; preds = %158
  %163 = shl i64 %154, 2
  %164 = call i8* @_Znwm(i64 %163) #15
  %165 = bitcast i8* %164 to i32*
  %166 = bitcast %"class.std::__1::vector"* %8 to i8**
  store i8* %164, i8** %166, align 8, !alias.scope !8
  %167 = getelementptr inbounds i32, i32* %165, i64 %154
  store i32* %167, i32** %95, align 8, !alias.scope !8
  %168 = bitcast i32** %94 to i64*
  %169 = ptrtoint i8* %164 to i64
  %170 = add nsw i64 %154, -1
  %171 = getelementptr i32, i32* %165, i64 %170
  %172 = ptrtoint i32* %171 to i64
  %173 = sub i64 4, %169
  %174 = add i64 %173, %172
  %175 = and i64 %174, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %164, i8 0, i64 %175, i1 false) #13, !noalias !8
  %176 = ptrtoint i32* %167 to i64
  store i64 %176, i64* %168, align 8, !alias.scope !8
  %177 = bitcast %"class.flexbuffers::Reference"* %5 to i8*
  %178 = and i64 %128, 255
  %179 = zext i32 %156 to i64
  %180 = shl nuw i64 %179, 32
  %181 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %5, i64 0, i32 0
  %182 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %5, i64 0, i32 1
  %183 = bitcast i8* %182 to i64*
  %184 = or i64 %180, %178
  %185 = or i64 %184, 256
  br label %186

186:                                              ; preds = %186, %162
  %187 = phi i64 [ 0, %162 ], [ %194, %186 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %177) #13, !noalias !8
  %188 = mul i64 %187, %178
  %189 = getelementptr inbounds i8, i8* %127, i64 %188
  store i8* %189, i8** %181, align 8, !noalias !8
  store i64 %185, i64* %183, align 8, !noalias !8
  %190 = call i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"* nonnull %5) #13
  %191 = trunc i64 %190 to i32
  %192 = load i32*, i32** %93, align 8, !alias.scope !8
  %193 = getelementptr inbounds i32, i32* %192, i64 %187
  store i32 %191, i32* %193, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %177) #13, !noalias !8
  %194 = add nuw i64 %187, 1
  %195 = icmp eq i64 %194, %154
  br i1 %195, label %196, label %186

196:                                              ; preds = %186, %102, %153
  %197 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %197) #13
  %198 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %199 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %200 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %201 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %201, i8 -86, i64 24, i1 false)
  %202 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  %203 = extractvalue { i8*, i64 } %202, 0
  %204 = extractvalue { i8*, i64 } %202, 1
  %205 = lshr i64 %204, 32
  %206 = trunc i64 %205 to i32
  switch i32 %206, label %207 [
    i32 36, label %208
    i32 15, label %208
    i32 14, label %208
    i32 13, label %208
    i32 12, label %208
    i32 11, label %208
  ]

207:                                              ; preds = %196
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %197, i8 0, i64 24, i1 false) #13, !alias.scope !14
  br label %301

208:                                              ; preds = %196, %196, %196, %196, %196, %196
  %209 = trunc i64 %204 to i8
  %210 = icmp ult i8 %209, 4
  br i1 %210, label %211, label %220

211:                                              ; preds = %208
  %212 = icmp ult i8 %209, 2
  br i1 %212, label %213, label %216

213:                                              ; preds = %211
  %214 = load i8, i8* %203, align 1, !noalias !17
  %215 = zext i8 %214 to i64
  br label %229

216:                                              ; preds = %211
  %217 = bitcast i8* %203 to i16*
  %218 = load i16, i16* %217, align 2, !noalias !17
  %219 = zext i16 %218 to i64
  br label %229

220:                                              ; preds = %208
  %221 = icmp ult i8 %209, 8
  br i1 %221, label %222, label %226

222:                                              ; preds = %220
  %223 = bitcast i8* %203 to i32*
  %224 = load i32, i32* %223, align 4, !noalias !17
  %225 = zext i32 %224 to i64
  br label %229

226:                                              ; preds = %220
  %227 = bitcast i8* %203 to i64*
  %228 = load i64, i64* %227, align 8, !noalias !17
  br label %229

229:                                              ; preds = %226, %222, %216, %213
  %230 = phi i64 [ %215, %213 ], [ %219, %216 ], [ %225, %222 ], [ %228, %226 ]
  %231 = sub i64 0, %230
  %232 = getelementptr inbounds i8, i8* %203, i64 %231
  %233 = lshr i64 %204, 8
  %234 = trunc i64 %233 to i8
  %235 = add nsw i32 %206, -10
  %236 = and i64 %233, 255
  %237 = sub nsw i64 0, %236
  %238 = getelementptr inbounds i8, i8* %232, i64 %237
  %239 = icmp ult i8 %234, 4
  br i1 %239, label %240, label %249

240:                                              ; preds = %229
  %241 = icmp ult i8 %234, 2
  br i1 %241, label %242, label %245

242:                                              ; preds = %240
  %243 = load i8, i8* %238, align 1, !noalias !17
  %244 = zext i8 %243 to i64
  br label %258

245:                                              ; preds = %240
  %246 = bitcast i8* %238 to i16*
  %247 = load i16, i16* %246, align 2, !noalias !17
  %248 = zext i16 %247 to i64
  br label %258

249:                                              ; preds = %229
  %250 = icmp ult i8 %234, 8
  br i1 %250, label %251, label %255

251:                                              ; preds = %249
  %252 = bitcast i8* %238 to i32*
  %253 = load i32, i32* %252, align 4, !noalias !17
  %254 = zext i32 %253 to i64
  br label %258

255:                                              ; preds = %249
  %256 = bitcast i8* %238 to i64*
  %257 = load i64, i64* %256, align 8, !noalias !17
  br label %258

258:                                              ; preds = %242, %245, %251, %255
  %259 = phi i64 [ %244, %242 ], [ %248, %245 ], [ %254, %251 ], [ %257, %255 ]
  %260 = icmp eq i32 %235, 5
  %261 = select i1 %260, i32 4, i32 %235
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %197, i8 0, i64 24, i1 false) #13, !alias.scope !14
  %262 = icmp eq i64 %259, 0
  br i1 %262, label %301, label %263

263:                                              ; preds = %258
  %264 = icmp ugt i64 %259, 4611686018427387903
  br i1 %264, label %265, label %267

265:                                              ; preds = %263
  %266 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %266) #14
  unreachable

267:                                              ; preds = %263
  %268 = shl i64 %259, 2
  %269 = call i8* @_Znwm(i64 %268) #15
  %270 = bitcast i8* %269 to i32*
  %271 = bitcast %"class.std::__1::vector"* %9 to i8**
  store i8* %269, i8** %271, align 8, !alias.scope !14
  %272 = getelementptr inbounds i32, i32* %270, i64 %259
  store i32* %272, i32** %200, align 8, !alias.scope !14
  %273 = bitcast i32** %199 to i64*
  %274 = ptrtoint i8* %269 to i64
  %275 = add nsw i64 %259, -1
  %276 = getelementptr i32, i32* %270, i64 %275
  %277 = ptrtoint i32* %276 to i64
  %278 = sub i64 4, %274
  %279 = add i64 %278, %277
  %280 = and i64 %279, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %269, i8 0, i64 %280, i1 false) #13, !noalias !14
  %281 = ptrtoint i32* %272 to i64
  store i64 %281, i64* %273, align 8, !alias.scope !14
  %282 = bitcast %"class.flexbuffers::Reference"* %4 to i8*
  %283 = and i64 %233, 255
  %284 = zext i32 %261 to i64
  %285 = shl nuw i64 %284, 32
  %286 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %4, i64 0, i32 0
  %287 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %4, i64 0, i32 1
  %288 = bitcast i8* %287 to i64*
  %289 = or i64 %285, %283
  %290 = or i64 %289, 256
  br label %291

291:                                              ; preds = %291, %267
  %292 = phi i64 [ 0, %267 ], [ %299, %291 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %282) #13, !noalias !14
  %293 = mul i64 %292, %283
  %294 = getelementptr inbounds i8, i8* %232, i64 %293
  store i8* %294, i8** %286, align 8, !noalias !14
  store i64 %290, i64* %288, align 8, !noalias !14
  %295 = call i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"* nonnull %4) #13
  %296 = trunc i64 %295 to i32
  %297 = load i32*, i32** %198, align 8, !alias.scope !14
  %298 = getelementptr inbounds i32, i32* %297, i64 %292
  store i32 %296, i32* %298, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %282) #13, !noalias !14
  %299 = add nuw i64 %292, 1
  %300 = icmp eq i64 %299, %259
  br i1 %300, label %301, label %291

301:                                              ; preds = %291, %207, %258
  %302 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %303 = extractvalue { i8*, i64 } %302, 1
  %304 = icmp ult i64 %303, 4294967296
  %305 = bitcast %"class.flexbuffers::Reference"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %305) #13
  br i1 %304, label %315, label %306

306:                                              ; preds = %301
  %307 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %308 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %10, i64 0, i32 0
  %309 = extractvalue { i8*, i64 } %307, 0
  store i8* %309, i8** %308, align 8
  %310 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %10, i64 0, i32 1
  %311 = bitcast i8* %310 to i64*
  %312 = extractvalue { i8*, i64 } %307, 1
  store i64 %312, i64* %311, align 8
  %313 = call i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"* nonnull %10) #13
  %314 = trunc i64 %313 to i32
  br label %315

315:                                              ; preds = %301, %306
  %316 = phi i32 [ %314, %306 ], [ 128, %301 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %305) #13
  %317 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %318 = extractvalue { i8*, i64 } %317, 1
  %319 = icmp ult i64 %318, 4294967296
  %320 = bitcast %"class.flexbuffers::Reference"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %320) #13
  br i1 %319, label %357, label %321

321:                                              ; preds = %315
  %322 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %323 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %11, i64 0, i32 0
  %324 = extractvalue { i8*, i64 } %322, 0
  store i8* %324, i8** %323, align 8
  %325 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %11, i64 0, i32 1
  %326 = bitcast i8* %325 to i64*
  %327 = extractvalue { i8*, i64 } %322, 1
  store i64 %327, i64* %326, align 8
  %328 = and i64 %327, -4294967296
  %329 = icmp eq i64 %328, 111669149696
  %330 = trunc i64 %327 to i8
  br i1 %329, label %331, label %351

331:                                              ; preds = %321
  %332 = icmp ult i8 %330, 4
  br i1 %332, label %333, label %342

333:                                              ; preds = %331
  %334 = icmp ult i8 %330, 2
  br i1 %334, label %335, label %338

335:                                              ; preds = %333
  %336 = load i8, i8* %324, align 1
  %337 = zext i8 %336 to i64
  br label %353

338:                                              ; preds = %333
  %339 = bitcast i8* %324 to i16*
  %340 = load i16, i16* %339, align 2
  %341 = zext i16 %340 to i64
  br label %353

342:                                              ; preds = %331
  %343 = icmp ult i8 %330, 8
  br i1 %343, label %344, label %348

344:                                              ; preds = %342
  %345 = bitcast i8* %324 to i32*
  %346 = load i32, i32* %345, align 4
  %347 = zext i32 %346 to i64
  br label %353

348:                                              ; preds = %342
  %349 = bitcast i8* %324 to i64*
  %350 = load i64, i64* %349, align 8
  br label %353

351:                                              ; preds = %321
  %352 = call i64 @_ZNK11flexbuffers9Reference8AsUInt64Ev(%"class.flexbuffers::Reference"* nonnull %11) #13
  br label %353

353:                                              ; preds = %335, %338, %344, %348, %351
  %354 = phi i64 [ %352, %351 ], [ %337, %335 ], [ %341, %338 ], [ %347, %344 ], [ %350, %348 ]
  %355 = icmp ne i64 %354, 0
  %356 = zext i1 %355 to i8
  br label %357

357:                                              ; preds = %315, %353
  %358 = phi i8 [ %356, %353 ], [ 1, %315 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %320) #13
  %359 = call i8* @_Znwm(i64 112) #15
  %360 = bitcast i8* %359 to %"class.translate::TokenizedOutput"*
  call void @_ZN9translate15TokenizedOutputC1Ev(%"class.translate::TokenizedOutput"* nonnull %360) #13
  %361 = getelementptr inbounds i8, i8* %359, i64 48
  %362 = bitcast i8* %361 to i64*
  store i64 %91, i64* %362, align 8
  %363 = getelementptr inbounds i8, i8* %359, i64 56
  call void @llvm.memset.p0i8.i64(i8* align 8 %363, i8 0, i64 24, i1 false) #13
  %364 = bitcast i32** %94 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = bitcast %"class.std::__1::vector"* %8 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = sub i64 %365, %367
  %369 = ashr exact i64 %368, 2
  %370 = icmp eq i64 %368, 0
  %371 = inttoptr i64 %367 to i32*
  br i1 %370, label %395, label %372

372:                                              ; preds = %357
  %373 = icmp ugt i64 %369, 4611686018427387903
  br i1 %373, label %374, label %376

374:                                              ; preds = %372
  %375 = bitcast i8* %363 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #14
  unreachable

376:                                              ; preds = %372
  %377 = call i8* @_Znwm(i64 %368) #15
  %378 = bitcast i8* %377 to i32*
  %379 = getelementptr inbounds i8, i8* %359, i64 64
  %380 = bitcast i8* %379 to i8**
  store i8* %377, i8** %380, align 8
  %381 = bitcast i8* %363 to i8**
  store i8* %377, i8** %381, align 8
  %382 = getelementptr inbounds i32, i32* %378, i64 %369
  %383 = getelementptr inbounds i8, i8* %359, i64 72
  %384 = bitcast i8* %383 to i32**
  store i32* %382, i32** %384, align 8
  %385 = bitcast i8* %379 to i64*
  %386 = ptrtoint i8* %377 to i64
  %387 = icmp sgt i64 %368, 0
  br i1 %387, label %388, label %393

388:                                              ; preds = %376
  %389 = lshr exact i64 %368, 2
  %390 = inttoptr i64 %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %377, i8* align 4 %390, i64 %368, i1 false) #13
  %391 = getelementptr inbounds i32, i32* %378, i64 %389
  %392 = ptrtoint i32* %391 to i64
  br label %393

393:                                              ; preds = %388, %376
  %394 = phi i64 [ %392, %388 ], [ %386, %376 ]
  store i64 %394, i64* %385, align 8
  br label %395

395:                                              ; preds = %393, %357
  %396 = getelementptr inbounds i8, i8* %359, i64 80
  call void @llvm.memset.p0i8.i64(i8* align 8 %396, i8 0, i64 24, i1 false) #13
  %397 = bitcast i32** %199 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = bitcast %"class.std::__1::vector"* %9 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = sub i64 %398, %400
  %402 = ashr exact i64 %401, 2
  %403 = icmp eq i64 %401, 0
  br i1 %403, label %427, label %404

404:                                              ; preds = %395
  %405 = icmp ugt i64 %402, 4611686018427387903
  br i1 %405, label %406, label %408

406:                                              ; preds = %404
  %407 = bitcast i8* %396 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %407) #14
  unreachable

408:                                              ; preds = %404
  %409 = call i8* @_Znwm(i64 %401) #15
  %410 = bitcast i8* %409 to i32*
  %411 = getelementptr inbounds i8, i8* %359, i64 88
  %412 = bitcast i8* %411 to i8**
  store i8* %409, i8** %412, align 8
  %413 = bitcast i8* %396 to i8**
  store i8* %409, i8** %413, align 8
  %414 = getelementptr inbounds i32, i32* %410, i64 %402
  %415 = getelementptr inbounds i8, i8* %359, i64 96
  %416 = bitcast i8* %415 to i32**
  store i32* %414, i32** %416, align 8
  %417 = bitcast i8* %411 to i64*
  %418 = ptrtoint i8* %409 to i64
  %419 = icmp sgt i64 %401, 0
  br i1 %419, label %420, label %425

420:                                              ; preds = %408
  %421 = lshr exact i64 %401, 2
  %422 = inttoptr i64 %400 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %409, i8* align 4 %422, i64 %401, i1 false) #13
  %423 = getelementptr inbounds i32, i32* %410, i64 %421
  %424 = ptrtoint i32* %423 to i64
  br label %425

425:                                              ; preds = %420, %408
  %426 = phi i64 [ %424, %420 ], [ %418, %408 ]
  store i64 %426, i64* %417, align 8
  br label %427

427:                                              ; preds = %395, %425
  %428 = getelementptr inbounds i8, i8* %359, i64 104
  %429 = bitcast i8* %428 to i32*
  store i32 %316, i32* %429, align 8
  %430 = getelementptr inbounds i8, i8* %359, i64 108
  store i8 %358, i8* %430, align 4
  %431 = icmp eq i64 %400, 0
  br i1 %431, label %435, label %432

432:                                              ; preds = %427
  store i64 %400, i64* %397, align 8
  %433 = inttoptr i64 %400 to i8*
  call void @_ZdlPv(i8* %433) #15
  %434 = load i32*, i32** %93, align 8
  br label %435

435:                                              ; preds = %427, %432
  %436 = phi i32* [ %371, %427 ], [ %434, %432 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %197) #13
  %437 = icmp eq i32* %436, null
  br i1 %437, label %441, label %438

438:                                              ; preds = %435
  %439 = ptrtoint i32* %436 to i64
  store i64 %439, i64* %364, align 8
  %440 = bitcast i32* %436 to i8*
  call void @_ZdlPv(i8* %440) #15
  br label %441

441:                                              ; preds = %435, %438
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #13
  ret i8* %359
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_14FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #1 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %26, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 80
  %6 = bitcast i8* %5 to i32**
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = ptrtoint i32* %7 to i64
  %11 = getelementptr inbounds i8, i8* %1, i64 88
  %12 = bitcast i8* %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = bitcast i32* %7 to i8*
  tail call void @_ZdlPv(i8* %13) #15
  br label %14

14:                                               ; preds = %9, %4
  %15 = getelementptr inbounds i8, i8* %1, i64 56
  %16 = bitcast i8* %15 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %14
  %20 = ptrtoint i32* %17 to i64
  %21 = getelementptr inbounds i8, i8* %1, i64 64
  %22 = bitcast i8* %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %14, %19
  %25 = bitcast i8* %1 to %"class.translate::TokenizedOutput"*
  tail call void @_ZN9translate15TokenizedOutputD1Ev(%"class.translate::TokenizedOutput"* nonnull %25) #13
  tail call void @_ZdlPv(i8* nonnull %1) #15
  br label %26

26:                                               ; preds = %24, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_16ResizeEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  %13 = icmp eq %struct.TfLiteTensor* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %2, %8
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %16 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %15, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %16(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.9, i64 0, i64 0), i32 186, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0)) #13
  br label %24

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 4
  br i1 %20, label %24, label %21

21:                                               ; preds = %17
  store i32 4, i32* %18, align 8
  %22 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11, i32 1
  %23 = bitcast %union.TfLitePtrUnion* %22 to i8**
  store i8* null, i8** %23, align 8
  br label %24

24:                                               ; preds = %21, %17, %14
  %25 = phi i32 [ 1, %14 ], [ 0, %17 ], [ 0, %21 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.translate::TokenizedOutput", align 8
  %7 = alloca %"class.translate::TokenizedOutput", align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %9 = bitcast i8** %8 to %"class.(anonymous namespace)::NGramHashParams"**
  %10 = load %"class.(anonymous namespace)::NGramHashParams"*, %"class.(anonymous namespace)::NGramHashParams"** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %12 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %11, align 8
  %13 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 1, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %18 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %17, align 8
  %19 = sext i32 %14 to i64
  %20 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 %19
  br label %21

21:                                               ; preds = %2, %16
  %22 = phi %struct.TfLiteTensor* [ %20, %16 ], [ null, %2 ]
  %23 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 0, i32 5
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %28 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %27, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %28(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0)) #13
  br label %395

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 2, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 2, i32 0, i32 1
  %33 = load i32*, i32** %32, align 8
  %34 = icmp eq i32* %31, %33
  %35 = ptrtoint i32* %33 to i64
  %36 = ptrtoint i32* %31 to i64
  br i1 %34, label %37, label %40

37:                                               ; preds = %29
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %39 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %38, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %39(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0)) #13
  br label %395

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 3, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8
  %43 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 3, i32 0, i32 1
  %44 = load i32*, i32** %43, align 8
  %45 = icmp eq i32* %42, %44
  br i1 %45, label %46, label %49

46:                                               ; preds = %40
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0)) #13
  br label %395

49:                                               ; preds = %40
  %50 = ptrtoint i32* %42 to i64
  %51 = ptrtoint i32* %44 to i64
  %52 = sub i64 %35, %36
  %53 = sub i64 %51, %50
  %54 = icmp eq i64 %52, %53
  br i1 %54, label %58, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %57 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %56, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %57(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.16, i64 0, i64 0)) #13
  br label %395

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = icmp slt i32 %60, 1
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %64 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %63, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %64(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.17, i64 0, i64 0)) #13
  br label %395

65:                                               ; preds = %58
  %66 = tail call { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor* %22, i32 0) #13
  %67 = extractvalue { i8*, i32 } %66, 0
  %68 = extractvalue { i8*, i32 } %66, 1
  %69 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 5
  %70 = load i8, i8* %69, align 4, !range !20
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %127, label %72

72:                                               ; preds = %65
  %73 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #13
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 0, i64 24, i1 false) #13
  call void @_ZN9translate19LowercaseUnicodeStrEPKciPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i8* %67, i32 %68, %"class.std::__1::basic_string"* nonnull %5) #13
  %75 = bitcast %"class.translate::TokenizedOutput"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %75) #13
  %76 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  %80 = load i8*, i8** %74, align 8
  %81 = select i1 %79, i8* %80, i8* %73
  %82 = sext i32 %68 to i64
  %83 = load i32, i32* %59, align 8
  %84 = sext i32 %83 to i64
  call void @_ZN9translate8TokenizeEPKcmmb(%"class.translate::TokenizedOutput"* nonnull sret %6, i8* %81, i64 %82, i64 %84, i1 zeroext true) #13
  %85 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0
  %86 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 0
  %87 = icmp eq %"class.translate::TokenizedOutput"* %85, %6
  br i1 %87, label %121, label %88

88:                                               ; preds = %72
  %89 = bitcast %"class.(anonymous namespace)::NGramHashParams"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  %93 = bitcast %"class.translate::TokenizedOutput"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %94 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %93, i64 0, i32 1, i32 0
  %95 = load i8, i8* %94, align 1
  %96 = icmp slt i8 %95, 0
  br i1 %92, label %106, label %97

97:                                               ; preds = %88
  br i1 %96, label %100, label %98

98:                                               ; preds = %97
  %99 = bitcast %"class.(anonymous namespace)::NGramHashParams"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* nonnull align 8 %75, i64 24, i1 false) #13
  br label %115

100:                                              ; preds = %97
  %101 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %86, i8* %102, i64 %104) #13
  br label %115

106:                                              ; preds = %88
  %107 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = zext i8 %95 to i64
  %112 = select i1 %96, i8* %108, i8* %75
  %113 = select i1 %96, i64 %110, i64 %111
  %114 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %86, i8* %112, i64 %113) #13
  br label %115

115:                                              ; preds = %106, %100, %98
  %116 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 1
  %117 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %6, i64 0, i32 1, i32 0, i32 0
  %118 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %117, align 8
  %119 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %6, i64 0, i32 1, i32 0, i32 1
  %120 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %119, align 8
  call void @_ZNSt3__16vectorINS_4pairImmEENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"* %116, %"struct.std::__1::pair"* %118, %"struct.std::__1::pair"* %120) #13
  br label %121

121:                                              ; preds = %115, %72
  call void @_ZN9translate15TokenizedOutputD1Ev(%"class.translate::TokenizedOutput"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %75) #13
  %122 = load i8, i8* %77, align 1
  %123 = icmp slt i8 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %121
  %125 = load i8*, i8** %74, align 8
  call void @_ZdlPv(i8* %125) #15
  br label %126

126:                                              ; preds = %124, %121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #13
  br label %169

127:                                              ; preds = %65
  %128 = bitcast %"class.translate::TokenizedOutput"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %128) #13
  %129 = sext i32 %68 to i64
  %130 = load i32, i32* %59, align 8
  %131 = sext i32 %130 to i64
  call void @_ZN9translate8TokenizeEPKcmmb(%"class.translate::TokenizedOutput"* nonnull sret %7, i8* %67, i64 %129, i64 %131, i1 zeroext true) #13
  %132 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0
  %133 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 0
  %134 = icmp eq %"class.translate::TokenizedOutput"* %132, %7
  br i1 %134, label %168, label %135

135:                                              ; preds = %127
  %136 = bitcast %"class.(anonymous namespace)::NGramHashParams"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %137 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %136, i64 0, i32 1, i32 0
  %138 = load i8, i8* %137, align 1
  %139 = icmp slt i8 %138, 0
  %140 = bitcast %"class.translate::TokenizedOutput"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %141 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %140, i64 0, i32 1, i32 0
  %142 = load i8, i8* %141, align 1
  %143 = icmp slt i8 %142, 0
  br i1 %139, label %153, label %144

144:                                              ; preds = %135
  br i1 %143, label %147, label %145

145:                                              ; preds = %144
  %146 = bitcast %"class.(anonymous namespace)::NGramHashParams"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* nonnull align 8 %128, i64 24, i1 false) #13
  br label %162

147:                                              ; preds = %144
  %148 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %133, i8* %149, i64 %151) #13
  br label %162

153:                                              ; preds = %135
  %154 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = zext i8 %142 to i64
  %159 = select i1 %143, i8* %155, i8* %128
  %160 = select i1 %143, i64 %157, i64 %158
  %161 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %133, i8* %159, i64 %160) #13
  br label %162

162:                                              ; preds = %153, %147, %145
  %163 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 1
  %164 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %7, i64 0, i32 1, i32 0, i32 0
  %165 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %164, align 8
  %166 = getelementptr inbounds %"class.translate::TokenizedOutput", %"class.translate::TokenizedOutput"* %7, i64 0, i32 1, i32 0, i32 1
  %167 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %166, align 8
  call void @_ZNSt3__16vectorINS_4pairImmEENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"* %163, %"struct.std::__1::pair"* %165, %"struct.std::__1::pair"* %167) #13
  br label %168

168:                                              ; preds = %162, %127
  call void @_ZN9translate15TokenizedOutputD1Ev(%"class.translate::TokenizedOutput"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %128) #13
  br label %169

169:                                              ; preds = %168, %126
  %170 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %171 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %170, align 8
  %172 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %171, i64 0, i32 1, i64 0
  %173 = load i32, i32* %172, align 4
  %174 = icmp slt i32 %173, 0
  br i1 %174, label %181, label %175

175:                                              ; preds = %169
  %176 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %177 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %176, align 8
  %178 = sext i32 %173 to i64
  %179 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %177, i64 %178
  %180 = icmp eq %struct.TfLiteTensor* %179, null
  br i1 %180, label %181, label %184

181:                                              ; preds = %169, %175
  %182 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %183 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %182, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %183(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.9, i64 0, i64 0), i32 197, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0)) #13
  br label %395

184:                                              ; preds = %175
  %185 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %177, i64 %178, i32 4
  %186 = load i32, i32* %185, align 8
  %187 = icmp eq i32 %186, 4
  br i1 %187, label %188, label %214

188:                                              ; preds = %184
  %189 = call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 3) #13
  %190 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %189, i64 0, i32 1, i64 0
  store i32 1, i32* %190, align 4
  %191 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 2
  %192 = bitcast i32** %32 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.std::__1::vector"* %191 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = sub i64 %193, %195
  %197 = lshr exact i64 %196, 2
  %198 = trunc i64 %197 to i32
  %199 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %189, i64 0, i32 1, i64 1
  store i32 %198, i32* %199, align 4
  %200 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 1
  %201 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 1, i32 0, i32 1
  %202 = bitcast %"struct.std::__1::pair"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.std::__1::vector.6"* %200 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %203, %205
  %207 = lshr exact i64 %206, 4
  %208 = trunc i64 %207 to i32
  %209 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %189, i64 0, i32 1, i64 2
  store i32 %208, i32* %209, align 4
  %210 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %211 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %210, align 8
  %212 = call i32 %211(%struct.TfLiteContext* %0, %struct.TfLiteTensor* nonnull %179, %struct.TfLiteIntArray* %189) #13
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %217, label %395

214:                                              ; preds = %184
  %215 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %216 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %215, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %216(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #13
  br label %395

217:                                              ; preds = %188
  %218 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %179, i64 0, i32 0
  %219 = load i32, i32* %218, align 8
  %220 = icmp eq i32 %219, 2
  br i1 %220, label %221, label %392

221:                                              ; preds = %217
  %222 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %177, i64 %178, i32 1, i32 0
  %223 = load i32*, i32** %222, align 8
  %224 = load i64, i64* %202, align 8
  %225 = load i64, i64* %204, align 8
  %226 = sub i64 %224, %225
  %227 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %227) #13
  %228 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %229 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %227, i8 0, i64 24, i1 false) #13
  %230 = load i64, i64* %192, align 8
  %231 = load i64, i64* %194, align 8
  %232 = sub i64 %230, %231
  %233 = ashr exact i64 %232, 2
  %234 = icmp eq i64 %232, 0
  %235 = inttoptr i64 %225 to %"struct.std::__1::pair"*
  br i1 %234, label %256, label %236

236:                                              ; preds = %221
  %237 = icmp ugt i64 %233, 4611686018427387903
  br i1 %237, label %238, label %240

238:                                              ; preds = %236
  %239 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %239) #14
  unreachable

240:                                              ; preds = %236
  %241 = call i8* @_Znwm(i64 %232) #15
  %242 = bitcast i8* %241 to i32*
  %243 = bitcast i32** %228 to i8**
  store i8* %241, i8** %243, align 8
  %244 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %241, i8** %244, align 8
  %245 = getelementptr inbounds i32, i32* %242, i64 %233
  store i32* %245, i32** %229, align 8
  %246 = bitcast i32** %228 to i64*
  %247 = ptrtoint i8* %241 to i64
  %248 = icmp sgt i64 %232, 0
  br i1 %248, label %249, label %254

249:                                              ; preds = %240
  %250 = lshr exact i64 %232, 2
  %251 = inttoptr i64 %231 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %241, i8* align 4 %251, i64 %232, i1 false) #13
  %252 = getelementptr inbounds i32, i32* %242, i64 %250
  %253 = ptrtoint i32* %252 to i64
  br label %254

254:                                              ; preds = %249, %240
  %255 = phi i64 [ %253, %249 ], [ %247, %240 ]
  store i64 %255, i64* %246, align 8
  br label %256

256:                                              ; preds = %254, %221
  %257 = phi i8* [ null, %221 ], [ %241, %254 ]
  %258 = phi i32* [ null, %221 ], [ %242, %254 ]
  %259 = phi i64 [ 0, %221 ], [ %247, %254 ]
  %260 = phi i64 [ 0, %221 ], [ %255, %254 ]
  %261 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %261) #13
  %262 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %263 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %264 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %261, i8 0, i64 24, i1 false) #13
  %265 = bitcast i32** %43 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast %"class.std::__1::vector"* %264 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = sub i64 %266, %268
  %270 = ashr exact i64 %269, 2
  %271 = icmp eq i64 %269, 0
  br i1 %271, label %292, label %272

272:                                              ; preds = %256
  %273 = icmp ugt i64 %270, 4611686018427387903
  br i1 %273, label %274, label %276

274:                                              ; preds = %272
  %275 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %275) #14
  unreachable

276:                                              ; preds = %272
  %277 = call i8* @_Znwm(i64 %269) #15
  %278 = bitcast i8* %277 to i32*
  %279 = bitcast i32** %262 to i8**
  store i8* %277, i8** %279, align 8
  %280 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %277, i8** %280, align 8
  %281 = getelementptr inbounds i32, i32* %278, i64 %270
  store i32* %281, i32** %263, align 8
  %282 = bitcast i32** %262 to i64*
  %283 = ptrtoint i8* %277 to i64
  %284 = icmp sgt i64 %269, 0
  br i1 %284, label %285, label %290

285:                                              ; preds = %276
  %286 = lshr exact i64 %269, 2
  %287 = inttoptr i64 %268 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %277, i8* align 4 %287, i64 %269, i1 false) #13
  %288 = getelementptr inbounds i32, i32* %278, i64 %286
  %289 = ptrtoint i32* %288 to i64
  br label %290

290:                                              ; preds = %285, %276
  %291 = phi i64 [ %289, %285 ], [ %283, %276 ]
  store i64 %291, i64* %282, align 8
  br label %292

292:                                              ; preds = %290, %256
  %293 = phi i8* [ null, %256 ], [ %277, %290 ]
  %294 = phi i32* [ null, %256 ], [ %278, %290 ]
  %295 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 1
  %296 = load i64, i64* %295, align 8
  %297 = bitcast i32** %228 to i64*
  %298 = icmp eq i64 %260, %259
  br i1 %298, label %309, label %299

299:                                              ; preds = %292
  %300 = bitcast %"class.(anonymous namespace)::NGramHashParams"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %301 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %300, i64 0, i32 1, i32 0
  %302 = bitcast %"class.(anonymous namespace)::NGramHashParams"* %10 to i8*
  %303 = getelementptr inbounds %"class.(anonymous namespace)::NGramHashParams", %"class.(anonymous namespace)::NGramHashParams"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = shl i64 %226, 28
  %305 = ashr i64 %304, 32
  %306 = sub i64 %260, %259
  %307 = ashr exact i64 %306, 2
  %308 = inttoptr i64 %259 to i32*
  br label %318

309:                                              ; preds = %347, %292
  %310 = icmp eq i32* %294, null
  br i1 %310, label %314, label %311

311:                                              ; preds = %309
  %312 = ptrtoint i32* %294 to i64
  %313 = bitcast i32** %262 to i64*
  store i64 %312, i64* %313, align 8
  call void @_ZdlPv(i8* %293) #15
  br label %314

314:                                              ; preds = %311, %309
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %261) #13
  %315 = icmp eq i32* %258, null
  br i1 %315, label %391, label %316

316:                                              ; preds = %314
  %317 = ptrtoint i32* %258 to i64
  store i64 %317, i64* %297, align 8
  call void @_ZdlPv(i8* %257) #15
  br label %391

318:                                              ; preds = %347, %299
  %319 = phi %"struct.std::__1::pair"* [ %235, %299 ], [ %348, %347 ]
  %320 = phi %"struct.std::__1::pair"* [ %235, %299 ], [ %349, %347 ]
  %321 = phi i32* [ %258, %299 ], [ %308, %347 ]
  %322 = phi i64 [ %225, %299 ], [ %350, %347 ]
  %323 = phi i64 [ %224, %299 ], [ %351, %347 ]
  %324 = phi i64 [ 0, %299 ], [ %352, %347 ]
  %325 = sub i64 %323, %322
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %347, label %327

327:                                              ; preds = %318
  %328 = ashr exact i64 %325, 4
  %329 = getelementptr inbounds i32, i32* %321, i64 %324
  %330 = load i32, i32* %329, align 4
  %331 = getelementptr inbounds i32, i32* %294, i64 %324
  %332 = load i32, i32* %331, align 4
  %333 = sext i32 %330 to i64
  %334 = sext i32 %332 to i64
  %335 = mul i64 %324, %305
  br label %336

336:                                              ; preds = %360, %327
  %337 = phi %"struct.std::__1::pair"* [ %319, %327 ], [ %379, %360 ]
  %338 = phi %"struct.std::__1::pair"* [ %320, %327 ], [ %379, %360 ]
  %339 = phi i64 [ %328, %327 ], [ %377, %360 ]
  %340 = phi i64 [ 0, %327 ], [ %373, %360 ]
  %341 = add i64 %340, %333
  %342 = icmp ult i64 %340, %339
  %343 = icmp ult i64 %340, %341
  %344 = and i1 %342, %343
  br i1 %344, label %380, label %354

345:                                              ; preds = %360
  %346 = inttoptr i64 %375 to %"struct.std::__1::pair"*
  br label %347

347:                                              ; preds = %345, %318
  %348 = phi %"struct.std::__1::pair"* [ %319, %318 ], [ %346, %345 ]
  %349 = phi %"struct.std::__1::pair"* [ %320, %318 ], [ %346, %345 ]
  %350 = phi i64 [ %322, %318 ], [ %375, %345 ]
  %351 = phi i64 [ %323, %318 ], [ %374, %345 ]
  %352 = add nuw i64 %324, 1
  %353 = icmp ult i64 %352, %307
  br i1 %353, label %318, label %309

354:                                              ; preds = %380, %336
  %355 = phi i32 [ 0, %336 ], [ %386, %380 ]
  %356 = load i8, i8* %301, align 1
  %357 = icmp slt i8 %356, 0
  br i1 %357, label %358, label %360

358:                                              ; preds = %354
  %359 = load i8*, i8** %303, align 8
  br label %360

360:                                              ; preds = %358, %354
  %361 = phi i8* [ %359, %358 ], [ %302, %354 ]
  %362 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %337, i64 %340, i32 0
  %363 = load i64, i64* %362, align 8
  %364 = getelementptr inbounds i8, i8* %361, i64 %363
  %365 = icmp slt i32 %355, 7
  %366 = select i1 %365, i32 %355, i32 7
  %367 = call i64 @_Z13MurmurHash64APKvim(i8* %364, i32 %366, i64 %296) #13
  %368 = urem i64 %367, %334
  %369 = trunc i64 %368 to i32
  %370 = add i32 %369, 1
  %371 = add i64 %340, %335
  %372 = getelementptr inbounds i32, i32* %223, i64 %371
  store i32 %370, i32* %372, align 4
  %373 = add nuw i64 %340, 1
  %374 = load i64, i64* %202, align 8
  %375 = load i64, i64* %204, align 8
  %376 = sub i64 %374, %375
  %377 = ashr exact i64 %376, 4
  %378 = icmp ult i64 %373, %377
  %379 = inttoptr i64 %375 to %"struct.std::__1::pair"*
  br i1 %378, label %336, label %345

380:                                              ; preds = %336, %380
  %381 = phi i64 [ %387, %380 ], [ %340, %336 ]
  %382 = phi i32 [ %386, %380 ], [ 0, %336 ]
  %383 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %338, i64 %381, i32 1
  %384 = load i64, i64* %383, align 8
  %385 = trunc i64 %384 to i32
  %386 = add i32 %382, %385
  %387 = add nuw i64 %381, 1
  %388 = icmp ult i64 %387, %339
  %389 = icmp ult i64 %387, %341
  %390 = and i1 %388, %389
  br i1 %390, label %380, label %354

391:                                              ; preds = %314, %316
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %227) #13
  br label %395

392:                                              ; preds = %217
  %393 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %394 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %393, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %394(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.12, i64 0, i64 0)) #13
  br label %395

395:                                              ; preds = %62, %55, %46, %37, %26, %181, %214, %392, %391, %188
  %396 = phi i32 [ 0, %391 ], [ 1, %392 ], [ %212, %188 ], [ 1, %214 ], [ 1, %181 ], [ 1, %26 ], [ 1, %37 ], [ 1, %46 ], [ 1, %55 ], [ 1, %62 ]
  ret i32 %396
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"*, i8*) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8, !noalias !21
  %5 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load i8, i8* %5, align 8, !noalias !21
  %7 = zext i8 %6 to i64
  %8 = mul nsw i64 %7, -3
  %9 = getelementptr inbounds i8, i8* %4, i64 %8
  %10 = icmp ult i8 %6, 4
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = icmp ult i8 %6, 2
  br i1 %12, label %15, label %23

13:                                               ; preds = %2
  %14 = icmp ult i8 %6, 8
  br i1 %14, label %33, label %43

15:                                               ; preds = %11
  %16 = load i8, i8* %9, align 1, !noalias !21
  %17 = zext i8 %16 to i64
  %18 = sub nsw i64 0, %17
  %19 = getelementptr inbounds i8, i8* %9, i64 %18
  %20 = getelementptr inbounds i8, i8* %9, i64 %7
  %21 = load i8, i8* %20, align 1, !noalias !21
  %22 = zext i8 %21 to i64
  br label %51

23:                                               ; preds = %11
  %24 = bitcast i8* %9 to i16*
  %25 = load i16, i16* %24, align 2, !noalias !21
  %26 = zext i16 %25 to i64
  %27 = sub nsw i64 0, %26
  %28 = getelementptr inbounds i8, i8* %9, i64 %27
  %29 = getelementptr inbounds i8, i8* %9, i64 %7
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2, !noalias !21
  %32 = zext i16 %31 to i64
  br label %51

33:                                               ; preds = %13
  %34 = bitcast i8* %9 to i32*
  %35 = load i32, i32* %34, align 4, !noalias !21
  %36 = zext i32 %35 to i64
  %37 = sub nsw i64 0, %36
  %38 = getelementptr inbounds i8, i8* %9, i64 %37
  %39 = getelementptr inbounds i8, i8* %9, i64 %7
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4, !noalias !21
  %42 = zext i32 %41 to i64
  br label %51

43:                                               ; preds = %13
  %44 = bitcast i8* %9 to i64*
  %45 = load i64, i64* %44, align 8, !noalias !21
  %46 = sub i64 0, %45
  %47 = getelementptr inbounds i8, i8* %9, i64 %46
  %48 = getelementptr inbounds i8, i8* %9, i64 %7
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 8, !noalias !21
  br label %51

51:                                               ; preds = %43, %33, %23, %15
  %52 = phi i8* [ %19, %15 ], [ %28, %23 ], [ %38, %33 ], [ %47, %43 ]
  %53 = phi i64 [ %22, %15 ], [ %32, %23 ], [ %42, %33 ], [ %50, %43 ]
  %54 = trunc i64 %53 to i8
  %55 = and i64 %53, 255
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds i8, i8* %52, i64 %56
  %58 = icmp ult i8 %54, 4
  br i1 %58, label %59, label %68

59:                                               ; preds = %51
  %60 = icmp ult i8 %54, 2
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  %62 = load i8, i8* %57, align 1, !noalias !21
  %63 = zext i8 %62 to i64
  br label %77

64:                                               ; preds = %59
  %65 = bitcast i8* %57 to i16*
  %66 = load i16, i16* %65, align 2, !noalias !21
  %67 = zext i16 %66 to i64
  br label %77

68:                                               ; preds = %51
  %69 = icmp ult i8 %54, 8
  br i1 %69, label %70, label %74

70:                                               ; preds = %68
  %71 = bitcast i8* %57 to i32*
  %72 = load i32, i32* %71, align 4, !noalias !21
  %73 = zext i32 %72 to i64
  br label %77

74:                                               ; preds = %68
  %75 = bitcast i8* %57 to i64*
  %76 = load i64, i64* %75, align 8, !noalias !21
  br label %77

77:                                               ; preds = %61, %64, %70, %74
  %78 = phi i64 [ %63, %61 ], [ %67, %64 ], [ %73, %70 ], [ %76, %74 ]
  %79 = add i8 %54, -1
  %80 = icmp ult i8 %79, 8
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = sext i8 %79 to i64
  %83 = getelementptr inbounds [8 x i32 (i8*, i8*)*], [8 x i32 (i8*, i8*)*]* @switch.table._ZNK11flexbuffers3MapixEPKc, i64 0, i64 %82
  %84 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %83, align 8
  br label %85

85:                                               ; preds = %81, %77
  %86 = phi i32 (i8*, i8*)* [ null, %77 ], [ %84, %81 ]
  %87 = icmp eq i64 %78, 0
  br i1 %87, label %138, label %88

88:                                               ; preds = %85, %101
  %89 = phi i64 [ %103, %101 ], [ %78, %85 ]
  %90 = phi i64 [ %102, %101 ], [ 0, %85 ]
  %91 = add i64 %90, %89
  %92 = lshr i64 %91, 1
  %93 = mul i64 %92, %55
  %94 = getelementptr inbounds i8, i8* %52, i64 %93
  %95 = tail call i32 %86(i8* %1, i8* %94) #13
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %101, label %97

97:                                               ; preds = %88
  %98 = icmp eq i32 %95, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %97
  %100 = add nuw i64 %92, 1
  br label %101

101:                                              ; preds = %99, %88
  %102 = phi i64 [ %100, %99 ], [ %90, %88 ]
  %103 = phi i64 [ %89, %99 ], [ %92, %88 ]
  %104 = icmp ult i64 %102, %103
  br i1 %104, label %88, label %138

105:                                              ; preds = %97
  %106 = icmp eq i8* %94, null
  br i1 %106, label %138, label %107

107:                                              ; preds = %105
  %108 = sdiv i64 %93, %55
  %109 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %0, i64 0, i32 0, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = icmp ugt i64 %110, %108
  br i1 %111, label %112, label %129

112:                                              ; preds = %107
  %113 = load i8*, i8** %3, align 8
  %114 = load i8, i8* %5, align 8
  %115 = zext i8 %114 to i64
  %116 = mul i64 %110, %115
  %117 = getelementptr inbounds i8, i8* %113, i64 %116
  %118 = getelementptr inbounds i8, i8* %117, i64 %108
  %119 = load i8, i8* %118, align 1
  %120 = mul i64 %108, %115
  %121 = getelementptr inbounds i8, i8* %113, i64 %120
  %122 = zext i8 %119 to i32
  %123 = and i32 %122, 3
  %124 = lshr i32 %122, 2
  %125 = zext i32 %124 to i64
  %126 = shl nuw nsw i64 %125, 32
  %127 = shl i32 256, %123
  %128 = zext i32 %127 to i64
  br label %129

129:                                              ; preds = %107, %112
  %130 = phi i64 [ %126, %112 ], [ 0, %107 ]
  %131 = phi i64 [ %128, %112 ], [ 256, %107 ]
  %132 = phi i64 [ %115, %112 ], [ 1, %107 ]
  %133 = phi i8* [ %121, %112 ], [ null, %107 ]
  %134 = and i64 %131, 4294901760
  %135 = and i64 %131, 65280
  %136 = and i64 %131, 255
  %137 = or i64 %136, %132
  br label %138

138:                                              ; preds = %101, %85, %105, %129
  %139 = phi i64 [ %134, %129 ], [ 0, %105 ], [ 0, %85 ], [ 0, %101 ]
  %140 = phi i64 [ %135, %129 ], [ 256, %105 ], [ 256, %85 ], [ 256, %101 ]
  %141 = phi i64 [ %137, %129 ], [ 1, %105 ], [ 1, %85 ], [ 1, %101 ]
  %142 = phi i8* [ %133, %129 ], [ null, %105 ], [ null, %85 ], [ null, %101 ]
  %143 = phi i64 [ %130, %129 ], [ 0, %105 ], [ 0, %85 ], [ 0, %101 ]
  %144 = insertvalue { i8*, i64 } undef, i8* %142, 0
  %145 = or i64 %140, %139
  %146 = or i64 %145, %141
  %147 = or i64 %146, %143
  %148 = insertvalue { i8*, i64 } %144, i64 %147, 1
  ret { i8*, i64 } %148
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = alloca %"class.flexbuffers::String", align 8
  %4 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %325 [
    i32 1, label %6
    i32 6, label %30
    i32 2, label %79
    i32 7, label %103
    i32 3, label %152
    i32 8, label %179
    i32 26, label %301
    i32 5, label %231
    i32 10, label %249
  ]

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8
  %11 = icmp ult i8 %10, 4
  br i1 %11, label %12, label %21

12:                                               ; preds = %6
  %13 = icmp ult i8 %10, 2
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = load i8, i8* %8, align 1
  %16 = sext i8 %15 to i64
  br label %325

17:                                               ; preds = %12
  %18 = bitcast i8* %8 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i64
  br label %325

21:                                               ; preds = %6
  %22 = icmp ult i8 %10, 8
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = bitcast i8* %8 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  br label %325

27:                                               ; preds = %21
  %28 = bitcast i8* %8 to i64*
  %29 = load i64, i64* %28, align 8
  br label %325

30:                                               ; preds = %1
  %31 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 8
  %35 = icmp ult i8 %34, 4
  br i1 %35, label %36, label %45

36:                                               ; preds = %30
  %37 = icmp ult i8 %34, 2
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = load i8, i8* %32, align 1
  %40 = zext i8 %39 to i64
  br label %54

41:                                               ; preds = %36
  %42 = bitcast i8* %32 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  br label %54

45:                                               ; preds = %30
  %46 = icmp ult i8 %34, 8
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = bitcast i8* %32 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  br label %54

51:                                               ; preds = %45
  %52 = bitcast i8* %32 to i64*
  %53 = load i64, i64* %52, align 8
  br label %54

54:                                               ; preds = %38, %41, %47, %51
  %55 = phi i64 [ %40, %38 ], [ %44, %41 ], [ %50, %47 ], [ %53, %51 ]
  %56 = sub i64 0, %55
  %57 = getelementptr inbounds i8, i8* %32, i64 %56
  %58 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %59 = load i8, i8* %58, align 1
  %60 = icmp ult i8 %59, 4
  br i1 %60, label %61, label %70

61:                                               ; preds = %54
  %62 = icmp ult i8 %59, 2
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = load i8, i8* %57, align 1
  %65 = sext i8 %64 to i64
  br label %325

66:                                               ; preds = %61
  %67 = bitcast i8* %57 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i64
  br label %325

70:                                               ; preds = %54
  %71 = icmp ult i8 %59, 8
  br i1 %71, label %72, label %76

72:                                               ; preds = %70
  %73 = bitcast i8* %57 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  br label %325

76:                                               ; preds = %70
  %77 = bitcast i8* %57 to i64*
  %78 = load i64, i64* %77, align 8
  br label %325

79:                                               ; preds = %1
  %80 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %83 = load i8, i8* %82, align 8
  %84 = icmp ult i8 %83, 4
  br i1 %84, label %85, label %94

85:                                               ; preds = %79
  %86 = icmp ult i8 %83, 2
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = load i8, i8* %81, align 1
  %89 = zext i8 %88 to i64
  br label %325

90:                                               ; preds = %85
  %91 = bitcast i8* %81 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i64
  br label %325

94:                                               ; preds = %79
  %95 = icmp ult i8 %83, 8
  br i1 %95, label %96, label %100

96:                                               ; preds = %94
  %97 = bitcast i8* %81 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  br label %325

100:                                              ; preds = %94
  %101 = bitcast i8* %81 to i64*
  %102 = load i64, i64* %101, align 8
  br label %325

103:                                              ; preds = %1
  %104 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %107 = load i8, i8* %106, align 8
  %108 = icmp ult i8 %107, 4
  br i1 %108, label %109, label %118

109:                                              ; preds = %103
  %110 = icmp ult i8 %107, 2
  br i1 %110, label %111, label %114

111:                                              ; preds = %109
  %112 = load i8, i8* %105, align 1
  %113 = zext i8 %112 to i64
  br label %127

114:                                              ; preds = %109
  %115 = bitcast i8* %105 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  br label %127

118:                                              ; preds = %103
  %119 = icmp ult i8 %107, 8
  br i1 %119, label %120, label %124

120:                                              ; preds = %118
  %121 = bitcast i8* %105 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  br label %127

124:                                              ; preds = %118
  %125 = bitcast i8* %105 to i64*
  %126 = load i64, i64* %125, align 8
  br label %127

127:                                              ; preds = %111, %114, %120, %124
  %128 = phi i64 [ %113, %111 ], [ %117, %114 ], [ %123, %120 ], [ %126, %124 ]
  %129 = sub i64 0, %128
  %130 = getelementptr inbounds i8, i8* %105, i64 %129
  %131 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %132, 4
  br i1 %133, label %134, label %143

134:                                              ; preds = %127
  %135 = icmp ult i8 %132, 2
  br i1 %135, label %136, label %139

136:                                              ; preds = %134
  %137 = load i8, i8* %130, align 1
  %138 = zext i8 %137 to i64
  br label %325

139:                                              ; preds = %134
  %140 = bitcast i8* %130 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i64
  br label %325

143:                                              ; preds = %127
  %144 = icmp ult i8 %132, 8
  br i1 %144, label %145, label %149

145:                                              ; preds = %143
  %146 = bitcast i8* %130 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  br label %325

149:                                              ; preds = %143
  %150 = bitcast i8* %130 to i64*
  %151 = load i64, i64* %150, align 8
  br label %325

152:                                              ; preds = %1
  %153 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %156 = load i8, i8* %155, align 8
  %157 = icmp ult i8 %156, 4
  br i1 %157, label %158, label %167

158:                                              ; preds = %152
  %159 = icmp ult i8 %156, 2
  br i1 %159, label %160, label %163

160:                                              ; preds = %158
  %161 = load i8, i8* %154, align 1
  %162 = sitofp i8 %161 to double
  br label %176

163:                                              ; preds = %158
  %164 = bitcast i8* %154 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = sitofp i16 %165 to double
  br label %176

167:                                              ; preds = %152
  %168 = icmp ult i8 %156, 8
  br i1 %168, label %169, label %173

169:                                              ; preds = %167
  %170 = bitcast i8* %154 to float*
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  br label %176

173:                                              ; preds = %167
  %174 = bitcast i8* %154 to double*
  %175 = load double, double* %174, align 8
  br label %176

176:                                              ; preds = %160, %163, %169, %173
  %177 = phi double [ %162, %160 ], [ %166, %163 ], [ %172, %169 ], [ %175, %173 ]
  %178 = fptosi double %177 to i64
  br label %325

179:                                              ; preds = %1
  %180 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %183 = load i8, i8* %182, align 8
  %184 = icmp ult i8 %183, 4
  br i1 %184, label %185, label %194

185:                                              ; preds = %179
  %186 = icmp ult i8 %183, 2
  br i1 %186, label %187, label %190

187:                                              ; preds = %185
  %188 = load i8, i8* %181, align 1
  %189 = zext i8 %188 to i64
  br label %203

190:                                              ; preds = %185
  %191 = bitcast i8* %181 to i16*
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i64
  br label %203

194:                                              ; preds = %179
  %195 = icmp ult i8 %183, 8
  br i1 %195, label %196, label %200

196:                                              ; preds = %194
  %197 = bitcast i8* %181 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  br label %203

200:                                              ; preds = %194
  %201 = bitcast i8* %181 to i64*
  %202 = load i64, i64* %201, align 8
  br label %203

203:                                              ; preds = %187, %190, %196, %200
  %204 = phi i64 [ %189, %187 ], [ %193, %190 ], [ %199, %196 ], [ %202, %200 ]
  %205 = sub i64 0, %204
  %206 = getelementptr inbounds i8, i8* %181, i64 %205
  %207 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %208 = load i8, i8* %207, align 1
  %209 = icmp ult i8 %208, 4
  br i1 %209, label %210, label %219

210:                                              ; preds = %203
  %211 = icmp ult i8 %208, 2
  br i1 %211, label %212, label %215

212:                                              ; preds = %210
  %213 = load i8, i8* %206, align 1
  %214 = sitofp i8 %213 to double
  br label %228

215:                                              ; preds = %210
  %216 = bitcast i8* %206 to i16*
  %217 = load i16, i16* %216, align 2
  %218 = sitofp i16 %217 to double
  br label %228

219:                                              ; preds = %203
  %220 = icmp ult i8 %208, 8
  br i1 %220, label %221, label %225

221:                                              ; preds = %219
  %222 = bitcast i8* %206 to float*
  %223 = load float, float* %222, align 4
  %224 = fpext float %223 to double
  br label %228

225:                                              ; preds = %219
  %226 = bitcast i8* %206 to double*
  %227 = load double, double* %226, align 8
  br label %228

228:                                              ; preds = %212, %215, %221, %225
  %229 = phi double [ %214, %212 ], [ %218, %215 ], [ %224, %221 ], [ %227, %225 ]
  %230 = fptosi double %229 to i64
  br label %325

231:                                              ; preds = %1
  %232 = bitcast %"class.flexbuffers::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232) #13
  call void @_ZNK11flexbuffers9Reference8AsStringEv(%"class.flexbuffers::String"* nonnull sret %3, %"class.flexbuffers::Reference"* %0)
  %233 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %3, i64 0, i32 0, i32 0, i32 0
  %234 = load i8*, i8** %233, align 8
  %235 = tail call i32* @__errno_location() #16
  store i32 0, i32* %235, align 4
  %236 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #13
  store i8* %234, i8** %2, align 8
  %237 = call i64 @strtoll(i8* %234, i8** nonnull %2, i32 10) #13
  %238 = load i8*, i8** %2, align 8
  %239 = load i8, i8* %238, align 1
  %240 = icmp ne i8 %239, 0
  %241 = icmp eq i8* %238, %234
  %242 = or i1 %241, %240
  br i1 %242, label %247, label %243

243:                                              ; preds = %231
  %244 = load i32, i32* %235, align 4
  %245 = icmp eq i32 %244, 0
  %246 = select i1 %245, i64 %237, i64 0
  br label %247

247:                                              ; preds = %243, %231
  %248 = phi i64 [ 0, %231 ], [ %246, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232) #13
  br label %325

249:                                              ; preds = %1
  %250 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %251 = load i8*, i8** %250, align 8, !noalias !24
  %252 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %253 = load i8, i8* %252, align 8, !noalias !24
  %254 = icmp ult i8 %253, 4
  br i1 %254, label %255, label %264

255:                                              ; preds = %249
  %256 = icmp ult i8 %253, 2
  br i1 %256, label %257, label %260

257:                                              ; preds = %255
  %258 = load i8, i8* %251, align 1, !noalias !24
  %259 = zext i8 %258 to i64
  br label %273

260:                                              ; preds = %255
  %261 = bitcast i8* %251 to i16*
  %262 = load i16, i16* %261, align 2, !noalias !24
  %263 = zext i16 %262 to i64
  br label %273

264:                                              ; preds = %249
  %265 = icmp ult i8 %253, 8
  br i1 %265, label %266, label %270

266:                                              ; preds = %264
  %267 = bitcast i8* %251 to i32*
  %268 = load i32, i32* %267, align 4, !noalias !24
  %269 = zext i32 %268 to i64
  br label %273

270:                                              ; preds = %264
  %271 = bitcast i8* %251 to i64*
  %272 = load i64, i64* %271, align 8, !noalias !24
  br label %273

273:                                              ; preds = %270, %266, %260, %257
  %274 = phi i64 [ %259, %257 ], [ %263, %260 ], [ %269, %266 ], [ %272, %270 ]
  %275 = sub i64 0, %274
  %276 = getelementptr inbounds i8, i8* %251, i64 %275
  %277 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %278 = load i8, i8* %277, align 1, !noalias !24
  %279 = zext i8 %278 to i64
  %280 = sub nsw i64 0, %279
  %281 = getelementptr inbounds i8, i8* %276, i64 %280
  %282 = icmp ult i8 %278, 4
  br i1 %282, label %283, label %292

283:                                              ; preds = %273
  %284 = icmp ult i8 %278, 2
  br i1 %284, label %285, label %288

285:                                              ; preds = %283
  %286 = load i8, i8* %281, align 1, !noalias !24
  %287 = zext i8 %286 to i64
  br label %325

288:                                              ; preds = %283
  %289 = bitcast i8* %281 to i16*
  %290 = load i16, i16* %289, align 2, !noalias !24
  %291 = zext i16 %290 to i64
  br label %325

292:                                              ; preds = %273
  %293 = icmp ult i8 %278, 8
  br i1 %293, label %294, label %298

294:                                              ; preds = %292
  %295 = bitcast i8* %281 to i32*
  %296 = load i32, i32* %295, align 4, !noalias !24
  %297 = zext i32 %296 to i64
  br label %325

298:                                              ; preds = %292
  %299 = bitcast i8* %281 to i64*
  %300 = load i64, i64* %299, align 8, !noalias !24
  br label %325

301:                                              ; preds = %1
  %302 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %305 = load i8, i8* %304, align 8
  %306 = icmp ult i8 %305, 4
  br i1 %306, label %307, label %316

307:                                              ; preds = %301
  %308 = icmp ult i8 %305, 2
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = load i8, i8* %303, align 1
  %311 = sext i8 %310 to i64
  br label %325

312:                                              ; preds = %307
  %313 = bitcast i8* %303 to i16*
  %314 = load i16, i16* %313, align 2
  %315 = sext i16 %314 to i64
  br label %325

316:                                              ; preds = %301
  %317 = icmp ult i8 %305, 8
  br i1 %317, label %318, label %322

318:                                              ; preds = %316
  %319 = bitcast i8* %303 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %320 to i64
  br label %325

322:                                              ; preds = %316
  %323 = bitcast i8* %303 to i64*
  %324 = load i64, i64* %323, align 8
  br label %325

325:                                              ; preds = %322, %318, %312, %309, %298, %294, %288, %285, %149, %145, %139, %136, %100, %96, %90, %87, %76, %72, %66, %63, %27, %23, %17, %14, %1, %247, %228, %176
  %326 = phi i64 [ %248, %247 ], [ %230, %228 ], [ %178, %176 ], [ 0, %1 ], [ %16, %14 ], [ %20, %17 ], [ %26, %23 ], [ %29, %27 ], [ %65, %63 ], [ %69, %66 ], [ %75, %72 ], [ %78, %76 ], [ %89, %87 ], [ %93, %90 ], [ %99, %96 ], [ %102, %100 ], [ %138, %136 ], [ %142, %139 ], [ %148, %145 ], [ %151, %149 ], [ %287, %285 ], [ %291, %288 ], [ %297, %294 ], [ %300, %298 ], [ %311, %309 ], [ %315, %312 ], [ %321, %318 ], [ %324, %322 ]
  ret i64 %326
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareIhEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i64
  %5 = sub nsw i64 0, %4
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = tail call i32 @strcmp(i8* %0, i8* %6) #17
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareItEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = zext i16 %4 to i64
  %6 = sub nsw i64 0, %5
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = tail call i32 @strcmp(i8* %0, i8* %7) #17
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareIjEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = sub nsw i64 0, %5
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = tail call i32 @strcmp(i8* %0, i8* %7) #17
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareImEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = bitcast i8* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = sub i64 0, %4
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = tail call i32 @strcmp(i8* %0, i8* %6) #17
  ret i32 %7
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK11flexbuffers9Reference8AsStringEv(%"class.flexbuffers::String"* noalias sret, %"class.flexbuffers::Reference"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %96 [
    i32 5, label %5
    i32 4, label %62
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 1
  %9 = load i8, i8* %8, align 8
  %10 = icmp ult i8 %9, 4
  br i1 %10, label %11, label %20

11:                                               ; preds = %5
  %12 = icmp ult i8 %9, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %11
  %14 = load i8, i8* %7, align 1
  %15 = zext i8 %14 to i64
  br label %29

16:                                               ; preds = %11
  %17 = bitcast i8* %7 to i16*
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i64
  br label %29

20:                                               ; preds = %5
  %21 = icmp ult i8 %9, 8
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = bitcast i8* %7 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  br label %29

26:                                               ; preds = %20
  %27 = bitcast i8* %7 to i64*
  %28 = load i64, i64* %27, align 8
  br label %29

29:                                               ; preds = %13, %16, %22, %26
  %30 = phi i64 [ %15, %13 ], [ %19, %16 ], [ %25, %22 ], [ %28, %26 ]
  %31 = sub i64 0, %30
  %32 = getelementptr inbounds i8, i8* %7, i64 %31
  %33 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 0
  store i8* %32, i8** %35, align 8
  %36 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 %34, i8* %36, align 8
  %37 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 1
  %38 = zext i8 %34 to i64
  %39 = sub nsw i64 0, %38
  %40 = getelementptr inbounds i8, i8* %32, i64 %39
  %41 = icmp ult i8 %34, 4
  br i1 %41, label %42, label %51

42:                                               ; preds = %29
  %43 = icmp ult i8 %34, 2
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = load i8, i8* %40, align 1
  %46 = zext i8 %45 to i64
  br label %60

47:                                               ; preds = %42
  %48 = bitcast i8* %40 to i16*
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i64
  br label %60

51:                                               ; preds = %29
  %52 = icmp ult i8 %34, 8
  br i1 %52, label %53, label %57

53:                                               ; preds = %51
  %54 = bitcast i8* %40 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  br label %60

57:                                               ; preds = %51
  %58 = bitcast i8* %40 to i64*
  %59 = load i64, i64* %58, align 8
  br label %60

60:                                               ; preds = %44, %47, %53, %57
  %61 = phi i64 [ %46, %44 ], [ %50, %47 ], [ %56, %53 ], [ %59, %57 ]
  store i64 %61, i64* %37, align 8
  br label %101

62:                                               ; preds = %2
  %63 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 1
  %66 = load i8, i8* %65, align 8
  %67 = icmp ult i8 %66, 4
  br i1 %67, label %68, label %77

68:                                               ; preds = %62
  %69 = icmp ult i8 %66, 2
  br i1 %69, label %70, label %73

70:                                               ; preds = %68
  %71 = load i8, i8* %64, align 1
  %72 = zext i8 %71 to i64
  br label %86

73:                                               ; preds = %68
  %74 = bitcast i8* %64 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i64
  br label %86

77:                                               ; preds = %62
  %78 = icmp ult i8 %66, 8
  br i1 %78, label %79, label %83

79:                                               ; preds = %77
  %80 = bitcast i8* %64 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  br label %86

83:                                               ; preds = %77
  %84 = bitcast i8* %64 to i64*
  %85 = load i64, i64* %84, align 8
  br label %86

86:                                               ; preds = %70, %73, %79, %83
  %87 = phi i64 [ %72, %70 ], [ %76, %73 ], [ %82, %79 ], [ %85, %83 ]
  %88 = sub i64 0, %87
  %89 = getelementptr inbounds i8, i8* %64, i64 %88
  %90 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 2
  %91 = load i8, i8* %90, align 1
  %92 = tail call i64 @strlen(i8* %89) #17
  %93 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 0
  store i8* %89, i8** %93, align 8
  %94 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 %91, i8* %94, align 8
  %95 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 1
  store i64 %92, i64* %95, align 8
  br label %101

96:                                               ; preds = %2
  %97 = load i64, i64* bitcast (i8** @_ZZN11flexbuffers6String11EmptyStringEvE12empty_string to i64*), align 8, !noalias !27
  %98 = bitcast %"class.flexbuffers::String"* %0 to i64*
  store i64 %97, i64* %98, align 8, !alias.scope !27
  %99 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 1, i8* %99, align 8, !alias.scope !27
  %100 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %100, align 8, !alias.scope !27
  br label %101

101:                                              ; preds = %96, %86, %60
  ret void
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i64 @strtoll(i8* readonly, i8** nocapture, i32) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK11flexbuffers9Reference8AsUInt64Ev(%"class.flexbuffers::Reference"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = alloca %"class.flexbuffers::String", align 8
  %4 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %325 [
    i32 2, label %6
    i32 7, label %30
    i32 1, label %79
    i32 6, label %103
    i32 3, label %152
    i32 8, label %179
    i32 26, label %301
    i32 5, label %231
    i32 10, label %249
  ]

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8
  %11 = icmp ult i8 %10, 4
  br i1 %11, label %12, label %21

12:                                               ; preds = %6
  %13 = icmp ult i8 %10, 2
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = load i8, i8* %8, align 1
  %16 = zext i8 %15 to i64
  br label %325

17:                                               ; preds = %12
  %18 = bitcast i8* %8 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i64
  br label %325

21:                                               ; preds = %6
  %22 = icmp ult i8 %10, 8
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = bitcast i8* %8 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  br label %325

27:                                               ; preds = %21
  %28 = bitcast i8* %8 to i64*
  %29 = load i64, i64* %28, align 8
  br label %325

30:                                               ; preds = %1
  %31 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 8
  %35 = icmp ult i8 %34, 4
  br i1 %35, label %36, label %45

36:                                               ; preds = %30
  %37 = icmp ult i8 %34, 2
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = load i8, i8* %32, align 1
  %40 = zext i8 %39 to i64
  br label %54

41:                                               ; preds = %36
  %42 = bitcast i8* %32 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  br label %54

45:                                               ; preds = %30
  %46 = icmp ult i8 %34, 8
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = bitcast i8* %32 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  br label %54

51:                                               ; preds = %45
  %52 = bitcast i8* %32 to i64*
  %53 = load i64, i64* %52, align 8
  br label %54

54:                                               ; preds = %38, %41, %47, %51
  %55 = phi i64 [ %40, %38 ], [ %44, %41 ], [ %50, %47 ], [ %53, %51 ]
  %56 = sub i64 0, %55
  %57 = getelementptr inbounds i8, i8* %32, i64 %56
  %58 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %59 = load i8, i8* %58, align 1
  %60 = icmp ult i8 %59, 4
  br i1 %60, label %61, label %70

61:                                               ; preds = %54
  %62 = icmp ult i8 %59, 2
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = load i8, i8* %57, align 1
  %65 = zext i8 %64 to i64
  br label %325

66:                                               ; preds = %61
  %67 = bitcast i8* %57 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i64
  br label %325

70:                                               ; preds = %54
  %71 = icmp ult i8 %59, 8
  br i1 %71, label %72, label %76

72:                                               ; preds = %70
  %73 = bitcast i8* %57 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i64
  br label %325

76:                                               ; preds = %70
  %77 = bitcast i8* %57 to i64*
  %78 = load i64, i64* %77, align 8
  br label %325

79:                                               ; preds = %1
  %80 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %83 = load i8, i8* %82, align 8
  %84 = icmp ult i8 %83, 4
  br i1 %84, label %85, label %94

85:                                               ; preds = %79
  %86 = icmp ult i8 %83, 2
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = load i8, i8* %81, align 1
  %89 = sext i8 %88 to i64
  br label %325

90:                                               ; preds = %85
  %91 = bitcast i8* %81 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i64
  br label %325

94:                                               ; preds = %79
  %95 = icmp ult i8 %83, 8
  br i1 %95, label %96, label %100

96:                                               ; preds = %94
  %97 = bitcast i8* %81 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  br label %325

100:                                              ; preds = %94
  %101 = bitcast i8* %81 to i64*
  %102 = load i64, i64* %101, align 8
  br label %325

103:                                              ; preds = %1
  %104 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %107 = load i8, i8* %106, align 8
  %108 = icmp ult i8 %107, 4
  br i1 %108, label %109, label %118

109:                                              ; preds = %103
  %110 = icmp ult i8 %107, 2
  br i1 %110, label %111, label %114

111:                                              ; preds = %109
  %112 = load i8, i8* %105, align 1
  %113 = zext i8 %112 to i64
  br label %127

114:                                              ; preds = %109
  %115 = bitcast i8* %105 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  br label %127

118:                                              ; preds = %103
  %119 = icmp ult i8 %107, 8
  br i1 %119, label %120, label %124

120:                                              ; preds = %118
  %121 = bitcast i8* %105 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  br label %127

124:                                              ; preds = %118
  %125 = bitcast i8* %105 to i64*
  %126 = load i64, i64* %125, align 8
  br label %127

127:                                              ; preds = %111, %114, %120, %124
  %128 = phi i64 [ %113, %111 ], [ %117, %114 ], [ %123, %120 ], [ %126, %124 ]
  %129 = sub i64 0, %128
  %130 = getelementptr inbounds i8, i8* %105, i64 %129
  %131 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %132, 4
  br i1 %133, label %134, label %143

134:                                              ; preds = %127
  %135 = icmp ult i8 %132, 2
  br i1 %135, label %136, label %139

136:                                              ; preds = %134
  %137 = load i8, i8* %130, align 1
  %138 = sext i8 %137 to i64
  br label %325

139:                                              ; preds = %134
  %140 = bitcast i8* %130 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i64
  br label %325

143:                                              ; preds = %127
  %144 = icmp ult i8 %132, 8
  br i1 %144, label %145, label %149

145:                                              ; preds = %143
  %146 = bitcast i8* %130 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %147 to i64
  br label %325

149:                                              ; preds = %143
  %150 = bitcast i8* %130 to i64*
  %151 = load i64, i64* %150, align 8
  br label %325

152:                                              ; preds = %1
  %153 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %156 = load i8, i8* %155, align 8
  %157 = icmp ult i8 %156, 4
  br i1 %157, label %158, label %167

158:                                              ; preds = %152
  %159 = icmp ult i8 %156, 2
  br i1 %159, label %160, label %163

160:                                              ; preds = %158
  %161 = load i8, i8* %154, align 1
  %162 = sitofp i8 %161 to double
  br label %176

163:                                              ; preds = %158
  %164 = bitcast i8* %154 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = sitofp i16 %165 to double
  br label %176

167:                                              ; preds = %152
  %168 = icmp ult i8 %156, 8
  br i1 %168, label %169, label %173

169:                                              ; preds = %167
  %170 = bitcast i8* %154 to float*
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  br label %176

173:                                              ; preds = %167
  %174 = bitcast i8* %154 to double*
  %175 = load double, double* %174, align 8
  br label %176

176:                                              ; preds = %160, %163, %169, %173
  %177 = phi double [ %162, %160 ], [ %166, %163 ], [ %172, %169 ], [ %175, %173 ]
  %178 = fptoui double %177 to i64
  br label %325

179:                                              ; preds = %1
  %180 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %183 = load i8, i8* %182, align 8
  %184 = icmp ult i8 %183, 4
  br i1 %184, label %185, label %194

185:                                              ; preds = %179
  %186 = icmp ult i8 %183, 2
  br i1 %186, label %187, label %190

187:                                              ; preds = %185
  %188 = load i8, i8* %181, align 1
  %189 = zext i8 %188 to i64
  br label %203

190:                                              ; preds = %185
  %191 = bitcast i8* %181 to i16*
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i64
  br label %203

194:                                              ; preds = %179
  %195 = icmp ult i8 %183, 8
  br i1 %195, label %196, label %200

196:                                              ; preds = %194
  %197 = bitcast i8* %181 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  br label %203

200:                                              ; preds = %194
  %201 = bitcast i8* %181 to i64*
  %202 = load i64, i64* %201, align 8
  br label %203

203:                                              ; preds = %187, %190, %196, %200
  %204 = phi i64 [ %189, %187 ], [ %193, %190 ], [ %199, %196 ], [ %202, %200 ]
  %205 = sub i64 0, %204
  %206 = getelementptr inbounds i8, i8* %181, i64 %205
  %207 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %208 = load i8, i8* %207, align 1
  %209 = icmp ult i8 %208, 4
  br i1 %209, label %210, label %219

210:                                              ; preds = %203
  %211 = icmp ult i8 %208, 2
  br i1 %211, label %212, label %215

212:                                              ; preds = %210
  %213 = load i8, i8* %206, align 1
  %214 = sitofp i8 %213 to double
  br label %228

215:                                              ; preds = %210
  %216 = bitcast i8* %206 to i16*
  %217 = load i16, i16* %216, align 2
  %218 = sitofp i16 %217 to double
  br label %228

219:                                              ; preds = %203
  %220 = icmp ult i8 %208, 8
  br i1 %220, label %221, label %225

221:                                              ; preds = %219
  %222 = bitcast i8* %206 to float*
  %223 = load float, float* %222, align 4
  %224 = fpext float %223 to double
  br label %228

225:                                              ; preds = %219
  %226 = bitcast i8* %206 to double*
  %227 = load double, double* %226, align 8
  br label %228

228:                                              ; preds = %212, %215, %221, %225
  %229 = phi double [ %214, %212 ], [ %218, %215 ], [ %224, %221 ], [ %227, %225 ]
  %230 = fptoui double %229 to i64
  br label %325

231:                                              ; preds = %1
  %232 = bitcast %"class.flexbuffers::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232) #13
  call void @_ZNK11flexbuffers9Reference8AsStringEv(%"class.flexbuffers::String"* nonnull sret %3, %"class.flexbuffers::Reference"* %0)
  %233 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %3, i64 0, i32 0, i32 0, i32 0
  %234 = load i8*, i8** %233, align 8
  %235 = tail call i32* @__errno_location() #16
  store i32 0, i32* %235, align 4
  %236 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #13
  store i8* %234, i8** %2, align 8
  %237 = call i64 @strtoull(i8* %234, i8** nonnull %2, i32 10) #13
  %238 = load i8*, i8** %2, align 8
  %239 = load i8, i8* %238, align 1
  %240 = icmp ne i8 %239, 0
  %241 = icmp eq i8* %238, %234
  %242 = or i1 %241, %240
  br i1 %242, label %247, label %243

243:                                              ; preds = %231
  %244 = load i32, i32* %235, align 4
  %245 = icmp eq i32 %244, 0
  %246 = select i1 %245, i64 %237, i64 0
  br label %247

247:                                              ; preds = %243, %231
  %248 = phi i64 [ 0, %231 ], [ %246, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232) #13
  br label %325

249:                                              ; preds = %1
  %250 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %251 = load i8*, i8** %250, align 8, !noalias !30
  %252 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %253 = load i8, i8* %252, align 8, !noalias !30
  %254 = icmp ult i8 %253, 4
  br i1 %254, label %255, label %264

255:                                              ; preds = %249
  %256 = icmp ult i8 %253, 2
  br i1 %256, label %257, label %260

257:                                              ; preds = %255
  %258 = load i8, i8* %251, align 1, !noalias !30
  %259 = zext i8 %258 to i64
  br label %273

260:                                              ; preds = %255
  %261 = bitcast i8* %251 to i16*
  %262 = load i16, i16* %261, align 2, !noalias !30
  %263 = zext i16 %262 to i64
  br label %273

264:                                              ; preds = %249
  %265 = icmp ult i8 %253, 8
  br i1 %265, label %266, label %270

266:                                              ; preds = %264
  %267 = bitcast i8* %251 to i32*
  %268 = load i32, i32* %267, align 4, !noalias !30
  %269 = zext i32 %268 to i64
  br label %273

270:                                              ; preds = %264
  %271 = bitcast i8* %251 to i64*
  %272 = load i64, i64* %271, align 8, !noalias !30
  br label %273

273:                                              ; preds = %270, %266, %260, %257
  %274 = phi i64 [ %259, %257 ], [ %263, %260 ], [ %269, %266 ], [ %272, %270 ]
  %275 = sub i64 0, %274
  %276 = getelementptr inbounds i8, i8* %251, i64 %275
  %277 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %278 = load i8, i8* %277, align 1, !noalias !30
  %279 = zext i8 %278 to i64
  %280 = sub nsw i64 0, %279
  %281 = getelementptr inbounds i8, i8* %276, i64 %280
  %282 = icmp ult i8 %278, 4
  br i1 %282, label %283, label %292

283:                                              ; preds = %273
  %284 = icmp ult i8 %278, 2
  br i1 %284, label %285, label %288

285:                                              ; preds = %283
  %286 = load i8, i8* %281, align 1, !noalias !30
  %287 = zext i8 %286 to i64
  br label %325

288:                                              ; preds = %283
  %289 = bitcast i8* %281 to i16*
  %290 = load i16, i16* %289, align 2, !noalias !30
  %291 = zext i16 %290 to i64
  br label %325

292:                                              ; preds = %273
  %293 = icmp ult i8 %278, 8
  br i1 %293, label %294, label %298

294:                                              ; preds = %292
  %295 = bitcast i8* %281 to i32*
  %296 = load i32, i32* %295, align 4, !noalias !30
  %297 = zext i32 %296 to i64
  br label %325

298:                                              ; preds = %292
  %299 = bitcast i8* %281 to i64*
  %300 = load i64, i64* %299, align 8, !noalias !30
  br label %325

301:                                              ; preds = %1
  %302 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %305 = load i8, i8* %304, align 8
  %306 = icmp ult i8 %305, 4
  br i1 %306, label %307, label %316

307:                                              ; preds = %301
  %308 = icmp ult i8 %305, 2
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = load i8, i8* %303, align 1
  %311 = zext i8 %310 to i64
  br label %325

312:                                              ; preds = %307
  %313 = bitcast i8* %303 to i16*
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %314 to i64
  br label %325

316:                                              ; preds = %301
  %317 = icmp ult i8 %305, 8
  br i1 %317, label %318, label %322

318:                                              ; preds = %316
  %319 = bitcast i8* %303 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = zext i32 %320 to i64
  br label %325

322:                                              ; preds = %316
  %323 = bitcast i8* %303 to i64*
  %324 = load i64, i64* %323, align 8
  br label %325

325:                                              ; preds = %322, %318, %312, %309, %298, %294, %288, %285, %149, %145, %139, %136, %100, %96, %90, %87, %76, %72, %66, %63, %27, %23, %17, %14, %1, %247, %228, %176
  %326 = phi i64 [ %248, %247 ], [ %230, %228 ], [ %178, %176 ], [ 0, %1 ], [ %16, %14 ], [ %20, %17 ], [ %26, %23 ], [ %29, %27 ], [ %65, %63 ], [ %69, %66 ], [ %75, %72 ], [ %78, %76 ], [ %89, %87 ], [ %93, %90 ], [ %99, %96 ], [ %102, %100 ], [ %138, %136 ], [ %142, %139 ], [ %148, %145 ], [ %151, %149 ], [ %287, %285 ], [ %291, %288 ], [ %297, %294 ], [ %300, %298 ], [ %311, %309 ], [ %315, %312 ], [ %321, %318 ], [ %324, %322 ]
  ret i64 %326
}

; Function Attrs: nofree nounwind
declare i64 @strtoull(i8* readonly, i8** nocapture, i32) local_unnamed_addr #7

declare void @_ZN9translate15TokenizedOutputC1Ev(%"class.translate::TokenizedOutput"*) unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind
declare void @_ZN9translate15TokenizedOutputD1Ev(%"class.translate::TokenizedOutput"*) unnamed_addr #12

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #10

declare { i8*, i32 } @_ZN6tflite9GetStringEPK12TfLiteTensori(%struct.TfLiteTensor*, i32) local_unnamed_addr #10

declare void @_ZN9translate19LowercaseUnicodeStrEPKciPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i8*, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #10

declare void @_ZN9translate8TokenizeEPKcmmb(%"class.translate::TokenizedOutput"* sret, i8*, i64, i64, i1 zeroext) local_unnamed_addr #10

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #10

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairImmEENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"*, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*) local_unnamed_addr #1 comdat align 2 {
  %4 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %5 = ptrtoint %"struct.std::__1::pair"* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 4
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.std::__1::pair"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.std::__1::pair"*
  br i1 %15, label %101, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.std::__1::pair"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 4
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 %22
  %25 = select i1 %23, %"struct.std::__1::pair"* %24, %"struct.std::__1::pair"* %2
  %26 = icmp eq %"struct.std::__1::pair"* %25, %1
  br i1 %26, label %84, label %27

27:                                               ; preds = %17
  %28 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 -1, i32 0
  %29 = ptrtoint i64* %28 to i64
  %30 = sub i64 %29, %4
  %31 = lshr i64 %30, 4
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 3
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %49, label %35

35:                                               ; preds = %27, %35
  %36 = phi %"struct.std::__1::pair"* [ %46, %35 ], [ %16, %27 ]
  %37 = phi %"struct.std::__1::pair"* [ %45, %35 ], [ %1, %27 ]
  %38 = phi i64 [ %47, %35 ], [ %33, %27 ]
  %39 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 0
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 1
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 1
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 1
  %47 = add i64 %38, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %35, !llvm.loop !33

49:                                               ; preds = %35, %27
  %50 = phi %"struct.std::__1::pair"* [ undef, %27 ], [ %46, %35 ]
  %51 = phi %"struct.std::__1::pair"* [ %16, %27 ], [ %46, %35 ]
  %52 = phi %"struct.std::__1::pair"* [ %1, %27 ], [ %45, %35 ]
  %53 = icmp ult i64 %30, 48
  br i1 %53, label %84, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"struct.std::__1::pair"* [ %82, %54 ], [ %51, %49 ]
  %56 = phi %"struct.std::__1::pair"* [ %81, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 0, i32 0
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 0, i32 1
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 1, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 1, i32 0
  store i64 %64, i64* %65, align 8
  %66 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 1, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 1, i32 1
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 2, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 2, i32 0
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 2, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 2, i32 1
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 3, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 3, i32 0
  store i64 %76, i64* %77, align 8
  %78 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 3, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 3, i32 1
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 4
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 4
  %83 = icmp eq %"struct.std::__1::pair"* %81, %25
  br i1 %83, label %84, label %54

84:                                               ; preds = %49, %54, %17
  %85 = phi %"struct.std::__1::pair"* [ %16, %17 ], [ %50, %49 ], [ %82, %54 ]
  br i1 %23, label %86, label %100

86:                                               ; preds = %84
  %87 = load i64, i64* %19, align 8
  %88 = ptrtoint %"struct.std::__1::pair"* %25 to i64
  %89 = sub i64 %5, %88
  %90 = icmp sgt i64 %89, 0
  br i1 %90, label %91, label %98

91:                                               ; preds = %86
  %92 = lshr exact i64 %89, 4
  %93 = inttoptr i64 %87 to i8*
  %94 = bitcast %"struct.std::__1::pair"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 %89, i1 false) #13
  %95 = inttoptr i64 %87 to %"struct.std::__1::pair"*
  %96 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %95, i64 %92
  %97 = ptrtoint %"struct.std::__1::pair"* %96 to i64
  br label %98

98:                                               ; preds = %86, %91
  %99 = phi i64 [ %97, %91 ], [ %87, %86 ]
  store i64 %99, i64* %19, align 8
  br label %142

100:                                              ; preds = %84
  store %"struct.std::__1::pair"* %85, %"struct.std::__1::pair"** %18, align 8
  br label %142

101:                                              ; preds = %3
  %102 = icmp eq i64 %12, 0
  br i1 %102, label %108, label %103

103:                                              ; preds = %101
  %104 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %105 = bitcast %"struct.std::__1::pair"** %104 to i64*
  store i64 %12, i64* %105, align 8
  %106 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %106) #15
  %107 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false) #13
  br label %108

108:                                              ; preds = %101, %103
  %109 = phi i64 [ %10, %101 ], [ 0, %103 ]
  %110 = icmp ugt i64 %7, 1152921504606846975
  br i1 %110, label %111, label %113

111:                                              ; preds = %108
  %112 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %112) #14
  unreachable

113:                                              ; preds = %108
  %114 = ashr exact i64 %109, 4
  %115 = icmp ult i64 %114, 576460752303423487
  br i1 %115, label %116, label %123

116:                                              ; preds = %113
  %117 = ashr exact i64 %109, 3
  %118 = icmp ult i64 %117, %7
  br i1 %118, label %123, label %119

119:                                              ; preds = %116
  %120 = icmp ugt i64 %117, 1152921504606846975
  br i1 %120, label %121, label %123

121:                                              ; preds = %119
  %122 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %122) #14
  unreachable

123:                                              ; preds = %116, %113, %119
  %124 = phi i64 [ %117, %119 ], [ 1152921504606846975, %113 ], [ %7, %116 ]
  %125 = shl i64 %124, 4
  %126 = tail call i8* @_Znwm(i64 %125) #15
  %127 = bitcast i8* %126 to %"struct.std::__1::pair"*
  %128 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %129 = bitcast %"struct.std::__1::pair"** %128 to i8**
  store i8* %126, i8** %129, align 8
  %130 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  store i8* %126, i8** %130, align 8
  %131 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 %124
  store %"struct.std::__1::pair"* %131, %"struct.std::__1::pair"** %8, align 8
  %132 = bitcast %"struct.std::__1::pair"** %128 to i64*
  %133 = ptrtoint i8* %126 to i64
  %134 = icmp sgt i64 %6, 0
  br i1 %134, label %135, label %140

135:                                              ; preds = %123
  %136 = lshr exact i64 %6, 4
  %137 = bitcast %"struct.std::__1::pair"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %126, i8* align 8 %137, i64 %6, i1 false) #13
  %138 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 %136
  %139 = ptrtoint %"struct.std::__1::pair"* %138 to i64
  br label %140

140:                                              ; preds = %123, %135
  %141 = phi i64 [ %139, %135 ], [ %133, %123 ]
  store i64 %141, i64* %132, align 8
  br label %142

142:                                              ; preds = %98, %100, %140
  ret void
}

declare i64 @_Z13MurmurHash64APKvim(i8*, i32, i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { nounwind readnone }
attributes #17 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK11flexbuffers9Reference5AsMapEv: argument 0"}
!4 = distinct !{!4, !"_ZNK11flexbuffers9Reference5AsMapEv"}
!5 = !{!6, !3}
!6 = distinct !{!6, !7, !"_ZN11flexbuffers3Map8EmptyMapEv: argument 0"}
!7 = distinct !{!7, !"_ZN11flexbuffers3Map8EmptyMapEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN12_GLOBAL__N_112GetIntVectorEN11flexbuffers11TypedVectorE: argument 0"}
!10 = distinct !{!10, !"_ZN12_GLOBAL__N_112GetIntVectorEN11flexbuffers11TypedVectorE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK11flexbuffers9Reference13AsTypedVectorEv: argument 0"}
!13 = distinct !{!13, !"_ZNK11flexbuffers9Reference13AsTypedVectorEv"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN12_GLOBAL__N_112GetIntVectorEN11flexbuffers11TypedVectorE: argument 0"}
!16 = distinct !{!16, !"_ZN12_GLOBAL__N_112GetIntVectorEN11flexbuffers11TypedVectorE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK11flexbuffers9Reference13AsTypedVectorEv: argument 0"}
!19 = distinct !{!19, !"_ZNK11flexbuffers9Reference13AsTypedVectorEv"}
!20 = !{i8 0, i8 2}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNK11flexbuffers3Map4KeysEv: argument 0"}
!23 = distinct !{!23, !"_ZNK11flexbuffers3Map4KeysEv"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK11flexbuffers9Reference8AsVectorEv: argument 0"}
!26 = distinct !{!26, !"_ZNK11flexbuffers9Reference8AsVectorEv"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN11flexbuffers6String11EmptyStringEv: argument 0"}
!29 = distinct !{!29, !"_ZN11flexbuffers6String11EmptyStringEv"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNK11flexbuffers9Reference8AsVectorEv: argument 0"}
!32 = distinct !{!32, !"_ZNK11flexbuffers9Reference8AsVectorEv"}
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.unroll.disable"}
