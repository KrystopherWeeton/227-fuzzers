; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/jp2.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/jp2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_jp2_header_handler = type { i32, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* }
%struct.opj_jp2 = type { %struct.opj_j2k*, %struct.opj_procedure_list*, %struct.opj_procedure_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, %struct.opj_jp2_comps*, i64, i64, i32, i32, i32, %struct.opj_jp2_color, i32, i8, i8 }
%struct.opj_j2k = type { i32, %union.anon, %struct.opj_image*, %struct.opj_image*, %struct.opj_cp, %struct.opj_procedure_list*, %struct.opj_procedure_list*, %struct.opj_codestream_index*, i32, %struct.opj_tcd*, %struct.opj_thread_pool_t*, i32, i32, i32 }
%union.anon = type { %struct.opj_j2k_dec }
%struct.opj_j2k_dec = type { i32, %struct.opj_tcp*, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32*, i8 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_ppx_struct = type { i8*, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon.0, i8 }
%union.anon.0 = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_codestream_index = type { i64, i64, i64, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tile_index* }
%struct.opj_marker_info = type { i16, i64, i32 }
%struct.opj_tile_index = type { i32, i32, i32, i32, %struct.opj_tp_index*, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_packet_info* }
%struct.opj_tp_index = type { i64, i64, i64 }
%struct.opj_packet_info = type { i64, i64, i64, double }
%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcp*, i32, i8, %struct.opj_thread_pool_t*, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_image = type { %struct.opj_tcd_tile* }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32, i32*, i32, i64, i64, i32*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band], i32, i32, i32, i32 }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon.1, i32, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon.1 = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i8 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.opj_thread_pool_t = type opaque
%struct.opj_procedure_list = type { i32, i32, void ()** }
%struct.opj_jp2_comps = type { i32, i32, i32 }
%struct.opj_jp2_color = type { i8*, i32, %struct.opj_jp2_cdef*, %struct.opj_jp2_pclr*, i8 }
%struct.opj_jp2_cdef = type { %struct.opj_jp2_cdef_info*, i16 }
%struct.opj_jp2_cdef_info = type { i16, i16, i16 }
%struct.opj_jp2_pclr = type { i32*, i8*, i8*, %struct.opj_jp2_cmap_comp*, i16, i8 }
%struct.opj_jp2_cmap_comp = type { i16, i8, i8 }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_stream_private = type { i8*, void (i8*)*, i64, i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)*, i64 (i64, i8*)*, i32 (i64, i8*)*, i8*, i8*, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i64, i64, i64, i32 }
%struct.opj_dparameters = type { i32, i32, [4096 x i8], [4096 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_cparameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32*, i8*, i32, i32, [32 x %struct.opj_poc], i32, i32, [100 x float], [100 x float], i32, i32, i32, i32, i32, i32, i32, i32, [33 x i32], [33 x i32], [4096 x i8], [4096 x i8], i32, [4096 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], i32, i32, i32, i32, [16 x i32], [16 x i32], i32, i32, i32, i8, i8, i8, i32, i8*, i32, i16 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.opj_codestream_info_v2 = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tile_v2_info, %struct.opj_tile_v2_info* }
%struct.opj_tile_v2_info = type { i32, i32, i32, i32, i32, %struct.opj_tccp_info* }
%struct.opj_tccp_info = type { i32, i32, i32, i32, i32, i32, i32, i32, [97 x i32], [97 x i32], i32, i32, [33 x i32], [33 x i32] }
%struct.opj_jp2_box = type { i32, i32, i32 }
%struct.opj_jp2_img_header_writer_handler = type { i8* (%struct.opj_jp2*, i32*)*, i8*, i32 }

@.str = private unnamed_addr constant [49 x i8] c"Failed to decode the codestream in the JP2 file\0A\00", align 1
@.str.1 = private unnamed_addr constant [69 x i8] c"Invalid number of components specified while setting up JP2 encoder\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"Not enough memory when setup the JP2 encoder\0A\00", align 1
@.str.3 = private unnamed_addr constant [74 x i8] c"Alpha channel specified but unknown enumcs. No cdef box will be created.\0A\00", align 1
@.str.4 = private unnamed_addr constant [93 x i8] c"Alpha channel specified but not enough image components for an automatic cdef box creation.\0A\00", align 1
@.str.5 = private unnamed_addr constant [83 x i8] c"Alpha channel position conflicts with color channel. No cdef box will be created.\0A\00", align 1
@.str.6 = private unnamed_addr constant [65 x i8] c"Multiple alpha channels specified. No cdef box will be created.\0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"Not enough memory to setup the JP2 encoder\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"JP2H box missing. Required.\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"IHDR box_missing. Required.\0A\00", align 1
@.str.10 = private unnamed_addr constant [75 x i8] c"JP2 box which are after the codestream will not be read by this function.\0A\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c"Invalid component index %d (>= %d).\0A\00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c"Incomplete channel definitions.\0A\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"Unexpected OOM.\0A\00", align 1
@.str.14 = private unnamed_addr constant [39 x i8] c"Invalid value for cmap[%d].mtyp = %d.\0A\00", align 1
@.str.15 = private unnamed_addr constant [56 x i8] c"Invalid component/palette index for direct mapping %d.\0A\00", align 1
@.str.16 = private unnamed_addr constant [31 x i8] c"Component %d is mapped twice.\0A\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"Direct use at #%d however pcol=%d.\0A\00", align 1
@.str.18 = private unnamed_addr constant [101 x i8] c"Implementation limitation: for palette mapping, pcol[%d] should be equal to %d, but is equal to %d.\0A\00", align 1
@.str.19 = private unnamed_addr constant [38 x i8] c"Component %d doesn't have a mapping.\0A\00", align 1
@.str.20 = private unnamed_addr constant [51 x i8] c"Component mapping seems wrong. Trying to correct.\0A\00", align 1
@.str.21 = private unnamed_addr constant [56 x i8] c"image->comps[%d].data == NULL in opj_jp2_apply_pclr().\0A\00", align 1
@.str.22 = private unnamed_addr constant [52 x i8] c"Memory allocation failure in opj_jp2_apply_pclr().\0A\00", align 1
@.str.23 = private unnamed_addr constant [40 x i8] c"opj_jp2_apply_cdef: cn=%d, numcomps=%d\0A\00", align 1
@.str.24 = private unnamed_addr constant [41 x i8] c"opj_jp2_apply_cdef: acn=%d, numcomps=%d\0A\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"Failed to seek in the stream.\0A\00", align 1
@.str.26 = private unnamed_addr constant [50 x i8] c"Not enough memory to handle jpeg2000 file header\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"bad placed jpeg codestream\0A\00", align 1
@.str.28 = private unnamed_addr constant [38 x i8] c"Cannot handle box of undefined sizes\0A\00", align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"invalid box size %d (%x)\0A\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"Found a misplaced '%c%c%c%c' box outside jp2h box\0A\00", align 1
@.str.31 = private unnamed_addr constant [66 x i8] c"JPEG2000 Header box not read yet, '%c%c%c%c' box will be ignored\0A\00", align 1
@.str.32 = private unnamed_addr constant [50 x i8] c"Problem with skipping JPEG2000 box, stream error\0A\00", align 1
@.str.33 = private unnamed_addr constant [76 x i8] c"Invalid box size %d for box '%c%c%c%c'. Need %d bytes, %d bytes remaining \0A\00", align 1
@.str.34 = private unnamed_addr constant [42 x i8] c"Not enough memory to handle jpeg2000 box\0A\00", align 1
@.str.35 = private unnamed_addr constant [49 x i8] c"Problem with reading JPEG2000 box, stream error\0A\00", align 1
@.str.36 = private unnamed_addr constant [70 x i8] c"Malformed JP2 file format: first box must be JPEG 2000 signature box\0A\00", align 1
@.str.37 = private unnamed_addr constant [61 x i8] c"Malformed JP2 file format: second box must be file type box\0A\00", align 1
@.str.38 = private unnamed_addr constant [42 x i8] c"Cannot handle box sizes higher than 2^32\0A\00", align 1
@jp2_header = internal unnamed_addr constant [3 x %struct.opj_jp2_header_handler] [%struct.opj_jp2_header_handler { i32 1783636000, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_jp }, %struct.opj_jp2_header_handler { i32 1718909296, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_ftyp }, %struct.opj_jp2_header_handler { i32 1785737832, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_jp2h }], align 16
@.str.39 = private unnamed_addr constant [54 x i8] c"The signature box must be the first box in the file.\0A\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"Error with JP signature Box size\0A\00", align 1
@.str.41 = private unnamed_addr constant [44 x i8] c"Error with JP Signature : bad magic number\0A\00", align 1
@.str.42 = private unnamed_addr constant [50 x i8] c"The ftyp box must be the second box in the file.\0A\00", align 1
@.str.43 = private unnamed_addr constant [36 x i8] c"Error with FTYP signature Box size\0A\00", align 1
@.str.44 = private unnamed_addr constant [33 x i8] c"Not enough memory with FTYP Box\0A\00", align 1
@.str.45 = private unnamed_addr constant [45 x i8] c"The  box must be the first box in the file.\0A\00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"Stream error while reading JP2 Header box\0A\00", align 1
@.str.47 = private unnamed_addr constant [72 x i8] c"Stream error while reading JP2 Header box: box length is inconsistent.\0A\00", align 1
@.str.48 = private unnamed_addr constant [59 x i8] c"Stream error while reading JP2 Header box: no 'ihdr' box.\0A\00", align 1
@.str.49 = private unnamed_addr constant [40 x i8] c"Cannot handle box of less than 8 bytes\0A\00", align 1
@.str.50 = private unnamed_addr constant [44 x i8] c"Cannot handle XL box of less than 16 bytes\0A\00", align 1
@.str.51 = private unnamed_addr constant [29 x i8] c"Box length is inconsistent.\0A\00", align 1
@jp2_img_header = internal unnamed_addr constant [6 x %struct.opj_jp2_header_handler] [%struct.opj_jp2_header_handler { i32 1768449138, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_ihdr }, %struct.opj_jp2_header_handler { i32 1668246642, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_colr }, %struct.opj_jp2_header_handler { i32 1651532643, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_bpcc }, %struct.opj_jp2_header_handler { i32 1885564018, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_pclr }, %struct.opj_jp2_header_handler { i32 1668112752, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_cmap }, %struct.opj_jp2_header_handler { i32 1667523942, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)* @opj_jp2_read_cdef }], align 16
@.str.52 = private unnamed_addr constant [48 x i8] c"Ignoring ihdr box. First ihdr box already read\0A\00", align 1
@.str.53 = private unnamed_addr constant [33 x i8] c"Bad image header box (bad size)\0A\00", align 1
@.str.54 = private unnamed_addr constant [51 x i8] c"Wrong values for: w(%d) h(%d) numcomps(%d) (ihdr)\0A\00", align 1
@.str.55 = private unnamed_addr constant [37 x i8] c"Invalid number of components (ihdr)\0A\00", align 1
@.str.56 = private unnamed_addr constant [49 x i8] c"Not enough memory to handle image header (ihdr)\0A\00", align 1
@.str.57 = private unnamed_addr constant [90 x i8] c"JP2 IHDR box: compression type indicate that the file is not a conforming JP2 file (%d) \0A\00", align 1
@.str.58 = private unnamed_addr constant [32 x i8] c"Bad COLR header box (bad size)\0A\00", align 1
@.str.59 = private unnamed_addr constant [109 x i8] c"A conforming JP2 reader shall ignore all Colour Specification boxes after the first, so we ignore this one.\0A\00", align 1
@.str.60 = private unnamed_addr constant [36 x i8] c"Bad COLR header box (bad size: %d)\0A\00", align 1
@.str.61 = private unnamed_addr constant [30 x i8] c"Not enough memory for cielab\0A\00", align 1
@.str.62 = private unnamed_addr constant [44 x i8] c"Bad COLR header box (CIELab, bad size: %d)\0A\00", align 1
@.str.63 = private unnamed_addr constant [106 x i8] c"COLR BOX meth value is not a regular value (%d), so we will ignore the entire Colour Specification box. \0A\00", align 1
@.str.64 = private unnamed_addr constant [114 x i8] c"A BPCC header box is available although BPC given by the IHDR box (%d) indicate components bit depth is constant\0A\00", align 1
@.str.65 = private unnamed_addr constant [32 x i8] c"Bad BPCC header box (bad size)\0A\00", align 1
@.str.66 = private unnamed_addr constant [38 x i8] c"Invalid PCLR box. Reports %d entries\0A\00", align 1
@.str.67 = private unnamed_addr constant [45 x i8] c"Invalid PCLR box. Reports 0 palette columns\0A\00", align 1
@.str.68 = private unnamed_addr constant [46 x i8] c"Need to read a PCLR box before the CMAP box.\0A\00", align 1
@.str.69 = private unnamed_addr constant [31 x i8] c"Only one CMAP box is allowed.\0A\00", align 1
@.str.70 = private unnamed_addr constant [33 x i8] c"Insufficient data for CMAP box.\0A\00", align 1
@.str.71 = private unnamed_addr constant [33 x i8] c"Insufficient data for CDEF box.\0A\00", align 1
@.str.72 = private unnamed_addr constant [61 x i8] c"Number of channel description is equal to zero in CDEF box.\0A\00", align 1
@.str.73 = private unnamed_addr constant [39 x i8] c"Not enough memory to handle ftyp data\0A\00", align 1
@.str.74 = private unnamed_addr constant [41 x i8] c"Error while writing ftyp data to stream\0A\00", align 1
@.str.75 = private unnamed_addr constant [43 x i8] c"Not enough memory to hold JP2 Header data\0A\00", align 1
@.str.76 = private unnamed_addr constant [43 x i8] c"Stream error while writing JP2 Header box\0A\00", align 1
@switch.table.opj_jp2_setup_encoder = private unnamed_addr constant [3 x i32] [i32 3, i32 1, i32 3], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_decode(%struct.opj_jp2* nocapture, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = icmp eq %struct.opj_image* %2, null
  br i1 %5, label %88, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %8 = load %struct.opj_j2k*, %struct.opj_j2k** %7, align 8
  %9 = tail call i32 @opj_j2k_decode(%struct.opj_j2k* %8, %struct.opj_stream_private* %1, %struct.opj_image* nonnull %2, %struct.opj_event_mgr* %3) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %6
  %12 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #3
  br label %88

13:                                               ; preds = %6
  %14 = load %struct.opj_j2k*, %struct.opj_j2k** %7, align 8
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %14, i64 0, i32 1, i32 0, i32 12
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %88

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 25
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %88

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24
  %24 = tail call fastcc i32 @opj_jp2_check_color(%struct.opj_image* nonnull %2, %struct.opj_jp2_color* %23, %struct.opj_event_mgr* %3)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %88, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %28 = load i32, i32* %27, align 4
  switch i32 %28, label %37 [
    i32 16, label %29
    i32 17, label %31
    i32 18, label %33
    i32 24, label %35
  ]

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 1, i32* %30, align 4
  br label %42

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 2, i32* %32, align 4
  br label %42

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 3, i32* %34, align 4
  br label %42

35:                                               ; preds = %26
  %36 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 4, i32* %36, align 4
  br label %42

37:                                               ; preds = %26
  %38 = icmp eq i32 %28, 12
  %39 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  br i1 %38, label %40, label %41

40:                                               ; preds = %37
  store i32 5, i32* %39, align 4
  br label %42

41:                                               ; preds = %37
  store i32 -1, i32* %39, align 4
  br label %42

42:                                               ; preds = %31, %35, %41, %40, %33, %29
  %43 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 3
  %44 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %43, align 8
  %45 = icmp eq %struct.opj_jp2_pclr* %44, null
  br i1 %45, label %74, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %44, i64 0, i32 3
  %48 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %47, align 8
  %49 = icmp eq %struct.opj_jp2_cmap_comp* %48, null
  br i1 %49, label %50, label %71

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %44, i64 0, i32 1
  %52 = load i8*, i8** %51, align 8
  tail call void @opj_free(i8* %52) #3
  %53 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %43, align 8
  %54 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %53, i64 0, i32 2
  %55 = load i8*, i8** %54, align 8
  tail call void @opj_free(i8* %55) #3
  %56 = bitcast %struct.opj_jp2_pclr** %43 to i8***
  %57 = load i8**, i8*** %56, align 8
  %58 = load i8*, i8** %57, align 8
  tail call void @opj_free(i8* %58) #3
  %59 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %43, align 8
  %60 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %59, i64 0, i32 3
  %61 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %60, align 8
  %62 = icmp eq %struct.opj_jp2_cmap_comp* %61, null
  br i1 %62, label %63, label %65

63:                                               ; preds = %50
  %64 = bitcast %struct.opj_jp2_pclr* %59 to i8*
  br label %69

65:                                               ; preds = %50
  %66 = bitcast %struct.opj_jp2_cmap_comp* %61 to i8*
  tail call void @opj_free(i8* nonnull %66) #3
  %67 = bitcast %struct.opj_jp2_pclr** %43 to i8**
  %68 = load i8*, i8** %67, align 8
  br label %69

69:                                               ; preds = %63, %65
  %70 = phi i8* [ %64, %63 ], [ %68, %65 ]
  tail call void @opj_free(i8* %70) #3
  store %struct.opj_jp2_pclr* null, %struct.opj_jp2_pclr** %43, align 8
  br label %74

71:                                               ; preds = %46
  %72 = tail call fastcc i32 @opj_jp2_apply_pclr(%struct.opj_image* nonnull %2, %struct.opj_jp2_color* %23, %struct.opj_event_mgr* %3)
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %88, label %74

74:                                               ; preds = %71, %42, %69
  %75 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %76 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %75, align 8
  %77 = icmp eq %struct.opj_jp2_cdef* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call fastcc void @opj_jp2_apply_cdef(%struct.opj_image* nonnull %2, %struct.opj_jp2_color* %23, %struct.opj_event_mgr* %3)
  br label %79

79:                                               ; preds = %74, %78
  %80 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %23, i64 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 7
  store i8* %81, i8** %84, align 8
  %85 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 1
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 8
  store i32 %86, i32* %87, align 8
  store i8* null, i8** %80, align 8
  br label %88

88:                                               ; preds = %83, %18, %79, %71, %22, %13, %4, %11
  %89 = phi i32 [ 0, %11 ], [ 0, %4 ], [ 1, %13 ], [ 0, %22 ], [ 0, %71 ], [ 1, %79 ], [ 1, %18 ], [ 1, %83 ]
  ret i32 %89
}

declare i32 @opj_j2k_decode(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #1

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_jp2_check_color(%struct.opj_image* nocapture readonly, %struct.opj_jp2_color* nocapture readonly, %struct.opj_event_mgr*) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %1, i64 0, i32 2
  %5 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %4, align 8
  %6 = icmp eq %struct.opj_jp2_cdef* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %1, i64 0, i32 3
  %9 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %8, align 8
  br label %81

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %5, i64 0, i32 0
  %12 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %11, align 8
  %13 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %5, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %1, i64 0, i32 3
  %18 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %17, align 8
  %19 = icmp eq %struct.opj_jp2_pclr* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %18, i64 0, i32 3
  %22 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %21, align 8
  %23 = icmp eq %struct.opj_jp2_cmap_comp* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %18, i64 0, i32 5
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %20, %10, %24
  %29 = phi i32 [ %27, %24 ], [ %16, %20 ], [ %16, %10 ]
  %30 = icmp eq i16 %14, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %28
  %32 = zext i16 %14 to i64
  br label %37

33:                                               ; preds = %28
  %34 = icmp eq i32 %29, 0
  br i1 %34, label %81, label %35

35:                                               ; preds = %55, %33
  %36 = zext i16 %14 to i64
  br label %60

37:                                               ; preds = %55, %31
  %38 = phi i64 [ 0, %31 ], [ %56, %55 ]
  %39 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %12, i64 %38, i32 0
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp ugt i32 %29, %41
  br i1 %42, label %46, label %43

43:                                               ; preds = %37
  %44 = zext i16 %40 to i32
  %45 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i32 %44, i32 %29) #3
  br label %221

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %12, i64 %38, i32 2
  %48 = load i16, i16* %47, align 2
  switch i16 %48, label %49 [
    i16 -1, label %55
    i16 0, label %55
  ]

49:                                               ; preds = %46
  %50 = zext i16 %48 to i32
  %51 = add nsw i32 %50, -1
  %52 = icmp ult i32 %51, %29
  br i1 %52, label %55, label %53

53:                                               ; preds = %49
  %54 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i32 %51, i32 %29) #3
  br label %221

55:                                               ; preds = %46, %46, %49
  %56 = add nuw nsw i64 %38, 1
  %57 = icmp eq i64 %56, %32
  br i1 %57, label %35, label %37

58:                                               ; preds = %76
  %59 = icmp eq i32 %62, 0
  br i1 %59, label %81, label %60

60:                                               ; preds = %35, %58
  %61 = phi i32 [ %29, %35 ], [ %62, %58 ]
  %62 = add i32 %61, -1
  br i1 %30, label %76, label %63

63:                                               ; preds = %60, %70
  %64 = phi i64 [ %71, %70 ], [ 0, %60 ]
  %65 = phi i16 [ %72, %70 ], [ 0, %60 ]
  %66 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %12, i64 %64, i32 0
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = icmp eq i32 %62, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %63
  %71 = add nuw nsw i64 %64, 1
  %72 = add nuw i16 %65, 1
  %73 = icmp eq i64 %71, %36
  br i1 %73, label %76, label %63

74:                                               ; preds = %63
  %75 = trunc i64 %64 to i16
  br label %76

76:                                               ; preds = %70, %74, %60
  %77 = phi i16 [ 0, %60 ], [ %75, %74 ], [ %72, %70 ]
  %78 = icmp eq i16 %77, %14
  br i1 %78, label %79, label %58

79:                                               ; preds = %76
  %80 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0)) #3
  br label %221

81:                                               ; preds = %58, %7, %33
  %82 = phi %struct.opj_jp2_pclr* [ %9, %7 ], [ %18, %33 ], [ %18, %58 ]
  %83 = icmp eq %struct.opj_jp2_pclr* %82, null
  br i1 %83, label %221, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %82, i64 0, i32 3
  %86 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %85, align 8
  %87 = icmp eq %struct.opj_jp2_cmap_comp* %86, null
  br i1 %87, label %221, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %82, i64 0, i32 5
  %90 = load i8, i8* %89, align 2
  %91 = zext i8 %90 to i32
  %92 = icmp eq i8 %90, 0
  br i1 %92, label %111, label %93

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  br label %95

95:                                               ; preds = %93, %106
  %96 = phi i32 [ 1, %93 ], [ %107, %106 ]
  %97 = phi i16 [ 0, %93 ], [ %108, %106 ]
  %98 = zext i16 %97 to i64
  %99 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %86, i64 %98, i32 0
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = load i32, i32* %94, align 8
  %103 = icmp ugt i32 %102, %101
  br i1 %103, label %106, label %104

104:                                              ; preds = %95
  %105 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i32 %101, i32 %102) #3
  br label %106

106:                                              ; preds = %95, %104
  %107 = phi i32 [ 0, %104 ], [ %96, %95 ]
  %108 = add i16 %97, 1
  %109 = zext i16 %108 to i32
  %110 = icmp ult i32 %109, %91
  br i1 %110, label %95, label %111

111:                                              ; preds = %106, %88
  %112 = phi i32 [ 1, %88 ], [ %107, %106 ]
  %113 = zext i8 %90 to i64
  %114 = tail call i8* @opj_calloc(i64 %113, i64 4) #3
  %115 = bitcast i8* %114 to i32*
  %116 = icmp eq i8* %114, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %111
  br i1 %92, label %185, label %121

118:                                              ; preds = %111
  %119 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0)) #3
  br label %221

120:                                              ; preds = %161
  br i1 %92, label %185, label %166

121:                                              ; preds = %117, %161
  %122 = phi i32 [ %164, %161 ], [ 0, %117 ]
  %123 = phi i32 [ %162, %161 ], [ %112, %117 ]
  %124 = phi i16 [ %163, %161 ], [ 0, %117 ]
  %125 = zext i16 %124 to i64
  %126 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %86, i64 %125, i32 1
  %127 = load i8, i8* %126, align 2
  %128 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %86, i64 %125, i32 2
  %129 = load i8, i8* %128, align 1
  %130 = icmp ult i8 %127, 2
  br i1 %130, label %134, label %131

131:                                              ; preds = %121
  %132 = zext i8 %127 to i32
  %133 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i64 0, i64 0), i32 %122, i32 %132) #3
  br label %161

134:                                              ; preds = %121
  %135 = zext i8 %129 to i32
  %136 = icmp ult i8 %129, %90
  br i1 %136, label %139, label %137

137:                                              ; preds = %134
  %138 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.15, i64 0, i64 0), i32 %135) #3
  br label %161

139:                                              ; preds = %134
  %140 = zext i8 %129 to i64
  %141 = getelementptr inbounds i32, i32* %115, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = icmp ne i32 %142, 0
  %144 = icmp eq i8 %127, 1
  %145 = and i1 %144, %143
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.16, i64 0, i64 0), i32 %135) #3
  br label %161

148:                                              ; preds = %139
  %149 = icmp ne i8 %127, 0
  %150 = icmp eq i8 %129, 0
  %151 = or i1 %149, %150
  br i1 %151, label %154, label %152

152:                                              ; preds = %148
  %153 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17, i64 0, i64 0), i32 %122, i32 %135) #3
  br label %161

154:                                              ; preds = %148
  %155 = icmp ne i8 %127, 1
  %156 = icmp eq i32 %122, %135
  %157 = or i1 %155, %156
  br i1 %157, label %160, label %158

158:                                              ; preds = %154
  %159 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.18, i64 0, i64 0), i32 %122, i32 %122, i32 %135) #3
  br label %161

160:                                              ; preds = %154
  store i32 1, i32* %141, align 4
  br label %161

161:                                              ; preds = %137, %152, %160, %158, %146, %131
  %162 = phi i32 [ 0, %131 ], [ 0, %137 ], [ 0, %146 ], [ 0, %152 ], [ 0, %158 ], [ %123, %160 ]
  %163 = add i16 %124, 1
  %164 = zext i16 %163 to i32
  %165 = icmp ult i32 %164, %91
  br i1 %165, label %121, label %120

166:                                              ; preds = %120, %180
  %167 = phi i32 [ %183, %180 ], [ 0, %120 ]
  %168 = phi i32 [ %181, %180 ], [ %162, %120 ]
  %169 = phi i16 [ %182, %180 ], [ 0, %120 ]
  %170 = zext i16 %169 to i64
  %171 = getelementptr inbounds i32, i32* %115, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %180

174:                                              ; preds = %166
  %175 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %86, i64 %170, i32 1
  %176 = load i8, i8* %175, align 2
  %177 = icmp eq i8 %176, 0
  br i1 %177, label %180, label %178

178:                                              ; preds = %174
  %179 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.19, i64 0, i64 0), i32 %167) #3
  br label %180

180:                                              ; preds = %174, %166, %178
  %181 = phi i32 [ %168, %166 ], [ 0, %178 ], [ %168, %174 ]
  %182 = add i16 %169, 1
  %183 = zext i16 %182 to i32
  %184 = icmp ult i32 %183, %91
  br i1 %184, label %166, label %185

185:                                              ; preds = %180, %117, %120
  %186 = phi i32 [ %162, %120 ], [ %112, %117 ], [ %181, %180 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %220, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %190 = load i32, i32* %189, align 8
  %191 = icmp ne i32 %190, 1
  %192 = or i1 %191, %92
  br i1 %192, label %219, label %196

193:                                              ; preds = %196
  %194 = zext i16 %202 to i32
  %195 = icmp ult i32 %194, %91
  br i1 %195, label %196, label %205

196:                                              ; preds = %188, %193
  %197 = phi i16 [ %202, %193 ], [ 0, %188 ]
  %198 = zext i16 %197 to i64
  %199 = getelementptr inbounds i32, i32* %115, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = icmp eq i32 %200, 0
  %202 = add i16 %197, 1
  br i1 %201, label %203, label %193

203:                                              ; preds = %196
  %204 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.20, i64 0, i64 0)) #3
  br label %205

205:                                              ; preds = %193, %203
  %206 = phi i32 [ 0, %203 ], [ %186, %193 ]
  %207 = icmp eq i32 %206, 0
  %208 = icmp ne i8 %90, 0
  %209 = and i1 %207, %208
  br i1 %209, label %210, label %219

210:                                              ; preds = %205, %210
  %211 = phi i16 [ %216, %210 ], [ 0, %205 ]
  %212 = zext i16 %211 to i64
  %213 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %86, i64 %212, i32 1
  store i8 1, i8* %213, align 2
  %214 = trunc i16 %211 to i8
  %215 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %86, i64 %212, i32 2
  store i8 %214, i8* %215, align 1
  %216 = add i16 %211, 1
  %217 = zext i16 %216 to i32
  %218 = icmp ult i32 %217, %91
  br i1 %218, label %210, label %219

219:                                              ; preds = %210, %188, %205
  tail call void @opj_free(i8* nonnull %114) #3
  br label %221

220:                                              ; preds = %185
  tail call void @opj_free(i8* nonnull %114) #3
  br label %221

221:                                              ; preds = %81, %84, %219, %220, %118, %79, %53, %43
  %222 = phi i32 [ 0, %220 ], [ 0, %43 ], [ 0, %53 ], [ 0, %79 ], [ 0, %118 ], [ 1, %219 ], [ 1, %84 ], [ 1, %81 ]
  ret i32 %222
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_jp2_apply_pclr(%struct.opj_image* nocapture, %struct.opj_jp2_color* nocapture readonly, %struct.opj_event_mgr*) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %1, i64 0, i32 3
  %5 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %4, align 8
  %6 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %5, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %5, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %5, i64 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %5, i64 0, i32 3
  %13 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %12, align 8
  %14 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %5, i64 0, i32 5
  %15 = load i8, i8* %14, align 2
  %16 = zext i8 %15 to i32
  %17 = icmp eq i8 %15, 0
  %18 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %19 = load %struct.opj_image_comp*, %struct.opj_image_comp** %18, align 8
  br i1 %17, label %27, label %20

20:                                               ; preds = %3
  %21 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 0, i32 0
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i64
  %24 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %23, i32 11
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %42, label %29

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  br label %65

29:                                               ; preds = %20, %33
  %30 = phi i16 [ %41, %33 ], [ 1, %20 ]
  %31 = zext i16 %30 to i32
  %32 = icmp ult i32 %31, %16
  br i1 %32, label %33, label %45

33:                                               ; preds = %29
  %34 = zext i16 %30 to i64
  %35 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 %34, i32 0
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i64
  %38 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %37, i32 11
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  %41 = add i16 %30, 1
  br i1 %40, label %42, label %29

42:                                               ; preds = %33, %20
  %43 = phi i32 [ 0, %20 ], [ %31, %33 ]
  %44 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.21, i64 0, i64 0), i32 %43) #3
  br label %368

45:                                               ; preds = %29
  %46 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  br i1 %17, label %65, label %50

47:                                               ; preds = %59
  %48 = zext i16 %64 to i32
  %49 = icmp ult i32 %48, %16
  br i1 %49, label %50, label %65

50:                                               ; preds = %45, %47
  %51 = phi i16 [ %64, %47 ], [ 0, %45 ]
  %52 = zext i16 %51 to i64
  %53 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 %52, i32 0
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i64
  %56 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %55, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %368, label %59

59:                                               ; preds = %50
  %60 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %55, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = udiv i32 1073741823, %57
  %63 = icmp ugt i32 %61, %62
  %64 = add i16 %51, 1
  br i1 %63, label %368, label %47

65:                                               ; preds = %47, %27, %45
  %66 = phi %struct.opj_image_comp** [ %28, %27 ], [ %46, %45 ], [ %46, %47 ]
  %67 = zext i8 %15 to i64
  %68 = shl nuw nsw i64 %67, 6
  %69 = tail call i8* @opj_malloc(i64 %68) #3
  %70 = bitcast i8* %69 to %struct.opj_image_comp*
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %65
  br i1 %17, label %349, label %75

73:                                               ; preds = %65
  %74 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.22, i64 0, i64 0)) #3
  br label %368

75:                                               ; preds = %72, %111
  %76 = phi i16 [ %120, %111 ], [ 0, %72 ]
  %77 = zext i16 %76 to i64
  %78 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 %77, i32 0
  %79 = load i16, i16* %78, align 2
  %80 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %77
  %81 = zext i16 %79 to i64
  %82 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %81
  %83 = bitcast %struct.opj_image_comp* %80 to i8*
  %84 = bitcast %struct.opj_image_comp* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 64, i1 false)
  %85 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %81, i32 2
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %86 to i64
  %88 = shl nuw nsw i64 %87, 2
  %89 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %81, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i64
  %92 = mul i64 %88, %91
  %93 = tail call i8* @opj_image_data_alloc(i64 %92) #3
  %94 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %77, i32 11
  %95 = bitcast i32** %94 to i8**
  store i8* %93, i8** %95, align 8
  %96 = icmp eq i8* %93, null
  br i1 %96, label %97, label %111

97:                                               ; preds = %75
  %98 = icmp eq i16 %76, 0
  br i1 %98, label %109, label %99

99:                                               ; preds = %97, %99
  %100 = phi i64 [ %108, %99 ], [ %77, %97 ]
  %101 = trunc i64 %100 to i16
  %102 = add i16 %101, -1
  %103 = zext i16 %102 to i64
  %104 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %103, i32 11
  %105 = bitcast i32** %104 to i8**
  %106 = load i8*, i8** %105, align 8
  tail call void @opj_image_data_free(i8* %106) #3
  %107 = icmp eq i16 %102, 0
  %108 = add nsw i64 %100, -1
  br i1 %107, label %109, label %99

109:                                              ; preds = %99, %97
  tail call void @opj_free(i8* nonnull %69) #3
  %110 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.22, i64 0, i64 0)) #3
  br label %368

111:                                              ; preds = %75
  %112 = getelementptr inbounds i8, i8* %7, i64 %77
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %77, i32 6
  store i32 %114, i32* %115, align 8
  %116 = getelementptr inbounds i8, i8* %9, i64 %77
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %77, i32 8
  store i32 %118, i32* %119, align 8
  %120 = add i16 %76, 1
  %121 = zext i16 %120 to i32
  %122 = icmp ult i32 %121, %16
  br i1 %122, label %75, label %123

123:                                              ; preds = %111
  %124 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %4, align 8
  %125 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %124, i64 0, i32 4
  %126 = load i16, i16* %125, align 8
  %127 = zext i16 %126 to i32
  %128 = add nsw i32 %127, -1
  br i1 %17, label %349, label %129

129:                                              ; preds = %123, %345
  %130 = phi i16 [ %346, %345 ], [ 0, %123 ]
  %131 = zext i16 %130 to i64
  %132 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 %131, i32 0
  %133 = load i16, i16* %132, align 2
  %134 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 %131, i32 2
  %135 = load i8, i8* %134, align 1
  %136 = zext i16 %133 to i64
  %137 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %136, i32 11
  %138 = load i32*, i32** %137, align 8
  %139 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %131, i32 11
  %140 = load i32*, i32** %139, align 8
  %141 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %131, i32 2
  %142 = load i32, i32* %141, align 8
  %143 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %131, i32 3
  %144 = load i32, i32* %143, align 4
  %145 = mul i32 %144, %142
  %146 = icmp ne i32* %138, null
  %147 = icmp ne i32* %140, null
  %148 = and i1 %146, %147
  br i1 %148, label %159, label %149

149:                                              ; preds = %129
  %150 = zext i8 %15 to i64
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %156, %151 ]
  %153 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %152, i32 11
  %154 = bitcast i32** %153 to i8**
  %155 = load i8*, i8** %154, align 8
  tail call void @opj_image_data_free(i8* %155) #3
  %156 = add nuw nsw i64 %152, 1
  %157 = icmp eq i64 %156, %150
  br i1 %157, label %158, label %151

158:                                              ; preds = %151
  tail call void @opj_free(i8* nonnull %69) #3
  br label %368

159:                                              ; preds = %129
  %160 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %13, i64 %131, i32 1
  %161 = load i8, i8* %160, align 2
  %162 = icmp eq i8 %161, 0
  %163 = icmp ne i32 %145, 0
  br i1 %162, label %172, label %164

164:                                              ; preds = %159
  br i1 %163, label %165, label %345

165:                                              ; preds = %164
  %166 = zext i8 %135 to i32
  %167 = zext i32 %145 to i64
  %168 = and i64 %167, 1
  %169 = icmp eq i32 %145, 1
  br i1 %169, label %329, label %170

170:                                              ; preds = %165
  %171 = sub nsw i64 %167, %168
  br label %298

172:                                              ; preds = %159
  br i1 %163, label %173, label %345

173:                                              ; preds = %172
  %174 = zext i32 %145 to i64
  %175 = icmp ult i32 %145, 8
  br i1 %175, label %261, label %176

176:                                              ; preds = %173
  %177 = getelementptr i32, i32* %140, i64 %174
  %178 = getelementptr i32, i32* %138, i64 %174
  %179 = icmp ult i32* %140, %178
  %180 = icmp ult i32* %138, %177
  %181 = and i1 %179, %180
  br i1 %181, label %261, label %182

182:                                              ; preds = %176
  %183 = and i64 %174, 4294967288
  %184 = add nsw i64 %183, -8
  %185 = lshr exact i64 %184, 3
  %186 = add nuw nsw i64 %185, 1
  %187 = and i64 %186, 3
  %188 = icmp ult i64 %184, 24
  br i1 %188, label %240, label %189

189:                                              ; preds = %182
  %190 = sub nsw i64 %186, %187
  br label %191

191:                                              ; preds = %191, %189
  %192 = phi i64 [ 0, %189 ], [ %237, %191 ]
  %193 = phi i64 [ %190, %189 ], [ %238, %191 ]
  %194 = getelementptr inbounds i32, i32* %138, i64 %192
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4, !alias.scope !2
  %197 = getelementptr inbounds i32, i32* %194, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4, !alias.scope !2
  %200 = getelementptr inbounds i32, i32* %140, i64 %192
  %201 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %201, align 4, !alias.scope !5, !noalias !2
  %202 = getelementptr inbounds i32, i32* %200, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %203, align 4, !alias.scope !5, !noalias !2
  %204 = or i64 %192, 8
  %205 = getelementptr inbounds i32, i32* %138, i64 %204
  %206 = bitcast i32* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4, !alias.scope !2
  %208 = getelementptr inbounds i32, i32* %205, i64 4
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4, !alias.scope !2
  %211 = getelementptr inbounds i32, i32* %140, i64 %204
  %212 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %212, align 4, !alias.scope !5, !noalias !2
  %213 = getelementptr inbounds i32, i32* %211, i64 4
  %214 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %214, align 4, !alias.scope !5, !noalias !2
  %215 = or i64 %192, 16
  %216 = getelementptr inbounds i32, i32* %138, i64 %215
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4, !alias.scope !2
  %219 = getelementptr inbounds i32, i32* %216, i64 4
  %220 = bitcast i32* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 4, !alias.scope !2
  %222 = getelementptr inbounds i32, i32* %140, i64 %215
  %223 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %223, align 4, !alias.scope !5, !noalias !2
  %224 = getelementptr inbounds i32, i32* %222, i64 4
  %225 = bitcast i32* %224 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %225, align 4, !alias.scope !5, !noalias !2
  %226 = or i64 %192, 24
  %227 = getelementptr inbounds i32, i32* %138, i64 %226
  %228 = bitcast i32* %227 to <4 x i32>*
  %229 = load <4 x i32>, <4 x i32>* %228, align 4, !alias.scope !2
  %230 = getelementptr inbounds i32, i32* %227, i64 4
  %231 = bitcast i32* %230 to <4 x i32>*
  %232 = load <4 x i32>, <4 x i32>* %231, align 4, !alias.scope !2
  %233 = getelementptr inbounds i32, i32* %140, i64 %226
  %234 = bitcast i32* %233 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %234, align 4, !alias.scope !5, !noalias !2
  %235 = getelementptr inbounds i32, i32* %233, i64 4
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %236, align 4, !alias.scope !5, !noalias !2
  %237 = add i64 %192, 32
  %238 = add i64 %193, -4
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %191, !llvm.loop !7

240:                                              ; preds = %191, %182
  %241 = phi i64 [ 0, %182 ], [ %237, %191 ]
  %242 = icmp eq i64 %187, 0
  br i1 %242, label %259, label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %256, %243 ], [ %241, %240 ]
  %245 = phi i64 [ %257, %243 ], [ %187, %240 ]
  %246 = getelementptr inbounds i32, i32* %138, i64 %244
  %247 = bitcast i32* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 4, !alias.scope !2
  %249 = getelementptr inbounds i32, i32* %246, i64 4
  %250 = bitcast i32* %249 to <4 x i32>*
  %251 = load <4 x i32>, <4 x i32>* %250, align 4, !alias.scope !2
  %252 = getelementptr inbounds i32, i32* %140, i64 %244
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %253, align 4, !alias.scope !5, !noalias !2
  %254 = getelementptr inbounds i32, i32* %252, i64 4
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %255, align 4, !alias.scope !5, !noalias !2
  %256 = add i64 %244, 8
  %257 = add i64 %245, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %243, !llvm.loop !9

259:                                              ; preds = %243, %240
  %260 = icmp eq i64 %183, %174
  br i1 %260, label %345, label %261

261:                                              ; preds = %259, %176, %173
  %262 = phi i64 [ 0, %176 ], [ 0, %173 ], [ %183, %259 ]
  %263 = xor i64 %262, -1
  %264 = add nsw i64 %263, %174
  %265 = and i64 %174, 3
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %276, label %267

267:                                              ; preds = %261, %267
  %268 = phi i64 [ %273, %267 ], [ %262, %261 ]
  %269 = phi i64 [ %274, %267 ], [ %265, %261 ]
  %270 = getelementptr inbounds i32, i32* %138, i64 %268
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds i32, i32* %140, i64 %268
  store i32 %271, i32* %272, align 4
  %273 = add nuw nsw i64 %268, 1
  %274 = add i64 %269, -1
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %267, !llvm.loop !11

276:                                              ; preds = %267, %261
  %277 = phi i64 [ %262, %261 ], [ %273, %267 ]
  %278 = icmp ult i64 %264, 3
  br i1 %278, label %345, label %279

279:                                              ; preds = %276, %279
  %280 = phi i64 [ %296, %279 ], [ %277, %276 ]
  %281 = getelementptr inbounds i32, i32* %138, i64 %280
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds i32, i32* %140, i64 %280
  store i32 %282, i32* %283, align 4
  %284 = add nuw nsw i64 %280, 1
  %285 = getelementptr inbounds i32, i32* %138, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds i32, i32* %140, i64 %284
  store i32 %286, i32* %287, align 4
  %288 = add nuw nsw i64 %280, 2
  %289 = getelementptr inbounds i32, i32* %138, i64 %288
  %290 = load i32, i32* %289, align 4
  %291 = getelementptr inbounds i32, i32* %140, i64 %288
  store i32 %290, i32* %291, align 4
  %292 = add nuw nsw i64 %280, 3
  %293 = getelementptr inbounds i32, i32* %138, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %140, i64 %292
  store i32 %294, i32* %295, align 4
  %296 = add nuw nsw i64 %280, 4
  %297 = icmp eq i64 %296, %174
  br i1 %297, label %345, label %279, !llvm.loop !12

298:                                              ; preds = %298, %170
  %299 = phi i64 [ 0, %170 ], [ %326, %298 ]
  %300 = phi i64 [ %171, %170 ], [ %327, %298 ]
  %301 = getelementptr inbounds i32, i32* %138, i64 %299
  %302 = load i32, i32* %301, align 4
  %303 = icmp slt i32 %302, 0
  %304 = icmp slt i32 %302, %127
  %305 = select i1 %304, i32 %302, i32 %128
  %306 = select i1 %303, i32 0, i32 %305
  %307 = mul nsw i32 %306, %16
  %308 = add nsw i32 %307, %166
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds i32, i32* %11, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = getelementptr inbounds i32, i32* %140, i64 %299
  store i32 %311, i32* %312, align 4
  %313 = or i64 %299, 1
  %314 = getelementptr inbounds i32, i32* %138, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = icmp slt i32 %315, 0
  %317 = icmp slt i32 %315, %127
  %318 = select i1 %317, i32 %315, i32 %128
  %319 = select i1 %316, i32 0, i32 %318
  %320 = mul nsw i32 %319, %16
  %321 = add nsw i32 %320, %166
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i32, i32* %11, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = getelementptr inbounds i32, i32* %140, i64 %313
  store i32 %324, i32* %325, align 4
  %326 = add nuw nsw i64 %299, 2
  %327 = add i64 %300, -2
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %298

329:                                              ; preds = %298, %165
  %330 = phi i64 [ 0, %165 ], [ %326, %298 ]
  %331 = icmp eq i64 %168, 0
  br i1 %331, label %345, label %332

332:                                              ; preds = %329
  %333 = getelementptr inbounds i32, i32* %138, i64 %330
  %334 = load i32, i32* %333, align 4
  %335 = icmp slt i32 %334, 0
  %336 = icmp slt i32 %334, %127
  %337 = select i1 %336, i32 %334, i32 %128
  %338 = select i1 %335, i32 0, i32 %337
  %339 = mul nsw i32 %338, %16
  %340 = add nsw i32 %339, %166
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i32, i32* %11, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds i32, i32* %140, i64 %330
  store i32 %343, i32* %344, align 4
  br label %345

345:                                              ; preds = %332, %329, %276, %279, %259, %164, %172
  %346 = add i16 %130, 1
  %347 = zext i16 %346 to i32
  %348 = icmp ult i32 %347, %16
  br i1 %348, label %129, label %349

349:                                              ; preds = %345, %72, %123
  %350 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %351 = load i32, i32* %350, align 8
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %365, label %353

353:                                              ; preds = %349, %361
  %354 = phi i16 [ %362, %361 ], [ 0, %349 ]
  %355 = zext i16 %354 to i64
  %356 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %19, i64 %355, i32 11
  %357 = load i32*, i32** %356, align 8
  %358 = icmp eq i32* %357, null
  br i1 %358, label %361, label %359

359:                                              ; preds = %353
  %360 = bitcast i32* %357 to i8*
  tail call void @opj_image_data_free(i8* nonnull %360) #3
  br label %361

361:                                              ; preds = %353, %359
  %362 = add i16 %354, 1
  %363 = zext i16 %362 to i32
  %364 = icmp ugt i32 %351, %363
  br i1 %364, label %353, label %365

365:                                              ; preds = %361, %349
  %366 = bitcast %struct.opj_image_comp* %19 to i8*
  tail call void @opj_free(i8* %366) #3
  %367 = bitcast %struct.opj_image_comp** %66 to i8**
  store i8* %69, i8** %367, align 8
  store i32 %16, i32* %350, align 8
  br label %368

368:                                              ; preds = %50, %59, %365, %158, %109, %73, %42
  %369 = phi i32 [ 0, %42 ], [ 0, %109 ], [ 0, %158 ], [ 1, %365 ], [ 0, %73 ], [ 0, %59 ], [ 0, %50 ]
  ret i32 %369
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @opj_jp2_apply_cdef(%struct.opj_image* nocapture readonly, %struct.opj_jp2_color* nocapture, %struct.opj_event_mgr*) unnamed_addr #0 {
  %4 = alloca %struct.opj_image_comp, align 8
  %5 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %1, i64 0, i32 2
  %6 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %5, align 8
  %7 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %6, i64 0, i32 0
  %8 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %7, align 8
  %9 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %6, i64 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %111, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %14 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %15 = bitcast %struct.opj_image_comp* %4 to i8*
  %16 = zext i16 %10 to i64
  %17 = add i16 %10, -2
  br label %18

18:                                               ; preds = %103, %12
  %19 = phi i64 [ 0, %12 ], [ %104, %103 ]
  %20 = phi i64 [ 1, %12 ], [ %105, %103 ]
  %21 = trunc i64 %19 to i16
  %22 = xor i16 %21, 1
  %23 = add i16 %10, %22
  %24 = trunc i64 %19 to i16
  %25 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %19, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = load i32, i32* %13, align 8
  %29 = icmp ugt i32 %28, %27
  br i1 %29, label %32, label %30

30:                                               ; preds = %18
  %31 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.23, i64 0, i64 0), i32 %27, i32 %28) #3
  br label %103

32:                                               ; preds = %18
  %33 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %19, i32 2
  %34 = load i16, i16* %33, align 2
  switch i16 %34, label %41 [
    i16 0, label %35
    i16 -1, label %35
  ]

35:                                               ; preds = %32, %32
  %36 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %19, i32 1
  %37 = load i16, i16* %36, align 2
  %38 = load %struct.opj_image_comp*, %struct.opj_image_comp** %14, align 8
  %39 = zext i16 %26 to i64
  %40 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %38, i64 %39, i32 12
  store i16 %37, i16* %40, align 8
  br label %103

41:                                               ; preds = %32
  %42 = add i16 %34, -1
  %43 = zext i16 %42 to i32
  %44 = icmp ugt i32 %28, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %41
  %46 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.24, i64 0, i64 0), i32 %43, i32 %28) #3
  br label %103

47:                                               ; preds = %41
  %48 = icmp eq i16 %26, %42
  br i1 %48, label %97, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %19, i32 1
  %51 = load i16, i16* %50, align 2
  %52 = icmp eq i16 %51, 0
  br i1 %52, label %53, label %97

53:                                               ; preds = %49
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 64, i1 false)
  %54 = load %struct.opj_image_comp*, %struct.opj_image_comp** %14, align 8
  %55 = zext i16 %26 to i64
  %56 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %54, i64 %55
  %57 = bitcast %struct.opj_image_comp* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 8 %57, i64 64, i1 false)
  %58 = zext i16 %42 to i64
  %59 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %54, i64 %58
  %60 = bitcast %struct.opj_image_comp* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %60, i64 64, i1 false)
  %61 = load %struct.opj_image_comp*, %struct.opj_image_comp** %14, align 8
  %62 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %61, i64 %58
  %63 = bitcast %struct.opj_image_comp* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* nonnull align 8 %15, i64 64, i1 false)
  %64 = add nuw nsw i64 %19, 1
  %65 = icmp ult i64 %64, %16
  br i1 %65, label %66, label %96

66:                                               ; preds = %53
  %67 = and i16 %23, 1
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %79, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %20, i32 0
  %71 = load i16, i16* %70, align 2
  %72 = icmp eq i16 %71, %26
  br i1 %72, label %75, label %73

73:                                               ; preds = %69
  %74 = icmp eq i16 %71, %42
  br i1 %74, label %75, label %77

75:                                               ; preds = %73, %69
  %76 = phi i16 [ %42, %69 ], [ %26, %73 ]
  store i16 %76, i16* %70, align 2
  br label %77

77:                                               ; preds = %75, %73
  %78 = add nuw nsw i64 %20, 1
  br label %79

79:                                               ; preds = %77, %66
  %80 = phi i64 [ %78, %77 ], [ %20, %66 ]
  %81 = icmp eq i16 %17, %24
  br i1 %81, label %96, label %82

82:                                               ; preds = %79, %127
  %83 = phi i64 [ %128, %127 ], [ %80, %79 ]
  %84 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %83, i32 0
  %85 = load i16, i16* %84, align 2
  %86 = icmp eq i16 %85, %26
  br i1 %86, label %89, label %87

87:                                               ; preds = %82
  %88 = icmp eq i16 %85, %42
  br i1 %88, label %89, label %91

89:                                               ; preds = %87, %82
  %90 = phi i16 [ %42, %82 ], [ %26, %87 ]
  store i16 %90, i16* %84, align 2
  br label %91

91:                                               ; preds = %89, %87
  %92 = add nuw nsw i64 %83, 1
  %93 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %92, i32 0
  %94 = load i16, i16* %93, align 2
  %95 = icmp eq i16 %94, %26
  br i1 %95, label %125, label %123

96:                                               ; preds = %79, %127, %53
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15)
  br label %97

97:                                               ; preds = %47, %96, %49
  %98 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %8, i64 %19, i32 1
  %99 = load i16, i16* %98, align 2
  %100 = load %struct.opj_image_comp*, %struct.opj_image_comp** %14, align 8
  %101 = zext i16 %26 to i64
  %102 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %100, i64 %101, i32 12
  store i16 %99, i16* %102, align 8
  br label %103

103:                                              ; preds = %97, %45, %35, %30
  %104 = add nuw nsw i64 %19, 1
  %105 = add nuw nsw i64 %20, 1
  %106 = icmp eq i64 %104, %16
  br i1 %106, label %107, label %18

107:                                              ; preds = %103
  %108 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %5, align 8
  %109 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %108, i64 0, i32 0
  %110 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %109, align 8
  br label %111

111:                                              ; preds = %107, %3
  %112 = phi %struct.opj_jp2_cdef* [ %108, %107 ], [ %6, %3 ]
  %113 = phi %struct.opj_jp2_cdef_info* [ %110, %107 ], [ %8, %3 ]
  %114 = icmp eq %struct.opj_jp2_cdef_info* %113, null
  br i1 %114, label %115, label %117

115:                                              ; preds = %111
  %116 = bitcast %struct.opj_jp2_cdef* %112 to i8*
  br label %121

117:                                              ; preds = %111
  %118 = bitcast %struct.opj_jp2_cdef_info* %113 to i8*
  tail call void @opj_free(i8* nonnull %118) #3
  %119 = bitcast %struct.opj_jp2_cdef** %5 to i8**
  %120 = load i8*, i8** %119, align 8
  br label %121

121:                                              ; preds = %115, %117
  %122 = phi i8* [ %116, %115 ], [ %120, %117 ]
  tail call void @opj_free(i8* %122) #3
  store %struct.opj_jp2_cdef* null, %struct.opj_jp2_cdef** %5, align 8
  ret void

123:                                              ; preds = %91
  %124 = icmp eq i16 %94, %42
  br i1 %124, label %125, label %127

125:                                              ; preds = %123, %91
  %126 = phi i16 [ %42, %91 ], [ %26, %123 ]
  store i16 %126, i16* %93, align 2
  br label %127

127:                                              ; preds = %125, %123
  %128 = add nuw nsw i64 %83, 2
  %129 = trunc i64 %128 to i16
  %130 = icmp eq i16 %10, %129
  br i1 %130, label %96, label %82
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_jp2_setup_decoder(%struct.opj_jp2* nocapture, %struct.opj_dparameters*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %4 = load %struct.opj_j2k*, %struct.opj_j2k** %3, align 8
  tail call void @opj_j2k_setup_decoder(%struct.opj_j2k* %4, %struct.opj_dparameters* %1) #3
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 4
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  store %struct.opj_jp2_comps* null, %struct.opj_jp2_comps** %6, align 8
  %7 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 16
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 25
  store i32 %9, i32* %10, align 8
  ret void
}

declare void @opj_j2k_setup_decoder(%struct.opj_j2k*, %struct.opj_dparameters*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_set_threads(%struct.opj_jp2* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %4 = load %struct.opj_j2k*, %struct.opj_j2k** %3, align 8
  %5 = tail call i32 @opj_j2k_set_threads(%struct.opj_j2k* %4, i32 %1) #3
  ret i32 %5
}

declare i32 @opj_j2k_set_threads(%struct.opj_j2k*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_setup_encoder(%struct.opj_jp2*, %struct.opj_cparameters*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = icmp ne %struct.opj_jp2* %0, null
  %6 = icmp ne %struct.opj_cparameters* %1, null
  %7 = and i1 %5, %6
  %8 = icmp ne %struct.opj_image* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %287

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, -1
  %14 = icmp ugt i32 %13, 16383
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %287

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %19 = load %struct.opj_j2k*, %struct.opj_j2k** %18, align 8
  %20 = tail call i32 @opj_j2k_setup_encoder(%struct.opj_j2k* %19, %struct.opj_cparameters* nonnull %1, %struct.opj_image* nonnull %2, %struct.opj_event_mgr* %3) #3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %287, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 14
  store i32 1785737760, i32* %23, align 4
  %24 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 15
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  store i32 1, i32* %25, align 4
  %26 = tail call i8* @opj_malloc(i64 4) #3
  %27 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = icmp eq i8* %26, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %22
  %31 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %287

32:                                               ; preds = %22
  %33 = bitcast i8* %26 to i32*
  store i32 1785737760, i32* %33, align 4
  %34 = load i32, i32* %11, align 8
  %35 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  store i32 %34, i32* %35, align 8
  %36 = zext i32 %34 to i64
  %37 = mul nuw nsw i64 %36, 12
  %38 = tail call i8* @opj_malloc(i64 %37) #3
  %39 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  %40 = bitcast %struct.opj_jp2_comps** %39 to i8**
  store i8* %38, i8** %40, align 8
  %41 = icmp eq i8* %38, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %32
  %43 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %287

44:                                               ; preds = %32
  %45 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 %46, %48
  %50 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = sub i32 %52, %54
  %56 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %58 = load %struct.opj_image_comp*, %struct.opj_image_comp** %57, align 8
  %59 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %58, i64 0, i32 6
  %60 = load i32, i32* %59, align 8
  %61 = add i32 %60, -1
  %62 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %58, i64 0, i32 8
  %63 = load i32, i32* %62, align 8
  %64 = shl i32 %63, 7
  %65 = add i32 %61, %64
  %66 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  store i32 %65, i32* %66, align 4
  %67 = load i32, i32* %11, align 8
  %68 = icmp ugt i32 %67, 1
  br i1 %68, label %69, label %83

69:                                               ; preds = %44, %78
  %70 = phi i32 [ %79, %78 ], [ %67, %44 ]
  %71 = phi i64 [ %80, %78 ], [ 1, %44 ]
  %72 = load %struct.opj_image_comp*, %struct.opj_image_comp** %57, align 8
  %73 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %72, i64 %71, i32 6
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %60, %74
  br i1 %75, label %78, label %76

76:                                               ; preds = %69
  store i32 255, i32* %66, align 4
  %77 = load i32, i32* %11, align 8
  br label %78

78:                                               ; preds = %69, %76
  %79 = phi i32 [ %70, %69 ], [ %77, %76 ]
  %80 = add nuw nsw i64 %71, 1
  %81 = zext i32 %79 to i64
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %69, label %83

83:                                               ; preds = %78, %44
  %84 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 7
  store i32 7, i32* %84, align 8
  %85 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 8
  store i32 0, i32* %85, align 4
  %86 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 9
  store i32 0, i32* %86, align 8
  %87 = load i32, i32* %11, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %118, label %89

89:                                               ; preds = %83
  %90 = load %struct.opj_image_comp*, %struct.opj_image_comp** %57, align 8
  %91 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 6
  %92 = load i32, i32* %91, align 8
  %93 = add i32 %92, -1
  %94 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 0, i32 8
  %95 = load i32, i32* %94, align 8
  %96 = shl i32 %95, 7
  %97 = add i32 %93, %96
  %98 = getelementptr inbounds i8, i8* %38, i64 8
  %99 = bitcast i8* %98 to i32*
  store i32 %97, i32* %99, align 4
  %100 = load i32, i32* %11, align 8
  %101 = icmp ugt i32 %100, 1
  br i1 %101, label %102, label %118

102:                                              ; preds = %89, %102
  %103 = phi i64 [ %114, %102 ], [ 1, %89 ]
  %104 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %39, align 8
  %105 = load %struct.opj_image_comp*, %struct.opj_image_comp** %57, align 8
  %106 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 %103, i32 6
  %107 = load i32, i32* %106, align 8
  %108 = add i32 %107, -1
  %109 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %105, i64 %103, i32 8
  %110 = load i32, i32* %109, align 8
  %111 = shl i32 %110, 7
  %112 = add i32 %108, %111
  %113 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %104, i64 %103, i32 2
  store i32 %112, i32* %113, align 4
  %114 = add nuw nsw i64 %103, 1
  %115 = load i32, i32* %11, align 8
  %116 = zext i32 %115 to i64
  %117 = icmp ult i64 %114, %116
  br i1 %117, label %102, label %118

118:                                              ; preds = %102, %89, %83
  %119 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 8
  %120 = load i32, i32* %119, align 8
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  br i1 %121, label %124, label %123

123:                                              ; preds = %118
  store i32 2, i32* %122, align 4
  br label %131

124:                                              ; preds = %118
  store i32 1, i32* %122, align 4
  %125 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, -1
  %128 = icmp ult i32 %127, 3
  br i1 %128, label %129, label %134

129:                                              ; preds = %124
  %130 = add i32 %126, 15
  br label %131

131:                                              ; preds = %129, %123
  %132 = phi i32 [ 0, %123 ], [ %130, %129 ]
  %133 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  store i32 %132, i32* %133, align 4
  br label %134

134:                                              ; preds = %124, %131
  %135 = load i32, i32* %11, align 8
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %281, label %137

137:                                              ; preds = %134
  %138 = load %struct.opj_image_comp*, %struct.opj_image_comp** %57, align 8
  %139 = zext i32 %135 to i64
  %140 = and i64 %139, 1
  %141 = icmp eq i32 %135, 1
  br i1 %141, label %169, label %142

142:                                              ; preds = %137
  %143 = sub nsw i64 %139, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i64 [ 0, %142 ], [ %166, %144 ]
  %146 = phi i32 [ 0, %142 ], [ %165, %144 ]
  %147 = phi i32 [ 0, %142 ], [ %163, %144 ]
  %148 = phi i64 [ %143, %142 ], [ %167, %144 ]
  %149 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %138, i64 %145, i32 12
  %150 = load i16, i16* %149, align 8
  %151 = icmp eq i16 %150, 0
  %152 = xor i1 %151, true
  %153 = zext i1 %152 to i32
  %154 = add i32 %147, %153
  %155 = trunc i64 %145 to i32
  %156 = select i1 %151, i32 %146, i32 %155
  %157 = or i64 %145, 1
  %158 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %138, i64 %157, i32 12
  %159 = load i16, i16* %158, align 8
  %160 = icmp eq i16 %159, 0
  %161 = xor i1 %160, true
  %162 = zext i1 %161 to i32
  %163 = add i32 %154, %162
  %164 = trunc i64 %157 to i32
  %165 = select i1 %160, i32 %156, i32 %164
  %166 = add nuw nsw i64 %145, 2
  %167 = add i64 %148, -2
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %144

169:                                              ; preds = %144, %137
  %170 = phi i32 [ undef, %137 ], [ %163, %144 ]
  %171 = phi i32 [ undef, %137 ], [ %165, %144 ]
  %172 = phi i64 [ 0, %137 ], [ %166, %144 ]
  %173 = phi i32 [ 0, %137 ], [ %165, %144 ]
  %174 = phi i32 [ 0, %137 ], [ %163, %144 ]
  %175 = icmp eq i64 %140, 0
  br i1 %175, label %185, label %176

176:                                              ; preds = %169
  %177 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %138, i64 %172, i32 12
  %178 = load i16, i16* %177, align 8
  %179 = icmp eq i16 %178, 0
  %180 = trunc i64 %172 to i32
  %181 = select i1 %179, i32 %173, i32 %180
  %182 = xor i1 %179, true
  %183 = zext i1 %182 to i32
  %184 = add i32 %174, %183
  br label %185

185:                                              ; preds = %169, %176
  %186 = phi i32 [ %170, %169 ], [ %184, %176 ]
  %187 = phi i32 [ %171, %169 ], [ %181, %176 ]
  switch i32 %186, label %206 [
    i32 1, label %188
    i32 0, label %281
  ]

188:                                              ; preds = %185
  %189 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %190 = load i32, i32* %189, align 4
  %191 = add i32 %190, -16
  %192 = icmp ult i32 %191, 3
  br i1 %192, label %195, label %193

193:                                              ; preds = %188
  %194 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.3, i64 0, i64 0)) #3
  br label %281

195:                                              ; preds = %188
  %196 = sext i32 %191 to i64
  %197 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.opj_jp2_setup_encoder, i64 0, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = icmp ugt i32 %135, %198
  br i1 %199, label %202, label %200

200:                                              ; preds = %195
  %201 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.4, i64 0, i64 0)) #3
  br label %281

202:                                              ; preds = %195
  %203 = icmp ult i32 %187, %198
  br i1 %203, label %204, label %208

204:                                              ; preds = %202
  %205 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.5, i64 0, i64 0)) #3
  br label %281

206:                                              ; preds = %185
  %207 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.6, i64 0, i64 0)) #3
  br label %281

208:                                              ; preds = %202
  %209 = tail call i8* @opj_malloc(i64 16) #3
  %210 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %211 = bitcast %struct.opj_jp2_cdef** %210 to i8**
  store i8* %209, i8** %211, align 8
  %212 = icmp eq i8* %209, null
  br i1 %212, label %213, label %215

213:                                              ; preds = %208
  %214 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0)) #3
  br label %287

215:                                              ; preds = %208
  %216 = load i32, i32* %11, align 8
  %217 = zext i32 %216 to i64
  %218 = mul nuw nsw i64 %217, 6
  %219 = tail call i8* @opj_malloc(i64 %218) #3
  %220 = bitcast %struct.opj_jp2_cdef** %210 to i8***
  %221 = load i8**, i8*** %220, align 8
  store i8* %219, i8** %221, align 8
  %222 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %223 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %222, i64 0, i32 0
  %224 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %223, align 8
  %225 = icmp eq %struct.opj_jp2_cdef_info* %224, null
  br i1 %225, label %226, label %228

226:                                              ; preds = %215
  %227 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0)) #3
  br label %287

228:                                              ; preds = %215
  %229 = load i32, i32* %11, align 8
  %230 = trunc i32 %229 to i16
  %231 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %222, i64 0, i32 1
  store i16 %230, i16* %231, align 8
  %232 = zext i32 %198 to i64
  br label %236

233:                                              ; preds = %236
  %234 = load i32, i32* %11, align 8
  %235 = icmp ult i32 %198, %234
  br i1 %235, label %256, label %281

236:                                              ; preds = %236, %228
  %237 = phi i64 [ 0, %228 ], [ %248, %236 ]
  %238 = phi i32 [ 0, %228 ], [ %249, %236 ]
  %239 = trunc i32 %238 to i16
  %240 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %241 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %240, i64 0, i32 0
  %242 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %241, align 8
  %243 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %242, i64 %237, i32 0
  store i16 %239, i16* %243, align 2
  %244 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %245 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %244, i64 0, i32 0
  %246 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %245, align 8
  %247 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %246, i64 %237, i32 1
  store i16 0, i16* %247, align 2
  %248 = add nuw nsw i64 %237, 1
  %249 = add nuw nsw i32 %238, 1
  %250 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %251 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %250, i64 0, i32 0
  %252 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %251, align 8
  %253 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %252, i64 %237, i32 2
  %254 = trunc i64 %248 to i16
  store i16 %254, i16* %253, align 2
  %255 = icmp eq i64 %248, %232
  br i1 %255, label %233, label %236

256:                                              ; preds = %233, %256
  %257 = phi i64 [ %277, %256 ], [ %232, %233 ]
  %258 = load %struct.opj_image_comp*, %struct.opj_image_comp** %57, align 8
  %259 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %258, i64 %257, i32 12
  %260 = load i16, i16* %259, align 8
  %261 = icmp eq i16 %260, 0
  %262 = trunc i64 %257 to i16
  %263 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %264 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %263, i64 0, i32 0
  %265 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %264, align 8
  %266 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %265, i64 %257, i32 0
  store i16 %262, i16* %266, align 2
  %267 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %268 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %267, i64 0, i32 0
  %269 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %268, align 8
  %270 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %269, i64 %257, i32 1
  %271 = select i1 %261, i16 -1, i16 1
  %272 = sext i1 %261 to i16
  store i16 %271, i16* %270, align 2
  %273 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %210, align 8
  %274 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %273, i64 0, i32 0
  %275 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %274, align 8
  %276 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %275, i64 %257, i32 2
  store i16 %272, i16* %276, align 2
  %277 = add nuw nsw i64 %257, 1
  %278 = load i32, i32* %11, align 8
  %279 = zext i32 %278 to i64
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %256, label %281

281:                                              ; preds = %256, %134, %233, %185, %206, %204, %200, %193
  %282 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 13
  store i32 0, i32* %282, align 8
  %283 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  store i32 0, i32* %283, align 8
  %284 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 56
  %285 = load i32, i32* %284, align 4
  %286 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 21
  store i32 %285, i32* %286, align 8
  br label %287

287:                                              ; preds = %17, %4, %281, %226, %213, %42, %30, %15
  %288 = phi i32 [ 0, %15 ], [ 1, %281 ], [ 0, %226 ], [ 0, %213 ], [ 0, %42 ], [ 0, %30 ], [ 0, %4 ], [ 0, %17 ]
  ret i32 %288
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @opj_j2k_setup_encoder(%struct.opj_j2k*, %struct.opj_cparameters*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #1

declare i8* @opj_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_encode(%struct.opj_jp2* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8
  %6 = tail call i32 @opj_j2k_encode(%struct.opj_j2k* %5, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #3
  ret i32 %6
}

declare i32 @opj_j2k_encode(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_end_decompress(%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  %5 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %6 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %5, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_read_header_procedure to void ()*), %struct.opj_event_mgr* %2) #3
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %36, label %8

8:                                                ; preds = %3
  %9 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %10 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %9) #3
  %11 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %9) #3
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %9) #3
  br label %32

14:                                               ; preds = %8
  %15 = bitcast void ()** %11 to i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %16

16:                                               ; preds = %25, %14
  %17 = phi i32 [ %29, %25 ], [ 0, %14 ]
  %18 = phi i32 [ %27, %25 ], [ 1, %14 ]
  %19 = phi i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %28, %25 ], [ %15, %14 ]
  %20 = icmp eq i32 %18, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = load i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %19, align 8
  %23 = tail call i32 %22(%struct.opj_jp2* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #3
  %24 = icmp ne i32 %23, 0
  br label %25

25:                                               ; preds = %21, %16
  %26 = phi i1 [ false, %16 ], [ %24, %21 ]
  %27 = zext i1 %26 to i32
  %28 = getelementptr inbounds i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %19, i64 1
  %29 = add nuw i32 %17, 1
  %30 = icmp eq i32 %29, %10
  br i1 %30, label %31, label %16

31:                                               ; preds = %25
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %9) #3
  br i1 %26, label %32, label %36

32:                                               ; preds = %31, %13
  %33 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %34 = load %struct.opj_j2k*, %struct.opj_j2k** %33, align 8
  %35 = tail call i32 @opj_j2k_end_decompress(%struct.opj_j2k* %34, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #3
  br label %36

36:                                               ; preds = %31, %3, %32
  %37 = phi i32 [ %35, %32 ], [ 0, %3 ], [ 0, %31 ]
  ret i32 %37
}

declare i32 @opj_j2k_end_decompress(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_end_compress(%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  %5 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %6 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %5, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_write_jp2c to void ()*), %struct.opj_event_mgr* %2) #3
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %37, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %10 = load %struct.opj_j2k*, %struct.opj_j2k** %9, align 8
  %11 = tail call i32 @opj_j2k_end_compress(%struct.opj_j2k* %10, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %8
  %14 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %15 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %14) #3
  %16 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %14) #3
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %13
  %19 = bitcast void ()** %16 to i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %20

20:                                               ; preds = %29, %18
  %21 = phi i32 [ %33, %29 ], [ 0, %18 ]
  %22 = phi i32 [ %31, %29 ], [ 1, %18 ]
  %23 = phi i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %32, %29 ], [ %19, %18 ]
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = load i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %23, align 8
  %27 = tail call i32 %26(%struct.opj_jp2* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #3
  %28 = icmp ne i32 %27, 0
  br label %29

29:                                               ; preds = %25, %20
  %30 = phi i1 [ false, %20 ], [ %28, %25 ]
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %23, i64 1
  %33 = add nuw i32 %21, 1
  %34 = icmp eq i32 %33, %15
  br i1 %34, label %35, label %20

35:                                               ; preds = %29, %13
  %36 = phi i32 [ 1, %13 ], [ %31, %29 ]
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %14) #3
  br label %37

37:                                               ; preds = %8, %3, %35
  %38 = phi i32 [ %36, %35 ], [ 0, %3 ], [ 0, %8 ]
  ret i32 %38
}

declare i32 @opj_j2k_end_compress(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_start_compress(%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %6 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %5, align 8
  %7 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %6, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_default_validation to void ()*), %struct.opj_event_mgr* %3) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %86, label %9

9:                                                ; preds = %4
  %10 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %5, align 8
  %11 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %10) #3
  %12 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %10) #3
  %13 = icmp eq i32 %11, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %10) #3
  br label %33

15:                                               ; preds = %9
  %16 = bitcast void ()** %12 to i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %17

17:                                               ; preds = %26, %15
  %18 = phi i32 [ %30, %26 ], [ 0, %15 ]
  %19 = phi i32 [ %28, %26 ], [ 1, %15 ]
  %20 = phi i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %29, %26 ], [ %16, %15 ]
  %21 = icmp eq i32 %19, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %17
  %23 = load i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %20, align 8
  %24 = tail call i32 %23(%struct.opj_jp2* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %3) #3
  %25 = icmp ne i32 %24, 0
  br label %26

26:                                               ; preds = %22, %17
  %27 = phi i1 [ false, %17 ], [ %25, %22 ]
  %28 = zext i1 %27 to i32
  %29 = getelementptr inbounds i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %20, i64 1
  %30 = add nuw i32 %18, 1
  %31 = icmp eq i32 %30, %11
  br i1 %31, label %32, label %17

32:                                               ; preds = %26
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %10) #3
  br i1 %27, label %33, label %86

33:                                               ; preds = %32, %14
  %34 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  %35 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %34, align 8
  %36 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %35, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_write_jp to void ()*), %struct.opj_event_mgr* %3) #3
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %86, label %38

38:                                               ; preds = %33
  %39 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %34, align 8
  %40 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %39, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_write_ftyp to void ()*), %struct.opj_event_mgr* %3) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %86, label %42

42:                                               ; preds = %38
  %43 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %34, align 8
  %44 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %43, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_write_jp2h to void ()*), %struct.opj_event_mgr* %3) #3
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %86, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 21
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %34, align 8
  %52 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %51, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jpip_skip_iptr to void ()*), %struct.opj_event_mgr* %3) #3
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %86, label %54

54:                                               ; preds = %46, %50
  %55 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %34, align 8
  %56 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %55, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_skip_jp2c to void ()*), %struct.opj_event_mgr* %3) #3
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %86, label %58

58:                                               ; preds = %54
  %59 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %34, align 8
  %60 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %59) #3
  %61 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %59) #3
  %62 = icmp eq i32 %60, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %58
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %59) #3
  br label %82

64:                                               ; preds = %58
  %65 = bitcast void ()** %61 to i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %66

66:                                               ; preds = %75, %64
  %67 = phi i32 [ %79, %75 ], [ 0, %64 ]
  %68 = phi i32 [ %77, %75 ], [ 1, %64 ]
  %69 = phi i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %78, %75 ], [ %65, %64 ]
  %70 = icmp eq i32 %68, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %66
  %72 = load i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %69, align 8
  %73 = tail call i32 %72(%struct.opj_jp2* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %3) #3
  %74 = icmp ne i32 %73, 0
  br label %75

75:                                               ; preds = %71, %66
  %76 = phi i1 [ false, %66 ], [ %74, %71 ]
  %77 = zext i1 %76 to i32
  %78 = getelementptr inbounds i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %69, i64 1
  %79 = add nuw i32 %67, 1
  %80 = icmp eq i32 %79, %60
  br i1 %80, label %81, label %66

81:                                               ; preds = %75
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %59) #3
  br i1 %76, label %82, label %86

82:                                               ; preds = %81, %63
  %83 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %84 = load %struct.opj_j2k*, %struct.opj_j2k** %83, align 8
  %85 = tail call i32 @opj_j2k_start_compress(%struct.opj_j2k* %84, %struct.opj_stream_private* %1, %struct.opj_image* %2, %struct.opj_event_mgr* %3) #3
  br label %86

86:                                               ; preds = %81, %32, %50, %42, %38, %33, %54, %4, %82
  %87 = phi i32 [ %85, %82 ], [ 0, %4 ], [ 0, %32 ], [ 0, %54 ], [ 0, %81 ], [ 0, %33 ], [ 0, %38 ], [ 0, %42 ], [ 0, %50 ]
  ret i32 %87
}

declare i32 @opj_j2k_start_compress(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_read_header(%struct.opj_stream_private*, %struct.opj_jp2*, %struct.opj_image**, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %1, i64 0, i32 2
  %6 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %5, align 8
  %7 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %6, void ()* bitcast (i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_jp2_read_header_procedure to void ()*), %struct.opj_event_mgr* %3) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %74, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %1, i64 0, i32 1
  %11 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %10, align 8
  %12 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %11) #3
  %13 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %11) #3
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %11) #3
  br label %34

16:                                               ; preds = %9
  %17 = bitcast void ()** %13 to i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %18

18:                                               ; preds = %27, %16
  %19 = phi i32 [ %31, %27 ], [ 0, %16 ]
  %20 = phi i32 [ %29, %27 ], [ 1, %16 ]
  %21 = phi i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %30, %27 ], [ %17, %16 ]
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %18
  %24 = load i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %21, align 8
  %25 = tail call i32 %24(%struct.opj_jp2* %1, %struct.opj_stream_private* %0, %struct.opj_event_mgr* %3) #3
  %26 = icmp ne i32 %25, 0
  br label %27

27:                                               ; preds = %23, %18
  %28 = phi i1 [ false, %18 ], [ %26, %23 ]
  %29 = zext i1 %28 to i32
  %30 = getelementptr inbounds i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %21, i64 1
  %31 = add nuw i32 %19, 1
  %32 = icmp eq i32 %31, %12
  br i1 %32, label %33, label %18

33:                                               ; preds = %27
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %11) #3
  br i1 %28, label %34, label %74

34:                                               ; preds = %33, %15
  %35 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %5, align 8
  %36 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %35) #3
  %37 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %35) #3
  %38 = icmp eq i32 %36, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %35) #3
  br label %58

40:                                               ; preds = %34
  %41 = bitcast void ()** %37 to i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %42

42:                                               ; preds = %51, %40
  %43 = phi i32 [ %55, %51 ], [ 0, %40 ]
  %44 = phi i32 [ %53, %51 ], [ 1, %40 ]
  %45 = phi i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %54, %51 ], [ %41, %40 ]
  %46 = icmp eq i32 %44, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %42
  %48 = load i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %45, align 8
  %49 = tail call i32 %48(%struct.opj_jp2* %1, %struct.opj_stream_private* %0, %struct.opj_event_mgr* %3) #3
  %50 = icmp ne i32 %49, 0
  br label %51

51:                                               ; preds = %47, %42
  %52 = phi i1 [ false, %42 ], [ %50, %47 ]
  %53 = zext i1 %52 to i32
  %54 = getelementptr inbounds i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %45, i64 1
  %55 = add nuw i32 %43, 1
  %56 = icmp eq i32 %55, %36
  br i1 %56, label %57, label %42

57:                                               ; preds = %51
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %35) #3
  br i1 %52, label %58, label %74

58:                                               ; preds = %57, %39
  %59 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %1, i64 0, i32 26
  %60 = load i8, i8* %59, align 4
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0)) #3
  br label %74

64:                                               ; preds = %58
  %65 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %1, i64 0, i32 27
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %64
  %69 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #3
  br label %74

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %1, i64 0, i32 0
  %72 = load %struct.opj_j2k*, %struct.opj_j2k** %71, align 8
  %73 = tail call i32 @opj_j2k_read_header(%struct.opj_stream_private* %0, %struct.opj_j2k* %72, %struct.opj_image** %2, %struct.opj_event_mgr* %3) #3
  br label %74

74:                                               ; preds = %57, %33, %4, %70, %68, %62
  %75 = phi i32 [ 0, %62 ], [ 0, %68 ], [ %73, %70 ], [ 0, %4 ], [ 0, %33 ], [ 0, %57 ]
  ret i32 %75
}

declare i32 @opj_j2k_read_header(%struct.opj_stream_private*, %struct.opj_j2k*, %struct.opj_image**, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_read_tile_header(%struct.opj_jp2* nocapture readonly, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %12 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %13 = load %struct.opj_j2k*, %struct.opj_j2k** %12, align 8
  %14 = tail call i32 @opj_j2k_read_tile_header(%struct.opj_j2k* %13, i32* %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6, i32* %7, i32* %8, %struct.opj_stream_private* %9, %struct.opj_event_mgr* %10) #3
  ret i32 %14
}

declare i32 @opj_j2k_read_tile_header(%struct.opj_j2k*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_write_tile(%struct.opj_jp2* nocapture readonly, i32, i8*, i32, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %8 = load %struct.opj_j2k*, %struct.opj_j2k** %7, align 8
  %9 = tail call i32 @opj_j2k_write_tile(%struct.opj_j2k* %8, i32 %1, i8* %2, i32 %3, %struct.opj_stream_private* %4, %struct.opj_event_mgr* %5) #3
  ret i32 %9
}

declare i32 @opj_j2k_write_tile(%struct.opj_j2k*, i32, i8*, i32, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_decode_tile(%struct.opj_jp2* nocapture readonly, i32, i8*, i32, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %8 = load %struct.opj_j2k*, %struct.opj_j2k** %7, align 8
  %9 = tail call i32 @opj_j2k_decode_tile(%struct.opj_j2k* %8, i32 %1, i8* %2, i32 %3, %struct.opj_stream_private* %4, %struct.opj_event_mgr* %5) #3
  ret i32 %9
}

declare i32 @opj_j2k_decode_tile(%struct.opj_j2k*, i32, i8*, i32, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_jp2_destroy(%struct.opj_jp2*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_jp2* %0, null
  br i1 %2, label %97, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8
  tail call void @opj_j2k_destroy(%struct.opj_j2k* %5) #3
  store %struct.opj_j2k* null, %struct.opj_j2k** %4, align 8
  %6 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  %7 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %6, align 8
  %8 = icmp eq %struct.opj_jp2_comps* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = bitcast %struct.opj_jp2_comps* %7 to i8*
  tail call void @opj_free(i8* nonnull %10) #3
  store %struct.opj_jp2_comps* null, %struct.opj_jp2_comps** %6, align 8
  br label %11

11:                                               ; preds = %3, %9
  %12 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = bitcast i32* %13 to i8*
  tail call void @opj_free(i8* nonnull %16) #3
  store i32* null, i32** %12, align 8
  br label %17

17:                                               ; preds = %11, %15
  %18 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  tail call void @opj_free(i8* nonnull %19) #3
  store i8* null, i8** %18, align 8
  br label %22

22:                                               ; preds = %17, %21
  %23 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %24 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %23, align 8
  %25 = icmp eq %struct.opj_jp2_cdef* %24, null
  br i1 %25, label %39, label %26

26:                                               ; preds = %22
  %27 = bitcast %struct.opj_jp2_cdef* %24 to i8*
  %28 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %24, i64 0, i32 0
  %29 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %28, align 8
  %30 = icmp eq %struct.opj_jp2_cdef_info* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %26
  %32 = bitcast %struct.opj_jp2_cdef_info* %29 to i8*
  tail call void @opj_free(i8* nonnull %32) #3
  %33 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %23, align 8
  %34 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %33, i64 0, i32 0
  store %struct.opj_jp2_cdef_info* null, %struct.opj_jp2_cdef_info** %34, align 8
  %35 = bitcast %struct.opj_jp2_cdef** %23 to i8**
  %36 = load i8*, i8** %35, align 8
  br label %37

37:                                               ; preds = %26, %31
  %38 = phi i8* [ %36, %31 ], [ %27, %26 ]
  tail call void @opj_free(i8* %38) #3
  store %struct.opj_jp2_cdef* null, %struct.opj_jp2_cdef** %23, align 8
  br label %39

39:                                               ; preds = %22, %37
  %40 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 3
  %41 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  %42 = icmp eq %struct.opj_jp2_pclr* %41, null
  br i1 %42, label %85, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %41, i64 0, i32 3
  %45 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %44, align 8
  %46 = icmp eq %struct.opj_jp2_cmap_comp* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %43
  %48 = bitcast %struct.opj_jp2_cmap_comp* %45 to i8*
  tail call void @opj_free(i8* nonnull %48) #3
  %49 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  %50 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %49, i64 0, i32 3
  store %struct.opj_jp2_cmap_comp* null, %struct.opj_jp2_cmap_comp** %50, align 8
  %51 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  br label %52

52:                                               ; preds = %43, %47
  %53 = phi %struct.opj_jp2_pclr* [ %41, %43 ], [ %51, %47 ]
  %54 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %53, i64 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %52
  tail call void @opj_free(i8* nonnull %55) #3
  %58 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  %59 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %58, i64 0, i32 1
  store i8* null, i8** %59, align 8
  %60 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  br label %61

61:                                               ; preds = %52, %57
  %62 = phi %struct.opj_jp2_pclr* [ %53, %52 ], [ %60, %57 ]
  %63 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %62, i64 0, i32 2
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %61
  tail call void @opj_free(i8* nonnull %64) #3
  %67 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  %68 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %67, i64 0, i32 2
  store i8* null, i8** %68, align 8
  %69 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  br label %70

70:                                               ; preds = %61, %66
  %71 = phi %struct.opj_jp2_pclr* [ %62, %61 ], [ %69, %66 ]
  %72 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %71, i64 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = icmp eq i32* %73, null
  br i1 %74, label %75, label %77

75:                                               ; preds = %70
  %76 = bitcast %struct.opj_jp2_pclr* %71 to i8*
  br label %83

77:                                               ; preds = %70
  %78 = bitcast i32* %73 to i8*
  tail call void @opj_free(i8* nonnull %78) #3
  %79 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %40, align 8
  %80 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %79, i64 0, i32 0
  store i32* null, i32** %80, align 8
  %81 = bitcast %struct.opj_jp2_pclr** %40 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %83

83:                                               ; preds = %75, %77
  %84 = phi i8* [ %76, %75 ], [ %82, %77 ]
  tail call void @opj_free(i8* %84) #3
  store %struct.opj_jp2_pclr* null, %struct.opj_jp2_pclr** %40, align 8
  br label %85

85:                                               ; preds = %39, %83
  %86 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %87 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %86, align 8
  %88 = icmp eq %struct.opj_procedure_list* %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %85
  tail call void @opj_procedure_list_destroy(%struct.opj_procedure_list* nonnull %87) #3
  store %struct.opj_procedure_list* null, %struct.opj_procedure_list** %86, align 8
  br label %90

90:                                               ; preds = %85, %89
  %91 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  %92 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %91, align 8
  %93 = icmp eq %struct.opj_procedure_list* %92, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %90
  tail call void @opj_procedure_list_destroy(%struct.opj_procedure_list* nonnull %92) #3
  store %struct.opj_procedure_list* null, %struct.opj_procedure_list** %91, align 8
  br label %95

95:                                               ; preds = %90, %94
  %96 = bitcast %struct.opj_jp2* %0 to i8*
  tail call void @opj_free(i8* nonnull %96) #3
  br label %97

97:                                               ; preds = %1, %95
  ret void
}

declare void @opj_j2k_destroy(%struct.opj_j2k*) local_unnamed_addr #1

declare void @opj_free(i8*) local_unnamed_addr #1

declare void @opj_procedure_list_destroy(%struct.opj_procedure_list*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_set_decoded_components(%struct.opj_jp2* nocapture readonly, i32, i32*, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %6 = load %struct.opj_j2k*, %struct.opj_j2k** %5, align 8
  %7 = tail call i32 @opj_j2k_set_decoded_components(%struct.opj_j2k* %6, i32 %1, i32* %2, %struct.opj_event_mgr* %3) #3
  ret i32 %7
}

declare i32 @opj_j2k_set_decoded_components(%struct.opj_j2k*, i32, i32*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_set_decode_area(%struct.opj_jp2* nocapture readonly, %struct.opj_image*, i32, i32, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %9 = load %struct.opj_j2k*, %struct.opj_j2k** %8, align 8
  %10 = tail call i32 @opj_j2k_set_decode_area(%struct.opj_j2k* %9, %struct.opj_image* %1, i32 %2, i32 %3, i32 %4, i32 %5, %struct.opj_event_mgr* %6) #3
  ret i32 %10
}

declare i32 @opj_j2k_set_decode_area(%struct.opj_j2k*, %struct.opj_image*, i32, i32, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_get_tile(%struct.opj_jp2* nocapture, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*, i32) local_unnamed_addr #0 {
  %6 = icmp eq %struct.opj_image* %2, null
  br i1 %6, label %86, label %7

7:                                                ; preds = %5
  %8 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.10, i64 0, i64 0)) #3
  %9 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %10 = load %struct.opj_j2k*, %struct.opj_j2k** %9, align 8
  %11 = tail call i32 @opj_j2k_get_tile(%struct.opj_j2k* %10, %struct.opj_stream_private* %1, %struct.opj_image* nonnull %2, %struct.opj_event_mgr* %3, i32 %4) #3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #3
  br label %86

15:                                               ; preds = %7
  %16 = load %struct.opj_j2k*, %struct.opj_j2k** %9, align 8
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %16, i64 0, i32 1, i32 0, i32 12
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %86

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24
  %22 = tail call fastcc i32 @opj_jp2_check_color(%struct.opj_image* nonnull %2, %struct.opj_jp2_color* %21, %struct.opj_event_mgr* %3)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %86, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %26 = load i32, i32* %25, align 4
  switch i32 %26, label %35 [
    i32 16, label %27
    i32 17, label %29
    i32 18, label %31
    i32 24, label %33
  ]

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 1, i32* %28, align 4
  br label %40

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 2, i32* %30, align 4
  br label %40

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 3, i32* %32, align 4
  br label %40

33:                                               ; preds = %24
  %34 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  store i32 4, i32* %34, align 4
  br label %40

35:                                               ; preds = %24
  %36 = icmp eq i32 %26, 12
  %37 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  br i1 %36, label %38, label %39

38:                                               ; preds = %35
  store i32 5, i32* %37, align 4
  br label %40

39:                                               ; preds = %35
  store i32 -1, i32* %37, align 4
  br label %40

40:                                               ; preds = %29, %33, %39, %38, %31, %27
  %41 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 3
  %42 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %41, align 8
  %43 = icmp eq %struct.opj_jp2_pclr* %42, null
  br i1 %43, label %72, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %42, i64 0, i32 3
  %46 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %45, align 8
  %47 = icmp eq %struct.opj_jp2_cmap_comp* %46, null
  br i1 %47, label %48, label %69

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %42, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  tail call void @opj_free(i8* %50) #3
  %51 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %41, align 8
  %52 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %51, i64 0, i32 2
  %53 = load i8*, i8** %52, align 8
  tail call void @opj_free(i8* %53) #3
  %54 = bitcast %struct.opj_jp2_pclr** %41 to i8***
  %55 = load i8**, i8*** %54, align 8
  %56 = load i8*, i8** %55, align 8
  tail call void @opj_free(i8* %56) #3
  %57 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %41, align 8
  %58 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %57, i64 0, i32 3
  %59 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %58, align 8
  %60 = icmp eq %struct.opj_jp2_cmap_comp* %59, null
  br i1 %60, label %61, label %63

61:                                               ; preds = %48
  %62 = bitcast %struct.opj_jp2_pclr* %57 to i8*
  br label %67

63:                                               ; preds = %48
  %64 = bitcast %struct.opj_jp2_cmap_comp* %59 to i8*
  tail call void @opj_free(i8* nonnull %64) #3
  %65 = bitcast %struct.opj_jp2_pclr** %41 to i8**
  %66 = load i8*, i8** %65, align 8
  br label %67

67:                                               ; preds = %61, %63
  %68 = phi i8* [ %62, %61 ], [ %66, %63 ]
  tail call void @opj_free(i8* %68) #3
  store %struct.opj_jp2_pclr* null, %struct.opj_jp2_pclr** %41, align 8
  br label %72

69:                                               ; preds = %44
  %70 = tail call fastcc i32 @opj_jp2_apply_pclr(%struct.opj_image* nonnull %2, %struct.opj_jp2_color* %21, %struct.opj_event_mgr* %3)
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %86, label %72

72:                                               ; preds = %69, %40, %67
  %73 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %74 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %73, align 8
  %75 = icmp eq %struct.opj_jp2_cdef* %74, null
  br i1 %75, label %77, label %76

76:                                               ; preds = %72
  tail call fastcc void @opj_jp2_apply_cdef(%struct.opj_image* nonnull %2, %struct.opj_jp2_color* %21, %struct.opj_event_mgr* %3)
  br label %77

77:                                               ; preds = %72, %76
  %78 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %21, i64 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %86, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 7
  store i8* %79, i8** %82, align 8
  %83 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 1
  %84 = load i32, i32* %83, align 8
  %85 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 8
  store i32 %84, i32* %85, align 8
  store i8* null, i8** %78, align 8
  br label %86

86:                                               ; preds = %81, %77, %69, %20, %15, %5, %13
  %87 = phi i32 [ 0, %13 ], [ 0, %5 ], [ 1, %15 ], [ 0, %20 ], [ 0, %69 ], [ 1, %77 ], [ 1, %81 ]
  ret i32 %87
}

declare i32 @opj_j2k_get_tile(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_jp2* @opj_jp2_create(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @opj_calloc(i64 1, i64 176) #3
  %3 = bitcast i8* %2 to %struct.opj_jp2*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %33, label %5

5:                                                ; preds = %1
  %6 = icmp eq i32 %0, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = tail call %struct.opj_j2k* @opj_j2k_create_compress() #3
  br label %11

9:                                                ; preds = %5
  %10 = tail call %struct.opj_j2k* @opj_j2k_create_decompress() #3
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi %struct.opj_j2k* [ %10, %9 ], [ %8, %7 ]
  %13 = bitcast i8* %2 to %struct.opj_j2k**
  store %struct.opj_j2k* %12, %struct.opj_j2k** %13, align 8
  %14 = icmp eq %struct.opj_j2k* %12, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  tail call void @opj_jp2_destroy(%struct.opj_jp2* nonnull %3)
  br label %33

16:                                               ; preds = %11
  %17 = getelementptr inbounds i8, i8* %2, i64 128
  %18 = bitcast i8* %17 to i8**
  store i8* null, i8** %18, align 8
  %19 = getelementptr inbounds i8, i8* %2, i64 136
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %2, i64 144
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 17, i1 false)
  %22 = tail call %struct.opj_procedure_list* @opj_procedure_list_create() #3
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to %struct.opj_procedure_list**
  store %struct.opj_procedure_list* %22, %struct.opj_procedure_list** %24, align 8
  %25 = icmp eq %struct.opj_procedure_list* %22, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %16
  tail call void @opj_jp2_destroy(%struct.opj_jp2* nonnull %3)
  br label %33

27:                                               ; preds = %16
  %28 = tail call %struct.opj_procedure_list* @opj_procedure_list_create() #3
  %29 = getelementptr inbounds i8, i8* %2, i64 16
  %30 = bitcast i8* %29 to %struct.opj_procedure_list**
  store %struct.opj_procedure_list* %28, %struct.opj_procedure_list** %30, align 8
  %31 = icmp eq %struct.opj_procedure_list* %28, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  tail call void @opj_jp2_destroy(%struct.opj_jp2* nonnull %3)
  br label %33

33:                                               ; preds = %1, %27, %32, %26, %15
  %34 = phi %struct.opj_jp2* [ null, %15 ], [ null, %32 ], [ null, %26 ], [ %3, %27 ], [ %3, %1 ]
  ret %struct.opj_jp2* %34
}

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #1

declare %struct.opj_j2k* @opj_j2k_create_compress() local_unnamed_addr #1

declare %struct.opj_j2k* @opj_j2k_create_decompress() local_unnamed_addr #1

declare %struct.opj_procedure_list* @opj_procedure_list_create() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @jp2_dump(%struct.opj_jp2* nocapture readonly, i32, %struct._IO_FILE*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8
  tail call void @j2k_dump(%struct.opj_j2k* %5, i32 %1, %struct._IO_FILE* %2) #3
  ret void
}

declare void @j2k_dump(%struct.opj_j2k*, i32, %struct._IO_FILE*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_codestream_index* @jp2_get_cstr_index(%struct.opj_jp2* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %3 = load %struct.opj_j2k*, %struct.opj_j2k** %2, align 8
  %4 = tail call %struct.opj_codestream_index* @j2k_get_cstr_index(%struct.opj_j2k* %3) #3
  ret %struct.opj_codestream_index* %4
}

declare %struct.opj_codestream_index* @j2k_get_cstr_index(%struct.opj_j2k*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_codestream_info_v2* @jp2_get_cstr_info(%struct.opj_jp2* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %3 = load %struct.opj_j2k*, %struct.opj_j2k** %2, align 8
  %4 = tail call %struct.opj_codestream_info_v2* @j2k_get_cstr_info(%struct.opj_j2k* %3) #3
  ret %struct.opj_codestream_info_v2* %4
}

declare %struct.opj_codestream_info_v2* @j2k_get_cstr_info(%struct.opj_j2k*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_set_decoded_resolution_factor(%struct.opj_jp2* nocapture readonly, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8
  %6 = tail call i32 @opj_j2k_set_decoded_resolution_factor(%struct.opj_j2k* %5, i32 %1, %struct.opj_event_mgr* %2) #3
  ret i32 %6
}

declare i32 @opj_j2k_set_decoded_resolution_factor(%struct.opj_j2k*, i32, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_jp2_encoder_set_extra_options(%struct.opj_jp2* nocapture readonly, i8**, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8
  %6 = tail call i32 @opj_j2k_encoder_set_extra_options(%struct.opj_j2k* %5, i8** %1, %struct.opj_event_mgr* %2) #3
  ret i32 %6
}

declare i32 @opj_j2k_encoder_set_extra_options(%struct.opj_j2k*, i8**, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare hidden i8* @opj_image_data_alloc(i64) local_unnamed_addr #1

declare hidden void @opj_image_data_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list*, void ()*, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_write_jp2c(%struct.opj_jp2* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to [8 x i8]*
  %6 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #3
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  store i64 -6148914691236517206, i64* %4, align 8
  %8 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #3
  %9 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 19
  %10 = load i64, i64* %9, align 8
  %11 = sub nsw i64 %8, %10
  %12 = trunc i64 %11 to i32
  call void @opj_write_bytes_LE(i8* nonnull %6, i32 %12, i32 4) #3
  call void @opj_write_bytes_LE(i8* %7, i32 1785737827, i32 4) #3
  %13 = load i64, i64* %9, align 8
  %14 = call i32 @opj_stream_seek(%struct.opj_stream_private* %1, i64 %13, %struct.opj_event_mgr* %2) #3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %3
  %17 = call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* nonnull %6, i64 8, %struct.opj_event_mgr* %2) #3
  %18 = icmp eq i64 %17, 8
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = call i32 @opj_stream_seek(%struct.opj_stream_private* %1, i64 %8, %struct.opj_event_mgr* %2) #3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %19, %16, %3
  %23 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i64 0, i64 0)) #3
  br label %24

24:                                               ; preds = %22, %19
  %25 = phi i32 [ 1, %19 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #3
  ret i32 %25
}

declare i64 @opj_stream_tell(%struct.opj_stream_private*) local_unnamed_addr #1

declare void @opj_write_bytes_LE(i8*, i32, i32) local_unnamed_addr #1

declare i32 @opj_stream_seek(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #1

declare i64 @opj_stream_write_data(%struct.opj_stream_private*, i8*, i64, %struct.opj_event_mgr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_header_procedure(%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.opj_jp2_box, align 4
  %7 = bitcast %struct.opj_jp2_box* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.opj_jp2_box, %struct.opj_jp2_box* %6, i64 0, i32 0
  store i32 -1431655766, i32* %8, align 4
  %9 = getelementptr inbounds %struct.opj_jp2_box, %struct.opj_jp2_box* %6, i64 0, i32 1
  store i32 -1431655766, i32* %9, align 4
  %10 = getelementptr inbounds %struct.opj_jp2_box, %struct.opj_jp2_box* %6, i64 0, i32 2
  store i32 -1431655766, i32* %10, align 4
  %11 = tail call i8* @opj_calloc(i64 1, i64 1024) #3
  %12 = icmp eq i8* %11, null
  br i1 %12, label %22, label %13

13:                                               ; preds = %3
  %14 = bitcast i64* %4 to [8 x i8]*
  %15 = bitcast i64* %4 to i8*
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  %17 = bitcast i32* %5 to i8*
  %18 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 22
  br label %19

19:                                               ; preds = %148, %13
  %20 = phi i32 [ %141, %148 ], [ 1024, %13 ]
  %21 = phi i8* [ %142, %148 ], [ %11, %13 ]
  br label %174

22:                                               ; preds = %3
  %23 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.26, i64 0, i64 0)) #3
  br label %176

24:                                               ; preds = %174, %99
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #3
  store i64 -6148914691236517206, i64* %4, align 8
  %25 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* nonnull %15, i64 8, %struct.opj_event_mgr* %2) #3
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, 8
  br i1 %27, label %28, label %175

28:                                               ; preds = %24
  call void @opj_read_bytes_LE(i8* nonnull %15, i32* nonnull %8, i32 4) #3
  call void @opj_read_bytes_LE(i8* %16, i32* %9, i32 4) #3
  %29 = load i32, i32* %8, align 4
  switch i32 %29, label %49 [
    i32 0, label %30
    i32 1, label %38
  ]

30:                                               ; preds = %28
  %31 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %1) #3
  %32 = icmp sgt i64 %31, 4294967287
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.38, i64 0, i64 0)) #3
  br label %175

35:                                               ; preds = %30
  %36 = trunc i64 %31 to i32
  %37 = add i32 %36, 8
  store i32 %37, i32* %8, align 4
  br label %49

38:                                               ; preds = %28
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #3
  store i32 -1431655766, i32* %5, align 4
  %39 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* nonnull %15, i64 8, %struct.opj_event_mgr* %2) #3
  %40 = trunc i64 %39 to i32
  %41 = icmp eq i32 %40, 8
  br i1 %41, label %42, label %48

42:                                               ; preds = %38
  call void @opj_read_bytes_LE(i8* nonnull %15, i32* nonnull %5, i32 4) #3
  %43 = load i32, i32* %5, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %42
  %46 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.38, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #3
  br label %175

47:                                               ; preds = %42
  call void @opj_read_bytes_LE(i8* %16, i32* nonnull %8, i32 4) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #3
  br label %49

48:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #3
  br label %175

49:                                               ; preds = %47, %35, %28
  %50 = phi i32 [ 8, %28 ], [ 16, %47 ], [ 8, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #3
  %51 = load i32, i32* %9, align 4
  %52 = icmp eq i32 %51, 1785737827
  br i1 %52, label %53, label %61

53:                                               ; preds = %49
  %54 = load i32, i32* %18, align 4
  %55 = and i32 %54, 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %53
  %58 = or i32 %54, 8
  store i32 %58, i32* %18, align 4
  call void @opj_free(i8* %21) #3
  br label %176

59:                                               ; preds = %53
  %60 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

61:                                               ; preds = %49
  %62 = load i32, i32* %8, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %61
  %65 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.28, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

66:                                               ; preds = %61
  %67 = icmp ult i32 %62, %50
  br i1 %67, label %68, label %70

68:                                               ; preds = %66
  %69 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i64 0, i64 0), i32 %62, i32 %51) #3
  call void @opj_free(i8* %21) #3
  br label %176

70:                                               ; preds = %66
  switch i32 %51, label %89 [
    i32 1783636000, label %94
    i32 1718909296, label %95
    i32 1785737832, label %96
    i32 1768449138, label %76
    i32 1668246642, label %71
    i32 1651532643, label %72
    i32 1885564018, label %73
    i32 1668112752, label %74
    i32 1667523942, label %75
  ]

71:                                               ; preds = %70
  br label %76

72:                                               ; preds = %70
  br label %76

73:                                               ; preds = %70
  br label %76

74:                                               ; preds = %70
  br label %76

75:                                               ; preds = %70
  br label %76

76:                                               ; preds = %70, %71, %72, %73, %74, %75
  %77 = phi %struct.opj_jp2_header_handler* [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 5), %75 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 4), %74 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 3), %73 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 2), %72 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 1), %71 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 0), %70 ]
  %78 = sub i32 %62, %50
  %79 = lshr i32 %51, 24
  %80 = lshr i32 %51, 16
  %81 = and i32 %80, 255
  %82 = lshr i32 %51, 8
  %83 = and i32 %82, 255
  %84 = and i32 %51, 255
  %85 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0), i32 %79, i32 %81, i32 %83, i32 %84) #3
  %86 = load i32, i32* %18, align 4
  %87 = and i32 %86, 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %99, label %115

89:                                               ; preds = %70
  %90 = sub i32 %62, %50
  %91 = load i32, i32* %18, align 4
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %154, label %156

94:                                               ; preds = %70
  br label %96

95:                                               ; preds = %70
  br label %96

96:                                               ; preds = %70, %95, %94
  %97 = phi %struct.opj_jp2_header_handler* [ getelementptr inbounds ([3 x %struct.opj_jp2_header_handler], [3 x %struct.opj_jp2_header_handler]* @jp2_header, i64 0, i64 0), %94 ], [ getelementptr inbounds ([3 x %struct.opj_jp2_header_handler], [3 x %struct.opj_jp2_header_handler]* @jp2_header, i64 0, i64 1), %95 ], [ getelementptr inbounds ([3 x %struct.opj_jp2_header_handler], [3 x %struct.opj_jp2_header_handler]* @jp2_header, i64 0, i64 2), %70 ]
  %98 = sub i32 %62, %50
  br label %115

99:                                               ; preds = %76
  %100 = load i32, i32* %9, align 4
  %101 = lshr i32 %100, 24
  %102 = lshr i32 %100, 16
  %103 = and i32 %102, 255
  %104 = lshr i32 %100, 8
  %105 = and i32 %104, 255
  %106 = and i32 %100, 255
  %107 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.31, i64 0, i64 0), i32 %101, i32 %103, i32 %105, i32 %106) #3
  %108 = load i32, i32* %18, align 4
  %109 = or i32 %108, 2147483647
  store i32 %109, i32* %18, align 4
  %110 = zext i32 %78 to i64
  %111 = call i64 @opj_stream_skip(%struct.opj_stream_private* %1, i64 %110, %struct.opj_event_mgr* %2) #3
  %112 = icmp eq i64 %111, %110
  br i1 %112, label %24, label %113

113:                                              ; preds = %99
  %114 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.32, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

115:                                              ; preds = %76, %96
  %116 = phi i32 [ %98, %96 ], [ %78, %76 ]
  %117 = phi %struct.opj_jp2_header_handler* [ %97, %96 ], [ %77, %76 ]
  %118 = zext i32 %116 to i64
  %119 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %1) #3
  %120 = icmp slt i64 %119, %118
  br i1 %120, label %121, label %133

121:                                              ; preds = %115
  %122 = load i32, i32* %8, align 4
  %123 = load i32, i32* %9, align 4
  %124 = lshr i32 %123, 24
  %125 = lshr i32 %123, 16
  %126 = and i32 %125, 255
  %127 = lshr i32 %123, 8
  %128 = and i32 %127, 255
  %129 = and i32 %123, 255
  %130 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %1) #3
  %131 = trunc i64 %130 to i32
  %132 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.33, i64 0, i64 0), i32 %122, i32 %124, i32 %126, i32 %128, i32 %129, i32 %116, i32 %131) #3
  call void @opj_free(i8* %21) #3
  br label %176

133:                                              ; preds = %115
  %134 = icmp ugt i32 %116, %20
  br i1 %134, label %135, label %140

135:                                              ; preds = %133
  %136 = call i8* @opj_realloc(i8* %21, i64 %118) #3
  %137 = icmp eq i8* %136, null
  br i1 %137, label %138, label %140

138:                                              ; preds = %135
  call void @opj_free(i8* %21) #3
  %139 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.34, i64 0, i64 0)) #3
  br label %176

140:                                              ; preds = %135, %133
  %141 = phi i32 [ %20, %133 ], [ %116, %135 ]
  %142 = phi i8* [ %21, %133 ], [ %136, %135 ]
  %143 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %142, i64 %118, %struct.opj_event_mgr* %2) #3
  %144 = trunc i64 %143 to i32
  %145 = icmp eq i32 %116, %144
  br i1 %145, label %148, label %146

146:                                              ; preds = %140
  %147 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.35, i64 0, i64 0)) #3
  call void @opj_free(i8* %142) #3
  br label %176

148:                                              ; preds = %140
  %149 = getelementptr inbounds %struct.opj_jp2_header_handler, %struct.opj_jp2_header_handler* %117, i64 0, i32 1
  %150 = load i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)** %149, align 8
  %151 = call i32 %150(%struct.opj_jp2* %0, i8* %142, i32 %116, %struct.opj_event_mgr* %2) #3
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %19

153:                                              ; preds = %148
  call void @opj_free(i8* %142) #3
  br label %176

154:                                              ; preds = %89
  %155 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.36, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

156:                                              ; preds = %89
  %157 = and i32 %91, 2
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %161

159:                                              ; preds = %156
  %160 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.37, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

161:                                              ; preds = %156
  %162 = or i32 %91, 2147483647
  store i32 %162, i32* %18, align 4
  %163 = zext i32 %90 to i64
  %164 = call i64 @opj_stream_skip(%struct.opj_stream_private* %1, i64 %163, %struct.opj_event_mgr* %2) #3
  %165 = icmp eq i64 %164, %163
  br i1 %165, label %174, label %166

166:                                              ; preds = %161
  %167 = load i32, i32* %18, align 4
  %168 = and i32 %167, 8
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %172, label %170

170:                                              ; preds = %166
  %171 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.32, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

172:                                              ; preds = %166
  %173 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.32, i64 0, i64 0)) #3
  call void @opj_free(i8* %21) #3
  br label %176

174:                                              ; preds = %19, %161
  br label %24

175:                                              ; preds = %24, %48, %33, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #3
  call void @opj_free(i8* %21) #3
  br label %176

176:                                              ; preds = %138, %175, %172, %170, %159, %154, %153, %146, %121, %113, %68, %64, %59, %57, %22
  %177 = phi i32 [ 0, %22 ], [ 1, %57 ], [ 0, %59 ], [ 0, %64 ], [ 0, %68 ], [ 0, %121 ], [ 0, %146 ], [ 0, %153 ], [ 0, %138 ], [ 0, %113 ], [ 1, %170 ], [ 0, %172 ], [ 0, %159 ], [ 0, %154 ], [ 1, %175 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #3
  ret i32 %177
}

declare i64 @opj_stream_skip(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #1

declare i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private*) local_unnamed_addr #1

declare i8* @opj_realloc(i8*, i64) local_unnamed_addr #1

declare i64 @opj_stream_read_data(%struct.opj_stream_private*, i8*, i64, %struct.opj_event_mgr*) local_unnamed_addr #1

declare void @opj_read_bytes_LE(i8*, i32*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_jp(%struct.opj_jp2* nocapture, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #3
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 22
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.39, i64 0, i64 0)) #3
  br label %24

12:                                               ; preds = %4
  %13 = icmp eq i32 %2, 4
  br i1 %13, label %16, label %14

14:                                               ; preds = %12
  %15 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i64 0, i64 0)) #3
  br label %24

16:                                               ; preds = %12
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 4) #3
  %17 = load i32, i32* %5, align 4
  %18 = icmp eq i32 %17, 218793738
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.41, i64 0, i64 0)) #3
  br label %24

21:                                               ; preds = %16
  %22 = load i32, i32* %7, align 4
  %23 = or i32 %22, 1
  store i32 %23, i32* %7, align 4
  br label %24

24:                                               ; preds = %21, %19, %14, %10
  %25 = phi i32 [ 0, %10 ], [ 0, %14 ], [ 0, %19 ], [ 1, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #3
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_ftyp(%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 22
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.42, i64 0, i64 0)) #3
  br label %54

10:                                               ; preds = %4
  %11 = icmp ult i32 %2, 8
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.43, i64 0, i64 0)) #3
  br label %54

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 14
  tail call void @opj_read_bytes_LE(i8* %1, i32* %15, i32 4) #3
  %16 = getelementptr inbounds i8, i8* %1, i64 4
  %17 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 15
  tail call void @opj_read_bytes_LE(i8* %16, i32* %17, i32 4) #3
  %18 = getelementptr inbounds i8, i8* %1, i64 8
  %19 = add i32 %2, -8
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %14
  %23 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.43, i64 0, i64 0)) #3
  br label %54

24:                                               ; preds = %14
  %25 = lshr i32 %19, 2
  %26 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  store i32 %25, i32* %26, align 4
  %27 = icmp eq i32 %25, 0
  br i1 %27, label %51, label %28

28:                                               ; preds = %24
  %29 = zext i32 %25 to i64
  %30 = tail call i8* @opj_calloc(i64 %29, i64 4) #3
  %31 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %32 = bitcast i32** %31 to i8**
  store i8* %30, i8** %32, align 8
  %33 = icmp eq i8* %30, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.44, i64 0, i64 0)) #3
  br label %54

36:                                               ; preds = %28
  %37 = load i32, i32* %26, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %51, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  br label %41

41:                                               ; preds = %39, %41
  %42 = phi i64 [ 0, %39 ], [ %47, %41 ]
  %43 = phi i8* [ %18, %39 ], [ %46, %41 ]
  %44 = load i32*, i32** %40, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %42
  tail call void @opj_read_bytes_LE(i8* %43, i32* %45, i32 4) #3
  %46 = getelementptr inbounds i8, i8* %43, i64 4
  %47 = add nuw nsw i64 %42, 1
  %48 = load i32, i32* %26, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %41, label %51

51:                                               ; preds = %41, %24, %36
  %52 = load i32, i32* %5, align 4
  %53 = or i32 %52, 2
  store i32 %53, i32* %5, align 4
  br label %54

54:                                               ; preds = %51, %34, %22, %12, %8
  %55 = phi i32 [ 0, %8 ], [ 0, %12 ], [ 0, %22 ], [ 0, %34 ], [ 1, %51 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_jp2h(%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 22
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  %12 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.45, i64 0, i64 0)) #3
  br label %99

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 23
  store i32 0, i32* %14, align 8
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %93, label %16

16:                                               ; preds = %13
  %17 = bitcast i32* %5 to i8*
  %18 = bitcast i32* %6 to i8*
  br label %19

19:                                               ; preds = %16, %81
  %20 = phi i32 [ 0, %16 ], [ %86, %81 ]
  %21 = phi i32 [ %2, %16 ], [ %89, %81 ]
  %22 = phi i8* [ %1, %16 ], [ %88, %81 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #3
  store i32 -1431655766, i32* %5, align 4
  %23 = icmp ult i32 %21, 8
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.49, i64 0, i64 0)) #3
  br label %55

26:                                               ; preds = %19
  call void @opj_read_bytes_LE(i8* %22, i32* nonnull %5, i32 4) #3
  %27 = getelementptr inbounds i8, i8* %22, i64 4
  %28 = load i32, i32* %5, align 4
  call void @opj_read_bytes_LE(i8* %27, i32* nonnull %5, i32 4) #3
  %29 = getelementptr inbounds i8, i8* %22, i64 8
  %30 = load i32, i32* %5, align 4
  switch i32 %28, label %49 [
    i32 1, label %31
    i32 0, label %47
  ]

31:                                               ; preds = %26
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #3
  store i32 -1431655766, i32* %6, align 4
  %32 = icmp ult i32 %21, 16
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.50, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #3
  br label %55

35:                                               ; preds = %31
  call void @opj_read_bytes_LE(i8* %29, i32* nonnull %6, i32 4) #3
  %36 = load i32, i32* %6, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %35
  %39 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.38, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #3
  br label %55

40:                                               ; preds = %35
  %41 = getelementptr inbounds i8, i8* %22, i64 12
  call void @opj_read_bytes_LE(i8* %41, i32* nonnull %5, i32 4) #3
  %42 = load i32, i32* %5, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.28, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #3
  br label %55

46:                                               ; preds = %40
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #3
  br label %49

47:                                               ; preds = %26
  %48 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.28, i64 0, i64 0)) #3
  br label %55

49:                                               ; preds = %46, %26
  %50 = phi i32 [ 8, %26 ], [ 16, %46 ]
  %51 = phi i32 [ %28, %26 ], [ %42, %46 ]
  %52 = icmp ult i32 %51, %50
  br i1 %52, label %53, label %57

53:                                               ; preds = %49
  %54 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.51, i64 0, i64 0)) #3
  br label %55

55:                                               ; preds = %24, %53, %47, %33, %38, %44
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #3
  %56 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0)) #3
  br label %99

57:                                               ; preds = %49
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #3
  %58 = icmp ult i32 %21, %51
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.47, i64 0, i64 0)) #3
  br label %99

61:                                               ; preds = %57
  switch i32 %30, label %76 [
    i32 1768449138, label %67
    i32 1668246642, label %62
    i32 1651532643, label %63
    i32 1885564018, label %64
    i32 1668112752, label %65
    i32 1667523942, label %66
  ]

62:                                               ; preds = %61
  br label %67

63:                                               ; preds = %61
  br label %67

64:                                               ; preds = %61
  br label %67

65:                                               ; preds = %61
  br label %67

66:                                               ; preds = %61
  br label %67

67:                                               ; preds = %61, %62, %63, %64, %65, %66
  %68 = phi %struct.opj_jp2_header_handler* [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 5), %66 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 4), %65 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 3), %64 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 2), %63 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 1), %62 ], [ getelementptr inbounds ([6 x %struct.opj_jp2_header_handler], [6 x %struct.opj_jp2_header_handler]* @jp2_img_header, i64 0, i64 0), %61 ]
  %69 = sub i32 %51, %50
  %70 = zext i32 %50 to i64
  %71 = getelementptr inbounds i8, i8* %22, i64 %70
  %72 = getelementptr inbounds %struct.opj_jp2_header_handler, %struct.opj_jp2_header_handler* %68, i64 0, i32 1
  %73 = load i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)*, i32 (%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*)** %72, align 8
  %74 = call i32 %73(%struct.opj_jp2* %0, i8* %71, i32 %69, %struct.opj_event_mgr* %3) #3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %99, label %81

76:                                               ; preds = %61
  %77 = sub i32 %51, %50
  %78 = zext i32 %50 to i64
  %79 = load i32, i32* %14, align 8
  %80 = or i32 %79, 2147483647
  store i32 %80, i32* %14, align 8
  br label %81

81:                                               ; preds = %67, %76
  %82 = phi i64 [ %70, %67 ], [ %78, %76 ]
  %83 = phi i32 [ %69, %67 ], [ %77, %76 ]
  %84 = getelementptr inbounds i8, i8* %22, i64 %82
  %85 = icmp eq i32 %30, 1768449138
  %86 = select i1 %85, i32 1, i32 %20
  %87 = zext i32 %83 to i64
  %88 = getelementptr inbounds i8, i8* %84, i64 %87
  %89 = sub i32 %21, %51
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %19

91:                                               ; preds = %81
  %92 = icmp eq i32 %86, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %13, %91
  %94 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.48, i64 0, i64 0)) #3
  br label %99

95:                                               ; preds = %91
  %96 = load i32, i32* %7, align 4
  %97 = or i32 %96, 4
  store i32 %97, i32* %7, align 4
  %98 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 26
  store i8 1, i8* %98, align 4
  br label %99

99:                                               ; preds = %67, %95, %93, %59, %55, %11
  %100 = phi i32 [ 0, %11 ], [ 0, %59 ], [ 0, %55 ], [ 0, %93 ], [ 1, %95 ], [ 0, %67 ]
  ret i32 %100
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_ihdr(%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  %6 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %5, align 8
  %7 = icmp eq %struct.opj_jp2_comps* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.52, i64 0, i64 0)) #3
  br label %77

10:                                               ; preds = %4
  %11 = icmp eq i32 %2, 14
  br i1 %11, label %14, label %12

12:                                               ; preds = %10
  %13 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.53, i64 0, i64 0)) #3
  br label %77

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  tail call void @opj_read_bytes_LE(i8* %1, i32* %15, i32 4) #3
  %16 = getelementptr inbounds i8, i8* %1, i64 4
  %17 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  tail call void @opj_read_bytes_LE(i8* %16, i32* %17, i32 4) #3
  %18 = getelementptr inbounds i8, i8* %1, i64 8
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  tail call void @opj_read_bytes_LE(i8* %18, i32* %19, i32 2) #3
  %20 = getelementptr inbounds i8, i8* %1, i64 10
  %21 = load i32, i32* %15, align 4
  %22 = icmp eq i32 %21, 0
  %23 = load i32, i32* %17, align 8
  br i1 %22, label %29, label %24

24:                                               ; preds = %14
  %25 = icmp eq i32 %23, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %24
  %27 = load i32, i32* %19, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %14, %26, %24
  %30 = phi i32 [ %23, %26 ], [ 0, %24 ], [ %23, %14 ]
  %31 = load i32, i32* %19, align 8
  %32 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.54, i64 0, i64 0), i32 %30, i32 %21, i32 %31) #3
  br label %77

33:                                               ; preds = %26
  %34 = add i32 %27, -1
  %35 = icmp ugt i32 %34, 16383
  br i1 %35, label %36, label %38

36:                                               ; preds = %33
  %37 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.55, i64 0, i64 0)) #3
  br label %77

38:                                               ; preds = %33
  %39 = bitcast %struct.opj_jp2_comps** %5 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void @opj_free(i8* %40) #3
  %41 = load i32, i32* %19, align 8
  %42 = zext i32 %41 to i64
  %43 = tail call i8* @opj_calloc(i64 %42, i64 12) #3
  store i8* %43, i8** %39, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %38
  %46 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.56, i64 0, i64 0)) #3
  br label %77

47:                                               ; preds = %38
  %48 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  tail call void @opj_read_bytes_LE(i8* %20, i32* %48, i32 1) #3
  %49 = getelementptr inbounds i8, i8* %1, i64 11
  %50 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 7
  tail call void @opj_read_bytes_LE(i8* %49, i32* %50, i32 1) #3
  %51 = getelementptr inbounds i8, i8* %1, i64 12
  %52 = load i32, i32* %50, align 8
  %53 = icmp eq i32 %52, 7
  br i1 %53, label %56, label %54

54:                                               ; preds = %47
  %55 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.57, i64 0, i64 0), i32 %52) #3
  br label %56

56:                                               ; preds = %47, %54
  %57 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 8
  tail call void @opj_read_bytes_LE(i8* %51, i32* %57, i32 1) #3
  %58 = getelementptr inbounds i8, i8* %1, i64 13
  %59 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 9
  tail call void @opj_read_bytes_LE(i8* %58, i32* %59, i32 1) #3
  %60 = load i32, i32* %48, align 4
  %61 = icmp eq i32 %60, 255
  %62 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %63 = load %struct.opj_j2k*, %struct.opj_j2k** %62, align 8
  %64 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %63, i64 0, i32 4, i32 21
  %65 = zext i1 %61 to i8
  %66 = load i8, i8* %64, align 8
  %67 = shl nuw nsw i8 %65, 2
  %68 = and i8 %66, -5
  %69 = or i8 %68, %67
  store i8 %69, i8* %64, align 8
  %70 = load i32, i32* %17, align 8
  %71 = load %struct.opj_j2k*, %struct.opj_j2k** %62, align 8
  %72 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %71, i64 0, i32 11
  store i32 %70, i32* %72, align 8
  %73 = load i32, i32* %15, align 4
  %74 = load %struct.opj_j2k*, %struct.opj_j2k** %62, align 8
  %75 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %74, i64 0, i32 12
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 27
  store i8 1, i8* %76, align 1
  br label %77

77:                                               ; preds = %56, %45, %36, %29, %12, %8
  %78 = phi i32 [ 1, %8 ], [ 0, %12 ], [ 0, %29 ], [ 0, %36 ], [ 0, %45 ], [ 1, %56 ]
  ret i32 %78
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_colr(%struct.opj_jp2*, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #3
  store i32 -1431655766, i32* %5, align 4
  %14 = icmp ult i32 %2, 3
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.58, i64 0, i64 0)) #3
  br label %133

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 4
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.59, i64 0, i64 0)) #3
  br label %133

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  tail call void @opj_read_bytes_LE(i8* %1, i32* %25, i32 1) #3
  %26 = getelementptr inbounds i8, i8* %1, i64 1
  %27 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 13
  tail call void @opj_read_bytes_LE(i8* %26, i32* %27, i32 1) #3
  %28 = getelementptr inbounds i8, i8* %1, i64 2
  %29 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  tail call void @opj_read_bytes_LE(i8* %28, i32* %29, i32 1) #3
  %30 = getelementptr inbounds i8, i8* %1, i64 3
  %31 = load i32, i32* %25, align 4
  switch i32 %31, label %129 [
    i32 1, label %32
    i32 2, label %106
  ]

32:                                               ; preds = %24
  %33 = icmp ult i32 %2, 7
  br i1 %33, label %34, label %36

34:                                               ; preds = %32
  %35 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.60, i64 0, i64 0), i32 %2) #3
  br label %133

36:                                               ; preds = %32
  %37 = icmp eq i32 %2, 7
  br i1 %37, label %44, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 14
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.60, i64 0, i64 0), i32 %2) #3
  br label %44

44:                                               ; preds = %38, %36, %42
  %45 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  tail call void @opj_read_bytes_LE(i8* %30, i32* %45, i32 4) #3
  %46 = getelementptr inbounds i8, i8* %1, i64 7
  %47 = load i32, i32* %45, align 4
  %48 = icmp eq i32 %47, 14
  br i1 %48, label %49, label %105

49:                                               ; preds = %44
  %50 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #3
  store i32 -1431655766, i32* %6, align 4
  %51 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #3
  store i32 -1431655766, i32* %7, align 4
  %52 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #3
  store i32 -1431655766, i32* %8, align 4
  %53 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %53) #3
  store i32 -1431655766, i32* %9, align 4
  %54 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54) #3
  store i32 -1431655766, i32* %10, align 4
  %55 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55) #3
  store i32 -1431655766, i32* %11, align 4
  %56 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #3
  store i32 -1431655766, i32* %12, align 4
  %57 = tail call i8* @opj_malloc(i64 36) #3
  %58 = icmp eq i8* %57, null
  br i1 %58, label %59, label %61

59:                                               ; preds = %49
  %60 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.61, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #3
  br label %133

61:                                               ; preds = %49
  %62 = bitcast i8* %57 to i32*
  store i32 14, i32* %62, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %6, align 4
  store i32 4470064, i32* %12, align 4
  %63 = getelementptr inbounds i8, i8* %57, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 1145390592, i32* %64, align 4
  switch i32 %2, label %79 [
    i32 35, label %65
    i32 7, label %81
  ]

65:                                               ; preds = %61
  call void @opj_read_bytes_LE(i8* %46, i32* nonnull %6, i32 4) #3
  %66 = getelementptr inbounds i8, i8* %1, i64 11
  call void @opj_read_bytes_LE(i8* %66, i32* nonnull %7, i32 4) #3
  %67 = getelementptr inbounds i8, i8* %1, i64 15
  call void @opj_read_bytes_LE(i8* %67, i32* nonnull %8, i32 4) #3
  %68 = getelementptr inbounds i8, i8* %1, i64 19
  call void @opj_read_bytes_LE(i8* %68, i32* nonnull %9, i32 4) #3
  %69 = getelementptr inbounds i8, i8* %1, i64 23
  call void @opj_read_bytes_LE(i8* %69, i32* nonnull %10, i32 4) #3
  %70 = getelementptr inbounds i8, i8* %1, i64 27
  call void @opj_read_bytes_LE(i8* %70, i32* nonnull %11, i32 4) #3
  %71 = getelementptr inbounds i8, i8* %1, i64 31
  call void @opj_read_bytes_LE(i8* %71, i32* nonnull %12, i32 4) #3
  store i32 0, i32* %64, align 4
  %72 = load i32, i32* %6, align 4
  %73 = load i32, i32* %8, align 4
  %74 = load i32, i32* %10, align 4
  %75 = load i32, i32* %7, align 4
  %76 = load i32, i32* %9, align 4
  %77 = load i32, i32* %11, align 4
  %78 = load i32, i32* %12, align 4
  br label %81

79:                                               ; preds = %61
  %80 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.62, i64 0, i64 0), i32 %2) #3
  br label %81

81:                                               ; preds = %61, %79, %65
  %82 = phi i32 [ 4470064, %61 ], [ 4470064, %79 ], [ %78, %65 ]
  %83 = phi i32 [ 0, %61 ], [ 0, %79 ], [ %77, %65 ]
  %84 = phi i32 [ 0, %61 ], [ 0, %79 ], [ %76, %65 ]
  %85 = phi i32 [ 0, %61 ], [ 0, %79 ], [ %75, %65 ]
  %86 = phi i32 [ 0, %61 ], [ 0, %79 ], [ %74, %65 ]
  %87 = phi i32 [ 0, %61 ], [ 0, %79 ], [ %73, %65 ]
  %88 = phi i32 [ 0, %61 ], [ 0, %79 ], [ %72, %65 ]
  %89 = getelementptr inbounds i8, i8* %57, i64 8
  %90 = bitcast i8* %89 to i32*
  store i32 %88, i32* %90, align 4
  %91 = getelementptr inbounds i8, i8* %57, i64 16
  %92 = bitcast i8* %91 to i32*
  store i32 %87, i32* %92, align 4
  %93 = getelementptr inbounds i8, i8* %57, i64 24
  %94 = bitcast i8* %93 to i32*
  store i32 %86, i32* %94, align 4
  %95 = getelementptr inbounds i8, i8* %57, i64 12
  %96 = bitcast i8* %95 to i32*
  store i32 %85, i32* %96, align 4
  %97 = getelementptr inbounds i8, i8* %57, i64 20
  %98 = bitcast i8* %97 to i32*
  store i32 %84, i32* %98, align 4
  %99 = getelementptr inbounds i8, i8* %57, i64 28
  %100 = bitcast i8* %99 to i32*
  store i32 %83, i32* %100, align 4
  %101 = getelementptr inbounds i8, i8* %57, i64 32
  %102 = bitcast i8* %101 to i32*
  store i32 %82, i32* %102, align 4
  %103 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %18, i64 0, i32 0
  store i8* %57, i8** %103, align 8
  %104 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 1
  store i32 0, i32* %104, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #3
  br label %105

105:                                              ; preds = %81, %44
  store i8 1, i8* %19, align 8
  br label %133

106:                                              ; preds = %24
  %107 = add i32 %2, -3
  %108 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 1
  store i32 %107, i32* %108, align 8
  %109 = sext i32 %107 to i64
  %110 = tail call i8* @opj_calloc(i64 1, i64 %109) #3
  %111 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %18, i64 0, i32 0
  store i8* %110, i8** %111, align 8
  %112 = icmp eq i8* %110, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %106
  %114 = icmp sgt i32 %107, 0
  br i1 %114, label %115, label %128

115:                                              ; preds = %113
  %116 = zext i32 %107 to i64
  br label %118

117:                                              ; preds = %106
  store i32 0, i32* %108, align 8
  br label %133

118:                                              ; preds = %118, %115
  %119 = phi i64 [ 0, %115 ], [ %126, %118 ]
  %120 = phi i8* [ %30, %115 ], [ %121, %118 ]
  call void @opj_read_bytes_LE(i8* %120, i32* nonnull %5, i32 1) #3
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  %122 = load i32, i32* %5, align 4
  %123 = trunc i32 %122 to i8
  %124 = load i8*, i8** %111, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 %119
  store i8 %123, i8* %125, align 1
  %126 = add nuw nsw i64 %119, 1
  %127 = icmp eq i64 %126, %116
  br i1 %127, label %128, label %118

128:                                              ; preds = %118, %113
  store i8 1, i8* %19, align 8
  br label %133

129:                                              ; preds = %24
  %130 = icmp ugt i32 %31, 2
  br i1 %130, label %131, label %133

131:                                              ; preds = %129
  %132 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.63, i64 0, i64 0), i32 %31) #3
  br label %133

133:                                              ; preds = %105, %129, %131, %128, %117, %59, %34, %22, %15
  %134 = phi i32 [ 0, %15 ], [ 1, %22 ], [ 0, %34 ], [ 0, %117 ], [ 0, %59 ], [ 1, %128 ], [ 1, %131 ], [ 1, %129 ], [ 1, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #3
  ret i32 %134
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_bpcc(%struct.opj_jp2* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 255
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.64, i64 0, i64 0), i32 %6) #3
  br label %10

10:                                               ; preds = %4, %8
  %11 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %2
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %30, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  br label %20

18:                                               ; preds = %10
  %19 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.65, i64 0, i64 0)) #3
  br label %30

20:                                               ; preds = %16, %20
  %21 = phi i64 [ 0, %16 ], [ %26, %20 ]
  %22 = phi i8* [ %1, %16 ], [ %25, %20 ]
  %23 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %17, align 8
  %24 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %23, i64 %21, i32 2
  tail call void @opj_read_bytes_LE(i8* %22, i32* %24, i32 1) #3
  %25 = getelementptr inbounds i8, i8* %22, i64 1
  %26 = add nuw nsw i64 %21, 1
  %27 = load i32, i32* %11, align 8
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %20, label %30

30:                                               ; preds = %20, %14, %18
  %31 = phi i32 [ 0, %18 ], [ 1, %14 ], [ 1, %20 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_pclr(%struct.opj_jp2* nocapture, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #3
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 3
  %8 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %7, align 8
  %9 = icmp ne %struct.opj_jp2_pclr* %8, null
  %10 = icmp ult i32 %2, 3
  %11 = or i1 %10, %9
  br i1 %11, label %120, label %12

12:                                               ; preds = %4
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 2) #3
  %13 = load i32, i32* %5, align 4
  %14 = trunc i32 %13 to i16
  %15 = and i32 %13, 65535
  %16 = add nsw i32 %15, -1
  %17 = icmp ugt i32 %16, 1023
  br i1 %17, label %18, label %20

18:                                               ; preds = %12
  %19 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.66, i64 0, i64 0), i32 %15) #3
  br label %120

20:                                               ; preds = %12
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  call void @opj_read_bytes_LE(i8* %21, i32* nonnull %5, i32 1) #3
  %22 = getelementptr inbounds i8, i8* %1, i64 3
  %23 = load i32, i32* %5, align 4
  %24 = and i32 %23, 65535
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.67, i64 0, i64 0)) #3
  br label %120

28:                                               ; preds = %20
  %29 = add nuw nsw i32 %24, 3
  %30 = icmp ugt i32 %29, %2
  br i1 %30, label %120, label %31

31:                                               ; preds = %28
  %32 = zext i32 %24 to i64
  %33 = shl nuw nsw i32 %24, 2
  %34 = zext i32 %33 to i64
  %35 = zext i32 %15 to i64
  %36 = mul nuw nsw i64 %34, %35
  %37 = call i8* @opj_malloc(i64 %36) #3
  %38 = bitcast i8* %37 to i32*
  %39 = icmp eq i8* %37, null
  br i1 %39, label %120, label %40

40:                                               ; preds = %31
  %41 = call i8* @opj_malloc(i64 %32) #3
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void @opj_free(i8* nonnull %37) #3
  br label %120

44:                                               ; preds = %40
  %45 = call i8* @opj_malloc(i64 %32) #3
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  call void @opj_free(i8* nonnull %37) #3
  call void @opj_free(i8* nonnull %41) #3
  br label %120

48:                                               ; preds = %44
  %49 = call i8* @opj_malloc(i64 40) #3
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  call void @opj_free(i8* nonnull %37) #3
  call void @opj_free(i8* nonnull %41) #3
  call void @opj_free(i8* nonnull %45) #3
  br label %120

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %49, i64 8
  %54 = bitcast i8* %53 to i8**
  store i8* %45, i8** %54, align 8
  %55 = getelementptr inbounds i8, i8* %49, i64 16
  %56 = bitcast i8* %55 to i8**
  store i8* %41, i8** %56, align 8
  %57 = bitcast i8* %49 to i8**
  store i8* %37, i8** %57, align 8
  %58 = getelementptr inbounds i8, i8* %49, i64 32
  %59 = bitcast i8* %58 to i16*
  store i16 %14, i16* %59, align 8
  %60 = load i32, i32* %5, align 4
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds i8, i8* %49, i64 34
  store i8 %61, i8* %62, align 2
  %63 = getelementptr inbounds i8, i8* %49, i64 24
  %64 = bitcast i8* %63 to %struct.opj_jp2_cmap_comp**
  store %struct.opj_jp2_cmap_comp* null, %struct.opj_jp2_cmap_comp** %64, align 8
  %65 = bitcast %struct.opj_jp2_pclr** %7 to i8**
  store i8* %49, i8** %65, align 8
  br label %71

66:                                               ; preds = %71
  %67 = icmp eq i32 %15, 0
  br i1 %67, label %120, label %68

68:                                               ; preds = %66
  %69 = zext i32 %2 to i64
  %70 = ptrtoint i8* %1 to i64
  br label %88

71:                                               ; preds = %52, %71
  %72 = phi i16 [ %85, %71 ], [ 0, %52 ]
  %73 = phi i8* [ %74, %71 ], [ %22, %52 ]
  call void @opj_read_bytes_LE(i8* %73, i32* nonnull %5, i32 1) #3
  %74 = getelementptr inbounds i8, i8* %73, i64 1
  %75 = load i32, i32* %5, align 4
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 127
  %78 = add nuw i8 %77, 1
  %79 = zext i16 %72 to i64
  %80 = getelementptr inbounds i8, i8* %41, i64 %79
  store i8 %78, i8* %80, align 1
  %81 = load i32, i32* %5, align 4
  %82 = trunc i32 %81 to i8
  %83 = lshr i8 %82, 7
  %84 = getelementptr inbounds i8, i8* %45, i64 %79
  store i8 %83, i8* %84, align 1
  %85 = add i16 %72, 1
  %86 = zext i16 %85 to i32
  %87 = icmp ugt i32 %24, %86
  br i1 %87, label %71, label %66

88:                                               ; preds = %116, %68
  %89 = phi i16 [ 0, %68 ], [ %117, %116 ]
  %90 = phi i32* [ %38, %68 ], [ %112, %116 ]
  %91 = phi i8* [ %74, %68 ], [ %110, %116 ]
  br label %92

92:                                               ; preds = %88, %109
  %93 = phi i16 [ %113, %109 ], [ 0, %88 ]
  %94 = phi i32* [ %112, %109 ], [ %90, %88 ]
  %95 = phi i8* [ %110, %109 ], [ %91, %88 ]
  %96 = zext i16 %93 to i64
  %97 = getelementptr inbounds i8, i8* %41, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add nuw nsw i32 %99, 7
  %101 = lshr i32 %100, 3
  %102 = icmp ult i32 %101, 4
  %103 = select i1 %102, i32 %101, i32 4
  %104 = ptrtoint i8* %95 to i64
  %105 = sub i64 %104, %70
  %106 = zext i32 %103 to i64
  %107 = add nsw i64 %105, %106
  %108 = icmp sgt i64 %107, %69
  br i1 %108, label %120, label %109

109:                                              ; preds = %92
  call void @opj_read_bytes_LE(i8* %95, i32* nonnull %5, i32 %103) #3
  %110 = getelementptr inbounds i8, i8* %95, i64 %106
  %111 = load i32, i32* %5, align 4
  store i32 %111, i32* %94, align 4
  %112 = getelementptr inbounds i32, i32* %94, i64 1
  %113 = add i16 %93, 1
  %114 = zext i16 %113 to i32
  %115 = icmp ugt i32 %24, %114
  br i1 %115, label %92, label %116

116:                                              ; preds = %109
  %117 = add i16 %89, 1
  %118 = zext i16 %117 to i32
  %119 = icmp ugt i32 %15, %118
  br i1 %119, label %88, label %120

120:                                              ; preds = %116, %92, %66, %4, %31, %28, %51, %47, %43, %26, %18
  %121 = phi i32 [ 0, %18 ], [ 0, %26 ], [ 0, %51 ], [ 0, %47 ], [ 0, %43 ], [ 0, %4 ], [ 0, %28 ], [ 0, %31 ], [ 1, %66 ], [ 0, %92 ], [ 1, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #3
  ret i32 %121
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_cmap(%struct.opj_jp2* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #3
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 3
  %8 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %7, align 8
  %9 = icmp eq %struct.opj_jp2_pclr* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.68, i64 0, i64 0)) #3
  br label %55

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %8, i64 0, i32 3
  %14 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %13, align 8
  %15 = icmp eq %struct.opj_jp2_cmap_comp* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.69, i64 0, i64 0)) #3
  br label %55

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %8, i64 0, i32 5
  %20 = load i8, i8* %19, align 2
  %21 = zext i8 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = icmp ugt i32 %22, %2
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.70, i64 0, i64 0)) #3
  br label %55

26:                                               ; preds = %18
  %27 = zext i8 %20 to i64
  %28 = shl nuw nsw i64 %27, 2
  %29 = tail call i8* @opj_malloc(i64 %28) #3
  %30 = bitcast i8* %29 to %struct.opj_jp2_cmap_comp*
  %31 = icmp eq i8* %29, null
  br i1 %31, label %55, label %32

32:                                               ; preds = %26
  %33 = icmp eq i8 %20, 0
  br i1 %33, label %51, label %34

34:                                               ; preds = %32, %34
  %35 = phi i64 [ %49, %34 ], [ 0, %32 ]
  %36 = phi i8* [ %45, %34 ], [ %1, %32 ]
  call void @opj_read_bytes_BE(i8* %36, i32* nonnull %5, i32 2) #3
  %37 = getelementptr inbounds i8, i8* %36, i64 2
  %38 = load i32, i32* %5, align 4
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %30, i64 %35, i32 0
  store i16 %39, i16* %40, align 2
  call void @opj_read_bytes_LE(i8* %37, i32* nonnull %5, i32 1) #3
  %41 = getelementptr inbounds i8, i8* %36, i64 3
  %42 = load i32, i32* %5, align 4
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %30, i64 %35, i32 1
  store i8 %43, i8* %44, align 2
  call void @opj_read_bytes_LE(i8* %41, i32* nonnull %5, i32 1) #3
  %45 = getelementptr inbounds i8, i8* %36, i64 4
  %46 = load i32, i32* %5, align 4
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %30, i64 %35, i32 2
  store i8 %47, i8* %48, align 1
  %49 = add nuw nsw i64 %35, 1
  %50 = icmp eq i64 %49, %27
  br i1 %50, label %51, label %34

51:                                               ; preds = %34, %32
  %52 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %7, align 8
  %53 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %52, i64 0, i32 3
  %54 = bitcast %struct.opj_jp2_cmap_comp** %53 to i8**
  store i8* %29, i8** %54, align 8
  br label %55

55:                                               ; preds = %26, %51, %24, %16, %10
  %56 = phi i32 [ 0, %10 ], [ 0, %16 ], [ 0, %24 ], [ 1, %51 ], [ 0, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #3
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_read_cdef(%struct.opj_jp2* nocapture, i8*, i32, %struct.opj_event_mgr*) #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #3
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %8 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %7, align 8
  %9 = icmp eq %struct.opj_jp2_cdef* %8, null
  br i1 %9, label %10, label %68

10:                                               ; preds = %4
  %11 = icmp ult i32 %2, 2
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.71, i64 0, i64 0)) #3
  br label %68

14:                                               ; preds = %10
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 2) #3
  %15 = load i32, i32* %5, align 4
  %16 = and i32 %15, 65535
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.72, i64 0, i64 0)) #3
  br label %68

20:                                               ; preds = %14
  %21 = mul nuw nsw i32 %16, 6
  %22 = add nuw nsw i32 %21, 2
  %23 = icmp ugt i32 %22, %2
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.71, i64 0, i64 0)) #3
  br label %68

26:                                               ; preds = %20
  %27 = zext i32 %15 to i64
  %28 = mul nuw nsw i64 %27, 6
  %29 = call i8* @opj_malloc(i64 %28) #3
  %30 = bitcast i8* %29 to %struct.opj_jp2_cdef_info*
  %31 = icmp eq i8* %29, null
  br i1 %31, label %68, label %32

32:                                               ; preds = %26
  %33 = call i8* @opj_malloc(i64 16) #3
  %34 = bitcast %struct.opj_jp2_cdef** %7 to i8**
  store i8* %33, i8** %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  call void @opj_free(i8* nonnull %29) #3
  br label %68

37:                                               ; preds = %32
  %38 = bitcast i8* %33 to i8**
  store i8* %29, i8** %38, align 8
  %39 = load i32, i32* %5, align 4
  %40 = trunc i32 %39 to i16
  %41 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %7, align 8
  %42 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %41, i64 0, i32 1
  store i16 %40, i16* %42, align 8
  %43 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %7, align 8
  %44 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %43, i64 0, i32 1
  %45 = load i16, i16* %44, align 8
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %68, label %47

47:                                               ; preds = %37, %47
  %48 = phi i64 [ %62, %47 ], [ 0, %37 ]
  %49 = phi i8* [ %55, %47 ], [ %1, %37 ]
  %50 = getelementptr inbounds i8, i8* %49, i64 2
  call void @opj_read_bytes_LE(i8* %50, i32* nonnull %5, i32 2) #3
  %51 = getelementptr inbounds i8, i8* %49, i64 4
  %52 = load i32, i32* %5, align 4
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %30, i64 %48, i32 0
  store i16 %53, i16* %54, align 2
  call void @opj_read_bytes_LE(i8* %51, i32* nonnull %5, i32 2) #3
  %55 = getelementptr inbounds i8, i8* %49, i64 6
  %56 = load i32, i32* %5, align 4
  %57 = trunc i32 %56 to i16
  %58 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %30, i64 %48, i32 1
  store i16 %57, i16* %58, align 2
  call void @opj_read_bytes_LE(i8* %55, i32* nonnull %5, i32 2) #3
  %59 = load i32, i32* %5, align 4
  %60 = trunc i32 %59 to i16
  %61 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %30, i64 %48, i32 2
  store i16 %60, i16* %61, align 2
  %62 = add nuw nsw i64 %48, 1
  %63 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %7, align 8
  %64 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %63, i64 0, i32 1
  %65 = load i16, i16* %64, align 8
  %66 = zext i16 %65 to i64
  %67 = icmp ult i64 %62, %66
  br i1 %67, label %47, label %68

68:                                               ; preds = %47, %37, %26, %4, %36, %24, %18, %12
  %69 = phi i32 [ 0, %12 ], [ 0, %18 ], [ 0, %24 ], [ 0, %36 ], [ 0, %4 ], [ 0, %26 ], [ 1, %37 ], [ 1, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #3
  ret i32 %69
}

declare void @opj_read_bytes_BE(i8*, i32*, i32) local_unnamed_addr #1

declare i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list*) local_unnamed_addr #1

declare void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list*) local_unnamed_addr #1

declare void @opj_procedure_list_clear(%struct.opj_procedure_list*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_default_validation(%struct.opj_jp2* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr* nocapture readnone) #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 22
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 23
  %7 = load i32, i32* %6, align 8
  %8 = or i32 %7, %5
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %11 = load %struct.opj_j2k*, %struct.opj_j2k** %10, align 8
  %12 = icmp ne %struct.opj_j2k* %11, null
  %13 = and i1 %9, %12
  %14 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  %15 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %14, align 8
  %16 = icmp ne %struct.opj_procedure_list* %15, null
  %17 = and i1 %13, %16
  %18 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %19 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %18, align 8
  %20 = icmp ne %struct.opj_procedure_list* %19, null
  %21 = and i1 %17, %20
  %22 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 0
  %25 = and i1 %21, %24
  %26 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = icmp ne i32 %27, 0
  %29 = and i1 %25, %28
  %30 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp ne i32 %31, 0
  %33 = and i1 %29, %32
  %34 = zext i1 %33 to i32
  %35 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %115, label %38

38:                                               ; preds = %3
  %39 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  %40 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %39, align 8
  %41 = zext i32 %36 to i64
  %42 = icmp ult i32 %36, 9
  br i1 %42, label %101, label %43

43:                                               ; preds = %38
  %44 = and i64 %41, 7
  %45 = icmp eq i64 %44, 0
  %46 = select i1 %45, i64 8, i64 %44
  %47 = sub nsw i64 %41, %46
  %48 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %34, i32 0
  br label %49

49:                                               ; preds = %49, %43
  %50 = phi i64 [ 0, %43 ], [ %92, %49 ]
  %51 = phi <4 x i32> [ %48, %43 ], [ %90, %49 ]
  %52 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %43 ], [ %91, %49 ]
  %53 = or i64 %50, 1
  %54 = or i64 %50, 2
  %55 = or i64 %50, 3
  %56 = or i64 %50, 4
  %57 = or i64 %50, 5
  %58 = or i64 %50, 6
  %59 = or i64 %50, 7
  %60 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %50, i32 2
  %61 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %53, i32 2
  %62 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %54, i32 2
  %63 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %55, i32 2
  %64 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %56, i32 2
  %65 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %57, i32 2
  %66 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %58, i32 2
  %67 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %59, i32 2
  %68 = load i32, i32* %60, align 4
  %69 = load i32, i32* %61, align 4
  %70 = load i32, i32* %62, align 4
  %71 = load i32, i32* %63, align 4
  %72 = insertelement <4 x i32> undef, i32 %68, i32 0
  %73 = insertelement <4 x i32> %72, i32 %69, i32 1
  %74 = insertelement <4 x i32> %73, i32 %70, i32 2
  %75 = insertelement <4 x i32> %74, i32 %71, i32 3
  %76 = load i32, i32* %64, align 4
  %77 = load i32, i32* %65, align 4
  %78 = load i32, i32* %66, align 4
  %79 = load i32, i32* %67, align 4
  %80 = insertelement <4 x i32> undef, i32 %76, i32 0
  %81 = insertelement <4 x i32> %80, i32 %77, i32 1
  %82 = insertelement <4 x i32> %81, i32 %78, i32 2
  %83 = insertelement <4 x i32> %82, i32 %79, i32 3
  %84 = and <4 x i32> %75, <i32 126, i32 126, i32 126, i32 126>
  %85 = and <4 x i32> %83, <i32 126, i32 126, i32 126, i32 126>
  %86 = icmp ult <4 x i32> %84, <i32 38, i32 38, i32 38, i32 38>
  %87 = icmp ult <4 x i32> %85, <i32 38, i32 38, i32 38, i32 38>
  %88 = zext <4 x i1> %86 to <4 x i32>
  %89 = zext <4 x i1> %87 to <4 x i32>
  %90 = and <4 x i32> %51, %88
  %91 = and <4 x i32> %52, %89
  %92 = add i64 %50, 8
  %93 = icmp eq i64 %92, %47
  br i1 %93, label %94, label %49, !llvm.loop !13

94:                                               ; preds = %49
  %95 = and <4 x i32> %91, %90
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %97 = and <4 x i32> %95, %96
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %99 = and <4 x i32> %97, %98
  %100 = extractelement <4 x i32> %99, i32 0
  br label %101

101:                                              ; preds = %94, %38
  %102 = phi i64 [ 0, %38 ], [ %47, %94 ]
  %103 = phi i32 [ %34, %38 ], [ %100, %94 ]
  br label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %113, %104 ], [ %102, %101 ]
  %106 = phi i32 [ %112, %104 ], [ %103, %101 ]
  %107 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %40, i64 %105, i32 2
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, 126
  %110 = icmp ult i32 %109, 38
  %111 = zext i1 %110 to i32
  %112 = and i32 %106, %111
  %113 = add nuw nsw i64 %105, 1
  %114 = icmp ult i64 %113, %41
  br i1 %114, label %104, label %115, !llvm.loop !14

115:                                              ; preds = %104, %3
  %116 = phi i32 [ %34, %3 ], [ %112, %104 ]
  %117 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  %118 = load i32, i32* %117, align 4
  %119 = add i32 %118, -1
  %120 = icmp ult i32 %119, 2
  %121 = zext i1 %120 to i32
  %122 = tail call i32 @opj_stream_has_seek(%struct.opj_stream_private* %1) #3
  %123 = and i32 %122, %116
  %124 = and i32 %123, %121
  ret i32 %124
}

declare i32 @opj_stream_has_seek(%struct.opj_stream_private*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_write_jp(%struct.opj_jp2* nocapture readnone, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = alloca [12 x i8], align 1
  %5 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %5) #3
  %6 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 4
  %7 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 -86, i64 12, i1 false)
  call void @opj_write_bytes_LE(i8* nonnull %5, i32 12, i32 4) #3
  call void @opj_write_bytes_LE(i8* %6, i32 1783636000, i32 4) #3
  call void @opj_write_bytes_LE(i8* %7, i32 218793738, i32 4) #3
  %8 = call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* nonnull %5, i64 12, %struct.opj_event_mgr* %2) #3
  %9 = icmp eq i64 %8, 12
  %10 = zext i1 %9 to i32
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %5) #3
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_write_ftyp(%struct.opj_jp2* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  %5 = load i32, i32* %4, align 4
  %6 = shl i32 %5, 2
  %7 = add i32 %6, 16
  %8 = zext i32 %7 to i64
  %9 = tail call i8* @opj_calloc(i64 1, i64 %8) #3
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.73, i64 0, i64 0)) #3
  br label %42

13:                                               ; preds = %3
  tail call void @opj_write_bytes_LE(i8* nonnull %9, i32 %7, i32 4) #3
  %14 = getelementptr inbounds i8, i8* %9, i64 4
  tail call void @opj_write_bytes_LE(i8* %14, i32 1718909296, i32 4) #3
  %15 = getelementptr inbounds i8, i8* %9, i64 8
  %16 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 14
  %17 = load i32, i32* %16, align 4
  tail call void @opj_write_bytes_LE(i8* %15, i32 %17, i32 4) #3
  %18 = getelementptr inbounds i8, i8* %9, i64 12
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 15
  %20 = load i32, i32* %19, align 8
  tail call void @opj_write_bytes_LE(i8* %18, i32 %20, i32 4) #3
  %21 = getelementptr inbounds i8, i8* %9, i64 16
  %22 = load i32, i32* %4, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  br label %26

26:                                               ; preds = %24, %26
  %27 = phi i64 [ 0, %24 ], [ %31, %26 ]
  %28 = load i32*, i32** %25, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 %27
  %30 = load i32, i32* %29, align 4
  tail call void @opj_write_bytes_LE(i8* %21, i32 %30, i32 4) #3
  %31 = add nuw nsw i64 %27, 1
  %32 = load i32, i32* %4, align 4
  %33 = zext i32 %32 to i64
  %34 = icmp ult i64 %31, %33
  br i1 %34, label %26, label %35

35:                                               ; preds = %26, %13
  %36 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* nonnull %9, i64 %8, %struct.opj_event_mgr* %2) #3
  %37 = icmp eq i64 %36, %8
  %38 = zext i1 %37 to i32
  br i1 %37, label %41, label %39

39:                                               ; preds = %35
  %40 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.74, i64 0, i64 0)) #3
  br label %41

41:                                               ; preds = %39, %35
  tail call void @opj_free(i8* nonnull %9) #3
  br label %42

42:                                               ; preds = %41, %11
  %43 = phi i32 [ 0, %11 ], [ %38, %41 ]
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_write_jp2h(%struct.opj_jp2*, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = alloca [4 x %struct.opj_jp2_img_header_writer_handler], align 16
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to [8 x i8]*
  %7 = bitcast [4 x %struct.opj_jp2_img_header_writer_handler]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #3
  %8 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #3
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %10 = getelementptr inbounds [4 x %struct.opj_jp2_img_header_writer_handler], [4 x %struct.opj_jp2_img_header_writer_handler]* %4, i64 0, i64 0
  store i64 -6148914691236517206, i64* %5, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 96, i1 false)
  %11 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 255
  %14 = getelementptr inbounds [4 x %struct.opj_jp2_img_header_writer_handler], [4 x %struct.opj_jp2_img_header_writer_handler]* %4, i64 0, i64 0, i32 0
  store i8* (%struct.opj_jp2*, i32*)* @opj_jp2_write_ihdr, i8* (%struct.opj_jp2*, i32*)** %14, align 16
  %15 = getelementptr inbounds [4 x %struct.opj_jp2_img_header_writer_handler], [4 x %struct.opj_jp2_img_header_writer_handler]* %4, i64 0, i64 1, i32 0
  br i1 %13, label %16, label %18

16:                                               ; preds = %3
  store i8* (%struct.opj_jp2*, i32*)* @opj_jp2_write_bpcc, i8* (%struct.opj_jp2*, i32*)** %15, align 8
  %17 = getelementptr inbounds [4 x %struct.opj_jp2_img_header_writer_handler], [4 x %struct.opj_jp2_img_header_writer_handler]* %4, i64 0, i64 2, i32 0
  store i8* (%struct.opj_jp2*, i32*)* @opj_jp2_write_colr, i8* (%struct.opj_jp2*, i32*)** %17, align 16
  br label %19

18:                                               ; preds = %3
  store i8* (%struct.opj_jp2*, i32*)* @opj_jp2_write_colr, i8* (%struct.opj_jp2*, i32*)** %15, align 8
  br label %19

19:                                               ; preds = %18, %16
  %20 = phi i32 [ 3, %16 ], [ 2, %18 ]
  %21 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %22 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %21, align 8
  %23 = icmp eq %struct.opj_jp2_cdef* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %19
  %25 = zext i32 %20 to i64
  %26 = getelementptr inbounds [4 x %struct.opj_jp2_img_header_writer_handler], [4 x %struct.opj_jp2_img_header_writer_handler]* %4, i64 0, i64 %25, i32 0
  store i8* (%struct.opj_jp2*, i32*)* @opj_jp2_write_cdef, i8* (%struct.opj_jp2*, i32*)** %26, align 8
  %27 = add nuw nsw i32 %20, 1
  br label %28

28:                                               ; preds = %19, %24
  %29 = phi i32 [ %27, %24 ], [ %20, %19 ]
  call void @opj_write_bytes_LE(i8* %9, i32 1785737832, i32 4) #3
  br label %30

30:                                               ; preds = %40, %28
  %31 = phi i32 [ 8, %28 ], [ %42, %40 ]
  %32 = phi i32 [ 0, %28 ], [ %44, %40 ]
  %33 = phi %struct.opj_jp2_img_header_writer_handler* [ %10, %28 ], [ %43, %40 ]
  %34 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %33, i64 0, i32 0
  %35 = load i8* (%struct.opj_jp2*, i32*)*, i8* (%struct.opj_jp2*, i32*)** %34, align 8
  %36 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %33, i64 0, i32 2
  %37 = call i8* %35(%struct.opj_jp2* %0, i32* %36) #3
  %38 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %33, i64 0, i32 1
  store i8* %37, i8** %38, align 8
  %39 = icmp eq i8* %37, null
  br i1 %39, label %46, label %40

40:                                               ; preds = %30
  %41 = load i32, i32* %36, align 8
  %42 = add i32 %41, %31
  %43 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %33, i64 1
  %44 = add nuw nsw i32 %32, 1
  %45 = icmp eq i32 %44, %29
  br i1 %45, label %59, label %30

46:                                               ; preds = %30
  %47 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.75, i64 0, i64 0)) #3
  br label %48

48:                                               ; preds = %55, %46
  %49 = phi i32 [ 0, %46 ], [ %57, %55 ]
  %50 = phi %struct.opj_jp2_img_header_writer_handler* [ %10, %46 ], [ %56, %55 ]
  %51 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %50, i64 0, i32 1
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %48
  call void @opj_free(i8* nonnull %52) #3
  br label %55

55:                                               ; preds = %48, %54
  %56 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %50, i64 1
  %57 = add nuw nsw i32 %49, 1
  %58 = icmp eq i32 %57, %29
  br i1 %58, label %93, label %48

59:                                               ; preds = %40
  call void @opj_write_bytes_LE(i8* nonnull %8, i32 %42, i32 4) #3
  %60 = call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* nonnull %8, i64 8, %struct.opj_event_mgr* %2) #3
  %61 = icmp eq i64 %60, 8
  br i1 %61, label %62, label %78

62:                                               ; preds = %59, %74
  %63 = phi i32 [ %76, %74 ], [ 0, %59 ]
  %64 = phi %struct.opj_jp2_img_header_writer_handler* [ %75, %74 ], [ %10, %59 ]
  %65 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %64, i64 0, i32 1
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %64, i64 0, i32 2
  %68 = load i32, i32* %67, align 8
  %69 = zext i32 %68 to i64
  %70 = call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %66, i64 %69, %struct.opj_event_mgr* %2) #3
  %71 = load i32, i32* %67, align 8
  %72 = zext i32 %71 to i64
  %73 = icmp eq i64 %70, %72
  br i1 %73, label %74, label %78

74:                                               ; preds = %62
  %75 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %64, i64 1
  %76 = add nuw nsw i32 %63, 1
  %77 = icmp eq i32 %76, %29
  br i1 %77, label %80, label %62

78:                                               ; preds = %62, %59
  %79 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.76, i64 0, i64 0)) #3
  br label %80

80:                                               ; preds = %74, %78
  %81 = phi i32 [ 0, %78 ], [ 1, %74 ]
  br label %82

82:                                               ; preds = %89, %80
  %83 = phi i32 [ 0, %80 ], [ %91, %89 ]
  %84 = phi %struct.opj_jp2_img_header_writer_handler* [ %10, %80 ], [ %90, %89 ]
  %85 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %84, i64 0, i32 1
  %86 = load i8*, i8** %85, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %82
  call void @opj_free(i8* nonnull %86) #3
  br label %89

89:                                               ; preds = %82, %88
  %90 = getelementptr inbounds %struct.opj_jp2_img_header_writer_handler, %struct.opj_jp2_img_header_writer_handler* %84, i64 1
  %91 = add nuw nsw i32 %83, 1
  %92 = icmp eq i32 %91, %29
  br i1 %92, label %93, label %82

93:                                               ; preds = %89, %55
  %94 = phi i32 [ 0, %55 ], [ %81, %89 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #3
  ret i32 %94
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jpip_skip_iptr(%struct.opj_jp2* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #3
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 20
  store i64 %4, i64* %5, align 8
  %6 = tail call i64 @opj_stream_skip(%struct.opj_stream_private* %1, i64 24, %struct.opj_event_mgr* %2) #3
  %7 = icmp eq i64 %6, 24
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_jp2_skip_jp2c(%struct.opj_jp2* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #0 {
  %4 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #3
  %5 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 19
  store i64 %4, i64* %5, align 8
  %6 = tail call i64 @opj_stream_skip(%struct.opj_stream_private* %1, i64 8, %struct.opj_event_mgr* %2) #3
  %7 = icmp eq i64 %6, 8
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @opj_jp2_write_ihdr(%struct.opj_jp2* nocapture readonly, i32* nocapture) #0 {
  %3 = tail call i8* @opj_calloc(i64 1, i64 22) #3
  %4 = icmp eq i8* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %2
  tail call void @opj_write_bytes_LE(i8* nonnull %3, i32 22, i32 4) #3
  %6 = getelementptr inbounds i8, i8* %3, i64 4
  tail call void @opj_write_bytes_LE(i8* %6, i32 1768449138, i32 4) #3
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  tail call void @opj_write_bytes_LE(i8* %7, i32 %9, i32 4) #3
  %10 = getelementptr inbounds i8, i8* %3, i64 12
  %11 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  tail call void @opj_write_bytes_LE(i8* %10, i32 %12, i32 4) #3
  %13 = getelementptr inbounds i8, i8* %3, i64 16
  %14 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  tail call void @opj_write_bytes_LE(i8* %13, i32 %15, i32 2) #3
  %16 = getelementptr inbounds i8, i8* %3, i64 18
  %17 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  %18 = load i32, i32* %17, align 4
  tail call void @opj_write_bytes_LE(i8* %16, i32 %18, i32 1) #3
  %19 = getelementptr inbounds i8, i8* %3, i64 19
  %20 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 7
  %21 = load i32, i32* %20, align 8
  tail call void @opj_write_bytes_LE(i8* %19, i32 %21, i32 1) #3
  %22 = getelementptr inbounds i8, i8* %3, i64 20
  %23 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 8
  %24 = load i32, i32* %23, align 4
  tail call void @opj_write_bytes_LE(i8* %22, i32 %24, i32 1) #3
  %25 = getelementptr inbounds i8, i8* %3, i64 21
  %26 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 9
  %27 = load i32, i32* %26, align 8
  tail call void @opj_write_bytes_LE(i8* %25, i32 %27, i32 1) #3
  store i32 22, i32* %1, align 4
  br label %28

28:                                               ; preds = %2, %5
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @opj_jp2_write_bpcc(%struct.opj_jp2* nocapture readonly, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, 8
  %6 = zext i32 %5 to i64
  %7 = tail call i8* @opj_calloc(i64 1, i64 %6) #3
  %8 = icmp eq i8* %7, null
  br i1 %8, label %28, label %9

9:                                                ; preds = %2
  tail call void @opj_write_bytes_LE(i8* nonnull %7, i32 %5, i32 4) #3
  %10 = getelementptr inbounds i8, i8* %7, i64 4
  tail call void @opj_write_bytes_LE(i8* %10, i32 1651532643, i32 4) #3
  %11 = load i32, i32* %3, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %27, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %7, i64 8
  %15 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  br label %16

16:                                               ; preds = %13, %16
  %17 = phi i64 [ 0, %13 ], [ %23, %16 ]
  %18 = phi i8* [ %14, %13 ], [ %22, %16 ]
  %19 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %15, align 8
  %20 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %19, i64 %17, i32 2
  %21 = load i32, i32* %20, align 4
  tail call void @opj_write_bytes_LE(i8* %18, i32 %21, i32 1) #3
  %22 = getelementptr inbounds i8, i8* %18, i64 1
  %23 = add nuw nsw i64 %17, 1
  %24 = load i32, i32* %3, align 8
  %25 = zext i32 %24 to i64
  %26 = icmp ult i64 %23, %25
  br i1 %26, label %16, label %27

27:                                               ; preds = %16, %9
  store i32 %5, i32* %1, align 4
  br label %28

28:                                               ; preds = %2, %27
  ret i8* %7
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @opj_jp2_write_colr(%struct.opj_jp2* nocapture readonly, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %48 [
    i32 1, label %9
    i32 2, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, 11
  br label %9

9:                                                ; preds = %2, %5
  %10 = phi i32 [ %8, %5 ], [ 15, %2 ]
  %11 = zext i32 %10 to i64
  %12 = tail call i8* @opj_calloc(i64 1, i64 %11) #3
  %13 = icmp eq i8* %12, null
  br i1 %13, label %48, label %14

14:                                               ; preds = %9
  tail call void @opj_write_bytes_LE(i8* nonnull %12, i32 %10, i32 4) #3
  %15 = getelementptr inbounds i8, i8* %12, i64 4
  tail call void @opj_write_bytes_LE(i8* %15, i32 1668246642, i32 4) #3
  %16 = getelementptr inbounds i8, i8* %12, i64 8
  %17 = load i32, i32* %3, align 4
  tail call void @opj_write_bytes_LE(i8* %16, i32 %17, i32 1) #3
  %18 = getelementptr inbounds i8, i8* %12, i64 9
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 13
  %20 = load i32, i32* %19, align 8
  tail call void @opj_write_bytes_LE(i8* %18, i32 %20, i32 1) #3
  %21 = getelementptr inbounds i8, i8* %12, i64 10
  %22 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  %23 = load i32, i32* %22, align 8
  tail call void @opj_write_bytes_LE(i8* %21, i32 %23, i32 1) #3
  %24 = getelementptr inbounds i8, i8* %12, i64 11
  %25 = load i32, i32* %3, align 4
  switch i32 %25, label %47 [
    i32 1, label %32
    i32 2, label %26
  ]

26:                                               ; preds = %14
  %27 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %47, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 0
  br label %35

32:                                               ; preds = %14
  %33 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %34 = load i32, i32* %33, align 4
  tail call void @opj_write_bytes_LE(i8* %24, i32 %34, i32 4) #3
  br label %47

35:                                               ; preds = %30, %35
  %36 = phi i64 [ 0, %30 ], [ %43, %35 ]
  %37 = phi i8* [ %24, %30 ], [ %42, %35 ]
  %38 = load i8*, i8** %31, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 %36
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  tail call void @opj_write_bytes_LE(i8* %37, i32 %41, i32 1) #3
  %42 = getelementptr inbounds i8, i8* %37, i64 1
  %43 = add nuw nsw i64 %36, 1
  %44 = load i32, i32* %27, align 8
  %45 = zext i32 %44 to i64
  %46 = icmp ult i64 %43, %45
  br i1 %46, label %35, label %47

47:                                               ; preds = %35, %26, %14, %32
  store i32 %10, i32* %1, align 4
  br label %48

48:                                               ; preds = %9, %2, %47
  %49 = phi i8* [ %12, %47 ], [ null, %2 ], [ null, %9 ]
  ret i8* %49
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @opj_jp2_write_cdef(%struct.opj_jp2* nocapture readonly, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 24, i32 2
  %4 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %3, align 8
  %5 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %4, i64 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = mul nuw nsw i32 %7, 6
  %9 = add nuw nsw i32 %8, 10
  %10 = zext i32 %9 to i64
  %11 = tail call i8* @opj_malloc(i64 %10) #3
  %12 = icmp eq i8* %11, null
  br i1 %12, label %57, label %13

13:                                               ; preds = %2
  tail call void @opj_write_bytes_LE(i8* nonnull %11, i32 %9, i32 4) #3
  %14 = getelementptr inbounds i8, i8* %11, i64 4
  tail call void @opj_write_bytes_LE(i8* %14, i32 1667523942, i32 4) #3
  %15 = getelementptr inbounds i8, i8* %11, i64 8
  %16 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %3, align 8
  %17 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %16, i64 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  tail call void @opj_write_bytes_LE(i8* %15, i32 %19, i32 2) #3
  %20 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %3, align 8
  %21 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %20, i64 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = icmp eq i16 %22, 0
  br i1 %23, label %56, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds i8, i8* %11, i64 10
  br label %26

26:                                               ; preds = %24, %26
  %27 = phi i64 [ 0, %24 ], [ %50, %26 ]
  %28 = phi %struct.opj_jp2_cdef* [ %20, %24 ], [ %51, %26 ]
  %29 = phi i8* [ %25, %24 ], [ %49, %26 ]
  %30 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %28, i64 0, i32 0
  %31 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %30, align 8
  %32 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %31, i64 %27, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  tail call void @opj_write_bytes_LE(i8* %29, i32 %34, i32 2) #3
  %35 = getelementptr inbounds i8, i8* %29, i64 2
  %36 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %3, align 8
  %37 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %36, i64 0, i32 0
  %38 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %37, align 8
  %39 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %38, i64 %27, i32 1
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  tail call void @opj_write_bytes_LE(i8* %35, i32 %41, i32 2) #3
  %42 = getelementptr inbounds i8, i8* %29, i64 4
  %43 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %3, align 8
  %44 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %43, i64 0, i32 0
  %45 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %44, align 8
  %46 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %45, i64 %27, i32 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  tail call void @opj_write_bytes_LE(i8* %42, i32 %48, i32 2) #3
  %49 = getelementptr inbounds i8, i8* %29, i64 6
  %50 = add nuw nsw i64 %27, 1
  %51 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %3, align 8
  %52 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %51, i64 0, i32 1
  %53 = load i16, i16* %52, align 8
  %54 = zext i16 %53 to i64
  %55 = icmp ult i64 %50, %54
  br i1 %55, label %26, label %56

56:                                               ; preds = %26, %13
  store i32 %9, i32* %1, align 4
  br label %57

57:                                               ; preds = %2, %56
  ret i8* %11
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !8}
!14 = distinct !{!14, !15, !8}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
