; ModuleID = '../../third_party/angle/src/libANGLE/renderer/null/ImageNULL.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/null/ImageNULL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::ImageNULL" = type { %"class.rx::ImageImpl" }
%"class.rx::ImageImpl" = type { i32 (...)**, %"struct.egl::ImageState"* }
%"struct.egl::ImageState" = type opaque
%"class.egl::Error" = type { i32, i32, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.egl::Display" = type opaque
%"class.gl::Context" = type opaque
%"class.egl::ImageSibling" = type opaque

$_ZN2rx9ImageImpl9onDestroyEPKN3egl7DisplayE = comdat any

@_ZTVN2rx9ImageNULLE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::ImageNULL"*)* @_ZN2rx9ImageNULLD2Ev to i8*), i8* bitcast (void (%"class.rx::ImageNULL"*)* @_ZN2rx9ImageNULLD0Ev to i8*), i8* bitcast (void (%"class.rx::ImageImpl"*, %"class.egl::Display"*)* @_ZN2rx9ImageImpl9onDestroyEPKN3egl7DisplayE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::ImageNULL"*, %"class.egl::Display"*)* @_ZN2rx9ImageNULL10initializeEPKN3egl7DisplayE to i8*), i8* bitcast (i32 (%"class.rx::ImageNULL"*, %"class.gl::Context"*, %"class.egl::ImageSibling"*)* @_ZN2rx9ImageNULL6orphanEPKN2gl7ContextEPN3egl12ImageSiblingE to i8*)] }, align 8

@_ZN2rx9ImageNULLC1ERKN3egl10ImageStateE = hidden unnamed_addr alias void (%"class.rx::ImageNULL"*, %"struct.egl::ImageState"*), void (%"class.rx::ImageNULL"*, %"struct.egl::ImageState"*)* @_ZN2rx9ImageNULLC2ERKN3egl10ImageStateE
@_ZN2rx9ImageNULLD1Ev = hidden unnamed_addr alias void (%"class.rx::ImageNULL"*), void (%"class.rx::ImageNULL"*)* @_ZN2rx9ImageNULLD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx9ImageNULLC2ERKN3egl10ImageStateE(%"class.rx::ImageNULL"* nocapture, %"struct.egl::ImageState"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.rx::ImageNULL", %"class.rx::ImageNULL"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.rx::ImageNULL", %"class.rx::ImageNULL"* %0, i64 0, i32 0, i32 1
  store %"struct.egl::ImageState"* %1, %"struct.egl::ImageState"** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2rx9ImageNULLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2rx9ImageNULLD2Ev(%"class.rx::ImageNULL"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ImageNULLD0Ev(%"class.rx::ImageNULL"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.rx::ImageNULL"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx9ImageNULL10initializeEPKN3egl7DisplayE(%"class.egl::Error"* noalias nocapture sret, %"class.rx::ImageNULL"* nocapture readnone, %"class.egl::Display"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %4, align 8, !alias.scope !2
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4, !alias.scope !2
  %6 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 0, i64* %7, align 8, !alias.scope !2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2rx9ImageNULL6orphanEPKN2gl7ContextEPN3egl12ImageSiblingE(%"class.rx::ImageNULL"* nocapture readnone, %"class.gl::Context"* nocapture readnone, %"class.egl::ImageSibling"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ImageImpl9onDestroyEPKN3egl7DisplayE(%"class.rx::ImageImpl"*, %"class.egl::Display"*) unnamed_addr #2 comdat align 2 {
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!4 = distinct !{!4, !"_ZN3egl5Error7NoErrorEv"}
!5 = distinct !{!5, !6, !"_ZN3egl7NoErrorEv: argument 0"}
!6 = distinct !{!6, !"_ZN3egl7NoErrorEv"}
