; ModuleID = '../../v8/src/numbers/strtod.cc'
source_filename = "../../v8/src/numbers/strtod.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::DiyFp" = type <{ i64, i32, [4 x i8] }>
%"class.v8::internal::Bignum" = type { [128 x i32], %"class.v8::internal::Vector.0", i32, i32 }
%"class.v8::internal::Vector.0" = type { i32*, i64 }

@_ZN2v88internalL19exact_powers_of_tenE = internal unnamed_addr constant [23 x double] [double 1.000000e+00, double 1.000000e+01, double 1.000000e+02, double 1.000000e+03, double 1.000000e+04, double 1.000000e+05, double 1.000000e+06, double 1.000000e+07, double 1.000000e+08, double 1.000000e+09, double 1.000000e+10, double 1.000000e+11, double 1.000000e+12, double 1.000000e+13, double 1.000000e+14, double 1.000000e+15, double 1.000000e+16, double 1.000000e+17, double 1.000000e+18, double 1.000000e+19, double 1.000000e+20, double 1.000000e+21, double 1.000000e+22], align 16
@_ZN2v88internal16PowersOfTenCache19kMinDecimalExponentE = external local_unnamed_addr constant i32, align 4
@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@switch.table._ZN2v88internal6StrtodENS0_6VectorIKcEEi = private unnamed_addr constant [7 x i32] [i32 -60, i32 -57, i32 -54, i32 -50, i32 -47, i32 -44, i32 -40], align 4
@switch.table._ZN2v88internal6StrtodENS0_6VectorIKcEEi.1 = private unnamed_addr constant [7 x i64] [i64 -6917529027641081856, i64 -4035225266123964416, i64 -432345564227567616, i64 -7187745005283311616, i64 -4372995238176751616, i64 -854558029293551616, i64 -7451627795949551616], align 8

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8*, i64, i32) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::DiyFp", align 8
  %5 = alloca %"class.v8::internal::DiyFp", align 8
  %6 = alloca i32, align 4
  %7 = alloca { i64, i32 }, align 8
  %8 = alloca [780 x i8], align 16
  %9 = getelementptr inbounds [780 x i8], [780 x i8]* %8, i64 0, i64 0
  %10 = trunc i64 %1 to i32
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %28

12:                                               ; preds = %3
  %13 = and i64 %1, 4294967295
  br label %16

14:                                               ; preds = %16
  %15 = icmp eq i64 %21, %13
  br i1 %15, label %28, label %16

16:                                               ; preds = %14, %12
  %17 = phi i64 [ 0, %12 ], [ %21, %14 ]
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 48
  %21 = add nuw nsw i64 %17, 1
  br i1 %20, label %14, label %22

22:                                               ; preds = %16
  %23 = and i64 %17, 4294967295
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  %25 = shl i64 %1, 32
  %26 = ashr exact i64 %25, 32
  %27 = sub nsw i64 %26, %23
  br label %28

28:                                               ; preds = %14, %3, %22
  %29 = phi i8* [ %24, %22 ], [ %0, %3 ], [ %0, %14 ]
  %30 = phi i64 [ %27, %22 ], [ 0, %3 ], [ 0, %14 ]
  %31 = shl i64 %30, 32
  %32 = ashr exact i64 %31, 32
  br label %33

33:                                               ; preds = %37, %28
  %34 = phi i64 [ %35, %37 ], [ %32, %28 ]
  %35 = add nsw i64 %34, -1
  %36 = icmp sgt i64 %34, 0
  br i1 %36, label %37, label %355

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %29, i64 %35
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 48
  br i1 %40, label %33, label %41

41:                                               ; preds = %37
  %42 = shl i64 %34, 32
  %43 = ashr exact i64 %42, 32
  %44 = trunc i64 %30 to i32
  %45 = trunc i64 %43 to i32
  %46 = sub nsw i32 %44, %45
  %47 = add nsw i32 %46, %2
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %355, label %49

49:                                               ; preds = %41
  %50 = icmp sgt i32 %45, 780
  br i1 %50, label %51, label %57

51:                                               ; preds = %49
  %52 = getelementptr inbounds [780 x i8], [780 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 780, i8* nonnull %52) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %9, i8* align 1 %29, i64 779, i1 false)
  %53 = getelementptr inbounds [780 x i8], [780 x i8]* %8, i64 0, i64 779
  store i8 49, i8* %53, align 1
  %54 = add nsw i32 %45, -780
  %55 = add nsw i32 %54, %47
  %56 = call double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8* nonnull %52, i64 780, i32 %55)
  call void @llvm.lifetime.end.p0i8(i64 780, i8* nonnull %52) #4
  br label %355

57:                                               ; preds = %49
  %58 = add i32 %44, %2
  %59 = icmp sgt i32 %58, 309
  br i1 %59, label %355, label %60

60:                                               ; preds = %57
  %61 = icmp slt i32 %58, -323
  br i1 %61, label %355, label %62

62:                                               ; preds = %60
  %63 = icmp slt i32 %45, 16
  br i1 %63, label %64, label %148

64:                                               ; preds = %62
  %65 = icmp ugt i32 %47, -23
  br i1 %65, label %66, label %90

66:                                               ; preds = %64
  %67 = sub nsw i32 0, %47
  %68 = icmp sgt i32 %45, 0
  br i1 %68, label %69, label %84

69:                                               ; preds = %66, %69
  %70 = phi i64 [ %72, %69 ], [ 0, %66 ]
  %71 = phi i64 [ %78, %69 ], [ 0, %66 ]
  %72 = add nuw nsw i64 %70, 1
  %73 = getelementptr inbounds i8, i8* %29, i64 %70
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i64
  %76 = mul i64 %71, 10
  %77 = add i64 %76, -48
  %78 = add i64 %77, %75
  %79 = icmp slt i64 %72, %43
  %80 = icmp ult i64 %78, 1844674407370955161
  %81 = and i1 %79, %80
  br i1 %81, label %69, label %82

82:                                               ; preds = %69
  %83 = uitofp i64 %78 to double
  br label %84

84:                                               ; preds = %82, %66
  %85 = phi double [ 0.000000e+00, %66 ], [ %83, %82 ]
  %86 = sext i32 %67 to i64
  %87 = getelementptr inbounds [23 x double], [23 x double]* @_ZN2v88internalL19exact_powers_of_tenE, i64 0, i64 %86
  %88 = load double, double* %87, align 8
  %89 = fdiv double %85, %88
  br label %355

90:                                               ; preds = %64
  %91 = icmp ult i32 %47, 23
  br i1 %91, label %92, label %115

92:                                               ; preds = %90
  %93 = icmp sgt i32 %45, 0
  br i1 %93, label %94, label %109

94:                                               ; preds = %92, %94
  %95 = phi i64 [ %97, %94 ], [ 0, %92 ]
  %96 = phi i64 [ %103, %94 ], [ 0, %92 ]
  %97 = add nuw nsw i64 %95, 1
  %98 = getelementptr inbounds i8, i8* %29, i64 %95
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i64
  %101 = mul i64 %96, 10
  %102 = add i64 %101, -48
  %103 = add i64 %102, %100
  %104 = icmp slt i64 %97, %43
  %105 = icmp ult i64 %103, 1844674407370955161
  %106 = and i1 %104, %105
  br i1 %106, label %94, label %107

107:                                              ; preds = %94
  %108 = uitofp i64 %103 to double
  br label %109

109:                                              ; preds = %107, %92
  %110 = phi double [ 0.000000e+00, %92 ], [ %108, %107 ]
  %111 = sext i32 %47 to i64
  %112 = getelementptr inbounds [23 x double], [23 x double]* @_ZN2v88internalL19exact_powers_of_tenE, i64 0, i64 %111
  %113 = load double, double* %112, align 8
  %114 = fmul double %110, %113
  br label %355

115:                                              ; preds = %90
  %116 = icmp sgt i32 %47, -1
  %117 = sub nsw i32 15, %45
  br i1 %116, label %118, label %148

118:                                              ; preds = %115
  %119 = sub nsw i32 %47, %117
  %120 = icmp slt i32 %119, 23
  br i1 %120, label %121, label %148

121:                                              ; preds = %118
  %122 = icmp sgt i32 %45, 0
  br i1 %122, label %123, label %138

123:                                              ; preds = %121, %123
  %124 = phi i64 [ %126, %123 ], [ 0, %121 ]
  %125 = phi i64 [ %132, %123 ], [ 0, %121 ]
  %126 = add nuw nsw i64 %124, 1
  %127 = getelementptr inbounds i8, i8* %29, i64 %124
  %128 = load i8, i8* %127, align 1
  %129 = sext i8 %128 to i64
  %130 = mul i64 %125, 10
  %131 = add i64 %130, -48
  %132 = add i64 %131, %129
  %133 = icmp slt i64 %126, %43
  %134 = icmp ult i64 %132, 1844674407370955161
  %135 = and i1 %133, %134
  br i1 %135, label %123, label %136

136:                                              ; preds = %123
  %137 = uitofp i64 %132 to double
  br label %138

138:                                              ; preds = %136, %121
  %139 = phi double [ 0.000000e+00, %121 ], [ %137, %136 ]
  %140 = sext i32 %117 to i64
  %141 = getelementptr inbounds [23 x double], [23 x double]* @_ZN2v88internalL19exact_powers_of_tenE, i64 0, i64 %140
  %142 = load double, double* %141, align 8
  %143 = fmul double %139, %142
  %144 = sext i32 %119 to i64
  %145 = getelementptr inbounds [23 x double], [23 x double]* @_ZN2v88internalL19exact_powers_of_tenE, i64 0, i64 %144
  %146 = load double, double* %145, align 8
  %147 = fmul double %143, %146
  br label %355

148:                                              ; preds = %118, %115, %62
  %149 = bitcast { i64, i32 }* %7 to %"class.v8::internal::DiyFp"*
  %150 = bitcast %"class.v8::internal::DiyFp"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %150) #4
  %151 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %4, i64 0, i32 0
  store i64 0, i64* %151, align 8
  %152 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %4, i64 0, i32 1
  store i32 0, i32* %152, align 8
  %153 = icmp sgt i32 %45, 0
  br i1 %153, label %154, label %169

154:                                              ; preds = %148, %154
  %155 = phi i64 [ %157, %154 ], [ 0, %148 ]
  %156 = phi i64 [ %163, %154 ], [ 0, %148 ]
  %157 = add nuw nsw i64 %155, 1
  %158 = getelementptr inbounds i8, i8* %29, i64 %155
  %159 = load i8, i8* %158, align 1
  %160 = sext i8 %159 to i64
  %161 = mul i64 %156, 10
  %162 = add i64 %161, -48
  %163 = add i64 %162, %160
  %164 = icmp slt i64 %157, %43
  %165 = icmp ult i64 %163, 1844674407370955161
  %166 = and i1 %164, %165
  br i1 %166, label %154, label %167

167:                                              ; preds = %154
  %168 = trunc i64 %157 to i32
  br label %169

169:                                              ; preds = %167, %148
  %170 = phi i32 [ 0, %148 ], [ %168, %167 ]
  %171 = phi i64 [ 0, %148 ], [ %163, %167 ]
  %172 = icmp eq i32 %170, %45
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  store i64 %171, i64* %151, align 8
  store i32 0, i32* %152, align 8
  br label %184

174:                                              ; preds = %169
  %175 = sext i32 %170 to i64
  %176 = getelementptr inbounds i8, i8* %29, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = icmp sgt i8 %177, 52
  %179 = zext i1 %178 to i64
  %180 = add i64 %171, %179
  %181 = sub nsw i32 %45, %170
  store i64 %180, i64* %151, align 8
  store i32 0, i32* %152, align 8
  %182 = add nsw i32 %181, %47
  %183 = icmp eq i32 %181, 0
  br i1 %183, label %184, label %187

184:                                              ; preds = %174, %173
  %185 = phi i32 [ %47, %173 ], [ %182, %174 ]
  %186 = phi i64 [ %171, %173 ], [ %180, %174 ]
  br label %187

187:                                              ; preds = %184, %174
  %188 = phi i32 [ %185, %184 ], [ %182, %174 ]
  %189 = phi i64 [ %186, %184 ], [ %180, %174 ]
  %190 = phi i64 [ 0, %184 ], [ 4, %174 ]
  %191 = icmp ult i64 %189, 18014398509481984
  br i1 %191, label %196, label %192

192:                                              ; preds = %196, %187
  %193 = phi i32 [ 0, %187 ], [ %200, %196 ]
  %194 = phi i64 [ %189, %187 ], [ %199, %196 ]
  %195 = icmp sgt i64 %194, -1
  br i1 %195, label %202, label %208

196:                                              ; preds = %187, %196
  %197 = phi i64 [ %199, %196 ], [ %189, %187 ]
  %198 = phi i32 [ %200, %196 ], [ 0, %187 ]
  %199 = shl i64 %197, 10
  %200 = add nsw i32 %198, -10
  %201 = icmp ult i64 %199, 18014398509481984
  br i1 %201, label %196, label %192

202:                                              ; preds = %192, %202
  %203 = phi i64 [ %205, %202 ], [ %194, %192 ]
  %204 = phi i32 [ %206, %202 ], [ %193, %192 ]
  %205 = shl i64 %203, 1
  %206 = add nsw i32 %204, -1
  %207 = icmp sgt i64 %205, -1
  br i1 %207, label %202, label %208

208:                                              ; preds = %202, %192
  %209 = phi i32 [ %193, %192 ], [ %206, %202 ]
  %210 = phi i64 [ %194, %192 ], [ %205, %202 ]
  store i64 %210, i64* %151, align 8
  store i32 %209, i32* %152, align 8
  %211 = sub nsw i32 0, %209
  %212 = zext i32 %211 to i64
  %213 = shl i64 %190, %212
  %214 = load i32, i32* @_ZN2v88internal16PowersOfTenCache19kMinDecimalExponentE, align 4
  %215 = icmp slt i32 %188, %214
  br i1 %215, label %216, label %217

216:                                              ; preds = %208
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %150) #4
  br label %355

217:                                              ; preds = %208
  %218 = bitcast %"class.v8::internal::DiyFp"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %218) #4
  %219 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %5, i64 0, i32 0
  store i64 0, i64* %219, align 8
  %220 = getelementptr inbounds %"class.v8::internal::DiyFp", %"class.v8::internal::DiyFp"* %5, i64 0, i32 1
  store i32 0, i32* %220, align 8
  %221 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %221) #4
  call void @_ZN2v88internal16PowersOfTenCache32GetCachedPowerForDecimalExponentEiPNS0_5DiyFpEPi(i32 %188, %"class.v8::internal::DiyFp"* nonnull %5, i32* nonnull %6) #4
  %222 = load i32, i32* %6, align 4
  %223 = icmp eq i32 %188, %222
  br i1 %223, label %243, label %224

224:                                              ; preds = %217
  %225 = sub nsw i32 %188, %222
  %226 = bitcast { i64, i32 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %226) #4
  %227 = add i32 %225, -1
  %228 = icmp ult i32 %227, 7
  br i1 %228, label %230, label %229

229:                                              ; preds = %224
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #5
  unreachable

230:                                              ; preds = %224
  %231 = sext i32 %227 to i64
  %232 = getelementptr inbounds [7 x i32], [7 x i32]* @switch.table._ZN2v88internal6StrtodENS0_6VectorIKcEEi, i64 0, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = sext i32 %227 to i64
  %235 = getelementptr inbounds [7 x i64], [7 x i64]* @switch.table._ZN2v88internal6StrtodENS0_6VectorIKcEEi.1, i64 0, i64 %234
  %236 = load i64, i64* %235, align 8
  %237 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %7, i64 0, i32 0
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %7, i64 0, i32 1
  store i32 %233, i32* %238, align 8
  call void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"* nonnull %4, %"class.v8::internal::DiyFp"* nonnull dereferenceable(16) %149) #4
  %239 = sub nsw i32 19, %45
  %240 = icmp slt i32 %239, %225
  %241 = add nsw i64 %213, 4
  %242 = select i1 %240, i64 %241, i64 %213
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %226) #4
  br label %243

243:                                              ; preds = %230, %217
  %244 = phi i64 [ %242, %230 ], [ %213, %217 ]
  call void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"* nonnull %4, %"class.v8::internal::DiyFp"* nonnull dereferenceable(16) %5) #4
  %245 = icmp eq i64 %244, 0
  %246 = select i1 %245, i64 8, i64 9
  %247 = add nsw i64 %246, %244
  %248 = load i32, i32* %152, align 8
  %249 = load i64, i64* %151, align 8
  %250 = icmp ult i64 %249, 18014398509481984
  br i1 %250, label %255, label %251

251:                                              ; preds = %255, %243
  %252 = phi i32 [ %248, %243 ], [ %259, %255 ]
  %253 = phi i64 [ %249, %243 ], [ %258, %255 ]
  %254 = icmp sgt i64 %253, -1
  br i1 %254, label %261, label %267

255:                                              ; preds = %243, %255
  %256 = phi i64 [ %258, %255 ], [ %249, %243 ]
  %257 = phi i32 [ %259, %255 ], [ %248, %243 ]
  %258 = shl i64 %256, 10
  %259 = add nsw i32 %257, -10
  %260 = icmp ult i64 %258, 18014398509481984
  br i1 %260, label %255, label %251

261:                                              ; preds = %251, %261
  %262 = phi i64 [ %264, %261 ], [ %253, %251 ]
  %263 = phi i32 [ %265, %261 ], [ %252, %251 ]
  %264 = shl i64 %262, 1
  %265 = add nsw i32 %263, -1
  %266 = icmp sgt i64 %264, -1
  br i1 %266, label %261, label %267

267:                                              ; preds = %261, %251
  %268 = phi i32 [ %252, %251 ], [ %265, %261 ]
  %269 = phi i64 [ %253, %251 ], [ %264, %261 ]
  store i64 %269, i64* %151, align 8
  store i32 %268, i32* %152, align 8
  %270 = sub nsw i32 %248, %268
  %271 = zext i32 %270 to i64
  %272 = shl i64 %247, %271
  %273 = add nsw i32 %268, 64
  %274 = icmp sgt i32 %273, -1022
  br i1 %274, label %289, label %275

275:                                              ; preds = %267
  %276 = icmp slt i32 %273, -1073
  %277 = add nsw i32 %268, 1138
  br i1 %276, label %281, label %278

278:                                              ; preds = %275
  %279 = sub nuw nsw i32 -1074, %268
  %280 = icmp slt i32 %277, 4
  br i1 %280, label %281, label %289

281:                                              ; preds = %278, %275
  %282 = phi i32 [ %277, %278 ], [ 0, %275 ]
  %283 = sub nsw i32 4, %282
  %284 = zext i32 %283 to i64
  %285 = lshr i64 %269, %284
  store i64 %285, i64* %151, align 8
  %286 = add nsw i32 %283, %268
  store i32 %286, i32* %152, align 8
  %287 = ashr i64 %272, %284
  %288 = add nsw i64 %287, 9
  br label %289

289:                                              ; preds = %281, %278, %267
  %290 = phi i32 [ %282, %281 ], [ 4, %278 ], [ 4, %267 ]
  %291 = phi i32 [ %282, %281 ], [ %277, %278 ], [ 53, %267 ]
  %292 = phi i32 [ %286, %281 ], [ %268, %278 ], [ %268, %267 ]
  %293 = phi i64 [ %285, %281 ], [ %269, %278 ], [ %269, %267 ]
  %294 = phi i32 [ 60, %281 ], [ %279, %278 ], [ 11, %267 ]
  %295 = phi i64 [ %288, %281 ], [ %272, %278 ], [ %272, %267 ]
  %296 = zext i32 %294 to i64
  %297 = shl nsw i64 -1, %296
  %298 = xor i64 %297, 2305843009213693951
  %299 = and i64 %298, %293
  %300 = add nsw i32 %294, -1
  %301 = zext i32 %300 to i64
  %302 = shl i64 %299, 3
  %303 = shl i64 8, %301
  %304 = lshr i64 %293, %296
  %305 = add nsw i32 %294, %292
  %306 = add i64 %303, %295
  %307 = icmp ult i64 %302, %306
  br i1 %307, label %315, label %308

308:                                              ; preds = %289
  %309 = add nuw nsw i64 %304, 1
  %310 = icmp ugt i64 %304, 9007199254740990
  br i1 %310, label %311, label %315

311:                                              ; preds = %308
  %312 = add nsw i32 %290, 61
  %313 = sub nsw i32 %312, %291
  %314 = add i32 %313, %292
  br label %315

315:                                              ; preds = %311, %308, %289
  %316 = phi i64 [ %309, %308 ], [ %304, %289 ], [ 4503599627370496, %311 ]
  %317 = phi i32 [ %305, %308 ], [ %305, %289 ], [ %314, %311 ]
  %318 = icmp sgt i32 %317, 971
  br i1 %318, label %348, label %319

319:                                              ; preds = %315
  %320 = icmp slt i32 %317, -1074
  br i1 %320, label %348, label %321

321:                                              ; preds = %319
  %322 = icmp ne i32 %317, -1074
  %323 = and i64 %316, 4503599627370496
  %324 = icmp eq i64 %323, 0
  %325 = and i1 %322, %324
  br i1 %325, label %326, label %335

326:                                              ; preds = %321, %326
  %327 = phi i32 [ %330, %326 ], [ %317, %321 ]
  %328 = phi i64 [ %329, %326 ], [ %316, %321 ]
  %329 = shl i64 %328, 1
  %330 = add nsw i32 %327, -1
  %331 = icmp sgt i32 %330, -1074
  %332 = and i64 %328, 2251799813685248
  %333 = icmp eq i64 %332, 0
  %334 = and i1 %331, %333
  br i1 %334, label %326, label %335

335:                                              ; preds = %326, %321
  %336 = phi i64 [ %316, %321 ], [ %329, %326 ]
  %337 = phi i32 [ %317, %321 ], [ %330, %326 ]
  %338 = phi i1 [ %324, %321 ], [ %333, %326 ]
  %339 = icmp eq i32 %337, -1074
  %340 = and i1 %339, %338
  %341 = add nsw i32 %337, 1075
  %342 = zext i32 %341 to i64
  %343 = shl i64 %342, 52
  %344 = select i1 %340, i64 0, i64 %343
  %345 = and i64 %336, 4503599627370495
  %346 = or i64 %344, %345
  %347 = bitcast i64 %346 to double
  br label %348

348:                                              ; preds = %315, %319, %335
  %349 = phi double [ %347, %335 ], [ 0x7FF0000000000000, %315 ], [ 0.000000e+00, %319 ]
  %350 = sub i64 %303, %295
  %351 = icmp ult i64 %350, %302
  %352 = and i1 %351, %307
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %221) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %218) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %150) #4
  br i1 %352, label %353, label %355

353:                                              ; preds = %348
  %354 = call fastcc double @_ZN2v88internalL12BignumStrtodENS0_6VectorIKcEEid(i8* %29, i64 %43, i32 %47, double %349)
  br label %355

355:                                              ; preds = %33, %348, %138, %109, %84, %353, %216, %57, %60, %41, %51
  %356 = phi double [ %56, %51 ], [ 0.000000e+00, %41 ], [ 0.000000e+00, %60 ], [ 0x7FF0000000000000, %57 ], [ %354, %353 ], [ %349, %348 ], [ 0.000000e+00, %216 ], [ %147, %138 ], [ %114, %109 ], [ %89, %84 ], [ 0.000000e+00, %33 ]
  ret double %356
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc double @_ZN2v88internalL12BignumStrtodENS0_6VectorIKcEEid(i8*, i64, i32, double) unnamed_addr #0 {
  %5 = alloca %"class.v8::internal::Bignum", align 8
  %6 = alloca %"class.v8::internal::Bignum", align 8
  %7 = fcmp oeq double %3, 0x7FF0000000000000
  br i1 %7, label %79, label %8

8:                                                ; preds = %4
  %9 = bitcast double %3 to i64
  %10 = and i64 %9, 9218868437227405312
  %11 = icmp eq i64 %10, 0
  %12 = shl i64 %9, 1
  %13 = and i64 %12, 9007199254740990
  %14 = or i64 %13, 9007199254740992
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = or i64 %15, 1
  br i1 %11, label %22, label %17

17:                                               ; preds = %8
  %18 = lshr i64 %9, 52
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 2047
  %21 = add nsw i32 %20, -1076
  br label %22

22:                                               ; preds = %8, %17
  %23 = phi i32 [ %21, %17 ], [ -1075, %8 ]
  %24 = bitcast %"class.v8::internal::Bignum"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 536, i8* nonnull %24) #4
  call void @_ZN2v88internal6BignumC1Ev(%"class.v8::internal::Bignum"* nonnull %5) #4
  %25 = bitcast %"class.v8::internal::Bignum"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 536, i8* nonnull %25) #4
  call void @_ZN2v88internal6BignumC1Ev(%"class.v8::internal::Bignum"* nonnull %6) #4
  call void @_ZN2v88internal6Bignum19AssignDecimalStringENS0_6VectorIKcEE(%"class.v8::internal::Bignum"* nonnull %5, i8* %0, i64 %1) #4
  call void @_ZN2v88internal6Bignum12AssignUInt64Em(%"class.v8::internal::Bignum"* nonnull %6, i64 %16) #4
  %26 = icmp sgt i32 %2, -1
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  call void @_ZN2v88internal6Bignum20MultiplyByPowerOfTenEi(%"class.v8::internal::Bignum"* nonnull %5, i32 %2) #4
  br label %30

28:                                               ; preds = %22
  %29 = sub nsw i32 0, %2
  call void @_ZN2v88internal6Bignum20MultiplyByPowerOfTenEi(%"class.v8::internal::Bignum"* nonnull %6, i32 %29) #4
  br label %30

30:                                               ; preds = %28, %27
  %31 = icmp sgt i32 %23, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  call void @_ZN2v88internal6Bignum9ShiftLeftEi(%"class.v8::internal::Bignum"* nonnull %6, i32 %23) #4
  br label %35

33:                                               ; preds = %30
  %34 = sub nsw i32 0, %23
  call void @_ZN2v88internal6Bignum9ShiftLeftEi(%"class.v8::internal::Bignum"* nonnull %5, i32 %34) #4
  br label %35

35:                                               ; preds = %33, %32
  %36 = call i32 @_ZN2v88internal6Bignum7CompareERKS1_S3_(%"class.v8::internal::Bignum"* nonnull dereferenceable(536) %5, %"class.v8::internal::Bignum"* nonnull dereferenceable(536) %6) #4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %77, label %38

38:                                               ; preds = %35
  %39 = icmp eq i32 %36, 0
  br i1 %39, label %57, label %40

40:                                               ; preds = %38
  %41 = icmp eq i64 %9, 9218868437227405312
  br i1 %41, label %77, label %42

42:                                               ; preds = %40
  %43 = lshr i64 %9, 32
  %44 = trunc i64 %43 to i32
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %54

46:                                               ; preds = %42
  %47 = and i64 %9, 4503599627370495
  %48 = or i64 %47, 4503599627370496
  %49 = select i1 %11, i64 %47, i64 %48
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %77, label %51

51:                                               ; preds = %46
  %52 = add i64 %9, -1
  %53 = bitcast i64 %52 to double
  br label %77

54:                                               ; preds = %42
  %55 = add i64 %9, 1
  %56 = bitcast i64 %55 to double
  br label %77

57:                                               ; preds = %38
  %58 = and i64 %9, 4503599627370495
  %59 = or i64 %58, 4503599627370496
  %60 = select i1 %11, i64 %58, i64 %59
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %57
  %64 = icmp eq i64 %9, 9218868437227405312
  br i1 %64, label %77, label %65

65:                                               ; preds = %63
  %66 = lshr i64 %9, 32
  %67 = trunc i64 %66 to i32
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %65
  %70 = icmp eq i64 %60, 0
  br i1 %70, label %77, label %71

71:                                               ; preds = %69
  %72 = add i64 %9, -1
  %73 = bitcast i64 %72 to double
  br label %77

74:                                               ; preds = %65
  %75 = add i64 %9, 1
  %76 = bitcast i64 %75 to double
  br label %77

77:                                               ; preds = %74, %71, %69, %63, %54, %51, %46, %40, %57, %35
  %78 = phi double [ %3, %35 ], [ %3, %57 ], [ %53, %51 ], [ %56, %54 ], [ 0.000000e+00, %46 ], [ 0x7FF0000000000000, %40 ], [ %73, %71 ], [ %76, %74 ], [ 0.000000e+00, %69 ], [ 0x7FF0000000000000, %63 ]
  call void @llvm.lifetime.end.p0i8(i64 536, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 536, i8* nonnull %24) #4
  br label %79

79:                                               ; preds = %4, %77
  %80 = phi double [ %78, %77 ], [ 0x7FF0000000000000, %4 ]
  ret double %80
}

declare void @_ZN2v88internal16PowersOfTenCache32GetCachedPowerForDecimalExponentEiPNS0_5DiyFpEPi(i32, %"class.v8::internal::DiyFp"*, i32*) local_unnamed_addr #2

declare void @_ZN2v88internal5DiyFp8MultiplyERKS1_(%"class.v8::internal::DiyFp"*, %"class.v8::internal::DiyFp"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #3

declare void @_ZN2v88internal6BignumC1Ev(%"class.v8::internal::Bignum"*) unnamed_addr #2

declare void @_ZN2v88internal6Bignum19AssignDecimalStringENS0_6VectorIKcEE(%"class.v8::internal::Bignum"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN2v88internal6Bignum12AssignUInt64Em(%"class.v8::internal::Bignum"*, i64) local_unnamed_addr #2

declare void @_ZN2v88internal6Bignum20MultiplyByPowerOfTenEi(%"class.v8::internal::Bignum"*, i32) local_unnamed_addr #2

declare void @_ZN2v88internal6Bignum9ShiftLeftEi(%"class.v8::internal::Bignum"*, i32) local_unnamed_addr #2

declare i32 @_ZN2v88internal6Bignum7CompareERKS1_S3_(%"class.v8::internal::Bignum"* dereferenceable(536), %"class.v8::internal::Bignum"* dereferenceable(536)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
