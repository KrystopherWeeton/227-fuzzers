; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_bitstream.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_bitstream.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vp9_token = type { i32, i32 }
%struct.vp9_extra_bit = type { i8*, i32, i32, i16* }
%struct.anon.8 = type { i8, i8 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type { i8*, i32, %struct.vpx_writer, i32, i32, [1 x [4 x i32]], %struct.macroblockd }
%struct.vpx_writer = type { i32, i32, i32, i32, i8* }
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vpx_write_bit_buffer = type { i8*, i64 }
%struct.VPxWorkerInterface = type { void (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)* }

@write_interp_filter.filter_to_literal = internal unnamed_addr constant [4 x i32] [i32 1, i32 0, i32 2, i32 3], align 16
@vp9_inter_mode_tree = external constant [6 x i8], align 1
@vp9_intra_mode_tree = external constant [18 x i8], align 16
@vp9_partition_tree = external constant [6 x i8], align 1
@tx_mode_to_biggest_tx_size = external local_unnamed_addr constant [5 x i8], align 1
@vp9_coef_tree = external constant [0 x i8], align 1
@vp9_prob_cost = external local_unnamed_addr constant [256 x i16], align 16
@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16
@vp9_switchable_interp_tree = external constant [4 x i8], align 1
@vp9_kf_partition_probs = external constant [16 x [3 x i8]], align 16
@b_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@partition_lookup = external local_unnamed_addr constant [0 x [13 x i32]], align 4
@partition_encodings = internal unnamed_addr constant [4 x %struct.vp9_token] [%struct.vp9_token { i32 0, i32 1 }, %struct.vp9_token { i32 2, i32 2 }, %struct.vp9_token { i32 6, i32 3 }, %struct.vp9_token { i32 7, i32 3 }], align 16
@mi_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@subsize_lookup = external local_unnamed_addr constant [4 x [13 x i8]], align 16
@num_8x8_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@vp9_kf_uv_mode_prob = external constant [10 x [9 x i8]], align 16
@vp9_segment_tree = external local_unnamed_addr constant [14 x i8], align 1
@max_txsize_lookup = external local_unnamed_addr constant [13 x i8], align 1
@intra_mode_encodings = internal unnamed_addr constant [10 x %struct.vp9_token] [%struct.vp9_token { i32 0, i32 1 }, %struct.vp9_token { i32 6, i32 3 }, %struct.vp9_token { i32 28, i32 5 }, %struct.vp9_token { i32 30, i32 5 }, %struct.vp9_token { i32 58, i32 6 }, %struct.vp9_token { i32 59, i32 6 }, %struct.vp9_token { i32 126, i32 7 }, %struct.vp9_token { i32 127, i32 7 }, %struct.vp9_token { i32 62, i32 6 }, %struct.vp9_token { i32 2, i32 2 }], align 16
@vp9_kf_y_mode_prob = external constant [10 x [10 x [9 x i8]]], align 16
@size_group_lookup = external local_unnamed_addr constant [13 x i8], align 1
@switchable_interp_encodings = internal unnamed_addr constant [3 x %struct.vp9_token] [%struct.vp9_token { i32 0, i32 1 }, %struct.vp9_token { i32 2, i32 2 }, %struct.vp9_token { i32 3, i32 2 }], align 16
@inter_mode_encodings = internal unnamed_addr constant [4 x %struct.vp9_token] [%struct.vp9_token { i32 2, i32 2 }, %struct.vp9_token { i32 6, i32 3 }, %struct.vp9_token { i32 0, i32 1 }, %struct.vp9_token { i32 7, i32 3 }], align 16
@vp9_extra_bits_high12 = external local_unnamed_addr constant [12 x %struct.vp9_extra_bit], align 16
@vp9_extra_bits_high10 = external local_unnamed_addr constant [12 x %struct.vp9_extra_bit], align 16
@vp9_extra_bits = external local_unnamed_addr constant [12 x %struct.vp9_extra_bit], align 16
@vp9_coef_encodings = external local_unnamed_addr constant [0 x %struct.vp9_token], align 4
@vp9_coef_con_tree = external local_unnamed_addr constant [22 x i8], align 16
@vp9_pareto8_full = external local_unnamed_addr constant [255 x [8 x i8]], align 16
@partition_context_lookup = external local_unnamed_addr constant [13 x %struct.anon.8], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp9_get_refresh_mask(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 24
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 40
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 %15, %17
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %20 = load i32, i32* %19, align 4
  %21 = shl i32 %3, %20
  %22 = or i32 %21, %18
  br label %99

23:                                               ; preds = %9, %1, %5
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 159
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %65, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 32, i32 12
  br label %33

33:                                               ; preds = %62, %29
  %34 = phi i32 [ 0, %29 ], [ %63, %62 ]
  %35 = icmp eq i32 %34, %25
  br i1 %35, label %62, label %36

36:                                               ; preds = %33
  %37 = load i32, i32* %30, align 4
  %38 = icmp eq i32 %34, %37
  br i1 %38, label %62, label %39

39:                                               ; preds = %36
  %40 = load i32, i32* %31, align 16
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %62, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* %32, align 4
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %59

45:                                               ; preds = %42
  %46 = sext i32 %43 to i64
  br label %47

47:                                               ; preds = %45, %53
  %48 = phi i64 [ 0, %45 ], [ %54, %53 ]
  %49 = phi i32 [ 0, %45 ], [ %55, %53 ]
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 32, i32 10, i64 %48
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %34, %51
  br i1 %52, label %57, label %53

53:                                               ; preds = %47
  %54 = add nuw nsw i64 %48, 1
  %55 = add nuw nsw i32 %49, 1
  %56 = icmp slt i64 %54, %46
  br i1 %56, label %47, label %59

57:                                               ; preds = %47
  %58 = trunc i64 %48 to i32
  br label %59

59:                                               ; preds = %53, %57, %42
  %60 = phi i32 [ 0, %42 ], [ %58, %57 ], [ %55, %53 ]
  %61 = icmp eq i32 %60, %43
  br i1 %61, label %65, label %62

62:                                               ; preds = %59, %39, %36, %33
  %63 = add nuw nsw i32 %34, 1
  %64 = icmp eq i32 %63, 8
  br i1 %64, label %65, label %33

65:                                               ; preds = %59, %62, %23
  %66 = phi i32 [ %25, %23 ], [ 8, %62 ], [ %34, %59 ]
  %67 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 32, i32 11
  store i32 %66, i32* %67, align 4
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %85, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 60
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 13
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 1
  br i1 %78, label %79, label %85

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %81 = load i32, i32* %80, align 16
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 45, i64 %82
  %84 = load i32, i32* %83, align 4
  br label %99

85:                                               ; preds = %71, %65, %75
  %86 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 40
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %89 = load i32, i32* %88, align 4
  %90 = shl i32 %87, %89
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %92 = load i32, i32* %91, align 16
  %93 = shl i32 %3, %92
  %94 = or i32 %93, %90
  %95 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  %96 = load i32, i32* %95, align 16
  %97 = shl i32 %96, %66
  %98 = or i32 %94, %97
  br label %99

99:                                               ; preds = %79, %85, %13
  %100 = phi i32 [ %22, %13 ], [ %84, %79 ], [ %98, %85 ]
  ret i32 %100
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_bitstream_encode_tiles_buffer_dealloc(%struct.VP9_COMP* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 139
  %3 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2, align 16
  %4 = icmp eq %struct.VP9BitstreamWorkerData* %3, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %9, label %19

9:                                                ; preds = %5, %9
  %10 = phi i64 [ %14, %9 ], [ 1, %5 ]
  %11 = phi %struct.VP9BitstreamWorkerData* [ %18, %9 ], [ %3, %5 ]
  %12 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %11, i64 %10, i32 0
  %13 = load i8*, i8** %12, align 16
  tail call void @vpx_free(i8* %13) #5
  %14 = add nuw nsw i64 %10, 1
  %15 = load i32, i32* %6, align 4
  %16 = sext i32 %15 to i64
  %17 = icmp slt i64 %14, %16
  %18 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2, align 16
  br i1 %17, label %9, label %19

19:                                               ; preds = %9, %5
  %20 = phi %struct.VP9BitstreamWorkerData* [ %3, %5 ], [ %18, %9 ]
  %21 = bitcast %struct.VP9BitstreamWorkerData* %20 to i8*
  tail call void @vpx_free(i8* %21) #5
  store %struct.VP9BitstreamWorkerData* null, %struct.VP9BitstreamWorkerData** %2, align 16
  br label %22

22:                                               ; preds = %1, %19
  ret void
}

declare void @vpx_free(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_pack_bitstream(%struct.VP9_COMP*, i8*, i64* nocapture) local_unnamed_addr #2 {
  %4 = alloca %struct.vpx_writer, align 8
  %5 = alloca [32 x [2 x i32]], align 16
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], align 16
  %11 = alloca [2 x [2 x [6 x [6 x [3 x i8]]]]], align 16
  %12 = alloca [1 x [2 x i32]], align 4
  %13 = alloca [2 x [2 x i32]], align 16
  %14 = alloca [3 x [2 x i32]], align 16
  %15 = alloca %struct.vpx_writer, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.vpx_write_bit_buffer, align 8
  %19 = alloca %struct.vpx_write_bit_buffer, align 8
  %20 = bitcast %struct.vpx_write_bit_buffer* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #5
  %21 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %18, i64 0, i32 0
  %22 = getelementptr inbounds %struct.vpx_write_bit_buffer, %struct.vpx_write_bit_buffer* %18, i64 0, i32 1
  store i8* %1, i8** %21, align 8
  store i64 0, i64* %22, align 8
  %23 = bitcast %struct.vpx_write_bit_buffer* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #5
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1
  %26 = bitcast %struct.vpx_write_bit_buffer* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 16, i1 false)
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 2, i32 2) #5
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 79
  %28 = load i32, i32* %27, align 4
  switch i32 %28, label %32 [
    i32 0, label %29
    i32 1, label %30
    i32 2, label %31
  ]

29:                                               ; preds = %3
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 0, i32 2) #5
  br label %33

30:                                               ; preds = %3
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 2, i32 2) #5
  br label %33

31:                                               ; preds = %3
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 1, i32 2) #5
  br label %33

32:                                               ; preds = %3
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 6, i32 3) #5
  br label %33

33:                                               ; preds = %32, %31, %30, %29
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 26
  %35 = load i32, i32* %34, align 8
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %35) #5
  %36 = load i32, i32* %34, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %40 = load i32, i32* %39, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %40, i32 3) #5
  br label %565

41:                                               ; preds = %33
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %43 = load i32, i32* %42, align 4
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %43) #5
  %44 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 24
  %45 = load i32, i32* %44, align 16
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %45) #5
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 83
  %47 = load i32, i32* %46, align 16
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %47) #5
  %48 = load i32, i32* %42, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %41
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 73, i32 8) #5
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 131, i32 8) #5
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 66, i32 8) #5
  call fastcc void @write_bitdepth_colorspace_sampling(%struct.VP9Common* %24, %struct.vpx_write_bit_buffer* nonnull %18) #5
  call fastcc void @write_frame_size(%struct.VP9Common* %24, %struct.vpx_write_bit_buffer* nonnull %18) #5
  br label %219

51:                                               ; preds = %41
  %52 = load i32, i32* %44, align 16
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %58

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %56 = load i8, i8* %55, align 4
  %57 = zext i8 %56 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %57) #5
  br label %58

58:                                               ; preds = %54, %51
  %59 = load i32, i32* %46, align 16
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %58
  %62 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 30
  %63 = load i32, i32* %62, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %63, i32 2) #5
  br label %64

64:                                               ; preds = %61, %58
  %65 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %66 = load i8, i8* %65, align 4
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %543, label %68

68:                                               ; preds = %64
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 73, i32 8) #5
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 131, i32 8) #5
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 66, i32 8) #5
  %69 = load i32, i32* %27, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %68
  call fastcc void @write_bitdepth_colorspace_sampling(%struct.VP9Common* %24, %struct.vpx_write_bit_buffer* nonnull %18) #5
  br label %72

72:                                               ; preds = %71, %68
  %73 = call i32 @vp9_get_refresh_mask(%struct.VP9_COMP* %0) #5
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %73, i32 8) #5
  call fastcc void @write_frame_size(%struct.VP9Common* %24, %struct.vpx_write_bit_buffer* nonnull %18) #5
  br label %219

74:                                               ; preds = %543, %126
  %75 = phi i8 [ 1, %543 ], [ %127, %126 ]
  switch i8 %75, label %77 [
    i8 1, label %78
    i8 2, label %76
  ]

76:                                               ; preds = %74
  br label %78

77:                                               ; preds = %74
  br label %78

78:                                               ; preds = %77, %76, %74
  %79 = phi i32* [ %545, %76 ], [ %547, %77 ], [ %546, %74 ]
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %91, label %82

82:                                               ; preds = %78
  %83 = sext i32 %80 to i64
  %84 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 15, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, -1
  br i1 %86, label %91, label %87

87:                                               ; preds = %82
  %88 = load %struct.BufferPool*, %struct.BufferPool** %557, align 8
  %89 = sext i32 %85 to i64
  %90 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %88, i64 0, i32 3, i64 %89, i32 8
  br label %91

91:                                               ; preds = %87, %82, %78
  %92 = phi %struct.yv12_buffer_config* [ %90, %87 ], [ null, %82 ], [ null, %78 ]
  %93 = load i32, i32* %558, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %91
  %96 = load i32, i32* %559, align 4
  %97 = icmp sgt i32 %96, 1
  br i1 %97, label %98, label %101

98:                                               ; preds = %95
  %99 = load i32, i32* %560, align 4
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %125, label %101

101:                                              ; preds = %98, %95
  %102 = load i32, i32* %561, align 8
  %103 = icmp sgt i32 %102, 1
  br i1 %103, label %104, label %112

104:                                              ; preds = %101
  %105 = load i32, i32* %562, align 16
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %106, i32 14
  %108 = load i32, i32* %107, align 4
  %109 = icmp ne i32 %108, 0
  %110 = icmp eq %struct.yv12_buffer_config* %92, null
  %111 = or i1 %109, %110
  br i1 %111, label %125, label %114

112:                                              ; preds = %101, %91
  %113 = icmp eq %struct.yv12_buffer_config* %92, null
  br i1 %113, label %125, label %114

114:                                              ; preds = %104, %112
  %115 = load i32, i32* %563, align 16
  %116 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %92, i64 0, i32 2
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %115, %117
  br i1 %118, label %119, label %125

119:                                              ; preds = %114
  %120 = load i32, i32* %564, align 4
  %121 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %92, i64 0, i32 3
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %120, %122
  %124 = zext i1 %123 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %124) #5
  br i1 %123, label %134, label %126

125:                                              ; preds = %104, %98, %114, %112
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 0) #5
  br label %126

126:                                              ; preds = %125, %119
  %127 = add nuw nsw i8 %75, 1
  %128 = icmp eq i8 %127, 4
  br i1 %128, label %129, label %74

129:                                              ; preds = %126
  %130 = load i32, i32* %563, align 16
  %131 = add nsw i32 %130, -1
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %131, i32 16) #5
  %132 = load i32, i32* %564, align 4
  %133 = add nsw i32 %132, -1
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %133, i32 16) #5
  br label %134

134:                                              ; preds = %119, %129
  %135 = load i32, i32* %563, align 16
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 5
  %137 = load i32, i32* %136, align 8
  %138 = icmp eq i32 %135, %137
  br i1 %138, label %140, label %139

139:                                              ; preds = %134
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 1) #5
  br label %146

140:                                              ; preds = %134
  %141 = load i32, i32* %564, align 4
  %142 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 6
  %143 = load i32, i32* %142, align 4
  %144 = icmp ne i32 %141, %143
  %145 = zext i1 %144 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %145) #5
  br i1 %144, label %146, label %152

146:                                              ; preds = %140, %139
  %147 = load i32, i32* %136, align 8
  %148 = add nsw i32 %147, -1
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %148, i32 16) #5
  %149 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 6
  %150 = load i32, i32* %149, align 4
  %151 = add nsw i32 %150, -1
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %151, i32 16) #5
  br label %152

152:                                              ; preds = %146, %140
  %153 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %154 = load i32, i32* %153, align 16
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %154) #5
  %155 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 2
  %156 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %155, align 8
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %158 = load i8, i8* %157, align 4
  %159 = icmp eq i8 %158, 4
  br i1 %159, label %160, label %212

160:                                              ; preds = %152
  %161 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 0, i64 0
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 1, i64 0
  %164 = load i32, i32* %163, align 4
  %165 = add i32 %164, %162
  %166 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 2, i64 0
  %167 = load i32, i32* %166, align 4
  %168 = add i32 %165, %167
  %169 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 3, i64 0
  %170 = load i32, i32* %169, align 4
  %171 = add i32 %168, %170
  %172 = icmp sgt i32 %171, 0
  %173 = zext i1 %172 to i32
  %174 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 0, i64 1
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 1, i64 1
  %177 = load i32, i32* %176, align 4
  %178 = add i32 %177, %175
  %179 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 2, i64 1
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %178, %180
  %182 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 3, i64 1
  %183 = load i32, i32* %182, align 4
  %184 = add i32 %181, %183
  %185 = icmp sgt i32 %184, 0
  %186 = zext i1 %185 to i32
  %187 = add nuw nsw i32 %186, %173
  %188 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 0, i64 2
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 1, i64 2
  %191 = load i32, i32* %190, align 4
  %192 = add i32 %191, %189
  %193 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 2, i64 2
  %194 = load i32, i32* %193, align 4
  %195 = add i32 %192, %194
  %196 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %156, i64 0, i32 5, i64 3, i64 2
  %197 = load i32, i32* %196, align 4
  %198 = add i32 %195, %197
  %199 = icmp sgt i32 %198, 0
  %200 = zext i1 %199 to i32
  %201 = add nuw nsw i32 %187, %200
  %202 = icmp eq i32 %201, 1
  br i1 %202, label %203, label %211

203:                                              ; preds = %160
  %204 = icmp eq i32 %171, 0
  br i1 %204, label %207, label %205

205:                                              ; preds = %209, %207, %203
  %206 = phi i8 [ 0, %203 ], [ 1, %207 ], [ 2, %209 ]
  store i8 %206, i8* %157, align 4
  br label %212

207:                                              ; preds = %203
  %208 = icmp eq i32 %184, 0
  br i1 %208, label %209, label %205

209:                                              ; preds = %207
  %210 = icmp eq i32 %198, 0
  br i1 %210, label %211, label %205

211:                                              ; preds = %209, %160
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 1) #5
  br label %219

212:                                              ; preds = %205, %152
  %213 = phi i8 [ %158, %152 ], [ %206, %205 ]
  %214 = icmp eq i8 %213, 4
  %215 = zext i1 %214 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %215) #5
  %216 = zext i8 %213 to i64
  %217 = getelementptr inbounds [4 x i32], [4 x i32]* @write_interp_filter.filter_to_literal, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %218, i32 2) #5
  br label %219

219:                                              ; preds = %212, %211, %72, %50
  %220 = load i32, i32* %46, align 16
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %227

222:                                              ; preds = %219
  %223 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 66
  %224 = load i32, i32* %223, align 16
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %224) #5
  %225 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 84
  %226 = load i32, i32* %225, align 4
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %226) #5
  br label %227

227:                                              ; preds = %222, %219
  %228 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 75
  %229 = load i32, i32* %228, align 8
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %229, i32 2) #5
  %230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 0
  %231 = load i32, i32* %230, align 8
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %231, i32 6) #5
  %232 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 2
  %233 = load i32, i32* %232, align 8
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %233, i32 3) #5
  %234 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 4
  %235 = load i8, i8* %234, align 8
  %236 = zext i8 %235 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %236) #5
  %237 = load i8, i8* %234, align 8
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %335, label %239

239:                                              ; preds = %227
  %240 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 5
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %242) #5
  %243 = load i8, i8* %240, align 1
  %244 = icmp eq i8 %243, 0
  br i1 %244, label %335, label %245

245:                                              ; preds = %239
  %246 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 6, i64 0
  %247 = load i8, i8* %246, align 1
  %248 = sext i8 %247 to i32
  %249 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 7, i64 0
  %250 = load i8, i8* %249, align 1
  %251 = icmp ne i8 %247, %250
  %252 = zext i1 %251 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %252) #5
  br i1 %251, label %253, label %260

253:                                              ; preds = %245
  store i8 %247, i8* %249, align 1
  %254 = icmp slt i32 %248, 0
  %255 = sub nsw i32 0, %248
  %256 = select i1 %254, i32 %255, i32 %248
  %257 = and i32 %256, 63
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %257, i32 6) #5
  %258 = lshr i8 %247, 7
  %259 = zext i8 %258 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %259) #5
  br label %260

260:                                              ; preds = %253, %245
  %261 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 6, i64 1
  %262 = load i8, i8* %261, align 1
  %263 = sext i8 %262 to i32
  %264 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 7, i64 1
  %265 = load i8, i8* %264, align 1
  %266 = icmp ne i8 %262, %265
  %267 = zext i1 %266 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %267) #5
  br i1 %266, label %290, label %297

268:                                              ; preds = %327
  store i8 %329, i8* %331, align 1
  %269 = icmp slt i32 %330, 0
  %270 = sub nsw i32 0, %330
  %271 = select i1 %269, i32 %270, i32 %330
  %272 = and i32 %271, 63
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %272, i32 6) #5
  %273 = lshr i8 %329, 7
  %274 = zext i8 %273 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %274) #5
  br label %275

275:                                              ; preds = %327, %268
  %276 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 8, i64 1
  %277 = load i8, i8* %276, align 1
  %278 = sext i8 %277 to i32
  %279 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 9, i64 1
  %280 = load i8, i8* %279, align 1
  %281 = icmp ne i8 %277, %280
  %282 = zext i1 %281 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %282) #5
  br i1 %281, label %283, label %335

283:                                              ; preds = %275
  store i8 %277, i8* %279, align 1
  %284 = icmp slt i32 %278, 0
  %285 = sub nsw i32 0, %278
  %286 = select i1 %284, i32 %285, i32 %278
  %287 = and i32 %286, 63
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %287, i32 6) #5
  %288 = lshr i8 %277, 7
  %289 = zext i8 %288 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %289) #5
  br label %335

290:                                              ; preds = %260
  store i8 %262, i8* %264, align 1
  %291 = icmp slt i32 %263, 0
  %292 = sub nsw i32 0, %263
  %293 = select i1 %291, i32 %292, i32 %263
  %294 = and i32 %293, 63
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %294, i32 6) #5
  %295 = lshr i8 %262, 7
  %296 = zext i8 %295 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %296) #5
  br label %297

297:                                              ; preds = %290, %260
  %298 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 6, i64 2
  %299 = load i8, i8* %298, align 1
  %300 = sext i8 %299 to i32
  %301 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 7, i64 2
  %302 = load i8, i8* %301, align 1
  %303 = icmp ne i8 %299, %302
  %304 = zext i1 %303 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %304) #5
  br i1 %303, label %305, label %312

305:                                              ; preds = %297
  store i8 %299, i8* %301, align 1
  %306 = icmp slt i32 %300, 0
  %307 = sub nsw i32 0, %300
  %308 = select i1 %306, i32 %307, i32 %300
  %309 = and i32 %308, 63
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %309, i32 6) #5
  %310 = lshr i8 %299, 7
  %311 = zext i8 %310 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %311) #5
  br label %312

312:                                              ; preds = %305, %297
  %313 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 6, i64 3
  %314 = load i8, i8* %313, align 1
  %315 = sext i8 %314 to i32
  %316 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 7, i64 3
  %317 = load i8, i8* %316, align 1
  %318 = icmp ne i8 %314, %317
  %319 = zext i1 %318 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %319) #5
  br i1 %318, label %320, label %327

320:                                              ; preds = %312
  store i8 %314, i8* %316, align 1
  %321 = icmp slt i32 %315, 0
  %322 = sub nsw i32 0, %315
  %323 = select i1 %321, i32 %322, i32 %315
  %324 = and i32 %323, 63
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %324, i32 6) #5
  %325 = lshr i8 %314, 7
  %326 = zext i8 %325 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %326) #5
  br label %327

327:                                              ; preds = %320, %312
  %328 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 8, i64 0
  %329 = load i8, i8* %328, align 1
  %330 = sext i8 %329 to i32
  %331 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 68, i32 9, i64 0
  %332 = load i8, i8* %331, align 1
  %333 = icmp ne i8 %329, %332
  %334 = zext i1 %333 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %334) #5
  br i1 %333, label %268, label %275

335:                                              ; preds = %283, %275, %239, %227
  %336 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %337 = load i32, i32* %336, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %337, i32 8) #5
  %338 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  %339 = load i32, i32* %338, align 8
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %346, label %341

341:                                              ; preds = %335
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 1) #5
  %342 = icmp slt i32 %339, 0
  %343 = sub nsw i32 0, %339
  %344 = select i1 %342, i32 %343, i32 %339
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %344, i32 4) #5
  %345 = lshr i32 %339, 31
  br label %346

346:                                              ; preds = %335, %341
  %347 = phi i32 [ %345, %341 ], [ 0, %335 ]
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %347) #5
  %348 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 40
  %349 = load i32, i32* %348, align 4
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %356, label %351

351:                                              ; preds = %346
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 1) #5
  %352 = icmp slt i32 %349, 0
  %353 = sub nsw i32 0, %349
  %354 = select i1 %352, i32 %353, i32 %349
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %354, i32 4) #5
  %355 = lshr i32 %349, 31
  br label %356

356:                                              ; preds = %346, %351
  %357 = phi i32 [ %355, %351 ], [ 0, %346 ]
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %357) #5
  %358 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 41
  %359 = load i32, i32* %358, align 16
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %366, label %361

361:                                              ; preds = %356
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 1) #5
  %362 = icmp slt i32 %359, 0
  %363 = sub nsw i32 0, %359
  %364 = select i1 %362, i32 %363, i32 %359
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %364, i32 4) #5
  %365 = lshr i32 %359, 31
  br label %366

366:                                              ; preds = %356, %361
  %367 = phi i32 [ %365, %361 ], [ 0, %356 ]
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %367) #5
  %368 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %369 = load i8, i8* %368, align 4
  %370 = zext i8 %369 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %370) #5
  %371 = load i8, i8* %368, align 4
  %372 = icmp eq i8 %371, 0
  br i1 %372, label %511, label %373

373:                                              ; preds = %366
  %374 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %376) #5
  %377 = load i8, i8* %374, align 1
  %378 = icmp eq i8 %377, 0
  br i1 %378, label %403, label %379

379:                                              ; preds = %373
  call void @vp9_choose_segmap_coding_method(%struct.VP9Common* %24, %struct.macroblockd* %25) #5
  %380 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 0
  %381 = load i8, i8* %380, align 1
  %382 = icmp ne i8 %381, -1
  %383 = zext i1 %382 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %383) #5
  br i1 %382, label %384, label %386

384:                                              ; preds = %379
  %385 = zext i8 %381 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %385, i32 8) #5
  br label %386

386:                                              ; preds = %384, %379
  %387 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 1
  %388 = load i8, i8* %387, align 1
  %389 = icmp ne i8 %388, -1
  %390 = zext i1 %389 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %390) #5
  br i1 %389, label %468, label %470

391:                                              ; preds = %505
  %392 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 6, i64 0
  %393 = load i8, i8* %392, align 1
  %394 = icmp ne i8 %393, -1
  %395 = zext i1 %394 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %395) #5
  br i1 %394, label %396, label %398

396:                                              ; preds = %391
  %397 = zext i8 %393 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %397, i32 8) #5
  br label %398

398:                                              ; preds = %396, %391
  %399 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 6, i64 1
  %400 = load i8, i8* %399, align 1
  %401 = icmp ne i8 %400, -1
  %402 = zext i1 %401 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %402) #5
  br i1 %401, label %459, label %461

403:                                              ; preds = %505, %466, %461, %373
  %404 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 2
  %405 = load i8, i8* %404, align 2
  %406 = zext i8 %405 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %406) #5
  %407 = load i8, i8* %404, align 2
  %408 = icmp eq i8 %407, 0
  br i1 %408, label %511, label %409

409:                                              ; preds = %403
  %410 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 3
  %411 = load i8, i8* %410, align 1
  %412 = zext i8 %411 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %412) #5
  br label %413

413:                                              ; preds = %456, %409
  %414 = phi i64 [ 0, %409 ], [ %457, %456 ]
  %415 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %414
  br label %416

416:                                              ; preds = %453, %413
  %417 = phi i64 [ 0, %413 ], [ %454, %453 ]
  %418 = load i8, i8* %368, align 4
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %420, label %421

420:                                              ; preds = %416
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 0) #5
  br label %453

421:                                              ; preds = %416
  %422 = load i32, i32* %415, align 4
  %423 = trunc i64 %417 to i32
  %424 = shl i32 1, %423
  %425 = and i32 %422, %424
  %426 = icmp ne i32 %425, 0
  %427 = zext i1 %426 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %427) #5
  br i1 %426, label %428, label %453

428:                                              ; preds = %421
  %429 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 7, i64 %414, i64 %417
  %430 = load i16, i16* %429, align 2
  %431 = sext i16 %430 to i32
  %432 = call i32 @vp9_seg_feature_data_max(i32 %423) #5
  %433 = call i32 @vp9_is_segfeature_signed(i32 %423) #5
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %446, label %435

435:                                              ; preds = %428
  %436 = icmp slt i32 %431, 0
  %437 = sub nsw i32 0, %431
  %438 = select i1 %436, i32 %437, i32 %431
  %439 = icmp eq i32 %432, 0
  br i1 %439, label %443, label %440

440:                                              ; preds = %435
  %441 = call i32 @llvm.ctlz.i32(i32 %432, i1 true) #5, !range !2
  %442 = sub nuw nsw i32 32, %441
  br label %443

443:                                              ; preds = %440, %435
  %444 = phi i32 [ %442, %440 ], [ 0, %435 ]
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %438, i32 %444) #5
  %445 = lshr i32 %431, 31
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %445) #5
  br label %453

446:                                              ; preds = %428
  %447 = icmp eq i32 %432, 0
  br i1 %447, label %451, label %448

448:                                              ; preds = %446
  %449 = call i32 @llvm.ctlz.i32(i32 %432, i1 true) #5, !range !2
  %450 = sub nuw nsw i32 32, %449
  br label %451

451:                                              ; preds = %448, %446
  %452 = phi i32 [ %450, %448 ], [ 0, %446 ]
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %431, i32 %452) #5
  br label %453

453:                                              ; preds = %451, %443, %421, %420
  %454 = add nuw nsw i64 %417, 1
  %455 = icmp eq i64 %454, 4
  br i1 %455, label %456, label %416

456:                                              ; preds = %453
  %457 = add nuw nsw i64 %414, 1
  %458 = icmp eq i64 %457, 8
  br i1 %458, label %511, label %413

459:                                              ; preds = %398
  %460 = zext i8 %400 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %460, i32 8) #5
  br label %461

461:                                              ; preds = %459, %398
  %462 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 6, i64 2
  %463 = load i8, i8* %462, align 1
  %464 = icmp ne i8 %463, -1
  %465 = zext i1 %464 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %465) #5
  br i1 %464, label %466, label %403

466:                                              ; preds = %461
  %467 = zext i8 %463 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %467, i32 8) #5
  br label %403

468:                                              ; preds = %386
  %469 = zext i8 %388 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %469, i32 8) #5
  br label %470

470:                                              ; preds = %468, %386
  %471 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 2
  %472 = load i8, i8* %471, align 1
  %473 = icmp ne i8 %472, -1
  %474 = zext i1 %473 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %474) #5
  br i1 %473, label %475, label %477

475:                                              ; preds = %470
  %476 = zext i8 %472 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %476, i32 8) #5
  br label %477

477:                                              ; preds = %475, %470
  %478 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 3
  %479 = load i8, i8* %478, align 1
  %480 = icmp ne i8 %479, -1
  %481 = zext i1 %480 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %481) #5
  br i1 %480, label %482, label %484

482:                                              ; preds = %477
  %483 = zext i8 %479 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %483, i32 8) #5
  br label %484

484:                                              ; preds = %482, %477
  %485 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 4
  %486 = load i8, i8* %485, align 1
  %487 = icmp ne i8 %486, -1
  %488 = zext i1 %487 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %488) #5
  br i1 %487, label %489, label %491

489:                                              ; preds = %484
  %490 = zext i8 %486 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %490, i32 8) #5
  br label %491

491:                                              ; preds = %489, %484
  %492 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 5
  %493 = load i8, i8* %492, align 1
  %494 = icmp ne i8 %493, -1
  %495 = zext i1 %494 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %495) #5
  br i1 %494, label %496, label %498

496:                                              ; preds = %491
  %497 = zext i8 %493 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %497, i32 8) #5
  br label %498

498:                                              ; preds = %496, %491
  %499 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 6
  %500 = load i8, i8* %499, align 1
  %501 = icmp ne i8 %500, -1
  %502 = zext i1 %501 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %502) #5
  br i1 %501, label %503, label %505

503:                                              ; preds = %498
  %504 = zext i8 %500 to i32
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %504, i32 8) #5
  br label %505

505:                                              ; preds = %503, %498
  %506 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 4
  %507 = load i8, i8* %506, align 4
  %508 = zext i8 %507 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %508) #5
  %509 = load i8, i8* %506, align 4
  %510 = icmp eq i8 %509, 0
  br i1 %510, label %403, label %391

511:                                              ; preds = %456, %403, %366
  %512 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %512) #5
  store i32 -1431655766, i32* %16, align 4
  %513 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %513) #5
  store i32 -1431655766, i32* %17, align 4
  %514 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %515 = load i32, i32* %514, align 8
  call void @vp9_get_tile_n_bits(i32 %515, i32* nonnull %16, i32* nonnull %17) #5
  %516 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %517 = load i32, i32* %516, align 8
  %518 = load i32, i32* %16, align 4
  %519 = sub nsw i32 %517, %518
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %527, label %521

521:                                              ; preds = %511, %521
  %522 = phi i32 [ %523, %521 ], [ %519, %511 ]
  %523 = add nsw i32 %522, -1
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 1) #5
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %525, label %521

525:                                              ; preds = %521
  %526 = load i32, i32* %516, align 8
  br label %527

527:                                              ; preds = %525, %511
  %528 = phi i32 [ %526, %525 ], [ %517, %511 ]
  %529 = load i32, i32* %17, align 4
  %530 = icmp slt i32 %528, %529
  br i1 %530, label %531, label %532

531:                                              ; preds = %527
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 0) #5
  br label %532

532:                                              ; preds = %531, %527
  %533 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 86
  %534 = load i32, i32* %533, align 4
  %535 = icmp ne i32 %534, 0
  %536 = zext i1 %535 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %536) #5
  %537 = load i32, i32* %533, align 4
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %542, label %539

539:                                              ; preds = %532
  %540 = icmp ne i32 %537, 1
  %541 = zext i1 %540 to i32
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %541) #5
  br label %542

542:                                              ; preds = %539, %532
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %513) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %512) #5
  br label %565

543:                                              ; preds = %64
  %544 = call i32 @vp9_get_refresh_mask(%struct.VP9_COMP* %0) #5
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %544, i32 8) #5
  %545 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %546 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %547 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %548 = load i32, i32* %546, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %548, i32 3) #5
  %549 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 1
  %550 = load i32, i32* %549, align 4
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %550) #5
  %551 = load i32, i32* %545, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %551, i32 3) #5
  %552 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 2
  %553 = load i32, i32* %552, align 4
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %553) #5
  %554 = load i32, i32* %547, align 4
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 %554, i32 3) #5
  %555 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 3
  %556 = load i32, i32* %555, align 4
  call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* nonnull %18, i32 %556) #5
  %557 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 89
  %558 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %559 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 3
  %560 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %561 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %562 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %563 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %564 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  br label %74

565:                                              ; preds = %38, %542
  %566 = load i32, i32* %34, align 8
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %570, label %568

568:                                              ; preds = %565
  %569 = call i64 @vpx_wb_bytes_written(%struct.vpx_write_bit_buffer* nonnull %18) #5
  br label %2292

570:                                              ; preds = %565
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* nonnull align 8 %20, i64 16, i1 false)
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %18, i32 0, i32 16) #5
  %571 = call i64 @vpx_wb_bytes_written(%struct.vpx_write_bit_buffer* nonnull %18) #5
  %572 = getelementptr inbounds i8, i8* %1, i64 %571
  call void @vpx_clear_system_state() #5
  %573 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %574 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %575 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 2
  %576 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %575, align 8
  %577 = bitcast %struct.vpx_writer* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %577) #5
  %578 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %15, i64 0, i32 0
  %579 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %15, i64 0, i32 1
  %580 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %15, i64 0, i32 2
  %581 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %15, i64 0, i32 3
  %582 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %15, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %577, i8 -86, i64 24, i1 false) #5
  call void @vpx_start_encode(%struct.vpx_writer* nonnull %15, i8* %572) #5
  %583 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 1, i32 24
  %584 = load i32, i32* %583, align 4
  %585 = icmp eq i32 %584, 0
  %586 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  br i1 %585, label %588, label %587

587:                                              ; preds = %570
  store i32 0, i32* %586, align 16
  br label %840

588:                                              ; preds = %570
  %589 = load i32, i32* %586, align 16
  %590 = icmp ult i32 %589, 3
  %591 = select i1 %590, i32 %589, i32 3
  %592 = load i32, i32* %580, align 8
  %593 = load i32, i32* %579, align 4
  %594 = load i32, i32* %578, align 8
  %595 = shl i32 %593, 7
  %596 = add i32 %595, -128
  %597 = lshr i32 %596, 8
  %598 = add nuw nsw i32 %597, 1
  %599 = and i32 %591, 2
  %600 = icmp eq i32 %599, 0
  %601 = sub i32 %593, %598
  %602 = select i1 %600, i32 %598, i32 %601
  %603 = select i1 %600, i32 0, i32 %598
  %604 = add i32 %603, %594
  %605 = zext i32 %602 to i64
  %606 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %605
  %607 = load i8, i8* %606, align 1
  %608 = zext i8 %607 to i32
  %609 = shl i32 %602, %608
  %610 = add nsw i32 %592, %608
  %611 = icmp sgt i32 %610, -1
  br i1 %611, label %612, label %655

612:                                              ; preds = %588
  %613 = sub i32 0, %592
  %614 = xor i32 %592, -1
  %615 = shl i32 %604, %614
  %616 = icmp slt i32 %615, 0
  br i1 %616, label %617, label %643

617:                                              ; preds = %612
  %618 = load i32, i32* %581, align 4
  %619 = add i32 %618, -1
  %620 = icmp sgt i32 %619, -1
  %621 = load i8*, i8** %582, align 8
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds i8, i8* %621, i64 %622
  br i1 %620, label %624, label %639

624:                                              ; preds = %617, %631
  %625 = phi i8* [ %635, %631 ], [ %621, %617 ]
  %626 = phi i64 [ %638, %631 ], [ %622, %617 ]
  %627 = phi i8* [ %637, %631 ], [ %623, %617 ]
  %628 = load i8, i8* %627, align 1
  %629 = icmp eq i8 %628, -1
  %630 = getelementptr inbounds i8, i8* %625, i64 %626
  br i1 %629, label %631, label %639

631:                                              ; preds = %624
  store i8 0, i8* %630, align 1
  %632 = trunc i64 %626 to i32
  %633 = add i32 %632, -1
  %634 = icmp sgt i32 %633, -1
  %635 = load i8*, i8** %582, align 8
  %636 = sext i32 %633 to i64
  %637 = getelementptr inbounds i8, i8* %635, i64 %636
  %638 = add nsw i64 %626, -1
  br i1 %634, label %624, label %639

639:                                              ; preds = %631, %624, %617
  %640 = phi i8* [ %623, %617 ], [ %630, %624 ], [ %637, %631 ]
  %641 = load i8, i8* %640, align 1
  %642 = add i8 %641, 1
  store i8 %642, i8* %640, align 1
  br label %643

643:                                              ; preds = %639, %612
  %644 = add i32 %592, 24
  %645 = lshr i32 %604, %644
  %646 = trunc i32 %645 to i8
  %647 = load i8*, i8** %582, align 8
  %648 = load i32, i32* %581, align 4
  %649 = add i32 %648, 1
  store i32 %649, i32* %581, align 4
  %650 = zext i32 %648 to i64
  %651 = getelementptr inbounds i8, i8* %647, i64 %650
  store i8 %646, i8* %651, align 1
  %652 = shl i32 %604, %613
  %653 = and i32 %652, 16777215
  %654 = add nsw i32 %610, -8
  br label %655

655:                                              ; preds = %643, %588
  %656 = phi i32 [ %654, %643 ], [ %610, %588 ]
  %657 = phi i32 [ %653, %643 ], [ %604, %588 ]
  %658 = phi i32 [ %610, %643 ], [ %608, %588 ]
  %659 = shl i32 %657, %658
  store i32 %656, i32* %580, align 8
  store i32 %659, i32* %578, align 8
  store i32 %609, i32* %579, align 4
  %660 = shl i32 %609, 7
  %661 = add i32 %660, -128
  %662 = lshr i32 %661, 8
  %663 = add nuw nsw i32 %662, 1
  %664 = and i32 %591, 1
  %665 = icmp eq i32 %664, 0
  %666 = sub i32 %609, %663
  %667 = select i1 %665, i32 %663, i32 %666
  %668 = select i1 %665, i32 0, i32 %663
  %669 = add i32 %659, %668
  %670 = zext i32 %667 to i64
  %671 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %670
  %672 = load i8, i8* %671, align 1
  %673 = zext i8 %672 to i32
  %674 = shl i32 %667, %673
  %675 = add nsw i32 %656, %673
  %676 = icmp sgt i32 %675, -1
  br i1 %676, label %677, label %720

677:                                              ; preds = %655
  %678 = sub i32 0, %656
  %679 = xor i32 %656, -1
  %680 = shl i32 %669, %679
  %681 = icmp slt i32 %680, 0
  br i1 %681, label %682, label %708

682:                                              ; preds = %677
  %683 = load i32, i32* %581, align 4
  %684 = add i32 %683, -1
  %685 = icmp sgt i32 %684, -1
  %686 = load i8*, i8** %582, align 8
  %687 = sext i32 %684 to i64
  %688 = getelementptr inbounds i8, i8* %686, i64 %687
  br i1 %685, label %689, label %704

689:                                              ; preds = %682, %696
  %690 = phi i8* [ %700, %696 ], [ %686, %682 ]
  %691 = phi i64 [ %703, %696 ], [ %687, %682 ]
  %692 = phi i8* [ %702, %696 ], [ %688, %682 ]
  %693 = load i8, i8* %692, align 1
  %694 = icmp eq i8 %693, -1
  %695 = getelementptr inbounds i8, i8* %690, i64 %691
  br i1 %694, label %696, label %704

696:                                              ; preds = %689
  store i8 0, i8* %695, align 1
  %697 = trunc i64 %691 to i32
  %698 = add i32 %697, -1
  %699 = icmp sgt i32 %698, -1
  %700 = load i8*, i8** %582, align 8
  %701 = sext i32 %698 to i64
  %702 = getelementptr inbounds i8, i8* %700, i64 %701
  %703 = add nsw i64 %691, -1
  br i1 %699, label %689, label %704

704:                                              ; preds = %696, %689, %682
  %705 = phi i8* [ %688, %682 ], [ %695, %689 ], [ %702, %696 ]
  %706 = load i8, i8* %705, align 1
  %707 = add i8 %706, 1
  store i8 %707, i8* %705, align 1
  br label %708

708:                                              ; preds = %704, %677
  %709 = add i32 %656, 24
  %710 = lshr i32 %669, %709
  %711 = trunc i32 %710 to i8
  %712 = load i8*, i8** %582, align 8
  %713 = load i32, i32* %581, align 4
  %714 = add i32 %713, 1
  store i32 %714, i32* %581, align 4
  %715 = zext i32 %713 to i64
  %716 = getelementptr inbounds i8, i8* %712, i64 %715
  store i8 %711, i8* %716, align 1
  %717 = shl i32 %669, %678
  %718 = and i32 %717, 16777215
  %719 = add nsw i32 %675, -8
  br label %720

720:                                              ; preds = %708, %655
  %721 = phi i32 [ %719, %708 ], [ %675, %655 ]
  %722 = phi i32 [ %718, %708 ], [ %669, %655 ]
  %723 = phi i32 [ %675, %708 ], [ %673, %655 ]
  %724 = shl i32 %722, %723
  store i32 %721, i32* %580, align 8
  store i32 %724, i32* %578, align 8
  store i32 %674, i32* %579, align 4
  %725 = load i32, i32* %586, align 16
  %726 = icmp ugt i32 %725, 2
  br i1 %726, label %727, label %840

727:                                              ; preds = %720
  %728 = icmp ne i32 %725, 4
  %729 = shl i32 %674, 7
  %730 = add i32 %729, -128
  %731 = lshr i32 %730, 8
  %732 = add nuw nsw i32 %731, 1
  %733 = sub i32 %674, %732
  %734 = select i1 %728, i32 %732, i32 %733
  %735 = select i1 %728, i32 0, i32 %732
  %736 = add i32 %735, %724
  %737 = zext i32 %734 to i64
  %738 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %737
  %739 = load i8, i8* %738, align 1
  %740 = zext i8 %739 to i32
  %741 = shl i32 %734, %740
  %742 = add nsw i32 %721, %740
  %743 = icmp sgt i32 %742, -1
  br i1 %743, label %744, label %788

744:                                              ; preds = %727
  %745 = sub i32 0, %721
  %746 = xor i32 %721, -1
  %747 = shl i32 %736, %746
  %748 = icmp slt i32 %747, 0
  br i1 %748, label %749, label %775

749:                                              ; preds = %744
  %750 = load i32, i32* %581, align 4
  %751 = add i32 %750, -1
  %752 = icmp sgt i32 %751, -1
  %753 = load i8*, i8** %582, align 8
  %754 = sext i32 %751 to i64
  %755 = getelementptr inbounds i8, i8* %753, i64 %754
  br i1 %752, label %756, label %771

756:                                              ; preds = %749, %763
  %757 = phi i8* [ %767, %763 ], [ %753, %749 ]
  %758 = phi i64 [ %770, %763 ], [ %754, %749 ]
  %759 = phi i8* [ %769, %763 ], [ %755, %749 ]
  %760 = load i8, i8* %759, align 1
  %761 = icmp eq i8 %760, -1
  %762 = getelementptr inbounds i8, i8* %757, i64 %758
  br i1 %761, label %763, label %771

763:                                              ; preds = %756
  store i8 0, i8* %762, align 1
  %764 = trunc i64 %758 to i32
  %765 = add i32 %764, -1
  %766 = icmp sgt i32 %765, -1
  %767 = load i8*, i8** %582, align 8
  %768 = sext i32 %765 to i64
  %769 = getelementptr inbounds i8, i8* %767, i64 %768
  %770 = add nsw i64 %758, -1
  br i1 %766, label %756, label %771

771:                                              ; preds = %763, %756, %749
  %772 = phi i8* [ %755, %749 ], [ %769, %763 ], [ %762, %756 ]
  %773 = load i8, i8* %772, align 1
  %774 = add i8 %773, 1
  store i8 %774, i8* %772, align 1
  br label %775

775:                                              ; preds = %771, %744
  %776 = add i32 %721, 24
  %777 = lshr i32 %736, %776
  %778 = trunc i32 %777 to i8
  %779 = load i8*, i8** %582, align 8
  %780 = load i32, i32* %581, align 4
  %781 = add i32 %780, 1
  store i32 %781, i32* %581, align 4
  %782 = zext i32 %780 to i64
  %783 = getelementptr inbounds i8, i8* %779, i64 %782
  store i8 %778, i8* %783, align 1
  %784 = shl i32 %736, %745
  %785 = and i32 %784, 16777215
  %786 = add nsw i32 %742, -8
  %787 = load i32, i32* %586, align 16
  br label %788

788:                                              ; preds = %775, %727
  %789 = phi i32 [ %787, %775 ], [ %725, %727 ]
  %790 = phi i32 [ %786, %775 ], [ %742, %727 ]
  %791 = phi i32 [ %785, %775 ], [ %736, %727 ]
  %792 = phi i32 [ %742, %775 ], [ %740, %727 ]
  %793 = shl i32 %791, %792
  store i32 %790, i32* %580, align 8
  store i32 %793, i32* %578, align 8
  store i32 %741, i32* %579, align 4
  %794 = icmp eq i32 %789, 4
  br i1 %794, label %795, label %840

795:                                              ; preds = %788
  %796 = bitcast [1 x [2 x i32]]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %796) #5
  %797 = getelementptr inbounds [1 x [2 x i32]], [1 x [2 x i32]]* %12, i64 0, i64 0
  %798 = getelementptr inbounds [1 x [2 x i32]], [1 x [2 x i32]]* %12, i64 0, i64 0, i64 0
  store i32 -1431655766, i32* %798, align 4
  %799 = getelementptr inbounds [1 x [2 x i32]], [1 x [2 x i32]]* %12, i64 0, i64 0, i64 1
  store i32 -1431655766, i32* %799, align 4
  %800 = bitcast [2 x [2 x i32]]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %800) #5
  %801 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %13, i64 0, i64 0, i64 0
  %802 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %13, i64 0, i64 1, i64 0
  %803 = bitcast [3 x [2 x i32]]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %800, i8 -86, i64 16, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %803) #5
  %804 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %14, i64 0, i64 0, i64 0
  %805 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %14, i64 0, i64 1, i64 0
  %806 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %14, i64 0, i64 2, i64 0
  %807 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 11, i32 2, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %803, i8 -86, i64 24, i1 false) #5
  call void @tx_counts_to_branch_counts_8x8(i32* %807, [2 x i32]* nonnull %797) #5
  %808 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %809 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %808, i64 0, i32 10, i32 2, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %809, i32* nonnull %798) #5
  %810 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 11, i32 2, i64 1, i64 0
  call void @tx_counts_to_branch_counts_8x8(i32* %810, [2 x i32]* nonnull %797) #5
  %811 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %812 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %811, i64 0, i32 10, i32 2, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %812, i32* nonnull %798) #5
  %813 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %13, i64 0, i64 0
  %814 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %14, i64 0, i64 0
  %815 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 11, i32 1, i64 0, i64 0
  call void @tx_counts_to_branch_counts_16x16(i32* %815, [2 x i32]* nonnull %813) #5
  %816 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %817 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %816, i64 0, i32 10, i32 1, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %817, i32* nonnull %801) #5
  %818 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %819 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %818, i64 0, i32 10, i32 1, i64 0, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %819, i32* %802) #5
  %820 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 11, i32 1, i64 1, i64 0
  call void @tx_counts_to_branch_counts_16x16(i32* %820, [2 x i32]* nonnull %813) #5
  %821 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %822 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %821, i64 0, i32 10, i32 1, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %822, i32* nonnull %801) #5
  %823 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %824 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %823, i64 0, i32 10, i32 1, i64 1, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %824, i32* %802) #5
  %825 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 11, i32 0, i64 0, i64 0
  call void @tx_counts_to_branch_counts_32x32(i32* %825, [2 x i32]* nonnull %814) #5
  %826 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %827 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %826, i64 0, i32 10, i32 0, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %827, i32* nonnull %804) #5
  %828 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %829 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %828, i64 0, i32 10, i32 0, i64 0, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %829, i32* %805) #5
  %830 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %831 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %830, i64 0, i32 10, i32 0, i64 0, i64 2
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %831, i32* %806) #5
  %832 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 11, i32 0, i64 1, i64 0
  call void @tx_counts_to_branch_counts_32x32(i32* %832, [2 x i32]* nonnull %814) #5
  %833 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %834 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %833, i64 0, i32 10, i32 0, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %834, i32* nonnull %804) #5
  %835 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %836 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %835, i64 0, i32 10, i32 0, i64 1, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %836, i32* %805) #5
  %837 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %838 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %837, i64 0, i32 10, i32 0, i64 1, i64 2
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %838, i32* %806) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %803) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %800) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %796) #5
  %839 = load i32, i32* %586, align 16
  br label %840

840:                                              ; preds = %795, %788, %720, %587
  %841 = phi i32 [ %839, %795 ], [ %789, %788 ], [ %725, %720 ], [ 0, %587 ]
  %842 = zext i32 %841 to i64
  %843 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %842
  %844 = load i8, i8* %843, align 1
  %845 = bitcast [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10 to i8*
  %846 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0
  %847 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 19
  %848 = bitcast i64* %6 to [2 x i32]*
  %849 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 11
  %850 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 60
  %851 = bitcast i64* %6 to i8*
  %852 = load i16, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 252), align 8
  %853 = zext i16 %852 to i32
  %854 = mul nsw i32 %853, -3
  %855 = getelementptr inbounds [2 x i32], [2 x i32]* %848, i64 0, i64 1
  br label %856

856:                                              ; preds = %1702, %840
  %857 = phi i8 [ 0, %840 ], [ %1703, %1702 ]
  call void @llvm.lifetime.start.p0i8(i64 12672, i8* nonnull %845) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %845, i8 -86, i64 12672, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %846) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %846, i8 -86, i64 432, i1 false) #5
  %858 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %575, align 8
  %859 = zext i8 %857 to i64
  %860 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %858, i64 0, i32 11, i32 3, i64 %859
  %861 = load i32, i32* %860, align 4
  %862 = icmp ult i32 %861, 21
  br i1 %862, label %869, label %863

863:                                              ; preds = %856
  %864 = icmp ugt i8 %857, 1
  br i1 %864, label %866, label %865

865:                                              ; preds = %866, %863
  br label %932

866:                                              ; preds = %863
  %867 = load i32, i32* %847, align 4
  %868 = icmp eq i32 %867, 2
  br i1 %868, label %869, label %865

869:                                              ; preds = %866, %856
  %870 = load i32, i32* %580, align 8
  %871 = load i32, i32* %579, align 4
  %872 = load i32, i32* %578, align 8
  %873 = shl i32 %871, 7
  %874 = add i32 %873, -128
  %875 = lshr i32 %874, 8
  %876 = add nuw nsw i32 %875, 1
  %877 = zext i32 %876 to i64
  %878 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %877
  %879 = load i8, i8* %878, align 1
  %880 = zext i8 %879 to i32
  %881 = shl i32 %876, %880
  %882 = add nsw i32 %870, %880
  %883 = icmp sgt i32 %882, -1
  br i1 %883, label %884, label %927

884:                                              ; preds = %869
  %885 = sub i32 0, %870
  %886 = xor i32 %870, -1
  %887 = shl i32 %872, %886
  %888 = icmp slt i32 %887, 0
  br i1 %888, label %889, label %915

889:                                              ; preds = %884
  %890 = load i32, i32* %581, align 4
  %891 = add i32 %890, -1
  %892 = icmp sgt i32 %891, -1
  %893 = load i8*, i8** %582, align 8
  %894 = sext i32 %891 to i64
  %895 = getelementptr inbounds i8, i8* %893, i64 %894
  br i1 %892, label %896, label %911

896:                                              ; preds = %889, %903
  %897 = phi i8* [ %907, %903 ], [ %893, %889 ]
  %898 = phi i64 [ %910, %903 ], [ %894, %889 ]
  %899 = phi i8* [ %909, %903 ], [ %895, %889 ]
  %900 = load i8, i8* %899, align 1
  %901 = icmp eq i8 %900, -1
  %902 = getelementptr inbounds i8, i8* %897, i64 %898
  br i1 %901, label %903, label %911

903:                                              ; preds = %896
  store i8 0, i8* %902, align 1
  %904 = trunc i64 %898 to i32
  %905 = add i32 %904, -1
  %906 = icmp sgt i32 %905, -1
  %907 = load i8*, i8** %582, align 8
  %908 = sext i32 %905 to i64
  %909 = getelementptr inbounds i8, i8* %907, i64 %908
  %910 = add nsw i64 %898, -1
  br i1 %906, label %896, label %911

911:                                              ; preds = %903, %896, %889
  %912 = phi i8* [ %895, %889 ], [ %909, %903 ], [ %902, %896 ]
  %913 = load i8, i8* %912, align 1
  %914 = add i8 %913, 1
  store i8 %914, i8* %912, align 1
  br label %915

915:                                              ; preds = %911, %884
  %916 = add i32 %870, 24
  %917 = lshr i32 %872, %916
  %918 = trunc i32 %917 to i8
  %919 = load i8*, i8** %582, align 8
  %920 = load i32, i32* %581, align 4
  %921 = add i32 %920, 1
  store i32 %921, i32* %581, align 4
  %922 = zext i32 %920 to i64
  %923 = getelementptr inbounds i8, i8* %919, i64 %922
  store i8 %918, i8* %923, align 1
  %924 = shl i32 %872, %885
  %925 = and i32 %924, 16777215
  %926 = add nsw i32 %882, -8
  br label %927

927:                                              ; preds = %915, %869
  %928 = phi i32 [ %926, %915 ], [ %882, %869 ]
  %929 = phi i32 [ %925, %915 ], [ %872, %869 ]
  %930 = phi i32 [ %882, %915 ], [ %880, %869 ]
  %931 = shl i32 %929, %930
  store i32 %928, i32* %580, align 8
  store i32 %931, i32* %578, align 8
  store i32 %881, i32* %579, align 4
  br label %1702

932:                                              ; preds = %865, %983
  %933 = phi i64 [ %984, %983 ], [ 0, %865 ]
  br label %934

934:                                              ; preds = %980, %932
  %935 = phi i64 [ 0, %932 ], [ %981, %980 ]
  br label %936

936:                                              ; preds = %977, %934
  %937 = phi i64 [ 0, %934 ], [ %978, %977 ]
  %938 = icmp eq i64 %937, 0
  %939 = select i1 %938, i64 3, i64 6
  br label %940

940:                                              ; preds = %1027, %936
  %941 = phi i64 [ 0, %936 ], [ %1030, %1027 ]
  %942 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %933, i64 %935, i64 %937, i64 %941
  %943 = getelementptr inbounds [11 x [2 x i32]], [11 x [2 x i32]]* %942, i64 0, i64 0
  %944 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1, i32 0, i64 %859, i64 %933, i64 %935, i64 %937, i64 %941, i64 0
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp9_coef_tree, i64 0, i64 0), [2 x i32]* %943, i32* %944) #5
  %945 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 76, i32 4, i64 %859, i64 %933, i64 %935, i64 %937, i64 %941
  %946 = load i32, i32* %945, align 4
  %947 = getelementptr inbounds [11 x [2 x i32]], [11 x [2 x i32]]* %942, i64 0, i64 0, i64 0
  %948 = load i32, i32* %947, align 8
  %949 = sub i32 %946, %948
  %950 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 0, i64 1
  store i32 %949, i32* %950, align 4
  %951 = icmp eq i32 %946, 0
  br i1 %951, label %968, label %952

952:                                              ; preds = %940
  %953 = zext i32 %948 to i64
  %954 = shl nuw nsw i64 %953, 8
  %955 = lshr i32 %946, 1
  %956 = zext i32 %955 to i64
  %957 = add nuw nsw i64 %954, %956
  %958 = zext i32 %946 to i64
  %959 = udiv i64 %957, %958
  %960 = trunc i64 %959 to i32
  %961 = sub nsw i32 255, %960
  %962 = lshr i32 %961, 23
  %963 = or i32 %962, %960
  %964 = icmp eq i32 %960, 0
  %965 = zext i1 %964 to i32
  %966 = or i32 %963, %965
  %967 = trunc i32 %966 to i8
  br label %968

968:                                              ; preds = %952, %940
  %969 = phi i8 [ %967, %952 ], [ -128, %940 ]
  %970 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 0
  store i8 %969, i8* %970, align 1
  %971 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 1, i64 0
  %972 = load i32, i32* %971, align 8
  %973 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 1, i64 1
  %974 = load i32, i32* %973, align 4
  %975 = add i32 %974, %972
  %976 = icmp eq i32 %975, 0
  br i1 %976, label %1002, label %986

977:                                              ; preds = %1027
  %978 = add nuw nsw i64 %937, 1
  %979 = icmp eq i64 %978, 6
  br i1 %979, label %980, label %936

980:                                              ; preds = %977
  %981 = add nuw nsw i64 %935, 1
  %982 = icmp eq i64 %981, 2
  br i1 %982, label %983, label %934

983:                                              ; preds = %980
  %984 = add nuw nsw i64 %933, 1
  %985 = icmp eq i64 %984, 2
  br i1 %985, label %1032, label %932

986:                                              ; preds = %968
  %987 = zext i32 %972 to i64
  %988 = shl nuw nsw i64 %987, 8
  %989 = lshr i32 %975, 1
  %990 = zext i32 %989 to i64
  %991 = add nuw nsw i64 %988, %990
  %992 = zext i32 %975 to i64
  %993 = udiv i64 %991, %992
  %994 = trunc i64 %993 to i32
  %995 = sub nsw i32 255, %994
  %996 = lshr i32 %995, 23
  %997 = or i32 %996, %994
  %998 = icmp eq i32 %994, 0
  %999 = zext i1 %998 to i32
  %1000 = or i32 %997, %999
  %1001 = trunc i32 %1000 to i8
  br label %1002

1002:                                             ; preds = %986, %968
  %1003 = phi i8 [ %1001, %986 ], [ -128, %968 ]
  %1004 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 1
  store i8 %1003, i8* %1004, align 1
  %1005 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 2, i64 0
  %1006 = load i32, i32* %1005, align 8
  %1007 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 2, i64 1
  %1008 = load i32, i32* %1007, align 4
  %1009 = add i32 %1008, %1006
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1027, label %1011

1011:                                             ; preds = %1002
  %1012 = zext i32 %1006 to i64
  %1013 = shl nuw nsw i64 %1012, 8
  %1014 = lshr i32 %1009, 1
  %1015 = zext i32 %1014 to i64
  %1016 = add nuw nsw i64 %1013, %1015
  %1017 = zext i32 %1009 to i64
  %1018 = udiv i64 %1016, %1017
  %1019 = trunc i64 %1018 to i32
  %1020 = sub nsw i32 255, %1019
  %1021 = lshr i32 %1020, 23
  %1022 = or i32 %1021, %1019
  %1023 = icmp eq i32 %1019, 0
  %1024 = zext i1 %1023 to i32
  %1025 = or i32 %1022, %1024
  %1026 = trunc i32 %1025 to i8
  br label %1027

1027:                                             ; preds = %1011, %1002
  %1028 = phi i8 [ %1026, %1011 ], [ -128, %1002 ]
  %1029 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %933, i64 %935, i64 %937, i64 %941, i64 2
  store i8 %1028, i8* %1029, align 1
  %1030 = add nuw nsw i64 %941, 1
  %1031 = icmp eq i64 %1030, %939
  br i1 %1031, label %977, label %940

1032:                                             ; preds = %983
  %1033 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1034 = load i32, i32* %849, align 4
  %1035 = load i32, i32* %850, align 8
  %1036 = icmp eq i32 %1035, 0
  br i1 %1036, label %1037, label %1305

1037:                                             ; preds = %1032
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %851) #5
  store i64 0, i64* %6, align 8
  br label %1038

1038:                                             ; preds = %1055, %1037
  %1039 = phi i64 [ 0, %1037 ], [ %1056, %1055 ]
  %1040 = phi i32 [ 0, %1037 ], [ %1695, %1055 ]
  br label %1041

1041:                                             ; preds = %1052, %1038
  %1042 = phi i64 [ 0, %1038 ], [ %1053, %1052 ]
  %1043 = phi i32 [ %1040, %1038 ], [ %1695, %1052 ]
  br label %1044

1044:                                             ; preds = %1049, %1041
  %1045 = phi i64 [ 0, %1041 ], [ %1050, %1049 ]
  %1046 = phi i32 [ %1043, %1041 ], [ %1695, %1049 ]
  %1047 = icmp eq i64 %1045, 0
  %1048 = select i1 %1047, i64 3, i64 6
  br label %1643

1049:                                             ; preds = %1643
  %1050 = add nuw nsw i64 %1045, 1
  %1051 = icmp eq i64 %1050, 6
  br i1 %1051, label %1052, label %1044

1052:                                             ; preds = %1049
  %1053 = add nuw nsw i64 %1042, 1
  %1054 = icmp eq i64 %1053, 2
  br i1 %1054, label %1055, label %1041

1055:                                             ; preds = %1052
  %1056 = add nuw nsw i64 %1039, 1
  %1057 = icmp eq i64 %1056, 2
  br i1 %1057, label %1058, label %1038

1058:                                             ; preds = %1055
  %1059 = load i32, i32* %855, align 4
  %1060 = icmp eq i32 %1059, 0
  %1061 = icmp slt i32 %1695, 0
  %1062 = or i1 %1061, %1060
  %1063 = load i32, i32* %580, align 8
  %1064 = load i32, i32* %579, align 4
  %1065 = load i32, i32* %578, align 8
  %1066 = shl i32 %1064, 7
  %1067 = add i32 %1066, -128
  %1068 = lshr i32 %1067, 8
  %1069 = add nuw nsw i32 %1068, 1
  br i1 %1062, label %1070, label %1126

1070:                                             ; preds = %1058
  %1071 = zext i32 %1069 to i64
  %1072 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1071
  %1073 = load i8, i8* %1072, align 1
  %1074 = zext i8 %1073 to i32
  %1075 = shl i32 %1069, %1074
  %1076 = add nsw i32 %1063, %1074
  %1077 = icmp sgt i32 %1076, -1
  br i1 %1077, label %1078, label %1121

1078:                                             ; preds = %1070
  %1079 = sub i32 0, %1063
  %1080 = xor i32 %1063, -1
  %1081 = shl i32 %1065, %1080
  %1082 = icmp slt i32 %1081, 0
  br i1 %1082, label %1083, label %1109

1083:                                             ; preds = %1078
  %1084 = load i32, i32* %581, align 4
  %1085 = add i32 %1084, -1
  %1086 = icmp sgt i32 %1085, -1
  %1087 = load i8*, i8** %582, align 8
  %1088 = sext i32 %1085 to i64
  %1089 = getelementptr inbounds i8, i8* %1087, i64 %1088
  br i1 %1086, label %1090, label %1105

1090:                                             ; preds = %1083, %1097
  %1091 = phi i8* [ %1101, %1097 ], [ %1087, %1083 ]
  %1092 = phi i64 [ %1104, %1097 ], [ %1088, %1083 ]
  %1093 = phi i8* [ %1103, %1097 ], [ %1089, %1083 ]
  %1094 = load i8, i8* %1093, align 1
  %1095 = icmp eq i8 %1094, -1
  %1096 = getelementptr inbounds i8, i8* %1091, i64 %1092
  br i1 %1095, label %1097, label %1105

1097:                                             ; preds = %1090
  store i8 0, i8* %1096, align 1
  %1098 = trunc i64 %1092 to i32
  %1099 = add i32 %1098, -1
  %1100 = icmp sgt i32 %1099, -1
  %1101 = load i8*, i8** %582, align 8
  %1102 = sext i32 %1099 to i64
  %1103 = getelementptr inbounds i8, i8* %1101, i64 %1102
  %1104 = add nsw i64 %1092, -1
  br i1 %1100, label %1090, label %1105

1105:                                             ; preds = %1097, %1090, %1083
  %1106 = phi i8* [ %1089, %1083 ], [ %1096, %1090 ], [ %1103, %1097 ]
  %1107 = load i8, i8* %1106, align 1
  %1108 = add i8 %1107, 1
  store i8 %1108, i8* %1106, align 1
  br label %1109

1109:                                             ; preds = %1105, %1078
  %1110 = add i32 %1063, 24
  %1111 = lshr i32 %1065, %1110
  %1112 = trunc i32 %1111 to i8
  %1113 = load i8*, i8** %582, align 8
  %1114 = load i32, i32* %581, align 4
  %1115 = add i32 %1114, 1
  store i32 %1115, i32* %581, align 4
  %1116 = zext i32 %1114 to i64
  %1117 = getelementptr inbounds i8, i8* %1113, i64 %1116
  store i8 %1112, i8* %1117, align 1
  %1118 = shl i32 %1065, %1079
  %1119 = and i32 %1118, 16777215
  %1120 = add nsw i32 %1076, -8
  br label %1121

1121:                                             ; preds = %1109, %1070
  %1122 = phi i32 [ %1120, %1109 ], [ %1076, %1070 ]
  %1123 = phi i32 [ %1119, %1109 ], [ %1065, %1070 ]
  %1124 = phi i32 [ %1076, %1109 ], [ %1074, %1070 ]
  %1125 = shl i32 %1123, %1124
  store i32 %1122, i32* %580, align 8
  store i32 %1125, i32* %578, align 8
  store i32 %1075, i32* %579, align 4
  br label %1304

1126:                                             ; preds = %1058
  %1127 = sub i32 %1064, %1069
  %1128 = add i32 %1069, %1065
  %1129 = zext i32 %1127 to i64
  %1130 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1129
  %1131 = load i8, i8* %1130, align 1
  %1132 = zext i8 %1131 to i32
  %1133 = shl i32 %1127, %1132
  %1134 = add nsw i32 %1063, %1132
  %1135 = icmp sgt i32 %1134, -1
  br i1 %1135, label %1136, label %1179

1136:                                             ; preds = %1126
  %1137 = sub i32 0, %1063
  %1138 = xor i32 %1063, -1
  %1139 = shl i32 %1128, %1138
  %1140 = icmp slt i32 %1139, 0
  br i1 %1140, label %1141, label %1167

1141:                                             ; preds = %1136
  %1142 = load i32, i32* %581, align 4
  %1143 = add i32 %1142, -1
  %1144 = icmp sgt i32 %1143, -1
  %1145 = load i8*, i8** %582, align 8
  %1146 = sext i32 %1143 to i64
  %1147 = getelementptr inbounds i8, i8* %1145, i64 %1146
  br i1 %1144, label %1148, label %1163

1148:                                             ; preds = %1141, %1155
  %1149 = phi i8* [ %1159, %1155 ], [ %1145, %1141 ]
  %1150 = phi i64 [ %1162, %1155 ], [ %1146, %1141 ]
  %1151 = phi i8* [ %1161, %1155 ], [ %1147, %1141 ]
  %1152 = load i8, i8* %1151, align 1
  %1153 = icmp eq i8 %1152, -1
  %1154 = getelementptr inbounds i8, i8* %1149, i64 %1150
  br i1 %1153, label %1155, label %1163

1155:                                             ; preds = %1148
  store i8 0, i8* %1154, align 1
  %1156 = trunc i64 %1150 to i32
  %1157 = add i32 %1156, -1
  %1158 = icmp sgt i32 %1157, -1
  %1159 = load i8*, i8** %582, align 8
  %1160 = sext i32 %1157 to i64
  %1161 = getelementptr inbounds i8, i8* %1159, i64 %1160
  %1162 = add nsw i64 %1150, -1
  br i1 %1158, label %1148, label %1163

1163:                                             ; preds = %1155, %1148, %1141
  %1164 = phi i8* [ %1147, %1141 ], [ %1154, %1148 ], [ %1161, %1155 ]
  %1165 = load i8, i8* %1164, align 1
  %1166 = add i8 %1165, 1
  store i8 %1166, i8* %1164, align 1
  br label %1167

1167:                                             ; preds = %1163, %1136
  %1168 = add i32 %1063, 24
  %1169 = lshr i32 %1128, %1168
  %1170 = trunc i32 %1169 to i8
  %1171 = load i8*, i8** %582, align 8
  %1172 = load i32, i32* %581, align 4
  %1173 = add i32 %1172, 1
  store i32 %1173, i32* %581, align 4
  %1174 = zext i32 %1172 to i64
  %1175 = getelementptr inbounds i8, i8* %1171, i64 %1174
  store i8 %1170, i8* %1175, align 1
  %1176 = shl i32 %1128, %1137
  %1177 = and i32 %1176, 16777215
  %1178 = add nsw i32 %1134, -8
  br label %1179

1179:                                             ; preds = %1167, %1126
  %1180 = phi i32 [ %1178, %1167 ], [ %1134, %1126 ]
  %1181 = phi i32 [ %1177, %1167 ], [ %1128, %1126 ]
  %1182 = phi i32 [ %1134, %1167 ], [ %1132, %1126 ]
  %1183 = shl i32 %1181, %1182
  store i32 %1180, i32* %580, align 8
  store i32 %1183, i32* %578, align 8
  store i32 %1133, i32* %579, align 4
  br label %1184

1184:                                             ; preds = %1301, %1179
  %1185 = phi i64 [ 0, %1179 ], [ %1302, %1301 ]
  br label %1186

1186:                                             ; preds = %1298, %1184
  %1187 = phi i64 [ 0, %1184 ], [ %1299, %1298 ]
  br label %1188

1188:                                             ; preds = %1295, %1186
  %1189 = phi i64 [ 0, %1186 ], [ %1296, %1295 ]
  %1190 = icmp eq i64 %1189, 0
  %1191 = select i1 %1190, i64 3, i64 6
  br label %1192

1192:                                             ; preds = %1292, %1188
  %1193 = phi i64 [ 0, %1188 ], [ %1293, %1292 ]
  %1194 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %1185, i64 %1187, i64 %1189, i64 %1193, i64 0, i64 0
  br label %1195

1195:                                             ; preds = %1289, %1192
  %1196 = phi i64 [ 0, %1192 ], [ %1290, %1289 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #5
  %1197 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %1185, i64 %1187, i64 %1189, i64 %1193, i64 %1196
  %1198 = load i8, i8* %1197, align 1
  store i8 %1198, i8* %8, align 1
  %1199 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1033, i64 0, i32 3, i64 %859, i64 %1185, i64 %1187, i64 %1189, i64 %1193, i64 %1196
  %1200 = icmp eq i64 %1196, 2
  br i1 %1200, label %1201, label %1204

1201:                                             ; preds = %1195
  %1202 = load i8, i8* %1199, align 1
  %1203 = call i32 @vp9_prob_diff_update_savings_search_model(i32* %1194, i8 zeroext %1202, i8* nonnull %8, i8 zeroext -4, i32 %1034) #5
  br label %1208

1204:                                             ; preds = %1195
  %1205 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %1185, i64 %1187, i64 %1189, i64 %1193, i64 %1196, i64 0
  %1206 = load i8, i8* %1199, align 1
  %1207 = call i32 @vp9_prob_diff_update_savings_search(i32* %1205, i8 zeroext %1206, i8* nonnull %8, i8 zeroext -4) #5
  br label %1208

1208:                                             ; preds = %1204, %1201
  %1209 = phi i32 [ %1203, %1201 ], [ %1207, %1204 ]
  %1210 = icmp sgt i32 %1209, 0
  br i1 %1210, label %1211, label %1216

1211:                                             ; preds = %1208
  %1212 = load i8, i8* %8, align 1
  %1213 = load i8, i8* %1199, align 1
  %1214 = icmp ne i8 %1212, %1213
  %1215 = zext i1 %1214 to i32
  br label %1216

1216:                                             ; preds = %1211, %1208
  %1217 = phi i32 [ 0, %1208 ], [ %1215, %1211 ]
  %1218 = load i32, i32* %580, align 8
  %1219 = load i32, i32* %579, align 4
  %1220 = load i32, i32* %578, align 8
  %1221 = mul i32 %1219, 252
  %1222 = add i32 %1221, -252
  %1223 = lshr i32 %1222, 8
  %1224 = add nuw nsw i32 %1223, 1
  %1225 = icmp eq i32 %1217, 0
  %1226 = sub i32 %1219, %1224
  %1227 = select i1 %1225, i32 %1224, i32 %1226
  %1228 = select i1 %1225, i32 0, i32 %1224
  %1229 = add i32 %1228, %1220
  %1230 = zext i32 %1227 to i64
  %1231 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1230
  %1232 = load i8, i8* %1231, align 1
  %1233 = zext i8 %1232 to i32
  %1234 = shl i32 %1227, %1233
  %1235 = add nsw i32 %1218, %1233
  %1236 = icmp sgt i32 %1235, -1
  br i1 %1236, label %1237, label %1280

1237:                                             ; preds = %1216
  %1238 = sub i32 0, %1218
  %1239 = xor i32 %1218, -1
  %1240 = shl i32 %1229, %1239
  %1241 = icmp slt i32 %1240, 0
  br i1 %1241, label %1242, label %1268

1242:                                             ; preds = %1237
  %1243 = load i32, i32* %581, align 4
  %1244 = add i32 %1243, -1
  %1245 = icmp sgt i32 %1244, -1
  %1246 = load i8*, i8** %582, align 8
  %1247 = sext i32 %1244 to i64
  %1248 = getelementptr inbounds i8, i8* %1246, i64 %1247
  br i1 %1245, label %1249, label %1264

1249:                                             ; preds = %1242, %1256
  %1250 = phi i8* [ %1260, %1256 ], [ %1246, %1242 ]
  %1251 = phi i64 [ %1263, %1256 ], [ %1247, %1242 ]
  %1252 = phi i8* [ %1262, %1256 ], [ %1248, %1242 ]
  %1253 = load i8, i8* %1252, align 1
  %1254 = icmp eq i8 %1253, -1
  %1255 = getelementptr inbounds i8, i8* %1250, i64 %1251
  br i1 %1254, label %1256, label %1264

1256:                                             ; preds = %1249
  store i8 0, i8* %1255, align 1
  %1257 = trunc i64 %1251 to i32
  %1258 = add i32 %1257, -1
  %1259 = icmp sgt i32 %1258, -1
  %1260 = load i8*, i8** %582, align 8
  %1261 = sext i32 %1258 to i64
  %1262 = getelementptr inbounds i8, i8* %1260, i64 %1261
  %1263 = add nsw i64 %1251, -1
  br i1 %1259, label %1249, label %1264

1264:                                             ; preds = %1256, %1249, %1242
  %1265 = phi i8* [ %1248, %1242 ], [ %1262, %1256 ], [ %1255, %1249 ]
  %1266 = load i8, i8* %1265, align 1
  %1267 = add i8 %1266, 1
  store i8 %1267, i8* %1265, align 1
  br label %1268

1268:                                             ; preds = %1264, %1237
  %1269 = add i32 %1218, 24
  %1270 = lshr i32 %1229, %1269
  %1271 = trunc i32 %1270 to i8
  %1272 = load i8*, i8** %582, align 8
  %1273 = load i32, i32* %581, align 4
  %1274 = add i32 %1273, 1
  store i32 %1274, i32* %581, align 4
  %1275 = zext i32 %1273 to i64
  %1276 = getelementptr inbounds i8, i8* %1272, i64 %1275
  store i8 %1271, i8* %1276, align 1
  %1277 = shl i32 %1229, %1238
  %1278 = and i32 %1277, 16777215
  %1279 = add nsw i32 %1235, -8
  br label %1280

1280:                                             ; preds = %1268, %1216
  %1281 = phi i32 [ %1279, %1268 ], [ %1235, %1216 ]
  %1282 = phi i32 [ %1278, %1268 ], [ %1229, %1216 ]
  %1283 = phi i32 [ %1235, %1268 ], [ %1233, %1216 ]
  %1284 = shl i32 %1282, %1283
  store i32 %1281, i32* %580, align 8
  store i32 %1284, i32* %578, align 8
  store i32 %1234, i32* %579, align 4
  br i1 %1225, label %1289, label %1285

1285:                                             ; preds = %1280
  %1286 = load i8, i8* %8, align 1
  %1287 = load i8, i8* %1199, align 1
  call void @vp9_write_prob_diff_update(%struct.vpx_writer* nonnull %15, i8 zeroext %1286, i8 zeroext %1287) #5
  %1288 = load i8, i8* %8, align 1
  store i8 %1288, i8* %1199, align 1
  br label %1289

1289:                                             ; preds = %1285, %1280
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #5
  %1290 = add nuw nsw i64 %1196, 1
  %1291 = icmp eq i64 %1290, 3
  br i1 %1291, label %1292, label %1195

1292:                                             ; preds = %1289
  %1293 = add nuw nsw i64 %1193, 1
  %1294 = icmp eq i64 %1293, %1191
  br i1 %1294, label %1295, label %1192

1295:                                             ; preds = %1292
  %1296 = add nuw nsw i64 %1189, 1
  %1297 = icmp eq i64 %1296, 6
  br i1 %1297, label %1298, label %1188

1298:                                             ; preds = %1295
  %1299 = add nuw nsw i64 %1187, 1
  %1300 = icmp eq i64 %1299, 2
  br i1 %1300, label %1301, label %1186

1301:                                             ; preds = %1298
  %1302 = add nuw nsw i64 %1185, 1
  %1303 = icmp eq i64 %1302, 2
  br i1 %1303, label %1304, label %1184

1304:                                             ; preds = %1301, %1121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %851) #5
  br label %1702

1305:                                             ; preds = %1032, %1575
  %1306 = phi i64 [ %1576, %1575 ], [ 0, %1032 ]
  %1307 = phi i32 [ %1563, %1575 ], [ 0, %1032 ]
  %1308 = phi i32 [ %1349, %1575 ], [ 0, %1032 ]
  br label %1309

1309:                                             ; preds = %1572, %1305
  %1310 = phi i64 [ 0, %1305 ], [ %1573, %1572 ]
  %1311 = phi i32 [ %1307, %1305 ], [ %1563, %1572 ]
  %1312 = phi i32 [ %1308, %1305 ], [ %1349, %1572 ]
  br label %1313

1313:                                             ; preds = %1569, %1309
  %1314 = phi i64 [ 0, %1309 ], [ %1570, %1569 ]
  %1315 = phi i32 [ %1311, %1309 ], [ %1563, %1569 ]
  %1316 = phi i32 [ %1312, %1309 ], [ %1349, %1569 ]
  %1317 = icmp eq i64 %1314, 0
  %1318 = select i1 %1317, i64 3, i64 6
  br label %1319

1319:                                             ; preds = %1566, %1313
  %1320 = phi i64 [ 0, %1313 ], [ %1567, %1566 ]
  %1321 = phi i32 [ %1315, %1313 ], [ %1563, %1566 ]
  %1322 = phi i32 [ %1316, %1313 ], [ %1349, %1566 ]
  %1323 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %1306, i64 %1310, i64 %1314, i64 %1320, i64 0, i64 0
  br label %1324

1324:                                             ; preds = %1562, %1319
  %1325 = phi i64 [ 0, %1319 ], [ %1564, %1562 ]
  %1326 = phi i32 [ %1321, %1319 ], [ %1563, %1562 ]
  %1327 = phi i32 [ %1322, %1319 ], [ %1349, %1562 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #5
  %1328 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %1306, i64 %1310, i64 %1314, i64 %1320, i64 %1325
  %1329 = load i8, i8* %1328, align 1
  store i8 %1329, i8* %9, align 1
  %1330 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1033, i64 0, i32 3, i64 %859, i64 %1306, i64 %1310, i64 %1314, i64 %1320, i64 %1325
  %1331 = icmp eq i64 %1325, 2
  br i1 %1331, label %1332, label %1335

1332:                                             ; preds = %1324
  %1333 = load i8, i8* %1330, align 1
  %1334 = call i32 @vp9_prob_diff_update_savings_search_model(i32* %1323, i8 zeroext %1333, i8* nonnull %9, i8 zeroext -4, i32 %1034) #5
  br label %1339

1335:                                             ; preds = %1324
  %1336 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %1306, i64 %1310, i64 %1314, i64 %1320, i64 %1325, i64 0
  %1337 = load i8, i8* %1330, align 1
  %1338 = call i32 @vp9_prob_diff_update_savings_search(i32* %1336, i8 zeroext %1337, i8* nonnull %9, i8 zeroext -4) #5
  br label %1339

1339:                                             ; preds = %1335, %1332
  %1340 = phi i32 [ %1334, %1332 ], [ %1338, %1335 ]
  %1341 = icmp sgt i32 %1340, 0
  br i1 %1341, label %1342, label %1347

1342:                                             ; preds = %1339
  %1343 = load i8, i8* %9, align 1
  %1344 = load i8, i8* %1330, align 1
  %1345 = icmp ne i8 %1343, %1344
  %1346 = zext i1 %1345 to i32
  br label %1347

1347:                                             ; preds = %1342, %1339
  %1348 = phi i32 [ 0, %1339 ], [ %1346, %1342 ]
  %1349 = add nsw i32 %1348, %1327
  %1350 = or i32 %1349, %1348
  %1351 = icmp eq i32 %1350, 0
  br i1 %1351, label %1352, label %1354

1352:                                             ; preds = %1347
  %1353 = add nsw i32 %1326, 1
  br label %1562

1354:                                             ; preds = %1347
  %1355 = icmp eq i32 %1348, 1
  %1356 = icmp eq i32 %1349, 1
  %1357 = and i1 %1355, %1356
  %1358 = load i32, i32* %580, align 8
  %1359 = load i32, i32* %579, align 4
  %1360 = load i32, i32* %578, align 8
  br i1 %1357, label %1361, label %1490

1361:                                             ; preds = %1354
  %1362 = shl i32 %1359, 7
  %1363 = add i32 %1362, -128
  %1364 = lshr i32 %1363, 8
  %1365 = add nuw nsw i32 %1364, 1
  %1366 = sub i32 %1359, %1365
  %1367 = add i32 %1365, %1360
  %1368 = zext i32 %1366 to i64
  %1369 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1368
  %1370 = load i8, i8* %1369, align 1
  %1371 = zext i8 %1370 to i32
  %1372 = shl i32 %1366, %1371
  %1373 = add nsw i32 %1358, %1371
  %1374 = icmp sgt i32 %1373, -1
  br i1 %1374, label %1375, label %1418

1375:                                             ; preds = %1361
  %1376 = sub i32 0, %1358
  %1377 = xor i32 %1358, -1
  %1378 = shl i32 %1367, %1377
  %1379 = icmp slt i32 %1378, 0
  br i1 %1379, label %1380, label %1406

1380:                                             ; preds = %1375
  %1381 = load i32, i32* %581, align 4
  %1382 = add i32 %1381, -1
  %1383 = icmp sgt i32 %1382, -1
  %1384 = load i8*, i8** %582, align 8
  %1385 = sext i32 %1382 to i64
  %1386 = getelementptr inbounds i8, i8* %1384, i64 %1385
  br i1 %1383, label %1387, label %1402

1387:                                             ; preds = %1380, %1394
  %1388 = phi i8* [ %1398, %1394 ], [ %1384, %1380 ]
  %1389 = phi i64 [ %1401, %1394 ], [ %1385, %1380 ]
  %1390 = phi i8* [ %1400, %1394 ], [ %1386, %1380 ]
  %1391 = load i8, i8* %1390, align 1
  %1392 = icmp eq i8 %1391, -1
  %1393 = getelementptr inbounds i8, i8* %1388, i64 %1389
  br i1 %1392, label %1394, label %1402

1394:                                             ; preds = %1387
  store i8 0, i8* %1393, align 1
  %1395 = trunc i64 %1389 to i32
  %1396 = add i32 %1395, -1
  %1397 = icmp sgt i32 %1396, -1
  %1398 = load i8*, i8** %582, align 8
  %1399 = sext i32 %1396 to i64
  %1400 = getelementptr inbounds i8, i8* %1398, i64 %1399
  %1401 = add nsw i64 %1389, -1
  br i1 %1397, label %1387, label %1402

1402:                                             ; preds = %1394, %1387, %1380
  %1403 = phi i8* [ %1386, %1380 ], [ %1393, %1387 ], [ %1400, %1394 ]
  %1404 = load i8, i8* %1403, align 1
  %1405 = add i8 %1404, 1
  store i8 %1405, i8* %1403, align 1
  br label %1406

1406:                                             ; preds = %1402, %1375
  %1407 = add i32 %1358, 24
  %1408 = lshr i32 %1367, %1407
  %1409 = trunc i32 %1408 to i8
  %1410 = load i8*, i8** %582, align 8
  %1411 = load i32, i32* %581, align 4
  %1412 = add i32 %1411, 1
  store i32 %1412, i32* %581, align 4
  %1413 = zext i32 %1411 to i64
  %1414 = getelementptr inbounds i8, i8* %1410, i64 %1413
  store i8 %1409, i8* %1414, align 1
  %1415 = shl i32 %1367, %1376
  %1416 = and i32 %1415, 16777215
  %1417 = add nsw i32 %1373, -8
  br label %1418

1418:                                             ; preds = %1406, %1361
  %1419 = phi i32 [ %1417, %1406 ], [ %1373, %1361 ]
  %1420 = phi i32 [ %1416, %1406 ], [ %1367, %1361 ]
  %1421 = phi i32 [ %1373, %1406 ], [ %1371, %1361 ]
  %1422 = shl i32 %1420, %1421
  store i32 %1419, i32* %580, align 8
  store i32 %1422, i32* %578, align 8
  store i32 %1372, i32* %579, align 4
  %1423 = icmp sgt i32 %1326, 0
  br i1 %1423, label %1424, label %1490

1424:                                             ; preds = %1418, %1483
  %1425 = phi i32 [ %1487, %1483 ], [ %1422, %1418 ]
  %1426 = phi i32 [ %1437, %1483 ], [ %1372, %1418 ]
  %1427 = phi i32 [ %1484, %1483 ], [ %1419, %1418 ]
  %1428 = phi i32 [ %1488, %1483 ], [ 0, %1418 ]
  %1429 = mul i32 %1426, 252
  %1430 = add i32 %1429, -252
  %1431 = lshr i32 %1430, 8
  %1432 = add nuw nsw i32 %1431, 1
  %1433 = zext i32 %1432 to i64
  %1434 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1433
  %1435 = load i8, i8* %1434, align 1
  %1436 = zext i8 %1435 to i32
  %1437 = shl i32 %1432, %1436
  %1438 = add nsw i32 %1427, %1436
  %1439 = icmp sgt i32 %1438, -1
  br i1 %1439, label %1440, label %1483

1440:                                             ; preds = %1424
  %1441 = sub i32 0, %1427
  %1442 = xor i32 %1427, -1
  %1443 = shl i32 %1425, %1442
  %1444 = icmp slt i32 %1443, 0
  br i1 %1444, label %1445, label %1471

1445:                                             ; preds = %1440
  %1446 = load i32, i32* %581, align 4
  %1447 = add i32 %1446, -1
  %1448 = icmp sgt i32 %1447, -1
  %1449 = load i8*, i8** %582, align 8
  %1450 = sext i32 %1447 to i64
  %1451 = getelementptr inbounds i8, i8* %1449, i64 %1450
  br i1 %1448, label %1452, label %1467

1452:                                             ; preds = %1445, %1459
  %1453 = phi i8* [ %1463, %1459 ], [ %1449, %1445 ]
  %1454 = phi i64 [ %1466, %1459 ], [ %1450, %1445 ]
  %1455 = phi i8* [ %1465, %1459 ], [ %1451, %1445 ]
  %1456 = load i8, i8* %1455, align 1
  %1457 = icmp eq i8 %1456, -1
  %1458 = getelementptr inbounds i8, i8* %1453, i64 %1454
  br i1 %1457, label %1459, label %1467

1459:                                             ; preds = %1452
  store i8 0, i8* %1458, align 1
  %1460 = trunc i64 %1454 to i32
  %1461 = add i32 %1460, -1
  %1462 = icmp sgt i32 %1461, -1
  %1463 = load i8*, i8** %582, align 8
  %1464 = sext i32 %1461 to i64
  %1465 = getelementptr inbounds i8, i8* %1463, i64 %1464
  %1466 = add nsw i64 %1454, -1
  br i1 %1462, label %1452, label %1467

1467:                                             ; preds = %1459, %1452, %1445
  %1468 = phi i8* [ %1451, %1445 ], [ %1465, %1459 ], [ %1458, %1452 ]
  %1469 = load i8, i8* %1468, align 1
  %1470 = add i8 %1469, 1
  store i8 %1470, i8* %1468, align 1
  br label %1471

1471:                                             ; preds = %1467, %1440
  %1472 = add i32 %1427, 24
  %1473 = lshr i32 %1425, %1472
  %1474 = trunc i32 %1473 to i8
  %1475 = load i8*, i8** %582, align 8
  %1476 = load i32, i32* %581, align 4
  %1477 = add i32 %1476, 1
  store i32 %1477, i32* %581, align 4
  %1478 = zext i32 %1476 to i64
  %1479 = getelementptr inbounds i8, i8* %1475, i64 %1478
  store i8 %1474, i8* %1479, align 1
  %1480 = shl i32 %1425, %1441
  %1481 = and i32 %1480, 16777215
  %1482 = add nsw i32 %1438, -8
  br label %1483

1483:                                             ; preds = %1471, %1424
  %1484 = phi i32 [ %1482, %1471 ], [ %1438, %1424 ]
  %1485 = phi i32 [ %1481, %1471 ], [ %1425, %1424 ]
  %1486 = phi i32 [ %1438, %1471 ], [ %1436, %1424 ]
  %1487 = shl i32 %1485, %1486
  store i32 %1484, i32* %580, align 8
  store i32 %1487, i32* %578, align 8
  store i32 %1437, i32* %579, align 4
  %1488 = add nuw nsw i32 %1428, 1
  %1489 = icmp eq i32 %1488, %1326
  br i1 %1489, label %1490, label %1424

1490:                                             ; preds = %1483, %1418, %1354
  %1491 = phi i32 [ %1422, %1418 ], [ %1360, %1354 ], [ %1487, %1483 ]
  %1492 = phi i32 [ %1372, %1418 ], [ %1359, %1354 ], [ %1437, %1483 ]
  %1493 = phi i32 [ %1419, %1418 ], [ %1358, %1354 ], [ %1484, %1483 ]
  %1494 = mul i32 %1492, 252
  %1495 = add i32 %1494, -252
  %1496 = lshr i32 %1495, 8
  %1497 = add nuw nsw i32 %1496, 1
  %1498 = icmp eq i32 %1348, 0
  %1499 = sub i32 %1492, %1497
  %1500 = select i1 %1498, i32 %1497, i32 %1499
  %1501 = select i1 %1498, i32 0, i32 %1497
  %1502 = add i32 %1501, %1491
  %1503 = zext i32 %1500 to i64
  %1504 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1503
  %1505 = load i8, i8* %1504, align 1
  %1506 = zext i8 %1505 to i32
  %1507 = shl i32 %1500, %1506
  %1508 = add nsw i32 %1493, %1506
  %1509 = icmp sgt i32 %1508, -1
  br i1 %1509, label %1510, label %1553

1510:                                             ; preds = %1490
  %1511 = sub i32 0, %1493
  %1512 = xor i32 %1493, -1
  %1513 = shl i32 %1502, %1512
  %1514 = icmp slt i32 %1513, 0
  br i1 %1514, label %1515, label %1541

1515:                                             ; preds = %1510
  %1516 = load i32, i32* %581, align 4
  %1517 = add i32 %1516, -1
  %1518 = icmp sgt i32 %1517, -1
  %1519 = load i8*, i8** %582, align 8
  %1520 = sext i32 %1517 to i64
  %1521 = getelementptr inbounds i8, i8* %1519, i64 %1520
  br i1 %1518, label %1522, label %1537

1522:                                             ; preds = %1515, %1529
  %1523 = phi i8* [ %1533, %1529 ], [ %1519, %1515 ]
  %1524 = phi i64 [ %1536, %1529 ], [ %1520, %1515 ]
  %1525 = phi i8* [ %1535, %1529 ], [ %1521, %1515 ]
  %1526 = load i8, i8* %1525, align 1
  %1527 = icmp eq i8 %1526, -1
  %1528 = getelementptr inbounds i8, i8* %1523, i64 %1524
  br i1 %1527, label %1529, label %1537

1529:                                             ; preds = %1522
  store i8 0, i8* %1528, align 1
  %1530 = trunc i64 %1524 to i32
  %1531 = add i32 %1530, -1
  %1532 = icmp sgt i32 %1531, -1
  %1533 = load i8*, i8** %582, align 8
  %1534 = sext i32 %1531 to i64
  %1535 = getelementptr inbounds i8, i8* %1533, i64 %1534
  %1536 = add nsw i64 %1524, -1
  br i1 %1532, label %1522, label %1537

1537:                                             ; preds = %1529, %1522, %1515
  %1538 = phi i8* [ %1521, %1515 ], [ %1535, %1529 ], [ %1528, %1522 ]
  %1539 = load i8, i8* %1538, align 1
  %1540 = add i8 %1539, 1
  store i8 %1540, i8* %1538, align 1
  br label %1541

1541:                                             ; preds = %1537, %1510
  %1542 = add i32 %1493, 24
  %1543 = lshr i32 %1502, %1542
  %1544 = trunc i32 %1543 to i8
  %1545 = load i8*, i8** %582, align 8
  %1546 = load i32, i32* %581, align 4
  %1547 = add i32 %1546, 1
  store i32 %1547, i32* %581, align 4
  %1548 = zext i32 %1546 to i64
  %1549 = getelementptr inbounds i8, i8* %1545, i64 %1548
  store i8 %1544, i8* %1549, align 1
  %1550 = shl i32 %1502, %1511
  %1551 = and i32 %1550, 16777215
  %1552 = add nsw i32 %1508, -8
  br label %1553

1553:                                             ; preds = %1541, %1490
  %1554 = phi i32 [ %1552, %1541 ], [ %1508, %1490 ]
  %1555 = phi i32 [ %1551, %1541 ], [ %1502, %1490 ]
  %1556 = phi i32 [ %1508, %1541 ], [ %1506, %1490 ]
  %1557 = shl i32 %1555, %1556
  store i32 %1554, i32* %580, align 8
  store i32 %1557, i32* %578, align 8
  store i32 %1507, i32* %579, align 4
  br i1 %1498, label %1562, label %1558

1558:                                             ; preds = %1553
  %1559 = load i8, i8* %9, align 1
  %1560 = load i8, i8* %1330, align 1
  call void @vp9_write_prob_diff_update(%struct.vpx_writer* nonnull %15, i8 zeroext %1559, i8 zeroext %1560) #5
  %1561 = load i8, i8* %9, align 1
  store i8 %1561, i8* %1330, align 1
  br label %1562

1562:                                             ; preds = %1558, %1553, %1352
  %1563 = phi i32 [ %1353, %1352 ], [ %1326, %1553 ], [ %1326, %1558 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #5
  %1564 = add nuw nsw i64 %1325, 1
  %1565 = icmp eq i64 %1564, 3
  br i1 %1565, label %1566, label %1324

1566:                                             ; preds = %1562
  %1567 = add nuw nsw i64 %1320, 1
  %1568 = icmp eq i64 %1567, %1318
  br i1 %1568, label %1569, label %1319

1569:                                             ; preds = %1566
  %1570 = add nuw nsw i64 %1314, 1
  %1571 = icmp eq i64 %1570, 6
  br i1 %1571, label %1572, label %1313

1572:                                             ; preds = %1569
  %1573 = add nuw nsw i64 %1310, 1
  %1574 = icmp eq i64 %1573, 2
  br i1 %1574, label %1575, label %1309

1575:                                             ; preds = %1572
  %1576 = add nuw nsw i64 %1306, 1
  %1577 = icmp eq i64 %1576, 2
  br i1 %1577, label %1578, label %1305

1578:                                             ; preds = %1575
  %1579 = icmp eq i32 %1349, 0
  br i1 %1579, label %1580, label %1702

1580:                                             ; preds = %1578
  %1581 = load i32, i32* %580, align 8
  %1582 = load i32, i32* %579, align 4
  %1583 = load i32, i32* %578, align 8
  %1584 = shl i32 %1582, 7
  %1585 = add i32 %1584, -128
  %1586 = lshr i32 %1585, 8
  %1587 = add nuw nsw i32 %1586, 1
  %1588 = zext i32 %1587 to i64
  %1589 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1588
  %1590 = load i8, i8* %1589, align 1
  %1591 = zext i8 %1590 to i32
  %1592 = shl i32 %1587, %1591
  %1593 = add nsw i32 %1581, %1591
  %1594 = icmp sgt i32 %1593, -1
  br i1 %1594, label %1595, label %1638

1595:                                             ; preds = %1580
  %1596 = sub i32 0, %1581
  %1597 = xor i32 %1581, -1
  %1598 = shl i32 %1583, %1597
  %1599 = icmp slt i32 %1598, 0
  br i1 %1599, label %1600, label %1626

1600:                                             ; preds = %1595
  %1601 = load i32, i32* %581, align 4
  %1602 = add i32 %1601, -1
  %1603 = icmp sgt i32 %1602, -1
  %1604 = load i8*, i8** %582, align 8
  %1605 = sext i32 %1602 to i64
  %1606 = getelementptr inbounds i8, i8* %1604, i64 %1605
  br i1 %1603, label %1607, label %1622

1607:                                             ; preds = %1600, %1614
  %1608 = phi i8* [ %1618, %1614 ], [ %1604, %1600 ]
  %1609 = phi i64 [ %1621, %1614 ], [ %1605, %1600 ]
  %1610 = phi i8* [ %1620, %1614 ], [ %1606, %1600 ]
  %1611 = load i8, i8* %1610, align 1
  %1612 = icmp eq i8 %1611, -1
  %1613 = getelementptr inbounds i8, i8* %1608, i64 %1609
  br i1 %1612, label %1614, label %1622

1614:                                             ; preds = %1607
  store i8 0, i8* %1613, align 1
  %1615 = trunc i64 %1609 to i32
  %1616 = add i32 %1615, -1
  %1617 = icmp sgt i32 %1616, -1
  %1618 = load i8*, i8** %582, align 8
  %1619 = sext i32 %1616 to i64
  %1620 = getelementptr inbounds i8, i8* %1618, i64 %1619
  %1621 = add nsw i64 %1609, -1
  br i1 %1617, label %1607, label %1622

1622:                                             ; preds = %1614, %1607, %1600
  %1623 = phi i8* [ %1606, %1600 ], [ %1613, %1607 ], [ %1620, %1614 ]
  %1624 = load i8, i8* %1623, align 1
  %1625 = add i8 %1624, 1
  store i8 %1625, i8* %1623, align 1
  br label %1626

1626:                                             ; preds = %1622, %1595
  %1627 = add i32 %1581, 24
  %1628 = lshr i32 %1583, %1627
  %1629 = trunc i32 %1628 to i8
  %1630 = load i8*, i8** %582, align 8
  %1631 = load i32, i32* %581, align 4
  %1632 = add i32 %1631, 1
  store i32 %1632, i32* %581, align 4
  %1633 = zext i32 %1631 to i64
  %1634 = getelementptr inbounds i8, i8* %1630, i64 %1633
  store i8 %1629, i8* %1634, align 1
  %1635 = shl i32 %1583, %1596
  %1636 = and i32 %1635, 16777215
  %1637 = add nsw i32 %1593, -8
  br label %1638

1638:                                             ; preds = %1626, %1580
  %1639 = phi i32 [ %1637, %1626 ], [ %1593, %1580 ]
  %1640 = phi i32 [ %1636, %1626 ], [ %1583, %1580 ]
  %1641 = phi i32 [ %1593, %1626 ], [ %1591, %1580 ]
  %1642 = shl i32 %1640, %1641
  store i32 %1639, i32* %580, align 8
  store i32 %1642, i32* %578, align 8
  store i32 %1592, i32* %579, align 4
  br label %1702

1643:                                             ; preds = %1643, %1044
  %1644 = phi i64 [ 0, %1044 ], [ %1700, %1643 ]
  %1645 = phi i32 [ %1046, %1044 ], [ %1695, %1643 ]
  %1646 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  %1647 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 0
  %1648 = load i8, i8* %1647, align 1
  store i8 %1648, i8* %7, align 1
  %1649 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1033, i64 0, i32 3, i64 %859, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 0
  %1650 = load i8, i8* %1649, align 1
  %1651 = call i32 @vp9_prob_diff_update_savings_search(i32* %1646, i8 zeroext %1650, i8* nonnull %7, i8 zeroext -4) #5
  %1652 = load i8, i8* %7, align 1
  %1653 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 1
  %1654 = load i8, i8* %1653, align 1
  %1655 = icmp slt i32 %1651, 1
  %1656 = icmp eq i8 %1652, %1650
  %1657 = or i1 %1655, %1656
  %1658 = or i1 %1655, %1656
  %1659 = xor i1 %1658, true
  %1660 = select i1 %1657, i32 0, i32 %1651
  %1661 = zext i1 %1659 to i64
  %1662 = getelementptr inbounds [2 x i32], [2 x i32]* %848, i64 0, i64 %1661
  %1663 = load i32, i32* %1662, align 4
  %1664 = add nsw i32 %1663, 1
  store i32 %1664, i32* %1662, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 %1654, i8* %7, align 1
  %1665 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1033, i64 0, i32 3, i64 %859, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 1
  %1666 = load i8, i8* %1665, align 1
  %1667 = getelementptr inbounds [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]], [2 x [2 x [6 x [6 x [11 x [2 x i32]]]]]]* %10, i64 0, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 1, i64 0
  %1668 = call i32 @vp9_prob_diff_update_savings_search(i32* %1667, i8 zeroext %1666, i8* nonnull %7, i8 zeroext -4) #5
  %1669 = load i8, i8* %7, align 1
  %1670 = getelementptr inbounds [2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* %11, i64 0, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 2
  %1671 = load i8, i8* %1670, align 1
  %1672 = icmp slt i32 %1668, 1
  %1673 = icmp eq i8 %1669, %1666
  %1674 = or i1 %1672, %1673
  %1675 = or i1 %1672, %1673
  %1676 = xor i1 %1675, true
  %1677 = select i1 %1674, i32 0, i32 %1668
  %1678 = zext i1 %1676 to i64
  %1679 = getelementptr inbounds [2 x i32], [2 x i32]* %848, i64 0, i64 %1678
  %1680 = load i32, i32* %1679, align 4
  %1681 = add nsw i32 %1680, 1
  store i32 %1681, i32* %1679, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 %1671, i8* %7, align 1
  %1682 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1033, i64 0, i32 3, i64 %859, i64 %1039, i64 %1042, i64 %1045, i64 %1644, i64 2
  %1683 = load i8, i8* %1682, align 1
  %1684 = call i32 @vp9_prob_diff_update_savings_search_model(i32* %1646, i8 zeroext %1683, i8* nonnull %7, i8 zeroext -4, i32 %1034) #5
  %1685 = load i8, i8* %7, align 1
  %1686 = icmp slt i32 %1684, 1
  %1687 = icmp eq i8 %1685, %1683
  %1688 = or i1 %1686, %1687
  %1689 = or i1 %1686, %1687
  %1690 = xor i1 %1689, true
  %1691 = select i1 %1688, i32 0, i32 %1684
  %1692 = add i32 %1645, %854
  %1693 = add i32 %1692, %1660
  %1694 = add i32 %1693, %1677
  %1695 = add i32 %1694, %1691
  %1696 = zext i1 %1690 to i64
  %1697 = getelementptr inbounds [2 x i32], [2 x i32]* %848, i64 0, i64 %1696
  %1698 = load i32, i32* %1697, align 4
  %1699 = add nsw i32 %1698, 1
  store i32 %1699, i32* %1697, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  %1700 = add nuw nsw i64 %1644, 1
  %1701 = icmp eq i64 %1700, %1048
  br i1 %1701, label %1049, label %1643

1702:                                             ; preds = %1638, %1578, %1304, %927
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %846) #5
  call void @llvm.lifetime.end.p0i8(i64 12672, i8* nonnull %845) #5
  %1703 = add i8 %857, 1
  %1704 = icmp ugt i8 %1703, %844
  br i1 %1704, label %1705, label %856

1705:                                             ; preds = %1702
  %1706 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1707 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1706, i64 0, i32 11, i64 0
  %1708 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 12, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1707, i32* %1708) #5
  %1709 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1710 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1709, i64 0, i32 11, i64 1
  %1711 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 12, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1710, i32* %1711) #5
  %1712 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1713 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1712, i64 0, i32 11, i64 2
  %1714 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 12, i64 2, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1713, i32* %1714) #5
  %1715 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %1716 = load i32, i32* %1715, align 4
  %1717 = icmp eq i32 %1716, 0
  br i1 %1717, label %1988, label %1718

1718:                                             ; preds = %1705
  %1719 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %1720 = load i8, i8* %1719, align 4
  %1721 = icmp eq i8 %1720, 0
  br i1 %1721, label %1722, label %1988

1722:                                             ; preds = %1718
  %1723 = bitcast [32 x [2 x i32]]* %5 to i8*
  %1724 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 0
  %1725 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 0, i64 0
  %1726 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 1, i64 0
  %1727 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 2, i64 0
  br label %1728

1728:                                             ; preds = %1728, %1722
  %1729 = phi i64 [ 0, %1722 ], [ %1735, %1728 ]
  %1730 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1731 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 6, i64 %1729, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp9_inter_mode_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1731) #5
  %1732 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1730, i64 0, i32 5, i64 %1729, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1732, i32* nonnull %1725) #5
  %1733 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1730, i64 0, i32 5, i64 %1729, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1733, i32* %1726) #5
  %1734 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1730, i64 0, i32 5, i64 %1729, i64 2
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1734, i32* %1727) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  %1735 = add nuw nsw i64 %1729, 1
  %1736 = icmp eq i64 %1735, 7
  br i1 %1736, label %1737, label %1728

1737:                                             ; preds = %1728
  %1738 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %1739 = load i8, i8* %1738, align 4
  %1740 = icmp eq i8 %1739, 4
  br i1 %1740, label %1741, label %1758

1741:                                             ; preds = %1737
  %1742 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1743 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_switchable_interp_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1743) #5
  %1744 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1742, i64 0, i32 4, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1744, i32* nonnull %1725) #5
  %1745 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1742, i64 0, i32 4, i64 0, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1745, i32* %1726) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  %1746 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1747 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 5, i64 1, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_switchable_interp_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1747) #5
  %1748 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1746, i64 0, i32 4, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1748, i32* nonnull %1725) #5
  %1749 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1746, i64 0, i32 4, i64 1, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1749, i32* %1726) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  %1750 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1751 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 5, i64 2, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_switchable_interp_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1751) #5
  %1752 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1750, i64 0, i32 4, i64 2, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1752, i32* nonnull %1725) #5
  %1753 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1750, i64 0, i32 4, i64 2, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1753, i32* %1726) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  %1754 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1755 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 5, i64 3, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp9_switchable_interp_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1755) #5
  %1756 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1754, i64 0, i32 4, i64 3, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1756, i32* nonnull %1725) #5
  %1757 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1754, i64 0, i32 4, i64 3, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1757, i32* %1726) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  br label %1758

1758:                                             ; preds = %1741, %1737
  %1759 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 6, i64 0
  %1760 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 7, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1759, i32* %1760) #5
  %1761 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 6, i64 1
  %1762 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 7, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1761, i32* %1762) #5
  %1763 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 6, i64 2
  %1764 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 7, i64 2, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1763, i32* %1764) #5
  %1765 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 6, i64 3
  %1766 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 7, i64 3, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1765, i32* %1766) #5
  %1767 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 78
  %1768 = load i32, i32* %1767, align 8
  %1769 = icmp eq i32 %1768, 0
  br i1 %1769, label %1916, label %1770

1770:                                             ; preds = %1758
  %1771 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  %1772 = load i32, i32* %1771, align 16
  %1773 = icmp ne i32 %1772, 0
  %1774 = icmp eq i32 %1772, 2
  %1775 = load i32, i32* %580, align 8
  %1776 = load i32, i32* %579, align 4
  %1777 = load i32, i32* %578, align 8
  %1778 = shl i32 %1776, 7
  %1779 = add i32 %1778, -128
  %1780 = lshr i32 %1779, 8
  %1781 = add nuw nsw i32 %1780, 1
  %1782 = sub i32 %1776, %1781
  %1783 = select i1 %1773, i32 %1782, i32 %1781
  %1784 = select i1 %1773, i32 %1781, i32 0
  %1785 = add i32 %1784, %1777
  %1786 = zext i32 %1783 to i64
  %1787 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1786
  %1788 = load i8, i8* %1787, align 1
  %1789 = zext i8 %1788 to i32
  %1790 = shl i32 %1783, %1789
  %1791 = add nsw i32 %1775, %1789
  %1792 = icmp sgt i32 %1791, -1
  br i1 %1792, label %1793, label %1836

1793:                                             ; preds = %1770
  %1794 = sub i32 0, %1775
  %1795 = xor i32 %1775, -1
  %1796 = shl i32 %1785, %1795
  %1797 = icmp slt i32 %1796, 0
  br i1 %1797, label %1798, label %1824

1798:                                             ; preds = %1793
  %1799 = load i32, i32* %581, align 4
  %1800 = add i32 %1799, -1
  %1801 = icmp sgt i32 %1800, -1
  %1802 = load i8*, i8** %582, align 8
  %1803 = sext i32 %1800 to i64
  %1804 = getelementptr inbounds i8, i8* %1802, i64 %1803
  br i1 %1801, label %1805, label %1820

1805:                                             ; preds = %1798, %1812
  %1806 = phi i8* [ %1816, %1812 ], [ %1802, %1798 ]
  %1807 = phi i64 [ %1819, %1812 ], [ %1803, %1798 ]
  %1808 = phi i8* [ %1818, %1812 ], [ %1804, %1798 ]
  %1809 = load i8, i8* %1808, align 1
  %1810 = icmp eq i8 %1809, -1
  %1811 = getelementptr inbounds i8, i8* %1806, i64 %1807
  br i1 %1810, label %1812, label %1820

1812:                                             ; preds = %1805
  store i8 0, i8* %1811, align 1
  %1813 = trunc i64 %1807 to i32
  %1814 = add i32 %1813, -1
  %1815 = icmp sgt i32 %1814, -1
  %1816 = load i8*, i8** %582, align 8
  %1817 = sext i32 %1814 to i64
  %1818 = getelementptr inbounds i8, i8* %1816, i64 %1817
  %1819 = add nsw i64 %1807, -1
  br i1 %1815, label %1805, label %1820

1820:                                             ; preds = %1812, %1805, %1798
  %1821 = phi i8* [ %1804, %1798 ], [ %1811, %1805 ], [ %1818, %1812 ]
  %1822 = load i8, i8* %1821, align 1
  %1823 = add i8 %1822, 1
  store i8 %1823, i8* %1821, align 1
  br label %1824

1824:                                             ; preds = %1820, %1793
  %1825 = add i32 %1775, 24
  %1826 = lshr i32 %1785, %1825
  %1827 = trunc i32 %1826 to i8
  %1828 = load i8*, i8** %582, align 8
  %1829 = load i32, i32* %581, align 4
  %1830 = add i32 %1829, 1
  store i32 %1830, i32* %581, align 4
  %1831 = zext i32 %1829 to i64
  %1832 = getelementptr inbounds i8, i8* %1828, i64 %1831
  store i8 %1827, i8* %1832, align 1
  %1833 = shl i32 %1785, %1794
  %1834 = and i32 %1833, 16777215
  %1835 = add nsw i32 %1791, -8
  br label %1836

1836:                                             ; preds = %1824, %1770
  %1837 = phi i32 [ %1835, %1824 ], [ %1791, %1770 ]
  %1838 = phi i32 [ %1834, %1824 ], [ %1785, %1770 ]
  %1839 = phi i32 [ %1791, %1824 ], [ %1789, %1770 ]
  %1840 = shl i32 %1838, %1839
  store i32 %1837, i32* %580, align 8
  store i32 %1840, i32* %578, align 8
  store i32 %1790, i32* %579, align 4
  br i1 %1773, label %1841, label %1916

1841:                                             ; preds = %1836
  %1842 = shl i32 %1790, 7
  %1843 = add i32 %1842, -128
  %1844 = lshr i32 %1843, 8
  %1845 = add nuw nsw i32 %1844, 1
  %1846 = sub i32 %1790, %1845
  %1847 = select i1 %1774, i32 %1846, i32 %1845
  %1848 = select i1 %1774, i32 %1845, i32 0
  %1849 = add i32 %1840, %1848
  %1850 = zext i32 %1847 to i64
  %1851 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1850
  %1852 = load i8, i8* %1851, align 1
  %1853 = zext i8 %1852 to i32
  %1854 = shl i32 %1847, %1853
  %1855 = add nsw i32 %1837, %1853
  %1856 = icmp sgt i32 %1855, -1
  br i1 %1856, label %1857, label %1900

1857:                                             ; preds = %1841
  %1858 = sub i32 0, %1837
  %1859 = xor i32 %1837, -1
  %1860 = shl i32 %1849, %1859
  %1861 = icmp slt i32 %1860, 0
  br i1 %1861, label %1862, label %1888

1862:                                             ; preds = %1857
  %1863 = load i32, i32* %581, align 4
  %1864 = add i32 %1863, -1
  %1865 = icmp sgt i32 %1864, -1
  %1866 = load i8*, i8** %582, align 8
  %1867 = sext i32 %1864 to i64
  %1868 = getelementptr inbounds i8, i8* %1866, i64 %1867
  br i1 %1865, label %1869, label %1884

1869:                                             ; preds = %1862, %1876
  %1870 = phi i8* [ %1880, %1876 ], [ %1866, %1862 ]
  %1871 = phi i64 [ %1883, %1876 ], [ %1867, %1862 ]
  %1872 = phi i8* [ %1882, %1876 ], [ %1868, %1862 ]
  %1873 = load i8, i8* %1872, align 1
  %1874 = icmp eq i8 %1873, -1
  %1875 = getelementptr inbounds i8, i8* %1870, i64 %1871
  br i1 %1874, label %1876, label %1884

1876:                                             ; preds = %1869
  store i8 0, i8* %1875, align 1
  %1877 = trunc i64 %1871 to i32
  %1878 = add i32 %1877, -1
  %1879 = icmp sgt i32 %1878, -1
  %1880 = load i8*, i8** %582, align 8
  %1881 = sext i32 %1878 to i64
  %1882 = getelementptr inbounds i8, i8* %1880, i64 %1881
  %1883 = add nsw i64 %1871, -1
  br i1 %1879, label %1869, label %1884

1884:                                             ; preds = %1876, %1869, %1862
  %1885 = phi i8* [ %1868, %1862 ], [ %1875, %1869 ], [ %1882, %1876 ]
  %1886 = load i8, i8* %1885, align 1
  %1887 = add i8 %1886, 1
  store i8 %1887, i8* %1885, align 1
  br label %1888

1888:                                             ; preds = %1884, %1857
  %1889 = add i32 %1837, 24
  %1890 = lshr i32 %1849, %1889
  %1891 = trunc i32 %1890 to i8
  %1892 = load i8*, i8** %582, align 8
  %1893 = load i32, i32* %581, align 4
  %1894 = add i32 %1893, 1
  store i32 %1894, i32* %581, align 4
  %1895 = zext i32 %1893 to i64
  %1896 = getelementptr inbounds i8, i8* %1892, i64 %1895
  store i8 %1891, i8* %1896, align 1
  %1897 = shl i32 %1849, %1858
  %1898 = and i32 %1897, 16777215
  %1899 = add nsw i32 %1855, -8
  br label %1900

1900:                                             ; preds = %1888, %1841
  %1901 = phi i32 [ %1899, %1888 ], [ %1855, %1841 ]
  %1902 = phi i32 [ %1898, %1888 ], [ %1849, %1841 ]
  %1903 = phi i32 [ %1855, %1888 ], [ %1853, %1841 ]
  %1904 = shl i32 %1902, %1903
  store i32 %1901, i32* %580, align 8
  store i32 %1904, i32* %578, align 8
  store i32 %1854, i32* %579, align 4
  br i1 %1774, label %1905, label %1916

1905:                                             ; preds = %1900
  %1906 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 7, i64 0
  %1907 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 8, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1906, i32* %1907) #5
  %1908 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 7, i64 1
  %1909 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 8, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1908, i32* %1909) #5
  %1910 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 7, i64 2
  %1911 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 8, i64 2, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1910, i32* %1911) #5
  %1912 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 7, i64 3
  %1913 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 8, i64 3, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1912, i32* %1913) #5
  %1914 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 7, i64 4
  %1915 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 8, i64 4, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1914, i32* %1915) #5
  br label %1916

1916:                                             ; preds = %1905, %1900, %1836, %1758
  %1917 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  %1918 = load i32, i32* %1917, align 16
  %1919 = icmp eq i32 %1918, 1
  br i1 %1919, label %1943, label %1920

1920:                                             ; preds = %1916
  %1921 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 0, i64 0
  %1922 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 0, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1921, i32* %1922) #5
  %1923 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 0, i64 1
  %1924 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 0, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1923, i32* %1924) #5
  %1925 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 1, i64 0
  %1926 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 1, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1925, i32* %1926) #5
  %1927 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 1, i64 1
  %1928 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 1, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1927, i32* %1928) #5
  %1929 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 2, i64 0
  %1930 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 2, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1929, i32* %1930) #5
  %1931 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 2, i64 1
  %1932 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 2, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1931, i32* %1932) #5
  %1933 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 3, i64 0
  %1934 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 3, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1933, i32* %1934) #5
  %1935 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 3, i64 1
  %1936 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 3, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1935, i32* %1936) #5
  %1937 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 4, i64 0
  %1938 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 4, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1937, i32* %1938) #5
  %1939 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 8, i64 4, i64 1
  %1940 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 9, i64 4, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1939, i32* %1940) #5
  %1941 = load i32, i32* %1917, align 16
  %1942 = icmp eq i32 %1941, 0
  br i1 %1942, label %1954, label %1943

1943:                                             ; preds = %1920, %1916
  %1944 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 9, i64 0
  %1945 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 10, i64 0, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1944, i32* %1945) #5
  %1946 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 9, i64 1
  %1947 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 10, i64 1, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1946, i32* %1947) #5
  %1948 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 9, i64 2
  %1949 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 10, i64 2, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1948, i32* %1949) #5
  %1950 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 9, i64 3
  %1951 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 10, i64 3, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1950, i32* %1951) #5
  %1952 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 9, i64 4
  %1953 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 10, i64 4, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1952, i32* %1953) #5
  br label %1954

1954:                                             ; preds = %1943, %1920
  %1955 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 3, i64 0
  %1956 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 4, i64 0
  %1957 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 5, i64 0
  %1958 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 6, i64 0
  %1959 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 7, i64 0
  %1960 = getelementptr inbounds [32 x [2 x i32]], [32 x [2 x i32]]* %5, i64 0, i64 8, i64 0
  br label %1961

1961:                                             ; preds = %1961, %1954
  %1962 = phi i64 [ 0, %1954 ], [ %1974, %1961 ]
  %1963 = load %struct.frame_contexts*, %struct.frame_contexts** %573, align 8
  %1964 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 0, i64 %1962, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1964) #5
  %1965 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1965, i32* nonnull %1725) #5
  %1966 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1966, i32* %1726) #5
  %1967 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 2
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1967, i32* %1727) #5
  %1968 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 3
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1968, i32* %1955) #5
  %1969 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 4
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1969, i32* %1956) #5
  %1970 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 5
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1970, i32* %1957) #5
  %1971 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 6
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1971, i32* %1958) #5
  %1972 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 7
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1972, i32* %1959) #5
  %1973 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1963, i64 0, i32 0, i64 %1962, i64 8
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1973, i32* %1960) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  %1974 = add nuw nsw i64 %1962, 1
  %1975 = icmp eq i64 %1974, 4
  br i1 %1975, label %1976, label %1961

1976:                                             ; preds = %1961, %1976
  %1977 = phi i64 [ %1982, %1976 ], [ 0, %1961 ]
  %1978 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 2, i64 %1977, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %1723) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1723, i8 -86, i64 256, i1 false) #5
  call void @vp9_tree_probs_from_distribution(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @vp9_partition_tree, i64 0, i64 0), [2 x i32]* nonnull %1724, i32* %1978) #5
  %1979 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 2, i64 %1977, i64 0
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1979, i32* nonnull %1725) #5
  %1980 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 2, i64 %1977, i64 1
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1980, i32* %1726) #5
  %1981 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %574, i64 0, i32 2, i64 %1977, i64 2
  call void @vp9_cond_prob_diff_update(%struct.vpx_writer* nonnull %15, i8* %1981, i32* %1727) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %1723) #5
  %1982 = add nuw nsw i64 %1977, 1
  %1983 = icmp eq i64 %1982, 16
  br i1 %1983, label %1984, label %1976

1984:                                             ; preds = %1976
  %1985 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %1986 = load i32, i32* %1985, align 16
  %1987 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %576, i64 0, i32 13
  call void @vp9_write_nmv_probs(%struct.VP9Common* %24, i32 %1986, %struct.vpx_writer* nonnull %15, %struct.nmv_context_counts* %1987) #5
  br label %1988

1988:                                             ; preds = %1705, %1718, %1984
  call void @vpx_stop_encode(%struct.vpx_writer* nonnull %15) #5
  %1989 = load i32, i32* %581, align 4
  %1990 = zext i32 %1989 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %577) #5
  %1991 = getelementptr inbounds i8, i8* %572, i64 %1990
  call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* nonnull %19, i32 %1989, i32 16) #5
  %1992 = bitcast %struct.vpx_writer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1992) #5
  %1993 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %4, i64 0, i32 3
  %1994 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1992, i8 -86, i64 24, i1 false) #5
  %1995 = load i32, i32* %1994, align 8
  %1996 = shl i32 1, %1995
  %1997 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 86
  %1998 = load i32, i32* %1997, align 4
  %1999 = shl i32 1, %1998
  %2000 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 90
  %2001 = load i8*, i8** %2000, align 16
  %2002 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %2003 = load i32, i32* %2002, align 8
  %2004 = add nsw i32 %2003, 7
  %2005 = and i32 %2004, -8
  %2006 = sext i32 %2005 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %2001, i8 0, i64 %2006, i1 false) #5
  %2007 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 15
  %2008 = load i32, i32* %2007, align 8
  %2009 = icmp eq i32 %2008, 2
  br i1 %2009, label %2010, label %2229

2010:                                             ; preds = %1988
  %2011 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %2012 = load i32, i32* %2011, align 4
  %2013 = icmp sgt i32 %2012, 1
  %2014 = icmp eq i32 %1998, 0
  %2015 = and i1 %2014, %2013
  %2016 = icmp sgt i32 %1996, 1
  %2017 = and i1 %2016, %2015
  br i1 %2017, label %2018, label %2229

2018:                                             ; preds = %2010
  %2019 = call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #5
  %2020 = load i32, i32* %1994, align 8
  %2021 = shl i32 1, %2020
  %2022 = load i32, i32* %2011, align 4
  %2023 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 139
  %2024 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2025 = icmp eq %struct.VP9BitstreamWorkerData* %2024, null
  br i1 %2025, label %2051, label %2026

2026:                                             ; preds = %2018
  %2027 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2024, i64 1, i32 1
  %2028 = load i32, i32* %2027, align 8
  %2029 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 2
  %2030 = load i32, i32* %2029, align 8
  %2031 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 3
  %2032 = load i32, i32* %2031, align 4
  %2033 = mul nsw i32 %2032, %2030
  %2034 = icmp sgt i32 %2028, %2033
  br i1 %2034, label %2035, label %2088

2035:                                             ; preds = %2026
  %2036 = icmp sgt i32 %2022, 1
  br i1 %2036, label %2037, label %2047

2037:                                             ; preds = %2035, %2037
  %2038 = phi i64 [ %2042, %2037 ], [ 1, %2035 ]
  %2039 = phi %struct.VP9BitstreamWorkerData* [ %2046, %2037 ], [ %2024, %2035 ]
  %2040 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2039, i64 %2038, i32 0
  %2041 = load i8*, i8** %2040, align 16
  call void @vpx_free(i8* %2041) #5
  %2042 = add nuw nsw i64 %2038, 1
  %2043 = load i32, i32* %2011, align 4
  %2044 = sext i32 %2043 to i64
  %2045 = icmp slt i64 %2042, %2044
  %2046 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  br i1 %2045, label %2037, label %2047

2047:                                             ; preds = %2037, %2035
  %2048 = phi %struct.VP9BitstreamWorkerData* [ %2024, %2035 ], [ %2046, %2037 ]
  %2049 = bitcast %struct.VP9BitstreamWorkerData* %2048 to i8*
  call void @vpx_free(i8* %2049) #5
  store %struct.VP9BitstreamWorkerData* null, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2050 = load i32, i32* %2011, align 4
  br label %2051

2051:                                             ; preds = %2047, %2018
  %2052 = phi i32 [ %2022, %2018 ], [ %2050, %2047 ]
  %2053 = sext i32 %2052 to i64
  %2054 = mul nsw i64 %2053, 720
  %2055 = call i8* @vpx_memalign(i64 16, i64 %2054) #5
  %2056 = bitcast %struct.VP9BitstreamWorkerData** %2023 to i8**
  store i8* %2055, i8** %2056, align 16
  call void @llvm.memset.p0i8.i64(i8* align 16 %2055, i8 0, i64 %2054, i1 false) #5
  %2057 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2058 = icmp eq %struct.VP9BitstreamWorkerData* %2057, null
  br i1 %2058, label %2286, label %2059

2059:                                             ; preds = %2051
  %2060 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 2
  %2061 = load i32, i32* %2011, align 4
  %2062 = icmp sgt i32 %2061, 1
  br i1 %2062, label %2063, label %2088

2063:                                             ; preds = %2059
  %2064 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 3
  br label %2069

2065:                                             ; preds = %2069
  %2066 = load i32, i32* %2011, align 4
  %2067 = sext i32 %2066 to i64
  %2068 = icmp slt i64 %2087, %2067
  br i1 %2068, label %2069, label %2088

2069:                                             ; preds = %2065, %2063
  %2070 = phi %struct.VP9BitstreamWorkerData* [ %2057, %2063 ], [ %2083, %2065 ]
  %2071 = phi i64 [ 1, %2063 ], [ %2087, %2065 ]
  %2072 = load i32, i32* %2060, align 8
  %2073 = load i32, i32* %2064, align 4
  %2074 = mul nsw i32 %2073, %2072
  %2075 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2070, i64 %2071, i32 1
  store i32 %2074, i32* %2075, align 8
  %2076 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2077 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2076, i64 %2071, i32 1
  %2078 = load i32, i32* %2077, align 8
  %2079 = sext i32 %2078 to i64
  %2080 = call i8* @vpx_malloc(i64 %2079) #5
  %2081 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2082 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2081, i64 %2071, i32 0
  store i8* %2080, i8** %2082, align 16
  %2083 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2084 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2083, i64 %2071, i32 0
  %2085 = load i8*, i8** %2084, align 16
  %2086 = icmp eq i8* %2085, null
  %2087 = add nuw nsw i64 %2071, 1
  br i1 %2086, label %2286, label %2065

2088:                                             ; preds = %2065, %2059, %2026
  %2089 = icmp eq i32 %2020, 31
  br i1 %2089, label %2286, label %2090

2090:                                             ; preds = %2088
  %2091 = icmp sgt i32 %2022, 0
  %2092 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 136
  %2093 = bitcast %struct.macroblockd* %25 to i8*
  %2094 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 76
  %2095 = add nsw i32 %2021, -1
  %2096 = add nsw i32 %2022, -1
  %2097 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2019, i64 0, i32 4
  %2098 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2019, i64 0, i32 3
  %2099 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2019, i64 0, i32 2
  %2100 = sext i32 %2096 to i64
  %2101 = sext i32 %2022 to i64
  %2102 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 69, i64 0, i64 0
  %2103 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 69, i64 0, i64 1
  %2104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 69, i64 0, i64 2
  %2105 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 69, i64 0, i64 3
  br label %2110

2106:                                             ; preds = %2224, %2117, %2110
  %2107 = phi i32 [ %2159, %2117 ], [ %2111, %2110 ], [ %2159, %2224 ]
  %2108 = phi i64 [ %2112, %2117 ], [ %2112, %2110 ], [ %2226, %2224 ]
  %2109 = icmp slt i32 %2107, %2021
  br i1 %2109, label %2110, label %2286

2110:                                             ; preds = %2106, %2090
  %2111 = phi i32 [ 0, %2090 ], [ %2107, %2106 ]
  %2112 = phi i64 [ 0, %2090 ], [ %2108, %2106 ]
  %2113 = icmp slt i32 %2111, %2021
  %2114 = and i1 %2091, %2113
  br i1 %2114, label %2115, label %2106

2115:                                             ; preds = %2110
  %2116 = getelementptr inbounds i8, i8* %1991, i64 %2112
  br label %2126

2117:                                             ; preds = %2158
  %2118 = trunc i64 %2160 to i32
  %2119 = icmp eq i32 %2118, 0
  br i1 %2119, label %2106, label %2120

2120:                                             ; preds = %2117
  %2121 = icmp ne i32 %2159, %2021
  %2122 = shl i64 %2160, 32
  %2123 = add i64 %2122, -4294967296
  %2124 = ashr exact i64 %2123, 32
  %2125 = and i64 %2160, 4294967295
  br label %2164

2126:                                             ; preds = %2158, %2115
  %2127 = phi i64 [ 0, %2115 ], [ %2160, %2158 ]
  %2128 = phi i32 [ %2111, %2115 ], [ %2159, %2158 ]
  %2129 = load %struct.VPxWorker*, %struct.VPxWorker** %2092, align 8
  %2130 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2129, i64 %2127
  %2131 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2023, align 16
  %2132 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2131, i64 %2127
  %2133 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2131, i64 %2127, i32 6
  %2134 = bitcast %struct.macroblockd* %2133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %2134, i8* align 16 %2093, i64 656, i1 false) #5
  %2135 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2131, i64 %2127, i32 3
  store i32 %2128, i32* %2135, align 8
  %2136 = load i32, i32* %2094, align 16
  %2137 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2131, i64 %2127, i32 4
  store i32 %2136, i32* %2137, align 4
  %2138 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2131, i64 %2127, i32 5, i64 0
  %2139 = bitcast [4 x i32]* %2138 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2139, i8 0, i64 16, i1 false) #5
  %2140 = icmp eq i64 %2127, 0
  br i1 %2140, label %2141, label %2146

2141:                                             ; preds = %2126
  %2142 = icmp eq i32 %2128, %2095
  %2143 = select i1 %2142, i64 0, i64 4
  %2144 = getelementptr inbounds i8, i8* %2116, i64 %2143
  %2145 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2132, i64 0, i32 0
  store i8* %2144, i8** %2145, align 16
  br label %2146

2146:                                             ; preds = %2141, %2126
  %2147 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2129, i64 %2127, i32 3
  %2148 = bitcast i8** %2147 to %struct.VP9_COMP**
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %2148, align 8
  %2149 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2129, i64 %2127, i32 4
  %2150 = bitcast i8** %2149 to %struct.VP9BitstreamWorkerData**
  store %struct.VP9BitstreamWorkerData* %2132, %struct.VP9BitstreamWorkerData** %2150, align 8
  %2151 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2129, i64 %2127, i32 2
  store i32 (i8*, i8*)* @encode_tile_worker, i32 (i8*, i8*)** %2151, align 8
  %2152 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2129, i64 %2127, i32 5
  store i32 0, i32* %2152, align 8
  %2153 = icmp slt i64 %2127, %2100
  br i1 %2153, label %2154, label %2156

2154:                                             ; preds = %2146
  %2155 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2098, align 8
  call void %2155(%struct.VPxWorker* %2130) #5
  br label %2158

2156:                                             ; preds = %2146
  %2157 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2097, align 8
  call void %2157(%struct.VPxWorker* %2130) #5
  br label %2158

2158:                                             ; preds = %2156, %2154
  %2159 = add nsw i32 %2128, 1
  %2160 = add nuw nsw i64 %2127, 1
  %2161 = icmp slt i64 %2160, %2101
  %2162 = icmp slt i32 %2159, %2021
  %2163 = and i1 %2161, %2162
  br i1 %2163, label %2126, label %2117

2164:                                             ; preds = %2224, %2120
  %2165 = phi i64 [ 0, %2120 ], [ %2227, %2224 ]
  %2166 = phi i64 [ %2112, %2120 ], [ %2226, %2224 ]
  %2167 = load %struct.VPxWorker*, %struct.VPxWorker** %2092, align 8
  %2168 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2167, i64 %2165
  %2169 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2167, i64 %2165, i32 4
  %2170 = bitcast i8** %2169 to %struct.VP9BitstreamWorkerData**
  %2171 = load %struct.VP9BitstreamWorkerData*, %struct.VP9BitstreamWorkerData** %2170, align 8
  %2172 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %2099, align 8
  %2173 = call i32 %2172(%struct.VPxWorker* %2168) #5
  %2174 = icmp eq i32 %2173, 0
  br i1 %2174, label %2286, label %2175

2175:                                             ; preds = %2164
  %2176 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 2, i32 3
  %2177 = load i32, i32* %2176, align 4
  %2178 = load i32, i32* %2094, align 16
  %2179 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 4
  %2180 = load i32, i32* %2179, align 4
  %2181 = icmp ugt i32 %2178, %2180
  %2182 = select i1 %2181, i32 %2178, i32 %2180
  store i32 %2182, i32* %2094, align 16
  %2183 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 5, i64 0, i64 0
  %2184 = load i32, i32* %2183, align 4
  %2185 = load i32, i32* %2102, align 4
  %2186 = add nsw i32 %2185, %2184
  store i32 %2186, i32* %2102, align 4
  %2187 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 5, i64 0, i64 1
  %2188 = load i32, i32* %2187, align 4
  %2189 = load i32, i32* %2103, align 4
  %2190 = add nsw i32 %2189, %2188
  store i32 %2190, i32* %2103, align 4
  %2191 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 5, i64 0, i64 2
  %2192 = load i32, i32* %2191, align 4
  %2193 = load i32, i32* %2104, align 4
  %2194 = add nsw i32 %2193, %2192
  store i32 %2194, i32* %2104, align 4
  %2195 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 5, i64 0, i64 3
  %2196 = load i32, i32* %2195, align 4
  %2197 = load i32, i32* %2105, align 4
  %2198 = add nsw i32 %2197, %2196
  store i32 %2198, i32* %2105, align 4
  %2199 = icmp slt i64 %2165, %2124
  %2200 = or i1 %2121, %2199
  br i1 %2200, label %2201, label %2214

2201:                                             ; preds = %2175
  %2202 = getelementptr inbounds i8, i8* %1991, i64 %2166
  %2203 = lshr i32 %2177, 24
  %2204 = trunc i32 %2203 to i8
  store i8 %2204, i8* %2202, align 1
  %2205 = lshr i32 %2177, 16
  %2206 = trunc i32 %2205 to i8
  %2207 = getelementptr inbounds i8, i8* %2202, i64 1
  store i8 %2206, i8* %2207, align 1
  %2208 = lshr i32 %2177, 8
  %2209 = trunc i32 %2208 to i8
  %2210 = getelementptr inbounds i8, i8* %2202, i64 2
  store i8 %2209, i8* %2210, align 1
  %2211 = trunc i32 %2177 to i8
  %2212 = getelementptr inbounds i8, i8* %2202, i64 3
  store i8 %2211, i8* %2212, align 1
  %2213 = add i64 %2166, 4
  br label %2214

2214:                                             ; preds = %2201, %2175
  %2215 = phi i64 [ %2213, %2201 ], [ %2166, %2175 ]
  %2216 = icmp eq i64 %2165, 0
  br i1 %2216, label %2217, label %2219

2217:                                             ; preds = %2214
  %2218 = zext i32 %2177 to i64
  br label %2224

2219:                                             ; preds = %2214
  %2220 = getelementptr inbounds i8, i8* %1991, i64 %2215
  %2221 = getelementptr inbounds %struct.VP9BitstreamWorkerData, %struct.VP9BitstreamWorkerData* %2171, i64 0, i32 0
  %2222 = load i8*, i8** %2221, align 16
  %2223 = zext i32 %2177 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2220, i8* align 1 %2222, i64 %2223, i1 false) #5
  br label %2224

2224:                                             ; preds = %2219, %2217
  %2225 = phi i64 [ %2218, %2217 ], [ %2223, %2219 ]
  %2226 = add i64 %2225, %2215
  %2227 = add nuw nsw i64 %2165, 1
  %2228 = icmp eq i64 %2227, %2125
  br i1 %2228, label %2106, label %2164

2229:                                             ; preds = %2010, %1988
  %2230 = icmp eq i32 %1998, 31
  br i1 %2230, label %2286, label %2231

2231:                                             ; preds = %2229
  %2232 = icmp eq i32 %1995, 31
  %2233 = add nsw i32 %1996, -1
  %2234 = add nsw i32 %1999, -1
  %2235 = getelementptr inbounds i8, i8* %1991, i64 4
  %2236 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %2237 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 76
  %2238 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 69, i64 0
  %2239 = sext i32 %2233 to i64
  %2240 = sext i32 %1996 to i64
  br label %2241

2241:                                             ; preds = %2282, %2231
  %2242 = phi i64 [ 0, %2231 ], [ %2283, %2282 ]
  %2243 = phi i32 [ 0, %2231 ], [ %2284, %2282 ]
  br i1 %2232, label %2282, label %2244

2244:                                             ; preds = %2241
  %2245 = shl i32 %2243, %1995
  %2246 = icmp slt i32 %2243, %2234
  %2247 = sext i32 %2245 to i64
  br label %2248

2248:                                             ; preds = %2275, %2244
  %2249 = phi i64 [ 0, %2244 ], [ %2280, %2275 ]
  %2250 = phi i64 [ %2242, %2244 ], [ %2279, %2275 ]
  %2251 = add nsw i64 %2249, %2247
  %2252 = icmp slt i64 %2249, %2239
  %2253 = or i1 %2246, %2252
  %2254 = select i1 %2253, i8* %2235, i8* %1991
  %2255 = getelementptr inbounds i8, i8* %2254, i64 %2250
  call void @vpx_start_encode(%struct.vpx_writer* nonnull %4, i8* %2255) #5
  %2256 = load %struct.TileDataEnc*, %struct.TileDataEnc** %2236, align 16
  %2257 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %2256, i64 %2251, i32 0
  %2258 = trunc i64 %2249 to i32
  call fastcc void @write_modes(%struct.VP9_COMP* %0, %struct.macroblockd* %25, %struct.TileInfo* %2257, %struct.vpx_writer* nonnull %4, i32 %2243, i32 %2258, i32* %2237, [4 x i32]* %2238) #5
  call void @vpx_stop_encode(%struct.vpx_writer* nonnull %4) #5
  br i1 %2253, label %2261, label %2259

2259:                                             ; preds = %2248
  %2260 = load i32, i32* %1993, align 4
  br label %2275

2261:                                             ; preds = %2248
  %2262 = getelementptr inbounds i8, i8* %1991, i64 %2250
  %2263 = load i32, i32* %1993, align 4
  %2264 = lshr i32 %2263, 24
  %2265 = trunc i32 %2264 to i8
  store i8 %2265, i8* %2262, align 1
  %2266 = lshr i32 %2263, 16
  %2267 = trunc i32 %2266 to i8
  %2268 = getelementptr inbounds i8, i8* %2262, i64 1
  store i8 %2267, i8* %2268, align 1
  %2269 = lshr i32 %2263, 8
  %2270 = trunc i32 %2269 to i8
  %2271 = getelementptr inbounds i8, i8* %2262, i64 2
  store i8 %2270, i8* %2271, align 1
  %2272 = trunc i32 %2263 to i8
  %2273 = getelementptr inbounds i8, i8* %2262, i64 3
  store i8 %2272, i8* %2273, align 1
  %2274 = add i64 %2250, 4
  br label %2275

2275:                                             ; preds = %2261, %2259
  %2276 = phi i32 [ %2263, %2261 ], [ %2260, %2259 ]
  %2277 = phi i64 [ %2274, %2261 ], [ %2250, %2259 ]
  %2278 = zext i32 %2276 to i64
  %2279 = add i64 %2277, %2278
  %2280 = add nuw nsw i64 %2249, 1
  %2281 = icmp slt i64 %2280, %2240
  br i1 %2281, label %2248, label %2282

2282:                                             ; preds = %2275, %2241
  %2283 = phi i64 [ %2242, %2241 ], [ %2279, %2275 ]
  %2284 = add nuw nsw i32 %2243, 1
  %2285 = icmp slt i32 %2284, %1999
  br i1 %2285, label %2241, label %2286

2286:                                             ; preds = %2282, %2069, %2106, %2164, %2051, %2088, %2229
  %2287 = phi i64 [ 0, %2051 ], [ 0, %2088 ], [ 0, %2229 ], [ 0, %2164 ], [ %2108, %2106 ], [ 0, %2069 ], [ %2283, %2282 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1992) #5
  %2288 = getelementptr inbounds i8, i8* %1991, i64 %2287
  %2289 = ptrtoint i8* %2288 to i64
  %2290 = ptrtoint i8* %1 to i64
  %2291 = sub i64 %2289, %2290
  br label %2292

2292:                                             ; preds = %2286, %568
  %2293 = phi i64 [ %2291, %2286 ], [ %569, %568 ]
  store i64 %2293, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #5
  ret void
}

declare i64 @vpx_wb_bytes_written(%struct.vpx_write_bit_buffer*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer*, i32, i32) local_unnamed_addr #3

declare void @vpx_clear_system_state() local_unnamed_addr #3

declare void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_bitdepth_colorspace_sampling(%struct.VP9Common* nocapture readonly, %struct.vpx_write_bit_buffer*) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 79
  %4 = load i32, i32* %3, align 4
  %5 = icmp ugt i32 %4, 1
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  %8 = load i32, i32* %7, align 16
  %9 = icmp ne i32 %8, 10
  %10 = zext i1 %9 to i32
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 %10) #5
  br label %11

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  tail call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* %1, i32 %13, i32 3) #5
  %14 = load i32, i32* %12, align 8
  %15 = icmp eq i32 %14, 7
  br i1 %15, label %25, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 %18) #5
  %19 = load i32, i32* %3, align 4
  switch i32 %19, label %26 [
    i32 1, label %20
    i32 3, label %20
  ]

20:                                               ; preds = %16, %16
  %21 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %22 = load i32, i32* %21, align 8
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 %22) #5
  %23 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %24 = load i32, i32* %23, align 4
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 %24) #5
  br label %25

25:                                               ; preds = %11, %20
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 0) #5
  br label %26

26:                                               ; preds = %25, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_frame_size(%struct.VP9Common* nocapture readonly, %struct.vpx_write_bit_buffer*) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 16
  %5 = add nsw i32 %4, -1
  tail call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* %1, i32 %5, i32 16) #5
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, -1
  tail call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* %1, i32 %8, i32 16) #5
  %9 = load i32, i32* %3, align 16
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %2
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 1) #5
  br label %20

14:                                               ; preds = %2
  %15 = load i32, i32* %6, align 4
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 6
  %17 = load i32, i32* %16, align 4
  %18 = icmp ne i32 %15, %17
  %19 = zext i1 %18 to i32
  tail call void @vpx_wb_write_bit(%struct.vpx_write_bit_buffer* %1, i32 %19) #5
  br i1 %18, label %20, label %26

20:                                               ; preds = %14, %13
  %21 = load i32, i32* %10, align 8
  %22 = add nsw i32 %21, -1
  tail call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* %1, i32 %22, i32 16) #5
  %23 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 6
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, -1
  tail call void @vpx_wb_write_literal(%struct.vpx_write_bit_buffer* %1, i32 %25, i32 16) #5
  br label %26

26:                                               ; preds = %14, %20
  ret void
}

declare void @vp9_choose_segmap_coding_method(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_seg_feature_data_max(i32) local_unnamed_addr #3

declare i32 @vp9_is_segfeature_signed(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

declare void @vp9_get_tile_n_bits(i32, i32*, i32*) local_unnamed_addr #3

declare void @vpx_start_encode(%struct.vpx_writer*, i8*) local_unnamed_addr #3

declare void @vp9_cond_prob_diff_update(%struct.vpx_writer*, i8*, i32*) local_unnamed_addr #3

declare void @vp9_write_nmv_probs(%struct.VP9Common*, i32, %struct.vpx_writer*, %struct.nmv_context_counts*) local_unnamed_addr #3

declare void @vpx_stop_encode(%struct.vpx_writer*) local_unnamed_addr #3

declare void @tx_counts_to_branch_counts_8x8(i32*, [2 x i32]*) local_unnamed_addr #3

declare void @tx_counts_to_branch_counts_16x16(i32*, [2 x i32]*) local_unnamed_addr #3

declare void @tx_counts_to_branch_counts_32x32(i32*, [2 x i32]*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vp9_tree_probs_from_distribution(i8*, [2 x i32]*, i32*) local_unnamed_addr #3

declare i32 @vp9_prob_diff_update_savings_search_model(i32*, i8 zeroext, i8*, i8 zeroext, i32) local_unnamed_addr #3

declare i32 @vp9_prob_diff_update_savings_search(i32*, i8 zeroext, i8*, i8 zeroext) local_unnamed_addr #3

declare void @vp9_write_prob_diff_update(%struct.vpx_writer*, i8 zeroext, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_modes(%struct.VP9_COMP*, %struct.macroblockd*, %struct.TileInfo* readonly, %struct.vpx_writer*, i32, i32, i32*, [4 x i32]*) unnamed_addr #2 {
  %9 = alloca %struct.TOKENEXTRA*, align 8
  %10 = bitcast %struct.TOKENEXTRA** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  store %struct.TOKENEXTRA* null, %struct.TOKENEXTRA** %9, align 8
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %16 = load i8, i8* %15, align 4
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %20 = load %struct.frame_contexts*, %struct.frame_contexts** %19, align 8
  %21 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %20, i64 0, i32 2, i64 0
  br label %22

22:                                               ; preds = %8, %14, %18
  %23 = phi [3 x i8]* [ %21, %18 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %14 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %8 ]
  %24 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 11
  store [3 x i8]* %23, [3 x i8]** %24, align 8
  %25 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %2, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %2, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %66

30:                                               ; preds = %22
  %31 = sext i32 %4 to i64
  %32 = sext i32 %5 to i64
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 56, i64 %31, i64 %32
  %34 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 22, i64 0
  %35 = bitcast i8* %34 to i64*
  %36 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %2, i64 0, i32 2
  %37 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %2, i64 0, i32 3
  br label %38

38:                                               ; preds = %64, %30
  %39 = phi i32 [ %26, %30 ], [ %65, %64 ]
  %40 = phi i32 [ %26, %30 ], [ %61, %64 ]
  %41 = add i32 %40, 7
  %42 = sub i32 %41, %39
  %43 = ashr i32 %42, 3
  %44 = load %struct.TOKENLIST*, %struct.TOKENLIST** %33, align 8
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %44, i64 %45, i32 0
  %47 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %46, align 8
  store %struct.TOKENEXTRA* %47, %struct.TOKENEXTRA** %9, align 8
  %48 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %44, i64 %45, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %47, i64 %50
  store i64 0, i64* %35, align 8
  %52 = load i32, i32* %36, align 4
  %53 = load i32, i32* %37, align 4
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %60

55:                                               ; preds = %38, %55
  %56 = phi i32 [ %57, %55 ], [ %52, %38 ]
  call fastcc void @write_modes_sb(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** nonnull %9, %struct.TOKENEXTRA* %51, i32 %40, i32 %56, i8 zeroext 12, i32* %6, [4 x i32]* %7)
  %57 = add nsw i32 %56, 8
  %58 = load i32, i32* %37, align 4
  %59 = icmp slt i32 %57, %58
  br i1 %59, label %55, label %60

60:                                               ; preds = %55, %38
  %61 = add nsw i32 %40, 8
  %62 = load i32, i32* %27, align 4
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = load i32, i32* %25, align 4
  br label %38

66:                                               ; preds = %60, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  ret void
}

declare %struct.VPxWorkerInterface* @vpx_get_worker_interface() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @encode_tile_worker(i8*, i8*) #2 {
  %3 = alloca %struct.TOKENEXTRA*, align 8
  %4 = bitcast i8* %0 to %struct.VP9_COMP*
  %5 = getelementptr inbounds i8, i8* %1, i64 64
  %6 = bitcast i8* %5 to %struct.macroblockd*
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to %struct.vpx_writer*
  %9 = bitcast i8* %1 to i8**
  %10 = load i8*, i8** %9, align 16
  tail call void @vpx_start_encode(%struct.vpx_writer* %8, i8* %10) #5
  %11 = getelementptr inbounds i8, i8* %0, i64 194512
  %12 = bitcast i8* %11 to %struct.TileDataEnc**
  %13 = load %struct.TileDataEnc*, %struct.TileDataEnc** %12, align 16
  %14 = getelementptr inbounds i8, i8* %1, i64 40
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %17, i32 0
  %19 = getelementptr inbounds i8, i8* %1, i64 44
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds i8, i8* %1, i64 48
  %22 = bitcast i8* %21 to [4 x i32]*
  %23 = bitcast %struct.TOKENEXTRA** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  store %struct.TOKENEXTRA* null, %struct.TOKENEXTRA** %3, align 8
  %24 = getelementptr inbounds i8, i8* %0, i64 173036
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %2
  %29 = getelementptr inbounds i8, i8* %0, i64 173052
  %30 = load i8, i8* %29, align 4
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %0, i64 176664
  %34 = bitcast i8* %33 to %struct.frame_contexts**
  %35 = load %struct.frame_contexts*, %struct.frame_contexts** %34, align 8
  %36 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %35, i64 0, i32 2, i64 0
  br label %37

37:                                               ; preds = %32, %28, %2
  %38 = phi [3 x i8]* [ %36, %32 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %28 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %2 ]
  %39 = getelementptr inbounds i8, i8* %1, i64 544
  %40 = bitcast i8* %39 to [3 x i8]**
  store [3 x i8]* %38, [3 x i8]** %40, align 8
  %41 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %18, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %17, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %42, %44
  br i1 %45, label %46, label %80

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 56, i64 0, i64 %17
  %48 = getelementptr inbounds i8, i8* %1, i64 680
  %49 = bitcast i8* %48 to i64*
  %50 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %17, i32 0, i32 2
  %51 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %13, i64 %17, i32 0, i32 3
  br label %52

52:                                               ; preds = %78, %46
  %53 = phi i32 [ %42, %46 ], [ %79, %78 ]
  %54 = phi i32 [ %42, %46 ], [ %75, %78 ]
  %55 = sub i32 7, %53
  %56 = add i32 %55, %54
  %57 = ashr i32 %56, 3
  %58 = load %struct.TOKENLIST*, %struct.TOKENLIST** %47, align 8
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %58, i64 %59, i32 0
  %61 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %60, align 8
  store %struct.TOKENEXTRA* %61, %struct.TOKENEXTRA** %3, align 8
  %62 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %58, i64 %59, i32 2
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %61, i64 %64
  store i64 0, i64* %49, align 8
  %66 = load i32, i32* %50, align 4
  %67 = load i32, i32* %51, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %52, %69
  %70 = phi i32 [ %71, %69 ], [ %66, %52 ]
  call fastcc void @write_modes_sb(%struct.VP9_COMP* %4, %struct.macroblockd* %6, %struct.TileInfo* %18, %struct.vpx_writer* %8, %struct.TOKENEXTRA** nonnull %3, %struct.TOKENEXTRA* %65, i32 %54, i32 %70, i8 zeroext 12, i32* %20, [4 x i32]* %22) #5
  %71 = add nsw i32 %70, 8
  %72 = load i32, i32* %51, align 4
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %69, label %74

74:                                               ; preds = %69, %52
  %75 = add nsw i32 %54, 8
  %76 = load i32, i32* %43, align 4
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = load i32, i32* %41, align 4
  br label %52

80:                                               ; preds = %74, %37
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  call void @vpx_stop_encode(%struct.vpx_writer* %8) #5
  ret i32 1
}

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #3

declare i8* @vpx_malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_modes_sb(%struct.VP9_COMP*, %struct.macroblockd*, %struct.TileInfo* readonly, %struct.vpx_writer*, %struct.TOKENEXTRA**, %struct.TOKENEXTRA*, i32, i32, i8 zeroext, i32*, [4 x i32]*) unnamed_addr #2 {
  %12 = zext i8 %8 to i64
  %13 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl i32 1, %15
  %17 = sdiv i32 %16, 4
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %19 = load i32, i32* %18, align 16
  %20 = icmp sgt i32 %19, %6
  br i1 %20, label %21, label %364

21:                                               ; preds = %11
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %23, %7
  br i1 %24, label %25, label %364

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %27 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %28 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %29 = load i32, i32* %28, align 4
  %30 = mul nsw i32 %29, %6
  %31 = add nsw i32 %30, %7
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %27, i64 %32
  %34 = load %struct.MODE_INFO*, %struct.MODE_INFO** %33, align 8
  %35 = zext i8 %14 to i64
  %36 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %34, i64 0, i32 0
  %37 = load i8, i8* %36, align 4
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [0 x [13 x i32]], [0 x [13 x i32]]* @partition_lookup, i64 0, i64 %35, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 21
  %42 = load i8*, i8** %41, align 8
  %43 = sext i32 %7 to i64
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = and i32 %6, 7
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 22, i64 %46
  %48 = getelementptr inbounds [13 x i8], [13 x i8]* @mi_width_log2_lookup, i64 0, i64 %12
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = load i8, i8* %44, align 1
  %52 = sext i8 %51 to i32
  %53 = lshr i32 %52, %50
  %54 = and i32 %53, 1
  %55 = load i8, i8* %47, align 1
  %56 = sext i8 %55 to i32
  %57 = lshr i32 %56, %50
  %58 = shl i32 %57, 1
  %59 = and i32 %58, 2
  %60 = shl nuw nsw i32 %50, 2
  %61 = or i32 %54, %60
  %62 = or i32 %61, %59
  %63 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 11
  %64 = load [3 x i8]*, [3 x i8]** %63, align 8
  %65 = zext i32 %62 to i64
  %66 = add nsw i32 %17, %6
  %67 = icmp slt i32 %66, %19
  %68 = add nsw i32 %17, %7
  %69 = icmp slt i32 %68, %23
  %70 = and i1 %67, %69
  br i1 %70, label %71, label %169

71:                                               ; preds = %25
  %72 = zext i32 %40 to i64
  %73 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @partition_encodings, i64 0, i64 %72, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @partition_encodings, i64 0, i64 %72, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %78 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %79 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %80 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %81 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %82 = load i32, i32* %77, align 8
  %83 = load i32, i32* %78, align 4
  %84 = load i32, i32* %79, align 8
  br label %85

85:                                               ; preds = %159, %71
  %86 = phi i32 [ %84, %71 ], [ %163, %159 ]
  %87 = phi i32 [ %83, %71 ], [ %113, %159 ]
  %88 = phi i32 [ %82, %71 ], [ %160, %159 ]
  %89 = phi i8 [ 0, %71 ], [ %167, %159 ]
  %90 = phi i32 [ %76, %71 ], [ %91, %159 ]
  %91 = add nsw i32 %90, -1
  %92 = lshr i32 %74, %91
  %93 = and i32 %92, 1
  %94 = sext i8 %89 to i32
  %95 = ashr i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [3 x i8], [3 x i8]* %64, i64 %65, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add i32 %87, -1
  %101 = mul i32 %100, %99
  %102 = lshr i32 %101, 8
  %103 = add nuw nsw i32 %102, 1
  %104 = icmp eq i32 %93, 0
  %105 = sub i32 %87, %103
  %106 = select i1 %104, i32 %103, i32 %105
  %107 = select i1 %104, i32 0, i32 %103
  %108 = add i32 %107, %86
  %109 = zext i32 %106 to i64
  %110 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = shl i32 %106, %112
  %114 = add nsw i32 %88, %112
  %115 = icmp sgt i32 %114, -1
  br i1 %115, label %116, label %159

116:                                              ; preds = %85
  %117 = sub i32 0, %88
  %118 = xor i32 %88, -1
  %119 = shl i32 %108, %118
  %120 = icmp slt i32 %119, 0
  br i1 %120, label %121, label %147

121:                                              ; preds = %116
  %122 = load i32, i32* %80, align 4
  %123 = add i32 %122, -1
  %124 = icmp sgt i32 %123, -1
  %125 = load i8*, i8** %81, align 8
  %126 = sext i32 %123 to i64
  %127 = getelementptr inbounds i8, i8* %125, i64 %126
  br i1 %124, label %128, label %143

128:                                              ; preds = %121, %135
  %129 = phi i8* [ %139, %135 ], [ %125, %121 ]
  %130 = phi i64 [ %142, %135 ], [ %126, %121 ]
  %131 = phi i8* [ %141, %135 ], [ %127, %121 ]
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, -1
  %134 = getelementptr inbounds i8, i8* %129, i64 %130
  br i1 %133, label %135, label %143

135:                                              ; preds = %128
  store i8 0, i8* %134, align 1
  %136 = trunc i64 %130 to i32
  %137 = add i32 %136, -1
  %138 = icmp sgt i32 %137, -1
  %139 = load i8*, i8** %81, align 8
  %140 = sext i32 %137 to i64
  %141 = getelementptr inbounds i8, i8* %139, i64 %140
  %142 = add nsw i64 %130, -1
  br i1 %138, label %128, label %143

143:                                              ; preds = %135, %128, %121
  %144 = phi i8* [ %127, %121 ], [ %141, %135 ], [ %134, %128 ]
  %145 = load i8, i8* %144, align 1
  %146 = add i8 %145, 1
  store i8 %146, i8* %144, align 1
  br label %147

147:                                              ; preds = %143, %116
  %148 = add i32 %88, 24
  %149 = lshr i32 %108, %148
  %150 = trunc i32 %149 to i8
  %151 = load i8*, i8** %81, align 8
  %152 = load i32, i32* %80, align 4
  %153 = add i32 %152, 1
  store i32 %153, i32* %80, align 4
  %154 = zext i32 %152 to i64
  %155 = getelementptr inbounds i8, i8* %151, i64 %154
  store i8 %150, i8* %155, align 1
  %156 = shl i32 %108, %117
  %157 = and i32 %156, 16777215
  %158 = add nsw i32 %114, -8
  br label %159

159:                                              ; preds = %147, %85
  %160 = phi i32 [ %158, %147 ], [ %114, %85 ]
  %161 = phi i32 [ %157, %147 ], [ %108, %85 ]
  %162 = phi i32 [ %114, %147 ], [ %112, %85 ]
  %163 = shl i32 %161, %162
  store i32 %160, i32* %77, align 8
  store i32 %163, i32* %79, align 8
  store i32 %113, i32* %78, align 4
  %164 = add nsw i32 %93, %94
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [6 x i8], [6 x i8]* @vp9_partition_tree, i64 0, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = icmp eq i32 %91, 0
  br i1 %168, label %330, label %85

169:                                              ; preds = %25
  %170 = xor i1 %67, true
  %171 = and i1 %69, %170
  br i1 %171, label %172, label %250

172:                                              ; preds = %169
  %173 = icmp ne i32 %40, 3
  %174 = getelementptr inbounds [3 x i8], [3 x i8]* %64, i64 %65, i64 1
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %178 = load i32, i32* %177, align 8
  %179 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %182 = load i32, i32* %181, align 8
  %183 = add i32 %180, -1
  %184 = mul i32 %183, %176
  %185 = lshr i32 %184, 8
  %186 = add nuw nsw i32 %185, 1
  %187 = sub i32 %180, %186
  %188 = select i1 %173, i32 %186, i32 %187
  %189 = select i1 %173, i32 0, i32 %186
  %190 = add i32 %189, %182
  %191 = zext i32 %188 to i64
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = shl i32 %188, %194
  %196 = add nsw i32 %178, %194
  %197 = icmp sgt i32 %196, -1
  br i1 %197, label %198, label %245

198:                                              ; preds = %172
  %199 = sub i32 0, %178
  %200 = xor i32 %178, -1
  %201 = shl i32 %190, %200
  %202 = icmp slt i32 %201, 0
  br i1 %202, label %203, label %231

203:                                              ; preds = %198
  %204 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, -1
  %207 = icmp sgt i32 %206, -1
  %208 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %209 = load i8*, i8** %208, align 8
  %210 = sext i32 %206 to i64
  %211 = getelementptr inbounds i8, i8* %209, i64 %210
  br i1 %207, label %212, label %227

212:                                              ; preds = %203, %219
  %213 = phi i8* [ %223, %219 ], [ %209, %203 ]
  %214 = phi i64 [ %226, %219 ], [ %210, %203 ]
  %215 = phi i8* [ %225, %219 ], [ %211, %203 ]
  %216 = load i8, i8* %215, align 1
  %217 = icmp eq i8 %216, -1
  %218 = getelementptr inbounds i8, i8* %213, i64 %214
  br i1 %217, label %219, label %227

219:                                              ; preds = %212
  store i8 0, i8* %218, align 1
  %220 = trunc i64 %214 to i32
  %221 = add i32 %220, -1
  %222 = icmp sgt i32 %221, -1
  %223 = load i8*, i8** %208, align 8
  %224 = sext i32 %221 to i64
  %225 = getelementptr inbounds i8, i8* %223, i64 %224
  %226 = add nsw i64 %214, -1
  br i1 %222, label %212, label %227

227:                                              ; preds = %219, %212, %203
  %228 = phi i8* [ %211, %203 ], [ %225, %219 ], [ %218, %212 ]
  %229 = load i8, i8* %228, align 1
  %230 = add i8 %229, 1
  store i8 %230, i8* %228, align 1
  br label %231

231:                                              ; preds = %227, %198
  %232 = add i32 %178, 24
  %233 = lshr i32 %190, %232
  %234 = trunc i32 %233 to i8
  %235 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %236 = load i8*, i8** %235, align 8
  %237 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %238 = load i32, i32* %237, align 4
  %239 = add i32 %238, 1
  store i32 %239, i32* %237, align 4
  %240 = zext i32 %238 to i64
  %241 = getelementptr inbounds i8, i8* %236, i64 %240
  store i8 %234, i8* %241, align 1
  %242 = shl i32 %190, %199
  %243 = and i32 %242, 16777215
  %244 = add nsw i32 %196, -8
  br label %245

245:                                              ; preds = %231, %172
  %246 = phi i32 [ %244, %231 ], [ %196, %172 ]
  %247 = phi i32 [ %243, %231 ], [ %190, %172 ]
  %248 = phi i32 [ %196, %231 ], [ %194, %172 ]
  %249 = shl i32 %247, %248
  store i32 %246, i32* %177, align 8
  store i32 %249, i32* %181, align 8
  store i32 %195, i32* %179, align 4
  br label %330

250:                                              ; preds = %169
  %251 = or i1 %69, %170
  br i1 %251, label %330, label %252

252:                                              ; preds = %250
  %253 = icmp ne i32 %40, 3
  %254 = getelementptr inbounds [3 x i8], [3 x i8]* %64, i64 %65, i64 2
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %258 = load i32, i32* %257, align 8
  %259 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %260 = load i32, i32* %259, align 4
  %261 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %262 = load i32, i32* %261, align 8
  %263 = add i32 %260, -1
  %264 = mul i32 %263, %256
  %265 = lshr i32 %264, 8
  %266 = add nuw nsw i32 %265, 1
  %267 = sub i32 %260, %266
  %268 = select i1 %253, i32 %266, i32 %267
  %269 = select i1 %253, i32 0, i32 %266
  %270 = add i32 %269, %262
  %271 = zext i32 %268 to i64
  %272 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = shl i32 %268, %274
  %276 = add nsw i32 %258, %274
  %277 = icmp sgt i32 %276, -1
  br i1 %277, label %278, label %325

278:                                              ; preds = %252
  %279 = sub i32 0, %258
  %280 = xor i32 %258, -1
  %281 = shl i32 %270, %280
  %282 = icmp slt i32 %281, 0
  br i1 %282, label %283, label %311

283:                                              ; preds = %278
  %284 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, -1
  %287 = icmp sgt i32 %286, -1
  %288 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %289 = load i8*, i8** %288, align 8
  %290 = sext i32 %286 to i64
  %291 = getelementptr inbounds i8, i8* %289, i64 %290
  br i1 %287, label %292, label %307

292:                                              ; preds = %283, %299
  %293 = phi i8* [ %303, %299 ], [ %289, %283 ]
  %294 = phi i64 [ %306, %299 ], [ %290, %283 ]
  %295 = phi i8* [ %305, %299 ], [ %291, %283 ]
  %296 = load i8, i8* %295, align 1
  %297 = icmp eq i8 %296, -1
  %298 = getelementptr inbounds i8, i8* %293, i64 %294
  br i1 %297, label %299, label %307

299:                                              ; preds = %292
  store i8 0, i8* %298, align 1
  %300 = trunc i64 %294 to i32
  %301 = add i32 %300, -1
  %302 = icmp sgt i32 %301, -1
  %303 = load i8*, i8** %288, align 8
  %304 = sext i32 %301 to i64
  %305 = getelementptr inbounds i8, i8* %303, i64 %304
  %306 = add nsw i64 %294, -1
  br i1 %302, label %292, label %307

307:                                              ; preds = %299, %292, %283
  %308 = phi i8* [ %291, %283 ], [ %305, %299 ], [ %298, %292 ]
  %309 = load i8, i8* %308, align 1
  %310 = add i8 %309, 1
  store i8 %310, i8* %308, align 1
  br label %311

311:                                              ; preds = %307, %278
  %312 = add i32 %258, 24
  %313 = lshr i32 %270, %312
  %314 = trunc i32 %313 to i8
  %315 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %316 = load i8*, i8** %315, align 8
  %317 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %318 = load i32, i32* %317, align 4
  %319 = add i32 %318, 1
  store i32 %319, i32* %317, align 4
  %320 = zext i32 %318 to i64
  %321 = getelementptr inbounds i8, i8* %316, i64 %320
  store i8 %314, i8* %321, align 1
  %322 = shl i32 %270, %279
  %323 = and i32 %322, 16777215
  %324 = add nsw i32 %276, -8
  br label %325

325:                                              ; preds = %311, %252
  %326 = phi i32 [ %324, %311 ], [ %276, %252 ]
  %327 = phi i32 [ %323, %311 ], [ %270, %252 ]
  %328 = phi i32 [ %276, %311 ], [ %274, %252 ]
  %329 = shl i32 %327, %328
  store i32 %326, i32* %257, align 8
  store i32 %329, i32* %261, align 8
  store i32 %275, i32* %259, align 4
  br label %330

330:                                              ; preds = %159, %245, %250, %325
  %331 = zext i32 %40 to i64
  %332 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %331, i64 %12
  %333 = load i8, i8* %332, align 1
  %334 = icmp ult i8 %333, 3
  br i1 %334, label %335, label %336

335:                                              ; preds = %330
  tail call fastcc void @write_modes_b(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %7, i32* %9, [4 x i32]* %10)
  br label %347

336:                                              ; preds = %330
  switch i32 %40, label %346 [
    i32 0, label %337
    i32 1, label %338
    i32 2, label %342
  ]

337:                                              ; preds = %336
  tail call fastcc void @write_modes_b(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %7, i32* %9, [4 x i32]* %10)
  br label %347

338:                                              ; preds = %336
  tail call fastcc void @write_modes_b(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %7, i32* %9, [4 x i32]* %10)
  %339 = load i32, i32* %18, align 16
  %340 = icmp slt i32 %66, %339
  br i1 %340, label %341, label %347

341:                                              ; preds = %338
  tail call fastcc void @write_modes_b(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %66, i32 %7, i32* %9, [4 x i32]* %10)
  br label %347

342:                                              ; preds = %336
  tail call fastcc void @write_modes_b(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %7, i32* %9, [4 x i32]* %10)
  %343 = load i32, i32* %22, align 8
  %344 = icmp slt i32 %68, %343
  br i1 %344, label %345, label %347

345:                                              ; preds = %342
  tail call fastcc void @write_modes_b(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %68, i32* %9, [4 x i32]* %10)
  br label %347

346:                                              ; preds = %336
  tail call fastcc void @write_modes_sb(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %7, i8 zeroext %333, i32* %9, [4 x i32]* %10)
  tail call fastcc void @write_modes_sb(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %6, i32 %68, i8 zeroext %333, i32* %9, [4 x i32]* %10)
  tail call fastcc void @write_modes_sb(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %66, i32 %7, i8 zeroext %333, i32* %9, [4 x i32]* %10)
  tail call fastcc void @write_modes_sb(%struct.VP9_COMP* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.vpx_writer* %3, %struct.TOKENEXTRA** %4, %struct.TOKENEXTRA* %5, i32 %66, i32 %68, i8 zeroext %333, i32* %9, [4 x i32]* %10)
  br label %347

347:                                              ; preds = %337, %346, %341, %338, %345, %342, %335
  %348 = icmp ugt i8 %8, 2
  br i1 %348, label %349, label %364

349:                                              ; preds = %347
  %350 = icmp eq i8 %8, 3
  %351 = icmp ne i32 %40, 3
  %352 = or i1 %350, %351
  br i1 %352, label %353, label %364

353:                                              ; preds = %349
  %354 = load i8*, i8** %41, align 8
  %355 = getelementptr inbounds i8, i8* %354, i64 %43
  %356 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %12
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %333 to i64
  %359 = getelementptr inbounds [13 x %struct.anon.8], [13 x %struct.anon.8]* @partition_context_lookup, i64 0, i64 %358, i32 0
  %360 = load i8, i8* %359, align 2
  %361 = zext i8 %357 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %355, i8 %360, i64 %361, i1 false) #5
  %362 = getelementptr inbounds [13 x %struct.anon.8], [13 x %struct.anon.8]* @partition_context_lookup, i64 0, i64 %358, i32 1
  %363 = load i8, i8* %362, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %363, i64 %361, i1 false) #5
  br label %364

364:                                              ; preds = %347, %353, %349, %11, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_modes_b(%struct.VP9_COMP*, %struct.macroblockd*, %struct.TileInfo* nocapture readonly, %struct.vpx_writer*, %struct.TOKENEXTRA** nocapture, %struct.TOKENEXTRA*, i32, i32, i32*, [4 x i32]* nocapture) unnamed_addr #2 {
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0, i32 3
  %13 = load %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT** %12, align 8
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %17 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %16, align 8
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 36
  %19 = load i32, i32* %18, align 4
  %20 = mul nsw i32 %19, %6
  %21 = add nsw i32 %20, %7
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %17, i64 %22
  %24 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  store %struct.MODE_INFO** %23, %struct.MODE_INFO*** %24, align 8
  %25 = load %struct.MODE_INFO*, %struct.MODE_INFO** %23, align 8
  %26 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 0
  %27 = load i8, i8* %26, align 4
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %36 = load i32, i32* %35, align 16
  %37 = load i32, i32* %14, align 8
  %38 = shl nsw i32 %6, 6
  %39 = sub nsw i32 0, %38
  %40 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  store i32 %39, i32* %40, align 8
  %41 = add i32 %31, %6
  %42 = sub i32 %36, %41
  %43 = shl nsw i32 %42, 6
  %44 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  store i32 %43, i32* %44, align 4
  %45 = shl nsw i32 %7, 6
  %46 = sub nsw i32 0, %45
  %47 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  store i32 %46, i32* %47, align 8
  %48 = add i32 %34, %7
  %49 = sub i32 %37, %48
  %50 = shl nsw i32 %49, 6
  %51 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  store i32 %50, i32* %51, align 4
  %52 = icmp eq i32 %6, 0
  br i1 %52, label %60, label %53

53:                                               ; preds = %10
  %54 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %55 = load i32, i32* %54, align 8
  %56 = sub nsw i32 0, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %23, i64 %57
  %59 = load %struct.MODE_INFO*, %struct.MODE_INFO** %58, align 8
  br label %60

60:                                               ; preds = %53, %10
  %61 = phi %struct.MODE_INFO* [ %59, %53 ], [ null, %10 ]
  %62 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  store %struct.MODE_INFO* %61, %struct.MODE_INFO** %62, align 8
  %63 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %2, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %64, %7
  br i1 %65, label %66, label %69

66:                                               ; preds = %60
  %67 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %23, i64 -1
  %68 = load %struct.MODE_INFO*, %struct.MODE_INFO** %67, align 8
  br label %69

69:                                               ; preds = %60, %66
  %70 = phi %struct.MODE_INFO* [ %68, %66 ], [ null, %60 ]
  %71 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  store %struct.MODE_INFO* %70, %struct.MODE_INFO** %71, align 8
  %72 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %77 = load i8, i8* %76, align 4
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %346, label %79

79:                                               ; preds = %69, %75
  %80 = load %struct.MODE_INFO*, %struct.MODE_INFO** %23, align 8
  %81 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 0
  %82 = load i8, i8* %81, align 4
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %186, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 4
  %88 = load i8, i8* %87, align 4
  %89 = sext i8 %88 to i32
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %91 = load i8, i8* %90, align 4
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %186, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %95 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %96 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %97 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %98 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %99 = load i32, i32* %94, align 8
  %100 = load i32, i32* %95, align 4
  %101 = load i32, i32* %96, align 8
  br label %102

102:                                              ; preds = %176, %93
  %103 = phi i32 [ %101, %93 ], [ %180, %176 ]
  %104 = phi i32 [ %100, %93 ], [ %130, %176 ]
  %105 = phi i32 [ %99, %93 ], [ %177, %176 ]
  %106 = phi i8 [ 0, %93 ], [ %184, %176 ]
  %107 = phi i32 [ 3, %93 ], [ %108, %176 ]
  %108 = add nsw i32 %107, -1
  %109 = lshr i32 %89, %108
  %110 = and i32 %109, 1
  %111 = sext i8 %106 to i32
  %112 = ashr i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add i32 %104, -1
  %118 = mul i32 %117, %116
  %119 = lshr i32 %118, 8
  %120 = add nuw nsw i32 %119, 1
  %121 = icmp eq i32 %110, 0
  %122 = sub i32 %104, %120
  %123 = select i1 %121, i32 %120, i32 %122
  %124 = select i1 %121, i32 0, i32 %120
  %125 = add i32 %124, %103
  %126 = zext i32 %123 to i64
  %127 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = shl i32 %123, %129
  %131 = add nsw i32 %105, %129
  %132 = icmp sgt i32 %131, -1
  br i1 %132, label %133, label %176

133:                                              ; preds = %102
  %134 = sub i32 0, %105
  %135 = xor i32 %105, -1
  %136 = shl i32 %125, %135
  %137 = icmp slt i32 %136, 0
  br i1 %137, label %138, label %164

138:                                              ; preds = %133
  %139 = load i32, i32* %97, align 4
  %140 = add i32 %139, -1
  %141 = icmp sgt i32 %140, -1
  %142 = load i8*, i8** %98, align 8
  %143 = sext i32 %140 to i64
  %144 = getelementptr inbounds i8, i8* %142, i64 %143
  br i1 %141, label %145, label %160

145:                                              ; preds = %138, %152
  %146 = phi i8* [ %156, %152 ], [ %142, %138 ]
  %147 = phi i64 [ %159, %152 ], [ %143, %138 ]
  %148 = phi i8* [ %158, %152 ], [ %144, %138 ]
  %149 = load i8, i8* %148, align 1
  %150 = icmp eq i8 %149, -1
  %151 = getelementptr inbounds i8, i8* %146, i64 %147
  br i1 %150, label %152, label %160

152:                                              ; preds = %145
  store i8 0, i8* %151, align 1
  %153 = trunc i64 %147 to i32
  %154 = add i32 %153, -1
  %155 = icmp sgt i32 %154, -1
  %156 = load i8*, i8** %98, align 8
  %157 = sext i32 %154 to i64
  %158 = getelementptr inbounds i8, i8* %156, i64 %157
  %159 = add nsw i64 %147, -1
  br i1 %155, label %145, label %160

160:                                              ; preds = %152, %145, %138
  %161 = phi i8* [ %144, %138 ], [ %151, %145 ], [ %158, %152 ]
  %162 = load i8, i8* %161, align 1
  %163 = add i8 %162, 1
  store i8 %163, i8* %161, align 1
  br label %164

164:                                              ; preds = %160, %133
  %165 = add i32 %105, 24
  %166 = lshr i32 %125, %165
  %167 = trunc i32 %166 to i8
  %168 = load i8*, i8** %98, align 8
  %169 = load i32, i32* %97, align 4
  %170 = add i32 %169, 1
  store i32 %170, i32* %97, align 4
  %171 = zext i32 %169 to i64
  %172 = getelementptr inbounds i8, i8* %168, i64 %171
  store i8 %167, i8* %172, align 1
  %173 = shl i32 %125, %134
  %174 = and i32 %173, 16777215
  %175 = add nsw i32 %131, -8
  br label %176

176:                                              ; preds = %164, %102
  %177 = phi i32 [ %175, %164 ], [ %131, %102 ]
  %178 = phi i32 [ %174, %164 ], [ %125, %102 ]
  %179 = phi i32 [ %131, %164 ], [ %129, %102 ]
  %180 = shl i32 %178, %179
  store i32 %177, i32* %94, align 8
  store i32 %180, i32* %96, align 8
  store i32 %130, i32* %95, align 4
  %181 = add nsw i32 %110, %111
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [14 x i8], [14 x i8]* @vp9_segment_tree, i64 0, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i32 %108, 0
  br i1 %185, label %186, label %102

186:                                              ; preds = %176, %86, %79
  %187 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %188 = load i8, i8* %187, align 4
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %198, label %190

190:                                              ; preds = %186
  %191 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 4
  %192 = load i8, i8* %191, align 4
  %193 = sext i8 %192 to i64
  %194 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = and i32 %195, 8
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %297

198:                                              ; preds = %190, %186
  %199 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 3
  %200 = load i8, i8* %199, align 1
  %201 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %202 = load %struct.frame_contexts*, %struct.frame_contexts** %201, align 8
  %203 = load %struct.MODE_INFO*, %struct.MODE_INFO** %62, align 8
  %204 = load %struct.MODE_INFO*, %struct.MODE_INFO** %71, align 8
  %205 = icmp eq %struct.MODE_INFO* %203, null
  br i1 %205, label %210, label %206

206:                                              ; preds = %198
  %207 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %203, i64 0, i32 3
  %208 = load i8, i8* %207, align 1
  %209 = sext i8 %208 to i64
  br label %210

210:                                              ; preds = %206, %198
  %211 = phi i64 [ %209, %206 ], [ 0, %198 ]
  %212 = icmp eq %struct.MODE_INFO* %204, null
  br i1 %212, label %217, label %213

213:                                              ; preds = %210
  %214 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %204, i64 0, i32 3
  %215 = load i8, i8* %214, align 1
  %216 = sext i8 %215 to i64
  br label %217

217:                                              ; preds = %213, %210
  %218 = phi i64 [ %216, %213 ], [ 0, %210 ]
  %219 = add nsw i64 %218, %211
  %220 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %202, i64 0, i32 11, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %224 = load i32, i32* %223, align 8
  %225 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %226 = load i32, i32* %225, align 4
  %227 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %228 = load i32, i32* %227, align 8
  %229 = add i32 %226, -1
  %230 = mul i32 %229, %222
  %231 = lshr i32 %230, 8
  %232 = add nuw nsw i32 %231, 1
  %233 = icmp eq i8 %200, 0
  %234 = sub i32 %226, %232
  %235 = select i1 %233, i32 %232, i32 %234
  %236 = select i1 %233, i32 0, i32 %232
  %237 = add i32 %236, %228
  %238 = zext i32 %235 to i64
  %239 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = shl i32 %235, %241
  %243 = add nsw i32 %224, %241
  %244 = icmp sgt i32 %243, -1
  br i1 %244, label %245, label %292

245:                                              ; preds = %217
  %246 = sub i32 0, %224
  %247 = xor i32 %224, -1
  %248 = shl i32 %237, %247
  %249 = icmp slt i32 %248, 0
  br i1 %249, label %250, label %278

250:                                              ; preds = %245
  %251 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %252 = load i32, i32* %251, align 4
  %253 = add i32 %252, -1
  %254 = icmp sgt i32 %253, -1
  %255 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %256 = load i8*, i8** %255, align 8
  %257 = sext i32 %253 to i64
  %258 = getelementptr inbounds i8, i8* %256, i64 %257
  br i1 %254, label %259, label %274

259:                                              ; preds = %250, %266
  %260 = phi i8* [ %270, %266 ], [ %256, %250 ]
  %261 = phi i64 [ %273, %266 ], [ %257, %250 ]
  %262 = phi i8* [ %272, %266 ], [ %258, %250 ]
  %263 = load i8, i8* %262, align 1
  %264 = icmp eq i8 %263, -1
  %265 = getelementptr inbounds i8, i8* %260, i64 %261
  br i1 %264, label %266, label %274

266:                                              ; preds = %259
  store i8 0, i8* %265, align 1
  %267 = trunc i64 %261 to i32
  %268 = add i32 %267, -1
  %269 = icmp sgt i32 %268, -1
  %270 = load i8*, i8** %255, align 8
  %271 = sext i32 %268 to i64
  %272 = getelementptr inbounds i8, i8* %270, i64 %271
  %273 = add nsw i64 %261, -1
  br i1 %269, label %259, label %274

274:                                              ; preds = %266, %259, %250
  %275 = phi i8* [ %258, %250 ], [ %272, %266 ], [ %265, %259 ]
  %276 = load i8, i8* %275, align 1
  %277 = add i8 %276, 1
  store i8 %277, i8* %275, align 1
  br label %278

278:                                              ; preds = %274, %245
  %279 = add i32 %224, 24
  %280 = lshr i32 %237, %279
  %281 = trunc i32 %280 to i8
  %282 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %283 = load i8*, i8** %282, align 8
  %284 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, 1
  store i32 %286, i32* %284, align 4
  %287 = zext i32 %285 to i64
  %288 = getelementptr inbounds i8, i8* %283, i64 %287
  store i8 %281, i8* %288, align 1
  %289 = shl i32 %237, %246
  %290 = and i32 %289, 16777215
  %291 = add nsw i32 %243, -8
  br label %292

292:                                              ; preds = %278, %217
  %293 = phi i32 [ %291, %278 ], [ %243, %217 ]
  %294 = phi i32 [ %290, %278 ], [ %237, %217 ]
  %295 = phi i32 [ %243, %278 ], [ %241, %217 ]
  %296 = shl i32 %294, %295
  store i32 %293, i32* %223, align 8
  store i32 %296, i32* %227, align 8
  store i32 %242, i32* %225, align 4
  br label %297

297:                                              ; preds = %292, %190
  %298 = icmp ugt i8 %82, 2
  br i1 %298, label %299, label %312

299:                                              ; preds = %297
  %300 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %301 = load i32, i32* %300, align 16
  %302 = icmp eq i32 %301, 4
  br i1 %302, label %303, label %304

303:                                              ; preds = %299
  tail call fastcc void @write_selected_tx_size(%struct.VP9Common* %11, %struct.macroblockd* %1, %struct.vpx_writer* %3) #5
  br label %304

304:                                              ; preds = %303, %299
  %305 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 1
  %306 = load i8, i8* %305, align 1
  %307 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %80, %struct.MODE_INFO* %61, i32 0) #5
  %308 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %80, %struct.MODE_INFO* %70, i32 0) #5
  %309 = zext i8 %307 to i64
  %310 = zext i8 %308 to i64
  %311 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %309, i64 %310, i64 0
  tail call fastcc void @write_intra_mode(%struct.vpx_writer* %3, i8 zeroext %306, i8* %311) #5
  br label %339

312:                                              ; preds = %297
  %313 = zext i8 %82 to i64
  %314 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %313
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %315 to i64
  %319 = zext i8 %317 to i64
  br label %320

320:                                              ; preds = %336, %312
  %321 = phi i64 [ 0, %312 ], [ %337, %336 ]
  %322 = shl nuw nsw i64 %321, 1
  br label %323

323:                                              ; preds = %323, %320
  %324 = phi i64 [ 0, %320 ], [ %334, %323 ]
  %325 = add nuw nsw i64 %324, %322
  %326 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 10, i64 %325, i32 0
  %327 = load i8, i8* %326, align 4
  %328 = trunc i64 %325 to i32
  %329 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %80, %struct.MODE_INFO* %61, i32 %328) #5
  %330 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %80, %struct.MODE_INFO* %70, i32 %328) #5
  %331 = zext i8 %329 to i64
  %332 = zext i8 %330 to i64
  %333 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %331, i64 %332, i64 0
  tail call fastcc void @write_intra_mode(%struct.vpx_writer* %3, i8 zeroext %327, i8* %333) #5
  %334 = add i64 %324, %318
  %335 = icmp ult i64 %334, 2
  br i1 %335, label %323, label %336

336:                                              ; preds = %323
  %337 = add i64 %321, %319
  %338 = icmp ult i64 %337, 2
  br i1 %338, label %320, label %339

339:                                              ; preds = %336, %304
  %340 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 6
  %341 = load i8, i8* %340, align 2
  %342 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %80, i64 0, i32 1
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i64
  %345 = getelementptr inbounds [10 x [9 x i8]], [10 x [9 x i8]]* @vp9_kf_uv_mode_prob, i64 0, i64 %344, i64 0
  tail call fastcc void @write_intra_mode(%struct.vpx_writer* %3, i8 zeroext %341, i8* %345) #5
  br label %1509

346:                                              ; preds = %75
  %347 = mul nsw i32 %15, %6
  %348 = add nsw i32 %347, %7
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %351 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %352 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %351, i64 0, i32 12
  %353 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69
  %354 = load %struct.MODE_INFO*, %struct.MODE_INFO** %23, align 8
  %355 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 1
  %356 = load i8, i8* %355, align 1
  %357 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 4
  %358 = load i8, i8* %357, align 4
  %359 = sext i8 %358 to i32
  %360 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 0
  %361 = load i8, i8* %360, align 4
  %362 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 29
  %363 = load i32, i32* %362, align 16
  %364 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 8, i64 0
  %365 = load i8, i8* %364, align 4
  %366 = icmp sgt i8 %365, 0
  %367 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 8, i64 1
  %368 = load i8, i8* %367, align 1
  %369 = icmp sgt i8 %368, 0
  %370 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 1
  %371 = load i8, i8* %370, align 1
  %372 = icmp eq i8 %371, 0
  br i1 %372, label %663, label %373

373:                                              ; preds = %346
  %374 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 4
  %375 = load i8, i8* %374, align 4
  %376 = icmp eq i8 %375, 0
  br i1 %376, label %566, label %377

377:                                              ; preds = %373
  %378 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 5
  %379 = load i8, i8* %378, align 1
  %380 = icmp eq %struct.MODE_INFO* %61, null
  br i1 %380, label %385, label %381

381:                                              ; preds = %377
  %382 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %61, i64 0, i32 5
  %383 = load i8, i8* %382, align 1
  %384 = sext i8 %383 to i64
  br label %385

385:                                              ; preds = %381, %377
  %386 = phi i64 [ %384, %381 ], [ 0, %377 ]
  %387 = icmp eq %struct.MODE_INFO* %70, null
  br i1 %387, label %392, label %388

388:                                              ; preds = %385
  %389 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %70, i64 0, i32 5
  %390 = load i8, i8* %389, align 1
  %391 = sext i8 %390 to i64
  br label %392

392:                                              ; preds = %388, %385
  %393 = phi i64 [ %391, %388 ], [ 0, %385 ]
  %394 = add nsw i64 %393, %386
  %395 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 6, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i32
  %398 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %399 = load i32, i32* %398, align 8
  %400 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %401 = load i32, i32* %400, align 4
  %402 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %403 = load i32, i32* %402, align 8
  %404 = add i32 %401, -1
  %405 = mul i32 %404, %397
  %406 = lshr i32 %405, 8
  %407 = add nuw nsw i32 %406, 1
  %408 = icmp eq i8 %379, 0
  %409 = sub i32 %401, %407
  %410 = select i1 %408, i32 %407, i32 %409
  %411 = select i1 %408, i32 0, i32 %407
  %412 = add i32 %411, %403
  %413 = zext i32 %410 to i64
  %414 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i32
  %417 = shl i32 %410, %416
  %418 = add nsw i32 %399, %416
  %419 = icmp sgt i32 %418, -1
  br i1 %419, label %420, label %467

420:                                              ; preds = %392
  %421 = sub i32 0, %399
  %422 = xor i32 %399, -1
  %423 = shl i32 %412, %422
  %424 = icmp slt i32 %423, 0
  br i1 %424, label %425, label %453

425:                                              ; preds = %420
  %426 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %427 = load i32, i32* %426, align 4
  %428 = add i32 %427, -1
  %429 = icmp sgt i32 %428, -1
  %430 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %431 = load i8*, i8** %430, align 8
  %432 = sext i32 %428 to i64
  %433 = getelementptr inbounds i8, i8* %431, i64 %432
  br i1 %429, label %434, label %449

434:                                              ; preds = %425, %441
  %435 = phi i8* [ %445, %441 ], [ %431, %425 ]
  %436 = phi i64 [ %448, %441 ], [ %432, %425 ]
  %437 = phi i8* [ %447, %441 ], [ %433, %425 ]
  %438 = load i8, i8* %437, align 1
  %439 = icmp eq i8 %438, -1
  %440 = getelementptr inbounds i8, i8* %435, i64 %436
  br i1 %439, label %441, label %449

441:                                              ; preds = %434
  store i8 0, i8* %440, align 1
  %442 = trunc i64 %436 to i32
  %443 = add i32 %442, -1
  %444 = icmp sgt i32 %443, -1
  %445 = load i8*, i8** %430, align 8
  %446 = sext i32 %443 to i64
  %447 = getelementptr inbounds i8, i8* %445, i64 %446
  %448 = add nsw i64 %436, -1
  br i1 %444, label %434, label %449

449:                                              ; preds = %441, %434, %425
  %450 = phi i8* [ %433, %425 ], [ %447, %441 ], [ %440, %434 ]
  %451 = load i8, i8* %450, align 1
  %452 = add i8 %451, 1
  store i8 %452, i8* %450, align 1
  br label %453

453:                                              ; preds = %449, %420
  %454 = add i32 %399, 24
  %455 = lshr i32 %412, %454
  %456 = trunc i32 %455 to i8
  %457 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %458 = load i8*, i8** %457, align 8
  %459 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %460 = load i32, i32* %459, align 4
  %461 = add i32 %460, 1
  store i32 %461, i32* %459, align 4
  %462 = zext i32 %460 to i64
  %463 = getelementptr inbounds i8, i8* %458, i64 %462
  store i8 %456, i8* %463, align 1
  %464 = shl i32 %412, %421
  %465 = and i32 %464, 16777215
  %466 = add nsw i32 %418, -8
  br label %467

467:                                              ; preds = %453, %392
  %468 = phi i32 [ %466, %453 ], [ %418, %392 ]
  %469 = phi i32 [ %465, %453 ], [ %412, %392 ]
  %470 = phi i32 [ %418, %453 ], [ %416, %392 ]
  %471 = shl i32 %469, %470
  store i32 %468, i32* %398, align 8
  store i32 %471, i32* %402, align 8
  store i32 %417, i32* %400, align 4
  br i1 %408, label %472, label %663

472:                                              ; preds = %467
  %473 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %353, i64 0, i32 0
  %474 = load i8, i8* %473, align 4
  %475 = icmp eq i8 %474, 0
  br i1 %475, label %663, label %476

476:                                              ; preds = %472
  %477 = load i8, i8* %370, align 1
  %478 = icmp eq i8 %477, 0
  br i1 %478, label %663, label %479

479:                                              ; preds = %476
  %480 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %481 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  br label %482

482:                                              ; preds = %556, %479
  %483 = phi i32 [ %471, %479 ], [ %560, %556 ]
  %484 = phi i32 [ %417, %479 ], [ %510, %556 ]
  %485 = phi i32 [ %468, %479 ], [ %557, %556 ]
  %486 = phi i8 [ 0, %479 ], [ %564, %556 ]
  %487 = phi i32 [ 3, %479 ], [ %488, %556 ]
  %488 = add nsw i32 %487, -1
  %489 = lshr i32 %359, %488
  %490 = and i32 %489, 1
  %491 = sext i8 %486 to i32
  %492 = ashr i32 %491, 1
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 %493
  %495 = load i8, i8* %494, align 1
  %496 = zext i8 %495 to i32
  %497 = add i32 %484, -1
  %498 = mul i32 %497, %496
  %499 = lshr i32 %498, 8
  %500 = add nuw nsw i32 %499, 1
  %501 = icmp eq i32 %490, 0
  %502 = sub i32 %484, %500
  %503 = select i1 %501, i32 %500, i32 %502
  %504 = select i1 %501, i32 0, i32 %500
  %505 = add i32 %504, %483
  %506 = zext i32 %503 to i64
  %507 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %506
  %508 = load i8, i8* %507, align 1
  %509 = zext i8 %508 to i32
  %510 = shl i32 %503, %509
  %511 = add nsw i32 %485, %509
  %512 = icmp sgt i32 %511, -1
  br i1 %512, label %513, label %556

513:                                              ; preds = %482
  %514 = sub i32 0, %485
  %515 = xor i32 %485, -1
  %516 = shl i32 %505, %515
  %517 = icmp slt i32 %516, 0
  br i1 %517, label %518, label %544

518:                                              ; preds = %513
  %519 = load i32, i32* %480, align 4
  %520 = add i32 %519, -1
  %521 = icmp sgt i32 %520, -1
  %522 = load i8*, i8** %481, align 8
  %523 = sext i32 %520 to i64
  %524 = getelementptr inbounds i8, i8* %522, i64 %523
  br i1 %521, label %525, label %540

525:                                              ; preds = %518, %532
  %526 = phi i8* [ %536, %532 ], [ %522, %518 ]
  %527 = phi i64 [ %539, %532 ], [ %523, %518 ]
  %528 = phi i8* [ %538, %532 ], [ %524, %518 ]
  %529 = load i8, i8* %528, align 1
  %530 = icmp eq i8 %529, -1
  %531 = getelementptr inbounds i8, i8* %526, i64 %527
  br i1 %530, label %532, label %540

532:                                              ; preds = %525
  store i8 0, i8* %531, align 1
  %533 = trunc i64 %527 to i32
  %534 = add i32 %533, -1
  %535 = icmp sgt i32 %534, -1
  %536 = load i8*, i8** %481, align 8
  %537 = sext i32 %534 to i64
  %538 = getelementptr inbounds i8, i8* %536, i64 %537
  %539 = add nsw i64 %527, -1
  br i1 %535, label %525, label %540

540:                                              ; preds = %532, %525, %518
  %541 = phi i8* [ %524, %518 ], [ %531, %525 ], [ %538, %532 ]
  %542 = load i8, i8* %541, align 1
  %543 = add i8 %542, 1
  store i8 %543, i8* %541, align 1
  br label %544

544:                                              ; preds = %540, %513
  %545 = add i32 %485, 24
  %546 = lshr i32 %505, %545
  %547 = trunc i32 %546 to i8
  %548 = load i8*, i8** %481, align 8
  %549 = load i32, i32* %480, align 4
  %550 = add i32 %549, 1
  store i32 %550, i32* %480, align 4
  %551 = zext i32 %549 to i64
  %552 = getelementptr inbounds i8, i8* %548, i64 %551
  store i8 %547, i8* %552, align 1
  %553 = shl i32 %505, %514
  %554 = and i32 %553, 16777215
  %555 = add nsw i32 %511, -8
  br label %556

556:                                              ; preds = %544, %482
  %557 = phi i32 [ %555, %544 ], [ %511, %482 ]
  %558 = phi i32 [ %554, %544 ], [ %505, %482 ]
  %559 = phi i32 [ %511, %544 ], [ %509, %482 ]
  %560 = shl i32 %558, %559
  store i32 %557, i32* %398, align 8
  store i32 %560, i32* %402, align 8
  store i32 %510, i32* %400, align 4
  %561 = add nsw i32 %490, %491
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds [14 x i8], [14 x i8]* @vp9_segment_tree, i64 0, i64 %562
  %564 = load i8, i8* %563, align 1
  %565 = icmp eq i32 %488, 0
  br i1 %565, label %663, label %482

566:                                              ; preds = %373
  %567 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %353, i64 0, i32 0
  %568 = load i8, i8* %567, align 4
  %569 = icmp eq i8 %568, 0
  br i1 %569, label %663, label %570

570:                                              ; preds = %566
  %571 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %572 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %573 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %574 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %575 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %576 = load i32, i32* %571, align 8
  %577 = load i32, i32* %572, align 4
  %578 = load i32, i32* %573, align 8
  br label %579

579:                                              ; preds = %653, %570
  %580 = phi i32 [ %578, %570 ], [ %657, %653 ]
  %581 = phi i32 [ %577, %570 ], [ %607, %653 ]
  %582 = phi i32 [ %576, %570 ], [ %654, %653 ]
  %583 = phi i8 [ 0, %570 ], [ %661, %653 ]
  %584 = phi i32 [ 3, %570 ], [ %585, %653 ]
  %585 = add nsw i32 %584, -1
  %586 = lshr i32 %359, %585
  %587 = and i32 %586, 1
  %588 = sext i8 %583 to i32
  %589 = ashr i32 %588, 1
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 5, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = zext i8 %592 to i32
  %594 = add i32 %581, -1
  %595 = mul i32 %594, %593
  %596 = lshr i32 %595, 8
  %597 = add nuw nsw i32 %596, 1
  %598 = icmp eq i32 %587, 0
  %599 = sub i32 %581, %597
  %600 = select i1 %598, i32 %597, i32 %599
  %601 = select i1 %598, i32 0, i32 %597
  %602 = add i32 %601, %580
  %603 = zext i32 %600 to i64
  %604 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %603
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i32
  %607 = shl i32 %600, %606
  %608 = add nsw i32 %582, %606
  %609 = icmp sgt i32 %608, -1
  br i1 %609, label %610, label %653

610:                                              ; preds = %579
  %611 = sub i32 0, %582
  %612 = xor i32 %582, -1
  %613 = shl i32 %602, %612
  %614 = icmp slt i32 %613, 0
  br i1 %614, label %615, label %641

615:                                              ; preds = %610
  %616 = load i32, i32* %574, align 4
  %617 = add i32 %616, -1
  %618 = icmp sgt i32 %617, -1
  %619 = load i8*, i8** %575, align 8
  %620 = sext i32 %617 to i64
  %621 = getelementptr inbounds i8, i8* %619, i64 %620
  br i1 %618, label %622, label %637

622:                                              ; preds = %615, %629
  %623 = phi i8* [ %633, %629 ], [ %619, %615 ]
  %624 = phi i64 [ %636, %629 ], [ %620, %615 ]
  %625 = phi i8* [ %635, %629 ], [ %621, %615 ]
  %626 = load i8, i8* %625, align 1
  %627 = icmp eq i8 %626, -1
  %628 = getelementptr inbounds i8, i8* %623, i64 %624
  br i1 %627, label %629, label %637

629:                                              ; preds = %622
  store i8 0, i8* %628, align 1
  %630 = trunc i64 %624 to i32
  %631 = add i32 %630, -1
  %632 = icmp sgt i32 %631, -1
  %633 = load i8*, i8** %575, align 8
  %634 = sext i32 %631 to i64
  %635 = getelementptr inbounds i8, i8* %633, i64 %634
  %636 = add nsw i64 %624, -1
  br i1 %632, label %622, label %637

637:                                              ; preds = %629, %622, %615
  %638 = phi i8* [ %621, %615 ], [ %628, %622 ], [ %635, %629 ]
  %639 = load i8, i8* %638, align 1
  %640 = add i8 %639, 1
  store i8 %640, i8* %638, align 1
  br label %641

641:                                              ; preds = %637, %610
  %642 = add i32 %582, 24
  %643 = lshr i32 %602, %642
  %644 = trunc i32 %643 to i8
  %645 = load i8*, i8** %575, align 8
  %646 = load i32, i32* %574, align 4
  %647 = add i32 %646, 1
  store i32 %647, i32* %574, align 4
  %648 = zext i32 %646 to i64
  %649 = getelementptr inbounds i8, i8* %645, i64 %648
  store i8 %644, i8* %649, align 1
  %650 = shl i32 %602, %611
  %651 = and i32 %650, 16777215
  %652 = add nsw i32 %608, -8
  br label %653

653:                                              ; preds = %641, %579
  %654 = phi i32 [ %652, %641 ], [ %608, %579 ]
  %655 = phi i32 [ %651, %641 ], [ %602, %579 ]
  %656 = phi i32 [ %608, %641 ], [ %606, %579 ]
  %657 = shl i32 %655, %656
  store i32 %654, i32* %571, align 8
  store i32 %657, i32* %573, align 8
  store i32 %607, i32* %572, align 4
  %658 = add nsw i32 %587, %588
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds [14 x i8], [14 x i8]* @vp9_segment_tree, i64 0, i64 %659
  %661 = load i8, i8* %660, align 1
  %662 = icmp eq i32 %585, 0
  br i1 %662, label %663, label %579

663:                                              ; preds = %556, %653, %566, %476, %472, %467, %346
  %664 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 0
  %665 = load i8, i8* %664, align 4
  %666 = icmp eq i8 %665, 0
  br i1 %666, label %675, label %667

667:                                              ; preds = %663
  %668 = sext i8 %358 to i64
  %669 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %668
  %670 = load i32, i32* %669, align 4
  %671 = and i32 %670, 8
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %675, label %673

673:                                              ; preds = %667
  %674 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %353, i64 0, i32 0
  br label %781

675:                                              ; preds = %667, %663
  %676 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 3
  %677 = load i8, i8* %676, align 1
  %678 = sext i8 %677 to i32
  %679 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %680 = load %struct.MODE_INFO*, %struct.MODE_INFO** %62, align 8
  %681 = load %struct.MODE_INFO*, %struct.MODE_INFO** %71, align 8
  %682 = icmp eq %struct.MODE_INFO* %680, null
  br i1 %682, label %687, label %683

683:                                              ; preds = %675
  %684 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %680, i64 0, i32 3
  %685 = load i8, i8* %684, align 1
  %686 = sext i8 %685 to i64
  br label %687

687:                                              ; preds = %683, %675
  %688 = phi i64 [ %686, %683 ], [ 0, %675 ]
  %689 = icmp eq %struct.MODE_INFO* %681, null
  br i1 %689, label %694, label %690

690:                                              ; preds = %687
  %691 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %681, i64 0, i32 3
  %692 = load i8, i8* %691, align 1
  %693 = sext i8 %692 to i64
  br label %694

694:                                              ; preds = %690, %687
  %695 = phi i64 [ %693, %690 ], [ 0, %687 ]
  %696 = add nsw i64 %695, %688
  %697 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %679, i64 0, i32 11, i64 %696
  %698 = load i8, i8* %697, align 1
  %699 = zext i8 %698 to i32
  %700 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %701 = load i32, i32* %700, align 8
  %702 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %703 = load i32, i32* %702, align 4
  %704 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %705 = load i32, i32* %704, align 8
  %706 = add i32 %703, -1
  %707 = mul i32 %706, %699
  %708 = lshr i32 %707, 8
  %709 = add nuw nsw i32 %708, 1
  %710 = icmp eq i8 %677, 0
  %711 = sub i32 %703, %709
  %712 = select i1 %710, i32 %709, i32 %711
  %713 = select i1 %710, i32 0, i32 %709
  %714 = add i32 %713, %705
  %715 = zext i32 %712 to i64
  %716 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %715
  %717 = load i8, i8* %716, align 1
  %718 = zext i8 %717 to i32
  %719 = shl i32 %712, %718
  %720 = add nsw i32 %701, %718
  %721 = icmp sgt i32 %720, -1
  br i1 %721, label %722, label %769

722:                                              ; preds = %694
  %723 = sub i32 0, %701
  %724 = xor i32 %701, -1
  %725 = shl i32 %714, %724
  %726 = icmp slt i32 %725, 0
  br i1 %726, label %727, label %755

727:                                              ; preds = %722
  %728 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %729 = load i32, i32* %728, align 4
  %730 = add i32 %729, -1
  %731 = icmp sgt i32 %730, -1
  %732 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %733 = load i8*, i8** %732, align 8
  %734 = sext i32 %730 to i64
  %735 = getelementptr inbounds i8, i8* %733, i64 %734
  br i1 %731, label %736, label %751

736:                                              ; preds = %727, %743
  %737 = phi i8* [ %747, %743 ], [ %733, %727 ]
  %738 = phi i64 [ %750, %743 ], [ %734, %727 ]
  %739 = phi i8* [ %749, %743 ], [ %735, %727 ]
  %740 = load i8, i8* %739, align 1
  %741 = icmp eq i8 %740, -1
  %742 = getelementptr inbounds i8, i8* %737, i64 %738
  br i1 %741, label %743, label %751

743:                                              ; preds = %736
  store i8 0, i8* %742, align 1
  %744 = trunc i64 %738 to i32
  %745 = add i32 %744, -1
  %746 = icmp sgt i32 %745, -1
  %747 = load i8*, i8** %732, align 8
  %748 = sext i32 %745 to i64
  %749 = getelementptr inbounds i8, i8* %747, i64 %748
  %750 = add nsw i64 %738, -1
  br i1 %746, label %736, label %751

751:                                              ; preds = %743, %736, %727
  %752 = phi i8* [ %735, %727 ], [ %749, %743 ], [ %742, %736 ]
  %753 = load i8, i8* %752, align 1
  %754 = add i8 %753, 1
  store i8 %754, i8* %752, align 1
  br label %755

755:                                              ; preds = %751, %722
  %756 = add i32 %701, 24
  %757 = lshr i32 %714, %756
  %758 = trunc i32 %757 to i8
  %759 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %760 = load i8*, i8** %759, align 8
  %761 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %762 = load i32, i32* %761, align 4
  %763 = add i32 %762, 1
  store i32 %763, i32* %761, align 4
  %764 = zext i32 %762 to i64
  %765 = getelementptr inbounds i8, i8* %760, i64 %764
  store i8 %758, i8* %765, align 1
  %766 = shl i32 %714, %723
  %767 = and i32 %766, 16777215
  %768 = add nsw i32 %720, -8
  br label %769

769:                                              ; preds = %755, %694
  %770 = phi i32 [ %768, %755 ], [ %720, %694 ]
  %771 = phi i32 [ %767, %755 ], [ %714, %694 ]
  %772 = phi i32 [ %720, %755 ], [ %718, %694 ]
  %773 = shl i32 %771, %772
  store i32 %770, i32* %700, align 8
  store i32 %773, i32* %704, align 8
  store i32 %719, i32* %702, align 4
  %774 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %353, i64 0, i32 0
  %775 = load i8, i8* %774, align 4
  %776 = icmp eq i8 %775, 0
  br i1 %776, label %787, label %777

777:                                              ; preds = %769
  %778 = sext i8 %358 to i64
  %779 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %778
  %780 = load i32, i32* %779, align 4
  br label %781

781:                                              ; preds = %777, %673
  %782 = phi i32 [ %670, %673 ], [ %780, %777 ]
  %783 = phi i8* [ %674, %673 ], [ %774, %777 ]
  %784 = phi i32 [ 1, %673 ], [ %678, %777 ]
  %785 = and i32 %782, 4
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %787, label %896

787:                                              ; preds = %781, %769
  %788 = phi i8* [ %774, %769 ], [ %783, %781 ]
  %789 = phi i32 [ %678, %769 ], [ %784, %781 ]
  %790 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %791 = load %struct.MODE_INFO*, %struct.MODE_INFO** %62, align 8
  %792 = load %struct.MODE_INFO*, %struct.MODE_INFO** %71, align 8
  %793 = icmp ne %struct.MODE_INFO* %791, null
  %794 = icmp ne %struct.MODE_INFO* %792, null
  %795 = and i1 %793, %794
  br i1 %795, label %796, label %808

796:                                              ; preds = %787
  %797 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %791, i64 0, i32 8, i64 0
  %798 = load i8, i8* %797, align 4
  %799 = icmp sgt i8 %798, 0
  %800 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %792, i64 0, i32 8, i64 0
  %801 = load i8, i8* %800, align 4
  %802 = icmp sgt i8 %801, 0
  %803 = or i1 %799, %802
  br i1 %803, label %804, label %817

804:                                              ; preds = %796
  %805 = and i1 %799, %802
  %806 = xor i1 %805, true
  %807 = zext i1 %806 to i32
  br label %817

808:                                              ; preds = %787
  %809 = or i1 %793, %794
  br i1 %809, label %810, label %817

810:                                              ; preds = %808
  %811 = select i1 %793, %struct.MODE_INFO* %791, %struct.MODE_INFO* %792
  %812 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %811, i64 0, i32 8, i64 0
  %813 = load i8, i8* %812, align 4
  %814 = icmp slt i8 %813, 1
  %815 = zext i1 %814 to i32
  %816 = shl nuw nsw i32 %815, 1
  br label %817

817:                                              ; preds = %810, %808, %804, %796
  %818 = phi i32 [ %816, %810 ], [ %807, %804 ], [ 3, %796 ], [ 0, %808 ]
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %790, i64 0, i32 6, i64 %819
  %821 = load i8, i8* %820, align 1
  %822 = zext i8 %821 to i32
  %823 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %824 = load i32, i32* %823, align 8
  %825 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %826 = load i32, i32* %825, align 4
  %827 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %828 = load i32, i32* %827, align 8
  %829 = add i32 %826, -1
  %830 = mul i32 %829, %822
  %831 = lshr i32 %830, 8
  %832 = add nuw nsw i32 %831, 1
  %833 = sub i32 %826, %832
  %834 = select i1 %366, i32 %833, i32 %832
  %835 = select i1 %366, i32 %832, i32 0
  %836 = add i32 %835, %828
  %837 = zext i32 %834 to i64
  %838 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %837
  %839 = load i8, i8* %838, align 1
  %840 = zext i8 %839 to i32
  %841 = shl i32 %834, %840
  %842 = add nsw i32 %824, %840
  %843 = icmp sgt i32 %842, -1
  br i1 %843, label %844, label %891

844:                                              ; preds = %817
  %845 = sub i32 0, %824
  %846 = xor i32 %824, -1
  %847 = shl i32 %836, %846
  %848 = icmp slt i32 %847, 0
  br i1 %848, label %849, label %877

849:                                              ; preds = %844
  %850 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %851 = load i32, i32* %850, align 4
  %852 = add i32 %851, -1
  %853 = icmp sgt i32 %852, -1
  %854 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %855 = load i8*, i8** %854, align 8
  %856 = sext i32 %852 to i64
  %857 = getelementptr inbounds i8, i8* %855, i64 %856
  br i1 %853, label %858, label %873

858:                                              ; preds = %849, %865
  %859 = phi i8* [ %869, %865 ], [ %855, %849 ]
  %860 = phi i64 [ %872, %865 ], [ %856, %849 ]
  %861 = phi i8* [ %871, %865 ], [ %857, %849 ]
  %862 = load i8, i8* %861, align 1
  %863 = icmp eq i8 %862, -1
  %864 = getelementptr inbounds i8, i8* %859, i64 %860
  br i1 %863, label %865, label %873

865:                                              ; preds = %858
  store i8 0, i8* %864, align 1
  %866 = trunc i64 %860 to i32
  %867 = add i32 %866, -1
  %868 = icmp sgt i32 %867, -1
  %869 = load i8*, i8** %854, align 8
  %870 = sext i32 %867 to i64
  %871 = getelementptr inbounds i8, i8* %869, i64 %870
  %872 = add nsw i64 %860, -1
  br i1 %868, label %858, label %873

873:                                              ; preds = %865, %858, %849
  %874 = phi i8* [ %857, %849 ], [ %871, %865 ], [ %864, %858 ]
  %875 = load i8, i8* %874, align 1
  %876 = add i8 %875, 1
  store i8 %876, i8* %874, align 1
  br label %877

877:                                              ; preds = %873, %844
  %878 = add i32 %824, 24
  %879 = lshr i32 %836, %878
  %880 = trunc i32 %879 to i8
  %881 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %882 = load i8*, i8** %881, align 8
  %883 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %884 = load i32, i32* %883, align 4
  %885 = add i32 %884, 1
  store i32 %885, i32* %883, align 4
  %886 = zext i32 %884 to i64
  %887 = getelementptr inbounds i8, i8* %882, i64 %886
  store i8 %880, i8* %887, align 1
  %888 = shl i32 %836, %845
  %889 = and i32 %888, 16777215
  %890 = add nsw i32 %842, -8
  br label %891

891:                                              ; preds = %877, %817
  %892 = phi i32 [ %890, %877 ], [ %842, %817 ]
  %893 = phi i32 [ %889, %877 ], [ %836, %817 ]
  %894 = phi i32 [ %842, %877 ], [ %840, %817 ]
  %895 = shl i32 %893, %894
  store i32 %892, i32* %823, align 8
  store i32 %895, i32* %827, align 8
  store i32 %841, i32* %825, align 4
  br label %896

896:                                              ; preds = %891, %781
  %897 = phi i8* [ %783, %781 ], [ %788, %891 ]
  %898 = phi i32 [ %784, %781 ], [ %789, %891 ]
  %899 = icmp ugt i8 %361, 2
  br i1 %899, label %900, label %908

900:                                              ; preds = %896
  %901 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %902 = load i32, i32* %901, align 16
  %903 = icmp ne i32 %902, 4
  %904 = icmp ne i32 %898, 0
  %905 = and i1 %366, %904
  %906 = or i1 %905, %903
  br i1 %906, label %908, label %907

907:                                              ; preds = %900
  tail call fastcc void @write_selected_tx_size(%struct.VP9Common* %11, %struct.macroblockd* %1, %struct.vpx_writer* %3) #5
  br label %908

908:                                              ; preds = %907, %900, %896
  br i1 %366, label %946, label %909

909:                                              ; preds = %908
  br i1 %899, label %910, label %917

910:                                              ; preds = %909
  %911 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %912 = zext i8 %361 to i64
  %913 = getelementptr inbounds [13 x i8], [13 x i8]* @size_group_lookup, i64 0, i64 %912
  %914 = load i8, i8* %913, align 1
  %915 = zext i8 %914 to i64
  %916 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %911, i64 0, i32 0, i64 %915, i64 0
  tail call fastcc void @write_intra_mode(%struct.vpx_writer* %3, i8 zeroext %356, i8* %916) #5
  br label %940

917:                                              ; preds = %909
  %918 = zext i8 %361 to i64
  %919 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %918
  %920 = load i8, i8* %919, align 1
  %921 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %918
  %922 = load i8, i8* %921, align 1
  %923 = zext i8 %920 to i64
  %924 = zext i8 %922 to i64
  br label %925

925:                                              ; preds = %937, %917
  %926 = phi i64 [ 0, %917 ], [ %938, %937 ]
  %927 = shl nuw nsw i64 %926, 1
  br label %928

928:                                              ; preds = %928, %925
  %929 = phi i64 [ 0, %925 ], [ %935, %928 ]
  %930 = add nuw nsw i64 %929, %927
  %931 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 10, i64 %930, i32 0
  %932 = load i8, i8* %931, align 4
  %933 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %934 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %933, i64 0, i32 0, i64 0, i64 0
  tail call fastcc void @write_intra_mode(%struct.vpx_writer* %3, i8 zeroext %932, i8* %934) #5
  %935 = add i64 %929, %923
  %936 = icmp ult i64 %935, 2
  br i1 %936, label %928, label %937

937:                                              ; preds = %928
  %938 = add i64 %926, %924
  %939 = icmp ult i64 %938, 2
  br i1 %939, label %925, label %940

940:                                              ; preds = %937, %910
  %941 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 6
  %942 = load i8, i8* %941, align 2
  %943 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %944 = zext i8 %356 to i64
  %945 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %943, i64 0, i32 1, i64 %944, i64 0
  tail call fastcc void @write_intra_mode(%struct.vpx_writer* %3, i8 zeroext %942, i8* %945) #5
  br label %1509

946:                                              ; preds = %908
  %947 = load i8, i8* %364, align 4
  %948 = sext i8 %947 to i64
  %949 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %13, i64 %349, i32 1, i64 %948
  %950 = load i8, i8* %949, align 1
  %951 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %952 = zext i8 %950 to i64
  %953 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %951, i64 0, i32 5, i64 %952, i64 0
  %954 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %24, align 8
  %955 = load %struct.MODE_INFO*, %struct.MODE_INFO** %954, align 8
  %956 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %955, i64 0, i32 8, i64 1
  %957 = load i8, i8* %956, align 1
  %958 = icmp sgt i8 %957, 0
  %959 = load i8, i8* %664, align 4
  %960 = icmp eq i8 %959, 0
  br i1 %960, label %969, label %961

961:                                              ; preds = %946
  %962 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %955, i64 0, i32 4
  %963 = load i8, i8* %962, align 4
  %964 = sext i8 %963 to i64
  %965 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %964
  %966 = load i32, i32* %965, align 4
  %967 = and i32 %966, 4
  %968 = icmp eq i32 %967, 0
  br i1 %968, label %969, label %1307

969:                                              ; preds = %961, %946
  %970 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 72
  %971 = load i32, i32* %970, align 16
  %972 = icmp eq i32 %971, 2
  br i1 %972, label %973, label %1052

973:                                              ; preds = %969
  %974 = tail call i32 @vp9_get_reference_mode_context(%struct.VP9Common* %11, %struct.macroblockd* %1) #5
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %951, i64 0, i32 7, i64 %975
  %977 = load i8, i8* %976, align 1
  %978 = zext i8 %977 to i32
  %979 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %980 = load i32, i32* %979, align 8
  %981 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %982 = load i32, i32* %981, align 4
  %983 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %984 = load i32, i32* %983, align 8
  %985 = add i32 %982, -1
  %986 = mul i32 %985, %978
  %987 = lshr i32 %986, 8
  %988 = add nuw nsw i32 %987, 1
  %989 = sub i32 %982, %988
  %990 = select i1 %958, i32 %989, i32 %988
  %991 = select i1 %958, i32 %988, i32 0
  %992 = add i32 %991, %984
  %993 = zext i32 %990 to i64
  %994 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %993
  %995 = load i8, i8* %994, align 1
  %996 = zext i8 %995 to i32
  %997 = shl i32 %990, %996
  %998 = add nsw i32 %980, %996
  %999 = icmp sgt i32 %998, -1
  br i1 %999, label %1000, label %1047

1000:                                             ; preds = %973
  %1001 = sub i32 0, %980
  %1002 = xor i32 %980, -1
  %1003 = shl i32 %992, %1002
  %1004 = icmp slt i32 %1003, 0
  br i1 %1004, label %1005, label %1033

1005:                                             ; preds = %1000
  %1006 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1007 = load i32, i32* %1006, align 4
  %1008 = add i32 %1007, -1
  %1009 = icmp sgt i32 %1008, -1
  %1010 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1011 = load i8*, i8** %1010, align 8
  %1012 = sext i32 %1008 to i64
  %1013 = getelementptr inbounds i8, i8* %1011, i64 %1012
  br i1 %1009, label %1014, label %1029

1014:                                             ; preds = %1005, %1021
  %1015 = phi i8* [ %1025, %1021 ], [ %1011, %1005 ]
  %1016 = phi i64 [ %1028, %1021 ], [ %1012, %1005 ]
  %1017 = phi i8* [ %1027, %1021 ], [ %1013, %1005 ]
  %1018 = load i8, i8* %1017, align 1
  %1019 = icmp eq i8 %1018, -1
  %1020 = getelementptr inbounds i8, i8* %1015, i64 %1016
  br i1 %1019, label %1021, label %1029

1021:                                             ; preds = %1014
  store i8 0, i8* %1020, align 1
  %1022 = trunc i64 %1016 to i32
  %1023 = add i32 %1022, -1
  %1024 = icmp sgt i32 %1023, -1
  %1025 = load i8*, i8** %1010, align 8
  %1026 = sext i32 %1023 to i64
  %1027 = getelementptr inbounds i8, i8* %1025, i64 %1026
  %1028 = add nsw i64 %1016, -1
  br i1 %1024, label %1014, label %1029

1029:                                             ; preds = %1021, %1014, %1005
  %1030 = phi i8* [ %1013, %1005 ], [ %1020, %1014 ], [ %1027, %1021 ]
  %1031 = load i8, i8* %1030, align 1
  %1032 = add i8 %1031, 1
  store i8 %1032, i8* %1030, align 1
  br label %1033

1033:                                             ; preds = %1029, %1000
  %1034 = add i32 %980, 24
  %1035 = lshr i32 %992, %1034
  %1036 = trunc i32 %1035 to i8
  %1037 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1038 = load i8*, i8** %1037, align 8
  %1039 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1040 = load i32, i32* %1039, align 4
  %1041 = add i32 %1040, 1
  store i32 %1041, i32* %1039, align 4
  %1042 = zext i32 %1040 to i64
  %1043 = getelementptr inbounds i8, i8* %1038, i64 %1042
  store i8 %1036, i8* %1043, align 1
  %1044 = shl i32 %992, %1001
  %1045 = and i32 %1044, 16777215
  %1046 = add nsw i32 %998, -8
  br label %1047

1047:                                             ; preds = %1033, %973
  %1048 = phi i32 [ %1046, %1033 ], [ %998, %973 ]
  %1049 = phi i32 [ %1045, %1033 ], [ %992, %973 ]
  %1050 = phi i32 [ %998, %1033 ], [ %996, %973 ]
  %1051 = shl i32 %1049, %1050
  store i32 %1048, i32* %979, align 8
  store i32 %1051, i32* %983, align 8
  store i32 %997, i32* %981, align 4
  br label %1052

1052:                                             ; preds = %1047, %969
  br i1 %958, label %1053, label %1145

1053:                                             ; preds = %1052
  %1054 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 70
  %1055 = load i8, i8* %1054, align 4
  %1056 = sext i8 %1055 to i64
  %1057 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 67, i64 %1056
  %1058 = load i32, i32* %1057, align 4
  %1059 = icmp eq i32 %1058, 0
  %1060 = zext i1 %1059 to i64
  %1061 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %955, i64 0, i32 8, i64 %1060
  %1062 = load i8, i8* %1061, align 1
  %1063 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 71, i64 1
  %1064 = load i8, i8* %1063, align 1
  %1065 = icmp ne i8 %1062, %1064
  %1066 = tail call i32 @vp9_get_pred_context_comp_ref_p(%struct.VP9Common* %11, %struct.macroblockd* %1) #5
  %1067 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %1068 = sext i32 %1066 to i64
  %1069 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1067, i64 0, i32 9, i64 %1068
  %1070 = load i8, i8* %1069, align 1
  %1071 = zext i8 %1070 to i32
  %1072 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %1073 = load i32, i32* %1072, align 8
  %1074 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %1075 = load i32, i32* %1074, align 4
  %1076 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %1077 = load i32, i32* %1076, align 8
  %1078 = add i32 %1075, -1
  %1079 = mul i32 %1078, %1071
  %1080 = lshr i32 %1079, 8
  %1081 = add nuw nsw i32 %1080, 1
  %1082 = sub i32 %1075, %1081
  %1083 = select i1 %1065, i32 %1081, i32 %1082
  %1084 = select i1 %1065, i32 0, i32 %1081
  %1085 = add i32 %1084, %1077
  %1086 = zext i32 %1083 to i64
  %1087 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1086
  %1088 = load i8, i8* %1087, align 1
  %1089 = zext i8 %1088 to i32
  %1090 = shl i32 %1083, %1089
  %1091 = add nsw i32 %1073, %1089
  %1092 = icmp sgt i32 %1091, -1
  br i1 %1092, label %1093, label %1140

1093:                                             ; preds = %1053
  %1094 = sub i32 0, %1073
  %1095 = xor i32 %1073, -1
  %1096 = shl i32 %1085, %1095
  %1097 = icmp slt i32 %1096, 0
  br i1 %1097, label %1098, label %1126

1098:                                             ; preds = %1093
  %1099 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1100 = load i32, i32* %1099, align 4
  %1101 = add i32 %1100, -1
  %1102 = icmp sgt i32 %1101, -1
  %1103 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1104 = load i8*, i8** %1103, align 8
  %1105 = sext i32 %1101 to i64
  %1106 = getelementptr inbounds i8, i8* %1104, i64 %1105
  br i1 %1102, label %1107, label %1122

1107:                                             ; preds = %1098, %1114
  %1108 = phi i8* [ %1118, %1114 ], [ %1104, %1098 ]
  %1109 = phi i64 [ %1121, %1114 ], [ %1105, %1098 ]
  %1110 = phi i8* [ %1120, %1114 ], [ %1106, %1098 ]
  %1111 = load i8, i8* %1110, align 1
  %1112 = icmp eq i8 %1111, -1
  %1113 = getelementptr inbounds i8, i8* %1108, i64 %1109
  br i1 %1112, label %1114, label %1122

1114:                                             ; preds = %1107
  store i8 0, i8* %1113, align 1
  %1115 = trunc i64 %1109 to i32
  %1116 = add i32 %1115, -1
  %1117 = icmp sgt i32 %1116, -1
  %1118 = load i8*, i8** %1103, align 8
  %1119 = sext i32 %1116 to i64
  %1120 = getelementptr inbounds i8, i8* %1118, i64 %1119
  %1121 = add nsw i64 %1109, -1
  br i1 %1117, label %1107, label %1122

1122:                                             ; preds = %1114, %1107, %1098
  %1123 = phi i8* [ %1106, %1098 ], [ %1113, %1107 ], [ %1120, %1114 ]
  %1124 = load i8, i8* %1123, align 1
  %1125 = add i8 %1124, 1
  store i8 %1125, i8* %1123, align 1
  br label %1126

1126:                                             ; preds = %1122, %1093
  %1127 = add i32 %1073, 24
  %1128 = lshr i32 %1085, %1127
  %1129 = trunc i32 %1128 to i8
  %1130 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1131 = load i8*, i8** %1130, align 8
  %1132 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1133 = load i32, i32* %1132, align 4
  %1134 = add i32 %1133, 1
  store i32 %1134, i32* %1132, align 4
  %1135 = zext i32 %1133 to i64
  %1136 = getelementptr inbounds i8, i8* %1131, i64 %1135
  store i8 %1129, i8* %1136, align 1
  %1137 = shl i32 %1085, %1094
  %1138 = and i32 %1137, 16777215
  %1139 = add nsw i32 %1091, -8
  br label %1140

1140:                                             ; preds = %1126, %1053
  %1141 = phi i32 [ %1139, %1126 ], [ %1091, %1053 ]
  %1142 = phi i32 [ %1138, %1126 ], [ %1085, %1053 ]
  %1143 = phi i32 [ %1091, %1126 ], [ %1089, %1053 ]
  %1144 = shl i32 %1142, %1143
  store i32 %1141, i32* %1072, align 8
  store i32 %1144, i32* %1076, align 8
  store i32 %1090, i32* %1074, align 4
  br label %1307

1145:                                             ; preds = %1052
  %1146 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %955, i64 0, i32 8, i64 0
  %1147 = load i8, i8* %1146, align 4
  %1148 = icmp ne i8 %1147, 1
  %1149 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %1150 = tail call i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd* %1) #5
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1149, i64 0, i32 8, i64 %1151, i64 0
  %1153 = load i8, i8* %1152, align 2
  %1154 = zext i8 %1153 to i32
  %1155 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %1156 = load i32, i32* %1155, align 8
  %1157 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %1158 = load i32, i32* %1157, align 4
  %1159 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %1160 = load i32, i32* %1159, align 8
  %1161 = add i32 %1158, -1
  %1162 = mul i32 %1161, %1154
  %1163 = lshr i32 %1162, 8
  %1164 = add nuw nsw i32 %1163, 1
  %1165 = sub i32 %1158, %1164
  %1166 = select i1 %1148, i32 %1165, i32 %1164
  %1167 = select i1 %1148, i32 %1164, i32 0
  %1168 = add i32 %1167, %1160
  %1169 = zext i32 %1166 to i64
  %1170 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1169
  %1171 = load i8, i8* %1170, align 1
  %1172 = zext i8 %1171 to i32
  %1173 = shl i32 %1166, %1172
  %1174 = add nsw i32 %1156, %1172
  %1175 = icmp sgt i32 %1174, -1
  br i1 %1175, label %1176, label %1223

1176:                                             ; preds = %1145
  %1177 = sub i32 0, %1156
  %1178 = xor i32 %1156, -1
  %1179 = shl i32 %1168, %1178
  %1180 = icmp slt i32 %1179, 0
  br i1 %1180, label %1181, label %1209

1181:                                             ; preds = %1176
  %1182 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1183 = load i32, i32* %1182, align 4
  %1184 = add i32 %1183, -1
  %1185 = icmp sgt i32 %1184, -1
  %1186 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1187 = load i8*, i8** %1186, align 8
  %1188 = sext i32 %1184 to i64
  %1189 = getelementptr inbounds i8, i8* %1187, i64 %1188
  br i1 %1185, label %1190, label %1205

1190:                                             ; preds = %1181, %1197
  %1191 = phi i8* [ %1201, %1197 ], [ %1187, %1181 ]
  %1192 = phi i64 [ %1204, %1197 ], [ %1188, %1181 ]
  %1193 = phi i8* [ %1203, %1197 ], [ %1189, %1181 ]
  %1194 = load i8, i8* %1193, align 1
  %1195 = icmp eq i8 %1194, -1
  %1196 = getelementptr inbounds i8, i8* %1191, i64 %1192
  br i1 %1195, label %1197, label %1205

1197:                                             ; preds = %1190
  store i8 0, i8* %1196, align 1
  %1198 = trunc i64 %1192 to i32
  %1199 = add i32 %1198, -1
  %1200 = icmp sgt i32 %1199, -1
  %1201 = load i8*, i8** %1186, align 8
  %1202 = sext i32 %1199 to i64
  %1203 = getelementptr inbounds i8, i8* %1201, i64 %1202
  %1204 = add nsw i64 %1192, -1
  br i1 %1200, label %1190, label %1205

1205:                                             ; preds = %1197, %1190, %1181
  %1206 = phi i8* [ %1189, %1181 ], [ %1196, %1190 ], [ %1203, %1197 ]
  %1207 = load i8, i8* %1206, align 1
  %1208 = add i8 %1207, 1
  store i8 %1208, i8* %1206, align 1
  br label %1209

1209:                                             ; preds = %1205, %1176
  %1210 = add i32 %1156, 24
  %1211 = lshr i32 %1168, %1210
  %1212 = trunc i32 %1211 to i8
  %1213 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1214 = load i8*, i8** %1213, align 8
  %1215 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1216 = load i32, i32* %1215, align 4
  %1217 = add i32 %1216, 1
  store i32 %1217, i32* %1215, align 4
  %1218 = zext i32 %1216 to i64
  %1219 = getelementptr inbounds i8, i8* %1214, i64 %1218
  store i8 %1212, i8* %1219, align 1
  %1220 = shl i32 %1168, %1177
  %1221 = and i32 %1220, 16777215
  %1222 = add nsw i32 %1174, -8
  br label %1223

1223:                                             ; preds = %1209, %1145
  %1224 = phi i32 [ %1222, %1209 ], [ %1174, %1145 ]
  %1225 = phi i32 [ %1221, %1209 ], [ %1168, %1145 ]
  %1226 = phi i32 [ %1174, %1209 ], [ %1172, %1145 ]
  %1227 = shl i32 %1225, %1226
  store i32 %1224, i32* %1155, align 8
  store i32 %1227, i32* %1159, align 8
  store i32 %1173, i32* %1157, align 4
  br i1 %1148, label %1228, label %1307

1228:                                             ; preds = %1223
  %1229 = load i8, i8* %1146, align 4
  %1230 = icmp eq i8 %1229, 2
  %1231 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %1232 = tail call i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd* %1) #5
  %1233 = sext i32 %1232 to i64
  %1234 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1231, i64 0, i32 8, i64 %1233, i64 1
  %1235 = load i8, i8* %1234, align 1
  %1236 = zext i8 %1235 to i32
  %1237 = load i32, i32* %1155, align 8
  %1238 = load i32, i32* %1157, align 4
  %1239 = load i32, i32* %1159, align 8
  %1240 = add i32 %1238, -1
  %1241 = mul i32 %1240, %1236
  %1242 = lshr i32 %1241, 8
  %1243 = add nuw nsw i32 %1242, 1
  %1244 = sub i32 %1238, %1243
  %1245 = select i1 %1230, i32 %1243, i32 %1244
  %1246 = select i1 %1230, i32 0, i32 %1243
  %1247 = add i32 %1246, %1239
  %1248 = zext i32 %1245 to i64
  %1249 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1248
  %1250 = load i8, i8* %1249, align 1
  %1251 = zext i8 %1250 to i32
  %1252 = shl i32 %1245, %1251
  %1253 = add nsw i32 %1237, %1251
  %1254 = icmp sgt i32 %1253, -1
  br i1 %1254, label %1255, label %1302

1255:                                             ; preds = %1228
  %1256 = sub i32 0, %1237
  %1257 = xor i32 %1237, -1
  %1258 = shl i32 %1247, %1257
  %1259 = icmp slt i32 %1258, 0
  br i1 %1259, label %1260, label %1288

1260:                                             ; preds = %1255
  %1261 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1262 = load i32, i32* %1261, align 4
  %1263 = add i32 %1262, -1
  %1264 = icmp sgt i32 %1263, -1
  %1265 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1266 = load i8*, i8** %1265, align 8
  %1267 = sext i32 %1263 to i64
  %1268 = getelementptr inbounds i8, i8* %1266, i64 %1267
  br i1 %1264, label %1269, label %1284

1269:                                             ; preds = %1260, %1276
  %1270 = phi i8* [ %1280, %1276 ], [ %1266, %1260 ]
  %1271 = phi i64 [ %1283, %1276 ], [ %1267, %1260 ]
  %1272 = phi i8* [ %1282, %1276 ], [ %1268, %1260 ]
  %1273 = load i8, i8* %1272, align 1
  %1274 = icmp eq i8 %1273, -1
  %1275 = getelementptr inbounds i8, i8* %1270, i64 %1271
  br i1 %1274, label %1276, label %1284

1276:                                             ; preds = %1269
  store i8 0, i8* %1275, align 1
  %1277 = trunc i64 %1271 to i32
  %1278 = add i32 %1277, -1
  %1279 = icmp sgt i32 %1278, -1
  %1280 = load i8*, i8** %1265, align 8
  %1281 = sext i32 %1278 to i64
  %1282 = getelementptr inbounds i8, i8* %1280, i64 %1281
  %1283 = add nsw i64 %1271, -1
  br i1 %1279, label %1269, label %1284

1284:                                             ; preds = %1276, %1269, %1260
  %1285 = phi i8* [ %1268, %1260 ], [ %1275, %1269 ], [ %1282, %1276 ]
  %1286 = load i8, i8* %1285, align 1
  %1287 = add i8 %1286, 1
  store i8 %1287, i8* %1285, align 1
  br label %1288

1288:                                             ; preds = %1284, %1255
  %1289 = add i32 %1237, 24
  %1290 = lshr i32 %1247, %1289
  %1291 = trunc i32 %1290 to i8
  %1292 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1293 = load i8*, i8** %1292, align 8
  %1294 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1295 = load i32, i32* %1294, align 4
  %1296 = add i32 %1295, 1
  store i32 %1296, i32* %1294, align 4
  %1297 = zext i32 %1295 to i64
  %1298 = getelementptr inbounds i8, i8* %1293, i64 %1297
  store i8 %1291, i8* %1298, align 1
  %1299 = shl i32 %1247, %1256
  %1300 = and i32 %1299, 16777215
  %1301 = add nsw i32 %1253, -8
  br label %1302

1302:                                             ; preds = %1288, %1228
  %1303 = phi i32 [ %1301, %1288 ], [ %1253, %1228 ]
  %1304 = phi i32 [ %1300, %1288 ], [ %1247, %1228 ]
  %1305 = phi i32 [ %1253, %1288 ], [ %1251, %1228 ]
  %1306 = shl i32 %1304, %1305
  store i32 %1303, i32* %1155, align 8
  store i32 %1306, i32* %1159, align 8
  store i32 %1252, i32* %1157, align 4
  br label %1307

1307:                                             ; preds = %1302, %1223, %1140, %961
  %1308 = load i8, i8* %897, align 4
  %1309 = icmp eq i8 %1308, 0
  br i1 %1309, label %1316, label %1310

1310:                                             ; preds = %1307
  %1311 = sext i8 %358 to i64
  %1312 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %1311
  %1313 = load i32, i32* %1312, align 4
  %1314 = and i32 %1313, 8
  %1315 = icmp ne i32 %1314, 0
  br label %1316

1316:                                             ; preds = %1310, %1307
  %1317 = phi i1 [ false, %1307 ], [ %1315, %1310 ]
  %1318 = xor i1 %899, true
  %1319 = or i1 %1317, %1318
  br i1 %1319, label %1321, label %1320

1320:                                             ; preds = %1316
  tail call fastcc void @write_inter_mode(%struct.vpx_writer* %3, i8 zeroext %356, i8* %953) #5
  br label %1321

1321:                                             ; preds = %1320, %1316
  %1322 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 63
  %1323 = load i8, i8* %1322, align 4
  %1324 = icmp eq i8 %1323, 4
  br i1 %1324, label %1325, label %1457

1325:                                             ; preds = %1321
  %1326 = load %struct.MODE_INFO*, %struct.MODE_INFO** %71, align 8
  %1327 = icmp eq %struct.MODE_INFO* %1326, null
  br i1 %1327, label %1332, label %1328

1328:                                             ; preds = %1325
  %1329 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1326, i64 0, i32 7
  %1330 = load i8, i8* %1329, align 1
  %1331 = zext i8 %1330 to i32
  br label %1332

1332:                                             ; preds = %1328, %1325
  %1333 = phi i32 [ %1331, %1328 ], [ 3, %1325 ]
  %1334 = load %struct.MODE_INFO*, %struct.MODE_INFO** %62, align 8
  %1335 = icmp eq %struct.MODE_INFO* %1334, null
  br i1 %1335, label %1340, label %1336

1336:                                             ; preds = %1332
  %1337 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1334, i64 0, i32 7
  %1338 = load i8, i8* %1337, align 1
  %1339 = zext i8 %1338 to i32
  br label %1340

1340:                                             ; preds = %1336, %1332
  %1341 = phi i32 [ %1339, %1336 ], [ 3, %1332 ]
  %1342 = icmp eq i32 %1333, %1341
  br i1 %1342, label %1348, label %1343

1343:                                             ; preds = %1340
  %1344 = icmp eq i32 %1333, 3
  br i1 %1344, label %1348, label %1345

1345:                                             ; preds = %1343
  %1346 = icmp eq i32 %1341, 3
  %1347 = select i1 %1346, i32 %1333, i32 3
  br label %1348

1348:                                             ; preds = %1345, %1343, %1340
  %1349 = phi i32 [ %1333, %1340 ], [ %1341, %1343 ], [ %1347, %1345 ]
  %1350 = load %struct.frame_contexts*, %struct.frame_contexts** %350, align 8
  %1351 = sext i32 %1349 to i64
  %1352 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 7
  %1353 = load i8, i8* %1352, align 1
  %1354 = zext i8 %1353 to i64
  %1355 = getelementptr inbounds [3 x %struct.vp9_token], [3 x %struct.vp9_token]* @switchable_interp_encodings, i64 0, i64 %1354, i32 0
  %1356 = load i32, i32* %1355, align 8
  %1357 = getelementptr inbounds [3 x %struct.vp9_token], [3 x %struct.vp9_token]* @switchable_interp_encodings, i64 0, i64 %1354, i32 1
  %1358 = load i32, i32* %1357, align 4
  %1359 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %1360 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %1361 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %1362 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1363 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  %1364 = load i32, i32* %1359, align 8
  %1365 = load i32, i32* %1360, align 4
  %1366 = load i32, i32* %1361, align 8
  br label %1367

1367:                                             ; preds = %1441, %1348
  %1368 = phi i32 [ %1366, %1348 ], [ %1445, %1441 ]
  %1369 = phi i32 [ %1365, %1348 ], [ %1395, %1441 ]
  %1370 = phi i32 [ %1364, %1348 ], [ %1442, %1441 ]
  %1371 = phi i8 [ 0, %1348 ], [ %1449, %1441 ]
  %1372 = phi i32 [ %1358, %1348 ], [ %1373, %1441 ]
  %1373 = add nsw i32 %1372, -1
  %1374 = lshr i32 %1356, %1373
  %1375 = and i32 %1374, 1
  %1376 = sext i8 %1371 to i32
  %1377 = ashr i32 %1376, 1
  %1378 = sext i32 %1377 to i64
  %1379 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1350, i64 0, i32 4, i64 %1351, i64 %1378
  %1380 = load i8, i8* %1379, align 1
  %1381 = zext i8 %1380 to i32
  %1382 = add i32 %1369, -1
  %1383 = mul i32 %1382, %1381
  %1384 = lshr i32 %1383, 8
  %1385 = add nuw nsw i32 %1384, 1
  %1386 = icmp eq i32 %1375, 0
  %1387 = sub i32 %1369, %1385
  %1388 = select i1 %1386, i32 %1385, i32 %1387
  %1389 = select i1 %1386, i32 0, i32 %1385
  %1390 = add i32 %1389, %1368
  %1391 = zext i32 %1388 to i64
  %1392 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1391
  %1393 = load i8, i8* %1392, align 1
  %1394 = zext i8 %1393 to i32
  %1395 = shl i32 %1388, %1394
  %1396 = add nsw i32 %1370, %1394
  %1397 = icmp sgt i32 %1396, -1
  br i1 %1397, label %1398, label %1441

1398:                                             ; preds = %1367
  %1399 = sub i32 0, %1370
  %1400 = xor i32 %1370, -1
  %1401 = shl i32 %1390, %1400
  %1402 = icmp slt i32 %1401, 0
  br i1 %1402, label %1403, label %1429

1403:                                             ; preds = %1398
  %1404 = load i32, i32* %1362, align 4
  %1405 = add i32 %1404, -1
  %1406 = icmp sgt i32 %1405, -1
  %1407 = load i8*, i8** %1363, align 8
  %1408 = sext i32 %1405 to i64
  %1409 = getelementptr inbounds i8, i8* %1407, i64 %1408
  br i1 %1406, label %1410, label %1425

1410:                                             ; preds = %1403, %1417
  %1411 = phi i8* [ %1421, %1417 ], [ %1407, %1403 ]
  %1412 = phi i64 [ %1424, %1417 ], [ %1408, %1403 ]
  %1413 = phi i8* [ %1423, %1417 ], [ %1409, %1403 ]
  %1414 = load i8, i8* %1413, align 1
  %1415 = icmp eq i8 %1414, -1
  %1416 = getelementptr inbounds i8, i8* %1411, i64 %1412
  br i1 %1415, label %1417, label %1425

1417:                                             ; preds = %1410
  store i8 0, i8* %1416, align 1
  %1418 = trunc i64 %1412 to i32
  %1419 = add i32 %1418, -1
  %1420 = icmp sgt i32 %1419, -1
  %1421 = load i8*, i8** %1363, align 8
  %1422 = sext i32 %1419 to i64
  %1423 = getelementptr inbounds i8, i8* %1421, i64 %1422
  %1424 = add nsw i64 %1412, -1
  br i1 %1420, label %1410, label %1425

1425:                                             ; preds = %1417, %1410, %1403
  %1426 = phi i8* [ %1409, %1403 ], [ %1423, %1417 ], [ %1416, %1410 ]
  %1427 = load i8, i8* %1426, align 1
  %1428 = add i8 %1427, 1
  store i8 %1428, i8* %1426, align 1
  br label %1429

1429:                                             ; preds = %1425, %1398
  %1430 = add i32 %1370, 24
  %1431 = lshr i32 %1390, %1430
  %1432 = trunc i32 %1431 to i8
  %1433 = load i8*, i8** %1363, align 8
  %1434 = load i32, i32* %1362, align 4
  %1435 = add i32 %1434, 1
  store i32 %1435, i32* %1362, align 4
  %1436 = zext i32 %1434 to i64
  %1437 = getelementptr inbounds i8, i8* %1433, i64 %1436
  store i8 %1432, i8* %1437, align 1
  %1438 = shl i32 %1390, %1399
  %1439 = and i32 %1438, 16777215
  %1440 = add nsw i32 %1396, -8
  br label %1441

1441:                                             ; preds = %1429, %1367
  %1442 = phi i32 [ %1440, %1429 ], [ %1396, %1367 ]
  %1443 = phi i32 [ %1439, %1429 ], [ %1390, %1367 ]
  %1444 = phi i32 [ %1396, %1429 ], [ %1394, %1367 ]
  %1445 = shl i32 %1443, %1444
  store i32 %1442, i32* %1359, align 8
  store i32 %1445, i32* %1361, align 8
  store i32 %1395, i32* %1360, align 4
  %1446 = add nsw i32 %1375, %1376
  %1447 = sext i32 %1446 to i64
  %1448 = getelementptr inbounds [4 x i8], [4 x i8]* @vp9_switchable_interp_tree, i64 0, i64 %1447
  %1449 = load i8, i8* %1448, align 1
  %1450 = icmp eq i32 %1373, 0
  br i1 %1450, label %1451, label %1367

1451:                                             ; preds = %1441
  %1452 = load i8, i8* %1352, align 1
  %1453 = zext i8 %1452 to i64
  %1454 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %1453
  %1455 = load i32, i32* %1454, align 4
  %1456 = add nsw i32 %1455, 1
  store i32 %1456, i32* %1454, align 4
  br label %1457

1457:                                             ; preds = %1451, %1321
  %1458 = icmp ult i8 %361, 3
  br i1 %1458, label %1459, label %1494

1459:                                             ; preds = %1457
  %1460 = zext i8 %361 to i64
  %1461 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %1460
  %1462 = load i8, i8* %1461, align 1
  %1463 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %1460
  %1464 = load i8, i8* %1463, align 1
  %1465 = zext i8 %1462 to i64
  %1466 = zext i8 %1464 to i64
  %1467 = select i1 %369, i64 2, i64 1
  br label %1468

1468:                                             ; preds = %1491, %1459
  %1469 = phi i64 [ 0, %1459 ], [ %1492, %1491 ]
  %1470 = shl nuw nsw i64 %1469, 1
  br label %1471

1471:                                             ; preds = %1488, %1468
  %1472 = phi i64 [ 0, %1468 ], [ %1489, %1488 ]
  %1473 = add nuw nsw i64 %1472, %1470
  %1474 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 10, i64 %1473, i32 0
  %1475 = load i8, i8* %1474, align 4
  tail call fastcc void @write_inter_mode(%struct.vpx_writer* %3, i8 zeroext %1475, i8* %953) #5
  %1476 = icmp eq i8 %1475, 13
  br i1 %1476, label %1477, label %1488

1477:                                             ; preds = %1471, %1477
  %1478 = phi i64 [ %1486, %1477 ], [ 0, %1471 ]
  %1479 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 10, i64 %1473, i32 1, i64 %1478
  %1480 = bitcast %union.int_mv* %1479 to %struct.mv*
  %1481 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 8, i64 %1478
  %1482 = load i8, i8* %1481, align 1
  %1483 = sext i8 %1482 to i64
  %1484 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %13, i64 %349, i32 0, i64 %1483, i64 0
  %1485 = bitcast %union.int_mv* %1484 to %struct.mv*
  tail call void @vp9_encode_mv(%struct.VP9_COMP* %0, %struct.vpx_writer* %3, %struct.mv* %1480, %struct.mv* %1485, %struct.nmv_context* %352, i32 %363, i32* %8) #5
  %1486 = add nuw nsw i64 %1478, 1
  %1487 = icmp eq i64 %1486, %1467
  br i1 %1487, label %1488, label %1477

1488:                                             ; preds = %1477, %1471
  %1489 = add i64 %1472, %1465
  %1490 = icmp ult i64 %1489, 2
  br i1 %1490, label %1471, label %1491

1491:                                             ; preds = %1488
  %1492 = add i64 %1469, %1466
  %1493 = icmp ult i64 %1492, 2
  br i1 %1493, label %1468, label %1509

1494:                                             ; preds = %1457
  %1495 = icmp eq i8 %356, 13
  br i1 %1495, label %1496, label %1509

1496:                                             ; preds = %1494
  %1497 = select i1 %369, i64 2, i64 1
  br label %1498

1498:                                             ; preds = %1498, %1496
  %1499 = phi i64 [ 0, %1496 ], [ %1507, %1498 ]
  %1500 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 9, i64 %1499
  %1501 = bitcast %union.int_mv* %1500 to %struct.mv*
  %1502 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %354, i64 0, i32 8, i64 %1499
  %1503 = load i8, i8* %1502, align 1
  %1504 = sext i8 %1503 to i64
  %1505 = getelementptr inbounds %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT* %13, i64 %349, i32 0, i64 %1504, i64 0
  %1506 = bitcast %union.int_mv* %1505 to %struct.mv*
  tail call void @vp9_encode_mv(%struct.VP9_COMP* %0, %struct.vpx_writer* %3, %struct.mv* %1501, %struct.mv* %1506, %struct.nmv_context* %352, i32 %363, i32* %8) #5
  %1507 = add nuw nsw i64 %1499, 1
  %1508 = icmp eq i64 %1507, %1497
  br i1 %1508, label %1509, label %1498

1509:                                             ; preds = %1498, %1491, %1494, %940, %339
  %1510 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %1511 = load i32, i32* %1510, align 16
  %1512 = icmp eq i32 %1511, 12
  %1513 = icmp eq i32 %1511, 10
  %1514 = select i1 %1513, %struct.vp9_extra_bit* getelementptr inbounds ([12 x %struct.vp9_extra_bit], [12 x %struct.vp9_extra_bit]* @vp9_extra_bits_high10, i64 0, i64 0), %struct.vp9_extra_bit* getelementptr inbounds ([12 x %struct.vp9_extra_bit], [12 x %struct.vp9_extra_bit]* @vp9_extra_bits, i64 0, i64 0)
  %1515 = select i1 %1512, %struct.vp9_extra_bit* getelementptr inbounds ([12 x %struct.vp9_extra_bit], [12 x %struct.vp9_extra_bit]* @vp9_extra_bits_high12, i64 0, i64 0), %struct.vp9_extra_bit* %1514
  %1516 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %4, align 8
  %1517 = icmp ult %struct.TOKENEXTRA* %1516, %5
  %1518 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1516, i64 0, i32 1
  %1519 = load i16, i16* %1518, align 8
  br i1 %1517, label %1520, label %2254

1520:                                             ; preds = %1509
  %1521 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 2
  %1522 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 1
  %1523 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 0
  %1524 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 3
  %1525 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %3, i64 0, i32 4
  br label %1526

1526:                                             ; preds = %2245, %1520
  %1527 = phi i16 [ %1519, %1520 ], [ %2253, %2245 ]
  %1528 = phi %struct.TOKENEXTRA* [ %1516, %1520 ], [ %2250, %2245 ]
  %1529 = icmp eq i16 %1527, 127
  br i1 %1529, label %2254, label %1530

1530:                                             ; preds = %1526
  %1531 = icmp eq i16 %1527, 11
  %1532 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1528, i64 0, i32 0
  %1533 = load i8*, i8** %1532, align 8
  %1534 = load i8, i8* %1533, align 1
  %1535 = zext i8 %1534 to i32
  %1536 = load i32, i32* %1521, align 8
  %1537 = load i32, i32* %1522, align 4
  %1538 = load i32, i32* %1523, align 8
  %1539 = add i32 %1537, -1
  %1540 = mul i32 %1539, %1535
  %1541 = lshr i32 %1540, 8
  %1542 = add nuw nsw i32 %1541, 1
  br i1 %1531, label %1543, label %1599

1543:                                             ; preds = %1530
  %1544 = zext i32 %1542 to i64
  %1545 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1544
  %1546 = load i8, i8* %1545, align 1
  %1547 = zext i8 %1546 to i32
  %1548 = shl i32 %1542, %1547
  %1549 = add nsw i32 %1536, %1547
  %1550 = icmp sgt i32 %1549, -1
  br i1 %1550, label %1551, label %1594

1551:                                             ; preds = %1543
  %1552 = sub i32 0, %1536
  %1553 = xor i32 %1536, -1
  %1554 = shl i32 %1538, %1553
  %1555 = icmp slt i32 %1554, 0
  br i1 %1555, label %1556, label %1582

1556:                                             ; preds = %1551
  %1557 = load i32, i32* %1524, align 4
  %1558 = add i32 %1557, -1
  %1559 = icmp sgt i32 %1558, -1
  %1560 = load i8*, i8** %1525, align 8
  %1561 = sext i32 %1558 to i64
  %1562 = getelementptr inbounds i8, i8* %1560, i64 %1561
  br i1 %1559, label %1563, label %1578

1563:                                             ; preds = %1556, %1570
  %1564 = phi i8* [ %1574, %1570 ], [ %1560, %1556 ]
  %1565 = phi i64 [ %1577, %1570 ], [ %1561, %1556 ]
  %1566 = phi i8* [ %1576, %1570 ], [ %1562, %1556 ]
  %1567 = load i8, i8* %1566, align 1
  %1568 = icmp eq i8 %1567, -1
  %1569 = getelementptr inbounds i8, i8* %1564, i64 %1565
  br i1 %1568, label %1570, label %1578

1570:                                             ; preds = %1563
  store i8 0, i8* %1569, align 1
  %1571 = trunc i64 %1565 to i32
  %1572 = add i32 %1571, -1
  %1573 = icmp sgt i32 %1572, -1
  %1574 = load i8*, i8** %1525, align 8
  %1575 = sext i32 %1572 to i64
  %1576 = getelementptr inbounds i8, i8* %1574, i64 %1575
  %1577 = add nsw i64 %1565, -1
  br i1 %1573, label %1563, label %1578

1578:                                             ; preds = %1570, %1563, %1556
  %1579 = phi i8* [ %1562, %1556 ], [ %1576, %1570 ], [ %1569, %1563 ]
  %1580 = load i8, i8* %1579, align 1
  %1581 = add i8 %1580, 1
  store i8 %1581, i8* %1579, align 1
  br label %1582

1582:                                             ; preds = %1578, %1551
  %1583 = add i32 %1536, 24
  %1584 = lshr i32 %1538, %1583
  %1585 = trunc i32 %1584 to i8
  %1586 = load i8*, i8** %1525, align 8
  %1587 = load i32, i32* %1524, align 4
  %1588 = add i32 %1587, 1
  store i32 %1588, i32* %1524, align 4
  %1589 = zext i32 %1587 to i64
  %1590 = getelementptr inbounds i8, i8* %1586, i64 %1589
  store i8 %1585, i8* %1590, align 1
  %1591 = shl i32 %1538, %1552
  %1592 = and i32 %1591, 16777215
  %1593 = add nsw i32 %1549, -8
  br label %1594

1594:                                             ; preds = %1582, %1543
  %1595 = phi i32 [ %1593, %1582 ], [ %1549, %1543 ]
  %1596 = phi i32 [ %1592, %1582 ], [ %1538, %1543 ]
  %1597 = phi i32 [ %1549, %1582 ], [ %1547, %1543 ]
  %1598 = shl i32 %1596, %1597
  br label %2245

1599:                                             ; preds = %1530
  %1600 = sub i32 %1537, %1542
  %1601 = add i32 %1542, %1538
  %1602 = zext i32 %1600 to i64
  %1603 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1602
  %1604 = load i8, i8* %1603, align 1
  %1605 = zext i8 %1604 to i32
  %1606 = shl i32 %1600, %1605
  %1607 = add nsw i32 %1536, %1605
  %1608 = icmp sgt i32 %1607, -1
  br i1 %1608, label %1609, label %1652

1609:                                             ; preds = %1599
  %1610 = sub i32 0, %1536
  %1611 = xor i32 %1536, -1
  %1612 = shl i32 %1601, %1611
  %1613 = icmp slt i32 %1612, 0
  br i1 %1613, label %1614, label %1640

1614:                                             ; preds = %1609
  %1615 = load i32, i32* %1524, align 4
  %1616 = add i32 %1615, -1
  %1617 = icmp sgt i32 %1616, -1
  %1618 = load i8*, i8** %1525, align 8
  %1619 = sext i32 %1616 to i64
  %1620 = getelementptr inbounds i8, i8* %1618, i64 %1619
  br i1 %1617, label %1621, label %1636

1621:                                             ; preds = %1614, %1628
  %1622 = phi i8* [ %1632, %1628 ], [ %1618, %1614 ]
  %1623 = phi i64 [ %1635, %1628 ], [ %1619, %1614 ]
  %1624 = phi i8* [ %1634, %1628 ], [ %1620, %1614 ]
  %1625 = load i8, i8* %1624, align 1
  %1626 = icmp eq i8 %1625, -1
  %1627 = getelementptr inbounds i8, i8* %1622, i64 %1623
  br i1 %1626, label %1628, label %1636

1628:                                             ; preds = %1621
  store i8 0, i8* %1627, align 1
  %1629 = trunc i64 %1623 to i32
  %1630 = add i32 %1629, -1
  %1631 = icmp sgt i32 %1630, -1
  %1632 = load i8*, i8** %1525, align 8
  %1633 = sext i32 %1630 to i64
  %1634 = getelementptr inbounds i8, i8* %1632, i64 %1633
  %1635 = add nsw i64 %1623, -1
  br i1 %1631, label %1621, label %1636

1636:                                             ; preds = %1628, %1621, %1614
  %1637 = phi i8* [ %1620, %1614 ], [ %1634, %1628 ], [ %1627, %1621 ]
  %1638 = load i8, i8* %1637, align 1
  %1639 = add i8 %1638, 1
  store i8 %1639, i8* %1637, align 1
  br label %1640

1640:                                             ; preds = %1636, %1609
  %1641 = add i32 %1536, 24
  %1642 = lshr i32 %1601, %1641
  %1643 = trunc i32 %1642 to i8
  %1644 = load i8*, i8** %1525, align 8
  %1645 = load i32, i32* %1524, align 4
  %1646 = add i32 %1645, 1
  store i32 %1646, i32* %1524, align 4
  %1647 = zext i32 %1645 to i64
  %1648 = getelementptr inbounds i8, i8* %1644, i64 %1647
  store i8 %1643, i8* %1648, align 1
  %1649 = shl i32 %1601, %1610
  %1650 = and i32 %1649, 16777215
  %1651 = add nsw i32 %1607, -8
  br label %1652

1652:                                             ; preds = %1640, %1599
  %1653 = phi i32 [ %1651, %1640 ], [ %1607, %1599 ]
  %1654 = phi i32 [ %1650, %1640 ], [ %1601, %1599 ]
  %1655 = phi i32 [ %1607, %1640 ], [ %1605, %1599 ]
  %1656 = shl i32 %1654, %1655
  store i32 %1653, i32* %1521, align 8
  store i32 %1656, i32* %1523, align 8
  store i32 %1606, i32* %1522, align 4
  br label %1657

1657:                                             ; preds = %1737, %1652
  %1658 = phi i32 [ %1656, %1652 ], [ %1729, %1737 ]
  %1659 = phi i32 [ %1606, %1652 ], [ %1679, %1737 ]
  %1660 = phi i32 [ %1653, %1652 ], [ %1726, %1737 ]
  %1661 = phi %struct.TOKENEXTRA* [ %1528, %1652 ], [ %1730, %1737 ]
  %1662 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1661, i64 0, i32 1
  %1663 = load i16, i16* %1662, align 8
  %1664 = icmp eq i16 %1663, 0
  %1665 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1661, i64 0, i32 0
  %1666 = load i8*, i8** %1665, align 8
  %1667 = getelementptr inbounds i8, i8* %1666, i64 1
  %1668 = load i8, i8* %1667, align 1
  %1669 = zext i8 %1668 to i32
  %1670 = add i32 %1659, -1
  %1671 = mul i32 %1670, %1669
  %1672 = lshr i32 %1671, 8
  %1673 = add nuw nsw i32 %1672, 1
  br i1 %1664, label %1674, label %1742

1674:                                             ; preds = %1657
  %1675 = zext i32 %1673 to i64
  %1676 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1675
  %1677 = load i8, i8* %1676, align 1
  %1678 = zext i8 %1677 to i32
  %1679 = shl i32 %1673, %1678
  %1680 = add nsw i32 %1660, %1678
  %1681 = icmp sgt i32 %1680, -1
  br i1 %1681, label %1682, label %1725

1682:                                             ; preds = %1674
  %1683 = sub i32 0, %1660
  %1684 = xor i32 %1660, -1
  %1685 = shl i32 %1658, %1684
  %1686 = icmp slt i32 %1685, 0
  br i1 %1686, label %1687, label %1713

1687:                                             ; preds = %1682
  %1688 = load i32, i32* %1524, align 4
  %1689 = add i32 %1688, -1
  %1690 = icmp sgt i32 %1689, -1
  %1691 = load i8*, i8** %1525, align 8
  %1692 = sext i32 %1689 to i64
  %1693 = getelementptr inbounds i8, i8* %1691, i64 %1692
  br i1 %1690, label %1694, label %1709

1694:                                             ; preds = %1687, %1701
  %1695 = phi i8* [ %1705, %1701 ], [ %1691, %1687 ]
  %1696 = phi i64 [ %1708, %1701 ], [ %1692, %1687 ]
  %1697 = phi i8* [ %1707, %1701 ], [ %1693, %1687 ]
  %1698 = load i8, i8* %1697, align 1
  %1699 = icmp eq i8 %1698, -1
  %1700 = getelementptr inbounds i8, i8* %1695, i64 %1696
  br i1 %1699, label %1701, label %1709

1701:                                             ; preds = %1694
  store i8 0, i8* %1700, align 1
  %1702 = trunc i64 %1696 to i32
  %1703 = add i32 %1702, -1
  %1704 = icmp sgt i32 %1703, -1
  %1705 = load i8*, i8** %1525, align 8
  %1706 = sext i32 %1703 to i64
  %1707 = getelementptr inbounds i8, i8* %1705, i64 %1706
  %1708 = add nsw i64 %1696, -1
  br i1 %1704, label %1694, label %1709

1709:                                             ; preds = %1701, %1694, %1687
  %1710 = phi i8* [ %1693, %1687 ], [ %1707, %1701 ], [ %1700, %1694 ]
  %1711 = load i8, i8* %1710, align 1
  %1712 = add i8 %1711, 1
  store i8 %1712, i8* %1710, align 1
  br label %1713

1713:                                             ; preds = %1709, %1682
  %1714 = add i32 %1660, 24
  %1715 = lshr i32 %1658, %1714
  %1716 = trunc i32 %1715 to i8
  %1717 = load i8*, i8** %1525, align 8
  %1718 = load i32, i32* %1524, align 4
  %1719 = add i32 %1718, 1
  store i32 %1719, i32* %1524, align 4
  %1720 = zext i32 %1718 to i64
  %1721 = getelementptr inbounds i8, i8* %1717, i64 %1720
  store i8 %1716, i8* %1721, align 1
  %1722 = shl i32 %1658, %1683
  %1723 = and i32 %1722, 16777215
  %1724 = add nsw i32 %1680, -8
  br label %1725

1725:                                             ; preds = %1713, %1674
  %1726 = phi i32 [ %1724, %1713 ], [ %1680, %1674 ]
  %1727 = phi i32 [ %1723, %1713 ], [ %1658, %1674 ]
  %1728 = phi i32 [ %1680, %1713 ], [ %1678, %1674 ]
  %1729 = shl i32 %1727, %1728
  store i32 %1726, i32* %1521, align 8
  store i32 %1729, i32* %1523, align 8
  store i32 %1679, i32* %1522, align 4
  %1730 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1661, i64 1
  %1731 = icmp eq %struct.TOKENEXTRA* %1730, %5
  %1732 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1661, i64 1, i32 1
  %1733 = load i16, i16* %1732, align 8
  %1734 = icmp eq i16 %1733, 127
  br i1 %1731, label %1735, label %1737

1735:                                             ; preds = %1725
  %1736 = zext i1 %1734 to i64
  br label %1738

1737:                                             ; preds = %1725
  br i1 %1734, label %1738, label %1657

1738:                                             ; preds = %1737, %1735
  %1739 = phi i64 [ %1736, %1735 ], [ 1, %1737 ]
  %1740 = phi %struct.TOKENEXTRA* [ %5, %1735 ], [ %1730, %1737 ]
  %1741 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1740, i64 %1739
  br label %2260

1742:                                             ; preds = %1657
  %1743 = sub i32 %1659, %1673
  %1744 = add i32 %1673, %1658
  %1745 = zext i32 %1743 to i64
  %1746 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1745
  %1747 = load i8, i8* %1746, align 1
  %1748 = zext i8 %1747 to i32
  %1749 = shl i32 %1743, %1748
  %1750 = add nsw i32 %1660, %1748
  %1751 = icmp sgt i32 %1750, -1
  br i1 %1751, label %1752, label %1795

1752:                                             ; preds = %1742
  %1753 = sub i32 0, %1660
  %1754 = xor i32 %1660, -1
  %1755 = shl i32 %1744, %1754
  %1756 = icmp slt i32 %1755, 0
  br i1 %1756, label %1757, label %1783

1757:                                             ; preds = %1752
  %1758 = load i32, i32* %1524, align 4
  %1759 = add i32 %1758, -1
  %1760 = icmp sgt i32 %1759, -1
  %1761 = load i8*, i8** %1525, align 8
  %1762 = sext i32 %1759 to i64
  %1763 = getelementptr inbounds i8, i8* %1761, i64 %1762
  br i1 %1760, label %1764, label %1779

1764:                                             ; preds = %1757, %1771
  %1765 = phi i8* [ %1775, %1771 ], [ %1761, %1757 ]
  %1766 = phi i64 [ %1778, %1771 ], [ %1762, %1757 ]
  %1767 = phi i8* [ %1777, %1771 ], [ %1763, %1757 ]
  %1768 = load i8, i8* %1767, align 1
  %1769 = icmp eq i8 %1768, -1
  %1770 = getelementptr inbounds i8, i8* %1765, i64 %1766
  br i1 %1769, label %1771, label %1779

1771:                                             ; preds = %1764
  store i8 0, i8* %1770, align 1
  %1772 = trunc i64 %1766 to i32
  %1773 = add i32 %1772, -1
  %1774 = icmp sgt i32 %1773, -1
  %1775 = load i8*, i8** %1525, align 8
  %1776 = sext i32 %1773 to i64
  %1777 = getelementptr inbounds i8, i8* %1775, i64 %1776
  %1778 = add nsw i64 %1766, -1
  br i1 %1774, label %1764, label %1779

1779:                                             ; preds = %1771, %1764, %1757
  %1780 = phi i8* [ %1763, %1757 ], [ %1777, %1771 ], [ %1770, %1764 ]
  %1781 = load i8, i8* %1780, align 1
  %1782 = add i8 %1781, 1
  store i8 %1782, i8* %1780, align 1
  br label %1783

1783:                                             ; preds = %1779, %1752
  %1784 = add i32 %1660, 24
  %1785 = lshr i32 %1744, %1784
  %1786 = trunc i32 %1785 to i8
  %1787 = load i8*, i8** %1525, align 8
  %1788 = load i32, i32* %1524, align 4
  %1789 = add i32 %1788, 1
  store i32 %1789, i32* %1524, align 4
  %1790 = zext i32 %1788 to i64
  %1791 = getelementptr inbounds i8, i8* %1787, i64 %1790
  store i8 %1786, i8* %1791, align 1
  %1792 = shl i32 %1744, %1753
  %1793 = and i32 %1792, 16777215
  %1794 = add nsw i32 %1750, -8
  br label %1795

1795:                                             ; preds = %1783, %1742
  %1796 = phi i32 [ %1794, %1783 ], [ %1750, %1742 ]
  %1797 = phi i32 [ %1793, %1783 ], [ %1744, %1742 ]
  %1798 = phi i32 [ %1750, %1783 ], [ %1748, %1742 ]
  %1799 = shl i32 %1797, %1798
  store i32 %1796, i32* %1521, align 8
  store i32 %1799, i32* %1523, align 8
  store i32 %1749, i32* %1522, align 4
  %1800 = icmp eq i16 %1663, 1
  br i1 %1800, label %1801, label %1931

1801:                                             ; preds = %1795
  %1802 = getelementptr inbounds i8, i8* %1666, i64 2
  %1803 = load i8, i8* %1802, align 1
  %1804 = zext i8 %1803 to i32
  %1805 = add i32 %1749, -1
  %1806 = mul i32 %1805, %1804
  %1807 = lshr i32 %1806, 8
  %1808 = add nuw nsw i32 %1807, 1
  %1809 = zext i32 %1808 to i64
  %1810 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1809
  %1811 = load i8, i8* %1810, align 1
  %1812 = zext i8 %1811 to i32
  %1813 = shl i32 %1808, %1812
  %1814 = add nsw i32 %1796, %1812
  %1815 = icmp sgt i32 %1814, -1
  br i1 %1815, label %1816, label %1859

1816:                                             ; preds = %1801
  %1817 = sub i32 0, %1796
  %1818 = xor i32 %1796, -1
  %1819 = shl i32 %1799, %1818
  %1820 = icmp slt i32 %1819, 0
  br i1 %1820, label %1821, label %1847

1821:                                             ; preds = %1816
  %1822 = load i32, i32* %1524, align 4
  %1823 = add i32 %1822, -1
  %1824 = icmp sgt i32 %1823, -1
  %1825 = load i8*, i8** %1525, align 8
  %1826 = sext i32 %1823 to i64
  %1827 = getelementptr inbounds i8, i8* %1825, i64 %1826
  br i1 %1824, label %1828, label %1843

1828:                                             ; preds = %1821, %1835
  %1829 = phi i8* [ %1839, %1835 ], [ %1825, %1821 ]
  %1830 = phi i64 [ %1842, %1835 ], [ %1826, %1821 ]
  %1831 = phi i8* [ %1841, %1835 ], [ %1827, %1821 ]
  %1832 = load i8, i8* %1831, align 1
  %1833 = icmp eq i8 %1832, -1
  %1834 = getelementptr inbounds i8, i8* %1829, i64 %1830
  br i1 %1833, label %1835, label %1843

1835:                                             ; preds = %1828
  store i8 0, i8* %1834, align 1
  %1836 = trunc i64 %1830 to i32
  %1837 = add i32 %1836, -1
  %1838 = icmp sgt i32 %1837, -1
  %1839 = load i8*, i8** %1525, align 8
  %1840 = sext i32 %1837 to i64
  %1841 = getelementptr inbounds i8, i8* %1839, i64 %1840
  %1842 = add nsw i64 %1830, -1
  br i1 %1838, label %1828, label %1843

1843:                                             ; preds = %1835, %1828, %1821
  %1844 = phi i8* [ %1827, %1821 ], [ %1841, %1835 ], [ %1834, %1828 ]
  %1845 = load i8, i8* %1844, align 1
  %1846 = add i8 %1845, 1
  store i8 %1846, i8* %1844, align 1
  br label %1847

1847:                                             ; preds = %1843, %1816
  %1848 = add i32 %1796, 24
  %1849 = lshr i32 %1799, %1848
  %1850 = trunc i32 %1849 to i8
  %1851 = load i8*, i8** %1525, align 8
  %1852 = load i32, i32* %1524, align 4
  %1853 = add i32 %1852, 1
  store i32 %1853, i32* %1524, align 4
  %1854 = zext i32 %1852 to i64
  %1855 = getelementptr inbounds i8, i8* %1851, i64 %1854
  store i8 %1850, i8* %1855, align 1
  %1856 = shl i32 %1799, %1817
  %1857 = and i32 %1856, 16777215
  %1858 = add nsw i32 %1814, -8
  br label %1859

1859:                                             ; preds = %1847, %1801
  %1860 = phi i32 [ %1858, %1847 ], [ %1814, %1801 ]
  %1861 = phi i32 [ %1857, %1847 ], [ %1799, %1801 ]
  %1862 = phi i32 [ %1814, %1847 ], [ %1812, %1801 ]
  %1863 = shl i32 %1861, %1862
  store i32 %1860, i32* %1521, align 8
  store i32 %1863, i32* %1523, align 8
  store i32 %1813, i32* %1522, align 4
  %1864 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1661, i64 0, i32 2
  %1865 = load i32, i32* %1864, align 4
  %1866 = and i32 %1865, 1
  %1867 = shl i32 %1813, 7
  %1868 = add i32 %1867, -128
  %1869 = lshr i32 %1868, 8
  %1870 = add nuw nsw i32 %1869, 1
  %1871 = icmp eq i32 %1866, 0
  %1872 = sub i32 %1813, %1870
  %1873 = select i1 %1871, i32 %1870, i32 %1872
  %1874 = select i1 %1871, i32 0, i32 %1870
  %1875 = add i32 %1874, %1863
  %1876 = zext i32 %1873 to i64
  %1877 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1876
  %1878 = load i8, i8* %1877, align 1
  %1879 = zext i8 %1878 to i32
  %1880 = shl i32 %1873, %1879
  %1881 = add nsw i32 %1860, %1879
  %1882 = icmp sgt i32 %1881, -1
  br i1 %1882, label %1883, label %1926

1883:                                             ; preds = %1859
  %1884 = sub i32 0, %1860
  %1885 = xor i32 %1860, -1
  %1886 = shl i32 %1875, %1885
  %1887 = icmp slt i32 %1886, 0
  br i1 %1887, label %1888, label %1914

1888:                                             ; preds = %1883
  %1889 = load i32, i32* %1524, align 4
  %1890 = add i32 %1889, -1
  %1891 = icmp sgt i32 %1890, -1
  %1892 = load i8*, i8** %1525, align 8
  %1893 = sext i32 %1890 to i64
  %1894 = getelementptr inbounds i8, i8* %1892, i64 %1893
  br i1 %1891, label %1895, label %1910

1895:                                             ; preds = %1888, %1902
  %1896 = phi i8* [ %1906, %1902 ], [ %1892, %1888 ]
  %1897 = phi i64 [ %1909, %1902 ], [ %1893, %1888 ]
  %1898 = phi i8* [ %1908, %1902 ], [ %1894, %1888 ]
  %1899 = load i8, i8* %1898, align 1
  %1900 = icmp eq i8 %1899, -1
  %1901 = getelementptr inbounds i8, i8* %1896, i64 %1897
  br i1 %1900, label %1902, label %1910

1902:                                             ; preds = %1895
  store i8 0, i8* %1901, align 1
  %1903 = trunc i64 %1897 to i32
  %1904 = add i32 %1903, -1
  %1905 = icmp sgt i32 %1904, -1
  %1906 = load i8*, i8** %1525, align 8
  %1907 = sext i32 %1904 to i64
  %1908 = getelementptr inbounds i8, i8* %1906, i64 %1907
  %1909 = add nsw i64 %1897, -1
  br i1 %1905, label %1895, label %1910

1910:                                             ; preds = %1902, %1895, %1888
  %1911 = phi i8* [ %1894, %1888 ], [ %1901, %1895 ], [ %1908, %1902 ]
  %1912 = load i8, i8* %1911, align 1
  %1913 = add i8 %1912, 1
  store i8 %1913, i8* %1911, align 1
  br label %1914

1914:                                             ; preds = %1910, %1883
  %1915 = add i32 %1860, 24
  %1916 = lshr i32 %1875, %1915
  %1917 = trunc i32 %1916 to i8
  %1918 = load i8*, i8** %1525, align 8
  %1919 = load i32, i32* %1524, align 4
  %1920 = add i32 %1919, 1
  store i32 %1920, i32* %1524, align 4
  %1921 = zext i32 %1919 to i64
  %1922 = getelementptr inbounds i8, i8* %1918, i64 %1921
  store i8 %1917, i8* %1922, align 1
  %1923 = shl i32 %1875, %1884
  %1924 = and i32 %1923, 16777215
  %1925 = add nsw i32 %1881, -8
  br label %1926

1926:                                             ; preds = %1914, %1859
  %1927 = phi i32 [ %1925, %1914 ], [ %1881, %1859 ]
  %1928 = phi i32 [ %1924, %1914 ], [ %1875, %1859 ]
  %1929 = phi i32 [ %1881, %1914 ], [ %1879, %1859 ]
  %1930 = shl i32 %1928, %1929
  br label %2245

1931:                                             ; preds = %1795
  %1932 = sext i16 %1663 to i64
  %1933 = getelementptr inbounds [0 x %struct.vp9_token], [0 x %struct.vp9_token]* @vp9_coef_encodings, i64 0, i64 %1932, i32 0
  %1934 = load i32, i32* %1933, align 4
  %1935 = getelementptr inbounds [0 x %struct.vp9_token], [0 x %struct.vp9_token]* @vp9_coef_encodings, i64 0, i64 %1932, i32 1
  %1936 = load i32, i32* %1935, align 4
  %1937 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %1661, i64 0, i32 2
  %1938 = load i32, i32* %1937, align 4
  %1939 = getelementptr inbounds i8, i8* %1666, i64 2
  %1940 = load i8, i8* %1939, align 1
  %1941 = zext i8 %1940 to i32
  %1942 = add i32 %1749, -1
  %1943 = mul i32 %1942, %1941
  %1944 = lshr i32 %1943, 8
  %1945 = add nuw nsw i32 %1944, 1
  %1946 = sub i32 %1749, %1945
  %1947 = add i32 %1945, %1799
  %1948 = zext i32 %1946 to i64
  %1949 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1948
  %1950 = load i8, i8* %1949, align 1
  %1951 = zext i8 %1950 to i32
  %1952 = shl i32 %1946, %1951
  %1953 = add nsw i32 %1796, %1951
  %1954 = icmp sgt i32 %1953, -1
  br i1 %1954, label %1955, label %1998

1955:                                             ; preds = %1931
  %1956 = sub i32 0, %1796
  %1957 = xor i32 %1796, -1
  %1958 = shl i32 %1947, %1957
  %1959 = icmp slt i32 %1958, 0
  br i1 %1959, label %1960, label %1986

1960:                                             ; preds = %1955
  %1961 = load i32, i32* %1524, align 4
  %1962 = add i32 %1961, -1
  %1963 = icmp sgt i32 %1962, -1
  %1964 = load i8*, i8** %1525, align 8
  %1965 = sext i32 %1962 to i64
  %1966 = getelementptr inbounds i8, i8* %1964, i64 %1965
  br i1 %1963, label %1967, label %1982

1967:                                             ; preds = %1960, %1974
  %1968 = phi i8* [ %1978, %1974 ], [ %1964, %1960 ]
  %1969 = phi i64 [ %1981, %1974 ], [ %1965, %1960 ]
  %1970 = phi i8* [ %1980, %1974 ], [ %1966, %1960 ]
  %1971 = load i8, i8* %1970, align 1
  %1972 = icmp eq i8 %1971, -1
  %1973 = getelementptr inbounds i8, i8* %1968, i64 %1969
  br i1 %1972, label %1974, label %1982

1974:                                             ; preds = %1967
  store i8 0, i8* %1973, align 1
  %1975 = trunc i64 %1969 to i32
  %1976 = add i32 %1975, -1
  %1977 = icmp sgt i32 %1976, -1
  %1978 = load i8*, i8** %1525, align 8
  %1979 = sext i32 %1976 to i64
  %1980 = getelementptr inbounds i8, i8* %1978, i64 %1979
  %1981 = add nsw i64 %1969, -1
  br i1 %1977, label %1967, label %1982

1982:                                             ; preds = %1974, %1967, %1960
  %1983 = phi i8* [ %1966, %1960 ], [ %1980, %1974 ], [ %1973, %1967 ]
  %1984 = load i8, i8* %1983, align 1
  %1985 = add i8 %1984, 1
  store i8 %1985, i8* %1983, align 1
  br label %1986

1986:                                             ; preds = %1982, %1955
  %1987 = add i32 %1796, 24
  %1988 = lshr i32 %1947, %1987
  %1989 = trunc i32 %1988 to i8
  %1990 = load i8*, i8** %1525, align 8
  %1991 = load i32, i32* %1524, align 4
  %1992 = add i32 %1991, 1
  store i32 %1992, i32* %1524, align 4
  %1993 = zext i32 %1991 to i64
  %1994 = getelementptr inbounds i8, i8* %1990, i64 %1993
  store i8 %1989, i8* %1994, align 1
  %1995 = shl i32 %1947, %1956
  %1996 = and i32 %1995, 16777215
  %1997 = add nsw i32 %1953, -8
  br label %1998

1998:                                             ; preds = %1986, %1931
  %1999 = phi i32 [ %1997, %1986 ], [ %1953, %1931 ]
  %2000 = phi i32 [ %1996, %1986 ], [ %1947, %1931 ]
  %2001 = phi i32 [ %1953, %1986 ], [ %1951, %1931 ]
  %2002 = shl i32 %2000, %2001
  store i32 %1999, i32* %1521, align 8
  store i32 %2002, i32* %1523, align 8
  store i32 %1952, i32* %1522, align 4
  %2003 = load i8, i8* %1939, align 1
  %2004 = zext i8 %2003 to i64
  %2005 = add nsw i64 %2004, -1
  %2006 = add nsw i32 %1936, -3
  br label %2007

2007:                                             ; preds = %2081, %1998
  %2008 = phi i32 [ %2002, %1998 ], [ %2085, %2081 ]
  %2009 = phi i32 [ %1952, %1998 ], [ %2035, %2081 ]
  %2010 = phi i32 [ %1999, %1998 ], [ %2082, %2081 ]
  %2011 = phi i8 [ 0, %1998 ], [ %2089, %2081 ]
  %2012 = phi i32 [ %2006, %1998 ], [ %2013, %2081 ]
  %2013 = add nsw i32 %2012, -1
  %2014 = lshr i32 %1934, %2013
  %2015 = and i32 %2014, 1
  %2016 = sext i8 %2011 to i32
  %2017 = ashr i32 %2016, 1
  %2018 = sext i32 %2017 to i64
  %2019 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %2005, i64 %2018
  %2020 = load i8, i8* %2019, align 1
  %2021 = zext i8 %2020 to i32
  %2022 = add i32 %2009, -1
  %2023 = mul i32 %2022, %2021
  %2024 = lshr i32 %2023, 8
  %2025 = add nuw nsw i32 %2024, 1
  %2026 = icmp eq i32 %2015, 0
  %2027 = sub i32 %2009, %2025
  %2028 = select i1 %2026, i32 %2025, i32 %2027
  %2029 = select i1 %2026, i32 0, i32 %2025
  %2030 = add i32 %2029, %2008
  %2031 = zext i32 %2028 to i64
  %2032 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2031
  %2033 = load i8, i8* %2032, align 1
  %2034 = zext i8 %2033 to i32
  %2035 = shl i32 %2028, %2034
  %2036 = add nsw i32 %2010, %2034
  %2037 = icmp sgt i32 %2036, -1
  br i1 %2037, label %2038, label %2081

2038:                                             ; preds = %2007
  %2039 = sub i32 0, %2010
  %2040 = xor i32 %2010, -1
  %2041 = shl i32 %2030, %2040
  %2042 = icmp slt i32 %2041, 0
  br i1 %2042, label %2043, label %2069

2043:                                             ; preds = %2038
  %2044 = load i32, i32* %1524, align 4
  %2045 = add i32 %2044, -1
  %2046 = icmp sgt i32 %2045, -1
  %2047 = load i8*, i8** %1525, align 8
  %2048 = sext i32 %2045 to i64
  %2049 = getelementptr inbounds i8, i8* %2047, i64 %2048
  br i1 %2046, label %2050, label %2065

2050:                                             ; preds = %2043, %2057
  %2051 = phi i8* [ %2061, %2057 ], [ %2047, %2043 ]
  %2052 = phi i64 [ %2064, %2057 ], [ %2048, %2043 ]
  %2053 = phi i8* [ %2063, %2057 ], [ %2049, %2043 ]
  %2054 = load i8, i8* %2053, align 1
  %2055 = icmp eq i8 %2054, -1
  %2056 = getelementptr inbounds i8, i8* %2051, i64 %2052
  br i1 %2055, label %2057, label %2065

2057:                                             ; preds = %2050
  store i8 0, i8* %2056, align 1
  %2058 = trunc i64 %2052 to i32
  %2059 = add i32 %2058, -1
  %2060 = icmp sgt i32 %2059, -1
  %2061 = load i8*, i8** %1525, align 8
  %2062 = sext i32 %2059 to i64
  %2063 = getelementptr inbounds i8, i8* %2061, i64 %2062
  %2064 = add nsw i64 %2052, -1
  br i1 %2060, label %2050, label %2065

2065:                                             ; preds = %2057, %2050, %2043
  %2066 = phi i8* [ %2049, %2043 ], [ %2056, %2050 ], [ %2063, %2057 ]
  %2067 = load i8, i8* %2066, align 1
  %2068 = add i8 %2067, 1
  store i8 %2068, i8* %2066, align 1
  br label %2069

2069:                                             ; preds = %2065, %2038
  %2070 = add i32 %2010, 24
  %2071 = lshr i32 %2030, %2070
  %2072 = trunc i32 %2071 to i8
  %2073 = load i8*, i8** %1525, align 8
  %2074 = load i32, i32* %1524, align 4
  %2075 = add i32 %2074, 1
  store i32 %2075, i32* %1524, align 4
  %2076 = zext i32 %2074 to i64
  %2077 = getelementptr inbounds i8, i8* %2073, i64 %2076
  store i8 %2072, i8* %2077, align 1
  %2078 = shl i32 %2030, %2039
  %2079 = and i32 %2078, 16777215
  %2080 = add nsw i32 %2036, -8
  br label %2081

2081:                                             ; preds = %2069, %2007
  %2082 = phi i32 [ %2080, %2069 ], [ %2036, %2007 ]
  %2083 = phi i32 [ %2079, %2069 ], [ %2030, %2007 ]
  %2084 = phi i32 [ %2036, %2069 ], [ %2034, %2007 ]
  %2085 = shl i32 %2083, %2084
  store i32 %2082, i32* %1521, align 8
  store i32 %2085, i32* %1523, align 8
  store i32 %2035, i32* %1522, align 4
  %2086 = add nsw i32 %2015, %2016
  %2087 = sext i32 %2086 to i64
  %2088 = getelementptr inbounds [22 x i8], [22 x i8]* @vp9_coef_con_tree, i64 0, i64 %2087
  %2089 = load i8, i8* %2088, align 1
  %2090 = icmp eq i32 %2013, 0
  br i1 %2090, label %2091, label %2007

2091:                                             ; preds = %2081
  %2092 = icmp sgt i16 %1663, 4
  br i1 %2092, label %2093, label %2176

2093:                                             ; preds = %2091
  %2094 = getelementptr inbounds %struct.vp9_extra_bit, %struct.vp9_extra_bit* %1515, i64 %1932, i32 0
  %2095 = load i8*, i8** %2094, align 8
  %2096 = ashr i32 %1938, 1
  %2097 = getelementptr inbounds %struct.vp9_extra_bit, %struct.vp9_extra_bit* %1515, i64 %1932, i32 1
  %2098 = load i32, i32* %2097, align 8
  br label %2099

2099:                                             ; preds = %2170, %2093
  %2100 = phi i32 [ %2085, %2093 ], [ %2174, %2170 ]
  %2101 = phi i32 [ %2035, %2093 ], [ %2124, %2170 ]
  %2102 = phi i32 [ %2082, %2093 ], [ %2171, %2170 ]
  %2103 = phi i8* [ %2095, %2093 ], [ %2106, %2170 ]
  %2104 = phi i32 [ %2098, %2093 ], [ %2105, %2170 ]
  %2105 = add nsw i32 %2104, -1
  %2106 = getelementptr inbounds i8, i8* %2103, i64 1
  %2107 = load i8, i8* %2103, align 1
  %2108 = zext i8 %2107 to i32
  %2109 = add i32 %2101, -1
  %2110 = mul i32 %2109, %2108
  %2111 = lshr i32 %2110, 8
  %2112 = add nuw nsw i32 %2111, 1
  %2113 = shl i32 1, %2105
  %2114 = and i32 %2113, %2096
  %2115 = icmp eq i32 %2114, 0
  %2116 = sub i32 %2101, %2112
  %2117 = select i1 %2115, i32 %2112, i32 %2116
  %2118 = select i1 %2115, i32 0, i32 %2112
  %2119 = add i32 %2118, %2100
  %2120 = zext i32 %2117 to i64
  %2121 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2120
  %2122 = load i8, i8* %2121, align 1
  %2123 = zext i8 %2122 to i32
  %2124 = shl i32 %2117, %2123
  %2125 = add nsw i32 %2102, %2123
  %2126 = icmp sgt i32 %2125, -1
  br i1 %2126, label %2127, label %2170

2127:                                             ; preds = %2099
  %2128 = sub i32 0, %2102
  %2129 = xor i32 %2102, -1
  %2130 = shl i32 %2119, %2129
  %2131 = icmp slt i32 %2130, 0
  br i1 %2131, label %2132, label %2158

2132:                                             ; preds = %2127
  %2133 = load i32, i32* %1524, align 4
  %2134 = add i32 %2133, -1
  %2135 = icmp sgt i32 %2134, -1
  %2136 = load i8*, i8** %1525, align 8
  %2137 = sext i32 %2134 to i64
  %2138 = getelementptr inbounds i8, i8* %2136, i64 %2137
  br i1 %2135, label %2139, label %2154

2139:                                             ; preds = %2132, %2146
  %2140 = phi i8* [ %2150, %2146 ], [ %2136, %2132 ]
  %2141 = phi i64 [ %2153, %2146 ], [ %2137, %2132 ]
  %2142 = phi i8* [ %2152, %2146 ], [ %2138, %2132 ]
  %2143 = load i8, i8* %2142, align 1
  %2144 = icmp eq i8 %2143, -1
  %2145 = getelementptr inbounds i8, i8* %2140, i64 %2141
  br i1 %2144, label %2146, label %2154

2146:                                             ; preds = %2139
  store i8 0, i8* %2145, align 1
  %2147 = trunc i64 %2141 to i32
  %2148 = add i32 %2147, -1
  %2149 = icmp sgt i32 %2148, -1
  %2150 = load i8*, i8** %1525, align 8
  %2151 = sext i32 %2148 to i64
  %2152 = getelementptr inbounds i8, i8* %2150, i64 %2151
  %2153 = add nsw i64 %2141, -1
  br i1 %2149, label %2139, label %2154

2154:                                             ; preds = %2146, %2139, %2132
  %2155 = phi i8* [ %2138, %2132 ], [ %2152, %2146 ], [ %2145, %2139 ]
  %2156 = load i8, i8* %2155, align 1
  %2157 = add i8 %2156, 1
  store i8 %2157, i8* %2155, align 1
  br label %2158

2158:                                             ; preds = %2154, %2127
  %2159 = add i32 %2102, 24
  %2160 = lshr i32 %2119, %2159
  %2161 = trunc i32 %2160 to i8
  %2162 = load i8*, i8** %1525, align 8
  %2163 = load i32, i32* %1524, align 4
  %2164 = add i32 %2163, 1
  store i32 %2164, i32* %1524, align 4
  %2165 = zext i32 %2163 to i64
  %2166 = getelementptr inbounds i8, i8* %2162, i64 %2165
  store i8 %2161, i8* %2166, align 1
  %2167 = shl i32 %2119, %2128
  %2168 = and i32 %2167, 16777215
  %2169 = add nsw i32 %2125, -8
  br label %2170

2170:                                             ; preds = %2158, %2099
  %2171 = phi i32 [ %2169, %2158 ], [ %2125, %2099 ]
  %2172 = phi i32 [ %2168, %2158 ], [ %2119, %2099 ]
  %2173 = phi i32 [ %2125, %2158 ], [ %2123, %2099 ]
  %2174 = shl i32 %2172, %2173
  store i32 %2171, i32* %1521, align 8
  store i32 %2174, i32* %1523, align 8
  store i32 %2124, i32* %1522, align 4
  %2175 = icmp eq i32 %2105, 0
  br i1 %2175, label %2176, label %2099

2176:                                             ; preds = %2170, %2091
  %2177 = phi i32 [ %2085, %2091 ], [ %2174, %2170 ]
  %2178 = phi i32 [ %2035, %2091 ], [ %2124, %2170 ]
  %2179 = phi i32 [ %2082, %2091 ], [ %2171, %2170 ]
  %2180 = and i32 %1938, 1
  %2181 = shl i32 %2178, 7
  %2182 = add i32 %2181, -128
  %2183 = lshr i32 %2182, 8
  %2184 = add nuw nsw i32 %2183, 1
  %2185 = icmp eq i32 %2180, 0
  %2186 = sub i32 %2178, %2184
  %2187 = select i1 %2185, i32 %2184, i32 %2186
  %2188 = select i1 %2185, i32 0, i32 %2184
  %2189 = add i32 %2188, %2177
  %2190 = zext i32 %2187 to i64
  %2191 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2190
  %2192 = load i8, i8* %2191, align 1
  %2193 = zext i8 %2192 to i32
  %2194 = shl i32 %2187, %2193
  %2195 = add nsw i32 %2179, %2193
  %2196 = icmp sgt i32 %2195, -1
  br i1 %2196, label %2197, label %2240

2197:                                             ; preds = %2176
  %2198 = sub i32 0, %2179
  %2199 = xor i32 %2179, -1
  %2200 = shl i32 %2189, %2199
  %2201 = icmp slt i32 %2200, 0
  br i1 %2201, label %2202, label %2228

2202:                                             ; preds = %2197
  %2203 = load i32, i32* %1524, align 4
  %2204 = add i32 %2203, -1
  %2205 = icmp sgt i32 %2204, -1
  %2206 = load i8*, i8** %1525, align 8
  %2207 = sext i32 %2204 to i64
  %2208 = getelementptr inbounds i8, i8* %2206, i64 %2207
  br i1 %2205, label %2209, label %2224

2209:                                             ; preds = %2202, %2216
  %2210 = phi i8* [ %2220, %2216 ], [ %2206, %2202 ]
  %2211 = phi i64 [ %2223, %2216 ], [ %2207, %2202 ]
  %2212 = phi i8* [ %2222, %2216 ], [ %2208, %2202 ]
  %2213 = load i8, i8* %2212, align 1
  %2214 = icmp eq i8 %2213, -1
  %2215 = getelementptr inbounds i8, i8* %2210, i64 %2211
  br i1 %2214, label %2216, label %2224

2216:                                             ; preds = %2209
  store i8 0, i8* %2215, align 1
  %2217 = trunc i64 %2211 to i32
  %2218 = add i32 %2217, -1
  %2219 = icmp sgt i32 %2218, -1
  %2220 = load i8*, i8** %1525, align 8
  %2221 = sext i32 %2218 to i64
  %2222 = getelementptr inbounds i8, i8* %2220, i64 %2221
  %2223 = add nsw i64 %2211, -1
  br i1 %2219, label %2209, label %2224

2224:                                             ; preds = %2216, %2209, %2202
  %2225 = phi i8* [ %2208, %2202 ], [ %2215, %2209 ], [ %2222, %2216 ]
  %2226 = load i8, i8* %2225, align 1
  %2227 = add i8 %2226, 1
  store i8 %2227, i8* %2225, align 1
  br label %2228

2228:                                             ; preds = %2224, %2197
  %2229 = add i32 %2179, 24
  %2230 = lshr i32 %2189, %2229
  %2231 = trunc i32 %2230 to i8
  %2232 = load i8*, i8** %1525, align 8
  %2233 = load i32, i32* %1524, align 4
  %2234 = add i32 %2233, 1
  store i32 %2234, i32* %1524, align 4
  %2235 = zext i32 %2233 to i64
  %2236 = getelementptr inbounds i8, i8* %2232, i64 %2235
  store i8 %2231, i8* %2236, align 1
  %2237 = shl i32 %2189, %2198
  %2238 = and i32 %2237, 16777215
  %2239 = add nsw i32 %2195, -8
  br label %2240

2240:                                             ; preds = %2228, %2176
  %2241 = phi i32 [ %2239, %2228 ], [ %2195, %2176 ]
  %2242 = phi i32 [ %2238, %2228 ], [ %2189, %2176 ]
  %2243 = phi i32 [ %2195, %2228 ], [ %2193, %2176 ]
  %2244 = shl i32 %2242, %2243
  br label %2245

2245:                                             ; preds = %2240, %1926, %1594
  %2246 = phi i32 [ %2241, %2240 ], [ %1927, %1926 ], [ %1595, %1594 ]
  %2247 = phi i32 [ %2244, %2240 ], [ %1930, %1926 ], [ %1598, %1594 ]
  %2248 = phi i32 [ %2194, %2240 ], [ %1880, %1926 ], [ %1548, %1594 ]
  %2249 = phi %struct.TOKENEXTRA* [ %1661, %2240 ], [ %1661, %1926 ], [ %1528, %1594 ]
  store i32 %2246, i32* %1521, align 8
  store i32 %2247, i32* %1523, align 8
  store i32 %2248, i32* %1522, align 4
  %2250 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %2249, i64 1
  %2251 = icmp ult %struct.TOKENEXTRA* %2250, %5
  %2252 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %2249, i64 1, i32 1
  %2253 = load i16, i16* %2252, align 8
  br i1 %2251, label %1526, label %2254

2254:                                             ; preds = %2245, %1526, %1509
  %2255 = phi %struct.TOKENEXTRA* [ %1516, %1509 ], [ %2250, %2245 ], [ %1528, %1526 ]
  %2256 = phi i16 [ %1519, %1509 ], [ %2253, %2245 ], [ 127, %1526 ]
  %2257 = icmp eq i16 %2256, 127
  %2258 = zext i1 %2257 to i64
  %2259 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %2255, i64 %2258
  br label %2260

2260:                                             ; preds = %1738, %2254
  %2261 = phi %struct.TOKENEXTRA* [ %2259, %2254 ], [ %1741, %1738 ]
  store %struct.TOKENEXTRA* %2261, %struct.TOKENEXTRA** %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @write_selected_tx_size(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.vpx_writer*) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %5 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %4, align 8
  %6 = load %struct.MODE_INFO*, %struct.MODE_INFO** %5, align 8
  %7 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 2
  %8 = load i8, i8* %7, align 2
  %9 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %6, i64 0, i32 0
  %10 = load i8, i8* %9, align 4
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  %16 = load %struct.MODE_INFO*, %struct.MODE_INFO** %15, align 8
  %17 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  %18 = load %struct.MODE_INFO*, %struct.MODE_INFO** %17, align 8
  %19 = icmp ne %struct.MODE_INFO* %16, null
  %20 = icmp ne %struct.MODE_INFO* %18, null
  br i1 %19, label %21, label %29

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %16, i64 0, i32 3
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %16, i64 0, i32 2
  %27 = load i8, i8* %26, align 2
  %28 = zext i8 %27 to i32
  br label %29

29:                                               ; preds = %25, %21, %3
  %30 = phi i32 [ %28, %25 ], [ %14, %21 ], [ %14, %3 ]
  br i1 %20, label %31, label %39

31:                                               ; preds = %29
  %32 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %18, i64 0, i32 3
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %18, i64 0, i32 2
  %37 = load i8, i8* %36, align 2
  %38 = zext i8 %37 to i32
  br label %39

39:                                               ; preds = %29, %31, %35
  %40 = phi i32 [ %38, %35 ], [ %14, %31 ], [ %14, %29 ]
  %41 = select i1 %20, i32 %40, i32 %30
  %42 = select i1 %19, i32 %30, i32 %41
  %43 = add nuw nsw i32 %42, %41
  %44 = icmp ugt i32 %43, %14
  %45 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %46 = load %struct.frame_contexts*, %struct.frame_contexts** %45, align 8
  switch i8 %13, label %56 [
    i8 1, label %47
    i8 2, label %50
    i8 3, label %53
  ]

47:                                               ; preds = %39
  %48 = zext i1 %44 to i64
  %49 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 10, i32 2, i64 %48, i64 0
  br label %56

50:                                               ; preds = %39
  %51 = zext i1 %44 to i64
  %52 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 10, i32 1, i64 %51, i64 0
  br label %56

53:                                               ; preds = %39
  %54 = zext i1 %44 to i64
  %55 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %46, i64 0, i32 10, i32 0, i64 %54, i64 0
  br label %56

56:                                               ; preds = %39, %47, %50, %53
  %57 = phi i8* [ %55, %53 ], [ %52, %50 ], [ %49, %47 ], [ null, %39 ]
  %58 = icmp ne i8 %8, 0
  %59 = load i8, i8* %57, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = add i32 %64, -1
  %68 = mul i32 %67, %60
  %69 = lshr i32 %68, 8
  %70 = add nuw nsw i32 %69, 1
  %71 = sub i32 %64, %70
  %72 = select i1 %58, i32 %71, i32 %70
  %73 = select i1 %58, i32 %70, i32 0
  %74 = add i32 %73, %66
  %75 = zext i32 %72 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 %72, %78
  %80 = add nsw i32 %62, %78
  %81 = icmp sgt i32 %80, -1
  br i1 %81, label %82, label %129

82:                                               ; preds = %56
  %83 = sub i32 0, %62
  %84 = xor i32 %62, -1
  %85 = shl i32 %74, %84
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %87, label %115

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = add i32 %89, -1
  %91 = icmp sgt i32 %90, -1
  %92 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 4
  %93 = load i8*, i8** %92, align 8
  %94 = sext i32 %90 to i64
  %95 = getelementptr inbounds i8, i8* %93, i64 %94
  br i1 %91, label %96, label %111

96:                                               ; preds = %87, %103
  %97 = phi i8* [ %107, %103 ], [ %93, %87 ]
  %98 = phi i64 [ %110, %103 ], [ %94, %87 ]
  %99 = phi i8* [ %109, %103 ], [ %95, %87 ]
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, -1
  %102 = getelementptr inbounds i8, i8* %97, i64 %98
  br i1 %101, label %103, label %111

103:                                              ; preds = %96
  store i8 0, i8* %102, align 1
  %104 = trunc i64 %98 to i32
  %105 = add i32 %104, -1
  %106 = icmp sgt i32 %105, -1
  %107 = load i8*, i8** %92, align 8
  %108 = sext i32 %105 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = add nsw i64 %98, -1
  br i1 %106, label %96, label %111

111:                                              ; preds = %103, %96, %87
  %112 = phi i8* [ %95, %87 ], [ %102, %96 ], [ %109, %103 ]
  %113 = load i8, i8* %112, align 1
  %114 = add i8 %113, 1
  store i8 %114, i8* %112, align 1
  br label %115

115:                                              ; preds = %111, %82
  %116 = add i32 %62, 24
  %117 = lshr i32 %74, %116
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 4
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 3
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %122, 1
  store i32 %123, i32* %121, align 4
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds i8, i8* %120, i64 %124
  store i8 %118, i8* %125, align 1
  %126 = shl i32 %74, %83
  %127 = and i32 %126, 16777215
  %128 = add nsw i32 %80, -8
  br label %129

129:                                              ; preds = %56, %115
  %130 = phi i32 [ %128, %115 ], [ %80, %56 ]
  %131 = phi i32 [ %127, %115 ], [ %74, %56 ]
  %132 = phi i32 [ %80, %115 ], [ %78, %56 ]
  %133 = shl i32 %131, %132
  store i32 %130, i32* %61, align 8
  store i32 %133, i32* %65, align 8
  store i32 %79, i32* %63, align 4
  %134 = icmp ugt i8 %13, 1
  %135 = and i1 %58, %134
  br i1 %135, label %136, label %282

136:                                              ; preds = %129
  %137 = icmp ne i8 %8, 1
  %138 = getelementptr inbounds i8, i8* %57, i64 1
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = add i32 %79, -1
  %142 = mul i32 %141, %140
  %143 = lshr i32 %142, 8
  %144 = add nuw nsw i32 %143, 1
  %145 = sub i32 %79, %144
  %146 = select i1 %137, i32 %145, i32 %144
  %147 = select i1 %137, i32 %144, i32 0
  %148 = add i32 %147, %133
  %149 = zext i32 %146 to i64
  %150 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = shl i32 %146, %152
  %154 = add nsw i32 %130, %152
  %155 = icmp sgt i32 %154, -1
  br i1 %155, label %156, label %203

156:                                              ; preds = %136
  %157 = sub i32 0, %130
  %158 = xor i32 %130, -1
  %159 = shl i32 %148, %158
  %160 = icmp slt i32 %159, 0
  br i1 %160, label %161, label %189

161:                                              ; preds = %156
  %162 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 3
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, -1
  %165 = icmp sgt i32 %164, -1
  %166 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 4
  %167 = load i8*, i8** %166, align 8
  %168 = sext i32 %164 to i64
  %169 = getelementptr inbounds i8, i8* %167, i64 %168
  br i1 %165, label %170, label %185

170:                                              ; preds = %161, %177
  %171 = phi i8* [ %181, %177 ], [ %167, %161 ]
  %172 = phi i64 [ %184, %177 ], [ %168, %161 ]
  %173 = phi i8* [ %183, %177 ], [ %169, %161 ]
  %174 = load i8, i8* %173, align 1
  %175 = icmp eq i8 %174, -1
  %176 = getelementptr inbounds i8, i8* %171, i64 %172
  br i1 %175, label %177, label %185

177:                                              ; preds = %170
  store i8 0, i8* %176, align 1
  %178 = trunc i64 %172 to i32
  %179 = add i32 %178, -1
  %180 = icmp sgt i32 %179, -1
  %181 = load i8*, i8** %166, align 8
  %182 = sext i32 %179 to i64
  %183 = getelementptr inbounds i8, i8* %181, i64 %182
  %184 = add nsw i64 %172, -1
  br i1 %180, label %170, label %185

185:                                              ; preds = %177, %170, %161
  %186 = phi i8* [ %169, %161 ], [ %176, %170 ], [ %183, %177 ]
  %187 = load i8, i8* %186, align 1
  %188 = add i8 %187, 1
  store i8 %188, i8* %186, align 1
  br label %189

189:                                              ; preds = %185, %156
  %190 = add i32 %130, 24
  %191 = lshr i32 %148, %190
  %192 = trunc i32 %191 to i8
  %193 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 4
  %194 = load i8*, i8** %193, align 8
  %195 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 3
  %196 = load i32, i32* %195, align 4
  %197 = add i32 %196, 1
  store i32 %197, i32* %195, align 4
  %198 = zext i32 %196 to i64
  %199 = getelementptr inbounds i8, i8* %194, i64 %198
  store i8 %192, i8* %199, align 1
  %200 = shl i32 %148, %157
  %201 = and i32 %200, 16777215
  %202 = add nsw i32 %154, -8
  br label %203

203:                                              ; preds = %136, %189
  %204 = phi i32 [ %202, %189 ], [ %154, %136 ]
  %205 = phi i32 [ %201, %189 ], [ %148, %136 ]
  %206 = phi i32 [ %154, %189 ], [ %152, %136 ]
  %207 = shl i32 %205, %206
  store i32 %204, i32* %61, align 8
  store i32 %207, i32* %65, align 8
  store i32 %153, i32* %63, align 4
  %208 = icmp ugt i8 %13, 2
  %209 = and i1 %137, %208
  br i1 %209, label %210, label %282

210:                                              ; preds = %203
  %211 = icmp eq i8 %8, 2
  %212 = getelementptr inbounds i8, i8* %57, i64 2
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = add i32 %153, -1
  %216 = mul i32 %215, %214
  %217 = lshr i32 %216, 8
  %218 = add nuw nsw i32 %217, 1
  %219 = sub i32 %153, %218
  %220 = select i1 %211, i32 %218, i32 %219
  %221 = select i1 %211, i32 0, i32 %218
  %222 = add i32 %221, %207
  %223 = zext i32 %220 to i64
  %224 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = shl i32 %220, %226
  %228 = add nsw i32 %204, %226
  %229 = icmp sgt i32 %228, -1
  br i1 %229, label %230, label %277

230:                                              ; preds = %210
  %231 = sub i32 0, %204
  %232 = xor i32 %204, -1
  %233 = shl i32 %222, %232
  %234 = icmp slt i32 %233, 0
  br i1 %234, label %235, label %263

235:                                              ; preds = %230
  %236 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 3
  %237 = load i32, i32* %236, align 4
  %238 = add i32 %237, -1
  %239 = icmp sgt i32 %238, -1
  %240 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 4
  %241 = load i8*, i8** %240, align 8
  %242 = sext i32 %238 to i64
  %243 = getelementptr inbounds i8, i8* %241, i64 %242
  br i1 %239, label %244, label %259

244:                                              ; preds = %235, %251
  %245 = phi i8* [ %255, %251 ], [ %241, %235 ]
  %246 = phi i64 [ %258, %251 ], [ %242, %235 ]
  %247 = phi i8* [ %257, %251 ], [ %243, %235 ]
  %248 = load i8, i8* %247, align 1
  %249 = icmp eq i8 %248, -1
  %250 = getelementptr inbounds i8, i8* %245, i64 %246
  br i1 %249, label %251, label %259

251:                                              ; preds = %244
  store i8 0, i8* %250, align 1
  %252 = trunc i64 %246 to i32
  %253 = add i32 %252, -1
  %254 = icmp sgt i32 %253, -1
  %255 = load i8*, i8** %240, align 8
  %256 = sext i32 %253 to i64
  %257 = getelementptr inbounds i8, i8* %255, i64 %256
  %258 = add nsw i64 %246, -1
  br i1 %254, label %244, label %259

259:                                              ; preds = %251, %244, %235
  %260 = phi i8* [ %243, %235 ], [ %250, %244 ], [ %257, %251 ]
  %261 = load i8, i8* %260, align 1
  %262 = add i8 %261, 1
  store i8 %262, i8* %260, align 1
  br label %263

263:                                              ; preds = %259, %230
  %264 = add i32 %204, 24
  %265 = lshr i32 %222, %264
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 4
  %268 = load i8*, i8** %267, align 8
  %269 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %2, i64 0, i32 3
  %270 = load i32, i32* %269, align 4
  %271 = add i32 %270, 1
  store i32 %271, i32* %269, align 4
  %272 = zext i32 %270 to i64
  %273 = getelementptr inbounds i8, i8* %268, i64 %272
  store i8 %266, i8* %273, align 1
  %274 = shl i32 %222, %231
  %275 = and i32 %274, 16777215
  %276 = add nsw i32 %228, -8
  br label %277

277:                                              ; preds = %210, %263
  %278 = phi i32 [ %276, %263 ], [ %228, %210 ]
  %279 = phi i32 [ %275, %263 ], [ %222, %210 ]
  %280 = phi i32 [ %228, %263 ], [ %226, %210 ]
  %281 = shl i32 %279, %280
  store i32 %278, i32* %61, align 8
  store i32 %281, i32* %65, align 8
  store i32 %227, i32* %63, align 4
  br label %282

282:                                              ; preds = %203, %277, %129
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @write_intra_mode(%struct.vpx_writer* nocapture, i8 zeroext, i8* nocapture readonly) unnamed_addr #0 {
  %4 = zext i8 %1 to i64
  %5 = getelementptr inbounds [10 x %struct.vp9_token], [10 x %struct.vp9_token]* @intra_mode_encodings, i64 0, i64 %4, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds [10 x %struct.vp9_token], [10 x %struct.vp9_token]* @intra_mode_encodings, i64 0, i64 %4, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %12 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %14 = load i32, i32* %9, align 8
  %15 = load i32, i32* %10, align 4
  %16 = load i32, i32* %11, align 8
  br label %17

17:                                               ; preds = %91, %3
  %18 = phi i32 [ %16, %3 ], [ %95, %91 ]
  %19 = phi i32 [ %15, %3 ], [ %45, %91 ]
  %20 = phi i32 [ %14, %3 ], [ %92, %91 ]
  %21 = phi i8 [ 0, %3 ], [ %99, %91 ]
  %22 = phi i32 [ %8, %3 ], [ %23, %91 ]
  %23 = add nsw i32 %22, -1
  %24 = lshr i32 %6, %23
  %25 = and i32 %24, 1
  %26 = sext i8 %21 to i32
  %27 = ashr i32 %26, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %2, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add i32 %19, -1
  %33 = mul i32 %32, %31
  %34 = lshr i32 %33, 8
  %35 = add nuw nsw i32 %34, 1
  %36 = icmp eq i32 %25, 0
  %37 = sub i32 %19, %35
  %38 = select i1 %36, i32 %35, i32 %37
  %39 = select i1 %36, i32 0, i32 %35
  %40 = add i32 %39, %18
  %41 = zext i32 %38 to i64
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl i32 %38, %44
  %46 = add nsw i32 %20, %44
  %47 = icmp sgt i32 %46, -1
  br i1 %47, label %48, label %91

48:                                               ; preds = %17
  %49 = sub i32 0, %20
  %50 = xor i32 %20, -1
  %51 = shl i32 %40, %50
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %79

53:                                               ; preds = %48
  %54 = load i32, i32* %12, align 4
  %55 = add i32 %54, -1
  %56 = icmp sgt i32 %55, -1
  %57 = load i8*, i8** %13, align 8
  %58 = sext i32 %55 to i64
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  br i1 %56, label %60, label %75

60:                                               ; preds = %53, %67
  %61 = phi i8* [ %71, %67 ], [ %57, %53 ]
  %62 = phi i64 [ %74, %67 ], [ %58, %53 ]
  %63 = phi i8* [ %73, %67 ], [ %59, %53 ]
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, -1
  %66 = getelementptr inbounds i8, i8* %61, i64 %62
  br i1 %65, label %67, label %75

67:                                               ; preds = %60
  store i8 0, i8* %66, align 1
  %68 = trunc i64 %62 to i32
  %69 = add i32 %68, -1
  %70 = icmp sgt i32 %69, -1
  %71 = load i8*, i8** %13, align 8
  %72 = sext i32 %69 to i64
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  %74 = add nsw i64 %62, -1
  br i1 %70, label %60, label %75

75:                                               ; preds = %67, %60, %53
  %76 = phi i8* [ %59, %53 ], [ %66, %60 ], [ %73, %67 ]
  %77 = load i8, i8* %76, align 1
  %78 = add i8 %77, 1
  store i8 %78, i8* %76, align 1
  br label %79

79:                                               ; preds = %75, %48
  %80 = add i32 %20, 24
  %81 = lshr i32 %40, %80
  %82 = trunc i32 %81 to i8
  %83 = load i8*, i8** %13, align 8
  %84 = load i32, i32* %12, align 4
  %85 = add i32 %84, 1
  store i32 %85, i32* %12, align 4
  %86 = zext i32 %84 to i64
  %87 = getelementptr inbounds i8, i8* %83, i64 %86
  store i8 %82, i8* %87, align 1
  %88 = shl i32 %40, %49
  %89 = and i32 %88, 16777215
  %90 = add nsw i32 %46, -8
  br label %91

91:                                               ; preds = %79, %17
  %92 = phi i32 [ %90, %79 ], [ %46, %17 ]
  %93 = phi i32 [ %89, %79 ], [ %40, %17 ]
  %94 = phi i32 [ %46, %79 ], [ %44, %17 ]
  %95 = shl i32 %93, %94
  store i32 %92, i32* %9, align 8
  store i32 %95, i32* %11, align 8
  store i32 %45, i32* %10, align 4
  %96 = add nsw i32 %25, %26
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i32 %23, 0
  br i1 %100, label %101, label %17

101:                                              ; preds = %91
  ret void
}

declare zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #3

declare zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @write_inter_mode(%struct.vpx_writer* nocapture, i8 zeroext, i8* nocapture readonly) unnamed_addr #0 {
  %4 = zext i8 %1 to i64
  %5 = add nsw i64 %4, -10
  %6 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @inter_mode_encodings, i64 0, i64 %5, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds [4 x %struct.vp9_token], [4 x %struct.vp9_token]* @inter_mode_encodings, i64 0, i64 %5, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %13 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %14 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %15 = load i32, i32* %10, align 8
  %16 = load i32, i32* %11, align 4
  %17 = load i32, i32* %12, align 8
  br label %18

18:                                               ; preds = %92, %3
  %19 = phi i32 [ %17, %3 ], [ %96, %92 ]
  %20 = phi i32 [ %16, %3 ], [ %46, %92 ]
  %21 = phi i32 [ %15, %3 ], [ %93, %92 ]
  %22 = phi i8 [ 0, %3 ], [ %100, %92 ]
  %23 = phi i32 [ %9, %3 ], [ %24, %92 ]
  %24 = add nsw i32 %23, -1
  %25 = lshr i32 %7, %24
  %26 = and i32 %25, 1
  %27 = sext i8 %22 to i32
  %28 = ashr i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %2, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add i32 %20, -1
  %34 = mul i32 %33, %32
  %35 = lshr i32 %34, 8
  %36 = add nuw nsw i32 %35, 1
  %37 = icmp eq i32 %26, 0
  %38 = sub i32 %20, %36
  %39 = select i1 %37, i32 %36, i32 %38
  %40 = select i1 %37, i32 0, i32 %36
  %41 = add i32 %40, %19
  %42 = zext i32 %39 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %39, %45
  %47 = add nsw i32 %21, %45
  %48 = icmp sgt i32 %47, -1
  br i1 %48, label %49, label %92

49:                                               ; preds = %18
  %50 = sub i32 0, %21
  %51 = xor i32 %21, -1
  %52 = shl i32 %41, %51
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %80

54:                                               ; preds = %49
  %55 = load i32, i32* %13, align 4
  %56 = add i32 %55, -1
  %57 = icmp sgt i32 %56, -1
  %58 = load i8*, i8** %14, align 8
  %59 = sext i32 %56 to i64
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  br i1 %57, label %61, label %76

61:                                               ; preds = %54, %68
  %62 = phi i8* [ %72, %68 ], [ %58, %54 ]
  %63 = phi i64 [ %75, %68 ], [ %59, %54 ]
  %64 = phi i8* [ %74, %68 ], [ %60, %54 ]
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, -1
  %67 = getelementptr inbounds i8, i8* %62, i64 %63
  br i1 %66, label %68, label %76

68:                                               ; preds = %61
  store i8 0, i8* %67, align 1
  %69 = trunc i64 %63 to i32
  %70 = add i32 %69, -1
  %71 = icmp sgt i32 %70, -1
  %72 = load i8*, i8** %14, align 8
  %73 = sext i32 %70 to i64
  %74 = getelementptr inbounds i8, i8* %72, i64 %73
  %75 = add nsw i64 %63, -1
  br i1 %71, label %61, label %76

76:                                               ; preds = %68, %61, %54
  %77 = phi i8* [ %60, %54 ], [ %67, %61 ], [ %74, %68 ]
  %78 = load i8, i8* %77, align 1
  %79 = add i8 %78, 1
  store i8 %79, i8* %77, align 1
  br label %80

80:                                               ; preds = %76, %49
  %81 = add i32 %21, 24
  %82 = lshr i32 %41, %81
  %83 = trunc i32 %82 to i8
  %84 = load i8*, i8** %14, align 8
  %85 = load i32, i32* %13, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %13, align 4
  %87 = zext i32 %85 to i64
  %88 = getelementptr inbounds i8, i8* %84, i64 %87
  store i8 %83, i8* %88, align 1
  %89 = shl i32 %41, %50
  %90 = and i32 %89, 16777215
  %91 = add nsw i32 %47, -8
  br label %92

92:                                               ; preds = %80, %18
  %93 = phi i32 [ %91, %80 ], [ %47, %18 ]
  %94 = phi i32 [ %90, %80 ], [ %41, %18 ]
  %95 = phi i32 [ %47, %80 ], [ %45, %18 ]
  %96 = shl i32 %94, %95
  store i32 %93, i32* %10, align 8
  store i32 %96, i32* %12, align 8
  store i32 %46, i32* %11, align 4
  %97 = add nsw i32 %26, %27
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [6 x i8], [6 x i8]* @vp9_inter_mode_tree, i64 0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i32 %24, 0
  br i1 %101, label %102, label %18

102:                                              ; preds = %92
  ret void
}

declare void @vp9_encode_mv(%struct.VP9_COMP*, %struct.vpx_writer*, %struct.mv*, %struct.mv*, %struct.nmv_context*, i32, i32*) local_unnamed_addr #3

declare i32 @vp9_get_reference_mode_context(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_get_pred_context_comp_ref_p(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
