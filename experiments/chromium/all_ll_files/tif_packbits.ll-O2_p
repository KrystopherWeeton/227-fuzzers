; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_packbits.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_packbits.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, i32 (%struct.tiff*)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }

@PackBitsDecode.module = internal constant [15 x i8] c"PackBitsDecode\00", align 1
@.str = private unnamed_addr constant [45 x i8] c"Discarding %lu bytes to avoid buffer overrun\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"Terminating PackBitsDecode due to lack of data.\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"Not enough data for scanline %lu\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @TIFFInitPackBits(%struct.tiff* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 29
  store i32 (%struct.tiff*, i16)* @PackBitsPreEncode, i32 (%struct.tiff*, i16)** %6, align 8
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 30
  store i32 (%struct.tiff*)* @PackBitsPostEncode, i32 (%struct.tiff*)** %7, align 8
  %8 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %3 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @PackBitsDecode, i32 (%struct.tiff*, i8*, i64, i16)* @PackBitsEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %8, align 8
  %9 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %4 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @PackBitsDecode, i32 (%struct.tiff*, i8*, i64, i16)* @PackBitsEncodeChunk>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %9, align 8
  %10 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %5 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @PackBitsDecode, i32 (%struct.tiff*, i8*, i64, i16)* @PackBitsEncodeChunk>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %10, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PackBitsDecode(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #1 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  br label %10

10:                                               ; preds = %64, %4
  %11 = phi i8* [ %65, %64 ], [ %1, %4 ]
  %12 = phi i64 [ %69, %64 ], [ %2, %4 ]
  %13 = phi i8* [ %67, %64 ], [ %6, %4 ]
  %14 = phi i64 [ %68, %64 ], [ %8, %4 ]
  %15 = icmp sgt i64 %12, 0
  br label %16

16:                                               ; preds = %10, %26
  %17 = phi i8* [ %22, %26 ], [ %13, %10 ]
  %18 = phi i64 [ %24, %26 ], [ %14, %10 ]
  %19 = icmp sgt i64 %18, 0
  %20 = and i1 %15, %19
  br i1 %20, label %21, label %72

21:                                               ; preds = %16
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  %23 = load i8, i8* %17, align 1
  %24 = add nsw i64 %18, -1
  %25 = icmp slt i8 %23, 0
  br i1 %25, label %26, label %48

26:                                               ; preds = %21
  %27 = icmp eq i8 %23, -128
  br i1 %27, label %16, label %28

28:                                               ; preds = %26
  %29 = sext i8 %23 to i64
  %30 = sub nsw i64 1, %29
  %31 = icmp sgt i64 %30, %12
  br i1 %31, label %32, label %35

32:                                               ; preds = %28
  %33 = load i8*, i8** %9, align 8
  %34 = sub nsw i64 %30, %12
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %33, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PackBitsDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %34) #4
  br label %35

35:                                               ; preds = %32, %28
  %36 = phi i64 [ %12, %32 ], [ %30, %28 ]
  %37 = icmp eq i64 %24, 0
  br i1 %37, label %70, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds i8, i8* %17, i64 2
  %40 = add nsw i64 %18, -2
  %41 = load i8, i8* %22, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 %41, i64 %36, i1 false)
  br label %42

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %45, %42 ], [ %36, %38 ]
  %44 = phi i8* [ %46, %42 ], [ %11, %38 ]
  %45 = add nsw i64 %43, -1
  %46 = getelementptr inbounds i8, i8* %44, i64 1
  %47 = icmp sgt i64 %45, 0
  br i1 %47, label %42, label %64

48:                                               ; preds = %21
  %49 = sext i8 %23 to i64
  %50 = icmp sgt i64 %12, %49
  br i1 %50, label %56, label %51

51:                                               ; preds = %48
  %52 = load i8*, i8** %9, align 8
  %53 = sub i64 1, %12
  %54 = add i64 %53, %49
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %52, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PackBitsDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %54) #4
  %55 = add nsw i64 %12, -1
  br label %56

56:                                               ; preds = %48, %51
  %57 = phi i64 [ %55, %51 ], [ %49, %48 ]
  %58 = add nsw i64 %57, 1
  %59 = icmp sgt i64 %18, %58
  br i1 %59, label %60, label %70

60:                                               ; preds = %56
  tail call void @_TIFFmemcpy(i8* %11, i8* %22, i64 %58) #4
  %61 = getelementptr inbounds i8, i8* %11, i64 %58
  %62 = getelementptr inbounds i8, i8* %22, i64 %58
  %63 = sub nsw i64 %24, %58
  br label %64

64:                                               ; preds = %42, %60
  %65 = phi i8* [ %61, %60 ], [ %46, %42 ]
  %66 = phi i64 [ %58, %60 ], [ %36, %42 ]
  %67 = phi i8* [ %62, %60 ], [ %39, %42 ]
  %68 = phi i64 [ %63, %60 ], [ %40, %42 ]
  %69 = sub nsw i64 %12, %66
  br label %10

70:                                               ; preds = %56, %35
  %71 = load i8*, i8** %9, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %71, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PackBitsDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0)) #4
  store i8* %22, i8** %5, align 8
  store i64 %24, i64* %7, align 8
  br label %73

72:                                               ; preds = %16
  store i8* %17, i8** %5, align 8
  store i64 %18, i64* %7, align 8
  br i1 %15, label %73, label %78

73:                                               ; preds = %70, %72
  %74 = load i8*, i8** %9, align 8
  %75 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %76 = load i32, i32* %75, align 4
  %77 = zext i32 %76 to i64
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %74, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PackBitsDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i64 %77) #4
  br label %78

78:                                               ; preds = %72, %73
  %79 = phi i32 [ 0, %73 ], [ 1, %72 ]
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PackBitsPreEncode(%struct.tiff*, i16 zeroext) #1 {
  %3 = tail call i8* @_TIFFmalloc(i64 8) #4
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  store i8* %3, i8** %4, align 8
  %5 = icmp eq i8* %3, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 1024
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = tail call i64 @TIFFTileRowSize(%struct.tiff* %0) #4
  br label %15

13:                                               ; preds = %6
  %14 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #4
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi i64 [ %12, %11 ], [ %14, %13 ]
  %17 = bitcast i8** %4 to i64**
  %18 = load i64*, i64** %17, align 8
  store i64 %16, i64* %18, align 8
  br label %19

19:                                               ; preds = %15, %2
  %20 = phi i32 [ 0, %2 ], [ 1, %15 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PackBitsPostEncode(%struct.tiff* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_TIFFfree(i8* nonnull %3) #4
  br label %6

6:                                                ; preds = %1, %5
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PackBitsEncode(%struct.tiff*, i8* nocapture readonly, i64, i16 zeroext) #1 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 45
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = icmp sgt i64 %2, 0
  %13 = ptrtoint i8* %6 to i64
  br i1 %12, label %14, label %256

14:                                               ; preds = %4
  %15 = bitcast i8** %5 to i64*
  %16 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  br label %17

17:                                               ; preds = %14, %248
  %18 = phi i32 [ 0, %14 ], [ %251, %248 ]
  %19 = phi i8* [ null, %14 ], [ %250, %248 ]
  %20 = phi i8* [ %6, %14 ], [ %249, %248 ]
  %21 = phi i8* [ %1, %14 ], [ %40, %248 ]
  %22 = phi i64 [ %2, %14 ], [ %41, %248 ]
  %23 = load i8, i8* %21, align 1
  %24 = getelementptr inbounds i8, i8* %21, i64 1
  %25 = add nsw i64 %22, -1
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %27, label %38

27:                                               ; preds = %17, %33
  %28 = phi i64 [ %36, %33 ], [ %25, %17 ]
  %29 = phi i8* [ %35, %33 ], [ %24, %17 ]
  %30 = phi i64 [ %34, %33 ], [ 1, %17 ]
  %31 = load i8, i8* %29, align 1
  %32 = icmp eq i8 %23, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %27
  %34 = add nuw i64 %30, 1
  %35 = getelementptr inbounds i8, i8* %29, i64 1
  %36 = add nsw i64 %28, -1
  %37 = icmp eq i64 %34, %22
  br i1 %37, label %38, label %27

38:                                               ; preds = %27, %33, %17
  %39 = phi i64 [ 1, %17 ], [ %22, %33 ], [ %30, %27 ]
  %40 = phi i8* [ %24, %17 ], [ %35, %33 ], [ %29, %27 ]
  %41 = phi i64 [ 0, %17 ], [ %36, %33 ], [ %28, %27 ]
  br label %42

42:                                               ; preds = %215, %38
  %43 = phi i8* [ %20, %38 ], [ %218, %215 ]
  %44 = phi i8* [ %19, %38 ], [ %187, %215 ]
  %45 = phi i64 [ %39, %38 ], [ %219, %215 ]
  %46 = phi i32 [ %18, %38 ], [ %216, %215 ]
  %47 = icmp eq i64 %45, 1
  br label %48

48:                                               ; preds = %227, %42
  %49 = phi i8* [ %43, %42 ], [ %186, %227 ]
  %50 = phi i8* [ %44, %42 ], [ %187, %227 ]
  %51 = phi i32 [ %46, %42 ], [ %228, %227 ]
  %52 = getelementptr inbounds i8, i8* %49, i64 2
  %53 = icmp ult i8* %52, %11
  br i1 %53, label %185, label %54

54:                                               ; preds = %48
  %55 = or i32 %51, 2
  %56 = icmp eq i32 %55, 3
  br i1 %56, label %57, label %175

57:                                               ; preds = %54
  %58 = ptrtoint i8* %50 to i64
  %59 = load i64, i64* %15, align 8
  %60 = sub i64 %58, %59
  %61 = load i64, i64* %16, align 8
  %62 = add nsw i64 %60, %61
  store i64 %62, i64* %16, align 8
  %63 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %264, label %65

65:                                               ; preds = %57
  %66 = ptrtoint i8* %49 to i64
  %67 = sub i64 %66, %58
  %68 = load i8*, i8** %5, align 8
  %69 = icmp sgt i64 %67, 0
  br i1 %69, label %70, label %185

70:                                               ; preds = %65
  %71 = icmp ult i64 %67, 32
  br i1 %71, label %159, label %72

72:                                               ; preds = %70
  %73 = getelementptr i8, i8* %68, i64 %67
  %74 = icmp ult i8* %68, %49
  %75 = icmp ult i8* %50, %73
  %76 = and i1 %74, %75
  br i1 %76, label %159, label %77

77:                                               ; preds = %72
  %78 = and i64 %67, -32
  %79 = sub i64 %67, %78
  %80 = getelementptr i8, i8* %50, i64 %78
  %81 = getelementptr i8, i8* %68, i64 %78
  %82 = add i64 %78, -32
  %83 = lshr exact i64 %82, 5
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 3
  %86 = icmp ult i64 %82, 96
  br i1 %86, label %138, label %87

87:                                               ; preds = %77
  %88 = sub nsw i64 %84, %85
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i64 [ 0, %87 ], [ %135, %89 ]
  %91 = phi i64 [ %88, %87 ], [ %136, %89 ]
  %92 = getelementptr i8, i8* %50, i64 %90
  %93 = getelementptr i8, i8* %68, i64 %90
  %94 = bitcast i8* %92 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !2
  %96 = getelementptr i8, i8* %92, i64 16
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1, !alias.scope !2
  %99 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %99, align 1, !alias.scope !5, !noalias !2
  %100 = getelementptr i8, i8* %93, i64 16
  %101 = bitcast i8* %100 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %101, align 1, !alias.scope !5, !noalias !2
  %102 = or i64 %90, 32
  %103 = getelementptr i8, i8* %50, i64 %102
  %104 = getelementptr i8, i8* %68, i64 %102
  %105 = bitcast i8* %103 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !2
  %107 = getelementptr i8, i8* %103, i64 16
  %108 = bitcast i8* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1, !alias.scope !2
  %110 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %110, align 1, !alias.scope !5, !noalias !2
  %111 = getelementptr i8, i8* %104, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %112, align 1, !alias.scope !5, !noalias !2
  %113 = or i64 %90, 64
  %114 = getelementptr i8, i8* %50, i64 %113
  %115 = getelementptr i8, i8* %68, i64 %113
  %116 = bitcast i8* %114 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1, !alias.scope !2
  %118 = getelementptr i8, i8* %114, i64 16
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1, !alias.scope !2
  %121 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %121, align 1, !alias.scope !5, !noalias !2
  %122 = getelementptr i8, i8* %115, i64 16
  %123 = bitcast i8* %122 to <16 x i8>*
  store <16 x i8> %120, <16 x i8>* %123, align 1, !alias.scope !5, !noalias !2
  %124 = or i64 %90, 96
  %125 = getelementptr i8, i8* %50, i64 %124
  %126 = getelementptr i8, i8* %68, i64 %124
  %127 = bitcast i8* %125 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1, !alias.scope !2
  %129 = getelementptr i8, i8* %125, i64 16
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1, !alias.scope !2
  %132 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %132, align 1, !alias.scope !5, !noalias !2
  %133 = getelementptr i8, i8* %126, i64 16
  %134 = bitcast i8* %133 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %134, align 1, !alias.scope !5, !noalias !2
  %135 = add i64 %90, 128
  %136 = add i64 %91, -4
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %89, !llvm.loop !7

138:                                              ; preds = %89, %77
  %139 = phi i64 [ 0, %77 ], [ %135, %89 ]
  %140 = icmp eq i64 %85, 0
  br i1 %140, label %157, label %141

141:                                              ; preds = %138, %141
  %142 = phi i64 [ %154, %141 ], [ %139, %138 ]
  %143 = phi i64 [ %155, %141 ], [ %85, %138 ]
  %144 = getelementptr i8, i8* %50, i64 %142
  %145 = getelementptr i8, i8* %68, i64 %142
  %146 = bitcast i8* %144 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1, !alias.scope !2
  %148 = getelementptr i8, i8* %144, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1, !alias.scope !2
  %151 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %147, <16 x i8>* %151, align 1, !alias.scope !5, !noalias !2
  %152 = getelementptr i8, i8* %145, i64 16
  %153 = bitcast i8* %152 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %153, align 1, !alias.scope !5, !noalias !2
  %154 = add i64 %142, 32
  %155 = add i64 %143, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %141, !llvm.loop !9

157:                                              ; preds = %141, %138
  %158 = icmp eq i64 %67, %78
  br i1 %158, label %172, label %159

159:                                              ; preds = %157, %72, %70
  %160 = phi i64 [ %67, %72 ], [ %67, %70 ], [ %79, %157 ]
  %161 = phi i8* [ %50, %72 ], [ %50, %70 ], [ %80, %157 ]
  %162 = phi i8* [ %68, %72 ], [ %68, %70 ], [ %81, %157 ]
  br label %163

163:                                              ; preds = %159, %163
  %164 = phi i64 [ %167, %163 ], [ %160, %159 ]
  %165 = phi i8* [ %168, %163 ], [ %161, %159 ]
  %166 = phi i8* [ %170, %163 ], [ %162, %159 ]
  %167 = add nsw i64 %164, -1
  %168 = getelementptr inbounds i8, i8* %165, i64 1
  %169 = load i8, i8* %165, align 1
  %170 = getelementptr inbounds i8, i8* %166, i64 1
  store i8 %169, i8* %166, align 1
  %171 = icmp sgt i64 %167, 0
  br i1 %171, label %163, label %172, !llvm.loop !11

172:                                              ; preds = %163, %157
  %173 = phi i8* [ %81, %157 ], [ %170, %163 ]
  %174 = load i8*, i8** %5, align 8
  br label %185

175:                                              ; preds = %54
  %176 = load i64, i64* %15, align 8
  %177 = ptrtoint i8* %49 to i64
  %178 = sub i64 %177, %176
  %179 = load i64, i64* %16, align 8
  %180 = add nsw i64 %178, %179
  store i64 %180, i64* %16, align 8
  %181 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #4
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %264, label %183

183:                                              ; preds = %175
  %184 = load i8*, i8** %5, align 8
  br label %185

185:                                              ; preds = %65, %172, %48, %183
  %186 = phi i8* [ %184, %183 ], [ %49, %48 ], [ %68, %65 ], [ %173, %172 ]
  %187 = phi i8* [ %50, %183 ], [ %50, %48 ], [ %68, %65 ], [ %174, %172 ]
  switch i32 %51, label %248 [
    i32 0, label %188
    i32 1, label %198
    i32 2, label %211
    i32 3, label %226
  ]

188:                                              ; preds = %185
  %189 = icmp sgt i64 %45, 1
  br i1 %189, label %190, label %196

190:                                              ; preds = %188
  %191 = icmp sgt i64 %45, 128
  br i1 %191, label %215, label %192

192:                                              ; preds = %190
  %193 = trunc i64 %45 to i8
  %194 = sub i8 1, %193
  %195 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 %194, i8* %186, align 1
  br label %242

196:                                              ; preds = %188
  %197 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 0, i8* %186, align 1
  br label %242

198:                                              ; preds = %185
  %199 = icmp sgt i64 %45, 1
  br i1 %199, label %200, label %206

200:                                              ; preds = %198
  %201 = icmp sgt i64 %45, 128
  br i1 %201, label %215, label %202

202:                                              ; preds = %200
  %203 = trunc i64 %45 to i8
  %204 = sub i8 1, %203
  %205 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 %204, i8* %186, align 1
  br label %242

206:                                              ; preds = %198
  %207 = load i8, i8* %187, align 1
  %208 = add i8 %207, 1
  store i8 %208, i8* %187, align 1
  %209 = icmp ne i8 %208, 127
  %210 = zext i1 %209 to i32
  br label %242

211:                                              ; preds = %185
  %212 = icmp sgt i64 %45, 1
  br i1 %212, label %213, label %224

213:                                              ; preds = %211
  %214 = icmp sgt i64 %45, 128
  br i1 %214, label %215, label %220

215:                                              ; preds = %213, %200, %190
  %216 = phi i32 [ 2, %190 ], [ 3, %200 ], [ 2, %213 ]
  %217 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 -127, i8* %186, align 1
  store i8 %23, i8* %217, align 1
  %218 = getelementptr inbounds i8, i8* %186, i64 2
  %219 = add nsw i64 %45, -128
  br label %42

220:                                              ; preds = %213
  %221 = trunc i64 %45 to i8
  %222 = sub i8 1, %221
  %223 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 %222, i8* %186, align 1
  br label %242

224:                                              ; preds = %211
  %225 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 0, i8* %186, align 1
  br label %242

226:                                              ; preds = %185
  br i1 %47, label %229, label %227

227:                                              ; preds = %226, %229, %233, %236
  %228 = phi i32 [ 2, %226 ], [ 2, %229 ], [ 2, %233 ], [ %239, %236 ]
  br label %48

229:                                              ; preds = %226
  %230 = getelementptr inbounds i8, i8* %186, i64 -2
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %231, -1
  br i1 %232, label %233, label %227

233:                                              ; preds = %229
  %234 = load i8, i8* %187, align 1
  %235 = icmp ult i8 %234, 126
  br i1 %235, label %236, label %227

236:                                              ; preds = %233
  %237 = add nuw nsw i8 %234, 2
  store i8 %237, i8* %187, align 1
  %238 = icmp ne i8 %237, 127
  %239 = zext i1 %238 to i32
  %240 = getelementptr inbounds i8, i8* %186, i64 -1
  %241 = load i8, i8* %240, align 1
  store i8 %241, i8* %230, align 1
  br label %227

242:                                              ; preds = %196, %192, %206, %202, %224, %220
  %243 = phi i64 [ 2, %220 ], [ 2, %224 ], [ 2, %202 ], [ 1, %206 ], [ 2, %192 ], [ 2, %196 ]
  %244 = phi i8* [ %223, %220 ], [ %225, %224 ], [ %205, %202 ], [ %186, %206 ], [ %195, %192 ], [ %197, %196 ]
  %245 = phi i8* [ %187, %220 ], [ %186, %224 ], [ %187, %202 ], [ %187, %206 ], [ %187, %192 ], [ %186, %196 ]
  %246 = phi i32 [ 2, %220 ], [ 1, %224 ], [ 3, %202 ], [ %210, %206 ], [ 2, %192 ], [ 1, %196 ]
  %247 = getelementptr inbounds i8, i8* %186, i64 %243
  store i8 %23, i8* %244, align 1
  br label %248

248:                                              ; preds = %185, %242
  %249 = phi i8* [ %247, %242 ], [ %186, %185 ]
  %250 = phi i8* [ %245, %242 ], [ %187, %185 ]
  %251 = phi i32 [ %246, %242 ], [ %51, %185 ]
  %252 = icmp sgt i64 %41, 0
  br i1 %252, label %17, label %253

253:                                              ; preds = %248
  %254 = load i64, i64* %15, align 8
  %255 = ptrtoint i8* %249 to i64
  br label %256

256:                                              ; preds = %4, %253
  %257 = phi i64 [ %255, %253 ], [ %13, %4 ]
  %258 = phi i64 [ %254, %253 ], [ %13, %4 ]
  %259 = phi i8* [ %249, %253 ], [ %6, %4 ]
  %260 = sub i64 %257, %258
  %261 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %262 = load i64, i64* %261, align 8
  %263 = add nsw i64 %260, %262
  store i64 %263, i64* %261, align 8
  store i8* %259, i8** %5, align 8
  br label %264

264:                                              ; preds = %175, %57, %256
  %265 = phi i32 [ 1, %256 ], [ 0, %57 ], [ 0, %175 ]
  ret i32 %265
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PackBitsEncodeChunk(%struct.tiff*, i8* nocapture readonly, i64, i16 zeroext) #1 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to i64**
  %7 = load i64*, i64** %6, align 8
  %8 = load i64, i64* %7, align 8
  br label %9

9:                                                ; preds = %13, %4
  %10 = phi i8* [ %1, %4 ], [ %18, %13 ]
  %11 = phi i64 [ %2, %4 ], [ %20, %13 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %9
  %14 = icmp slt i64 %11, %8
  %15 = select i1 %14, i64 %11, i64 %8
  %16 = tail call i32 @PackBitsEncode(%struct.tiff* %0, i8* %10, i64 %15, i16 zeroext %3)
  %17 = icmp slt i32 %16, 0
  %18 = getelementptr inbounds i8, i8* %10, i64 %15
  %19 = select i1 %17, i64 0, i64 %15
  %20 = sub nsw i64 %11, %19
  br i1 %17, label %21, label %9

21:                                               ; preds = %13, %9
  %22 = phi i32 [ -1, %13 ], [ 1, %9 ]
  ret i32 %22
}

declare void @TIFFWarningExt(i8*, i8*, i8*, ...) local_unnamed_addr #2

declare void @_TIFFmemcpy(i8*, i8*, i64) local_unnamed_addr #2

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #2

declare i8* @_TIFFmalloc(i64) local_unnamed_addr #2

declare i64 @TIFFTileRowSize(%struct.tiff*) local_unnamed_addr #2

declare i64 @TIFFScanlineSize(%struct.tiff*) local_unnamed_addr #2

declare void @_TIFFfree(i8*) local_unnamed_addr #2

declare i32 @TIFFFlushData1(%struct.tiff*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
