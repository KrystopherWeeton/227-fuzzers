; ModuleID = '../../third_party/blink/renderer/platform/fonts/symbols_iterator.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/symbols_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::SymbolsIterator" = type <{ %"class.blink::UTF16RagelIterator", i32, i32, i8, [7 x i8] }>
%"class.blink::UTF16RagelIterator" = type <{ i16*, i32, i32, i8, [7 x i8] }>
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZN5blink12_GLOBAL__N_127_emoji_presentation_actionsE = internal unnamed_addr constant [25 x i8] c"\00\01\00\01\01\01\05\01\06\01\07\01\08\01\09\01\0A\01\0B\02\02\03\02\02\04", align 16
@_ZN5blink12_GLOBAL__N_130_emoji_presentation_trans_keysE = internal constant [42 x i8] c"\03\07\0D\00\02\0E\0F\02\03\06\07\0D\00\01\09\0A\0B\0C\0A\0C\0A\04\0A\0C\04\09\0A\0B\0C\06\09\0A\0B\0C\08\0A\09\0A\0B\0C\0E\00", align 16
@_ZN5blink12_GLOBAL__N_131_emoji_presentation_key_offsetsE = internal unnamed_addr constant [12 x i8] c"\00\05\07\0E\12\14\15\18\1D\1E\22$", align 1
@_ZN5blink12_GLOBAL__N_133_emoji_presentation_index_offsetsE = internal unnamed_addr constant [12 x i8] c"\00\05\08\0F\14\17\19\1D#%*-", align 1
@_ZN5blink12_GLOBAL__N_134_emoji_presentation_single_lengthsE = internal unnamed_addr constant [12 x i8] c"\03\02\05\04\02\01\03\05\01\04\02\05", align 1
@_ZN5blink12_GLOBAL__N_128_emoji_presentation_indiciesE = internal unnamed_addr constant [52 x i8] c"\02\01\01\01\00\04\05\03\07\08\0A\0B\0C\06\09\05\0D\0E\0F\00\0D\0F\10\0D\10\0F\0D\0F\10\0F\05\0D\0E\0F\10\05\11\05\0D\0E\12\11\05\0D\10\05\0D\0E\0F\04\10\00", align 16
@_ZN5blink12_GLOBAL__N_131_emoji_presentation_trans_targsE = internal unnamed_addr constant [19 x i8] c"\02\04\06\02\01\02\03\03\07\02\08\09\0B\00\02\05\02\02\0A", align 16
@_ZN5blink12_GLOBAL__N_133_emoji_presentation_trans_actionsE = internal unnamed_addr constant [19 x i8] c"\11\13\13\0F\00\07\16\13\13\09\00\16\13\00\05\13\0B\0D\13", align 16
@_ZN5blink12_GLOBAL__N_129_emoji_presentation_eof_transE = internal unnamed_addr constant [12 x i8] c"\01\04\00\01\11\11\11\11\12\12\11\11", align 1
@_ZN5blink12_GLOBAL__N_138_emoji_presentation_from_state_actionsE = internal unnamed_addr constant <{ i8, i8, i8, [9 x i8] }> <{ i8 0, i8 0, i8 3, [9 x i8] zeroinitializer }>, align 1
@.str = private unnamed_addr constant [71 x i8] c"../../third_party/blink/renderer/platform/fonts/utf16_ragel_iterator.h\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"buffer_size_\00", align 1
@_ZN5blink12_GLOBAL__N_133_emoji_presentation_range_lengthsE = internal unnamed_addr constant <{ i8, i8, i8, [9 x i8] }> <{ i8 1, i8 0, i8 1, [9 x i8] zeroinitializer }>, align 1

@_ZN5blink15SymbolsIteratorC1EPKDsj = hidden unnamed_addr alias void (%"class.blink::SymbolsIterator"*, i16*, i32), void (%"class.blink::SymbolsIterator"*, i16*, i32)* @_ZN5blink15SymbolsIteratorC2EPKDsj

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SymbolsIteratorC2EPKDsj(%"class.blink::SymbolsIterator"* nocapture, i16*, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::UTF16RagelIterator", align 8
  %5 = alloca %"class.blink::UTF16RagelIterator", align 8
  %6 = alloca %"class.blink::UTF16RagelIterator", align 8
  %7 = alloca %"class.blink::UTF16RagelIterator", align 8
  %8 = bitcast %"class.blink::SymbolsIterator"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #4
  %9 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 1
  %10 = icmp eq i32 %2, 0
  %11 = bitcast i32* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 9, i1 false)
  br i1 %10, label %33, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 2
  %15 = bitcast %"class.blink::UTF16RagelIterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #4
  %16 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %4, i64 0, i32 0
  store i16* %1, i16** %16, align 8
  %17 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %4, i64 0, i32 1
  store i32 %2, i32* %17, align 8
  %18 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %4, i64 0, i32 2
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %4, i64 0, i32 3
  store i8 16, i8* %19, align 8
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %4) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* nonnull align 8 %15, i64 17, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #4
  %20 = load i32, i32* %9, align 8
  %21 = bitcast %"class.blink::UTF16RagelIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #4
  %22 = bitcast %"class.blink::UTF16RagelIterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %8, i64 24, i1 false)
  %23 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %7, i64 0, i32 2
  %24 = bitcast %"class.blink::UTF16RagelIterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %8, i64 24, i1 false) #4
  %25 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 8, !noalias !2
  store i32 %26, i32* %23, align 4, !alias.scope !2
  call fastcc void @_ZN5blink12_GLOBAL__N_123scan_emoji_presentationENS_18UTF16RagelIteratorES1_Pb(%"class.blink::UTF16RagelIterator"* nonnull sret %5, %"class.blink::UTF16RagelIterator"* nonnull byval(%"class.blink::UTF16RagelIterator") align 8 %6, %"class.blink::UTF16RagelIterator"* nonnull byval(%"class.blink::UTF16RagelIterator") align 8 %7, i8* %13)
  %27 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %5, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %28, %20
  %32 = sub i32 %31, %30
  store i32 %32, i32* %14, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #4
  br label %33

33:                                               ; preds = %3, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_123scan_emoji_presentationENS_18UTF16RagelIteratorES1_Pb(%"class.blink::UTF16RagelIterator"* noalias nocapture sret, %"class.blink::UTF16RagelIterator"* byval(%"class.blink::UTF16RagelIterator") align 8, %"class.blink::UTF16RagelIterator"* nocapture readonly byval(%"class.blink::UTF16RagelIterator") align 8, i8* nocapture) unnamed_addr #0 {
  %5 = alloca %"class.blink::UTF16RagelIterator", align 8
  %6 = alloca %"class.blink::UTF16RagelIterator", align 8
  %7 = alloca %"class.blink::UTF16RagelIterator", align 8
  %8 = alloca %"class.blink::UTF16RagelIterator", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = alloca %"class.blink::UTF16RagelIterator", align 8
  %14 = alloca %"class.blink::UTF16RagelIterator", align 8
  %15 = alloca %"class.blink::UTF16RagelIterator", align 8
  %16 = alloca [24 x i8], align 8
  %17 = alloca [24 x i8], align 8
  %18 = alloca [24 x i8], align 8
  %19 = getelementptr inbounds [24 x i8], [24 x i8]* %16, i64 0, i64 0
  %20 = getelementptr inbounds [24 x i8], [24 x i8]* %17, i64 0, i64 0
  %21 = getelementptr inbounds [24 x i8], [24 x i8]* %18, i64 0, i64 0
  %22 = bitcast %"class.blink::UTF16RagelIterator"* %2 to i8*
  %23 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %2, i64 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %2, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %2, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 0
  %30 = load i16*, i16** %29, align 8
  %31 = icmp eq i16* %30, %24
  br i1 %31, label %32, label %40

32:                                               ; preds = %4
  %33 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, %26
  br i1 %35, label %36, label %40

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %28
  br i1 %39, label %585, label %40

40:                                               ; preds = %578, %575, %4, %32, %36
  %41 = phi i8 [ -86, %36 ], [ -86, %32 ], [ -86, %4 ], [ %549, %578 ], [ %549, %575 ]
  %42 = phi i32 [ 0, %36 ], [ 0, %32 ], [ 0, %4 ], [ %550, %578 ], [ %550, %575 ]
  %43 = phi i32 [ 0, %36 ], [ 0, %32 ], [ 0, %4 ], [ %551, %578 ], [ %551, %575 ]
  %44 = phi i16* [ null, %36 ], [ null, %32 ], [ null, %4 ], [ %552, %578 ], [ %552, %575 ]
  %45 = phi i32 [ 0, %36 ], [ 0, %32 ], [ 0, %4 ], [ %553, %578 ], [ %553, %575 ]
  %46 = phi i32 [ 2, %36 ], [ 2, %32 ], [ 2, %4 ], [ %212, %578 ], [ %212, %575 ]
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [12 x i8], [12 x i8]* bitcast (<{ i8, i8, i8, [9 x i8] }>* @_ZN5blink12_GLOBAL__N_138_emoji_presentation_from_state_actionsE to [12 x i8]*), i64 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i64
  %51 = and i64 %50, -3
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %73, label %53

53:                                               ; preds = %40
  %54 = getelementptr inbounds [25 x i8], [25 x i8]* @_ZN5blink12_GLOBAL__N_127_emoji_presentation_actionsE, i64 0, i64 %50
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = add nsw i32 %56, -1
  %58 = and i32 %56, 7
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %53, %60
  %61 = phi i32 [ %63, %60 ], [ %56, %53 ]
  %62 = phi i32 [ %64, %60 ], [ %58, %53 ]
  %63 = add i32 %61, -1
  %64 = add i32 %62, -1
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %60, !llvm.loop !5

66:                                               ; preds = %60, %53
  %67 = phi i32 [ %56, %53 ], [ %63, %60 ]
  %68 = icmp ult i32 %57, 7
  br i1 %68, label %73, label %69

69:                                               ; preds = %66, %69
  %70 = phi i32 [ %71, %69 ], [ %67, %66 ]
  %71 = add i32 %70, -8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %69

73:                                               ; preds = %66, %69, %40
  %74 = getelementptr inbounds [12 x i8], [12 x i8]* @_ZN5blink12_GLOBAL__N_131_emoji_presentation_key_offsetsE, i64 0, i64 %47
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i64
  %77 = getelementptr inbounds [42 x i8], [42 x i8]* @_ZN5blink12_GLOBAL__N_130_emoji_presentation_trans_keysE, i64 0, i64 %76
  %78 = getelementptr inbounds [12 x i8], [12 x i8]* @_ZN5blink12_GLOBAL__N_133_emoji_presentation_index_offsetsE, i64 0, i64 %47
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = getelementptr inbounds [12 x i8], [12 x i8]* @_ZN5blink12_GLOBAL__N_134_emoji_presentation_single_lengthsE, i64 0, i64 %47
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = sext i8 %82 to i64
  %85 = getelementptr inbounds i8, i8* %77, i64 %84
  %86 = getelementptr inbounds i8, i8* %85, i64 -1
  %87 = icmp ult i8* %86, %77
  br i1 %87, label %134, label %88

88:                                               ; preds = %73
  %89 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %90 = bitcast %"class.logging::CheckError"* %12 to i8*
  %91 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 3
  %92 = bitcast %"class.logging::CheckError"* %11 to i8*
  br label %93

93:                                               ; preds = %88, %124
  %94 = phi i8* [ %86, %88 ], [ %126, %124 ]
  %95 = phi i8* [ %77, %88 ], [ %125, %124 ]
  %96 = ptrtoint i8* %94 to i64
  %97 = ptrtoint i8* %95 to i64
  %98 = sub i64 %96, %97
  %99 = ashr i64 %98, 1
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  %101 = load i32, i32* %89, align 8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %93
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #4
  %104 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #4
  br label %105

105:                                              ; preds = %93, %103
  %106 = load i8, i8* %91, align 8
  %107 = load i8, i8* %100, align 1
  %108 = icmp ult i8 %106, %107
  br i1 %108, label %109, label %111

109:                                              ; preds = %105
  %110 = getelementptr inbounds i8, i8* %100, i64 -1
  br label %124

111:                                              ; preds = %105
  %112 = load i32, i32* %89, align 8
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %111
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #4
  %115 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #4
  %116 = load i8, i8* %91, align 8
  %117 = load i8, i8* %100, align 1
  br label %118

118:                                              ; preds = %111, %114
  %119 = phi i8 [ %107, %111 ], [ %117, %114 ]
  %120 = phi i8 [ %106, %111 ], [ %116, %114 ]
  %121 = icmp ugt i8 %120, %119
  br i1 %121, label %122, label %128

122:                                              ; preds = %118
  %123 = getelementptr inbounds i8, i8* %100, i64 1
  br label %124

124:                                              ; preds = %122, %109
  %125 = phi i8* [ %95, %109 ], [ %123, %122 ]
  %126 = phi i8* [ %110, %109 ], [ %94, %122 ]
  %127 = icmp ult i8* %126, %125
  br i1 %127, label %134, label %93

128:                                              ; preds = %118
  %129 = ptrtoint i8* %100 to i64
  %130 = ptrtoint i8* %77 to i64
  %131 = sub i64 %129, %130
  %132 = trunc i64 %131 to i32
  %133 = add i32 %132, %80
  br label %196

134:                                              ; preds = %124, %73
  %135 = add nsw i32 %83, %80
  %136 = getelementptr inbounds [12 x i8], [12 x i8]* bitcast (<{ i8, i8, i8, [9 x i8] }>* @_ZN5blink12_GLOBAL__N_133_emoji_presentation_range_lengthsE to [12 x i8]*), i64 0, i64 %47
  %137 = load i8, i8* %136, align 1
  %138 = sext i8 %137 to i32
  %139 = icmp sgt i8 %137, 0
  br i1 %139, label %140, label %196

140:                                              ; preds = %134
  %141 = shl nsw i32 %138, 1
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %85, i64 %142
  %144 = getelementptr inbounds i8, i8* %143, i64 -2
  %145 = icmp ult i8* %144, %85
  br i1 %145, label %193, label %146

146:                                              ; preds = %140
  %147 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %148 = bitcast %"class.logging::CheckError"* %10 to i8*
  %149 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 3
  %150 = bitcast %"class.logging::CheckError"* %9 to i8*
  br label %151

151:                                              ; preds = %146, %189
  %152 = phi i8* [ %144, %146 ], [ %191, %189 ]
  %153 = phi i8* [ %85, %146 ], [ %190, %189 ]
  %154 = ptrtoint i8* %152 to i64
  %155 = ptrtoint i8* %153 to i64
  %156 = sub i64 %154, %155
  %157 = ashr i64 %156, 1
  %158 = and i64 %157, -2
  %159 = getelementptr inbounds i8, i8* %153, i64 %158
  %160 = load i32, i32* %147, align 8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %151
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %148) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #4
  %163 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %148) #4
  br label %164

164:                                              ; preds = %151, %162
  %165 = load i8, i8* %149, align 8
  %166 = load i8, i8* %159, align 1
  %167 = icmp ult i8 %165, %166
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  %169 = getelementptr inbounds i8, i8* %159, i64 -2
  br label %189

170:                                              ; preds = %164
  %171 = load i32, i32* %147, align 8
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %150) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #4
  %174 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %150) #4
  %175 = load i8, i8* %149, align 8
  br label %176

176:                                              ; preds = %170, %173
  %177 = phi i8 [ %165, %170 ], [ %175, %173 ]
  %178 = getelementptr inbounds i8, i8* %159, i64 1
  %179 = load i8, i8* %178, align 1
  %180 = icmp ugt i8 %177, %179
  br i1 %180, label %181, label %183

181:                                              ; preds = %176
  %182 = getelementptr inbounds i8, i8* %159, i64 2
  br label %189

183:                                              ; preds = %176
  %184 = ptrtoint i8* %159 to i64
  %185 = ptrtoint i8* %85 to i64
  %186 = sub i64 %184, %185
  %187 = lshr i64 %186, 1
  %188 = trunc i64 %187 to i32
  br label %193

189:                                              ; preds = %181, %168
  %190 = phi i8* [ %153, %168 ], [ %182, %181 ]
  %191 = phi i8* [ %169, %168 ], [ %152, %181 ]
  %192 = icmp ult i8* %191, %190
  br i1 %192, label %193, label %151

193:                                              ; preds = %189, %140, %183
  %194 = phi i32 [ %188, %183 ], [ %138, %140 ], [ %138, %189 ]
  %195 = add i32 %194, %135
  br label %196

196:                                              ; preds = %193, %128, %134
  %197 = phi i32 [ %133, %128 ], [ %195, %193 ], [ %135, %134 ]
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds [52 x i8], [52 x i8]* @_ZN5blink12_GLOBAL__N_128_emoji_presentation_indiciesE, i64 0, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i64
  br label %202

202:                                              ; preds = %593, %196
  %203 = phi i8 [ %586, %593 ], [ %41, %196 ]
  %204 = phi i32 [ %587, %593 ], [ %42, %196 ]
  %205 = phi i32 [ %588, %593 ], [ %43, %196 ]
  %206 = phi i16* [ %589, %593 ], [ %44, %196 ]
  %207 = phi i32 [ %590, %593 ], [ %45, %196 ]
  %208 = phi i64 [ %598, %593 ], [ %201, %196 ]
  %209 = and i64 %208, 4294967295
  %210 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN5blink12_GLOBAL__N_131_emoji_presentation_trans_targsE, i64 0, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = sext i8 %211 to i32
  %213 = lshr i64 9232, %209
  %214 = and i64 %213, 1
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %548

216:                                              ; preds = %202
  %217 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN5blink12_GLOBAL__N_133_emoji_presentation_trans_actionsE, i64 0, i64 %209
  %218 = load i8, i8* %217, align 1
  %219 = sext i8 %218 to i64
  %220 = getelementptr inbounds [25 x i8], [25 x i8]* @_ZN5blink12_GLOBAL__N_127_emoji_presentation_actionsE, i64 0, i64 %219
  %221 = and i64 %219, -3
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %548, label %223

223:                                              ; preds = %216
  %224 = load i8, i8* %220, align 1
  %225 = sext i8 %224 to i32
  %226 = bitcast %"class.blink::UTF16RagelIterator"* %8 to i8*
  %227 = bitcast %"class.blink::UTF16RagelIterator"* %1 to i8*
  %228 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %8, i64 0, i32 2
  %229 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %8, i64 0, i32 1
  %230 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %8, i64 0, i32 0
  %231 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %8, i64 0, i32 3
  br label %232

232:                                              ; preds = %223, %541
  %233 = phi i32 [ %225, %223 ], [ %241, %541 ]
  %234 = phi i8* [ %220, %223 ], [ %240, %541 ]
  %235 = phi i32 [ %207, %223 ], [ %546, %541 ]
  %236 = phi i16* [ %206, %223 ], [ %545, %541 ]
  %237 = phi i32 [ %205, %223 ], [ %544, %541 ]
  %238 = phi i32 [ %204, %223 ], [ %543, %541 ]
  %239 = phi i8 [ %203, %223 ], [ %542, %541 ]
  %240 = getelementptr inbounds i8, i8* %234, i64 1
  %241 = add i32 %233, -1
  %242 = load i8, i8* %240, align 1
  %243 = sext i8 %242 to i32
  switch i32 %243, label %541 [
    i32 2, label %244
    i32 3, label %271
    i32 4, label %272
    i32 5, label %273
    i32 6, label %311
    i32 7, label %349
    i32 8, label %387
    i32 9, label %417
    i32 10, label %447
    i32 11, label %478
  ]

244:                                              ; preds = %232
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %226) #4, !noalias !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %226, i8* nonnull align 8 %227, i64 24, i1 false) #4, !noalias !7
  %245 = load i32, i32* %228, align 4
  %246 = load i32, i32* %229, align 8
  %247 = icmp ult i32 %245, %246
  br i1 %247, label %248, label %266

248:                                              ; preds = %244
  %249 = load i16*, i16** %230, align 8
  %250 = add nuw i32 %245, 1
  store i32 %250, i32* %228, align 4
  %251 = zext i32 %245 to i64
  %252 = getelementptr inbounds i16, i16* %249, i64 %251
  %253 = load i16, i16* %252, align 2
  %254 = and i16 %253, -1024
  %255 = icmp ne i16 %254, -10240
  %256 = icmp eq i32 %250, %246
  %257 = or i1 %256, %255
  br i1 %257, label %266, label %258

258:                                              ; preds = %248
  %259 = zext i32 %250 to i64
  %260 = getelementptr inbounds i16, i16* %249, i64 %259
  %261 = load i16, i16* %260, align 2
  %262 = and i16 %261, -1024
  %263 = icmp eq i16 %262, -9216
  br i1 %263, label %264, label %266

264:                                              ; preds = %258
  %265 = add i32 %245, 2
  store i32 %265, i32* %228, align 4
  br label %266

266:                                              ; preds = %248, %258, %264, %244
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %8) #4
  %267 = load i16*, i16** %230, align 8
  %268 = load i32, i32* %229, align 8
  %269 = load i32, i32* %228, align 4
  %270 = load i8, i8* %231, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %226) #4, !noalias !7
  br label %541

271:                                              ; preds = %232
  br label %541

272:                                              ; preds = %232
  br label %541

273:                                              ; preds = %232
  %274 = bitcast %"class.blink::UTF16RagelIterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %274) #4, !noalias !10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %274, i8* nonnull align 8 %227, i64 24, i1 false) #4, !noalias !10
  %275 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %7, i64 0, i32 2
  %276 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %7, i64 0, i32 1
  %277 = load i32, i32* %275, align 4
  %278 = load i32, i32* %276, align 8
  %279 = icmp ult i32 %277, %278
  br i1 %279, label %280, label %299

280:                                              ; preds = %273
  %281 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %7, i64 0, i32 0
  %282 = load i16*, i16** %281, align 8
  %283 = add nuw i32 %277, 1
  store i32 %283, i32* %275, align 4
  %284 = zext i32 %277 to i64
  %285 = getelementptr inbounds i16, i16* %282, i64 %284
  %286 = load i16, i16* %285, align 2
  %287 = and i16 %286, -1024
  %288 = icmp ne i16 %287, -10240
  %289 = icmp eq i32 %283, %278
  %290 = or i1 %289, %288
  br i1 %290, label %299, label %291

291:                                              ; preds = %280
  %292 = zext i32 %283 to i64
  %293 = getelementptr inbounds i16, i16* %282, i64 %292
  %294 = load i16, i16* %293, align 2
  %295 = and i16 %294, -1024
  %296 = icmp eq i16 %295, -9216
  br i1 %296, label %297, label %299

297:                                              ; preds = %291
  %298 = add i32 %277, 2
  store i32 %298, i32* %275, align 4
  br label %299

299:                                              ; preds = %280, %291, %297, %273
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %7) #4
  %300 = bitcast %"class.blink::UTF16RagelIterator"* %7 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = load i32, i32* %276, align 8
  %303 = load i32, i32* %275, align 4
  %304 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %7, i64 0, i32 3
  %305 = load i8, i8* %304, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %274) #4, !noalias !10
  store i8 0, i8* %3, align 1
  %306 = bitcast %"class.blink::UTF16RagelIterator"* %0 to i64*
  store i64 %301, i64* %306, align 8
  %307 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %302, i32* %307, align 8
  %308 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %303, i32* %308, align 4
  %309 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %305, i8* %309, align 8
  %310 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %310, i8 -86, i64 7, i1 false)
  br label %601

311:                                              ; preds = %232
  %312 = bitcast %"class.blink::UTF16RagelIterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %312) #4, !noalias !13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %312, i8* nonnull align 8 %227, i64 24, i1 false) #4, !noalias !13
  %313 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %6, i64 0, i32 2
  %314 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %6, i64 0, i32 1
  %315 = load i32, i32* %313, align 4
  %316 = load i32, i32* %314, align 8
  %317 = icmp ult i32 %315, %316
  br i1 %317, label %318, label %337

318:                                              ; preds = %311
  %319 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %6, i64 0, i32 0
  %320 = load i16*, i16** %319, align 8
  %321 = add nuw i32 %315, 1
  store i32 %321, i32* %313, align 4
  %322 = zext i32 %315 to i64
  %323 = getelementptr inbounds i16, i16* %320, i64 %322
  %324 = load i16, i16* %323, align 2
  %325 = and i16 %324, -1024
  %326 = icmp ne i16 %325, -10240
  %327 = icmp eq i32 %321, %316
  %328 = or i1 %327, %326
  br i1 %328, label %337, label %329

329:                                              ; preds = %318
  %330 = zext i32 %321 to i64
  %331 = getelementptr inbounds i16, i16* %320, i64 %330
  %332 = load i16, i16* %331, align 2
  %333 = and i16 %332, -1024
  %334 = icmp eq i16 %333, -9216
  br i1 %334, label %335, label %337

335:                                              ; preds = %329
  %336 = add i32 %315, 2
  store i32 %336, i32* %313, align 4
  br label %337

337:                                              ; preds = %318, %329, %335, %311
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %6) #4
  %338 = bitcast %"class.blink::UTF16RagelIterator"* %6 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = load i32, i32* %314, align 8
  %341 = load i32, i32* %313, align 4
  %342 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %6, i64 0, i32 3
  %343 = load i8, i8* %342, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %312) #4, !noalias !13
  store i8 1, i8* %3, align 1
  %344 = bitcast %"class.blink::UTF16RagelIterator"* %0 to i64*
  store i64 %339, i64* %344, align 8
  %345 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %340, i32* %345, align 8
  %346 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %341, i32* %346, align 4
  %347 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %343, i8* %347, align 8
  %348 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %348, i8 -86, i64 7, i1 false)
  br label %601

349:                                              ; preds = %232
  %350 = bitcast %"class.blink::UTF16RagelIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %350) #4, !noalias !16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %350, i8* nonnull align 8 %227, i64 24, i1 false) #4, !noalias !16
  %351 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %5, i64 0, i32 2
  %352 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %5, i64 0, i32 1
  %353 = load i32, i32* %351, align 4
  %354 = load i32, i32* %352, align 8
  %355 = icmp ult i32 %353, %354
  br i1 %355, label %356, label %375

356:                                              ; preds = %349
  %357 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %5, i64 0, i32 0
  %358 = load i16*, i16** %357, align 8
  %359 = add nuw i32 %353, 1
  store i32 %359, i32* %351, align 4
  %360 = zext i32 %353 to i64
  %361 = getelementptr inbounds i16, i16* %358, i64 %360
  %362 = load i16, i16* %361, align 2
  %363 = and i16 %362, -1024
  %364 = icmp ne i16 %363, -10240
  %365 = icmp eq i32 %359, %354
  %366 = or i1 %365, %364
  br i1 %366, label %375, label %367

367:                                              ; preds = %356
  %368 = zext i32 %359 to i64
  %369 = getelementptr inbounds i16, i16* %358, i64 %368
  %370 = load i16, i16* %369, align 2
  %371 = and i16 %370, -1024
  %372 = icmp eq i16 %371, -9216
  br i1 %372, label %373, label %375

373:                                              ; preds = %367
  %374 = add i32 %353, 2
  store i32 %374, i32* %351, align 4
  br label %375

375:                                              ; preds = %356, %367, %373, %349
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %5) #4
  %376 = bitcast %"class.blink::UTF16RagelIterator"* %5 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = load i32, i32* %352, align 8
  %379 = load i32, i32* %351, align 4
  %380 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %5, i64 0, i32 3
  %381 = load i8, i8* %380, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %350) #4, !noalias !16
  store i8 0, i8* %3, align 1
  %382 = bitcast %"class.blink::UTF16RagelIterator"* %0 to i64*
  store i64 %377, i64* %382, align 8
  %383 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %378, i32* %383, align 8
  %384 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %379, i32* %384, align 4
  %385 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %381, i8* %385, align 8
  %386 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %386, i8 -86, i64 7, i1 false)
  br label %601

387:                                              ; preds = %232
  %388 = load i16*, i16** %29, align 8
  %389 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %390 = load i32, i32* %389, align 8
  %391 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 2
  %392 = load i32, i32* %391, align 4
  %393 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 3
  %394 = load i8, i8* %393, align 8
  %395 = add i32 %392, -1
  store i32 %395, i32* %391, align 4, !noalias !19
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds i16, i16* %388, i64 %396
  %398 = load i16, i16* %397, align 2, !noalias !19
  %399 = and i16 %398, -1024
  %400 = icmp ne i16 %399, -9216
  %401 = icmp eq i32 %395, 0
  %402 = or i1 %401, %400
  br i1 %402, label %411, label %403

403:                                              ; preds = %387
  %404 = add i32 %392, -2
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds i16, i16* %388, i64 %405
  %407 = load i16, i16* %406, align 2, !noalias !19
  %408 = and i16 %407, -1024
  %409 = icmp eq i16 %408, -10240
  br i1 %409, label %410, label %411

410:                                              ; preds = %403
  store i32 %404, i32* %391, align 4, !noalias !19
  br label %411

411:                                              ; preds = %387, %403, %410
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %1) #4, !noalias !19
  store i8 1, i8* %3, align 1
  %412 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 0
  store i16* %388, i16** %412, align 8
  %413 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %390, i32* %413, align 8
  %414 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %392, i32* %414, align 4
  %415 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %394, i8* %415, align 8
  %416 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %416, i8 -86, i64 7, i1 false)
  br label %601

417:                                              ; preds = %232
  %418 = load i16*, i16** %29, align 8
  %419 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %420 = load i32, i32* %419, align 8
  %421 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 2
  %422 = load i32, i32* %421, align 4
  %423 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 3
  %424 = load i8, i8* %423, align 8
  %425 = add i32 %422, -1
  store i32 %425, i32* %421, align 4, !noalias !22
  %426 = zext i32 %425 to i64
  %427 = getelementptr inbounds i16, i16* %418, i64 %426
  %428 = load i16, i16* %427, align 2, !noalias !22
  %429 = and i16 %428, -1024
  %430 = icmp ne i16 %429, -9216
  %431 = icmp eq i32 %425, 0
  %432 = or i1 %431, %430
  br i1 %432, label %441, label %433

433:                                              ; preds = %417
  %434 = add i32 %422, -2
  %435 = zext i32 %434 to i64
  %436 = getelementptr inbounds i16, i16* %418, i64 %435
  %437 = load i16, i16* %436, align 2, !noalias !22
  %438 = and i16 %437, -1024
  %439 = icmp eq i16 %438, -10240
  br i1 %439, label %440, label %441

440:                                              ; preds = %433
  store i32 %434, i32* %421, align 4, !noalias !22
  br label %441

441:                                              ; preds = %417, %433, %440
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %1) #4, !noalias !22
  store i8 0, i8* %3, align 1
  %442 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 0
  store i16* %418, i16** %442, align 8
  %443 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %420, i32* %443, align 8
  %444 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %422, i32* %444, align 4
  %445 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %424, i8* %445, align 8
  %446 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %446, i8 -86, i64 7, i1 false)
  br label %601

447:                                              ; preds = %232
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19)
  %448 = bitcast %"class.blink::UTF16RagelIterator"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %448) #4, !noalias !25
  %449 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %13, i64 0, i32 0
  store i16* %236, i16** %449, align 8, !noalias !25
  %450 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %13, i64 0, i32 1
  store i32 %237, i32* %450, align 8, !noalias !25
  %451 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %13, i64 0, i32 2
  store i32 %238, i32* %451, align 4, !noalias !25
  %452 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %13, i64 0, i32 3
  store i8 %239, i8* %452, align 8, !noalias !25
  %453 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %13, i64 0, i32 4, i64 0
  %454 = icmp eq i32 %238, 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %453, i8 -86, i64 7, i1 false)
  br i1 %454, label %472, label %455

455:                                              ; preds = %447
  %456 = add i32 %238, -1
  store i32 %456, i32* %451, align 4
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds i16, i16* %236, i64 %457
  %459 = load i16, i16* %458, align 2
  %460 = and i16 %459, -1024
  %461 = icmp ne i16 %460, -9216
  %462 = icmp eq i32 %456, 0
  %463 = or i1 %462, %461
  br i1 %463, label %472, label %464

464:                                              ; preds = %455
  %465 = add i32 %238, -2
  %466 = zext i32 %465 to i64
  %467 = getelementptr inbounds i16, i16* %236, i64 %466
  %468 = load i16, i16* %467, align 2
  %469 = and i16 %468, -1024
  %470 = icmp eq i16 %469, -10240
  br i1 %470, label %471, label %472

471:                                              ; preds = %464
  store i32 %465, i32* %451, align 4
  br label %472

472:                                              ; preds = %455, %464, %471, %447
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %13) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* nonnull align 8 %448, i64 24, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %448) #4, !noalias !25
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %227, i8* nonnull align 8 %19, i64 17, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19)
  store i8 1, i8* %3, align 1
  %473 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 0
  store i16* %236, i16** %473, align 8
  %474 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %237, i32* %474, align 8
  %475 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %238, i32* %475, align 4
  %476 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %239, i8* %476, align 8
  %477 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %477, i8 -86, i64 7, i1 false)
  br label %601

478:                                              ; preds = %232
  switch i32 %235, label %541 [
    i32 2, label %479
    i32 3, label %510
  ]

479:                                              ; preds = %478
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20)
  %480 = bitcast %"class.blink::UTF16RagelIterator"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %480) #4, !noalias !30
  %481 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %14, i64 0, i32 0
  store i16* %236, i16** %481, align 8, !noalias !30
  %482 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %14, i64 0, i32 1
  store i32 %237, i32* %482, align 8, !noalias !30
  %483 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %14, i64 0, i32 2
  store i32 %238, i32* %483, align 4, !noalias !30
  %484 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %14, i64 0, i32 3
  store i8 %239, i8* %484, align 8, !noalias !30
  %485 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %14, i64 0, i32 4, i64 0
  %486 = icmp eq i32 %238, 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %485, i8 -86, i64 7, i1 false)
  br i1 %486, label %504, label %487

487:                                              ; preds = %479
  %488 = add i32 %238, -1
  store i32 %488, i32* %483, align 4
  %489 = zext i32 %488 to i64
  %490 = getelementptr inbounds i16, i16* %236, i64 %489
  %491 = load i16, i16* %490, align 2
  %492 = and i16 %491, -1024
  %493 = icmp ne i16 %492, -9216
  %494 = icmp eq i32 %488, 0
  %495 = or i1 %494, %493
  br i1 %495, label %504, label %496

496:                                              ; preds = %487
  %497 = add i32 %238, -2
  %498 = zext i32 %497 to i64
  %499 = getelementptr inbounds i16, i16* %236, i64 %498
  %500 = load i16, i16* %499, align 2
  %501 = and i16 %500, -1024
  %502 = icmp eq i16 %501, -10240
  br i1 %502, label %503, label %504

503:                                              ; preds = %496
  store i32 %497, i32* %483, align 4
  br label %504

504:                                              ; preds = %487, %496, %503, %479
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %14) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* nonnull align 8 %480, i64 24, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %480) #4, !noalias !30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %227, i8* nonnull align 8 %20, i64 17, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20)
  store i8 1, i8* %3, align 1
  %505 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 0
  store i16* %236, i16** %505, align 8
  %506 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %237, i32* %506, align 8
  %507 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %238, i32* %507, align 4
  %508 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %239, i8* %508, align 8
  %509 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %509, i8 -86, i64 7, i1 false)
  br label %601

510:                                              ; preds = %478
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21)
  %511 = bitcast %"class.blink::UTF16RagelIterator"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %511) #4, !noalias !35
  %512 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %15, i64 0, i32 0
  store i16* %236, i16** %512, align 8, !noalias !35
  %513 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %15, i64 0, i32 1
  store i32 %237, i32* %513, align 8, !noalias !35
  %514 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %15, i64 0, i32 2
  store i32 %238, i32* %514, align 4, !noalias !35
  %515 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %15, i64 0, i32 3
  store i8 %239, i8* %515, align 8, !noalias !35
  %516 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %15, i64 0, i32 4, i64 0
  %517 = icmp eq i32 %238, 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %516, i8 -86, i64 7, i1 false)
  br i1 %517, label %535, label %518

518:                                              ; preds = %510
  %519 = add i32 %238, -1
  store i32 %519, i32* %514, align 4
  %520 = zext i32 %519 to i64
  %521 = getelementptr inbounds i16, i16* %236, i64 %520
  %522 = load i16, i16* %521, align 2
  %523 = and i16 %522, -1024
  %524 = icmp ne i16 %523, -9216
  %525 = icmp eq i32 %519, 0
  %526 = or i1 %525, %524
  br i1 %526, label %535, label %527

527:                                              ; preds = %518
  %528 = add i32 %238, -2
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds i16, i16* %236, i64 %529
  %531 = load i16, i16* %530, align 2
  %532 = and i16 %531, -1024
  %533 = icmp eq i16 %532, -10240
  br i1 %533, label %534, label %535

534:                                              ; preds = %527
  store i32 %528, i32* %514, align 4
  br label %535

535:                                              ; preds = %518, %527, %534, %510
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %15) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* nonnull align 8 %511, i64 24, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %511) #4, !noalias !35
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %227, i8* nonnull align 8 %21, i64 17, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21)
  store i8 0, i8* %3, align 1
  %536 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 0
  store i16* %236, i16** %536, align 8
  %537 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  store i32 %237, i32* %537, align 8
  %538 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %238, i32* %538, align 4
  %539 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %239, i8* %539, align 8
  %540 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %540, i8 -86, i64 7, i1 false)
  br label %601

541:                                              ; preds = %478, %232, %272, %271, %266
  %542 = phi i8 [ %239, %232 ], [ %239, %478 ], [ %239, %272 ], [ %239, %271 ], [ %270, %266 ]
  %543 = phi i32 [ %238, %232 ], [ %238, %478 ], [ %238, %272 ], [ %238, %271 ], [ %269, %266 ]
  %544 = phi i32 [ %237, %232 ], [ %237, %478 ], [ %237, %272 ], [ %237, %271 ], [ %268, %266 ]
  %545 = phi i16* [ %236, %232 ], [ %236, %478 ], [ %236, %272 ], [ %236, %271 ], [ %267, %266 ]
  %546 = phi i32 [ %235, %232 ], [ %235, %478 ], [ 3, %272 ], [ 2, %271 ], [ %235, %266 ]
  %547 = icmp eq i32 %241, 0
  br i1 %547, label %548, label %232

548:                                              ; preds = %541, %216, %202
  %549 = phi i8 [ %203, %202 ], [ %203, %216 ], [ %542, %541 ]
  %550 = phi i32 [ %204, %202 ], [ %204, %216 ], [ %543, %541 ]
  %551 = phi i32 [ %205, %202 ], [ %205, %216 ], [ %544, %541 ]
  %552 = phi i16* [ %206, %202 ], [ %206, %216 ], [ %545, %541 ]
  %553 = phi i32 [ %207, %202 ], [ %207, %216 ], [ %546, %541 ]
  %554 = load i16*, i16** %29, align 8
  %555 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 2
  %556 = load i32, i32* %555, align 4
  %557 = add i32 %556, 1
  store i32 %557, i32* %555, align 4
  %558 = zext i32 %556 to i64
  %559 = getelementptr inbounds i16, i16* %554, i64 %558
  %560 = load i16, i16* %559, align 2
  %561 = and i16 %560, -1024
  %562 = icmp eq i16 %561, -10240
  br i1 %562, label %563, label %575

563:                                              ; preds = %548
  %564 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %565 = load i32, i32* %564, align 8
  %566 = icmp eq i32 %557, %565
  br i1 %566, label %575, label %567

567:                                              ; preds = %563
  %568 = zext i32 %557 to i64
  %569 = getelementptr inbounds i16, i16* %554, i64 %568
  %570 = load i16, i16* %569, align 2
  %571 = and i16 %570, -1024
  %572 = icmp eq i16 %571, -9216
  br i1 %572, label %573, label %575

573:                                              ; preds = %567
  %574 = add i32 %556, 2
  store i32 %574, i32* %555, align 4
  br label %575

575:                                              ; preds = %548, %563, %567, %573
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nonnull %1) #4
  %576 = load i16*, i16** %29, align 8
  %577 = icmp eq i16* %576, %24
  br i1 %577, label %578, label %40

578:                                              ; preds = %575
  %579 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %1, i64 0, i32 1
  %580 = load i32, i32* %579, align 8
  %581 = icmp ne i32 %580, %26
  %582 = load i32, i32* %555, align 4
  %583 = icmp ne i32 %582, %28
  %584 = or i1 %581, %583
  br i1 %584, label %40, label %585

585:                                              ; preds = %578, %36
  %586 = phi i8 [ -86, %36 ], [ %549, %578 ]
  %587 = phi i32 [ 0, %36 ], [ %550, %578 ]
  %588 = phi i32 [ 0, %36 ], [ %551, %578 ]
  %589 = phi i16* [ null, %36 ], [ %552, %578 ]
  %590 = phi i32 [ 0, %36 ], [ %553, %578 ]
  %591 = phi i32 [ 2, %36 ], [ %212, %578 ]
  %592 = icmp eq i32 %591, 2
  br i1 %592, label %599, label %593

593:                                              ; preds = %585
  %594 = sext i32 %591 to i64
  %595 = getelementptr inbounds [12 x i8], [12 x i8]* @_ZN5blink12_GLOBAL__N_129_emoji_presentation_eof_transE, i64 0, i64 %594
  %596 = load i8, i8* %595, align 1
  %597 = sext i8 %596 to i64
  %598 = add nsw i64 %597, 4294967295
  br label %202

599:                                              ; preds = %585
  store i8 0, i8* %3, align 1
  %600 = bitcast %"class.blink::UTF16RagelIterator"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %600, i8* nonnull align 8 %22, i64 24, i1 false)
  br label %601

601:                                              ; preds = %299, %337, %375, %411, %441, %472, %504, %535, %599
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15SymbolsIterator7ConsumeEPjPNS_20FontFallbackPriorityE(%"class.blink::SymbolsIterator"*, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::UTF16RagelIterator", align 8
  %5 = alloca %"class.blink::UTF16RagelIterator", align 8
  %6 = alloca %"class.blink::UTF16RagelIterator", align 8
  %7 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 0
  %10 = bitcast %"class.blink::SymbolsIterator"* %0 to i8*
  %11 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8, !noalias !40
  %13 = icmp ult i32 %8, %12
  br i1 %13, label %14, label %44

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 3
  %17 = bitcast %"class.blink::UTF16RagelIterator"* %4 to i8*
  %18 = bitcast %"class.blink::UTF16RagelIterator"* %5 to i8*
  %19 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %6, i64 0, i32 2
  %20 = bitcast %"class.blink::UTF16RagelIterator"* %6 to i8*
  %21 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %4, i64 0, i32 2
  %22 = getelementptr inbounds %"class.blink::SymbolsIterator", %"class.blink::SymbolsIterator"* %0, i64 0, i32 0, i32 2
  %23 = load i32, i32* %15, align 4
  %24 = load i8, i8* %16, align 8, !range !43
  store i32 %23, i32* %7, align 8
  %25 = icmp ult i32 %23, %12
  br i1 %25, label %26, label %40

26:                                               ; preds = %14, %37
  %27 = phi i32 [ %34, %37 ], [ %23, %14 ]
  %28 = tail call dereferenceable(24) %"class.blink::UTF16RagelIterator"* @_ZN5blink18UTF16RagelIterator9SetCursorEj(%"class.blink::UTF16RagelIterator"* %9, i32 %27) #4
  %29 = load i32, i32* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %10, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %10, i64 24, i1 false) #4
  %30 = load i32, i32* %11, align 8, !noalias !44
  store i32 %30, i32* %19, align 4, !alias.scope !44
  call fastcc void @_ZN5blink12_GLOBAL__N_123scan_emoji_presentationENS_18UTF16RagelIteratorES1_Pb(%"class.blink::UTF16RagelIterator"* nonnull sret %4, %"class.blink::UTF16RagelIterator"* nonnull byval(%"class.blink::UTF16RagelIterator") align 8 %5, %"class.blink::UTF16RagelIterator"* nonnull byval(%"class.blink::UTF16RagelIterator") align 8 %6, i8* %16)
  %31 = load i32, i32* %21, align 4
  %32 = load i32, i32* %22, align 4
  %33 = add i32 %31, %29
  %34 = sub i32 %33, %32
  store i32 %34, i32* %15, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #4
  %35 = load i8, i8* %16, align 8, !range !43
  %36 = icmp eq i8 %24, %35
  br i1 %36, label %37, label %40

37:                                               ; preds = %26
  %38 = load i32, i32* %11, align 8, !noalias !47
  store i32 %34, i32* %7, align 8
  %39 = icmp ult i32 %34, %38
  br i1 %39, label %26, label %40

40:                                               ; preds = %26, %37, %14
  %41 = icmp eq i8 %24, 0
  %42 = select i1 %41, i32 0, i32 2
  store i32 %42, i32* %2, align 4
  %43 = load i32, i32* %7, align 8
  store i32 %43, i32* %1, align 4
  br label %44

44:                                               ; preds = %3, %40
  %45 = phi i1 [ true, %40 ], [ false, %3 ]
  ret i1 %45
}

declare dereferenceable(24) %"class.blink::UTF16RagelIterator"* @_ZN5blink18UTF16RagelIterator9SetCursorEj(%"class.blink::UTF16RagelIterator"*, i32) local_unnamed_addr #2

declare void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5blink18UTF16RagelIterator3endEv: argument 0"}
!4 = distinct !{!4, !"_ZN5blink18UTF16RagelIterator3endEv"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!9 = distinct !{!9, !"_ZN5blink18UTF16RagelIteratorplEi"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!12 = distinct !{!12, !"_ZN5blink18UTF16RagelIteratorplEi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!15 = distinct !{!15, !"_ZN5blink18UTF16RagelIteratorplEi"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!18 = distinct !{!18, !"_ZN5blink18UTF16RagelIteratorplEi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN5blink18UTF16RagelIteratormmEi: argument 0"}
!21 = distinct !{!21, !"_ZN5blink18UTF16RagelIteratormmEi"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN5blink18UTF16RagelIteratormmEi: argument 0"}
!24 = distinct !{!24, !"_ZN5blink18UTF16RagelIteratormmEi"}
!25 = !{!26, !28}
!26 = distinct !{!26, !27, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!27 = distinct !{!27, !"_ZN5blink18UTF16RagelIteratorplEi"}
!28 = distinct !{!28, !29, !"_ZN5blink18UTF16RagelIteratormiEi: argument 0"}
!29 = distinct !{!29, !"_ZN5blink18UTF16RagelIteratormiEi"}
!30 = !{!31, !33}
!31 = distinct !{!31, !32, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!32 = distinct !{!32, !"_ZN5blink18UTF16RagelIteratorplEi"}
!33 = distinct !{!33, !34, !"_ZN5blink18UTF16RagelIteratormiEi: argument 0"}
!34 = distinct !{!34, !"_ZN5blink18UTF16RagelIteratormiEi"}
!35 = !{!36, !38}
!36 = distinct !{!36, !37, !"_ZN5blink18UTF16RagelIteratorplEi: argument 0"}
!37 = distinct !{!37, !"_ZN5blink18UTF16RagelIteratorplEi"}
!38 = distinct !{!38, !39, !"_ZN5blink18UTF16RagelIteratormiEi: argument 0"}
!39 = distinct !{!39, !"_ZN5blink18UTF16RagelIteratormiEi"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN5blink18UTF16RagelIterator3endEv: argument 0"}
!42 = distinct !{!42, !"_ZN5blink18UTF16RagelIterator3endEv"}
!43 = !{i8 0, i8 2}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN5blink18UTF16RagelIterator3endEv: argument 0"}
!46 = distinct !{!46, !"_ZN5blink18UTF16RagelIterator3endEv"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN5blink18UTF16RagelIterator3endEv: argument 0"}
!49 = distinct !{!49, !"_ZN5blink18UTF16RagelIterator3endEv"}
