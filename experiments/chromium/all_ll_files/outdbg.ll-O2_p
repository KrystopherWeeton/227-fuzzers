; ModuleID = '../../third_party/nasm/output/outdbg.c'
source_filename = "../../third_party/nasm/output/outdbg.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type { i32, i32, [5 x i64], [5 x i16], i8*, i32 }
%struct.src_location = type { i8*, i32 }
%struct.Section = type { %struct.Section*, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [41 x i8] c"Trace of all info passed to output stage\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"dbg\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c".dbg\00", align 1
@debug_debug_arr = internal constant [3 x %struct.dfmt*] [%struct.dfmt* @debug_debug_form, %struct.dfmt* @null_debug_form, %struct.dfmt* null], align 16
@debug_debug_form = internal constant %struct.dfmt { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), void ()* @dbgdbg_init, void (i8*, i32, i32)* @dbgdbg_linnum, void (i8*, i32, i64, i32, i8*)* @dbgdbg_deflabel, void (i8*, i8*)* @dbgdbg_define, void (i32)* @dbgdbg_typevalue, void (i32, i8*)* @dbgdbg_output, void ()* @dbgdbg_cleanup, %struct.pragma_facility* getelementptr inbounds ([2 x %struct.pragma_facility], [2 x %struct.pragma_facility]* @dbgdbg_pragma_list, i32 0, i32 0) }, align 8
@dbg_stdmac = external constant [0 x i8], align 1
@dbg_pragma_list = internal constant [1 x %struct.pragma_facility] [%struct.pragma_facility { i8* null, i32 (%struct.pragma*)* @dbg_pragma }], align 16
@of_dbg = hidden local_unnamed_addr constant %struct.ofmt { i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 1, i32 64, %struct.dfmt** getelementptr inbounds ([3 x %struct.dfmt*], [3 x %struct.dfmt*]* @debug_debug_arr, i32 0, i32 0), %struct.dfmt* @debug_debug_form, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @dbg_stdmac, i32 0, i32 0), void ()* @dbg_init, void ()* @dbg_reset, void (%struct.out_data*)* @dbg_out, void (i32, i8*, i32, i64, i32, i32)* @dbg_legacy_out, void (i8*, i32, i64, i32, i8*)* @dbg_deflabel, i32 (i8*, i32*)* @dbg_section_names, i32 (i8*, i32, i32, i32*, i8*)* @dbg_herelabel, void (i32, i32)* @dbg_sectalign, i32 (i32)* @null_segbase, i32 (i32, i8*)* @dbg_directive, void ()* @dbg_cleanup, %struct.pragma_facility* getelementptr inbounds ([1 x %struct.pragma_facility], [1 x %struct.pragma_facility]* @dbg_pragma_list, i32 0, i32 0) }, align 8
@dbgsect = common hidden local_unnamed_addr global %struct.Section* null, align 8
@null_debug_form = external constant %struct.dfmt, align 8
@.str.3 = private unnamed_addr constant [40 x i8] c"Trace of all info passed to debug stage\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@dbgdbg_pragma_list = internal constant [2 x %struct.pragma_facility] [%struct.pragma_facility { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i32 (%struct.pragma*)* @dbg_pragma }, %struct.pragma_facility { i8* null, i32 (%struct.pragma*)* @dbg_pragma }], align 16
@ofile = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [20 x i8] c"   With debug info\0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"dbglinenum %s(%d) segment %x\0A\00", align 1
@.str.7 = private unnamed_addr constant [40 x i8] c"dbglabel %s := %08x:%016lx %s (%d)%s%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"common\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"global\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"local\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.12 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"dbgdirective [%s] value [%s]\0A\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"new type: %s(%X)\0A\00", align 1
@types = internal unnamed_addr constant [8 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0)], align 16
@.str.15 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"label\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"byte\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"word\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"dword\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"qword\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"tbyte\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"dbgdbg\00", align 1
@.str.24 = private unnamed_addr constant [25 x i8] c"pragma %s(%s) %s[%s] %s\0A\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"<default>\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"unlimited\00", align 1
@dbg_max_data_dump = internal unnamed_addr global i64 128, align 8
@.str.27 = private unnamed_addr constant [38 x i8] c"invalid %%pragma dbg maxdump argument\00", align 1
@section_labels = internal unnamed_addr global i1 false, align 1
@subsections_via_symbols = internal unnamed_addr global i1 false, align 1
@directive_tbl = external local_unnamed_addr constant [40 x i8*], align 16
@.str.28 = private unnamed_addr constant [31 x i8] c"NASM Output format debug dump\0A\00", align 1
@.str.29 = private unnamed_addr constant [18 x i8] c"input file  = %s\0A\00", align 1
@inname = external local_unnamed_addr global i8*, align 8
@.str.30 = private unnamed_addr constant [18 x i8] c"output file = %s\0A\00", align 1
@outname = external local_unnamed_addr global i8*, align 8
@init_seg = internal unnamed_addr global i32 0, align 4
@.str.31 = private unnamed_addr constant [33 x i8] c"*** pass reset: pass = %ld (%s)\0A\00", align 1
@_passn = external local_unnamed_addr global i64, align 8
@_pass_types = external local_unnamed_addr constant [0 x i8*], align 8
@_pass_type = external local_unnamed_addr global i32, align 4
@.str.32 = private unnamed_addr constant [51 x i8] c"out to %x:%lx %s %s bits %d insoffs %d/%d size %lu\00", align 1
@.str.33 = private unnamed_addr constant [12 x i8] c" ins %s(%d)\00", align 1
@nasm_insn_names = external local_unnamed_addr constant [0 x i8*], align 8
@.str.34 = private unnamed_addr constant [21 x i8] c" no ins (plain data)\00", align 1
@.str.35 = private unnamed_addr constant [15 x i8] c" target %x:%lx\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c" wrt %x\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c" relbase %lx\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"  data: <error: null pointer>\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"  data: <%lu bytes>\0A\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"  data:\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"%c%02x\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@out_type.out_types = internal unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0)], align 16
@.str.45 = private unnamed_addr constant [8 x i8] c"rawdata\00", align 1
@.str.46 = private unnamed_addr constant [8 x i8] c"reserve\00", align 1
@.str.47 = private unnamed_addr constant [9 x i8] c"zerodata\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"address\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"reladdr\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"segment\00", align 1
@out_type.invalid_buf = internal global [64 x i8] zeroinitializer, align 16
@.str.51 = private unnamed_addr constant [18 x i8] c"[invalid type %d]\00", align 1
@out_sign.out_signs = internal unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0)], align 16
@.str.52 = private unnamed_addr constant [5 x i8] c"wrap\00", align 1
@.str.53 = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"unsigned\00", align 1
@out_sign.invalid_buf = internal global [64 x i8] zeroinitializer, align 16
@.str.55 = private unnamed_addr constant [18 x i8] c"[invalid sign %d]\00", align 1
@.str.56 = private unnamed_addr constant [32 x i8] c"  legacy: out to %x, len = %d: \00", align 1
@.str.57 = private unnamed_addr constant [41 x i8] c"  legacy: out to %x, len = %ld (0x%lx): \00", align 1
@.str.58 = private unnamed_addr constant [11 x i8] c"reserved.\0A\00", align 1
@.str.59 = private unnamed_addr constant [9 x i8] c"rawdata\0A\00", align 1
@.str.60 = private unnamed_addr constant [32 x i8] c"addr %08x (seg %08x, wrt %08x)\0A\00", align 1
@.str.61 = private unnamed_addr constant [25 x i8] c"rel1adr %02x (seg %08x)\0A\00", align 1
@.str.62 = private unnamed_addr constant [25 x i8] c"rel2adr %04x (seg %08x)\0A\00", align 1
@.str.63 = private unnamed_addr constant [25 x i8] c"rel4adr %08x (seg %08x)\0A\00", align 1
@.str.64 = private unnamed_addr constant [27 x i8] c"rel8adr %016lx (seg %08x)\0A\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"unknown\0A\00", align 1
@.str.66 = private unnamed_addr constant [40 x i8] c"deflabel %s := %08x:%016lx %s (%d)%s%s\0A\00", align 1
@.str.67 = private unnamed_addr constant [14 x i8] c"section_names\00", align 1
@.str.68 = private unnamed_addr constant [36 x i8] c"section_name on init: returning %d\0A\00", align 1
@.str.69 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.70 = private unnamed_addr constant [41 x i8] c"%s %s (%s) pass %ld (%s) : returning %d\0A\00", align 1
@.str.71 = private unnamed_addr constant [41 x i8] c"herelabel %s type %d (seg %08x) -> %08x\0A\00", align 1
@.str.72 = private unnamed_addr constant [37 x i8] c"set alignment (%d) for segment (%u)\0A\00", align 1
@.str.73 = private unnamed_addr constant [16 x i8] c"directive:group\00", align 1
@.str.74 = private unnamed_addr constant [41 x i8] c"directive [%s] value [%s] pass %ld (%s)\0A\00", align 1
@dfmt = external local_unnamed_addr global %struct.dfmt*, align 8

; Function Attrs: nounwind ssp uwtable
define internal void @dbg_init() #0 {
  store %struct.Section* null, %struct.Section** @dbgsect, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %2 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.28, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %1)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %4 = load i8*, i8** @inname, align 8
  %5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29, i64 0, i64 0), i8* %4)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %7 = load i8*, i8** @outname, align 8
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.30, i64 0, i64 0), i8* %7)
  %9 = tail call i32 @seg_alloc() #10
  store i32 %9, i32* @init_seg, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbg_reset() #1 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %2 = load i64, i64* @_passn, align 8
  %3 = load i32, i32* @_pass_type, align 4
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_pass_types, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  %7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.31, i64 0, i64 0), i64 %2, i8* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @dbg_out(%struct.out_data*) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %3 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %8, 5
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = tail call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @out_type.invalid_buf, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.51, i64 0, i64 0), i32 %8) #10
  br label %16

12:                                               ; preds = %1
  %13 = zext i32 %8 to i64
  %14 = getelementptr inbounds [6 x i8*], [6 x i8*]* @out_type.out_types, i64 0, i64 %13
  %15 = load i8*, i8** %14, align 8
  br label %16

16:                                               ; preds = %10, %12
  %17 = phi i8* [ getelementptr inbounds ([64 x i8], [64 x i8]* @out_type.invalid_buf, i64 0, i64 0), %10 ], [ %15, %12 ]
  %18 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %19, 2
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = tail call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @out_sign.invalid_buf, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i64 0, i64 0), i32 %19) #10
  br label %27

23:                                               ; preds = %16
  %24 = zext i32 %19 to i64
  %25 = getelementptr inbounds [3 x i8*], [3 x i8*]* @out_sign.out_signs, i64 0, i64 %24
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %21, %23
  %28 = phi i8* [ getelementptr inbounds ([64 x i8], [64 x i8]* @out_sign.invalid_buf, i64 0, i64 0), %21 ], [ %26, %23 ]
  %29 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 6
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 5
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 7
  %36 = load i64, i64* %35, align 8
  %37 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.32, i64 0, i64 0), i32 %4, i64 %6, i8* %17, i8* %28, i32 %30, i32 %32, i32 %34, i64 %36)
  %38 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 8
  %39 = load %struct.itemplate*, %struct.itemplate** %38, align 8
  %40 = icmp eq %struct.itemplate* %39, null
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  br i1 %40, label %51, label %42

42:                                               ; preds = %27
  %43 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %39, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [0 x i8*], [0 x i8*]* @nasm_insn_names, i64 0, i64 %45
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %39, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33, i64 0, i64 0), i8* %47, i32 %49)
  br label %53

51:                                               ; preds = %27
  %52 = tail call i64 @fwrite(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i64 20, i64 1, %struct._IO_FILE* %41)
  br label %53

53:                                               ; preds = %51, %42
  %54 = load i32, i32* %7, align 4
  %55 = add i32 %54, -3
  %56 = icmp ult i32 %55, 3
  br i1 %56, label %57, label %78

57:                                               ; preds = %53
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %59 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 11
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %62 = load i64, i64* %61, align 8
  %63 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i64 0, i64 0), i32 %60, i64 %62)
  %64 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 12
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %70, label %67

67:                                               ; preds = %57
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %69 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0), i32 %65)
  br label %70

70:                                               ; preds = %57, %67
  %71 = load i32, i32* %7, align 4
  %72 = icmp eq i32 %71, 4
  br i1 %72, label %73, label %78

73:                                               ; preds = %70
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %75 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 13
  %76 = load i64, i64* %75, align 8
  %77 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i64 0, i64 0), i64 %76)
  br label %78

78:                                               ; preds = %53, %73, %70
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %80 = tail call i32 @putc(i32 10, %struct._IO_FILE* %79)
  %81 = load i32, i32* %7, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %154

83:                                               ; preds = %78
  %84 = load i64, i64* %35, align 8
  %85 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 9
  %86 = load i8*, i8** %85, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %88, label %91

88:                                               ; preds = %83
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %90 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %89)
  br label %154

91:                                               ; preds = %83
  %92 = load i64, i64* @dbg_max_data_dump, align 8
  %93 = icmp ne i64 %92, -1
  %94 = icmp ugt i64 %84, %92
  %95 = and i1 %93, %94
  br i1 %95, label %98, label %96

96:                                               ; preds = %91
  %97 = icmp eq i64 %84, 0
  br i1 %97, label %154, label %101

98:                                               ; preds = %91
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %100 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i64 %84)
  br label %154

101:                                              ; preds = %96, %148
  %102 = phi i64 [ %151, %148 ], [ 0, %96 ]
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %104 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %103)
  br label %105

105:                                              ; preds = %120, %101
  %106 = phi i64 [ 0, %101 ], [ %121, %120 ]
  %107 = add nuw nsw i64 %106, %102
  %108 = load i64, i64* %35, align 8
  %109 = icmp ult i64 %107, %108
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  br i1 %109, label %113, label %111

111:                                              ; preds = %105
  %112 = tail call i64 @fwrite(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0), i64 3, i64 1, %struct._IO_FILE* %110)
  br label %120

113:                                              ; preds = %105
  %114 = icmp eq i64 %106, 8
  %115 = select i1 %114, i32 45, i32 32
  %116 = getelementptr inbounds i8, i8* %86, i64 %107
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %110, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i64 0, i64 0), i32 %115, i32 %118)
  br label %120

120:                                              ; preds = %111, %113
  %121 = add nuw nsw i64 %106, 1
  %122 = icmp eq i64 %121, 16
  br i1 %122, label %123, label %105

123:                                              ; preds = %120
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %125 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %124)
  br label %126

126:                                              ; preds = %145, %123
  %127 = phi i64 [ 0, %123 ], [ %146, %145 ]
  %128 = add nuw nsw i64 %127, %102
  %129 = load i64, i64* %35, align 8
  %130 = icmp ult i64 %128, %129
  br i1 %130, label %134, label %131

131:                                              ; preds = %126
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %133 = tail call i32 @putc(i32 32, %struct._IO_FILE* %132)
  br label %145

134:                                              ; preds = %126
  %135 = getelementptr inbounds i8, i8* %86, i64 %128
  %136 = load i8, i8* %135, align 1
  %137 = add i8 %136, -32
  %138 = icmp ult i8 %137, 95
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  br i1 %138, label %140, label %143

140:                                              ; preds = %134
  %141 = zext i8 %136 to i32
  %142 = tail call i32 @putc(i32 %141, %struct._IO_FILE* %139)
  br label %145

143:                                              ; preds = %134
  %144 = tail call i32 @putc(i32 46, %struct._IO_FILE* %139)
  br label %145

145:                                              ; preds = %131, %143, %140
  %146 = add nuw nsw i64 %127, 1
  %147 = icmp eq i64 %146, 16
  br i1 %147, label %148, label %126

148:                                              ; preds = %145
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %150 = tail call i32 @putc(i32 10, %struct._IO_FILE* %149)
  %151 = add i64 %102, 16
  %152 = load i64, i64* %35, align 8
  %153 = icmp ult i64 %151, %152
  br i1 %153, label %101, label %154

154:                                              ; preds = %148, %96, %98, %88, %78
  tail call void @nasm_do_legacy_output(%struct.out_data* %0) #10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbg_legacy_out(i32, i8* nocapture readonly, i32, i64, i32, i32) #1 {
  %7 = icmp eq i32 %2, 3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  br i1 %7, label %9, label %20

9:                                                ; preds = %6
  %10 = trunc i64 %3 to i32
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 0, %10
  %13 = select i1 %11, i32 %12, i32 %10
  %14 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.56, i64 0, i64 0), i32 %0, i32 %13)
  %15 = bitcast i8* %1 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = trunc i64 %16 to i32
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %19 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.60, i64 0, i64 0), i32 %17, i32 %4, i32 %5)
  br label %56

20:                                               ; preds = %6
  %21 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.57, i64 0, i64 0), i32 %0, i64 %3, i64 %3)
  switch i32 %2, label %53 [
    i32 1, label %22
    i32 0, label %25
    i32 9, label %48
    i32 6, label %28
    i32 7, label %35
    i32 8, label %42
  ]

22:                                               ; preds = %20
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %24 = tail call i64 @fwrite(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.58, i64 0, i64 0), i64 10, i64 1, %struct._IO_FILE* %23)
  br label %56

25:                                               ; preds = %20
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %27 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %26)
  br label %56

28:                                               ; preds = %20
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %30 = bitcast i8* %1 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.61, i64 0, i64 0), i32 %33, i32 %4)
  br label %56

35:                                               ; preds = %20
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %37 = bitcast i8* %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 65535
  %41 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.62, i64 0, i64 0), i32 %40, i32 %4)
  br label %56

42:                                               ; preds = %20
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %44 = bitcast i8* %1 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.63, i64 0, i64 0), i32 %46, i32 %4)
  br label %56

48:                                               ; preds = %20
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %50 = bitcast i8* %1 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0), i64 %51, i32 %4)
  br label %56

53:                                               ; preds = %20
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %55 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %54)
  br label %56

56:                                               ; preds = %53, %48, %42, %35, %28, %9, %25, %22
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbg_deflabel(i8*, i32, i64, i32, i8*) #1 {
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %7 = icmp eq i32 %3, 2
  %8 = icmp eq i32 %3, 0
  %9 = select i1 %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)
  %10 = select i1 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i8* %9
  %11 = icmp eq i8* %4, null
  %12 = select i1 %11, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0)
  %13 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.66, i64 0, i64 0), i8* %0, i32 %1, i64 %2, i8* %10, i32 %3, i8* %12, i8* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dbg_section_names(i8*, i32* nocapture) #0 {
  %3 = tail call fastcc i32 @dbg_add_section(i8* %0, i32* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.67, i64 0, i64 0))
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dbg_herelabel(i8*, i32, i32, i32* nocapture, i8* nocapture) #0 {
  %6 = load i1, i1* @subsections_via_symbols, align 1
  %7 = icmp ne i32 %1, 0
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = load i32, i32* %3, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = tail call i32 @seg_alloc() #10
  store i32 %13, i32* %3, align 4
  store i8 1, i8* %4, align 1
  br label %14

14:                                               ; preds = %9, %12, %5
  %15 = phi i32 [ %13, %12 ], [ %10, %9 ], [ %2, %5 ]
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.71, i64 0, i64 0), i8* %0, i32 %1, i32 %2, i32 %15)
  ret i32 %15
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbg_sectalign(i32, i32) #1 {
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.72, i64 0, i64 0), i32 %0, i32 %1)
  ret void
}

declare i32 @null_segbase(i32) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @dbg_directive(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = icmp eq i32 %0, 21
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #10
  store i32 -1431655766, i32* %3, align 4
  %7 = call fastcc i32 @dbg_add_section(i8* %1, i32* nonnull %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.73, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #10
  br label %8

8:                                                ; preds = %2, %5
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %10 = zext i32 %0 to i64
  %11 = add nsw i64 %10, -3
  %12 = icmp ugt i64 %11, 39
  br i1 %12, label %17, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds [40 x i8*], [40 x i8*]* @directive_tbl, i64 0, i64 %11
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %13, %8
  %18 = tail call i8* @invalid_enum_str(i32 %0) #10
  br label %19

19:                                               ; preds = %13, %17
  %20 = phi i8* [ %18, %17 ], [ %15, %13 ]
  %21 = load i64, i64* @_passn, align 8
  %22 = load i32, i32* @_pass_type, align 4
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_pass_types, i64 0, i64 %23
  %25 = load i8*, i8** %24, align 8
  %26 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.74, i64 0, i64 0), i8* %20, i8* %1, i64 %21, i8* %25)
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal void @dbg_cleanup() #0 {
  %1 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %2 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %1, i64 0, i32 8
  %3 = load void ()*, void ()** %2, align 8
  tail call void %3() #10
  %4 = load %struct.Section*, %struct.Section** @dbgsect, align 8
  %5 = icmp eq %struct.Section* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %0, %6
  %7 = phi %struct.Section* [ %13, %6 ], [ %4, %0 ]
  %8 = bitcast %struct.Section* %7 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* bitcast (%struct.Section** @dbgsect to i64*), align 8
  %10 = getelementptr inbounds %struct.Section, %struct.Section* %7, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8
  tail call void @nasm_free(i8* %11) #10
  %12 = bitcast %struct.Section* %7 to i8*
  tail call void @nasm_free(i8* nonnull %12) #10
  %13 = load %struct.Section*, %struct.Section** @dbgsect, align 8
  %14 = icmp eq %struct.Section* %13, null
  br i1 %14, label %15, label %6

15:                                               ; preds = %6, %0
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbgdbg_init() #1 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %2 = tail call i64 @fwrite(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i64 19, i64 1, %struct._IO_FILE* %1)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbgdbg_linnum(i8*, i32, i32) #1 {
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0), i8* %0, i32 %1, i32 %2)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbgdbg_deflabel(i8*, i32, i64, i32, i8*) #1 {
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %7 = icmp eq i32 %3, 2
  %8 = icmp eq i32 %3, 0
  %9 = select i1 %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)
  %10 = select i1 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i8* %9
  %11 = icmp eq i8* %4, null
  %12 = select i1 %11, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0)
  %13 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0), i8* %0, i32 %1, i64 %2, i8* %10, i32 %3, i8* %12, i8* %4)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbgdbg_define(i8*, i8*) #1 {
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i8* %0, i8* %1)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @dbgdbg_typevalue(i32) #1 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %3 = lshr i32 %0, 3
  %4 = and i32 %3, 31
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [8 x i8*], [8 x i8*]* @types, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  %8 = lshr i32 %0, 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* %7, i32 %8)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @dbgdbg_output(i32, i8* nocapture) #3 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @dbgdbg_cleanup() #3 {
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @dbg_pragma(%struct.pragma* nocapture readonly) #0 {
  %2 = alloca i8*, align 8
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %4 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 0
  %7 = load %struct.pragma_facility*, %struct.pragma_facility** %6, align 8
  %8 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %7, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  %11 = select i1 %10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i8* %9
  %12 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = add nsw i64 %16, -3
  %18 = icmp ugt i64 %17, 39
  br i1 %18, label %23, label %19

19:                                               ; preds = %1
  %20 = getelementptr inbounds [40 x i8*], [40 x i8*]* @directive_tbl, i64 0, i64 %17
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %19, %1
  %24 = tail call i8* @invalid_enum_str(i32 %15) #10
  br label %25

25:                                               ; preds = %19, %23
  %26 = phi i8* [ %24, %23 ], [ %21, %19 ]
  %27 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 3
  %28 = load i8*, i8** %27, align 8
  %29 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.24, i64 0, i64 0), i8* %5, i8* %11, i8* %13, i8* %26, i8* %28)
  %30 = load %struct.pragma_facility*, %struct.pragma_facility** %6, align 8
  %31 = icmp eq %struct.pragma_facility* %30, getelementptr inbounds ([1 x %struct.pragma_facility], [1 x %struct.pragma_facility]* @dbg_pragma_list, i64 0, i64 0)
  br i1 %31, label %32, label %55

32:                                               ; preds = %25
  %33 = load i32, i32* %14, align 8
  switch i32 %33, label %55 [
    i32 40, label %34
    i32 42, label %53
    i32 38, label %54
  ]

34:                                               ; preds = %32
  %35 = load i8*, i8** %27, align 8
  %36 = tail call i32 @strcasecmp(i8* %35, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i64 0, i64 0)) #11
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  store i64 -1, i64* @dbg_max_data_dump, align 8
  br label %55

39:                                               ; preds = %34
  %40 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %41 = tail call i32* @__errno_location() #12
  store i32 0, i32* %41, align 4
  %42 = load i8*, i8** %27, align 8
  %43 = call i64 @strtoul(i8* %42, i8** nonnull %2, i32 0) #10
  %44 = load i32, i32* %41, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %39
  %47 = load i8*, i8** %2, align 8
  %48 = tail call i8* @nasm_skip_spaces(i8* %47) #10
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %52, label %51

51:                                               ; preds = %46, %39
  tail call void (i32, i8*, ...) @nasm_warn(i32 1507584, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0)) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #10
  br label %55

52:                                               ; preds = %46
  store i64 %43, i64* @dbg_max_data_dump, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #10
  br label %55

53:                                               ; preds = %32
  store i1 true, i1* @section_labels, align 1
  br label %55

54:                                               ; preds = %32
  store i1 true, i1* @subsections_via_symbols, align 1
  br label %55

55:                                               ; preds = %25, %32, %38, %54, %53, %52, %51
  %56 = phi i32 [ 2, %51 ], [ 1, %52 ], [ 1, %53 ], [ 1, %54 ], [ 1, %38 ], [ 1, %32 ], [ 1, %25 ]
  ret i32 %56
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #4

declare i8* @nasm_skip_spaces(i8*) local_unnamed_addr #2

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

declare i8* @invalid_enum_str(i32) local_unnamed_addr #2

declare i32 @seg_alloc() local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @putc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #4

declare void @nasm_do_legacy_output(%struct.out_data*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @dbg_add_section(i8*, i32* nocapture, i8*) unnamed_addr #0 {
  %4 = icmp eq i8* %0, null
  br i1 %4, label %5, label %10

5:                                                ; preds = %3
  store i32 16, i32* %1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %7 = load i32, i32* @init_seg, align 4
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.68, i64 0, i64 0), i32 %7)
  %9 = load i32, i32* @init_seg, align 4
  br label %57

10:                                               ; preds = %3
  %11 = tail call i64 @strcspn(i8* nonnull %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)) #11
  %12 = shl i64 %11, 32
  %13 = ashr exact i64 %12, 32
  %14 = tail call noalias i8* @nasm_strndup(i8* nonnull %0, i64 %13) #10
  %15 = getelementptr inbounds i8, i8* %0, i64 %13
  %16 = tail call i8* @nasm_skip_spaces(i8* %15) #10
  %17 = load %struct.Section*, %struct.Section** @dbgsect, align 8
  %18 = icmp eq %struct.Section* %17, null
  br i1 %18, label %36, label %19

19:                                               ; preds = %10, %29
  %20 = phi %struct.Section* [ %32, %29 ], [ %17, %10 ]
  %21 = phi i32 [ %30, %29 ], [ -1, %10 ]
  %22 = getelementptr inbounds %struct.Section, %struct.Section* %20, i64 0, i32 2
  %23 = load i8*, i8** %22, align 8
  %24 = tail call i32 @strcmp(i8* %23, i8* %14) #11
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.Section, %struct.Section* %20, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  br label %29

29:                                               ; preds = %19, %26
  %30 = phi i32 [ %21, %19 ], [ %28, %26 ]
  %31 = getelementptr inbounds %struct.Section, %struct.Section* %20, i64 0, i32 0
  %32 = load %struct.Section*, %struct.Section** %31, align 8
  %33 = icmp eq %struct.Section* %32, null
  br i1 %33, label %34, label %19

34:                                               ; preds = %29
  %35 = icmp eq i32 %30, -1
  br i1 %35, label %36, label %57

36:                                               ; preds = %10, %34
  %37 = tail call noalias i8* @nasm_malloc(i64 24) #13
  %38 = getelementptr inbounds i8, i8* %37, i64 16
  %39 = bitcast i8* %38 to i8**
  store i8* %14, i8** %39, align 8
  %40 = tail call i32 @seg_alloc() #10
  %41 = getelementptr inbounds i8, i8* %37, i64 8
  %42 = bitcast i8* %41 to i32*
  store i32 %40, i32* %42, align 8
  %43 = load i64, i64* bitcast (%struct.Section** @dbgsect to i64*), align 8
  %44 = bitcast i8* %37 to i64*
  store i64 %43, i64* %44, align 8
  store i8* %37, i8** bitcast (%struct.Section** @dbgsect to i8**), align 8
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %46 = load i64, i64* @_passn, align 8
  %47 = load i32, i32* @_pass_type, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_pass_types, i64 0, i64 %48
  %50 = load i8*, i8** %49, align 8
  %51 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.70, i64 0, i64 0), i8* %2, i8* nonnull %0, i8* %16, i64 %46, i8* %50, i32 %40)
  %52 = load i1, i1* @section_labels, align 1
  br i1 %52, label %57, label %53

53:                                               ; preds = %36
  %54 = load i8*, i8** %39, align 8
  %55 = load i32, i32* %42, align 8
  %56 = add nsw i32 %55, 1
  tail call void @backend_label(i8* %54, i32 %56, i64 0) #10
  br label %57

57:                                               ; preds = %34, %53, %36, %5
  %58 = phi i32 [ %9, %5 ], [ %40, %53 ], [ %40, %36 ], [ %30, %34 ]
  ret i32 %58
}

; Function Attrs: nofree nounwind readonly
declare i64 @strcspn(i8* nocapture, i8* nocapture) local_unnamed_addr #5

declare noalias i8* @nasm_strndup(i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_malloc(i64) local_unnamed_addr #8

declare void @backend_label(i8*, i32, i64) local_unnamed_addr #2

declare void @nasm_free(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
