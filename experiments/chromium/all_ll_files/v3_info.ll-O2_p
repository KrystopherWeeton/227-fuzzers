; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_info.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_info.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, {}*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.stack_st_ACCESS_DESCRIPTION = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.GENERAL_NAME_st = type { i32, %union.anon.1 }
%union.anon.1 = type { i8* }
%struct.conf_value_st = type { i8*, i8*, i8* }
%struct.ASN1_VALUE_st = type opaque
%struct.ACCESS_DESCRIPTION_st = type { %struct.asn1_object_st*, %struct.GENERAL_NAME_st* }

@AUTHORITY_INFO_ACCESS_it = hidden constant %struct.ASN1_ITEM_st { i8 0, i64 -1, %struct.ASN1_TEMPLATE_st* @AUTHORITY_INFO_ACCESS_item_tt, i64 0, i8* null, i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0) }, align 8
@v3_info = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 177, i32 4, %struct.ASN1_ITEM_st* @AUTHORITY_INFO_ACCESS_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, %struct.stack_st_ACCESS_DESCRIPTION*, %struct.stack_st_CONF_VALUE*)* @i2v_AUTHORITY_INFO_ACCESS to %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*), i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_ACCESS_DESCRIPTION* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_AUTHORITY_INFO_ACCESS to i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*), i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@v3_sinfo = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 398, i32 4, %struct.ASN1_ITEM_st* @AUTHORITY_INFO_ACCESS_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, %struct.stack_st_ACCESS_DESCRIPTION*, %struct.stack_st_CONF_VALUE*)* @i2v_AUTHORITY_INFO_ACCESS to %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*), i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* bitcast (%struct.stack_st_ACCESS_DESCRIPTION* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_AUTHORITY_INFO_ACCESS to i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*), i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@ACCESS_DESCRIPTION_seq_tt = internal constant [2 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_OBJECT_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), %struct.ASN1_ITEM_st* @GENERAL_NAME_it }], align 16
@.str = private unnamed_addr constant [19 x i8] c"ACCESS_DESCRIPTION\00", align 1
@ACCESS_DESCRIPTION_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([2 x %struct.ASN1_TEMPLATE_st], [2 x %struct.ASN1_TEMPLATE_st]* @ACCESS_DESCRIPTION_seq_tt, i32 0, i32 0), i64 2, i8* null, i64 16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0) }, align 8
@AUTHORITY_INFO_ACCESS_item_tt = internal constant %struct.ASN1_TEMPLATE_st { i64 4, i64 0, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), %struct.ASN1_ITEM_st* @ACCESS_DESCRIPTION_it }, align 8
@.str.1 = private unnamed_addr constant [22 x i8] c"AUTHORITY_INFO_ACCESS\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"method\00", align 1
@ASN1_OBJECT_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"location\00", align 1
@GENERAL_NAME_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.4 = private unnamed_addr constant [13 x i8] c"GeneralNames\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c" - \00", align 1
@.str.6 = private unnamed_addr constant [56 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_info.c\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"value=\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal %struct.stack_st_CONF_VALUE* @i2v_AUTHORITY_INFO_ACCESS(%struct.v3_ext_method*, %struct.stack_st_ACCESS_DESCRIPTION*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = alloca [80 x i8], align 16
  %5 = getelementptr inbounds [80 x i8], [80 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 80, i1 false)
  %6 = bitcast %struct.stack_st_ACCESS_DESCRIPTION* %1 to %struct.stack_st*
  %7 = call i64 @sk_num(%struct.stack_st* %6) #6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %44, label %9

9:                                                ; preds = %3, %35
  %10 = phi %struct.stack_st_CONF_VALUE* [ %16, %35 ], [ %2, %3 ]
  %11 = phi i64 [ %41, %35 ], [ 0, %3 ]
  %12 = call i8* @sk_value(%struct.stack_st* %6, i64 %11) #6
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  %14 = bitcast i8* %13 to %struct.GENERAL_NAME_st**
  %15 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %14, align 8
  %16 = call %struct.stack_st_CONF_VALUE* @i2v_GENERAL_NAME(%struct.v3_ext_method* %0, %struct.GENERAL_NAME_st* %15, %struct.stack_st_CONF_VALUE* %10) #6
  %17 = icmp eq %struct.stack_st_CONF_VALUE* %16, null
  br i1 %17, label %49, label %18

18:                                               ; preds = %9
  %19 = bitcast %struct.stack_st_CONF_VALUE* %16 to %struct.stack_st*
  %20 = call i8* @sk_value(%struct.stack_st* nonnull %19, i64 %11) #6
  %21 = bitcast i8* %12 to %struct.asn1_object_st**
  %22 = load %struct.asn1_object_st*, %struct.asn1_object_st** %21, align 8
  %23 = call i32 @i2t_ASN1_OBJECT(i8* nonnull %5, i32 80, %struct.asn1_object_st* %22) #6
  %24 = call i64 @strlen(i8* nonnull %5) #7
  %25 = getelementptr inbounds i8, i8* %20, i64 8
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = call i64 @strlen(i8* %27) #7
  %29 = add i64 %28, %24
  %30 = shl i64 %29, 32
  %31 = add i64 %30, 21474836480
  %32 = ashr exact i64 %31, 32
  %33 = call i8* @OPENSSL_malloc(i64 %32) #6
  %34 = icmp eq i8* %33, null
  br i1 %34, label %49, label %35

35:                                               ; preds = %18
  %36 = call i64 @OPENSSL_strlcpy(i8* nonnull %33, i8* nonnull %5, i64 %32) #6
  %37 = call i64 @OPENSSL_strlcat(i8* nonnull %33, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i64 %32) #6
  %38 = load i8*, i8** %26, align 8
  %39 = call i64 @OPENSSL_strlcat(i8* nonnull %33, i8* %38, i64 %32) #6
  %40 = load i8*, i8** %26, align 8
  call void @OPENSSL_free(i8* %40) #6
  store i8* %33, i8** %26, align 8
  %41 = add nuw i64 %11, 1
  %42 = call i64 @sk_num(%struct.stack_st* %6) #6
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %9, label %56

44:                                               ; preds = %3
  %45 = icmp eq %struct.stack_st_CONF_VALUE* %2, null
  br i1 %45, label %46, label %56

46:                                               ; preds = %44
  %47 = call %struct.stack_st* @sk_new_null() #6
  %48 = bitcast %struct.stack_st* %47 to %struct.stack_st_CONF_VALUE*
  br label %56

49:                                               ; preds = %9, %18
  %50 = phi %struct.stack_st_CONF_VALUE* [ %16, %18 ], [ %10, %9 ]
  call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 151) #6
  %51 = icmp eq %struct.stack_st_CONF_VALUE* %2, null
  %52 = icmp ne %struct.stack_st_CONF_VALUE* %50, null
  %53 = and i1 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = bitcast %struct.stack_st_CONF_VALUE* %50 to %struct.stack_st*
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %55, void (void (i8*)*, i8*)* nonnull @sk_CONF_VALUE_call_free_func, void (i8*)* bitcast (void (%struct.conf_value_st*)* @X509V3_conf_free to void (i8*)*)) #6
  br label %56

56:                                               ; preds = %35, %49, %54, %44, %46
  %57 = phi %struct.stack_st_CONF_VALUE* [ %48, %46 ], [ %2, %44 ], [ null, %54 ], [ null, %49 ], [ %16, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %5) #6
  ret %struct.stack_st_CONF_VALUE* %57
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.stack_st_ACCESS_DESCRIPTION* @v2i_AUTHORITY_INFO_ACCESS(%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = alloca %struct.conf_value_st, align 8
  %5 = bitcast %struct.conf_value_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #6
  %6 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 1
  %7 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 2
  %8 = bitcast %struct.conf_value_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  %9 = tail call %struct.stack_st* @sk_new_null() #6
  %10 = bitcast %struct.stack_st* %9 to %struct.stack_st_ACCESS_DESCRIPTION*
  %11 = icmp eq %struct.stack_st* %9, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %3
  %13 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %14 = call i64 @sk_num(%struct.stack_st* %13) #6
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %68, label %16

16:                                               ; preds = %12
  %17 = bitcast i8** %7 to i64*
  br label %19

18:                                               ; preds = %3
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 170) #6
  br label %68

19:                                               ; preds = %16, %63
  %20 = phi i64 [ 0, %16 ], [ %64, %63 ]
  %21 = call i8* @sk_value(%struct.stack_st* %13, i64 %20) #6
  %22 = call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @ACCESS_DESCRIPTION_it) #6
  %23 = bitcast %struct.ASN1_VALUE_st* %22 to %struct.ACCESS_DESCRIPTION_st*
  %24 = icmp eq %struct.ASN1_VALUE_st* %22, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %19
  %26 = bitcast %struct.ASN1_VALUE_st* %22 to i8*
  %27 = call i64 @sk_push(%struct.stack_st* nonnull %9, i8* nonnull %26) #6
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25, %19
  call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 177) #6
  br label %67

30:                                               ; preds = %25
  %31 = getelementptr inbounds i8, i8* %21, i64 8
  %32 = bitcast i8* %31 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @strchr(i8* %33, i32 59) #7
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %30
  call void @ERR_put_error(i32 20, i32 0, i32 135, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 182) #6
  br label %67

37:                                               ; preds = %30
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  store i8* %38, i8** %6, align 8
  %39 = getelementptr inbounds i8, i8* %21, i64 16
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %17, align 8
  %42 = getelementptr inbounds %struct.ACCESS_DESCRIPTION_st, %struct.ACCESS_DESCRIPTION_st* %23, i64 0, i32 1
  %43 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %42, align 8
  %44 = call %struct.GENERAL_NAME_st* @v2i_GENERAL_NAME_ex(%struct.GENERAL_NAME_st* %43, %struct.v3_ext_method* %0, %struct.v3_ext_ctx* %1, %struct.conf_value_st* nonnull %4, i32 0) #6
  %45 = icmp eq %struct.GENERAL_NAME_st* %44, null
  br i1 %45, label %67, label %46

46:                                               ; preds = %37
  %47 = ptrtoint i8* %34 to i64
  %48 = ptrtoint i8* %33 to i64
  %49 = sub i64 %47, %48
  %50 = shl i64 %49, 32
  %51 = add i64 %50, 4294967296
  %52 = ashr exact i64 %51, 32
  %53 = call i8* @OPENSSL_malloc(i64 %52) #6
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %56

55:                                               ; preds = %46
  call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 191) #6
  br label %67

56:                                               ; preds = %46
  %57 = load i8*, i8** %32, align 8
  %58 = call i64 @OPENSSL_strlcpy(i8* nonnull %53, i8* %57, i64 %52) #6
  %59 = call %struct.asn1_object_st* @OBJ_txt2obj(i8* nonnull %53, i32 0) #6
  %60 = bitcast %struct.ASN1_VALUE_st* %22 to %struct.asn1_object_st**
  store %struct.asn1_object_st* %59, %struct.asn1_object_st** %60, align 8
  %61 = icmp eq %struct.asn1_object_st* %59, null
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  call void @ERR_put_error(i32 20, i32 0, i32 101, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 197) #6
  call void (i32, ...) @ERR_add_error_data(i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* nonnull %53) #6
  call void @OPENSSL_free(i8* nonnull %53) #6
  br label %67

63:                                               ; preds = %56
  call void @OPENSSL_free(i8* nonnull %53) #6
  %64 = add nuw i64 %20, 1
  %65 = call i64 @sk_num(%struct.stack_st* %13) #6
  %66 = icmp ult i64 %64, %65
  br i1 %66, label %19, label %68

67:                                               ; preds = %37, %62, %55, %36, %29
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %9, void (void (i8*)*, i8*)* nonnull @sk_ACCESS_DESCRIPTION_call_free_func, void (i8*)* bitcast (void (%struct.ACCESS_DESCRIPTION_st*)* @ACCESS_DESCRIPTION_free to void (i8*)*)) #6
  br label %68

68:                                               ; preds = %63, %12, %67, %18
  %69 = phi %struct.stack_st_ACCESS_DESCRIPTION* [ null, %67 ], [ null, %18 ], [ %10, %12 ], [ %10, %63 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #6
  ret %struct.stack_st_ACCESS_DESCRIPTION* %69
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ACCESS_DESCRIPTION_st* @d2i_ACCESS_DESCRIPTION(%struct.ACCESS_DESCRIPTION_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.ACCESS_DESCRIPTION_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @ACCESS_DESCRIPTION_it) #6
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.ACCESS_DESCRIPTION_st*
  ret %struct.ACCESS_DESCRIPTION_st* %6
}

declare %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st**, i8**, i64, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_ACCESS_DESCRIPTION(%struct.ACCESS_DESCRIPTION_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.ACCESS_DESCRIPTION_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @ACCESS_DESCRIPTION_it) #6
  ret i32 %4
}

declare i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st*, i8**, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ACCESS_DESCRIPTION_st* @ACCESS_DESCRIPTION_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @ACCESS_DESCRIPTION_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.ACCESS_DESCRIPTION_st*
  ret %struct.ACCESS_DESCRIPTION_st* %2
}

declare %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ACCESS_DESCRIPTION_free(%struct.ACCESS_DESCRIPTION_st*) #0 {
  %2 = bitcast %struct.ACCESS_DESCRIPTION_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @ACCESS_DESCRIPTION_it) #6
  ret void
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_ACCESS_DESCRIPTION* @d2i_AUTHORITY_INFO_ACCESS(%struct.stack_st_ACCESS_DESCRIPTION**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.stack_st_ACCESS_DESCRIPTION** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @AUTHORITY_INFO_ACCESS_it) #6
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.stack_st_ACCESS_DESCRIPTION*
  ret %struct.stack_st_ACCESS_DESCRIPTION* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_AUTHORITY_INFO_ACCESS(%struct.stack_st_ACCESS_DESCRIPTION*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.stack_st_ACCESS_DESCRIPTION* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @AUTHORITY_INFO_ACCESS_it) #6
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_ACCESS_DESCRIPTION* @AUTHORITY_INFO_ACCESS_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @AUTHORITY_INFO_ACCESS_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.stack_st_ACCESS_DESCRIPTION*
  ret %struct.stack_st_ACCESS_DESCRIPTION* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @AUTHORITY_INFO_ACCESS_free(%struct.stack_st_ACCESS_DESCRIPTION*) local_unnamed_addr #0 {
  %2 = bitcast %struct.stack_st_ACCESS_DESCRIPTION* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @AUTHORITY_INFO_ACCESS_it) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2a_ACCESS_DESCRIPTION(%struct.bio_st*, %struct.ACCESS_DESCRIPTION_st* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ACCESS_DESCRIPTION_st, %struct.ACCESS_DESCRIPTION_st* %1, i64 0, i32 0
  %4 = load %struct.asn1_object_st*, %struct.asn1_object_st** %3, align 8
  %5 = tail call i32 @i2a_ASN1_OBJECT(%struct.bio_st* %0, %struct.asn1_object_st* %4) #6
  ret i32 2
}

declare i32 @i2a_ASN1_OBJECT(%struct.bio_st*, %struct.asn1_object_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare %struct.stack_st_CONF_VALUE* @i2v_GENERAL_NAME(%struct.v3_ext_method*, %struct.GENERAL_NAME_st*, %struct.stack_st_CONF_VALUE*) local_unnamed_addr #1

declare i32 @i2t_ASN1_OBJECT(i8*, i32, %struct.asn1_object_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare i64 @OPENSSL_strlcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i64 @OPENSSL_strlcat(i8*, i8*, i64) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @X509V3_conf_free(%struct.conf_value_st*) #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_CONF_VALUE_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.conf_value_st*)*
  %4 = bitcast i8* %1 to %struct.conf_value_st*
  tail call void %3(%struct.conf_value_st* %4) #6
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #5

declare %struct.GENERAL_NAME_st* @v2i_GENERAL_NAME_ex(%struct.GENERAL_NAME_st*, %struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.conf_value_st*, i32) local_unnamed_addr #1

declare %struct.asn1_object_st* @OBJ_txt2obj(i8*, i32) local_unnamed_addr #1

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_ACCESS_DESCRIPTION_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.ACCESS_DESCRIPTION_st*)*
  %4 = bitcast i8* %1 to %struct.ACCESS_DESCRIPTION_st*
  tail call void %3(%struct.ACCESS_DESCRIPTION_st* %4) #6
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
