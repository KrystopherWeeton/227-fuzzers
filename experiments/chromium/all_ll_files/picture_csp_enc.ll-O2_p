; ModuleID = '../../third_party/libwebp/src/enc/picture_csp_enc.c'
source_filename = "../../third_party/libwebp/src/enc/picture_csp_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8Random = type { i32, i32, [55 x i32], i32 }

@WebPHasAlpha8b = external local_unnamed_addr global i32 (i8*, i32)*, align 8
@WebPHasAlpha32b = external local_unnamed_addr global i32 (i8*, i32)*, align 8
@WebPExtractAlpha = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)*, align 8
@WebPConvertRGB24ToY = external local_unnamed_addr global void (i8*, i8*, i32)*, align 8
@WebPConvertBGR24ToY = external local_unnamed_addr global void (i8*, i8*, i32)*, align 8
@WebPConvertRGBA32ToUV = external local_unnamed_addr global void (i16*, i8*, i8*, i32)*, align 8
@InitGammaTablesS.InitGammaTablesS_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @InitGammaTablesS.InitGammaTablesS_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@kGammaTablesSOk = internal global i32 0, align 4
@kGammaToLinearTabS = internal unnamed_addr global [1024 x i32] zeroinitializer, align 16
@kLinearToGammaTabS = internal unnamed_addr global [34 x i32] zeroinitializer, align 16
@WebPSharpYUVUpdateY = external local_unnamed_addr global i64 (i16*, i16*, i16*, i32)*, align 8
@WebPSharpYUVUpdateRGB = external local_unnamed_addr global void (i16*, i16*, i16*, i32)*, align 8
@WebPSharpYUVFilterRow = external local_unnamed_addr global void (i16*, i16*, i32, i16*, i16*)*, align 8
@InitGammaTables.InitGammaTables_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @InitGammaTables.InitGammaTables_body_last_cpuinfo_used to i32 (i32)*), align 8
@kGammaTablesOk = internal global i32 0, align 4
@kGammaToLinearTab = internal unnamed_addr global [256 x i16] zeroinitializer, align 16
@kLinearToGammaTab = internal unnamed_addr global [33 x i32] zeroinitializer, align 16
@kInvAlpha = internal unnamed_addr constant [1021 x i32] [i32 0, i32 524288, i32 262144, i32 174762, i32 131072, i32 104857, i32 87381, i32 74898, i32 65536, i32 58254, i32 52428, i32 47662, i32 43690, i32 40329, i32 37449, i32 34952, i32 32768, i32 30840, i32 29127, i32 27594, i32 26214, i32 24966, i32 23831, i32 22795, i32 21845, i32 20971, i32 20164, i32 19418, i32 18724, i32 18078, i32 17476, i32 16912, i32 16384, i32 15887, i32 15420, i32 14979, i32 14563, i32 14169, i32 13797, i32 13443, i32 13107, i32 12787, i32 12483, i32 12192, i32 11915, i32 11650, i32 11397, i32 11155, i32 10922, i32 10699, i32 10485, i32 10280, i32 10082, i32 9892, i32 9709, i32 9532, i32 9362, i32 9198, i32 9039, i32 8886, i32 8738, i32 8594, i32 8456, i32 8322, i32 8192, i32 8065, i32 7943, i32 7825, i32 7710, i32 7598, i32 7489, i32 7384, i32 7281, i32 7182, i32 7084, i32 6990, i32 6898, i32 6808, i32 6721, i32 6636, i32 6553, i32 6472, i32 6393, i32 6316, i32 6241, i32 6168, i32 6096, i32 6026, i32 5957, i32 5890, i32 5825, i32 5761, i32 5698, i32 5637, i32 5577, i32 5518, i32 5461, i32 5405, i32 5349, i32 5295, i32 5242, i32 5190, i32 5140, i32 5090, i32 5041, i32 4993, i32 4946, i32 4899, i32 4854, i32 4809, i32 4766, i32 4723, i32 4681, i32 4639, i32 4599, i32 4559, i32 4519, i32 4481, i32 4443, i32 4405, i32 4369, i32 4332, i32 4297, i32 4262, i32 4228, i32 4194, i32 4161, i32 4128, i32 4096, i32 4064, i32 4032, i32 4002, i32 3971, i32 3942, i32 3912, i32 3883, i32 3855, i32 3826, i32 3799, i32 3771, i32 3744, i32 3718, i32 3692, i32 3666, i32 3640, i32 3615, i32 3591, i32 3566, i32 3542, i32 3518, i32 3495, i32 3472, i32 3449, i32 3426, i32 3404, i32 3382, i32 3360, i32 3339, i32 3318, i32 3297, i32 3276, i32 3256, i32 3236, i32 3216, i32 3196, i32 3177, i32 3158, i32 3139, i32 3120, i32 3102, i32 3084, i32 3066, i32 3048, i32 3030, i32 3013, i32 2995, i32 2978, i32 2962, i32 2945, i32 2928, i32 2912, i32 2896, i32 2880, i32 2864, i32 2849, i32 2833, i32 2818, i32 2803, i32 2788, i32 2774, i32 2759, i32 2744, i32 2730, i32 2716, i32 2702, i32 2688, i32 2674, i32 2661, i32 2647, i32 2634, i32 2621, i32 2608, i32 2595, i32 2582, i32 2570, i32 2557, i32 2545, i32 2532, i32 2520, i32 2508, i32 2496, i32 2484, i32 2473, i32 2461, i32 2449, i32 2438, i32 2427, i32 2416, i32 2404, i32 2394, i32 2383, i32 2372, i32 2361, i32 2351, i32 2340, i32 2330, i32 2319, i32 2309, i32 2299, i32 2289, i32 2279, i32 2269, i32 2259, i32 2250, i32 2240, i32 2231, i32 2221, i32 2212, i32 2202, i32 2193, i32 2184, i32 2175, i32 2166, i32 2157, i32 2148, i32 2139, i32 2131, i32 2122, i32 2114, i32 2105, i32 2097, i32 2088, i32 2080, i32 2072, i32 2064, i32 2056, i32 2048, i32 2040, i32 2032, i32 2024, i32 2016, i32 2008, i32 2001, i32 1993, i32 1985, i32 1978, i32 1971, i32 1963, i32 1956, i32 1949, i32 1941, i32 1934, i32 1927, i32 1920, i32 1913, i32 1906, i32 1899, i32 1892, i32 1885, i32 1879, i32 1872, i32 1865, i32 1859, i32 1852, i32 1846, i32 1839, i32 1833, i32 1826, i32 1820, i32 1814, i32 1807, i32 1801, i32 1795, i32 1789, i32 1783, i32 1777, i32 1771, i32 1765, i32 1759, i32 1753, i32 1747, i32 1741, i32 1736, i32 1730, i32 1724, i32 1718, i32 1713, i32 1707, i32 1702, i32 1696, i32 1691, i32 1685, i32 1680, i32 1675, i32 1669, i32 1664, i32 1659, i32 1653, i32 1648, i32 1643, i32 1638, i32 1633, i32 1628, i32 1623, i32 1618, i32 1613, i32 1608, i32 1603, i32 1598, i32 1593, i32 1588, i32 1583, i32 1579, i32 1574, i32 1569, i32 1565, i32 1560, i32 1555, i32 1551, i32 1546, i32 1542, i32 1537, i32 1533, i32 1528, i32 1524, i32 1519, i32 1515, i32 1510, i32 1506, i32 1502, i32 1497, i32 1493, i32 1489, i32 1485, i32 1481, i32 1476, i32 1472, i32 1468, i32 1464, i32 1460, i32 1456, i32 1452, i32 1448, i32 1444, i32 1440, i32 1436, i32 1432, i32 1428, i32 1424, i32 1420, i32 1416, i32 1413, i32 1409, i32 1405, i32 1401, i32 1398, i32 1394, i32 1390, i32 1387, i32 1383, i32 1379, i32 1376, i32 1372, i32 1368, i32 1365, i32 1361, i32 1358, i32 1354, i32 1351, i32 1347, i32 1344, i32 1340, i32 1337, i32 1334, i32 1330, i32 1327, i32 1323, i32 1320, i32 1317, i32 1314, i32 1310, i32 1307, i32 1304, i32 1300, i32 1297, i32 1294, i32 1291, i32 1288, i32 1285, i32 1281, i32 1278, i32 1275, i32 1272, i32 1269, i32 1266, i32 1263, i32 1260, i32 1257, i32 1254, i32 1251, i32 1248, i32 1245, i32 1242, i32 1239, i32 1236, i32 1233, i32 1230, i32 1227, i32 1224, i32 1222, i32 1219, i32 1216, i32 1213, i32 1210, i32 1208, i32 1205, i32 1202, i32 1199, i32 1197, i32 1194, i32 1191, i32 1188, i32 1186, i32 1183, i32 1180, i32 1178, i32 1175, i32 1172, i32 1170, i32 1167, i32 1165, i32 1162, i32 1159, i32 1157, i32 1154, i32 1152, i32 1149, i32 1147, i32 1144, i32 1142, i32 1139, i32 1137, i32 1134, i32 1132, i32 1129, i32 1127, i32 1125, i32 1122, i32 1120, i32 1117, i32 1115, i32 1113, i32 1110, i32 1108, i32 1106, i32 1103, i32 1101, i32 1099, i32 1096, i32 1094, i32 1092, i32 1089, i32 1087, i32 1085, i32 1083, i32 1081, i32 1078, i32 1076, i32 1074, i32 1072, i32 1069, i32 1067, i32 1065, i32 1063, i32 1061, i32 1059, i32 1057, i32 1054, i32 1052, i32 1050, i32 1048, i32 1046, i32 1044, i32 1042, i32 1040, i32 1038, i32 1036, i32 1034, i32 1032, i32 1030, i32 1028, i32 1026, i32 1024, i32 1022, i32 1020, i32 1018, i32 1016, i32 1014, i32 1012, i32 1010, i32 1008, i32 1006, i32 1004, i32 1002, i32 1000, i32 998, i32 996, i32 994, i32 992, i32 991, i32 989, i32 987, i32 985, i32 983, i32 981, i32 979, i32 978, i32 976, i32 974, i32 972, i32 970, i32 969, i32 967, i32 965, i32 963, i32 961, i32 960, i32 958, i32 956, i32 954, i32 953, i32 951, i32 949, i32 948, i32 946, i32 944, i32 942, i32 941, i32 939, i32 937, i32 936, i32 934, i32 932, i32 931, i32 929, i32 927, i32 926, i32 924, i32 923, i32 921, i32 919, i32 918, i32 916, i32 914, i32 913, i32 911, i32 910, i32 908, i32 907, i32 905, i32 903, i32 902, i32 900, i32 899, i32 897, i32 896, i32 894, i32 893, i32 891, i32 890, i32 888, i32 887, i32 885, i32 884, i32 882, i32 881, i32 879, i32 878, i32 876, i32 875, i32 873, i32 872, i32 870, i32 869, i32 868, i32 866, i32 865, i32 863, i32 862, i32 860, i32 859, i32 858, i32 856, i32 855, i32 853, i32 852, i32 851, i32 849, i32 848, i32 846, i32 845, i32 844, i32 842, i32 841, i32 840, i32 838, i32 837, i32 836, i32 834, i32 833, i32 832, i32 830, i32 829, i32 828, i32 826, i32 825, i32 824, i32 823, i32 821, i32 820, i32 819, i32 817, i32 816, i32 815, i32 814, i32 812, i32 811, i32 810, i32 809, i32 807, i32 806, i32 805, i32 804, i32 802, i32 801, i32 800, i32 799, i32 798, i32 796, i32 795, i32 794, i32 793, i32 791, i32 790, i32 789, i32 788, i32 787, i32 786, i32 784, i32 783, i32 782, i32 781, i32 780, i32 779, i32 777, i32 776, i32 775, i32 774, i32 773, i32 772, i32 771, i32 769, i32 768, i32 767, i32 766, i32 765, i32 764, i32 763, i32 762, i32 760, i32 759, i32 758, i32 757, i32 756, i32 755, i32 754, i32 753, i32 752, i32 751, i32 750, i32 748, i32 747, i32 746, i32 745, i32 744, i32 743, i32 742, i32 741, i32 740, i32 739, i32 738, i32 737, i32 736, i32 735, i32 734, i32 733, i32 732, i32 731, i32 730, i32 729, i32 728, i32 727, i32 726, i32 725, i32 724, i32 723, i32 722, i32 721, i32 720, i32 719, i32 718, i32 717, i32 716, i32 715, i32 714, i32 713, i32 712, i32 711, i32 710, i32 709, i32 708, i32 707, i32 706, i32 705, i32 704, i32 703, i32 702, i32 701, i32 700, i32 699, i32 699, i32 698, i32 697, i32 696, i32 695, i32 694, i32 693, i32 692, i32 691, i32 690, i32 689, i32 688, i32 688, i32 687, i32 686, i32 685, i32 684, i32 683, i32 682, i32 681, i32 680, i32 680, i32 679, i32 678, i32 677, i32 676, i32 675, i32 674, i32 673, i32 673, i32 672, i32 671, i32 670, i32 669, i32 668, i32 667, i32 667, i32 666, i32 665, i32 664, i32 663, i32 662, i32 661, i32 661, i32 660, i32 659, i32 658, i32 657, i32 657, i32 656, i32 655, i32 654, i32 653, i32 652, i32 652, i32 651, i32 650, i32 649, i32 648, i32 648, i32 647, i32 646, i32 645, i32 644, i32 644, i32 643, i32 642, i32 641, i32 640, i32 640, i32 639, i32 638, i32 637, i32 637, i32 636, i32 635, i32 634, i32 633, i32 633, i32 632, i32 631, i32 630, i32 630, i32 629, i32 628, i32 627, i32 627, i32 626, i32 625, i32 624, i32 624, i32 623, i32 622, i32 621, i32 621, i32 620, i32 619, i32 618, i32 618, i32 617, i32 616, i32 616, i32 615, i32 614, i32 613, i32 613, i32 612, i32 611, i32 611, i32 610, i32 609, i32 608, i32 608, i32 607, i32 606, i32 606, i32 605, i32 604, i32 604, i32 603, i32 602, i32 601, i32 601, i32 600, i32 599, i32 599, i32 598, i32 597, i32 597, i32 596, i32 595, i32 595, i32 594, i32 593, i32 593, i32 592, i32 591, i32 591, i32 590, i32 589, i32 589, i32 588, i32 587, i32 587, i32 586, i32 585, i32 585, i32 584, i32 583, i32 583, i32 582, i32 581, i32 581, i32 580, i32 579, i32 579, i32 578, i32 578, i32 577, i32 576, i32 576, i32 575, i32 574, i32 574, i32 573, i32 572, i32 572, i32 571, i32 571, i32 570, i32 569, i32 569, i32 568, i32 568, i32 567, i32 566, i32 566, i32 565, i32 564, i32 564, i32 563, i32 563, i32 562, i32 561, i32 561, i32 560, i32 560, i32 559, i32 558, i32 558, i32 557, i32 557, i32 556, i32 555, i32 555, i32 554, i32 554, i32 553, i32 553, i32 552, i32 551, i32 551, i32 550, i32 550, i32 549, i32 548, i32 548, i32 547, i32 547, i32 546, i32 546, i32 545, i32 544, i32 544, i32 543, i32 543, i32 542, i32 542, i32 541, i32 541, i32 540, i32 539, i32 539, i32 538, i32 538, i32 537, i32 537, i32 536, i32 536, i32 535, i32 534, i32 534, i32 533, i32 533, i32 532, i32 532, i32 531, i32 531, i32 530, i32 530, i32 529, i32 529, i32 528, i32 527, i32 527, i32 526, i32 526, i32 525, i32 525, i32 524, i32 524, i32 523, i32 523, i32 522, i32 522, i32 521, i32 521, i32 520, i32 520, i32 519, i32 519, i32 518, i32 518, i32 517, i32 517, i32 516, i32 516, i32 515, i32 515, i32 514, i32 514], align 16
@VP8LConvertBGRAToRGBA = external local_unnamed_addr global void (i32*, i32, i8*)*, align 8
@WebPPackRGB = external local_unnamed_addr global void (i8*, i8*, i8*, i32, i32, i32*)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureHasTransparency(%struct.WebPPicture* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct.WebPPicture* %0, null
  br i1 %2, label %58, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %34, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %9 = bitcast i32** %8 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 3
  %12 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  %17 = load i32, i32* %16, align 8
  %18 = shl i32 %17, 2
  %19 = icmp eq i8* %11, null
  br i1 %19, label %58, label %20

20:                                               ; preds = %7
  tail call void @WebPInitAlphaProcessing() #6
  %21 = icmp sgt i32 %15, 0
  br i1 %21, label %22, label %58

22:                                               ; preds = %20
  %23 = sext i32 %18 to i64
  br label %24

24:                                               ; preds = %31, %22
  %25 = phi i32 [ %15, %22 ], [ %27, %31 ]
  %26 = phi i8* [ %11, %22 ], [ %32, %31 ]
  %27 = add nsw i32 %25, -1
  %28 = load i32 (i8*, i32)*, i32 (i8*, i32)** @WebPHasAlpha32b, align 8
  %29 = tail call i32 %28(i8* %26, i32 %13) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %58

31:                                               ; preds = %24
  %32 = getelementptr inbounds i8, i8* %26, i64 %23
  %33 = icmp sgt i32 %27, 0
  br i1 %33, label %24, label %58

34:                                               ; preds = %3
  %35 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 9
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 10
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i8* %36, null
  br i1 %43, label %58, label %44

44:                                               ; preds = %34
  tail call void @WebPInitAlphaProcessing() #6
  %45 = icmp sgt i32 %40, 0
  br i1 %45, label %46, label %58

46:                                               ; preds = %44
  %47 = sext i32 %42 to i64
  br label %48

48:                                               ; preds = %55, %46
  %49 = phi i32 [ %40, %46 ], [ %51, %55 ]
  %50 = phi i8* [ %36, %46 ], [ %56, %55 ]
  %51 = add nsw i32 %49, -1
  %52 = load i32 (i8*, i32)*, i32 (i8*, i32)** @WebPHasAlpha8b, align 8
  %53 = tail call i32 %52(i8* %50, i32 %38) #6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8, i8* %50, i64 %47
  %57 = icmp sgt i32 %51, 0
  br i1 %57, label %48, label %58

58:                                               ; preds = %31, %24, %55, %48, %44, %34, %20, %7, %1
  %59 = phi i32 [ 0, %1 ], [ 0, %7 ], [ 0, %20 ], [ 0, %34 ], [ 0, %44 ], [ 0, %55 ], [ 1, %48 ], [ 0, %31 ], [ 1, %24 ]
  ret i32 %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureARGBToYUVADithered(%struct.WebPPicture*, i32, float) local_unnamed_addr #0 {
  %4 = icmp eq %struct.WebPPicture* %0, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 3) #6
  br label %26

11:                                               ; preds = %5
  %12 = and i32 %1, 3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 4) #6
  br label %26

16:                                               ; preds = %11
  %17 = bitcast i32* %7 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 3
  %19 = getelementptr inbounds i8, i8* %17, i64 2
  %20 = getelementptr inbounds i8, i8* %17, i64 1
  %21 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  %23 = load i32, i32* %22, align 8
  %24 = shl nsw i32 %23, 2
  %25 = tail call fastcc i32 @ImportYUVAFromRGBA(i8* %19, i8* %20, i8* nonnull %17, i8* %18, i32 4, i32 %24, float %2, i32 0, %struct.WebPPicture* nonnull %0) #6
  br label %26

26:                                               ; preds = %3, %9, %14, %16
  %27 = phi i32 [ %10, %9 ], [ %15, %14 ], [ %25, %16 ], [ 0, %3 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureARGBToYUVA(%struct.WebPPicture*, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.WebPPicture* %0, null
  br i1 %3, label %25, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 3) #6
  br label %25

10:                                               ; preds = %4
  %11 = and i32 %1, 3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %10
  %14 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 4) #6
  br label %25

15:                                               ; preds = %10
  %16 = bitcast i32* %6 to i8*
  %17 = getelementptr inbounds i8, i8* %16, i64 3
  %18 = getelementptr inbounds i8, i8* %16, i64 2
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  %20 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  %22 = load i32, i32* %21, align 8
  %23 = shl nsw i32 %22, 2
  %24 = tail call fastcc i32 @ImportYUVAFromRGBA(i8* %18, i8* %19, i8* nonnull %16, i8* %17, i32 4, i32 %23, float 0.000000e+00, i32 0, %struct.WebPPicture* nonnull %0) #6
  br label %25

25:                                               ; preds = %2, %8, %13, %15
  %26 = phi i32 [ %9, %8 ], [ %14, %13 ], [ %24, %15 ], [ 0, %2 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureSharpARGBToYUVA(%struct.WebPPicture*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.WebPPicture* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 3) #6
  br label %19

9:                                                ; preds = %3
  %10 = bitcast i32* %5 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 3
  %12 = getelementptr inbounds i8, i8* %10, i64 2
  %13 = getelementptr inbounds i8, i8* %10, i64 1
  %14 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 1
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  %16 = load i32, i32* %15, align 8
  %17 = shl nsw i32 %16, 2
  %18 = tail call fastcc i32 @ImportYUVAFromRGBA(i8* %12, i8* %13, i8* nonnull %10, i8* %11, i32 4, i32 %17, float 0.000000e+00, i32 1, %struct.WebPPicture* nonnull %0) #6
  br label %19

19:                                               ; preds = %1, %7, %9
  %20 = phi i32 [ %8, %7 ], [ %18, %9 ], [ 0, %1 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureSmartARGBToYUVA(%struct.WebPPicture*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.WebPPicture* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 3) #6
  br label %19

9:                                                ; preds = %3
  %10 = bitcast i32* %5 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 3
  %12 = getelementptr inbounds i8, i8* %10, i64 2
  %13 = getelementptr inbounds i8, i8* %10, i64 1
  %14 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 1
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  %16 = load i32, i32* %15, align 8
  %17 = shl nsw i32 %16, 2
  %18 = tail call fastcc i32 @ImportYUVAFromRGBA(i8* %12, i8* %13, i8* nonnull %10, i8* %11, i32 4, i32 %17, float 0.000000e+00, i32 1, %struct.WebPPicture* nonnull %0) #6
  br label %19

19:                                               ; preds = %1, %7, %9
  %20 = phi i32 [ %8, %7 ], [ %18, %9 ], [ 0, %1 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureYUVAToARGB(%struct.WebPPicture*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.WebPPicture* %0, null
  br i1 %2, label %204, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 5
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %11, %7, %3
  %16 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 3) #6
  br label %204

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 9
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 3) #6
  br label %204

28:                                               ; preds = %17, %22
  %29 = and i32 %19, 3
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %28
  %32 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* nonnull %0, i32 4) #6
  br label %204

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = tail call i32 @WebPPictureAllocARGB(%struct.WebPPicture* nonnull %0, i32 %35, i32 %37) #6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %204, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 0
  store i32 1, i32* %41, align 8
  %42 = load i32, i32* %34, align 8
  %43 = load i32, i32* %36, align 4
  %44 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  %45 = load i32, i32* %44, align 8
  %46 = shl nsw i32 %45, 2
  %47 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %48 = bitcast i32** %47 to i8**
  %49 = load i8*, i8** %48, align 8
  %50 = load i8*, i8** %8, align 8
  %51 = load i8*, i8** %12, align 8
  %52 = load i8*, i8** %4, align 8
  %53 = tail call void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32)* @WebPGetLinePairConverter(i32 1) #6
  tail call void %53(i8* %52, i8* null, i8* %50, i8* %51, i8* %50, i8* %51, i8* %49, i8* null, i32 %42) #6
  %54 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 7
  %55 = load i32, i32* %54, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %52, i64 %56
  %58 = sext i32 %46 to i64
  %59 = getelementptr inbounds i8, i8* %49, i64 %58
  %60 = icmp sgt i32 %43, 2
  br i1 %60, label %61, label %87

61:                                               ; preds = %40
  %62 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 8
  %63 = shl nsw i32 %45, 3
  %64 = sext i32 %63 to i64
  br label %65

65:                                               ; preds = %61, %65
  %66 = phi i32 [ %55, %61 ], [ %79, %65 ]
  %67 = phi i32 [ 1, %61 ], [ %84, %65 ]
  %68 = phi i8* [ %57, %61 ], [ %82, %65 ]
  %69 = phi i8* [ %51, %61 ], [ %75, %65 ]
  %70 = phi i8* [ %50, %61 ], [ %74, %65 ]
  %71 = phi i8* [ %59, %61 ], [ %83, %65 ]
  %72 = load i32, i32* %62, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  %75 = getelementptr inbounds i8, i8* %69, i64 %73
  %76 = sext i32 %66 to i64
  %77 = getelementptr inbounds i8, i8* %68, i64 %76
  %78 = getelementptr inbounds i8, i8* %71, i64 %58
  tail call void %53(i8* %68, i8* %77, i8* %70, i8* %69, i8* %74, i8* %75, i8* %71, i8* %78, i32 %42) #6
  %79 = load i32, i32* %54, align 8
  %80 = shl nsw i32 %79, 1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %68, i64 %81
  %83 = getelementptr inbounds i8, i8* %71, i64 %64
  %84 = add nuw nsw i32 %67, 2
  %85 = add nuw nsw i32 %67, 3
  %86 = icmp slt i32 %85, %43
  br i1 %86, label %65, label %87

87:                                               ; preds = %65, %40
  %88 = phi i8* [ %59, %40 ], [ %83, %65 ]
  %89 = phi i8* [ %50, %40 ], [ %74, %65 ]
  %90 = phi i8* [ %51, %40 ], [ %75, %65 ]
  %91 = phi i8* [ %57, %40 ], [ %82, %65 ]
  %92 = icmp sgt i32 %43, 1
  %93 = and i32 %43, 1
  %94 = icmp eq i32 %93, 0
  %95 = and i1 %92, %94
  br i1 %95, label %96, label %97

96:                                               ; preds = %87
  tail call void %53(i8* %91, i8* null, i8* %89, i8* %90, i8* %89, i8* %90, i8* %88, i8* null, i32 %42) #6
  br label %97

97:                                               ; preds = %96, %87
  %98 = load i32, i32* %18, align 4
  %99 = and i32 %98, 4
  %100 = icmp ne i32 %99, 0
  %101 = icmp sgt i32 %43, 0
  %102 = and i1 %100, %101
  br i1 %102, label %103, label %204

103:                                              ; preds = %97
  %104 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 9
  %105 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 10
  %106 = icmp sgt i32 %42, 0
  %107 = zext i32 %42 to i64
  %108 = icmp ult i32 %42, 8
  %109 = and i64 %107, 4294967288
  %110 = icmp eq i64 %109, %107
  %111 = and i64 %107, 1
  %112 = icmp eq i64 %111, 0
  %113 = sub nsw i64 0, %107
  br label %114

114:                                              ; preds = %201, %103
  %115 = phi i32 [ 0, %103 ], [ %202, %201 ]
  %116 = load i32*, i32** %47, align 8
  %117 = load i32, i32* %44, align 8
  %118 = mul nsw i32 %117, %115
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %116, i64 %119
  %121 = bitcast i32* %120 to i8*
  %122 = load i8*, i8** %104, align 8
  %123 = load i32, i32* %105, align 8
  %124 = mul nsw i32 %123, %115
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %122, i64 %125
  br i1 %106, label %127, label %201

127:                                              ; preds = %114
  br i1 %108, label %164, label %128

128:                                              ; preds = %127
  %129 = getelementptr i32, i32* %116, i64 %107
  %130 = getelementptr i32, i32* %129, i64 %119
  %131 = bitcast i32* %130 to i8*
  %132 = getelementptr i8, i8* %122, i64 %107
  %133 = getelementptr i8, i8* %132, i64 %125
  %134 = icmp ugt i8* %133, %121
  %135 = icmp ult i8* %126, %131
  %136 = and i1 %134, %135
  br i1 %136, label %164, label %137

137:                                              ; preds = %128, %137
  %138 = phi i64 [ %161, %137 ], [ 0, %128 ]
  %139 = getelementptr inbounds i32, i32* %120, i64 %138
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4, !alias.scope !2, !noalias !5
  %142 = getelementptr inbounds i32, i32* %139, i64 4
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4, !alias.scope !2, !noalias !5
  %145 = and <4 x i32> %141, <i32 16777215, i32 16777215, i32 16777215, i32 16777215>
  %146 = and <4 x i32> %144, <i32 16777215, i32 16777215, i32 16777215, i32 16777215>
  %147 = getelementptr inbounds i8, i8* %126, i64 %138
  %148 = bitcast i8* %147 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1, !alias.scope !5
  %150 = getelementptr inbounds i8, i8* %147, i64 4
  %151 = bitcast i8* %150 to <4 x i8>*
  %152 = load <4 x i8>, <4 x i8>* %151, align 1, !alias.scope !5
  %153 = zext <4 x i8> %149 to <4 x i32>
  %154 = zext <4 x i8> %152 to <4 x i32>
  %155 = shl nuw <4 x i32> %153, <i32 24, i32 24, i32 24, i32 24>
  %156 = shl nuw <4 x i32> %154, <i32 24, i32 24, i32 24, i32 24>
  %157 = or <4 x i32> %155, %145
  %158 = or <4 x i32> %156, %146
  %159 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %159, align 4, !alias.scope !2, !noalias !5
  %160 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %160, align 4, !alias.scope !2, !noalias !5
  %161 = add i64 %138, 8
  %162 = icmp eq i64 %161, %109
  br i1 %162, label %163, label %137, !llvm.loop !7

163:                                              ; preds = %137
  br i1 %110, label %201, label %164

164:                                              ; preds = %163, %128, %127
  %165 = phi i64 [ 0, %128 ], [ 0, %127 ], [ %109, %163 ]
  %166 = xor i64 %165, -1
  br i1 %112, label %177, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds i32, i32* %120, i64 %165
  %169 = load i32, i32* %168, align 4
  %170 = and i32 %169, 16777215
  %171 = getelementptr inbounds i8, i8* %126, i64 %165
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = shl nuw i32 %173, 24
  %175 = or i32 %174, %170
  store i32 %175, i32* %168, align 4
  %176 = or i64 %165, 1
  br label %177

177:                                              ; preds = %167, %164
  %178 = phi i64 [ %176, %167 ], [ %165, %164 ]
  %179 = icmp eq i64 %166, %113
  br i1 %179, label %201, label %180

180:                                              ; preds = %177, %180
  %181 = phi i64 [ %199, %180 ], [ %178, %177 ]
  %182 = getelementptr inbounds i32, i32* %120, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = and i32 %183, 16777215
  %185 = getelementptr inbounds i8, i8* %126, i64 %181
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = shl nuw i32 %187, 24
  %189 = or i32 %188, %184
  store i32 %189, i32* %182, align 4
  %190 = add nuw nsw i64 %181, 1
  %191 = getelementptr inbounds i32, i32* %120, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = and i32 %192, 16777215
  %194 = getelementptr inbounds i8, i8* %126, i64 %190
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = shl nuw i32 %196, 24
  %198 = or i32 %197, %193
  store i32 %198, i32* %191, align 4
  %199 = add nuw nsw i64 %181, 2
  %200 = icmp eq i64 %199, %107
  br i1 %200, label %201, label %180, !llvm.loop !9

201:                                              ; preds = %177, %180, %163, %114
  %202 = add nuw nsw i32 %115, 1
  %203 = icmp eq i32 %202, %43
  br i1 %203, label %204, label %114

204:                                              ; preds = %201, %97, %33, %1, %31, %26, %15
  %205 = phi i32 [ %16, %15 ], [ %27, %26 ], [ %32, %31 ], [ 0, %1 ], [ 0, %33 ], [ 1, %97 ], [ 1, %201 ]
  ret i32 %205
}

declare i32 @WebPEncodingSetError(%struct.WebPPicture*, i32) local_unnamed_addr #2

declare i32 @WebPPictureAllocARGB(%struct.WebPPicture*, i32, i32) local_unnamed_addr #2

declare void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32)* @WebPGetLinePairConverter(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureImportRGB(%struct.WebPPicture*, i8*, i32) local_unnamed_addr #0 {
  %4 = icmp ne %struct.WebPPicture* %0, null
  %5 = icmp ne i8* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call fastcc i32 @Import(%struct.WebPPicture* nonnull %0, i8* nonnull %1, i32 %2, i32 3, i32 0)
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i32 [ %8, %7 ], [ 0, %3 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @Import(%struct.WebPPicture*, i8*, i32, i32, i32) unnamed_addr #0 {
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = getelementptr inbounds i8, i8* %1, i64 2
  %8 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %5
  %16 = icmp eq i32 %4, 0
  %17 = getelementptr inbounds i8, i8* %1, i64 3
  %18 = select i1 %16, i8* null, i8* %17
  %19 = tail call fastcc i32 @ImportYUVAFromRGBA(i8* %1, i8* %6, i8* %7, i8* %18, i32 %3, i32 %2, float 0.000000e+00, i32 0, %struct.WebPPicture* %0)
  br label %64

20:                                               ; preds = %5
  %21 = tail call i32 @WebPPictureAlloc(%struct.WebPPicture* %0) #6
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %64, label %23

23:                                               ; preds = %20
  tail call void @VP8LDspInit() #6
  tail call void @WebPInitAlphaProcessing() #6
  %24 = icmp eq i32 %4, 0
  %25 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %26 = load i32*, i32** %25, align 8
  %27 = icmp sgt i32 %11, 0
  br i1 %24, label %32, label %28

28:                                               ; preds = %23
  br i1 %27, label %29, label %64

29:                                               ; preds = %28
  %30 = sext i32 %2 to i64
  %31 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  br label %36

32:                                               ; preds = %23
  br i1 %27, label %33, label %64

33:                                               ; preds = %32
  %34 = sext i32 %2 to i64
  %35 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  br label %49

36:                                               ; preds = %36, %29
  %37 = phi i32* [ %26, %29 ], [ %46, %36 ]
  %38 = phi i8* [ %1, %29 ], [ %43, %36 ]
  %39 = phi i32 [ 0, %29 ], [ %47, %36 ]
  %40 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA, align 8
  %41 = bitcast i8* %38 to i32*
  %42 = bitcast i32* %37 to i8*
  tail call void %40(i32* %41, i32 %9, i8* %42) #6
  %43 = getelementptr inbounds i8, i8* %38, i64 %30
  %44 = load i32, i32* %31, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %37, i64 %45
  %47 = add nuw nsw i32 %39, 1
  %48 = icmp eq i32 %47, %11
  br i1 %48, label %64, label %36

49:                                               ; preds = %49, %33
  %50 = phi i32* [ %26, %33 ], [ %61, %49 ]
  %51 = phi i8* [ %7, %33 ], [ %58, %49 ]
  %52 = phi i8* [ %6, %33 ], [ %57, %49 ]
  %53 = phi i8* [ %1, %33 ], [ %56, %49 ]
  %54 = phi i32 [ 0, %33 ], [ %62, %49 ]
  %55 = load void (i8*, i8*, i8*, i32, i32, i32*)*, void (i8*, i8*, i8*, i32, i32, i32*)** @WebPPackRGB, align 8
  tail call void %55(i8* %53, i8* %52, i8* %51, i32 %9, i32 %3, i32* %50) #6
  %56 = getelementptr inbounds i8, i8* %53, i64 %34
  %57 = getelementptr inbounds i8, i8* %52, i64 %34
  %58 = getelementptr inbounds i8, i8* %51, i64 %34
  %59 = load i32, i32* %35, align 8
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %50, i64 %60
  %62 = add nuw nsw i32 %54, 1
  %63 = icmp eq i32 %62, %11
  br i1 %63, label %64, label %49

64:                                               ; preds = %36, %49, %28, %32, %20, %15
  %65 = phi i32 [ %19, %15 ], [ 0, %20 ], [ 1, %32 ], [ 1, %28 ], [ 1, %49 ], [ 1, %36 ]
  ret i32 %65
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureImportRGBA(%struct.WebPPicture*, i8*, i32) local_unnamed_addr #0 {
  %4 = icmp ne %struct.WebPPicture* %0, null
  %5 = icmp ne i8* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds i8, i8* %1, i64 2
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = getelementptr inbounds i8, i8* %1, i64 3
  %19 = tail call fastcc i32 @ImportYUVAFromRGBA(i8* nonnull %1, i8* %17, i8* %16, i8* %18, i32 4, i32 %2, float 0.000000e+00, i32 0, %struct.WebPPicture* nonnull %0) #6
  br label %43

20:                                               ; preds = %7
  %21 = tail call i32 @WebPPictureAlloc(%struct.WebPPicture* nonnull %0) #6
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %43, label %23

23:                                               ; preds = %20
  tail call void @VP8LDspInit() #6
  tail call void @WebPInitAlphaProcessing() #6
  %24 = icmp sgt i32 %11, 0
  br i1 %24, label %25, label %43

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 12
  %27 = load i32*, i32** %26, align 8
  %28 = sext i32 %2 to i64
  %29 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 13
  br label %30

30:                                               ; preds = %30, %25
  %31 = phi i32* [ %27, %25 ], [ %40, %30 ]
  %32 = phi i8* [ %1, %25 ], [ %37, %30 ]
  %33 = phi i32 [ 0, %25 ], [ %41, %30 ]
  %34 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA, align 8
  %35 = bitcast i8* %32 to i32*
  %36 = bitcast i32* %31 to i8*
  tail call void %34(i32* %35, i32 %9, i8* %36) #6
  %37 = getelementptr inbounds i8, i8* %32, i64 %28
  %38 = load i32, i32* %29, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %31, i64 %39
  %41 = add nuw nsw i32 %33, 1
  %42 = icmp eq i32 %41, %11
  br i1 %42, label %43, label %30

43:                                               ; preds = %30, %23, %20, %15, %3
  %44 = phi i32 [ 0, %3 ], [ %19, %15 ], [ 0, %20 ], [ 1, %23 ], [ 1, %30 ]
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPPictureImportRGBX(%struct.WebPPicture*, i8*, i32) local_unnamed_addr #0 {
  %4 = icmp ne %struct.WebPPicture* %0, null
  %5 = icmp ne i8* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call fastcc i32 @Import(%struct.WebPPicture* nonnull %0, i8* nonnull %1, i32 %2, i32 4, i32 0)
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i32 [ %8, %7 ], [ 0, %3 ]
  ret i32 %10
}

declare void @WebPInitAlphaProcessing() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ImportYUVAFromRGBA(i8*, i8* nocapture readonly, i8*, i8*, i32, i32, float, i32, %struct.WebPPicture*) unnamed_addr #0 {
  %10 = alloca %struct.VP8Random, align 4
  %11 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i8* %3, null
  br i1 %15, label %46, label %16

16:                                               ; preds = %9
  tail call void @WebPInitAlphaProcessing() #6
  %17 = icmp eq i32 %4, 1
  %18 = add nsw i32 %14, -1
  %19 = icmp sgt i32 %14, 0
  br i1 %17, label %23, label %20

20:                                               ; preds = %16
  br i1 %19, label %21, label %46

21:                                               ; preds = %20
  %22 = sext i32 %5 to i64
  br label %36

23:                                               ; preds = %16
  br i1 %19, label %24, label %46

24:                                               ; preds = %23
  %25 = sext i32 %5 to i64
  br label %26

26:                                               ; preds = %32, %24
  %27 = phi i32 [ %18, %24 ], [ %34, %32 ]
  %28 = phi i8* [ %3, %24 ], [ %33, %32 ]
  %29 = load i32 (i8*, i32)*, i32 (i8*, i32)** @WebPHasAlpha8b, align 8
  %30 = tail call i32 %29(i8* %28, i32 %12) #6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %46

32:                                               ; preds = %26
  %33 = getelementptr inbounds i8, i8* %28, i64 %25
  %34 = add nsw i32 %27, -1
  %35 = icmp sgt i32 %27, 0
  br i1 %35, label %26, label %46

36:                                               ; preds = %42, %21
  %37 = phi i32 [ %18, %21 ], [ %44, %42 ]
  %38 = phi i8* [ %3, %21 ], [ %43, %42 ]
  %39 = load i32 (i8*, i32)*, i32 (i8*, i32)** @WebPHasAlpha32b, align 8
  %40 = tail call i32 %39(i8* %38, i32 %12) #6
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %36
  %43 = getelementptr inbounds i8, i8* %38, i64 %22
  %44 = add nsw i32 %37, -1
  %45 = icmp sgt i32 %37, 0
  br i1 %45, label %36, label %46

46:                                               ; preds = %36, %42, %26, %32, %9, %20, %23
  %47 = phi i32 [ 0, %9 ], [ 0, %23 ], [ 0, %20 ], [ 0, %32 ], [ 1, %26 ], [ 0, %42 ], [ 1, %36 ]
  %48 = icmp ult i8* %0, %2
  %49 = icmp ne i32 %47, 0
  %50 = select i1 %49, i32 4, i32 0
  %51 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 1
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 0
  store i32 0, i32* %52, align 8
  %53 = tail call i32 @WebPPictureAllocYUVA(%struct.WebPPicture* %8, i32 %12, i32 %14) #6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %1513, label %55

55:                                               ; preds = %46
  %56 = icmp slt i32 %12, 4
  %57 = icmp slt i32 %14, 4
  %58 = or i1 %56, %57
  %59 = icmp eq i32 %7, 0
  %60 = or i1 %59, %58
  br i1 %60, label %1137, label %61

61:                                               ; preds = %55
  %62 = load volatile i32 (i32)*, i32 (i32)** @InitGammaTablesS.InitGammaTablesS_body_last_cpuinfo_used, align 8
  %63 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %64 = icmp eq i32 (i32)* %62, %63
  br i1 %64, label %114, label %65

65:                                               ; preds = %61
  %66 = ptrtoint i32 (i32)* %63 to i64
  %67 = load volatile i32, i32* @kGammaTablesSOk, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %112

69:                                               ; preds = %65, %81
  %70 = phi i64 [ %87, %81 ], [ 0, %65 ]
  %71 = trunc i64 %70 to i32
  %72 = sitofp i32 %71 to double
  %73 = fmul double %72, 0x3F50040100401004
  %74 = fcmp ugt double %73, 0x3FB4CC54FB6D1A6E
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  %76 = fdiv double %73, 4.500000e+00
  br label %81

77:                                               ; preds = %69
  %78 = fadd double %73, 0x3FB96B844FBE3D2B
  %79 = fmul double %78, 0x3FED1C09536E448E
  %80 = tail call double @pow(double %79, double 0x4001C71C71C71C72) #6
  br label %81

81:                                               ; preds = %77, %75
  %82 = phi double [ %76, %75 ], [ %80, %77 ]
  %83 = fmul double %82, 1.638400e+04
  %84 = fadd double %83, 5.000000e-01
  %85 = fptoui double %84 to i32
  %86 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %70
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %70, 1
  %88 = icmp eq i64 %87, 1024
  br i1 %88, label %89, label %69

89:                                               ; preds = %81, %101
  %90 = phi i64 [ %107, %101 ], [ 0, %81 ]
  %91 = trunc i64 %90 to i32
  %92 = sitofp i32 %91 to double
  %93 = fmul double %92, 3.125000e-02
  %94 = fcmp ugt double %93, 0x3F927CBD51448945
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = fmul double %93, 4.500000e+00
  br label %101

97:                                               ; preds = %89
  %98 = tail call double @pow(double %93, double 0x3FDCCCCCCCCCCCCC) #6
  %99 = fmul double %98, 0x3FF196B844FBE3D3
  %100 = fadd double %99, 0xBFB96B844FBE3D2B
  br label %101

101:                                              ; preds = %97, %95
  %102 = phi double [ %96, %95 ], [ %100, %97 ]
  %103 = fmul double %102, 1.023000e+03
  %104 = fptoui double %103 to i32
  %105 = add i32 %104, 8192
  %106 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %90
  store i32 %105, i32* %106, align 4
  %107 = add nuw nsw i64 %90, 1
  %108 = icmp eq i64 %107, 33
  br i1 %108, label %109, label %89

109:                                              ; preds = %101
  %110 = load i32, i32* getelementptr inbounds ([34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 32), align 16
  store i32 %110, i32* getelementptr inbounds ([34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 33), align 4
  store volatile i32 1, i32* @kGammaTablesSOk, align 4
  %111 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  br label %112

112:                                              ; preds = %109, %65
  %113 = phi i64 [ %66, %65 ], [ %111, %109 ]
  store volatile i64 %113, i64* bitcast (i32 (i32)** @InitGammaTablesS.InitGammaTablesS_body_last_cpuinfo_used to i64*), align 8
  br label %114

114:                                              ; preds = %61, %112
  %115 = load i32, i32* %11, align 8
  %116 = add nsw i32 %115, 1
  %117 = and i32 %116, -2
  %118 = load i32, i32* %13, align 4
  %119 = add nsw i32 %118, 1
  %120 = and i32 %119, -2
  %121 = ashr i32 %116, 1
  %122 = ashr i32 %119, 1
  %123 = mul i32 %117, 6
  %124 = sext i32 %123 to i64
  %125 = tail call i8* @WebPSafeMalloc(i64 %124, i64 2) #6
  %126 = bitcast i8* %125 to i16*
  %127 = mul nsw i32 %120, %117
  %128 = sext i32 %127 to i64
  %129 = tail call i8* @WebPSafeMalloc(i64 %128, i64 2) #6
  %130 = bitcast i8* %129 to i16*
  %131 = tail call i8* @WebPSafeMalloc(i64 %128, i64 2) #6
  %132 = bitcast i8* %131 to i16*
  %133 = shl i32 %117, 1
  %134 = sext i32 %133 to i64
  %135 = tail call i8* @WebPSafeMalloc(i64 %134, i64 2) #6
  %136 = bitcast i8* %135 to i16*
  %137 = mul nsw i32 %121, 3
  %138 = mul nsw i32 %137, %122
  %139 = sext i32 %138 to i64
  %140 = tail call i8* @WebPSafeMalloc(i64 %139, i64 2) #6
  %141 = bitcast i8* %140 to i16*
  %142 = tail call i8* @WebPSafeMalloc(i64 %139, i64 2) #6
  %143 = bitcast i8* %142 to i16*
  %144 = sext i32 %137 to i64
  %145 = tail call i8* @WebPSafeMalloc(i64 %144, i64 2) #6
  %146 = bitcast i8* %145 to i16*
  %147 = sitofp i32 %117 to double
  %148 = fmul double %147, 3.000000e+00
  %149 = sitofp i32 %120 to double
  %150 = fmul double %148, %149
  %151 = fptoui double %150 to i64
  %152 = icmp eq i8* %129, null
  %153 = icmp eq i8* %140, null
  %154 = or i1 %152, %153
  %155 = icmp eq i8* %131, null
  %156 = or i1 %155, %154
  %157 = icmp eq i8* %142, null
  %158 = or i1 %157, %156
  %159 = icmp eq i8* %135, null
  %160 = or i1 %159, %158
  %161 = icmp eq i8* %145, null
  %162 = or i1 %161, %160
  %163 = icmp eq i8* %125, null
  %164 = or i1 %163, %162
  br i1 %164, label %165, label %168

165:                                              ; preds = %114
  %166 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* %8, i32 1) #6
  %167 = icmp eq i32 %166, 0
  br label %1124

168:                                              ; preds = %114
  %169 = mul nsw i32 %117, 3
  tail call void @WebPInitConvertARGBToYUV() #6
  %170 = load i32, i32* %13, align 4
  %171 = icmp sgt i32 %170, 0
  %172 = sext i32 %169 to i64
  br i1 %171, label %176, label %173

173:                                              ; preds = %168
  %174 = sext i32 %117 to i64
  %175 = zext i32 %117 to i64
  br label %229

176:                                              ; preds = %168
  %177 = getelementptr inbounds i16, i16* %126, i64 %172
  %178 = sext i32 %4 to i64
  %179 = sext i32 %5 to i64
  %180 = bitcast i16* %177 to i8*
  %181 = shl nsw i64 %172, 1
  %182 = icmp sgt i32 %117, 0
  %183 = sext i32 %117 to i64
  %184 = zext i32 %117 to i64
  %185 = shl nsw i64 %144, 1
  %186 = shl nsw i32 %5, 1
  %187 = sext i32 %186 to i64
  %188 = shl nsw i64 %183, 1
  %189 = shl nsw i64 %134, 1
  %190 = add i32 %115, 1
  %191 = lshr i32 %190, 1
  %192 = zext i32 %191 to i64
  %193 = shl nuw nsw i64 %192, 2
  %194 = add nsw i64 %193, %188
  %195 = shl nsw i64 %172, 1
  %196 = shl nsw i64 %134, 1
  %197 = add nsw i64 %195, %196
  %198 = getelementptr i8, i8* %125, i64 %197
  %199 = add nsw i64 %193, %195
  %200 = add nsw i64 %199, %196
  %201 = getelementptr i8, i8* %125, i64 %200
  %202 = add nsw i64 %195, %188
  %203 = getelementptr i8, i8* %125, i64 %202
  %204 = add nsw i64 %199, %188
  %205 = getelementptr i8, i8* %125, i64 %204
  %206 = getelementptr i8, i8* %125, i64 %195
  %207 = add nsw i64 %193, %195
  %208 = getelementptr i8, i8* %125, i64 %207
  %209 = shl nsw i64 %134, 1
  %210 = add i32 %115, 1
  %211 = lshr i32 %210, 1
  %212 = zext i32 %211 to i64
  %213 = shl nuw nsw i64 %212, 2
  %214 = shl nsw i64 %134, 1
  %215 = getelementptr i8, i8* %125, i64 %214
  %216 = add nsw i64 %213, %214
  %217 = getelementptr i8, i8* %125, i64 %216
  %218 = shl nsw i64 %183, 1
  %219 = getelementptr i8, i8* %125, i64 %218
  %220 = add nsw i64 %213, %218
  %221 = getelementptr i8, i8* %125, i64 %220
  %222 = getelementptr i8, i8* %125, i64 %213
  %223 = icmp ult i32 %117, 8
  %224 = and i64 %184, 4294967288
  %225 = icmp eq i64 %224, %184
  %226 = icmp ult i32 %117, 8
  %227 = and i64 %184, 4294967288
  %228 = icmp eq i64 %227, %184
  br label %245

229:                                              ; preds = %624, %173
  %230 = phi i64 [ %175, %173 ], [ %184, %624 ]
  %231 = phi i64 [ %174, %173 ], [ %183, %624 ]
  %232 = icmp sgt i32 %120, 0
  %233 = getelementptr inbounds i16, i16* %126, i64 %172
  %234 = add nsw i32 %120, -2
  %235 = add nsw i32 %117, -1
  %236 = ashr i32 %235, 1
  %237 = add nsw i32 %121, -1
  %238 = sext i32 %237 to i64
  %239 = sext i32 %235 to i64
  %240 = add nsw i32 %235, %117
  %241 = sext i32 %240 to i64
  %242 = sext i32 %121 to i64
  %243 = icmp sgt i32 %117, 0
  %244 = getelementptr inbounds i16, i16* %136, i64 %231
  br label %638

245:                                              ; preds = %624, %176
  %246 = phi i64 [ %637, %624 ], [ 0, %176 ]
  %247 = phi i32 [ %635, %624 ], [ %170, %176 ]
  %248 = phi i8* [ %631, %624 ], [ %0, %176 ]
  %249 = phi i8* [ %632, %624 ], [ %1, %176 ]
  %250 = phi i8* [ %633, %624 ], [ %2, %176 ]
  %251 = phi i16* [ %630, %624 ], [ %143, %176 ]
  %252 = phi i16* [ %628, %624 ], [ %141, %176 ]
  %253 = phi i16* [ %629, %624 ], [ %132, %176 ]
  %254 = phi i16* [ %627, %624 ], [ %130, %176 ]
  %255 = phi i32 [ %634, %624 ], [ 0, %176 ]
  %256 = mul i64 %209, %246
  %257 = getelementptr i8, i8* %129, i64 %256
  %258 = add i64 %213, %256
  %259 = getelementptr i8, i8* %129, i64 %258
  %260 = mul i64 %189, %246
  %261 = add i64 %188, %260
  %262 = getelementptr i8, i8* %129, i64 %261
  %263 = add i64 %194, %260
  %264 = getelementptr i8, i8* %129, i64 %263
  %265 = add nsw i32 %247, -1
  %266 = icmp eq i32 %255, %265
  %267 = load i32, i32* %11, align 8
  %268 = add nsw i32 %267, 1
  %269 = and i32 %268, -2
  %270 = icmp sgt i32 %267, 0
  br i1 %270, label %271, label %301

271:                                              ; preds = %245
  %272 = shl i32 %269, 1
  %273 = sext i32 %272 to i64
  %274 = sext i32 %269 to i64
  %275 = zext i32 %267 to i64
  br label %276

276:                                              ; preds = %276, %271
  %277 = phi i64 [ 0, %271 ], [ %299, %276 ]
  %278 = mul nsw i64 %277, %178
  %279 = getelementptr inbounds i8, i8* %248, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i16
  %282 = shl nuw nsw i16 %281, 2
  %283 = or i16 %282, 2
  %284 = getelementptr inbounds i16, i16* %126, i64 %277
  store i16 %283, i16* %284, align 2
  %285 = getelementptr inbounds i8, i8* %249, i64 %278
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i16
  %288 = shl nuw nsw i16 %287, 2
  %289 = or i16 %288, 2
  %290 = add nsw i64 %277, %274
  %291 = getelementptr inbounds i16, i16* %126, i64 %290
  store i16 %289, i16* %291, align 2
  %292 = getelementptr inbounds i8, i8* %250, i64 %278
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i16
  %295 = shl nuw nsw i16 %294, 2
  %296 = or i16 %295, 2
  %297 = add nsw i64 %277, %273
  %298 = getelementptr inbounds i16, i16* %126, i64 %297
  store i16 %296, i16* %298, align 2
  %299 = add nuw nsw i64 %277, 1
  %300 = icmp eq i64 %299, %275
  br i1 %300, label %301, label %276

301:                                              ; preds = %276, %245
  %302 = and i32 %267, 1
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %326, label %304

304:                                              ; preds = %301
  %305 = add nsw i32 %267, -1
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i16, i16* %126, i64 %306
  %308 = load i16, i16* %307, align 2
  %309 = sext i32 %267 to i64
  %310 = getelementptr inbounds i16, i16* %126, i64 %309
  store i16 %308, i16* %310, align 2
  %311 = add nsw i32 %269, %267
  %312 = add nsw i32 %311, -1
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i16, i16* %126, i64 %313
  %315 = load i16, i16* %314, align 2
  %316 = sext i32 %311 to i64
  %317 = getelementptr inbounds i16, i16* %126, i64 %316
  store i16 %315, i16* %317, align 2
  %318 = shl nsw i32 %269, 1
  %319 = add nsw i32 %318, %267
  %320 = add nsw i32 %319, -1
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i16, i16* %126, i64 %321
  %323 = load i16, i16* %322, align 2
  %324 = sext i32 %319 to i64
  %325 = getelementptr inbounds i16, i16* %126, i64 %324
  store i16 %323, i16* %325, align 2
  br label %326

326:                                              ; preds = %304, %301
  br i1 %266, label %390, label %327

327:                                              ; preds = %326
  %328 = getelementptr inbounds i8, i8* %248, i64 %179
  %329 = getelementptr inbounds i8, i8* %249, i64 %179
  %330 = getelementptr inbounds i8, i8* %250, i64 %179
  %331 = load i32, i32* %11, align 8
  %332 = add nsw i32 %331, 1
  %333 = and i32 %332, -2
  %334 = icmp sgt i32 %331, 0
  br i1 %334, label %335, label %365

335:                                              ; preds = %327
  %336 = shl i32 %333, 1
  %337 = sext i32 %336 to i64
  %338 = sext i32 %333 to i64
  %339 = zext i32 %331 to i64
  br label %340

340:                                              ; preds = %340, %335
  %341 = phi i64 [ 0, %335 ], [ %363, %340 ]
  %342 = mul nsw i64 %341, %178
  %343 = getelementptr inbounds i8, i8* %328, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i16
  %346 = shl nuw nsw i16 %345, 2
  %347 = or i16 %346, 2
  %348 = getelementptr inbounds i16, i16* %177, i64 %341
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i8, i8* %329, i64 %342
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i16
  %352 = shl nuw nsw i16 %351, 2
  %353 = or i16 %352, 2
  %354 = add nsw i64 %341, %338
  %355 = getelementptr inbounds i16, i16* %177, i64 %354
  store i16 %353, i16* %355, align 2
  %356 = getelementptr inbounds i8, i8* %330, i64 %342
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i16
  %359 = shl nuw nsw i16 %358, 2
  %360 = or i16 %359, 2
  %361 = add nsw i64 %341, %337
  %362 = getelementptr inbounds i16, i16* %177, i64 %361
  store i16 %360, i16* %362, align 2
  %363 = add nuw nsw i64 %341, 1
  %364 = icmp eq i64 %363, %339
  br i1 %364, label %365, label %340

365:                                              ; preds = %340, %327
  %366 = and i32 %331, 1
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %391, label %368

368:                                              ; preds = %365
  %369 = add nsw i32 %331, -1
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i16, i16* %177, i64 %370
  %372 = load i16, i16* %371, align 2
  %373 = sext i32 %331 to i64
  %374 = getelementptr inbounds i16, i16* %177, i64 %373
  store i16 %372, i16* %374, align 2
  %375 = add nsw i32 %333, %331
  %376 = add nsw i32 %375, -1
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds i16, i16* %177, i64 %377
  %379 = load i16, i16* %378, align 2
  %380 = sext i32 %375 to i64
  %381 = getelementptr inbounds i16, i16* %177, i64 %380
  store i16 %379, i16* %381, align 2
  %382 = shl nsw i32 %333, 1
  %383 = add nsw i32 %382, %331
  %384 = add nsw i32 %383, -1
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i16, i16* %177, i64 %385
  %387 = load i16, i16* %386, align 2
  %388 = sext i32 %383 to i64
  %389 = getelementptr inbounds i16, i16* %177, i64 %388
  store i16 %387, i16* %389, align 2
  br label %391

390:                                              ; preds = %326
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %180, i8* align 2 %125, i64 %181, i1 false) #6
  br label %391

391:                                              ; preds = %390, %368, %365
  br i1 %182, label %392, label %624

392:                                              ; preds = %391
  br i1 %223, label %434, label %393

393:                                              ; preds = %392
  %394 = icmp ult i8* %257, %217
  %395 = icmp ult i8* %215, %259
  %396 = and i1 %394, %395
  %397 = icmp ult i8* %257, %221
  %398 = icmp ult i8* %219, %259
  %399 = and i1 %397, %398
  %400 = or i1 %396, %399
  %401 = icmp ult i8* %257, %222
  %402 = icmp ult i8* %125, %259
  %403 = and i1 %401, %402
  %404 = or i1 %400, %403
  br i1 %404, label %434, label %405

405:                                              ; preds = %393, %405
  %406 = phi i64 [ %431, %405 ], [ 0, %393 ]
  %407 = getelementptr inbounds i16, i16* %126, i64 %406
  %408 = bitcast i16* %407 to <8 x i16>*
  %409 = load <8 x i16>, <8 x i16>* %408, align 2, !alias.scope !10
  %410 = zext <8 x i16> %409 to <8 x i32>
  %411 = add nsw i64 %406, %183
  %412 = getelementptr inbounds i16, i16* %126, i64 %411
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 2, !alias.scope !13
  %415 = zext <8 x i16> %414 to <8 x i32>
  %416 = add nsw i64 %406, %134
  %417 = getelementptr inbounds i16, i16* %126, i64 %416
  %418 = bitcast i16* %417 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 2, !alias.scope !15
  %420 = zext <8 x i16> %419 to <8 x i32>
  %421 = mul nuw nsw <8 x i32> %410, <i32 13933, i32 13933, i32 13933, i32 13933, i32 13933, i32 13933, i32 13933, i32 13933>
  %422 = mul nuw nsw <8 x i32> %415, <i32 46871, i32 46871, i32 46871, i32 46871, i32 46871, i32 46871, i32 46871, i32 46871>
  %423 = mul nuw nsw <8 x i32> %420, <i32 4732, i32 4732, i32 4732, i32 4732, i32 4732, i32 4732, i32 4732, i32 4732>
  %424 = add nuw nsw <8 x i32> %421, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %425 = add nuw <8 x i32> %424, %422
  %426 = add nuw <8 x i32> %425, %423
  %427 = lshr <8 x i32> %426, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %428 = trunc <8 x i32> %427 to <8 x i16>
  %429 = getelementptr inbounds i16, i16* %254, i64 %406
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %430, align 2, !alias.scope !17, !noalias !19
  %431 = add i64 %406, 8
  %432 = icmp eq i64 %431, %224
  br i1 %432, label %433, label %405, !llvm.loop !20

433:                                              ; preds = %405
  br i1 %225, label %460, label %434

434:                                              ; preds = %433, %393, %392
  %435 = phi i64 [ 0, %393 ], [ 0, %392 ], [ %224, %433 ]
  br label %436

436:                                              ; preds = %434, %436
  %437 = phi i64 [ %458, %436 ], [ %435, %434 ]
  %438 = getelementptr inbounds i16, i16* %126, i64 %437
  %439 = load i16, i16* %438, align 2
  %440 = zext i16 %439 to i32
  %441 = add nsw i64 %437, %183
  %442 = getelementptr inbounds i16, i16* %126, i64 %441
  %443 = load i16, i16* %442, align 2
  %444 = zext i16 %443 to i32
  %445 = add nsw i64 %437, %134
  %446 = getelementptr inbounds i16, i16* %126, i64 %445
  %447 = load i16, i16* %446, align 2
  %448 = zext i16 %447 to i32
  %449 = mul nuw nsw i32 %440, 13933
  %450 = mul nuw nsw i32 %444, 46871
  %451 = mul nuw nsw i32 %448, 4732
  %452 = add nuw nsw i32 %449, 32768
  %453 = add nuw i32 %452, %450
  %454 = add nuw i32 %453, %451
  %455 = lshr i32 %454, 16
  %456 = trunc i32 %455 to i16
  %457 = getelementptr inbounds i16, i16* %254, i64 %437
  store i16 %456, i16* %457, align 2
  %458 = add nuw nsw i64 %437, 1
  %459 = icmp eq i64 %458, %184
  br i1 %459, label %460, label %436, !llvm.loop !21

460:                                              ; preds = %436, %433
  %461 = getelementptr inbounds i16, i16* %254, i64 %183
  br i1 %226, label %503, label %462

462:                                              ; preds = %460
  %463 = icmp ult i8* %262, %201
  %464 = icmp ult i8* %198, %264
  %465 = and i1 %463, %464
  %466 = icmp ult i8* %262, %205
  %467 = icmp ult i8* %203, %264
  %468 = and i1 %466, %467
  %469 = or i1 %465, %468
  %470 = icmp ult i8* %262, %208
  %471 = icmp ult i8* %206, %264
  %472 = and i1 %470, %471
  %473 = or i1 %469, %472
  br i1 %473, label %503, label %474

474:                                              ; preds = %462, %474
  %475 = phi i64 [ %500, %474 ], [ 0, %462 ]
  %476 = getelementptr inbounds i16, i16* %177, i64 %475
  %477 = bitcast i16* %476 to <8 x i16>*
  %478 = load <8 x i16>, <8 x i16>* %477, align 2, !alias.scope !22
  %479 = zext <8 x i16> %478 to <8 x i32>
  %480 = add nsw i64 %475, %183
  %481 = getelementptr inbounds i16, i16* %177, i64 %480
  %482 = bitcast i16* %481 to <8 x i16>*
  %483 = load <8 x i16>, <8 x i16>* %482, align 2, !alias.scope !25
  %484 = zext <8 x i16> %483 to <8 x i32>
  %485 = add nsw i64 %475, %134
  %486 = getelementptr inbounds i16, i16* %177, i64 %485
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !27
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = mul nuw nsw <8 x i32> %479, <i32 13933, i32 13933, i32 13933, i32 13933, i32 13933, i32 13933, i32 13933, i32 13933>
  %491 = mul nuw nsw <8 x i32> %484, <i32 46871, i32 46871, i32 46871, i32 46871, i32 46871, i32 46871, i32 46871, i32 46871>
  %492 = mul nuw nsw <8 x i32> %489, <i32 4732, i32 4732, i32 4732, i32 4732, i32 4732, i32 4732, i32 4732, i32 4732>
  %493 = add nuw nsw <8 x i32> %490, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %494 = add nuw <8 x i32> %493, %491
  %495 = add nuw <8 x i32> %494, %492
  %496 = lshr <8 x i32> %495, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %497 = trunc <8 x i32> %496 to <8 x i16>
  %498 = getelementptr inbounds i16, i16* %461, i64 %475
  %499 = bitcast i16* %498 to <8 x i16>*
  store <8 x i16> %497, <8 x i16>* %499, align 2, !alias.scope !29, !noalias !31
  %500 = add i64 %475, 8
  %501 = icmp eq i64 %500, %227
  br i1 %501, label %502, label %474, !llvm.loop !32

502:                                              ; preds = %474
  br i1 %228, label %529, label %503

503:                                              ; preds = %502, %462, %460
  %504 = phi i64 [ 0, %462 ], [ 0, %460 ], [ %227, %502 ]
  br label %505

505:                                              ; preds = %503, %505
  %506 = phi i64 [ %527, %505 ], [ %504, %503 ]
  %507 = getelementptr inbounds i16, i16* %177, i64 %506
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i32
  %510 = add nsw i64 %506, %183
  %511 = getelementptr inbounds i16, i16* %177, i64 %510
  %512 = load i16, i16* %511, align 2
  %513 = zext i16 %512 to i32
  %514 = add nsw i64 %506, %134
  %515 = getelementptr inbounds i16, i16* %177, i64 %514
  %516 = load i16, i16* %515, align 2
  %517 = zext i16 %516 to i32
  %518 = mul nuw nsw i32 %509, 13933
  %519 = mul nuw nsw i32 %513, 46871
  %520 = mul nuw nsw i32 %517, 4732
  %521 = add nuw nsw i32 %518, 32768
  %522 = add nuw i32 %521, %519
  %523 = add nuw i32 %522, %520
  %524 = lshr i32 %523, 16
  %525 = trunc i32 %524 to i16
  %526 = getelementptr inbounds i16, i16* %461, i64 %506
  store i16 %525, i16* %526, align 2
  %527 = add nuw nsw i64 %506, 1
  %528 = icmp eq i64 %527, %184
  br i1 %528, label %529, label %505, !llvm.loop !33

529:                                              ; preds = %505, %502
  br label %530

530:                                              ; preds = %529, %530
  %531 = phi i64 [ %574, %530 ], [ 0, %529 ]
  %532 = getelementptr inbounds i16, i16* %126, i64 %531
  %533 = load i16, i16* %532, align 2
  %534 = zext i16 %533 to i64
  %535 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %534
  %536 = load i32, i32* %535, align 4
  %537 = add nsw i64 %531, %183
  %538 = getelementptr inbounds i16, i16* %126, i64 %537
  %539 = load i16, i16* %538, align 2
  %540 = zext i16 %539 to i64
  %541 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %540
  %542 = load i32, i32* %541, align 4
  %543 = add nsw i64 %531, %134
  %544 = getelementptr inbounds i16, i16* %126, i64 %543
  %545 = load i16, i16* %544, align 2
  %546 = zext i16 %545 to i64
  %547 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %546
  %548 = load i32, i32* %547, align 4
  %549 = mul nsw i32 %536, 13933
  %550 = mul nsw i32 %542, 46871
  %551 = mul nsw i32 %548, 4732
  %552 = add i32 %549, 32768
  %553 = add i32 %552, %550
  %554 = add i32 %553, %551
  %555 = ashr i32 %554, 16
  %556 = shl nsw i32 %555, 5
  %557 = lshr i32 %555, 9
  %558 = and i32 %557, 262143
  %559 = shl i32 %557, 14
  %560 = sub i32 %556, %559
  %561 = zext i32 %558 to i64
  %562 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %561
  %563 = load i32, i32* %562, align 4
  %564 = add nuw nsw i32 %558, 1
  %565 = zext i32 %564 to i64
  %566 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %565
  %567 = load i32, i32* %566, align 4
  %568 = sub i32 %567, %563
  %569 = mul i32 %560, %568
  %570 = lshr i32 %569, 14
  %571 = add i32 %570, %563
  %572 = trunc i32 %571 to i16
  %573 = getelementptr inbounds i16, i16* %253, i64 %531
  store i16 %572, i16* %573, align 2
  %574 = add nuw nsw i64 %531, 1
  %575 = icmp eq i64 %574, %184
  br i1 %575, label %576, label %530

576:                                              ; preds = %530
  %577 = getelementptr inbounds i16, i16* %253, i64 %183
  br label %578

578:                                              ; preds = %578, %576
  %579 = phi i64 [ %622, %578 ], [ 0, %576 ]
  %580 = getelementptr inbounds i16, i16* %177, i64 %579
  %581 = load i16, i16* %580, align 2
  %582 = zext i16 %581 to i64
  %583 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %582
  %584 = load i32, i32* %583, align 4
  %585 = add nsw i64 %579, %183
  %586 = getelementptr inbounds i16, i16* %177, i64 %585
  %587 = load i16, i16* %586, align 2
  %588 = zext i16 %587 to i64
  %589 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %588
  %590 = load i32, i32* %589, align 4
  %591 = add nsw i64 %579, %134
  %592 = getelementptr inbounds i16, i16* %177, i64 %591
  %593 = load i16, i16* %592, align 2
  %594 = zext i16 %593 to i64
  %595 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %594
  %596 = load i32, i32* %595, align 4
  %597 = mul nsw i32 %584, 13933
  %598 = mul nsw i32 %590, 46871
  %599 = mul nsw i32 %596, 4732
  %600 = add i32 %597, 32768
  %601 = add i32 %600, %598
  %602 = add i32 %601, %599
  %603 = ashr i32 %602, 16
  %604 = shl nsw i32 %603, 5
  %605 = lshr i32 %603, 9
  %606 = and i32 %605, 262143
  %607 = shl i32 %605, 14
  %608 = sub i32 %604, %607
  %609 = zext i32 %606 to i64
  %610 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %609
  %611 = load i32, i32* %610, align 4
  %612 = add nuw nsw i32 %606, 1
  %613 = zext i32 %612 to i64
  %614 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %613
  %615 = load i32, i32* %614, align 4
  %616 = sub i32 %615, %611
  %617 = mul i32 %608, %616
  %618 = lshr i32 %617, 14
  %619 = add i32 %618, %611
  %620 = trunc i32 %619 to i16
  %621 = getelementptr inbounds i16, i16* %577, i64 %579
  store i16 %620, i16* %621, align 2
  %622 = add nuw nsw i64 %579, 1
  %623 = icmp eq i64 %622, %184
  br i1 %623, label %624, label %578

624:                                              ; preds = %578, %391
  tail call fastcc void @UpdateChroma(i16* %126, i16* %177, i16* %251, i32 %121) #6
  %625 = bitcast i16* %252 to i8*
  %626 = bitcast i16* %251 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %625, i8* align 2 %626, i64 %185, i1 false) #6
  %627 = getelementptr inbounds i16, i16* %254, i64 %134
  %628 = getelementptr inbounds i16, i16* %252, i64 %144
  %629 = getelementptr inbounds i16, i16* %253, i64 %134
  %630 = getelementptr inbounds i16, i16* %251, i64 %144
  %631 = getelementptr inbounds i8, i8* %248, i64 %187
  %632 = getelementptr inbounds i8, i8* %249, i64 %187
  %633 = getelementptr inbounds i8, i8* %250, i64 %187
  %634 = add nuw nsw i32 %255, 2
  %635 = load i32, i32* %13, align 4
  %636 = icmp slt i32 %634, %635
  %637 = add i64 %246, 1
  br i1 %636, label %245, label %229

638:                                              ; preds = %857, %229
  %639 = phi i32 [ 0, %229 ], [ %858, %857 ]
  %640 = phi i64 [ -1, %229 ], [ %851, %857 ]
  br i1 %232, label %641, label %850

641:                                              ; preds = %638, %839
  %642 = phi i64 [ %842, %839 ], [ 0, %638 ]
  %643 = phi i16* [ %644, %839 ], [ %141, %638 ]
  %644 = phi i16* [ %653, %839 ], [ %141, %638 ]
  %645 = phi i16* [ %847, %839 ], [ %143, %638 ]
  %646 = phi i16* [ %845, %839 ], [ %141, %638 ]
  %647 = phi i16* [ %846, %839 ], [ %132, %638 ]
  %648 = phi i16* [ %844, %839 ], [ %130, %638 ]
  %649 = phi i32 [ %848, %839 ], [ 0, %638 ]
  %650 = icmp slt i32 %649, %234
  %651 = select i1 %650, i32 %137, i32 0
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds i16, i16* %644, i64 %652
  %654 = getelementptr inbounds i16, i16* %648, i64 %231
  %655 = getelementptr inbounds i16, i16* %648, i64 1
  %656 = getelementptr inbounds i16, i16* %654, i64 1
  %657 = getelementptr inbounds i16, i16* %648, i64 %239
  %658 = getelementptr inbounds i16, i16* %648, i64 %241
  br label %659

659:                                              ; preds = %659, %641
  %660 = phi i32 [ 2, %641 ], [ %744, %659 ]
  %661 = phi i16* [ %233, %641 ], [ %740, %659 ]
  %662 = phi i16* [ %126, %641 ], [ %739, %659 ]
  %663 = phi i16* [ %643, %641 ], [ %741, %659 ]
  %664 = phi i16* [ %653, %641 ], [ %743, %659 ]
  %665 = phi i16* [ %644, %641 ], [ %742, %659 ]
  %666 = load i16, i16* %665, align 2
  %667 = sext i16 %666 to i32
  %668 = load i16, i16* %663, align 2
  %669 = sext i16 %668 to i32
  %670 = load i16, i16* %648, align 2
  %671 = zext i16 %670 to i32
  %672 = mul nsw i32 %667, 3
  %673 = add nsw i32 %669, 2
  %674 = add nsw i32 %673, %672
  %675 = ashr i32 %674, 2
  %676 = add nsw i32 %675, %671
  %677 = icmp ugt i32 %676, 1023
  %678 = icmp slt i32 %676, 0
  %679 = select i1 %678, i32 0, i32 1023
  %680 = select i1 %677, i32 %679, i32 %676
  %681 = trunc i32 %680 to i16
  store i16 %681, i16* %662, align 2
  %682 = load i16, i16* %665, align 2
  %683 = sext i16 %682 to i32
  %684 = load i16, i16* %664, align 2
  %685 = sext i16 %684 to i32
  %686 = load i16, i16* %654, align 2
  %687 = zext i16 %686 to i32
  %688 = mul nsw i32 %683, 3
  %689 = add nsw i32 %685, 2
  %690 = add nsw i32 %689, %688
  %691 = ashr i32 %690, 2
  %692 = add nsw i32 %691, %687
  %693 = icmp ugt i32 %692, 1023
  %694 = icmp slt i32 %692, 0
  %695 = select i1 %694, i32 0, i32 1023
  %696 = select i1 %693, i32 %695, i32 %692
  %697 = trunc i32 %696 to i16
  store i16 %697, i16* %661, align 2
  %698 = load void (i16*, i16*, i32, i16*, i16*)*, void (i16*, i16*, i32, i16*, i16*)** @WebPSharpYUVFilterRow, align 8
  %699 = getelementptr inbounds i16, i16* %662, i64 1
  tail call void %698(i16* %665, i16* %663, i32 %236, i16* %655, i16* %699) #6
  %700 = load void (i16*, i16*, i32, i16*, i16*)*, void (i16*, i16*, i32, i16*, i16*)** @WebPSharpYUVFilterRow, align 8
  %701 = getelementptr inbounds i16, i16* %661, i64 1
  tail call void %700(i16* %665, i16* %664, i32 %236, i16* %656, i16* %701) #6
  %702 = getelementptr inbounds i16, i16* %665, i64 %238
  %703 = load i16, i16* %702, align 2
  %704 = sext i16 %703 to i32
  %705 = getelementptr inbounds i16, i16* %663, i64 %238
  %706 = load i16, i16* %705, align 2
  %707 = sext i16 %706 to i32
  %708 = load i16, i16* %657, align 2
  %709 = zext i16 %708 to i32
  %710 = mul nsw i32 %704, 3
  %711 = add nsw i32 %707, 2
  %712 = add nsw i32 %711, %710
  %713 = ashr i32 %712, 2
  %714 = add nsw i32 %713, %709
  %715 = icmp ugt i32 %714, 1023
  %716 = icmp slt i32 %714, 0
  %717 = select i1 %716, i32 0, i32 1023
  %718 = select i1 %715, i32 %717, i32 %714
  %719 = trunc i32 %718 to i16
  %720 = getelementptr inbounds i16, i16* %662, i64 %239
  store i16 %719, i16* %720, align 2
  %721 = load i16, i16* %702, align 2
  %722 = sext i16 %721 to i32
  %723 = getelementptr inbounds i16, i16* %664, i64 %238
  %724 = load i16, i16* %723, align 2
  %725 = sext i16 %724 to i32
  %726 = load i16, i16* %658, align 2
  %727 = zext i16 %726 to i32
  %728 = mul nsw i32 %722, 3
  %729 = add nsw i32 %725, 2
  %730 = add nsw i32 %729, %728
  %731 = ashr i32 %730, 2
  %732 = add nsw i32 %731, %727
  %733 = icmp ugt i32 %732, 1023
  %734 = icmp slt i32 %732, 0
  %735 = select i1 %734, i32 0, i32 1023
  %736 = select i1 %733, i32 %735, i32 %732
  %737 = trunc i32 %736 to i16
  %738 = getelementptr inbounds i16, i16* %661, i64 %239
  store i16 %737, i16* %738, align 2
  %739 = getelementptr inbounds i16, i16* %662, i64 %231
  %740 = getelementptr inbounds i16, i16* %661, i64 %231
  %741 = getelementptr inbounds i16, i16* %663, i64 %242
  %742 = getelementptr inbounds i16, i16* %665, i64 %242
  %743 = getelementptr inbounds i16, i16* %664, i64 %242
  %744 = add nsw i32 %660, -1
  %745 = icmp eq i32 %660, 0
  br i1 %745, label %746, label %659

746:                                              ; preds = %659
  br i1 %243, label %747, label %839

747:                                              ; preds = %746, %747
  %748 = phi i64 [ %791, %747 ], [ 0, %746 ]
  %749 = getelementptr inbounds i16, i16* %126, i64 %748
  %750 = load i16, i16* %749, align 2
  %751 = zext i16 %750 to i64
  %752 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %751
  %753 = load i32, i32* %752, align 4
  %754 = add nsw i64 %748, %231
  %755 = getelementptr inbounds i16, i16* %126, i64 %754
  %756 = load i16, i16* %755, align 2
  %757 = zext i16 %756 to i64
  %758 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %757
  %759 = load i32, i32* %758, align 4
  %760 = add nsw i64 %748, %134
  %761 = getelementptr inbounds i16, i16* %126, i64 %760
  %762 = load i16, i16* %761, align 2
  %763 = zext i16 %762 to i64
  %764 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %763
  %765 = load i32, i32* %764, align 4
  %766 = mul nsw i32 %753, 13933
  %767 = mul nsw i32 %759, 46871
  %768 = mul nsw i32 %765, 4732
  %769 = add i32 %766, 32768
  %770 = add i32 %769, %767
  %771 = add i32 %770, %768
  %772 = ashr i32 %771, 16
  %773 = shl nsw i32 %772, 5
  %774 = lshr i32 %772, 9
  %775 = and i32 %774, 262143
  %776 = shl i32 %774, 14
  %777 = sub i32 %773, %776
  %778 = zext i32 %775 to i64
  %779 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %778
  %780 = load i32, i32* %779, align 4
  %781 = add nuw nsw i32 %775, 1
  %782 = zext i32 %781 to i64
  %783 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %782
  %784 = load i32, i32* %783, align 4
  %785 = sub i32 %784, %780
  %786 = mul i32 %777, %785
  %787 = lshr i32 %786, 14
  %788 = add i32 %787, %780
  %789 = trunc i32 %788 to i16
  %790 = getelementptr inbounds i16, i16* %136, i64 %748
  store i16 %789, i16* %790, align 2
  %791 = add nuw nsw i64 %748, 1
  %792 = icmp eq i64 %791, %230
  br i1 %792, label %793, label %747

793:                                              ; preds = %747, %793
  %794 = phi i64 [ %837, %793 ], [ 0, %747 ]
  %795 = getelementptr inbounds i16, i16* %233, i64 %794
  %796 = load i16, i16* %795, align 2
  %797 = zext i16 %796 to i64
  %798 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %797
  %799 = load i32, i32* %798, align 4
  %800 = add nsw i64 %794, %231
  %801 = getelementptr inbounds i16, i16* %233, i64 %800
  %802 = load i16, i16* %801, align 2
  %803 = zext i16 %802 to i64
  %804 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %803
  %805 = load i32, i32* %804, align 4
  %806 = add nsw i64 %794, %134
  %807 = getelementptr inbounds i16, i16* %233, i64 %806
  %808 = load i16, i16* %807, align 2
  %809 = zext i16 %808 to i64
  %810 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %809
  %811 = load i32, i32* %810, align 4
  %812 = mul nsw i32 %799, 13933
  %813 = mul nsw i32 %805, 46871
  %814 = mul nsw i32 %811, 4732
  %815 = add i32 %812, 32768
  %816 = add i32 %815, %813
  %817 = add i32 %816, %814
  %818 = ashr i32 %817, 16
  %819 = shl nsw i32 %818, 5
  %820 = lshr i32 %818, 9
  %821 = and i32 %820, 262143
  %822 = shl i32 %820, 14
  %823 = sub i32 %819, %822
  %824 = zext i32 %821 to i64
  %825 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %824
  %826 = load i32, i32* %825, align 4
  %827 = add nuw nsw i32 %821, 1
  %828 = zext i32 %827 to i64
  %829 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %828
  %830 = load i32, i32* %829, align 4
  %831 = sub i32 %830, %826
  %832 = mul i32 %823, %831
  %833 = lshr i32 %832, 14
  %834 = add i32 %833, %826
  %835 = trunc i32 %834 to i16
  %836 = getelementptr inbounds i16, i16* %244, i64 %794
  store i16 %835, i16* %836, align 2
  %837 = add nuw nsw i64 %794, 1
  %838 = icmp eq i64 %837, %230
  br i1 %838, label %839, label %793

839:                                              ; preds = %793, %746
  tail call fastcc void @UpdateChroma(i16* %126, i16* %233, i16* %146, i32 %121) #6
  %840 = load i64 (i16*, i16*, i16*, i32)*, i64 (i16*, i16*, i16*, i32)** @WebPSharpYUVUpdateY, align 8
  %841 = tail call i64 %840(i16* %647, i16* %136, i16* %648, i32 %133) #6
  %842 = add i64 %841, %642
  %843 = load void (i16*, i16*, i16*, i32)*, void (i16*, i16*, i16*, i32)** @WebPSharpYUVUpdateRGB, align 8
  tail call void %843(i16* %645, i16* %146, i16* %646, i32 %137) #6
  %844 = getelementptr inbounds i16, i16* %648, i64 %134
  %845 = getelementptr inbounds i16, i16* %646, i64 %144
  %846 = getelementptr inbounds i16, i16* %647, i64 %134
  %847 = getelementptr inbounds i16, i16* %645, i64 %144
  %848 = add nuw nsw i32 %649, 2
  %849 = icmp slt i32 %848, %120
  br i1 %849, label %641, label %850

850:                                              ; preds = %839, %638
  %851 = phi i64 [ 0, %638 ], [ %842, %839 ]
  %852 = icmp eq i32 %639, 0
  br i1 %852, label %857, label %853

853:                                              ; preds = %850
  %854 = icmp ult i64 %851, %151
  %855 = icmp ugt i64 %851, %640
  %856 = or i1 %854, %855
  br i1 %856, label %860, label %857

857:                                              ; preds = %853, %850
  %858 = add nuw nsw i32 %639, 1
  %859 = icmp eq i32 %858, 4
  br i1 %859, label %860, label %638

860:                                              ; preds = %857, %853
  %861 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 5
  %862 = load i8*, i8** %861, align 8
  %863 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 6
  %864 = load i8*, i8** %863, align 8
  %865 = load i32, i32* %11, align 8
  %866 = add nsw i32 %865, 1
  %867 = and i32 %866, -2
  %868 = load i32, i32* %13, align 4
  %869 = add nsw i32 %868, 1
  %870 = ashr i32 %866, 1
  %871 = ashr i32 %869, 1
  %872 = icmp sgt i32 %868, 0
  br i1 %872, label %873, label %1124

873:                                              ; preds = %860
  %874 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 4
  %875 = load i8*, i8** %874, align 8
  %876 = sext i32 %867 to i64
  %877 = mul i32 %870, 3
  %878 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 7
  br label %879

879:                                              ; preds = %951, %873
  %880 = phi i32 [ %868, %873 ], [ %952, %951 ]
  %881 = phi i32 [ %865, %873 ], [ %953, %951 ]
  %882 = phi i16* [ %130, %873 ], [ %954, %951 ]
  %883 = phi i16* [ %141, %873 ], [ %958, %951 ]
  %884 = phi i32 [ 0, %873 ], [ %962, %951 ]
  %885 = phi i8* [ %875, %873 ], [ %961, %951 ]
  %886 = icmp sgt i32 %881, 0
  br i1 %886, label %905, label %951

887:                                              ; preds = %951
  %888 = icmp sgt i32 %865, 0
  %889 = sext i32 %877 to i64
  %890 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 8
  %891 = sext i32 %870 to i64
  %892 = icmp sgt i64 %891, 1
  %893 = select i1 %892, i64 %891, i64 1
  %894 = icmp sgt i64 %891, 1
  %895 = select i1 %894, i64 %891, i64 1
  %896 = shl nsw i64 %876, 1
  %897 = shl nsw i64 %889, 1
  %898 = shl nuw nsw i64 %895, 1
  %899 = add nsw i64 %898, %896
  %900 = shl nsw i64 %891, 1
  %901 = add nsw i64 %898, %900
  %902 = icmp ult i64 %893, 8
  %903 = and i64 %893, 9223372036854775800
  %904 = icmp eq i64 %893, %903
  br label %964

905:                                              ; preds = %879, %905
  %906 = phi i64 [ %945, %905 ], [ 0, %879 ]
  %907 = trunc i64 %906 to i32
  %908 = lshr i32 %907, 1
  %909 = getelementptr inbounds i16, i16* %882, i64 %906
  %910 = load i16, i16* %909, align 2
  %911 = zext i16 %910 to i32
  %912 = zext i32 %908 to i64
  %913 = getelementptr inbounds i16, i16* %883, i64 %912
  %914 = load i16, i16* %913, align 2
  %915 = sext i16 %914 to i32
  %916 = add nsw i32 %915, %911
  %917 = add nsw i32 %908, %870
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i16, i16* %883, i64 %918
  %920 = load i16, i16* %919, align 2
  %921 = sext i16 %920 to i32
  %922 = add nsw i32 %921, %911
  %923 = add nsw i32 %908, %867
  %924 = sext i32 %923 to i64
  %925 = getelementptr inbounds i16, i16* %883, i64 %924
  %926 = load i16, i16* %925, align 2
  %927 = sext i16 %926 to i32
  %928 = add nsw i32 %927, %911
  %929 = mul nsw i32 %916, 16839
  %930 = mul nsw i32 %922, 33059
  %931 = mul nsw i32 %928, 6420
  %932 = add nsw i32 %929, 131072
  %933 = add i32 %932, %930
  %934 = add i32 %933, %931
  %935 = ashr i32 %934, 18
  %936 = trunc i32 %935 to i16
  %937 = add nsw i16 %936, 16
  %938 = icmp ugt i16 %937, 255
  %939 = trunc i16 %937 to i8
  %940 = ashr i16 %937, 15
  %941 = trunc i16 %940 to i8
  %942 = xor i8 %941, -1
  %943 = select i1 %938, i8 %942, i8 %939
  %944 = getelementptr inbounds i8, i8* %885, i64 %906
  store i8 %943, i8* %944, align 1
  %945 = add nuw nsw i64 %906, 1
  %946 = load i32, i32* %11, align 8
  %947 = sext i32 %946 to i64
  %948 = icmp slt i64 %945, %947
  br i1 %948, label %905, label %949

949:                                              ; preds = %905
  %950 = load i32, i32* %13, align 4
  br label %951

951:                                              ; preds = %949, %879
  %952 = phi i32 [ %950, %949 ], [ %880, %879 ]
  %953 = phi i32 [ %946, %949 ], [ %881, %879 ]
  %954 = getelementptr inbounds i16, i16* %882, i64 %876
  %955 = and i32 %884, 1
  %956 = mul nuw i32 %955, %877
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds i16, i16* %883, i64 %957
  %959 = load i32, i32* %878, align 8
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds i8, i8* %885, i64 %960
  %962 = add nuw nsw i32 %884, 1
  %963 = icmp slt i32 %962, %952
  br i1 %963, label %879, label %887

964:                                              ; preds = %1115, %887
  %965 = phi i64 [ %1123, %1115 ], [ 0, %887 ]
  %966 = phi i16* [ %1116, %1115 ], [ %141, %887 ]
  %967 = phi i32 [ %1121, %1115 ], [ 0, %887 ]
  %968 = phi i8* [ %1119, %1115 ], [ %862, %887 ]
  %969 = phi i8* [ %1120, %1115 ], [ %864, %887 ]
  %970 = mul i64 %897, %965
  %971 = add i64 %896, %970
  %972 = getelementptr i8, i8* %140, i64 %971
  %973 = add i64 %899, %970
  %974 = getelementptr i8, i8* %140, i64 %973
  %975 = add i64 %900, %970
  %976 = getelementptr i8, i8* %140, i64 %975
  %977 = add i64 %901, %970
  %978 = getelementptr i8, i8* %140, i64 %977
  %979 = getelementptr i8, i8* %140, i64 %970
  %980 = add i64 %898, %970
  %981 = getelementptr i8, i8* %140, i64 %980
  br i1 %888, label %982, label %1115

982:                                              ; preds = %964
  br i1 %902, label %1066, label %983

983:                                              ; preds = %982
  %984 = getelementptr i8, i8* %968, i64 %895
  %985 = getelementptr i8, i8* %969, i64 %895
  %986 = icmp ult i8* %968, %985
  %987 = icmp ult i8* %969, %984
  %988 = and i1 %986, %987
  %989 = icmp ult i8* %968, %974
  %990 = icmp ult i8* %972, %984
  %991 = and i1 %989, %990
  %992 = or i1 %988, %991
  %993 = icmp ult i8* %968, %978
  %994 = icmp ult i8* %976, %984
  %995 = and i1 %993, %994
  %996 = or i1 %992, %995
  %997 = icmp ult i8* %968, %981
  %998 = icmp ult i8* %979, %984
  %999 = and i1 %997, %998
  %1000 = or i1 %996, %999
  %1001 = icmp ult i8* %969, %974
  %1002 = icmp ult i8* %972, %985
  %1003 = and i1 %1001, %1002
  %1004 = or i1 %1000, %1003
  %1005 = icmp ult i8* %969, %978
  %1006 = icmp ult i8* %976, %985
  %1007 = and i1 %1005, %1006
  %1008 = or i1 %1004, %1007
  %1009 = icmp ult i8* %969, %981
  %1010 = icmp ult i8* %979, %985
  %1011 = and i1 %1009, %1010
  %1012 = or i1 %1008, %1011
  br i1 %1012, label %1066, label %1013

1013:                                             ; preds = %983, %1013
  %1014 = phi i64 [ %1063, %1013 ], [ 0, %983 ]
  %1015 = getelementptr inbounds i16, i16* %966, i64 %1014
  %1016 = bitcast i16* %1015 to <8 x i16>*
  %1017 = load <8 x i16>, <8 x i16>* %1016, align 2, !alias.scope !34
  %1018 = sext <8 x i16> %1017 to <8 x i32>
  %1019 = add nsw i64 %1014, %891
  %1020 = getelementptr inbounds i16, i16* %966, i64 %1019
  %1021 = bitcast i16* %1020 to <8 x i16>*
  %1022 = load <8 x i16>, <8 x i16>* %1021, align 2, !alias.scope !37
  %1023 = sext <8 x i16> %1022 to <8 x i32>
  %1024 = add nsw i64 %1014, %876
  %1025 = getelementptr inbounds i16, i16* %966, i64 %1024
  %1026 = bitcast i16* %1025 to <8 x i16>*
  %1027 = load <8 x i16>, <8 x i16>* %1026, align 2, !alias.scope !39
  %1028 = sext <8 x i16> %1027 to <8 x i32>
  %1029 = mul nsw <8 x i32> %1018, <i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719, i32 -9719>
  %1030 = mul nsw <8 x i32> %1023, <i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081, i32 -19081>
  %1031 = mul nsw <8 x i32> %1028, <i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800>
  %1032 = add nsw <8 x i32> %1029, <i32 131072, i32 131072, i32 131072, i32 131072, i32 131072, i32 131072, i32 131072, i32 131072>
  %1033 = add nsw <8 x i32> %1032, %1030
  %1034 = add nsw <8 x i32> %1033, %1031
  %1035 = ashr <8 x i32> %1034, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %1036 = trunc <8 x i32> %1035 to <8 x i16>
  %1037 = add nsw <8 x i16> %1036, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %1038 = icmp ugt <8 x i16> %1037, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %1039 = trunc <8 x i16> %1037 to <8 x i8>
  %1040 = ashr <8 x i16> %1037, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %1041 = trunc <8 x i16> %1040 to <8 x i8>
  %1042 = xor <8 x i8> %1041, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %1043 = select <8 x i1> %1038, <8 x i8> %1042, <8 x i8> %1039
  %1044 = getelementptr inbounds i8, i8* %968, i64 %1014
  %1045 = bitcast i8* %1044 to <8 x i8>*
  store <8 x i8> %1043, <8 x i8>* %1045, align 1, !alias.scope !41, !noalias !43
  %1046 = mul nsw <8 x i32> %1018, <i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800, i32 28800>
  %1047 = mul nsw <8 x i32> %1023, <i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116, i32 -24116>
  %1048 = mul nsw <8 x i32> %1028, <i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684, i32 -4684>
  %1049 = add nsw <8 x i32> %1046, <i32 131072, i32 131072, i32 131072, i32 131072, i32 131072, i32 131072, i32 131072, i32 131072>
  %1050 = add nsw <8 x i32> %1049, %1047
  %1051 = add nsw <8 x i32> %1050, %1048
  %1052 = ashr <8 x i32> %1051, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %1053 = trunc <8 x i32> %1052 to <8 x i16>
  %1054 = add nsw <8 x i16> %1053, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %1055 = icmp ugt <8 x i16> %1054, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %1056 = trunc <8 x i16> %1054 to <8 x i8>
  %1057 = ashr <8 x i16> %1054, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %1058 = trunc <8 x i16> %1057 to <8 x i8>
  %1059 = xor <8 x i8> %1058, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %1060 = select <8 x i1> %1055, <8 x i8> %1059, <8 x i8> %1056
  %1061 = getelementptr inbounds i8, i8* %969, i64 %1014
  %1062 = bitcast i8* %1061 to <8 x i8>*
  store <8 x i8> %1060, <8 x i8>* %1062, align 1, !alias.scope !45, !noalias !46
  %1063 = add i64 %1014, 8
  %1064 = icmp eq i64 %1063, %903
  br i1 %1064, label %1065, label %1013, !llvm.loop !47

1065:                                             ; preds = %1013
  br i1 %904, label %1115, label %1066

1066:                                             ; preds = %1065, %983, %982
  %1067 = phi i64 [ 0, %983 ], [ 0, %982 ], [ %903, %1065 ]
  br label %1068

1068:                                             ; preds = %1066, %1068
  %1069 = phi i64 [ %1113, %1068 ], [ %1067, %1066 ]
  %1070 = getelementptr inbounds i16, i16* %966, i64 %1069
  %1071 = load i16, i16* %1070, align 2
  %1072 = sext i16 %1071 to i32
  %1073 = add nsw i64 %1069, %891
  %1074 = getelementptr inbounds i16, i16* %966, i64 %1073
  %1075 = load i16, i16* %1074, align 2
  %1076 = sext i16 %1075 to i32
  %1077 = add nsw i64 %1069, %876
  %1078 = getelementptr inbounds i16, i16* %966, i64 %1077
  %1079 = load i16, i16* %1078, align 2
  %1080 = sext i16 %1079 to i32
  %1081 = mul nsw i32 %1072, -9719
  %1082 = mul nsw i32 %1076, -19081
  %1083 = mul nsw i32 %1080, 28800
  %1084 = add nsw i32 %1081, 131072
  %1085 = add nsw i32 %1084, %1082
  %1086 = add nsw i32 %1085, %1083
  %1087 = ashr i32 %1086, 18
  %1088 = trunc i32 %1087 to i16
  %1089 = add nsw i16 %1088, 128
  %1090 = icmp ugt i16 %1089, 255
  %1091 = trunc i16 %1089 to i8
  %1092 = ashr i16 %1089, 15
  %1093 = trunc i16 %1092 to i8
  %1094 = xor i8 %1093, -1
  %1095 = select i1 %1090, i8 %1094, i8 %1091
  %1096 = getelementptr inbounds i8, i8* %968, i64 %1069
  store i8 %1095, i8* %1096, align 1
  %1097 = mul nsw i32 %1072, 28800
  %1098 = mul nsw i32 %1076, -24116
  %1099 = mul nsw i32 %1080, -4684
  %1100 = add nsw i32 %1097, 131072
  %1101 = add nsw i32 %1100, %1098
  %1102 = add nsw i32 %1101, %1099
  %1103 = ashr i32 %1102, 18
  %1104 = trunc i32 %1103 to i16
  %1105 = add nsw i16 %1104, 128
  %1106 = icmp ugt i16 %1105, 255
  %1107 = trunc i16 %1105 to i8
  %1108 = ashr i16 %1105, 15
  %1109 = trunc i16 %1108 to i8
  %1110 = xor i8 %1109, -1
  %1111 = select i1 %1106, i8 %1110, i8 %1107
  %1112 = getelementptr inbounds i8, i8* %969, i64 %1069
  store i8 %1111, i8* %1112, align 1
  %1113 = add nuw nsw i64 %1069, 1
  %1114 = icmp slt i64 %1113, %891
  br i1 %1114, label %1068, label %1115, !llvm.loop !48

1115:                                             ; preds = %1068, %1065, %964
  %1116 = getelementptr inbounds i16, i16* %966, i64 %889
  %1117 = load i32, i32* %890, align 4
  %1118 = sext i32 %1117 to i64
  %1119 = getelementptr inbounds i8, i8* %968, i64 %1118
  %1120 = getelementptr inbounds i8, i8* %969, i64 %1118
  %1121 = add nuw nsw i32 %967, 1
  %1122 = icmp slt i32 %1121, %871
  %1123 = add i64 %965, 1
  br i1 %1122, label %964, label %1124

1124:                                             ; preds = %1115, %165, %860
  %1125 = phi i1 [ %167, %165 ], [ false, %860 ], [ false, %1115 ]
  tail call void @WebPSafeFree(i8* %129) #6
  tail call void @WebPSafeFree(i8* %140) #6
  tail call void @WebPSafeFree(i8* %131) #6
  tail call void @WebPSafeFree(i8* %142) #6
  tail call void @WebPSafeFree(i8* %135) #6
  tail call void @WebPSafeFree(i8* %145) #6
  tail call void @WebPSafeFree(i8* %125) #6
  %1126 = xor i1 %49, true
  %1127 = or i1 %1125, %1126
  %1128 = xor i1 %1125, true
  %1129 = zext i1 %1128 to i32
  br i1 %1127, label %1513, label %1130

1130:                                             ; preds = %1124
  %1131 = load i32 (i8*, i32, i32, i32, i8*, i32)*, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  %1132 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 9
  %1133 = load i8*, i8** %1132, align 8
  %1134 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 10
  %1135 = load i32, i32* %1134, align 8
  %1136 = tail call i32 %1131(i8* %3, i32 %5, i32 %12, i32 %14, i8* %1133, i32 %1135) #6
  br label %1513

1137:                                             ; preds = %55
  %1138 = add nsw i32 %12, 1
  %1139 = ashr i32 %1138, 1
  %1140 = icmp eq i32 %4, 3
  %1141 = zext i1 %1140 to i32
  %1142 = shl nsw i32 %1139, 2
  %1143 = sext i32 %1142 to i64
  %1144 = tail call i8* @WebPSafeMalloc(i64 %1143, i64 2) #6
  %1145 = bitcast i8* %1144 to i16*
  %1146 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 4
  %1147 = load i8*, i8** %1146, align 8
  %1148 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 5
  %1149 = load i8*, i8** %1148, align 8
  %1150 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 6
  %1151 = load i8*, i8** %1150, align 8
  %1152 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 9
  %1153 = load i8*, i8** %1152, align 8
  %1154 = bitcast %struct.VP8Random* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %1154) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1154, i8 -86, i64 232, i1 false)
  %1155 = fcmp ogt float %6, 0.000000e+00
  br i1 %1155, label %1156, label %1157

1156:                                             ; preds = %1137
  call void @VP8InitRandom(%struct.VP8Random* nonnull %10, float %6) #6
  br label %1157

1157:                                             ; preds = %1156, %1137
  %1158 = phi i32 [ 0, %1156 ], [ %1141, %1137 ]
  %1159 = phi %struct.VP8Random* [ %10, %1156 ], [ null, %1137 ]
  call void @WebPInitConvertARGBToYUV() #6
  %1160 = load volatile i32 (i32)*, i32 (i32)** @InitGammaTables.InitGammaTables_body_last_cpuinfo_used, align 8
  %1161 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %1162 = icmp eq i32 (i32)* %1160, %1161
  br i1 %1162, label %1204, label %1163

1163:                                             ; preds = %1157
  %1164 = ptrtoint i32 (i32)* %1161 to i64
  %1165 = load volatile i32, i32* @kGammaTablesOk, align 4
  %1166 = icmp eq i32 %1165, 0
  br i1 %1166, label %1167, label %1202

1167:                                             ; preds = %1163, %1167
  %1168 = phi i64 [ %1186, %1167 ], [ 0, %1163 ]
  %1169 = trunc i64 %1168 to i32
  %1170 = sitofp i32 %1169 to double
  %1171 = fmul double %1170, 0x3F70101010101010
  %1172 = call double @pow(double %1171, double 8.000000e-01) #6
  %1173 = fmul double %1172, 4.095000e+03
  %1174 = fadd double %1173, 5.000000e-01
  %1175 = fptoui double %1174 to i16
  %1176 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %1168
  store i16 %1175, i16* %1176, align 4
  %1177 = or i64 %1168, 1
  %1178 = trunc i64 %1177 to i32
  %1179 = sitofp i32 %1178 to double
  %1180 = fmul double %1179, 0x3F70101010101010
  %1181 = call double @pow(double %1180, double 8.000000e-01) #6
  %1182 = fmul double %1181, 4.095000e+03
  %1183 = fadd double %1182, 5.000000e-01
  %1184 = fptoui double %1183 to i16
  %1185 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %1177
  store i16 %1184, i16* %1185, align 2
  %1186 = add nuw nsw i64 %1168, 2
  %1187 = icmp eq i64 %1186, 256
  br i1 %1187, label %1188, label %1167

1188:                                             ; preds = %1167, %1515
  %1189 = phi i64 [ %1524, %1515 ], [ 0, %1167 ]
  %1190 = trunc i64 %1189 to i32
  %1191 = sitofp i32 %1190 to double
  %1192 = fmul double %1191, 0x3FA0010010010010
  %1193 = call double @pow(double %1192, double 1.250000e+00) #6
  %1194 = fmul double %1193, 2.550000e+02
  %1195 = fadd double %1194, 5.000000e-01
  %1196 = fptosi double %1195 to i32
  %1197 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %1189
  store i32 %1196, i32* %1197, align 8
  %1198 = or i64 %1189, 1
  %1199 = icmp eq i64 %1198, 33
  br i1 %1199, label %1200, label %1515

1200:                                             ; preds = %1188
  store volatile i32 1, i32* @kGammaTablesOk, align 4
  %1201 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  br label %1202

1202:                                             ; preds = %1200, %1163
  %1203 = phi i64 [ %1164, %1163 ], [ %1201, %1200 ]
  store volatile i64 %1203, i64* bitcast (i32 (i32)** @InitGammaTables.InitGammaTables_body_last_cpuinfo_used to i64*), align 8
  br label %1204

1204:                                             ; preds = %1157, %1202
  %1205 = icmp eq i8* %1144, null
  br i1 %1205, label %1512, label %1206

1206:                                             ; preds = %1204
  %1207 = ashr i32 %14, 1
  %1208 = icmp sgt i32 %14, 1
  br i1 %1208, label %1209, label %1410

1209:                                             ; preds = %1206
  %1210 = icmp eq i32 %1158, 0
  %1211 = sext i32 %5 to i64
  %1212 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 7
  %1213 = icmp sgt i32 %12, 0
  %1214 = icmp eq %struct.VP8Random* %1159, null
  %1215 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 3
  %1216 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 0
  %1217 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 1
  %1218 = sext i32 %4 to i64
  %1219 = zext i32 %12 to i64
  %1220 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 10
  %1221 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %8, i64 0, i32 8
  %1222 = shl nsw i32 %5, 1
  %1223 = sext i32 %1222 to i64
  br label %1224

1224:                                             ; preds = %1209, %1398
  %1225 = phi i8* [ %1153, %1209 ], [ %1394, %1398 ]
  %1226 = phi i8* [ %1151, %1209 ], [ %1402, %1398 ]
  %1227 = phi i8* [ %1149, %1209 ], [ %1401, %1398 ]
  %1228 = phi i8* [ %1147, %1209 ], [ %1377, %1398 ]
  %1229 = phi i32 [ 0, %1209 ], [ %1408, %1398 ]
  %1230 = phi i8* [ %0, %1209 ], [ %1403, %1398 ]
  %1231 = phi i8* [ %1, %1209 ], [ %1405, %1398 ]
  %1232 = phi i8* [ %2, %1209 ], [ %1404, %1398 ]
  %1233 = phi i8* [ %3, %1209 ], [ %1407, %1398 ]
  br i1 %1210, label %1249, label %1234

1234:                                             ; preds = %1224
  br i1 %48, label %1235, label %1242

1235:                                             ; preds = %1234
  %1236 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @WebPConvertRGB24ToY, align 8
  call void %1236(i8* %1230, i8* %1228, i32 %12) #6
  %1237 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @WebPConvertRGB24ToY, align 8
  %1238 = getelementptr inbounds i8, i8* %1230, i64 %1211
  %1239 = load i32, i32* %1212, align 8
  %1240 = sext i32 %1239 to i64
  %1241 = getelementptr inbounds i8, i8* %1228, i64 %1240
  call void %1237(i8* %1238, i8* %1241, i32 %12) #6
  br label %1373

1242:                                             ; preds = %1234
  %1243 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @WebPConvertBGR24ToY, align 8
  call void %1243(i8* %1232, i8* %1228, i32 %12) #6
  %1244 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @WebPConvertBGR24ToY, align 8
  %1245 = getelementptr inbounds i8, i8* %1232, i64 %1211
  %1246 = load i32, i32* %1212, align 8
  %1247 = sext i32 %1246 to i64
  %1248 = getelementptr inbounds i8, i8* %1228, i64 %1247
  call void %1244(i8* %1245, i8* %1248, i32 %12) #6
  br label %1373

1249:                                             ; preds = %1224
  br i1 %1213, label %1250, label %1373

1250:                                             ; preds = %1249, %1296
  %1251 = phi i64 [ %1305, %1296 ], [ 0, %1249 ]
  %1252 = phi i64 [ %1306, %1296 ], [ 0, %1249 ]
  %1253 = getelementptr inbounds i8, i8* %1230, i64 %1252
  %1254 = load i8, i8* %1253, align 1
  %1255 = zext i8 %1254 to i32
  %1256 = getelementptr inbounds i8, i8* %1231, i64 %1252
  %1257 = load i8, i8* %1256, align 1
  %1258 = zext i8 %1257 to i32
  %1259 = getelementptr inbounds i8, i8* %1232, i64 %1252
  %1260 = load i8, i8* %1259, align 1
  %1261 = zext i8 %1260 to i32
  br i1 %1214, label %1262, label %1267

1262:                                             ; preds = %1250
  %1263 = mul nuw nsw i32 %1255, 16839
  %1264 = mul nuw nsw i32 %1258, 33059
  %1265 = mul nuw nsw i32 %1261, 6420
  %1266 = add nuw nsw i32 %1263, 1081344
  br label %1296

1267:                                             ; preds = %1250
  %1268 = load i32, i32* %1215, align 4
  %1269 = load i32, i32* %1216, align 4
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 2, i64 %1270
  %1272 = load i32, i32* %1271, align 4
  %1273 = load i32, i32* %1217, align 4
  %1274 = sext i32 %1273 to i64
  %1275 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 2, i64 %1274
  %1276 = load i32, i32* %1275, align 4
  %1277 = sub i32 %1272, %1276
  %1278 = and i32 %1277, 2147483647
  store i32 %1278, i32* %1271, align 4
  %1279 = load i32, i32* %1216, align 4
  %1280 = add nsw i32 %1279, 1
  %1281 = icmp eq i32 %1280, 55
  %1282 = select i1 %1281, i32 0, i32 %1280
  store i32 %1282, i32* %1216, align 4
  %1283 = load i32, i32* %1217, align 4
  %1284 = add nsw i32 %1283, 1
  %1285 = icmp eq i32 %1284, 55
  %1286 = select i1 %1285, i32 0, i32 %1284
  store i32 %1286, i32* %1217, align 4
  %1287 = shl i32 %1277, 1
  %1288 = ashr i32 %1287, 16
  %1289 = mul nsw i32 %1288, %1268
  %1290 = ashr i32 %1289, 8
  %1291 = mul nuw nsw i32 %1255, 16839
  %1292 = mul nuw nsw i32 %1258, 33059
  %1293 = mul nuw nsw i32 %1261, 6420
  %1294 = add nuw nsw i32 %1291, 1081344
  %1295 = add nuw nsw i32 %1294, %1292
  br label %1296

1296:                                             ; preds = %1267, %1262
  %1297 = phi i32 [ %1293, %1267 ], [ %1264, %1262 ]
  %1298 = phi i32 [ %1295, %1267 ], [ %1266, %1262 ]
  %1299 = phi i32 [ %1290, %1267 ], [ %1265, %1262 ]
  %1300 = add nuw nsw i32 %1298, %1297
  %1301 = add nsw i32 %1300, %1299
  %1302 = lshr i32 %1301, 16
  %1303 = trunc i32 %1302 to i8
  %1304 = getelementptr inbounds i8, i8* %1228, i64 %1251
  store i8 %1303, i8* %1304, align 1
  %1305 = add nuw nsw i64 %1251, 1
  %1306 = add nsw i64 %1252, %1218
  %1307 = icmp eq i64 %1305, %1219
  br i1 %1307, label %1308, label %1250

1308:                                             ; preds = %1296
  %1309 = getelementptr inbounds i8, i8* %1230, i64 %1211
  %1310 = getelementptr inbounds i8, i8* %1231, i64 %1211
  %1311 = getelementptr inbounds i8, i8* %1232, i64 %1211
  %1312 = load i32, i32* %1212, align 8
  %1313 = sext i32 %1312 to i64
  %1314 = getelementptr inbounds i8, i8* %1228, i64 %1313
  br i1 %1213, label %1315, label %1373

1315:                                             ; preds = %1308, %1361
  %1316 = phi i64 [ %1370, %1361 ], [ 0, %1308 ]
  %1317 = phi i64 [ %1371, %1361 ], [ 0, %1308 ]
  %1318 = getelementptr inbounds i8, i8* %1309, i64 %1317
  %1319 = load i8, i8* %1318, align 1
  %1320 = zext i8 %1319 to i32
  %1321 = getelementptr inbounds i8, i8* %1310, i64 %1317
  %1322 = load i8, i8* %1321, align 1
  %1323 = zext i8 %1322 to i32
  %1324 = getelementptr inbounds i8, i8* %1311, i64 %1317
  %1325 = load i8, i8* %1324, align 1
  %1326 = zext i8 %1325 to i32
  br i1 %1214, label %1327, label %1332

1327:                                             ; preds = %1315
  %1328 = mul nuw nsw i32 %1320, 16839
  %1329 = mul nuw nsw i32 %1323, 33059
  %1330 = mul nuw nsw i32 %1326, 6420
  %1331 = add nuw nsw i32 %1328, 1081344
  br label %1361

1332:                                             ; preds = %1315
  %1333 = load i32, i32* %1215, align 4
  %1334 = load i32, i32* %1216, align 4
  %1335 = sext i32 %1334 to i64
  %1336 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 2, i64 %1335
  %1337 = load i32, i32* %1336, align 4
  %1338 = load i32, i32* %1217, align 4
  %1339 = sext i32 %1338 to i64
  %1340 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 2, i64 %1339
  %1341 = load i32, i32* %1340, align 4
  %1342 = sub i32 %1337, %1341
  %1343 = and i32 %1342, 2147483647
  store i32 %1343, i32* %1336, align 4
  %1344 = load i32, i32* %1216, align 4
  %1345 = add nsw i32 %1344, 1
  %1346 = icmp eq i32 %1345, 55
  %1347 = select i1 %1346, i32 0, i32 %1345
  store i32 %1347, i32* %1216, align 4
  %1348 = load i32, i32* %1217, align 4
  %1349 = add nsw i32 %1348, 1
  %1350 = icmp eq i32 %1349, 55
  %1351 = select i1 %1350, i32 0, i32 %1349
  store i32 %1351, i32* %1217, align 4
  %1352 = shl i32 %1342, 1
  %1353 = ashr i32 %1352, 16
  %1354 = mul nsw i32 %1353, %1333
  %1355 = ashr i32 %1354, 8
  %1356 = mul nuw nsw i32 %1320, 16839
  %1357 = mul nuw nsw i32 %1323, 33059
  %1358 = mul nuw nsw i32 %1326, 6420
  %1359 = add nuw nsw i32 %1356, 1081344
  %1360 = add nuw nsw i32 %1359, %1357
  br label %1361

1361:                                             ; preds = %1332, %1327
  %1362 = phi i32 [ %1358, %1332 ], [ %1329, %1327 ]
  %1363 = phi i32 [ %1360, %1332 ], [ %1331, %1327 ]
  %1364 = phi i32 [ %1355, %1332 ], [ %1330, %1327 ]
  %1365 = add nuw nsw i32 %1363, %1362
  %1366 = add nsw i32 %1365, %1364
  %1367 = lshr i32 %1366, 16
  %1368 = trunc i32 %1367 to i8
  %1369 = getelementptr inbounds i8, i8* %1314, i64 %1316
  store i8 %1368, i8* %1369, align 1
  %1370 = add nuw nsw i64 %1316, 1
  %1371 = add nsw i64 %1317, %1218
  %1372 = icmp eq i64 %1370, %1219
  br i1 %1372, label %1373, label %1315

1373:                                             ; preds = %1361, %1249, %1308, %1235, %1242
  %1374 = load i32, i32* %1212, align 8
  %1375 = shl nsw i32 %1374, 1
  %1376 = sext i32 %1375 to i64
  %1377 = getelementptr inbounds i8, i8* %1228, i64 %1376
  br i1 %49, label %1378, label %1390

1378:                                             ; preds = %1373
  %1379 = load i32 (i8*, i32, i32, i32, i8*, i32)*, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  %1380 = load i32, i32* %1220, align 8
  %1381 = call i32 %1379(i8* %1233, i32 %5, i32 %12, i32 2, i8* %1225, i32 %1380) #6
  %1382 = icmp eq i32 %1381, 0
  %1383 = zext i1 %1382 to i32
  %1384 = and i32 %47, %1383
  %1385 = load i32, i32* %1220, align 8
  %1386 = shl nsw i32 %1385, 1
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i8, i8* %1225, i64 %1387
  %1389 = icmp eq i32 %1384, 0
  br i1 %1389, label %1390, label %1392

1390:                                             ; preds = %1373, %1378
  %1391 = phi i8* [ %1388, %1378 ], [ %1225, %1373 ]
  call fastcc void @AccumulateRGB(i8* %1230, i8* %1231, i8* %1232, i32 %4, i32 %5, i16* nonnull %1145, i32 %12)
  br label %1393

1392:                                             ; preds = %1378
  call fastcc void @AccumulateRGBA(i8* %1230, i8* %1231, i8* %1232, i8* %1233, i32 %5, i16* nonnull %1145, i32 %12)
  br label %1393

1393:                                             ; preds = %1392, %1390
  %1394 = phi i8* [ %1388, %1392 ], [ %1391, %1390 ]
  br i1 %1214, label %1395, label %1397

1395:                                             ; preds = %1393
  %1396 = load void (i16*, i8*, i8*, i32)*, void (i16*, i8*, i8*, i32)** @WebPConvertRGBA32ToUV, align 8
  call void %1396(i16* nonnull %1145, i8* %1227, i8* %1226, i32 %1139) #6
  br label %1398

1397:                                             ; preds = %1393
  call fastcc void @ConvertRowsToUV(i16* nonnull %1145, i8* %1227, i8* %1226, i32 %1139, %struct.VP8Random* nonnull %1159)
  br label %1398

1398:                                             ; preds = %1397, %1395
  %1399 = load i32, i32* %1221, align 4
  %1400 = sext i32 %1399 to i64
  %1401 = getelementptr inbounds i8, i8* %1227, i64 %1400
  %1402 = getelementptr inbounds i8, i8* %1226, i64 %1400
  %1403 = getelementptr inbounds i8, i8* %1230, i64 %1223
  %1404 = getelementptr inbounds i8, i8* %1232, i64 %1223
  %1405 = getelementptr inbounds i8, i8* %1231, i64 %1223
  %1406 = getelementptr inbounds i8, i8* %1233, i64 %1223
  %1407 = select i1 %49, i8* %1406, i8* %1233
  %1408 = add nuw nsw i32 %1229, 1
  %1409 = icmp slt i32 %1408, %1207
  br i1 %1409, label %1224, label %1410

1410:                                             ; preds = %1398, %1206
  %1411 = phi i8* [ %3, %1206 ], [ %1407, %1398 ]
  %1412 = phi i8* [ %2, %1206 ], [ %1404, %1398 ]
  %1413 = phi i8* [ %1, %1206 ], [ %1405, %1398 ]
  %1414 = phi i8* [ %0, %1206 ], [ %1403, %1398 ]
  %1415 = phi i8* [ %1147, %1206 ], [ %1377, %1398 ]
  %1416 = phi i8* [ %1149, %1206 ], [ %1401, %1398 ]
  %1417 = phi i8* [ %1151, %1206 ], [ %1402, %1398 ]
  %1418 = phi i8* [ %1153, %1206 ], [ %1394, %1398 ]
  %1419 = and i32 %14, 1
  %1420 = icmp eq i32 %1419, 0
  br i1 %1420, label %1511, label %1421

1421:                                             ; preds = %1410
  %1422 = icmp eq i32 %1158, 0
  br i1 %1422, label %1429, label %1423

1423:                                             ; preds = %1421
  %1424 = icmp ult i8* %1414, %1412
  br i1 %1424, label %1425, label %1427

1425:                                             ; preds = %1423
  %1426 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @WebPConvertRGB24ToY, align 8
  call void %1426(i8* %1414, i8* %1415, i32 %12) #6
  br label %1496

1427:                                             ; preds = %1423
  %1428 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @WebPConvertBGR24ToY, align 8
  call void %1428(i8* %1412, i8* %1415, i32 %12) #6
  br label %1496

1429:                                             ; preds = %1421
  %1430 = icmp sgt i32 %12, 0
  br i1 %1430, label %1431, label %1496

1431:                                             ; preds = %1429
  %1432 = icmp eq %struct.VP8Random* %1159, null
  %1433 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 3
  %1434 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 0
  %1435 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 1
  %1436 = sext i32 %4 to i64
  %1437 = zext i32 %12 to i64
  br label %1438

1438:                                             ; preds = %1484, %1431
  %1439 = phi i64 [ 0, %1431 ], [ %1493, %1484 ]
  %1440 = phi i64 [ 0, %1431 ], [ %1494, %1484 ]
  %1441 = getelementptr inbounds i8, i8* %1414, i64 %1440
  %1442 = load i8, i8* %1441, align 1
  %1443 = zext i8 %1442 to i32
  %1444 = getelementptr inbounds i8, i8* %1413, i64 %1440
  %1445 = load i8, i8* %1444, align 1
  %1446 = zext i8 %1445 to i32
  %1447 = getelementptr inbounds i8, i8* %1412, i64 %1440
  %1448 = load i8, i8* %1447, align 1
  %1449 = zext i8 %1448 to i32
  br i1 %1432, label %1450, label %1455

1450:                                             ; preds = %1438
  %1451 = mul nuw nsw i32 %1443, 16839
  %1452 = mul nuw nsw i32 %1446, 33059
  %1453 = mul nuw nsw i32 %1449, 6420
  %1454 = add nuw nsw i32 %1451, 1081344
  br label %1484

1455:                                             ; preds = %1438
  %1456 = load i32, i32* %1433, align 4
  %1457 = load i32, i32* %1434, align 4
  %1458 = sext i32 %1457 to i64
  %1459 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 2, i64 %1458
  %1460 = load i32, i32* %1459, align 4
  %1461 = load i32, i32* %1435, align 4
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %1159, i64 0, i32 2, i64 %1462
  %1464 = load i32, i32* %1463, align 4
  %1465 = sub i32 %1460, %1464
  %1466 = and i32 %1465, 2147483647
  store i32 %1466, i32* %1459, align 4
  %1467 = load i32, i32* %1434, align 4
  %1468 = add nsw i32 %1467, 1
  %1469 = icmp eq i32 %1468, 55
  %1470 = select i1 %1469, i32 0, i32 %1468
  store i32 %1470, i32* %1434, align 4
  %1471 = load i32, i32* %1435, align 4
  %1472 = add nsw i32 %1471, 1
  %1473 = icmp eq i32 %1472, 55
  %1474 = select i1 %1473, i32 0, i32 %1472
  store i32 %1474, i32* %1435, align 4
  %1475 = shl i32 %1465, 1
  %1476 = ashr i32 %1475, 16
  %1477 = mul nsw i32 %1476, %1456
  %1478 = ashr i32 %1477, 8
  %1479 = mul nuw nsw i32 %1443, 16839
  %1480 = mul nuw nsw i32 %1446, 33059
  %1481 = mul nuw nsw i32 %1449, 6420
  %1482 = add nuw nsw i32 %1479, 1081344
  %1483 = add nuw nsw i32 %1482, %1480
  br label %1484

1484:                                             ; preds = %1455, %1450
  %1485 = phi i32 [ %1481, %1455 ], [ %1452, %1450 ]
  %1486 = phi i32 [ %1483, %1455 ], [ %1454, %1450 ]
  %1487 = phi i32 [ %1478, %1455 ], [ %1453, %1450 ]
  %1488 = add nuw nsw i32 %1486, %1485
  %1489 = add nsw i32 %1488, %1487
  %1490 = lshr i32 %1489, 16
  %1491 = trunc i32 %1490 to i8
  %1492 = getelementptr inbounds i8, i8* %1415, i64 %1439
  store i8 %1491, i8* %1492, align 1
  %1493 = add nuw nsw i64 %1439, 1
  %1494 = add nsw i64 %1440, %1436
  %1495 = icmp eq i64 %1493, %1437
  br i1 %1495, label %1496, label %1438

1496:                                             ; preds = %1484, %1429, %1425, %1427
  br i1 %49, label %1497, label %1504

1497:                                             ; preds = %1496
  %1498 = load i32 (i8*, i32, i32, i32, i8*, i32)*, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  %1499 = call i32 %1498(i8* %1411, i32 0, i32 %12, i32 1, i8* %1418, i32 0) #6
  %1500 = icmp eq i32 %1499, 0
  %1501 = zext i1 %1500 to i32
  %1502 = and i32 %47, %1501
  %1503 = icmp eq i32 %1502, 0
  br i1 %1503, label %1504, label %1505

1504:                                             ; preds = %1497, %1496
  call fastcc void @AccumulateRGB(i8* %1414, i8* %1413, i8* %1412, i32 %4, i32 0, i16* nonnull %1145, i32 %12)
  br label %1506

1505:                                             ; preds = %1497
  call fastcc void @AccumulateRGBA(i8* %1414, i8* %1413, i8* %1412, i8* %1411, i32 0, i16* nonnull %1145, i32 %12)
  br label %1506

1506:                                             ; preds = %1505, %1504
  %1507 = icmp eq %struct.VP8Random* %1159, null
  br i1 %1507, label %1508, label %1510

1508:                                             ; preds = %1506
  %1509 = load void (i16*, i8*, i8*, i32)*, void (i16*, i8*, i8*, i32)** @WebPConvertRGBA32ToUV, align 8
  call void %1509(i16* nonnull %1145, i8* %1416, i8* %1417, i32 %1139) #6
  br label %1511

1510:                                             ; preds = %1506
  call fastcc void @ConvertRowsToUV(i16* nonnull %1145, i8* %1416, i8* %1417, i32 %1139, %struct.VP8Random* nonnull %1159)
  br label %1511

1511:                                             ; preds = %1508, %1510, %1410
  call void @WebPSafeFree(i8* nonnull %1144) #6
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %1154) #6
  br label %1513

1512:                                             ; preds = %1204
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %1154) #6
  br label %1513

1513:                                             ; preds = %1124, %1130, %1511, %1512, %46
  %1514 = phi i32 [ 0, %1512 ], [ 0, %46 ], [ %1129, %1124 ], [ 1, %1511 ], [ 1, %1130 ]
  ret i32 %1514

1515:                                             ; preds = %1188
  %1516 = trunc i64 %1198 to i32
  %1517 = sitofp i32 %1516 to double
  %1518 = fmul double %1517, 0x3FA0010010010010
  %1519 = call double @pow(double %1518, double 1.250000e+00) #6
  %1520 = fmul double %1519, 2.550000e+02
  %1521 = fadd double %1520, 5.000000e-01
  %1522 = fptosi double %1521 to i32
  %1523 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %1198
  store i32 %1522, i32* %1523, align 4
  %1524 = add nuw nsw i64 %1189, 2
  br label %1188
}

declare i32 @WebPPictureAllocYUVA(%struct.WebPPicture*, i32, i32) local_unnamed_addr #2

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @VP8InitRandom(%struct.VP8Random*, float) local_unnamed_addr #2

declare void @WebPInitConvertARGBToYUV() local_unnamed_addr #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @AccumulateRGB(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i16* nocapture, i32) unnamed_addr #3 {
  %8 = ashr i32 %6, 1
  %9 = icmp sgt i32 %6, 1
  br i1 %9, label %10, label %159

10:                                               ; preds = %7
  %11 = sext i32 %3 to i64
  %12 = sext i32 %4 to i64
  %13 = add nsw i32 %4, %3
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %10, %17
  %18 = phi i64 [ 0, %10 ], [ %153, %17 ]
  %19 = phi i32 [ 0, %10 ], [ %152, %17 ]
  %20 = phi i16* [ %5, %10 ], [ %154, %17 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i8, i8* %21, i64 %11
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %32, %26
  %34 = getelementptr inbounds i8, i8* %21, i64 %12
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = add nuw nsw i32 %33, %39
  %41 = getelementptr inbounds i8, i8* %21, i64 %14
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %40, %46
  %48 = lshr i32 %47, 9
  %49 = and i32 %47, 511
  %50 = zext i32 %48 to i64
  %51 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = add nuw nsw i32 %48, 1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = mul nsw i32 %49, %56
  %58 = sub nuw nsw i32 512, %49
  %59 = mul nsw i32 %58, %52
  %60 = add i32 %57, 64
  %61 = add i32 %60, %59
  %62 = lshr i32 %61, 7
  %63 = trunc i32 %62 to i16
  store i16 %63, i16* %20, align 2
  %64 = getelementptr inbounds i8, i8* %1, i64 %18
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds i8, i8* %64, i64 %11
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = add nuw nsw i32 %75, %69
  %77 = getelementptr inbounds i8, i8* %64, i64 %12
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %76, %82
  %84 = getelementptr inbounds i8, i8* %64, i64 %14
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i64
  %87 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = add nuw nsw i32 %83, %89
  %91 = lshr i32 %90, 9
  %92 = and i32 %90, 511
  %93 = zext i32 %91 to i64
  %94 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = add nuw nsw i32 %91, 1
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = mul nsw i32 %92, %99
  %101 = sub nuw nsw i32 512, %92
  %102 = mul nsw i32 %101, %95
  %103 = add i32 %100, 64
  %104 = add i32 %103, %102
  %105 = lshr i32 %104, 7
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %20, i64 1
  store i16 %106, i16* %107, align 2
  %108 = getelementptr inbounds i8, i8* %2, i64 %18
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = getelementptr inbounds i8, i8* %108, i64 %11
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nuw nsw i32 %119, %113
  %121 = getelementptr inbounds i8, i8* %108, i64 %12
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i64
  %124 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %123
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nuw nsw i32 %120, %126
  %128 = getelementptr inbounds i8, i8* %108, i64 %14
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = add nuw nsw i32 %127, %133
  %135 = lshr i32 %134, 9
  %136 = and i32 %134, 511
  %137 = zext i32 %135 to i64
  %138 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = add nuw nsw i32 %135, 1
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = mul nsw i32 %136, %143
  %145 = sub nuw nsw i32 512, %136
  %146 = mul nsw i32 %145, %139
  %147 = add i32 %144, 64
  %148 = add i32 %147, %146
  %149 = lshr i32 %148, 7
  %150 = trunc i32 %149 to i16
  %151 = getelementptr inbounds i16, i16* %20, i64 2
  store i16 %150, i16* %151, align 2
  %152 = add nuw nsw i32 %19, 1
  %153 = add nsw i64 %18, %16
  %154 = getelementptr inbounds i16, i16* %20, i64 4
  %155 = icmp slt i32 %152, %8
  br i1 %155, label %17, label %156

156:                                              ; preds = %17
  %157 = shl i64 %153, 32
  %158 = ashr exact i64 %157, 32
  br label %159

159:                                              ; preds = %156, %7
  %160 = phi i16* [ %5, %7 ], [ %154, %156 ]
  %161 = phi i64 [ 0, %7 ], [ %158, %156 ]
  %162 = and i32 %6, 1
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %258, label %164

164:                                              ; preds = %159
  %165 = getelementptr inbounds i8, i8* %0, i64 %161
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i64
  %168 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = zext i16 %169 to i32
  %171 = sext i32 %4 to i64
  %172 = getelementptr inbounds i8, i8* %165, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i64
  %175 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = add nuw nsw i32 %177, %170
  %179 = shl nuw nsw i32 %178, 1
  %180 = lshr i32 %178, 8
  %181 = and i32 %179, 510
  %182 = zext i32 %180 to i64
  %183 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = add nuw nsw i32 %180, 1
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = mul nsw i32 %181, %188
  %190 = sub nuw nsw i32 512, %181
  %191 = mul nsw i32 %190, %184
  %192 = add i32 %189, 64
  %193 = add i32 %192, %191
  %194 = lshr i32 %193, 7
  %195 = trunc i32 %194 to i16
  store i16 %195, i16* %160, align 2
  %196 = getelementptr inbounds i8, i8* %1, i64 %161
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %198
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = getelementptr inbounds i8, i8* %196, i64 %171
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i64
  %205 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = add nuw nsw i32 %207, %201
  %209 = shl nuw nsw i32 %208, 1
  %210 = lshr i32 %208, 8
  %211 = and i32 %209, 510
  %212 = zext i32 %210 to i64
  %213 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = add nuw nsw i32 %210, 1
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  %219 = mul nsw i32 %211, %218
  %220 = sub nuw nsw i32 512, %211
  %221 = mul nsw i32 %220, %214
  %222 = add i32 %219, 64
  %223 = add i32 %222, %221
  %224 = lshr i32 %223, 7
  %225 = trunc i32 %224 to i16
  %226 = getelementptr inbounds i16, i16* %160, i64 1
  store i16 %225, i16* %226, align 2
  %227 = getelementptr inbounds i8, i8* %2, i64 %161
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i64
  %230 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %229
  %231 = load i16, i16* %230, align 2
  %232 = zext i16 %231 to i32
  %233 = getelementptr inbounds i8, i8* %227, i64 %171
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %235
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = add nuw nsw i32 %238, %232
  %240 = shl nuw nsw i32 %239, 1
  %241 = lshr i32 %239, 8
  %242 = and i32 %240, 510
  %243 = zext i32 %241 to i64
  %244 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %243
  %245 = load i32, i32* %244, align 4
  %246 = add nuw nsw i32 %241, 1
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %247
  %249 = load i32, i32* %248, align 4
  %250 = mul nsw i32 %242, %249
  %251 = sub nuw nsw i32 512, %242
  %252 = mul nsw i32 %251, %245
  %253 = add i32 %250, 64
  %254 = add i32 %253, %252
  %255 = lshr i32 %254, 7
  %256 = trunc i32 %255 to i16
  %257 = getelementptr inbounds i16, i16* %160, i64 2
  store i16 %256, i16* %257, align 2
  br label %258

258:                                              ; preds = %159, %164
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @AccumulateRGBA(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i16* nocapture, i32) unnamed_addr #3 {
  %8 = ashr i32 %6, 1
  %9 = icmp sgt i32 %6, 1
  br i1 %9, label %10, label %309

10:                                               ; preds = %7
  %11 = sext i32 %4 to i64
  %12 = add nsw i32 %4, 4
  %13 = sext i32 %12 to i64
  br label %14

14:                                               ; preds = %10, %275
  %15 = phi i64 [ 0, %10 ], [ %304, %275 ]
  %16 = phi i32 [ 0, %10 ], [ %303, %275 ]
  %17 = phi i16* [ %5, %10 ], [ %305, %275 ]
  %18 = getelementptr inbounds i8, i8* %3, i64 %15
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %18, i64 %11
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %18, i64 4
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %24, i64 %11
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nuw nsw i32 %23, %20
  %31 = add nuw nsw i32 %30, %26
  %32 = add nuw nsw i32 %31, %29
  %33 = getelementptr inbounds i8, i8* %0, i64 %15
  switch i32 %32, label %144 [
    i32 1020, label %34
    i32 0, label %34
  ]

34:                                               ; preds = %14, %14
  %35 = load i8, i8* %33, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i8, i8* %33, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = add nuw nsw i32 %45, %39
  %47 = getelementptr inbounds i8, i8* %33, i64 %11
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %46, %52
  %54 = getelementptr inbounds i8, i8* %33, i64 %13
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = add nuw nsw i32 %53, %59
  %61 = lshr i32 %60, 9
  %62 = and i32 %60, 511
  %63 = zext i32 %61 to i64
  %64 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = add nuw nsw i32 %61, 1
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = mul nsw i32 %62, %69
  %71 = sub nuw nsw i32 512, %62
  %72 = mul nsw i32 %71, %65
  %73 = add i32 %70, 64
  %74 = add i32 %73, %72
  %75 = getelementptr inbounds i8, i8* %1, i64 %15
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = getelementptr inbounds i8, i8* %75, i64 4
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %86, %80
  %88 = getelementptr inbounds i8, i8* %75, i64 %11
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = add nuw nsw i32 %87, %93
  %95 = getelementptr inbounds i8, i8* %75, i64 %13
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = add nuw nsw i32 %94, %100
  %102 = lshr i32 %101, 9
  %103 = and i32 %101, 511
  %104 = zext i32 %102 to i64
  %105 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = add nuw nsw i32 %102, 1
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = mul nsw i32 %103, %110
  %112 = sub nuw nsw i32 512, %103
  %113 = mul nsw i32 %112, %106
  %114 = add i32 %111, 64
  %115 = add i32 %114, %113
  %116 = getelementptr inbounds i8, i8* %2, i64 %15
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = getelementptr inbounds i8, i8* %116, i64 4
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %124
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %127, %121
  %129 = getelementptr inbounds i8, i8* %116, i64 %11
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %131
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = add nuw nsw i32 %128, %134
  %136 = getelementptr inbounds i8, i8* %116, i64 %13
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nuw nsw i32 %135, %141
  %143 = lshr i32 %142, 9
  br label %275

144:                                              ; preds = %14
  %145 = load i8, i8* %33, align 1
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i32
  %150 = mul nuw nsw i32 %149, %20
  %151 = getelementptr inbounds i8, i8* %33, i64 4
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i64
  %154 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nuw nsw i32 %156, %26
  %158 = add nuw nsw i32 %157, %150
  %159 = getelementptr inbounds i8, i8* %33, i64 %11
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i64
  %162 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %164, %23
  %166 = add nuw nsw i32 %158, %165
  %167 = getelementptr inbounds i8, i8* %33, i64 %13
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = zext i16 %171 to i32
  %173 = mul nuw nsw i32 %172, %29
  %174 = add nuw nsw i32 %166, %173
  %175 = zext i32 %32 to i64
  %176 = getelementptr inbounds [1021 x i32], [1021 x i32]* @kInvAlpha, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = mul i32 %174, %177
  %179 = lshr i32 %178, 17
  %180 = lshr i32 %178, 26
  %181 = and i32 %179, 511
  %182 = zext i32 %180 to i64
  %183 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = add nuw nsw i32 %180, 1
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = mul nsw i32 %181, %188
  %190 = sub nuw nsw i32 512, %181
  %191 = mul nsw i32 %190, %184
  %192 = add i32 %189, 64
  %193 = add i32 %192, %191
  %194 = getelementptr inbounds i8, i8* %1, i64 %15
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %196
  %198 = load i16, i16* %197, align 2
  %199 = zext i16 %198 to i32
  %200 = mul nuw nsw i32 %199, %20
  %201 = getelementptr inbounds i8, i8* %194, i64 4
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %203
  %205 = load i16, i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = mul nuw nsw i32 %206, %26
  %208 = add nuw nsw i32 %207, %200
  %209 = getelementptr inbounds i8, i8* %194, i64 %11
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i64
  %212 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %211
  %213 = load i16, i16* %212, align 2
  %214 = zext i16 %213 to i32
  %215 = mul nuw nsw i32 %214, %23
  %216 = add nuw nsw i32 %208, %215
  %217 = getelementptr inbounds i8, i8* %194, i64 %13
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i64
  %220 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %219
  %221 = load i16, i16* %220, align 2
  %222 = zext i16 %221 to i32
  %223 = mul nuw nsw i32 %222, %29
  %224 = add nuw nsw i32 %216, %223
  %225 = mul i32 %224, %177
  %226 = lshr i32 %225, 17
  %227 = lshr i32 %225, 26
  %228 = and i32 %226, 511
  %229 = zext i32 %227 to i64
  %230 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %229
  %231 = load i32, i32* %230, align 4
  %232 = add nuw nsw i32 %227, 1
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = mul nsw i32 %228, %235
  %237 = sub nuw nsw i32 512, %228
  %238 = mul nsw i32 %237, %231
  %239 = add i32 %236, 64
  %240 = add i32 %239, %238
  %241 = getelementptr inbounds i8, i8* %2, i64 %15
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i64
  %244 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %243
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nuw nsw i32 %246, %20
  %248 = getelementptr inbounds i8, i8* %241, i64 4
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i64
  %251 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %250
  %252 = load i16, i16* %251, align 2
  %253 = zext i16 %252 to i32
  %254 = mul nuw nsw i32 %253, %26
  %255 = add nuw nsw i32 %254, %247
  %256 = getelementptr inbounds i8, i8* %241, i64 %11
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i64
  %259 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %258
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = mul nuw nsw i32 %261, %23
  %263 = add nuw nsw i32 %255, %262
  %264 = getelementptr inbounds i8, i8* %241, i64 %13
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i64
  %267 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %266
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = mul nuw nsw i32 %269, %29
  %271 = add nuw nsw i32 %263, %270
  %272 = mul i32 %271, %177
  %273 = lshr i32 %272, 17
  %274 = lshr i32 %272, 26
  br label %275

275:                                              ; preds = %144, %34
  %276 = phi i32 [ %273, %144 ], [ %142, %34 ]
  %277 = phi i32 [ %274, %144 ], [ %143, %34 ]
  %278 = phi i32 [ %193, %144 ], [ %74, %34 ]
  %279 = phi i32 [ %240, %144 ], [ %115, %34 ]
  %280 = and i32 %276, 511
  %281 = zext i32 %277 to i64
  %282 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = add nuw nsw i32 %277, 1
  %285 = zext i32 %284 to i64
  %286 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %285
  %287 = load i32, i32* %286, align 4
  %288 = mul nsw i32 %280, %287
  %289 = sub nuw nsw i32 512, %280
  %290 = mul nsw i32 %289, %283
  %291 = add i32 %288, 64
  %292 = add i32 %291, %290
  %293 = lshr i32 %292, 7
  %294 = lshr i32 %279, 7
  %295 = lshr i32 %278, 7
  %296 = trunc i32 %295 to i16
  store i16 %296, i16* %17, align 2
  %297 = trunc i32 %294 to i16
  %298 = getelementptr inbounds i16, i16* %17, i64 1
  store i16 %297, i16* %298, align 2
  %299 = trunc i32 %293 to i16
  %300 = getelementptr inbounds i16, i16* %17, i64 2
  store i16 %299, i16* %300, align 2
  %301 = trunc i32 %32 to i16
  %302 = getelementptr inbounds i16, i16* %17, i64 3
  store i16 %301, i16* %302, align 2
  %303 = add nuw nsw i32 %16, 1
  %304 = add nuw nsw i64 %15, 8
  %305 = getelementptr inbounds i16, i16* %17, i64 4
  %306 = icmp slt i32 %303, %8
  br i1 %306, label %14, label %307

307:                                              ; preds = %275
  %308 = and i64 %304, 4294967288
  br label %309

309:                                              ; preds = %307, %7
  %310 = phi i16* [ %5, %7 ], [ %305, %307 ]
  %311 = phi i64 [ 0, %7 ], [ %308, %307 ]
  %312 = and i32 %6, 1
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %509, label %314

314:                                              ; preds = %309
  %315 = getelementptr inbounds i8, i8* %3, i64 %311
  %316 = load i8, i8* %315, align 1
  %317 = zext i8 %316 to i32
  %318 = sext i32 %4 to i64
  %319 = getelementptr inbounds i8, i8* %315, i64 %318
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = add nuw nsw i32 %321, %317
  %323 = shl nuw nsw i32 %322, 1
  %324 = getelementptr inbounds i8, i8* %0, i64 %311
  switch i32 %322, label %397 [
    i32 510, label %325
    i32 0, label %325
  ]

325:                                              ; preds = %314, %314
  %326 = load i8, i8* %324, align 1
  %327 = zext i8 %326 to i64
  %328 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %327
  %329 = load i16, i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = getelementptr inbounds i8, i8* %324, i64 %318
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i64
  %334 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %333
  %335 = load i16, i16* %334, align 2
  %336 = zext i16 %335 to i32
  %337 = add nuw nsw i32 %336, %330
  %338 = shl nuw nsw i32 %337, 1
  %339 = lshr i32 %337, 8
  %340 = and i32 %338, 510
  %341 = zext i32 %339 to i64
  %342 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = add nuw nsw i32 %339, 1
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %345
  %347 = load i32, i32* %346, align 4
  %348 = mul nsw i32 %340, %347
  %349 = sub nuw nsw i32 512, %340
  %350 = mul nsw i32 %349, %343
  %351 = add i32 %348, 64
  %352 = add i32 %351, %350
  %353 = getelementptr inbounds i8, i8* %1, i64 %311
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i64
  %356 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i8, i8* %353, i64 %318
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i64
  %362 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %361
  %363 = load i16, i16* %362, align 2
  %364 = zext i16 %363 to i32
  %365 = add nuw nsw i32 %364, %358
  %366 = shl nuw nsw i32 %365, 1
  %367 = lshr i32 %365, 8
  %368 = and i32 %366, 510
  %369 = zext i32 %367 to i64
  %370 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = add nuw nsw i32 %367, 1
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = mul nsw i32 %368, %375
  %377 = sub nuw nsw i32 512, %368
  %378 = mul nsw i32 %377, %371
  %379 = add i32 %376, 64
  %380 = add i32 %379, %378
  %381 = getelementptr inbounds i8, i8* %2, i64 %311
  %382 = load i8, i8* %381, align 1
  %383 = zext i8 %382 to i64
  %384 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %383
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = getelementptr inbounds i8, i8* %381, i64 %318
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i64
  %390 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %389
  %391 = load i16, i16* %390, align 2
  %392 = zext i16 %391 to i32
  %393 = add nuw nsw i32 %392, %386
  %394 = shl nuw nsw i32 %393, 1
  %395 = lshr i32 %393, 8
  %396 = and i32 %394, 510
  br label %482

397:                                              ; preds = %314
  %398 = load i8, i8* %324, align 1
  %399 = zext i8 %398 to i64
  %400 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %399
  %401 = load i16, i16* %400, align 2
  %402 = zext i16 %401 to i32
  %403 = mul nuw nsw i32 %402, %317
  %404 = getelementptr inbounds i8, i8* %324, i64 %318
  %405 = load i8, i8* %404, align 1
  %406 = zext i8 %405 to i64
  %407 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %406
  %408 = load i16, i16* %407, align 2
  %409 = zext i16 %408 to i32
  %410 = mul nuw nsw i32 %409, %321
  %411 = add nuw nsw i32 %410, %403
  %412 = zext i32 %323 to i64
  %413 = getelementptr inbounds [1021 x i32], [1021 x i32]* @kInvAlpha, i64 0, i64 %412
  %414 = load i32, i32* %413, align 8
  %415 = shl i32 %414, 1
  %416 = mul i32 %415, %411
  %417 = lshr i32 %416, 17
  %418 = lshr i32 %416, 26
  %419 = and i32 %417, 511
  %420 = zext i32 %418 to i64
  %421 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = add nuw nsw i32 %418, 1
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %424
  %426 = load i32, i32* %425, align 4
  %427 = mul nsw i32 %419, %426
  %428 = sub nuw nsw i32 512, %419
  %429 = mul nsw i32 %428, %422
  %430 = add i32 %427, 64
  %431 = add i32 %430, %429
  %432 = getelementptr inbounds i8, i8* %1, i64 %311
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i64
  %435 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %434
  %436 = load i16, i16* %435, align 2
  %437 = zext i16 %436 to i32
  %438 = mul nuw nsw i32 %437, %317
  %439 = getelementptr inbounds i8, i8* %432, i64 %318
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i64
  %442 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %441
  %443 = load i16, i16* %442, align 2
  %444 = zext i16 %443 to i32
  %445 = mul nuw nsw i32 %444, %321
  %446 = add nuw nsw i32 %445, %438
  %447 = mul i32 %415, %446
  %448 = lshr i32 %447, 17
  %449 = lshr i32 %447, 26
  %450 = and i32 %448, 511
  %451 = zext i32 %449 to i64
  %452 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %451
  %453 = load i32, i32* %452, align 4
  %454 = add nuw nsw i32 %449, 1
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %455
  %457 = load i32, i32* %456, align 4
  %458 = mul nsw i32 %450, %457
  %459 = sub nuw nsw i32 512, %450
  %460 = mul nsw i32 %459, %453
  %461 = add i32 %458, 64
  %462 = add i32 %461, %460
  %463 = getelementptr inbounds i8, i8* %2, i64 %311
  %464 = load i8, i8* %463, align 1
  %465 = zext i8 %464 to i64
  %466 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %465
  %467 = load i16, i16* %466, align 2
  %468 = zext i16 %467 to i32
  %469 = mul nuw nsw i32 %468, %317
  %470 = getelementptr inbounds i8, i8* %463, i64 %318
  %471 = load i8, i8* %470, align 1
  %472 = zext i8 %471 to i64
  %473 = getelementptr inbounds [256 x i16], [256 x i16]* @kGammaToLinearTab, i64 0, i64 %472
  %474 = load i16, i16* %473, align 2
  %475 = zext i16 %474 to i32
  %476 = mul nuw nsw i32 %475, %321
  %477 = add nuw nsw i32 %476, %469
  %478 = mul i32 %415, %477
  %479 = lshr i32 %478, 17
  %480 = lshr i32 %478, 26
  %481 = and i32 %479, 511
  br label %482

482:                                              ; preds = %397, %325
  %483 = phi i32 [ %480, %397 ], [ %395, %325 ]
  %484 = phi i32 [ %481, %397 ], [ %396, %325 ]
  %485 = phi i32 [ %431, %397 ], [ %352, %325 ]
  %486 = phi i32 [ %462, %397 ], [ %380, %325 ]
  %487 = zext i32 %483 to i64
  %488 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %487
  %489 = load i32, i32* %488, align 4
  %490 = add nuw nsw i32 %483, 1
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds [33 x i32], [33 x i32]* @kLinearToGammaTab, i64 0, i64 %491
  %493 = load i32, i32* %492, align 4
  %494 = mul nsw i32 %484, %493
  %495 = sub nuw nsw i32 512, %484
  %496 = mul nsw i32 %495, %489
  %497 = add i32 %494, 64
  %498 = add i32 %497, %496
  %499 = lshr i32 %498, 7
  %500 = lshr i32 %486, 7
  %501 = lshr i32 %485, 7
  %502 = trunc i32 %501 to i16
  store i16 %502, i16* %310, align 2
  %503 = trunc i32 %500 to i16
  %504 = getelementptr inbounds i16, i16* %310, i64 1
  store i16 %503, i16* %504, align 2
  %505 = trunc i32 %499 to i16
  %506 = getelementptr inbounds i16, i16* %310, i64 2
  store i16 %505, i16* %506, align 2
  %507 = trunc i32 %323 to i16
  %508 = getelementptr inbounds i16, i16* %310, i64 3
  store i16 %507, i16* %508, align 2
  br label %509

509:                                              ; preds = %309, %482
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @ConvertRowsToUV(i16* nocapture readonly, i8* nocapture, i8* nocapture, i32, %struct.VP8Random*) unnamed_addr #3 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %124

7:                                                ; preds = %5
  %8 = icmp eq %struct.VP8Random* %4, null
  %9 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 3
  %10 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 0
  %11 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 1
  %12 = zext i32 %3 to i64
  br label %13

13:                                               ; preds = %108, %7
  %14 = phi i64 [ 0, %7 ], [ %121, %108 ]
  %15 = phi i16* [ %0, %7 ], [ %122, %108 ]
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds i16, i16* %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = getelementptr inbounds i16, i16* %15, i64 2
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  br i1 %8, label %24, label %42

24:                                               ; preds = %13
  %25 = mul nsw i32 %17, -9719
  %26 = mul nsw i32 %20, -19081
  %27 = mul nuw nsw i32 %23, 28800
  %28 = add nsw i32 %25, 33685504
  %29 = add nsw i32 %28, %26
  %30 = add nsw i32 %29, %27
  %31 = ashr i32 %30, 18
  %32 = icmp ult i32 %31, 256
  %33 = icmp slt i32 %30, 0
  %34 = select i1 %33, i32 0, i32 255
  %35 = select i1 %32, i32 %31, i32 %34
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %1, i64 %14
  store i8 %36, i8* %37, align 1
  %38 = mul nuw nsw i32 %17, 28800
  %39 = mul nsw i32 %20, -24116
  %40 = mul nsw i32 %23, -4684
  %41 = add nuw nsw i32 %38, 33685504
  br label %108

42:                                               ; preds = %13
  %43 = load i32, i32* %9, align 4
  %44 = load i32, i32* %10, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 2, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %11, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 2, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %47, %51
  %53 = and i32 %52, 2147483647
  store i32 %53, i32* %46, align 4
  %54 = load i32, i32* %10, align 4
  %55 = add nsw i32 %54, 1
  %56 = icmp eq i32 %55, 55
  %57 = select i1 %56, i32 0, i32 %55
  store i32 %57, i32* %10, align 4
  %58 = load i32, i32* %11, align 4
  %59 = add nsw i32 %58, 1
  %60 = icmp eq i32 %59, 55
  %61 = select i1 %60, i32 0, i32 %59
  store i32 %61, i32* %11, align 4
  %62 = shl i32 %52, 1
  %63 = ashr i32 %62, 14
  %64 = mul nsw i32 %63, %43
  %65 = ashr i32 %64, 8
  %66 = mul nsw i32 %17, -9719
  %67 = mul nsw i32 %20, -19081
  %68 = mul nuw nsw i32 %23, 28800
  %69 = add nsw i32 %66, 33685504
  %70 = add nsw i32 %69, %67
  %71 = add nsw i32 %70, %68
  %72 = add nsw i32 %71, %65
  %73 = ashr i32 %72, 18
  %74 = icmp ult i32 %73, 256
  %75 = icmp slt i32 %72, 0
  %76 = select i1 %75, i32 0, i32 255
  %77 = select i1 %74, i32 %73, i32 %76
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds i8, i8* %1, i64 %14
  store i8 %78, i8* %79, align 1
  %80 = load i32, i32* %9, align 4
  %81 = load i32, i32* %10, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 2, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = load i32, i32* %11, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.VP8Random, %struct.VP8Random* %4, i64 0, i32 2, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = sub i32 %84, %88
  %90 = and i32 %89, 2147483647
  store i32 %90, i32* %83, align 4
  %91 = load i32, i32* %10, align 4
  %92 = add nsw i32 %91, 1
  %93 = icmp eq i32 %92, 55
  %94 = select i1 %93, i32 0, i32 %92
  store i32 %94, i32* %10, align 4
  %95 = load i32, i32* %11, align 4
  %96 = add nsw i32 %95, 1
  %97 = icmp eq i32 %96, 55
  %98 = select i1 %97, i32 0, i32 %96
  store i32 %98, i32* %11, align 4
  %99 = shl i32 %89, 1
  %100 = ashr i32 %99, 14
  %101 = mul nsw i32 %100, %80
  %102 = ashr i32 %101, 8
  %103 = mul nuw nsw i32 %17, 28800
  %104 = mul nsw i32 %20, -24116
  %105 = mul nsw i32 %23, -4684
  %106 = add nuw nsw i32 %103, 33685504
  %107 = add nsw i32 %106, %104
  br label %108

108:                                              ; preds = %24, %42
  %109 = phi i32 [ %39, %24 ], [ %105, %42 ]
  %110 = phi i32 [ %41, %24 ], [ %107, %42 ]
  %111 = phi i32 [ %40, %24 ], [ %102, %42 ]
  %112 = add nsw i32 %110, %109
  %113 = add nsw i32 %112, %111
  %114 = ashr i32 %113, 18
  %115 = icmp ult i32 %114, 256
  %116 = icmp slt i32 %113, 0
  %117 = select i1 %116, i32 0, i32 255
  %118 = select i1 %115, i32 %114, i32 %117
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds i8, i8* %2, i64 %14
  store i8 %119, i8* %120, align 1
  %121 = add nuw nsw i64 %14, 1
  %122 = getelementptr inbounds i16, i16* %15, i64 4
  %123 = icmp eq i64 %121, %12
  br i1 %123, label %124, label %13

124:                                              ; preds = %108, %5
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @UpdateChroma(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i32) unnamed_addr #5 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %162

6:                                                ; preds = %4
  %7 = shl nsw i32 %3, 1
  %8 = sext i32 %7 to i64
  %9 = or i32 %7, 1
  %10 = sext i32 %9 to i64
  %11 = shl nsw i32 %3, 2
  %12 = sext i32 %11 to i64
  %13 = or i32 %11, 1
  %14 = sext i32 %13 to i64
  %15 = sext i32 %3 to i64
  br label %16

16:                                               ; preds = %16, %6
  %17 = phi i16* [ %0, %6 ], [ %158, %16 ]
  %18 = phi i16* [ %1, %6 ], [ %159, %16 ]
  %19 = phi i16* [ %2, %6 ], [ %157, %16 ]
  %20 = phi i32 [ 0, %6 ], [ %160, %16 ]
  %21 = load i16, i16* %17, align 2
  %22 = getelementptr inbounds i16, i16* %17, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = load i16, i16* %18, align 2
  %25 = getelementptr inbounds i16, i16* %18, i64 1
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %21 to i64
  %28 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = zext i16 %23 to i64
  %31 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = zext i16 %24 to i64
  %34 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = zext i16 %26 to i64
  %37 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %29, 2
  %40 = add i32 %39, %32
  %41 = add i32 %40, %35
  %42 = add i32 %41, %38
  %43 = lshr i32 %42, 2
  %44 = shl i32 %43, 5
  %45 = lshr i32 %42, 11
  %46 = and i32 %45, 262143
  %47 = shl i32 %45, 14
  %48 = sub i32 %44, %47
  %49 = zext i32 %46 to i64
  %50 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = add nuw nsw i32 %46, 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = sub i32 %55, %51
  %57 = mul i32 %48, %56
  %58 = lshr i32 %57, 14
  %59 = add i32 %58, %51
  %60 = getelementptr inbounds i16, i16* %17, i64 %8
  %61 = load i16, i16* %60, align 2
  %62 = getelementptr inbounds i16, i16* %17, i64 %10
  %63 = load i16, i16* %62, align 2
  %64 = getelementptr inbounds i16, i16* %18, i64 %8
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds i16, i16* %18, i64 %10
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %61 to i64
  %69 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = zext i16 %63 to i64
  %72 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = zext i16 %65 to i64
  %75 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = zext i16 %67 to i64
  %78 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %70, 2
  %81 = add i32 %80, %73
  %82 = add i32 %81, %76
  %83 = add i32 %82, %79
  %84 = lshr i32 %83, 2
  %85 = shl i32 %84, 5
  %86 = lshr i32 %83, 11
  %87 = and i32 %86, 262143
  %88 = shl i32 %86, 14
  %89 = sub i32 %85, %88
  %90 = zext i32 %87 to i64
  %91 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = add nuw nsw i32 %87, 1
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = sub i32 %96, %92
  %98 = mul i32 %89, %97
  %99 = lshr i32 %98, 14
  %100 = add i32 %99, %92
  %101 = getelementptr inbounds i16, i16* %17, i64 %12
  %102 = load i16, i16* %101, align 2
  %103 = getelementptr inbounds i16, i16* %17, i64 %14
  %104 = load i16, i16* %103, align 2
  %105 = getelementptr inbounds i16, i16* %18, i64 %12
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds i16, i16* %18, i64 %14
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %102 to i64
  %110 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = zext i16 %104 to i64
  %113 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = zext i16 %106 to i64
  %116 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = zext i16 %108 to i64
  %119 = getelementptr inbounds [1024 x i32], [1024 x i32]* @kGammaToLinearTabS, i64 0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %111, 2
  %122 = add i32 %121, %114
  %123 = add i32 %122, %117
  %124 = add i32 %123, %120
  %125 = lshr i32 %124, 2
  %126 = shl i32 %125, 5
  %127 = lshr i32 %124, 11
  %128 = and i32 %127, 262143
  %129 = shl i32 %127, 14
  %130 = sub i32 %126, %129
  %131 = zext i32 %128 to i64
  %132 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = add nuw nsw i32 %128, 1
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [34 x i32], [34 x i32]* @kLinearToGammaTabS, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = sub i32 %137, %133
  %139 = mul i32 %130, %138
  %140 = lshr i32 %139, 14
  %141 = add i32 %140, %133
  %142 = mul nsw i32 %59, 13933
  %143 = mul nsw i32 %100, 46871
  %144 = mul nsw i32 %141, 4732
  %145 = add i32 %142, 32768
  %146 = add i32 %145, %143
  %147 = add i32 %146, %144
  %148 = ashr i32 %147, 16
  %149 = sub nsw i32 %59, %148
  %150 = trunc i32 %149 to i16
  store i16 %150, i16* %19, align 2
  %151 = sub nsw i32 %100, %148
  %152 = trunc i32 %151 to i16
  %153 = getelementptr inbounds i16, i16* %19, i64 %15
  store i16 %152, i16* %153, align 2
  %154 = sub nsw i32 %141, %148
  %155 = trunc i32 %154 to i16
  %156 = getelementptr inbounds i16, i16* %19, i64 %8
  store i16 %155, i16* %156, align 2
  %157 = getelementptr inbounds i16, i16* %19, i64 1
  %158 = getelementptr inbounds i16, i16* %17, i64 2
  %159 = getelementptr inbounds i16, i16* %18, i64 2
  %160 = add nuw nsw i32 %20, 1
  %161 = icmp eq i32 %160, %3
  br i1 %161, label %162, label %16

162:                                              ; preds = %16, %4
  ret void
}

declare i32 @WebPPictureAlloc(%struct.WebPPicture*) local_unnamed_addr #2

declare void @VP8LDspInit() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = !{!18}
!18 = distinct !{!18, !12}
!19 = !{!16, !14, !11}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = !{!28}
!28 = distinct !{!28, !24}
!29 = !{!30}
!30 = distinct !{!30, !24}
!31 = !{!28, !26, !23}
!32 = distinct !{!32, !8}
!33 = distinct !{!33, !8}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = !{!40}
!40 = distinct !{!40, !36}
!41 = !{!42}
!42 = distinct !{!42, !36}
!43 = !{!44, !40, !38, !35}
!44 = distinct !{!44, !36}
!45 = !{!44}
!46 = !{!40, !38, !35}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !8}
