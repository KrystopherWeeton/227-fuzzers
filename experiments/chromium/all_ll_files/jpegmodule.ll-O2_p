; ModuleID = '../../third_party/pdfium/core/fxcodec/jpeg/jpegmodule.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jpeg/jpegmodule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%"class.fxcodec::ScanlineDecoder" = type { i32 (...)**, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.fxcodec::(anonymous namespace)::JpegDecoder" = type { %"class.fxcodec::ScanlineDecoder", [1 x %struct.__jmp_buf_tag], %struct.jpeg_decompress_struct, %struct.jpeg_error_mgr, %struct.jpeg_source_mgr, %"class.pdfium::span", %"class.std::__1::unique_ptr.4", i8, i8, i8, i32 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"struct.fxcodec::JpegModule::JpegImageInfo" }
%"struct.fxcodec::JpegModule::JpegImageInfo" = type { i32, i32, i32, i32, i8 }

@__const._ZL12JpegLoadInfoN6pdfium4spanIKhEEPiS3_S3_S3_Pb.cinfo = private unnamed_addr constant { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, [4 x i8], double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [4 x i8], [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, [4 x i8], %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, [1 x i8], i16, i16, i32, i8, [3 x i8], i32, [4 x i8], %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x i8], [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* } { %struct.jpeg_error_mgr* inttoptr (i64 -6148914691236517206 to %struct.jpeg_error_mgr*), %struct.jpeg_memory_mgr* inttoptr (i64 -6148914691236517206 to %struct.jpeg_memory_mgr*), %struct.jpeg_progress_mgr* inttoptr (i64 -6148914691236517206 to %struct.jpeg_progress_mgr*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, %struct.jpeg_source_mgr* inttoptr (i64 -6148914691236517206 to %struct.jpeg_source_mgr*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8** inttoptr (i64 -6148914691236517206 to i8**), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [64 x i32]* inttoptr (i64 -6148914691236517206 to [64 x i32]*), [4 x %struct.JQUANT_TBL*] [%struct.JQUANT_TBL* inttoptr (i64 -6148914691236517206 to %struct.JQUANT_TBL*), %struct.JQUANT_TBL* inttoptr (i64 -6148914691236517206 to %struct.JQUANT_TBL*), %struct.JQUANT_TBL* inttoptr (i64 -6148914691236517206 to %struct.JQUANT_TBL*), %struct.JQUANT_TBL* inttoptr (i64 -6148914691236517206 to %struct.JQUANT_TBL*)], [4 x %struct.JHUFF_TBL*] [%struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*), %struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*), %struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*), %struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*)], [4 x %struct.JHUFF_TBL*] [%struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*), %struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*), %struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*), %struct.JHUFF_TBL* inttoptr (i64 -6148914691236517206 to %struct.JHUFF_TBL*)], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.jpeg_component_info* inttoptr (i64 -6148914691236517206 to %struct.jpeg_component_info*), i32 -1431655766, i32 -1431655766, [16 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [16 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [16 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", i16 -21846, i16 -21846, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.jpeg_marker_struct* inttoptr (i64 -6148914691236517206 to %struct.jpeg_marker_struct*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x %struct.jpeg_component_info*] [%struct.jpeg_component_info* inttoptr (i64 -6148914691236517206 to %struct.jpeg_component_info*), %struct.jpeg_component_info* inttoptr (i64 -6148914691236517206 to %struct.jpeg_component_info*), %struct.jpeg_component_info* inttoptr (i64 -6148914691236517206 to %struct.jpeg_component_info*), %struct.jpeg_component_info* inttoptr (i64 -6148914691236517206 to %struct.jpeg_component_info*)], i32 -1431655766, i32 -1431655766, i32 -1431655766, [10 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, %struct.jpeg_decomp_master* inttoptr (i64 -6148914691236517206 to %struct.jpeg_decomp_master*), %struct.jpeg_d_main_controller* inttoptr (i64 -6148914691236517206 to %struct.jpeg_d_main_controller*), %struct.jpeg_d_coef_controller* inttoptr (i64 -6148914691236517206 to %struct.jpeg_d_coef_controller*), %struct.jpeg_d_post_controller* inttoptr (i64 -6148914691236517206 to %struct.jpeg_d_post_controller*), %struct.jpeg_input_controller* inttoptr (i64 -6148914691236517206 to %struct.jpeg_input_controller*), %struct.jpeg_marker_reader* inttoptr (i64 -6148914691236517206 to %struct.jpeg_marker_reader*), %struct.jpeg_entropy_decoder* inttoptr (i64 -6148914691236517206 to %struct.jpeg_entropy_decoder*), %struct.jpeg_inverse_dct* inttoptr (i64 -6148914691236517206 to %struct.jpeg_inverse_dct*), %struct.jpeg_upsampler* inttoptr (i64 -6148914691236517206 to %struct.jpeg_upsampler*), %struct.jpeg_color_deconverter* inttoptr (i64 -6148914691236517206 to %struct.jpeg_color_deconverter*), %struct.jpeg_color_quantizer* inttoptr (i64 -6148914691236517206 to %struct.jpeg_color_quantizer*) }, align 8
@_ZTVN7fxcodec12_GLOBAL__N_111JpegDecoderE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_111JpegDecoderD2Ev to i8*), i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_111JpegDecoderD0Ev to i8*), i8* bitcast (i32 (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder12GetSrcOffsetEv to i8*), i8* bitcast (i1 (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder8v_RewindEv to i8*), i8* bitcast (i8* (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder13v_GetNextLineEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::ScanlineDecoder"* @_ZN7fxcodec10JpegModule13CreateDecoderEN6pdfium4spanIKhEEiiib(%"class.pdfium::span"* nocapture readonly, i32, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = tail call i8* @_Znwm(i64 1136) #10
  %7 = bitcast i8* %6 to %"class.fxcodec::(anonymous namespace)::JpegDecoder"*
  %8 = bitcast i8* %6 to %"class.fxcodec::ScanlineDecoder"*
  tail call void @_ZN7fxcodec15ScanlineDecoderC2Ev(%"class.fxcodec::ScanlineDecoder"* nonnull %8) #11
  %9 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_111JpegDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %6, i64 1104
  %11 = getelementptr inbounds i8, i8* %6, i64 1132
  %12 = bitcast i8* %11 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 27, i1 false) #11
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %6, i64 248
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 856, i1 false) #11
  %14 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %45, label %19

19:                                               ; preds = %5
  %20 = add i64 %17, -1
  br label %21

21:                                               ; preds = %43, %19
  %22 = phi i64 [ 0, %19 ], [ %29, %43 ]
  %23 = icmp eq i64 %17, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %21
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !3, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !3, !srcloc !7
  unreachable

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %15, i64 %22
  %27 = load i8, i8* %26, align 1, !noalias !3
  %28 = icmp eq i8 %27, -1
  %29 = add nuw i64 %22, 1
  br i1 %28, label %30, label %43

30:                                               ; preds = %25
  %31 = icmp ugt i64 %17, %29
  br i1 %31, label %33, label %32, !prof !8

32:                                               ; preds = %30
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !3, !srcloc !6
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !3, !srcloc !7
  unreachable

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %15, i64 %29
  %35 = load i8, i8* %34, align 1, !noalias !3
  %36 = icmp eq i8 %35, -40
  br i1 %36, label %37, label %43

37:                                               ; preds = %33
  %38 = icmp ult i64 %17, %22
  br i1 %38, label %39, label %40, !prof !2

39:                                               ; preds = %37
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !9, !srcloc !12
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !9, !srcloc !13
  unreachable

40:                                               ; preds = %37
  %41 = getelementptr inbounds i8, i8* %15, i64 %22
  %42 = sub i64 %17, %22
  br label %45

43:                                               ; preds = %33, %25
  %44 = icmp eq i64 %29, %20
  br i1 %44, label %45, label %21

45:                                               ; preds = %43, %40, %5
  %46 = phi i8* [ %41, %40 ], [ %15, %5 ], [ %15, %43 ]
  %47 = phi i64 [ %42, %40 ], [ 1, %5 ], [ %17, %43 ]
  %48 = icmp eq i8* %46, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %45
  %50 = bitcast i8* %10 to i8**
  store i8* %46, i8** %50, align 8
  br label %51

51:                                               ; preds = %49, %45
  %52 = getelementptr inbounds i8, i8* %6, i64 1112
  %53 = bitcast i8* %52 to i64*
  store i64 %47, i64* %53, align 8
  %54 = icmp ult i64 %47, 2
  br i1 %54, label %122, label %55

55:                                               ; preds = %51
  %56 = zext i1 %4 to i8
  %57 = add i64 %47, -2
  %58 = getelementptr inbounds i8, i8* %46, i64 %57
  store i8 -1, i8* %58, align 1
  %59 = load i64, i64* %53, align 8
  %60 = add i64 %59, -1
  %61 = getelementptr inbounds i8, i8* %46, i64 %60
  store i8 -39, i8* %61, align 1
  %62 = getelementptr inbounds i8, i8* %6, i64 880
  %63 = bitcast i8* %62 to void (%struct.jpeg_common_struct*)**
  store void (%struct.jpeg_common_struct*)* @_ZL11error_fatalP18jpeg_common_struct, void (%struct.jpeg_common_struct*)** %63, align 8
  %64 = getelementptr inbounds i8, i8* %6, i64 888
  %65 = bitcast i8* %64 to void (%struct.jpeg_common_struct*, i32)**
  store void (%struct.jpeg_common_struct*, i32)* @error_do_nothing_int, void (%struct.jpeg_common_struct*, i32)** %65, align 8
  %66 = getelementptr inbounds i8, i8* %6, i64 896
  %67 = bitcast i8* %66 to void (%struct.jpeg_common_struct*)**
  store void (%struct.jpeg_common_struct*)* @error_do_nothing, void (%struct.jpeg_common_struct*)** %67, align 8
  %68 = getelementptr inbounds i8, i8* %6, i64 904
  %69 = bitcast i8* %68 to void (%struct.jpeg_common_struct*, i8*)**
  store void (%struct.jpeg_common_struct*, i8*)* @error_do_nothing_char, void (%struct.jpeg_common_struct*, i8*)** %69, align 8
  %70 = getelementptr inbounds i8, i8* %6, i64 912
  %71 = bitcast i8* %70 to void (%struct.jpeg_common_struct*)**
  store void (%struct.jpeg_common_struct*)* @error_do_nothing, void (%struct.jpeg_common_struct*)** %71, align 8
  %72 = getelementptr inbounds i8, i8* %6, i64 1064
  %73 = bitcast i8* %72 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @src_do_nothing, void (%struct.jpeg_decompress_struct*)** %73, align 8
  %74 = getelementptr inbounds i8, i8* %6, i64 1096
  %75 = bitcast i8* %74 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @src_do_nothing, void (%struct.jpeg_decompress_struct*)** %75, align 8
  %76 = getelementptr inbounds i8, i8* %6, i64 1080
  %77 = bitcast i8* %76 to void (%struct.jpeg_decompress_struct*, i64)**
  store void (%struct.jpeg_decompress_struct*, i64)* @_ZL13src_skip_dataP22jpeg_decompress_structl, void (%struct.jpeg_decompress_struct*, i64)** %77, align 8
  %78 = getelementptr inbounds i8, i8* %6, i64 1072
  %79 = bitcast i8* %78 to i32 (%struct.jpeg_decompress_struct*)**
  store i32 (%struct.jpeg_decompress_struct*)* @src_fill_buffer, i32 (%struct.jpeg_decompress_struct*)** %79, align 8
  %80 = getelementptr inbounds i8, i8* %6, i64 1088
  %81 = bitcast i8* %80 to i32 (%struct.jpeg_decompress_struct*, i32)**
  store i32 (%struct.jpeg_decompress_struct*, i32)* @src_resync, i32 (%struct.jpeg_decompress_struct*, i32)** %81, align 8
  %82 = getelementptr inbounds i8, i8* %6, i64 1130
  store i8 %56, i8* %82, align 2
  %83 = getelementptr inbounds i8, i8* %6, i64 8
  %84 = bitcast i8* %83 to i32*
  store i32 %1, i32* %84, align 8
  %85 = getelementptr inbounds i8, i8* %6, i64 16
  %86 = bitcast i8* %85 to i32*
  store i32 %1, i32* %86, align 8
  %87 = getelementptr inbounds i8, i8* %6, i64 12
  %88 = bitcast i8* %87 to i32*
  store i32 %2, i32* %88, align 4
  %89 = getelementptr inbounds i8, i8* %6, i64 20
  %90 = bitcast i8* %89 to i32*
  store i32 %2, i32* %90, align 4
  %91 = tail call fastcc zeroext i1 @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder10InitDecodeEb(%"class.fxcodec::(anonymous namespace)::JpegDecoder"* nonnull %7, i1 zeroext true) #11
  br i1 %91, label %92, label %122

92:                                               ; preds = %55
  %93 = getelementptr inbounds i8, i8* %6, i64 304
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 8
  %96 = icmp slt i32 %95, %3
  br i1 %96, label %122, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds i8, i8* %6, i64 296
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 8
  %101 = icmp slt i32 %100, %1
  br i1 %101, label %122, label %102

102:                                              ; preds = %97
  %103 = mul i32 %100, %95
  %104 = getelementptr inbounds i8, i8* %6, i64 32
  %105 = bitcast i8* %104 to i32*
  %106 = add i32 %103, 3
  %107 = and i32 %106, -4
  store i32 %107, i32* %105, align 8
  %108 = zext i32 %107 to i64
  %109 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %108, i64 1) #11
  %110 = getelementptr inbounds i8, i8* %6, i64 1120
  %111 = bitcast i8* %110 to i8**
  %112 = load i8*, i8** %111, align 8
  store i8* %109, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %102
  tail call void @_Z7FX_FreePv(i8* nonnull %112) #11
  br label %115

115:                                              ; preds = %102, %114
  %116 = load i32, i32* %94, align 8
  %117 = getelementptr inbounds i8, i8* %6, i64 24
  %118 = bitcast i8* %117 to i32*
  store i32 %116, i32* %118, align 8
  %119 = getelementptr inbounds i8, i8* %6, i64 28
  %120 = bitcast i8* %119 to i32*
  store i32 8, i32* %120, align 4
  %121 = getelementptr inbounds i8, i8* %6, i64 1129
  store i8 0, i8* %121, align 1
  br label %127

122:                                              ; preds = %51, %55, %92, %97
  %123 = bitcast i8* %6 to void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)***
  %124 = load void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)**, void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)*** %123, align 8
  %125 = getelementptr inbounds void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)*, void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)** %124, i64 1
  %126 = load void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)*, void (%"class.fxcodec::(anonymous namespace)::JpegDecoder"*)** %125, align 8
  tail call void %126(%"class.fxcodec::(anonymous namespace)::JpegDecoder"* nonnull %7) #11
  br label %127

127:                                              ; preds = %115, %122
  %128 = phi %"class.fxcodec::ScanlineDecoder"* [ %8, %115 ], [ null, %122 ]
  ret %"class.fxcodec::ScanlineDecoder"* %128
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec10JpegModule8LoadInfoEN6pdfium4spanIKhEE(%"class.pdfium::Optional"* noalias nocapture sret, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.fxcodec::JpegModule::JpegImageInfo", align 4
  %4 = alloca %"class.pdfium::span", align 8
  %5 = bitcast %"struct.fxcodec::JpegModule::JpegImageInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %5, i8 -86, i64 20, i1 false)
  %6 = bitcast %"class.pdfium::span"* %4 to i8*
  %7 = bitcast %"class.pdfium::span"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %"struct.fxcodec::JpegModule::JpegImageInfo", %"struct.fxcodec::JpegModule::JpegImageInfo"* %3, i64 0, i32 0
  %9 = getelementptr inbounds %"struct.fxcodec::JpegModule::JpegImageInfo", %"struct.fxcodec::JpegModule::JpegImageInfo"* %3, i64 0, i32 1
  %10 = getelementptr inbounds %"struct.fxcodec::JpegModule::JpegImageInfo", %"struct.fxcodec::JpegModule::JpegImageInfo"* %3, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.fxcodec::JpegModule::JpegImageInfo", %"struct.fxcodec::JpegModule::JpegImageInfo"* %3, i64 0, i32 3
  %12 = getelementptr inbounds %"struct.fxcodec::JpegModule::JpegImageInfo", %"struct.fxcodec::JpegModule::JpegImageInfo"* %3, i64 0, i32 4
  %13 = call fastcc zeroext i1 @_ZL12JpegLoadInfoN6pdfium4spanIKhEEPiS3_S3_S3_Pb(%"class.pdfium::span"* nonnull %4, i32* nonnull %8, i32* %9, i32* %10, i32* %11, i8* %12)
  %14 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %13, label %16, label %15

15:                                               ; preds = %2
  store i8 0, i8* %14, align 4
  br label %19

16:                                               ; preds = %2
  store i8 1, i8* %14, align 4
  %17 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = bitcast %"struct.fxcodec::JpegModule::JpegImageInfo"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* nonnull align 4 %5, i64 20, i1 false) #11
  br label %19

19:                                               ; preds = %16, %15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %5) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL12JpegLoadInfoN6pdfium4spanIKhEEPiS3_S3_S3_Pb(%"class.pdfium::span"* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i8* nocapture) unnamed_addr #0 {
  %7 = alloca %struct.jpeg_decompress_struct, align 8
  %8 = alloca %struct.jpeg_error_mgr, align 8
  %9 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %10 = alloca %struct.jpeg_source_mgr, align 16
  %11 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %44, label %16

16:                                               ; preds = %6
  %17 = add i64 %14, -1
  br label %18

18:                                               ; preds = %38, %16
  %19 = phi i64 [ 0, %16 ], [ %26, %38 ]
  %20 = icmp eq i64 %14, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %18
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !14, !srcloc !6
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !14, !srcloc !7
  unreachable

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, i8* %12, i64 %19
  %24 = load i8, i8* %23, align 1, !noalias !14
  %25 = icmp eq i8 %24, -1
  %26 = add nuw i64 %19, 1
  br i1 %25, label %27, label %38

27:                                               ; preds = %22
  %28 = icmp ugt i64 %14, %26
  br i1 %28, label %30, label %29, !prof !8

29:                                               ; preds = %27
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !14, !srcloc !6
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !14, !srcloc !7
  unreachable

30:                                               ; preds = %27
  %31 = getelementptr inbounds i8, i8* %12, i64 %26
  %32 = load i8, i8* %31, align 1, !noalias !14
  %33 = icmp eq i8 %32, -40
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %12, i64 %19
  %36 = icmp ult i64 %14, %19
  br i1 %36, label %37, label %40, !prof !2

37:                                               ; preds = %34
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !17, !srcloc !12
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !noalias !17, !srcloc !13
  unreachable

38:                                               ; preds = %30, %22
  %39 = icmp eq i64 %26, %17
  br i1 %39, label %44, label %18

40:                                               ; preds = %34
  %41 = sub i64 %14, %19
  %42 = icmp eq i64 %19, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %40
  store i8* %35, i8** %11, align 8
  br label %44

44:                                               ; preds = %38, %6, %40, %43
  %45 = phi i64 [ %41, %40 ], [ %41, %43 ], [ 1, %6 ], [ %14, %38 ]
  store i64 %45, i64* %13, align 8
  %46 = bitcast %struct.jpeg_decompress_struct* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 632, i8* nonnull %46) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %46, i8* align 8 bitcast ({ %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, [4 x i8], double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [4 x i8], [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, [4 x i8], %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, [1 x i8], i16, i16, i32, i8, [3 x i8], i32, [4 x i8], %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x i8], [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }* @__const._ZL12JpegLoadInfoN6pdfium4spanIKhEEPiS3_S3_S3_Pb.cinfo to i8*), i64 632, i1 false)
  %47 = bitcast %struct.jpeg_error_mgr* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %47) #11
  %48 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 5
  %49 = bitcast i32* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 128, i1 false)
  %50 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 0
  store void (%struct.jpeg_common_struct*)* @_ZL11error_fatalP18jpeg_common_struct, void (%struct.jpeg_common_struct*)** %50, align 8
  %51 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 1
  store void (%struct.jpeg_common_struct*, i32)* @error_do_nothing_int, void (%struct.jpeg_common_struct*, i32)** %51, align 8
  %52 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 2
  store void (%struct.jpeg_common_struct*)* @error_do_nothing, void (%struct.jpeg_common_struct*)** %52, align 8
  %53 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 3
  store void (%struct.jpeg_common_struct*, i8*)* @error_do_nothing_char, void (%struct.jpeg_common_struct*, i8*)** %53, align 8
  %54 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 4
  store void (%struct.jpeg_common_struct*)* @error_do_nothing, void (%struct.jpeg_common_struct*)** %54, align 8
  %55 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 7
  store i32 0, i32* %55, align 4
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 0
  store %struct.jpeg_error_mgr* %8, %struct.jpeg_error_mgr** %56, align 8
  %57 = bitcast [1 x %struct.__jmp_buf_tag]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %57) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %57, i8 -86, i64 200, i1 false)
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 3
  %59 = bitcast i8** %58 to [1 x %struct.__jmp_buf_tag]**
  store [1 x %struct.__jmp_buf_tag]* %9, [1 x %struct.__jmp_buf_tag]** %59, align 8
  %60 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %9, i64 0, i64 0
  %61 = call i32 @_setjmp(%struct.__jmp_buf_tag* nonnull %60) #12
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %96, label %63

63:                                               ; preds = %44
  call void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct* nonnull %7, i32 62, i64 632) #11
  %64 = bitcast %struct.jpeg_source_mgr* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %64) #11
  %65 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %10, i64 0, i32 2
  store void (%struct.jpeg_decompress_struct*)* @src_do_nothing, void (%struct.jpeg_decompress_struct*)** %65, align 16
  %66 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %10, i64 0, i32 6
  store void (%struct.jpeg_decompress_struct*)* @src_do_nothing, void (%struct.jpeg_decompress_struct*)** %66, align 16
  %67 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %10, i64 0, i32 4
  store void (%struct.jpeg_decompress_struct*, i64)* @_ZL13src_skip_dataP22jpeg_decompress_structl, void (%struct.jpeg_decompress_struct*, i64)** %67, align 16
  %68 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %10, i64 0, i32 3
  store i32 (%struct.jpeg_decompress_struct*)* @src_fill_buffer, i32 (%struct.jpeg_decompress_struct*)** %68, align 8
  %69 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %10, i64 0, i32 5
  store i32 (%struct.jpeg_decompress_struct*, i32)* @src_resync, i32 (%struct.jpeg_decompress_struct*, i32)** %69, align 8
  %70 = bitcast %"class.pdfium::span"* %0 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 8
  %72 = bitcast %struct.jpeg_source_mgr* %10 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %72, align 16
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 6
  store %struct.jpeg_source_mgr* %10, %struct.jpeg_source_mgr** %73, align 8
  %74 = call i32 @_setjmp(%struct.__jmp_buf_tag* nonnull %60) #12
  %75 = icmp eq i32 %74, -1
  br i1 %75, label %94, label %76

76:                                               ; preds = %63
  %77 = call i32 @jpeg_read_header(%struct.jpeg_decompress_struct* nonnull %7, i32 1) #11
  %78 = icmp eq i32 %77, 1
  br i1 %78, label %79, label %94

79:                                               ; preds = %76
  %80 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 7
  %81 = load i32, i32* %80, align 8
  store i32 %81, i32* %1, align 4
  %82 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 8
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %2, align 4
  %84 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 9
  %85 = load i32, i32* %84, align 8
  store i32 %85, i32* %3, align 4
  %86 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 10
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 3
  %89 = icmp eq i32 %87, 5
  %90 = or i1 %88, %89
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %5, align 1
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %7, i64 0, i32 43
  %93 = load i32, i32* %92, align 8
  store i32 %93, i32* %4, align 4
  br label %94

94:                                               ; preds = %76, %63, %79
  %95 = phi i1 [ true, %79 ], [ false, %63 ], [ false, %76 ]
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* nonnull %7) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %64) #11
  br label %96

96:                                               ; preds = %44, %94
  %97 = phi i1 [ %95, %94 ], [ false, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %57) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %47) #11
  call void @llvm.lifetime.end.p0i8(i64 632, i8* nonnull %46) #11
  ret i1 %97
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal void @_ZL11error_fatalP18jpeg_common_struct(%struct.jpeg_common_struct* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 3
  %3 = bitcast i8** %2 to [1 x %struct.__jmp_buf_tag]**
  %4 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %3, align 8
  %5 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %4, i64 0, i64 0
  tail call void @__longjmp_chk(%struct.__jmp_buf_tag* %5, i32 -1) #13
  unreachable
}

declare void @error_do_nothing_int(%struct.jpeg_common_struct*, i32) #3

declare void @error_do_nothing(%struct.jpeg_common_struct*) #3

declare void @error_do_nothing_char(%struct.jpeg_common_struct*, i8*) #3

declare void @src_do_nothing(%struct.jpeg_decompress_struct*) #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13src_skip_dataP22jpeg_decompress_structl(%struct.jpeg_decompress_struct* nocapture readonly, i64) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %4 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %4, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp slt i64 %6, %1
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void @_ZL11error_fatalP18jpeg_common_struct(%struct.jpeg_common_struct* %9)
  unreachable

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  store i8* %13, i8** %11, align 8
  %14 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %3, align 8
  %15 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %14, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %1
  store i64 %17, i64* %15, align 8
  ret void
}

declare i32 @src_fill_buffer(%struct.jpeg_decompress_struct*) #3

declare i32 @src_resync(%struct.jpeg_decompress_struct*, i32) #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder10InitDecodeEb(%"class.fxcodec::(anonymous namespace)::JpegDecoder"*, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %4, i64 0, i32 0
  store %struct.jpeg_error_mgr* %3, %struct.jpeg_error_mgr** %5, align 8
  %6 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 3
  %8 = bitcast i8** %7 to [1 x %struct.__jmp_buf_tag]**
  store [1 x %struct.__jmp_buf_tag]* %6, [1 x %struct.__jmp_buf_tag]** %8, align 8
  %9 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %6, i64 0, i64 0
  %10 = call i32 @_setjmp(%struct.__jmp_buf_tag* %9) #12
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %129, label %12

12:                                               ; preds = %2
  call void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct* %4, i32 62, i64 632) #11
  %13 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 4
  %14 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 6
  store %struct.jpeg_source_mgr* %13, %struct.jpeg_source_mgr** %14, align 8
  %15 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 5, i32 1
  %16 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 5, i32 0, i32 0
  %17 = bitcast i8** %16 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 8
  %19 = bitcast %struct.jpeg_source_mgr* %13 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %19, align 8
  %20 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 7
  store i8 1, i8* %20, align 8
  %21 = call i32 @_setjmp(%struct.__jmp_buf_tag* %9) #12
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %94

23:                                               ; preds = %12
  br i1 %1, label %24, label %80

24:                                               ; preds = %23
  %25 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 0
  %26 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %25, align 8
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 5
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 41
  %30 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 8
  %31 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 1
  %32 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 2
  br i1 %29, label %33, label %80

33:                                               ; preds = %24
  %34 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 7
  %35 = load i32, i32* %34, align 8
  %36 = icmp ult i32 %35, 65500
  br i1 %36, label %37, label %80

37:                                               ; preds = %33
  %38 = load i32, i32* %30, align 4
  %39 = icmp eq i32 %38, 65535
  br i1 %39, label %40, label %80

40:                                               ; preds = %37
  %41 = load i32, i32* %31, align 8
  %42 = add i32 %41, -1
  %43 = icmp ult i32 %42, 65500
  br i1 %43, label %44, label %80

44:                                               ; preds = %40
  %45 = load i32, i32* %32, align 4
  %46 = add i32 %45, -1
  %47 = icmp ult i32 %46, 65500
  br i1 %47, label %48, label %80

48:                                               ; preds = %44
  %49 = load i64, i64* %15, align 8
  %50 = icmp ugt i64 %49, 97
  br i1 %50, label %51, label %80

51:                                               ; preds = %48
  %52 = load i8*, i8** %16, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 89
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, -1
  br i1 %55, label %56, label %131

56:                                               ; preds = %51
  %57 = getelementptr inbounds i8, i8* %52, i64 90
  %58 = load i8, i8* %57, align 1
  %59 = and i8 %58, -16
  %60 = icmp eq i8 %59, -64
  br i1 %60, label %61, label %131

61:                                               ; preds = %56
  %62 = getelementptr inbounds i8, i8* %52, i64 94
  %63 = lshr i32 %41, 8
  %64 = load i8, i8* %62, align 1
  %65 = icmp eq i8 %64, -1
  br i1 %65, label %66, label %131

66:                                               ; preds = %61
  %67 = getelementptr inbounds i8, i8* %52, i64 95
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, -1
  br i1 %69, label %70, label %131

70:                                               ; preds = %66
  %71 = getelementptr inbounds i8, i8* %52, i64 96
  %72 = load i8, i8* %71, align 1
  %73 = trunc i32 %63 to i8
  %74 = icmp eq i8 %72, %73
  br i1 %74, label %75, label %131

75:                                               ; preds = %70
  %76 = getelementptr inbounds i8, i8* %52, i64 97
  %77 = load i8, i8* %76, align 1
  %78 = trunc i32 %41 to i8
  %79 = icmp eq i8 %77, %78
  br i1 %79, label %81, label %131

80:                                               ; preds = %48, %44, %40, %37, %33, %131, %134, %139, %144, %149, %153, %158, %24, %23
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* %4) #11
  store i8 0, i8* %20, align 8
  br label %129

81:                                               ; preds = %158, %75
  %82 = phi i64 [ 94, %75 ], [ 163, %158 ]
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* %4) #11
  %83 = load i8*, i8** %16, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %82
  %85 = load i32, i32* %32, align 4
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %84, align 1
  %88 = load i32, i32* %32, align 4
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds i8, i8* %84, i64 1
  store i8 %89, i8* %90, align 1
  call void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct* %4, i32 62, i64 632) #11
  store %struct.jpeg_source_mgr* %13, %struct.jpeg_source_mgr** %14, align 8
  %91 = bitcast i8** %16 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8
  %93 = bitcast %struct.jpeg_source_mgr* %13 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %93, align 8
  br label %94

94:                                               ; preds = %81, %12
  %95 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 1
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 7
  store i32 %96, i32* %97, align 8
  %98 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 8
  store i32 %99, i32* %100, align 4
  %101 = call i32 @jpeg_read_header(%struct.jpeg_decompress_struct* %4, i32 1) #11
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %129

103:                                              ; preds = %94
  %104 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 57
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 9
  store i8 1, i8* %108, align 2
  br label %109

109:                                              ; preds = %103, %107
  %110 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 9
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %111, 3
  br i1 %112, label %113, label %121

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 9
  %115 = load i8, i8* %114, align 2, !range !20
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %121

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 10
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 11
  store i32 %119, i32* %120, align 8
  br label %121

121:                                              ; preds = %113, %117, %109
  %122 = bitcast i32* %97 to <2 x i32>*
  %123 = load <2 x i32>, <2 x i32>* %122, align 8
  %124 = shufflevector <2 x i32> %123, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %125 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %125, align 8
  %126 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 13
  %127 = load i32, i32* %126, align 8
  %128 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 10
  store i32 %127, i32* %128, align 4
  br label %129

129:                                              ; preds = %121, %94, %80, %2
  %130 = phi i1 [ false, %80 ], [ false, %2 ], [ true, %121 ], [ false, %94 ]
  ret i1 %130

131:                                              ; preds = %51, %61, %66, %70, %56, %75
  %132 = load i64, i64* %15, align 8
  %133 = icmp ugt i64 %132, 166
  br i1 %133, label %134, label %80

134:                                              ; preds = %131
  %135 = load i8*, i8** %16, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 158
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, -1
  br i1 %138, label %139, label %80

139:                                              ; preds = %134
  %140 = getelementptr inbounds i8, i8* %135, i64 159
  %141 = load i8, i8* %140, align 1
  %142 = and i8 %141, -16
  %143 = icmp eq i8 %142, -64
  br i1 %143, label %144, label %80

144:                                              ; preds = %139
  %145 = getelementptr inbounds i8, i8* %135, i64 163
  %146 = lshr i32 %41, 8
  %147 = load i8, i8* %145, align 1
  %148 = icmp eq i8 %147, -1
  br i1 %148, label %149, label %80

149:                                              ; preds = %144
  %150 = getelementptr inbounds i8, i8* %135, i64 164
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, -1
  br i1 %152, label %153, label %80

153:                                              ; preds = %149
  %154 = getelementptr inbounds i8, i8* %135, i64 165
  %155 = load i8, i8* %154, align 1
  %156 = trunc i32 %146 to i8
  %157 = icmp eq i8 %155, %156
  br i1 %157, label %158, label %80

158:                                              ; preds = %153
  %159 = getelementptr inbounds i8, i8* %135, i64 166
  %160 = load i8, i8* %159, align 1
  %161 = trunc i32 %41 to i8
  %162 = icmp eq i8 %160, %161
  br i1 %162, label %81, label %80
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @__longjmp_chk(%struct.__jmp_buf_tag*, i32) local_unnamed_addr #4

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #5

declare void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct*, i32, i64) local_unnamed_addr #3

declare void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #3

declare i32 @jpeg_read_header(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #3

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN7fxcodec15ScanlineDecoderC2Ev(%"class.fxcodec::ScanlineDecoder"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_111JpegDecoderD2Ev(%"class.fxcodec::(anonymous namespace)::JpegDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_111JpegDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 8, !range !20
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2
  tail call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* %7) #11
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* null, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @_Z7FX_FreePv(i8* nonnull %10) #11
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %14) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_111JpegDecoderD0Ev(%"class.fxcodec::(anonymous namespace)::JpegDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_111JpegDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 8, !range !20
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2
  tail call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* %7) #11
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* null, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @_Z7FX_FreePv(i8* nonnull %10) #11
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %14) #11
  %15 = bitcast %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %15) #10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder12GetSrcOffsetEv(%"class.fxcodec::(anonymous namespace)::JpegDecoder"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 5, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 4, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %3, %5
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder8v_RewindEv(%"class.fxcodec::(anonymous namespace)::JpegDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 1, !range !20
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* %6) #11
  %7 = call fastcc zeroext i1 @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder10InitDecodeEb(%"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i1 zeroext false)
  br i1 %7, label %8, label %32

8:                                                ; preds = %1, %5
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 1, i64 0
  %10 = call i32 @_setjmp(%struct.__jmp_buf_tag* %9) #12
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %32, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 13
  store i32 %14, i32* %16, align 8
  %17 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 3
  store i32 %18, i32* %19, align 8
  %20 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 0, i32 4
  store i32 %21, i32* %22, align 4
  %23 = call i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct* %15) #11
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %12
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* %15) #11
  br label %32

26:                                               ; preds = %12
  %27 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2, i32 27
  %28 = load i32, i32* %27, align 8
  %29 = load i32, i32* %17, align 8
  %30 = icmp sgt i32 %28, %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %26
  store i8 1, i8* %2, align 1
  br label %32

32:                                               ; preds = %26, %8, %5, %31, %25
  %33 = phi i1 [ true, %31 ], [ false, %25 ], [ false, %5 ], [ false, %8 ], [ false, %26 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @_ZN7fxcodec12_GLOBAL__N_111JpegDecoder13v_GetNextLineEv(%"class.fxcodec::(anonymous namespace)::JpegDecoder"*) unnamed_addr #0 align 2 {
  %2 = alloca [1 x i8*], align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 1, i64 0
  %4 = call i32 @_setjmp(%struct.__jmp_buf_tag* %3) #12
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast [1 x i8*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  %8 = getelementptr inbounds [1 x i8*], [1 x i8*]* %2, i64 0, i64 0
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast [1 x i8*]* %2 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::JpegDecoder", %"class.fxcodec::(anonymous namespace)::JpegDecoder"* %0, i64 0, i32 2
  %14 = call i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct* %13, i8** nonnull %8, i32 1) #11
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %6
  %17 = load i8*, i8** %9, align 8
  br label %18

18:                                               ; preds = %6, %16
  %19 = phi i8* [ %17, %16 ], [ null, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  br label %20

20:                                               ; preds = %1, %18
  %21 = phi i8* [ %19, %18 ], [ null, %1 ]
  ret i8* %21
}

; Function Attrs: nounwind
declare void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"*) unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

declare i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #3

declare i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct*, i8**, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { nounwind returns_twice }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZL11JpegScanSOIN6pdfium4spanIKhEE: argument 0"}
!5 = distinct !{!5, !"_ZL11JpegScanSOIN6pdfium4spanIKhEE"}
!6 = !{i32 -2144616870}
!7 = !{i32 -2144616849}
!8 = !{!"branch_weights", i32 2000, i32 1}
!9 = !{!10, !4}
!10 = distinct !{!10, !11, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!11 = distinct !{!11, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!12 = !{i32 -2144617996}
!13 = !{i32 -2144617975}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZL11JpegScanSOIN6pdfium4spanIKhEE: argument 0"}
!16 = distinct !{!16, !"_ZL11JpegScanSOIN6pdfium4spanIKhEE"}
!17 = !{!18, !15}
!18 = distinct !{!18, !19, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!19 = distinct !{!19, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!20 = !{i8 0, i8 2}
