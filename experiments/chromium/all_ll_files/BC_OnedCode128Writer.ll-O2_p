; ModuleID = '../../third_party/pdfium/fxbarcode/oned/BC_OnedCode128Writer.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/oned/BC_OnedCode128Writer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_OnedCode128Writer = type { %class.CBC_OneDimWriter.base, i8, [3 x i8] }
%class.CBC_OneDimWriter.base = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float }>
%class.CBC_Writer.base = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16 }>
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%class.CFX_Font = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFX_PathData*, %class.CFX_PathData*, %"class.std::__1::__compressed_pair" }
%class.CFX_PathData = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_PathData* }
%class.CBC_OneDimWriter = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float, [4 x i8] }>
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.1", i64 }
%"class.fxcrt::UnownedPtr.1" = type { i32* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.5" }
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.fxcrt::StringDataTemplate.9"* }
%"class.fxcrt::StringDataTemplate.9" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { i32*, i32*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.CBC_Writer = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16, [2 x i8] }>
%class.CFX_RenderDevice = type opaque
%class.CFX_Matrix = type { float, float, float, float, float, float }

@_ZTV21CBC_OnedCode128Writer = hidden unnamed_addr constant { [26 x i8*] } { [26 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_OnedCode128Writer*)* @_ZN21CBC_OnedCode128WriterD2Ev to i8*), i8* bitcast (void (%class.CBC_OnedCode128Writer*)* @_ZN21CBC_OnedCode128WriterD0Ev to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetCharEncodingEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetModuleHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer14SetModuleWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer9SetHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer8SetWidthEi to i8*), i8* bitcast (i1 (%class.CBC_OnedCode128Writer*, i8)* @_ZN21CBC_OnedCode128Writer15SetTextLocationE11BC_TEXT_LOC to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer18SetWideNarrowRatioEa to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer12SetStartCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer10SetEndCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer23SetErrorCorrectionLevelEi to i8*), i8* bitcast (i1 (%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, i8*, i32)* @_ZN16CBC_OneDimWriter12RenderResultEN5fxcrt18StringViewTemplateIwEEPhi to i8*), i8* bitcast (i1 (%class.CBC_OnedCode128Writer*, %"class.fxcrt::StringViewTemplate"*)* @_ZN21CBC_OnedCode128Writer20CheckContentValidityEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (void (%"class.fxcrt::WideString"*, %class.CBC_OnedCode128Writer*, %"class.fxcrt::StringViewTemplate"*)* @_ZN21CBC_OnedCode128Writer14FilterContentsEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i1)* @_ZN16CBC_OneDimWriter16SetPrintChecksumEb to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter13SetDataLengthEi to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i1)* @_ZN16CBC_OneDimWriter15SetCalcChecksumEb to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, float)* @_ZN16CBC_OneDimWriter11SetFontSizeEf to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter12SetFontStyleEi to i8*), i8* bitcast (void (%class.CBC_OneDimWriter*, i32)* @_ZN16CBC_OneDimWriter12SetFontColorEj to i8*), i8* bitcast (i8* (%class.CBC_OnedCode128Writer*, %"class.fxcrt::ByteString"*, i32, i32*, i32*, i32)* @_ZN21CBC_OnedCode128Writer14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i to i8*), i8* bitcast (i8* (%class.CBC_OnedCode128Writer*, %"class.fxcrt::ByteString"*, i32*)* @_ZN21CBC_OnedCode128Writer10EncodeImplERKN5fxcrt10ByteStringERi to i8*), i8* bitcast (i1 (%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, %class.CFX_RenderDevice*, %class.CFX_Matrix*, i32, i32)* @_ZN16CBC_OneDimWriter9ShowCharsEN5fxcrt18StringViewTemplateIwEEP16CFX_RenderDeviceRK10CFX_Matrixii to i8*)] }, align 8
@_ZN12_GLOBAL__N_113CODE_PATTERNSE = internal constant [107 x [7 x i8]] [[7 x i8] c"\02\01\02\02\02\02\00", [7 x i8] c"\02\02\02\01\02\02\00", [7 x i8] c"\02\02\02\02\02\01\00", [7 x i8] c"\01\02\01\02\02\03\00", [7 x i8] c"\01\02\01\03\02\02\00", [7 x i8] c"\01\03\01\02\02\02\00", [7 x i8] c"\01\02\02\02\01\03\00", [7 x i8] c"\01\02\02\03\01\02\00", [7 x i8] c"\01\03\02\02\01\02\00", [7 x i8] c"\02\02\01\02\01\03\00", [7 x i8] c"\02\02\01\03\01\02\00", [7 x i8] c"\02\03\01\02\01\02\00", [7 x i8] c"\01\01\02\02\03\02\00", [7 x i8] c"\01\02\02\01\03\02\00", [7 x i8] c"\01\02\02\02\03\01\00", [7 x i8] c"\01\01\03\02\02\02\00", [7 x i8] c"\01\02\03\01\02\02\00", [7 x i8] c"\01\02\03\02\02\01\00", [7 x i8] c"\02\02\03\02\01\01\00", [7 x i8] c"\02\02\01\01\03\02\00", [7 x i8] c"\02\02\01\02\03\01\00", [7 x i8] c"\02\01\03\02\01\02\00", [7 x i8] c"\02\02\03\01\01\02\00", [7 x i8] c"\03\01\02\01\03\01\00", [7 x i8] c"\03\01\01\02\02\02\00", [7 x i8] c"\03\02\01\01\02\02\00", [7 x i8] c"\03\02\01\02\02\01\00", [7 x i8] c"\03\01\02\02\01\02\00", [7 x i8] c"\03\02\02\01\01\02\00", [7 x i8] c"\03\02\02\02\01\01\00", [7 x i8] c"\02\01\02\01\02\03\00", [7 x i8] c"\02\01\02\03\02\01\00", [7 x i8] c"\02\03\02\01\02\01\00", [7 x i8] c"\01\01\01\03\02\03\00", [7 x i8] c"\01\03\01\01\02\03\00", [7 x i8] c"\01\03\01\03\02\01\00", [7 x i8] c"\01\01\02\03\01\03\00", [7 x i8] c"\01\03\02\01\01\03\00", [7 x i8] c"\01\03\02\03\01\01\00", [7 x i8] c"\02\01\01\03\01\03\00", [7 x i8] c"\02\03\01\01\01\03\00", [7 x i8] c"\02\03\01\03\01\01\00", [7 x i8] c"\01\01\02\01\03\03\00", [7 x i8] c"\01\01\02\03\03\01\00", [7 x i8] c"\01\03\02\01\03\01\00", [7 x i8] c"\01\01\03\01\02\03\00", [7 x i8] c"\01\01\03\03\02\01\00", [7 x i8] c"\01\03\03\01\02\01\00", [7 x i8] c"\03\01\03\01\02\01\00", [7 x i8] c"\02\01\01\03\03\01\00", [7 x i8] c"\02\03\01\01\03\01\00", [7 x i8] c"\02\01\03\01\01\03\00", [7 x i8] c"\02\01\03\03\01\01\00", [7 x i8] c"\02\01\03\01\03\01\00", [7 x i8] c"\03\01\01\01\02\03\00", [7 x i8] c"\03\01\01\03\02\01\00", [7 x i8] c"\03\03\01\01\02\01\00", [7 x i8] c"\03\01\02\01\01\03\00", [7 x i8] c"\03\01\02\03\01\01\00", [7 x i8] c"\03\03\02\01\01\01\00", [7 x i8] c"\03\01\04\01\01\01\00", [7 x i8] c"\02\02\01\04\01\01\00", [7 x i8] c"\04\03\01\01\01\01\00", [7 x i8] c"\01\01\01\02\02\04\00", [7 x i8] c"\01\01\01\04\02\02\00", [7 x i8] c"\01\02\01\01\02\04\00", [7 x i8] c"\01\02\01\04\02\01\00", [7 x i8] c"\01\04\01\01\02\02\00", [7 x i8] c"\01\04\01\02\02\01\00", [7 x i8] c"\01\01\02\02\01\04\00", [7 x i8] c"\01\01\02\04\01\02\00", [7 x i8] c"\01\02\02\01\01\04\00", [7 x i8] c"\01\02\02\04\01\01\00", [7 x i8] c"\01\04\02\01\01\02\00", [7 x i8] c"\01\04\02\02\01\01\00", [7 x i8] c"\02\04\01\02\01\01\00", [7 x i8] c"\02\02\01\01\01\04\00", [7 x i8] c"\04\01\03\01\01\01\00", [7 x i8] c"\02\04\01\01\01\02\00", [7 x i8] c"\01\03\04\01\01\01\00", [7 x i8] c"\01\01\01\02\04\02\00", [7 x i8] c"\01\02\01\01\04\02\00", [7 x i8] c"\01\02\01\02\04\01\00", [7 x i8] c"\01\01\04\02\01\02\00", [7 x i8] c"\01\02\04\01\01\02\00", [7 x i8] c"\01\02\04\02\01\01\00", [7 x i8] c"\04\01\01\02\01\02\00", [7 x i8] c"\04\02\01\01\01\02\00", [7 x i8] c"\04\02\01\02\01\01\00", [7 x i8] c"\02\01\02\01\04\01\00", [7 x i8] c"\02\01\04\01\02\01\00", [7 x i8] c"\04\01\02\01\02\01\00", [7 x i8] c"\01\01\01\01\04\03\00", [7 x i8] c"\01\01\01\03\04\01\00", [7 x i8] c"\01\03\01\01\04\01\00", [7 x i8] c"\01\01\04\01\01\03\00", [7 x i8] c"\01\01\04\03\01\01\00", [7 x i8] c"\04\01\01\01\01\03\00", [7 x i8] c"\04\01\01\03\01\01\00", [7 x i8] c"\01\01\03\01\04\01\00", [7 x i8] c"\01\01\04\01\03\01\00", [7 x i8] c"\03\01\01\01\04\01\00", [7 x i8] c"\04\01\01\01\03\01\00", [7 x i8] c"\02\01\01\04\01\02\00", [7 x i8] c"\02\01\01\02\01\04\00", [7 x i8] c"\02\01\01\02\03\02\00", [7 x i8] c"\02\03\03\01\01\01\02"], align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

@_ZN21CBC_OnedCode128WriterC1E7BC_TYPE = hidden unnamed_addr alias void (%class.CBC_OnedCode128Writer*, i8), void (%class.CBC_OnedCode128Writer*, i8)* @_ZN21CBC_OnedCode128WriterC2E7BC_TYPE
@_ZN21CBC_OnedCode128WriterD1Ev = hidden unnamed_addr alias void (%class.CBC_OnedCode128Writer*), void (%class.CBC_OnedCode128Writer*)* @_ZN21CBC_OnedCode128WriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CBC_OnedCode128WriterC2E7BC_TYPE(%class.CBC_OnedCode128Writer*, i8 signext) unnamed_addr #0 align 2 {
  %3 = bitcast %class.CBC_OnedCode128Writer* %0 to %class.CBC_OneDimWriter*
  tail call void @_ZN16CBC_OneDimWriterC2Ev(%class.CBC_OneDimWriter* %3) #9
  %4 = getelementptr inbounds %class.CBC_OnedCode128Writer, %class.CBC_OnedCode128Writer* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*] }, { [26 x i8*] }* @_ZTV21CBC_OnedCode128Writer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.CBC_OnedCode128Writer, %class.CBC_OnedCode128Writer* %0, i64 0, i32 1
  store i8 %1, i8* %5, align 4
  ret void
}

declare void @_ZN16CBC_OneDimWriterC2Ev(%class.CBC_OneDimWriter*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN16CBC_OneDimWriterD2Ev(%class.CBC_OneDimWriter*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CBC_OnedCode128WriterD2Ev(%class.CBC_OnedCode128Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedCode128Writer* %0 to %class.CBC_OneDimWriter*
  tail call void @_ZN16CBC_OneDimWriterD2Ev(%class.CBC_OneDimWriter* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CBC_OnedCode128WriterD0Ev(%class.CBC_OnedCode128Writer*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_OnedCode128Writer* %0 to %class.CBC_OneDimWriter*
  tail call void @_ZN16CBC_OneDimWriterD2Ev(%class.CBC_OneDimWriter* %2) #9
  %3 = bitcast %class.CBC_OnedCode128Writer* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN21CBC_OnedCode128Writer20CheckContentValidityEN5fxcrt18StringViewTemplateIwEE(%class.CBC_OnedCode128Writer* nocapture readnone, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %4 = bitcast %"class.fxcrt::StringViewTemplate"* %3 to i8*
  %5 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 16, i1 false)
  %6 = call zeroext i1 @_ZN16CBC_OneDimWriter19HasValidContentSizeEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"* nonnull %3) #9
  br i1 %6, label %7, label %24

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %24, label %16

14:                                               ; preds = %16
  %15 = icmp eq i32* %23, %12
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %14
  %17 = phi i32* [ %23, %14 ], [ %9, %7 ]
  %18 = load i32, i32* %17, align 4
  %19 = add i32 %18, -32
  %20 = icmp ult i32 %19, 95
  %21 = icmp ne i32 %18, 34
  %22 = and i1 %21, %20
  %23 = getelementptr inbounds i32, i32* %17, i64 1
  br i1 %22, label %14, label %24

24:                                               ; preds = %16, %14, %7, %2
  %25 = phi i1 [ false, %2 ], [ true, %7 ], [ false, %16 ], [ true, %14 ]
  ret i1 %25
}

declare zeroext i1 @_ZN16CBC_OneDimWriter19HasValidContentSizeEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CBC_OnedCode128Writer14FilterContentsEN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::WideString"* noalias sret, %class.CBC_OnedCode128Writer* nocapture readonly, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CBC_OnedCode128Writer, %class.CBC_OnedCode128Writer* %1, i64 0, i32 1
  %5 = load i8, i8* %4, align 4
  %6 = icmp eq i8 %5, 3
  %7 = select i1 %6, i32 126, i32 106
  %8 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %8, align 8
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #9
  %9 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %2, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  tail call void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"* %0, i64 %10) #9
  %11 = load i64, i64* %9, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %36, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %2, i64 0, i32 0, i32 0, i32 0
  br label %15

15:                                               ; preds = %13, %31
  %16 = phi i64 [ %11, %13 ], [ %32, %31 ]
  %17 = phi i64 [ 0, %13 ], [ %34, %31 ]
  %18 = load i32*, i32** %14, align 8
  %19 = getelementptr inbounds i32, i32* %18, i64 %17
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 175
  br i1 %21, label %22, label %24

22:                                               ; preds = %15
  %23 = add nuw i64 %17, 1
  br label %31

24:                                               ; preds = %15
  %25 = icmp slt i32 %20, 32
  %26 = icmp sgt i32 %20, %7
  %27 = or i1 %25, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = tail call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext %20) #9
  %30 = load i64, i64* %9, align 8
  br label %31

31:                                               ; preds = %28, %24, %22
  %32 = phi i64 [ %16, %22 ], [ %16, %24 ], [ %30, %28 ]
  %33 = phi i64 [ %23, %22 ], [ %17, %24 ], [ %17, %28 ]
  %34 = add i64 %33, 1
  %35 = icmp ult i64 %34, %32
  br i1 %35, label %15, label %36

36:                                               ; preds = %31, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

declare void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"*, i64) local_unnamed_addr #1

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN21CBC_OnedCode128Writer15SetTextLocationE11BC_TEXT_LOC(%class.CBC_OnedCode128Writer* nocapture, i8 zeroext) unnamed_addr #5 align 2 {
  %3 = icmp ugt i8 %1, 4
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.CBC_OnedCode128Writer, %class.CBC_OnedCode128Writer* %0, i64 0, i32 0, i32 10
  store i8 %1, i8* %5, align 4
  br label %6

6:                                                ; preds = %2, %4
  %7 = phi i1 [ true, %4 ], [ false, %2 ]
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN21CBC_OnedCode128Writer14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OnedCode128Writer*, %"class.fxcrt::ByteString"* dereferenceable(8), i32, i32* dereferenceable(4), i32* dereferenceable(4), i32) unnamed_addr #0 align 2 {
  %7 = icmp eq i32 %2, 2
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = bitcast %class.CBC_OnedCode128Writer* %0 to %class.CBC_OneDimWriter*
  %10 = tail call i8* @_ZN16CBC_OneDimWriter14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OneDimWriter* %9, %"class.fxcrt::ByteString"* dereferenceable(8) %1, i32 2, i32* dereferenceable(4) %3, i32* dereferenceable(4) %4, i32 %5) #9
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i8* [ %10, %8 ], [ null, %6 ]
  ret i8* %12
}

declare i8* @_ZN16CBC_OneDimWriter14EncodeWithHintERKN5fxcrt10ByteStringE8BCFORMATRiS5_i(%class.CBC_OneDimWriter*, %"class.fxcrt::ByteString"* dereferenceable(8), i32, i32* dereferenceable(4), i32* dereferenceable(4), i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN21CBC_OnedCode128Writer10EncodeImplERKN5fxcrt10ByteStringERi(%class.CBC_OnedCode128Writer*, %"class.fxcrt::ByteString"* dereferenceable(8), i32* nocapture dereferenceable(4)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.13", align 8
  %5 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %5, align 8
  %7 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %6, null
  br i1 %7, label %222, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %6, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, -1
  %12 = icmp ugt i64 %11, 79
  br i1 %12, label %222, label %13

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::vector.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %4, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %4, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #9
  %18 = getelementptr inbounds %class.CBC_OnedCode128Writer, %class.CBC_OnedCode128Writer* %0, i64 0, i32 1
  %19 = load i8, i8* %18, align 4
  %20 = icmp eq i8 %19, 3
  br i1 %20, label %21, label %23

21:                                               ; preds = %13
  %22 = call i32 @_ZN21CBC_OnedCode128Writer10Encode128BERKN5fxcrt10ByteStringEPNSt3__16vectorIiNS4_9allocatorIiEEEE(%"class.fxcrt::ByteString"* dereferenceable(8) %1, %"class.std::__1::vector.13"* nonnull %4)
  br label %25

23:                                               ; preds = %13
  %24 = call i32 @_ZN21CBC_OnedCode128Writer10Encode128CERKN5fxcrt10ByteStringEPNSt3__16vectorIiNS4_9allocatorIiEEEE(%"class.fxcrt::ByteString"* dereferenceable(8) %1, %"class.std::__1::vector.13"* nonnull %4)
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi i32 [ %24, %23 ], [ %22, %21 ]
  %27 = srem i32 %26, 103
  %28 = load i32*, i32** %16, align 8
  %29 = load i32*, i32** %17, align 8
  %30 = icmp eq i32* %28, %29
  %31 = ptrtoint i32* %29 to i64
  br i1 %30, label %36, label %32

32:                                               ; preds = %25
  store i32 %27, i32* %28, align 4
  %33 = getelementptr inbounds i32, i32* %28, i64 1
  %34 = ptrtoint i32* %33 to i64
  %35 = bitcast i32** %16 to i64*
  store i64 %34, i64* %35, align 8
  br label %84

36:                                               ; preds = %25
  %37 = ptrtoint i32* %28 to i64
  %38 = bitcast i32** %16 to i64*
  %39 = bitcast %"class.std::__1::vector.13"* %4 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = ashr exact i64 %41, 2
  %43 = add nsw i64 %42, 1
  %44 = icmp ugt i64 %43, 4611686018427387903
  br i1 %44, label %45, label %47

45:                                               ; preds = %36
  %46 = bitcast %"class.std::__1::vector.13"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %46) #11
  unreachable

47:                                               ; preds = %36
  %48 = bitcast i32** %17 to i64*
  %49 = sub i64 %31, %40
  %50 = ashr exact i64 %49, 2
  %51 = icmp ult i64 %50, 2305843009213693951
  br i1 %51, label %52, label %60

52:                                               ; preds = %47
  %53 = ashr exact i64 %49, 1
  %54 = icmp ult i64 %53, %43
  %55 = select i1 %54, i64 %43, i64 %53
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %52
  %58 = icmp ugt i64 %55, 4611686018427387903
  br i1 %58, label %59, label %60

59:                                               ; preds = %57
  call void @abort() #11
  unreachable

60:                                               ; preds = %57, %47
  %61 = phi i64 [ %55, %57 ], [ 4611686018427387903, %47 ]
  %62 = shl i64 %61, 2
  %63 = call i8* @_Znwm(i64 %62) #10
  %64 = bitcast i8* %63 to i32*
  br label %65

65:                                               ; preds = %60, %52
  %66 = phi i64 [ %61, %60 ], [ 0, %52 ]
  %67 = phi i8* [ %63, %60 ], [ null, %52 ]
  %68 = phi i32* [ %64, %60 ], [ null, %52 ]
  %69 = getelementptr inbounds i32, i32* %68, i64 %42
  %70 = getelementptr inbounds i32, i32* %68, i64 %66
  %71 = ptrtoint i32* %70 to i64
  store i32 %27, i32* %69, align 4
  %72 = getelementptr inbounds i32, i32* %69, i64 1
  %73 = ptrtoint i32* %72 to i64
  %74 = ptrtoint i32* %68 to i64
  %75 = icmp sgt i64 %41, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %65
  %77 = inttoptr i64 %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %77, i64 %41, i1 false) #9
  br label %78

78:                                               ; preds = %76, %65
  store i64 %74, i64* %39, align 8
  store i64 %73, i64* %38, align 8
  store i64 %71, i64* %48, align 8
  %79 = icmp eq i64 %40, 0
  br i1 %79, label %84, label %80

80:                                               ; preds = %78
  %81 = inttoptr i64 %40 to i8*
  call void @_ZdlPv(i8* %81) #10
  %82 = load i32*, i32** %16, align 8
  %83 = ptrtoint i32* %82 to i64
  br label %84

84:                                               ; preds = %32, %78, %80
  %85 = phi i64 [ %34, %32 ], [ %73, %78 ], [ %83, %80 ]
  %86 = phi i32* [ %33, %32 ], [ %72, %78 ], [ %82, %80 ]
  %87 = load i32*, i32** %17, align 8
  %88 = icmp eq i32* %86, %87
  br i1 %88, label %93, label %89

89:                                               ; preds = %84
  store i32 106, i32* %86, align 4
  %90 = getelementptr inbounds i32, i32* %86, i64 1
  %91 = ptrtoint i32* %90 to i64
  %92 = bitcast i32** %16 to i64*
  store i64 %91, i64* %92, align 8
  br label %141

93:                                               ; preds = %84
  %94 = ptrtoint i32* %87 to i64
  %95 = bitcast i32** %16 to i64*
  %96 = bitcast %"class.std::__1::vector.13"* %4 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %94, %97
  %99 = ashr exact i64 %98, 2
  %100 = add nsw i64 %99, 1
  %101 = icmp ugt i64 %100, 4611686018427387903
  br i1 %101, label %102, label %104

102:                                              ; preds = %93
  %103 = bitcast %"class.std::__1::vector.13"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %103) #11
  unreachable

104:                                              ; preds = %93
  %105 = bitcast i32** %17 to i64*
  %106 = icmp ult i64 %99, 2305843009213693951
  br i1 %106, label %107, label %115

107:                                              ; preds = %104
  %108 = ashr exact i64 %98, 1
  %109 = icmp ult i64 %108, %100
  %110 = select i1 %109, i64 %100, i64 %108
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %120, label %112

112:                                              ; preds = %107
  %113 = icmp ugt i64 %110, 4611686018427387903
  br i1 %113, label %114, label %115

114:                                              ; preds = %112
  call void @abort() #11
  unreachable

115:                                              ; preds = %112, %104
  %116 = phi i64 [ %110, %112 ], [ 4611686018427387903, %104 ]
  %117 = shl i64 %116, 2
  %118 = call i8* @_Znwm(i64 %117) #10
  %119 = bitcast i8* %118 to i32*
  br label %120

120:                                              ; preds = %115, %107
  %121 = phi i64 [ %116, %115 ], [ 0, %107 ]
  %122 = phi i32* [ %119, %115 ], [ null, %107 ]
  %123 = getelementptr inbounds i32, i32* %122, i64 %99
  %124 = getelementptr inbounds i32, i32* %122, i64 %121
  %125 = ptrtoint i32* %124 to i64
  store i32 106, i32* %123, align 4
  %126 = getelementptr inbounds i32, i32* %123, i64 1
  %127 = ptrtoint i32* %126 to i64
  %128 = sub i64 %85, %97
  %129 = ashr exact i64 %128, 2
  %130 = sub nsw i64 0, %129
  %131 = getelementptr inbounds i32, i32* %123, i64 %130
  %132 = ptrtoint i32* %131 to i64
  %133 = icmp sgt i64 %128, 0
  br i1 %133, label %134, label %137

134:                                              ; preds = %120
  %135 = bitcast i32* %131 to i8*
  %136 = inttoptr i64 %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %135, i8* align 4 %136, i64 %128, i1 false) #9
  br label %137

137:                                              ; preds = %134, %120
  store i64 %132, i64* %96, align 8
  store i64 %127, i64* %95, align 8
  store i64 %125, i64* %105, align 8
  %138 = icmp eq i64 %97, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %137
  %140 = inttoptr i64 %97 to i8*
  call void @_ZdlPv(i8* %140) #10
  br label %141

141:                                              ; preds = %89, %137, %139
  %142 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %5, align 8
  %143 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %142, null
  br i1 %143, label %148, label %144

144:                                              ; preds = %141
  %145 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %142, i64 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %146, 3
  br label %148

148:                                              ; preds = %141, %144
  %149 = phi i64 [ %147, %144 ], [ 3, %141 ]
  %150 = bitcast %class.CBC_OnedCode128Writer* %0 to %class.CBC_OneDimWriter*
  %151 = getelementptr inbounds %class.CBC_OnedCode128Writer, %class.CBC_OnedCode128Writer* %0, i64 0, i32 0, i32 14
  store i64 %149, i64* %151, align 8
  %152 = load i32*, i32** %15, align 8
  %153 = load i32*, i32** %16, align 8
  %154 = icmp eq i32* %152, %153
  br i1 %154, label %155, label %164

155:                                              ; preds = %164, %148
  %156 = phi i32 [ 0, %148 ], [ %196, %164 ]
  store i32 %156, i32* %2, align 4
  %157 = sext i32 %156 to i64
  %158 = call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %157, i64 1) #9
  %159 = bitcast i32** %16 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"class.std::__1::vector.13"* %4 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = icmp eq i64 %160, %162
  br i1 %163, label %199, label %205

164:                                              ; preds = %148, %164
  %165 = phi i32 [ %196, %164 ], [ 0, %148 ]
  %166 = phi i32* [ %197, %164 ], [ %152, %148 ]
  %167 = load i32, i32* %166, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 0
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = add nsw i32 %165, %171
  %173 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 1
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = add nsw i32 %172, %175
  %177 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 2
  %178 = load i8, i8* %177, align 1
  %179 = sext i8 %178 to i32
  %180 = add nsw i32 %176, %179
  %181 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  %184 = add nsw i32 %180, %183
  %185 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 4
  %186 = load i8, i8* %185, align 1
  %187 = sext i8 %186 to i32
  %188 = add nsw i32 %184, %187
  %189 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 5
  %190 = load i8, i8* %189, align 1
  %191 = sext i8 %190 to i32
  %192 = add nsw i32 %188, %191
  %193 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %168, i64 6
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = add nsw i32 %192, %195
  %197 = getelementptr inbounds i32, i32* %166, i64 1
  %198 = icmp eq i32* %197, %153
  br i1 %198, label %155, label %164

199:                                              ; preds = %205, %155
  %200 = phi i64 [ %160, %155 ], [ %218, %205 ]
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %204, label %202

202:                                              ; preds = %199
  store i64 %200, i64* %159, align 8
  %203 = inttoptr i64 %200 to i8*
  call void @_ZdlPv(i8* %203) #10
  br label %204

204:                                              ; preds = %199, %202
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #9
  br label %222

205:                                              ; preds = %155, %205
  %206 = phi i64 [ %218, %205 ], [ %162, %155 ]
  %207 = phi i64 [ %216, %205 ], [ 0, %155 ]
  %208 = phi i32 [ %215, %205 ], [ 0, %155 ]
  %209 = inttoptr i64 %206 to i32*
  %210 = getelementptr inbounds i32, i32* %209, i64 %207
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [107 x [7 x i8]], [107 x [7 x i8]]* @_ZN12_GLOBAL__N_113CODE_PATTERNSE, i64 0, i64 %212, i64 0
  %214 = call i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter* %150, i8* %158, i32 %208, i8* %213, i32 7, i1 zeroext true) #9
  %215 = add nsw i32 %214, %208
  %216 = add nuw i64 %207, 1
  %217 = load i64, i64* %159, align 8
  %218 = load i64, i64* %161, align 8
  %219 = sub i64 %217, %218
  %220 = ashr exact i64 %219, 2
  %221 = icmp ult i64 %216, %220
  br i1 %221, label %205, label %199

222:                                              ; preds = %3, %8, %204
  %223 = phi i8* [ %158, %204 ], [ null, %8 ], [ null, %3 ]
  ret i8* %223
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN21CBC_OnedCode128Writer10Encode128BERKN5fxcrt10ByteStringEPNSt3__16vectorIiNS4_9allocatorIiEEEE(%"class.fxcrt::ByteString"* nocapture readonly dereferenceable(8), %"class.std::__1::vector.13"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  %8 = ptrtoint i32* %6 to i64
  br i1 %7, label %15, label %9

9:                                                ; preds = %2
  store i32 104, i32* %4, align 4
  %10 = getelementptr inbounds i32, i32* %4, i64 1
  %11 = ptrtoint i32* %10 to i64
  %12 = bitcast i32** %3 to i64*
  store i64 %11, i64* %12, align 8
  %13 = bitcast %"class.std::__1::vector.13"* %1 to i64*
  %14 = bitcast i32** %5 to i64*
  br label %71

15:                                               ; preds = %2
  %16 = ptrtoint i32* %4 to i64
  %17 = bitcast i32** %3 to i64*
  %18 = bitcast %"class.std::__1::vector.13"* %1 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 2
  %22 = add nsw i64 %21, 1
  %23 = icmp ugt i64 %22, 4611686018427387903
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = bitcast %"class.std::__1::vector.13"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #11
  unreachable

26:                                               ; preds = %15
  %27 = bitcast i32** %5 to i64*
  %28 = sub i64 %8, %19
  %29 = ashr exact i64 %28, 2
  %30 = icmp ult i64 %29, 2305843009213693951
  br i1 %30, label %31, label %39

31:                                               ; preds = %26
  %32 = ashr exact i64 %28, 1
  %33 = icmp ult i64 %32, %22
  %34 = select i1 %33, i64 %22, i64 %32
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %31
  %37 = icmp ugt i64 %34, 4611686018427387903
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #11
  unreachable

39:                                               ; preds = %36, %26
  %40 = phi i64 [ %34, %36 ], [ 4611686018427387903, %26 ]
  %41 = shl i64 %40, 2
  %42 = tail call i8* @_Znwm(i64 %41) #10
  %43 = bitcast i8* %42 to i32*
  br label %44

44:                                               ; preds = %39, %31
  %45 = phi i64 [ %40, %39 ], [ 0, %31 ]
  %46 = phi i32* [ %43, %39 ], [ null, %31 ]
  %47 = getelementptr inbounds i32, i32* %46, i64 %21
  %48 = getelementptr inbounds i32, i32* %46, i64 %45
  %49 = ptrtoint i32* %48 to i64
  store i32 104, i32* %47, align 4
  %50 = getelementptr inbounds i32, i32* %47, i64 1
  %51 = ptrtoint i32* %50 to i64
  %52 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 0
  %53 = load i32*, i32** %52, align 8
  %54 = load i64, i64* %17, align 8
  %55 = ptrtoint i32* %53 to i64
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 2
  %58 = sub nsw i64 0, %57
  %59 = getelementptr inbounds i32, i32* %47, i64 %58
  %60 = ptrtoint i32* %59 to i64
  %61 = icmp sgt i64 %56, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %44
  %63 = bitcast i32* %59 to i8*
  %64 = bitcast i32* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %56, i1 false) #9
  %65 = load i32*, i32** %52, align 8
  br label %66

66:                                               ; preds = %62, %44
  %67 = phi i32* [ %53, %44 ], [ %65, %62 ]
  store i64 %60, i64* %18, align 8
  store i64 %51, i64* %17, align 8
  store i64 %49, i64* %27, align 8
  %68 = icmp eq i32* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = bitcast i32* %67 to i8*
  tail call void @_ZdlPv(i8* %70) #10
  br label %71

71:                                               ; preds = %9, %66, %69
  %72 = phi i64* [ %14, %9 ], [ %27, %66 ], [ %27, %69 ]
  %73 = phi i64* [ %13, %9 ], [ %18, %66 ], [ %18, %69 ]
  %74 = phi i64* [ %12, %9 ], [ %17, %66 ], [ %17, %69 ]
  %75 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 0
  br label %77

77:                                               ; preds = %160, %71
  %78 = phi i32 [ 1, %71 ], [ %161, %160 ]
  %79 = phi i32 [ 104, %71 ], [ %163, %160 ]
  %80 = phi i64 [ 0, %71 ], [ %164, %160 ]
  %81 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %75, align 8
  %82 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %81, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %81, i64 0, i32 1
  %85 = load i64, i64* %84, align 8
  br label %86

86:                                               ; preds = %77, %83
  %87 = phi i64 [ %85, %83 ], [ 0, %77 ]
  %88 = icmp ult i64 %80, %87
  br i1 %88, label %90, label %89

89:                                               ; preds = %86
  ret i32 %79

90:                                               ; preds = %86
  br i1 %82, label %95, label %91

91:                                               ; preds = %90
  %92 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %81, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = icmp ugt i64 %93, %80
  br i1 %94, label %96, label %95, !prof !2

95:                                               ; preds = %91, %90
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !4
  unreachable

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %81, i64 0, i32 3, i64 %80
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  %100 = add nsw i32 %99, -32
  %101 = load i32*, i32** %3, align 8
  %102 = load i32*, i32** %5, align 8
  %103 = icmp eq i32* %101, %102
  %104 = ptrtoint i32* %102 to i64
  br i1 %103, label %108, label %105

105:                                              ; preds = %96
  store i32 %100, i32* %101, align 4
  %106 = getelementptr inbounds i32, i32* %101, i64 1
  %107 = ptrtoint i32* %106 to i64
  store i64 %107, i64* %74, align 8
  br label %160

108:                                              ; preds = %96
  %109 = ptrtoint i32* %101 to i64
  %110 = load i64, i64* %73, align 8
  %111 = sub i64 %109, %110
  %112 = ashr exact i64 %111, 2
  %113 = add nsw i64 %112, 1
  %114 = icmp ugt i64 %113, 4611686018427387903
  br i1 %114, label %115, label %117

115:                                              ; preds = %108
  %116 = bitcast %"class.std::__1::vector.13"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %116) #11
  unreachable

117:                                              ; preds = %108
  %118 = sub i64 %104, %110
  %119 = ashr exact i64 %118, 2
  %120 = icmp ult i64 %119, 2305843009213693951
  br i1 %120, label %121, label %129

121:                                              ; preds = %117
  %122 = ashr exact i64 %118, 1
  %123 = icmp ult i64 %122, %113
  %124 = select i1 %123, i64 %113, i64 %122
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %134, label %126

126:                                              ; preds = %121
  %127 = icmp ugt i64 %124, 4611686018427387903
  br i1 %127, label %128, label %129

128:                                              ; preds = %126
  tail call void @abort() #11
  unreachable

129:                                              ; preds = %126, %117
  %130 = phi i64 [ %124, %126 ], [ 4611686018427387903, %117 ]
  %131 = shl i64 %130, 2
  %132 = tail call i8* @_Znwm(i64 %131) #10
  %133 = bitcast i8* %132 to i32*
  br label %134

134:                                              ; preds = %129, %121
  %135 = phi i64 [ %130, %129 ], [ 0, %121 ]
  %136 = phi i32* [ %133, %129 ], [ null, %121 ]
  %137 = getelementptr inbounds i32, i32* %136, i64 %112
  %138 = getelementptr inbounds i32, i32* %136, i64 %135
  %139 = ptrtoint i32* %138 to i64
  store i32 %100, i32* %137, align 4
  %140 = getelementptr inbounds i32, i32* %137, i64 1
  %141 = ptrtoint i32* %140 to i64
  %142 = load i32*, i32** %76, align 8
  %143 = load i64, i64* %74, align 8
  %144 = ptrtoint i32* %142 to i64
  %145 = sub i64 %143, %144
  %146 = ashr exact i64 %145, 2
  %147 = sub nsw i64 0, %146
  %148 = getelementptr inbounds i32, i32* %137, i64 %147
  %149 = ptrtoint i32* %148 to i64
  %150 = icmp sgt i64 %145, 0
  br i1 %150, label %151, label %155

151:                                              ; preds = %134
  %152 = bitcast i32* %148 to i8*
  %153 = bitcast i32* %142 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %152, i8* align 4 %153, i64 %145, i1 false) #9
  %154 = load i32*, i32** %76, align 8
  br label %155

155:                                              ; preds = %151, %134
  %156 = phi i32* [ %142, %134 ], [ %154, %151 ]
  store i64 %149, i64* %73, align 8
  store i64 %141, i64* %74, align 8
  store i64 %139, i64* %72, align 8
  %157 = icmp eq i32* %156, null
  br i1 %157, label %160, label %158

158:                                              ; preds = %155
  %159 = bitcast i32* %156 to i8*
  tail call void @_ZdlPv(i8* %159) #10
  br label %160

160:                                              ; preds = %105, %155, %158
  %161 = add nuw nsw i32 %78, 1
  %162 = mul nsw i32 %100, %78
  %163 = add nsw i32 %162, %79
  %164 = add nuw i64 %80, 1
  br label %77
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN21CBC_OnedCode128Writer10Encode128CERKN5fxcrt10ByteStringEPNSt3__16vectorIiNS4_9allocatorIiEEEE(%"class.fxcrt::ByteString"* dereferenceable(8), %"class.std::__1::vector.13"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::ByteString", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %16, label %10

10:                                               ; preds = %2
  store i32 105, i32* %5, align 4
  %11 = getelementptr inbounds i32, i32* %5, i64 1
  %12 = ptrtoint i32* %11 to i64
  %13 = bitcast i32** %4 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast %"class.std::__1::vector.13"* %1 to i64*
  %15 = bitcast i32** %6 to i64*
  br label %72

16:                                               ; preds = %2
  %17 = ptrtoint i32* %5 to i64
  %18 = bitcast i32** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.13"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.13"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #11
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #11
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #10
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  store i32 105, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %48, i64 1
  %52 = ptrtoint i32* %51 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 0
  %54 = load i32*, i32** %53, align 8
  %55 = load i64, i64* %18, align 8
  %56 = ptrtoint i32* %54 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 2
  %59 = sub nsw i64 0, %58
  %60 = getelementptr inbounds i32, i32* %48, i64 %59
  %61 = ptrtoint i32* %60 to i64
  %62 = icmp sgt i64 %57, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %45
  %64 = bitcast i32* %60 to i8*
  %65 = bitcast i32* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %57, i1 false) #9
  %66 = load i32*, i32** %53, align 8
  br label %67

67:                                               ; preds = %63, %45
  %68 = phi i32* [ %54, %45 ], [ %66, %63 ]
  store i64 %61, i64* %19, align 8
  store i64 %52, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %69 = icmp eq i32* %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %67
  %71 = bitcast i32* %68 to i8*
  tail call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %10, %67, %70
  %73 = phi i64* [ %15, %10 ], [ %28, %67 ], [ %28, %70 ]
  %74 = phi i64* [ %14, %10 ], [ %19, %67 ], [ %19, %70 ]
  %75 = phi i64* [ %13, %10 ], [ %18, %67 ], [ %18, %70 ]
  %76 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = bitcast %"class.fxcrt::ByteString"* %3 to i8*
  %78 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %1, i64 0, i32 0, i32 0
  br label %80

80:                                               ; preds = %192, %72
  %81 = phi i32 [ 1, %72 ], [ %193, %192 ]
  %82 = phi i32 [ 105, %72 ], [ %195, %192 ]
  %83 = phi i64 [ 0, %72 ], [ %132, %192 ]
  %84 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %76, align 8
  %85 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %84, null
  br i1 %85, label %89, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %84, i64 0, i32 1
  %88 = load i64, i64* %87, align 8
  br label %89

89:                                               ; preds = %80, %86
  %90 = phi i64 [ %88, %86 ], [ 0, %80 ]
  %91 = icmp ult i64 %83, %90
  br i1 %91, label %92, label %196

92:                                               ; preds = %89
  br i1 %85, label %97, label %93

93:                                               ; preds = %92
  %94 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %84, i64 0, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = icmp ugt i64 %95, %83
  br i1 %96, label %98, label %97, !prof !2

97:                                               ; preds = %93, %92
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !4
  unreachable

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %84, i64 0, i32 3, i64 %83
  %100 = load i8, i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = add nsw i32 %101, -48
  %103 = icmp ult i32 %102, 10
  br i1 %103, label %104, label %128

104:                                              ; preds = %98
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #9
  %105 = add nuw i64 %83, 1
  %106 = icmp ugt i64 %95, %105
  %107 = select i1 %106, i64 2, i64 1
  call void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* nonnull sret %3, %"class.fxcrt::ByteString"* %0, i64 %83, i64 %107) #9
  %108 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %78, align 8
  %109 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %108, null
  %110 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %108, i64 0, i32 3
  %111 = select i1 %109, [1 x i8]* @.str, [1 x i8]* %110
  %112 = getelementptr inbounds [1 x i8], [1 x i8]* %111, i64 0, i64 0
  %113 = call i32 @FXSYS_atoi(i8* %112) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #9
  %114 = load %"class.fxcrt::StringDataTemplate.9"*, %"class.fxcrt::StringDataTemplate.9"** %76, align 8
  %115 = icmp eq %"class.fxcrt::StringDataTemplate.9"* %114, null
  br i1 %115, label %130, label %116

116:                                              ; preds = %104
  %117 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %114, i64 0, i32 1
  %118 = load i64, i64* %117, align 8
  %119 = icmp ult i64 %105, %118
  br i1 %119, label %120, label %130

120:                                              ; preds = %116
  %121 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.9", %"class.fxcrt::StringDataTemplate.9"* %114, i64 0, i32 3, i64 %105
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = add nsw i32 %123, -48
  %125 = icmp ult i32 %124, 10
  %126 = add nuw i64 %83, 2
  %127 = select i1 %125, i64 %126, i64 %105
  br label %130

128:                                              ; preds = %98
  %129 = add nuw i64 %83, 1
  br label %130

130:                                              ; preds = %104, %120, %116, %128
  %131 = phi i32 [ %113, %120 ], [ %113, %116 ], [ %101, %128 ], [ %113, %104 ]
  %132 = phi i64 [ %127, %120 ], [ %105, %116 ], [ %129, %128 ], [ %105, %104 ]
  %133 = load i32*, i32** %4, align 8
  %134 = load i32*, i32** %6, align 8
  %135 = icmp eq i32* %133, %134
  %136 = ptrtoint i32* %134 to i64
  br i1 %135, label %140, label %137

137:                                              ; preds = %130
  store i32 %131, i32* %133, align 4
  %138 = getelementptr inbounds i32, i32* %133, i64 1
  %139 = ptrtoint i32* %138 to i64
  store i64 %139, i64* %75, align 8
  br label %192

140:                                              ; preds = %130
  %141 = ptrtoint i32* %133 to i64
  %142 = load i64, i64* %74, align 8
  %143 = sub i64 %141, %142
  %144 = ashr exact i64 %143, 2
  %145 = add nsw i64 %144, 1
  %146 = icmp ugt i64 %145, 4611686018427387903
  br i1 %146, label %147, label %149

147:                                              ; preds = %140
  %148 = bitcast %"class.std::__1::vector.13"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %148) #11
  unreachable

149:                                              ; preds = %140
  %150 = sub i64 %136, %142
  %151 = ashr exact i64 %150, 2
  %152 = icmp ult i64 %151, 2305843009213693951
  br i1 %152, label %153, label %161

153:                                              ; preds = %149
  %154 = ashr exact i64 %150, 1
  %155 = icmp ult i64 %154, %145
  %156 = select i1 %155, i64 %145, i64 %154
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %166, label %158

158:                                              ; preds = %153
  %159 = icmp ugt i64 %156, 4611686018427387903
  br i1 %159, label %160, label %161

160:                                              ; preds = %158
  call void @abort() #11
  unreachable

161:                                              ; preds = %158, %149
  %162 = phi i64 [ %156, %158 ], [ 4611686018427387903, %149 ]
  %163 = shl i64 %162, 2
  %164 = call i8* @_Znwm(i64 %163) #10
  %165 = bitcast i8* %164 to i32*
  br label %166

166:                                              ; preds = %161, %153
  %167 = phi i64 [ %162, %161 ], [ 0, %153 ]
  %168 = phi i32* [ %165, %161 ], [ null, %153 ]
  %169 = getelementptr inbounds i32, i32* %168, i64 %144
  %170 = getelementptr inbounds i32, i32* %168, i64 %167
  %171 = ptrtoint i32* %170 to i64
  store i32 %131, i32* %169, align 4
  %172 = getelementptr inbounds i32, i32* %169, i64 1
  %173 = ptrtoint i32* %172 to i64
  %174 = load i32*, i32** %79, align 8
  %175 = load i64, i64* %75, align 8
  %176 = ptrtoint i32* %174 to i64
  %177 = sub i64 %175, %176
  %178 = ashr exact i64 %177, 2
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i32, i32* %169, i64 %179
  %181 = ptrtoint i32* %180 to i64
  %182 = icmp sgt i64 %177, 0
  br i1 %182, label %183, label %187

183:                                              ; preds = %166
  %184 = bitcast i32* %180 to i8*
  %185 = bitcast i32* %174 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %184, i8* align 4 %185, i64 %177, i1 false) #9
  %186 = load i32*, i32** %79, align 8
  br label %187

187:                                              ; preds = %183, %166
  %188 = phi i32* [ %174, %166 ], [ %186, %183 ]
  store i64 %181, i64* %74, align 8
  store i64 %173, i64* %75, align 8
  store i64 %171, i64* %73, align 8
  %189 = icmp eq i32* %188, null
  br i1 %189, label %192, label %190

190:                                              ; preds = %187
  %191 = bitcast i32* %188 to i8*
  call void @_ZdlPv(i8* %191) #10
  br label %192

192:                                              ; preds = %137, %187, %190
  %193 = add nuw nsw i32 %81, 1
  %194 = mul nsw i32 %131, %81
  %195 = add nsw i32 %194, %82
  br label %80

196:                                              ; preds = %89
  ret i32 %82
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #1

declare i32 @_ZN16CBC_OneDimWriter13AppendPatternEPhiPKaib(%class.CBC_OneDimWriter*, i8*, i32, i8*, i32, i1 zeroext) local_unnamed_addr #1

declare i32 @FXSYS_atoi(i8*) local_unnamed_addr #1

declare void @_ZNK5fxcrt10ByteString6SubstrEmm(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::ByteString"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

declare zeroext i1 @_ZN10CBC_Writer15SetCharEncodingEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetModuleHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer14SetModuleWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer9SetHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer8SetWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer18SetWideNarrowRatioEa(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer12SetStartCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer10SetEndCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer23SetErrorCorrectionLevelEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN16CBC_OneDimWriter12RenderResultEN5fxcrt18StringViewTemplateIwEEPhi(%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, i8*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter16SetPrintChecksumEb(%class.CBC_OneDimWriter*, i1 zeroext) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter13SetDataLengthEi(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter15SetCalcChecksumEb(%class.CBC_OneDimWriter*, i1 zeroext) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter11SetFontSizeEf(%class.CBC_OneDimWriter*, float) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12SetFontStyleEi(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare void @_ZN16CBC_OneDimWriter12SetFontColorEj(%class.CBC_OneDimWriter*, i32) unnamed_addr #1

declare zeroext i1 @_ZN16CBC_OneDimWriter9ShowCharsEN5fxcrt18StringViewTemplateIwEEP16CFX_RenderDeviceRK10CFX_Matrixii(%class.CBC_OneDimWriter*, %"class.fxcrt::StringViewTemplate"*, %class.CFX_RenderDevice*, %class.CFX_Matrix* dereferenceable(24), i32, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143840445}
!4 = !{i32 -2143840424}
