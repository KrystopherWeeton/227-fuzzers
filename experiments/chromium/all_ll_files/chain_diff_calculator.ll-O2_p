; ModuleID = '../../third_party/webrtc/modules/video_coding/chain_diff_calculator.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/chain_diff_calculator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.webrtc::ChainDiffCalculator" = type { %"class.absl::InlinedVector" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Allocated", [48 x i8] }
%"struct.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Allocated" = type { %"class.absl::optional"*, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.std::__1::vector" = type { i64*, i64, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.absl::InlinedVector.4" = type { %"class.absl::inlined_vector_internal::Storage.5" }
%"class.absl::inlined_vector_internal::Storage.5" = type { %"class.absl::container_internal::CompressedTuple.6", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.6" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.7" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.7" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.rtc::DiagnosticLogMessage" = type { i8*, i32, i32, i32, i32, i8*, i8, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.13 }
%union.anon.13 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE6ResizeINS0_19DefaultValueAdapterIS6_EEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15EmplaceBackSlowIJiEEERiDpOT_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [71 x i8] c"../../third_party/webrtc/modules/video_coding/chain_diff_calculator.cc\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"Insconsistent chain configuration for frame#\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c": expected \00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c" chains, found \00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc19ChainDiffCalculator5ResetERKNSt3__16vectorIbNS1_9allocatorIbEEEE(%"class.webrtc::ChainDiffCalculator"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, 0
  br i1 %5, label %6, label %7, !prof !2

6:                                                ; preds = %2
  tail call void @llvm.trap() #9
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE6ResizeINS0_19DefaultValueAdapterIS6_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %8, i64 %4) #9
  %9 = load i64, i64* %3, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0
  %13 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %15 to %"class.absl::optional"*
  br label %18

17:                                               ; preds = %43, %7
  ret void

18:                                               ; preds = %11, %43
  %19 = phi i64 [ %9, %11 ], [ %44, %43 ]
  %20 = phi i64 [ 0, %11 ], [ %45, %43 ]
  %21 = load i64*, i64** %12, align 8
  %22 = lshr i64 %20, 6
  %23 = getelementptr inbounds i64, i64* %21, i64 %22
  %24 = and i64 %20, 63
  %25 = shl i64 1, %24
  %26 = load i64, i64* %23, align 8
  %27 = and i64 %26, %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %43, label %29

29:                                               ; preds = %18
  %30 = load i64, i64* %13, align 8
  %31 = lshr i64 %30, 1
  %32 = icmp ugt i64 %31, %20
  br i1 %32, label %34, label %33, !prof !3

33:                                               ; preds = %29
  tail call void @llvm.trap() #9
  unreachable

34:                                               ; preds = %29
  %35 = and i64 %30, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = load %"class.absl::optional"*, %"class.absl::optional"** %14, align 8
  br label %39

39:                                               ; preds = %34, %37
  %40 = phi %"class.absl::optional"* [ %38, %37 ], [ %16, %34 ]
  %41 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %40, i64 %20, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %41, align 8
  %42 = load i64, i64* %3, align 8
  br label %43

43:                                               ; preds = %18, %39
  %44 = phi i64 [ %19, %18 ], [ %42, %39 ]
  %45 = add nuw i64 %20, 1
  %46 = icmp ult i64 %45, %44
  br i1 %46, label %18, label %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc19ChainDiffCalculator10ChainDiffsEl(%"class.absl::InlinedVector.4"* noalias sret, %"class.webrtc::ChainDiffCalculator"* readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.4"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.4"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %8 = getelementptr inbounds %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.4"* %0, i64 0, i32 0, i32 1
  %9 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 -86, i64 16, i1 false)
  store i64 0, i64* %5, align 8
  %10 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = lshr i64 %11, 1
  %13 = icmp ugt i64 %11, 9
  br i1 %13, label %14, label %24, !prof !3

14:                                               ; preds = %3
  %15 = icmp ugt i64 %12, 8
  %16 = select i1 %15, i64 %12, i64 8
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  tail call void @abort() #10
  unreachable

19:                                               ; preds = %14
  %20 = shl i64 %16, 2
  %21 = tail call i8* @_Znwm(i64 %20) #11
  %22 = ptrtoint i8* %21 to i64
  %23 = bitcast i32** %6 to i64*
  store i64 %22, i64* %23, align 8
  store i64 %16, i64* %7, align 8
  store i64 1, i64* %5, align 8
  br label %24

24:                                               ; preds = %3, %19
  %25 = and i64 %11, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %29 = load %"class.absl::optional"*, %"class.absl::optional"** %28, align 8
  br label %33

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %1, i64 0, i32 0, i32 0, i32 1
  %32 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %31 to %"class.absl::optional"*
  br label %33

33:                                               ; preds = %27, %30
  %34 = phi %"class.absl::optional"* [ %29, %27 ], [ %32, %30 ]
  %35 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %34, i64 %12
  %36 = icmp eq i64 %12, 0
  br i1 %36, label %74, label %37

37:                                               ; preds = %33
  %38 = bitcast i32* %4 to i8*
  %39 = getelementptr inbounds %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.4"* %0, i64 0, i32 0, i32 1
  %40 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %39 to i64
  %41 = bitcast i32** %6 to i64*
  %42 = getelementptr inbounds %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.4"* %0, i64 0, i32 0
  br label %43

43:                                               ; preds = %37, %71
  %44 = phi %"class.absl::optional"* [ %34, %37 ], [ %72, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #9
  %45 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %44, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8, i8* %45, align 8, !range !4
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %44, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = sub nsw i64 %2, %50
  br label %52

52:                                               ; preds = %43, %48
  %53 = phi i64 [ %51, %48 ], [ 0, %43 ]
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %4, align 4
  %55 = load i64, i64* %5, align 8, !noalias !5
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %56, 0
  %58 = load i64, i64* %7, align 8
  %59 = select i1 %57, i64 4, i64 %58
  %60 = lshr i64 %55, 1
  %61 = icmp eq i64 %60, %59
  br i1 %61, label %69, label %62, !prof !2

62:                                               ; preds = %52
  %63 = load i64, i64* %41, align 8
  %64 = select i1 %57, i64 %40, i64 %63
  %65 = inttoptr i64 %64 to i32*
  %66 = getelementptr inbounds i32, i32* %65, i64 %60
  store i32 %54, i32* %66, align 4
  %67 = load i64, i64* %5, align 8
  %68 = add i64 %67, 2
  store i64 %68, i64* %5, align 8
  br label %71

69:                                               ; preds = %52
  %70 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15EmplaceBackSlowIJiEEERiDpOT_(%"class.absl::inlined_vector_internal::Storage.5"* %42, i32* nonnull dereferenceable(4) %4) #9
  br label %71

71:                                               ; preds = %62, %69
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #9
  %72 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %44, i64 1
  %73 = icmp eq %"class.absl::optional"* %72, %35
  br i1 %73, label %74, label %43

74:                                               ; preds = %71, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc19ChainDiffCalculator4FromElRKNSt3__16vectorIbNS1_9allocatorIbEEEE(%"class.absl::InlinedVector.4"* noalias sret, %"class.webrtc::ChainDiffCalculator"*, i64, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %6 = alloca [7 x i8], align 1
  %7 = bitcast %"class.absl::InlinedVector.4"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 24, i1 false)
  tail call void @_ZNK6webrtc19ChainDiffCalculator10ChainDiffsEl(%"class.absl::InlinedVector.4"* sret %0, %"class.webrtc::ChainDiffCalculator"* %1, i64 %2)
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = lshr i64 %11, 1
  %13 = icmp eq i64 %9, %12
  br i1 %13, label %30, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.rtc::DiagnosticLogMessage"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %15) #9
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %5, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 48, i32 1, i32 0, i32 0) #9
  %16 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %5, i64 0, i32 7
  %17 = bitcast %"class.std::__1::basic_ostringstream"* %16 to %"class.std::__1::basic_ostream"*
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %17, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i64 44) #9
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEl(%"class.std::__1::basic_ostream"* %18, i64 %2) #9
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i64 11) #9
  %21 = load i64, i64* %10, align 8
  %22 = lshr i64 %21, 1
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %20, i64 %22) #9
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %23, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 15) #9
  %25 = load i64, i64* %8, align 8
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %24, i64 %25) #9
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %15) #9
  %27 = load i64, i64* %10, align 8
  %28 = load i64, i64* %8, align 8
  %29 = lshr i64 %27, 1
  br label %30

30:                                               ; preds = %4, %14
  %31 = phi i64 [ %12, %4 ], [ %29, %14 ]
  %32 = phi i64 [ %9, %4 ], [ %28, %14 ]
  %33 = icmp ult i64 %32, %31
  %34 = select i1 %33, i64 %32, i64 %31
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %70, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0
  %38 = getelementptr inbounds [7 x i8], [7 x i8]* %6, i64 0, i64 0
  %39 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %40 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %1, i64 0, i32 0, i32 0, i32 1
  %41 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %40 to %"class.absl::optional"*
  br label %42

42:                                               ; preds = %36, %67
  %43 = phi i64 [ 0, %36 ], [ %68, %67 ]
  %44 = load i64*, i64** %37, align 8
  %45 = lshr i64 %43, 6
  %46 = getelementptr inbounds i64, i64* %44, i64 %45
  %47 = and i64 %43, 63
  %48 = shl i64 1, %47
  %49 = load i64, i64* %46, align 8
  %50 = and i64 %49, %48
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %67, label %52

52:                                               ; preds = %42
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %38)
  %53 = load i64, i64* %10, align 8
  %54 = lshr i64 %53, 1
  %55 = icmp ugt i64 %54, %43
  br i1 %55, label %57, label %56, !prof !3

56:                                               ; preds = %52
  call void @llvm.trap() #9
  unreachable

57:                                               ; preds = %52
  %58 = and i64 %53, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = load %"class.absl::optional"*, %"class.absl::optional"** %39, align 8
  br label %62

62:                                               ; preds = %57, %60
  %63 = phi %"class.absl::optional"* [ %61, %60 ], [ %41, %57 ]
  %64 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %63, i64 %43, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* nonnull align 1 %38, i64 7, i1 false)
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %63, i64 %43, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2, i64* %66, align 8
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %38)
  br label %67

67:                                               ; preds = %42, %62
  %68 = add nuw i64 %43, 1
  %69 = icmp ult i64 %68, %34
  br i1 %69, label %42, label %70

70:                                               ; preds = %67, %30
  ret void
}

declare void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"*, i8*, i32, i32, i32, i32) unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEl(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE6ResizeINS0_19DefaultValueAdapterIS6_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !8
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = bitcast %"class.absl::optional"** %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !8
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !8
  br label %16

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %15 = ptrtoint %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %14 to i64
  br label %16

16:                                               ; preds = %7, %13
  %17 = phi i64 [ %15, %13 ], [ %10, %7 ]
  %18 = phi i64 [ 4, %13 ], [ %12, %7 ]
  %19 = lshr i64 %4, 1
  %20 = inttoptr i64 %17 to %"class.absl::optional"*
  %21 = icmp ult i64 %19, %1
  br i1 %21, label %22, label %157

22:                                               ; preds = %16
  %23 = icmp ult i64 %18, %1
  br i1 %23, label %48, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %20, i64 %19
  %26 = sub i64 %1, %19
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %157, label %28

28:                                               ; preds = %24
  %29 = xor i64 %19, -1
  %30 = add i64 %29, %1
  %31 = and i64 %26, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %145, label %33

33:                                               ; preds = %28
  %34 = sub i64 %26, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %45, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %46, %35 ]
  %38 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %25, i64 %36, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %38, align 8
  %39 = or i64 %36, 1
  %40 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %25, i64 %39, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %40, align 8
  %41 = or i64 %36, 2
  %42 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %25, i64 %41, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %42, align 8
  %43 = or i64 %36, 3
  %44 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %25, i64 %43, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %44, align 8
  %45 = add nuw i64 %36, 4
  %46 = add i64 %37, -4
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %145, label %35

48:                                               ; preds = %22
  %49 = shl i64 %18, 1
  %50 = icmp ult i64 %49, %1
  %51 = select i1 %50, i64 %1, i64 %49
  %52 = icmp ugt i64 %51, 1152921504606846975
  br i1 %52, label %53, label %54

53:                                               ; preds = %48
  tail call void @abort() #10
  unreachable

54:                                               ; preds = %48
  %55 = shl i64 %51, 4
  %56 = tail call i8* @_Znwm(i64 %55) #11
  %57 = bitcast i8* %56 to %"class.absl::optional"*
  %58 = ptrtoint i8* %56 to i64
  %59 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 %19
  %60 = sub i64 %1, %19
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %92, label %62

62:                                               ; preds = %54
  %63 = xor i64 %19, -1
  %64 = add i64 %63, %1
  %65 = and i64 %60, 3
  %66 = icmp ult i64 %64, 3
  br i1 %66, label %82, label %67

67:                                               ; preds = %62
  %68 = sub i64 %60, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %79, %69 ]
  %71 = phi i64 [ %68, %67 ], [ %80, %69 ]
  %72 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %59, i64 %70, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %72, align 8
  %73 = or i64 %70, 1
  %74 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %59, i64 %73, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %74, align 8
  %75 = or i64 %70, 2
  %76 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %59, i64 %75, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %76, align 8
  %77 = or i64 %70, 3
  %78 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %59, i64 %77, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %78, align 8
  %79 = add nuw i64 %70, 4
  %80 = add i64 %71, -4
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69

82:                                               ; preds = %69, %62
  %83 = phi i64 [ 0, %62 ], [ %79, %69 ]
  %84 = icmp eq i64 %65, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %82, %85
  %86 = phi i64 [ %89, %85 ], [ %83, %82 ]
  %87 = phi i64 [ %90, %85 ], [ %65, %82 ]
  %88 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %59, i64 %86, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %88, align 8
  %89 = add nuw i64 %86, 1
  %90 = add i64 %87, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %85, !llvm.loop !11

92:                                               ; preds = %82, %85, %54
  %93 = icmp eq i64 %19, 0
  br i1 %93, label %133, label %94

94:                                               ; preds = %92
  %95 = add nsw i64 %19, -1
  %96 = and i64 %19, 3
  %97 = icmp ult i64 %95, 3
  br i1 %97, label %119, label %98

98:                                               ; preds = %94
  %99 = sub nsw i64 %19, %96
  br label %100

100:                                              ; preds = %100, %98
  %101 = phi %"class.absl::optional"* [ %20, %98 ], [ %115, %100 ]
  %102 = phi i64 [ 0, %98 ], [ %116, %100 ]
  %103 = phi i64 [ %99, %98 ], [ %117, %100 ]
  %104 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 %102, i32 0, i32 0, i32 0, i32 0
  %105 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %101, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #9
  %106 = or i64 %102, 1
  %107 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 %106, i32 0, i32 0, i32 0, i32 0
  %108 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %101, i64 1, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 8 %108, i64 16, i1 false) #9
  %109 = or i64 %102, 2
  %110 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 %109, i32 0, i32 0, i32 0, i32 0
  %111 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %101, i64 2, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #9
  %112 = or i64 %102, 3
  %113 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 %112, i32 0, i32 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %101, i64 3, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #9
  %115 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %101, i64 4
  %116 = add nuw nsw i64 %102, 4
  %117 = add i64 %103, -4
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %100

119:                                              ; preds = %100, %94
  %120 = phi %"class.absl::optional"* [ %20, %94 ], [ %115, %100 ]
  %121 = phi i64 [ 0, %94 ], [ %116, %100 ]
  %122 = icmp eq i64 %96, 0
  br i1 %122, label %133, label %123

123:                                              ; preds = %119, %123
  %124 = phi %"class.absl::optional"* [ %129, %123 ], [ %120, %119 ]
  %125 = phi i64 [ %130, %123 ], [ %121, %119 ]
  %126 = phi i64 [ %131, %123 ], [ %96, %119 ]
  %127 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 %125, i32 0, i32 0, i32 0, i32 0
  %128 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %124, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false) #9
  %129 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %124, i64 1
  %130 = add nuw nsw i64 %125, 1
  %131 = add i64 %126, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %123, !llvm.loop !13

133:                                              ; preds = %119, %123, %92
  br i1 %6, label %139, label %134

134:                                              ; preds = %133
  %135 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %136 = load %"class.absl::optional"*, %"class.absl::optional"** %135, align 8
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %136, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %137) #11
  %138 = load i64, i64* %3, align 8
  br label %139

139:                                              ; preds = %134, %133
  %140 = phi i64 [ %138, %134 ], [ %4, %133 ]
  %141 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %142 = bitcast %"class.absl::optional"** %141 to i64*
  store i64 %58, i64* %142, align 8
  %143 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %51, i64* %143, align 8
  %144 = or i64 %140, 1
  store i64 %144, i64* %3, align 8
  br label %157

145:                                              ; preds = %35, %28
  %146 = phi i64 [ 0, %28 ], [ %45, %35 ]
  %147 = icmp eq i64 %31, 0
  br i1 %147, label %155, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %152, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %153, %148 ], [ %31, %145 ]
  %151 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %25, i64 %149, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %151, align 8
  %152 = add nuw i64 %149, 1
  %153 = add i64 %150, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %148, !llvm.loop !14

155:                                              ; preds = %148, %145
  %156 = load i64, i64* %3, align 8
  br label %157

157:                                              ; preds = %155, %24, %16, %139
  %158 = phi i64 [ %156, %155 ], [ %4, %24 ], [ %4, %16 ], [ %144, %139 ]
  %159 = shl i64 %1, 1
  %160 = and i64 %158, 1
  %161 = or i64 %160, %159
  store i64 %161, i64* %3, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15EmplaceBackSlowIJiEEERiDpOT_(%"class.absl::inlined_vector_internal::Storage.5"*, i32* dereferenceable(4)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !15
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !15
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !15
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #10
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 8, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #11
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !18
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !18
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !21, !noalias !18
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !21, !noalias !18
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !18
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !18
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !21, !noalias !18
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !21, !noalias !18
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !18
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !18
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !21, !noalias !18
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !21, !noalias !18
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !18
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !18
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !21, !noalias !18
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !21, !noalias !18
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !23

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !18
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !18
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !21, !noalias !18
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !21, !noalias !18
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !25

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !26

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !27

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #11
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.5", %"class.absl::inlined_vector_internal::Storage.5"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #9
  %7 = load i8, i8* %6, align 8, !range !4
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #9
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #9
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #9
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #9
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #11
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #9
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #9
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #11
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #9
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!7 = distinct !{!7, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!10 = distinct !{!10, !"_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !12}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!17 = distinct !{!17, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !24}
!24 = !{!"llvm.loop.isvectorized", i32 1}
!25 = distinct !{!25, !12}
!26 = distinct !{!26, !12}
!27 = distinct !{!27, !24}
