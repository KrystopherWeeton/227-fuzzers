; ModuleID = '../../third_party/blink/renderer/core/svg/svg_zoom_and_pan.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_zoom_and_pan.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::SVGZoomAndPan" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::ExceptionState" = type opaque

$_ZN5blink13SVGZoomAndPanD2Ev = comdat any

$_ZN5blink13SVGZoomAndPanD0Ev = comdat any

$_ZN5blink13SVGZoomAndPan13setZoomAndPanEt = comdat any

$_ZN5blink13SVGZoomAndPan13setZoomAndPanEtRNS_14ExceptionStateE = comdat any

$_ZTVN5blink13SVGZoomAndPanE = comdat any

@_ZTVN5blink13SVGZoomAndPanE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGZoomAndPan"*)* @_ZN5blink13SVGZoomAndPanD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGZoomAndPan"*)* @_ZN5blink13SVGZoomAndPanD0Ev to i8*), i8* bitcast (void (%"class.blink::SVGZoomAndPan"*, i16)* @_ZN5blink13SVGZoomAndPan13setZoomAndPanEt to i8*), i8* bitcast (void (%"class.blink::SVGZoomAndPan"*, i16, %"class.blink::ExceptionState"*)* @_ZN5blink13SVGZoomAndPan13setZoomAndPanEtRNS_14ExceptionStateE to i8*)] }, comdat, align 8
@_ZN5blink9svg_names15kZoomAndPanAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8

@_ZN5blink13SVGZoomAndPanC1Ev = hidden unnamed_addr alias void (%"class.blink::SVGZoomAndPan"*), void (%"class.blink::SVGZoomAndPan"*)* @_ZN5blink13SVGZoomAndPanC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink13SVGZoomAndPanC2Ev(%"class.blink::SVGZoomAndPan"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGZoomAndPan", %"class.blink::SVGZoomAndPan"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink13SVGZoomAndPanE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SVGZoomAndPan", %"class.blink::SVGZoomAndPan"* %0, i64 0, i32 1
  store i32 2, i32* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink13SVGZoomAndPan16IsKnownAttributeERKNS_13QualifiedNameE(%"class.blink::QualifiedName"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names15kZoomAndPanAttrE, align 8
  %3 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %6 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %5, align 8
  %7 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %4, %6
  ret i1 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink13SVGZoomAndPan14ParseAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::SVGZoomAndPan"* nocapture, %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %4 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names15kZoomAndPanAttrE, align 8
  %5 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %4, i64 0, i32 0, i32 0
  %8 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %7, align 8
  %9 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %6, %8
  br i1 %9, label %10, label %57

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::SVGZoomAndPan", %"class.blink::SVGZoomAndPan"* %0, i64 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %57, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %57, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  br i1 %23, label %40, label %25

25:                                               ; preds = %19
  %26 = bitcast %"class.WTF::StringImpl"* %24 to i8*
  %27 = zext i32 %17 to i64
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i8, i8* %26, align 1
  %30 = icmp eq i8 %29, 100
  br i1 %30, label %31, label %34

31:                                               ; preds = %25
  %32 = getelementptr inbounds i8, i8* %26, i64 1
  %33 = icmp eq i32 %17, 1
  br i1 %33, label %34, label %167

34:                                               ; preds = %195, %189, %182, %176, %170, %31, %25, %167, %173, %179, %186, %192, %198
  %35 = load i8, i8* %26, align 1
  %36 = icmp eq i8 %35, 109
  br i1 %36, label %37, label %55

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %26, i64 1
  %39 = icmp eq i32 %17, 1
  br i1 %39, label %55, label %132

40:                                               ; preds = %19
  %41 = bitcast %"class.WTF::StringImpl"* %24 to i16*
  %42 = zext i32 %17 to i64
  %43 = getelementptr inbounds i16, i16* %41, i64 %42
  %44 = load i16, i16* %41, align 2
  %45 = icmp eq i16 %44, 100
  br i1 %45, label %46, label %49

46:                                               ; preds = %40
  %47 = getelementptr inbounds i16, i16* %41, i64 1
  %48 = icmp ugt i32 %17, 1
  br i1 %48, label %96, label %49

49:                                               ; preds = %125, %119, %112, %106, %99, %46, %40, %96, %103, %109, %116, %122, %129
  %50 = load i16, i16* %41, align 2
  %51 = icmp eq i16 %50, 109
  br i1 %51, label %52, label %55

52:                                               ; preds = %49
  %53 = getelementptr inbounds i16, i16* %41, i64 1
  %54 = icmp ugt i32 %17, 1
  br i1 %54, label %59, label %55

55:                                               ; preds = %163, %92, %198, %129, %88, %82, %75, %69, %62, %52, %160, %154, %147, %141, %135, %37, %34, %132, %138, %144, %151, %157, %49, %59, %66, %72, %79, %85
  %56 = phi i32 [ 0, %85 ], [ 0, %79 ], [ 0, %72 ], [ 0, %66 ], [ 0, %59 ], [ 0, %49 ], [ 0, %157 ], [ 0, %151 ], [ 0, %144 ], [ 0, %138 ], [ 0, %132 ], [ 0, %34 ], [ 0, %37 ], [ 0, %135 ], [ 0, %141 ], [ 0, %147 ], [ 0, %154 ], [ 0, %160 ], [ 0, %52 ], [ 0, %62 ], [ 0, %69 ], [ 0, %75 ], [ 0, %82 ], [ 0, %88 ], [ 1, %129 ], [ 1, %198 ], [ %95, %92 ], [ %166, %163 ]
  store i32 %56, i32* %11, align 8
  br label %57

57:                                               ; preds = %3, %10, %15, %55
  %58 = phi i1 [ false, %3 ], [ true, %55 ], [ true, %15 ], [ true, %10 ]
  ret i1 %58

59:                                               ; preds = %52
  %60 = load i16, i16* %53, align 2
  %61 = icmp eq i16 %60, 97
  br i1 %61, label %62, label %55

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1, i32 1
  %64 = bitcast i32* %63 to i16*
  %65 = icmp ugt i16* %43, %64
  br i1 %65, label %66, label %55

66:                                               ; preds = %62
  %67 = load i16, i16* %64, align 2
  %68 = icmp eq i16 %67, 103
  br i1 %68, label %69, label %55

69:                                               ; preds = %66
  %70 = getelementptr inbounds i16, i16* %64, i64 1
  %71 = icmp ult i16* %70, %43
  br i1 %71, label %72, label %55

72:                                               ; preds = %69
  %73 = load i16, i16* %70, align 2
  %74 = icmp eq i16 %73, 110
  br i1 %74, label %75, label %55

75:                                               ; preds = %72
  %76 = getelementptr inbounds i32, i32* %63, i64 1
  %77 = bitcast i32* %76 to i16*
  %78 = icmp ugt i16* %43, %77
  br i1 %78, label %79, label %55

79:                                               ; preds = %75
  %80 = load i16, i16* %77, align 2
  %81 = icmp eq i16 %80, 105
  br i1 %81, label %82, label %55

82:                                               ; preds = %79
  %83 = getelementptr inbounds i16, i16* %77, i64 1
  %84 = icmp ult i16* %83, %43
  br i1 %84, label %85, label %55

85:                                               ; preds = %82
  %86 = load i16, i16* %83, align 2
  %87 = icmp eq i16 %86, 102
  br i1 %87, label %88, label %55

88:                                               ; preds = %85
  %89 = getelementptr inbounds i32, i32* %63, i64 2
  %90 = bitcast i32* %89 to i16*
  %91 = icmp ugt i16* %43, %90
  br i1 %91, label %92, label %55

92:                                               ; preds = %88
  %93 = load i16, i16* %90, align 2
  %94 = icmp eq i16 %93, 121
  %95 = select i1 %94, i32 2, i32 0
  br label %55

96:                                               ; preds = %46
  %97 = load i16, i16* %47, align 2
  %98 = icmp eq i16 %97, 105
  br i1 %98, label %99, label %49

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1, i32 1
  %101 = bitcast i32* %100 to i16*
  %102 = icmp ugt i16* %43, %101
  br i1 %102, label %103, label %49

103:                                              ; preds = %99
  %104 = load i16, i16* %101, align 2
  %105 = icmp eq i16 %104, 115
  br i1 %105, label %106, label %49

106:                                              ; preds = %103
  %107 = getelementptr inbounds i16, i16* %101, i64 1
  %108 = icmp ult i16* %107, %43
  br i1 %108, label %109, label %49

109:                                              ; preds = %106
  %110 = load i16, i16* %107, align 2
  %111 = icmp eq i16 %110, 97
  br i1 %111, label %112, label %49

112:                                              ; preds = %109
  %113 = getelementptr inbounds i32, i32* %100, i64 1
  %114 = bitcast i32* %113 to i16*
  %115 = icmp ugt i16* %43, %114
  br i1 %115, label %116, label %49

116:                                              ; preds = %112
  %117 = load i16, i16* %114, align 2
  %118 = icmp eq i16 %117, 98
  br i1 %118, label %119, label %49

119:                                              ; preds = %116
  %120 = getelementptr inbounds i16, i16* %114, i64 1
  %121 = icmp ult i16* %120, %43
  br i1 %121, label %122, label %49

122:                                              ; preds = %119
  %123 = load i16, i16* %120, align 2
  %124 = icmp eq i16 %123, 108
  br i1 %124, label %125, label %49

125:                                              ; preds = %122
  %126 = getelementptr inbounds i32, i32* %100, i64 2
  %127 = bitcast i32* %126 to i16*
  %128 = icmp ugt i16* %43, %127
  br i1 %128, label %129, label %49

129:                                              ; preds = %125
  %130 = load i16, i16* %127, align 2
  %131 = icmp eq i16 %130, 101
  br i1 %131, label %55, label %49

132:                                              ; preds = %37
  %133 = load i8, i8* %38, align 1
  %134 = icmp eq i8 %133, 97
  br i1 %134, label %135, label %55

135:                                              ; preds = %132
  %136 = getelementptr inbounds i8, i8* %26, i64 2
  %137 = icmp eq i32 %17, 2
  br i1 %137, label %55, label %138

138:                                              ; preds = %135
  %139 = load i8, i8* %136, align 1
  %140 = icmp eq i8 %139, 103
  br i1 %140, label %141, label %55

141:                                              ; preds = %138
  %142 = getelementptr inbounds i8, i8* %26, i64 3
  %143 = icmp eq i32 %17, 3
  br i1 %143, label %55, label %144

144:                                              ; preds = %141
  %145 = load i8, i8* %142, align 1
  %146 = icmp eq i8 %145, 110
  br i1 %146, label %147, label %55

147:                                              ; preds = %144
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1, i32 1
  %149 = bitcast i32* %148 to i8*
  %150 = icmp eq i8* %28, %149
  br i1 %150, label %55, label %151

151:                                              ; preds = %147
  %152 = load i8, i8* %149, align 1
  %153 = icmp eq i8 %152, 105
  br i1 %153, label %154, label %55

154:                                              ; preds = %151
  %155 = getelementptr inbounds i8, i8* %149, i64 1
  %156 = icmp eq i8* %155, %28
  br i1 %156, label %55, label %157

157:                                              ; preds = %154
  %158 = load i8, i8* %155, align 1
  %159 = icmp eq i8 %158, 102
  br i1 %159, label %160, label %55

160:                                              ; preds = %157
  %161 = getelementptr inbounds i8, i8* %149, i64 2
  %162 = icmp eq i8* %161, %28
  br i1 %162, label %55, label %163

163:                                              ; preds = %160
  %164 = load i8, i8* %161, align 1
  %165 = icmp eq i8 %164, 121
  %166 = select i1 %165, i32 2, i32 0
  br label %55

167:                                              ; preds = %31
  %168 = load i8, i8* %32, align 1
  %169 = icmp eq i8 %168, 105
  br i1 %169, label %170, label %34

170:                                              ; preds = %167
  %171 = getelementptr inbounds i8, i8* %26, i64 2
  %172 = icmp eq i32 %17, 2
  br i1 %172, label %34, label %173

173:                                              ; preds = %170
  %174 = load i8, i8* %171, align 1
  %175 = icmp eq i8 %174, 115
  br i1 %175, label %176, label %34

176:                                              ; preds = %173
  %177 = getelementptr inbounds i8, i8* %26, i64 3
  %178 = icmp eq i32 %17, 3
  br i1 %178, label %34, label %179

179:                                              ; preds = %176
  %180 = load i8, i8* %177, align 1
  %181 = icmp eq i8 %180, 97
  br i1 %181, label %182, label %34

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1, i32 1
  %184 = bitcast i32* %183 to i8*
  %185 = icmp eq i8* %28, %184
  br i1 %185, label %34, label %186

186:                                              ; preds = %182
  %187 = load i8, i8* %184, align 1
  %188 = icmp eq i8 %187, 98
  br i1 %188, label %189, label %34

189:                                              ; preds = %186
  %190 = getelementptr inbounds i8, i8* %184, i64 1
  %191 = icmp eq i8* %190, %28
  br i1 %191, label %34, label %192

192:                                              ; preds = %189
  %193 = load i8, i8* %190, align 1
  %194 = icmp eq i8 %193, 108
  br i1 %194, label %195, label %34

195:                                              ; preds = %192
  %196 = getelementptr inbounds i8, i8* %184, i64 2
  %197 = icmp eq i8* %196, %28
  br i1 %197, label %34, label %198

198:                                              ; preds = %195
  %199 = load i8, i8* %196, align 1
  %200 = icmp eq i8 %199, 101
  br i1 %200, label %55, label %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5blink13SVGZoomAndPan5ParseERPKhS2_(i8** nocapture dereferenceable(8), i8*) local_unnamed_addr #2 align 2 {
  %3 = load i8*, i8** %0, align 8
  %4 = icmp ult i8* %3, %1
  br i1 %4, label %5, label %17

5:                                                ; preds = %2
  %6 = load i8, i8* %3, align 1
  %7 = icmp eq i8 %6, 100
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %3, i64 1
  %10 = icmp eq i8* %9, %1
  br i1 %10, label %11, label %56

11:                                               ; preds = %83, %77, %71, %65, %59, %8, %5, %56, %62, %68, %74, %80, %86
  %12 = load i8, i8* %3, align 1
  %13 = icmp eq i8 %12, 109
  br i1 %13, label %14, label %17

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %3, i64 1
  %16 = icmp eq i8* %15, %1
  br i1 %16, label %17, label %19

17:                                               ; preds = %46, %40, %34, %28, %22, %14, %11, %19, %25, %31, %37, %43, %49, %2, %89, %52
  %18 = phi i32 [ 1, %89 ], [ 2, %52 ], [ 0, %2 ], [ 0, %49 ], [ 0, %43 ], [ 0, %37 ], [ 0, %31 ], [ 0, %25 ], [ 0, %19 ], [ 0, %11 ], [ 0, %14 ], [ 0, %22 ], [ 0, %28 ], [ 0, %34 ], [ 0, %40 ], [ 0, %46 ]
  ret i32 %18

19:                                               ; preds = %14
  %20 = load i8, i8* %15, align 1
  %21 = icmp eq i8 %20, 97
  br i1 %21, label %22, label %17

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %3, i64 2
  %24 = icmp eq i8* %23, %1
  br i1 %24, label %17, label %25

25:                                               ; preds = %22
  %26 = load i8, i8* %23, align 1
  %27 = icmp eq i8 %26, 103
  br i1 %27, label %28, label %17

28:                                               ; preds = %25
  %29 = getelementptr inbounds i8, i8* %3, i64 3
  %30 = icmp eq i8* %29, %1
  br i1 %30, label %17, label %31

31:                                               ; preds = %28
  %32 = load i8, i8* %29, align 1
  %33 = icmp eq i8 %32, 110
  br i1 %33, label %34, label %17

34:                                               ; preds = %31
  %35 = getelementptr inbounds i8, i8* %3, i64 4
  %36 = icmp eq i8* %35, %1
  br i1 %36, label %17, label %37

37:                                               ; preds = %34
  %38 = load i8, i8* %35, align 1
  %39 = icmp eq i8 %38, 105
  br i1 %39, label %40, label %17

40:                                               ; preds = %37
  %41 = getelementptr inbounds i8, i8* %3, i64 5
  %42 = icmp eq i8* %41, %1
  br i1 %42, label %17, label %43

43:                                               ; preds = %40
  %44 = load i8, i8* %41, align 1
  %45 = icmp eq i8 %44, 102
  br i1 %45, label %46, label %17

46:                                               ; preds = %43
  %47 = getelementptr inbounds i8, i8* %3, i64 6
  %48 = icmp eq i8* %47, %1
  br i1 %48, label %17, label %49

49:                                               ; preds = %46
  %50 = load i8, i8* %47, align 1
  %51 = icmp eq i8 %50, 121
  br i1 %51, label %52, label %17

52:                                               ; preds = %49
  %53 = getelementptr inbounds i8, i8* %3, i64 7
  %54 = icmp eq i8* %53, %1
  %55 = select i1 %54, i8* %1, i8* %53
  store i8* %55, i8** %0, align 8
  br label %17

56:                                               ; preds = %8
  %57 = load i8, i8* %9, align 1
  %58 = icmp eq i8 %57, 105
  br i1 %58, label %59, label %11

59:                                               ; preds = %56
  %60 = getelementptr inbounds i8, i8* %3, i64 2
  %61 = icmp eq i8* %60, %1
  br i1 %61, label %11, label %62

62:                                               ; preds = %59
  %63 = load i8, i8* %60, align 1
  %64 = icmp eq i8 %63, 115
  br i1 %64, label %65, label %11

65:                                               ; preds = %62
  %66 = getelementptr inbounds i8, i8* %3, i64 3
  %67 = icmp eq i8* %66, %1
  br i1 %67, label %11, label %68

68:                                               ; preds = %65
  %69 = load i8, i8* %66, align 1
  %70 = icmp eq i8 %69, 97
  br i1 %70, label %71, label %11

71:                                               ; preds = %68
  %72 = getelementptr inbounds i8, i8* %3, i64 4
  %73 = icmp eq i8* %72, %1
  br i1 %73, label %11, label %74

74:                                               ; preds = %71
  %75 = load i8, i8* %72, align 1
  %76 = icmp eq i8 %75, 98
  br i1 %76, label %77, label %11

77:                                               ; preds = %74
  %78 = getelementptr inbounds i8, i8* %3, i64 5
  %79 = icmp eq i8* %78, %1
  br i1 %79, label %11, label %80

80:                                               ; preds = %77
  %81 = load i8, i8* %78, align 1
  %82 = icmp eq i8 %81, 108
  br i1 %82, label %83, label %11

83:                                               ; preds = %80
  %84 = getelementptr inbounds i8, i8* %3, i64 6
  %85 = icmp eq i8* %84, %1
  br i1 %85, label %11, label %86

86:                                               ; preds = %83
  %87 = load i8, i8* %84, align 1
  %88 = icmp eq i8 %87, 101
  br i1 %88, label %89, label %11

89:                                               ; preds = %86
  %90 = getelementptr inbounds i8, i8* %3, i64 7
  %91 = icmp eq i8* %90, %1
  %92 = select i1 %91, i8* %1, i8* %90
  store i8* %92, i8** %0, align 8
  br label %17
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5blink13SVGZoomAndPan5ParseERPKDsS2_(i16** nocapture dereferenceable(8), i16* readnone) local_unnamed_addr #2 align 2 {
  %3 = load i16*, i16** %0, align 8
  %4 = icmp ult i16* %3, %1
  br i1 %4, label %5, label %27

5:                                                ; preds = %2
  %6 = load i16, i16* %3, align 2
  %7 = icmp eq i16 %6, 100
  br i1 %7, label %8, label %16

8:                                                ; preds = %5
  %9 = getelementptr inbounds i16, i16* %3, i64 1
  %10 = icmp ult i16* %9, %1
  br i1 %10, label %65, label %11

11:                                               ; preds = %98, %92, %86, %80, %74, %68, %8
  %12 = phi i16* [ %9, %8 ], [ %69, %68 ], [ %75, %74 ], [ %81, %80 ], [ %87, %86 ], [ %93, %92 ], [ %99, %98 ]
  %13 = phi i1 [ false, %8 ], [ false, %68 ], [ false, %74 ], [ false, %80 ], [ false, %86 ], [ false, %92 ], [ true, %98 ]
  br i1 %13, label %14, label %16

14:                                               ; preds = %98, %11
  %15 = phi i16* [ %12, %11 ], [ %99, %98 ]
  store i16* %15, i16** %0, align 8
  br label %27

16:                                               ; preds = %5, %65, %71, %77, %83, %89, %95, %11
  %17 = load i16, i16* %3, align 2
  %18 = icmp eq i16 %17, 109
  br i1 %18, label %19, label %27

19:                                               ; preds = %16
  %20 = getelementptr inbounds i16, i16* %3, i64 1
  %21 = icmp ult i16* %20, %1
  br i1 %21, label %29, label %22

22:                                               ; preds = %62, %56, %50, %44, %38, %32, %19
  %23 = phi i16* [ %20, %19 ], [ %33, %32 ], [ %39, %38 ], [ %45, %44 ], [ %51, %50 ], [ %57, %56 ], [ %63, %62 ]
  %24 = phi i1 [ false, %19 ], [ false, %32 ], [ false, %38 ], [ false, %44 ], [ false, %50 ], [ false, %56 ], [ true, %62 ]
  br i1 %24, label %25, label %27

25:                                               ; preds = %62, %22
  %26 = phi i16* [ %23, %22 ], [ %63, %62 ]
  store i16* %26, i16** %0, align 8
  br label %27

27:                                               ; preds = %16, %29, %35, %41, %47, %53, %59, %2, %14, %22, %25
  %28 = phi i32 [ 1, %14 ], [ 2, %25 ], [ 0, %22 ], [ 0, %2 ], [ 0, %59 ], [ 0, %53 ], [ 0, %47 ], [ 0, %41 ], [ 0, %35 ], [ 0, %29 ], [ 0, %16 ]
  ret i32 %28

29:                                               ; preds = %19
  %30 = load i16, i16* %20, align 2
  %31 = icmp eq i16 %30, 97
  br i1 %31, label %32, label %27

32:                                               ; preds = %29
  %33 = getelementptr inbounds i16, i16* %3, i64 2
  %34 = icmp ult i16* %33, %1
  br i1 %34, label %35, label %22

35:                                               ; preds = %32
  %36 = load i16, i16* %33, align 2
  %37 = icmp eq i16 %36, 103
  br i1 %37, label %38, label %27

38:                                               ; preds = %35
  %39 = getelementptr inbounds i16, i16* %3, i64 3
  %40 = icmp ult i16* %39, %1
  br i1 %40, label %41, label %22

41:                                               ; preds = %38
  %42 = load i16, i16* %39, align 2
  %43 = icmp eq i16 %42, 110
  br i1 %43, label %44, label %27

44:                                               ; preds = %41
  %45 = getelementptr inbounds i16, i16* %3, i64 4
  %46 = icmp ult i16* %45, %1
  br i1 %46, label %47, label %22

47:                                               ; preds = %44
  %48 = load i16, i16* %45, align 2
  %49 = icmp eq i16 %48, 105
  br i1 %49, label %50, label %27

50:                                               ; preds = %47
  %51 = getelementptr inbounds i16, i16* %3, i64 5
  %52 = icmp ult i16* %51, %1
  br i1 %52, label %53, label %22

53:                                               ; preds = %50
  %54 = load i16, i16* %51, align 2
  %55 = icmp eq i16 %54, 102
  br i1 %55, label %56, label %27

56:                                               ; preds = %53
  %57 = getelementptr inbounds i16, i16* %3, i64 6
  %58 = icmp ult i16* %57, %1
  br i1 %58, label %59, label %22

59:                                               ; preds = %56
  %60 = load i16, i16* %57, align 2
  %61 = icmp eq i16 %60, 121
  br i1 %61, label %62, label %27

62:                                               ; preds = %59
  %63 = getelementptr inbounds i16, i16* %3, i64 7
  %64 = icmp ult i16* %63, %1
  br i1 %64, label %25, label %22

65:                                               ; preds = %8
  %66 = load i16, i16* %9, align 2
  %67 = icmp eq i16 %66, 105
  br i1 %67, label %68, label %16

68:                                               ; preds = %65
  %69 = getelementptr inbounds i16, i16* %3, i64 2
  %70 = icmp ult i16* %69, %1
  br i1 %70, label %71, label %11

71:                                               ; preds = %68
  %72 = load i16, i16* %69, align 2
  %73 = icmp eq i16 %72, 115
  br i1 %73, label %74, label %16

74:                                               ; preds = %71
  %75 = getelementptr inbounds i16, i16* %3, i64 3
  %76 = icmp ult i16* %75, %1
  br i1 %76, label %77, label %11

77:                                               ; preds = %74
  %78 = load i16, i16* %75, align 2
  %79 = icmp eq i16 %78, 97
  br i1 %79, label %80, label %16

80:                                               ; preds = %77
  %81 = getelementptr inbounds i16, i16* %3, i64 4
  %82 = icmp ult i16* %81, %1
  br i1 %82, label %83, label %11

83:                                               ; preds = %80
  %84 = load i16, i16* %81, align 2
  %85 = icmp eq i16 %84, 98
  br i1 %85, label %86, label %16

86:                                               ; preds = %83
  %87 = getelementptr inbounds i16, i16* %3, i64 5
  %88 = icmp ult i16* %87, %1
  br i1 %88, label %89, label %11

89:                                               ; preds = %86
  %90 = load i16, i16* %87, align 2
  %91 = icmp eq i16 %90, 108
  br i1 %91, label %92, label %16

92:                                               ; preds = %89
  %93 = getelementptr inbounds i16, i16* %3, i64 6
  %94 = icmp ult i16* %93, %1
  br i1 %94, label %95, label %11

95:                                               ; preds = %92
  %96 = load i16, i16* %93, align 2
  %97 = icmp eq i16 %96, 101
  br i1 %97, label %98, label %16

98:                                               ; preds = %95
  %99 = getelementptr inbounds i16, i16* %3, i64 7
  %100 = icmp ult i16* %99, %1
  br i1 %100, label %14, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13SVGZoomAndPanD2Ev(%"class.blink::SVGZoomAndPan"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13SVGZoomAndPanD0Ev(%"class.blink::SVGZoomAndPan"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.blink::SVGZoomAndPan"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13SVGZoomAndPan13setZoomAndPanEt(%"class.blink::SVGZoomAndPan"*, i16 zeroext) unnamed_addr #3 comdat align 2 {
  %3 = add i16 %1, -1
  %4 = icmp ugt i16 %3, 1
  %5 = select i1 %4, i16 0, i16 %1
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds %"class.blink::SVGZoomAndPan", %"class.blink::SVGZoomAndPan"* %0, i64 0, i32 1
  store i32 %6, i32* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13SVGZoomAndPan13setZoomAndPanEtRNS_14ExceptionStateE(%"class.blink::SVGZoomAndPan"*, i16 zeroext, %"class.blink::ExceptionState"*) unnamed_addr #3 comdat align 2 {
  %4 = bitcast %"class.blink::SVGZoomAndPan"* %0 to void (%"class.blink::SVGZoomAndPan"*, i16)***
  %5 = load void (%"class.blink::SVGZoomAndPan"*, i16)**, void (%"class.blink::SVGZoomAndPan"*, i16)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SVGZoomAndPan"*, i16)*, void (%"class.blink::SVGZoomAndPan"*, i16)** %5, i64 2
  %7 = load void (%"class.blink::SVGZoomAndPan"*, i16)*, void (%"class.blink::SVGZoomAndPan"*, i16)** %6, align 8
  tail call void %7(%"class.blink::SVGZoomAndPan"* %0, i16 zeroext %1) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { builtin nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
