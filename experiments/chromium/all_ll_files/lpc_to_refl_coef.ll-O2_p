; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/lpc_to_refl_coef.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/lpc_to_refl_coef.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcSpl_LpcToReflCoef(i16* nocapture, i32, i16* nocapture) local_unnamed_addr #0 {
  %4 = alloca [50 x i32], align 16
  %5 = bitcast [50 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 200, i1 false)
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = shl i16 %8, 3
  %10 = add i32 %1, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i16, i16* %2, i64 %11
  store i16 %9, i16* %12, align 2
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %150

14:                                               ; preds = %3, %136
  %15 = phi i64 [ %149, %136 ], [ 0, %3 ]
  %16 = phi i16 [ %144, %136 ], [ %9, %3 ]
  %17 = phi i64 [ %145, %136 ], [ %11, %3 ]
  %18 = phi i32 [ %148, %136 ], [ %1, %3 ]
  %19 = xor i64 %15, -1
  %20 = add i64 %19, %11
  %21 = add i64 %20, -8
  %22 = lshr i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = xor i64 %15, -1
  %25 = add i64 %24, %11
  %26 = getelementptr inbounds i16, i16* %2, i64 %17
  %27 = sext i16 %16 to i32
  %28 = mul nsw i32 %27, %27
  %29 = sub nsw i32 1073741823, %28
  %30 = lshr i32 %29, 15
  %31 = trunc i32 %30 to i16
  %32 = add i64 %17, 1
  %33 = zext i32 %18 to i64
  br label %104

34:                                               ; preds = %104
  %35 = icmp sgt i64 %17, 1
  br i1 %35, label %36, label %136

36:                                               ; preds = %34
  %37 = icmp ult i64 %25, 8
  br i1 %37, label %38, label %40

38:                                               ; preds = %102, %36
  %39 = phi i64 [ 1, %36 ], [ %42, %102 ]
  br label %127

40:                                               ; preds = %36
  %41 = and i64 %25, -8
  %42 = or i64 %41, 1
  %43 = and i64 %23, 1
  %44 = icmp eq i64 %22, 0
  br i1 %44, label %83, label %45

45:                                               ; preds = %40
  %46 = sub nuw nsw i64 %23, %43
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %80, %47 ]
  %49 = phi i64 [ %46, %45 ], [ %81, %47 ]
  %50 = or i64 %48, 1
  %51 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %50
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = getelementptr inbounds i32, i32* %51, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = lshr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %58 = lshr <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  %59 = trunc <4 x i32> %57 to <4 x i16>
  %60 = trunc <4 x i32> %58 to <4 x i16>
  %61 = getelementptr inbounds i16, i16* %0, i64 %50
  %62 = bitcast i16* %61 to <4 x i16>*
  store <4 x i16> %59, <4 x i16>* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 4
  %64 = bitcast i16* %63 to <4 x i16>*
  store <4 x i16> %60, <4 x i16>* %64, align 2
  %65 = or i64 %48, 9
  %66 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = lshr <4 x i32> %68, <i32 1, i32 1, i32 1, i32 1>
  %73 = lshr <4 x i32> %71, <i32 1, i32 1, i32 1, i32 1>
  %74 = trunc <4 x i32> %72 to <4 x i16>
  %75 = trunc <4 x i32> %73 to <4 x i16>
  %76 = getelementptr inbounds i16, i16* %0, i64 %65
  %77 = bitcast i16* %76 to <4 x i16>*
  store <4 x i16> %74, <4 x i16>* %77, align 2
  %78 = getelementptr inbounds i16, i16* %76, i64 4
  %79 = bitcast i16* %78 to <4 x i16>*
  store <4 x i16> %75, <4 x i16>* %79, align 2
  %80 = add i64 %48, 16
  %81 = add i64 %49, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %47, !llvm.loop !2

83:                                               ; preds = %47, %40
  %84 = phi i64 [ 0, %40 ], [ %80, %47 ]
  %85 = icmp eq i64 %43, 0
  br i1 %85, label %102, label %86

86:                                               ; preds = %83
  %87 = or i64 %84, 1
  %88 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4
  %91 = getelementptr inbounds i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4
  %94 = lshr <4 x i32> %90, <i32 1, i32 1, i32 1, i32 1>
  %95 = lshr <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  %96 = trunc <4 x i32> %94 to <4 x i16>
  %97 = trunc <4 x i32> %95 to <4 x i16>
  %98 = getelementptr inbounds i16, i16* %0, i64 %87
  %99 = bitcast i16* %98 to <4 x i16>*
  store <4 x i16> %96, <4 x i16>* %99, align 2
  %100 = getelementptr inbounds i16, i16* %98, i64 4
  %101 = bitcast i16* %100 to <4 x i16>*
  store <4 x i16> %97, <4 x i16>* %101, align 2
  br label %102

102:                                              ; preds = %83, %86
  %103 = icmp eq i64 %25, %41
  br i1 %103, label %136, label %38

104:                                              ; preds = %125, %14
  %105 = phi i16 [ %126, %125 ], [ %16, %14 ]
  %106 = phi i64 [ %123, %125 ], [ 1, %14 ]
  %107 = getelementptr inbounds i16, i16* %0, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = shl nuw i32 %109, 16
  %111 = sext i16 %105 to i32
  %112 = sub i64 %32, %106
  %113 = shl i64 %112, 32
  %114 = ashr exact i64 %113, 32
  %115 = getelementptr inbounds i16, i16* %0, i64 %114
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = shl nsw i32 %111, 1
  %119 = mul i32 %118, %117
  %120 = sub nsw i32 %110, %119
  %121 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %106
  %122 = tail call i32 @WebRtcSpl_DivW32W16(i32 %120, i16 signext %31) #3
  store i32 %122, i32* %121, align 4
  %123 = add nuw nsw i64 %106, 1
  %124 = icmp eq i64 %123, %33
  br i1 %124, label %34, label %125

125:                                              ; preds = %104
  %126 = load i16, i16* %26, align 2
  br label %104

127:                                              ; preds = %38, %127
  %128 = phi i64 [ %134, %127 ], [ %39, %38 ]
  %129 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = lshr i32 %130, 1
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %0, i64 %128
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %128, 1
  %135 = icmp eq i64 %134, %17
  br i1 %135, label %136, label %127, !llvm.loop !4

136:                                              ; preds = %127, %102, %34
  %137 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %17
  %138 = load i32, i32* %137, align 4
  %139 = icmp sgt i32 %138, -8191
  %140 = select i1 %139, i32 %138, i32 -8191
  %141 = icmp slt i32 %140, 8191
  %142 = select i1 %141, i32 %140, i32 8191
  store i32 %142, i32* %137, align 4
  %143 = trunc i32 %142 to i16
  %144 = shl i16 %143, 2
  %145 = add nsw i64 %17, -1
  %146 = getelementptr inbounds i16, i16* %2, i64 %145
  store i16 %144, i16* %146, align 2
  %147 = icmp sgt i64 %145, 0
  %148 = add i32 %18, -1
  %149 = add i64 %15, 1
  br i1 %147, label %14, label %150

150:                                              ; preds = %136, %3
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %5) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @WebRtcSpl_DivW32W16(i32, i16 signext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
