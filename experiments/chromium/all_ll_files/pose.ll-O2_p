; ModuleID = '../../device/vr/public/mojom/pose.cc'
source_filename = "../../device/vr/public/mojom/pose.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Quaternion" = type { double, double, double, double }
%"class.device::Pose" = type <{ %"class.gfx::Point3F", [4 x i8], %"class.gfx::Quaternion", %"class.gfx::Transform", [4 x i8] }>
%"class.gfx::Point3F" = type { float, float, float }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"struct.gfx::DecomposedTransform" = type { [3 x float], [3 x float], [3 x float], [4 x float], %"class.gfx::Quaternion" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon }
%union.anon = type { %"class.device::Pose" }

@__const._ZN6device4Pose6CreateERKN3gfx9TransformE.decomposed_other_from_this = private unnamed_addr constant { [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" } { [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA", %"class.gfx::Quaternion" { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF } }, align 8
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN6device4PoseC1Ev = hidden unnamed_addr alias void (%"class.device::Pose"*), void (%"class.device::Pose"*)* @_ZN6device4PoseC2Ev
@_ZN6device4PoseC1ERKN3gfx7Point3FERKNS1_10QuaternionE = hidden unnamed_addr alias void (%"class.device::Pose"*, %"class.gfx::Point3F"*, %"class.gfx::Quaternion"*), void (%"class.device::Pose"*, %"class.gfx::Point3F"*, %"class.gfx::Quaternion"*)* @_ZN6device4PoseC2ERKN3gfx7Point3FERKNS1_10QuaternionE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device4PoseC2Ev(%"class.device::Pose"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 0, i32 0
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %3, align 4
  %4 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 0, i32 2
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 2, i32 3
  %7 = bitcast %"class.gfx::Quaternion"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #4
  store double 1.000000e+00, double* %6, align 8
  %8 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 3
  %9 = bitcast %"class.gfx::Transform"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #4
  %10 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 3, i32 0, i32 1
  store i8 0, i8* %10, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device4PoseC2ERKN3gfx7Point3FERKNS1_10QuaternionE(%"class.device::Pose"* nocapture, %"class.gfx::Point3F"* nocapture readonly dereferenceable(12), %"class.gfx::Quaternion"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.gfx::DecomposedTransform", align 8
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = bitcast %"class.device::Pose"* %0 to i8*
  %7 = bitcast %"class.gfx::Point3F"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 4 %7, i64 12, i1 false)
  %8 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 2
  %9 = bitcast %"class.gfx::Quaternion"* %8 to i8*
  %10 = bitcast %"class.gfx::Quaternion"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 32, i1 false)
  %11 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 3
  %12 = bitcast %"class.gfx::Transform"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #4
  %13 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 3, i32 0, i32 1
  store i8 0, i8* %13, align 4
  %14 = bitcast %"struct.gfx::DecomposedTransform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %14) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* align 8 bitcast ({ [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" }* @__const._ZN6device4Pose6CreateERKN3gfx9TransformE.decomposed_other_from_this to i8*), i64 88, i1 false)
  call void @_ZN3gfx19DecomposedTransformC1Ev(%"struct.gfx::DecomposedTransform"* nonnull %4) #4
  %15 = bitcast %"class.gfx::Point3F"* %1 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %"struct.gfx::DecomposedTransform"* %4 to i32*
  store i32 %16, i32* %17, align 8
  %18 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 1
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %4, i64 0, i32 0, i64 1
  %22 = bitcast float* %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 2
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %4, i64 0, i32 0, i64 2
  %27 = bitcast float* %26 to i32*
  store i32 %25, i32* %27, align 8
  %28 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %4, i64 0, i32 4
  %29 = bitcast %"class.gfx::Quaternion"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %10, i64 32, i1 false)
  %30 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %30) #4
  call void @_ZN3gfx16ComposeTransformERKNS_19DecomposedTransformE(%"class.gfx::Transform"* nonnull sret %5, %"struct.gfx::DecomposedTransform"* nonnull dereferenceable(88) %4) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* nonnull align 4 %30, i64 68, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %30) #4
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %14) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3gfx19DecomposedTransformC1Ev(%"struct.gfx::DecomposedTransform"*) unnamed_addr #2

declare void @_ZN3gfx16ComposeTransformERKNS_19DecomposedTransformE(%"class.gfx::Transform"* sret, %"struct.gfx::DecomposedTransform"* dereferenceable(88)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device4Pose6CreateERKN3gfx9TransformE(%"class.absl::optional"* noalias nocapture sret, %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.gfx::DecomposedTransform", align 8
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca %"struct.gfx::DecomposedTransform", align 8
  %6 = alloca <{ [4 x i8], %"class.gfx::Quaternion" }>, align 4
  %7 = alloca [4 x [4 x float]], align 8
  %8 = alloca [7 x i8], align 1
  %9 = bitcast %"struct.gfx::DecomposedTransform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %9) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 bitcast ({ [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" }* @__const._ZN6device4Pose6CreateERKN3gfx9TransformE.decomposed_other_from_this to i8*), i64 88, i1 false)
  call void @_ZN3gfx19DecomposedTransformC1Ev(%"struct.gfx::DecomposedTransform"* nonnull %5) #4
  %10 = call zeroext i1 @_ZN3gfx18DecomposeTransformEPNS_19DecomposedTransformERKNS_9TransformE(%"struct.gfx::DecomposedTransform"* nonnull %5, %"class.gfx::Transform"* dereferenceable(68) %1) #4
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %13 = bitcast %union.anon* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 120, i1 false) #4
  br label %53

14:                                               ; preds = %2
  %15 = getelementptr inbounds <{ [4 x i8], %"class.gfx::Quaternion" }>, <{ [4 x i8], %"class.gfx::Quaternion" }>* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %15)
  %16 = bitcast [4 x [4 x float]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16)
  %17 = getelementptr inbounds [7 x i8], [7 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %17)
  %18 = bitcast %"struct.gfx::DecomposedTransform"* %5 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %5, i64 0, i32 0, i64 1
  %21 = bitcast float* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %5, i64 0, i32 0, i64 2
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %5, i64 0, i32 4
  %27 = bitcast %"class.gfx::Quaternion"* %26 to i8*
  %28 = getelementptr inbounds <{ [4 x i8], %"class.gfx::Quaternion" }>, <{ [4 x i8], %"class.gfx::Quaternion" }>* %6, i64 0, i32 1
  %29 = bitcast %"class.gfx::Quaternion"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 8 %27, i64 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false)
  %30 = bitcast %"struct.gfx::DecomposedTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %30) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %30, i8* align 8 bitcast ({ [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" }* @__const._ZN6device4Pose6CreateERKN3gfx9TransformE.decomposed_other_from_this to i8*), i64 88, i1 false) #4
  call void @_ZN3gfx19DecomposedTransformC1Ev(%"struct.gfx::DecomposedTransform"* nonnull %3) #4
  %31 = bitcast %"struct.gfx::DecomposedTransform"* %3 to i32*
  store i32 %19, i32* %31, align 8
  %32 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %3, i64 0, i32 0, i64 1
  %33 = bitcast float* %32 to i32*
  store i32 %22, i32* %33, align 4
  %34 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %3, i64 0, i32 0, i64 2
  %35 = bitcast float* %34 to i32*
  store i32 %25, i32* %35, align 8
  %36 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %3, i64 0, i32 4
  %37 = bitcast %"class.gfx::Quaternion"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %27, i64 32, i1 false) #4
  %38 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %38) #4
  call void @_ZN3gfx16ComposeTransformERKNS_19DecomposedTransformE(%"class.gfx::Transform"* nonnull sret %4, %"struct.gfx::DecomposedTransform"* nonnull dereferenceable(88) %3) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* nonnull align 4 %38, i64 64, i1 false)
  %39 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 1
  %40 = load i8, i8* %39, align 4
  %41 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %17, i8* align 1 %41, i64 3, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %38) #4
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %30) #4
  %42 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %43 = bitcast %union.anon* %42 to i32*
  store i32 %19, i32* %43, align 8
  %44 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %45 = bitcast float* %44 to i32*
  store i32 %22, i32* %45, align 4
  %46 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %47 = bitcast float* %46 to i32*
  store i32 %25, i32* %47, align 8
  %48 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* nonnull align 4 %15, i64 36, i1 false)
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 3
  %50 = bitcast %"class.gfx::Transform"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 8 %16, i64 64, i1 false)
  %51 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 3, i32 0, i32 1
  store i8 %40, i8* %51, align 4
  %52 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 3, i32 0, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* nonnull align 1 %17, i64 3, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %15)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %17)
  br label %53

53:                                               ; preds = %14, %11
  %54 = phi i8 [ 1, %14 ], [ 0, %11 ]
  %55 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 %54, i8* %55, align 8
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %9) #4
  ret void
}

declare zeroext i1 @_ZN3gfx18DecomposeTransformEPNS_19DecomposedTransformERKNS_9TransformE(%"struct.gfx::DecomposedTransform"*, %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(68) %"class.gfx::Transform"* @_ZNK6device4Pose11ToTransformEv(%"class.device::Pose"* readnone) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.device::Pose", %"class.device::Pose"* %0, i64 0, i32 3
  ret %"class.gfx::Transform"* %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
