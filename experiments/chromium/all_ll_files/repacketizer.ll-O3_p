; ModuleID = '../../third_party/opus/src/src/repacketizer.c'
source_filename = "../../third_party/opus/src/src/repacketizer.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusRepacketizer = type { i8, i32, [48 x i8*], [48 x i16], i32 }

@.str = private unnamed_addr constant [40 x i8] c"assertion failed: ret > 0 && ret <= len\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"../../third_party/opus/src/src/repacketizer.c\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @opus_repacketizer_get_size() local_unnamed_addr #0 {
  ret i32 496
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden %struct.OpusRepacketizer* @opus_repacketizer_init(%struct.OpusRepacketizer* returned) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 1
  store i32 0, i32* %2, align 4
  ret %struct.OpusRepacketizer* %0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct.OpusRepacketizer* @opus_repacketizer_create() local_unnamed_addr #2 {
  %1 = tail call noalias i8* @malloc(i64 496) #10
  %2 = icmp eq i8* %1, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %0
  %4 = bitcast i8* %1 to %struct.OpusRepacketizer*
  %5 = getelementptr inbounds i8, i8* %1, i64 4
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 4
  br label %7

7:                                                ; preds = %0, %3
  %8 = phi %struct.OpusRepacketizer* [ %4, %3 ], [ null, %0 ]
  ret %struct.OpusRepacketizer* %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_repacketizer_destroy(%struct.OpusRepacketizer* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  tail call void @free(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_repacketizer_cat(%struct.OpusRepacketizer*, i8*, i32) local_unnamed_addr #4 {
  %4 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %5 = icmp slt i32 %2, 1
  br i1 %5, label %40, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = load i8, i8* %1, align 1
  %12 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  store i8 %11, i8* %12, align 8
  %13 = tail call i32 @opus_packet_get_samples_per_frame(i8* %1, i32 8000) #10
  %14 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 4
  store i32 %13, i32* %14, align 8
  br label %21

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  %17 = load i8, i8* %16, align 8
  %18 = load i8, i8* %1, align 1
  %19 = xor i8 %18, %17
  %20 = icmp ugt i8 %19, 3
  br i1 %20, label %40, label %21

21:                                               ; preds = %15, %10
  %22 = tail call i32 @opus_packet_get_nb_frames(i8* %1, i32 %2) #10
  %23 = icmp slt i32 %22, 1
  br i1 %23, label %40, label %24

24:                                               ; preds = %21
  %25 = load i32, i32* %7, align 4
  %26 = add nsw i32 %25, %22
  %27 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = mul nsw i32 %26, %28
  %30 = icmp sgt i32 %29, 960
  br i1 %30, label %40, label %31

31:                                               ; preds = %24
  %32 = sext i32 %25 to i64
  %33 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 2, i64 %32
  %34 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 3, i64 %32
  %35 = call i32 @opus_packet_parse_impl(i8* %1, i32 %2, i32 0, i8* nonnull %4, i8** %33, i16* %34, i32* null, i32* null) #10
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %40, label %37

37:                                               ; preds = %31
  %38 = load i32, i32* %7, align 4
  %39 = add nsw i32 %38, %22
  store i32 %39, i32* %7, align 4
  br label %40

40:                                               ; preds = %3, %15, %21, %24, %31, %37
  %41 = phi i32 [ 0, %37 ], [ -4, %3 ], [ -4, %15 ], [ -4, %21 ], [ -4, %24 ], [ %35, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  ret i32 %41
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opus_repacketizer_get_nb_frames(%struct.OpusRepacketizer* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* nocapture readonly, i32, i32, i8*, i32, i32, i32) local_unnamed_addr #4 {
  %8 = icmp sgt i32 %1, -1
  %9 = icmp sgt i32 %2, %1
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %363

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %2
  br i1 %14, label %363, label %15

15:                                               ; preds = %11
  %16 = sub i32 %2, %1
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 3, i64 %17
  %19 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 2, i64 %17
  %20 = icmp ne i32 %5, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %15
  %22 = add nsw i32 %16, -1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %18, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = icmp sgt i16 %25, 251
  %27 = select i1 %26, i32 2, i32 1
  br label %28

28:                                               ; preds = %15, %21
  %29 = phi i32 [ %27, %21 ], [ 0, %15 ]
  switch i32 %16, label %78 [
    i32 1, label %30
    i32 2, label %41
  ]

30:                                               ; preds = %28
  %31 = load i16, i16* %18, align 2
  %32 = sext i16 %31 to i32
  %33 = add nuw nsw i32 %29, 1
  %34 = add nsw i32 %33, %32
  %35 = icmp sgt i32 %34, %4
  br i1 %35, label %363, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  %38 = load i8, i8* %37, align 8
  %39 = and i8 %38, -4
  %40 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %39, i8* %3, align 1
  br label %80

41:                                               ; preds = %28
  %42 = getelementptr inbounds i16, i16* %18, i64 1
  %43 = load i16, i16* %42, align 2
  %44 = load i16, i16* %18, align 2
  %45 = sext i16 %44 to i32
  %46 = icmp eq i16 %43, %44
  br i1 %46, label %47, label %58

47:                                               ; preds = %41
  %48 = shl nsw i32 %45, 1
  %49 = or i32 %48, 1
  %50 = add nsw i32 %49, %29
  %51 = icmp sgt i32 %50, %4
  br i1 %51, label %363, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  %54 = load i8, i8* %53, align 8
  %55 = and i8 %54, -4
  %56 = or i8 %55, 1
  %57 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %56, i8* %3, align 1
  br label %80

58:                                               ; preds = %41
  %59 = sext i16 %43 to i32
  %60 = icmp sgt i16 %44, 251
  %61 = zext i1 %60 to i32
  %62 = add nuw nsw i32 %29, 2
  %63 = add nsw i32 %62, %59
  %64 = add nsw i32 %63, %45
  %65 = add nsw i32 %64, %61
  %66 = icmp sgt i32 %65, %4
  br i1 %66, label %363, label %67

67:                                               ; preds = %58
  %68 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  %69 = load i8, i8* %68, align 8
  %70 = and i8 %69, -4
  %71 = or i8 %70, 2
  %72 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %71, i8* %3, align 1
  %73 = load i16, i16* %18, align 2
  %74 = sext i16 %73 to i32
  %75 = tail call i32 @encode_size(i32 %74, i8* %72) #10
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %72, i64 %76
  br label %80

78:                                               ; preds = %28
  %79 = icmp sgt i32 %16, 2
  br i1 %79, label %86, label %80

80:                                               ; preds = %36, %52, %67, %78
  %81 = phi i8* [ %3, %78 ], [ %77, %67 ], [ %57, %52 ], [ %40, %36 ]
  %82 = phi i32 [ %29, %78 ], [ %65, %67 ], [ %50, %52 ], [ %34, %36 ]
  %83 = icmp ne i32 %6, 0
  %84 = icmp slt i32 %82, %4
  %85 = and i1 %83, %84
  br i1 %85, label %86, label %267

86:                                               ; preds = %80, %78
  br i1 %20, label %87, label %94

87:                                               ; preds = %86
  %88 = add nsw i32 %16, -1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i16, i16* %18, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = icmp sgt i16 %91, 251
  %93 = select i1 %92, i32 4, i32 3
  br label %94

94:                                               ; preds = %86, %87
  %95 = phi i32 [ %93, %87 ], [ 2, %86 ]
  %96 = icmp sgt i32 %16, 1
  %97 = load i16, i16* %18, align 2
  br i1 %96, label %98, label %189

98:                                               ; preds = %94
  %99 = zext i32 %16 to i64
  br label %102

100:                                              ; preds = %102
  %101 = icmp eq i64 %107, %99
  br i1 %101, label %189, label %102

102:                                              ; preds = %100, %98
  %103 = phi i64 [ 1, %98 ], [ %107, %100 ]
  %104 = getelementptr inbounds i16, i16* %18, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, %97
  %107 = add nuw nsw i64 %103, 1
  br i1 %106, label %100, label %108

108:                                              ; preds = %102
  %109 = add nsw i32 %16, -1
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %174

111:                                              ; preds = %108
  %112 = xor i32 %1, -1
  %113 = add i32 %112, %2
  %114 = zext i32 %113 to i64
  %115 = sext i16 %97 to i32
  %116 = icmp sgt i16 %97, 251
  %117 = select i1 %116, i32 2, i32 1
  %118 = add nsw i32 %95, %115
  %119 = add nsw i32 %118, %117
  %120 = icmp eq i32 %113, 1
  br i1 %120, label %174, label %121

121:                                              ; preds = %111
  %122 = add nsw i64 %114, -1
  %123 = icmp ult i64 %122, 8
  br i1 %123, label %159, label %124

124:                                              ; preds = %121
  %125 = and i64 %122, -8
  %126 = or i64 %125, 1
  %127 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %119, i32 0
  br label %128

128:                                              ; preds = %128, %124
  %129 = phi i64 [ 0, %124 ], [ %149, %128 ]
  %130 = phi <4 x i32> [ %127, %124 ], [ %147, %128 ]
  %131 = phi <4 x i32> [ zeroinitializer, %124 ], [ %148, %128 ]
  %132 = or i64 %129, 1
  %133 = getelementptr inbounds i16, i16* %18, i64 %132
  %134 = bitcast i16* %133 to <4 x i16>*
  %135 = load <4 x i16>, <4 x i16>* %134, align 2
  %136 = getelementptr inbounds i16, i16* %133, i64 4
  %137 = bitcast i16* %136 to <4 x i16>*
  %138 = load <4 x i16>, <4 x i16>* %137, align 2
  %139 = sext <4 x i16> %135 to <4 x i32>
  %140 = sext <4 x i16> %138 to <4 x i32>
  %141 = icmp sgt <4 x i16> %135, <i16 251, i16 251, i16 251, i16 251>
  %142 = icmp sgt <4 x i16> %138, <i16 251, i16 251, i16 251, i16 251>
  %143 = select <4 x i1> %141, <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %144 = select <4 x i1> %142, <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %145 = add <4 x i32> %130, %139
  %146 = add <4 x i32> %131, %140
  %147 = add <4 x i32> %145, %143
  %148 = add <4 x i32> %146, %144
  %149 = add i64 %129, 8
  %150 = icmp eq i64 %149, %125
  br i1 %150, label %151, label %128, !llvm.loop !2

151:                                              ; preds = %128
  %152 = add <4 x i32> %148, %147
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %154 = add <4 x i32> %152, %153
  %155 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %156 = add <4 x i32> %154, %155
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = icmp eq i64 %122, %125
  br i1 %158, label %174, label %159

159:                                              ; preds = %151, %121
  %160 = phi i64 [ 1, %121 ], [ %126, %151 ]
  %161 = phi i32 [ %119, %121 ], [ %157, %151 ]
  br label %162

162:                                              ; preds = %159, %162
  %163 = phi i64 [ %172, %162 ], [ %160, %159 ]
  %164 = phi i32 [ %171, %162 ], [ %161, %159 ]
  %165 = getelementptr inbounds i16, i16* %18, i64 %163
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i32
  %168 = icmp sgt i16 %166, 251
  %169 = select i1 %168, i32 2, i32 1
  %170 = add i32 %164, %167
  %171 = add i32 %170, %169
  %172 = add nuw nsw i64 %163, 1
  %173 = icmp eq i64 %172, %114
  br i1 %173, label %174, label %162, !llvm.loop !4

174:                                              ; preds = %162, %111, %151, %108
  %175 = phi i32 [ %95, %108 ], [ %119, %111 ], [ %157, %151 ], [ %171, %162 ]
  %176 = sext i32 %109 to i64
  %177 = getelementptr inbounds i16, i16* %18, i64 %176
  %178 = load i16, i16* %177, align 2
  %179 = sext i16 %178 to i32
  %180 = add nsw i32 %175, %179
  %181 = icmp sgt i32 %180, %4
  br i1 %181, label %363, label %182

182:                                              ; preds = %174
  %183 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  %184 = load i8, i8* %183, align 8
  %185 = or i8 %184, 3
  %186 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %185, i8* %3, align 1
  %187 = trunc i32 %16 to i8
  %188 = or i8 %187, -128
  store i8 %188, i8* %186, align 1
  br label %200

189:                                              ; preds = %100, %94
  %190 = sext i16 %97 to i32
  %191 = mul nsw i32 %16, %190
  %192 = add i32 %95, %191
  %193 = icmp sgt i32 %192, %4
  br i1 %193, label %363, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 0
  %196 = load i8, i8* %195, align 8
  %197 = or i8 %196, 3
  %198 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %197, i8* %3, align 1
  %199 = trunc i32 %16 to i8
  store i8 %199, i8* %198, align 1
  br label %200

200:                                              ; preds = %194, %182
  %201 = phi i8 [ %188, %182 ], [ %199, %194 ]
  %202 = phi i1 [ true, %182 ], [ false, %194 ]
  %203 = phi i32 [ %180, %182 ], [ %192, %194 ]
  %204 = getelementptr inbounds i8, i8* %3, i64 2
  %205 = icmp eq i32 %6, 0
  %206 = sub nsw i32 %4, %203
  %207 = icmp eq i32 %206, 0
  %208 = or i1 %205, %207
  br i1 %208, label %247, label %209

209:                                              ; preds = %200
  %210 = getelementptr inbounds i8, i8* %3, i64 1
  %211 = or i8 %201, 64
  store i8 %211, i8* %210, align 1
  %212 = add nsw i32 %206, -1
  %213 = sdiv i32 %212, 255
  %214 = icmp sgt i32 %212, 254
  br i1 %214, label %215, label %240

215:                                              ; preds = %209
  %216 = add nsw i32 %213, -1
  %217 = zext i32 %216 to i64
  %218 = add nuw nsw i64 %217, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %204, i8 -1, i64 %218, i1 false)
  %219 = add nsw i32 %213, -1
  %220 = and i32 %213, 7
  %221 = icmp ult i32 %219, 7
  br i1 %221, label %230, label %222

222:                                              ; preds = %215
  %223 = sub nsw i32 %213, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i8* [ %204, %222 ], [ %227, %224 ]
  %226 = phi i32 [ %223, %222 ], [ %228, %224 ]
  %227 = getelementptr inbounds i8, i8* %225, i64 8
  %228 = add i32 %226, -8
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %230, label %224

230:                                              ; preds = %224, %215
  %231 = phi i8* [ undef, %215 ], [ %227, %224 ]
  %232 = phi i8* [ %204, %215 ], [ %227, %224 ]
  %233 = icmp eq i32 %220, 0
  br i1 %233, label %240, label %234

234:                                              ; preds = %230, %234
  %235 = phi i8* [ %237, %234 ], [ %232, %230 ]
  %236 = phi i32 [ %238, %234 ], [ %220, %230 ]
  %237 = getelementptr inbounds i8, i8* %235, i64 1
  %238 = add i32 %236, -1
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %234, !llvm.loop !6

240:                                              ; preds = %230, %234, %209
  %241 = phi i8* [ %204, %209 ], [ %231, %230 ], [ %237, %234 ]
  %242 = mul i32 %213, -255
  %243 = add i32 %242, %206
  %244 = trunc i32 %243 to i8
  %245 = add i8 %244, -1
  %246 = getelementptr inbounds i8, i8* %241, i64 1
  store i8 %245, i8* %241, align 1
  br label %247

247:                                              ; preds = %200, %240
  %248 = phi i32 [ %4, %240 ], [ %203, %200 ]
  %249 = phi i8* [ %246, %240 ], [ %204, %200 ]
  %250 = icmp sgt i32 %16, 1
  %251 = and i1 %202, %250
  br i1 %251, label %252, label %267

252:                                              ; preds = %247
  %253 = xor i32 %1, -1
  %254 = add i32 %253, %2
  %255 = zext i32 %254 to i64
  br label %256

256:                                              ; preds = %256, %252
  %257 = phi i64 [ 0, %252 ], [ %265, %256 ]
  %258 = phi i8* [ %249, %252 ], [ %264, %256 ]
  %259 = getelementptr inbounds i16, i16* %18, i64 %257
  %260 = load i16, i16* %259, align 2
  %261 = sext i16 %260 to i32
  %262 = tail call i32 @encode_size(i32 %261, i8* %258) #10
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %258, i64 %263
  %265 = add nuw nsw i64 %257, 1
  %266 = icmp eq i64 %265, %255
  br i1 %266, label %267, label %256

267:                                              ; preds = %256, %247, %80
  %268 = phi i32 [ %82, %80 ], [ %248, %247 ], [ %248, %256 ]
  %269 = phi i8* [ %81, %80 ], [ %249, %247 ], [ %264, %256 ]
  br i1 %20, label %270, label %279

270:                                              ; preds = %267
  %271 = add nsw i32 %16, -1
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i16, i16* %18, i64 %272
  %274 = load i16, i16* %273, align 2
  %275 = sext i16 %274 to i32
  %276 = tail call i32 @encode_size(i32 %275, i8* %269) #10
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %269, i64 %277
  br label %279

279:                                              ; preds = %270, %267
  %280 = phi i8* [ %278, %270 ], [ %269, %267 ]
  %281 = icmp sgt i32 %16, 0
  br i1 %281, label %282, label %351

282:                                              ; preds = %279
  %283 = zext i32 %16 to i64
  %284 = add nsw i64 %283, -1
  %285 = and i64 %283, 3
  %286 = icmp ult i64 %284, 3
  br i1 %286, label %331, label %287

287:                                              ; preds = %282
  %288 = sub nsw i64 %283, %285
  br label %289

289:                                              ; preds = %289, %287
  %290 = phi i64 [ 0, %287 ], [ %328, %289 ]
  %291 = phi i8* [ %280, %287 ], [ %327, %289 ]
  %292 = phi i64 [ %288, %287 ], [ %329, %289 ]
  %293 = getelementptr inbounds i8*, i8** %19, i64 %290
  %294 = load i8*, i8** %293, align 8
  %295 = getelementptr inbounds i16, i16* %18, i64 %290
  %296 = load i16, i16* %295, align 2
  %297 = sext i16 %296 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %291, i8* align 1 %294, i64 %297, i1 false)
  %298 = load i16, i16* %295, align 2
  %299 = sext i16 %298 to i64
  %300 = getelementptr inbounds i8, i8* %291, i64 %299
  %301 = or i64 %290, 1
  %302 = getelementptr inbounds i8*, i8** %19, i64 %301
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr inbounds i16, i16* %18, i64 %301
  %305 = load i16, i16* %304, align 2
  %306 = sext i16 %305 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %300, i8* align 1 %303, i64 %306, i1 false)
  %307 = load i16, i16* %304, align 2
  %308 = sext i16 %307 to i64
  %309 = getelementptr inbounds i8, i8* %300, i64 %308
  %310 = or i64 %290, 2
  %311 = getelementptr inbounds i8*, i8** %19, i64 %310
  %312 = load i8*, i8** %311, align 8
  %313 = getelementptr inbounds i16, i16* %18, i64 %310
  %314 = load i16, i16* %313, align 2
  %315 = sext i16 %314 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %309, i8* align 1 %312, i64 %315, i1 false)
  %316 = load i16, i16* %313, align 2
  %317 = sext i16 %316 to i64
  %318 = getelementptr inbounds i8, i8* %309, i64 %317
  %319 = or i64 %290, 3
  %320 = getelementptr inbounds i8*, i8** %19, i64 %319
  %321 = load i8*, i8** %320, align 8
  %322 = getelementptr inbounds i16, i16* %18, i64 %319
  %323 = load i16, i16* %322, align 2
  %324 = sext i16 %323 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %318, i8* align 1 %321, i64 %324, i1 false)
  %325 = load i16, i16* %322, align 2
  %326 = sext i16 %325 to i64
  %327 = getelementptr inbounds i8, i8* %318, i64 %326
  %328 = add nuw nsw i64 %290, 4
  %329 = add i64 %292, -4
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %289

331:                                              ; preds = %289, %282
  %332 = phi i8* [ undef, %282 ], [ %327, %289 ]
  %333 = phi i64 [ 0, %282 ], [ %328, %289 ]
  %334 = phi i8* [ %280, %282 ], [ %327, %289 ]
  %335 = icmp eq i64 %285, 0
  br i1 %335, label %351, label %336

336:                                              ; preds = %331, %336
  %337 = phi i64 [ %348, %336 ], [ %333, %331 ]
  %338 = phi i8* [ %347, %336 ], [ %334, %331 ]
  %339 = phi i64 [ %349, %336 ], [ %285, %331 ]
  %340 = getelementptr inbounds i8*, i8** %19, i64 %337
  %341 = load i8*, i8** %340, align 8
  %342 = getelementptr inbounds i16, i16* %18, i64 %337
  %343 = load i16, i16* %342, align 2
  %344 = sext i16 %343 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %338, i8* align 1 %341, i64 %344, i1 false)
  %345 = load i16, i16* %342, align 2
  %346 = sext i16 %345 to i64
  %347 = getelementptr inbounds i8, i8* %338, i64 %346
  %348 = add nuw nsw i64 %337, 1
  %349 = add i64 %339, -1
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %336, !llvm.loop !8

351:                                              ; preds = %331, %336, %279
  %352 = phi i8* [ %280, %279 ], [ %332, %331 ], [ %347, %336 ]
  %353 = ptrtoint i8* %352 to i64
  %354 = icmp eq i32 %6, 0
  br i1 %354, label %363, label %355

355:                                              ; preds = %351
  %356 = sext i32 %4 to i64
  %357 = getelementptr inbounds i8, i8* %3, i64 %356
  %358 = icmp ult i8* %352, %357
  br i1 %358, label %359, label %363

359:                                              ; preds = %355
  %360 = sub i64 %356, %353
  %361 = getelementptr i8, i8* %3, i64 %360
  %362 = ptrtoint i8* %361 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %352, i8 0, i64 %362, i1 false)
  br label %363

363:                                              ; preds = %359, %355, %174, %189, %351, %58, %47, %30, %11, %7
  %364 = phi i32 [ -1, %7 ], [ -1, %11 ], [ -2, %30 ], [ -2, %47 ], [ -2, %58 ], [ %268, %351 ], [ -2, %189 ], [ -2, %174 ], [ %268, %355 ], [ %268, %359 ]
  ret i32 %364
}

declare i32 @encode_size(i32, i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_repacketizer_out_range(%struct.OpusRepacketizer* nocapture readonly, i32, i32, i8*, i32) local_unnamed_addr #4 {
  %6 = tail call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* %0, i32 %1, i32 %2, i8* %3, i32 %4, i32 0, i32 0)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_repacketizer_out(%struct.OpusRepacketizer* nocapture readonly, i8*, i32) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = tail call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* %0, i32 0, i32 %5, i8* %1, i32 %2, i32 0, i32 0)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_packet_pad(i8*, i32, i32) local_unnamed_addr #4 {
  %4 = alloca i8, align 1
  %5 = alloca %struct.OpusRepacketizer, align 8
  %6 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 496, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 496, i1 false)
  %7 = icmp slt i32 %1, 1
  br i1 %7, label %45, label %8

8:                                                ; preds = %3
  %9 = icmp eq i32 %1, %2
  br i1 %9, label %45, label %10

10:                                               ; preds = %8
  %11 = icmp sgt i32 %1, %2
  br i1 %11, label %45, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %5, i64 0, i32 1
  store i32 0, i32* %13, align 4
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = sext i32 %1 to i64
  %17 = sub nsw i64 0, %16
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %0, i64 %16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %19 = load i8, i8* %18, align 1
  store i8 %19, i8* %6, align 8
  %20 = tail call i32 @opus_packet_get_samples_per_frame(i8* %18, i32 8000) #10
  %21 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %5, i64 0, i32 4
  store i32 %20, i32* %21, align 8
  %22 = tail call i32 @opus_packet_get_nb_frames(i8* %18, i32 %1) #10
  %23 = icmp slt i32 %22, 1
  %24 = mul nsw i32 %22, %20
  %25 = icmp sgt i32 %24, 960
  %26 = or i1 %23, %25
  br i1 %26, label %35, label %27

27:                                               ; preds = %12
  %28 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %5, i64 0, i32 2, i64 0
  %29 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %5, i64 0, i32 3, i64 0
  %30 = call i32 @opus_packet_parse_impl(i8* %18, i32 %1, i32 0, i8* nonnull %4, i8** %28, i16* %29, i32* null, i32* null) #10
  %31 = icmp slt i32 %30, 1
  br i1 %31, label %36, label %32

32:                                               ; preds = %27
  %33 = load i32, i32* %13, align 4
  %34 = add nsw i32 %33, %22
  store i32 %34, i32* %13, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br label %40

35:                                               ; preds = %12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br label %45

36:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  %37 = icmp eq i32 %30, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %36
  %39 = load i32, i32* %13, align 4
  br label %40

40:                                               ; preds = %38, %32
  %41 = phi i32 [ %39, %38 ], [ %34, %32 ]
  %42 = call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* nonnull %5, i32 0, i32 %41, i8* %0, i32 %2, i32 0, i32 1)
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  br label %45

45:                                               ; preds = %35, %40, %36, %10, %8, %3
  %46 = phi i32 [ -1, %3 ], [ 0, %8 ], [ -1, %10 ], [ %30, %36 ], [ %44, %40 ], [ -4, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 496, i8* nonnull %6) #10
  ret i32 %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_packet_unpad(i8*, i32) local_unnamed_addr #4 {
  %3 = alloca i8, align 1
  %4 = alloca %struct.OpusRepacketizer, align 8
  %5 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 496, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 496, i1 false)
  %6 = icmp slt i32 %1, 1
  br i1 %6, label %37, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %4, i64 0, i32 1
  store i32 0, i32* %8, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #10
  store i8 -86, i8* %3, align 1
  %9 = load i8, i8* %0, align 1
  store i8 %9, i8* %5, align 8
  %10 = tail call i32 @opus_packet_get_samples_per_frame(i8* %0, i32 8000) #10
  %11 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %4, i64 0, i32 4
  store i32 %10, i32* %11, align 8
  %12 = tail call i32 @opus_packet_get_nb_frames(i8* %0, i32 %1) #10
  %13 = icmp slt i32 %12, 1
  %14 = mul nsw i32 %12, %10
  %15 = icmp sgt i32 %14, 960
  %16 = or i1 %13, %15
  br i1 %16, label %25, label %17

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %4, i64 0, i32 2, i64 0
  %19 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %4, i64 0, i32 3, i64 0
  %20 = call i32 @opus_packet_parse_impl(i8* %0, i32 %1, i32 0, i8* nonnull %3, i8** %18, i16* %19, i32* null, i32* null) #10
  %21 = icmp slt i32 %20, 1
  br i1 %21, label %26, label %22

22:                                               ; preds = %17
  %23 = load i32, i32* %8, align 4
  %24 = add nsw i32 %23, %12
  store i32 %24, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #10
  br label %30

25:                                               ; preds = %7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #10
  br label %37

26:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #10
  %27 = icmp slt i32 %20, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %26
  %29 = load i32, i32* %8, align 4
  br label %30

30:                                               ; preds = %28, %22
  %31 = phi i32 [ %29, %28 ], [ %24, %22 ]
  %32 = call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* nonnull %4, i32 0, i32 %31, i8* %0, i32 %1, i32 0, i32 0)
  %33 = icmp slt i32 %32, 1
  %34 = icmp sgt i32 %32, %1
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %37

36:                                               ; preds = %30
  call void @celt_fatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 274) #11
  unreachable

37:                                               ; preds = %25, %30, %26, %2
  %38 = phi i32 [ -1, %2 ], [ %20, %26 ], [ %32, %30 ], [ -4, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 496, i8* nonnull %5) #10
  ret i32 %38
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_packet_pad(i8*, i32, i32, i32) local_unnamed_addr #4 {
  %5 = alloca i8, align 1
  %6 = alloca [48 x i16], align 16
  %7 = alloca i32, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 -86, i8* %5, align 1
  %8 = bitcast [48 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 96, i1 false)
  %9 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #10
  store i32 -1431655766, i32* %7, align 4
  %10 = icmp slt i32 %1, 1
  br i1 %10, label %41, label %11

11:                                               ; preds = %4
  %12 = icmp eq i32 %2, %1
  br i1 %12, label %41, label %13

13:                                               ; preds = %11
  %14 = icmp slt i32 %2, %1
  br i1 %14, label %41, label %15

15:                                               ; preds = %13
  %16 = sub i32 %2, %1
  %17 = add i32 %3, -1
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %36

19:                                               ; preds = %15
  %20 = getelementptr inbounds [48 x i16], [48 x i16]* %6, i64 0, i64 0
  br label %21

21:                                               ; preds = %29, %19
  %22 = phi i32 [ 0, %19 ], [ %34, %29 ]
  %23 = phi i8* [ %0, %19 ], [ %32, %29 ]
  %24 = phi i32 [ %1, %19 ], [ %33, %29 ]
  %25 = icmp slt i32 %24, 1
  br i1 %25, label %41, label %26

26:                                               ; preds = %21
  %27 = call i32 @opus_packet_parse_impl(i8* %23, i32 %24, i32 1, i8* nonnull %5, i8** null, i16* nonnull %20, i32* null, i32* nonnull %7) #10
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %41, label %29

29:                                               ; preds = %26
  %30 = load i32, i32* %7, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = sub nsw i32 %24, %30
  %34 = add nuw nsw i32 %22, 1
  %35 = icmp eq i32 %34, %17
  br i1 %35, label %36, label %21

36:                                               ; preds = %29, %15
  %37 = phi i32 [ %1, %15 ], [ %33, %29 ]
  %38 = phi i8* [ %0, %15 ], [ %32, %29 ]
  %39 = add nsw i32 %16, %37
  %40 = call i32 @opus_packet_pad(i8* %38, i32 %37, i32 %39)
  br label %41

41:                                               ; preds = %26, %21, %13, %11, %4, %36
  %42 = phi i32 [ %40, %36 ], [ -1, %4 ], [ 0, %11 ], [ -1, %13 ], [ %27, %26 ], [ -4, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  ret i32 %42
}

declare i32 @opus_packet_parse_impl(i8*, i32, i32, i8*, i8**, i16*, i32*, i32*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_packet_unpad(i8*, i32, i32) local_unnamed_addr #4 {
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca [48 x i16], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.OpusRepacketizer, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 -86, i8* %5, align 1
  %9 = bitcast [48 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 96, i1 false)
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #10
  store i32 -1431655766, i32* %7, align 4
  %11 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 496, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 496, i1 false)
  %12 = icmp slt i32 %1, 1
  br i1 %12, label %83, label %13

13:                                               ; preds = %3
  %14 = icmp sgt i32 %2, 0
  br i1 %14, label %15, label %83

15:                                               ; preds = %13
  %16 = add nsw i32 %2, -1
  %17 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %8, i64 0, i32 1
  %18 = getelementptr inbounds [48 x i16], [48 x i16]* %6, i64 0, i64 0
  %19 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %8, i64 0, i32 4
  br label %20

20:                                               ; preds = %73, %15
  %21 = phi i32 [ 0, %15 ], [ %74, %73 ]
  %22 = phi i8* [ %0, %15 ], [ %76, %73 ]
  %23 = phi i32 [ 0, %15 ], [ %81, %73 ]
  %24 = phi i32 [ %1, %15 ], [ %80, %73 ]
  %25 = phi i8* [ %0, %15 ], [ %79, %73 ]
  %26 = icmp ne i32 %23, %16
  %27 = zext i1 %26 to i32
  %28 = icmp slt i32 %24, 1
  br i1 %28, label %83, label %29

29:                                               ; preds = %20
  store i32 0, i32* %17, align 4
  %30 = call i32 @opus_packet_parse_impl(i8* %25, i32 %24, i32 %27, i8* nonnull %5, i8** null, i16* nonnull %18, i32* null, i32* nonnull %7) #10
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %83, label %32

32:                                               ; preds = %29
  %33 = load i32, i32* %7, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %64, label %35

35:                                               ; preds = %32
  %36 = load i32, i32* %17, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = load i8, i8* %25, align 1
  store i8 %39, i8* %11, align 8
  %40 = call i32 @opus_packet_get_samples_per_frame(i8* %25, i32 8000) #10
  store i32 %40, i32* %19, align 8
  br label %46

41:                                               ; preds = %35
  %42 = load i8, i8* %11, align 8
  %43 = load i8, i8* %25, align 1
  %44 = xor i8 %43, %42
  %45 = icmp ugt i8 %44, 3
  br i1 %45, label %64, label %46

46:                                               ; preds = %41, %38
  %47 = call i32 @opus_packet_get_nb_frames(i8* %25, i32 %33) #10
  %48 = icmp slt i32 %47, 1
  br i1 %48, label %64, label %49

49:                                               ; preds = %46
  %50 = load i32, i32* %17, align 4
  %51 = add nsw i32 %50, %47
  %52 = load i32, i32* %19, align 8
  %53 = mul nsw i32 %51, %52
  %54 = icmp sgt i32 %53, 960
  br i1 %54, label %64, label %55

55:                                               ; preds = %49
  %56 = sext i32 %50 to i64
  %57 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %8, i64 0, i32 2, i64 %56
  %58 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %8, i64 0, i32 3, i64 %56
  %59 = call i32 @opus_packet_parse_impl(i8* %25, i32 %33, i32 %27, i8* nonnull %4, i8** %57, i16* %58, i32* null, i32* null) #10
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = load i32, i32* %17, align 4
  %63 = add nsw i32 %62, %47
  store i32 %63, i32* %17, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br label %69

64:                                               ; preds = %32, %41, %46, %49
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br label %83

65:                                               ; preds = %55
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  %66 = icmp slt i32 %59, 0
  br i1 %66, label %83, label %67

67:                                               ; preds = %65
  %68 = load i32, i32* %17, align 4
  br label %69

69:                                               ; preds = %67, %61
  %70 = phi i32 [ %68, %67 ], [ %63, %61 ]
  %71 = call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* nonnull %8, i32 0, i32 %70, i8* %22, i32 %24, i32 %27, i32 0)
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %83, label %73

73:                                               ; preds = %69
  %74 = add nsw i32 %71, %21
  %75 = sext i32 %71 to i64
  %76 = getelementptr inbounds i8, i8* %22, i64 %75
  %77 = load i32, i32* %7, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %25, i64 %78
  %80 = sub nsw i32 %24, %77
  %81 = add nuw nsw i32 %23, 1
  %82 = icmp eq i32 %81, %2
  br i1 %82, label %83, label %20

83:                                               ; preds = %20, %29, %65, %69, %73, %13, %64, %3
  %84 = phi i32 [ -1, %3 ], [ -4, %64 ], [ 0, %13 ], [ %74, %73 ], [ -4, %20 ], [ %30, %29 ], [ %59, %65 ], [ %71, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 496, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  ret i32 %84
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #9

declare i32 @opus_packet_get_samples_per_frame(i8*, i32) local_unnamed_addr #6

declare i32 @opus_packet_get_nb_frames(i8*, i32) local_unnamed_addr #6

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
