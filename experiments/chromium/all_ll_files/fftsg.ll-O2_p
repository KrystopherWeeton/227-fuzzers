; ModuleID = '../../third_party/fft2d/src/fftsg.c'
source_filename = "../../third_party/fft2d/src/fftsg.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cdft(i32, i32, double*, i32* nocapture, double*) local_unnamed_addr #0 {
  %6 = load i32, i32* %3, align 4
  %7 = shl i32 %6, 2
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = ashr i32 %0, 2
  tail call void @makewt(i32 %10, i32* %3, double* %4)
  br label %11

11:                                               ; preds = %9, %5
  %12 = phi i32 [ %10, %9 ], [ %6, %5 ]
  %13 = icmp sgt i32 %1, -1
  br i1 %13, label %14, label %15

14:                                               ; preds = %11
  tail call void @cftfsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  br label %16

15:                                               ; preds = %11
  tail call void @cftbsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  br label %16

16:                                               ; preds = %15, %14
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @makewt(i32, i32* nocapture, double*) local_unnamed_addr #0 {
  store i32 %0, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 1, i32* %4, align 4
  %5 = icmp sgt i32 %0, 2
  br i1 %5, label %6, label %256

6:                                                ; preds = %3
  %7 = lshr i32 %0, 1
  %8 = tail call double @atan(double 1.000000e+00) #4
  %9 = sitofp i32 %7 to double
  %10 = fdiv double 0x3FE921FB54442D18, %9
  %11 = fmul double %10, %9
  %12 = tail call double @cos(double %11) #4
  store double 1.000000e+00, double* %2, align 8
  %13 = getelementptr inbounds double, double* %2, i64 1
  store double %12, double* %13, align 8
  %14 = icmp eq i32 %7, 4
  br i1 %14, label %15, label %21

15:                                               ; preds = %6
  %16 = fmul double %10, 2.000000e+00
  %17 = tail call double @cos(double %16) #4
  %18 = getelementptr inbounds double, double* %2, i64 2
  store double %17, double* %18, align 8
  %19 = tail call double @sin(double %16) #4
  %20 = getelementptr inbounds double, double* %2, i64 3
  store double %19, double* %20, align 8
  br label %164

21:                                               ; preds = %6
  %22 = icmp sgt i32 %0, 9
  br i1 %22, label %23, label %164

23:                                               ; preds = %21
  %24 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 16, i32* %25, align 4
  %26 = icmp sgt i32 %0, 32
  br i1 %26, label %27, label %131

27:                                               ; preds = %23, %128
  %28 = phi i32 [ %30, %128 ], [ 2, %23 ]
  %29 = phi i32 [ %129, %128 ], [ %0, %23 ]
  %30 = shl i32 %28, 1
  %31 = shl i32 %28, 4
  %32 = icmp slt i32 %28, %30
  br i1 %32, label %33, label %128

33:                                               ; preds = %27
  %34 = sext i32 %28 to i64
  %35 = sext i32 %30 to i64
  %36 = sub nsw i64 %35, %34
  %37 = icmp ult i64 %36, 8
  br i1 %37, label %88, label %38

38:                                               ; preds = %33
  %39 = shl nsw i64 %34, 1
  %40 = getelementptr i32, i32* %1, i64 %39
  %41 = add nsw i64 %34, %35
  %42 = getelementptr i32, i32* %1, i64 %41
  %43 = shl nsw i64 %35, 1
  %44 = getelementptr i32, i32* %1, i64 %43
  %45 = getelementptr i32, i32* %1, i64 %34
  %46 = getelementptr i32, i32* %1, i64 %35
  %47 = icmp ult i32* %40, %46
  %48 = icmp ult i32* %45, %42
  %49 = and i1 %47, %48
  %50 = icmp ult i32* %42, %46
  %51 = icmp ult i32* %45, %44
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  br i1 %53, label %88, label %54

54:                                               ; preds = %38
  %55 = and i64 %36, -8
  %56 = add nsw i64 %55, %34
  %57 = insertelement <4 x i32> undef, i32 %31, i32 0
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> zeroinitializer
  %59 = insertelement <4 x i32> undef, i32 %31, i32 0
  %60 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %61

61:                                               ; preds = %61, %54
  %62 = phi i64 [ 0, %54 ], [ %84, %61 ]
  %63 = add i64 %62, %34
  %64 = getelementptr inbounds i32, i32* %1, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !2
  %67 = getelementptr inbounds i32, i32* %64, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !2
  %70 = shl <4 x i32> %66, <i32 2, i32 2, i32 2, i32 2>
  %71 = shl <4 x i32> %69, <i32 2, i32 2, i32 2, i32 2>
  %72 = add nsw i64 %63, %34
  %73 = getelementptr inbounds i32, i32* %1, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %74, align 4, !alias.scope !5, !noalias !7
  %75 = getelementptr inbounds i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %76, align 4, !alias.scope !5, !noalias !7
  %77 = add nsw <4 x i32> %70, %58
  %78 = add nsw <4 x i32> %71, %60
  %79 = add nsw i64 %63, %35
  %80 = getelementptr inbounds i32, i32* %1, i64 %79
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %81, align 4, !alias.scope !9, !noalias !2
  %82 = getelementptr inbounds i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %83, align 4, !alias.scope !9, !noalias !2
  %84 = add i64 %62, 8
  %85 = icmp eq i64 %84, %55
  br i1 %85, label %86, label %61, !llvm.loop !10

86:                                               ; preds = %61
  %87 = icmp eq i64 %36, %55
  br i1 %87, label %128, label %88

88:                                               ; preds = %86, %38, %33
  %89 = phi i64 [ %34, %38 ], [ %34, %33 ], [ %56, %86 ]
  %90 = xor i64 %89, -1
  %91 = and i64 %89, 1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %88
  %94 = getelementptr inbounds i32, i32* %1, i64 %89
  %95 = load i32, i32* %94, align 4
  %96 = shl i32 %95, 2
  %97 = add nsw i64 %89, %34
  %98 = getelementptr inbounds i32, i32* %1, i64 %97
  store i32 %96, i32* %98, align 4
  %99 = add nsw i32 %96, %31
  %100 = add nsw i64 %89, %35
  %101 = getelementptr inbounds i32, i32* %1, i64 %100
  store i32 %99, i32* %101, align 4
  %102 = add nsw i64 %89, 1
  br label %103

103:                                              ; preds = %93, %88
  %104 = phi i64 [ %102, %93 ], [ %89, %88 ]
  %105 = sub nsw i64 0, %35
  %106 = icmp eq i64 %90, %105
  br i1 %106, label %128, label %107

107:                                              ; preds = %103, %107
  %108 = phi i64 [ %126, %107 ], [ %104, %103 ]
  %109 = getelementptr inbounds i32, i32* %1, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = shl i32 %110, 2
  %112 = add nsw i64 %108, %34
  %113 = getelementptr inbounds i32, i32* %1, i64 %112
  store i32 %111, i32* %113, align 4
  %114 = add nsw i32 %111, %31
  %115 = add nsw i64 %108, %35
  %116 = getelementptr inbounds i32, i32* %1, i64 %115
  store i32 %114, i32* %116, align 4
  %117 = add nsw i64 %108, 1
  %118 = getelementptr inbounds i32, i32* %1, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = shl i32 %119, 2
  %121 = add nsw i64 %117, %34
  %122 = getelementptr inbounds i32, i32* %1, i64 %121
  store i32 %120, i32* %122, align 4
  %123 = add nsw i32 %120, %31
  %124 = add nsw i64 %117, %35
  %125 = getelementptr inbounds i32, i32* %1, i64 %124
  store i32 %123, i32* %125, align 4
  %126 = add nsw i64 %108, 2
  %127 = icmp eq i64 %126, %35
  br i1 %127, label %128, label %107, !llvm.loop !12

128:                                              ; preds = %103, %107, %86, %27
  %129 = ashr i32 %29, 2
  %130 = icmp sgt i32 %29, 131
  br i1 %130, label %27, label %131

131:                                              ; preds = %128, %23
  %132 = fmul double %10, 2.000000e+00
  %133 = tail call double @cos(double %132) #4
  %134 = fdiv double 5.000000e-01, %133
  %135 = getelementptr inbounds double, double* %2, i64 2
  store double %134, double* %135, align 8
  %136 = fmul double %10, 6.000000e+00
  %137 = tail call double @cos(double %136) #4
  %138 = fdiv double 5.000000e-01, %137
  %139 = getelementptr inbounds double, double* %2, i64 3
  store double %138, double* %139, align 8
  %140 = icmp ugt i32 %0, 9
  br i1 %140, label %141, label %164

141:                                              ; preds = %131
  %142 = fmul double %10, 3.000000e+00
  %143 = zext i32 %7 to i64
  br label %144

144:                                              ; preds = %141, %144
  %145 = phi i64 [ 4, %141 ], [ %162, %144 ]
  %146 = trunc i64 %145 to i32
  %147 = sitofp i32 %146 to double
  %148 = fmul double %10, %147
  %149 = tail call double @cos(double %148) #4
  %150 = getelementptr inbounds double, double* %2, i64 %145
  store double %149, double* %150, align 8
  %151 = tail call double @sin(double %148) #4
  %152 = or i64 %145, 1
  %153 = getelementptr inbounds double, double* %2, i64 %152
  store double %151, double* %153, align 8
  %154 = fmul double %142, %147
  %155 = tail call double @cos(double %154) #4
  %156 = or i64 %145, 2
  %157 = getelementptr inbounds double, double* %2, i64 %156
  store double %155, double* %157, align 8
  %158 = tail call double @sin(double %154) #4
  %159 = fsub double -0.000000e+00, %158
  %160 = or i64 %145, 3
  %161 = getelementptr inbounds double, double* %2, i64 %160
  store double %159, double* %161, align 8
  %162 = add nuw nsw i64 %145, 4
  %163 = icmp ult i64 %162, %143
  br i1 %163, label %144, label %164

164:                                              ; preds = %144, %131, %21, %15
  %165 = icmp ugt i32 %0, 5
  br i1 %165, label %166, label %256

166:                                              ; preds = %164, %254
  %167 = phi i32 [ %169, %254 ], [ 0, %164 ]
  %168 = phi i32 [ %170, %254 ], [ %7, %164 ]
  %169 = add nuw nsw i32 %167, %168
  %170 = lshr i32 %168, 1
  %171 = zext i32 %169 to i64
  %172 = getelementptr inbounds double, double* %2, i64 %171
  store double 1.000000e+00, double* %172, align 8
  %173 = add nuw nsw i32 %169, 1
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds double, double* %2, i64 %174
  store double %12, double* %175, align 8
  %176 = icmp eq i32 %170, 4
  br i1 %176, label %177, label %196

177:                                              ; preds = %166
  %178 = add nuw nsw i32 %167, 4
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds double, double* %2, i64 %179
  %181 = bitcast double* %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = add nuw nsw i32 %167, 5
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds double, double* %2, i64 %184
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = add nuw nsw i32 %169, 2
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds double, double* %2, i64 %189
  %191 = bitcast double* %190 to i64*
  store i64 %182, i64* %191, align 8
  %192 = add nuw nsw i32 %169, 3
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds double, double* %2, i64 %193
  %195 = bitcast double* %194 to i64*
  store i64 %187, i64* %195, align 8
  br label %254

196:                                              ; preds = %166
  %197 = icmp ugt i32 %168, 9
  br i1 %197, label %198, label %254

198:                                              ; preds = %196
  %199 = add nuw nsw i32 %167, 4
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds double, double* %2, i64 %200
  %202 = load double, double* %201, align 8
  %203 = add nuw nsw i32 %167, 6
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds double, double* %2, i64 %204
  %206 = load double, double* %205, align 8
  %207 = fdiv double 5.000000e-01, %202
  %208 = add nuw nsw i32 %169, 2
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds double, double* %2, i64 %209
  store double %207, double* %210, align 8
  %211 = fdiv double 5.000000e-01, %206
  %212 = add nuw nsw i32 %169, 3
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds double, double* %2, i64 %213
  store double %211, double* %214, align 8
  %215 = zext i32 %167 to i64
  %216 = zext i32 %170 to i64
  br label %217

217:                                              ; preds = %198, %217
  %218 = phi i64 [ 4, %198 ], [ %252, %217 ]
  %219 = shl nuw nsw i64 %218, 1
  %220 = add nuw nsw i64 %219, %215
  %221 = and i64 %220, 4294967295
  %222 = getelementptr inbounds double, double* %2, i64 %221
  %223 = bitcast double* %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = add nuw i64 %220, 1
  %226 = and i64 %225, 4294967295
  %227 = getelementptr inbounds double, double* %2, i64 %226
  %228 = bitcast double* %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = add nuw i64 %220, 2
  %231 = and i64 %230, 4294967295
  %232 = getelementptr inbounds double, double* %2, i64 %231
  %233 = bitcast double* %232 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = add nuw i64 %220, 3
  %236 = and i64 %235, 4294967295
  %237 = getelementptr inbounds double, double* %2, i64 %236
  %238 = bitcast double* %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = add nuw nsw i64 %218, %171
  %241 = getelementptr inbounds double, double* %2, i64 %240
  %242 = bitcast double* %241 to i64*
  store i64 %224, i64* %242, align 8
  %243 = add nuw nsw i64 %240, 1
  %244 = getelementptr inbounds double, double* %2, i64 %243
  %245 = bitcast double* %244 to i64*
  store i64 %229, i64* %245, align 8
  %246 = add nuw nsw i64 %240, 2
  %247 = getelementptr inbounds double, double* %2, i64 %246
  %248 = bitcast double* %247 to i64*
  store i64 %234, i64* %248, align 8
  %249 = add nuw nsw i64 %240, 3
  %250 = getelementptr inbounds double, double* %2, i64 %249
  %251 = bitcast double* %250 to i64*
  store i64 %239, i64* %251, align 8
  %252 = add nuw nsw i64 %218, 4
  %253 = icmp ult i64 %252, %216
  br i1 %253, label %217, label %254

254:                                              ; preds = %217, %196, %177
  %255 = icmp ugt i32 %168, 5
  br i1 %255, label %166, label %256

256:                                              ; preds = %254, %164, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftfsub(i32, double*, i32* nocapture readonly, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %6 = icmp sgt i32 %0, 8
  br i1 %6, label %7, label %92

7:                                                ; preds = %5
  %8 = icmp sgt i32 %0, 32
  br i1 %8, label %9, label %21

9:                                                ; preds = %7
  %10 = lshr i32 %0, 2
  %11 = sub nsw i32 %3, %10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double, double* %4, i64 %12
  tail call void @cftf1st(i32 %0, double* %1, double* %13)
  %14 = icmp sgt i32 %0, 512
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  tail call void @cftrec4(i32 %0, double* %1, i32 %3, double* %4)
  br label %20

16:                                               ; preds = %9
  %17 = icmp sgt i32 %0, 128
  br i1 %17, label %18, label %19

18:                                               ; preds = %16
  tail call void @cftleaf(i32 %0, i32 1, double* %1, i32 %3, double* %4)
  br label %20

19:                                               ; preds = %16
  tail call void @cftfx41(i32 %0, double* %1, i32 %3, double* %4)
  br label %20

20:                                               ; preds = %18, %19, %15
  tail call void @bitrv2(i32 %0, i32* %2, double* %1)
  br label %132

21:                                               ; preds = %7
  %22 = icmp eq i32 %0, 32
  br i1 %22, label %23, label %75

23:                                               ; preds = %21
  %24 = add nsw i32 %3, -8
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %4, i64 %25
  tail call void @cftf161(double* %1, double* %26)
  %27 = getelementptr inbounds double, double* %1, i64 2
  %28 = bitcast double* %27 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  %30 = getelementptr inbounds double, double* %1, i64 4
  %31 = bitcast double* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = getelementptr inbounds double, double* %1, i64 6
  %34 = bitcast double* %33 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = getelementptr inbounds double, double* %1, i64 8
  %37 = bitcast double* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 8
  %39 = getelementptr inbounds double, double* %1, i64 10
  %40 = bitcast double* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 8
  %42 = getelementptr inbounds double, double* %1, i64 14
  %43 = bitcast double* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = getelementptr inbounds double, double* %1, i64 16
  %46 = bitcast double* %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 8
  %48 = getelementptr inbounds double, double* %1, i64 20
  %49 = bitcast double* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 8
  %51 = getelementptr inbounds double, double* %1, i64 22
  %52 = bitcast double* %51 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 8
  %54 = getelementptr inbounds double, double* %1, i64 24
  %55 = bitcast double* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 8
  %57 = getelementptr inbounds double, double* %1, i64 26
  %58 = bitcast double* %57 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 8
  %60 = getelementptr inbounds double, double* %1, i64 28
  %61 = bitcast double* %60 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 8
  %63 = bitcast double* %27 to <2 x i64>*
  store <2 x i64> %47, <2 x i64>* %63, align 8
  %64 = bitcast double* %30 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %64, align 8
  %65 = bitcast double* %33 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %65, align 8
  %66 = bitcast double* %36 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %66, align 8
  %67 = bitcast double* %39 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %67, align 8
  %68 = bitcast double* %42 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %68, align 8
  %69 = bitcast double* %45 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %69, align 8
  %70 = bitcast double* %48 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %70, align 8
  %71 = bitcast double* %51 to <2 x i64>*
  store <2 x i64> %59, <2 x i64>* %71, align 8
  %72 = bitcast double* %54 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %72, align 8
  %73 = bitcast double* %57 to <2 x i64>*
  store <2 x i64> %53, <2 x i64>* %73, align 8
  %74 = bitcast double* %60 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %74, align 8
  br label %132

75:                                               ; preds = %21
  tail call void @cftf081(double* %1, double* %4)
  %76 = getelementptr inbounds double, double* %1, i64 2
  %77 = bitcast double* %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8
  %79 = getelementptr inbounds double, double* %1, i64 6
  %80 = bitcast double* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8
  %82 = getelementptr inbounds double, double* %1, i64 8
  %83 = bitcast double* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8
  %85 = getelementptr inbounds double, double* %1, i64 12
  %86 = bitcast double* %85 to <2 x i64>*
  %87 = load <2 x i64>, <2 x i64>* %86, align 8
  %88 = bitcast double* %76 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %88, align 8
  %89 = bitcast double* %79 to <2 x i64>*
  store <2 x i64> %87, <2 x i64>* %89, align 8
  %90 = bitcast double* %82 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %90, align 8
  %91 = bitcast double* %85 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %91, align 8
  br label %132

92:                                               ; preds = %5
  switch i32 %0, label %132 [
    i32 8, label %93
    i32 4, label %122
  ]

93:                                               ; preds = %92
  %94 = getelementptr inbounds double, double* %1, i64 4
  %95 = bitcast double* %1 to <2 x double>*
  %96 = load <2 x double>, <2 x double>* %95, align 8
  %97 = bitcast double* %94 to <2 x double>*
  %98 = load <2 x double>, <2 x double>* %97, align 8
  %99 = fadd <2 x double> %96, %98
  %100 = fsub <2 x double> %96, %98
  %101 = getelementptr inbounds double, double* %1, i64 2
  %102 = getelementptr inbounds double, double* %1, i64 6
  %103 = bitcast double* %101 to <2 x double>*
  %104 = load <2 x double>, <2 x double>* %103, align 8
  %105 = bitcast double* %102 to <2 x double>*
  %106 = load <2 x double>, <2 x double>* %105, align 8
  %107 = fadd <2 x double> %104, %106
  %108 = fsub <2 x double> %104, %106
  %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %110 = fadd <2 x double> %99, %107
  %111 = bitcast double* %1 to <2 x double>*
  store <2 x double> %110, <2 x double>* %111, align 8
  %112 = fsub <2 x double> %100, %109
  %113 = fadd <2 x double> %100, %109
  %114 = shufflevector <2 x double> %112, <2 x double> %113, <2 x i32> <i32 0, i32 3>
  %115 = bitcast double* %101 to <2 x double>*
  store <2 x double> %114, <2 x double>* %115, align 8
  %116 = fsub <2 x double> %99, %107
  %117 = bitcast double* %94 to <2 x double>*
  store <2 x double> %116, <2 x double>* %117, align 8
  %118 = fadd <2 x double> %100, %109
  %119 = fsub <2 x double> %100, %109
  %120 = shufflevector <2 x double> %118, <2 x double> %119, <2 x i32> <i32 0, i32 3>
  %121 = bitcast double* %102 to <2 x double>*
  store <2 x double> %120, <2 x double>* %121, align 8
  br label %132

122:                                              ; preds = %92
  %123 = getelementptr inbounds double, double* %1, i64 2
  %124 = bitcast double* %1 to <2 x double>*
  %125 = load <2 x double>, <2 x double>* %124, align 8
  %126 = bitcast double* %123 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 8
  %128 = fsub <2 x double> %125, %127
  %129 = fadd <2 x double> %125, %127
  %130 = bitcast double* %1 to <2 x double>*
  store <2 x double> %129, <2 x double>* %130, align 8
  %131 = bitcast double* %123 to <2 x double>*
  store <2 x double> %128, <2 x double>* %131, align 8
  br label %132

132:                                              ; preds = %92, %93, %122, %20, %75, %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftbsub(i32, double*, i32* nocapture readonly, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %6 = icmp sgt i32 %0, 8
  br i1 %6, label %7, label %116

7:                                                ; preds = %5
  %8 = icmp sgt i32 %0, 32
  br i1 %8, label %9, label %21

9:                                                ; preds = %7
  %10 = lshr i32 %0, 2
  %11 = sub nsw i32 %3, %10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double, double* %4, i64 %12
  tail call void @cftb1st(i32 %0, double* %1, double* %13)
  %14 = icmp sgt i32 %0, 512
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  tail call void @cftrec4(i32 %0, double* %1, i32 %3, double* %4)
  br label %20

16:                                               ; preds = %9
  %17 = icmp sgt i32 %0, 128
  br i1 %17, label %18, label %19

18:                                               ; preds = %16
  tail call void @cftleaf(i32 %0, i32 1, double* %1, i32 %3, double* %4)
  br label %20

19:                                               ; preds = %16
  tail call void @cftfx41(i32 %0, double* %1, i32 %3, double* %4)
  br label %20

20:                                               ; preds = %18, %19, %15
  tail call void @bitrv2conj(i32 %0, i32* %2, double* %1)
  br label %156

21:                                               ; preds = %7
  %22 = icmp eq i32 %0, 32
  br i1 %22, label %23, label %87

23:                                               ; preds = %21
  %24 = add nsw i32 %3, -8
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %4, i64 %25
  tail call void @cftf161(double* %1, double* %26)
  %27 = getelementptr inbounds double, double* %1, i64 2
  %28 = bitcast double* %27 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  %30 = getelementptr inbounds double, double* %1, i64 4
  %31 = bitcast double* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = getelementptr inbounds double, double* %1, i64 6
  %34 = bitcast double* %33 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = getelementptr inbounds double, double* %1, i64 8
  %37 = bitcast double* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 8
  %39 = getelementptr inbounds double, double* %1, i64 10
  %40 = bitcast double* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 8
  %42 = getelementptr inbounds double, double* %1, i64 12
  %43 = bitcast double* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = getelementptr inbounds double, double* %1, i64 14
  %46 = bitcast double* %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 8
  %48 = getelementptr inbounds double, double* %1, i64 16
  %49 = bitcast double* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 8
  %51 = getelementptr inbounds double, double* %1, i64 18
  %52 = bitcast double* %51 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 8
  %54 = getelementptr inbounds double, double* %1, i64 20
  %55 = bitcast double* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 8
  %57 = getelementptr inbounds double, double* %1, i64 22
  %58 = bitcast double* %57 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 8
  %60 = getelementptr inbounds double, double* %1, i64 24
  %61 = bitcast double* %60 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 8
  %63 = getelementptr inbounds double, double* %1, i64 26
  %64 = bitcast double* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 8
  %66 = getelementptr inbounds double, double* %1, i64 28
  %67 = bitcast double* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 8
  %69 = getelementptr inbounds double, double* %1, i64 30
  %70 = bitcast double* %69 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 8
  %72 = bitcast double* %27 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %72, align 8
  %73 = bitcast double* %30 to <2 x i64>*
  store <2 x i64> %47, <2 x i64>* %73, align 8
  %74 = bitcast double* %33 to <2 x i64>*
  store <2 x i64> %59, <2 x i64>* %74, align 8
  %75 = bitcast double* %36 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %75, align 8
  %76 = bitcast double* %39 to <2 x i64>*
  store <2 x i64> %65, <2 x i64>* %76, align 8
  %77 = bitcast double* %42 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %77, align 8
  %78 = bitcast double* %45 to <2 x i64>*
  store <2 x i64> %53, <2 x i64>* %78, align 8
  %79 = bitcast double* %48 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %79, align 8
  %80 = bitcast double* %51 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %80, align 8
  %81 = bitcast double* %54 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %81, align 8
  %82 = bitcast double* %57 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %82, align 8
  %83 = bitcast double* %60 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %83, align 8
  %84 = bitcast double* %63 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %84, align 8
  %85 = bitcast double* %66 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %85, align 8
  %86 = bitcast double* %69 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %86, align 8
  br label %156

87:                                               ; preds = %21
  tail call void @cftf081(double* %1, double* %4)
  %88 = getelementptr inbounds double, double* %1, i64 2
  %89 = bitcast double* %88 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 8
  %91 = getelementptr inbounds double, double* %1, i64 4
  %92 = bitcast double* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8
  %94 = getelementptr inbounds double, double* %1, i64 6
  %95 = bitcast double* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8
  %97 = getelementptr inbounds double, double* %1, i64 8
  %98 = bitcast double* %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8
  %100 = getelementptr inbounds double, double* %1, i64 10
  %101 = bitcast double* %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = getelementptr inbounds double, double* %1, i64 12
  %104 = bitcast double* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 8
  %106 = getelementptr inbounds double, double* %1, i64 14
  %107 = bitcast double* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 8
  %109 = bitcast double* %88 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %109, align 8
  %110 = bitcast double* %91 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %110, align 8
  %111 = bitcast double* %94 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %111, align 8
  %112 = bitcast double* %97 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %112, align 8
  %113 = bitcast double* %100 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %113, align 8
  %114 = bitcast double* %103 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %114, align 8
  %115 = bitcast double* %106 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %115, align 8
  br label %156

116:                                              ; preds = %5
  switch i32 %0, label %156 [
    i32 8, label %117
    i32 4, label %146
  ]

117:                                              ; preds = %116
  %118 = getelementptr inbounds double, double* %1, i64 4
  %119 = bitcast double* %1 to <2 x double>*
  %120 = load <2 x double>, <2 x double>* %119, align 8
  %121 = bitcast double* %118 to <2 x double>*
  %122 = load <2 x double>, <2 x double>* %121, align 8
  %123 = fadd <2 x double> %120, %122
  %124 = fsub <2 x double> %120, %122
  %125 = getelementptr inbounds double, double* %1, i64 2
  %126 = getelementptr inbounds double, double* %1, i64 6
  %127 = bitcast double* %125 to <2 x double>*
  %128 = load <2 x double>, <2 x double>* %127, align 8
  %129 = bitcast double* %126 to <2 x double>*
  %130 = load <2 x double>, <2 x double>* %129, align 8
  %131 = fadd <2 x double> %128, %130
  %132 = fsub <2 x double> %128, %130
  %133 = shufflevector <2 x double> %132, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %134 = fadd <2 x double> %123, %131
  %135 = bitcast double* %1 to <2 x double>*
  store <2 x double> %134, <2 x double>* %135, align 8
  %136 = fadd <2 x double> %124, %133
  %137 = fsub <2 x double> %124, %133
  %138 = shufflevector <2 x double> %136, <2 x double> %137, <2 x i32> <i32 0, i32 3>
  %139 = bitcast double* %125 to <2 x double>*
  store <2 x double> %138, <2 x double>* %139, align 8
  %140 = fsub <2 x double> %123, %131
  %141 = bitcast double* %118 to <2 x double>*
  store <2 x double> %140, <2 x double>* %141, align 8
  %142 = fsub <2 x double> %124, %133
  %143 = fadd <2 x double> %124, %133
  %144 = shufflevector <2 x double> %142, <2 x double> %143, <2 x i32> <i32 0, i32 3>
  %145 = bitcast double* %126 to <2 x double>*
  store <2 x double> %144, <2 x double>* %145, align 8
  br label %156

146:                                              ; preds = %116
  %147 = getelementptr inbounds double, double* %1, i64 2
  %148 = bitcast double* %1 to <2 x double>*
  %149 = load <2 x double>, <2 x double>* %148, align 8
  %150 = bitcast double* %147 to <2 x double>*
  %151 = load <2 x double>, <2 x double>* %150, align 8
  %152 = fsub <2 x double> %149, %151
  %153 = fadd <2 x double> %149, %151
  %154 = bitcast double* %1 to <2 x double>*
  store <2 x double> %153, <2 x double>* %154, align 8
  %155 = bitcast double* %147 to <2 x double>*
  store <2 x double> %152, <2 x double>* %155, align 8
  br label %156

156:                                              ; preds = %116, %117, %146, %20, %87, %23
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @rdft(i32, i32, double*, i32* nocapture, double*) local_unnamed_addr #0 {
  %6 = load i32, i32* %3, align 4
  %7 = shl i32 %6, 2
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = ashr i32 %0, 2
  tail call void @makewt(i32 %10, i32* %3, double* %4)
  br label %11

11:                                               ; preds = %9, %5
  %12 = phi i32 [ %10, %9 ], [ %6, %5 ]
  %13 = getelementptr inbounds i32, i32* %3, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 2
  %16 = icmp slt i32 %15, %0
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = ashr i32 %0, 2
  %19 = sext i32 %12 to i64
  %20 = getelementptr inbounds double, double* %4, i64 %19
  store i32 %18, i32* %13, align 4
  %21 = icmp sgt i32 %0, 7
  br i1 %21, label %22, label %48

22:                                               ; preds = %17
  %23 = lshr i32 %18, 1
  %24 = tail call double @atan(double 1.000000e+00) #4
  %25 = sitofp i32 %23 to double
  %26 = fdiv double 0x3FE921FB54442D18, %25
  %27 = fmul double %26, %25
  %28 = tail call double @cos(double %27) #4
  store double %28, double* %20, align 8
  %29 = fmul double %28, 5.000000e-01
  %30 = zext i32 %23 to i64
  %31 = getelementptr inbounds double, double* %20, i64 %30
  store double %29, double* %31, align 8
  %32 = icmp ugt i32 %18, 3
  br i1 %32, label %33, label %48

33:                                               ; preds = %22, %33
  %34 = phi i64 [ %46, %33 ], [ 1, %22 ]
  %35 = trunc i64 %34 to i32
  %36 = sitofp i32 %35 to double
  %37 = fmul double %26, %36
  %38 = tail call double @cos(double %37) #4
  %39 = fmul double %38, 5.000000e-01
  %40 = getelementptr inbounds double, double* %20, i64 %34
  store double %39, double* %40, align 8
  %41 = tail call double @sin(double %37) #4
  %42 = fmul double %41, 5.000000e-01
  %43 = sub nsw i32 %18, %35
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %20, i64 %44
  store double %42, double* %45, align 8
  %46 = add nuw nsw i64 %34, 1
  %47 = icmp ult i64 %46, %30
  br i1 %47, label %33, label %48

48:                                               ; preds = %33, %22, %17, %11
  %49 = phi i32 [ %14, %11 ], [ %18, %17 ], [ %18, %22 ], [ %18, %33 ]
  %50 = icmp sgt i32 %1, -1
  br i1 %50, label %51, label %131

51:                                               ; preds = %48
  %52 = icmp sgt i32 %0, 4
  br i1 %52, label %53, label %113

53:                                               ; preds = %51
  tail call void @cftfsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  %54 = sext i32 %12 to i64
  %55 = getelementptr inbounds double, double* %4, i64 %54
  %56 = lshr i32 %0, 1
  %57 = icmp eq i32 %0, 5
  br i1 %57, label %125, label %58

58:                                               ; preds = %53
  %59 = shl nsw i32 %49, 1
  %60 = sdiv i32 %59, %56
  %61 = sext i32 %60 to i64
  %62 = sext i32 %49 to i64
  %63 = zext i32 %56 to i64
  br label %64

64:                                               ; preds = %64, %58
  %65 = phi i64 [ 2, %58 ], [ %111, %64 ]
  %66 = phi i64 [ 0, %58 ], [ %69, %64 ]
  %67 = trunc i64 %65 to i32
  %68 = sub nsw i32 %0, %67
  %69 = add nsw i64 %66, %61
  %70 = sub nsw i64 %62, %69
  %71 = getelementptr inbounds double, double* %55, i64 %70
  %72 = load double, double* %71, align 8
  %73 = getelementptr inbounds double, double* %55, i64 %69
  %74 = load double, double* %73, align 8
  %75 = getelementptr inbounds double, double* %2, i64 %65
  %76 = sext i32 %68 to i64
  %77 = getelementptr inbounds double, double* %2, i64 %76
  %78 = load double, double* %77, align 8
  %79 = bitcast double* %75 to <2 x double>*
  %80 = load <2 x double>, <2 x double>* %79, align 8
  %81 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %80, <2 x i32> <i32 0, i32 2>
  %82 = insertelement <2 x double> undef, double %72, i32 0
  %83 = insertelement <2 x double> %82, double %78, i32 1
  %84 = fsub <2 x double> %81, %83
  %85 = add nsw i32 %68, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double, double* %2, i64 %86
  %88 = load double, double* %87, align 8
  %89 = extractelement <2 x double> %80, i32 1
  %90 = fadd double %89, %88
  %91 = insertelement <2 x double> undef, double %74, i32 0
  %92 = shufflevector <2 x double> %91, <2 x double> %84, <2 x i32> <i32 0, i32 2>
  %93 = insertelement <2 x double> undef, double %90, i32 0
  %94 = shufflevector <2 x double> %93, <2 x double> undef, <2 x i32> zeroinitializer
  %95 = fmul <2 x double> %92, %94
  %96 = extractelement <2 x double> %84, i32 1
  %97 = insertelement <2 x double> undef, double %96, i32 0
  %98 = insertelement <2 x double> %97, double %74, i32 1
  %99 = fmul <2 x double> %84, %98
  %100 = fsub <2 x double> %99, %95
  %101 = fadd <2 x double> %99, %95
  %102 = shufflevector <2 x double> %100, <2 x double> %101, <2 x i32> <i32 0, i32 3>
  %103 = fsub <2 x double> %80, %102
  %104 = bitcast double* %75 to <2 x double>*
  store <2 x double> %103, <2 x double>* %104, align 8
  %105 = load double, double* %77, align 8
  %106 = extractelement <2 x double> %100, i32 0
  %107 = fadd double %105, %106
  store double %107, double* %77, align 8
  %108 = load double, double* %87, align 8
  %109 = extractelement <2 x double> %101, i32 1
  %110 = fsub double %108, %109
  store double %110, double* %87, align 8
  %111 = add nuw nsw i64 %65, 2
  %112 = icmp ult i64 %111, %63
  br i1 %112, label %64, label %125

113:                                              ; preds = %51
  %114 = icmp eq i32 %0, 4
  br i1 %114, label %115, label %125

115:                                              ; preds = %113
  %116 = getelementptr inbounds double, double* %2, i64 2
  %117 = bitcast double* %2 to <2 x double>*
  %118 = load <2 x double>, <2 x double>* %117, align 8
  %119 = bitcast double* %116 to <2 x double>*
  %120 = load <2 x double>, <2 x double>* %119, align 8
  %121 = fsub <2 x double> %118, %120
  %122 = fadd <2 x double> %118, %120
  %123 = bitcast double* %2 to <2 x double>*
  store <2 x double> %122, <2 x double>* %123, align 8
  %124 = bitcast double* %116 to <2 x double>*
  store <2 x double> %121, <2 x double>* %124, align 8
  br label %125

125:                                              ; preds = %64, %53, %113, %115
  %126 = load double, double* %2, align 8
  %127 = getelementptr inbounds double, double* %2, i64 1
  %128 = load double, double* %127, align 8
  %129 = fsub double %126, %128
  %130 = fadd double %126, %128
  store double %130, double* %2, align 8
  store double %129, double* %127, align 8
  br label %210

131:                                              ; preds = %48
  %132 = load double, double* %2, align 8
  %133 = getelementptr inbounds double, double* %2, i64 1
  %134 = load double, double* %133, align 8
  %135 = fsub double %132, %134
  %136 = fmul double %135, 5.000000e-01
  store double %136, double* %133, align 8
  %137 = fsub double %132, %136
  store double %137, double* %2, align 8
  %138 = icmp sgt i32 %0, 4
  br i1 %138, label %139, label %198

139:                                              ; preds = %131
  %140 = sext i32 %12 to i64
  %141 = getelementptr inbounds double, double* %4, i64 %140
  %142 = lshr i32 %0, 1
  %143 = icmp eq i32 %0, 5
  br i1 %143, label %197, label %144

144:                                              ; preds = %139
  %145 = shl nsw i32 %49, 1
  %146 = sdiv i32 %145, %142
  %147 = sext i32 %146 to i64
  %148 = sext i32 %49 to i64
  %149 = zext i32 %142 to i64
  br label %150

150:                                              ; preds = %150, %144
  %151 = phi i64 [ 2, %144 ], [ %195, %150 ]
  %152 = phi i64 [ 0, %144 ], [ %155, %150 ]
  %153 = trunc i64 %151 to i32
  %154 = sub nsw i32 %0, %153
  %155 = add nsw i64 %152, %147
  %156 = sub nsw i64 %148, %155
  %157 = getelementptr inbounds double, double* %141, i64 %156
  %158 = load double, double* %157, align 8
  %159 = fsub double 5.000000e-01, %158
  %160 = getelementptr inbounds double, double* %141, i64 %155
  %161 = load double, double* %160, align 8
  %162 = getelementptr inbounds double, double* %2, i64 %151
  %163 = sext i32 %154 to i64
  %164 = getelementptr inbounds double, double* %2, i64 %163
  %165 = load double, double* %164, align 8
  %166 = bitcast double* %162 to <2 x double>*
  %167 = load <2 x double>, <2 x double>* %166, align 8
  %168 = add nsw i32 %154, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds double, double* %2, i64 %169
  %171 = load double, double* %170, align 8
  %172 = insertelement <2 x double> undef, double %165, i32 0
  %173 = insertelement <2 x double> %172, double %171, i32 1
  %174 = fsub <2 x double> %167, %173
  %175 = fadd <2 x double> %167, %173
  %176 = shufflevector <2 x double> %174, <2 x double> %175, <2 x i32> <i32 0, i32 3>
  %177 = insertelement <2 x double> undef, double %159, i32 0
  %178 = shufflevector <2 x double> %177, <2 x double> undef, <2 x i32> zeroinitializer
  %179 = fmul <2 x double> %178, %176
  %180 = insertelement <2 x double> undef, double %161, i32 0
  %181 = shufflevector <2 x double> %180, <2 x double> undef, <2 x i32> zeroinitializer
  %182 = shufflevector <2 x double> %175, <2 x double> %174, <2 x i32> <i32 1, i32 2>
  %183 = fmul <2 x double> %181, %182
  %184 = fadd <2 x double> %179, %183
  %185 = fsub <2 x double> %179, %183
  %186 = shufflevector <2 x double> %184, <2 x double> %185, <2 x i32> <i32 0, i32 3>
  %187 = fsub <2 x double> %167, %186
  %188 = bitcast double* %162 to <2 x double>*
  store <2 x double> %187, <2 x double>* %188, align 8
  %189 = load double, double* %164, align 8
  %190 = extractelement <2 x double> %184, i32 0
  %191 = fadd double %189, %190
  store double %191, double* %164, align 8
  %192 = load double, double* %170, align 8
  %193 = extractelement <2 x double> %185, i32 1
  %194 = fsub double %192, %193
  store double %194, double* %170, align 8
  %195 = add nuw nsw i64 %151, 2
  %196 = icmp ult i64 %195, %149
  br i1 %196, label %150, label %197

197:                                              ; preds = %150, %139
  tail call void @cftbsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  br label %210

198:                                              ; preds = %131
  %199 = icmp eq i32 %0, 4
  br i1 %199, label %200, label %210

200:                                              ; preds = %198
  %201 = getelementptr inbounds double, double* %2, i64 2
  %202 = bitcast double* %201 to <2 x double>*
  %203 = load <2 x double>, <2 x double>* %202, align 8
  %204 = insertelement <2 x double> undef, double %137, i32 0
  %205 = insertelement <2 x double> %204, double %136, i32 1
  %206 = fsub <2 x double> %205, %203
  %207 = fadd <2 x double> %205, %203
  %208 = bitcast double* %2 to <2 x double>*
  store <2 x double> %207, <2 x double>* %208, align 8
  %209 = bitcast double* %201 to <2 x double>*
  store <2 x double> %206, <2 x double>* %209, align 8
  br label %210

210:                                              ; preds = %197, %200, %198, %125
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @makect(i32, i32* nocapture, double* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %0, i32* %4, align 4
  %5 = icmp sgt i32 %0, 1
  br i1 %5, label %6, label %32

6:                                                ; preds = %3
  %7 = lshr i32 %0, 1
  %8 = tail call double @atan(double 1.000000e+00) #4
  %9 = sitofp i32 %7 to double
  %10 = fdiv double 0x3FE921FB54442D18, %9
  %11 = fmul double %10, %9
  %12 = tail call double @cos(double %11) #4
  store double %12, double* %2, align 8
  %13 = fmul double %12, 5.000000e-01
  %14 = zext i32 %7 to i64
  %15 = getelementptr inbounds double, double* %2, i64 %14
  store double %13, double* %15, align 8
  %16 = icmp ugt i32 %0, 3
  br i1 %16, label %17, label %32

17:                                               ; preds = %6, %17
  %18 = phi i64 [ %30, %17 ], [ 1, %6 ]
  %19 = trunc i64 %18 to i32
  %20 = sitofp i32 %19 to double
  %21 = fmul double %10, %20
  %22 = tail call double @cos(double %21) #4
  %23 = fmul double %22, 5.000000e-01
  %24 = getelementptr inbounds double, double* %2, i64 %18
  store double %23, double* %24, align 8
  %25 = tail call double @sin(double %21) #4
  %26 = fmul double %25, 5.000000e-01
  %27 = sub nsw i32 %0, %19
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds double, double* %2, i64 %28
  store double %26, double* %29, align 8
  %30 = add nuw nsw i64 %18, 1
  %31 = icmp ult i64 %30, %14
  br i1 %31, label %17, label %32

32:                                               ; preds = %17, %6, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @rftfsub(i32, double* nocapture, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %5 = ashr i32 %0, 1
  %6 = icmp sgt i32 %0, 5
  br i1 %6, label %7, label %62

7:                                                ; preds = %4
  %8 = shl nsw i32 %2, 1
  %9 = sdiv i32 %8, %5
  %10 = sext i32 %9 to i64
  %11 = sext i32 %2 to i64
  %12 = sext i32 %5 to i64
  br label %13

13:                                               ; preds = %7, %13
  %14 = phi i64 [ 2, %7 ], [ %60, %13 ]
  %15 = phi i64 [ 0, %7 ], [ %18, %13 ]
  %16 = trunc i64 %14 to i32
  %17 = sub nsw i32 %0, %16
  %18 = add nsw i64 %15, %10
  %19 = sub nsw i64 %11, %18
  %20 = getelementptr inbounds double, double* %3, i64 %19
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds double, double* %3, i64 %18
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds double, double* %1, i64 %14
  %25 = sext i32 %17 to i64
  %26 = getelementptr inbounds double, double* %1, i64 %25
  %27 = load double, double* %26, align 8
  %28 = bitcast double* %24 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %29, <2 x i32> <i32 0, i32 2>
  %31 = insertelement <2 x double> undef, double %21, i32 0
  %32 = insertelement <2 x double> %31, double %27, i32 1
  %33 = fsub <2 x double> %30, %32
  %34 = add nsw i32 %17, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %1, i64 %35
  %37 = load double, double* %36, align 8
  %38 = extractelement <2 x double> %29, i32 1
  %39 = fadd double %38, %37
  %40 = insertelement <2 x double> undef, double %23, i32 0
  %41 = shufflevector <2 x double> %40, <2 x double> %33, <2 x i32> <i32 0, i32 2>
  %42 = insertelement <2 x double> undef, double %39, i32 0
  %43 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %44 = fmul <2 x double> %41, %43
  %45 = extractelement <2 x double> %33, i32 1
  %46 = insertelement <2 x double> undef, double %45, i32 0
  %47 = insertelement <2 x double> %46, double %23, i32 1
  %48 = fmul <2 x double> %33, %47
  %49 = fsub <2 x double> %48, %44
  %50 = fadd <2 x double> %48, %44
  %51 = shufflevector <2 x double> %49, <2 x double> %50, <2 x i32> <i32 0, i32 3>
  %52 = fsub <2 x double> %29, %51
  %53 = bitcast double* %24 to <2 x double>*
  store <2 x double> %52, <2 x double>* %53, align 8
  %54 = load double, double* %26, align 8
  %55 = extractelement <2 x double> %49, i32 0
  %56 = fadd double %54, %55
  store double %56, double* %26, align 8
  %57 = load double, double* %36, align 8
  %58 = extractelement <2 x double> %50, i32 1
  %59 = fsub double %57, %58
  store double %59, double* %36, align 8
  %60 = add nuw nsw i64 %14, 2
  %61 = icmp slt i64 %60, %12
  br i1 %61, label %13, label %62

62:                                               ; preds = %13, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @rftbsub(i32, double* nocapture, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %5 = ashr i32 %0, 1
  %6 = icmp sgt i32 %0, 5
  br i1 %6, label %7, label %60

7:                                                ; preds = %4
  %8 = shl nsw i32 %2, 1
  %9 = sdiv i32 %8, %5
  %10 = sext i32 %9 to i64
  %11 = sext i32 %2 to i64
  %12 = sext i32 %5 to i64
  br label %13

13:                                               ; preds = %7, %13
  %14 = phi i64 [ 2, %7 ], [ %58, %13 ]
  %15 = phi i64 [ 0, %7 ], [ %18, %13 ]
  %16 = trunc i64 %14 to i32
  %17 = sub nsw i32 %0, %16
  %18 = add nsw i64 %15, %10
  %19 = sub nsw i64 %11, %18
  %20 = getelementptr inbounds double, double* %3, i64 %19
  %21 = load double, double* %20, align 8
  %22 = fsub double 5.000000e-01, %21
  %23 = getelementptr inbounds double, double* %3, i64 %18
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds double, double* %1, i64 %14
  %26 = sext i32 %17 to i64
  %27 = getelementptr inbounds double, double* %1, i64 %26
  %28 = load double, double* %27, align 8
  %29 = bitcast double* %25 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = add nsw i32 %17, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %1, i64 %32
  %34 = load double, double* %33, align 8
  %35 = insertelement <2 x double> undef, double %28, i32 0
  %36 = insertelement <2 x double> %35, double %34, i32 1
  %37 = fsub <2 x double> %30, %36
  %38 = fadd <2 x double> %30, %36
  %39 = shufflevector <2 x double> %37, <2 x double> %38, <2 x i32> <i32 0, i32 3>
  %40 = insertelement <2 x double> undef, double %22, i32 0
  %41 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %42 = fmul <2 x double> %41, %39
  %43 = insertelement <2 x double> undef, double %24, i32 0
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = shufflevector <2 x double> %38, <2 x double> %37, <2 x i32> <i32 1, i32 2>
  %46 = fmul <2 x double> %44, %45
  %47 = fadd <2 x double> %42, %46
  %48 = fsub <2 x double> %42, %46
  %49 = shufflevector <2 x double> %47, <2 x double> %48, <2 x i32> <i32 0, i32 3>
  %50 = fsub <2 x double> %30, %49
  %51 = bitcast double* %25 to <2 x double>*
  store <2 x double> %50, <2 x double>* %51, align 8
  %52 = load double, double* %27, align 8
  %53 = extractelement <2 x double> %47, i32 0
  %54 = fadd double %52, %53
  store double %54, double* %27, align 8
  %55 = load double, double* %33, align 8
  %56 = extractelement <2 x double> %48, i32 1
  %57 = fsub double %55, %56
  store double %57, double* %33, align 8
  %58 = add nuw nsw i64 %14, 2
  %59 = icmp slt i64 %58, %12
  br i1 %59, label %13, label %60

60:                                               ; preds = %13, %4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @ddct(i32, i32, double*, i32* nocapture, double*) local_unnamed_addr #0 {
  %6 = load i32, i32* %3, align 4
  %7 = shl i32 %6, 2
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = ashr i32 %0, 2
  tail call void @makewt(i32 %10, i32* %3, double* %4)
  br label %11

11:                                               ; preds = %9, %5
  %12 = phi i32 [ %10, %9 ], [ %6, %5 ]
  %13 = getelementptr inbounds i32, i32* %3, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, %0
  br i1 %15, label %16, label %46

16:                                               ; preds = %11
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds double, double* %4, i64 %17
  store i32 %0, i32* %13, align 4
  %19 = icmp sgt i32 %0, 1
  br i1 %19, label %20, label %46

20:                                               ; preds = %16
  %21 = lshr i32 %0, 1
  %22 = tail call double @atan(double 1.000000e+00) #4
  %23 = sitofp i32 %21 to double
  %24 = fdiv double 0x3FE921FB54442D18, %23
  %25 = fmul double %24, %23
  %26 = tail call double @cos(double %25) #4
  store double %26, double* %18, align 8
  %27 = fmul double %26, 5.000000e-01
  %28 = zext i32 %21 to i64
  %29 = getelementptr inbounds double, double* %18, i64 %28
  store double %27, double* %29, align 8
  %30 = icmp ugt i32 %0, 3
  br i1 %30, label %31, label %46

31:                                               ; preds = %20, %31
  %32 = phi i64 [ %44, %31 ], [ 1, %20 ]
  %33 = trunc i64 %32 to i32
  %34 = sitofp i32 %33 to double
  %35 = fmul double %24, %34
  %36 = tail call double @cos(double %35) #4
  %37 = fmul double %36, 5.000000e-01
  %38 = getelementptr inbounds double, double* %18, i64 %32
  store double %37, double* %38, align 8
  %39 = tail call double @sin(double %35) #4
  %40 = fmul double %39, 5.000000e-01
  %41 = sub nsw i32 %0, %33
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, double* %18, i64 %42
  store double %40, double* %43, align 8
  %44 = add nuw nsw i64 %32, 1
  %45 = icmp ult i64 %44, %28
  br i1 %45, label %31, label %46

46:                                               ; preds = %31, %20, %16, %11
  %47 = phi i32 [ %14, %11 ], [ %0, %16 ], [ %0, %20 ], [ %0, %31 ]
  %48 = icmp slt i32 %1, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = sext i32 %12 to i64
  br label %193

51:                                               ; preds = %46
  %52 = add nsw i32 %0, -1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds double, double* %2, i64 %53
  %55 = load double, double* %54, align 8
  %56 = add i32 %0, -2
  %57 = icmp sgt i32 %56, 1
  br i1 %57, label %58, label %111

58:                                               ; preds = %51
  %59 = sext i32 %56 to i64
  %60 = add nsw i64 %59, -2
  %61 = and i64 %60, 2
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %58
  %64 = getelementptr inbounds double, double* %2, i64 %59
  %65 = load double, double* %64, align 8
  %66 = add nsw i32 %0, -3
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds double, double* %2, i64 %67
  %69 = load double, double* %68, align 8
  %70 = fsub double %65, %69
  %71 = add nsw i32 %0, -1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds double, double* %2, i64 %72
  store double %70, double* %73, align 8
  %74 = fadd double %65, %69
  store double %74, double* %64, align 8
  %75 = add nsw i64 %59, -2
  br label %76

76:                                               ; preds = %63, %58
  %77 = phi i64 [ %59, %58 ], [ %75, %63 ]
  %78 = phi i32 [ %0, %58 ], [ %56, %63 ]
  %79 = icmp ult i64 %60, 2
  br i1 %79, label %111, label %80

80:                                               ; preds = %76, %80
  %81 = phi i64 [ %108, %80 ], [ %77, %76 ]
  %82 = phi i32 [ %110, %80 ], [ %78, %76 ]
  %83 = getelementptr inbounds double, double* %2, i64 %81
  %84 = load double, double* %83, align 8
  %85 = add nsw i32 %82, -3
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double, double* %2, i64 %86
  %88 = load double, double* %87, align 8
  %89 = fsub double %84, %88
  %90 = add nsw i32 %82, -1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds double, double* %2, i64 %91
  store double %89, double* %92, align 8
  %93 = fadd double %84, %88
  store double %93, double* %83, align 8
  %94 = add nsw i64 %81, -2
  %95 = getelementptr inbounds double, double* %2, i64 %94
  %96 = load double, double* %95, align 8
  %97 = shl i64 %81, 32
  %98 = add i64 %97, -12884901888
  %99 = ashr exact i64 %98, 32
  %100 = getelementptr inbounds double, double* %2, i64 %99
  %101 = load double, double* %100, align 8
  %102 = fsub double %96, %101
  %103 = shl i64 %81, 32
  %104 = add i64 %103, -4294967296
  %105 = ashr exact i64 %104, 32
  %106 = getelementptr inbounds double, double* %2, i64 %105
  store double %102, double* %106, align 8
  %107 = fadd double %96, %101
  store double %107, double* %95, align 8
  %108 = add nsw i64 %81, -4
  %109 = icmp sgt i64 %108, 1
  %110 = trunc i64 %94 to i32
  br i1 %109, label %80, label %111

111:                                              ; preds = %76, %80, %51
  %112 = load double, double* %2, align 8
  %113 = fsub double %112, %55
  %114 = getelementptr inbounds double, double* %2, i64 1
  store double %113, double* %114, align 8
  %115 = fadd double %55, %112
  store double %115, double* %2, align 8
  %116 = icmp sgt i32 %0, 4
  br i1 %116, label %117, label %176

117:                                              ; preds = %111
  %118 = sext i32 %12 to i64
  %119 = getelementptr inbounds double, double* %4, i64 %118
  %120 = lshr i32 %0, 1
  %121 = icmp eq i32 %0, 5
  br i1 %121, label %175, label %122

122:                                              ; preds = %117
  %123 = shl nsw i32 %47, 1
  %124 = sdiv i32 %123, %120
  %125 = sext i32 %124 to i64
  %126 = sext i32 %47 to i64
  %127 = zext i32 %120 to i64
  br label %128

128:                                              ; preds = %128, %122
  %129 = phi i64 [ 2, %122 ], [ %173, %128 ]
  %130 = phi i64 [ 0, %122 ], [ %133, %128 ]
  %131 = trunc i64 %129 to i32
  %132 = sub nsw i32 %0, %131
  %133 = add nsw i64 %130, %125
  %134 = sub nsw i64 %126, %133
  %135 = getelementptr inbounds double, double* %119, i64 %134
  %136 = load double, double* %135, align 8
  %137 = fsub double 5.000000e-01, %136
  %138 = getelementptr inbounds double, double* %119, i64 %133
  %139 = load double, double* %138, align 8
  %140 = getelementptr inbounds double, double* %2, i64 %129
  %141 = sext i32 %132 to i64
  %142 = getelementptr inbounds double, double* %2, i64 %141
  %143 = load double, double* %142, align 8
  %144 = bitcast double* %140 to <2 x double>*
  %145 = load <2 x double>, <2 x double>* %144, align 8
  %146 = add nsw i32 %132, 1
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds double, double* %2, i64 %147
  %149 = load double, double* %148, align 8
  %150 = insertelement <2 x double> undef, double %143, i32 0
  %151 = insertelement <2 x double> %150, double %149, i32 1
  %152 = fsub <2 x double> %145, %151
  %153 = fadd <2 x double> %145, %151
  %154 = shufflevector <2 x double> %152, <2 x double> %153, <2 x i32> <i32 0, i32 3>
  %155 = insertelement <2 x double> undef, double %137, i32 0
  %156 = shufflevector <2 x double> %155, <2 x double> undef, <2 x i32> zeroinitializer
  %157 = fmul <2 x double> %156, %154
  %158 = insertelement <2 x double> undef, double %139, i32 0
  %159 = shufflevector <2 x double> %158, <2 x double> undef, <2 x i32> zeroinitializer
  %160 = shufflevector <2 x double> %153, <2 x double> %152, <2 x i32> <i32 1, i32 2>
  %161 = fmul <2 x double> %159, %160
  %162 = fadd <2 x double> %157, %161
  %163 = fsub <2 x double> %157, %161
  %164 = shufflevector <2 x double> %162, <2 x double> %163, <2 x i32> <i32 0, i32 3>
  %165 = fsub <2 x double> %145, %164
  %166 = bitcast double* %140 to <2 x double>*
  store <2 x double> %165, <2 x double>* %166, align 8
  %167 = load double, double* %142, align 8
  %168 = extractelement <2 x double> %162, i32 0
  %169 = fadd double %167, %168
  store double %169, double* %142, align 8
  %170 = load double, double* %148, align 8
  %171 = extractelement <2 x double> %163, i32 1
  %172 = fsub double %170, %171
  store double %172, double* %148, align 8
  %173 = add nuw nsw i64 %129, 2
  %174 = icmp ult i64 %173, %127
  br i1 %174, label %128, label %175

175:                                              ; preds = %128, %117
  tail call void @cftbsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  br label %193

176:                                              ; preds = %111
  %177 = icmp eq i32 %0, 4
  br i1 %177, label %182, label %178

178:                                              ; preds = %176
  %179 = sext i32 %12 to i64
  %180 = getelementptr inbounds double, double* %4, i64 %179
  %181 = ashr i32 %0, 1
  br label %198

182:                                              ; preds = %176
  %183 = getelementptr inbounds double, double* %2, i64 2
  %184 = load double, double* %183, align 8
  %185 = fsub double %115, %184
  %186 = getelementptr inbounds double, double* %2, i64 3
  %187 = load double, double* %186, align 8
  %188 = fsub double %113, %187
  %189 = fadd double %115, %184
  store double %189, double* %2, align 8
  %190 = fadd double %113, %187
  store double %190, double* %114, align 8
  store double %185, double* %183, align 8
  store double %188, double* %186, align 8
  %191 = sext i32 %12 to i64
  %192 = getelementptr inbounds double, double* %4, i64 %191
  br label %202

193:                                              ; preds = %49, %175
  %194 = phi i64 [ %50, %49 ], [ %118, %175 ]
  %195 = getelementptr inbounds double, double* %4, i64 %194
  %196 = ashr i32 %0, 1
  %197 = icmp sgt i32 %0, 3
  br i1 %197, label %202, label %198

198:                                              ; preds = %178, %193
  %199 = phi i32 [ %181, %178 ], [ %196, %193 ]
  %200 = phi double* [ %180, %178 ], [ %195, %193 ]
  %201 = sext i32 %199 to i64
  br label %235

202:                                              ; preds = %182, %193
  %203 = phi i32 [ 2, %182 ], [ %196, %193 ]
  %204 = phi double* [ %192, %182 ], [ %195, %193 ]
  %205 = sdiv i32 %47, %0
  %206 = sext i32 %205 to i64
  %207 = sext i32 %47 to i64
  %208 = sext i32 %203 to i64
  br label %209

209:                                              ; preds = %209, %202
  %210 = phi i64 [ 1, %202 ], [ %233, %209 ]
  %211 = phi i64 [ 0, %202 ], [ %214, %209 ]
  %212 = trunc i64 %210 to i32
  %213 = sub nsw i32 %0, %212
  %214 = add nsw i64 %211, %206
  %215 = getelementptr inbounds double, double* %204, i64 %214
  %216 = load double, double* %215, align 8
  %217 = sub nsw i64 %207, %214
  %218 = getelementptr inbounds double, double* %204, i64 %217
  %219 = load double, double* %218, align 8
  %220 = fsub double %216, %219
  %221 = fadd double %216, %219
  %222 = getelementptr inbounds double, double* %2, i64 %210
  %223 = load double, double* %222, align 8
  %224 = fmul double %221, %223
  %225 = sext i32 %213 to i64
  %226 = getelementptr inbounds double, double* %2, i64 %225
  %227 = load double, double* %226, align 8
  %228 = fmul double %220, %227
  %229 = fsub double %224, %228
  %230 = fmul double %220, %223
  %231 = fmul double %221, %227
  %232 = fadd double %230, %231
  store double %232, double* %222, align 8
  store double %229, double* %226, align 8
  %233 = add nuw nsw i64 %210, 1
  %234 = icmp slt i64 %233, %208
  br i1 %234, label %209, label %235

235:                                              ; preds = %209, %198
  %236 = phi i32 [ %199, %198 ], [ %203, %209 ]
  %237 = phi double* [ %200, %198 ], [ %204, %209 ]
  %238 = phi i64 [ %201, %198 ], [ %208, %209 ]
  %239 = load double, double* %237, align 8
  %240 = getelementptr inbounds double, double* %2, i64 %238
  %241 = load double, double* %240, align 8
  %242 = fmul double %239, %241
  store double %242, double* %240, align 8
  %243 = icmp sgt i32 %1, -1
  br i1 %243, label %244, label %407

244:                                              ; preds = %235
  %245 = icmp sgt i32 %0, 4
  br i1 %245, label %246, label %303

246:                                              ; preds = %244
  tail call void @cftfsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  %247 = icmp eq i32 %0, 5
  br i1 %247, label %315, label %248

248:                                              ; preds = %246
  %249 = shl nsw i32 %47, 1
  %250 = sdiv i32 %249, %236
  %251 = sext i32 %250 to i64
  %252 = sext i32 %47 to i64
  %253 = sext i32 %236 to i64
  br label %254

254:                                              ; preds = %254, %248
  %255 = phi i64 [ 2, %248 ], [ %301, %254 ]
  %256 = phi i64 [ 0, %248 ], [ %259, %254 ]
  %257 = trunc i64 %255 to i32
  %258 = sub nsw i32 %0, %257
  %259 = add nsw i64 %256, %251
  %260 = sub nsw i64 %252, %259
  %261 = getelementptr inbounds double, double* %237, i64 %260
  %262 = load double, double* %261, align 8
  %263 = getelementptr inbounds double, double* %237, i64 %259
  %264 = load double, double* %263, align 8
  %265 = getelementptr inbounds double, double* %2, i64 %255
  %266 = sext i32 %258 to i64
  %267 = getelementptr inbounds double, double* %2, i64 %266
  %268 = load double, double* %267, align 8
  %269 = bitcast double* %265 to <2 x double>*
  %270 = load <2 x double>, <2 x double>* %269, align 8
  %271 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %270, <2 x i32> <i32 0, i32 2>
  %272 = insertelement <2 x double> undef, double %262, i32 0
  %273 = insertelement <2 x double> %272, double %268, i32 1
  %274 = fsub <2 x double> %271, %273
  %275 = add nsw i32 %258, 1
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds double, double* %2, i64 %276
  %278 = load double, double* %277, align 8
  %279 = extractelement <2 x double> %270, i32 1
  %280 = fadd double %279, %278
  %281 = insertelement <2 x double> undef, double %264, i32 0
  %282 = shufflevector <2 x double> %281, <2 x double> %274, <2 x i32> <i32 0, i32 2>
  %283 = insertelement <2 x double> undef, double %280, i32 0
  %284 = shufflevector <2 x double> %283, <2 x double> undef, <2 x i32> zeroinitializer
  %285 = fmul <2 x double> %282, %284
  %286 = extractelement <2 x double> %274, i32 1
  %287 = insertelement <2 x double> undef, double %286, i32 0
  %288 = insertelement <2 x double> %287, double %264, i32 1
  %289 = fmul <2 x double> %274, %288
  %290 = fsub <2 x double> %289, %285
  %291 = fadd <2 x double> %289, %285
  %292 = shufflevector <2 x double> %290, <2 x double> %291, <2 x i32> <i32 0, i32 3>
  %293 = fsub <2 x double> %270, %292
  %294 = bitcast double* %265 to <2 x double>*
  store <2 x double> %293, <2 x double>* %294, align 8
  %295 = load double, double* %267, align 8
  %296 = extractelement <2 x double> %290, i32 0
  %297 = fadd double %295, %296
  store double %297, double* %267, align 8
  %298 = load double, double* %277, align 8
  %299 = extractelement <2 x double> %291, i32 1
  %300 = fsub double %298, %299
  store double %300, double* %277, align 8
  %301 = add nuw nsw i64 %255, 2
  %302 = icmp slt i64 %301, %253
  br i1 %302, label %254, label %315

303:                                              ; preds = %244
  %304 = icmp eq i32 %0, 4
  br i1 %304, label %305, label %315

305:                                              ; preds = %303
  %306 = getelementptr inbounds double, double* %2, i64 2
  %307 = bitcast double* %2 to <2 x double>*
  %308 = load <2 x double>, <2 x double>* %307, align 8
  %309 = bitcast double* %306 to <2 x double>*
  %310 = load <2 x double>, <2 x double>* %309, align 8
  %311 = fsub <2 x double> %308, %310
  %312 = fadd <2 x double> %308, %310
  %313 = bitcast double* %2 to <2 x double>*
  store <2 x double> %312, <2 x double>* %313, align 8
  %314 = bitcast double* %306 to <2 x double>*
  store <2 x double> %311, <2 x double>* %314, align 8
  br label %315

315:                                              ; preds = %254, %246, %303, %305
  %316 = load double, double* %2, align 8
  %317 = getelementptr inbounds double, double* %2, i64 1
  %318 = load double, double* %317, align 8
  %319 = fsub double %316, %318
  %320 = fadd double %316, %318
  store double %320, double* %2, align 8
  %321 = icmp sgt i32 %0, 2
  br i1 %321, label %322, label %403

322:                                              ; preds = %315
  %323 = sext i32 %0 to i64
  %324 = add nsw i64 %323, -3
  %325 = lshr i64 %324, 1
  %326 = add nuw i64 %325, 1
  %327 = icmp ult i64 %326, 2
  br i1 %327, label %388, label %328

328:                                              ; preds = %322
  %329 = and i64 %326, -2
  %330 = shl i64 %326, 1
  %331 = or i64 %330, 2
  %332 = add i64 %329, -2
  %333 = lshr exact i64 %332, 1
  %334 = add nuw i64 %333, 1
  %335 = and i64 %334, 1
  %336 = icmp eq i64 %332, 0
  br i1 %336, label %372, label %337

337:                                              ; preds = %328
  %338 = sub nuw i64 %334, %335
  br label %339

339:                                              ; preds = %339, %337
  %340 = phi i64 [ 0, %337 ], [ %366, %339 ]
  %341 = phi i64 [ %338, %337 ], [ %367, %339 ]
  %342 = shl i64 %340, 1
  %343 = or i64 %342, 2
  %344 = getelementptr inbounds double, double* %2, i64 %343
  %345 = bitcast double* %344 to <4 x double>*
  %346 = load <4 x double>, <4 x double>* %345, align 8
  %347 = shufflevector <4 x double> %346, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %348 = shufflevector <4 x double> %346, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %349 = fsub <2 x double> %347, %348
  %350 = fadd <2 x double> %348, %347
  %351 = getelementptr inbounds double, double* %344, i64 -1
  %352 = bitcast double* %351 to <4 x double>*
  %353 = shufflevector <2 x double> %349, <2 x double> %350, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %353, <4 x double>* %352, align 8
  %354 = shl i64 %340, 1
  %355 = or i64 %354, 6
  %356 = getelementptr inbounds double, double* %2, i64 %355
  %357 = bitcast double* %356 to <4 x double>*
  %358 = load <4 x double>, <4 x double>* %357, align 8
  %359 = shufflevector <4 x double> %358, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %360 = shufflevector <4 x double> %358, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %361 = fsub <2 x double> %359, %360
  %362 = fadd <2 x double> %360, %359
  %363 = getelementptr inbounds double, double* %356, i64 -1
  %364 = bitcast double* %363 to <4 x double>*
  %365 = shufflevector <2 x double> %361, <2 x double> %362, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %365, <4 x double>* %364, align 8
  %366 = add i64 %340, 4
  %367 = add i64 %341, -2
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %339, !llvm.loop !13

369:                                              ; preds = %339
  %370 = shl i64 %366, 1
  %371 = or i64 %370, 2
  br label %372

372:                                              ; preds = %369, %328
  %373 = phi i64 [ 2, %328 ], [ %371, %369 ]
  %374 = icmp eq i64 %335, 0
  br i1 %374, label %386, label %375

375:                                              ; preds = %372
  %376 = getelementptr inbounds double, double* %2, i64 %373
  %377 = bitcast double* %376 to <4 x double>*
  %378 = load <4 x double>, <4 x double>* %377, align 8
  %379 = shufflevector <4 x double> %378, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %380 = shufflevector <4 x double> %378, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %381 = fsub <2 x double> %379, %380
  %382 = fadd <2 x double> %380, %379
  %383 = getelementptr inbounds double, double* %376, i64 -1
  %384 = bitcast double* %383 to <4 x double>*
  %385 = shufflevector <2 x double> %381, <2 x double> %382, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %385, <4 x double>* %384, align 8
  br label %386

386:                                              ; preds = %372, %375
  %387 = icmp eq i64 %326, %329
  br i1 %387, label %403, label %388

388:                                              ; preds = %386, %322
  %389 = phi i64 [ 2, %322 ], [ %331, %386 ]
  br label %390

390:                                              ; preds = %388, %390
  %391 = phi i64 [ %401, %390 ], [ %389, %388 ]
  %392 = getelementptr inbounds double, double* %2, i64 %391
  %393 = load double, double* %392, align 8
  %394 = or i64 %391, 1
  %395 = getelementptr inbounds double, double* %2, i64 %394
  %396 = load double, double* %395, align 8
  %397 = fsub double %393, %396
  %398 = add nsw i64 %391, -1
  %399 = getelementptr inbounds double, double* %2, i64 %398
  store double %397, double* %399, align 8
  %400 = fadd double %396, %393
  store double %400, double* %392, align 8
  %401 = add nuw nsw i64 %391, 2
  %402 = icmp slt i64 %401, %323
  br i1 %402, label %390, label %403, !llvm.loop !14

403:                                              ; preds = %390, %386, %315
  %404 = add nsw i32 %0, -1
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds double, double* %2, i64 %405
  store double %319, double* %406, align 8
  br label %407

407:                                              ; preds = %403, %235
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @dctsub(i32, double* nocapture, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %5 = ashr i32 %0, 1
  %6 = icmp sgt i32 %0, 3
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = sext i32 %5 to i64
  br label %40

9:                                                ; preds = %4
  %10 = sdiv i32 %2, %0
  %11 = sext i32 %10 to i64
  %12 = sext i32 %2 to i64
  %13 = sext i32 %5 to i64
  br label %14

14:                                               ; preds = %9, %14
  %15 = phi i64 [ 1, %9 ], [ %38, %14 ]
  %16 = phi i64 [ 0, %9 ], [ %19, %14 ]
  %17 = trunc i64 %15 to i32
  %18 = sub nsw i32 %0, %17
  %19 = add nsw i64 %16, %11
  %20 = getelementptr inbounds double, double* %3, i64 %19
  %21 = load double, double* %20, align 8
  %22 = sub nsw i64 %12, %19
  %23 = getelementptr inbounds double, double* %3, i64 %22
  %24 = load double, double* %23, align 8
  %25 = fsub double %21, %24
  %26 = fadd double %21, %24
  %27 = getelementptr inbounds double, double* %1, i64 %15
  %28 = load double, double* %27, align 8
  %29 = fmul double %26, %28
  %30 = sext i32 %18 to i64
  %31 = getelementptr inbounds double, double* %1, i64 %30
  %32 = load double, double* %31, align 8
  %33 = fmul double %25, %32
  %34 = fsub double %29, %33
  %35 = fmul double %25, %28
  %36 = fmul double %26, %32
  %37 = fadd double %35, %36
  store double %37, double* %27, align 8
  store double %34, double* %31, align 8
  %38 = add nuw nsw i64 %15, 1
  %39 = icmp slt i64 %38, %13
  br i1 %39, label %14, label %40

40:                                               ; preds = %14, %7
  %41 = phi i64 [ %8, %7 ], [ %13, %14 ]
  %42 = load double, double* %3, align 8
  %43 = getelementptr inbounds double, double* %1, i64 %41
  %44 = load double, double* %43, align 8
  %45 = fmul double %42, %44
  store double %45, double* %43, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @ddst(i32, i32, double*, i32* nocapture, double*) local_unnamed_addr #0 {
  %6 = load i32, i32* %3, align 4
  %7 = shl i32 %6, 2
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = ashr i32 %0, 2
  tail call void @makewt(i32 %10, i32* %3, double* %4)
  br label %11

11:                                               ; preds = %9, %5
  %12 = phi i32 [ %10, %9 ], [ %6, %5 ]
  %13 = getelementptr inbounds i32, i32* %3, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, %0
  br i1 %15, label %16, label %46

16:                                               ; preds = %11
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds double, double* %4, i64 %17
  store i32 %0, i32* %13, align 4
  %19 = icmp sgt i32 %0, 1
  br i1 %19, label %20, label %46

20:                                               ; preds = %16
  %21 = lshr i32 %0, 1
  %22 = tail call double @atan(double 1.000000e+00) #4
  %23 = sitofp i32 %21 to double
  %24 = fdiv double 0x3FE921FB54442D18, %23
  %25 = fmul double %24, %23
  %26 = tail call double @cos(double %25) #4
  store double %26, double* %18, align 8
  %27 = fmul double %26, 5.000000e-01
  %28 = zext i32 %21 to i64
  %29 = getelementptr inbounds double, double* %18, i64 %28
  store double %27, double* %29, align 8
  %30 = icmp ugt i32 %0, 3
  br i1 %30, label %31, label %46

31:                                               ; preds = %20, %31
  %32 = phi i64 [ %44, %31 ], [ 1, %20 ]
  %33 = trunc i64 %32 to i32
  %34 = sitofp i32 %33 to double
  %35 = fmul double %24, %34
  %36 = tail call double @cos(double %35) #4
  %37 = fmul double %36, 5.000000e-01
  %38 = getelementptr inbounds double, double* %18, i64 %32
  store double %37, double* %38, align 8
  %39 = tail call double @sin(double %35) #4
  %40 = fmul double %39, 5.000000e-01
  %41 = sub nsw i32 %0, %33
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, double* %18, i64 %42
  store double %40, double* %43, align 8
  %44 = add nuw nsw i64 %32, 1
  %45 = icmp ult i64 %44, %28
  br i1 %45, label %31, label %46

46:                                               ; preds = %31, %20, %16, %11
  %47 = phi i32 [ %14, %11 ], [ %0, %16 ], [ %0, %20 ], [ %0, %31 ]
  %48 = icmp slt i32 %1, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = sext i32 %12 to i64
  br label %160

51:                                               ; preds = %46
  %52 = add nsw i32 %0, -1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds double, double* %2, i64 %53
  %55 = load double, double* %54, align 8
  %56 = add i32 %0, -2
  %57 = icmp sgt i32 %56, 1
  br i1 %57, label %58, label %78

58:                                               ; preds = %51
  %59 = sext i32 %56 to i64
  br label %60

60:                                               ; preds = %58, %60
  %61 = phi i64 [ %59, %58 ], [ %75, %60 ]
  %62 = phi i32 [ %0, %58 ], [ %77, %60 ]
  %63 = getelementptr inbounds double, double* %2, i64 %61
  %64 = load double, double* %63, align 8
  %65 = fsub double -0.000000e+00, %64
  %66 = add nsw i32 %62, -3
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds double, double* %2, i64 %67
  %69 = load double, double* %68, align 8
  %70 = fsub double %65, %69
  %71 = add nsw i32 %62, -1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds double, double* %2, i64 %72
  store double %70, double* %73, align 8
  %74 = fsub double %64, %69
  store double %74, double* %63, align 8
  %75 = add nsw i64 %61, -2
  %76 = icmp sgt i64 %75, 1
  %77 = trunc i64 %61 to i32
  br i1 %76, label %60, label %78

78:                                               ; preds = %60, %51
  %79 = load double, double* %2, align 8
  %80 = fadd double %55, %79
  %81 = getelementptr inbounds double, double* %2, i64 1
  store double %80, double* %81, align 8
  %82 = fsub double %79, %55
  store double %82, double* %2, align 8
  %83 = icmp sgt i32 %0, 4
  br i1 %83, label %84, label %143

84:                                               ; preds = %78
  %85 = sext i32 %12 to i64
  %86 = getelementptr inbounds double, double* %4, i64 %85
  %87 = lshr i32 %0, 1
  %88 = icmp eq i32 %0, 5
  br i1 %88, label %142, label %89

89:                                               ; preds = %84
  %90 = shl nsw i32 %47, 1
  %91 = sdiv i32 %90, %87
  %92 = sext i32 %91 to i64
  %93 = sext i32 %47 to i64
  %94 = zext i32 %87 to i64
  br label %95

95:                                               ; preds = %95, %89
  %96 = phi i64 [ 2, %89 ], [ %140, %95 ]
  %97 = phi i64 [ 0, %89 ], [ %100, %95 ]
  %98 = trunc i64 %96 to i32
  %99 = sub nsw i32 %0, %98
  %100 = add nsw i64 %97, %92
  %101 = sub nsw i64 %93, %100
  %102 = getelementptr inbounds double, double* %86, i64 %101
  %103 = load double, double* %102, align 8
  %104 = fsub double 5.000000e-01, %103
  %105 = getelementptr inbounds double, double* %86, i64 %100
  %106 = load double, double* %105, align 8
  %107 = getelementptr inbounds double, double* %2, i64 %96
  %108 = sext i32 %99 to i64
  %109 = getelementptr inbounds double, double* %2, i64 %108
  %110 = load double, double* %109, align 8
  %111 = bitcast double* %107 to <2 x double>*
  %112 = load <2 x double>, <2 x double>* %111, align 8
  %113 = add nsw i32 %99, 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds double, double* %2, i64 %114
  %116 = load double, double* %115, align 8
  %117 = insertelement <2 x double> undef, double %110, i32 0
  %118 = insertelement <2 x double> %117, double %116, i32 1
  %119 = fsub <2 x double> %112, %118
  %120 = fadd <2 x double> %112, %118
  %121 = shufflevector <2 x double> %119, <2 x double> %120, <2 x i32> <i32 0, i32 3>
  %122 = insertelement <2 x double> undef, double %104, i32 0
  %123 = shufflevector <2 x double> %122, <2 x double> undef, <2 x i32> zeroinitializer
  %124 = fmul <2 x double> %123, %121
  %125 = insertelement <2 x double> undef, double %106, i32 0
  %126 = shufflevector <2 x double> %125, <2 x double> undef, <2 x i32> zeroinitializer
  %127 = shufflevector <2 x double> %120, <2 x double> %119, <2 x i32> <i32 1, i32 2>
  %128 = fmul <2 x double> %126, %127
  %129 = fadd <2 x double> %124, %128
  %130 = fsub <2 x double> %124, %128
  %131 = shufflevector <2 x double> %129, <2 x double> %130, <2 x i32> <i32 0, i32 3>
  %132 = fsub <2 x double> %112, %131
  %133 = bitcast double* %107 to <2 x double>*
  store <2 x double> %132, <2 x double>* %133, align 8
  %134 = load double, double* %109, align 8
  %135 = extractelement <2 x double> %129, i32 0
  %136 = fadd double %134, %135
  store double %136, double* %109, align 8
  %137 = load double, double* %115, align 8
  %138 = extractelement <2 x double> %130, i32 1
  %139 = fsub double %137, %138
  store double %139, double* %115, align 8
  %140 = add nuw nsw i64 %96, 2
  %141 = icmp ult i64 %140, %94
  br i1 %141, label %95, label %142

142:                                              ; preds = %95, %84
  tail call void @cftbsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  br label %160

143:                                              ; preds = %78
  %144 = icmp eq i32 %0, 4
  br i1 %144, label %149, label %145

145:                                              ; preds = %143
  %146 = sext i32 %12 to i64
  %147 = getelementptr inbounds double, double* %4, i64 %146
  %148 = ashr i32 %0, 1
  br label %165

149:                                              ; preds = %143
  %150 = getelementptr inbounds double, double* %2, i64 2
  %151 = load double, double* %150, align 8
  %152 = fsub double %82, %151
  %153 = getelementptr inbounds double, double* %2, i64 3
  %154 = load double, double* %153, align 8
  %155 = fsub double %80, %154
  %156 = fadd double %82, %151
  store double %156, double* %2, align 8
  %157 = fadd double %80, %154
  store double %157, double* %81, align 8
  store double %152, double* %150, align 8
  store double %155, double* %153, align 8
  %158 = sext i32 %12 to i64
  %159 = getelementptr inbounds double, double* %4, i64 %158
  br label %169

160:                                              ; preds = %49, %142
  %161 = phi i64 [ %50, %49 ], [ %85, %142 ]
  %162 = getelementptr inbounds double, double* %4, i64 %161
  %163 = ashr i32 %0, 1
  %164 = icmp sgt i32 %0, 3
  br i1 %164, label %169, label %165

165:                                              ; preds = %145, %160
  %166 = phi i32 [ %148, %145 ], [ %163, %160 ]
  %167 = phi double* [ %147, %145 ], [ %162, %160 ]
  %168 = sext i32 %166 to i64
  br label %202

169:                                              ; preds = %149, %160
  %170 = phi i32 [ 2, %149 ], [ %163, %160 ]
  %171 = phi double* [ %159, %149 ], [ %162, %160 ]
  %172 = sdiv i32 %47, %0
  %173 = sext i32 %172 to i64
  %174 = sext i32 %47 to i64
  %175 = sext i32 %170 to i64
  br label %176

176:                                              ; preds = %176, %169
  %177 = phi i64 [ 1, %169 ], [ %200, %176 ]
  %178 = phi i64 [ 0, %169 ], [ %181, %176 ]
  %179 = trunc i64 %177 to i32
  %180 = sub nsw i32 %0, %179
  %181 = add nsw i64 %178, %173
  %182 = getelementptr inbounds double, double* %171, i64 %181
  %183 = load double, double* %182, align 8
  %184 = sub nsw i64 %174, %181
  %185 = getelementptr inbounds double, double* %171, i64 %184
  %186 = load double, double* %185, align 8
  %187 = fsub double %183, %186
  %188 = fadd double %183, %186
  %189 = sext i32 %180 to i64
  %190 = getelementptr inbounds double, double* %2, i64 %189
  %191 = load double, double* %190, align 8
  %192 = fmul double %188, %191
  %193 = getelementptr inbounds double, double* %2, i64 %177
  %194 = load double, double* %193, align 8
  %195 = fmul double %187, %194
  %196 = fsub double %192, %195
  %197 = fmul double %187, %191
  %198 = fmul double %188, %194
  %199 = fadd double %197, %198
  store double %199, double* %190, align 8
  store double %196, double* %193, align 8
  %200 = add nuw nsw i64 %177, 1
  %201 = icmp slt i64 %200, %175
  br i1 %201, label %176, label %202

202:                                              ; preds = %176, %165
  %203 = phi i32 [ %166, %165 ], [ %170, %176 ]
  %204 = phi double* [ %167, %165 ], [ %171, %176 ]
  %205 = phi i64 [ %168, %165 ], [ %175, %176 ]
  %206 = load double, double* %204, align 8
  %207 = getelementptr inbounds double, double* %2, i64 %205
  %208 = load double, double* %207, align 8
  %209 = fmul double %206, %208
  store double %209, double* %207, align 8
  %210 = icmp sgt i32 %1, -1
  br i1 %210, label %211, label %383

211:                                              ; preds = %202
  %212 = icmp sgt i32 %0, 4
  br i1 %212, label %213, label %270

213:                                              ; preds = %211
  tail call void @cftfsub(i32 %0, double* %2, i32* %3, i32 %12, double* %4)
  %214 = icmp eq i32 %0, 5
  br i1 %214, label %282, label %215

215:                                              ; preds = %213
  %216 = shl nsw i32 %47, 1
  %217 = sdiv i32 %216, %203
  %218 = sext i32 %217 to i64
  %219 = sext i32 %47 to i64
  %220 = sext i32 %203 to i64
  br label %221

221:                                              ; preds = %221, %215
  %222 = phi i64 [ 2, %215 ], [ %268, %221 ]
  %223 = phi i64 [ 0, %215 ], [ %226, %221 ]
  %224 = trunc i64 %222 to i32
  %225 = sub nsw i32 %0, %224
  %226 = add nsw i64 %223, %218
  %227 = sub nsw i64 %219, %226
  %228 = getelementptr inbounds double, double* %204, i64 %227
  %229 = load double, double* %228, align 8
  %230 = getelementptr inbounds double, double* %204, i64 %226
  %231 = load double, double* %230, align 8
  %232 = getelementptr inbounds double, double* %2, i64 %222
  %233 = sext i32 %225 to i64
  %234 = getelementptr inbounds double, double* %2, i64 %233
  %235 = load double, double* %234, align 8
  %236 = bitcast double* %232 to <2 x double>*
  %237 = load <2 x double>, <2 x double>* %236, align 8
  %238 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %237, <2 x i32> <i32 0, i32 2>
  %239 = insertelement <2 x double> undef, double %229, i32 0
  %240 = insertelement <2 x double> %239, double %235, i32 1
  %241 = fsub <2 x double> %238, %240
  %242 = add nsw i32 %225, 1
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds double, double* %2, i64 %243
  %245 = load double, double* %244, align 8
  %246 = extractelement <2 x double> %237, i32 1
  %247 = fadd double %246, %245
  %248 = insertelement <2 x double> undef, double %231, i32 0
  %249 = shufflevector <2 x double> %248, <2 x double> %241, <2 x i32> <i32 0, i32 2>
  %250 = insertelement <2 x double> undef, double %247, i32 0
  %251 = shufflevector <2 x double> %250, <2 x double> undef, <2 x i32> zeroinitializer
  %252 = fmul <2 x double> %249, %251
  %253 = extractelement <2 x double> %241, i32 1
  %254 = insertelement <2 x double> undef, double %253, i32 0
  %255 = insertelement <2 x double> %254, double %231, i32 1
  %256 = fmul <2 x double> %241, %255
  %257 = fsub <2 x double> %256, %252
  %258 = fadd <2 x double> %256, %252
  %259 = shufflevector <2 x double> %257, <2 x double> %258, <2 x i32> <i32 0, i32 3>
  %260 = fsub <2 x double> %237, %259
  %261 = bitcast double* %232 to <2 x double>*
  store <2 x double> %260, <2 x double>* %261, align 8
  %262 = load double, double* %234, align 8
  %263 = extractelement <2 x double> %257, i32 0
  %264 = fadd double %262, %263
  store double %264, double* %234, align 8
  %265 = load double, double* %244, align 8
  %266 = extractelement <2 x double> %258, i32 1
  %267 = fsub double %265, %266
  store double %267, double* %244, align 8
  %268 = add nuw nsw i64 %222, 2
  %269 = icmp slt i64 %268, %220
  br i1 %269, label %221, label %282

270:                                              ; preds = %211
  %271 = icmp eq i32 %0, 4
  br i1 %271, label %272, label %282

272:                                              ; preds = %270
  %273 = getelementptr inbounds double, double* %2, i64 2
  %274 = bitcast double* %2 to <2 x double>*
  %275 = load <2 x double>, <2 x double>* %274, align 8
  %276 = bitcast double* %273 to <2 x double>*
  %277 = load <2 x double>, <2 x double>* %276, align 8
  %278 = fsub <2 x double> %275, %277
  %279 = fadd <2 x double> %275, %277
  %280 = bitcast double* %2 to <2 x double>*
  store <2 x double> %279, <2 x double>* %280, align 8
  %281 = bitcast double* %273 to <2 x double>*
  store <2 x double> %278, <2 x double>* %281, align 8
  br label %282

282:                                              ; preds = %221, %213, %270, %272
  %283 = load double, double* %2, align 8
  %284 = getelementptr inbounds double, double* %2, i64 1
  %285 = load double, double* %284, align 8
  %286 = fsub double %283, %285
  %287 = fadd double %283, %285
  store double %287, double* %2, align 8
  %288 = icmp sgt i32 %0, 2
  br i1 %288, label %289, label %378

289:                                              ; preds = %282
  %290 = sext i32 %0 to i64
  %291 = add nsw i64 %290, -3
  %292 = lshr i64 %291, 1
  %293 = add nuw i64 %292, 1
  %294 = icmp ult i64 %293, 2
  br i1 %294, label %358, label %295

295:                                              ; preds = %289
  %296 = and i64 %293, -2
  %297 = shl i64 %293, 1
  %298 = or i64 %297, 2
  %299 = add i64 %296, -2
  %300 = lshr exact i64 %299, 1
  %301 = add nuw i64 %300, 1
  %302 = and i64 %301, 1
  %303 = icmp eq i64 %299, 0
  br i1 %303, label %341, label %304

304:                                              ; preds = %295
  %305 = sub nuw i64 %301, %302
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %335, %306 ]
  %308 = phi i64 [ %305, %304 ], [ %336, %306 ]
  %309 = shl i64 %307, 1
  %310 = or i64 %309, 2
  %311 = getelementptr inbounds double, double* %2, i64 %310
  %312 = bitcast double* %311 to <4 x double>*
  %313 = load <4 x double>, <4 x double>* %312, align 8
  %314 = shufflevector <4 x double> %313, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %315 = shufflevector <4 x double> %313, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %316 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %314
  %317 = fsub <2 x double> %316, %315
  %318 = fsub <2 x double> %314, %315
  %319 = getelementptr inbounds double, double* %311, i64 -1
  %320 = bitcast double* %319 to <4 x double>*
  %321 = shufflevector <2 x double> %317, <2 x double> %318, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %321, <4 x double>* %320, align 8
  %322 = shl i64 %307, 1
  %323 = or i64 %322, 6
  %324 = getelementptr inbounds double, double* %2, i64 %323
  %325 = bitcast double* %324 to <4 x double>*
  %326 = load <4 x double>, <4 x double>* %325, align 8
  %327 = shufflevector <4 x double> %326, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %328 = shufflevector <4 x double> %326, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %329 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %327
  %330 = fsub <2 x double> %329, %328
  %331 = fsub <2 x double> %327, %328
  %332 = getelementptr inbounds double, double* %324, i64 -1
  %333 = bitcast double* %332 to <4 x double>*
  %334 = shufflevector <2 x double> %330, <2 x double> %331, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %334, <4 x double>* %333, align 8
  %335 = add i64 %307, 4
  %336 = add i64 %308, -2
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %306, !llvm.loop !16

338:                                              ; preds = %306
  %339 = shl i64 %335, 1
  %340 = or i64 %339, 2
  br label %341

341:                                              ; preds = %338, %295
  %342 = phi i64 [ 2, %295 ], [ %340, %338 ]
  %343 = icmp eq i64 %302, 0
  br i1 %343, label %356, label %344

344:                                              ; preds = %341
  %345 = getelementptr inbounds double, double* %2, i64 %342
  %346 = bitcast double* %345 to <4 x double>*
  %347 = load <4 x double>, <4 x double>* %346, align 8
  %348 = shufflevector <4 x double> %347, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %349 = shufflevector <4 x double> %347, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %350 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %348
  %351 = fsub <2 x double> %350, %349
  %352 = fsub <2 x double> %348, %349
  %353 = getelementptr inbounds double, double* %345, i64 -1
  %354 = bitcast double* %353 to <4 x double>*
  %355 = shufflevector <2 x double> %351, <2 x double> %352, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %355, <4 x double>* %354, align 8
  br label %356

356:                                              ; preds = %341, %344
  %357 = icmp eq i64 %293, %296
  br i1 %357, label %378, label %358

358:                                              ; preds = %356, %289
  %359 = phi i64 [ 2, %289 ], [ %298, %356 ]
  br label %360

360:                                              ; preds = %358, %360
  %361 = phi i64 [ %376, %360 ], [ %359, %358 ]
  %362 = getelementptr inbounds double, double* %2, i64 %361
  %363 = load double, double* %362, align 8
  %364 = fsub double -0.000000e+00, %363
  %365 = or i64 %361, 1
  %366 = getelementptr inbounds double, double* %2, i64 %365
  %367 = load double, double* %366, align 8
  %368 = add nsw i64 %361, -1
  %369 = getelementptr inbounds double, double* %2, i64 %368
  %370 = insertelement <2 x double> undef, double %364, i32 0
  %371 = insertelement <2 x double> %370, double %363, i32 1
  %372 = insertelement <2 x double> undef, double %367, i32 0
  %373 = shufflevector <2 x double> %372, <2 x double> undef, <2 x i32> zeroinitializer
  %374 = fsub <2 x double> %371, %373
  %375 = bitcast double* %369 to <2 x double>*
  store <2 x double> %374, <2 x double>* %375, align 8
  %376 = add nuw nsw i64 %361, 2
  %377 = icmp slt i64 %376, %290
  br i1 %377, label %360, label %378, !llvm.loop !17

378:                                              ; preds = %360, %356, %282
  %379 = fsub double -0.000000e+00, %286
  %380 = add nsw i32 %0, -1
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds double, double* %2, i64 %381
  store double %379, double* %382, align 8
  br label %383

383:                                              ; preds = %378, %202
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @dstsub(i32, double* nocapture, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %5 = ashr i32 %0, 1
  %6 = icmp sgt i32 %0, 3
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = sext i32 %5 to i64
  br label %40

9:                                                ; preds = %4
  %10 = sdiv i32 %2, %0
  %11 = sext i32 %10 to i64
  %12 = sext i32 %2 to i64
  %13 = sext i32 %5 to i64
  br label %14

14:                                               ; preds = %9, %14
  %15 = phi i64 [ 1, %9 ], [ %38, %14 ]
  %16 = phi i64 [ 0, %9 ], [ %19, %14 ]
  %17 = trunc i64 %15 to i32
  %18 = sub nsw i32 %0, %17
  %19 = add nsw i64 %16, %11
  %20 = getelementptr inbounds double, double* %3, i64 %19
  %21 = load double, double* %20, align 8
  %22 = sub nsw i64 %12, %19
  %23 = getelementptr inbounds double, double* %3, i64 %22
  %24 = load double, double* %23, align 8
  %25 = fsub double %21, %24
  %26 = fadd double %21, %24
  %27 = sext i32 %18 to i64
  %28 = getelementptr inbounds double, double* %1, i64 %27
  %29 = load double, double* %28, align 8
  %30 = fmul double %26, %29
  %31 = getelementptr inbounds double, double* %1, i64 %15
  %32 = load double, double* %31, align 8
  %33 = fmul double %25, %32
  %34 = fsub double %30, %33
  %35 = fmul double %25, %29
  %36 = fmul double %26, %32
  %37 = fadd double %35, %36
  store double %37, double* %28, align 8
  store double %34, double* %31, align 8
  %38 = add nuw nsw i64 %15, 1
  %39 = icmp slt i64 %38, %13
  br i1 %39, label %14, label %40

40:                                               ; preds = %14, %7
  %41 = phi i64 [ %8, %7 ], [ %13, %14 ]
  %42 = load double, double* %3, align 8
  %43 = getelementptr inbounds double, double* %1, i64 %41
  %44 = load double, double* %43, align 8
  %45 = fmul double %42, %44
  store double %45, double* %43, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @dfct(i32, double*, double*, i32* nocapture, double*) local_unnamed_addr #0 {
  %6 = load i32, i32* %3, align 4
  %7 = shl i32 %6, 3
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = ashr i32 %0, 3
  tail call void @makewt(i32 %10, i32* %3, double* %4)
  br label %11

11:                                               ; preds = %9, %5
  %12 = phi i32 [ %10, %9 ], [ %6, %5 ]
  %13 = getelementptr inbounds i32, i32* %3, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 1
  %16 = icmp slt i32 %15, %0
  %17 = ashr i32 %0, 1
  br i1 %16, label %18, label %48

18:                                               ; preds = %11
  %19 = sext i32 %12 to i64
  %20 = getelementptr inbounds double, double* %4, i64 %19
  store i32 %17, i32* %13, align 4
  %21 = icmp sgt i32 %0, 3
  br i1 %21, label %22, label %48

22:                                               ; preds = %18
  %23 = lshr i32 %17, 1
  %24 = tail call double @atan(double 1.000000e+00) #4
  %25 = sitofp i32 %23 to double
  %26 = fdiv double 0x3FE921FB54442D18, %25
  %27 = fmul double %26, %25
  %28 = tail call double @cos(double %27) #4
  store double %28, double* %20, align 8
  %29 = fmul double %28, 5.000000e-01
  %30 = zext i32 %23 to i64
  %31 = getelementptr inbounds double, double* %20, i64 %30
  store double %29, double* %31, align 8
  %32 = icmp ugt i32 %17, 3
  br i1 %32, label %33, label %48

33:                                               ; preds = %22, %33
  %34 = phi i64 [ %46, %33 ], [ 1, %22 ]
  %35 = trunc i64 %34 to i32
  %36 = sitofp i32 %35 to double
  %37 = fmul double %26, %36
  %38 = tail call double @cos(double %37) #4
  %39 = fmul double %38, 5.000000e-01
  %40 = getelementptr inbounds double, double* %20, i64 %34
  store double %39, double* %40, align 8
  %41 = tail call double @sin(double %37) #4
  %42 = fmul double %41, 5.000000e-01
  %43 = sub nsw i32 %17, %35
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %20, i64 %44
  store double %42, double* %45, align 8
  %46 = add nuw nsw i64 %34, 1
  %47 = icmp ult i64 %46, %30
  br i1 %47, label %33, label %48

48:                                               ; preds = %33, %11, %22, %18
  %49 = phi i32 [ %17, %22 ], [ %17, %18 ], [ %14, %11 ], [ %17, %33 ]
  %50 = sext i32 %17 to i64
  %51 = getelementptr inbounds double, double* %1, i64 %50
  %52 = load double, double* %51, align 8
  %53 = load double, double* %1, align 8
  %54 = sext i32 %0 to i64
  %55 = getelementptr inbounds double, double* %1, i64 %54
  %56 = load double, double* %55, align 8
  %57 = fadd double %53, %56
  %58 = fsub double %53, %56
  store double %58, double* %1, align 8
  %59 = fsub double %57, %52
  store double %59, double* %2, align 8
  %60 = fadd double %52, %57
  %61 = getelementptr inbounds double, double* %2, i64 %50
  store double %60, double* %61, align 8
  %62 = icmp sgt i32 %0, 2
  br i1 %62, label %63, label %552

63:                                               ; preds = %48
  %64 = lshr i32 %0, 2
  %65 = icmp ugt i32 %0, 7
  %66 = zext i32 %64 to i64
  br i1 %65, label %67, label %92

67:                                               ; preds = %63, %67
  %68 = phi i64 [ %90, %67 ], [ 1, %63 ]
  %69 = sub nsw i64 %50, %68
  %70 = getelementptr inbounds double, double* %1, i64 %68
  %71 = load double, double* %70, align 8
  %72 = trunc i64 %68 to i32
  %73 = sub nsw i32 %0, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds double, double* %1, i64 %74
  %76 = load double, double* %75, align 8
  %77 = fsub double %71, %76
  %78 = fadd double %71, %76
  %79 = getelementptr inbounds double, double* %1, i64 %69
  %80 = load double, double* %79, align 8
  %81 = sub nsw i64 %54, %69
  %82 = getelementptr inbounds double, double* %1, i64 %81
  %83 = load double, double* %82, align 8
  %84 = fsub double %80, %83
  %85 = fadd double %80, %83
  store double %77, double* %70, align 8
  store double %84, double* %79, align 8
  %86 = fsub double %78, %85
  %87 = getelementptr inbounds double, double* %2, i64 %68
  store double %86, double* %87, align 8
  %88 = fadd double %78, %85
  %89 = getelementptr inbounds double, double* %2, i64 %69
  store double %88, double* %89, align 8
  %90 = add nuw nsw i64 %68, 1
  %91 = icmp ult i64 %90, %66
  br i1 %91, label %67, label %92

92:                                               ; preds = %67, %63
  %93 = getelementptr inbounds double, double* %1, i64 %66
  %94 = load double, double* %93, align 8
  %95 = sub nsw i32 %0, %64
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds double, double* %1, i64 %96
  %98 = load double, double* %97, align 8
  %99 = fadd double %94, %98
  %100 = getelementptr inbounds double, double* %2, i64 %66
  store double %99, double* %100, align 8
  %101 = load double, double* %97, align 8
  %102 = load double, double* %93, align 8
  %103 = fsub double %102, %101
  store double %103, double* %93, align 8
  %104 = sext i32 %12 to i64
  %105 = getelementptr inbounds double, double* %4, i64 %104
  %106 = ashr i32 %0, 2
  %107 = icmp sgt i32 %0, 7
  br i1 %107, label %114, label %108

108:                                              ; preds = %92
  %109 = sext i32 %106 to i64
  %110 = load double, double* %105, align 8
  %111 = getelementptr inbounds double, double* %1, i64 %109
  %112 = load double, double* %111, align 8
  %113 = fmul double %110, %112
  store double %113, double* %111, align 8
  br label %208

114:                                              ; preds = %92
  %115 = sdiv i32 %49, %17
  %116 = sext i32 %115 to i64
  %117 = sext i32 %49 to i64
  %118 = sext i32 %106 to i64
  br label %119

119:                                              ; preds = %119, %114
  %120 = phi i64 [ 1, %114 ], [ %143, %119 ]
  %121 = phi i64 [ 0, %114 ], [ %124, %119 ]
  %122 = trunc i64 %120 to i32
  %123 = sub nsw i32 %17, %122
  %124 = add nsw i64 %121, %116
  %125 = getelementptr inbounds double, double* %105, i64 %124
  %126 = load double, double* %125, align 8
  %127 = sub nsw i64 %117, %124
  %128 = getelementptr inbounds double, double* %105, i64 %127
  %129 = load double, double* %128, align 8
  %130 = fsub double %126, %129
  %131 = fadd double %126, %129
  %132 = getelementptr inbounds double, double* %1, i64 %120
  %133 = load double, double* %132, align 8
  %134 = fmul double %131, %133
  %135 = sext i32 %123 to i64
  %136 = getelementptr inbounds double, double* %1, i64 %135
  %137 = load double, double* %136, align 8
  %138 = fmul double %130, %137
  %139 = fsub double %134, %138
  %140 = fmul double %130, %133
  %141 = fmul double %131, %137
  %142 = fadd double %140, %141
  store double %142, double* %132, align 8
  store double %139, double* %136, align 8
  %143 = add nuw nsw i64 %120, 1
  %144 = icmp slt i64 %143, %118
  br i1 %144, label %119, label %145

145:                                              ; preds = %119
  %146 = load double, double* %105, align 8
  %147 = getelementptr inbounds double, double* %1, i64 %118
  %148 = load double, double* %147, align 8
  %149 = fmul double %146, %148
  store double %149, double* %147, align 8
  %150 = icmp sgt i32 %0, 9
  br i1 %150, label %151, label %208

151:                                              ; preds = %145
  tail call void @cftfsub(i32 %17, double* %1, i32* %3, i32 %12, double* %4)
  %152 = icmp sgt i32 %0, 11
  br i1 %152, label %153, label %220

153:                                              ; preds = %151
  %154 = shl nsw i32 %49, 1
  %155 = sdiv i32 %154, %106
  %156 = sext i32 %155 to i64
  %157 = sext i32 %49 to i64
  %158 = sext i32 %106 to i64
  br label %159

159:                                              ; preds = %159, %153
  %160 = phi i64 [ 2, %153 ], [ %206, %159 ]
  %161 = phi i64 [ 0, %153 ], [ %164, %159 ]
  %162 = trunc i64 %160 to i32
  %163 = sub nsw i32 %17, %162
  %164 = add nsw i64 %161, %156
  %165 = sub nsw i64 %157, %164
  %166 = getelementptr inbounds double, double* %105, i64 %165
  %167 = load double, double* %166, align 8
  %168 = getelementptr inbounds double, double* %105, i64 %164
  %169 = load double, double* %168, align 8
  %170 = getelementptr inbounds double, double* %1, i64 %160
  %171 = sext i32 %163 to i64
  %172 = getelementptr inbounds double, double* %1, i64 %171
  %173 = load double, double* %172, align 8
  %174 = bitcast double* %170 to <2 x double>*
  %175 = load <2 x double>, <2 x double>* %174, align 8
  %176 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %175, <2 x i32> <i32 0, i32 2>
  %177 = insertelement <2 x double> undef, double %167, i32 0
  %178 = insertelement <2 x double> %177, double %173, i32 1
  %179 = fsub <2 x double> %176, %178
  %180 = add nsw i32 %163, 1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds double, double* %1, i64 %181
  %183 = load double, double* %182, align 8
  %184 = extractelement <2 x double> %175, i32 1
  %185 = fadd double %184, %183
  %186 = insertelement <2 x double> undef, double %169, i32 0
  %187 = shufflevector <2 x double> %186, <2 x double> %179, <2 x i32> <i32 0, i32 2>
  %188 = insertelement <2 x double> undef, double %185, i32 0
  %189 = shufflevector <2 x double> %188, <2 x double> undef, <2 x i32> zeroinitializer
  %190 = fmul <2 x double> %187, %189
  %191 = extractelement <2 x double> %179, i32 1
  %192 = insertelement <2 x double> undef, double %191, i32 0
  %193 = insertelement <2 x double> %192, double %169, i32 1
  %194 = fmul <2 x double> %179, %193
  %195 = fsub <2 x double> %194, %190
  %196 = fadd <2 x double> %194, %190
  %197 = shufflevector <2 x double> %195, <2 x double> %196, <2 x i32> <i32 0, i32 3>
  %198 = fsub <2 x double> %175, %197
  %199 = bitcast double* %170 to <2 x double>*
  store <2 x double> %198, <2 x double>* %199, align 8
  %200 = load double, double* %172, align 8
  %201 = extractelement <2 x double> %195, i32 0
  %202 = fadd double %200, %201
  store double %202, double* %172, align 8
  %203 = load double, double* %182, align 8
  %204 = extractelement <2 x double> %196, i32 1
  %205 = fsub double %203, %204
  store double %205, double* %182, align 8
  %206 = add nuw nsw i64 %160, 2
  %207 = icmp slt i64 %206, %158
  br i1 %207, label %159, label %220

208:                                              ; preds = %108, %145
  %209 = icmp eq i32 %17, 4
  br i1 %209, label %210, label %220

210:                                              ; preds = %208
  %211 = getelementptr inbounds double, double* %1, i64 2
  %212 = bitcast double* %1 to <2 x double>*
  %213 = load <2 x double>, <2 x double>* %212, align 8
  %214 = bitcast double* %211 to <2 x double>*
  %215 = load <2 x double>, <2 x double>* %214, align 8
  %216 = fsub <2 x double> %213, %215
  %217 = fadd <2 x double> %213, %215
  %218 = bitcast double* %1 to <2 x double>*
  store <2 x double> %217, <2 x double>* %218, align 8
  %219 = bitcast double* %211 to <2 x double>*
  store <2 x double> %216, <2 x double>* %219, align 8
  br label %220

220:                                              ; preds = %159, %151, %208, %210
  %221 = load double, double* %1, align 8
  %222 = getelementptr inbounds double, double* %1, i64 1
  %223 = load double, double* %222, align 8
  %224 = fsub double %221, %223
  %225 = add nsw i32 %0, -1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds double, double* %1, i64 %226
  store double %224, double* %227, align 8
  %228 = load double, double* %1, align 8
  %229 = load double, double* %222, align 8
  %230 = fadd double %228, %229
  store double %230, double* %222, align 8
  %231 = add nsw i32 %17, -2
  %232 = icmp sgt i32 %231, 1
  br i1 %232, label %233, label %235

233:                                              ; preds = %220
  %234 = add nsw i64 %50, -2
  br label %252

235:                                              ; preds = %252, %220
  br i1 %65, label %236, label %538

236:                                              ; preds = %235
  %237 = sext i32 %49 to i64
  %238 = getelementptr inbounds double, double* %2, i64 2
  %239 = getelementptr inbounds double, double* %2, i64 1
  %240 = shl nsw i32 %49, 1
  %241 = getelementptr double, double* %2, i64 1
  %242 = getelementptr double, double* %2, i64 1
  %243 = getelementptr double, double* %2, i64 1
  %244 = getelementptr double, double* %2, i64 1
  %245 = bitcast double* %2 to <2 x double>*
  %246 = bitcast double* %238 to <2 x double>*
  %247 = bitcast double* %2 to <2 x double>*
  %248 = bitcast double* %238 to <2 x double>*
  %249 = icmp ugt double* %242, %2
  %250 = getelementptr inbounds double, double* %2, i64 -1
  %251 = getelementptr inbounds double, double* %2, i64 -1
  br label %276

252:                                              ; preds = %233, %252
  %253 = phi i64 [ %50, %233 ], [ %275, %252 ]
  %254 = phi i64 [ %234, %233 ], [ %272, %252 ]
  %255 = phi i32 [ %231, %233 ], [ %273, %252 ]
  %256 = getelementptr inbounds double, double* %1, i64 %254
  %257 = load double, double* %256, align 8
  %258 = add nsw i64 %253, -1
  %259 = getelementptr inbounds double, double* %1, i64 %258
  %260 = load double, double* %259, align 8
  %261 = fadd double %257, %260
  %262 = shl nsw i32 %255, 1
  %263 = or i32 %262, 1
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds double, double* %1, i64 %264
  store double %261, double* %265, align 8
  %266 = load double, double* %256, align 8
  %267 = load double, double* %259, align 8
  %268 = fsub double %266, %267
  %269 = add nsw i32 %262, -1
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds double, double* %1, i64 %270
  store double %268, double* %271, align 8
  %272 = add i64 %254, -2
  %273 = add nsw i32 %255, -2
  %274 = icmp sgt i64 %272, 1
  %275 = add nsw i64 %253, -2
  br i1 %274, label %252, label %235

276:                                              ; preds = %236, %527
  %277 = phi i32 [ %64, %236 ], [ %279, %527 ]
  %278 = phi i32 [ 2, %236 ], [ %421, %527 ]
  %279 = lshr i32 %277, 1
  %280 = icmp ugt i32 %277, 3
  br i1 %280, label %287, label %281

281:                                              ; preds = %276
  %282 = zext i32 %279 to i64
  %283 = load double, double* %105, align 8
  %284 = getelementptr inbounds double, double* %2, i64 %282
  %285 = load double, double* %284, align 8
  %286 = fmul double %283, %285
  store double %286, double* %284, align 8
  br label %384

287:                                              ; preds = %276
  %288 = sdiv i32 %49, %277
  %289 = sext i32 %288 to i64
  %290 = zext i32 %279 to i64
  br label %291

291:                                              ; preds = %291, %287
  %292 = phi i64 [ 1, %287 ], [ %315, %291 ]
  %293 = phi i64 [ 0, %287 ], [ %296, %291 ]
  %294 = trunc i64 %292 to i32
  %295 = sub nsw i32 %277, %294
  %296 = add nsw i64 %293, %289
  %297 = getelementptr inbounds double, double* %105, i64 %296
  %298 = load double, double* %297, align 8
  %299 = sub nsw i64 %237, %296
  %300 = getelementptr inbounds double, double* %105, i64 %299
  %301 = load double, double* %300, align 8
  %302 = fsub double %298, %301
  %303 = fadd double %298, %301
  %304 = getelementptr inbounds double, double* %2, i64 %292
  %305 = load double, double* %304, align 8
  %306 = fmul double %303, %305
  %307 = sext i32 %295 to i64
  %308 = getelementptr inbounds double, double* %2, i64 %307
  %309 = load double, double* %308, align 8
  %310 = fmul double %302, %309
  %311 = fsub double %306, %310
  %312 = fmul double %302, %305
  %313 = fmul double %303, %309
  %314 = fadd double %312, %313
  store double %314, double* %304, align 8
  store double %311, double* %308, align 8
  %315 = add nuw nsw i64 %292, 1
  %316 = icmp ult i64 %315, %290
  br i1 %316, label %291, label %317

317:                                              ; preds = %291
  %318 = load double, double* %105, align 8
  %319 = getelementptr inbounds double, double* %2, i64 %290
  %320 = load double, double* %319, align 8
  %321 = fmul double %318, %320
  store double %321, double* %319, align 8
  %322 = icmp ugt i32 %277, 4
  br i1 %322, label %323, label %377

323:                                              ; preds = %317
  tail call void @cftfsub(i32 %277, double* %2, i32* %3, i32 %12, double* %4)
  %324 = icmp eq i32 %277, 5
  br i1 %324, label %384, label %325

325:                                              ; preds = %323
  %326 = sdiv i32 %240, %279
  %327 = sext i32 %326 to i64
  br label %328

328:                                              ; preds = %328, %325
  %329 = phi i64 [ 2, %325 ], [ %375, %328 ]
  %330 = phi i64 [ 0, %325 ], [ %333, %328 ]
  %331 = trunc i64 %329 to i32
  %332 = sub nsw i32 %277, %331
  %333 = add nsw i64 %330, %327
  %334 = sub nsw i64 %237, %333
  %335 = getelementptr inbounds double, double* %105, i64 %334
  %336 = load double, double* %335, align 8
  %337 = getelementptr inbounds double, double* %105, i64 %333
  %338 = load double, double* %337, align 8
  %339 = getelementptr inbounds double, double* %2, i64 %329
  %340 = sext i32 %332 to i64
  %341 = getelementptr inbounds double, double* %2, i64 %340
  %342 = load double, double* %341, align 8
  %343 = bitcast double* %339 to <2 x double>*
  %344 = load <2 x double>, <2 x double>* %343, align 8
  %345 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %344, <2 x i32> <i32 0, i32 2>
  %346 = insertelement <2 x double> undef, double %336, i32 0
  %347 = insertelement <2 x double> %346, double %342, i32 1
  %348 = fsub <2 x double> %345, %347
  %349 = add nsw i32 %332, 1
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds double, double* %2, i64 %350
  %352 = load double, double* %351, align 8
  %353 = extractelement <2 x double> %344, i32 1
  %354 = fadd double %353, %352
  %355 = insertelement <2 x double> undef, double %338, i32 0
  %356 = shufflevector <2 x double> %355, <2 x double> %348, <2 x i32> <i32 0, i32 2>
  %357 = insertelement <2 x double> undef, double %354, i32 0
  %358 = shufflevector <2 x double> %357, <2 x double> undef, <2 x i32> zeroinitializer
  %359 = fmul <2 x double> %356, %358
  %360 = extractelement <2 x double> %348, i32 1
  %361 = insertelement <2 x double> undef, double %360, i32 0
  %362 = insertelement <2 x double> %361, double %338, i32 1
  %363 = fmul <2 x double> %348, %362
  %364 = fsub <2 x double> %363, %359
  %365 = fadd <2 x double> %363, %359
  %366 = shufflevector <2 x double> %364, <2 x double> %365, <2 x i32> <i32 0, i32 3>
  %367 = fsub <2 x double> %344, %366
  %368 = bitcast double* %339 to <2 x double>*
  store <2 x double> %367, <2 x double>* %368, align 8
  %369 = load double, double* %341, align 8
  %370 = extractelement <2 x double> %364, i32 0
  %371 = fadd double %369, %370
  store double %371, double* %341, align 8
  %372 = load double, double* %351, align 8
  %373 = extractelement <2 x double> %365, i32 1
  %374 = fsub double %372, %373
  store double %374, double* %351, align 8
  %375 = add nuw nsw i64 %329, 2
  %376 = icmp ult i64 %375, %290
  br i1 %376, label %328, label %384

377:                                              ; preds = %317
  %378 = icmp eq i32 %277, 4
  br i1 %378, label %379, label %384

379:                                              ; preds = %377
  %380 = load <2 x double>, <2 x double>* %245, align 8
  %381 = load <2 x double>, <2 x double>* %246, align 8
  %382 = fsub <2 x double> %380, %381
  %383 = fadd <2 x double> %380, %381
  store <2 x double> %383, <2 x double>* %247, align 8
  store <2 x double> %382, <2 x double>* %248, align 8
  br label %384

384:                                              ; preds = %328, %323, %281, %377, %379
  %385 = load double, double* %2, align 8
  %386 = load double, double* %239, align 8
  %387 = fsub double %385, %386
  %388 = sub nsw i32 %0, %278
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds double, double* %1, i64 %389
  store double %387, double* %390, align 8
  %391 = load double, double* %2, align 8
  %392 = load double, double* %239, align 8
  %393 = fadd double %391, %392
  %394 = sext i32 %278 to i64
  %395 = getelementptr inbounds double, double* %1, i64 %394
  store double %393, double* %395, align 8
  %396 = icmp ugt i32 %277, 2
  br i1 %396, label %397, label %420

397:                                              ; preds = %384
  %398 = shl i32 %278, 2
  %399 = sext i32 %398 to i64
  %400 = zext i32 %277 to i64
  br label %401

401:                                              ; preds = %397, %401
  %402 = phi i64 [ 2, %397 ], [ %418, %401 ]
  %403 = phi i64 [ 0, %397 ], [ %404, %401 ]
  %404 = add nsw i64 %403, %399
  %405 = getelementptr inbounds double, double* %2, i64 %402
  %406 = load double, double* %405, align 8
  %407 = or i64 %402, 1
  %408 = getelementptr inbounds double, double* %2, i64 %407
  %409 = load double, double* %408, align 8
  %410 = fsub double %406, %409
  %411 = sub nsw i64 %404, %394
  %412 = getelementptr inbounds double, double* %1, i64 %411
  store double %410, double* %412, align 8
  %413 = load double, double* %405, align 8
  %414 = load double, double* %408, align 8
  %415 = fadd double %413, %414
  %416 = add nsw i64 %404, %394
  %417 = getelementptr inbounds double, double* %1, i64 %416
  store double %415, double* %417, align 8
  %418 = add nuw nsw i64 %402, 2
  %419 = icmp ult i64 %418, %400
  br i1 %419, label %401, label %420

420:                                              ; preds = %401, %384
  %421 = shl i32 %278, 1
  %422 = icmp eq i32 %279, 0
  br i1 %422, label %527, label %423

423:                                              ; preds = %420
  %424 = zext i32 %277 to i64
  %425 = zext i32 %277 to i64
  %426 = zext i32 %279 to i64
  %427 = icmp eq i32 %279, 1
  br i1 %427, label %508, label %428

428:                                              ; preds = %423
  %429 = add nsw i64 %426, -1
  %430 = getelementptr double, double* %2, i64 %425
  %431 = ptrtoint double* %430 to i64
  %432 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %429, i64 8)
  %433 = extractvalue { i64, i1 } %432, 0
  %434 = extractvalue { i64, i1 } %432, 1
  %435 = icmp ugt i64 %433, %431
  %436 = or i1 %435, %434
  %437 = shl nuw nsw i32 %277, 1
  %438 = zext i32 %437 to i64
  %439 = getelementptr double, double* %2, i64 %438
  %440 = ptrtoint double* %439 to i64
  %441 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %429, i64 8)
  %442 = extractvalue { i64, i1 } %441, 0
  %443 = extractvalue { i64, i1 } %441, 1
  %444 = icmp ugt i64 %442, %440
  %445 = or i1 %444, %443
  %446 = or i1 %436, %445
  br i1 %446, label %508, label %447

447:                                              ; preds = %428
  %448 = getelementptr double, double* %2, i64 %426
  %449 = getelementptr double, double* %2, i64 %425
  %450 = add nuw nsw i64 %426, %425
  %451 = getelementptr double, double* %2, i64 %450
  %452 = sub nsw i64 %425, %426
  %453 = getelementptr double, double* %241, i64 %452
  %454 = getelementptr double, double* %242, i64 %425
  %455 = shl nuw nsw i32 %277, 1
  %456 = zext i32 %455 to i64
  %457 = sub nsw i64 %456, %426
  %458 = getelementptr double, double* %243, i64 %457
  %459 = getelementptr double, double* %244, i64 %456
  %460 = icmp ugt double* %451, %2
  %461 = icmp ult double* %449, %448
  %462 = and i1 %460, %461
  %463 = icmp ugt double* %454, %2
  %464 = icmp ult double* %453, %448
  %465 = and i1 %463, %464
  %466 = or i1 %462, %465
  %467 = icmp ugt double* %459, %2
  %468 = icmp ult double* %458, %448
  %469 = and i1 %467, %468
  %470 = or i1 %466, %469
  %471 = icmp ult double* %453, %451
  %472 = and i1 %249, %471
  %473 = or i1 %470, %472
  %474 = icmp ult double* %453, %459
  %475 = icmp ult double* %458, %454
  %476 = and i1 %474, %475
  %477 = or i1 %473, %476
  br i1 %477, label %508, label %478

478:                                              ; preds = %447
  %479 = and i64 %426, 1073741822
  br label %480

480:                                              ; preds = %480, %478
  %481 = phi i64 [ 0, %478 ], [ %504, %480 ]
  %482 = sub nsw i64 %424, %481
  %483 = add nsw i64 %482, %425
  %484 = getelementptr inbounds double, double* %250, i64 %483
  %485 = bitcast double* %484 to <2 x double>*
  %486 = load <2 x double>, <2 x double>* %485, align 8, !alias.scope !18
  %487 = shufflevector <2 x double> %486, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %488 = add nuw nsw i64 %481, %424
  %489 = getelementptr inbounds double, double* %2, i64 %488
  %490 = bitcast double* %489 to <2 x double>*
  %491 = load <2 x double>, <2 x double>* %490, align 8, !alias.scope !21, !noalias !23
  %492 = fsub <2 x double> %487, %491
  %493 = getelementptr inbounds double, double* %2, i64 %481
  %494 = bitcast double* %493 to <2 x double>*
  store <2 x double> %492, <2 x double>* %494, align 8, !alias.scope !25, !noalias !27
  %495 = bitcast double* %484 to <2 x double>*
  %496 = load <2 x double>, <2 x double>* %495, align 8, !alias.scope !18
  %497 = shufflevector <2 x double> %496, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %498 = bitcast double* %489 to <2 x double>*
  %499 = load <2 x double>, <2 x double>* %498, align 8, !alias.scope !21, !noalias !23
  %500 = fadd <2 x double> %497, %499
  %501 = shufflevector <2 x double> %500, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %502 = getelementptr inbounds double, double* %251, i64 %482
  %503 = bitcast double* %502 to <2 x double>*
  store <2 x double> %501, <2 x double>* %503, align 8, !alias.scope !23, !noalias !18
  %504 = add i64 %481, 2
  %505 = icmp eq i64 %504, %479
  br i1 %505, label %506, label %480, !llvm.loop !28

506:                                              ; preds = %480
  %507 = icmp eq i64 %479, %426
  br i1 %507, label %527, label %508

508:                                              ; preds = %506, %447, %428, %423
  %509 = phi i64 [ 0, %447 ], [ 0, %428 ], [ 0, %423 ], [ %479, %506 ]
  br label %510

510:                                              ; preds = %508, %510
  %511 = phi i64 [ %525, %510 ], [ %509, %508 ]
  %512 = sub nsw i64 %424, %511
  %513 = add nsw i64 %512, %425
  %514 = getelementptr inbounds double, double* %2, i64 %513
  %515 = load double, double* %514, align 8
  %516 = add nuw nsw i64 %511, %424
  %517 = getelementptr inbounds double, double* %2, i64 %516
  %518 = load double, double* %517, align 8
  %519 = fsub double %515, %518
  %520 = getelementptr inbounds double, double* %2, i64 %511
  store double %519, double* %520, align 8
  %521 = load double, double* %514, align 8
  %522 = load double, double* %517, align 8
  %523 = fadd double %521, %522
  %524 = getelementptr inbounds double, double* %2, i64 %512
  store double %523, double* %524, align 8
  %525 = add nuw nsw i64 %511, 1
  %526 = icmp eq i64 %525, %426
  br i1 %526, label %527, label %510, !llvm.loop !29

527:                                              ; preds = %510, %506, %420
  %528 = phi i64 [ 0, %420 ], [ %426, %506 ], [ %426, %510 ]
  %529 = add nuw nsw i32 %279, %277
  %530 = zext i32 %529 to i64
  %531 = getelementptr inbounds double, double* %2, i64 %530
  %532 = bitcast double* %531 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = getelementptr inbounds double, double* %2, i64 %528
  %535 = bitcast double* %534 to i64*
  store i64 %533, i64* %535, align 8
  br i1 %280, label %276, label %536

536:                                              ; preds = %527
  %537 = sext i32 %421 to i64
  br label %538

538:                                              ; preds = %536, %235
  %539 = phi i64 [ 2, %235 ], [ %537, %536 ]
  %540 = bitcast double* %2 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = getelementptr inbounds double, double* %1, i64 %539
  %543 = bitcast double* %542 to i64*
  store i64 %541, i64* %543, align 8
  %544 = getelementptr inbounds double, double* %2, i64 2
  %545 = load double, double* %544, align 8
  %546 = getelementptr inbounds double, double* %2, i64 1
  %547 = load double, double* %546, align 8
  %548 = fsub double %545, %547
  store double %548, double* %55, align 8
  %549 = load double, double* %544, align 8
  %550 = load double, double* %546, align 8
  %551 = fadd double %549, %550
  store double %551, double* %1, align 8
  br label %564

552:                                              ; preds = %48
  %553 = bitcast double* %1 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = getelementptr inbounds double, double* %1, i64 1
  %556 = bitcast double* %555 to i64*
  store i64 %554, i64* %556, align 8
  %557 = bitcast double* %2 to i64*
  %558 = load i64, i64* %557, align 8
  %559 = getelementptr inbounds double, double* %1, i64 2
  %560 = bitcast double* %559 to i64*
  store i64 %558, i64* %560, align 8
  %561 = getelementptr inbounds double, double* %2, i64 1
  %562 = bitcast double* %561 to i64*
  %563 = load i64, i64* %562, align 8
  store i64 %563, i64* %553, align 8
  br label %564

564:                                              ; preds = %552, %538
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @dfst(i32, double*, double*, i32* nocapture, double*) local_unnamed_addr #0 {
  %6 = load i32, i32* %3, align 4
  %7 = shl i32 %6, 3
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = ashr i32 %0, 3
  tail call void @makewt(i32 %10, i32* %3, double* %4)
  br label %11

11:                                               ; preds = %9, %5
  %12 = phi i32 [ %10, %9 ], [ %6, %5 ]
  %13 = getelementptr inbounds i32, i32* %3, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %14, 1
  %16 = icmp slt i32 %15, %0
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = ashr i32 %0, 1
  %19 = sext i32 %12 to i64
  %20 = getelementptr inbounds double, double* %4, i64 %19
  store i32 %18, i32* %13, align 4
  %21 = icmp sgt i32 %0, 3
  br i1 %21, label %22, label %48

22:                                               ; preds = %17
  %23 = lshr i32 %18, 1
  %24 = tail call double @atan(double 1.000000e+00) #4
  %25 = sitofp i32 %23 to double
  %26 = fdiv double 0x3FE921FB54442D18, %25
  %27 = fmul double %26, %25
  %28 = tail call double @cos(double %27) #4
  store double %28, double* %20, align 8
  %29 = fmul double %28, 5.000000e-01
  %30 = zext i32 %23 to i64
  %31 = getelementptr inbounds double, double* %20, i64 %30
  store double %29, double* %31, align 8
  %32 = icmp ugt i32 %18, 3
  br i1 %32, label %33, label %51

33:                                               ; preds = %22, %33
  %34 = phi i64 [ %46, %33 ], [ 1, %22 ]
  %35 = trunc i64 %34 to i32
  %36 = sitofp i32 %35 to double
  %37 = fmul double %26, %36
  %38 = tail call double @cos(double %37) #4
  %39 = fmul double %38, 5.000000e-01
  %40 = getelementptr inbounds double, double* %20, i64 %34
  store double %39, double* %40, align 8
  %41 = tail call double @sin(double %37) #4
  %42 = fmul double %41, 5.000000e-01
  %43 = sub nsw i32 %18, %35
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %20, i64 %44
  store double %42, double* %45, align 8
  %46 = add nuw nsw i64 %34, 1
  %47 = icmp ult i64 %46, %30
  br i1 %47, label %33, label %48

48:                                               ; preds = %33, %17, %11
  %49 = phi i32 [ %14, %11 ], [ %18, %17 ], [ %18, %33 ]
  %50 = icmp sgt i32 %0, 2
  br i1 %50, label %51, label %559

51:                                               ; preds = %22, %48
  %52 = phi i32 [ %49, %48 ], [ %18, %22 ]
  %53 = lshr i32 %0, 1
  %54 = lshr i32 %0, 2
  %55 = icmp ugt i32 %0, 7
  br i1 %55, label %59, label %56

56:                                               ; preds = %51
  %57 = zext i32 %54 to i64
  %58 = zext i32 %53 to i64
  br label %88

59:                                               ; preds = %51
  %60 = zext i32 %53 to i64
  %61 = sext i32 %0 to i64
  %62 = zext i32 %54 to i64
  br label %63

63:                                               ; preds = %59, %63
  %64 = phi i64 [ 1, %59 ], [ %86, %63 ]
  %65 = sub nsw i64 %60, %64
  %66 = getelementptr inbounds double, double* %1, i64 %64
  %67 = load double, double* %66, align 8
  %68 = trunc i64 %64 to i32
  %69 = sub nsw i32 %0, %68
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds double, double* %1, i64 %70
  %72 = load double, double* %71, align 8
  %73 = fadd double %67, %72
  %74 = fsub double %67, %72
  %75 = getelementptr inbounds double, double* %1, i64 %65
  %76 = load double, double* %75, align 8
  %77 = sub nsw i64 %61, %65
  %78 = getelementptr inbounds double, double* %1, i64 %77
  %79 = load double, double* %78, align 8
  %80 = fadd double %76, %79
  %81 = fsub double %76, %79
  store double %73, double* %66, align 8
  store double %80, double* %75, align 8
  %82 = fadd double %74, %81
  %83 = getelementptr inbounds double, double* %2, i64 %64
  store double %82, double* %83, align 8
  %84 = fsub double %74, %81
  %85 = getelementptr inbounds double, double* %2, i64 %65
  store double %84, double* %85, align 8
  %86 = add nuw nsw i64 %64, 1
  %87 = icmp ult i64 %86, %62
  br i1 %87, label %63, label %88

88:                                               ; preds = %63, %56
  %89 = phi i64 [ %58, %56 ], [ %60, %63 ]
  %90 = phi i64 [ %57, %56 ], [ %62, %63 ]
  %91 = getelementptr inbounds double, double* %1, i64 %90
  %92 = load double, double* %91, align 8
  %93 = sub nsw i32 %0, %54
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds double, double* %1, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fsub double %92, %96
  store double %97, double* %2, align 8
  %98 = load double, double* %95, align 8
  %99 = load double, double* %91, align 8
  %100 = fadd double %98, %99
  store double %100, double* %91, align 8
  %101 = getelementptr inbounds double, double* %1, i64 %89
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast double* %1 to i64*
  store i64 %103, i64* %104, align 8
  %105 = sext i32 %12 to i64
  %106 = getelementptr inbounds double, double* %4, i64 %105
  br i1 %55, label %111, label %107

107:                                              ; preds = %88
  %108 = load double, double* %106, align 8
  %109 = load double, double* %91, align 8
  %110 = fmul double %108, %109
  store double %110, double* %91, align 8
  br label %202

111:                                              ; preds = %88
  %112 = sdiv i32 %52, %53
  %113 = sext i32 %112 to i64
  %114 = sext i32 %52 to i64
  br label %115

115:                                              ; preds = %115, %111
  %116 = phi i64 [ 1, %111 ], [ %139, %115 ]
  %117 = phi i64 [ 0, %111 ], [ %120, %115 ]
  %118 = trunc i64 %116 to i32
  %119 = sub nsw i32 %53, %118
  %120 = add nsw i64 %117, %113
  %121 = getelementptr inbounds double, double* %106, i64 %120
  %122 = load double, double* %121, align 8
  %123 = sub nsw i64 %114, %120
  %124 = getelementptr inbounds double, double* %106, i64 %123
  %125 = load double, double* %124, align 8
  %126 = fsub double %122, %125
  %127 = fadd double %122, %125
  %128 = sext i32 %119 to i64
  %129 = getelementptr inbounds double, double* %1, i64 %128
  %130 = load double, double* %129, align 8
  %131 = fmul double %127, %130
  %132 = getelementptr inbounds double, double* %1, i64 %116
  %133 = load double, double* %132, align 8
  %134 = fmul double %126, %133
  %135 = fsub double %131, %134
  %136 = fmul double %126, %130
  %137 = fmul double %127, %133
  %138 = fadd double %136, %137
  store double %138, double* %129, align 8
  store double %135, double* %132, align 8
  %139 = add nuw nsw i64 %116, 1
  %140 = icmp ult i64 %139, %90
  br i1 %140, label %115, label %141

141:                                              ; preds = %115
  %142 = load double, double* %106, align 8
  %143 = load double, double* %91, align 8
  %144 = fmul double %142, %143
  store double %144, double* %91, align 8
  %145 = icmp sgt i32 %0, 9
  br i1 %145, label %146, label %202

146:                                              ; preds = %141
  tail call void @cftfsub(i32 %53, double* %1, i32* %3, i32 %12, double* %4)
  %147 = icmp ugt i32 %0, 11
  br i1 %147, label %148, label %214

148:                                              ; preds = %146
  %149 = shl nsw i32 %52, 1
  %150 = sdiv i32 %149, %54
  %151 = sext i32 %150 to i64
  %152 = sext i32 %52 to i64
  br label %153

153:                                              ; preds = %153, %148
  %154 = phi i64 [ 2, %148 ], [ %200, %153 ]
  %155 = phi i64 [ 0, %148 ], [ %158, %153 ]
  %156 = trunc i64 %154 to i32
  %157 = sub nsw i32 %53, %156
  %158 = add nsw i64 %155, %151
  %159 = sub nsw i64 %152, %158
  %160 = getelementptr inbounds double, double* %106, i64 %159
  %161 = load double, double* %160, align 8
  %162 = getelementptr inbounds double, double* %106, i64 %158
  %163 = load double, double* %162, align 8
  %164 = getelementptr inbounds double, double* %1, i64 %154
  %165 = sext i32 %157 to i64
  %166 = getelementptr inbounds double, double* %1, i64 %165
  %167 = load double, double* %166, align 8
  %168 = bitcast double* %164 to <2 x double>*
  %169 = load <2 x double>, <2 x double>* %168, align 8
  %170 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %169, <2 x i32> <i32 0, i32 2>
  %171 = insertelement <2 x double> undef, double %161, i32 0
  %172 = insertelement <2 x double> %171, double %167, i32 1
  %173 = fsub <2 x double> %170, %172
  %174 = add nsw i32 %157, 1
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds double, double* %1, i64 %175
  %177 = load double, double* %176, align 8
  %178 = extractelement <2 x double> %169, i32 1
  %179 = fadd double %178, %177
  %180 = insertelement <2 x double> undef, double %163, i32 0
  %181 = shufflevector <2 x double> %180, <2 x double> %173, <2 x i32> <i32 0, i32 2>
  %182 = insertelement <2 x double> undef, double %179, i32 0
  %183 = shufflevector <2 x double> %182, <2 x double> undef, <2 x i32> zeroinitializer
  %184 = fmul <2 x double> %181, %183
  %185 = extractelement <2 x double> %173, i32 1
  %186 = insertelement <2 x double> undef, double %185, i32 0
  %187 = insertelement <2 x double> %186, double %163, i32 1
  %188 = fmul <2 x double> %173, %187
  %189 = fsub <2 x double> %188, %184
  %190 = fadd <2 x double> %188, %184
  %191 = shufflevector <2 x double> %189, <2 x double> %190, <2 x i32> <i32 0, i32 3>
  %192 = fsub <2 x double> %169, %191
  %193 = bitcast double* %164 to <2 x double>*
  store <2 x double> %192, <2 x double>* %193, align 8
  %194 = load double, double* %166, align 8
  %195 = extractelement <2 x double> %189, i32 0
  %196 = fadd double %194, %195
  store double %196, double* %166, align 8
  %197 = load double, double* %176, align 8
  %198 = extractelement <2 x double> %190, i32 1
  %199 = fsub double %197, %198
  store double %199, double* %176, align 8
  %200 = add nuw nsw i64 %154, 2
  %201 = icmp ult i64 %200, %90
  br i1 %201, label %153, label %214

202:                                              ; preds = %107, %141
  %203 = icmp eq i32 %53, 4
  br i1 %203, label %204, label %214

204:                                              ; preds = %202
  %205 = getelementptr inbounds double, double* %1, i64 2
  %206 = bitcast double* %1 to <2 x double>*
  %207 = load <2 x double>, <2 x double>* %206, align 8
  %208 = bitcast double* %205 to <2 x double>*
  %209 = load <2 x double>, <2 x double>* %208, align 8
  %210 = fsub <2 x double> %207, %209
  %211 = fadd <2 x double> %207, %209
  %212 = bitcast double* %1 to <2 x double>*
  store <2 x double> %211, <2 x double>* %212, align 8
  %213 = bitcast double* %205 to <2 x double>*
  store <2 x double> %210, <2 x double>* %213, align 8
  br label %214

214:                                              ; preds = %153, %146, %202, %204
  %215 = getelementptr inbounds double, double* %1, i64 1
  %216 = load double, double* %215, align 8
  %217 = load double, double* %1, align 8
  %218 = fsub double %216, %217
  %219 = add nsw i32 %0, -1
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds double, double* %1, i64 %220
  store double %218, double* %221, align 8
  %222 = load double, double* %1, align 8
  %223 = load double, double* %215, align 8
  %224 = fadd double %222, %223
  store double %224, double* %215, align 8
  %225 = add nsw i32 %53, -2
  %226 = icmp sgt i32 %225, 1
  br i1 %226, label %227, label %231

227:                                              ; preds = %214
  %228 = lshr i32 %0, 1
  %229 = zext i32 %228 to i64
  %230 = add nsw i64 %229, -2
  br label %254

231:                                              ; preds = %254, %214
  br i1 %55, label %235, label %232

232:                                              ; preds = %231
  %233 = bitcast double* %2 to i64*
  %234 = load i64, i64* %233, align 8
  br label %554

235:                                              ; preds = %231
  %236 = sext i32 %52 to i64
  %237 = getelementptr inbounds double, double* %2, i64 2
  %238 = getelementptr inbounds double, double* %2, i64 1
  %239 = shl nsw i32 %52, 1
  %240 = bitcast double* %2 to i64*
  %241 = getelementptr double, double* %2, i64 -1
  %242 = getelementptr double, double* %2, i64 -1
  %243 = getelementptr double, double* %2, i64 1
  %244 = getelementptr double, double* %2, i64 1
  %245 = getelementptr double, double* %2, i64 1
  %246 = getelementptr double, double* %2, i64 1
  %247 = bitcast double* %2 to <2 x double>*
  %248 = bitcast double* %237 to <2 x double>*
  %249 = bitcast double* %2 to <2 x double>*
  %250 = bitcast double* %237 to <2 x double>*
  %251 = icmp ult double* %244, %2
  %252 = getelementptr inbounds double, double* %2, i64 -1
  %253 = getelementptr inbounds double, double* %2, i64 -1
  br label %279

254:                                              ; preds = %227, %254
  %255 = phi i64 [ %229, %227 ], [ %278, %254 ]
  %256 = phi i64 [ %230, %227 ], [ %275, %254 ]
  %257 = phi i32 [ %225, %227 ], [ %276, %254 ]
  %258 = getelementptr inbounds double, double* %1, i64 %256
  %259 = load double, double* %258, align 8
  %260 = add nsw i64 %255, -1
  %261 = getelementptr inbounds double, double* %1, i64 %260
  %262 = load double, double* %261, align 8
  %263 = fsub double %259, %262
  %264 = shl nsw i32 %257, 1
  %265 = or i32 %264, 1
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds double, double* %1, i64 %266
  store double %263, double* %267, align 8
  %268 = load double, double* %258, align 8
  %269 = fsub double -0.000000e+00, %268
  %270 = load double, double* %261, align 8
  %271 = fsub double %269, %270
  %272 = add nsw i32 %264, -1
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds double, double* %1, i64 %273
  store double %271, double* %274, align 8
  %275 = add nsw i64 %256, -2
  %276 = add nsw i32 %257, -2
  %277 = icmp sgt i64 %275, 1
  %278 = add nsw i64 %255, -2
  br i1 %277, label %254, label %231

279:                                              ; preds = %235, %545
  %280 = phi i32 [ %54, %235 ], [ %282, %545 ]
  %281 = phi i32 [ 2, %235 ], [ %425, %545 ]
  %282 = lshr i32 %280, 1
  %283 = icmp ugt i32 %280, 3
  br i1 %283, label %290, label %284

284:                                              ; preds = %279
  %285 = zext i32 %282 to i64
  %286 = load double, double* %106, align 8
  %287 = getelementptr inbounds double, double* %2, i64 %285
  %288 = load double, double* %287, align 8
  %289 = fmul double %286, %288
  store double %289, double* %287, align 8
  br label %387

290:                                              ; preds = %279
  %291 = sdiv i32 %52, %280
  %292 = sext i32 %291 to i64
  %293 = zext i32 %282 to i64
  br label %294

294:                                              ; preds = %294, %290
  %295 = phi i64 [ 1, %290 ], [ %318, %294 ]
  %296 = phi i64 [ 0, %290 ], [ %299, %294 ]
  %297 = trunc i64 %295 to i32
  %298 = sub nsw i32 %280, %297
  %299 = add nsw i64 %296, %292
  %300 = getelementptr inbounds double, double* %106, i64 %299
  %301 = load double, double* %300, align 8
  %302 = sub nsw i64 %236, %299
  %303 = getelementptr inbounds double, double* %106, i64 %302
  %304 = load double, double* %303, align 8
  %305 = fsub double %301, %304
  %306 = fadd double %301, %304
  %307 = sext i32 %298 to i64
  %308 = getelementptr inbounds double, double* %2, i64 %307
  %309 = load double, double* %308, align 8
  %310 = fmul double %306, %309
  %311 = getelementptr inbounds double, double* %2, i64 %295
  %312 = load double, double* %311, align 8
  %313 = fmul double %305, %312
  %314 = fsub double %310, %313
  %315 = fmul double %305, %309
  %316 = fmul double %306, %312
  %317 = fadd double %315, %316
  store double %317, double* %308, align 8
  store double %314, double* %311, align 8
  %318 = add nuw nsw i64 %295, 1
  %319 = icmp ult i64 %318, %293
  br i1 %319, label %294, label %320

320:                                              ; preds = %294
  %321 = load double, double* %106, align 8
  %322 = getelementptr inbounds double, double* %2, i64 %293
  %323 = load double, double* %322, align 8
  %324 = fmul double %321, %323
  store double %324, double* %322, align 8
  %325 = icmp ugt i32 %280, 4
  br i1 %325, label %326, label %380

326:                                              ; preds = %320
  tail call void @cftfsub(i32 %280, double* %2, i32* %3, i32 %12, double* %4)
  %327 = icmp eq i32 %280, 5
  br i1 %327, label %387, label %328

328:                                              ; preds = %326
  %329 = sdiv i32 %239, %282
  %330 = sext i32 %329 to i64
  br label %331

331:                                              ; preds = %331, %328
  %332 = phi i64 [ 2, %328 ], [ %378, %331 ]
  %333 = phi i64 [ 0, %328 ], [ %336, %331 ]
  %334 = trunc i64 %332 to i32
  %335 = sub nsw i32 %280, %334
  %336 = add nsw i64 %333, %330
  %337 = sub nsw i64 %236, %336
  %338 = getelementptr inbounds double, double* %106, i64 %337
  %339 = load double, double* %338, align 8
  %340 = getelementptr inbounds double, double* %106, i64 %336
  %341 = load double, double* %340, align 8
  %342 = getelementptr inbounds double, double* %2, i64 %332
  %343 = sext i32 %335 to i64
  %344 = getelementptr inbounds double, double* %2, i64 %343
  %345 = load double, double* %344, align 8
  %346 = bitcast double* %342 to <2 x double>*
  %347 = load <2 x double>, <2 x double>* %346, align 8
  %348 = shufflevector <2 x double> <double 5.000000e-01, double undef>, <2 x double> %347, <2 x i32> <i32 0, i32 2>
  %349 = insertelement <2 x double> undef, double %339, i32 0
  %350 = insertelement <2 x double> %349, double %345, i32 1
  %351 = fsub <2 x double> %348, %350
  %352 = add nsw i32 %335, 1
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds double, double* %2, i64 %353
  %355 = load double, double* %354, align 8
  %356 = extractelement <2 x double> %347, i32 1
  %357 = fadd double %356, %355
  %358 = insertelement <2 x double> undef, double %341, i32 0
  %359 = shufflevector <2 x double> %358, <2 x double> %351, <2 x i32> <i32 0, i32 2>
  %360 = insertelement <2 x double> undef, double %357, i32 0
  %361 = shufflevector <2 x double> %360, <2 x double> undef, <2 x i32> zeroinitializer
  %362 = fmul <2 x double> %359, %361
  %363 = extractelement <2 x double> %351, i32 1
  %364 = insertelement <2 x double> undef, double %363, i32 0
  %365 = insertelement <2 x double> %364, double %341, i32 1
  %366 = fmul <2 x double> %351, %365
  %367 = fsub <2 x double> %366, %362
  %368 = fadd <2 x double> %366, %362
  %369 = shufflevector <2 x double> %367, <2 x double> %368, <2 x i32> <i32 0, i32 3>
  %370 = fsub <2 x double> %347, %369
  %371 = bitcast double* %342 to <2 x double>*
  store <2 x double> %370, <2 x double>* %371, align 8
  %372 = load double, double* %344, align 8
  %373 = extractelement <2 x double> %367, i32 0
  %374 = fadd double %372, %373
  store double %374, double* %344, align 8
  %375 = load double, double* %354, align 8
  %376 = extractelement <2 x double> %368, i32 1
  %377 = fsub double %375, %376
  store double %377, double* %354, align 8
  %378 = add nuw nsw i64 %332, 2
  %379 = icmp ult i64 %378, %293
  br i1 %379, label %331, label %387

380:                                              ; preds = %320
  %381 = icmp eq i32 %280, 4
  br i1 %381, label %382, label %387

382:                                              ; preds = %380
  %383 = load <2 x double>, <2 x double>* %247, align 8
  %384 = load <2 x double>, <2 x double>* %248, align 8
  %385 = fsub <2 x double> %383, %384
  %386 = fadd <2 x double> %383, %384
  store <2 x double> %386, <2 x double>* %249, align 8
  store <2 x double> %385, <2 x double>* %250, align 8
  br label %387

387:                                              ; preds = %331, %326, %284, %380, %382
  %388 = load double, double* %238, align 8
  %389 = load double, double* %2, align 8
  %390 = fsub double %388, %389
  %391 = sub nsw i32 %0, %281
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds double, double* %1, i64 %392
  store double %390, double* %393, align 8
  %394 = load double, double* %2, align 8
  %395 = load double, double* %238, align 8
  %396 = fadd double %394, %395
  %397 = sext i32 %281 to i64
  %398 = getelementptr inbounds double, double* %1, i64 %397
  store double %396, double* %398, align 8
  %399 = icmp ugt i32 %280, 2
  br i1 %399, label %400, label %424

400:                                              ; preds = %387
  %401 = shl i32 %281, 2
  %402 = sext i32 %401 to i64
  %403 = zext i32 %280 to i64
  br label %404

404:                                              ; preds = %400, %404
  %405 = phi i64 [ 2, %400 ], [ %422, %404 ]
  %406 = phi i64 [ 0, %400 ], [ %407, %404 ]
  %407 = add nsw i64 %406, %402
  %408 = getelementptr inbounds double, double* %2, i64 %405
  %409 = load double, double* %408, align 8
  %410 = fsub double -0.000000e+00, %409
  %411 = or i64 %405, 1
  %412 = getelementptr inbounds double, double* %2, i64 %411
  %413 = load double, double* %412, align 8
  %414 = fsub double %410, %413
  %415 = sub nsw i64 %407, %397
  %416 = getelementptr inbounds double, double* %1, i64 %415
  store double %414, double* %416, align 8
  %417 = load double, double* %408, align 8
  %418 = load double, double* %412, align 8
  %419 = fsub double %417, %418
  %420 = add nsw i64 %407, %397
  %421 = getelementptr inbounds double, double* %1, i64 %420
  store double %419, double* %421, align 8
  %422 = add nuw nsw i64 %405, 2
  %423 = icmp ult i64 %422, %403
  br i1 %423, label %404, label %424

424:                                              ; preds = %404, %387
  %425 = shl i32 %281, 1
  br i1 %283, label %432, label %426

426:                                              ; preds = %424
  %427 = add nuw nsw i32 %282, %280
  %428 = zext i32 %427 to i64
  %429 = getelementptr inbounds double, double* %2, i64 %428
  %430 = bitcast double* %429 to i64*
  %431 = load i64, i64* %430, align 8
  store i64 %431, i64* %240, align 8
  br label %551

432:                                              ; preds = %424
  %433 = zext i32 %280 to i64
  %434 = zext i32 %280 to i64
  %435 = zext i32 %282 to i64
  %436 = icmp ugt i64 %435, 2
  %437 = select i1 %436, i64 %435, i64 2
  %438 = add nsw i64 %437, -1
  %439 = icmp ult i64 %438, 2
  br i1 %439, label %526, label %440

440:                                              ; preds = %432
  %441 = icmp ugt i64 %435, 2
  %442 = select i1 %441, i64 %435, i64 2
  %443 = add nsw i64 %442, -2
  %444 = getelementptr double, double* %241, i64 %434
  %445 = ptrtoint double* %444 to i64
  %446 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %443, i64 8)
  %447 = extractvalue { i64, i1 } %446, 0
  %448 = extractvalue { i64, i1 } %446, 1
  %449 = icmp ugt i64 %447, %445
  %450 = or i1 %449, %448
  %451 = shl nuw nsw i32 %280, 1
  %452 = zext i32 %451 to i64
  %453 = getelementptr double, double* %242, i64 %452
  %454 = ptrtoint double* %453 to i64
  %455 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %443, i64 8)
  %456 = extractvalue { i64, i1 } %455, 0
  %457 = extractvalue { i64, i1 } %455, 1
  %458 = icmp ugt i64 %456, %454
  %459 = or i1 %458, %457
  %460 = or i1 %450, %459
  br i1 %460, label %526, label %461

461:                                              ; preds = %440
  %462 = icmp ugt i64 %435, 2
  %463 = select i1 %462, i64 %435, i64 2
  %464 = getelementptr double, double* %2, i64 %463
  %465 = getelementptr double, double* %244, i64 %434
  %466 = add nuw nsw i64 %463, %434
  %467 = getelementptr double, double* %2, i64 %466
  %468 = sub nsw i64 %434, %463
  %469 = getelementptr double, double* %245, i64 %468
  %470 = getelementptr double, double* %2, i64 %434
  %471 = shl nuw nsw i32 %280, 1
  %472 = zext i32 %471 to i64
  %473 = sub nsw i64 %472, %463
  %474 = getelementptr double, double* %246, i64 %473
  %475 = getelementptr double, double* %2, i64 %472
  %476 = icmp ult double* %243, %467
  %477 = icmp ult double* %465, %464
  %478 = and i1 %476, %477
  %479 = icmp ult double* %243, %470
  %480 = icmp ult double* %469, %464
  %481 = and i1 %479, %480
  %482 = or i1 %478, %481
  %483 = icmp ult double* %243, %475
  %484 = icmp ult double* %474, %464
  %485 = and i1 %483, %484
  %486 = or i1 %482, %485
  %487 = icmp ult double* %469, %467
  %488 = and i1 %251, %487
  %489 = or i1 %486, %488
  %490 = icmp ult double* %469, %475
  %491 = icmp ult double* %474, %470
  %492 = and i1 %490, %491
  %493 = or i1 %489, %492
  br i1 %493, label %526, label %494

494:                                              ; preds = %461
  %495 = and i64 %438, -2
  %496 = or i64 %438, 1
  br label %497

497:                                              ; preds = %497, %494
  %498 = phi i64 [ 0, %494 ], [ %522, %497 ]
  %499 = or i64 %498, 1
  %500 = sub nsw i64 %433, %499
  %501 = add nsw i64 %500, %434
  %502 = getelementptr inbounds double, double* %252, i64 %501
  %503 = bitcast double* %502 to <2 x double>*
  %504 = load <2 x double>, <2 x double>* %503, align 8, !alias.scope !30
  %505 = shufflevector <2 x double> %504, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %506 = add nuw nsw i64 %499, %433
  %507 = getelementptr inbounds double, double* %2, i64 %506
  %508 = bitcast double* %507 to <2 x double>*
  %509 = load <2 x double>, <2 x double>* %508, align 8, !alias.scope !33, !noalias !35
  %510 = fadd <2 x double> %505, %509
  %511 = getelementptr inbounds double, double* %2, i64 %499
  %512 = bitcast double* %511 to <2 x double>*
  store <2 x double> %510, <2 x double>* %512, align 8, !alias.scope !37, !noalias !39
  %513 = bitcast double* %502 to <2 x double>*
  %514 = load <2 x double>, <2 x double>* %513, align 8, !alias.scope !30
  %515 = shufflevector <2 x double> %514, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %516 = bitcast double* %507 to <2 x double>*
  %517 = load <2 x double>, <2 x double>* %516, align 8, !alias.scope !33, !noalias !35
  %518 = fsub <2 x double> %515, %517
  %519 = shufflevector <2 x double> %518, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %520 = getelementptr inbounds double, double* %253, i64 %500
  %521 = bitcast double* %520 to <2 x double>*
  store <2 x double> %519, <2 x double>* %521, align 8, !alias.scope !35, !noalias !30
  %522 = add i64 %498, 2
  %523 = icmp eq i64 %522, %495
  br i1 %523, label %524, label %497, !llvm.loop !40

524:                                              ; preds = %497
  %525 = icmp eq i64 %438, %495
  br i1 %525, label %545, label %526

526:                                              ; preds = %524, %461, %440, %432
  %527 = phi i64 [ 1, %461 ], [ 1, %440 ], [ 1, %432 ], [ %496, %524 ]
  br label %528

528:                                              ; preds = %526, %528
  %529 = phi i64 [ %543, %528 ], [ %527, %526 ]
  %530 = sub nsw i64 %433, %529
  %531 = add nsw i64 %530, %434
  %532 = getelementptr inbounds double, double* %2, i64 %531
  %533 = load double, double* %532, align 8
  %534 = add nuw nsw i64 %529, %433
  %535 = getelementptr inbounds double, double* %2, i64 %534
  %536 = load double, double* %535, align 8
  %537 = fadd double %533, %536
  %538 = getelementptr inbounds double, double* %2, i64 %529
  store double %537, double* %538, align 8
  %539 = load double, double* %532, align 8
  %540 = load double, double* %535, align 8
  %541 = fsub double %539, %540
  %542 = getelementptr inbounds double, double* %2, i64 %530
  store double %541, double* %542, align 8
  %543 = add nuw nsw i64 %529, 1
  %544 = icmp ult i64 %543, %435
  br i1 %544, label %528, label %545, !llvm.loop !41

545:                                              ; preds = %528, %524
  %546 = add nuw nsw i32 %282, %280
  %547 = zext i32 %546 to i64
  %548 = getelementptr inbounds double, double* %2, i64 %547
  %549 = bitcast double* %548 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %240, align 8
  br i1 %283, label %279, label %551

551:                                              ; preds = %545, %426
  %552 = phi i64 [ %431, %426 ], [ %550, %545 ]
  %553 = sext i32 %425 to i64
  br label %554

554:                                              ; preds = %232, %551
  %555 = phi i64 [ %234, %232 ], [ %552, %551 ]
  %556 = phi i64 [ 2, %232 ], [ %553, %551 ]
  %557 = getelementptr inbounds double, double* %1, i64 %556
  %558 = bitcast double* %557 to i64*
  store i64 %555, i64* %558, align 8
  br label %559

559:                                              ; preds = %554, %48
  store double 0.000000e+00, double* %1, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @atan(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @makeipt(i32, i32* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 16, i32* %4, align 4
  %5 = icmp sgt i32 %0, 32
  br i1 %5, label %6, label %110

6:                                                ; preds = %2, %107
  %7 = phi i32 [ %9, %107 ], [ 2, %2 ]
  %8 = phi i32 [ %108, %107 ], [ %0, %2 ]
  %9 = shl i32 %7, 1
  %10 = shl i32 %7, 4
  %11 = icmp slt i32 %7, %9
  br i1 %11, label %12, label %107

12:                                               ; preds = %6
  %13 = sext i32 %7 to i64
  %14 = sext i32 %9 to i64
  %15 = sub nsw i64 %14, %13
  %16 = icmp ult i64 %15, 8
  br i1 %16, label %67, label %17

17:                                               ; preds = %12
  %18 = shl nsw i64 %13, 1
  %19 = getelementptr i32, i32* %1, i64 %18
  %20 = add nsw i64 %13, %14
  %21 = getelementptr i32, i32* %1, i64 %20
  %22 = shl nsw i64 %14, 1
  %23 = getelementptr i32, i32* %1, i64 %22
  %24 = getelementptr i32, i32* %1, i64 %13
  %25 = getelementptr i32, i32* %1, i64 %14
  %26 = icmp ult i32* %19, %25
  %27 = icmp ult i32* %24, %21
  %28 = and i1 %26, %27
  %29 = icmp ult i32* %21, %25
  %30 = icmp ult i32* %24, %23
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %67, label %33

33:                                               ; preds = %17
  %34 = and i64 %15, -8
  %35 = add nsw i64 %34, %13
  %36 = insertelement <4 x i32> undef, i32 %10, i32 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = insertelement <4 x i32> undef, i32 %10, i32 0
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %40

40:                                               ; preds = %40, %33
  %41 = phi i64 [ 0, %33 ], [ %63, %40 ]
  %42 = add i64 %41, %13
  %43 = getelementptr inbounds i32, i32* %1, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !alias.scope !42
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !alias.scope !42
  %49 = shl <4 x i32> %45, <i32 2, i32 2, i32 2, i32 2>
  %50 = shl <4 x i32> %48, <i32 2, i32 2, i32 2, i32 2>
  %51 = add nsw i64 %42, %13
  %52 = getelementptr inbounds i32, i32* %1, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %49, <4 x i32>* %53, align 4, !alias.scope !45, !noalias !47
  %54 = getelementptr inbounds i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %55, align 4, !alias.scope !45, !noalias !47
  %56 = add nsw <4 x i32> %49, %37
  %57 = add nsw <4 x i32> %50, %39
  %58 = add nsw i64 %42, %14
  %59 = getelementptr inbounds i32, i32* %1, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %56, <4 x i32>* %60, align 4, !alias.scope !49, !noalias !42
  %61 = getelementptr inbounds i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %62, align 4, !alias.scope !49, !noalias !42
  %63 = add i64 %41, 8
  %64 = icmp eq i64 %63, %34
  br i1 %64, label %65, label %40, !llvm.loop !50

65:                                               ; preds = %40
  %66 = icmp eq i64 %15, %34
  br i1 %66, label %107, label %67

67:                                               ; preds = %65, %17, %12
  %68 = phi i64 [ %13, %17 ], [ %13, %12 ], [ %35, %65 ]
  %69 = xor i64 %68, -1
  %70 = and i64 %68, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %82, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds i32, i32* %1, i64 %68
  %74 = load i32, i32* %73, align 4
  %75 = shl i32 %74, 2
  %76 = add nsw i64 %68, %13
  %77 = getelementptr inbounds i32, i32* %1, i64 %76
  store i32 %75, i32* %77, align 4
  %78 = add nsw i32 %75, %10
  %79 = add nsw i64 %68, %14
  %80 = getelementptr inbounds i32, i32* %1, i64 %79
  store i32 %78, i32* %80, align 4
  %81 = add nsw i64 %68, 1
  br label %82

82:                                               ; preds = %72, %67
  %83 = phi i64 [ %81, %72 ], [ %68, %67 ]
  %84 = sub nsw i64 0, %14
  %85 = icmp eq i64 %69, %84
  br i1 %85, label %107, label %86

86:                                               ; preds = %82, %86
  %87 = phi i64 [ %105, %86 ], [ %83, %82 ]
  %88 = getelementptr inbounds i32, i32* %1, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = shl i32 %89, 2
  %91 = add nsw i64 %87, %13
  %92 = getelementptr inbounds i32, i32* %1, i64 %91
  store i32 %90, i32* %92, align 4
  %93 = add nsw i32 %90, %10
  %94 = add nsw i64 %87, %14
  %95 = getelementptr inbounds i32, i32* %1, i64 %94
  store i32 %93, i32* %95, align 4
  %96 = add nsw i64 %87, 1
  %97 = getelementptr inbounds i32, i32* %1, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = shl i32 %98, 2
  %100 = add nsw i64 %96, %13
  %101 = getelementptr inbounds i32, i32* %1, i64 %100
  store i32 %99, i32* %101, align 4
  %102 = add nsw i32 %99, %10
  %103 = add nsw i64 %96, %14
  %104 = getelementptr inbounds i32, i32* %1, i64 %103
  store i32 %102, i32* %104, align 4
  %105 = add nsw i64 %87, 2
  %106 = icmp eq i64 %105, %14
  br i1 %106, label %107, label %86, !llvm.loop !51

107:                                              ; preds = %82, %86, %65, %6
  %108 = ashr i32 %8, 2
  %109 = icmp sgt i32 %8, 131
  br i1 %109, label %6, label %110

110:                                              ; preds = %107, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftf1st(i32, double*, double* nocapture readonly) local_unnamed_addr #1 {
  %4 = ashr i32 %0, 3
  %5 = shl nsw i32 %4, 1
  %6 = shl nsw i32 %4, 2
  %7 = mul nsw i32 %4, 6
  %8 = sext i32 %6 to i64
  %9 = getelementptr inbounds double, double* %1, i64 %8
  %10 = bitcast double* %1 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = bitcast double* %9 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fadd <2 x double> %11, %13
  %15 = fsub <2 x double> %11, %13
  %16 = sext i32 %5 to i64
  %17 = getelementptr inbounds double, double* %1, i64 %16
  %18 = sext i32 %7 to i64
  %19 = getelementptr inbounds double, double* %1, i64 %18
  %20 = bitcast double* %17 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  %22 = bitcast double* %19 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = fadd <2 x double> %21, %23
  %25 = fsub <2 x double> %21, %23
  %26 = shufflevector <2 x double> %25, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %27 = fadd <2 x double> %14, %24
  %28 = bitcast double* %1 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 8
  %29 = fsub <2 x double> %14, %24
  %30 = bitcast double* %17 to <2 x double>*
  store <2 x double> %29, <2 x double>* %30, align 8
  %31 = fsub <2 x double> %15, %26
  %32 = fadd <2 x double> %15, %26
  %33 = shufflevector <2 x double> %31, <2 x double> %32, <2 x i32> <i32 0, i32 3>
  %34 = bitcast double* %9 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 8
  %35 = fadd <2 x double> %15, %26
  %36 = fsub <2 x double> %15, %26
  %37 = shufflevector <2 x double> %35, <2 x double> %36, <2 x i32> <i32 0, i32 3>
  %38 = bitcast double* %19 to <2 x double>*
  store <2 x double> %37, <2 x double>* %38, align 8
  %39 = getelementptr inbounds double, double* %2, i64 1
  %40 = load double, double* %39, align 8
  %41 = getelementptr inbounds double, double* %2, i64 2
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds double, double* %2, i64 3
  %44 = load double, double* %43, align 8
  %45 = add nsw i32 %4, -2
  %46 = icmp sgt i32 %45, 2
  %47 = sext i32 %45 to i64
  br i1 %46, label %48, label %311

48:                                               ; preds = %3, %48
  %49 = phi i64 [ %308, %48 ], [ 2, %3 ]
  %50 = phi i64 [ %56, %48 ], [ 0, %3 ]
  %51 = phi double [ %74, %48 ], [ 0.000000e+00, %3 ]
  %52 = phi double [ %71, %48 ], [ 1.000000e+00, %3 ]
  %53 = phi double [ %63, %48 ], [ 0.000000e+00, %3 ]
  %54 = phi double [ %58, %48 ], [ 1.000000e+00, %3 ]
  %55 = phi i32 [ %309, %48 ], [ 2, %3 ]
  %56 = add nuw nsw i64 %50, 4
  %57 = getelementptr inbounds double, double* %2, i64 %56
  %58 = load double, double* %57, align 8
  %59 = fadd double %54, %58
  %60 = fmul double %42, %59
  %61 = add nuw nsw i64 %50, 5
  %62 = getelementptr inbounds double, double* %2, i64 %61
  %63 = load double, double* %62, align 8
  %64 = fadd double %53, %63
  %65 = fmul double %42, %64
  %66 = add nuw nsw i64 %50, 6
  %67 = getelementptr inbounds double, double* %2, i64 %66
  %68 = bitcast double* %67 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %71 = extractelement <2 x double> %69, i32 0
  %72 = fadd double %52, %71
  %73 = fmul double %44, %72
  %74 = extractelement <2 x double> %69, i32 1
  %75 = fadd double %51, %74
  %76 = fmul double %44, %75
  %77 = add nsw i64 %49, %16
  %78 = add nsw i32 %55, %5
  %79 = add nsw i64 %77, %16
  %80 = add nsw i32 %78, %5
  %81 = add nsw i64 %79, %16
  %82 = add nsw i32 %80, %5
  %83 = getelementptr inbounds double, double* %1, i64 %49
  %84 = getelementptr inbounds double, double* %1, i64 %79
  %85 = load double, double* %84, align 8
  %86 = bitcast double* %83 to <2 x double>*
  %87 = load <2 x double>, <2 x double>* %86, align 8
  %88 = or i32 %80, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %1, i64 %89
  %91 = load double, double* %90, align 8
  %92 = insertelement <2 x double> undef, double %85, i32 0
  %93 = insertelement <2 x double> %92, double %91, i32 1
  %94 = fadd <2 x double> %87, %93
  %95 = extractelement <2 x double> %87, i32 0
  %96 = fsub double %95, %85
  %97 = extractelement <2 x double> %87, i32 1
  %98 = fsub double %97, %91
  %99 = add nuw nsw i64 %49, 2
  %100 = getelementptr inbounds double, double* %1, i64 %99
  %101 = add nsw i64 %79, 2
  %102 = getelementptr inbounds double, double* %1, i64 %101
  %103 = bitcast double* %100 to <2 x double>*
  %104 = load <2 x double>, <2 x double>* %103, align 8
  %105 = bitcast double* %102 to <2 x double>*
  %106 = load <2 x double>, <2 x double>* %105, align 8
  %107 = fadd <2 x double> %104, %106
  %108 = fsub <2 x double> %104, %106
  %109 = getelementptr inbounds double, double* %1, i64 %77
  %110 = getelementptr inbounds double, double* %1, i64 %81
  %111 = load double, double* %110, align 8
  %112 = bitcast double* %109 to <2 x double>*
  %113 = load <2 x double>, <2 x double>* %112, align 8
  %114 = or i32 %82, 1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %1, i64 %115
  %117 = load double, double* %116, align 8
  %118 = insertelement <2 x double> undef, double %111, i32 0
  %119 = insertelement <2 x double> %118, double %117, i32 1
  %120 = fadd <2 x double> %113, %119
  %121 = extractelement <2 x double> %113, i32 0
  %122 = fsub double %121, %111
  %123 = extractelement <2 x double> %113, i32 1
  %124 = fsub double %123, %117
  %125 = add nsw i64 %77, 2
  %126 = getelementptr inbounds double, double* %1, i64 %125
  %127 = add nsw i64 %81, 2
  %128 = getelementptr inbounds double, double* %1, i64 %127
  %129 = bitcast double* %126 to <2 x double>*
  %130 = load <2 x double>, <2 x double>* %129, align 8
  %131 = bitcast double* %128 to <2 x double>*
  %132 = load <2 x double>, <2 x double>* %131, align 8
  %133 = fadd <2 x double> %130, %132
  %134 = fsub <2 x double> %130, %132
  %135 = shufflevector <2 x double> %134, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %136 = fadd <2 x double> %94, %120
  %137 = bitcast double* %83 to <2 x double>*
  store <2 x double> %136, <2 x double>* %137, align 8
  %138 = fadd <2 x double> %107, %133
  %139 = bitcast double* %100 to <2 x double>*
  store <2 x double> %138, <2 x double>* %139, align 8
  %140 = fsub <2 x double> %94, %120
  %141 = bitcast double* %109 to <2 x double>*
  store <2 x double> %140, <2 x double>* %141, align 8
  %142 = fsub <2 x double> %107, %133
  %143 = bitcast double* %126 to <2 x double>*
  store <2 x double> %142, <2 x double>* %143, align 8
  %144 = fsub double %96, %124
  %145 = fadd double %98, %122
  %146 = fmul double %60, %144
  %147 = fmul double %65, %145
  %148 = fsub double %146, %147
  store double %148, double* %84, align 8
  %149 = fmul double %60, %145
  %150 = fmul double %65, %144
  %151 = fadd double %149, %150
  store double %151, double* %90, align 8
  %152 = fsub <2 x double> %108, %135
  %153 = fadd <2 x double> %108, %135
  %154 = shufflevector <2 x double> %152, <2 x double> %153, <2 x i32> <i32 0, i32 3>
  %155 = insertelement <2 x double> undef, double %58, i32 0
  %156 = shufflevector <2 x double> %155, <2 x double> undef, <2 x i32> zeroinitializer
  %157 = fmul <2 x double> %156, %154
  %158 = insertelement <2 x double> undef, double %63, i32 0
  %159 = shufflevector <2 x double> %158, <2 x double> undef, <2 x i32> zeroinitializer
  %160 = shufflevector <2 x double> %153, <2 x double> %152, <2 x i32> <i32 1, i32 2>
  %161 = fmul <2 x double> %159, %160
  %162 = fsub <2 x double> %157, %161
  %163 = fadd <2 x double> %157, %161
  %164 = shufflevector <2 x double> %162, <2 x double> %163, <2 x i32> <i32 0, i32 3>
  %165 = bitcast double* %102 to <2 x double>*
  store <2 x double> %164, <2 x double>* %165, align 8
  %166 = fadd double %96, %124
  %167 = fsub double %98, %122
  %168 = fmul double %73, %166
  %169 = fmul double %76, %167
  %170 = fadd double %169, %168
  store double %170, double* %110, align 8
  %171 = fmul double %73, %167
  %172 = fmul double %76, %166
  %173 = fsub double %171, %172
  store double %173, double* %116, align 8
  %174 = extractelement <2 x double> %108, i32 0
  %175 = extractelement <2 x double> %134, i32 1
  %176 = fadd double %174, %175
  %177 = extractelement <2 x double> %108, i32 1
  %178 = extractelement <2 x double> %134, i32 0
  %179 = fsub double %177, %178
  %180 = insertelement <2 x double> undef, double %179, i32 0
  %181 = shufflevector <2 x double> %180, <2 x double> undef, <2 x i32> zeroinitializer
  %182 = fmul <2 x double> %70, %181
  %183 = insertelement <2 x double> undef, double %176, i32 0
  %184 = shufflevector <2 x double> %183, <2 x double> undef, <2 x i32> zeroinitializer
  %185 = fmul <2 x double> %69, %184
  %186 = fadd <2 x double> %182, %185
  %187 = fsub <2 x double> %182, %185
  %188 = shufflevector <2 x double> %186, <2 x double> %187, <2 x i32> <i32 0, i32 3>
  %189 = bitcast double* %128 to <2 x double>*
  store <2 x double> %188, <2 x double>* %189, align 8
  %190 = sub nsw i64 %16, %49
  %191 = sub nsw i32 %5, %55
  %192 = add nsw i64 %190, %16
  %193 = add nsw i32 %191, %5
  %194 = add nsw i64 %192, %16
  %195 = add nsw i32 %193, %5
  %196 = add nsw i64 %194, %16
  %197 = add nsw i32 %195, %5
  %198 = getelementptr inbounds double, double* %1, i64 %190
  %199 = getelementptr inbounds double, double* %1, i64 %194
  %200 = load double, double* %199, align 8
  %201 = bitcast double* %198 to <2 x double>*
  %202 = load <2 x double>, <2 x double>* %201, align 8
  %203 = or i32 %195, 1
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds double, double* %1, i64 %204
  %206 = load double, double* %205, align 8
  %207 = insertelement <2 x double> undef, double %200, i32 0
  %208 = insertelement <2 x double> %207, double %206, i32 1
  %209 = fadd <2 x double> %202, %208
  %210 = extractelement <2 x double> %202, i32 0
  %211 = fsub double %210, %200
  %212 = extractelement <2 x double> %202, i32 1
  %213 = fsub double %212, %206
  %214 = add nsw i64 %190, -2
  %215 = getelementptr inbounds double, double* %1, i64 %214
  %216 = add nsw i64 %194, -2
  %217 = getelementptr inbounds double, double* %1, i64 %216
  %218 = bitcast double* %215 to <2 x double>*
  %219 = load <2 x double>, <2 x double>* %218, align 8
  %220 = bitcast double* %217 to <2 x double>*
  %221 = load <2 x double>, <2 x double>* %220, align 8
  %222 = fadd <2 x double> %219, %221
  %223 = fsub <2 x double> %219, %221
  %224 = getelementptr inbounds double, double* %1, i64 %192
  %225 = load double, double* %224, align 8
  %226 = getelementptr inbounds double, double* %1, i64 %196
  %227 = load double, double* %226, align 8
  %228 = or i32 %193, 1
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %1, i64 %229
  %231 = load double, double* %230, align 8
  %232 = or i32 %197, 1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds double, double* %1, i64 %233
  %235 = load double, double* %234, align 8
  %236 = insertelement <2 x double> undef, double %225, i32 0
  %237 = insertelement <2 x double> %236, double %231, i32 1
  %238 = insertelement <2 x double> undef, double %227, i32 0
  %239 = insertelement <2 x double> %238, double %235, i32 1
  %240 = fadd <2 x double> %237, %239
  %241 = fsub double %225, %227
  %242 = fsub double %231, %235
  %243 = add nsw i64 %192, -2
  %244 = getelementptr inbounds double, double* %1, i64 %243
  %245 = add nsw i64 %196, -2
  %246 = getelementptr inbounds double, double* %1, i64 %245
  %247 = bitcast double* %244 to <2 x double>*
  %248 = load <2 x double>, <2 x double>* %247, align 8
  %249 = bitcast double* %246 to <2 x double>*
  %250 = load <2 x double>, <2 x double>* %249, align 8
  %251 = fadd <2 x double> %248, %250
  %252 = fsub <2 x double> %248, %250
  %253 = shufflevector <2 x double> %252, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %254 = fadd <2 x double> %209, %240
  %255 = bitcast double* %198 to <2 x double>*
  store <2 x double> %254, <2 x double>* %255, align 8
  %256 = fadd <2 x double> %222, %251
  %257 = bitcast double* %215 to <2 x double>*
  store <2 x double> %256, <2 x double>* %257, align 8
  %258 = extractelement <2 x double> %209, i32 0
  %259 = extractelement <2 x double> %240, i32 0
  %260 = fsub double %258, %259
  store double %260, double* %224, align 8
  %261 = extractelement <2 x double> %209, i32 1
  %262 = extractelement <2 x double> %240, i32 1
  %263 = fsub double %261, %262
  store double %263, double* %230, align 8
  %264 = fsub <2 x double> %222, %251
  %265 = bitcast double* %244 to <2 x double>*
  store <2 x double> %264, <2 x double>* %265, align 8
  %266 = fsub double %211, %242
  %267 = fadd double %213, %241
  %268 = fmul double %65, %266
  %269 = fmul double %60, %267
  %270 = fsub double %268, %269
  store double %270, double* %199, align 8
  %271 = fmul double %65, %267
  %272 = fmul double %60, %266
  %273 = fadd double %271, %272
  store double %273, double* %205, align 8
  %274 = fsub <2 x double> %223, %253
  %275 = fadd <2 x double> %223, %253
  %276 = shufflevector <2 x double> %274, <2 x double> %275, <2 x i32> <i32 0, i32 3>
  %277 = fmul <2 x double> %159, %276
  %278 = shufflevector <2 x double> %275, <2 x double> %274, <2 x i32> <i32 1, i32 2>
  %279 = fmul <2 x double> %156, %278
  %280 = fsub <2 x double> %277, %279
  %281 = fadd <2 x double> %277, %279
  %282 = shufflevector <2 x double> %280, <2 x double> %281, <2 x i32> <i32 0, i32 3>
  %283 = bitcast double* %217 to <2 x double>*
  store <2 x double> %282, <2 x double>* %283, align 8
  %284 = fadd double %211, %242
  %285 = fsub double %213, %241
  %286 = fmul double %76, %284
  %287 = fmul double %73, %285
  %288 = fadd double %287, %286
  store double %288, double* %226, align 8
  %289 = fmul double %76, %285
  %290 = fmul double %73, %284
  %291 = fsub double %289, %290
  store double %291, double* %234, align 8
  %292 = extractelement <2 x double> %223, i32 0
  %293 = extractelement <2 x double> %252, i32 1
  %294 = fadd double %292, %293
  %295 = extractelement <2 x double> %223, i32 1
  %296 = extractelement <2 x double> %252, i32 0
  %297 = fsub double %295, %296
  %298 = insertelement <2 x double> undef, double %297, i32 0
  %299 = shufflevector <2 x double> %298, <2 x double> undef, <2 x i32> zeroinitializer
  %300 = fmul <2 x double> %69, %299
  %301 = insertelement <2 x double> undef, double %294, i32 0
  %302 = shufflevector <2 x double> %301, <2 x double> undef, <2 x i32> zeroinitializer
  %303 = fmul <2 x double> %70, %302
  %304 = fadd <2 x double> %300, %303
  %305 = fsub <2 x double> %300, %303
  %306 = shufflevector <2 x double> %304, <2 x double> %305, <2 x i32> <i32 0, i32 3>
  %307 = bitcast double* %246 to <2 x double>*
  store <2 x double> %306, <2 x double>* %307, align 8
  %308 = add nuw nsw i64 %49, 4
  %309 = add nuw nsw i32 %55, 4
  %310 = icmp slt i64 %308, %47
  br i1 %310, label %48, label %311

311:                                              ; preds = %48, %3
  %312 = phi double [ 1.000000e+00, %3 ], [ %58, %48 ]
  %313 = phi double [ 0.000000e+00, %3 ], [ %63, %48 ]
  %314 = phi <2 x double> [ <double 0.000000e+00, double 1.000000e+00>, %3 ], [ %70, %48 ]
  %315 = fadd double %40, %312
  %316 = fmul double %42, %315
  %317 = fadd double %40, %313
  %318 = fmul double %42, %317
  %319 = insertelement <2 x double> undef, double %40, i32 0
  %320 = shufflevector <2 x double> %319, <2 x double> undef, <2 x i32> zeroinitializer
  %321 = fsub <2 x double> %314, %320
  %322 = insertelement <2 x double> undef, double %44, i32 0
  %323 = shufflevector <2 x double> %322, <2 x double> undef, <2 x i32> zeroinitializer
  %324 = fmul <2 x double> %323, %321
  %325 = mul nsw i32 %4, 3
  %326 = mul nsw i32 %4, 5
  %327 = mul nsw i32 %4, 7
  %328 = getelementptr inbounds double, double* %1, i64 %47
  %329 = add nsw i32 %326, -2
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds double, double* %1, i64 %330
  %332 = bitcast double* %328 to <2 x double>*
  %333 = load <2 x double>, <2 x double>* %332, align 8
  %334 = bitcast double* %331 to <2 x double>*
  %335 = load <2 x double>, <2 x double>* %334, align 8
  %336 = fadd <2 x double> %333, %335
  %337 = fsub <2 x double> %333, %335
  %338 = add nsw i32 %325, -2
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds double, double* %1, i64 %339
  %341 = add nsw i32 %327, -2
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds double, double* %1, i64 %342
  %344 = bitcast double* %340 to <2 x double>*
  %345 = load <2 x double>, <2 x double>* %344, align 8
  %346 = bitcast double* %343 to <2 x double>*
  %347 = load <2 x double>, <2 x double>* %346, align 8
  %348 = fadd <2 x double> %345, %347
  %349 = fsub <2 x double> %345, %347
  %350 = shufflevector <2 x double> %349, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %351 = fadd <2 x double> %336, %348
  %352 = bitcast double* %328 to <2 x double>*
  store <2 x double> %351, <2 x double>* %352, align 8
  %353 = fsub <2 x double> %336, %348
  %354 = bitcast double* %340 to <2 x double>*
  store <2 x double> %353, <2 x double>* %354, align 8
  %355 = fsub <2 x double> %337, %350
  %356 = fadd <2 x double> %337, %350
  %357 = shufflevector <2 x double> %355, <2 x double> %356, <2 x i32> <i32 0, i32 3>
  %358 = insertelement <2 x double> undef, double %316, i32 0
  %359 = shufflevector <2 x double> %358, <2 x double> undef, <2 x i32> zeroinitializer
  %360 = fmul <2 x double> %359, %357
  %361 = insertelement <2 x double> undef, double %318, i32 0
  %362 = shufflevector <2 x double> %361, <2 x double> undef, <2 x i32> zeroinitializer
  %363 = shufflevector <2 x double> %356, <2 x double> %355, <2 x i32> <i32 1, i32 2>
  %364 = fmul <2 x double> %362, %363
  %365 = fsub <2 x double> %360, %364
  %366 = fadd <2 x double> %360, %364
  %367 = shufflevector <2 x double> %365, <2 x double> %366, <2 x i32> <i32 0, i32 3>
  %368 = bitcast double* %331 to <2 x double>*
  store <2 x double> %367, <2 x double>* %368, align 8
  %369 = extractelement <2 x double> %337, i32 0
  %370 = extractelement <2 x double> %349, i32 1
  %371 = fadd double %369, %370
  %372 = extractelement <2 x double> %337, i32 1
  %373 = extractelement <2 x double> %349, i32 0
  %374 = fsub double %372, %373
  %375 = insertelement <2 x double> undef, double %374, i32 0
  %376 = shufflevector <2 x double> %375, <2 x double> undef, <2 x i32> zeroinitializer
  %377 = fmul <2 x double> %324, %376
  %378 = shufflevector <2 x double> %324, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %379 = insertelement <2 x double> undef, double %371, i32 0
  %380 = shufflevector <2 x double> %379, <2 x double> undef, <2 x i32> zeroinitializer
  %381 = fmul <2 x double> %378, %380
  %382 = fadd <2 x double> %377, %381
  %383 = fsub <2 x double> %377, %381
  %384 = shufflevector <2 x double> %382, <2 x double> %383, <2 x i32> <i32 0, i32 3>
  %385 = bitcast double* %343 to <2 x double>*
  store <2 x double> %384, <2 x double>* %385, align 8
  %386 = sext i32 %4 to i64
  %387 = getelementptr inbounds double, double* %1, i64 %386
  %388 = sext i32 %326 to i64
  %389 = getelementptr inbounds double, double* %1, i64 %388
  %390 = bitcast double* %387 to <2 x double>*
  %391 = load <2 x double>, <2 x double>* %390, align 8
  %392 = add nsw i32 %326, 1
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds double, double* %1, i64 %393
  %395 = bitcast double* %389 to <2 x double>*
  %396 = load <2 x double>, <2 x double>* %395, align 8
  %397 = fadd <2 x double> %391, %396
  %398 = extractelement <2 x double> %391, i32 0
  %399 = extractelement <2 x double> %396, i32 0
  %400 = fsub double %398, %399
  %401 = extractelement <2 x double> %391, i32 1
  %402 = extractelement <2 x double> %396, i32 1
  %403 = fsub double %401, %402
  %404 = sext i32 %325 to i64
  %405 = getelementptr inbounds double, double* %1, i64 %404
  %406 = sext i32 %327 to i64
  %407 = getelementptr inbounds double, double* %1, i64 %406
  %408 = bitcast double* %405 to <2 x double>*
  %409 = load <2 x double>, <2 x double>* %408, align 8
  %410 = add nsw i32 %327, 1
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds double, double* %1, i64 %411
  %413 = bitcast double* %407 to <2 x double>*
  %414 = load <2 x double>, <2 x double>* %413, align 8
  %415 = fadd <2 x double> %409, %414
  %416 = extractelement <2 x double> %409, i32 0
  %417 = extractelement <2 x double> %414, i32 0
  %418 = fsub double %416, %417
  %419 = extractelement <2 x double> %409, i32 1
  %420 = extractelement <2 x double> %414, i32 1
  %421 = fsub double %419, %420
  %422 = fadd <2 x double> %397, %415
  %423 = bitcast double* %387 to <2 x double>*
  store <2 x double> %422, <2 x double>* %423, align 8
  %424 = fsub <2 x double> %397, %415
  %425 = bitcast double* %405 to <2 x double>*
  store <2 x double> %424, <2 x double>* %425, align 8
  %426 = fsub double %400, %421
  %427 = fadd double %403, %418
  %428 = fsub double %426, %427
  %429 = fmul double %40, %428
  store double %429, double* %389, align 8
  %430 = fadd double %427, %426
  %431 = fmul double %40, %430
  store double %431, double* %394, align 8
  %432 = fadd double %400, %421
  %433 = fsub double %403, %418
  %434 = fsub double -0.000000e+00, %40
  %435 = fadd double %433, %432
  %436 = fmul double %435, %434
  store double %436, double* %407, align 8
  %437 = fsub double %433, %432
  %438 = fmul double %437, %434
  store double %438, double* %412, align 8
  %439 = add nsw i32 %4, 2
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds double, double* %1, i64 %440
  %442 = add nsw i32 %326, 2
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds double, double* %1, i64 %443
  %445 = bitcast double* %441 to <2 x double>*
  %446 = load <2 x double>, <2 x double>* %445, align 8
  %447 = bitcast double* %444 to <2 x double>*
  %448 = load <2 x double>, <2 x double>* %447, align 8
  %449 = fadd <2 x double> %446, %448
  %450 = fsub <2 x double> %446, %448
  %451 = add nsw i32 %325, 2
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds double, double* %1, i64 %452
  %454 = add nsw i32 %327, 2
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds double, double* %1, i64 %455
  %457 = bitcast double* %453 to <2 x double>*
  %458 = load <2 x double>, <2 x double>* %457, align 8
  %459 = bitcast double* %456 to <2 x double>*
  %460 = load <2 x double>, <2 x double>* %459, align 8
  %461 = fadd <2 x double> %458, %460
  %462 = fsub <2 x double> %458, %460
  %463 = shufflevector <2 x double> %462, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %464 = fadd <2 x double> %449, %461
  %465 = bitcast double* %441 to <2 x double>*
  store <2 x double> %464, <2 x double>* %465, align 8
  %466 = fsub <2 x double> %449, %461
  %467 = bitcast double* %453 to <2 x double>*
  store <2 x double> %466, <2 x double>* %467, align 8
  %468 = fsub <2 x double> %450, %463
  %469 = fadd <2 x double> %450, %463
  %470 = shufflevector <2 x double> %468, <2 x double> %469, <2 x i32> <i32 0, i32 3>
  %471 = fmul <2 x double> %362, %470
  %472 = shufflevector <2 x double> %469, <2 x double> %468, <2 x i32> <i32 1, i32 2>
  %473 = fmul <2 x double> %359, %472
  %474 = fsub <2 x double> %471, %473
  %475 = fadd <2 x double> %471, %473
  %476 = shufflevector <2 x double> %474, <2 x double> %475, <2 x i32> <i32 0, i32 3>
  %477 = bitcast double* %444 to <2 x double>*
  store <2 x double> %476, <2 x double>* %477, align 8
  %478 = extractelement <2 x double> %450, i32 0
  %479 = extractelement <2 x double> %462, i32 1
  %480 = fadd double %478, %479
  %481 = extractelement <2 x double> %450, i32 1
  %482 = extractelement <2 x double> %462, i32 0
  %483 = fsub double %481, %482
  %484 = shufflevector <2 x double> %324, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %485 = insertelement <2 x double> undef, double %483, i32 0
  %486 = shufflevector <2 x double> %485, <2 x double> undef, <2 x i32> zeroinitializer
  %487 = fmul <2 x double> %484, %486
  %488 = insertelement <2 x double> undef, double %480, i32 0
  %489 = shufflevector <2 x double> %488, <2 x double> undef, <2 x i32> zeroinitializer
  %490 = fmul <2 x double> %324, %489
  %491 = fadd <2 x double> %487, %490
  %492 = fsub <2 x double> %487, %490
  %493 = shufflevector <2 x double> %491, <2 x double> %492, <2 x i32> <i32 0, i32 3>
  %494 = bitcast double* %456 to <2 x double>*
  store <2 x double> %493, <2 x double>* %494, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftrec4(i32, double*, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %0, 512
  br i1 %5, label %6, label %17

6:                                                ; preds = %4, %6
  %7 = phi i32 [ %8, %6 ], [ %0, %4 ]
  %8 = lshr i32 %7, 2
  %9 = sub nsw i32 %0, %8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds double, double* %1, i64 %10
  %12 = lshr i32 %7, 3
  %13 = sub nsw i32 %2, %12
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds double, double* %3, i64 %14
  tail call void @cftmdl1(i32 %8, double* %11, double* %15)
  %16 = icmp ugt i32 %7, 2051
  br i1 %16, label %6, label %17

17:                                               ; preds = %6, %4
  %18 = phi i32 [ %0, %4 ], [ %8, %6 ]
  %19 = sub nsw i32 %0, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double, double* %1, i64 %20
  tail call void @cftleaf(i32 %18, i32 1, double* %21, i32 %2, double* %3)
  %22 = icmp sgt i32 %19, 0
  br i1 %22, label %23, label %32

23:                                               ; preds = %17, %23
  %24 = phi i32 [ %26, %23 ], [ 0, %17 ]
  %25 = phi i32 [ %28, %23 ], [ %19, %17 ]
  %26 = add nuw nsw i32 %24, 1
  %27 = tail call i32 @cfttree(i32 %18, i32 %25, i32 %26, double* %1, i32 %2, double* %3)
  %28 = sub nsw i32 %25, %18
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %1, i64 %29
  tail call void @cftleaf(i32 %18, i32 %27, double* %30, i32 %2, double* %3)
  %31 = icmp sgt i32 %28, 0
  br i1 %31, label %23, label %32

32:                                               ; preds = %23, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftleaf(i32, i32, double*, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %6 = icmp eq i32 %0, 512
  br i1 %6, label %7, label %40

7:                                                ; preds = %5
  %8 = add nsw i32 %3, -64
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds double, double* %4, i64 %9
  tail call void @cftmdl1(i32 128, double* %2, double* %10)
  %11 = add nsw i32 %3, -8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double, double* %4, i64 %12
  tail call void @cftf161(double* %2, double* %13)
  %14 = getelementptr inbounds double, double* %2, i64 32
  %15 = add nsw i32 %3, -32
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds double, double* %4, i64 %16
  tail call void @cftf162(double* %14, double* %17)
  %18 = getelementptr inbounds double, double* %2, i64 64
  tail call void @cftf161(double* %18, double* %13)
  %19 = getelementptr inbounds double, double* %2, i64 96
  tail call void @cftf161(double* %19, double* %13)
  %20 = getelementptr inbounds double, double* %2, i64 128
  %21 = add nsw i32 %3, -128
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %4, i64 %22
  tail call void @cftmdl2(i32 128, double* %20, double* %23)
  tail call void @cftf161(double* %20, double* %13)
  %24 = getelementptr inbounds double, double* %2, i64 160
  tail call void @cftf162(double* %24, double* %17)
  %25 = getelementptr inbounds double, double* %2, i64 192
  tail call void @cftf161(double* %25, double* %13)
  %26 = getelementptr inbounds double, double* %2, i64 224
  tail call void @cftf162(double* %26, double* %17)
  %27 = getelementptr inbounds double, double* %2, i64 256
  tail call void @cftmdl1(i32 128, double* %27, double* %10)
  tail call void @cftf161(double* %27, double* %13)
  %28 = getelementptr inbounds double, double* %2, i64 288
  tail call void @cftf162(double* %28, double* %17)
  %29 = getelementptr inbounds double, double* %2, i64 320
  tail call void @cftf161(double* %29, double* %13)
  %30 = getelementptr inbounds double, double* %2, i64 352
  tail call void @cftf161(double* %30, double* %13)
  %31 = icmp eq i32 %1, 0
  %32 = getelementptr inbounds double, double* %2, i64 384
  br i1 %31, label %35, label %33

33:                                               ; preds = %7
  tail call void @cftmdl1(i32 128, double* %32, double* %10)
  %34 = getelementptr inbounds double, double* %2, i64 480
  tail call void @cftf161(double* %34, double* %13)
  br label %37

35:                                               ; preds = %7
  tail call void @cftmdl2(i32 128, double* %32, double* %23)
  %36 = getelementptr inbounds double, double* %2, i64 480
  tail call void @cftf162(double* %36, double* %17)
  br label %37

37:                                               ; preds = %35, %33
  tail call void @cftf161(double* %32, double* %13)
  %38 = getelementptr inbounds double, double* %2, i64 416
  tail call void @cftf162(double* %38, double* %17)
  %39 = getelementptr inbounds double, double* %2, i64 448
  tail call void @cftf161(double* %39, double* %13)
  br label %70

40:                                               ; preds = %5
  %41 = add nsw i32 %3, -32
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, double* %4, i64 %42
  tail call void @cftmdl1(i32 64, double* %2, double* %43)
  %44 = add nsw i32 %3, -8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %4, i64 %45
  tail call void @cftf081(double* %2, double* %46)
  %47 = getelementptr inbounds double, double* %2, i64 16
  tail call void @cftf082(double* %47, double* %46)
  %48 = getelementptr inbounds double, double* %2, i64 32
  tail call void @cftf081(double* %48, double* %46)
  %49 = getelementptr inbounds double, double* %2, i64 48
  tail call void @cftf081(double* %49, double* %46)
  %50 = getelementptr inbounds double, double* %2, i64 64
  %51 = add nsw i32 %3, -64
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %4, i64 %52
  tail call void @cftmdl2(i32 64, double* %50, double* %53)
  tail call void @cftf081(double* %50, double* %46)
  %54 = getelementptr inbounds double, double* %2, i64 80
  tail call void @cftf082(double* %54, double* %46)
  %55 = getelementptr inbounds double, double* %2, i64 96
  tail call void @cftf081(double* %55, double* %46)
  %56 = getelementptr inbounds double, double* %2, i64 112
  tail call void @cftf082(double* %56, double* %46)
  %57 = getelementptr inbounds double, double* %2, i64 128
  tail call void @cftmdl1(i32 64, double* %57, double* %43)
  tail call void @cftf081(double* %57, double* %46)
  %58 = getelementptr inbounds double, double* %2, i64 144
  tail call void @cftf082(double* %58, double* %46)
  %59 = getelementptr inbounds double, double* %2, i64 160
  tail call void @cftf081(double* %59, double* %46)
  %60 = getelementptr inbounds double, double* %2, i64 176
  tail call void @cftf081(double* %60, double* %46)
  %61 = icmp eq i32 %1, 0
  %62 = getelementptr inbounds double, double* %2, i64 192
  br i1 %61, label %65, label %63

63:                                               ; preds = %40
  tail call void @cftmdl1(i32 64, double* %62, double* %43)
  %64 = getelementptr inbounds double, double* %2, i64 240
  tail call void @cftf081(double* %64, double* %46)
  br label %67

65:                                               ; preds = %40
  tail call void @cftmdl2(i32 64, double* %62, double* %53)
  %66 = getelementptr inbounds double, double* %2, i64 240
  tail call void @cftf082(double* %66, double* %46)
  br label %67

67:                                               ; preds = %65, %63
  tail call void @cftf081(double* %62, double* %46)
  %68 = getelementptr inbounds double, double* %2, i64 208
  tail call void @cftf082(double* %68, double* %46)
  %69 = getelementptr inbounds double, double* %2, i64 224
  tail call void @cftf081(double* %69, double* %46)
  br label %70

70:                                               ; preds = %67, %37
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftfx41(i32, double*, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %5 = icmp eq i32 %0, 128
  %6 = add nsw i32 %2, -8
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds double, double* %3, i64 %7
  br i1 %5, label %9, label %16

9:                                                ; preds = %4
  tail call void @cftf161(double* %1, double* %8)
  %10 = getelementptr inbounds double, double* %1, i64 32
  %11 = add nsw i32 %2, -32
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double, double* %3, i64 %12
  tail call void @cftf162(double* %10, double* %13)
  %14 = getelementptr inbounds double, double* %1, i64 64
  tail call void @cftf161(double* %14, double* %8)
  %15 = getelementptr inbounds double, double* %1, i64 96
  tail call void @cftf161(double* %15, double* %8)
  br label %20

16:                                               ; preds = %4
  tail call void @cftf081(double* %1, double* %8)
  %17 = getelementptr inbounds double, double* %1, i64 16
  tail call void @cftf082(double* %17, double* %8)
  %18 = getelementptr inbounds double, double* %1, i64 32
  tail call void @cftf081(double* %18, double* %8)
  %19 = getelementptr inbounds double, double* %1, i64 48
  tail call void @cftf081(double* %19, double* %8)
  br label %20

20:                                               ; preds = %16, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @bitrv2(i32, i32* nocapture readonly, double*) local_unnamed_addr #1 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i32 [ %0, %3 ], [ %7, %4 ]
  %6 = phi i32 [ 1, %3 ], [ %9, %4 ]
  %7 = ashr i32 %5, 2
  %8 = icmp sgt i32 %5, 35
  %9 = shl i32 %6, 1
  br i1 %8, label %4, label %10

10:                                               ; preds = %4
  %11 = ashr i32 %0, 1
  %12 = shl nsw i32 %6, 2
  %13 = icmp eq i32 %7, 8
  %14 = icmp sgt i32 %6, 0
  br i1 %13, label %19, label %15

15:                                               ; preds = %10
  br i1 %14, label %16, label %717

16:                                               ; preds = %15
  %17 = sext i32 %6 to i64
  %18 = zext i32 %6 to i64
  br label %492

19:                                               ; preds = %10
  br i1 %14, label %20, label %717

20:                                               ; preds = %19
  %21 = shl nsw i32 %6, 3
  %22 = sext i32 %6 to i64
  %23 = zext i32 %6 to i64
  br label %24

24:                                               ; preds = %364, %20
  %25 = phi i64 [ 0, %20 ], [ %490, %364 ]
  %26 = icmp eq i64 %25, 0
  %27 = add nsw i64 %25, %22
  br i1 %26, label %364, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds i32, i32* %1, i64 %27
  %30 = trunc i64 %25 to i32
  %31 = shl nsw i32 %30, 2
  br label %32

32:                                               ; preds = %32, %28
  %33 = phi i64 [ 0, %28 ], [ %362, %32 ]
  %34 = load i32, i32* %29, align 4
  %35 = shl nsw i32 %34, 1
  %36 = trunc i64 %33 to i32
  %37 = shl i32 %36, 2
  %38 = add nsw i32 %35, %37
  %39 = add nsw i64 %33, %22
  %40 = getelementptr inbounds i32, i32* %1, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = shl nsw i32 %41, 1
  %43 = add nsw i32 %42, %31
  %44 = sext i32 %38 to i64
  %45 = getelementptr inbounds double, double* %2, i64 %44
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = or i32 %38, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %2, i64 %49
  %51 = bitcast double* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sext i32 %43 to i64
  %54 = getelementptr inbounds double, double* %2, i64 %53
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = or i32 %43, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds double, double* %2, i64 %58
  %60 = bitcast double* %59 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %56, i64* %46, align 8
  store i64 %61, i64* %51, align 8
  store i64 %47, i64* %55, align 8
  store i64 %52, i64* %60, align 8
  %62 = add nsw i32 %38, %12
  %63 = add nsw i32 %43, %21
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds double, double* %2, i64 %64
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = or i32 %62, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds double, double* %2, i64 %69
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sext i32 %63 to i64
  %74 = getelementptr inbounds double, double* %2, i64 %73
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = or i32 %63, 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double, double* %2, i64 %78
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %76, i64* %66, align 8
  store i64 %81, i64* %71, align 8
  store i64 %67, i64* %75, align 8
  store i64 %72, i64* %80, align 8
  %82 = add nsw i32 %62, %12
  %83 = sub nsw i32 %63, %12
  %84 = sext i32 %82 to i64
  %85 = getelementptr inbounds double, double* %2, i64 %84
  %86 = bitcast double* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = or i32 %82, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %2, i64 %89
  %91 = bitcast double* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sext i32 %83 to i64
  %94 = getelementptr inbounds double, double* %2, i64 %93
  %95 = bitcast double* %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = or i32 %83, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds double, double* %2, i64 %98
  %100 = bitcast double* %99 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %96, i64* %86, align 8
  store i64 %101, i64* %91, align 8
  store i64 %87, i64* %95, align 8
  store i64 %92, i64* %100, align 8
  %102 = add nsw i32 %82, %12
  %103 = add nsw i32 %83, %21
  %104 = sext i32 %102 to i64
  %105 = getelementptr inbounds double, double* %2, i64 %104
  %106 = bitcast double* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = or i32 %102, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds double, double* %2, i64 %109
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = sext i32 %103 to i64
  %114 = getelementptr inbounds double, double* %2, i64 %113
  %115 = bitcast double* %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = or i32 %103, 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds double, double* %2, i64 %118
  %120 = bitcast double* %119 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %116, i64* %106, align 8
  store i64 %121, i64* %111, align 8
  store i64 %107, i64* %115, align 8
  store i64 %112, i64* %120, align 8
  %122 = add nsw i32 %102, %11
  %123 = add nsw i32 %103, 2
  %124 = sext i32 %122 to i64
  %125 = getelementptr inbounds double, double* %2, i64 %124
  %126 = bitcast double* %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = add nsw i32 %122, 1
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds double, double* %2, i64 %129
  %131 = bitcast double* %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sext i32 %123 to i64
  %134 = getelementptr inbounds double, double* %2, i64 %133
  %135 = bitcast double* %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = add nsw i32 %103, 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds double, double* %2, i64 %138
  %140 = bitcast double* %139 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %136, i64* %126, align 8
  store i64 %141, i64* %131, align 8
  store i64 %127, i64* %135, align 8
  store i64 %132, i64* %140, align 8
  %142 = sub nsw i32 %122, %12
  %143 = sub nsw i32 %123, %21
  %144 = sext i32 %142 to i64
  %145 = getelementptr inbounds double, double* %2, i64 %144
  %146 = bitcast double* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = add nsw i32 %142, 1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds double, double* %2, i64 %149
  %151 = bitcast double* %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = sext i32 %143 to i64
  %154 = getelementptr inbounds double, double* %2, i64 %153
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = add nsw i32 %143, 1
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds double, double* %2, i64 %158
  %160 = bitcast double* %159 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %156, i64* %146, align 8
  store i64 %161, i64* %151, align 8
  store i64 %147, i64* %155, align 8
  store i64 %152, i64* %160, align 8
  %162 = sub nsw i32 %142, %12
  %163 = add nsw i32 %143, %12
  %164 = sext i32 %162 to i64
  %165 = getelementptr inbounds double, double* %2, i64 %164
  %166 = bitcast double* %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = add nsw i32 %162, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds double, double* %2, i64 %169
  %171 = bitcast double* %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = sext i32 %163 to i64
  %174 = getelementptr inbounds double, double* %2, i64 %173
  %175 = bitcast double* %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = add nsw i32 %163, 1
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds double, double* %2, i64 %178
  %180 = bitcast double* %179 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %176, i64* %166, align 8
  store i64 %181, i64* %171, align 8
  store i64 %167, i64* %175, align 8
  store i64 %172, i64* %180, align 8
  %182 = sub nsw i32 %162, %12
  %183 = sub nsw i32 %163, %21
  %184 = sext i32 %182 to i64
  %185 = getelementptr inbounds double, double* %2, i64 %184
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = add nsw i32 %182, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds double, double* %2, i64 %189
  %191 = bitcast double* %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = sext i32 %183 to i64
  %194 = getelementptr inbounds double, double* %2, i64 %193
  %195 = bitcast double* %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = add nsw i32 %183, 1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds double, double* %2, i64 %198
  %200 = bitcast double* %199 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %196, i64* %186, align 8
  store i64 %201, i64* %191, align 8
  store i64 %187, i64* %195, align 8
  store i64 %192, i64* %200, align 8
  %202 = add nsw i32 %182, 2
  %203 = add nsw i32 %183, %11
  %204 = sext i32 %202 to i64
  %205 = getelementptr inbounds double, double* %2, i64 %204
  %206 = bitcast double* %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = add nsw i32 %182, 3
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds double, double* %2, i64 %209
  %211 = bitcast double* %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = sext i32 %203 to i64
  %214 = getelementptr inbounds double, double* %2, i64 %213
  %215 = bitcast double* %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = add nsw i32 %203, 1
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds double, double* %2, i64 %218
  %220 = bitcast double* %219 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %216, i64* %206, align 8
  store i64 %221, i64* %211, align 8
  store i64 %207, i64* %215, align 8
  store i64 %212, i64* %220, align 8
  %222 = add i32 %162, 2
  %223 = add i32 %163, %11
  %224 = sext i32 %222 to i64
  %225 = getelementptr inbounds double, double* %2, i64 %224
  %226 = bitcast double* %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = add i32 %162, 3
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %2, i64 %229
  %231 = bitcast double* %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = sext i32 %223 to i64
  %234 = getelementptr inbounds double, double* %2, i64 %233
  %235 = bitcast double* %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = add nsw i32 %223, 1
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds double, double* %2, i64 %238
  %240 = bitcast double* %239 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %236, i64* %226, align 8
  store i64 %241, i64* %231, align 8
  store i64 %227, i64* %235, align 8
  store i64 %232, i64* %240, align 8
  %242 = add i32 %142, 2
  %243 = sub nsw i32 %223, %12
  %244 = sext i32 %242 to i64
  %245 = getelementptr inbounds double, double* %2, i64 %244
  %246 = bitcast double* %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = add i32 %142, 3
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds double, double* %2, i64 %249
  %251 = bitcast double* %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = sext i32 %243 to i64
  %254 = getelementptr inbounds double, double* %2, i64 %253
  %255 = bitcast double* %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = add nsw i32 %243, 1
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double, double* %2, i64 %258
  %260 = bitcast double* %259 to i64*
  %261 = load i64, i64* %260, align 8
  store i64 %256, i64* %246, align 8
  store i64 %261, i64* %251, align 8
  store i64 %247, i64* %255, align 8
  store i64 %252, i64* %260, align 8
  %262 = add i32 %122, 2
  %263 = add nsw i32 %243, %21
  %264 = sext i32 %262 to i64
  %265 = getelementptr inbounds double, double* %2, i64 %264
  %266 = bitcast double* %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = add i32 %122, 3
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds double, double* %2, i64 %269
  %271 = bitcast double* %270 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = sext i32 %263 to i64
  %274 = getelementptr inbounds double, double* %2, i64 %273
  %275 = bitcast double* %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = add nsw i32 %263, 1
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds double, double* %2, i64 %278
  %280 = bitcast double* %279 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %276, i64* %266, align 8
  store i64 %281, i64* %271, align 8
  store i64 %267, i64* %275, align 8
  store i64 %272, i64* %280, align 8
  %282 = sub nsw i32 %262, %11
  %283 = add nsw i32 %263, -2
  %284 = sext i32 %282 to i64
  %285 = getelementptr inbounds double, double* %2, i64 %284
  %286 = bitcast double* %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = add nsw i32 %282, 1
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds double, double* %2, i64 %289
  %291 = bitcast double* %290 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = sext i32 %283 to i64
  %294 = getelementptr inbounds double, double* %2, i64 %293
  %295 = bitcast double* %294 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = add nsw i32 %263, -1
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds double, double* %2, i64 %298
  %300 = bitcast double* %299 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %296, i64* %286, align 8
  store i64 %301, i64* %291, align 8
  store i64 %287, i64* %295, align 8
  store i64 %292, i64* %300, align 8
  %302 = sub nsw i32 %282, %12
  %303 = sub nsw i32 %283, %21
  %304 = sext i32 %302 to i64
  %305 = getelementptr inbounds double, double* %2, i64 %304
  %306 = bitcast double* %305 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = add nsw i32 %302, 1
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds double, double* %2, i64 %309
  %311 = bitcast double* %310 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = sext i32 %303 to i64
  %314 = getelementptr inbounds double, double* %2, i64 %313
  %315 = bitcast double* %314 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = add nsw i32 %303, 1
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds double, double* %2, i64 %318
  %320 = bitcast double* %319 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %316, i64* %306, align 8
  store i64 %321, i64* %311, align 8
  store i64 %307, i64* %315, align 8
  store i64 %312, i64* %320, align 8
  %322 = sub nsw i32 %302, %12
  %323 = add nsw i32 %303, %12
  %324 = sext i32 %322 to i64
  %325 = getelementptr inbounds double, double* %2, i64 %324
  %326 = bitcast double* %325 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = add nsw i32 %322, 1
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds double, double* %2, i64 %329
  %331 = bitcast double* %330 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = sext i32 %323 to i64
  %334 = getelementptr inbounds double, double* %2, i64 %333
  %335 = bitcast double* %334 to i64*
  %336 = load i64, i64* %335, align 8
  %337 = add nsw i32 %323, 1
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds double, double* %2, i64 %338
  %340 = bitcast double* %339 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %336, i64* %326, align 8
  store i64 %341, i64* %331, align 8
  store i64 %327, i64* %335, align 8
  store i64 %332, i64* %340, align 8
  %342 = sub nsw i32 %322, %12
  %343 = sub nsw i32 %323, %21
  %344 = sext i32 %342 to i64
  %345 = getelementptr inbounds double, double* %2, i64 %344
  %346 = bitcast double* %345 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = add nsw i32 %342, 1
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds double, double* %2, i64 %349
  %351 = bitcast double* %350 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = sext i32 %343 to i64
  %354 = getelementptr inbounds double, double* %2, i64 %353
  %355 = bitcast double* %354 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = add nsw i32 %343, 1
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds double, double* %2, i64 %358
  %360 = bitcast double* %359 to i64*
  %361 = load i64, i64* %360, align 8
  store i64 %356, i64* %346, align 8
  store i64 %361, i64* %351, align 8
  store i64 %347, i64* %355, align 8
  store i64 %352, i64* %360, align 8
  %362 = add nuw nsw i64 %33, 1
  %363 = icmp eq i64 %362, %25
  br i1 %363, label %364, label %32

364:                                              ; preds = %32, %24
  %365 = phi i32 [ 0, %24 ], [ %31, %32 ]
  %366 = getelementptr inbounds i32, i32* %1, i64 %27
  %367 = load i32, i32* %366, align 4
  %368 = shl nsw i32 %367, 1
  %369 = add nsw i32 %368, %365
  %370 = add nsw i32 %369, 2
  %371 = add nsw i32 %369, %11
  %372 = sext i32 %370 to i64
  %373 = getelementptr inbounds double, double* %2, i64 %372
  %374 = bitcast double* %373 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = add nsw i32 %369, 3
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds double, double* %2, i64 %377
  %379 = bitcast double* %378 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = sext i32 %371 to i64
  %382 = getelementptr inbounds double, double* %2, i64 %381
  %383 = bitcast double* %382 to i64*
  %384 = load i64, i64* %383, align 8
  %385 = add nsw i32 %371, 1
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds double, double* %2, i64 %386
  %388 = bitcast double* %387 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %384, i64* %374, align 8
  store i64 %389, i64* %379, align 8
  store i64 %375, i64* %383, align 8
  store i64 %380, i64* %388, align 8
  %390 = add nsw i32 %370, %12
  %391 = add nsw i32 %371, %21
  %392 = sext i32 %390 to i64
  %393 = getelementptr inbounds double, double* %2, i64 %392
  %394 = bitcast double* %393 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = or i32 %390, 1
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds double, double* %2, i64 %397
  %399 = bitcast double* %398 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = sext i32 %391 to i64
  %402 = getelementptr inbounds double, double* %2, i64 %401
  %403 = bitcast double* %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = add nsw i32 %391, 1
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds double, double* %2, i64 %406
  %408 = bitcast double* %407 to i64*
  %409 = load i64, i64* %408, align 8
  store i64 %404, i64* %394, align 8
  store i64 %409, i64* %399, align 8
  store i64 %395, i64* %403, align 8
  store i64 %400, i64* %408, align 8
  %410 = add nsw i32 %390, %12
  %411 = sub nsw i32 %391, %12
  %412 = sext i32 %410 to i64
  %413 = getelementptr inbounds double, double* %2, i64 %412
  %414 = bitcast double* %413 to i64*
  %415 = load i64, i64* %414, align 8
  %416 = or i32 %410, 1
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds double, double* %2, i64 %417
  %419 = bitcast double* %418 to i64*
  %420 = load i64, i64* %419, align 8
  %421 = sext i32 %411 to i64
  %422 = getelementptr inbounds double, double* %2, i64 %421
  %423 = bitcast double* %422 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = add nsw i32 %411, 1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds double, double* %2, i64 %426
  %428 = bitcast double* %427 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %424, i64* %414, align 8
  store i64 %429, i64* %419, align 8
  store i64 %415, i64* %423, align 8
  store i64 %420, i64* %428, align 8
  %430 = add nsw i32 %410, -2
  %431 = sub nsw i32 %411, %11
  %432 = sext i32 %430 to i64
  %433 = getelementptr inbounds double, double* %2, i64 %432
  %434 = bitcast double* %433 to i64*
  %435 = load i64, i64* %434, align 8
  %436 = add nsw i32 %410, -1
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds double, double* %2, i64 %437
  %439 = bitcast double* %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = sext i32 %431 to i64
  %442 = getelementptr inbounds double, double* %2, i64 %441
  %443 = bitcast double* %442 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = add nsw i32 %431, 1
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds double, double* %2, i64 %446
  %448 = bitcast double* %447 to i64*
  %449 = load i64, i64* %448, align 8
  store i64 %444, i64* %434, align 8
  store i64 %449, i64* %439, align 8
  store i64 %435, i64* %443, align 8
  store i64 %440, i64* %448, align 8
  %450 = add i32 %410, %11
  %451 = add i32 %411, 2
  %452 = sext i32 %450 to i64
  %453 = getelementptr inbounds double, double* %2, i64 %452
  %454 = bitcast double* %453 to i64*
  %455 = load i64, i64* %454, align 8
  %456 = add nsw i32 %450, 1
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds double, double* %2, i64 %457
  %459 = bitcast double* %458 to i64*
  %460 = load i64, i64* %459, align 8
  %461 = sext i32 %451 to i64
  %462 = getelementptr inbounds double, double* %2, i64 %461
  %463 = bitcast double* %462 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = add i32 %411, 3
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds double, double* %2, i64 %466
  %468 = bitcast double* %467 to i64*
  %469 = load i64, i64* %468, align 8
  store i64 %464, i64* %454, align 8
  store i64 %469, i64* %459, align 8
  store i64 %455, i64* %463, align 8
  store i64 %460, i64* %468, align 8
  %470 = add i32 %410, %12
  %471 = add i32 %411, %21
  %472 = sext i32 %470 to i64
  %473 = getelementptr inbounds double, double* %2, i64 %472
  %474 = bitcast double* %473 to i64*
  %475 = load i64, i64* %474, align 8
  %476 = or i32 %470, 1
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds double, double* %2, i64 %477
  %479 = bitcast double* %478 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = sext i32 %471 to i64
  %482 = getelementptr inbounds double, double* %2, i64 %481
  %483 = bitcast double* %482 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = add nsw i32 %471, 1
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds double, double* %2, i64 %486
  %488 = bitcast double* %487 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %484, i64* %474, align 8
  store i64 %489, i64* %479, align 8
  store i64 %475, i64* %483, align 8
  store i64 %480, i64* %488, align 8
  %490 = add nuw nsw i64 %25, 1
  %491 = icmp eq i64 %490, %23
  br i1 %491, label %717, label %24

492:                                              ; preds = %670, %16
  %493 = phi i64 [ 0, %16 ], [ %715, %670 ]
  %494 = icmp eq i64 %493, 0
  %495 = add nsw i64 %493, %17
  br i1 %494, label %670, label %496

496:                                              ; preds = %492
  %497 = getelementptr inbounds i32, i32* %1, i64 %495
  %498 = trunc i64 %493 to i32
  %499 = shl nsw i32 %498, 2
  br label %500

500:                                              ; preds = %500, %496
  %501 = phi i64 [ 0, %496 ], [ %668, %500 ]
  %502 = load i32, i32* %497, align 4
  %503 = trunc i64 %501 to i32
  %504 = shl i32 %503, 2
  %505 = add nsw i32 %502, %504
  %506 = add nsw i64 %501, %17
  %507 = getelementptr inbounds i32, i32* %1, i64 %506
  %508 = load i32, i32* %507, align 4
  %509 = add nsw i32 %508, %499
  %510 = sext i32 %505 to i64
  %511 = getelementptr inbounds double, double* %2, i64 %510
  %512 = bitcast double* %511 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = add nsw i32 %505, 1
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds double, double* %2, i64 %515
  %517 = bitcast double* %516 to i64*
  %518 = load i64, i64* %517, align 8
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds double, double* %2, i64 %519
  %521 = bitcast double* %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = add nsw i32 %509, 1
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds double, double* %2, i64 %524
  %526 = bitcast double* %525 to i64*
  %527 = load i64, i64* %526, align 8
  store i64 %522, i64* %512, align 8
  store i64 %527, i64* %517, align 8
  store i64 %513, i64* %521, align 8
  store i64 %518, i64* %526, align 8
  %528 = add nsw i32 %505, %12
  %529 = add nsw i32 %509, %12
  %530 = sext i32 %528 to i64
  %531 = getelementptr inbounds double, double* %2, i64 %530
  %532 = bitcast double* %531 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = add nsw i32 %528, 1
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds double, double* %2, i64 %535
  %537 = bitcast double* %536 to i64*
  %538 = load i64, i64* %537, align 8
  %539 = sext i32 %529 to i64
  %540 = getelementptr inbounds double, double* %2, i64 %539
  %541 = bitcast double* %540 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = add nsw i32 %529, 1
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds double, double* %2, i64 %544
  %546 = bitcast double* %545 to i64*
  %547 = load i64, i64* %546, align 8
  store i64 %542, i64* %532, align 8
  store i64 %547, i64* %537, align 8
  store i64 %533, i64* %541, align 8
  store i64 %538, i64* %546, align 8
  %548 = add nsw i32 %528, %11
  %549 = add nsw i32 %529, 2
  %550 = sext i32 %548 to i64
  %551 = getelementptr inbounds double, double* %2, i64 %550
  %552 = bitcast double* %551 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = add nsw i32 %548, 1
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds double, double* %2, i64 %555
  %557 = bitcast double* %556 to i64*
  %558 = load i64, i64* %557, align 8
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds double, double* %2, i64 %559
  %561 = bitcast double* %560 to i64*
  %562 = load i64, i64* %561, align 8
  %563 = add nsw i32 %529, 3
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds double, double* %2, i64 %564
  %566 = bitcast double* %565 to i64*
  %567 = load i64, i64* %566, align 8
  store i64 %562, i64* %552, align 8
  store i64 %567, i64* %557, align 8
  store i64 %553, i64* %561, align 8
  store i64 %558, i64* %566, align 8
  %568 = sub nsw i32 %548, %12
  %569 = sub nsw i32 %549, %12
  %570 = sext i32 %568 to i64
  %571 = getelementptr inbounds double, double* %2, i64 %570
  %572 = bitcast double* %571 to i64*
  %573 = load i64, i64* %572, align 8
  %574 = add nsw i32 %568, 1
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds double, double* %2, i64 %575
  %577 = bitcast double* %576 to i64*
  %578 = load i64, i64* %577, align 8
  %579 = sext i32 %569 to i64
  %580 = getelementptr inbounds double, double* %2, i64 %579
  %581 = bitcast double* %580 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = add nsw i32 %569, 1
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds double, double* %2, i64 %584
  %586 = bitcast double* %585 to i64*
  %587 = load i64, i64* %586, align 8
  store i64 %582, i64* %572, align 8
  store i64 %587, i64* %577, align 8
  store i64 %573, i64* %581, align 8
  store i64 %578, i64* %586, align 8
  %588 = add nsw i32 %568, 2
  %589 = add nsw i32 %569, %11
  %590 = sext i32 %588 to i64
  %591 = getelementptr inbounds double, double* %2, i64 %590
  %592 = bitcast double* %591 to i64*
  %593 = load i64, i64* %592, align 8
  %594 = add nsw i32 %568, 3
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds double, double* %2, i64 %595
  %597 = bitcast double* %596 to i64*
  %598 = load i64, i64* %597, align 8
  %599 = sext i32 %589 to i64
  %600 = getelementptr inbounds double, double* %2, i64 %599
  %601 = bitcast double* %600 to i64*
  %602 = load i64, i64* %601, align 8
  %603 = add nsw i32 %589, 1
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds double, double* %2, i64 %604
  %606 = bitcast double* %605 to i64*
  %607 = load i64, i64* %606, align 8
  store i64 %602, i64* %592, align 8
  store i64 %607, i64* %597, align 8
  store i64 %593, i64* %601, align 8
  store i64 %598, i64* %606, align 8
  %608 = add i32 %548, 2
  %609 = add i32 %549, %11
  %610 = sext i32 %608 to i64
  %611 = getelementptr inbounds double, double* %2, i64 %610
  %612 = bitcast double* %611 to i64*
  %613 = load i64, i64* %612, align 8
  %614 = add i32 %548, 3
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds double, double* %2, i64 %615
  %617 = bitcast double* %616 to i64*
  %618 = load i64, i64* %617, align 8
  %619 = sext i32 %609 to i64
  %620 = getelementptr inbounds double, double* %2, i64 %619
  %621 = bitcast double* %620 to i64*
  %622 = load i64, i64* %621, align 8
  %623 = add nsw i32 %609, 1
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds double, double* %2, i64 %624
  %626 = bitcast double* %625 to i64*
  %627 = load i64, i64* %626, align 8
  store i64 %622, i64* %612, align 8
  store i64 %627, i64* %617, align 8
  store i64 %613, i64* %621, align 8
  store i64 %618, i64* %626, align 8
  %628 = sub nsw i32 %608, %11
  %629 = add i32 %529, %11
  %630 = sext i32 %628 to i64
  %631 = getelementptr inbounds double, double* %2, i64 %630
  %632 = bitcast double* %631 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = add nsw i32 %628, 1
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds double, double* %2, i64 %635
  %637 = bitcast double* %636 to i64*
  %638 = load i64, i64* %637, align 8
  %639 = sext i32 %629 to i64
  %640 = getelementptr inbounds double, double* %2, i64 %639
  %641 = bitcast double* %640 to i64*
  %642 = load i64, i64* %641, align 8
  %643 = add nsw i32 %629, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds double, double* %2, i64 %644
  %646 = bitcast double* %645 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %642, i64* %632, align 8
  store i64 %647, i64* %637, align 8
  store i64 %633, i64* %641, align 8
  store i64 %638, i64* %646, align 8
  %648 = sub nsw i32 %628, %12
  %649 = sub nsw i32 %629, %12
  %650 = sext i32 %648 to i64
  %651 = getelementptr inbounds double, double* %2, i64 %650
  %652 = bitcast double* %651 to i64*
  %653 = load i64, i64* %652, align 8
  %654 = add nsw i32 %648, 1
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds double, double* %2, i64 %655
  %657 = bitcast double* %656 to i64*
  %658 = load i64, i64* %657, align 8
  %659 = sext i32 %649 to i64
  %660 = getelementptr inbounds double, double* %2, i64 %659
  %661 = bitcast double* %660 to i64*
  %662 = load i64, i64* %661, align 8
  %663 = add nsw i32 %649, 1
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds double, double* %2, i64 %664
  %666 = bitcast double* %665 to i64*
  %667 = load i64, i64* %666, align 8
  store i64 %662, i64* %652, align 8
  store i64 %667, i64* %657, align 8
  store i64 %653, i64* %661, align 8
  store i64 %658, i64* %666, align 8
  %668 = add nuw nsw i64 %501, 1
  %669 = icmp eq i64 %668, %493
  br i1 %669, label %670, label %500

670:                                              ; preds = %500, %492
  %671 = phi i32 [ 0, %492 ], [ %499, %500 ]
  %672 = getelementptr inbounds i32, i32* %1, i64 %495
  %673 = load i32, i32* %672, align 4
  %674 = add nsw i32 %673, %671
  %675 = add nsw i32 %674, 2
  %676 = add nsw i32 %674, %11
  %677 = sext i32 %675 to i64
  %678 = getelementptr inbounds double, double* %2, i64 %677
  %679 = bitcast double* %678 to i64*
  %680 = load i64, i64* %679, align 8
  %681 = add nsw i32 %674, 3
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds double, double* %2, i64 %682
  %684 = bitcast double* %683 to i64*
  %685 = load i64, i64* %684, align 8
  %686 = sext i32 %676 to i64
  %687 = getelementptr inbounds double, double* %2, i64 %686
  %688 = bitcast double* %687 to i64*
  %689 = load i64, i64* %688, align 8
  %690 = add nsw i32 %676, 1
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds double, double* %2, i64 %691
  %693 = bitcast double* %692 to i64*
  %694 = load i64, i64* %693, align 8
  store i64 %689, i64* %679, align 8
  store i64 %694, i64* %684, align 8
  store i64 %680, i64* %688, align 8
  store i64 %685, i64* %693, align 8
  %695 = add nsw i32 %675, %12
  %696 = add nsw i32 %676, %12
  %697 = sext i32 %695 to i64
  %698 = getelementptr inbounds double, double* %2, i64 %697
  %699 = bitcast double* %698 to i64*
  %700 = load i64, i64* %699, align 8
  %701 = add nsw i32 %695, 1
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds double, double* %2, i64 %702
  %704 = bitcast double* %703 to i64*
  %705 = load i64, i64* %704, align 8
  %706 = sext i32 %696 to i64
  %707 = getelementptr inbounds double, double* %2, i64 %706
  %708 = bitcast double* %707 to i64*
  %709 = load i64, i64* %708, align 8
  %710 = add nsw i32 %696, 1
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds double, double* %2, i64 %711
  %713 = bitcast double* %712 to i64*
  %714 = load i64, i64* %713, align 8
  store i64 %709, i64* %699, align 8
  store i64 %714, i64* %704, align 8
  store i64 %700, i64* %708, align 8
  store i64 %705, i64* %713, align 8
  %715 = add nuw nsw i64 %493, 1
  %716 = icmp eq i64 %715, %18
  br i1 %716, label %717, label %492

717:                                              ; preds = %670, %364, %15, %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftf161(double*, double* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds double, double* %1, i64 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds double, double* %1, i64 2
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds double, double* %1, i64 3
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds double, double* %0, i64 16
  %10 = bitcast double* %0 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = getelementptr inbounds double, double* %0, i64 17
  %13 = bitcast double* %9 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = fadd <2 x double> %11, %14
  %16 = extractelement <2 x double> %11, i32 0
  %17 = extractelement <2 x double> %14, i32 0
  %18 = fsub double %16, %17
  %19 = extractelement <2 x double> %11, i32 1
  %20 = extractelement <2 x double> %14, i32 1
  %21 = fsub double %19, %20
  %22 = getelementptr inbounds double, double* %0, i64 8
  %23 = getelementptr inbounds double, double* %0, i64 24
  %24 = bitcast double* %22 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = getelementptr inbounds double, double* %0, i64 25
  %27 = bitcast double* %23 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fadd <2 x double> %25, %28
  %30 = extractelement <2 x double> %25, i32 0
  %31 = extractelement <2 x double> %28, i32 0
  %32 = fsub double %30, %31
  %33 = extractelement <2 x double> %25, i32 1
  %34 = extractelement <2 x double> %28, i32 1
  %35 = fsub double %33, %34
  %36 = fadd <2 x double> %15, %29
  %37 = fsub <2 x double> %15, %29
  %38 = fsub double %18, %35
  %39 = fadd double %21, %32
  %40 = fadd double %18, %35
  %41 = fsub double %21, %32
  %42 = getelementptr inbounds double, double* %0, i64 2
  %43 = getelementptr inbounds double, double* %0, i64 18
  %44 = bitcast double* %42 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = getelementptr inbounds double, double* %0, i64 19
  %47 = bitcast double* %43 to <2 x double>*
  %48 = load <2 x double>, <2 x double>* %47, align 8
  %49 = fadd <2 x double> %45, %48
  %50 = extractelement <2 x double> %45, i32 0
  %51 = extractelement <2 x double> %48, i32 0
  %52 = fsub double %50, %51
  %53 = extractelement <2 x double> %45, i32 1
  %54 = extractelement <2 x double> %48, i32 1
  %55 = fsub double %53, %54
  %56 = getelementptr inbounds double, double* %0, i64 10
  %57 = getelementptr inbounds double, double* %0, i64 26
  %58 = bitcast double* %56 to <2 x double>*
  %59 = load <2 x double>, <2 x double>* %58, align 8
  %60 = getelementptr inbounds double, double* %0, i64 27
  %61 = bitcast double* %57 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 8
  %63 = fadd <2 x double> %59, %62
  %64 = extractelement <2 x double> %59, i32 0
  %65 = extractelement <2 x double> %62, i32 0
  %66 = fsub double %64, %65
  %67 = extractelement <2 x double> %59, i32 1
  %68 = extractelement <2 x double> %62, i32 1
  %69 = fsub double %67, %68
  %70 = fadd <2 x double> %49, %63
  %71 = extractelement <2 x double> %49, i32 0
  %72 = extractelement <2 x double> %63, i32 0
  %73 = fsub double %71, %72
  %74 = extractelement <2 x double> %49, i32 1
  %75 = extractelement <2 x double> %63, i32 1
  %76 = fsub double %74, %75
  %77 = fsub double %52, %69
  %78 = fadd double %55, %66
  %79 = fmul double %6, %77
  %80 = fmul double %8, %78
  %81 = fsub double %79, %80
  %82 = fmul double %6, %78
  %83 = fmul double %8, %77
  %84 = fadd double %82, %83
  %85 = fadd double %52, %69
  %86 = fsub double %55, %66
  %87 = fmul double %8, %85
  %88 = fmul double %6, %86
  %89 = fsub double %87, %88
  %90 = fmul double %8, %86
  %91 = fmul double %6, %85
  %92 = fadd double %90, %91
  %93 = getelementptr inbounds double, double* %0, i64 4
  %94 = getelementptr inbounds double, double* %0, i64 20
  %95 = bitcast double* %93 to <2 x double>*
  %96 = load <2 x double>, <2 x double>* %95, align 8
  %97 = getelementptr inbounds double, double* %0, i64 21
  %98 = bitcast double* %94 to <2 x double>*
  %99 = load <2 x double>, <2 x double>* %98, align 8
  %100 = fadd <2 x double> %96, %99
  %101 = extractelement <2 x double> %96, i32 0
  %102 = extractelement <2 x double> %99, i32 0
  %103 = fsub double %101, %102
  %104 = extractelement <2 x double> %96, i32 1
  %105 = extractelement <2 x double> %99, i32 1
  %106 = fsub double %104, %105
  %107 = getelementptr inbounds double, double* %0, i64 12
  %108 = getelementptr inbounds double, double* %0, i64 28
  %109 = getelementptr inbounds double, double* %0, i64 13
  %110 = bitcast double* %107 to <2 x double>*
  %111 = load <2 x double>, <2 x double>* %110, align 8
  %112 = getelementptr inbounds double, double* %0, i64 29
  %113 = bitcast double* %108 to <2 x double>*
  %114 = load <2 x double>, <2 x double>* %113, align 8
  %115 = fadd <2 x double> %111, %114
  %116 = extractelement <2 x double> %111, i32 0
  %117 = extractelement <2 x double> %114, i32 0
  %118 = fsub double %116, %117
  %119 = extractelement <2 x double> %111, i32 1
  %120 = extractelement <2 x double> %114, i32 1
  %121 = fsub double %119, %120
  %122 = fadd <2 x double> %100, %115
  %123 = fsub <2 x double> %100, %115
  %124 = shufflevector <2 x double> %123, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %125 = fsub double %103, %121
  %126 = fadd double %106, %118
  %127 = fsub double %125, %126
  %128 = fmul double %4, %127
  %129 = fadd double %126, %125
  %130 = fmul double %4, %129
  %131 = fadd double %103, %121
  %132 = fsub double %106, %118
  %133 = fadd double %132, %131
  %134 = fmul double %4, %133
  %135 = fsub double %132, %131
  %136 = fmul double %4, %135
  %137 = getelementptr inbounds double, double* %0, i64 6
  %138 = getelementptr inbounds double, double* %0, i64 22
  %139 = bitcast double* %137 to <2 x double>*
  %140 = load <2 x double>, <2 x double>* %139, align 8
  %141 = getelementptr inbounds double, double* %0, i64 23
  %142 = bitcast double* %138 to <2 x double>*
  %143 = load <2 x double>, <2 x double>* %142, align 8
  %144 = fadd <2 x double> %140, %143
  %145 = extractelement <2 x double> %140, i32 0
  %146 = extractelement <2 x double> %143, i32 0
  %147 = fsub double %145, %146
  %148 = extractelement <2 x double> %140, i32 1
  %149 = extractelement <2 x double> %143, i32 1
  %150 = fsub double %148, %149
  %151 = getelementptr inbounds double, double* %0, i64 14
  %152 = getelementptr inbounds double, double* %0, i64 30
  %153 = getelementptr inbounds double, double* %0, i64 15
  %154 = bitcast double* %151 to <2 x double>*
  %155 = load <2 x double>, <2 x double>* %154, align 8
  %156 = getelementptr inbounds double, double* %0, i64 31
  %157 = bitcast double* %152 to <2 x double>*
  %158 = load <2 x double>, <2 x double>* %157, align 8
  %159 = fadd <2 x double> %155, %158
  %160 = extractelement <2 x double> %155, i32 0
  %161 = extractelement <2 x double> %158, i32 0
  %162 = fsub double %160, %161
  %163 = extractelement <2 x double> %155, i32 1
  %164 = extractelement <2 x double> %158, i32 1
  %165 = fsub double %163, %164
  %166 = fadd <2 x double> %144, %159
  %167 = extractelement <2 x double> %144, i32 0
  %168 = extractelement <2 x double> %159, i32 0
  %169 = fsub double %167, %168
  %170 = extractelement <2 x double> %144, i32 1
  %171 = extractelement <2 x double> %159, i32 1
  %172 = fsub double %170, %171
  %173 = fsub double %147, %165
  %174 = fadd double %150, %162
  %175 = fmul double %8, %173
  %176 = fmul double %6, %174
  %177 = fsub double %175, %176
  %178 = fmul double %8, %174
  %179 = fmul double %6, %173
  %180 = fadd double %178, %179
  %181 = fadd double %147, %165
  %182 = fsub double %150, %162
  %183 = fmul double %6, %181
  %184 = fmul double %8, %182
  %185 = fsub double %183, %184
  %186 = fmul double %6, %182
  %187 = fmul double %8, %181
  %188 = fadd double %186, %187
  %189 = fsub double %40, %134
  %190 = fsub double %41, %136
  %191 = fadd double %40, %134
  %192 = fadd double %41, %136
  %193 = fsub double %89, %185
  %194 = fsub double %92, %188
  %195 = fadd double %89, %185
  %196 = fadd double %92, %188
  %197 = fadd double %189, %193
  store double %197, double* %23, align 8
  %198 = fadd double %190, %194
  store double %198, double* %26, align 8
  %199 = fsub double %189, %193
  store double %199, double* %57, align 8
  %200 = fsub double %190, %194
  store double %200, double* %60, align 8
  %201 = fsub double %191, %196
  store double %201, double* %108, align 8
  %202 = fadd double %192, %195
  store double %202, double* %112, align 8
  %203 = fadd double %191, %196
  store double %203, double* %152, align 8
  %204 = fsub double %192, %195
  store double %204, double* %156, align 8
  %205 = fadd double %38, %128
  %206 = fadd double %39, %130
  %207 = fsub double %38, %128
  %208 = fsub double %39, %130
  %209 = fadd double %81, %177
  %210 = fadd double %84, %180
  %211 = fsub double %81, %177
  %212 = fsub double %84, %180
  %213 = fadd double %205, %209
  store double %213, double* %9, align 8
  %214 = fadd double %206, %210
  store double %214, double* %12, align 8
  %215 = fsub double %205, %209
  store double %215, double* %43, align 8
  %216 = fsub double %206, %210
  store double %216, double* %46, align 8
  %217 = fsub double %207, %212
  store double %217, double* %94, align 8
  %218 = fadd double %208, %211
  store double %218, double* %97, align 8
  %219 = fadd double %207, %212
  store double %219, double* %138, align 8
  %220 = fsub double %208, %211
  store double %220, double* %141, align 8
  %221 = fsub double %73, %172
  %222 = fadd double %76, %169
  %223 = insertelement <2 x double> undef, double %221, i32 0
  %224 = shufflevector <2 x double> %223, <2 x double> undef, <2 x i32> zeroinitializer
  %225 = insertelement <2 x double> undef, double %222, i32 0
  %226 = shufflevector <2 x double> %225, <2 x double> undef, <2 x i32> zeroinitializer
  %227 = fsub <2 x double> %224, %226
  %228 = fadd <2 x double> %224, %226
  %229 = shufflevector <2 x double> %227, <2 x double> %228, <2 x i32> <i32 0, i32 3>
  %230 = insertelement <2 x double> undef, double %4, i32 0
  %231 = shufflevector <2 x double> %230, <2 x double> undef, <2 x i32> zeroinitializer
  %232 = fmul <2 x double> %231, %229
  %233 = fadd double %73, %172
  %234 = fsub double %76, %169
  %235 = fsub double %233, %234
  %236 = fmul double %4, %235
  %237 = fadd double %234, %233
  %238 = fmul double %4, %237
  %239 = fsub <2 x double> %37, %124
  %240 = fadd <2 x double> %37, %124
  %241 = shufflevector <2 x double> %239, <2 x double> %240, <2 x i32> <i32 0, i32 3>
  %242 = extractelement <2 x double> %37, i32 0
  %243 = extractelement <2 x double> %123, i32 1
  %244 = fadd double %242, %243
  %245 = extractelement <2 x double> %37, i32 1
  %246 = extractelement <2 x double> %123, i32 0
  %247 = fsub double %245, %246
  %248 = fadd <2 x double> %241, %232
  %249 = bitcast double* %22 to <2 x double>*
  store <2 x double> %248, <2 x double>* %249, align 8
  %250 = fsub <2 x double> %241, %232
  %251 = bitcast double* %56 to <2 x double>*
  store <2 x double> %250, <2 x double>* %251, align 8
  %252 = fsub double %244, %238
  store double %252, double* %107, align 8
  %253 = fadd double %247, %236
  store double %253, double* %109, align 8
  %254 = fadd double %244, %238
  store double %254, double* %151, align 8
  %255 = fsub double %247, %236
  store double %255, double* %153, align 8
  %256 = fadd <2 x double> %36, %122
  %257 = fsub <2 x double> %36, %122
  %258 = fadd <2 x double> %70, %166
  %259 = fsub <2 x double> %70, %166
  %260 = shufflevector <2 x double> %259, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %261 = fadd <2 x double> %256, %258
  %262 = bitcast double* %0 to <2 x double>*
  store <2 x double> %261, <2 x double>* %262, align 8
  %263 = fsub <2 x double> %256, %258
  %264 = bitcast double* %42 to <2 x double>*
  store <2 x double> %263, <2 x double>* %264, align 8
  %265 = fsub <2 x double> %257, %260
  %266 = fadd <2 x double> %257, %260
  %267 = shufflevector <2 x double> %265, <2 x double> %266, <2 x i32> <i32 0, i32 3>
  %268 = bitcast double* %93 to <2 x double>*
  store <2 x double> %267, <2 x double>* %268, align 8
  %269 = fadd <2 x double> %257, %260
  %270 = fsub <2 x double> %257, %260
  %271 = shufflevector <2 x double> %269, <2 x double> %270, <2 x i32> <i32 0, i32 3>
  %272 = bitcast double* %137 to <2 x double>*
  store <2 x double> %271, <2 x double>* %272, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @bitrv216(double*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = bitcast double* %2 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = getelementptr inbounds double, double* %0, i64 4
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds double, double* %0, i64 6
  %9 = bitcast double* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = getelementptr inbounds double, double* %0, i64 8
  %12 = bitcast double* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  %14 = getelementptr inbounds double, double* %0, i64 10
  %15 = bitcast double* %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8
  %17 = getelementptr inbounds double, double* %0, i64 14
  %18 = bitcast double* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = getelementptr inbounds double, double* %0, i64 16
  %21 = bitcast double* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 8
  %23 = getelementptr inbounds double, double* %0, i64 20
  %24 = bitcast double* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = getelementptr inbounds double, double* %0, i64 22
  %27 = bitcast double* %26 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 8
  %29 = getelementptr inbounds double, double* %0, i64 24
  %30 = bitcast double* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 8
  %32 = getelementptr inbounds double, double* %0, i64 26
  %33 = bitcast double* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 8
  %35 = getelementptr inbounds double, double* %0, i64 28
  %36 = bitcast double* %35 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %38, align 8
  %39 = bitcast double* %5 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %39, align 8
  %40 = bitcast double* %8 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %40, align 8
  %41 = bitcast double* %11 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %41, align 8
  %42 = bitcast double* %14 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %42, align 8
  %43 = bitcast double* %17 to <2 x i64>*
  store <2 x i64> %37, <2 x i64>* %43, align 8
  %44 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %44, align 8
  %45 = bitcast double* %23 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %45, align 8
  %46 = bitcast double* %26 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %46, align 8
  %47 = bitcast double* %29 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %47, align 8
  %48 = bitcast double* %32 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %48, align 8
  %49 = bitcast double* %35 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %49, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftf081(double* nocapture, double* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds double, double* %1, i64 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds double, double* %0, i64 8
  %6 = bitcast double* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = bitcast double* %5 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = fadd <2 x double> %7, %9
  %11 = fsub <2 x double> %7, %9
  %12 = getelementptr inbounds double, double* %0, i64 4
  %13 = getelementptr inbounds double, double* %0, i64 12
  %14 = bitcast double* %12 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = getelementptr inbounds double, double* %0, i64 13
  %17 = bitcast double* %13 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fadd <2 x double> %15, %18
  %20 = fsub <2 x double> %15, %18
  %21 = shufflevector <2 x double> %20, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %22 = fadd <2 x double> %10, %19
  %23 = fsub <2 x double> %10, %19
  %24 = fsub <2 x double> %11, %21
  %25 = fadd <2 x double> %11, %21
  %26 = shufflevector <2 x double> %24, <2 x double> %25, <2 x i32> <i32 0, i32 3>
  %27 = extractelement <2 x double> %11, i32 0
  %28 = extractelement <2 x double> %20, i32 1
  %29 = fadd double %27, %28
  %30 = extractelement <2 x double> %11, i32 1
  %31 = extractelement <2 x double> %20, i32 0
  %32 = fsub double %30, %31
  %33 = getelementptr inbounds double, double* %0, i64 2
  %34 = getelementptr inbounds double, double* %0, i64 10
  %35 = bitcast double* %33 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = bitcast double* %34 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = fadd <2 x double> %36, %38
  %40 = extractelement <2 x double> %36, i32 0
  %41 = extractelement <2 x double> %38, i32 0
  %42 = fsub double %40, %41
  %43 = extractelement <2 x double> %36, i32 1
  %44 = extractelement <2 x double> %38, i32 1
  %45 = fsub double %43, %44
  %46 = getelementptr inbounds double, double* %0, i64 6
  %47 = getelementptr inbounds double, double* %0, i64 14
  %48 = bitcast double* %46 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = getelementptr inbounds double, double* %0, i64 15
  %51 = bitcast double* %47 to <2 x double>*
  %52 = load <2 x double>, <2 x double>* %51, align 8
  %53 = fadd <2 x double> %49, %52
  %54 = extractelement <2 x double> %49, i32 0
  %55 = extractelement <2 x double> %52, i32 0
  %56 = fsub double %54, %55
  %57 = extractelement <2 x double> %49, i32 1
  %58 = extractelement <2 x double> %52, i32 1
  %59 = fsub double %57, %58
  %60 = fadd <2 x double> %39, %53
  %61 = fsub <2 x double> %39, %53
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %63 = fsub double %42, %59
  %64 = fadd double %45, %56
  %65 = fadd double %42, %59
  %66 = fsub double %45, %56
  %67 = insertelement <2 x double> undef, double %63, i32 0
  %68 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> zeroinitializer
  %69 = insertelement <2 x double> undef, double %64, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fsub <2 x double> %68, %70
  %72 = fadd <2 x double> %68, %70
  %73 = shufflevector <2 x double> %71, <2 x double> %72, <2 x i32> <i32 0, i32 3>
  %74 = insertelement <2 x double> undef, double %4, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = fmul <2 x double> %75, %73
  %77 = fsub double %65, %66
  %78 = fmul double %4, %77
  %79 = fadd double %66, %65
  %80 = fmul double %4, %79
  %81 = fadd <2 x double> %26, %76
  %82 = bitcast double* %5 to <2 x double>*
  store <2 x double> %81, <2 x double>* %82, align 8
  %83 = fsub <2 x double> %26, %76
  %84 = bitcast double* %34 to <2 x double>*
  store <2 x double> %83, <2 x double>* %84, align 8
  %85 = fsub double %29, %80
  store double %85, double* %13, align 8
  %86 = fadd double %32, %78
  store double %86, double* %16, align 8
  %87 = fadd double %29, %80
  store double %87, double* %47, align 8
  %88 = fsub double %32, %78
  store double %88, double* %50, align 8
  %89 = fadd <2 x double> %22, %60
  %90 = bitcast double* %0 to <2 x double>*
  store <2 x double> %89, <2 x double>* %90, align 8
  %91 = fsub <2 x double> %22, %60
  %92 = bitcast double* %33 to <2 x double>*
  store <2 x double> %91, <2 x double>* %92, align 8
  %93 = fsub <2 x double> %23, %62
  %94 = fadd <2 x double> %23, %62
  %95 = shufflevector <2 x double> %93, <2 x double> %94, <2 x i32> <i32 0, i32 3>
  %96 = bitcast double* %12 to <2 x double>*
  store <2 x double> %95, <2 x double>* %96, align 8
  %97 = fadd <2 x double> %23, %62
  %98 = fsub <2 x double> %23, %62
  %99 = shufflevector <2 x double> %97, <2 x double> %98, <2 x i32> <i32 0, i32 3>
  %100 = bitcast double* %46 to <2 x double>*
  store <2 x double> %99, <2 x double>* %100, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @bitrv208(double* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = bitcast double* %2 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = getelementptr inbounds double, double* %0, i64 6
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds double, double* %0, i64 8
  %9 = bitcast double* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = getelementptr inbounds double, double* %0, i64 12
  %12 = bitcast double* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  %14 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %14, align 8
  %15 = bitcast double* %5 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %15, align 8
  %16 = bitcast double* %8 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %16, align 8
  %17 = bitcast double* %11 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %17, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftf040(double* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 4
  %3 = bitcast double* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = fadd <2 x double> %4, %6
  %8 = fsub <2 x double> %4, %6
  %9 = getelementptr inbounds double, double* %0, i64 2
  %10 = getelementptr inbounds double, double* %0, i64 6
  %11 = bitcast double* %9 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = bitcast double* %10 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = fadd <2 x double> %12, %14
  %16 = fsub <2 x double> %12, %14
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %18 = fadd <2 x double> %7, %15
  %19 = bitcast double* %0 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 8
  %20 = fsub <2 x double> %8, %17
  %21 = fadd <2 x double> %8, %17
  %22 = shufflevector <2 x double> %20, <2 x double> %21, <2 x i32> <i32 0, i32 3>
  %23 = bitcast double* %9 to <2 x double>*
  store <2 x double> %22, <2 x double>* %23, align 8
  %24 = fsub <2 x double> %7, %15
  %25 = bitcast double* %2 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 8
  %26 = fadd <2 x double> %8, %17
  %27 = fsub <2 x double> %8, %17
  %28 = shufflevector <2 x double> %26, <2 x double> %27, <2 x i32> <i32 0, i32 3>
  %29 = bitcast double* %10 to <2 x double>*
  store <2 x double> %28, <2 x double>* %29, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftx020(double* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = bitcast double* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = fsub <2 x double> %4, %6
  %8 = fadd <2 x double> %4, %6
  %9 = bitcast double* %0 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  %10 = bitcast double* %2 to <2 x double>*
  store <2 x double> %7, <2 x double>* %10, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftb1st(i32, double*, double* nocapture readonly) local_unnamed_addr #1 {
  %4 = ashr i32 %0, 3
  %5 = shl nsw i32 %4, 1
  %6 = shl nsw i32 %4, 2
  %7 = mul nsw i32 %4, 6
  %8 = load double, double* %1, align 8
  %9 = sext i32 %6 to i64
  %10 = getelementptr inbounds double, double* %1, i64 %9
  %11 = load double, double* %10, align 8
  %12 = fadd double %8, %11
  %13 = getelementptr inbounds double, double* %1, i64 1
  %14 = load double, double* %13, align 8
  %15 = fsub double -0.000000e+00, %14
  %16 = or i32 %6, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double, double* %1, i64 %17
  %19 = load double, double* %18, align 8
  %20 = fsub double %15, %19
  %21 = insertelement <2 x double> undef, double %8, i32 0
  %22 = insertelement <2 x double> %21, double %19, i32 1
  %23 = insertelement <2 x double> undef, double %11, i32 0
  %24 = insertelement <2 x double> %23, double %14, i32 1
  %25 = fsub <2 x double> %22, %24
  %26 = sext i32 %5 to i64
  %27 = getelementptr inbounds double, double* %1, i64 %26
  %28 = sext i32 %7 to i64
  %29 = getelementptr inbounds double, double* %1, i64 %28
  %30 = or i32 %5, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %1, i64 %31
  %33 = bitcast double* %27 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = bitcast double* %29 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = extractelement <2 x double> %34, i32 0
  %38 = extractelement <2 x double> %36, i32 0
  %39 = fadd double %37, %38
  %40 = extractelement <2 x double> %34, i32 1
  %41 = extractelement <2 x double> %36, i32 1
  %42 = fadd double %40, %41
  %43 = fsub <2 x double> %34, %36
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %45 = fadd double %12, %39
  store double %45, double* %1, align 8
  %46 = fsub double %20, %42
  store double %46, double* %13, align 8
  %47 = fsub double %12, %39
  store double %47, double* %27, align 8
  %48 = fadd double %20, %42
  store double %48, double* %32, align 8
  %49 = fadd <2 x double> %25, %44
  %50 = bitcast double* %10 to <2 x double>*
  store <2 x double> %49, <2 x double>* %50, align 8
  %51 = fsub <2 x double> %25, %44
  %52 = bitcast double* %29 to <2 x double>*
  store <2 x double> %51, <2 x double>* %52, align 8
  %53 = getelementptr inbounds double, double* %2, i64 1
  %54 = load double, double* %53, align 8
  %55 = getelementptr inbounds double, double* %2, i64 2
  %56 = load double, double* %55, align 8
  %57 = getelementptr inbounds double, double* %2, i64 3
  %58 = load double, double* %57, align 8
  %59 = add nsw i32 %4, -2
  %60 = icmp sgt i32 %59, 2
  %61 = sext i32 %59 to i64
  br i1 %60, label %62, label %347

62:                                               ; preds = %3, %62
  %63 = phi i64 [ %344, %62 ], [ 2, %3 ]
  %64 = phi i64 [ %70, %62 ], [ 0, %3 ]
  %65 = phi double [ %88, %62 ], [ 0.000000e+00, %3 ]
  %66 = phi double [ %85, %62 ], [ 1.000000e+00, %3 ]
  %67 = phi double [ %77, %62 ], [ 0.000000e+00, %3 ]
  %68 = phi double [ %72, %62 ], [ 1.000000e+00, %3 ]
  %69 = phi i32 [ %345, %62 ], [ 2, %3 ]
  %70 = add nuw nsw i64 %64, 4
  %71 = getelementptr inbounds double, double* %2, i64 %70
  %72 = load double, double* %71, align 8
  %73 = fadd double %68, %72
  %74 = fmul double %56, %73
  %75 = add nuw nsw i64 %64, 5
  %76 = getelementptr inbounds double, double* %2, i64 %75
  %77 = load double, double* %76, align 8
  %78 = fadd double %67, %77
  %79 = fmul double %56, %78
  %80 = add nuw nsw i64 %64, 6
  %81 = getelementptr inbounds double, double* %2, i64 %80
  %82 = bitcast double* %81 to <2 x double>*
  %83 = load <2 x double>, <2 x double>* %82, align 8
  %84 = shufflevector <2 x double> %83, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %85 = extractelement <2 x double> %83, i32 0
  %86 = fadd double %66, %85
  %87 = fmul double %58, %86
  %88 = extractelement <2 x double> %83, i32 1
  %89 = fadd double %65, %88
  %90 = fmul double %58, %89
  %91 = add nsw i64 %63, %26
  %92 = add nsw i32 %69, %5
  %93 = add nsw i64 %91, %26
  %94 = add nsw i32 %92, %5
  %95 = add nsw i64 %93, %26
  %96 = add nsw i32 %94, %5
  %97 = getelementptr inbounds double, double* %1, i64 %63
  %98 = load double, double* %97, align 8
  %99 = getelementptr inbounds double, double* %1, i64 %93
  %100 = load double, double* %99, align 8
  %101 = fadd double %98, %100
  %102 = or i64 %63, 1
  %103 = getelementptr inbounds double, double* %1, i64 %102
  %104 = load double, double* %103, align 8
  %105 = fsub double -0.000000e+00, %104
  %106 = or i32 %94, 1
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds double, double* %1, i64 %107
  %109 = load double, double* %108, align 8
  %110 = fsub double %105, %109
  %111 = fsub double %98, %100
  %112 = fsub double %109, %104
  %113 = add nuw nsw i64 %63, 2
  %114 = getelementptr inbounds double, double* %1, i64 %113
  %115 = load double, double* %114, align 8
  %116 = add nsw i64 %93, 2
  %117 = getelementptr inbounds double, double* %1, i64 %116
  %118 = load double, double* %117, align 8
  %119 = fadd double %115, %118
  %120 = add nuw nsw i64 %63, 3
  %121 = getelementptr inbounds double, double* %1, i64 %120
  %122 = load double, double* %121, align 8
  %123 = fsub double -0.000000e+00, %122
  %124 = add nsw i64 %93, 3
  %125 = getelementptr inbounds double, double* %1, i64 %124
  %126 = load double, double* %125, align 8
  %127 = fsub double %123, %126
  %128 = insertelement <2 x double> undef, double %115, i32 0
  %129 = insertelement <2 x double> %128, double %126, i32 1
  %130 = insertelement <2 x double> undef, double %118, i32 0
  %131 = insertelement <2 x double> %130, double %122, i32 1
  %132 = fsub <2 x double> %129, %131
  %133 = getelementptr inbounds double, double* %1, i64 %91
  %134 = load double, double* %133, align 8
  %135 = getelementptr inbounds double, double* %1, i64 %95
  %136 = load double, double* %135, align 8
  %137 = fadd double %134, %136
  %138 = or i64 %91, 1
  %139 = getelementptr inbounds double, double* %1, i64 %138
  %140 = load double, double* %139, align 8
  %141 = or i32 %96, 1
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds double, double* %1, i64 %142
  %144 = load double, double* %143, align 8
  %145 = fadd double %140, %144
  %146 = fsub double %134, %136
  %147 = fsub double %140, %144
  %148 = add nsw i64 %91, 2
  %149 = getelementptr inbounds double, double* %1, i64 %148
  %150 = add nsw i64 %95, 2
  %151 = getelementptr inbounds double, double* %1, i64 %150
  %152 = add nsw i64 %91, 3
  %153 = getelementptr inbounds double, double* %1, i64 %152
  %154 = bitcast double* %149 to <2 x double>*
  %155 = load <2 x double>, <2 x double>* %154, align 8
  %156 = bitcast double* %151 to <2 x double>*
  %157 = load <2 x double>, <2 x double>* %156, align 8
  %158 = extractelement <2 x double> %155, i32 0
  %159 = extractelement <2 x double> %157, i32 0
  %160 = fadd double %158, %159
  %161 = extractelement <2 x double> %155, i32 1
  %162 = extractelement <2 x double> %157, i32 1
  %163 = fadd double %161, %162
  %164 = fsub <2 x double> %155, %157
  %165 = shufflevector <2 x double> %164, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %166 = fadd double %101, %137
  store double %166, double* %97, align 8
  %167 = fsub double %110, %145
  store double %167, double* %103, align 8
  %168 = fadd double %119, %160
  store double %168, double* %114, align 8
  %169 = fsub double %127, %163
  store double %169, double* %121, align 8
  %170 = fsub double %101, %137
  store double %170, double* %133, align 8
  %171 = fadd double %110, %145
  store double %171, double* %139, align 8
  %172 = fsub double %119, %160
  store double %172, double* %149, align 8
  %173 = fadd double %127, %163
  store double %173, double* %153, align 8
  %174 = fadd double %111, %147
  %175 = fadd double %112, %146
  %176 = fmul double %74, %174
  %177 = fmul double %79, %175
  %178 = fsub double %176, %177
  store double %178, double* %99, align 8
  %179 = fmul double %74, %175
  %180 = fmul double %79, %174
  %181 = fadd double %179, %180
  store double %181, double* %108, align 8
  %182 = fadd <2 x double> %132, %165
  %183 = insertelement <2 x double> undef, double %72, i32 0
  %184 = shufflevector <2 x double> %183, <2 x double> undef, <2 x i32> zeroinitializer
  %185 = fmul <2 x double> %184, %182
  %186 = insertelement <2 x double> undef, double %77, i32 0
  %187 = shufflevector <2 x double> %186, <2 x double> undef, <2 x i32> zeroinitializer
  %188 = shufflevector <2 x double> %182, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %189 = fmul <2 x double> %187, %188
  %190 = fsub <2 x double> %185, %189
  %191 = fadd <2 x double> %185, %189
  %192 = shufflevector <2 x double> %190, <2 x double> %191, <2 x i32> <i32 0, i32 3>
  %193 = bitcast double* %117 to <2 x double>*
  store <2 x double> %192, <2 x double>* %193, align 8
  %194 = fsub double %111, %147
  %195 = fsub double %112, %146
  %196 = fmul double %87, %194
  %197 = fmul double %90, %195
  %198 = fadd double %197, %196
  store double %198, double* %135, align 8
  %199 = fmul double %87, %195
  %200 = fmul double %90, %194
  %201 = fsub double %199, %200
  store double %201, double* %143, align 8
  %202 = extractelement <2 x double> %132, i32 0
  %203 = extractelement <2 x double> %164, i32 1
  %204 = fsub double %202, %203
  %205 = extractelement <2 x double> %132, i32 1
  %206 = extractelement <2 x double> %164, i32 0
  %207 = fsub double %205, %206
  %208 = insertelement <2 x double> undef, double %207, i32 0
  %209 = shufflevector <2 x double> %208, <2 x double> undef, <2 x i32> zeroinitializer
  %210 = fmul <2 x double> %84, %209
  %211 = insertelement <2 x double> undef, double %204, i32 0
  %212 = shufflevector <2 x double> %211, <2 x double> undef, <2 x i32> zeroinitializer
  %213 = fmul <2 x double> %83, %212
  %214 = fadd <2 x double> %210, %213
  %215 = fsub <2 x double> %210, %213
  %216 = shufflevector <2 x double> %214, <2 x double> %215, <2 x i32> <i32 0, i32 3>
  %217 = bitcast double* %151 to <2 x double>*
  store <2 x double> %216, <2 x double>* %217, align 8
  %218 = sub nsw i64 %26, %63
  %219 = sub nsw i32 %5, %69
  %220 = add nsw i64 %218, %26
  %221 = add nsw i32 %219, %5
  %222 = add nsw i64 %220, %26
  %223 = add nsw i32 %221, %5
  %224 = add nsw i64 %222, %26
  %225 = add nsw i32 %223, %5
  %226 = getelementptr inbounds double, double* %1, i64 %218
  %227 = load double, double* %226, align 8
  %228 = getelementptr inbounds double, double* %1, i64 %222
  %229 = load double, double* %228, align 8
  %230 = fadd double %227, %229
  %231 = or i64 %218, 1
  %232 = getelementptr inbounds double, double* %1, i64 %231
  %233 = load double, double* %232, align 8
  %234 = fsub double -0.000000e+00, %233
  %235 = or i32 %223, 1
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds double, double* %1, i64 %236
  %238 = load double, double* %237, align 8
  %239 = fsub double %234, %238
  %240 = fsub double %227, %229
  %241 = fsub double %238, %233
  %242 = add nsw i64 %218, -2
  %243 = getelementptr inbounds double, double* %1, i64 %242
  %244 = load double, double* %243, align 8
  %245 = add nsw i64 %222, -2
  %246 = getelementptr inbounds double, double* %1, i64 %245
  %247 = load double, double* %246, align 8
  %248 = fadd double %244, %247
  %249 = add nsw i64 %218, -1
  %250 = getelementptr inbounds double, double* %1, i64 %249
  %251 = load double, double* %250, align 8
  %252 = fsub double -0.000000e+00, %251
  %253 = add nsw i64 %222, -1
  %254 = getelementptr inbounds double, double* %1, i64 %253
  %255 = load double, double* %254, align 8
  %256 = fsub double %252, %255
  %257 = insertelement <2 x double> undef, double %244, i32 0
  %258 = insertelement <2 x double> %257, double %255, i32 1
  %259 = insertelement <2 x double> undef, double %247, i32 0
  %260 = insertelement <2 x double> %259, double %251, i32 1
  %261 = fsub <2 x double> %258, %260
  %262 = getelementptr inbounds double, double* %1, i64 %220
  %263 = load double, double* %262, align 8
  %264 = getelementptr inbounds double, double* %1, i64 %224
  %265 = load double, double* %264, align 8
  %266 = fadd double %263, %265
  %267 = or i32 %221, 1
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds double, double* %1, i64 %268
  %270 = load double, double* %269, align 8
  %271 = or i32 %225, 1
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds double, double* %1, i64 %272
  %274 = load double, double* %273, align 8
  %275 = fadd double %270, %274
  %276 = fsub double %263, %265
  %277 = fsub double %270, %274
  %278 = add nsw i64 %220, -2
  %279 = getelementptr inbounds double, double* %1, i64 %278
  %280 = add nsw i64 %224, -2
  %281 = getelementptr inbounds double, double* %1, i64 %280
  %282 = add nsw i64 %220, -1
  %283 = getelementptr inbounds double, double* %1, i64 %282
  %284 = bitcast double* %279 to <2 x double>*
  %285 = load <2 x double>, <2 x double>* %284, align 8
  %286 = bitcast double* %281 to <2 x double>*
  %287 = load <2 x double>, <2 x double>* %286, align 8
  %288 = extractelement <2 x double> %285, i32 0
  %289 = extractelement <2 x double> %287, i32 0
  %290 = fadd double %288, %289
  %291 = extractelement <2 x double> %285, i32 1
  %292 = extractelement <2 x double> %287, i32 1
  %293 = fadd double %291, %292
  %294 = fsub <2 x double> %285, %287
  %295 = shufflevector <2 x double> %294, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %296 = fadd double %230, %266
  store double %296, double* %226, align 8
  %297 = fsub double %239, %275
  store double %297, double* %232, align 8
  %298 = fadd double %248, %290
  store double %298, double* %243, align 8
  %299 = fsub double %256, %293
  store double %299, double* %250, align 8
  %300 = fsub double %230, %266
  store double %300, double* %262, align 8
  %301 = fadd double %239, %275
  store double %301, double* %269, align 8
  %302 = fsub double %248, %290
  store double %302, double* %279, align 8
  %303 = fadd double %256, %293
  store double %303, double* %283, align 8
  %304 = fadd double %240, %277
  %305 = fadd double %241, %276
  %306 = fmul double %79, %304
  %307 = fmul double %74, %305
  %308 = fsub double %306, %307
  store double %308, double* %228, align 8
  %309 = fmul double %79, %305
  %310 = fmul double %74, %304
  %311 = fadd double %309, %310
  store double %311, double* %237, align 8
  %312 = fadd <2 x double> %261, %295
  %313 = fmul <2 x double> %187, %312
  %314 = shufflevector <2 x double> %312, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %315 = fmul <2 x double> %184, %314
  %316 = fsub <2 x double> %313, %315
  %317 = fadd <2 x double> %313, %315
  %318 = shufflevector <2 x double> %316, <2 x double> %317, <2 x i32> <i32 0, i32 3>
  %319 = bitcast double* %246 to <2 x double>*
  store <2 x double> %318, <2 x double>* %319, align 8
  %320 = fsub double %240, %277
  %321 = fsub double %241, %276
  %322 = fmul double %90, %320
  %323 = fmul double %87, %321
  %324 = fadd double %323, %322
  store double %324, double* %264, align 8
  %325 = fmul double %90, %321
  %326 = fmul double %87, %320
  %327 = fsub double %325, %326
  store double %327, double* %273, align 8
  %328 = extractelement <2 x double> %261, i32 0
  %329 = extractelement <2 x double> %294, i32 1
  %330 = fsub double %328, %329
  %331 = extractelement <2 x double> %261, i32 1
  %332 = extractelement <2 x double> %294, i32 0
  %333 = fsub double %331, %332
  %334 = insertelement <2 x double> undef, double %333, i32 0
  %335 = shufflevector <2 x double> %334, <2 x double> undef, <2 x i32> zeroinitializer
  %336 = fmul <2 x double> %83, %335
  %337 = insertelement <2 x double> undef, double %330, i32 0
  %338 = shufflevector <2 x double> %337, <2 x double> undef, <2 x i32> zeroinitializer
  %339 = fmul <2 x double> %84, %338
  %340 = fadd <2 x double> %336, %339
  %341 = fsub <2 x double> %336, %339
  %342 = shufflevector <2 x double> %340, <2 x double> %341, <2 x i32> <i32 0, i32 3>
  %343 = bitcast double* %281 to <2 x double>*
  store <2 x double> %342, <2 x double>* %343, align 8
  %344 = add nuw nsw i64 %63, 4
  %345 = add nuw nsw i32 %69, 4
  %346 = icmp slt i64 %344, %61
  br i1 %346, label %62, label %347

347:                                              ; preds = %62, %3
  %348 = phi double [ 1.000000e+00, %3 ], [ %72, %62 ]
  %349 = phi double [ 0.000000e+00, %3 ], [ %77, %62 ]
  %350 = phi <2 x double> [ <double 0.000000e+00, double 1.000000e+00>, %3 ], [ %84, %62 ]
  %351 = fadd double %54, %348
  %352 = fmul double %56, %351
  %353 = fadd double %54, %349
  %354 = fmul double %56, %353
  %355 = insertelement <2 x double> undef, double %54, i32 0
  %356 = shufflevector <2 x double> %355, <2 x double> undef, <2 x i32> zeroinitializer
  %357 = fsub <2 x double> %350, %356
  %358 = insertelement <2 x double> undef, double %58, i32 0
  %359 = shufflevector <2 x double> %358, <2 x double> undef, <2 x i32> zeroinitializer
  %360 = fmul <2 x double> %359, %357
  %361 = mul nsw i32 %4, 3
  %362 = mul nsw i32 %4, 5
  %363 = mul nsw i32 %4, 7
  %364 = getelementptr inbounds double, double* %1, i64 %61
  %365 = load double, double* %364, align 8
  %366 = add nsw i32 %362, -2
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds double, double* %1, i64 %367
  %369 = load double, double* %368, align 8
  %370 = fadd double %365, %369
  %371 = add nsw i32 %4, -1
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds double, double* %1, i64 %372
  %374 = load double, double* %373, align 8
  %375 = fsub double -0.000000e+00, %374
  %376 = add nsw i32 %362, -1
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds double, double* %1, i64 %377
  %379 = load double, double* %378, align 8
  %380 = fsub double %375, %379
  %381 = insertelement <2 x double> undef, double %365, i32 0
  %382 = insertelement <2 x double> %381, double %379, i32 1
  %383 = insertelement <2 x double> undef, double %369, i32 0
  %384 = insertelement <2 x double> %383, double %374, i32 1
  %385 = fsub <2 x double> %382, %384
  %386 = add nsw i32 %361, -2
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds double, double* %1, i64 %387
  %389 = add nsw i32 %363, -2
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds double, double* %1, i64 %390
  %392 = add nsw i32 %361, -1
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds double, double* %1, i64 %393
  %395 = bitcast double* %388 to <2 x double>*
  %396 = load <2 x double>, <2 x double>* %395, align 8
  %397 = bitcast double* %391 to <2 x double>*
  %398 = load <2 x double>, <2 x double>* %397, align 8
  %399 = extractelement <2 x double> %396, i32 0
  %400 = extractelement <2 x double> %398, i32 0
  %401 = fadd double %399, %400
  %402 = extractelement <2 x double> %396, i32 1
  %403 = extractelement <2 x double> %398, i32 1
  %404 = fadd double %402, %403
  %405 = fsub <2 x double> %396, %398
  %406 = shufflevector <2 x double> %405, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %407 = fadd double %370, %401
  store double %407, double* %364, align 8
  %408 = fsub double %380, %404
  store double %408, double* %373, align 8
  %409 = fsub double %370, %401
  store double %409, double* %388, align 8
  %410 = fadd double %380, %404
  store double %410, double* %394, align 8
  %411 = fadd <2 x double> %385, %406
  %412 = insertelement <2 x double> undef, double %352, i32 0
  %413 = shufflevector <2 x double> %412, <2 x double> undef, <2 x i32> zeroinitializer
  %414 = fmul <2 x double> %413, %411
  %415 = insertelement <2 x double> undef, double %354, i32 0
  %416 = shufflevector <2 x double> %415, <2 x double> undef, <2 x i32> zeroinitializer
  %417 = shufflevector <2 x double> %411, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %418 = fmul <2 x double> %416, %417
  %419 = fsub <2 x double> %414, %418
  %420 = fadd <2 x double> %414, %418
  %421 = shufflevector <2 x double> %419, <2 x double> %420, <2 x i32> <i32 0, i32 3>
  %422 = bitcast double* %368 to <2 x double>*
  store <2 x double> %421, <2 x double>* %422, align 8
  %423 = extractelement <2 x double> %385, i32 0
  %424 = extractelement <2 x double> %405, i32 1
  %425 = fsub double %423, %424
  %426 = extractelement <2 x double> %385, i32 1
  %427 = extractelement <2 x double> %405, i32 0
  %428 = fsub double %426, %427
  %429 = insertelement <2 x double> undef, double %428, i32 0
  %430 = shufflevector <2 x double> %429, <2 x double> undef, <2 x i32> zeroinitializer
  %431 = fmul <2 x double> %360, %430
  %432 = shufflevector <2 x double> %360, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %433 = insertelement <2 x double> undef, double %425, i32 0
  %434 = shufflevector <2 x double> %433, <2 x double> undef, <2 x i32> zeroinitializer
  %435 = fmul <2 x double> %432, %434
  %436 = fadd <2 x double> %431, %435
  %437 = fsub <2 x double> %431, %435
  %438 = shufflevector <2 x double> %436, <2 x double> %437, <2 x i32> <i32 0, i32 3>
  %439 = bitcast double* %391 to <2 x double>*
  store <2 x double> %438, <2 x double>* %439, align 8
  %440 = sext i32 %4 to i64
  %441 = getelementptr inbounds double, double* %1, i64 %440
  %442 = load double, double* %441, align 8
  %443 = sext i32 %362 to i64
  %444 = getelementptr inbounds double, double* %1, i64 %443
  %445 = load double, double* %444, align 8
  %446 = fadd double %442, %445
  %447 = add nsw i32 %4, 1
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds double, double* %1, i64 %448
  %450 = load double, double* %449, align 8
  %451 = fsub double -0.000000e+00, %450
  %452 = add nsw i32 %362, 1
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds double, double* %1, i64 %453
  %455 = load double, double* %454, align 8
  %456 = fsub double %451, %455
  %457 = fsub double %442, %445
  %458 = fsub double %455, %450
  %459 = sext i32 %361 to i64
  %460 = getelementptr inbounds double, double* %1, i64 %459
  %461 = load double, double* %460, align 8
  %462 = sext i32 %363 to i64
  %463 = getelementptr inbounds double, double* %1, i64 %462
  %464 = load double, double* %463, align 8
  %465 = fadd double %461, %464
  %466 = add nsw i32 %361, 1
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %1, i64 %467
  %469 = load double, double* %468, align 8
  %470 = add nsw i32 %363, 1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds double, double* %1, i64 %471
  %473 = load double, double* %472, align 8
  %474 = fadd double %469, %473
  %475 = fsub double %461, %464
  %476 = fsub double %469, %473
  %477 = fadd double %446, %465
  store double %477, double* %441, align 8
  %478 = fsub double %456, %474
  store double %478, double* %449, align 8
  %479 = fsub double %446, %465
  store double %479, double* %460, align 8
  %480 = fadd double %456, %474
  store double %480, double* %468, align 8
  %481 = fadd double %457, %476
  %482 = fadd double %458, %475
  %483 = fsub double %481, %482
  %484 = fmul double %54, %483
  store double %484, double* %444, align 8
  %485 = fadd double %482, %481
  %486 = fmul double %54, %485
  store double %486, double* %454, align 8
  %487 = fsub double %457, %476
  %488 = fsub double %458, %475
  %489 = fsub double -0.000000e+00, %54
  %490 = fadd double %488, %487
  %491 = fmul double %490, %489
  store double %491, double* %463, align 8
  %492 = fsub double %488, %487
  %493 = fmul double %492, %489
  store double %493, double* %472, align 8
  %494 = add nsw i32 %4, 2
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds double, double* %1, i64 %495
  %497 = load double, double* %496, align 8
  %498 = add nsw i32 %362, 2
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds double, double* %1, i64 %499
  %501 = load double, double* %500, align 8
  %502 = fadd double %497, %501
  %503 = add nsw i32 %4, 3
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds double, double* %1, i64 %504
  %506 = load double, double* %505, align 8
  %507 = fsub double -0.000000e+00, %506
  %508 = add nsw i32 %362, 3
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds double, double* %1, i64 %509
  %511 = load double, double* %510, align 8
  %512 = fsub double %507, %511
  %513 = insertelement <2 x double> undef, double %497, i32 0
  %514 = insertelement <2 x double> %513, double %511, i32 1
  %515 = insertelement <2 x double> undef, double %501, i32 0
  %516 = insertelement <2 x double> %515, double %506, i32 1
  %517 = fsub <2 x double> %514, %516
  %518 = add nsw i32 %361, 2
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds double, double* %1, i64 %519
  %521 = add nsw i32 %363, 2
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds double, double* %1, i64 %522
  %524 = add nsw i32 %361, 3
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds double, double* %1, i64 %525
  %527 = bitcast double* %520 to <2 x double>*
  %528 = load <2 x double>, <2 x double>* %527, align 8
  %529 = bitcast double* %523 to <2 x double>*
  %530 = load <2 x double>, <2 x double>* %529, align 8
  %531 = extractelement <2 x double> %528, i32 0
  %532 = extractelement <2 x double> %530, i32 0
  %533 = fadd double %531, %532
  %534 = extractelement <2 x double> %528, i32 1
  %535 = extractelement <2 x double> %530, i32 1
  %536 = fadd double %534, %535
  %537 = fsub <2 x double> %528, %530
  %538 = shufflevector <2 x double> %537, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %539 = fadd double %502, %533
  store double %539, double* %496, align 8
  %540 = fsub double %512, %536
  store double %540, double* %505, align 8
  %541 = fsub double %502, %533
  store double %541, double* %520, align 8
  %542 = fadd double %512, %536
  store double %542, double* %526, align 8
  %543 = fadd <2 x double> %517, %538
  %544 = fmul <2 x double> %416, %543
  %545 = shufflevector <2 x double> %543, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %546 = fmul <2 x double> %413, %545
  %547 = fsub <2 x double> %544, %546
  %548 = fadd <2 x double> %544, %546
  %549 = shufflevector <2 x double> %547, <2 x double> %548, <2 x i32> <i32 0, i32 3>
  %550 = bitcast double* %500 to <2 x double>*
  store <2 x double> %549, <2 x double>* %550, align 8
  %551 = extractelement <2 x double> %517, i32 0
  %552 = extractelement <2 x double> %537, i32 1
  %553 = fsub double %551, %552
  %554 = extractelement <2 x double> %517, i32 1
  %555 = extractelement <2 x double> %537, i32 0
  %556 = fsub double %554, %555
  %557 = shufflevector <2 x double> %360, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %558 = insertelement <2 x double> undef, double %556, i32 0
  %559 = shufflevector <2 x double> %558, <2 x double> undef, <2 x i32> zeroinitializer
  %560 = fmul <2 x double> %557, %559
  %561 = insertelement <2 x double> undef, double %553, i32 0
  %562 = shufflevector <2 x double> %561, <2 x double> undef, <2 x i32> zeroinitializer
  %563 = fmul <2 x double> %360, %562
  %564 = fadd <2 x double> %560, %563
  %565 = fsub <2 x double> %560, %563
  %566 = shufflevector <2 x double> %564, <2 x double> %565, <2 x i32> <i32 0, i32 3>
  %567 = bitcast double* %523 to <2 x double>*
  store <2 x double> %566, <2 x double>* %567, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @bitrv2conj(i32, i32* nocapture readonly, double*) local_unnamed_addr #1 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i32 [ %0, %3 ], [ %7, %4 ]
  %6 = phi i32 [ 1, %3 ], [ %9, %4 ]
  %7 = ashr i32 %5, 2
  %8 = icmp sgt i32 %5, 35
  %9 = shl i32 %6, 1
  br i1 %8, label %4, label %10

10:                                               ; preds = %4
  %11 = ashr i32 %0, 1
  %12 = shl nsw i32 %6, 2
  %13 = icmp eq i32 %7, 8
  %14 = icmp sgt i32 %6, 0
  br i1 %13, label %19, label %15

15:                                               ; preds = %10
  br i1 %14, label %16, label %757

16:                                               ; preds = %15
  %17 = sext i32 %6 to i64
  %18 = zext i32 %6 to i64
  br label %512

19:                                               ; preds = %10
  br i1 %14, label %20, label %757

20:                                               ; preds = %19
  %21 = shl nsw i32 %6, 3
  %22 = sext i32 %6 to i64
  %23 = zext i32 %6 to i64
  br label %24

24:                                               ; preds = %364, %20
  %25 = phi i64 [ 0, %20 ], [ %510, %364 ]
  %26 = icmp eq i64 %25, 0
  %27 = add nsw i64 %25, %22
  br i1 %26, label %364, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds i32, i32* %1, i64 %27
  %30 = trunc i64 %25 to i32
  %31 = shl nsw i32 %30, 2
  br label %32

32:                                               ; preds = %32, %28
  %33 = phi i64 [ 0, %28 ], [ %362, %32 ]
  %34 = load i32, i32* %29, align 4
  %35 = shl nsw i32 %34, 1
  %36 = trunc i64 %33 to i32
  %37 = shl i32 %36, 2
  %38 = add nsw i32 %35, %37
  %39 = add nsw i64 %33, %22
  %40 = getelementptr inbounds i32, i32* %1, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = shl nsw i32 %41, 1
  %43 = add nsw i32 %42, %31
  %44 = sext i32 %38 to i64
  %45 = getelementptr inbounds double, double* %2, i64 %44
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = or i32 %38, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %2, i64 %49
  %51 = load double, double* %50, align 8
  %52 = fsub double -0.000000e+00, %51
  %53 = sext i32 %43 to i64
  %54 = getelementptr inbounds double, double* %2, i64 %53
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = or i32 %43, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds double, double* %2, i64 %58
  %60 = load double, double* %59, align 8
  %61 = fsub double -0.000000e+00, %60
  store i64 %56, i64* %46, align 8
  store double %61, double* %50, align 8
  store i64 %47, i64* %55, align 8
  store double %52, double* %59, align 8
  %62 = add nsw i32 %38, %12
  %63 = add nsw i32 %43, %21
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds double, double* %2, i64 %64
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = or i32 %62, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds double, double* %2, i64 %69
  %71 = load double, double* %70, align 8
  %72 = fsub double -0.000000e+00, %71
  %73 = sext i32 %63 to i64
  %74 = getelementptr inbounds double, double* %2, i64 %73
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = or i32 %63, 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double, double* %2, i64 %78
  %80 = load double, double* %79, align 8
  %81 = fsub double -0.000000e+00, %80
  store i64 %76, i64* %66, align 8
  store double %81, double* %70, align 8
  store i64 %67, i64* %75, align 8
  store double %72, double* %79, align 8
  %82 = add nsw i32 %62, %12
  %83 = sub nsw i32 %63, %12
  %84 = sext i32 %82 to i64
  %85 = getelementptr inbounds double, double* %2, i64 %84
  %86 = bitcast double* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = or i32 %82, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %2, i64 %89
  %91 = load double, double* %90, align 8
  %92 = fsub double -0.000000e+00, %91
  %93 = sext i32 %83 to i64
  %94 = getelementptr inbounds double, double* %2, i64 %93
  %95 = bitcast double* %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = or i32 %83, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds double, double* %2, i64 %98
  %100 = load double, double* %99, align 8
  %101 = fsub double -0.000000e+00, %100
  store i64 %96, i64* %86, align 8
  store double %101, double* %90, align 8
  store i64 %87, i64* %95, align 8
  store double %92, double* %99, align 8
  %102 = add nsw i32 %82, %12
  %103 = add nsw i32 %83, %21
  %104 = sext i32 %102 to i64
  %105 = getelementptr inbounds double, double* %2, i64 %104
  %106 = bitcast double* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = or i32 %102, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds double, double* %2, i64 %109
  %111 = load double, double* %110, align 8
  %112 = fsub double -0.000000e+00, %111
  %113 = sext i32 %103 to i64
  %114 = getelementptr inbounds double, double* %2, i64 %113
  %115 = bitcast double* %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = or i32 %103, 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds double, double* %2, i64 %118
  %120 = load double, double* %119, align 8
  %121 = fsub double -0.000000e+00, %120
  store i64 %116, i64* %106, align 8
  store double %121, double* %110, align 8
  store i64 %107, i64* %115, align 8
  store double %112, double* %119, align 8
  %122 = add nsw i32 %102, %11
  %123 = add nsw i32 %103, 2
  %124 = sext i32 %122 to i64
  %125 = getelementptr inbounds double, double* %2, i64 %124
  %126 = bitcast double* %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = add nsw i32 %122, 1
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds double, double* %2, i64 %129
  %131 = load double, double* %130, align 8
  %132 = fsub double -0.000000e+00, %131
  %133 = sext i32 %123 to i64
  %134 = getelementptr inbounds double, double* %2, i64 %133
  %135 = bitcast double* %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = add nsw i32 %103, 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds double, double* %2, i64 %138
  %140 = load double, double* %139, align 8
  %141 = fsub double -0.000000e+00, %140
  store i64 %136, i64* %126, align 8
  store double %141, double* %130, align 8
  store i64 %127, i64* %135, align 8
  store double %132, double* %139, align 8
  %142 = sub nsw i32 %122, %12
  %143 = sub nsw i32 %123, %21
  %144 = sext i32 %142 to i64
  %145 = getelementptr inbounds double, double* %2, i64 %144
  %146 = bitcast double* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = add nsw i32 %142, 1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds double, double* %2, i64 %149
  %151 = load double, double* %150, align 8
  %152 = fsub double -0.000000e+00, %151
  %153 = sext i32 %143 to i64
  %154 = getelementptr inbounds double, double* %2, i64 %153
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = add nsw i32 %143, 1
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds double, double* %2, i64 %158
  %160 = load double, double* %159, align 8
  %161 = fsub double -0.000000e+00, %160
  store i64 %156, i64* %146, align 8
  store double %161, double* %150, align 8
  store i64 %147, i64* %155, align 8
  store double %152, double* %159, align 8
  %162 = sub nsw i32 %142, %12
  %163 = add nsw i32 %143, %12
  %164 = sext i32 %162 to i64
  %165 = getelementptr inbounds double, double* %2, i64 %164
  %166 = bitcast double* %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = add nsw i32 %162, 1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds double, double* %2, i64 %169
  %171 = load double, double* %170, align 8
  %172 = fsub double -0.000000e+00, %171
  %173 = sext i32 %163 to i64
  %174 = getelementptr inbounds double, double* %2, i64 %173
  %175 = bitcast double* %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = add nsw i32 %163, 1
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds double, double* %2, i64 %178
  %180 = load double, double* %179, align 8
  %181 = fsub double -0.000000e+00, %180
  store i64 %176, i64* %166, align 8
  store double %181, double* %170, align 8
  store i64 %167, i64* %175, align 8
  store double %172, double* %179, align 8
  %182 = sub nsw i32 %162, %12
  %183 = sub nsw i32 %163, %21
  %184 = sext i32 %182 to i64
  %185 = getelementptr inbounds double, double* %2, i64 %184
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = add nsw i32 %182, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds double, double* %2, i64 %189
  %191 = load double, double* %190, align 8
  %192 = fsub double -0.000000e+00, %191
  %193 = sext i32 %183 to i64
  %194 = getelementptr inbounds double, double* %2, i64 %193
  %195 = bitcast double* %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = add nsw i32 %183, 1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds double, double* %2, i64 %198
  %200 = load double, double* %199, align 8
  %201 = fsub double -0.000000e+00, %200
  store i64 %196, i64* %186, align 8
  store double %201, double* %190, align 8
  store i64 %187, i64* %195, align 8
  store double %192, double* %199, align 8
  %202 = add nsw i32 %182, 2
  %203 = add nsw i32 %183, %11
  %204 = sext i32 %202 to i64
  %205 = getelementptr inbounds double, double* %2, i64 %204
  %206 = bitcast double* %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = add nsw i32 %182, 3
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds double, double* %2, i64 %209
  %211 = load double, double* %210, align 8
  %212 = fsub double -0.000000e+00, %211
  %213 = sext i32 %203 to i64
  %214 = getelementptr inbounds double, double* %2, i64 %213
  %215 = bitcast double* %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = add nsw i32 %203, 1
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds double, double* %2, i64 %218
  %220 = load double, double* %219, align 8
  %221 = fsub double -0.000000e+00, %220
  store i64 %216, i64* %206, align 8
  store double %221, double* %210, align 8
  store i64 %207, i64* %215, align 8
  store double %212, double* %219, align 8
  %222 = add i32 %162, 2
  %223 = add i32 %163, %11
  %224 = sext i32 %222 to i64
  %225 = getelementptr inbounds double, double* %2, i64 %224
  %226 = bitcast double* %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = add i32 %162, 3
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %2, i64 %229
  %231 = load double, double* %230, align 8
  %232 = fsub double -0.000000e+00, %231
  %233 = sext i32 %223 to i64
  %234 = getelementptr inbounds double, double* %2, i64 %233
  %235 = bitcast double* %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = add nsw i32 %223, 1
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds double, double* %2, i64 %238
  %240 = load double, double* %239, align 8
  %241 = fsub double -0.000000e+00, %240
  store i64 %236, i64* %226, align 8
  store double %241, double* %230, align 8
  store i64 %227, i64* %235, align 8
  store double %232, double* %239, align 8
  %242 = add i32 %142, 2
  %243 = sub nsw i32 %223, %12
  %244 = sext i32 %242 to i64
  %245 = getelementptr inbounds double, double* %2, i64 %244
  %246 = bitcast double* %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = add i32 %142, 3
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds double, double* %2, i64 %249
  %251 = load double, double* %250, align 8
  %252 = fsub double -0.000000e+00, %251
  %253 = sext i32 %243 to i64
  %254 = getelementptr inbounds double, double* %2, i64 %253
  %255 = bitcast double* %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = add nsw i32 %243, 1
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double, double* %2, i64 %258
  %260 = load double, double* %259, align 8
  %261 = fsub double -0.000000e+00, %260
  store i64 %256, i64* %246, align 8
  store double %261, double* %250, align 8
  store i64 %247, i64* %255, align 8
  store double %252, double* %259, align 8
  %262 = add i32 %122, 2
  %263 = add nsw i32 %243, %21
  %264 = sext i32 %262 to i64
  %265 = getelementptr inbounds double, double* %2, i64 %264
  %266 = bitcast double* %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = add i32 %122, 3
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds double, double* %2, i64 %269
  %271 = load double, double* %270, align 8
  %272 = fsub double -0.000000e+00, %271
  %273 = sext i32 %263 to i64
  %274 = getelementptr inbounds double, double* %2, i64 %273
  %275 = bitcast double* %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = add nsw i32 %263, 1
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds double, double* %2, i64 %278
  %280 = load double, double* %279, align 8
  %281 = fsub double -0.000000e+00, %280
  store i64 %276, i64* %266, align 8
  store double %281, double* %270, align 8
  store i64 %267, i64* %275, align 8
  store double %272, double* %279, align 8
  %282 = sub nsw i32 %262, %11
  %283 = add nsw i32 %263, -2
  %284 = sext i32 %282 to i64
  %285 = getelementptr inbounds double, double* %2, i64 %284
  %286 = bitcast double* %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = add nsw i32 %282, 1
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds double, double* %2, i64 %289
  %291 = load double, double* %290, align 8
  %292 = fsub double -0.000000e+00, %291
  %293 = sext i32 %283 to i64
  %294 = getelementptr inbounds double, double* %2, i64 %293
  %295 = bitcast double* %294 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = add nsw i32 %263, -1
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds double, double* %2, i64 %298
  %300 = load double, double* %299, align 8
  %301 = fsub double -0.000000e+00, %300
  store i64 %296, i64* %286, align 8
  store double %301, double* %290, align 8
  store i64 %287, i64* %295, align 8
  store double %292, double* %299, align 8
  %302 = sub nsw i32 %282, %12
  %303 = sub nsw i32 %283, %21
  %304 = sext i32 %302 to i64
  %305 = getelementptr inbounds double, double* %2, i64 %304
  %306 = bitcast double* %305 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = add nsw i32 %302, 1
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds double, double* %2, i64 %309
  %311 = load double, double* %310, align 8
  %312 = fsub double -0.000000e+00, %311
  %313 = sext i32 %303 to i64
  %314 = getelementptr inbounds double, double* %2, i64 %313
  %315 = bitcast double* %314 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = add nsw i32 %303, 1
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds double, double* %2, i64 %318
  %320 = load double, double* %319, align 8
  %321 = fsub double -0.000000e+00, %320
  store i64 %316, i64* %306, align 8
  store double %321, double* %310, align 8
  store i64 %307, i64* %315, align 8
  store double %312, double* %319, align 8
  %322 = sub nsw i32 %302, %12
  %323 = add nsw i32 %303, %12
  %324 = sext i32 %322 to i64
  %325 = getelementptr inbounds double, double* %2, i64 %324
  %326 = bitcast double* %325 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = add nsw i32 %322, 1
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds double, double* %2, i64 %329
  %331 = load double, double* %330, align 8
  %332 = fsub double -0.000000e+00, %331
  %333 = sext i32 %323 to i64
  %334 = getelementptr inbounds double, double* %2, i64 %333
  %335 = bitcast double* %334 to i64*
  %336 = load i64, i64* %335, align 8
  %337 = add nsw i32 %323, 1
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds double, double* %2, i64 %338
  %340 = load double, double* %339, align 8
  %341 = fsub double -0.000000e+00, %340
  store i64 %336, i64* %326, align 8
  store double %341, double* %330, align 8
  store i64 %327, i64* %335, align 8
  store double %332, double* %339, align 8
  %342 = sub nsw i32 %322, %12
  %343 = sub nsw i32 %323, %21
  %344 = sext i32 %342 to i64
  %345 = getelementptr inbounds double, double* %2, i64 %344
  %346 = bitcast double* %345 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = add nsw i32 %342, 1
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds double, double* %2, i64 %349
  %351 = load double, double* %350, align 8
  %352 = fsub double -0.000000e+00, %351
  %353 = sext i32 %343 to i64
  %354 = getelementptr inbounds double, double* %2, i64 %353
  %355 = bitcast double* %354 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = add nsw i32 %343, 1
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds double, double* %2, i64 %358
  %360 = load double, double* %359, align 8
  %361 = fsub double -0.000000e+00, %360
  store i64 %356, i64* %346, align 8
  store double %361, double* %350, align 8
  store i64 %347, i64* %355, align 8
  store double %352, double* %359, align 8
  %362 = add nuw nsw i64 %33, 1
  %363 = icmp eq i64 %362, %25
  br i1 %363, label %364, label %32

364:                                              ; preds = %32, %24
  %365 = phi i32 [ 0, %24 ], [ %31, %32 ]
  %366 = getelementptr inbounds i32, i32* %1, i64 %27
  %367 = load i32, i32* %366, align 4
  %368 = shl nsw i32 %367, 1
  %369 = add nsw i32 %368, %365
  %370 = add nsw i32 %369, 2
  %371 = add nsw i32 %369, %11
  %372 = or i32 %369, 1
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds double, double* %2, i64 %373
  %375 = load double, double* %374, align 8
  %376 = fsub double -0.000000e+00, %375
  store double %376, double* %374, align 8
  %377 = sext i32 %370 to i64
  %378 = getelementptr inbounds double, double* %2, i64 %377
  %379 = bitcast double* %378 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = add nsw i32 %369, 3
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds double, double* %2, i64 %382
  %384 = load double, double* %383, align 8
  %385 = fsub double -0.000000e+00, %384
  %386 = sext i32 %371 to i64
  %387 = getelementptr inbounds double, double* %2, i64 %386
  %388 = bitcast double* %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i32 %371, 1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds double, double* %2, i64 %391
  %393 = load double, double* %392, align 8
  %394 = fsub double -0.000000e+00, %393
  store i64 %389, i64* %379, align 8
  store double %394, double* %383, align 8
  store i64 %380, i64* %388, align 8
  store double %385, double* %392, align 8
  %395 = add nsw i32 %371, 3
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds double, double* %2, i64 %396
  %398 = load double, double* %397, align 8
  %399 = fsub double -0.000000e+00, %398
  store double %399, double* %397, align 8
  %400 = add nsw i32 %370, %12
  %401 = add nsw i32 %371, %21
  %402 = sext i32 %400 to i64
  %403 = getelementptr inbounds double, double* %2, i64 %402
  %404 = bitcast double* %403 to i64*
  %405 = load i64, i64* %404, align 8
  %406 = or i32 %400, 1
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds double, double* %2, i64 %407
  %409 = load double, double* %408, align 8
  %410 = fsub double -0.000000e+00, %409
  %411 = sext i32 %401 to i64
  %412 = getelementptr inbounds double, double* %2, i64 %411
  %413 = bitcast double* %412 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = add nsw i32 %401, 1
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds double, double* %2, i64 %416
  %418 = load double, double* %417, align 8
  %419 = fsub double -0.000000e+00, %418
  store i64 %414, i64* %404, align 8
  store double %419, double* %408, align 8
  store i64 %405, i64* %413, align 8
  store double %410, double* %417, align 8
  %420 = add nsw i32 %400, %12
  %421 = sub nsw i32 %401, %12
  %422 = sext i32 %420 to i64
  %423 = getelementptr inbounds double, double* %2, i64 %422
  %424 = bitcast double* %423 to i64*
  %425 = load i64, i64* %424, align 8
  %426 = or i32 %420, 1
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds double, double* %2, i64 %427
  %429 = load double, double* %428, align 8
  %430 = fsub double -0.000000e+00, %429
  %431 = sext i32 %421 to i64
  %432 = getelementptr inbounds double, double* %2, i64 %431
  %433 = bitcast double* %432 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = add nsw i32 %421, 1
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds double, double* %2, i64 %436
  %438 = load double, double* %437, align 8
  %439 = fsub double -0.000000e+00, %438
  store i64 %434, i64* %424, align 8
  store double %439, double* %428, align 8
  store i64 %425, i64* %433, align 8
  store double %430, double* %437, align 8
  %440 = add nsw i32 %420, -2
  %441 = sub nsw i32 %421, %11
  %442 = sext i32 %440 to i64
  %443 = getelementptr inbounds double, double* %2, i64 %442
  %444 = bitcast double* %443 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = add nsw i32 %420, -1
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds double, double* %2, i64 %447
  %449 = load double, double* %448, align 8
  %450 = fsub double -0.000000e+00, %449
  %451 = sext i32 %441 to i64
  %452 = getelementptr inbounds double, double* %2, i64 %451
  %453 = bitcast double* %452 to i64*
  %454 = load i64, i64* %453, align 8
  %455 = add nsw i32 %441, 1
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds double, double* %2, i64 %456
  %458 = load double, double* %457, align 8
  %459 = fsub double -0.000000e+00, %458
  store i64 %454, i64* %444, align 8
  store double %459, double* %448, align 8
  store i64 %445, i64* %453, align 8
  store double %450, double* %457, align 8
  %460 = add i32 %420, %11
  %461 = add i32 %421, 2
  %462 = sext i32 %460 to i64
  %463 = getelementptr inbounds double, double* %2, i64 %462
  %464 = bitcast double* %463 to i64*
  %465 = load i64, i64* %464, align 8
  %466 = add nsw i32 %460, 1
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %2, i64 %467
  %469 = load double, double* %468, align 8
  %470 = fsub double -0.000000e+00, %469
  %471 = sext i32 %461 to i64
  %472 = getelementptr inbounds double, double* %2, i64 %471
  %473 = bitcast double* %472 to i64*
  %474 = load i64, i64* %473, align 8
  %475 = add i32 %421, 3
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds double, double* %2, i64 %476
  %478 = load double, double* %477, align 8
  %479 = fsub double -0.000000e+00, %478
  store i64 %474, i64* %464, align 8
  store double %479, double* %468, align 8
  store i64 %465, i64* %473, align 8
  store double %470, double* %477, align 8
  %480 = add i32 %420, %12
  %481 = add i32 %421, %21
  %482 = add nsw i32 %480, -1
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds double, double* %2, i64 %483
  %485 = load double, double* %484, align 8
  %486 = fsub double -0.000000e+00, %485
  store double %486, double* %484, align 8
  %487 = sext i32 %480 to i64
  %488 = getelementptr inbounds double, double* %2, i64 %487
  %489 = bitcast double* %488 to i64*
  %490 = load i64, i64* %489, align 8
  %491 = or i32 %480, 1
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds double, double* %2, i64 %492
  %494 = load double, double* %493, align 8
  %495 = fsub double -0.000000e+00, %494
  %496 = sext i32 %481 to i64
  %497 = getelementptr inbounds double, double* %2, i64 %496
  %498 = bitcast double* %497 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = add nsw i32 %481, 1
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds double, double* %2, i64 %501
  %503 = load double, double* %502, align 8
  %504 = fsub double -0.000000e+00, %503
  store i64 %499, i64* %489, align 8
  store double %504, double* %493, align 8
  store i64 %490, i64* %498, align 8
  store double %495, double* %502, align 8
  %505 = add nsw i32 %481, 3
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds double, double* %2, i64 %506
  %508 = load double, double* %507, align 8
  %509 = fsub double -0.000000e+00, %508
  store double %509, double* %507, align 8
  %510 = add nuw nsw i64 %25, 1
  %511 = icmp eq i64 %510, %23
  br i1 %511, label %757, label %24

512:                                              ; preds = %690, %16
  %513 = phi i64 [ 0, %16 ], [ %755, %690 ]
  %514 = icmp eq i64 %513, 0
  %515 = add nsw i64 %513, %17
  br i1 %514, label %690, label %516

516:                                              ; preds = %512
  %517 = getelementptr inbounds i32, i32* %1, i64 %515
  %518 = trunc i64 %513 to i32
  %519 = shl nsw i32 %518, 2
  br label %520

520:                                              ; preds = %520, %516
  %521 = phi i64 [ 0, %516 ], [ %688, %520 ]
  %522 = load i32, i32* %517, align 4
  %523 = trunc i64 %521 to i32
  %524 = shl i32 %523, 2
  %525 = add nsw i32 %522, %524
  %526 = add nsw i64 %521, %17
  %527 = getelementptr inbounds i32, i32* %1, i64 %526
  %528 = load i32, i32* %527, align 4
  %529 = add nsw i32 %528, %519
  %530 = sext i32 %525 to i64
  %531 = getelementptr inbounds double, double* %2, i64 %530
  %532 = bitcast double* %531 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = add nsw i32 %525, 1
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds double, double* %2, i64 %535
  %537 = load double, double* %536, align 8
  %538 = fsub double -0.000000e+00, %537
  %539 = sext i32 %529 to i64
  %540 = getelementptr inbounds double, double* %2, i64 %539
  %541 = bitcast double* %540 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = add nsw i32 %529, 1
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds double, double* %2, i64 %544
  %546 = load double, double* %545, align 8
  %547 = fsub double -0.000000e+00, %546
  store i64 %542, i64* %532, align 8
  store double %547, double* %536, align 8
  store i64 %533, i64* %541, align 8
  store double %538, double* %545, align 8
  %548 = add nsw i32 %525, %12
  %549 = add nsw i32 %529, %12
  %550 = sext i32 %548 to i64
  %551 = getelementptr inbounds double, double* %2, i64 %550
  %552 = bitcast double* %551 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = add nsw i32 %548, 1
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds double, double* %2, i64 %555
  %557 = load double, double* %556, align 8
  %558 = fsub double -0.000000e+00, %557
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds double, double* %2, i64 %559
  %561 = bitcast double* %560 to i64*
  %562 = load i64, i64* %561, align 8
  %563 = add nsw i32 %549, 1
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds double, double* %2, i64 %564
  %566 = load double, double* %565, align 8
  %567 = fsub double -0.000000e+00, %566
  store i64 %562, i64* %552, align 8
  store double %567, double* %556, align 8
  store i64 %553, i64* %561, align 8
  store double %558, double* %565, align 8
  %568 = add nsw i32 %548, %11
  %569 = add nsw i32 %549, 2
  %570 = sext i32 %568 to i64
  %571 = getelementptr inbounds double, double* %2, i64 %570
  %572 = bitcast double* %571 to i64*
  %573 = load i64, i64* %572, align 8
  %574 = add nsw i32 %568, 1
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds double, double* %2, i64 %575
  %577 = load double, double* %576, align 8
  %578 = fsub double -0.000000e+00, %577
  %579 = sext i32 %569 to i64
  %580 = getelementptr inbounds double, double* %2, i64 %579
  %581 = bitcast double* %580 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = add nsw i32 %549, 3
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds double, double* %2, i64 %584
  %586 = load double, double* %585, align 8
  %587 = fsub double -0.000000e+00, %586
  store i64 %582, i64* %572, align 8
  store double %587, double* %576, align 8
  store i64 %573, i64* %581, align 8
  store double %578, double* %585, align 8
  %588 = sub nsw i32 %568, %12
  %589 = sub nsw i32 %569, %12
  %590 = sext i32 %588 to i64
  %591 = getelementptr inbounds double, double* %2, i64 %590
  %592 = bitcast double* %591 to i64*
  %593 = load i64, i64* %592, align 8
  %594 = add nsw i32 %588, 1
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds double, double* %2, i64 %595
  %597 = load double, double* %596, align 8
  %598 = fsub double -0.000000e+00, %597
  %599 = sext i32 %589 to i64
  %600 = getelementptr inbounds double, double* %2, i64 %599
  %601 = bitcast double* %600 to i64*
  %602 = load i64, i64* %601, align 8
  %603 = add nsw i32 %589, 1
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds double, double* %2, i64 %604
  %606 = load double, double* %605, align 8
  %607 = fsub double -0.000000e+00, %606
  store i64 %602, i64* %592, align 8
  store double %607, double* %596, align 8
  store i64 %593, i64* %601, align 8
  store double %598, double* %605, align 8
  %608 = add nsw i32 %588, 2
  %609 = add nsw i32 %589, %11
  %610 = sext i32 %608 to i64
  %611 = getelementptr inbounds double, double* %2, i64 %610
  %612 = bitcast double* %611 to i64*
  %613 = load i64, i64* %612, align 8
  %614 = add nsw i32 %588, 3
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds double, double* %2, i64 %615
  %617 = load double, double* %616, align 8
  %618 = fsub double -0.000000e+00, %617
  %619 = sext i32 %609 to i64
  %620 = getelementptr inbounds double, double* %2, i64 %619
  %621 = bitcast double* %620 to i64*
  %622 = load i64, i64* %621, align 8
  %623 = add nsw i32 %609, 1
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds double, double* %2, i64 %624
  %626 = load double, double* %625, align 8
  %627 = fsub double -0.000000e+00, %626
  store i64 %622, i64* %612, align 8
  store double %627, double* %616, align 8
  store i64 %613, i64* %621, align 8
  store double %618, double* %625, align 8
  %628 = add i32 %568, 2
  %629 = add i32 %569, %11
  %630 = sext i32 %628 to i64
  %631 = getelementptr inbounds double, double* %2, i64 %630
  %632 = bitcast double* %631 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = add i32 %568, 3
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds double, double* %2, i64 %635
  %637 = load double, double* %636, align 8
  %638 = fsub double -0.000000e+00, %637
  %639 = sext i32 %629 to i64
  %640 = getelementptr inbounds double, double* %2, i64 %639
  %641 = bitcast double* %640 to i64*
  %642 = load i64, i64* %641, align 8
  %643 = add nsw i32 %629, 1
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds double, double* %2, i64 %644
  %646 = load double, double* %645, align 8
  %647 = fsub double -0.000000e+00, %646
  store i64 %642, i64* %632, align 8
  store double %647, double* %636, align 8
  store i64 %633, i64* %641, align 8
  store double %638, double* %645, align 8
  %648 = sub nsw i32 %628, %11
  %649 = add i32 %549, %11
  %650 = sext i32 %648 to i64
  %651 = getelementptr inbounds double, double* %2, i64 %650
  %652 = bitcast double* %651 to i64*
  %653 = load i64, i64* %652, align 8
  %654 = add nsw i32 %648, 1
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds double, double* %2, i64 %655
  %657 = load double, double* %656, align 8
  %658 = fsub double -0.000000e+00, %657
  %659 = sext i32 %649 to i64
  %660 = getelementptr inbounds double, double* %2, i64 %659
  %661 = bitcast double* %660 to i64*
  %662 = load i64, i64* %661, align 8
  %663 = add nsw i32 %649, 1
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds double, double* %2, i64 %664
  %666 = load double, double* %665, align 8
  %667 = fsub double -0.000000e+00, %666
  store i64 %662, i64* %652, align 8
  store double %667, double* %656, align 8
  store i64 %653, i64* %661, align 8
  store double %658, double* %665, align 8
  %668 = sub nsw i32 %648, %12
  %669 = sub nsw i32 %649, %12
  %670 = sext i32 %668 to i64
  %671 = getelementptr inbounds double, double* %2, i64 %670
  %672 = bitcast double* %671 to i64*
  %673 = load i64, i64* %672, align 8
  %674 = add nsw i32 %668, 1
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds double, double* %2, i64 %675
  %677 = load double, double* %676, align 8
  %678 = fsub double -0.000000e+00, %677
  %679 = sext i32 %669 to i64
  %680 = getelementptr inbounds double, double* %2, i64 %679
  %681 = bitcast double* %680 to i64*
  %682 = load i64, i64* %681, align 8
  %683 = add nsw i32 %669, 1
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds double, double* %2, i64 %684
  %686 = load double, double* %685, align 8
  %687 = fsub double -0.000000e+00, %686
  store i64 %682, i64* %672, align 8
  store double %687, double* %676, align 8
  store i64 %673, i64* %681, align 8
  store double %678, double* %685, align 8
  %688 = add nuw nsw i64 %521, 1
  %689 = icmp eq i64 %688, %513
  br i1 %689, label %690, label %520

690:                                              ; preds = %520, %512
  %691 = phi i32 [ 0, %512 ], [ %519, %520 ]
  %692 = getelementptr inbounds i32, i32* %1, i64 %515
  %693 = load i32, i32* %692, align 4
  %694 = add nsw i32 %693, %691
  %695 = add nsw i32 %694, 2
  %696 = add nsw i32 %694, %11
  %697 = add nsw i32 %694, 1
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds double, double* %2, i64 %698
  %700 = load double, double* %699, align 8
  %701 = fsub double -0.000000e+00, %700
  store double %701, double* %699, align 8
  %702 = sext i32 %695 to i64
  %703 = getelementptr inbounds double, double* %2, i64 %702
  %704 = bitcast double* %703 to i64*
  %705 = load i64, i64* %704, align 8
  %706 = add nsw i32 %694, 3
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds double, double* %2, i64 %707
  %709 = load double, double* %708, align 8
  %710 = fsub double -0.000000e+00, %709
  %711 = sext i32 %696 to i64
  %712 = getelementptr inbounds double, double* %2, i64 %711
  %713 = bitcast double* %712 to i64*
  %714 = load i64, i64* %713, align 8
  %715 = add nsw i32 %696, 1
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds double, double* %2, i64 %716
  %718 = load double, double* %717, align 8
  %719 = fsub double -0.000000e+00, %718
  store i64 %714, i64* %704, align 8
  store double %719, double* %708, align 8
  store i64 %705, i64* %713, align 8
  store double %710, double* %717, align 8
  %720 = add nsw i32 %696, 3
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds double, double* %2, i64 %721
  %723 = load double, double* %722, align 8
  %724 = fsub double -0.000000e+00, %723
  store double %724, double* %722, align 8
  %725 = add nsw i32 %695, %12
  %726 = add nsw i32 %696, %12
  %727 = add nsw i32 %725, -1
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds double, double* %2, i64 %728
  %730 = load double, double* %729, align 8
  %731 = fsub double -0.000000e+00, %730
  store double %731, double* %729, align 8
  %732 = sext i32 %725 to i64
  %733 = getelementptr inbounds double, double* %2, i64 %732
  %734 = bitcast double* %733 to i64*
  %735 = load i64, i64* %734, align 8
  %736 = add nsw i32 %725, 1
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds double, double* %2, i64 %737
  %739 = load double, double* %738, align 8
  %740 = fsub double -0.000000e+00, %739
  %741 = sext i32 %726 to i64
  %742 = getelementptr inbounds double, double* %2, i64 %741
  %743 = bitcast double* %742 to i64*
  %744 = load i64, i64* %743, align 8
  %745 = add nsw i32 %726, 1
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds double, double* %2, i64 %746
  %748 = load double, double* %747, align 8
  %749 = fsub double -0.000000e+00, %748
  store i64 %744, i64* %734, align 8
  store double %749, double* %738, align 8
  store i64 %735, i64* %743, align 8
  store double %740, double* %747, align 8
  %750 = add nsw i32 %726, 3
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds double, double* %2, i64 %751
  %753 = load double, double* %752, align 8
  %754 = fsub double -0.000000e+00, %753
  store double %754, double* %752, align 8
  %755 = add nuw nsw i64 %513, 1
  %756 = icmp eq i64 %755, %18
  br i1 %756, label %757, label %512

757:                                              ; preds = %690, %364, %15, %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @bitrv216neg(double*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = bitcast double* %2 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = getelementptr inbounds double, double* %0, i64 4
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds double, double* %0, i64 6
  %9 = bitcast double* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = getelementptr inbounds double, double* %0, i64 8
  %12 = bitcast double* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  %14 = getelementptr inbounds double, double* %0, i64 10
  %15 = bitcast double* %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8
  %17 = getelementptr inbounds double, double* %0, i64 12
  %18 = bitcast double* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = getelementptr inbounds double, double* %0, i64 14
  %21 = bitcast double* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 8
  %23 = getelementptr inbounds double, double* %0, i64 16
  %24 = bitcast double* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = getelementptr inbounds double, double* %0, i64 18
  %27 = bitcast double* %26 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 8
  %29 = getelementptr inbounds double, double* %0, i64 20
  %30 = bitcast double* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 8
  %32 = getelementptr inbounds double, double* %0, i64 22
  %33 = bitcast double* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 8
  %35 = getelementptr inbounds double, double* %0, i64 24
  %36 = bitcast double* %35 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = getelementptr inbounds double, double* %0, i64 26
  %39 = bitcast double* %38 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 8
  %41 = getelementptr inbounds double, double* %0, i64 28
  %42 = bitcast double* %41 to <2 x i64>*
  %43 = load <2 x i64>, <2 x i64>* %42, align 8
  %44 = getelementptr inbounds double, double* %0, i64 30
  %45 = bitcast double* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 8
  %47 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %46, <2 x i64>* %47, align 8
  %48 = bitcast double* %5 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %48, align 8
  %49 = bitcast double* %8 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %49, align 8
  %50 = bitcast double* %11 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %50, align 8
  %51 = bitcast double* %14 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %51, align 8
  %52 = bitcast double* %17 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %52, align 8
  %53 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %53, align 8
  %54 = bitcast double* %23 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %54, align 8
  %55 = bitcast double* %26 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %55, align 8
  %56 = bitcast double* %29 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %56, align 8
  %57 = bitcast double* %32 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %57, align 8
  %58 = bitcast double* %35 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %58, align 8
  %59 = bitcast double* %38 to <2 x i64>*
  store <2 x i64> %37, <2 x i64>* %59, align 8
  %60 = bitcast double* %41 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %60, align 8
  %61 = bitcast double* %44 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %61, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @bitrv208neg(double* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = bitcast double* %2 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = getelementptr inbounds double, double* %0, i64 4
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds double, double* %0, i64 6
  %9 = bitcast double* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = getelementptr inbounds double, double* %0, i64 8
  %12 = bitcast double* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  %14 = getelementptr inbounds double, double* %0, i64 10
  %15 = bitcast double* %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8
  %17 = getelementptr inbounds double, double* %0, i64 12
  %18 = bitcast double* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = getelementptr inbounds double, double* %0, i64 14
  %21 = bitcast double* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 8
  %23 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %23, align 8
  %24 = bitcast double* %5 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %24, align 8
  %25 = bitcast double* %8 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %25, align 8
  %26 = bitcast double* %11 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %26, align 8
  %27 = bitcast double* %14 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %27, align 8
  %28 = bitcast double* %17 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %28, align 8
  %29 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %29, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftb040(double* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds double, double* %0, i64 4
  %3 = bitcast double* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = fadd <2 x double> %4, %6
  %8 = fsub <2 x double> %4, %6
  %9 = getelementptr inbounds double, double* %0, i64 2
  %10 = getelementptr inbounds double, double* %0, i64 6
  %11 = bitcast double* %9 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = bitcast double* %10 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = fadd <2 x double> %12, %14
  %16 = fsub <2 x double> %12, %14
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %18 = fadd <2 x double> %7, %15
  %19 = bitcast double* %0 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 8
  %20 = fadd <2 x double> %8, %17
  %21 = fsub <2 x double> %8, %17
  %22 = shufflevector <2 x double> %20, <2 x double> %21, <2 x i32> <i32 0, i32 3>
  %23 = bitcast double* %9 to <2 x double>*
  store <2 x double> %22, <2 x double>* %23, align 8
  %24 = fsub <2 x double> %7, %15
  %25 = bitcast double* %2 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 8
  %26 = fsub <2 x double> %8, %17
  %27 = fadd <2 x double> %8, %17
  %28 = shufflevector <2 x double> %26, <2 x double> %27, <2 x i32> <i32 0, i32 3>
  %29 = bitcast double* %10 to <2 x double>*
  store <2 x double> %28, <2 x double>* %29, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftmdl1(i32, double*, double* nocapture readonly) local_unnamed_addr #1 {
  %4 = ashr i32 %0, 3
  %5 = shl nsw i32 %4, 1
  %6 = shl nsw i32 %4, 2
  %7 = mul nsw i32 %4, 6
  %8 = sext i32 %6 to i64
  %9 = getelementptr inbounds double, double* %1, i64 %8
  %10 = bitcast double* %1 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = bitcast double* %9 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fadd <2 x double> %11, %13
  %15 = fsub <2 x double> %11, %13
  %16 = sext i32 %5 to i64
  %17 = getelementptr inbounds double, double* %1, i64 %16
  %18 = sext i32 %7 to i64
  %19 = getelementptr inbounds double, double* %1, i64 %18
  %20 = bitcast double* %17 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  %22 = bitcast double* %19 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = fadd <2 x double> %21, %23
  %25 = fsub <2 x double> %21, %23
  %26 = shufflevector <2 x double> %25, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %27 = fadd <2 x double> %14, %24
  %28 = bitcast double* %1 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 8
  %29 = fsub <2 x double> %14, %24
  %30 = bitcast double* %17 to <2 x double>*
  store <2 x double> %29, <2 x double>* %30, align 8
  %31 = fsub <2 x double> %15, %26
  %32 = fadd <2 x double> %15, %26
  %33 = shufflevector <2 x double> %31, <2 x double> %32, <2 x i32> <i32 0, i32 3>
  %34 = bitcast double* %9 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 8
  %35 = fadd <2 x double> %15, %26
  %36 = fsub <2 x double> %15, %26
  %37 = shufflevector <2 x double> %35, <2 x double> %36, <2 x i32> <i32 0, i32 3>
  %38 = bitcast double* %19 to <2 x double>*
  store <2 x double> %37, <2 x double>* %38, align 8
  %39 = getelementptr inbounds double, double* %2, i64 1
  %40 = load double, double* %39, align 8
  %41 = icmp sgt i32 %0, 23
  %42 = sext i32 %4 to i64
  br i1 %41, label %43, label %187

43:                                               ; preds = %3, %43
  %44 = phi i64 [ %184, %43 ], [ 2, %3 ]
  %45 = phi i64 [ %47, %43 ], [ 0, %3 ]
  %46 = phi i32 [ %185, %43 ], [ 2, %3 ]
  %47 = add nuw nsw i64 %45, 4
  %48 = getelementptr inbounds double, double* %2, i64 %47
  %49 = load double, double* %48, align 8
  %50 = add nuw nsw i64 %45, 5
  %51 = getelementptr inbounds double, double* %2, i64 %50
  %52 = load double, double* %51, align 8
  %53 = add nuw nsw i64 %45, 6
  %54 = getelementptr inbounds double, double* %2, i64 %53
  %55 = load double, double* %54, align 8
  %56 = add nuw nsw i64 %45, 7
  %57 = getelementptr inbounds double, double* %2, i64 %56
  %58 = load double, double* %57, align 8
  %59 = add nsw i64 %44, %16
  %60 = add nsw i32 %46, %5
  %61 = add nsw i64 %59, %16
  %62 = add nsw i32 %60, %5
  %63 = add nsw i64 %61, %16
  %64 = add nsw i32 %62, %5
  %65 = getelementptr inbounds double, double* %1, i64 %44
  %66 = getelementptr inbounds double, double* %1, i64 %61
  %67 = load double, double* %66, align 8
  %68 = bitcast double* %65 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8
  %70 = or i32 %62, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double, double* %1, i64 %71
  %73 = load double, double* %72, align 8
  %74 = insertelement <2 x double> undef, double %67, i32 0
  %75 = insertelement <2 x double> %74, double %73, i32 1
  %76 = fadd <2 x double> %69, %75
  %77 = extractelement <2 x double> %69, i32 0
  %78 = fsub double %77, %67
  %79 = extractelement <2 x double> %69, i32 1
  %80 = fsub double %79, %73
  %81 = getelementptr inbounds double, double* %1, i64 %59
  %82 = getelementptr inbounds double, double* %1, i64 %63
  %83 = load double, double* %82, align 8
  %84 = bitcast double* %81 to <2 x double>*
  %85 = load <2 x double>, <2 x double>* %84, align 8
  %86 = or i32 %64, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds double, double* %1, i64 %87
  %89 = load double, double* %88, align 8
  %90 = insertelement <2 x double> undef, double %83, i32 0
  %91 = insertelement <2 x double> %90, double %89, i32 1
  %92 = fadd <2 x double> %85, %91
  %93 = extractelement <2 x double> %85, i32 0
  %94 = fsub double %93, %83
  %95 = extractelement <2 x double> %85, i32 1
  %96 = fsub double %95, %89
  %97 = fadd <2 x double> %76, %92
  %98 = bitcast double* %65 to <2 x double>*
  store <2 x double> %97, <2 x double>* %98, align 8
  %99 = fsub <2 x double> %76, %92
  %100 = bitcast double* %81 to <2 x double>*
  store <2 x double> %99, <2 x double>* %100, align 8
  %101 = fsub double %78, %96
  %102 = fadd double %80, %94
  %103 = fmul double %49, %101
  %104 = fmul double %52, %102
  %105 = fsub double %103, %104
  store double %105, double* %66, align 8
  %106 = fmul double %49, %102
  %107 = fmul double %52, %101
  %108 = fadd double %106, %107
  store double %108, double* %72, align 8
  %109 = fadd double %78, %96
  %110 = fsub double %80, %94
  %111 = fmul double %55, %109
  %112 = fmul double %58, %110
  %113 = fadd double %112, %111
  store double %113, double* %82, align 8
  %114 = fmul double %55, %110
  %115 = fmul double %58, %109
  %116 = fsub double %114, %115
  store double %116, double* %88, align 8
  %117 = sub nsw i64 %16, %44
  %118 = sub nsw i32 %5, %46
  %119 = add nsw i64 %117, %16
  %120 = add nsw i32 %118, %5
  %121 = add nsw i64 %119, %16
  %122 = add nsw i32 %120, %5
  %123 = add nsw i64 %121, %16
  %124 = add nsw i32 %122, %5
  %125 = getelementptr inbounds double, double* %1, i64 %117
  %126 = getelementptr inbounds double, double* %1, i64 %121
  %127 = load double, double* %126, align 8
  %128 = bitcast double* %125 to <2 x double>*
  %129 = load <2 x double>, <2 x double>* %128, align 8
  %130 = or i32 %122, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds double, double* %1, i64 %131
  %133 = load double, double* %132, align 8
  %134 = insertelement <2 x double> undef, double %127, i32 0
  %135 = insertelement <2 x double> %134, double %133, i32 1
  %136 = fadd <2 x double> %129, %135
  %137 = extractelement <2 x double> %129, i32 0
  %138 = fsub double %137, %127
  %139 = extractelement <2 x double> %129, i32 1
  %140 = fsub double %139, %133
  %141 = getelementptr inbounds double, double* %1, i64 %119
  %142 = load double, double* %141, align 8
  %143 = getelementptr inbounds double, double* %1, i64 %123
  %144 = load double, double* %143, align 8
  %145 = or i32 %120, 1
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds double, double* %1, i64 %146
  %148 = load double, double* %147, align 8
  %149 = or i32 %124, 1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds double, double* %1, i64 %150
  %152 = load double, double* %151, align 8
  %153 = insertelement <2 x double> undef, double %142, i32 0
  %154 = insertelement <2 x double> %153, double %148, i32 1
  %155 = insertelement <2 x double> undef, double %144, i32 0
  %156 = insertelement <2 x double> %155, double %152, i32 1
  %157 = fadd <2 x double> %154, %156
  %158 = fsub double %142, %144
  %159 = fsub double %148, %152
  %160 = fadd <2 x double> %136, %157
  %161 = bitcast double* %125 to <2 x double>*
  store <2 x double> %160, <2 x double>* %161, align 8
  %162 = extractelement <2 x double> %136, i32 0
  %163 = extractelement <2 x double> %157, i32 0
  %164 = fsub double %162, %163
  store double %164, double* %141, align 8
  %165 = extractelement <2 x double> %136, i32 1
  %166 = extractelement <2 x double> %157, i32 1
  %167 = fsub double %165, %166
  store double %167, double* %147, align 8
  %168 = fsub double %138, %159
  %169 = fadd double %140, %158
  %170 = fmul double %52, %168
  %171 = fmul double %49, %169
  %172 = fsub double %170, %171
  store double %172, double* %126, align 8
  %173 = fmul double %52, %169
  %174 = fmul double %49, %168
  %175 = fadd double %173, %174
  store double %175, double* %132, align 8
  %176 = fadd double %138, %159
  %177 = fsub double %140, %158
  %178 = fmul double %58, %176
  %179 = fmul double %55, %177
  %180 = fadd double %179, %178
  store double %180, double* %143, align 8
  %181 = fmul double %58, %177
  %182 = fmul double %55, %176
  %183 = fsub double %181, %182
  store double %183, double* %151, align 8
  %184 = add nuw nsw i64 %44, 2
  %185 = add nuw nsw i32 %46, 2
  %186 = icmp slt i64 %184, %42
  br i1 %186, label %43, label %187

187:                                              ; preds = %43, %3
  %188 = mul nsw i32 %4, 3
  %189 = mul nsw i32 %4, 5
  %190 = mul nsw i32 %4, 7
  %191 = getelementptr inbounds double, double* %1, i64 %42
  %192 = sext i32 %189 to i64
  %193 = getelementptr inbounds double, double* %1, i64 %192
  %194 = bitcast double* %191 to <2 x double>*
  %195 = load <2 x double>, <2 x double>* %194, align 8
  %196 = add nsw i32 %189, 1
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds double, double* %1, i64 %197
  %199 = bitcast double* %193 to <2 x double>*
  %200 = load <2 x double>, <2 x double>* %199, align 8
  %201 = fadd <2 x double> %195, %200
  %202 = extractelement <2 x double> %195, i32 0
  %203 = extractelement <2 x double> %200, i32 0
  %204 = fsub double %202, %203
  %205 = extractelement <2 x double> %195, i32 1
  %206 = extractelement <2 x double> %200, i32 1
  %207 = fsub double %205, %206
  %208 = sext i32 %188 to i64
  %209 = getelementptr inbounds double, double* %1, i64 %208
  %210 = sext i32 %190 to i64
  %211 = getelementptr inbounds double, double* %1, i64 %210
  %212 = bitcast double* %209 to <2 x double>*
  %213 = load <2 x double>, <2 x double>* %212, align 8
  %214 = add nsw i32 %190, 1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds double, double* %1, i64 %215
  %217 = bitcast double* %211 to <2 x double>*
  %218 = load <2 x double>, <2 x double>* %217, align 8
  %219 = fadd <2 x double> %213, %218
  %220 = extractelement <2 x double> %213, i32 0
  %221 = extractelement <2 x double> %218, i32 0
  %222 = fsub double %220, %221
  %223 = extractelement <2 x double> %213, i32 1
  %224 = extractelement <2 x double> %218, i32 1
  %225 = fsub double %223, %224
  %226 = fadd <2 x double> %201, %219
  %227 = bitcast double* %191 to <2 x double>*
  store <2 x double> %226, <2 x double>* %227, align 8
  %228 = fsub <2 x double> %201, %219
  %229 = bitcast double* %209 to <2 x double>*
  store <2 x double> %228, <2 x double>* %229, align 8
  %230 = fsub double %204, %225
  %231 = fadd double %207, %222
  %232 = fsub double %230, %231
  %233 = fmul double %40, %232
  store double %233, double* %193, align 8
  %234 = fadd double %231, %230
  %235 = fmul double %40, %234
  store double %235, double* %198, align 8
  %236 = fadd double %204, %225
  %237 = fsub double %207, %222
  %238 = fsub double -0.000000e+00, %40
  %239 = fadd double %237, %236
  %240 = fmul double %239, %238
  store double %240, double* %211, align 8
  %241 = fsub double %237, %236
  %242 = fmul double %241, %238
  store double %242, double* %216, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @cfttree(i32, i32, i32, double*, i32, double* nocapture readonly) local_unnamed_addr #1 {
  %7 = and i32 %2, 3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %6
  %10 = and i32 %2, 1
  %11 = icmp eq i32 %10, 0
  %12 = sub nsw i32 %1, %0
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds double, double* %3, i64 %13
  br i1 %11, label %20, label %15

15:                                               ; preds = %9
  %16 = ashr i32 %0, 1
  %17 = sub nsw i32 %4, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double, double* %5, i64 %18
  tail call void @cftmdl1(i32 %0, double* %14, double* %19)
  br label %58

20:                                               ; preds = %9
  %21 = sub nsw i32 %4, %0
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %5, i64 %22
  tail call void @cftmdl2(i32 %0, double* %14, double* %23)
  br label %58

24:                                               ; preds = %6, %24
  %25 = phi i32 [ %27, %24 ], [ %0, %6 ]
  %26 = phi i32 [ %28, %24 ], [ %2, %6 ]
  %27 = shl i32 %25, 2
  %28 = ashr i32 %26, 2
  %29 = and i32 %26, 12
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %24, label %31

31:                                               ; preds = %24
  %32 = and i32 %28, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp sgt i32 %27, 128
  br i1 %33, label %36, label %35

35:                                               ; preds = %31
  br i1 %34, label %37, label %58

36:                                               ; preds = %31
  br i1 %34, label %48, label %58

37:                                               ; preds = %35, %37
  %38 = phi i32 [ %46, %37 ], [ %27, %35 ]
  %39 = sub nsw i32 %1, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, double* %3, i64 %40
  %42 = lshr i32 %38, 1
  %43 = sub nsw i32 %4, %42
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %5, i64 %44
  tail call void @cftmdl1(i32 %38, double* %41, double* %45)
  %46 = lshr i32 %38, 2
  %47 = icmp ugt i32 %38, 515
  br i1 %47, label %37, label %58

48:                                               ; preds = %36, %48
  %49 = phi i32 [ %56, %48 ], [ %27, %36 ]
  %50 = sub nsw i32 %1, %49
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %3, i64 %51
  %53 = sub nsw i32 %4, %49
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double, double* %5, i64 %54
  tail call void @cftmdl2(i32 %49, double* %52, double* %55)
  %56 = lshr i32 %49, 2
  %57 = icmp ugt i32 %49, 515
  br i1 %57, label %48, label %58

58:                                               ; preds = %37, %48, %35, %36, %15, %20
  %59 = phi i32 [ 1, %15 ], [ 0, %20 ], [ 0, %36 ], [ 1, %35 ], [ 0, %48 ], [ %32, %37 ]
  ret i32 %59
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftmdl2(i32, double*, double* nocapture readonly) local_unnamed_addr #1 {
  %4 = ashr i32 %0, 3
  %5 = shl nsw i32 %4, 1
  %6 = getelementptr inbounds double, double* %2, i64 1
  %7 = load double, double* %6, align 8
  %8 = shl nsw i32 %4, 2
  %9 = mul nsw i32 %4, 6
  %10 = load double, double* %1, align 8
  %11 = or i32 %8, 1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double, double* %1, i64 %12
  %14 = load double, double* %13, align 8
  %15 = fsub double %10, %14
  %16 = getelementptr inbounds double, double* %1, i64 1
  %17 = load double, double* %16, align 8
  %18 = sext i32 %8 to i64
  %19 = getelementptr inbounds double, double* %1, i64 %18
  %20 = load double, double* %19, align 8
  %21 = fadd double %17, %20
  %22 = fadd double %10, %14
  %23 = fsub double %17, %20
  %24 = sext i32 %5 to i64
  %25 = getelementptr inbounds double, double* %1, i64 %24
  %26 = load double, double* %25, align 8
  %27 = or i32 %9, 1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds double, double* %1, i64 %28
  %30 = load double, double* %29, align 8
  %31 = fsub double %26, %30
  %32 = or i32 %5, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, double* %1, i64 %33
  %35 = load double, double* %34, align 8
  %36 = sext i32 %9 to i64
  %37 = getelementptr inbounds double, double* %1, i64 %36
  %38 = load double, double* %37, align 8
  %39 = fadd double %35, %38
  %40 = fadd double %26, %30
  %41 = fsub double %35, %38
  %42 = fsub double %31, %39
  %43 = fmul double %7, %42
  %44 = fadd double %31, %39
  %45 = fmul double %7, %44
  %46 = fadd double %15, %43
  store double %46, double* %1, align 8
  %47 = fadd double %21, %45
  store double %47, double* %16, align 8
  %48 = fsub double %15, %43
  store double %48, double* %25, align 8
  %49 = fsub double %21, %45
  store double %49, double* %34, align 8
  %50 = fsub double %40, %41
  %51 = fmul double %7, %50
  %52 = fadd double %40, %41
  %53 = fmul double %7, %52
  %54 = fsub double %22, %53
  store double %54, double* %19, align 8
  %55 = fadd double %23, %51
  store double %55, double* %13, align 8
  %56 = fadd double %22, %53
  store double %56, double* %37, align 8
  %57 = fsub double %23, %51
  store double %57, double* %29, align 8
  %58 = icmp sgt i32 %0, 23
  %59 = sext i32 %4 to i64
  br i1 %58, label %60, label %231

60:                                               ; preds = %3, %60
  %61 = phi i64 [ %65, %60 ], [ 0, %3 ]
  %62 = phi i64 [ %77, %60 ], [ %18, %3 ]
  %63 = phi i64 [ %228, %60 ], [ 2, %3 ]
  %64 = phi i32 [ %229, %60 ], [ 2, %3 ]
  %65 = add nuw nsw i64 %61, 4
  %66 = getelementptr inbounds double, double* %2, i64 %65
  %67 = load double, double* %66, align 8
  %68 = add nuw nsw i64 %61, 5
  %69 = getelementptr inbounds double, double* %2, i64 %68
  %70 = load double, double* %69, align 8
  %71 = add nuw nsw i64 %61, 6
  %72 = getelementptr inbounds double, double* %2, i64 %71
  %73 = load double, double* %72, align 8
  %74 = add nuw nsw i64 %61, 7
  %75 = getelementptr inbounds double, double* %2, i64 %74
  %76 = load double, double* %75, align 8
  %77 = add nsw i64 %62, -4
  %78 = getelementptr inbounds double, double* %2, i64 %77
  %79 = load double, double* %78, align 8
  %80 = add nsw i64 %62, -3
  %81 = getelementptr inbounds double, double* %2, i64 %80
  %82 = load double, double* %81, align 8
  %83 = add nsw i64 %62, -2
  %84 = getelementptr inbounds double, double* %2, i64 %83
  %85 = load double, double* %84, align 8
  %86 = add nsw i64 %62, -1
  %87 = getelementptr inbounds double, double* %2, i64 %86
  %88 = load double, double* %87, align 8
  %89 = add nsw i64 %63, %24
  %90 = add nsw i32 %64, %5
  %91 = add nsw i64 %89, %24
  %92 = add nsw i32 %90, %5
  %93 = add nsw i64 %91, %24
  %94 = add nsw i32 %92, %5
  %95 = getelementptr inbounds double, double* %1, i64 %63
  %96 = load double, double* %95, align 8
  %97 = or i32 %92, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds double, double* %1, i64 %98
  %100 = load double, double* %99, align 8
  %101 = fsub double %96, %100
  %102 = or i64 %63, 1
  %103 = getelementptr inbounds double, double* %1, i64 %102
  %104 = load double, double* %103, align 8
  %105 = getelementptr inbounds double, double* %1, i64 %91
  %106 = load double, double* %105, align 8
  %107 = fadd double %104, %106
  %108 = fadd double %96, %100
  %109 = fsub double %104, %106
  %110 = getelementptr inbounds double, double* %1, i64 %89
  %111 = load double, double* %110, align 8
  %112 = or i32 %94, 1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds double, double* %1, i64 %113
  %115 = load double, double* %114, align 8
  %116 = fsub double %111, %115
  %117 = or i64 %89, 1
  %118 = getelementptr inbounds double, double* %1, i64 %117
  %119 = load double, double* %118, align 8
  %120 = getelementptr inbounds double, double* %1, i64 %93
  %121 = load double, double* %120, align 8
  %122 = fadd double %119, %121
  %123 = fadd double %111, %115
  %124 = fsub double %119, %121
  %125 = fmul double %67, %101
  %126 = fmul double %70, %107
  %127 = fsub double %125, %126
  %128 = fmul double %67, %107
  %129 = fmul double %70, %101
  %130 = fadd double %129, %128
  %131 = fmul double %82, %116
  %132 = fmul double %79, %122
  %133 = fsub double %131, %132
  %134 = fmul double %82, %122
  %135 = fmul double %79, %116
  %136 = fadd double %135, %134
  %137 = fadd double %127, %133
  store double %137, double* %95, align 8
  %138 = fadd double %130, %136
  store double %138, double* %103, align 8
  %139 = fsub double %127, %133
  store double %139, double* %110, align 8
  %140 = fsub double %130, %136
  store double %140, double* %118, align 8
  %141 = fmul double %73, %108
  %142 = fmul double %76, %109
  %143 = fadd double %141, %142
  %144 = fmul double %73, %109
  %145 = fmul double %76, %108
  %146 = fsub double %144, %145
  %147 = fmul double %88, %123
  %148 = fmul double %85, %124
  %149 = fadd double %147, %148
  %150 = fmul double %88, %124
  %151 = fmul double %85, %123
  %152 = fsub double %150, %151
  %153 = fadd double %143, %149
  store double %153, double* %105, align 8
  %154 = fadd double %146, %152
  store double %154, double* %99, align 8
  %155 = fsub double %143, %149
  store double %155, double* %120, align 8
  %156 = fsub double %146, %152
  store double %156, double* %114, align 8
  %157 = sub nsw i64 %24, %63
  %158 = sub nsw i32 %5, %64
  %159 = add nsw i64 %157, %24
  %160 = add nsw i32 %158, %5
  %161 = add nsw i64 %159, %24
  %162 = add nsw i32 %160, %5
  %163 = add nsw i64 %161, %24
  %164 = add nsw i32 %162, %5
  %165 = getelementptr inbounds double, double* %1, i64 %157
  %166 = load double, double* %165, align 8
  %167 = or i32 %162, 1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds double, double* %1, i64 %168
  %170 = load double, double* %169, align 8
  %171 = fsub double %166, %170
  %172 = or i64 %157, 1
  %173 = getelementptr inbounds double, double* %1, i64 %172
  %174 = load double, double* %173, align 8
  %175 = getelementptr inbounds double, double* %1, i64 %161
  %176 = load double, double* %175, align 8
  %177 = fadd double %174, %176
  %178 = fadd double %166, %170
  %179 = fsub double %174, %176
  %180 = getelementptr inbounds double, double* %1, i64 %159
  %181 = load double, double* %180, align 8
  %182 = or i32 %164, 1
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds double, double* %1, i64 %183
  %185 = load double, double* %184, align 8
  %186 = fsub double %181, %185
  %187 = or i32 %160, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds double, double* %1, i64 %188
  %190 = load double, double* %189, align 8
  %191 = getelementptr inbounds double, double* %1, i64 %163
  %192 = load double, double* %191, align 8
  %193 = fadd double %190, %192
  %194 = fadd double %181, %185
  %195 = fsub double %190, %192
  %196 = fmul double %79, %171
  %197 = fmul double %82, %177
  %198 = fsub double %196, %197
  %199 = fmul double %79, %177
  %200 = fmul double %82, %171
  %201 = fadd double %200, %199
  %202 = fmul double %70, %186
  %203 = fmul double %67, %193
  %204 = fsub double %202, %203
  %205 = fmul double %70, %193
  %206 = fmul double %67, %186
  %207 = fadd double %206, %205
  %208 = fadd double %198, %204
  store double %208, double* %165, align 8
  %209 = fadd double %201, %207
  store double %209, double* %173, align 8
  %210 = fsub double %198, %204
  store double %210, double* %180, align 8
  %211 = fsub double %201, %207
  store double %211, double* %189, align 8
  %212 = fmul double %85, %178
  %213 = fmul double %88, %179
  %214 = fadd double %212, %213
  %215 = fmul double %85, %179
  %216 = fmul double %88, %178
  %217 = fsub double %215, %216
  %218 = fmul double %76, %194
  %219 = fmul double %73, %195
  %220 = fadd double %218, %219
  %221 = fmul double %76, %195
  %222 = fmul double %73, %194
  %223 = fsub double %221, %222
  %224 = fadd double %214, %220
  store double %224, double* %175, align 8
  %225 = fadd double %217, %223
  store double %225, double* %169, align 8
  %226 = fsub double %214, %220
  store double %226, double* %191, align 8
  %227 = fsub double %217, %223
  store double %227, double* %184, align 8
  %228 = add nuw nsw i64 %63, 2
  %229 = add nuw nsw i32 %64, 2
  %230 = icmp slt i64 %228, %59
  br i1 %230, label %60, label %231

231:                                              ; preds = %60, %3
  %232 = getelementptr inbounds double, double* %2, i64 %24
  %233 = bitcast double* %232 to <2 x double>*
  %234 = load <2 x double>, <2 x double>* %233, align 8
  %235 = mul nsw i32 %4, 3
  %236 = mul nsw i32 %4, 5
  %237 = mul nsw i32 %4, 7
  %238 = getelementptr inbounds double, double* %1, i64 %59
  %239 = load double, double* %238, align 8
  %240 = add nsw i32 %236, 1
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds double, double* %1, i64 %241
  %243 = load double, double* %242, align 8
  %244 = fsub double %239, %243
  %245 = add nsw i32 %4, 1
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds double, double* %1, i64 %246
  %248 = load double, double* %247, align 8
  %249 = sext i32 %236 to i64
  %250 = getelementptr inbounds double, double* %1, i64 %249
  %251 = load double, double* %250, align 8
  %252 = fadd double %248, %251
  %253 = fadd double %239, %243
  %254 = fsub double %248, %251
  %255 = sext i32 %235 to i64
  %256 = getelementptr inbounds double, double* %1, i64 %255
  %257 = load double, double* %256, align 8
  %258 = add nsw i32 %237, 1
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds double, double* %1, i64 %259
  %261 = load double, double* %260, align 8
  %262 = fsub double %257, %261
  %263 = add nsw i32 %235, 1
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds double, double* %1, i64 %264
  %266 = load double, double* %265, align 8
  %267 = sext i32 %237 to i64
  %268 = getelementptr inbounds double, double* %1, i64 %267
  %269 = load double, double* %268, align 8
  %270 = fadd double %266, %269
  %271 = fadd double %257, %261
  %272 = fsub double %266, %269
  %273 = shufflevector <2 x double> %234, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %274 = insertelement <2 x double> undef, double %252, i32 0
  %275 = shufflevector <2 x double> %274, <2 x double> undef, <2 x i32> zeroinitializer
  %276 = fmul <2 x double> %273, %275
  %277 = insertelement <2 x double> undef, double %244, i32 0
  %278 = shufflevector <2 x double> %277, <2 x double> undef, <2 x i32> zeroinitializer
  %279 = fmul <2 x double> %234, %278
  %280 = fsub <2 x double> %279, %276
  %281 = fadd <2 x double> %279, %276
  %282 = shufflevector <2 x double> %280, <2 x double> %281, <2 x i32> <i32 0, i32 3>
  %283 = insertelement <2 x double> undef, double %270, i32 0
  %284 = shufflevector <2 x double> %283, <2 x double> undef, <2 x i32> zeroinitializer
  %285 = fmul <2 x double> %234, %284
  %286 = insertelement <2 x double> undef, double %262, i32 0
  %287 = shufflevector <2 x double> %286, <2 x double> undef, <2 x i32> zeroinitializer
  %288 = fmul <2 x double> %273, %287
  %289 = fsub <2 x double> %288, %285
  %290 = fadd <2 x double> %288, %285
  %291 = shufflevector <2 x double> %289, <2 x double> %290, <2 x i32> <i32 0, i32 3>
  %292 = fadd <2 x double> %282, %291
  %293 = bitcast double* %238 to <2 x double>*
  store <2 x double> %292, <2 x double>* %293, align 8
  %294 = fsub <2 x double> %282, %291
  %295 = bitcast double* %256 to <2 x double>*
  store <2 x double> %294, <2 x double>* %295, align 8
  %296 = insertelement <2 x double> undef, double %254, i32 0
  %297 = shufflevector <2 x double> %296, <2 x double> undef, <2 x i32> zeroinitializer
  %298 = fmul <2 x double> %234, %297
  %299 = shufflevector <2 x double> %234, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %300 = insertelement <2 x double> undef, double %253, i32 0
  %301 = shufflevector <2 x double> %300, <2 x double> undef, <2 x i32> zeroinitializer
  %302 = fmul <2 x double> %299, %301
  %303 = fsub <2 x double> %302, %298
  %304 = fadd <2 x double> %302, %298
  %305 = shufflevector <2 x double> %303, <2 x double> %304, <2 x i32> <i32 0, i32 3>
  %306 = shufflevector <2 x double> %234, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %307 = insertelement <2 x double> undef, double %272, i32 0
  %308 = shufflevector <2 x double> %307, <2 x double> undef, <2 x i32> zeroinitializer
  %309 = fmul <2 x double> %306, %308
  %310 = insertelement <2 x double> undef, double %271, i32 0
  %311 = shufflevector <2 x double> %310, <2 x double> undef, <2 x i32> zeroinitializer
  %312 = fmul <2 x double> %234, %311
  %313 = fsub <2 x double> %312, %309
  %314 = fadd <2 x double> %312, %309
  %315 = shufflevector <2 x double> %313, <2 x double> %314, <2 x i32> <i32 0, i32 3>
  %316 = fsub <2 x double> %305, %315
  %317 = bitcast double* %250 to <2 x double>*
  store <2 x double> %316, <2 x double>* %317, align 8
  %318 = fadd <2 x double> %305, %315
  %319 = bitcast double* %268 to <2 x double>*
  store <2 x double> %318, <2 x double>* %319, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftf162(double*, double* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds double, double* %1, i64 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds double, double* %1, i64 4
  %6 = bitcast double* %5 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %9 = getelementptr inbounds double, double* %1, i64 6
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds double, double* %1, i64 7
  %12 = load double, double* %11, align 8
  %13 = fsub double -0.000000e+00, %12
  %14 = getelementptr inbounds double, double* %1, i64 8
  %15 = bitcast double* %14 to <2 x double>*
  %16 = load <2 x double>, <2 x double>* %15, align 8
  %17 = getelementptr inbounds double, double* %0, i64 17
  %18 = getelementptr inbounds double, double* %0, i64 1
  %19 = bitcast double* %0 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = shufflevector <2 x double> %20, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %22 = getelementptr inbounds double, double* %0, i64 16
  %23 = bitcast double* %22 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = fadd <2 x double> %21, %24
  %26 = fsub <2 x double> %21, %24
  %27 = shufflevector <2 x double> %25, <2 x double> %26, <2 x i32> <i32 0, i32 3>
  %28 = getelementptr inbounds double, double* %0, i64 8
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds double, double* %0, i64 25
  %31 = load double, double* %30, align 8
  %32 = fsub double %29, %31
  %33 = getelementptr inbounds double, double* %0, i64 9
  %34 = load double, double* %33, align 8
  %35 = getelementptr inbounds double, double* %0, i64 24
  %36 = load double, double* %35, align 8
  %37 = fadd double %34, %36
  %38 = insertelement <2 x double> undef, double %32, i32 0
  %39 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> zeroinitializer
  %40 = insertelement <2 x double> undef, double %37, i32 0
  %41 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %42 = fadd <2 x double> %39, %41
  %43 = fsub <2 x double> %39, %41
  %44 = shufflevector <2 x double> %42, <2 x double> %43, <2 x i32> <i32 0, i32 3>
  %45 = insertelement <2 x double> undef, double %4, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fmul <2 x double> %46, %44
  %48 = extractelement <2 x double> %26, i32 1
  %49 = extractelement <2 x double> %47, i32 1
  %50 = fadd double %48, %49
  %51 = extractelement <2 x double> %25, i32 0
  %52 = extractelement <2 x double> %47, i32 0
  %53 = fadd double %51, %52
  %54 = fsub <2 x double> %27, %47
  %55 = fsub <2 x double> %21, %24
  %56 = fadd <2 x double> %21, %24
  %57 = shufflevector <2 x double> %55, <2 x double> %56, <2 x i32> <i32 0, i32 3>
  %58 = fadd double %29, %31
  %59 = fsub double %34, %36
  %60 = insertelement <2 x double> undef, double %58, i32 0
  %61 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> zeroinitializer
  %62 = insertelement <2 x double> undef, double %59, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = fsub <2 x double> %61, %63
  %65 = fadd <2 x double> %61, %63
  %66 = shufflevector <2 x double> %64, <2 x double> %65, <2 x i32> <i32 0, i32 3>
  %67 = fmul <2 x double> %46, %66
  %68 = fadd <2 x double> %57, %67
  %69 = fsub <2 x double> %57, %67
  %70 = shufflevector <2 x double> %68, <2 x double> %69, <2 x i32> <i32 0, i32 3>
  %71 = fsub <2 x double> %57, %67
  %72 = fadd <2 x double> %57, %67
  %73 = shufflevector <2 x double> %71, <2 x double> %72, <2 x i32> <i32 0, i32 3>
  %74 = getelementptr inbounds double, double* %0, i64 2
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds double, double* %0, i64 19
  %77 = load double, double* %76, align 8
  %78 = fsub double %75, %77
  %79 = getelementptr inbounds double, double* %0, i64 3
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds double, double* %0, i64 18
  %82 = load double, double* %81, align 8
  %83 = fadd double %80, %82
  %84 = insertelement <2 x double> undef, double %83, i32 0
  %85 = shufflevector <2 x double> %84, <2 x double> undef, <2 x i32> zeroinitializer
  %86 = fmul <2 x double> %7, %85
  %87 = insertelement <2 x double> undef, double %78, i32 0
  %88 = shufflevector <2 x double> %87, <2 x double> undef, <2 x i32> zeroinitializer
  %89 = fmul <2 x double> %8, %88
  %90 = fadd <2 x double> %89, %86
  %91 = fsub <2 x double> %89, %86
  %92 = shufflevector <2 x double> %90, <2 x double> %91, <2 x i32> <i32 0, i32 3>
  %93 = getelementptr inbounds double, double* %0, i64 10
  %94 = getelementptr inbounds double, double* %0, i64 27
  %95 = getelementptr inbounds double, double* %0, i64 11
  %96 = bitcast double* %93 to <2 x double>*
  %97 = load <2 x double>, <2 x double>* %96, align 8
  %98 = getelementptr inbounds double, double* %0, i64 26
  %99 = bitcast double* %98 to <2 x double>*
  %100 = load <2 x double>, <2 x double>* %99, align 8
  %101 = shufflevector <2 x double> %100, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %102 = extractelement <2 x double> %97, i32 0
  %103 = extractelement <2 x double> %100, i32 1
  %104 = fsub double %102, %103
  %105 = extractelement <2 x double> %97, i32 1
  %106 = extractelement <2 x double> %100, i32 0
  %107 = fadd double %105, %106
  %108 = insertelement <2 x double> undef, double %107, i32 0
  %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> zeroinitializer
  %110 = insertelement <2 x double> undef, double %13, i32 0
  %111 = insertelement <2 x double> %110, double %10, i32 1
  %112 = fmul <2 x double> %109, %111
  %113 = insertelement <2 x double> undef, double %10, i32 0
  %114 = insertelement <2 x double> %113, double %13, i32 1
  %115 = insertelement <2 x double> undef, double %104, i32 0
  %116 = shufflevector <2 x double> %115, <2 x double> undef, <2 x i32> zeroinitializer
  %117 = fmul <2 x double> %114, %116
  %118 = fadd <2 x double> %117, %112
  %119 = fsub <2 x double> %117, %112
  %120 = shufflevector <2 x double> %118, <2 x double> %119, <2 x i32> <i32 0, i32 3>
  %121 = extractelement <2 x double> %91, i32 1
  %122 = extractelement <2 x double> %119, i32 1
  %123 = fadd double %121, %122
  %124 = extractelement <2 x double> %90, i32 0
  %125 = extractelement <2 x double> %118, i32 0
  %126 = fadd double %124, %125
  %127 = fsub <2 x double> %92, %120
  %128 = fadd double %75, %77
  %129 = fsub double %80, %82
  %130 = insertelement <2 x double> undef, double %129, i32 0
  %131 = shufflevector <2 x double> %130, <2 x double> undef, <2 x i32> zeroinitializer
  %132 = fmul <2 x double> %131, %111
  %133 = insertelement <2 x double> undef, double %128, i32 0
  %134 = shufflevector <2 x double> %133, <2 x double> undef, <2 x i32> zeroinitializer
  %135 = fmul <2 x double> %114, %134
  %136 = fsub <2 x double> %135, %132
  %137 = fadd <2 x double> %135, %132
  %138 = shufflevector <2 x double> %136, <2 x double> %137, <2 x i32> <i32 0, i32 3>
  %139 = fadd <2 x double> %97, %101
  %140 = fsub <2 x double> %97, %101
  %141 = shufflevector <2 x double> %139, <2 x double> %140, <2 x i32> <i32 0, i32 3>
  %142 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> zeroinitializer
  %143 = fmul <2 x double> %142, %141
  %144 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %145 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %146 = shufflevector <2 x double> %140, <2 x double> %139, <2 x i32> <i32 1, i32 2>
  %147 = fmul <2 x double> %145, %146
  %148 = fadd <2 x double> %143, %147
  %149 = fsub <2 x double> %143, %147
  %150 = shufflevector <2 x double> %148, <2 x double> %149, <2 x i32> <i32 0, i32 3>
  %151 = fsub <2 x double> %138, %150
  %152 = fadd <2 x double> %138, %150
  %153 = shufflevector <2 x double> %152, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %154 = getelementptr inbounds double, double* %0, i64 4
  %155 = load double, double* %154, align 8
  %156 = getelementptr inbounds double, double* %0, i64 21
  %157 = load double, double* %156, align 8
  %158 = fsub double %155, %157
  %159 = getelementptr inbounds double, double* %0, i64 5
  %160 = load double, double* %159, align 8
  %161 = getelementptr inbounds double, double* %0, i64 20
  %162 = load double, double* %161, align 8
  %163 = fadd double %160, %162
  %164 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %165 = insertelement <2 x double> undef, double %163, i32 0
  %166 = shufflevector <2 x double> %165, <2 x double> undef, <2 x i32> zeroinitializer
  %167 = fmul <2 x double> %164, %166
  %168 = insertelement <2 x double> undef, double %158, i32 0
  %169 = shufflevector <2 x double> %168, <2 x double> undef, <2 x i32> zeroinitializer
  %170 = fmul <2 x double> %16, %169
  %171 = fsub <2 x double> %170, %167
  %172 = fadd <2 x double> %170, %167
  %173 = shufflevector <2 x double> %171, <2 x double> %172, <2 x i32> <i32 0, i32 3>
  %174 = getelementptr inbounds double, double* %0, i64 12
  %175 = load double, double* %174, align 8
  %176 = getelementptr inbounds double, double* %0, i64 29
  %177 = load double, double* %176, align 8
  %178 = fsub double %175, %177
  %179 = getelementptr inbounds double, double* %0, i64 13
  %180 = load double, double* %179, align 8
  %181 = getelementptr inbounds double, double* %0, i64 28
  %182 = load double, double* %181, align 8
  %183 = fadd double %180, %182
  %184 = insertelement <2 x double> undef, double %183, i32 0
  %185 = shufflevector <2 x double> %184, <2 x double> undef, <2 x i32> zeroinitializer
  %186 = fmul <2 x double> %16, %185
  %187 = insertelement <2 x double> undef, double %178, i32 0
  %188 = shufflevector <2 x double> %187, <2 x double> undef, <2 x i32> zeroinitializer
  %189 = fmul <2 x double> %164, %188
  %190 = fsub <2 x double> %189, %186
  %191 = fadd <2 x double> %189, %186
  %192 = shufflevector <2 x double> %190, <2 x double> %191, <2 x i32> <i32 0, i32 3>
  %193 = extractelement <2 x double> %171, i32 0
  %194 = extractelement <2 x double> %190, i32 0
  %195 = fadd double %193, %194
  %196 = extractelement <2 x double> %172, i32 1
  %197 = extractelement <2 x double> %191, i32 1
  %198 = fadd double %196, %197
  %199 = fsub <2 x double> %173, %192
  %200 = fadd double %155, %157
  %201 = fsub double %160, %162
  %202 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %203 = insertelement <2 x double> undef, double %201, i32 0
  %204 = shufflevector <2 x double> %203, <2 x double> undef, <2 x i32> zeroinitializer
  %205 = fmul <2 x double> %202, %204
  %206 = insertelement <2 x double> undef, double %200, i32 0
  %207 = shufflevector <2 x double> %206, <2 x double> undef, <2 x i32> zeroinitializer
  %208 = fmul <2 x double> %16, %207
  %209 = fadd <2 x double> %208, %205
  %210 = fsub <2 x double> %208, %205
  %211 = shufflevector <2 x double> %209, <2 x double> %210, <2 x i32> <i32 0, i32 3>
  %212 = fadd double %175, %177
  %213 = fsub double %180, %182
  %214 = insertelement <2 x double> undef, double %213, i32 0
  %215 = shufflevector <2 x double> %214, <2 x double> undef, <2 x i32> zeroinitializer
  %216 = fmul <2 x double> %16, %215
  %217 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %218 = insertelement <2 x double> undef, double %212, i32 0
  %219 = shufflevector <2 x double> %218, <2 x double> undef, <2 x i32> zeroinitializer
  %220 = fmul <2 x double> %217, %219
  %221 = fadd <2 x double> %220, %216
  %222 = fsub <2 x double> %220, %216
  %223 = shufflevector <2 x double> %221, <2 x double> %222, <2 x i32> <i32 0, i32 3>
  %224 = fsub <2 x double> %211, %223
  %225 = fadd <2 x double> %211, %223
  %226 = shufflevector <2 x double> %225, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %227 = getelementptr inbounds double, double* %0, i64 6
  %228 = load double, double* %227, align 8
  %229 = getelementptr inbounds double, double* %0, i64 23
  %230 = load double, double* %229, align 8
  %231 = fsub double %228, %230
  %232 = getelementptr inbounds double, double* %0, i64 7
  %233 = load double, double* %232, align 8
  %234 = getelementptr inbounds double, double* %0, i64 22
  %235 = load double, double* %234, align 8
  %236 = fadd double %233, %235
  %237 = insertelement <2 x double> undef, double %236, i32 0
  %238 = shufflevector <2 x double> %237, <2 x double> undef, <2 x i32> zeroinitializer
  %239 = fmul <2 x double> %238, %111
  %240 = insertelement <2 x double> undef, double %231, i32 0
  %241 = shufflevector <2 x double> %240, <2 x double> undef, <2 x i32> zeroinitializer
  %242 = fmul <2 x double> %114, %241
  %243 = fsub <2 x double> %242, %239
  %244 = fadd <2 x double> %242, %239
  %245 = shufflevector <2 x double> %243, <2 x double> %244, <2 x i32> <i32 0, i32 3>
  %246 = getelementptr inbounds double, double* %0, i64 14
  %247 = load double, double* %246, align 8
  %248 = getelementptr inbounds double, double* %0, i64 31
  %249 = load double, double* %248, align 8
  %250 = fsub double %247, %249
  %251 = getelementptr inbounds double, double* %0, i64 15
  %252 = load double, double* %251, align 8
  %253 = getelementptr inbounds double, double* %0, i64 30
  %254 = load double, double* %253, align 8
  %255 = fadd double %252, %254
  %256 = insertelement <2 x double> undef, double %255, i32 0
  %257 = shufflevector <2 x double> %256, <2 x double> undef, <2 x i32> zeroinitializer
  %258 = fmul <2 x double> %7, %257
  %259 = insertelement <2 x double> undef, double %250, i32 0
  %260 = shufflevector <2 x double> %259, <2 x double> undef, <2 x i32> zeroinitializer
  %261 = fmul <2 x double> %8, %260
  %262 = fsub <2 x double> %261, %258
  %263 = fadd <2 x double> %261, %258
  %264 = shufflevector <2 x double> %262, <2 x double> %263, <2 x i32> <i32 0, i32 3>
  %265 = extractelement <2 x double> %243, i32 0
  %266 = extractelement <2 x double> %262, i32 0
  %267 = fadd double %265, %266
  %268 = extractelement <2 x double> %244, i32 1
  %269 = extractelement <2 x double> %263, i32 1
  %270 = fadd double %268, %269
  %271 = fsub <2 x double> %245, %264
  %272 = fsub double %233, %235
  %273 = insertelement <2 x double> undef, double %228, i32 0
  %274 = insertelement <2 x double> %273, double %247, i32 1
  %275 = insertelement <2 x double> undef, double %230, i32 0
  %276 = insertelement <2 x double> %275, double %249, i32 1
  %277 = fadd <2 x double> %274, %276
  %278 = fsub double %252, %254
  %279 = shufflevector <2 x double> %277, <2 x double> %7, <2 x i32> <i32 1, i32 3>
  %280 = insertelement <2 x double> %110, double %272, i32 1
  %281 = fmul <2 x double> %279, %280
  %282 = shufflevector <2 x double> %113, <2 x double> %7, <2 x i32> <i32 0, i32 2>
  %283 = insertelement <2 x double> undef, double %278, i32 0
  %284 = shufflevector <2 x double> %283, <2 x double> %277, <2 x i32> <i32 0, i32 2>
  %285 = fmul <2 x double> %282, %284
  %286 = fsub <2 x double> %281, %285
  %287 = insertelement <2 x double> %7, double %278, i32 1
  %288 = insertelement <2 x double> undef, double %272, i32 0
  %289 = insertelement <2 x double> %288, double %13, i32 1
  %290 = fmul <2 x double> %287, %289
  %291 = insertelement <2 x double> %144, double %10, i32 1
  %292 = fmul <2 x double> %291, %277
  %293 = fadd <2 x double> %292, %290
  %294 = fadd <2 x double> %293, %286
  %295 = shufflevector <2 x double> %293, <2 x double> %286, <2 x i32> <i32 0, i32 3>
  %296 = shufflevector <2 x double> %286, <2 x double> %293, <2 x i32> <i32 0, i32 3>
  %297 = fsub <2 x double> %295, %296
  %298 = fadd double %50, %195
  %299 = fadd double %53, %198
  %300 = fadd double %123, %267
  %301 = fadd double %126, %270
  %302 = fadd double %298, %300
  store double %302, double* %0, align 8
  %303 = fadd double %299, %301
  store double %303, double* %18, align 8
  %304 = fsub double %298, %300
  store double %304, double* %74, align 8
  %305 = fsub double %299, %301
  store double %305, double* %79, align 8
  %306 = fsub double %50, %195
  %307 = fsub double %53, %198
  %308 = fsub double %123, %267
  %309 = fsub double %126, %270
  %310 = fsub double %306, %309
  store double %310, double* %154, align 8
  %311 = fadd double %307, %308
  store double %311, double* %159, align 8
  %312 = fadd double %306, %309
  store double %312, double* %227, align 8
  %313 = fsub double %307, %308
  store double %313, double* %232, align 8
  %314 = extractelement <2 x double> %54, i32 1
  %315 = extractelement <2 x double> %199, i32 1
  %316 = fsub double %314, %315
  %317 = fadd <2 x double> %127, %271
  %318 = fsub <2 x double> %127, %271
  %319 = shufflevector <2 x double> %318, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %320 = extractelement <2 x double> %317, i32 0
  %321 = extractelement <2 x double> %318, i32 1
  %322 = fsub double %321, %320
  %323 = fmul double %4, %322
  %324 = fadd double %316, %323
  store double %324, double* %28, align 8
  %325 = fadd <2 x double> %54, %199
  %326 = fadd <2 x double> %317, %319
  %327 = fmul <2 x double> %46, %326
  %328 = extractelement <2 x double> %325, i32 0
  %329 = extractelement <2 x double> %327, i32 0
  %330 = fadd double %328, %329
  store double %330, double* %33, align 8
  %331 = fsub double %316, %323
  store double %331, double* %93, align 8
  %332 = extractelement <2 x double> %54, i32 0
  %333 = extractelement <2 x double> %199, i32 0
  %334 = fsub double %332, %333
  %335 = extractelement <2 x double> %317, i32 1
  %336 = extractelement <2 x double> %318, i32 0
  %337 = fsub double %335, %336
  %338 = fmul double %4, %337
  %339 = fsub <2 x double> %325, %327
  %340 = bitcast double* %95 to <2 x double>*
  store <2 x double> %339, <2 x double>* %340, align 8
  %341 = insertelement <2 x double> %325, double %334, i32 0
  %342 = insertelement <2 x double> %327, double %338, i32 0
  %343 = fadd <2 x double> %341, %342
  %344 = bitcast double* %179 to <2 x double>*
  store <2 x double> %343, <2 x double>* %344, align 8
  %345 = fsub double %334, %338
  store double %345, double* %251, align 8
  %346 = extractelement <2 x double> %69, i32 1
  %347 = extractelement <2 x double> %224, i32 1
  %348 = fadd double %346, %347
  %349 = extractelement <2 x double> %68, i32 0
  %350 = extractelement <2 x double> %224, i32 0
  %351 = fadd double %349, %350
  %352 = extractelement <2 x double> %151, i32 0
  %353 = extractelement <2 x double> %294, i32 0
  %354 = fsub double %352, %353
  %355 = extractelement <2 x double> %151, i32 1
  %356 = extractelement <2 x double> %294, i32 1
  %357 = fsub double %355, %356
  %358 = fadd double %348, %354
  store double %358, double* %22, align 8
  %359 = fadd double %351, %357
  store double %359, double* %17, align 8
  %360 = fsub double %348, %354
  store double %360, double* %81, align 8
  %361 = fsub double %351, %357
  store double %361, double* %76, align 8
  %362 = fsub <2 x double> %70, %224
  %363 = fadd <2 x double> %151, %294
  %364 = extractelement <2 x double> %362, i32 1
  %365 = extractelement <2 x double> %363, i32 1
  %366 = fsub double %364, %365
  store double %366, double* %161, align 8
  %367 = fadd <2 x double> %362, %363
  %368 = bitcast double* %156 to <2 x double>*
  store <2 x double> %367, <2 x double>* %368, align 8
  %369 = extractelement <2 x double> %362, i32 0
  %370 = extractelement <2 x double> %363, i32 0
  %371 = fsub double %369, %370
  store double %371, double* %229, align 8
  %372 = extractelement <2 x double> %72, i32 1
  %373 = extractelement <2 x double> %225, i32 0
  %374 = fsub double %372, %373
  %375 = fsub <2 x double> %153, %297
  %376 = shufflevector <2 x double> %297, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %377 = fadd <2 x double> %152, %376
  %378 = extractelement <2 x double> %375, i32 0
  %379 = extractelement <2 x double> %377, i32 0
  %380 = fsub double %379, %378
  %381 = fmul double %4, %380
  %382 = fadd double %374, %381
  store double %382, double* %35, align 8
  %383 = fadd <2 x double> %73, %226
  %384 = fadd <2 x double> %375, %377
  %385 = fmul <2 x double> %46, %384
  %386 = extractelement <2 x double> %383, i32 0
  %387 = extractelement <2 x double> %385, i32 0
  %388 = fadd double %386, %387
  store double %388, double* %30, align 8
  %389 = fsub double %374, %381
  store double %389, double* %98, align 8
  %390 = extractelement <2 x double> %71, i32 0
  %391 = extractelement <2 x double> %225, i32 1
  %392 = fsub double %390, %391
  %393 = extractelement <2 x double> %375, i32 1
  %394 = extractelement <2 x double> %377, i32 1
  %395 = fsub double %393, %394
  %396 = fmul double %4, %395
  %397 = fsub <2 x double> %383, %385
  %398 = bitcast double* %94 to <2 x double>*
  store <2 x double> %397, <2 x double>* %398, align 8
  %399 = insertelement <2 x double> %383, double %392, i32 0
  %400 = insertelement <2 x double> %385, double %396, i32 0
  %401 = fadd <2 x double> %399, %400
  %402 = bitcast double* %176 to <2 x double>*
  store <2 x double> %401, <2 x double>* %402, align 8
  %403 = fsub double %392, %396
  store double %403, double* %248, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cftf082(double* nocapture, double* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds double, double* %1, i64 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds double, double* %1, i64 2
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds double, double* %1, i64 3
  %8 = load double, double* %7, align 8
  %9 = load double, double* %0, align 8
  %10 = getelementptr inbounds double, double* %0, i64 9
  %11 = load double, double* %10, align 8
  %12 = fsub double %9, %11
  %13 = getelementptr inbounds double, double* %0, i64 1
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds double, double* %0, i64 8
  %16 = load double, double* %15, align 8
  %17 = fadd double %14, %16
  %18 = fadd double %9, %11
  %19 = fsub double %14, %16
  %20 = getelementptr inbounds double, double* %0, i64 4
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds double, double* %0, i64 13
  %23 = load double, double* %22, align 8
  %24 = fsub double %21, %23
  %25 = getelementptr inbounds double, double* %0, i64 5
  %26 = load double, double* %25, align 8
  %27 = getelementptr inbounds double, double* %0, i64 12
  %28 = load double, double* %27, align 8
  %29 = fadd double %26, %28
  %30 = fsub double %24, %29
  %31 = fmul double %4, %30
  %32 = fadd double %24, %29
  %33 = fmul double %4, %32
  %34 = fadd double %21, %23
  %35 = fsub double %26, %28
  %36 = fsub double %34, %35
  %37 = fmul double %4, %36
  %38 = fadd double %34, %35
  %39 = fmul double %4, %38
  %40 = getelementptr inbounds double, double* %0, i64 2
  %41 = load double, double* %40, align 8
  %42 = getelementptr inbounds double, double* %0, i64 11
  %43 = load double, double* %42, align 8
  %44 = fsub double %41, %43
  %45 = getelementptr inbounds double, double* %0, i64 3
  %46 = load double, double* %45, align 8
  %47 = getelementptr inbounds double, double* %0, i64 10
  %48 = load double, double* %47, align 8
  %49 = fadd double %46, %48
  %50 = fmul double %6, %44
  %51 = fmul double %8, %49
  %52 = fsub double %50, %51
  %53 = fmul double %6, %49
  %54 = fmul double %8, %44
  %55 = fadd double %54, %53
  %56 = fadd double %41, %43
  %57 = fsub double %46, %48
  %58 = fmul double %8, %56
  %59 = fmul double %6, %57
  %60 = fsub double %58, %59
  %61 = fmul double %8, %57
  %62 = fmul double %6, %56
  %63 = fadd double %62, %61
  %64 = getelementptr inbounds double, double* %0, i64 6
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds double, double* %0, i64 15
  %67 = load double, double* %66, align 8
  %68 = fsub double %65, %67
  %69 = getelementptr inbounds double, double* %0, i64 7
  %70 = load double, double* %69, align 8
  %71 = getelementptr inbounds double, double* %0, i64 14
  %72 = load double, double* %71, align 8
  %73 = fadd double %70, %72
  %74 = fmul double %8, %68
  %75 = fmul double %6, %73
  %76 = fsub double %74, %75
  %77 = fmul double %8, %73
  %78 = fmul double %6, %68
  %79 = fadd double %78, %77
  %80 = fadd double %65, %67
  %81 = fsub double %70, %72
  %82 = fmul double %6, %80
  %83 = fmul double %8, %81
  %84 = fsub double %82, %83
  %85 = fmul double %6, %81
  %86 = fmul double %8, %80
  %87 = fadd double %86, %85
  %88 = fadd double %12, %31
  %89 = fadd double %17, %33
  %90 = fadd double %52, %76
  %91 = fadd double %55, %79
  %92 = fadd double %88, %90
  store double %92, double* %0, align 8
  %93 = fadd double %89, %91
  store double %93, double* %13, align 8
  %94 = fsub double %88, %90
  store double %94, double* %40, align 8
  %95 = fsub double %89, %91
  store double %95, double* %45, align 8
  %96 = fsub double %12, %31
  %97 = fsub double %17, %33
  %98 = fsub double %52, %76
  %99 = fsub double %55, %79
  %100 = fsub double %96, %99
  store double %100, double* %20, align 8
  %101 = fadd double %97, %98
  store double %101, double* %25, align 8
  %102 = fadd double %96, %99
  store double %102, double* %64, align 8
  %103 = fsub double %97, %98
  store double %103, double* %69, align 8
  %104 = fsub double %18, %39
  %105 = fadd double %19, %37
  %106 = fsub double %60, %84
  %107 = fsub double %63, %87
  %108 = fadd double %104, %106
  store double %108, double* %15, align 8
  %109 = fadd double %105, %107
  store double %109, double* %10, align 8
  %110 = fsub double %104, %106
  store double %110, double* %47, align 8
  %111 = fsub double %105, %107
  store double %111, double* %42, align 8
  %112 = fadd double %18, %39
  %113 = fsub double %19, %37
  %114 = fadd double %60, %84
  %115 = fadd double %63, %87
  %116 = fsub double %112, %115
  store double %116, double* %27, align 8
  %117 = fadd double %113, %114
  store double %117, double* %22, align 8
  %118 = fadd double %112, %115
  store double %118, double* %71, align 8
  %119 = fsub double %113, %114
  store double %119, double* %66, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3}
!8 = distinct !{!8, !4}
!9 = !{!8}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15, !11}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
!16 = distinct !{!16, !11}
!17 = distinct !{!17, !15, !11}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = !{!24}
!24 = distinct !{!24, !20}
!25 = !{!26}
!26 = distinct !{!26, !20}
!27 = !{!22, !24, !19}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !11}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = !{!36}
!36 = distinct !{!36, !32}
!37 = !{!38}
!38 = distinct !{!38, !32}
!39 = !{!34, !36, !31}
!40 = distinct !{!40, !11}
!41 = distinct !{!41, !11}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = !{!48, !43}
!48 = distinct !{!48, !44}
!49 = !{!48}
!50 = distinct !{!50, !11}
!51 = distinct !{!51, !11}
