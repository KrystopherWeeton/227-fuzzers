; ModuleID = '../../third_party/webrtc/api/neteq/default_neteq_controller_factory.cc'
source_filename = "../../third_party/webrtc/api/neteq/default_neteq_controller_factory.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::DefaultNetEqControllerFactory" = type { %"class.webrtc::NetEqControllerFactory" }
%"class.webrtc::NetEqControllerFactory" = type { i32 (...)** }
%"class.webrtc::NetEqController" = type { i32 (...)** }
%"struct.webrtc::NetEqController::Config" = type { i8, i8, i32, i32, %"class.webrtc::TickTimer"*, %"class.webrtc::Clock"* }
%"class.webrtc::TickTimer" = type <{ i64, i32, [4 x i8] }>
%"class.webrtc::Clock" = type { i32 (...)** }
%"class.webrtc::DecisionLogic" = type { %"class.webrtc::NetEqController", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.40", %"class.webrtc::TickTimer"*, i32, i64, i32, i64, i64, i32, i8, i8, %"class.std::__1::unique_ptr.46", i32, i32, i8, i8, [6 x i8], %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialConstrained" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.webrtc::DelayManager"* }
%"class.webrtc::DelayManager" = type { i32 (...)**, i8, i32, %"class.std::__1::unique_ptr.7", i32, %"class.webrtc::TickTimer"*, %"class.absl::optional.16", i32, i32, i32, i32, i32, i32, %"class.std::__1::unique_ptr.21", i32, i32, i32, i32, %"class.std::__1::unique_ptr.21", %"class.std::__1::deque" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.webrtc::Histogram"* }
%"class.webrtc::Histogram" = type { i32 (...)**, %"class.std::__1::vector", i32, i32, i32, %"class.absl::optional" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { double }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { i32 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.webrtc::TickTimer::Stopwatch"* }
%"class.webrtc::TickTimer::Stopwatch" = type { %"class.webrtc::TickTimer"*, i64 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.32" }
%"struct.std::__1::__split_buffer" = type { %"struct.webrtc::DelayManager::PacketDelay"**, %"struct.webrtc::DelayManager::PacketDelay"**, %"struct.webrtc::DelayManager::PacketDelay"**, %"class.std::__1::__compressed_pair.27" }
%"struct.webrtc::DelayManager::PacketDelay" = type { i32, i32 }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.webrtc::DelayManager::PacketDelay"** }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i64 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.webrtc::BufferLevelFilter"* }
%"class.webrtc::BufferLevelFilter" = type { i32 (...)**, i32, i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.webrtc::TickTimer::Countdown"* }
%"class.webrtc::TickTimer::Countdown" = type { %"class.std::__1::unique_ptr.21", i64 }
%"class.webrtc::FieldTrialParameter" = type { %"class.webrtc::FieldTrialParameterInterface.base", i8, [6 x i8] }
%"class.webrtc::FieldTrialParameterInterface.base" = type <{ i32 (...)**, %"class.std::__1::vector.52", %"class.std::__1::basic_string", i8 }>
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"class.webrtc::FieldTrialParameterInterface"**, %"class.webrtc::FieldTrialParameterInterface"**, %"class.std::__1::__compressed_pair.54" }
%"class.webrtc::FieldTrialParameterInterface" = type <{ i32 (...)**, %"class.std::__1::vector.52", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.webrtc::FieldTrialParameterInterface"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.61 }
%union.anon.61 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::FieldTrialConstrained" = type { %"class.webrtc::FieldTrialParameterInterface.base", i32, %"class.absl::optional.16", %"class.absl::optional.16" }

@_ZTVN6webrtc29DefaultNetEqControllerFactoryE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::DefaultNetEqControllerFactory"*)* @_ZN6webrtc29DefaultNetEqControllerFactoryD2Ev to i8*), i8* bitcast (void (%"class.webrtc::DefaultNetEqControllerFactory"*)* @_ZN6webrtc29DefaultNetEqControllerFactoryD0Ev to i8*), i8* bitcast (%"class.webrtc::NetEqController"* (%"class.webrtc::DefaultNetEqControllerFactory"*, %"struct.webrtc::NetEqController::Config"*)* @_ZNK6webrtc29DefaultNetEqControllerFactory21CreateNetEqControllerERKNS_15NetEqController6ConfigE to i8*)] }, align 8

@_ZN6webrtc29DefaultNetEqControllerFactoryC1Ev = hidden unnamed_addr alias void (%"class.webrtc::DefaultNetEqControllerFactory"*), void (%"class.webrtc::DefaultNetEqControllerFactory"*)* @_ZN6webrtc29DefaultNetEqControllerFactoryC2Ev
@_ZN6webrtc29DefaultNetEqControllerFactoryD1Ev = hidden unnamed_addr alias void (%"class.webrtc::DefaultNetEqControllerFactory"*), void (%"class.webrtc::DefaultNetEqControllerFactory"*)* @_ZN6webrtc29DefaultNetEqControllerFactoryD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc29DefaultNetEqControllerFactoryC2Ev(%"class.webrtc::DefaultNetEqControllerFactory"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::DefaultNetEqControllerFactory", %"class.webrtc::DefaultNetEqControllerFactory"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc29DefaultNetEqControllerFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc29DefaultNetEqControllerFactoryD2Ev(%"class.webrtc::DefaultNetEqControllerFactory"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc29DefaultNetEqControllerFactoryD0Ev(%"class.webrtc::DefaultNetEqControllerFactory"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.webrtc::DefaultNetEqControllerFactory"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.webrtc::NetEqController"* @_ZNK6webrtc29DefaultNetEqControllerFactory21CreateNetEqControllerERKNS_15NetEqController6ConfigE(%"class.webrtc::DefaultNetEqControllerFactory"* nocapture readnone, %"struct.webrtc::NetEqController::Config"* dereferenceable(32)) unnamed_addr #2 align 2 {
  %3 = tail call i8* @_Znwm(i64 312) #6
  %4 = bitcast i8* %3 to %"class.webrtc::DecisionLogic"*
  tail call void @_ZN6webrtc13DecisionLogicC1ENS_15NetEqController6ConfigE(%"class.webrtc::DecisionLogic"* nonnull %4, %"struct.webrtc::NetEqController::Config"* nonnull byval(%"struct.webrtc::NetEqController::Config") align 8 %1) #7
  %5 = bitcast i8* %3 to %"class.webrtc::NetEqController"*
  ret %"class.webrtc::NetEqController"* %5
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN6webrtc13DecisionLogicC1ENS_15NetEqController6ConfigE(%"class.webrtc::DecisionLogic"*, %"struct.webrtc::NetEqController::Config"* byval(%"struct.webrtc::NetEqController::Config") align 8) unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
