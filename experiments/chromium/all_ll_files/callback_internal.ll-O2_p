; ModuleID = '../../base/callback_internal.cc'
source_filename = "../../base/callback_internal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, {}*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@.str = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1

@_ZN4base8internal13BindStateBaseC1EPFvvEPFvPKS1_E = hidden unnamed_addr alias void (%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*), void (%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*)* @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E
@_ZN4base8internal13BindStateBaseC1EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE = hidden unnamed_addr alias void (%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)*), void (%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)*)* @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE
@_ZN4base8internal12CallbackBaseC1ERKNS0_20CallbackBaseCopyableE = hidden unnamed_addr alias void (%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBaseCopyable"*), void (%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBaseCopyable"*)* @_ZN4base8internal12CallbackBaseC2ERKNS0_20CallbackBaseCopyableE
@_ZN4base8internal12CallbackBaseC1EONS0_20CallbackBaseCopyableE = hidden unnamed_addr alias void (%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBaseCopyable"*), void (%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBaseCopyable"*)* @_ZN4base8internal12CallbackBaseC2EONS0_20CallbackBaseCopyableE
@_ZN4base8internal12CallbackBaseD1Ev = hidden unnamed_addr alias void (%"class.base::internal::CallbackBase"*), void (%"class.base::internal::CallbackBase"*)* @_ZN4base8internal12CallbackBaseD2Ev
@_ZN4base8internal20CallbackBaseCopyableC1ERKS1_ = hidden unnamed_addr alias void (%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"*), void (%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"*)* @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal27BindStateBaseRefCountTraits8DestructEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 2
  %3 = bitcast {}** %2 to void (%"class.base::internal::BindStateBase"*)**
  %4 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, align 8
  tail call void %4(%"class.base::internal::BindStateBase"* %0) #8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nocapture, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 1
  store void ()* %1, void ()** %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 2
  %7 = bitcast {}** %6 to void (%"class.base::internal::BindStateBase"*)**
  store void (%"class.base::internal::BindStateBase"*)* %2, void (%"class.base::internal::BindStateBase"*)** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 3
  store i1 (%"class.base::internal::BindStateBase"*, i32)* @_ZN4base8internal12_GLOBAL__N_141QueryCancellationTraitsForNonCancellablesEPKNS0_13BindStateBaseENS2_21CancellationQueryModeE, i1 (%"class.base::internal::BindStateBase"*, i32)** %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN4base8internal12_GLOBAL__N_141QueryCancellationTraitsForNonCancellablesEPKNS0_13BindStateBaseENS2_21CancellationQueryModeE(%"class.base::internal::BindStateBase"* nocapture readnone, i32) #2 {
  %3 = icmp ne i32 %1, 0
  ret i1 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"* nocapture, void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)*) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 1
  store void ()* %1, void ()** %6, align 8
  %7 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 2
  %8 = bitcast {}** %7 to void (%"class.base::internal::BindStateBase"*)**
  store void (%"class.base::internal::BindStateBase"*)* %2, void (%"class.base::internal::BindStateBase"*)** %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 0, i32 3
  store i1 (%"class.base::internal::BindStateBase"*, i32)* %3, i1 (%"class.base::internal::BindStateBase"*, i32)** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* returned, %"class.base::internal::CallbackBase"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.base::internal::CallbackBase"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %6 = bitcast %"class.base::internal::CallbackBase"* %0 to i64*
  %7 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  store i64 %5, i64* %6, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw sub i32* %11, i32 1 acq_rel
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %15, i64 4
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to void (%"class.base::internal::BindStateBase"*)**
  %18 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %17, align 8
  tail call void %18(%"class.base::internal::BindStateBase"* nonnull %8) #8
  br label %19

19:                                               ; preds = %2, %10, %14
  ret %"class.base::internal::CallbackBase"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal12CallbackBaseC2ERKNS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"* nocapture, %"class.base::internal::CallbackBaseCopyable"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* %5, %"class.base::internal::BindStateBase"** %6, align 8
  %7 = icmp eq %"class.base::internal::BindStateBase"* %5, null
  br i1 %7, label %15, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #8
  br label %15

15:                                               ; preds = %2, %8, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSERKNS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"* returned, %"class.base::internal::CallbackBaseCopyable"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %4, align 8
  %6 = icmp eq %"class.base::internal::BindStateBase"* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %13 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  br label %14

14:                                               ; preds = %2, %7, %11
  %15 = ptrtoint %"class.base::internal::BindStateBase"* %5 to i64
  %16 = bitcast %"class.base::internal::CallbackBase"* %0 to i64*
  %17 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %18 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %17, align 8
  store i64 %15, i64* %16, align 8
  %19 = icmp eq %"class.base::internal::BindStateBase"* %18, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw sub i32* %21, i32 1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %29

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %18, i64 0, i32 0
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %25, i64 4
  %27 = bitcast %"class.base::RefCountedThreadSafe"* %26 to void (%"class.base::internal::BindStateBase"*)**
  %28 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %27, align 8
  call void %28(%"class.base::internal::BindStateBase"* nonnull %18) #8
  br label %29

29:                                               ; preds = %14, %20, %24
  ret %"class.base::internal::CallbackBase"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal12CallbackBaseC2EONS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"* nocapture, %"class.base::internal::CallbackBaseCopyable"* nocapture dereferenceable(8)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::internal::CallbackBaseCopyable"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::internal::CallbackBase"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEONS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"* returned, %"class.base::internal::CallbackBaseCopyable"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::internal::CallbackBaseCopyable"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %6 = bitcast %"class.base::internal::CallbackBase"* %0 to i64*
  %7 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  store i64 %5, i64* %6, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw sub i32* %11, i32 1 acq_rel
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %15, i64 4
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to void (%"class.base::internal::BindStateBase"*)**
  %18 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %17, align 8
  tail call void %18(%"class.base::internal::BindStateBase"* nonnull %8) #8
  br label %19

19:                                               ; preds = %2, %10, %14
  ret %"class.base::internal::CallbackBase"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal12CallbackBase5ResetEv(%"class.base::internal::CallbackBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.base::internal::CallbackBase"* %0 to i64*
  %3 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  store i64 0, i64* %2, align 8
  %5 = icmp eq %"class.base::internal::BindStateBase"* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 0
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 4
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.base::internal::BindStateBase"*)**
  %14 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %13, align 8
  tail call void %14(%"class.base::internal::BindStateBase"* nonnull %4) #8
  br label %15

15:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal12CallbackBase11IsCancelledEv(%"class.base::internal::CallbackBase"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %3, i64 0, i32 3
  %5 = load i1 (%"class.base::internal::BindStateBase"*, i32)*, i1 (%"class.base::internal::BindStateBase"*, i32)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.base::internal::BindStateBase"* %3, i32 0) #8
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal12CallbackBase10MaybeValidEv(%"class.base::internal::CallbackBase"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %3, i64 0, i32 3
  %5 = load i1 (%"class.base::internal::BindStateBase"*, i32)*, i1 (%"class.base::internal::BindStateBase"*, i32)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.base::internal::BindStateBase"* %3, i32 1) #8
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal12CallbackBase14EqualsInternalERKS1_(%"class.base::internal::CallbackBase"* nocapture readonly, %"class.base::internal::CallbackBase"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %5, align 8
  %7 = icmp eq %"class.base::internal::BindStateBase"* %4, %6
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::CallbackBase", %"class.base::internal::CallbackBase"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %2, align 8
  %4 = icmp eq %"class.base::internal::BindStateBase"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %3, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %10, i64 4
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.base::internal::BindStateBase"*)**
  %13 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* nonnull %3) #8
  br label %14

14:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* nocapture, %"class.base::internal::CallbackBaseCopyable"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %4, align 8
  %5 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %5, align 8
  %7 = icmp eq %"class.base::internal::BindStateBase"* %6, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = ptrtoint %"class.base::internal::BindStateBase"* %6 to i64
  %10 = bitcast %"class.base::internal::CallbackBaseCopyable"* %0 to i64*
  store i64 %9, i64* %10, align 8
  br label %32

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 1 monotonic
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %17 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %18

18:                                               ; preds = %11, %15
  %19 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %4, align 8
  %20 = ptrtoint %"class.base::internal::BindStateBase"* %6 to i64
  %21 = bitcast %"class.base::internal::CallbackBaseCopyable"* %0 to i64*
  store i64 %20, i64* %21, align 8
  %22 = icmp eq %"class.base::internal::BindStateBase"* %19, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %19, i64 0, i32 0
  %29 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %28, i64 4
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %29 to void (%"class.base::internal::BindStateBase"*)**
  %31 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %30, align 8
  call void %31(%"class.base::internal::BindStateBase"* nonnull %19) #8
  br label %32

32:                                               ; preds = %8, %18, %23, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSERKS1_(%"class.base::internal::CallbackBaseCopyable"* returned, %"class.base::internal::CallbackBaseCopyable"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %4, align 8
  %6 = icmp eq %"class.base::internal::BindStateBase"* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %13 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  br label %14

14:                                               ; preds = %2, %7, %11
  %15 = ptrtoint %"class.base::internal::BindStateBase"* %5 to i64
  %16 = bitcast %"class.base::internal::CallbackBaseCopyable"* %0 to i64*
  %17 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %0, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %17, align 8
  store i64 %15, i64* %16, align 8
  %19 = icmp eq %"class.base::internal::BindStateBase"* %18, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw sub i32* %21, i32 1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %29

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %18, i64 0, i32 0
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %25, i64 4
  %27 = bitcast %"class.base::RefCountedThreadSafe"* %26 to void (%"class.base::internal::BindStateBase"*)**
  %28 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %27, align 8
  call void %28(%"class.base::internal::BindStateBase"* nonnull %18) #8
  br label %29

29:                                               ; preds = %14, %20, %24
  ret %"class.base::internal::CallbackBaseCopyable"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSEOS1_(%"class.base::internal::CallbackBaseCopyable"* returned, %"class.base::internal::CallbackBaseCopyable"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::internal::CallbackBaseCopyable"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %6 = bitcast %"class.base::internal::CallbackBaseCopyable"* %0 to i64*
  %7 = getelementptr inbounds %"class.base::internal::CallbackBaseCopyable", %"class.base::internal::CallbackBaseCopyable"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  store i64 %5, i64* %6, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw sub i32* %11, i32 1 acq_rel
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %15, i64 4
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to void (%"class.base::internal::BindStateBase"*)**
  %18 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %17, align 8
  tail call void %18(%"class.base::internal::BindStateBase"* nonnull %8) #8
  br label %19

19:                                               ; preds = %2, %10, %14
  ret %"class.base::internal::CallbackBaseCopyable"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #6

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
