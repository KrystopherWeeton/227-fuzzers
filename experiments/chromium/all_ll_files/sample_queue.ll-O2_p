; ModuleID = '../../device/vr/util/sample_queue.cc'
source_filename = "../../device/vr/util/sample_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.device::SampleQueue" = type { i64, i64, i64, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN6device11SampleQueueC1Em = hidden unnamed_addr alias void (%"class.device::SampleQueue"*, i64), void (%"class.device::SampleQueue"*, i64)* @_ZN6device11SampleQueueC2Em
@_ZN6device11SampleQueueD1Ev = hidden unnamed_addr alias void (%"class.device::SampleQueue"*), void (%"class.device::SampleQueue"*)* @_ZN6device11SampleQueueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device11SampleQueueC2Em(%"class.device::SampleQueue"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 2
  %4 = bitcast %"class.device::SampleQueue"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  store i64 %1, i64* %3, align 8
  %5 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #6
  %7 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i64** %7 to i64*
  %9 = icmp eq i64 %1, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = icmp ugt i64 %1, 2305843009213693951
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  tail call void @abort() #7
  unreachable

13:                                               ; preds = %10
  %14 = shl i64 %1, 3
  %15 = tail call i8* @_Znwm(i64 %14) #8
  %16 = bitcast i8* %15 to i64*
  %17 = getelementptr inbounds i64, i64* %16, i64 %1
  %18 = ptrtoint i64* %17 to i64
  %19 = insertelement <2 x i8*> undef, i8* %15, i32 0
  %20 = shufflevector <2 x i8*> %19, <2 x i8*> undef, <2 x i32> zeroinitializer
  %21 = ptrtoint <2 x i8*> %20 to <2 x i64>
  %22 = bitcast %"class.std::__1::vector"* %5 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %22, align 8
  store i64 %18, i64* %8, align 8
  br label %23

23:                                               ; preds = %13, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device11SampleQueueD2Ev(%"class.device::SampleQueue"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i64* %3 to i64
  %7 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device11SampleQueue9AddSampleEl(%"class.device::SampleQueue"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add nsw i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 3
  %14 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %13, %15
  %17 = inttoptr i64 %9 to i64*
  br i1 %16, label %18, label %76

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = icmp eq i64* %20, %17
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  store i64 %1, i64* %17, align 8
  %23 = getelementptr inbounds i64, i64* %17, i64 1
  %24 = ptrtoint i64* %23 to i64
  store i64 %24, i64* %8, align 8
  br label %83

25:                                               ; preds = %18
  %26 = ptrtoint i64* %20 to i64
  %27 = sub i64 %26, %11
  %28 = ashr exact i64 %27, 3
  %29 = add nsw i64 %28, 1
  %30 = icmp ugt i64 %29, 2305843009213693951
  br i1 %30, label %31, label %33

31:                                               ; preds = %25
  %32 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #7
  unreachable

33:                                               ; preds = %25
  %34 = bitcast i64** %19 to i64*
  %35 = icmp ult i64 %28, 1152921504606846975
  br i1 %35, label %36, label %44

36:                                               ; preds = %33
  %37 = ashr exact i64 %27, 2
  %38 = icmp ult i64 %37, %29
  %39 = select i1 %38, i64 %29, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = icmp ugt i64 %39, 2305843009213693951
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @abort() #7
  unreachable

44:                                               ; preds = %41, %33
  %45 = phi i64 [ %39, %41 ], [ 2305843009213693951, %33 ]
  %46 = shl i64 %45, 3
  %47 = tail call i8* @_Znwm(i64 %46) #8
  %48 = bitcast i8* %47 to i64*
  br label %49

49:                                               ; preds = %44, %36
  %50 = phi i64 [ %45, %44 ], [ 0, %36 ]
  %51 = phi i64* [ %48, %44 ], [ null, %36 ]
  %52 = getelementptr inbounds i64, i64* %51, i64 %28
  %53 = getelementptr inbounds i64, i64* %51, i64 %50
  %54 = ptrtoint i64* %53 to i64
  store i64 %1, i64* %52, align 8
  %55 = getelementptr inbounds i64, i64* %52, i64 1
  %56 = ptrtoint i64* %55 to i64
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %58 = load i64*, i64** %57, align 8
  %59 = load i64, i64* %8, align 8
  %60 = ptrtoint i64* %58 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 3
  %63 = sub nsw i64 0, %62
  %64 = getelementptr inbounds i64, i64* %52, i64 %63
  %65 = ptrtoint i64* %64 to i64
  %66 = icmp sgt i64 %61, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %49
  %68 = bitcast i64* %64 to i8*
  %69 = bitcast i64* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 %61, i1 false) #6
  %70 = load i64*, i64** %57, align 8
  br label %71

71:                                               ; preds = %67, %49
  %72 = phi i64* [ %58, %49 ], [ %70, %67 ]
  store i64 %65, i64* %10, align 8
  store i64 %56, i64* %8, align 8
  store i64 %54, i64* %34, align 8
  %73 = icmp eq i64* %72, null
  br i1 %73, label %83, label %74

74:                                               ; preds = %71
  %75 = bitcast i64* %72 to i8*
  tail call void @_ZdlPv(i8* %75) #8
  br label %83

76:                                               ; preds = %2
  %77 = inttoptr i64 %11 to i64*
  %78 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds i64, i64* %77, i64 %79
  %81 = load i64, i64* %80, align 8
  %82 = sub nsw i64 %5, %81
  store i64 %82, i64* %3, align 8
  store i64 %1, i64* %80, align 8
  br label %83

83:                                               ; preds = %74, %71, %22, %76
  %84 = getelementptr inbounds %"class.device::SampleQueue", %"class.device::SampleQueue"* %0, i64 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = add i64 %85, 1
  %87 = load i64, i64* %14, align 8
  %88 = icmp ult i64 %86, %87
  %89 = select i1 %88, i64 %86, i64 0
  store i64 %89, i64* %84, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
