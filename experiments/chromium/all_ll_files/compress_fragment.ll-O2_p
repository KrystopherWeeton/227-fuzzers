; ModuleID = '../../third_party/brotli/enc/compress_fragment.c'
source_filename = "../../third_party/brotli/enc/compress_fragment.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MemoryManager = type { i8* (i8*, i64)*, void (i8*, i8*)*, i8* }
%struct.HuffmanTree = type { i32, i16, i16 }

@kCmdHistoSeed = internal unnamed_addr constant [128 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], align 16
@kBrotliLog2Table = external hidden local_unnamed_addr constant [256 x double], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliCompressFragmentFast(%struct.MemoryManager*, i8*, i64, i32, i32* nocapture, i64, i8*, i16*, i64*, i8*, i64*, i8*) local_unnamed_addr #0 {
  %13 = load i64, i64* %10, align 8
  %14 = icmp eq i64 %2, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %12
  %16 = lshr i64 %13, 3
  %17 = getelementptr inbounds i8, i8* %11, i64 %16
  %18 = load i8, i8* %17, align 1, !alias.scope !2, !noalias !5
  %19 = zext i8 %18 to i64
  %20 = and i64 %13, 7
  %21 = shl i64 1, %20
  %22 = or i64 %21, %19
  %23 = bitcast i8* %17 to i64*
  store i64 %22, i64* %23, align 8, !alias.scope !2, !noalias !5
  %24 = add i64 %13, 1
  br label %108

25:                                               ; preds = %12
  %26 = trunc i64 %5 to i32
  %27 = tail call i32 @llvm.ctlz.i32(i32 %26, i1 true) #6, !range !7
  %28 = xor i32 %27, 31
  switch i32 %28, label %33 [
    i32 9, label %29
    i32 11, label %30
    i32 13, label %31
    i32 15, label %32
  ]

29:                                               ; preds = %25
  tail call fastcc void @BrotliCompressFragmentFastImpl9(%struct.MemoryManager* %0, i8* %1, i64 %2, i32 %3, i32* %4, i8* %6, i16* %7, i64* %8, i8* %9, i64* %10, i8* %11)
  br label %33

30:                                               ; preds = %25
  tail call fastcc void @BrotliCompressFragmentFastImpl11(%struct.MemoryManager* %0, i8* %1, i64 %2, i32 %3, i32* %4, i8* %6, i16* %7, i64* %8, i8* %9, i64* %10, i8* %11)
  br label %33

31:                                               ; preds = %25
  tail call fastcc void @BrotliCompressFragmentFastImpl13(%struct.MemoryManager* %0, i8* %1, i64 %2, i32 %3, i32* %4, i8* %6, i16* %7, i64* %8, i8* %9, i64* %10, i8* %11)
  br label %33

32:                                               ; preds = %25
  tail call fastcc void @BrotliCompressFragmentFastImpl15(%struct.MemoryManager* %0, i8* %1, i64 %2, i32 %3, i32* %4, i8* %6, i16* %7, i64* %8, i8* %9, i64* %10, i8* %11)
  br label %33

33:                                               ; preds = %25, %32, %31, %30, %29
  %34 = load i64, i64* %10, align 8
  %35 = sub i64 %34, %13
  %36 = shl i64 %2, 3
  %37 = add i64 %36, 31
  %38 = icmp ugt i64 %35, %37
  br i1 %38, label %39, label %95

39:                                               ; preds = %33
  %40 = trunc i64 %13 to i32
  %41 = and i32 %40, 7
  %42 = shl nsw i32 -1, %41
  %43 = lshr i64 %13, 3
  %44 = getelementptr inbounds i8, i8* %11, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = trunc i32 %42 to i8
  %47 = and i8 %46, 127
  %48 = xor i8 %47, 127
  %49 = and i8 %45, %48
  store i8 %49, i8* %44, align 1
  store i64 %13, i64* %10, align 8
  %50 = load i8, i8* %44, align 1, !alias.scope !8, !noalias !11
  %51 = zext i8 %50 to i64
  %52 = bitcast i8* %44 to i64*
  store i64 %51, i64* %52, align 8, !alias.scope !8, !noalias !11
  %53 = add i64 %13, 1
  %54 = icmp ult i64 %2, 65537
  %55 = icmp ult i64 %2, 1048577
  %56 = select i1 %55, i64 5, i64 6
  %57 = select i1 %54, i64 4, i64 %56
  %58 = add nsw i64 %57, -4
  %59 = lshr i64 %53, 3
  %60 = getelementptr inbounds i8, i8* %11, i64 %59
  %61 = load i8, i8* %60, align 1, !alias.scope !13, !noalias !16
  %62 = zext i8 %61 to i64
  %63 = and i64 %53, 7
  %64 = shl i64 %58, %63
  %65 = or i64 %64, %62
  %66 = bitcast i8* %60 to i64*
  store i64 %65, i64* %66, align 8, !alias.scope !13, !noalias !16
  %67 = add i64 %13, 3
  %68 = shl nuw nsw i64 %57, 2
  %69 = add i64 %2, -1
  %70 = lshr i64 %67, 3
  %71 = getelementptr inbounds i8, i8* %11, i64 %70
  %72 = load i8, i8* %71, align 1, !alias.scope !18, !noalias !21
  %73 = zext i8 %72 to i64
  %74 = and i64 %67, 7
  %75 = shl i64 %69, %74
  %76 = or i64 %75, %73
  %77 = bitcast i8* %71 to i64*
  store i64 %76, i64* %77, align 8, !alias.scope !18, !noalias !21
  %78 = add i64 %67, %68
  %79 = lshr i64 %78, 3
  %80 = getelementptr inbounds i8, i8* %11, i64 %79
  %81 = load i8, i8* %80, align 1, !alias.scope !23, !noalias !26
  %82 = zext i8 %81 to i64
  %83 = and i64 %78, 7
  %84 = shl i64 1, %83
  %85 = or i64 %84, %82
  %86 = bitcast i8* %80 to i64*
  store i64 %85, i64* %86, align 8, !alias.scope !23, !noalias !26
  %87 = add i64 %78, 8
  %88 = and i64 %87, 4294967288
  store i64 %88, i64* %10, align 8
  %89 = lshr exact i64 %88, 3
  %90 = getelementptr inbounds i8, i8* %11, i64 %89
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %1, i64 %2, i1 false) #6
  %91 = load i64, i64* %10, align 8
  %92 = add i64 %91, %36
  store i64 %92, i64* %10, align 8
  %93 = lshr i64 %92, 3
  %94 = getelementptr inbounds i8, i8* %11, i64 %93
  store i8 0, i8* %94, align 1
  br label %95

95:                                               ; preds = %39, %33
  %96 = icmp eq i32 %3, 0
  br i1 %96, label %121, label %97

97:                                               ; preds = %95
  %98 = load i64, i64* %10, align 8, !alias.scope !28, !noalias !31
  %99 = lshr i64 %98, 3
  %100 = getelementptr inbounds i8, i8* %11, i64 %99
  %101 = load i8, i8* %100, align 1, !alias.scope !31, !noalias !28
  %102 = zext i8 %101 to i64
  %103 = and i64 %98, 7
  %104 = shl i64 1, %103
  %105 = or i64 %104, %102
  %106 = bitcast i8* %100 to i64*
  store i64 %105, i64* %106, align 8, !alias.scope !31, !noalias !28
  %107 = add i64 %98, 1
  br label %108

108:                                              ; preds = %15, %97
  %109 = phi i64 [ %24, %15 ], [ %107, %97 ]
  %110 = phi i64 [ %13, %15 ], [ %98, %97 ]
  store i64 %109, i64* %10, align 8, !alias.scope !33, !noalias !34
  %111 = lshr i64 %109, 3
  %112 = getelementptr inbounds i8, i8* %11, i64 %111
  %113 = load i8, i8* %112, align 1, !alias.scope !35, !noalias !34
  %114 = zext i8 %113 to i64
  %115 = and i64 %109, 7
  %116 = shl i64 1, %115
  %117 = or i64 %116, %114
  %118 = bitcast i8* %112 to i64*
  store i64 %117, i64* %118, align 8, !alias.scope !35, !noalias !34
  %119 = add i64 %110, 9
  %120 = and i64 %119, 4294967288
  store i64 %120, i64* %10, align 8
  br label %121

121:                                              ; preds = %108, %95
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentFastImpl9(%struct.MemoryManager*, i8*, i64, i32, i32* nocapture, i8*, i16*, i64*, i8*, i64*, i8*) unnamed_addr #2 {
  %12 = alloca [256 x i64], align 16
  %13 = alloca [128 x i32], align 16
  %14 = alloca [256 x i8], align 16
  %15 = alloca [256 x i16], align 16
  %16 = bitcast [128 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 512, i1 false) #6
  %17 = icmp ult i64 %2, 98304
  %18 = select i1 %17, i64 %2, i64 98304
  %19 = load i64, i64* %9, align 8
  %20 = add i64 %19, 3
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 256, i1 false) #6
  %22 = bitcast [256 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 512, i1 false) #6
  %23 = lshr i64 %19, 3
  %24 = getelementptr inbounds i8, i8* %10, i64 %23
  %25 = load i8, i8* %24, align 1, !alias.scope !40, !noalias !43
  %26 = zext i8 %25 to i64
  %27 = bitcast i8* %24 to i64*
  store i64 %26, i64* %27, align 8, !alias.scope !40, !noalias !43
  %28 = add i64 %19, 1
  %29 = icmp ult i64 %18, 65537
  %30 = select i1 %29, i64 4, i64 5
  %31 = add nsw i64 %30, -4
  %32 = lshr i64 %28, 3
  %33 = getelementptr inbounds i8, i8* %10, i64 %32
  %34 = load i8, i8* %33, align 1, !alias.scope !45, !noalias !48
  %35 = zext i8 %34 to i64
  %36 = and i64 %28, 7
  %37 = shl i64 %31, %36
  %38 = or i64 %37, %35
  %39 = bitcast i8* %33 to i64*
  store i64 %38, i64* %39, align 8, !alias.scope !45, !noalias !48
  %40 = shl nuw nsw i64 %30, 2
  %41 = add nsw i64 %18, -1
  %42 = lshr i64 %20, 3
  %43 = getelementptr inbounds i8, i8* %10, i64 %42
  %44 = load i8, i8* %43, align 1, !alias.scope !50, !noalias !53
  %45 = zext i8 %44 to i64
  %46 = and i64 %20, 7
  %47 = shl i64 %41, %46
  %48 = or i64 %47, %45
  %49 = bitcast i8* %43 to i64*
  store i64 %48, i64* %49, align 8, !alias.scope !50, !noalias !53
  %50 = add i64 %20, %40
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds i8, i8* %10, i64 %51
  %53 = load i8, i8* %52, align 1, !alias.scope !55, !noalias !58
  %54 = zext i8 %53 to i64
  %55 = bitcast i8* %52 to i64*
  store i64 %54, i64* %55, align 8, !alias.scope !55, !noalias !58
  %56 = add i64 %50, 1
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds i8, i8* %10, i64 %57
  %59 = load i8, i8* %58, align 1, !alias.scope !60, !noalias !63
  %60 = zext i8 %59 to i64
  %61 = bitcast i8* %58 to i64*
  store i64 %60, i64* %61, align 8, !alias.scope !60, !noalias !63
  %62 = add i64 %50, 14
  store i64 %62, i64* %9, align 8, !alias.scope !63, !noalias !60
  %63 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 0
  %64 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1, i64 %18, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  %65 = load i64, i64* %7, align 8
  %66 = icmp ugt i64 %65, 7
  %67 = load i64, i64* %9, align 8
  br i1 %66, label %68, label %89

68:                                               ; preds = %11
  %69 = and i64 %67, 7
  br label %70

70:                                               ; preds = %68, %70
  %71 = phi i64 [ %84, %70 ], [ %67, %68 ]
  %72 = phi i64 [ %85, %70 ], [ 0, %68 ]
  %73 = lshr exact i64 %72, 3
  %74 = getelementptr inbounds i8, i8* %8, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = lshr i64 %71, 3
  %78 = getelementptr inbounds i8, i8* %10, i64 %77
  %79 = load i8, i8* %78, align 1, !alias.scope !65, !noalias !68
  %80 = zext i8 %79 to i64
  %81 = shl i64 %76, %69
  %82 = or i64 %81, %80
  %83 = bitcast i8* %78 to i64*
  store i64 %82, i64* %83, align 8, !alias.scope !65, !noalias !68
  %84 = add i64 %71, 8
  store i64 %84, i64* %9, align 8, !alias.scope !68, !noalias !65
  %85 = add i64 %72, 8
  %86 = or i64 %85, 7
  %87 = load i64, i64* %7, align 8
  %88 = icmp ult i64 %86, %87
  br i1 %88, label %70, label %89

89:                                               ; preds = %70, %11
  %90 = phi i64 [ %67, %11 ], [ %84, %70 ]
  %91 = phi i64 [ %65, %11 ], [ %87, %70 ]
  %92 = and i64 %91, 7
  %93 = lshr i64 %91, 3
  %94 = getelementptr inbounds i8, i8* %8, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = lshr i64 %90, 3
  %98 = getelementptr inbounds i8, i8* %10, i64 %97
  %99 = load i8, i8* %98, align 1, !alias.scope !70, !noalias !73
  %100 = zext i8 %99 to i64
  %101 = and i64 %90, 7
  %102 = shl i64 %96, %101
  %103 = or i64 %102, %100
  %104 = bitcast i8* %98 to i64*
  store i64 %103, i64* %104, align 8, !alias.scope !70, !noalias !73
  %105 = add i64 %92, %90
  store i64 %105, i64* %9, align 8, !alias.scope !73, !noalias !70
  %106 = ptrtoint i8* %1 to i64
  %107 = getelementptr inbounds i8, i8* %5, i64 63
  %108 = getelementptr inbounds i16, i16* %6, i64 63
  %109 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 63
  %110 = getelementptr inbounds i8, i8* %5, i64 62
  %111 = getelementptr inbounds i16, i16* %6, i64 62
  %112 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 62
  %113 = getelementptr inbounds i8, i8* %5, i64 61
  %114 = getelementptr inbounds i16, i16* %6, i64 61
  %115 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 61
  %116 = getelementptr inbounds i8, i8* %5, i64 64
  %117 = getelementptr inbounds i16, i16* %6, i64 64
  %118 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 64
  %119 = getelementptr inbounds i8, i8* %5, i64 39
  %120 = getelementptr inbounds i16, i16* %6, i64 39
  %121 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 39
  %122 = bitcast [256 x i64]* %12 to i8*
  %123 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 0
  br label %124

124:                                              ; preds = %1699, %89
  %125 = phi i64 [ %1703, %1699 ], [ %20, %89 ]
  %126 = phi i64 [ %1744, %1699 ], [ %64, %89 ]
  %127 = phi i64 [ %1701, %1699 ], [ %18, %89 ]
  %128 = phi i8* [ %1696, %1699 ], [ %1, %89 ]
  %129 = phi i64 [ %1697, %1699 ], [ %2, %89 ]
  %130 = ptrtoint i8* %128 to i64
  %131 = icmp ult i64 %126, 981
  br label %132

132:                                              ; preds = %1255, %124
  %133 = phi i64 [ %127, %124 ], [ %1196, %1255 ]
  %134 = phi i64 [ %127, %124 ], [ %1193, %1255 ]
  %135 = phi i8* [ %128, %124 ], [ %1190, %1255 ]
  %136 = phi i64 [ %129, %124 ], [ %1191, %1255 ]
  %137 = phi i8* [ %128, %124 ], [ %138, %1255 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %16, i8* align 16 bitcast ([128 x i32]* @kCmdHistoSeed to i8*), i64 512, i1 false) #6
  %138 = getelementptr inbounds i8, i8* %137, i64 %134
  %139 = icmp ugt i64 %134, 15
  br i1 %139, label %140, label %1189, !prof !75

140:                                              ; preds = %132
  %141 = add nsw i64 %134, -5
  %142 = add i64 %136, -16
  %143 = icmp ult i64 %141, %142
  %144 = select i1 %143, i64 %141, i64 %142
  %145 = getelementptr inbounds i8, i8* %137, i64 %144
  %146 = ptrtoint i8* %138 to i64
  br label %147

147:                                              ; preds = %1184, %140
  %148 = phi i8* [ %137, %140 ], [ %1185, %1184 ]
  %149 = phi i32 [ -1, %140 ], [ %1186, %1184 ]
  %150 = phi i8* [ %135, %140 ], [ %1185, %1184 ]
  %151 = getelementptr inbounds i8, i8* %148, i64 1
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = sext i32 %149 to i64
  %155 = sub nsw i64 0, %154
  %156 = icmp sgt i32 %149, 0
  br label %157

157:                                              ; preds = %211, %147
  %158 = phi i64 [ %153, %147 ], [ %170, %211 ]
  %159 = phi i32 [ 32, %147 ], [ %163, %211 ]
  %160 = phi i8* [ %151, %147 ], [ %166, %211 ]
  %161 = mul i64 %158, 8503243848024064
  %162 = lshr i64 %161, 55
  %163 = add i32 %159, 1
  %164 = lshr i32 %159, 5
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %160, i64 %165
  %167 = icmp ugt i8* %166, %145
  br i1 %167, label %1189, label %168, !prof !76

168:                                              ; preds = %157
  %169 = bitcast i8* %166 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds i8, i8* %160, i64 %155
  %172 = bitcast i8* %160 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = bitcast i8* %171 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %173, %175
  br i1 %176, label %177, label %189

177:                                              ; preds = %168
  %178 = getelementptr inbounds i8, i8* %160, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds i8, i8* %171, i64 4
  %181 = load i8, i8* %180, align 1
  %182 = icmp eq i8 %179, %181
  %183 = and i1 %156, %182
  br i1 %183, label %184, label %189, !prof !77

184:                                              ; preds = %177
  %185 = ptrtoint i8* %160 to i64
  %186 = sub i64 %185, %106
  %187 = trunc i64 %186 to i32
  %188 = getelementptr inbounds i32, i32* %4, i64 %162
  store i32 %187, i32* %188, align 4
  br label %214

189:                                              ; preds = %177, %168
  %190 = getelementptr inbounds i32, i32* %4, i64 %162
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i8, i8* %1, i64 %192
  %194 = ptrtoint i8* %160 to i64
  %195 = sub i64 %194, %106
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %190, align 4
  %197 = load i32, i32* %172, align 4
  %198 = bitcast i8* %193 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %201, label %208

201:                                              ; preds = %189
  %202 = getelementptr inbounds i8, i8* %160, i64 4
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds i8, i8* %193, i64 4
  %205 = load i8, i8* %204, align 1
  %206 = icmp eq i8 %203, %205
  %207 = zext i1 %206 to i32
  br label %208

208:                                              ; preds = %201, %189
  %209 = phi i32 [ 0, %189 ], [ %207, %201 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212, !prof !75

211:                                              ; preds = %208, %214
  br label %157

212:                                              ; preds = %208
  %213 = ptrtoint i8* %160 to i64
  br label %214

214:                                              ; preds = %212, %184
  %215 = phi i64 [ %185, %184 ], [ %213, %212 ]
  %216 = phi i8* [ %171, %184 ], [ %193, %212 ]
  %217 = ptrtoint i8* %216 to i64
  %218 = sub i64 %215, %217
  %219 = icmp sgt i64 %218, 262128
  br i1 %219, label %211, label %220

220:                                              ; preds = %214
  %221 = getelementptr inbounds i8, i8* %216, i64 5
  %222 = getelementptr inbounds i8, i8* %160, i64 5
  %223 = sub i64 %146, %215
  %224 = add i64 %223, -5
  %225 = lshr i64 %224, 3
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %247, label %227, !prof !76

227:                                              ; preds = %220, %237
  %228 = phi i64 [ %240, %237 ], [ %225, %220 ]
  %229 = phi i8* [ %238, %237 ], [ %222, %220 ]
  %230 = phi i64 [ %239, %237 ], [ 0, %220 ]
  %231 = bitcast i8* %229 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds i8, i8* %221, i64 %230
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = icmp eq i64 %232, %235
  br i1 %236, label %237, label %242, !prof !76

237:                                              ; preds = %227
  %238 = getelementptr inbounds i8, i8* %229, i64 8
  %239 = add nuw i64 %230, 8
  %240 = add nsw i64 %228, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %247, label %227, !prof !76

242:                                              ; preds = %227
  %243 = xor i64 %235, %232
  %244 = call i64 @llvm.cttz.i64(i64 %243, i1 true) #6, !range !78
  %245 = lshr i64 %244, 3
  %246 = or i64 %245, %230
  br label %260

247:                                              ; preds = %237, %220
  %248 = phi i64 [ 0, %220 ], [ %239, %237 ]
  %249 = phi i8* [ %222, %220 ], [ %238, %237 ]
  %250 = and i64 %224, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds i8, i8* %221, i64 %248
  %254 = load i8, i8* %253, align 1
  %255 = load i8, i8* %249, align 1
  %256 = icmp eq i8 %254, %255
  br i1 %256, label %257, label %260, !prof !75

257:                                              ; preds = %252
  %258 = add i64 %248, 1
  %259 = icmp eq i64 %250, 1
  br i1 %259, label %260, label %1749

260:                                              ; preds = %1794, %257, %252, %1749, %1755, %1758, %1764, %1767, %1773, %1776, %1782, %1785, %1791, %247, %242
  %261 = phi i64 [ %246, %242 ], [ %248, %247 ], [ %248, %252 ], [ %258, %257 ], [ %258, %1749 ], [ %1756, %1755 ], [ %1756, %1758 ], [ %1765, %1764 ], [ %1765, %1767 ], [ %1774, %1773 ], [ %1774, %1776 ], [ %1783, %1782 ], [ %1783, %1785 ], [ %1792, %1791 ], [ %1801, %1794 ]
  %262 = add i64 %261, 5
  %263 = trunc i64 %218 to i32
  %264 = ptrtoint i8* %150 to i64
  %265 = sub i64 %215, %264
  %266 = getelementptr inbounds i8, i8* %160, i64 %262
  %267 = icmp ult i64 %265, 6210
  br i1 %267, label %268, label %380, !prof !75

268:                                              ; preds = %260
  %269 = icmp ult i64 %265, 6
  br i1 %269, label %502, label %270

270:                                              ; preds = %268
  %271 = icmp ult i64 %265, 130
  br i1 %271, label %272, label %313

272:                                              ; preds = %270
  %273 = add nsw i64 %265, -2
  %274 = trunc i64 %273 to i32
  %275 = call i32 @llvm.ctlz.i32(i32 %274, i1 true) #6, !range !7
  %276 = sub nsw i32 30, %275
  %277 = zext i32 %276 to i64
  %278 = lshr i64 %273, %277
  %279 = shl nsw i32 %276, 1
  %280 = zext i32 %279 to i64
  %281 = add nuw nsw i64 %280, 42
  %282 = add nuw nsw i64 %281, %278
  %283 = getelementptr inbounds i8, i8* %5, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = getelementptr inbounds i16, i16* %6, i64 %282
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i64
  %289 = load i64, i64* %9, align 8, !alias.scope !79, !noalias !82
  %290 = lshr i64 %289, 3
  %291 = getelementptr inbounds i8, i8* %10, i64 %290
  %292 = load i8, i8* %291, align 1, !alias.scope !82, !noalias !79
  %293 = zext i8 %292 to i64
  %294 = and i64 %289, 7
  %295 = shl i64 %288, %294
  %296 = or i64 %295, %293
  %297 = bitcast i8* %291 to i64*
  store i64 %296, i64* %297, align 8, !alias.scope !82, !noalias !79
  %298 = add i64 %289, %285
  %299 = shl i64 %278, %277
  %300 = sub i64 %273, %299
  %301 = lshr i64 %298, 3
  %302 = getelementptr inbounds i8, i8* %10, i64 %301
  %303 = load i8, i8* %302, align 1, !alias.scope !84, !noalias !87
  %304 = zext i8 %303 to i64
  %305 = and i64 %298, 7
  %306 = shl i64 %300, %305
  %307 = or i64 %306, %304
  %308 = bitcast i8* %302 to i64*
  store i64 %307, i64* %308, align 8, !alias.scope !84, !noalias !87
  %309 = add i64 %298, %277
  store i64 %309, i64* %9, align 8, !alias.scope !87, !noalias !84
  %310 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %282
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, 1
  store i32 %312, i32* %310, align 4
  br label %524

313:                                              ; preds = %270
  %314 = icmp ult i64 %265, 2114
  br i1 %314, label %315, label %353

315:                                              ; preds = %313
  %316 = add nsw i64 %265, -66
  %317 = trunc i64 %316 to i32
  %318 = call i32 @llvm.ctlz.i32(i32 %317, i1 true) #6, !range !7
  %319 = xor i32 %318, 31
  %320 = add nuw nsw i32 %319, 50
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %5, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds i16, i16* %6, i64 %321
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i64
  %328 = load i64, i64* %9, align 8, !alias.scope !89, !noalias !92
  %329 = lshr i64 %328, 3
  %330 = getelementptr inbounds i8, i8* %10, i64 %329
  %331 = load i8, i8* %330, align 1, !alias.scope !92, !noalias !89
  %332 = zext i8 %331 to i64
  %333 = and i64 %328, 7
  %334 = shl i64 %327, %333
  %335 = or i64 %334, %332
  %336 = bitcast i8* %330 to i64*
  store i64 %335, i64* %336, align 8, !alias.scope !92, !noalias !89
  %337 = add i64 %328, %324
  %338 = zext i32 %319 to i64
  %339 = shl i64 1, %338
  %340 = sub i64 %316, %339
  %341 = lshr i64 %337, 3
  %342 = getelementptr inbounds i8, i8* %10, i64 %341
  %343 = load i8, i8* %342, align 1, !alias.scope !94, !noalias !97
  %344 = zext i8 %343 to i64
  %345 = and i64 %337, 7
  %346 = shl i64 %340, %345
  %347 = or i64 %346, %344
  %348 = bitcast i8* %342 to i64*
  store i64 %347, i64* %348, align 8, !alias.scope !94, !noalias !97
  %349 = add i64 %337, %338
  store i64 %349, i64* %9, align 8, !alias.scope !97, !noalias !94
  %350 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %321
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %351, 1
  store i32 %352, i32* %350, align 4
  br label %524

353:                                              ; preds = %313
  %354 = load i8, i8* %113, align 1
  %355 = zext i8 %354 to i64
  %356 = load i16, i16* %114, align 2
  %357 = zext i16 %356 to i64
  %358 = load i64, i64* %9, align 8, !alias.scope !99, !noalias !102
  %359 = lshr i64 %358, 3
  %360 = getelementptr inbounds i8, i8* %10, i64 %359
  %361 = load i8, i8* %360, align 1, !alias.scope !102, !noalias !99
  %362 = zext i8 %361 to i64
  %363 = and i64 %358, 7
  %364 = shl i64 %357, %363
  %365 = or i64 %364, %362
  %366 = bitcast i8* %360 to i64*
  store i64 %365, i64* %366, align 8, !alias.scope !102, !noalias !99
  %367 = add i64 %358, %355
  %368 = add nsw i64 %265, -2114
  %369 = lshr i64 %367, 3
  %370 = getelementptr inbounds i8, i8* %10, i64 %369
  %371 = load i8, i8* %370, align 1, !alias.scope !104, !noalias !107
  %372 = zext i8 %371 to i64
  %373 = and i64 %367, 7
  %374 = shl i64 %368, %373
  %375 = or i64 %374, %372
  %376 = bitcast i8* %370 to i64*
  store i64 %375, i64* %376, align 8, !alias.scope !104, !noalias !107
  %377 = add i64 %367, 12
  store i64 %377, i64* %9, align 8, !alias.scope !107, !noalias !104
  %378 = load i32, i32* %115, align 4
  %379 = add i32 %378, 1
  store i32 %379, i32* %115, align 4
  br label %524

380:                                              ; preds = %260
  %381 = sub i64 %264, %130
  %382 = mul i64 %381, 50
  %383 = icmp ugt i64 %382, %265
  %384 = or i1 %131, %383
  br i1 %384, label %446, label %385

385:                                              ; preds = %380
  %386 = add i64 %125, -3
  %387 = sub i64 %215, %130
  %388 = trunc i64 %386 to i32
  %389 = and i32 %388, 7
  %390 = shl nsw i32 -1, %389
  %391 = lshr i64 %386, 3
  %392 = getelementptr inbounds i8, i8* %10, i64 %391
  %393 = load i8, i8* %392, align 1
  %394 = trunc i32 %390 to i8
  %395 = and i8 %394, 127
  %396 = xor i8 %395, 127
  %397 = and i8 %393, %396
  store i8 %397, i8* %392, align 1
  store i64 %386, i64* %9, align 8
  %398 = load i8, i8* %392, align 1, !alias.scope !109, !noalias !112
  %399 = zext i8 %398 to i64
  %400 = bitcast i8* %392 to i64*
  store i64 %399, i64* %400, align 8, !alias.scope !109, !noalias !112
  %401 = add i64 %125, -2
  %402 = icmp ult i64 %387, 65537
  %403 = icmp ult i64 %387, 1048577
  %404 = select i1 %403, i64 5, i64 6
  %405 = select i1 %402, i64 4, i64 %404
  %406 = add nsw i64 %405, -4
  %407 = lshr i64 %401, 3
  %408 = getelementptr inbounds i8, i8* %10, i64 %407
  %409 = load i8, i8* %408, align 1, !alias.scope !114, !noalias !117
  %410 = zext i8 %409 to i64
  %411 = and i64 %401, 7
  %412 = shl i64 %406, %411
  %413 = or i64 %412, %410
  %414 = bitcast i8* %408 to i64*
  store i64 %413, i64* %414, align 8, !alias.scope !114, !noalias !117
  %415 = shl nuw nsw i64 %405, 2
  %416 = add i64 %387, -1
  %417 = lshr i64 %125, 3
  %418 = getelementptr inbounds i8, i8* %10, i64 %417
  %419 = load i8, i8* %418, align 1, !alias.scope !119, !noalias !122
  %420 = zext i8 %419 to i64
  %421 = and i64 %125, 7
  %422 = shl i64 %416, %421
  %423 = or i64 %422, %420
  %424 = bitcast i8* %418 to i64*
  store i64 %423, i64* %424, align 8, !alias.scope !119, !noalias !122
  %425 = add i64 %415, %125
  %426 = lshr i64 %425, 3
  %427 = getelementptr inbounds i8, i8* %10, i64 %426
  %428 = load i8, i8* %427, align 1, !alias.scope !124, !noalias !127
  %429 = zext i8 %428 to i64
  %430 = and i64 %425, 7
  %431 = shl i64 1, %430
  %432 = or i64 %431, %429
  %433 = bitcast i8* %427 to i64*
  store i64 %432, i64* %433, align 8, !alias.scope !124, !noalias !127
  %434 = add i64 %425, 8
  %435 = and i64 %434, 4294967288
  store i64 %435, i64* %9, align 8
  %436 = lshr exact i64 %435, 3
  %437 = getelementptr inbounds i8, i8* %10, i64 %436
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %437, i8* align 1 %128, i64 %387, i1 false) #6
  %438 = shl i64 %387, 3
  %439 = load i64, i64* %9, align 8
  %440 = add i64 %439, %438
  store i64 %440, i64* %9, align 8
  %441 = lshr i64 %440, 3
  %442 = getelementptr inbounds i8, i8* %10, i64 %441
  store i8 0, i8* %442, align 1
  %443 = ptrtoint i8* %137 to i64
  %444 = add i64 %136, %443
  %445 = sub i64 %444, %215
  br label %1695

446:                                              ; preds = %380
  %447 = icmp ult i64 %265, 22594
  br i1 %447, label %448, label %475

448:                                              ; preds = %446
  %449 = load i8, i8* %110, align 1
  %450 = zext i8 %449 to i64
  %451 = load i16, i16* %111, align 2
  %452 = zext i16 %451 to i64
  %453 = load i64, i64* %9, align 8, !alias.scope !129, !noalias !132
  %454 = lshr i64 %453, 3
  %455 = getelementptr inbounds i8, i8* %10, i64 %454
  %456 = load i8, i8* %455, align 1, !alias.scope !132, !noalias !129
  %457 = zext i8 %456 to i64
  %458 = and i64 %453, 7
  %459 = shl i64 %452, %458
  %460 = or i64 %459, %457
  %461 = bitcast i8* %455 to i64*
  store i64 %460, i64* %461, align 8, !alias.scope !132, !noalias !129
  %462 = add i64 %453, %450
  %463 = add nsw i64 %265, -6210
  %464 = lshr i64 %462, 3
  %465 = getelementptr inbounds i8, i8* %10, i64 %464
  %466 = load i8, i8* %465, align 1, !alias.scope !134, !noalias !137
  %467 = zext i8 %466 to i64
  %468 = and i64 %462, 7
  %469 = shl i64 %463, %468
  %470 = or i64 %469, %467
  %471 = bitcast i8* %465 to i64*
  store i64 %470, i64* %471, align 8, !alias.scope !134, !noalias !137
  %472 = add i64 %462, 14
  store i64 %472, i64* %9, align 8, !alias.scope !137, !noalias !134
  %473 = load i32, i32* %112, align 8
  %474 = add i32 %473, 1
  store i32 %474, i32* %112, align 8
  br label %524

475:                                              ; preds = %446
  %476 = load i8, i8* %107, align 1
  %477 = zext i8 %476 to i64
  %478 = load i16, i16* %108, align 2
  %479 = zext i16 %478 to i64
  %480 = load i64, i64* %9, align 8, !alias.scope !139, !noalias !142
  %481 = lshr i64 %480, 3
  %482 = getelementptr inbounds i8, i8* %10, i64 %481
  %483 = load i8, i8* %482, align 1, !alias.scope !142, !noalias !139
  %484 = zext i8 %483 to i64
  %485 = and i64 %480, 7
  %486 = shl i64 %479, %485
  %487 = or i64 %486, %484
  %488 = bitcast i8* %482 to i64*
  store i64 %487, i64* %488, align 8, !alias.scope !142, !noalias !139
  %489 = add i64 %480, %477
  %490 = add i64 %265, -22594
  %491 = lshr i64 %489, 3
  %492 = getelementptr inbounds i8, i8* %10, i64 %491
  %493 = load i8, i8* %492, align 1, !alias.scope !144, !noalias !147
  %494 = zext i8 %493 to i64
  %495 = and i64 %489, 7
  %496 = shl i64 %490, %495
  %497 = or i64 %496, %494
  %498 = bitcast i8* %492 to i64*
  store i64 %497, i64* %498, align 8, !alias.scope !144, !noalias !147
  %499 = add i64 %489, 24
  store i64 %499, i64* %9, align 8, !alias.scope !147, !noalias !144
  %500 = load i32, i32* %109, align 4
  %501 = add i32 %500, 1
  store i32 %501, i32* %109, align 4
  br label %524

502:                                              ; preds = %268
  %503 = add nuw nsw i64 %265, 40
  %504 = getelementptr inbounds i8, i8* %5, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = zext i8 %505 to i64
  %507 = getelementptr inbounds i16, i16* %6, i64 %503
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i64
  %510 = load i64, i64* %9, align 8, !alias.scope !149, !noalias !152
  %511 = lshr i64 %510, 3
  %512 = getelementptr inbounds i8, i8* %10, i64 %511
  %513 = load i8, i8* %512, align 1, !alias.scope !152, !noalias !149
  %514 = zext i8 %513 to i64
  %515 = and i64 %510, 7
  %516 = shl i64 %509, %515
  %517 = or i64 %516, %514
  %518 = bitcast i8* %512 to i64*
  store i64 %517, i64* %518, align 8, !alias.scope !152, !noalias !149
  %519 = add i64 %510, %506
  store i64 %519, i64* %9, align 8, !alias.scope !149, !noalias !152
  %520 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %503
  %521 = load i32, i32* %520, align 4
  %522 = add i32 %521, 1
  store i32 %522, i32* %520, align 4
  %523 = icmp eq i64 %265, 0
  br i1 %523, label %599, label %524

524:                                              ; preds = %502, %475, %448, %353, %315, %272
  %525 = phi i64 [ %519, %502 ], [ %499, %475 ], [ %472, %448 ], [ %377, %353 ], [ %349, %315 ], [ %309, %272 ]
  %526 = and i64 %265, 1
  %527 = add i64 %264, 1
  %528 = icmp eq i64 %215, %527
  br i1 %528, label %575, label %529

529:                                              ; preds = %524
  %530 = sub i64 %265, %526
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ %525, %529 ], [ %571, %531 ]
  %533 = phi i64 [ 0, %529 ], [ %572, %531 ]
  %534 = phi i64 [ %530, %529 ], [ %573, %531 ]
  %535 = getelementptr inbounds i8, i8* %150, i64 %533
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i64
  %538 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i64
  %541 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %537
  %542 = load i16, i16* %541, align 2
  %543 = zext i16 %542 to i64
  %544 = lshr i64 %532, 3
  %545 = getelementptr inbounds i8, i8* %10, i64 %544
  %546 = load i8, i8* %545, align 1, !alias.scope !154, !noalias !157
  %547 = zext i8 %546 to i64
  %548 = and i64 %532, 7
  %549 = shl i64 %543, %548
  %550 = or i64 %549, %547
  %551 = bitcast i8* %545 to i64*
  store i64 %550, i64* %551, align 8, !alias.scope !154, !noalias !157
  %552 = add i64 %532, %540
  store i64 %552, i64* %9, align 8, !alias.scope !157, !noalias !154
  %553 = or i64 %533, 1
  %554 = getelementptr inbounds i8, i8* %150, i64 %553
  %555 = load i8, i8* %554, align 1
  %556 = zext i8 %555 to i64
  %557 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %556
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i64
  %560 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %556
  %561 = load i16, i16* %560, align 2
  %562 = zext i16 %561 to i64
  %563 = lshr i64 %552, 3
  %564 = getelementptr inbounds i8, i8* %10, i64 %563
  %565 = load i8, i8* %564, align 1, !alias.scope !154, !noalias !157
  %566 = zext i8 %565 to i64
  %567 = and i64 %552, 7
  %568 = shl i64 %562, %567
  %569 = or i64 %568, %566
  %570 = bitcast i8* %564 to i64*
  store i64 %569, i64* %570, align 8, !alias.scope !154, !noalias !157
  %571 = add i64 %552, %559
  store i64 %571, i64* %9, align 8, !alias.scope !157, !noalias !154
  %572 = add nuw i64 %533, 2
  %573 = add i64 %534, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %531

575:                                              ; preds = %531, %524
  %576 = phi i64 [ undef, %524 ], [ %571, %531 ]
  %577 = phi i64 [ %525, %524 ], [ %571, %531 ]
  %578 = phi i64 [ 0, %524 ], [ %572, %531 ]
  %579 = icmp eq i64 %526, 0
  br i1 %579, label %599, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i8, i8* %150, i64 %578
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i64
  %584 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  %587 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %583
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i64
  %590 = lshr i64 %577, 3
  %591 = getelementptr inbounds i8, i8* %10, i64 %590
  %592 = load i8, i8* %591, align 1, !alias.scope !154, !noalias !157
  %593 = zext i8 %592 to i64
  %594 = and i64 %577, 7
  %595 = shl i64 %589, %594
  %596 = or i64 %595, %593
  %597 = bitcast i8* %591 to i64*
  store i64 %596, i64* %597, align 8, !alias.scope !154, !noalias !157
  %598 = add i64 %577, %586
  store i64 %598, i64* %9, align 8, !alias.scope !157, !noalias !154
  br label %599

599:                                              ; preds = %580, %575, %502
  %600 = phi i64 [ %519, %502 ], [ %576, %575 ], [ %598, %580 ]
  %601 = icmp eq i32 %149, %263
  br i1 %601, label %602, label %618

602:                                              ; preds = %599
  %603 = load i8, i8* %116, align 1
  %604 = zext i8 %603 to i64
  %605 = load i16, i16* %117, align 2
  %606 = zext i16 %605 to i64
  %607 = lshr i64 %600, 3
  %608 = getelementptr inbounds i8, i8* %10, i64 %607
  %609 = load i8, i8* %608, align 1, !alias.scope !159, !noalias !162
  %610 = zext i8 %609 to i64
  %611 = and i64 %600, 7
  %612 = shl i64 %606, %611
  %613 = or i64 %612, %610
  %614 = bitcast i8* %608 to i64*
  store i64 %613, i64* %614, align 8, !alias.scope !159, !noalias !162
  %615 = add i64 %600, %604
  store i64 %615, i64* %9, align 8, !alias.scope !162, !noalias !159
  %616 = load i32, i32* %118, align 16
  %617 = add i32 %616, 1
  store i32 %617, i32* %118, align 16
  br label %664

618:                                              ; preds = %599
  %619 = shl i64 %218, 32
  %620 = ashr exact i64 %619, 32
  %621 = add nsw i64 %620, 3
  %622 = trunc i64 %621 to i32
  %623 = call i32 @llvm.ctlz.i32(i32 %622, i1 true) #6, !range !7
  %624 = xor i32 %623, 31
  %625 = add nsw i32 %624, -1
  %626 = zext i32 %625 to i64
  %627 = lshr i64 %621, %626
  %628 = and i64 %627, 1
  %629 = or i64 %628, 2
  %630 = shl i64 %629, %626
  %631 = shl nuw nsw i32 %624, 1
  %632 = add nsw i32 %631, -4
  %633 = zext i32 %632 to i64
  %634 = or i64 %628, %633
  %635 = add nuw nsw i64 %634, 80
  %636 = getelementptr inbounds i8, i8* %5, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds i16, i16* %6, i64 %635
  %640 = load i16, i16* %639, align 2
  %641 = zext i16 %640 to i64
  %642 = lshr i64 %600, 3
  %643 = getelementptr inbounds i8, i8* %10, i64 %642
  %644 = load i8, i8* %643, align 1, !alias.scope !164, !noalias !167
  %645 = zext i8 %644 to i64
  %646 = and i64 %600, 7
  %647 = shl i64 %641, %646
  %648 = or i64 %647, %645
  %649 = bitcast i8* %643 to i64*
  store i64 %648, i64* %649, align 8, !alias.scope !164, !noalias !167
  %650 = add i64 %600, %638
  %651 = sub i64 %621, %630
  %652 = lshr i64 %650, 3
  %653 = getelementptr inbounds i8, i8* %10, i64 %652
  %654 = load i8, i8* %653, align 1, !alias.scope !169, !noalias !172
  %655 = zext i8 %654 to i64
  %656 = and i64 %650, 7
  %657 = shl i64 %651, %656
  %658 = or i64 %657, %655
  %659 = bitcast i8* %653 to i64*
  store i64 %658, i64* %659, align 8, !alias.scope !169, !noalias !172
  %660 = add i64 %650, %626
  store i64 %660, i64* %9, align 8, !alias.scope !172, !noalias !169
  %661 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %635
  %662 = load i32, i32* %661, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %661, align 4
  br label %664

664:                                              ; preds = %618, %602
  %665 = phi i64 [ %615, %602 ], [ %660, %618 ]
  %666 = phi i32 [ %149, %602 ], [ %263, %618 ]
  %667 = icmp ult i64 %262, 12
  br i1 %667, label %668, label %688

668:                                              ; preds = %664
  %669 = add nsw i64 %261, 1
  %670 = getelementptr inbounds i8, i8* %5, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i64
  %673 = getelementptr inbounds i16, i16* %6, i64 %669
  %674 = load i16, i16* %673, align 2
  %675 = zext i16 %674 to i64
  %676 = lshr i64 %665, 3
  %677 = getelementptr inbounds i8, i8* %10, i64 %676
  %678 = load i8, i8* %677, align 1, !alias.scope !174, !noalias !177
  %679 = zext i8 %678 to i64
  %680 = and i64 %665, 7
  %681 = shl i64 %675, %680
  %682 = or i64 %681, %679
  %683 = bitcast i8* %677 to i64*
  store i64 %682, i64* %683, align 8, !alias.scope !174, !noalias !177
  %684 = add i64 %665, %672
  store i64 %684, i64* %9, align 8, !alias.scope !177, !noalias !174
  %685 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %669
  %686 = load i32, i32* %685, align 4
  %687 = add i32 %686, 1
  store i32 %687, i32* %685, align 4
  br label %874

688:                                              ; preds = %664
  %689 = icmp ult i64 %262, 72
  br i1 %689, label %690, label %730

690:                                              ; preds = %688
  %691 = add nsw i64 %261, -3
  %692 = trunc i64 %691 to i32
  %693 = call i32 @llvm.ctlz.i32(i32 %692, i1 true) #6, !range !7
  %694 = sub nsw i32 30, %693
  %695 = zext i32 %694 to i64
  %696 = lshr i64 %691, %695
  %697 = shl nsw i32 %694, 1
  %698 = zext i32 %697 to i64
  %699 = add nuw nsw i64 %698, 4
  %700 = add nuw nsw i64 %699, %696
  %701 = getelementptr inbounds i8, i8* %5, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i64
  %704 = getelementptr inbounds i16, i16* %6, i64 %700
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i64
  %707 = lshr i64 %665, 3
  %708 = getelementptr inbounds i8, i8* %10, i64 %707
  %709 = load i8, i8* %708, align 1, !alias.scope !179, !noalias !182
  %710 = zext i8 %709 to i64
  %711 = and i64 %665, 7
  %712 = shl i64 %706, %711
  %713 = or i64 %712, %710
  %714 = bitcast i8* %708 to i64*
  store i64 %713, i64* %714, align 8, !alias.scope !179, !noalias !182
  %715 = add i64 %665, %703
  %716 = shl i64 %696, %695
  %717 = sub i64 %691, %716
  %718 = lshr i64 %715, 3
  %719 = getelementptr inbounds i8, i8* %10, i64 %718
  %720 = load i8, i8* %719, align 1, !alias.scope !184, !noalias !187
  %721 = zext i8 %720 to i64
  %722 = and i64 %715, 7
  %723 = shl i64 %717, %722
  %724 = or i64 %723, %721
  %725 = bitcast i8* %719 to i64*
  store i64 %724, i64* %725, align 8, !alias.scope !184, !noalias !187
  %726 = add i64 %715, %695
  store i64 %726, i64* %9, align 8, !alias.scope !187, !noalias !184
  %727 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %700
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, 1
  store i32 %729, i32* %727, align 4
  br label %874

730:                                              ; preds = %688
  %731 = icmp ult i64 %262, 136
  br i1 %731, label %732, label %779

732:                                              ; preds = %730
  %733 = add nsw i64 %261, -3
  %734 = lshr i64 %733, 5
  %735 = add nuw nsw i64 %734, 30
  %736 = getelementptr inbounds i8, i8* %5, i64 %735
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i64
  %739 = getelementptr inbounds i16, i16* %6, i64 %735
  %740 = load i16, i16* %739, align 2
  %741 = zext i16 %740 to i64
  %742 = lshr i64 %665, 3
  %743 = getelementptr inbounds i8, i8* %10, i64 %742
  %744 = load i8, i8* %743, align 1, !alias.scope !189, !noalias !192
  %745 = zext i8 %744 to i64
  %746 = and i64 %665, 7
  %747 = shl i64 %741, %746
  %748 = or i64 %747, %745
  %749 = bitcast i8* %743 to i64*
  store i64 %748, i64* %749, align 8, !alias.scope !189, !noalias !192
  %750 = add i64 %665, %738
  %751 = and i64 %733, 31
  %752 = lshr i64 %750, 3
  %753 = getelementptr inbounds i8, i8* %10, i64 %752
  %754 = load i8, i8* %753, align 1, !alias.scope !194, !noalias !197
  %755 = zext i8 %754 to i64
  %756 = and i64 %750, 7
  %757 = shl i64 %751, %756
  %758 = or i64 %757, %755
  %759 = bitcast i8* %753 to i64*
  store i64 %758, i64* %759, align 8, !alias.scope !194, !noalias !197
  %760 = add i64 %750, 5
  store i64 %760, i64* %9, align 8, !alias.scope !197, !noalias !194
  %761 = load i8, i8* %116, align 1
  %762 = zext i8 %761 to i64
  %763 = load i16, i16* %117, align 2
  %764 = zext i16 %763 to i64
  %765 = lshr i64 %760, 3
  %766 = getelementptr inbounds i8, i8* %10, i64 %765
  %767 = load i8, i8* %766, align 1, !alias.scope !199, !noalias !202
  %768 = zext i8 %767 to i64
  %769 = and i64 %760, 7
  %770 = shl i64 %764, %769
  %771 = or i64 %770, %768
  %772 = bitcast i8* %766 to i64*
  store i64 %771, i64* %772, align 8, !alias.scope !199, !noalias !202
  %773 = add i64 %760, %762
  store i64 %773, i64* %9, align 8, !alias.scope !202, !noalias !199
  %774 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %735
  %775 = load i32, i32* %774, align 4
  %776 = add i32 %775, 1
  store i32 %776, i32* %774, align 4
  %777 = load i32, i32* %118, align 16
  %778 = add i32 %777, 1
  store i32 %778, i32* %118, align 16
  br label %874

779:                                              ; preds = %730
  %780 = icmp ult i64 %262, 2120
  br i1 %780, label %781, label %833

781:                                              ; preds = %779
  %782 = add nsw i64 %261, -67
  %783 = trunc i64 %782 to i32
  %784 = call i32 @llvm.ctlz.i32(i32 %783, i1 true) #6, !range !7
  %785 = xor i32 %784, 31
  %786 = add nuw nsw i32 %785, 28
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds i8, i8* %5, i64 %787
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i64
  %791 = getelementptr inbounds i16, i16* %6, i64 %787
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i64
  %794 = lshr i64 %665, 3
  %795 = getelementptr inbounds i8, i8* %10, i64 %794
  %796 = load i8, i8* %795, align 1, !alias.scope !204, !noalias !207
  %797 = zext i8 %796 to i64
  %798 = and i64 %665, 7
  %799 = shl i64 %793, %798
  %800 = or i64 %799, %797
  %801 = bitcast i8* %795 to i64*
  store i64 %800, i64* %801, align 8, !alias.scope !204, !noalias !207
  %802 = add i64 %665, %790
  %803 = zext i32 %785 to i64
  %804 = shl i64 1, %803
  %805 = sub i64 %782, %804
  %806 = lshr i64 %802, 3
  %807 = getelementptr inbounds i8, i8* %10, i64 %806
  %808 = load i8, i8* %807, align 1, !alias.scope !209, !noalias !212
  %809 = zext i8 %808 to i64
  %810 = and i64 %802, 7
  %811 = shl i64 %805, %810
  %812 = or i64 %811, %809
  %813 = bitcast i8* %807 to i64*
  store i64 %812, i64* %813, align 8, !alias.scope !209, !noalias !212
  %814 = add i64 %802, %803
  store i64 %814, i64* %9, align 8, !alias.scope !212, !noalias !209
  %815 = load i8, i8* %116, align 1
  %816 = zext i8 %815 to i64
  %817 = load i16, i16* %117, align 2
  %818 = zext i16 %817 to i64
  %819 = lshr i64 %814, 3
  %820 = getelementptr inbounds i8, i8* %10, i64 %819
  %821 = load i8, i8* %820, align 1, !alias.scope !214, !noalias !217
  %822 = zext i8 %821 to i64
  %823 = and i64 %814, 7
  %824 = shl i64 %818, %823
  %825 = or i64 %824, %822
  %826 = bitcast i8* %820 to i64*
  store i64 %825, i64* %826, align 8, !alias.scope !214, !noalias !217
  %827 = add i64 %814, %816
  store i64 %827, i64* %9, align 8, !alias.scope !217, !noalias !214
  %828 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %787
  %829 = load i32, i32* %828, align 4
  %830 = add i32 %829, 1
  store i32 %830, i32* %828, align 4
  %831 = load i32, i32* %118, align 16
  %832 = add i32 %831, 1
  store i32 %832, i32* %118, align 16
  br label %874

833:                                              ; preds = %779
  %834 = load i8, i8* %119, align 1
  %835 = zext i8 %834 to i64
  %836 = load i16, i16* %120, align 2
  %837 = zext i16 %836 to i64
  %838 = lshr i64 %665, 3
  %839 = getelementptr inbounds i8, i8* %10, i64 %838
  %840 = load i8, i8* %839, align 1, !alias.scope !219, !noalias !222
  %841 = zext i8 %840 to i64
  %842 = and i64 %665, 7
  %843 = shl i64 %837, %842
  %844 = or i64 %843, %841
  %845 = bitcast i8* %839 to i64*
  store i64 %844, i64* %845, align 8, !alias.scope !219, !noalias !222
  %846 = add i64 %665, %835
  %847 = add i64 %261, -2115
  %848 = lshr i64 %846, 3
  %849 = getelementptr inbounds i8, i8* %10, i64 %848
  %850 = load i8, i8* %849, align 1, !alias.scope !224, !noalias !227
  %851 = zext i8 %850 to i64
  %852 = and i64 %846, 7
  %853 = shl i64 %847, %852
  %854 = or i64 %853, %851
  %855 = bitcast i8* %849 to i64*
  store i64 %854, i64* %855, align 8, !alias.scope !224, !noalias !227
  %856 = add i64 %846, 24
  store i64 %856, i64* %9, align 8, !alias.scope !227, !noalias !224
  %857 = load i8, i8* %116, align 1
  %858 = zext i8 %857 to i64
  %859 = load i16, i16* %117, align 2
  %860 = zext i16 %859 to i64
  %861 = lshr i64 %856, 3
  %862 = getelementptr inbounds i8, i8* %10, i64 %861
  %863 = load i8, i8* %862, align 1, !alias.scope !229, !noalias !232
  %864 = zext i8 %863 to i64
  %865 = and i64 %856, 7
  %866 = shl i64 %860, %865
  %867 = or i64 %866, %864
  %868 = bitcast i8* %862 to i64*
  store i64 %867, i64* %868, align 8, !alias.scope !229, !noalias !232
  %869 = add i64 %856, %858
  store i64 %869, i64* %9, align 8, !alias.scope !232, !noalias !229
  %870 = load i32, i32* %121, align 4
  %871 = add i32 %870, 1
  store i32 %871, i32* %121, align 4
  %872 = load i32, i32* %118, align 16
  %873 = add i32 %872, 1
  store i32 %873, i32* %118, align 16
  br label %874

874:                                              ; preds = %833, %781, %732, %690, %668
  %875 = icmp ult i8* %266, %145
  br i1 %875, label %876, label %1189, !prof !75

876:                                              ; preds = %874
  %877 = getelementptr inbounds i8, i8* %266, i64 -3
  %878 = bitcast i8* %877 to i64*
  %879 = load i64, i64* %878, align 8
  %880 = mul i64 %879, 8503243848024064
  %881 = lshr i64 %880, 55
  %882 = lshr i64 %879, 24
  %883 = mul i64 %882, 8503243848024064
  %884 = lshr i64 %883, 55
  %885 = ptrtoint i8* %266 to i64
  %886 = sub i64 %885, %106
  %887 = trunc i64 %886 to i32
  %888 = add i32 %887, -3
  %889 = getelementptr inbounds i32, i32* %4, i64 %881
  store i32 %888, i32* %889, align 4
  %890 = lshr i64 %879, 8
  %891 = mul i64 %890, 8503243848024064
  %892 = lshr i64 %891, 55
  %893 = add i32 %887, -2
  %894 = getelementptr inbounds i32, i32* %4, i64 %892
  store i32 %893, i32* %894, align 4
  %895 = lshr i64 %879, 16
  %896 = mul i64 %895, 8503243848024064
  %897 = lshr i64 %896, 55
  %898 = add i32 %887, -1
  %899 = getelementptr inbounds i32, i32* %4, i64 %897
  store i32 %898, i32* %899, align 4
  %900 = getelementptr inbounds i32, i32* %4, i64 %884
  %901 = load i32, i32* %900, align 4
  store i32 %887, i32* %900, align 4
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i8, i8* %1, i64 %902
  %904 = bitcast i8* %266 to i32*
  %905 = load i32, i32* %904, align 4
  %906 = bitcast i8* %903 to i32*
  %907 = load i32, i32* %906, align 4
  %908 = icmp eq i32 %905, %907
  br i1 %908, label %909, label %1184

909:                                              ; preds = %876
  %910 = getelementptr inbounds i8, i8* %266, i64 4
  %911 = load i8, i8* %910, align 1
  %912 = getelementptr inbounds i8, i8* %903, i64 4
  %913 = load i8, i8* %912, align 1
  %914 = icmp eq i8 %911, %913
  br i1 %914, label %921, label %1184

915:                                              ; preds = %1149
  %916 = getelementptr inbounds i8, i8* %972, i64 4
  %917 = load i8, i8* %916, align 1
  %918 = getelementptr inbounds i8, i8* %1176, i64 4
  %919 = load i8, i8* %918, align 1
  %920 = icmp eq i8 %917, %919
  br i1 %920, label %921, label %1187

921:                                              ; preds = %909, %915
  %922 = phi i8* [ %972, %915 ], [ %266, %909 ]
  %923 = phi i32 [ %973, %915 ], [ %666, %909 ]
  %924 = phi i8* [ %1176, %915 ], [ %903, %909 ]
  %925 = getelementptr inbounds i8, i8* %924, i64 5
  %926 = getelementptr inbounds i8, i8* %922, i64 5
  %927 = ptrtoint i8* %922 to i64
  %928 = sub i64 %146, %927
  %929 = add i64 %928, -5
  %930 = lshr i64 %929, 3
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %952, label %932, !prof !76

932:                                              ; preds = %921, %942
  %933 = phi i64 [ %945, %942 ], [ %930, %921 ]
  %934 = phi i8* [ %943, %942 ], [ %926, %921 ]
  %935 = phi i64 [ %944, %942 ], [ 0, %921 ]
  %936 = bitcast i8* %934 to i64*
  %937 = load i64, i64* %936, align 8
  %938 = getelementptr inbounds i8, i8* %925, i64 %935
  %939 = bitcast i8* %938 to i64*
  %940 = load i64, i64* %939, align 8
  %941 = icmp eq i64 %937, %940
  br i1 %941, label %942, label %947, !prof !76

942:                                              ; preds = %932
  %943 = getelementptr inbounds i8, i8* %934, i64 8
  %944 = add nuw i64 %935, 8
  %945 = add nsw i64 %933, -1
  %946 = icmp eq i64 %945, 0
  br i1 %946, label %952, label %932, !prof !76

947:                                              ; preds = %932
  %948 = xor i64 %940, %937
  %949 = call i64 @llvm.cttz.i64(i64 %948, i1 true) #6, !range !78
  %950 = lshr i64 %949, 3
  %951 = or i64 %950, %935
  br label %965

952:                                              ; preds = %942, %921
  %953 = phi i64 [ 0, %921 ], [ %944, %942 ]
  %954 = phi i8* [ %926, %921 ], [ %943, %942 ]
  %955 = and i64 %929, 7
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %965, label %957

957:                                              ; preds = %952
  %958 = getelementptr inbounds i8, i8* %925, i64 %953
  %959 = load i8, i8* %958, align 1
  %960 = load i8, i8* %954, align 1
  %961 = icmp eq i8 %959, %960
  br i1 %961, label %962, label %965, !prof !75

962:                                              ; preds = %957
  %963 = add i64 %953, 1
  %964 = icmp eq i64 %955, 1
  br i1 %964, label %965, label %1802

965:                                              ; preds = %1847, %962, %957, %1802, %1808, %1811, %1817, %1820, %1826, %1829, %1835, %1838, %1844, %952, %947
  %966 = phi i64 [ %951, %947 ], [ %953, %952 ], [ %953, %957 ], [ %963, %962 ], [ %963, %1802 ], [ %1809, %1808 ], [ %1809, %1811 ], [ %1818, %1817 ], [ %1818, %1820 ], [ %1827, %1826 ], [ %1827, %1829 ], [ %1836, %1835 ], [ %1836, %1838 ], [ %1845, %1844 ], [ %1854, %1847 ]
  %967 = add i64 %966, 5
  %968 = ptrtoint i8* %924 to i64
  %969 = sub i64 %927, %968
  %970 = icmp sgt i64 %969, 262128
  br i1 %970, label %1184, label %971

971:                                              ; preds = %965
  %972 = getelementptr inbounds i8, i8* %922, i64 %967
  %973 = trunc i64 %969 to i32
  %974 = icmp ult i64 %967, 10
  br i1 %974, label %975, label %994

975:                                              ; preds = %971
  %976 = add nsw i64 %966, 19
  %977 = getelementptr inbounds i8, i8* %5, i64 %976
  %978 = load i8, i8* %977, align 1
  %979 = zext i8 %978 to i64
  %980 = getelementptr inbounds i16, i16* %6, i64 %976
  %981 = load i16, i16* %980, align 2
  %982 = zext i16 %981 to i64
  %983 = load i64, i64* %9, align 8, !alias.scope !234, !noalias !237
  %984 = lshr i64 %983, 3
  %985 = getelementptr inbounds i8, i8* %10, i64 %984
  %986 = load i8, i8* %985, align 1, !alias.scope !237, !noalias !234
  %987 = zext i8 %986 to i64
  %988 = and i64 %983, 7
  %989 = shl i64 %982, %988
  %990 = or i64 %989, %987
  %991 = bitcast i8* %985 to i64*
  store i64 %990, i64* %991, align 8, !alias.scope !237, !noalias !234
  %992 = add i64 %983, %979
  store i64 %992, i64* %9, align 8, !alias.scope !234, !noalias !237
  %993 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %976
  br label %1098

994:                                              ; preds = %971
  %995 = icmp ult i64 %967, 134
  br i1 %995, label %996, label %1035

996:                                              ; preds = %994
  %997 = add nsw i64 %966, -1
  %998 = trunc i64 %997 to i32
  %999 = call i32 @llvm.ctlz.i32(i32 %998, i1 true) #6, !range !7
  %1000 = sub nsw i32 30, %999
  %1001 = zext i32 %1000 to i64
  %1002 = lshr i64 %997, %1001
  %1003 = shl nsw i32 %1000, 1
  %1004 = zext i32 %1003 to i64
  %1005 = add nuw nsw i64 %1004, 20
  %1006 = add nuw nsw i64 %1005, %1002
  %1007 = getelementptr inbounds i8, i8* %5, i64 %1006
  %1008 = load i8, i8* %1007, align 1
  %1009 = zext i8 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %6, i64 %1006
  %1011 = load i16, i16* %1010, align 2
  %1012 = zext i16 %1011 to i64
  %1013 = load i64, i64* %9, align 8, !alias.scope !239, !noalias !242
  %1014 = lshr i64 %1013, 3
  %1015 = getelementptr inbounds i8, i8* %10, i64 %1014
  %1016 = load i8, i8* %1015, align 1, !alias.scope !242, !noalias !239
  %1017 = zext i8 %1016 to i64
  %1018 = and i64 %1013, 7
  %1019 = shl i64 %1012, %1018
  %1020 = or i64 %1019, %1017
  %1021 = bitcast i8* %1015 to i64*
  store i64 %1020, i64* %1021, align 8, !alias.scope !242, !noalias !239
  %1022 = add i64 %1013, %1009
  %1023 = shl i64 %1002, %1001
  %1024 = sub i64 %997, %1023
  %1025 = lshr i64 %1022, 3
  %1026 = getelementptr inbounds i8, i8* %10, i64 %1025
  %1027 = load i8, i8* %1026, align 1, !alias.scope !244, !noalias !247
  %1028 = zext i8 %1027 to i64
  %1029 = and i64 %1022, 7
  %1030 = shl i64 %1024, %1029
  %1031 = or i64 %1030, %1028
  %1032 = bitcast i8* %1026 to i64*
  store i64 %1031, i64* %1032, align 8, !alias.scope !244, !noalias !247
  %1033 = add i64 %1022, %1001
  store i64 %1033, i64* %9, align 8, !alias.scope !247, !noalias !244
  %1034 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1006
  br label %1098

1035:                                             ; preds = %994
  %1036 = icmp ult i64 %967, 2118
  br i1 %1036, label %1037, label %1073

1037:                                             ; preds = %1035
  %1038 = add nsw i64 %966, -65
  %1039 = trunc i64 %1038 to i32
  %1040 = call i32 @llvm.ctlz.i32(i32 %1039, i1 true) #6, !range !7
  %1041 = xor i32 %1040, 31
  %1042 = add nuw nsw i32 %1041, 28
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds i8, i8* %5, i64 %1043
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i64
  %1047 = getelementptr inbounds i16, i16* %6, i64 %1043
  %1048 = load i16, i16* %1047, align 2
  %1049 = zext i16 %1048 to i64
  %1050 = load i64, i64* %9, align 8, !alias.scope !249, !noalias !252
  %1051 = lshr i64 %1050, 3
  %1052 = getelementptr inbounds i8, i8* %10, i64 %1051
  %1053 = load i8, i8* %1052, align 1, !alias.scope !252, !noalias !249
  %1054 = zext i8 %1053 to i64
  %1055 = and i64 %1050, 7
  %1056 = shl i64 %1049, %1055
  %1057 = or i64 %1056, %1054
  %1058 = bitcast i8* %1052 to i64*
  store i64 %1057, i64* %1058, align 8, !alias.scope !252, !noalias !249
  %1059 = add i64 %1050, %1046
  %1060 = zext i32 %1041 to i64
  %1061 = shl i64 1, %1060
  %1062 = sub i64 %1038, %1061
  %1063 = lshr i64 %1059, 3
  %1064 = getelementptr inbounds i8, i8* %10, i64 %1063
  %1065 = load i8, i8* %1064, align 1, !alias.scope !254, !noalias !257
  %1066 = zext i8 %1065 to i64
  %1067 = and i64 %1059, 7
  %1068 = shl i64 %1062, %1067
  %1069 = or i64 %1068, %1066
  %1070 = bitcast i8* %1064 to i64*
  store i64 %1069, i64* %1070, align 8, !alias.scope !254, !noalias !257
  %1071 = add i64 %1059, %1060
  store i64 %1071, i64* %9, align 8, !alias.scope !257, !noalias !254
  %1072 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1043
  br label %1098

1073:                                             ; preds = %1035
  %1074 = load i8, i8* %119, align 1
  %1075 = zext i8 %1074 to i64
  %1076 = load i16, i16* %120, align 2
  %1077 = zext i16 %1076 to i64
  %1078 = load i64, i64* %9, align 8, !alias.scope !259, !noalias !262
  %1079 = lshr i64 %1078, 3
  %1080 = getelementptr inbounds i8, i8* %10, i64 %1079
  %1081 = load i8, i8* %1080, align 1, !alias.scope !262, !noalias !259
  %1082 = zext i8 %1081 to i64
  %1083 = and i64 %1078, 7
  %1084 = shl i64 %1077, %1083
  %1085 = or i64 %1084, %1082
  %1086 = bitcast i8* %1080 to i64*
  store i64 %1085, i64* %1086, align 8, !alias.scope !262, !noalias !259
  %1087 = add i64 %1078, %1075
  %1088 = add i64 %966, -2113
  %1089 = lshr i64 %1087, 3
  %1090 = getelementptr inbounds i8, i8* %10, i64 %1089
  %1091 = load i8, i8* %1090, align 1, !alias.scope !264, !noalias !267
  %1092 = zext i8 %1091 to i64
  %1093 = and i64 %1087, 7
  %1094 = shl i64 %1088, %1093
  %1095 = or i64 %1094, %1092
  %1096 = bitcast i8* %1090 to i64*
  store i64 %1095, i64* %1096, align 8, !alias.scope !264, !noalias !267
  %1097 = add i64 %1087, 24
  store i64 %1097, i64* %9, align 8, !alias.scope !267, !noalias !264
  br label %1098

1098:                                             ; preds = %1073, %1037, %996, %975
  %1099 = phi i32* [ %121, %1073 ], [ %1072, %1037 ], [ %1034, %996 ], [ %993, %975 ]
  %1100 = phi i64 [ %1097, %1073 ], [ %1071, %1037 ], [ %1033, %996 ], [ %992, %975 ]
  %1101 = load i32, i32* %1099, align 4
  %1102 = add i32 %1101, 1
  store i32 %1102, i32* %1099, align 4
  %1103 = shl i64 %969, 32
  %1104 = ashr exact i64 %1103, 32
  %1105 = add nsw i64 %1104, 3
  %1106 = trunc i64 %1105 to i32
  %1107 = call i32 @llvm.ctlz.i32(i32 %1106, i1 true) #6, !range !7
  %1108 = xor i32 %1107, 31
  %1109 = add nsw i32 %1108, -1
  %1110 = zext i32 %1109 to i64
  %1111 = lshr i64 %1105, %1110
  %1112 = and i64 %1111, 1
  %1113 = or i64 %1112, 2
  %1114 = shl i64 %1113, %1110
  %1115 = shl nuw nsw i32 %1108, 1
  %1116 = add nsw i32 %1115, -4
  %1117 = zext i32 %1116 to i64
  %1118 = or i64 %1112, %1117
  %1119 = add nuw nsw i64 %1118, 80
  %1120 = getelementptr inbounds i8, i8* %5, i64 %1119
  %1121 = load i8, i8* %1120, align 1
  %1122 = zext i8 %1121 to i64
  %1123 = getelementptr inbounds i16, i16* %6, i64 %1119
  %1124 = load i16, i16* %1123, align 2
  %1125 = zext i16 %1124 to i64
  %1126 = lshr i64 %1100, 3
  %1127 = getelementptr inbounds i8, i8* %10, i64 %1126
  %1128 = load i8, i8* %1127, align 1, !alias.scope !269, !noalias !272
  %1129 = zext i8 %1128 to i64
  %1130 = and i64 %1100, 7
  %1131 = shl i64 %1125, %1130
  %1132 = or i64 %1131, %1129
  %1133 = bitcast i8* %1127 to i64*
  store i64 %1132, i64* %1133, align 8, !alias.scope !269, !noalias !272
  %1134 = add i64 %1100, %1122
  %1135 = sub i64 %1105, %1114
  %1136 = lshr i64 %1134, 3
  %1137 = getelementptr inbounds i8, i8* %10, i64 %1136
  %1138 = load i8, i8* %1137, align 1, !alias.scope !274, !noalias !277
  %1139 = zext i8 %1138 to i64
  %1140 = and i64 %1134, 7
  %1141 = shl i64 %1135, %1140
  %1142 = or i64 %1141, %1139
  %1143 = bitcast i8* %1137 to i64*
  store i64 %1142, i64* %1143, align 8, !alias.scope !274, !noalias !277
  %1144 = add i64 %1134, %1110
  store i64 %1144, i64* %9, align 8, !alias.scope !277, !noalias !274
  %1145 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1119
  %1146 = load i32, i32* %1145, align 4
  %1147 = add i32 %1146, 1
  store i32 %1147, i32* %1145, align 4
  %1148 = icmp ult i8* %972, %145
  br i1 %1148, label %1149, label %1189, !prof !75

1149:                                             ; preds = %1098
  %1150 = getelementptr inbounds i8, i8* %972, i64 -3
  %1151 = bitcast i8* %1150 to i64*
  %1152 = load i64, i64* %1151, align 8
  %1153 = mul i64 %1152, 8503243848024064
  %1154 = lshr i64 %1153, 55
  %1155 = lshr i64 %1152, 24
  %1156 = mul i64 %1155, 8503243848024064
  %1157 = lshr i64 %1156, 55
  %1158 = ptrtoint i8* %972 to i64
  %1159 = sub i64 %1158, %106
  %1160 = trunc i64 %1159 to i32
  %1161 = add i32 %1160, -3
  %1162 = getelementptr inbounds i32, i32* %4, i64 %1154
  store i32 %1161, i32* %1162, align 4
  %1163 = lshr i64 %1152, 8
  %1164 = mul i64 %1163, 8503243848024064
  %1165 = lshr i64 %1164, 55
  %1166 = add i32 %1160, -2
  %1167 = getelementptr inbounds i32, i32* %4, i64 %1165
  store i32 %1166, i32* %1167, align 4
  %1168 = lshr i64 %1152, 16
  %1169 = mul i64 %1168, 8503243848024064
  %1170 = lshr i64 %1169, 55
  %1171 = add i32 %1160, -1
  %1172 = getelementptr inbounds i32, i32* %4, i64 %1170
  store i32 %1171, i32* %1172, align 4
  %1173 = getelementptr inbounds i32, i32* %4, i64 %1157
  %1174 = load i32, i32* %1173, align 4
  store i32 %1160, i32* %1173, align 4
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds i8, i8* %1, i64 %1175
  %1177 = bitcast i8* %972 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = bitcast i8* %1176 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = icmp eq i32 %1178, %1180
  br i1 %1181, label %915, label %1182

1182:                                             ; preds = %1149
  %1183 = trunc i64 %969 to i32
  br label %1184

1184:                                             ; preds = %965, %1182, %1187, %909, %876
  %1185 = phi i8* [ %266, %876 ], [ %266, %909 ], [ %972, %1182 ], [ %972, %1187 ], [ %922, %965 ]
  %1186 = phi i32 [ %666, %876 ], [ %666, %909 ], [ %1183, %1182 ], [ %1188, %1187 ], [ %923, %965 ]
  br label %147

1187:                                             ; preds = %915
  %1188 = trunc i64 %969 to i32
  br label %1184

1189:                                             ; preds = %874, %157, %1098, %132
  %1190 = phi i8* [ %135, %132 ], [ %972, %1098 ], [ %150, %157 ], [ %266, %874 ]
  %1191 = sub i64 %136, %134
  %1192 = icmp ult i64 %1191, 65536
  %1193 = select i1 %1192, i64 %1191, i64 65536
  %1194 = icmp eq i64 %1191, 0
  br i1 %1194, label %1286, label %1195

1195:                                             ; preds = %1189
  %1196 = add i64 %1193, %133
  %1197 = icmp ult i64 %1196, 1048577
  br i1 %1197, label %1198, label %1286

1198:                                             ; preds = %1195
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %122) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %122, i8 0, i64 2048, i1 false) #6
  %1199 = icmp eq i64 %1193, 0
  br i1 %1199, label %1214, label %1200

1200:                                             ; preds = %1198, %1200
  %1201 = phi i64 [ %1208, %1200 ], [ 0, %1198 ]
  %1202 = getelementptr inbounds i8, i8* %138, i64 %1201
  %1203 = load i8, i8* %1202, align 1
  %1204 = zext i8 %1203 to i64
  %1205 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1204
  %1206 = load i64, i64* %1205, align 8
  %1207 = add i64 %1206, 1
  store i64 %1207, i64* %1205, align 8
  %1208 = add i64 %1201, 43
  %1209 = icmp ult i64 %1208, %1193
  br i1 %1209, label %1200, label %1210

1210:                                             ; preds = %1200
  %1211 = add nuw nsw i64 %1193, 42
  %1212 = udiv i64 %1211, 43
  %1213 = icmp ult i64 %1211, 11008
  br i1 %1213, label %1214, label %1219

1214:                                             ; preds = %1210, %1198
  %1215 = phi i64 [ %1212, %1210 ], [ 0, %1198 ]
  %1216 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1215
  %1217 = load double, double* %1216, align 8
  %1218 = uitofp i64 %1215 to double
  br label %1222

1219:                                             ; preds = %1210
  %1220 = uitofp i64 %1212 to double
  %1221 = call double @log2(double %1220) #6
  br label %1222

1222:                                             ; preds = %1219, %1214
  %1223 = phi double [ %1218, %1214 ], [ %1220, %1219 ]
  %1224 = phi double [ %1217, %1214 ], [ %1221, %1219 ]
  %1225 = fadd double %1224, 5.000000e-01
  %1226 = fmul double %1223, %1225
  %1227 = fadd double %1226, 2.000000e+02
  br label %1228

1228:                                             ; preds = %1243, %1222
  %1229 = phi double [ %1227, %1222 ], [ %1247, %1243 ]
  %1230 = phi i64 [ 0, %1222 ], [ %1248, %1243 ]
  %1231 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1230
  %1232 = load i64, i64* %1231, align 8
  %1233 = uitofp i64 %1232 to double
  %1234 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1230
  %1235 = load i8, i8* %1234, align 1
  %1236 = uitofp i8 %1235 to double
  %1237 = icmp ult i64 %1232, 256
  br i1 %1237, label %1238, label %1241

1238:                                             ; preds = %1228
  %1239 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1232
  %1240 = load double, double* %1239, align 8
  br label %1243

1241:                                             ; preds = %1228
  %1242 = call double @log2(double %1233) #6
  br label %1243

1243:                                             ; preds = %1241, %1238
  %1244 = phi double [ %1240, %1238 ], [ %1242, %1241 ]
  %1245 = fadd double %1244, %1236
  %1246 = fmul double %1245, %1233
  %1247 = fsub double %1229, %1246
  %1248 = add nuw nsw i64 %1230, 1
  %1249 = icmp eq i64 %1248, 256
  br i1 %1249, label %1250, label %1228

1250:                                             ; preds = %1243
  %1251 = fcmp ult double %1247, 0.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %122) #6
  br i1 %1251, label %1286, label %1252

1252:                                             ; preds = %1250
  %1253 = trunc i64 %1196 to i32
  %1254 = add i32 %1253, -1
  br label %1255

1255:                                             ; preds = %1255, %1252
  %1256 = phi i64 [ 20, %1252 ], [ %1282, %1255 ]
  %1257 = phi i32 [ %1254, %1252 ], [ %1283, %1255 ]
  %1258 = phi i64 [ %125, %1252 ], [ %1284, %1255 ]
  %1259 = lshr i64 %1258, 3
  %1260 = and i64 %1258, 7
  %1261 = sub nuw nsw i64 8, %1260
  %1262 = icmp ult i64 %1256, %1261
  %1263 = select i1 %1262, i64 %1256, i64 %1261
  %1264 = add nuw nsw i64 %1263, %1260
  %1265 = trunc i64 %1264 to i32
  %1266 = shl nsw i32 -1, %1265
  %1267 = trunc i64 %1260 to i32
  %1268 = shl nsw i32 -1, %1267
  %1269 = xor i32 %1268, 255
  %1270 = or i32 %1266, %1269
  %1271 = getelementptr inbounds i8, i8* %10, i64 %1259
  %1272 = load i8, i8* %1271, align 1
  %1273 = zext i8 %1272 to i32
  %1274 = and i32 %1270, %1273
  %1275 = trunc i64 %1263 to i32
  %1276 = shl nsw i32 -1, %1275
  %1277 = xor i32 %1276, -1
  %1278 = and i32 %1257, %1277
  %1279 = shl i32 %1278, %1267
  %1280 = or i32 %1274, %1279
  %1281 = trunc i32 %1280 to i8
  store i8 %1281, i8* %1271, align 1
  %1282 = sub i64 %1256, %1263
  %1283 = lshr i32 %1257, %1275
  %1284 = add i64 %1263, %1258
  %1285 = icmp eq i64 %1282, 0
  br i1 %1285, label %132, label %1255

1286:                                             ; preds = %1250, %1195, %1189
  %1287 = icmp ult i8* %1190, %138
  br i1 %1287, label %1288, label %1695

1288:                                             ; preds = %1286
  %1289 = ptrtoint i8* %138 to i64
  %1290 = ptrtoint i8* %1190 to i64
  %1291 = sub i64 %1289, %1290
  %1292 = icmp ult i64 %1291, 6210
  br i1 %1292, label %1293, label %1478, !prof !75

1293:                                             ; preds = %1288
  %1294 = icmp ult i64 %1291, 6
  br i1 %1294, label %1399, label %1295

1295:                                             ; preds = %1293
  %1296 = icmp ult i64 %1291, 130
  br i1 %1296, label %1297, label %1336

1297:                                             ; preds = %1295
  %1298 = add nsw i64 %1291, -2
  %1299 = trunc i64 %1298 to i32
  %1300 = call i32 @llvm.ctlz.i32(i32 %1299, i1 true) #6, !range !7
  %1301 = sub nsw i32 30, %1300
  %1302 = zext i32 %1301 to i64
  %1303 = lshr i64 %1298, %1302
  %1304 = shl nsw i32 %1301, 1
  %1305 = zext i32 %1304 to i64
  %1306 = add nuw nsw i64 %1305, 42
  %1307 = add nuw nsw i64 %1306, %1303
  %1308 = getelementptr inbounds i8, i8* %5, i64 %1307
  %1309 = load i8, i8* %1308, align 1
  %1310 = zext i8 %1309 to i64
  %1311 = getelementptr inbounds i16, i16* %6, i64 %1307
  %1312 = load i16, i16* %1311, align 2
  %1313 = zext i16 %1312 to i64
  %1314 = load i64, i64* %9, align 8, !alias.scope !279, !noalias !282
  %1315 = lshr i64 %1314, 3
  %1316 = getelementptr inbounds i8, i8* %10, i64 %1315
  %1317 = load i8, i8* %1316, align 1, !alias.scope !282, !noalias !279
  %1318 = zext i8 %1317 to i64
  %1319 = and i64 %1314, 7
  %1320 = shl i64 %1313, %1319
  %1321 = or i64 %1320, %1318
  %1322 = bitcast i8* %1316 to i64*
  store i64 %1321, i64* %1322, align 8, !alias.scope !282, !noalias !279
  %1323 = add i64 %1314, %1310
  %1324 = shl i64 %1303, %1302
  %1325 = sub i64 %1298, %1324
  %1326 = lshr i64 %1323, 3
  %1327 = getelementptr inbounds i8, i8* %10, i64 %1326
  %1328 = load i8, i8* %1327, align 1, !alias.scope !284, !noalias !287
  %1329 = zext i8 %1328 to i64
  %1330 = and i64 %1323, 7
  %1331 = shl i64 %1325, %1330
  %1332 = or i64 %1331, %1329
  %1333 = bitcast i8* %1327 to i64*
  store i64 %1332, i64* %1333, align 8, !alias.scope !284, !noalias !287
  %1334 = add i64 %1323, %1302
  store i64 %1334, i64* %9, align 8, !alias.scope !287, !noalias !284
  %1335 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1307
  br label %1421

1336:                                             ; preds = %1295
  %1337 = icmp ult i64 %1291, 2114
  br i1 %1337, label %1338, label %1374

1338:                                             ; preds = %1336
  %1339 = add nsw i64 %1291, -66
  %1340 = trunc i64 %1339 to i32
  %1341 = call i32 @llvm.ctlz.i32(i32 %1340, i1 true) #6, !range !7
  %1342 = xor i32 %1341, 31
  %1343 = add nuw nsw i32 %1342, 50
  %1344 = zext i32 %1343 to i64
  %1345 = getelementptr inbounds i8, i8* %5, i64 %1344
  %1346 = load i8, i8* %1345, align 1
  %1347 = zext i8 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %6, i64 %1344
  %1349 = load i16, i16* %1348, align 2
  %1350 = zext i16 %1349 to i64
  %1351 = load i64, i64* %9, align 8, !alias.scope !289, !noalias !292
  %1352 = lshr i64 %1351, 3
  %1353 = getelementptr inbounds i8, i8* %10, i64 %1352
  %1354 = load i8, i8* %1353, align 1, !alias.scope !292, !noalias !289
  %1355 = zext i8 %1354 to i64
  %1356 = and i64 %1351, 7
  %1357 = shl i64 %1350, %1356
  %1358 = or i64 %1357, %1355
  %1359 = bitcast i8* %1353 to i64*
  store i64 %1358, i64* %1359, align 8, !alias.scope !292, !noalias !289
  %1360 = add i64 %1351, %1347
  %1361 = zext i32 %1342 to i64
  %1362 = shl i64 1, %1361
  %1363 = sub i64 %1339, %1362
  %1364 = lshr i64 %1360, 3
  %1365 = getelementptr inbounds i8, i8* %10, i64 %1364
  %1366 = load i8, i8* %1365, align 1, !alias.scope !294, !noalias !297
  %1367 = zext i8 %1366 to i64
  %1368 = and i64 %1360, 7
  %1369 = shl i64 %1363, %1368
  %1370 = or i64 %1369, %1367
  %1371 = bitcast i8* %1365 to i64*
  store i64 %1370, i64* %1371, align 8, !alias.scope !294, !noalias !297
  %1372 = add i64 %1360, %1361
  store i64 %1372, i64* %9, align 8, !alias.scope !297, !noalias !294
  %1373 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1344
  br label %1421

1374:                                             ; preds = %1336
  %1375 = load i8, i8* %113, align 1
  %1376 = zext i8 %1375 to i64
  %1377 = load i16, i16* %114, align 2
  %1378 = zext i16 %1377 to i64
  %1379 = load i64, i64* %9, align 8, !alias.scope !299, !noalias !302
  %1380 = lshr i64 %1379, 3
  %1381 = getelementptr inbounds i8, i8* %10, i64 %1380
  %1382 = load i8, i8* %1381, align 1, !alias.scope !302, !noalias !299
  %1383 = zext i8 %1382 to i64
  %1384 = and i64 %1379, 7
  %1385 = shl i64 %1378, %1384
  %1386 = or i64 %1385, %1383
  %1387 = bitcast i8* %1381 to i64*
  store i64 %1386, i64* %1387, align 8, !alias.scope !302, !noalias !299
  %1388 = add i64 %1379, %1376
  %1389 = add nsw i64 %1291, -2114
  %1390 = lshr i64 %1388, 3
  %1391 = getelementptr inbounds i8, i8* %10, i64 %1390
  %1392 = load i8, i8* %1391, align 1, !alias.scope !304, !noalias !307
  %1393 = zext i8 %1392 to i64
  %1394 = and i64 %1388, 7
  %1395 = shl i64 %1389, %1394
  %1396 = or i64 %1395, %1393
  %1397 = bitcast i8* %1391 to i64*
  store i64 %1396, i64* %1397, align 8, !alias.scope !304, !noalias !307
  %1398 = add i64 %1388, 12
  store i64 %1398, i64* %9, align 8, !alias.scope !307, !noalias !304
  br label %1421

1399:                                             ; preds = %1293
  %1400 = add nuw nsw i64 %1291, 40
  %1401 = getelementptr inbounds i8, i8* %5, i64 %1400
  %1402 = load i8, i8* %1401, align 1
  %1403 = zext i8 %1402 to i64
  %1404 = getelementptr inbounds i16, i16* %6, i64 %1400
  %1405 = load i16, i16* %1404, align 2
  %1406 = zext i16 %1405 to i64
  %1407 = load i64, i64* %9, align 8, !alias.scope !309, !noalias !312
  %1408 = lshr i64 %1407, 3
  %1409 = getelementptr inbounds i8, i8* %10, i64 %1408
  %1410 = load i8, i8* %1409, align 1, !alias.scope !312, !noalias !309
  %1411 = zext i8 %1410 to i64
  %1412 = and i64 %1407, 7
  %1413 = shl i64 %1406, %1412
  %1414 = or i64 %1413, %1411
  %1415 = bitcast i8* %1409 to i64*
  store i64 %1414, i64* %1415, align 8, !alias.scope !312, !noalias !309
  %1416 = add i64 %1407, %1403
  store i64 %1416, i64* %9, align 8, !alias.scope !309, !noalias !312
  %1417 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1400
  %1418 = load i32, i32* %1417, align 4
  %1419 = add i32 %1418, 1
  store i32 %1419, i32* %1417, align 4
  %1420 = icmp eq i64 %1291, 0
  br i1 %1420, label %1695, label %1426

1421:                                             ; preds = %1297, %1338, %1374
  %1422 = phi i32* [ %115, %1374 ], [ %1373, %1338 ], [ %1335, %1297 ]
  %1423 = phi i64 [ %1398, %1374 ], [ %1372, %1338 ], [ %1334, %1297 ]
  %1424 = load i32, i32* %1422, align 4
  %1425 = add i32 %1424, 1
  store i32 %1425, i32* %1422, align 4
  br label %1426

1426:                                             ; preds = %1421, %1399
  %1427 = phi i64 [ %1423, %1421 ], [ %1416, %1399 ]
  %1428 = xor i64 %1290, -1
  %1429 = and i64 %1291, 1
  %1430 = sub i64 0, %1289
  %1431 = icmp eq i64 %1428, %1430
  br i1 %1431, label %1649, label %1432

1432:                                             ; preds = %1426
  %1433 = sub i64 %1291, %1429
  br label %1434

1434:                                             ; preds = %1434, %1432
  %1435 = phi i64 [ %1427, %1432 ], [ %1474, %1434 ]
  %1436 = phi i64 [ 0, %1432 ], [ %1475, %1434 ]
  %1437 = phi i64 [ %1433, %1432 ], [ %1476, %1434 ]
  %1438 = getelementptr inbounds i8, i8* %1190, i64 %1436
  %1439 = load i8, i8* %1438, align 1
  %1440 = zext i8 %1439 to i64
  %1441 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1440
  %1442 = load i8, i8* %1441, align 1
  %1443 = zext i8 %1442 to i64
  %1444 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1440
  %1445 = load i16, i16* %1444, align 2
  %1446 = zext i16 %1445 to i64
  %1447 = lshr i64 %1435, 3
  %1448 = getelementptr inbounds i8, i8* %10, i64 %1447
  %1449 = load i8, i8* %1448, align 1, !alias.scope !314, !noalias !317
  %1450 = zext i8 %1449 to i64
  %1451 = and i64 %1435, 7
  %1452 = shl i64 %1446, %1451
  %1453 = or i64 %1452, %1450
  %1454 = bitcast i8* %1448 to i64*
  store i64 %1453, i64* %1454, align 8, !alias.scope !314, !noalias !317
  %1455 = add i64 %1435, %1443
  store i64 %1455, i64* %9, align 8, !alias.scope !317, !noalias !314
  %1456 = or i64 %1436, 1
  %1457 = getelementptr inbounds i8, i8* %1190, i64 %1456
  %1458 = load i8, i8* %1457, align 1
  %1459 = zext i8 %1458 to i64
  %1460 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1459
  %1461 = load i8, i8* %1460, align 1
  %1462 = zext i8 %1461 to i64
  %1463 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1459
  %1464 = load i16, i16* %1463, align 2
  %1465 = zext i16 %1464 to i64
  %1466 = lshr i64 %1455, 3
  %1467 = getelementptr inbounds i8, i8* %10, i64 %1466
  %1468 = load i8, i8* %1467, align 1, !alias.scope !314, !noalias !317
  %1469 = zext i8 %1468 to i64
  %1470 = and i64 %1455, 7
  %1471 = shl i64 %1465, %1470
  %1472 = or i64 %1471, %1469
  %1473 = bitcast i8* %1467 to i64*
  store i64 %1472, i64* %1473, align 8, !alias.scope !314, !noalias !317
  %1474 = add i64 %1455, %1462
  store i64 %1474, i64* %9, align 8, !alias.scope !317, !noalias !314
  %1475 = add nuw i64 %1436, 2
  %1476 = add i64 %1437, -2
  %1477 = icmp eq i64 %1476, 0
  br i1 %1477, label %1649, label %1434

1478:                                             ; preds = %1288
  %1479 = sub i64 %1290, %130
  %1480 = mul i64 %1479, 50
  %1481 = icmp ugt i64 %1480, %1291
  %1482 = or i1 %131, %1481
  br i1 %1482, label %1541, label %1483

1483:                                             ; preds = %1478
  %1484 = add i64 %125, -3
  %1485 = sub i64 %1289, %130
  %1486 = trunc i64 %1484 to i32
  %1487 = and i32 %1486, 7
  %1488 = shl nsw i32 -1, %1487
  %1489 = lshr i64 %1484, 3
  %1490 = getelementptr inbounds i8, i8* %10, i64 %1489
  %1491 = load i8, i8* %1490, align 1
  %1492 = trunc i32 %1488 to i8
  %1493 = and i8 %1492, 127
  %1494 = xor i8 %1493, 127
  %1495 = and i8 %1491, %1494
  store i8 %1495, i8* %1490, align 1
  store i64 %1484, i64* %9, align 8
  %1496 = load i8, i8* %1490, align 1, !alias.scope !319, !noalias !322
  %1497 = zext i8 %1496 to i64
  %1498 = bitcast i8* %1490 to i64*
  store i64 %1497, i64* %1498, align 8, !alias.scope !319, !noalias !322
  %1499 = add i64 %125, -2
  %1500 = icmp ult i64 %1485, 65537
  %1501 = icmp ult i64 %1485, 1048577
  %1502 = select i1 %1501, i64 5, i64 6
  %1503 = select i1 %1500, i64 4, i64 %1502
  %1504 = add nsw i64 %1503, -4
  %1505 = lshr i64 %1499, 3
  %1506 = getelementptr inbounds i8, i8* %10, i64 %1505
  %1507 = load i8, i8* %1506, align 1, !alias.scope !324, !noalias !327
  %1508 = zext i8 %1507 to i64
  %1509 = and i64 %1499, 7
  %1510 = shl i64 %1504, %1509
  %1511 = or i64 %1510, %1508
  %1512 = bitcast i8* %1506 to i64*
  store i64 %1511, i64* %1512, align 8, !alias.scope !324, !noalias !327
  %1513 = shl nuw nsw i64 %1503, 2
  %1514 = add i64 %1485, -1
  %1515 = lshr i64 %125, 3
  %1516 = getelementptr inbounds i8, i8* %10, i64 %1515
  %1517 = load i8, i8* %1516, align 1, !alias.scope !329, !noalias !332
  %1518 = zext i8 %1517 to i64
  %1519 = and i64 %125, 7
  %1520 = shl i64 %1514, %1519
  %1521 = or i64 %1520, %1518
  %1522 = bitcast i8* %1516 to i64*
  store i64 %1521, i64* %1522, align 8, !alias.scope !329, !noalias !332
  %1523 = add i64 %1513, %125
  %1524 = lshr i64 %1523, 3
  %1525 = getelementptr inbounds i8, i8* %10, i64 %1524
  %1526 = load i8, i8* %1525, align 1, !alias.scope !334, !noalias !337
  %1527 = zext i8 %1526 to i64
  %1528 = and i64 %1523, 7
  %1529 = shl i64 1, %1528
  %1530 = or i64 %1529, %1527
  %1531 = bitcast i8* %1525 to i64*
  store i64 %1530, i64* %1531, align 8, !alias.scope !334, !noalias !337
  %1532 = add i64 %1523, 8
  %1533 = and i64 %1532, 4294967288
  store i64 %1533, i64* %9, align 8
  %1534 = lshr exact i64 %1533, 3
  %1535 = getelementptr inbounds i8, i8* %10, i64 %1534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1535, i8* align 1 %128, i64 %1485, i1 false) #6
  %1536 = shl i64 %1485, 3
  %1537 = load i64, i64* %9, align 8
  %1538 = add i64 %1537, %1536
  store i64 %1538, i64* %9, align 8
  %1539 = lshr i64 %1538, 3
  %1540 = getelementptr inbounds i8, i8* %10, i64 %1539
  store i8 0, i8* %1540, align 1
  br label %1695

1541:                                             ; preds = %1478
  %1542 = icmp ult i64 %1291, 22594
  br i1 %1542, label %1543, label %1570

1543:                                             ; preds = %1541
  %1544 = load i8, i8* %110, align 1
  %1545 = zext i8 %1544 to i64
  %1546 = load i16, i16* %111, align 2
  %1547 = zext i16 %1546 to i64
  %1548 = load i64, i64* %9, align 8, !alias.scope !339, !noalias !342
  %1549 = lshr i64 %1548, 3
  %1550 = getelementptr inbounds i8, i8* %10, i64 %1549
  %1551 = load i8, i8* %1550, align 1, !alias.scope !342, !noalias !339
  %1552 = zext i8 %1551 to i64
  %1553 = and i64 %1548, 7
  %1554 = shl i64 %1547, %1553
  %1555 = or i64 %1554, %1552
  %1556 = bitcast i8* %1550 to i64*
  store i64 %1555, i64* %1556, align 8, !alias.scope !342, !noalias !339
  %1557 = add i64 %1548, %1545
  %1558 = add nsw i64 %1291, -6210
  %1559 = lshr i64 %1557, 3
  %1560 = getelementptr inbounds i8, i8* %10, i64 %1559
  %1561 = load i8, i8* %1560, align 1, !alias.scope !344, !noalias !347
  %1562 = zext i8 %1561 to i64
  %1563 = and i64 %1557, 7
  %1564 = shl i64 %1558, %1563
  %1565 = or i64 %1564, %1562
  %1566 = bitcast i8* %1560 to i64*
  store i64 %1565, i64* %1566, align 8, !alias.scope !344, !noalias !347
  %1567 = add i64 %1557, 14
  store i64 %1567, i64* %9, align 8, !alias.scope !347, !noalias !344
  %1568 = load i32, i32* %112, align 8
  %1569 = add i32 %1568, 1
  store i32 %1569, i32* %112, align 8
  br label %1597

1570:                                             ; preds = %1541
  %1571 = load i8, i8* %107, align 1
  %1572 = zext i8 %1571 to i64
  %1573 = load i16, i16* %108, align 2
  %1574 = zext i16 %1573 to i64
  %1575 = load i64, i64* %9, align 8, !alias.scope !349, !noalias !352
  %1576 = lshr i64 %1575, 3
  %1577 = getelementptr inbounds i8, i8* %10, i64 %1576
  %1578 = load i8, i8* %1577, align 1, !alias.scope !352, !noalias !349
  %1579 = zext i8 %1578 to i64
  %1580 = and i64 %1575, 7
  %1581 = shl i64 %1574, %1580
  %1582 = or i64 %1581, %1579
  %1583 = bitcast i8* %1577 to i64*
  store i64 %1582, i64* %1583, align 8, !alias.scope !352, !noalias !349
  %1584 = add i64 %1575, %1572
  %1585 = add i64 %1291, -22594
  %1586 = lshr i64 %1584, 3
  %1587 = getelementptr inbounds i8, i8* %10, i64 %1586
  %1588 = load i8, i8* %1587, align 1, !alias.scope !354, !noalias !357
  %1589 = zext i8 %1588 to i64
  %1590 = and i64 %1584, 7
  %1591 = shl i64 %1585, %1590
  %1592 = or i64 %1591, %1589
  %1593 = bitcast i8* %1587 to i64*
  store i64 %1592, i64* %1593, align 8, !alias.scope !354, !noalias !357
  %1594 = add i64 %1584, 24
  store i64 %1594, i64* %9, align 8, !alias.scope !357, !noalias !354
  %1595 = load i32, i32* %109, align 4
  %1596 = add i32 %1595, 1
  store i32 %1596, i32* %109, align 4
  br label %1597

1597:                                             ; preds = %1570, %1543
  %1598 = phi i64 [ %1567, %1543 ], [ %1594, %1570 ]
  %1599 = xor i64 %1290, -1
  %1600 = and i64 %1291, 1
  %1601 = sub i64 0, %1289
  %1602 = icmp eq i64 %1599, %1601
  br i1 %1602, label %1672, label %1603

1603:                                             ; preds = %1597
  %1604 = sub i64 %1291, %1600
  br label %1605

1605:                                             ; preds = %1605, %1603
  %1606 = phi i64 [ %1598, %1603 ], [ %1645, %1605 ]
  %1607 = phi i64 [ 0, %1603 ], [ %1646, %1605 ]
  %1608 = phi i64 [ %1604, %1603 ], [ %1647, %1605 ]
  %1609 = getelementptr inbounds i8, i8* %1190, i64 %1607
  %1610 = load i8, i8* %1609, align 1
  %1611 = zext i8 %1610 to i64
  %1612 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1611
  %1613 = load i8, i8* %1612, align 1
  %1614 = zext i8 %1613 to i64
  %1615 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1611
  %1616 = load i16, i16* %1615, align 2
  %1617 = zext i16 %1616 to i64
  %1618 = lshr i64 %1606, 3
  %1619 = getelementptr inbounds i8, i8* %10, i64 %1618
  %1620 = load i8, i8* %1619, align 1, !alias.scope !359, !noalias !362
  %1621 = zext i8 %1620 to i64
  %1622 = and i64 %1606, 7
  %1623 = shl i64 %1617, %1622
  %1624 = or i64 %1623, %1621
  %1625 = bitcast i8* %1619 to i64*
  store i64 %1624, i64* %1625, align 8, !alias.scope !359, !noalias !362
  %1626 = add i64 %1606, %1614
  store i64 %1626, i64* %9, align 8, !alias.scope !362, !noalias !359
  %1627 = or i64 %1607, 1
  %1628 = getelementptr inbounds i8, i8* %1190, i64 %1627
  %1629 = load i8, i8* %1628, align 1
  %1630 = zext i8 %1629 to i64
  %1631 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1630
  %1632 = load i8, i8* %1631, align 1
  %1633 = zext i8 %1632 to i64
  %1634 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1630
  %1635 = load i16, i16* %1634, align 2
  %1636 = zext i16 %1635 to i64
  %1637 = lshr i64 %1626, 3
  %1638 = getelementptr inbounds i8, i8* %10, i64 %1637
  %1639 = load i8, i8* %1638, align 1, !alias.scope !359, !noalias !362
  %1640 = zext i8 %1639 to i64
  %1641 = and i64 %1626, 7
  %1642 = shl i64 %1636, %1641
  %1643 = or i64 %1642, %1640
  %1644 = bitcast i8* %1638 to i64*
  store i64 %1643, i64* %1644, align 8, !alias.scope !359, !noalias !362
  %1645 = add i64 %1626, %1633
  store i64 %1645, i64* %9, align 8, !alias.scope !362, !noalias !359
  %1646 = add nuw i64 %1607, 2
  %1647 = add i64 %1608, -2
  %1648 = icmp eq i64 %1647, 0
  br i1 %1648, label %1672, label %1605

1649:                                             ; preds = %1434, %1426
  %1650 = phi i64 [ %1427, %1426 ], [ %1474, %1434 ]
  %1651 = phi i64 [ 0, %1426 ], [ %1475, %1434 ]
  %1652 = icmp eq i64 %1429, 0
  br i1 %1652, label %1695, label %1653

1653:                                             ; preds = %1649
  %1654 = getelementptr inbounds i8, i8* %1190, i64 %1651
  %1655 = load i8, i8* %1654, align 1
  %1656 = zext i8 %1655 to i64
  %1657 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1656
  %1658 = load i8, i8* %1657, align 1
  %1659 = zext i8 %1658 to i64
  %1660 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1656
  %1661 = load i16, i16* %1660, align 2
  %1662 = zext i16 %1661 to i64
  %1663 = lshr i64 %1650, 3
  %1664 = getelementptr inbounds i8, i8* %10, i64 %1663
  %1665 = load i8, i8* %1664, align 1, !alias.scope !314, !noalias !317
  %1666 = zext i8 %1665 to i64
  %1667 = and i64 %1650, 7
  %1668 = shl i64 %1662, %1667
  %1669 = or i64 %1668, %1666
  %1670 = bitcast i8* %1664 to i64*
  store i64 %1669, i64* %1670, align 8, !alias.scope !314, !noalias !317
  %1671 = add i64 %1650, %1659
  store i64 %1671, i64* %9, align 8, !alias.scope !317, !noalias !314
  br label %1695

1672:                                             ; preds = %1605, %1597
  %1673 = phi i64 [ %1598, %1597 ], [ %1645, %1605 ]
  %1674 = phi i64 [ 0, %1597 ], [ %1646, %1605 ]
  %1675 = icmp eq i64 %1600, 0
  br i1 %1675, label %1695, label %1676

1676:                                             ; preds = %1672
  %1677 = getelementptr inbounds i8, i8* %1190, i64 %1674
  %1678 = load i8, i8* %1677, align 1
  %1679 = zext i8 %1678 to i64
  %1680 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1679
  %1681 = load i8, i8* %1680, align 1
  %1682 = zext i8 %1681 to i64
  %1683 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1679
  %1684 = load i16, i16* %1683, align 2
  %1685 = zext i16 %1684 to i64
  %1686 = lshr i64 %1673, 3
  %1687 = getelementptr inbounds i8, i8* %10, i64 %1686
  %1688 = load i8, i8* %1687, align 1, !alias.scope !359, !noalias !362
  %1689 = zext i8 %1688 to i64
  %1690 = and i64 %1673, 7
  %1691 = shl i64 %1685, %1690
  %1692 = or i64 %1691, %1689
  %1693 = bitcast i8* %1687 to i64*
  store i64 %1692, i64* %1693, align 8, !alias.scope !359, !noalias !362
  %1694 = add i64 %1673, %1682
  store i64 %1694, i64* %9, align 8, !alias.scope !362, !noalias !359
  br label %1695

1695:                                             ; preds = %1676, %1672, %1653, %1649, %1483, %1399, %1286, %385
  %1696 = phi i8* [ %138, %1483 ], [ %138, %1286 ], [ %138, %1399 ], [ %160, %385 ], [ %138, %1649 ], [ %138, %1653 ], [ %138, %1672 ], [ %138, %1676 ]
  %1697 = phi i64 [ %1191, %1483 ], [ %1191, %1286 ], [ %1191, %1399 ], [ %445, %385 ], [ %1191, %1649 ], [ %1191, %1653 ], [ %1191, %1672 ], [ %1191, %1676 ]
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1745, label %1699

1699:                                             ; preds = %1695
  %1700 = icmp ult i64 %1697, 98304
  %1701 = select i1 %1700, i64 %1697, i64 98304
  %1702 = load i64, i64* %9, align 8
  %1703 = add i64 %1702, 3
  %1704 = lshr i64 %1702, 3
  %1705 = getelementptr inbounds i8, i8* %10, i64 %1704
  %1706 = load i8, i8* %1705, align 1, !alias.scope !364, !noalias !367
  %1707 = zext i8 %1706 to i64
  %1708 = bitcast i8* %1705 to i64*
  store i64 %1707, i64* %1708, align 8, !alias.scope !364, !noalias !367
  %1709 = add i64 %1702, 1
  %1710 = icmp ult i64 %1701, 65537
  %1711 = select i1 %1710, i64 4, i64 5
  %1712 = add nsw i64 %1711, -4
  %1713 = lshr i64 %1709, 3
  %1714 = getelementptr inbounds i8, i8* %10, i64 %1713
  %1715 = load i8, i8* %1714, align 1, !alias.scope !369, !noalias !372
  %1716 = zext i8 %1715 to i64
  %1717 = and i64 %1709, 7
  %1718 = shl i64 %1712, %1717
  %1719 = or i64 %1718, %1716
  %1720 = bitcast i8* %1714 to i64*
  store i64 %1719, i64* %1720, align 8, !alias.scope !369, !noalias !372
  %1721 = shl nuw nsw i64 %1711, 2
  %1722 = add nsw i64 %1701, -1
  %1723 = lshr i64 %1703, 3
  %1724 = getelementptr inbounds i8, i8* %10, i64 %1723
  %1725 = load i8, i8* %1724, align 1, !alias.scope !374, !noalias !377
  %1726 = zext i8 %1725 to i64
  %1727 = and i64 %1703, 7
  %1728 = shl i64 %1722, %1727
  %1729 = or i64 %1728, %1726
  %1730 = bitcast i8* %1724 to i64*
  store i64 %1729, i64* %1730, align 8, !alias.scope !374, !noalias !377
  %1731 = add i64 %1703, %1721
  %1732 = lshr i64 %1731, 3
  %1733 = getelementptr inbounds i8, i8* %10, i64 %1732
  %1734 = load i8, i8* %1733, align 1, !alias.scope !379, !noalias !382
  %1735 = zext i8 %1734 to i64
  %1736 = bitcast i8* %1733 to i64*
  store i64 %1735, i64* %1736, align 8, !alias.scope !379, !noalias !382
  %1737 = add i64 %1731, 1
  %1738 = lshr i64 %1737, 3
  %1739 = getelementptr inbounds i8, i8* %10, i64 %1738
  %1740 = load i8, i8* %1739, align 1, !alias.scope !384, !noalias !387
  %1741 = zext i8 %1740 to i64
  %1742 = bitcast i8* %1739 to i64*
  store i64 %1741, i64* %1742, align 8, !alias.scope !384, !noalias !387
  %1743 = add i64 %1731, 14
  store i64 %1743, i64* %9, align 8, !alias.scope !387, !noalias !384
  %1744 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1696, i64 %1701, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %9, i8* %10) #6
  br label %124

1745:                                             ; preds = %1695
  %1746 = icmp eq i32 %3, 0
  br i1 %1746, label %1747, label %1748

1747:                                             ; preds = %1745
  store i8 0, i8* %8, align 1
  store i64 0, i64* %7, align 8
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %7, i8* %8) #6
  br label %1748

1748:                                             ; preds = %1745, %1747
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %16) #6
  ret void

1749:                                             ; preds = %257
  %1750 = getelementptr inbounds i8, i8* %249, i64 1
  %1751 = getelementptr inbounds i8, i8* %221, i64 %258
  %1752 = load i8, i8* %1751, align 1
  %1753 = load i8, i8* %1750, align 1
  %1754 = icmp eq i8 %1752, %1753
  br i1 %1754, label %1755, label %260, !prof !75

1755:                                             ; preds = %1749
  %1756 = add i64 %248, 2
  %1757 = icmp eq i64 %250, 2
  br i1 %1757, label %260, label %1758

1758:                                             ; preds = %1755
  %1759 = getelementptr inbounds i8, i8* %249, i64 2
  %1760 = getelementptr inbounds i8, i8* %221, i64 %1756
  %1761 = load i8, i8* %1760, align 1
  %1762 = load i8, i8* %1759, align 1
  %1763 = icmp eq i8 %1761, %1762
  br i1 %1763, label %1764, label %260, !prof !75

1764:                                             ; preds = %1758
  %1765 = add i64 %248, 3
  %1766 = icmp eq i64 %250, 3
  br i1 %1766, label %260, label %1767

1767:                                             ; preds = %1764
  %1768 = getelementptr inbounds i8, i8* %249, i64 3
  %1769 = getelementptr inbounds i8, i8* %221, i64 %1765
  %1770 = load i8, i8* %1769, align 1
  %1771 = load i8, i8* %1768, align 1
  %1772 = icmp eq i8 %1770, %1771
  br i1 %1772, label %1773, label %260, !prof !75

1773:                                             ; preds = %1767
  %1774 = add i64 %248, 4
  %1775 = icmp eq i64 %250, 4
  br i1 %1775, label %260, label %1776

1776:                                             ; preds = %1773
  %1777 = getelementptr inbounds i8, i8* %249, i64 4
  %1778 = getelementptr inbounds i8, i8* %221, i64 %1774
  %1779 = load i8, i8* %1778, align 1
  %1780 = load i8, i8* %1777, align 1
  %1781 = icmp eq i8 %1779, %1780
  br i1 %1781, label %1782, label %260, !prof !75

1782:                                             ; preds = %1776
  %1783 = add i64 %248, 5
  %1784 = icmp eq i64 %250, 5
  br i1 %1784, label %260, label %1785

1785:                                             ; preds = %1782
  %1786 = getelementptr inbounds i8, i8* %249, i64 5
  %1787 = getelementptr inbounds i8, i8* %221, i64 %1783
  %1788 = load i8, i8* %1787, align 1
  %1789 = load i8, i8* %1786, align 1
  %1790 = icmp eq i8 %1788, %1789
  br i1 %1790, label %1791, label %260, !prof !75

1791:                                             ; preds = %1785
  %1792 = add i64 %248, 6
  %1793 = icmp eq i64 %250, 6
  br i1 %1793, label %260, label %1794

1794:                                             ; preds = %1791
  %1795 = getelementptr inbounds i8, i8* %249, i64 6
  %1796 = getelementptr inbounds i8, i8* %221, i64 %1792
  %1797 = load i8, i8* %1796, align 1
  %1798 = load i8, i8* %1795, align 1
  %1799 = icmp eq i8 %1797, %1798
  %1800 = add i64 %248, 7
  %1801 = select i1 %1799, i64 %1800, i64 %1792, !prof !75
  br label %260

1802:                                             ; preds = %962
  %1803 = getelementptr inbounds i8, i8* %954, i64 1
  %1804 = getelementptr inbounds i8, i8* %925, i64 %963
  %1805 = load i8, i8* %1804, align 1
  %1806 = load i8, i8* %1803, align 1
  %1807 = icmp eq i8 %1805, %1806
  br i1 %1807, label %1808, label %965, !prof !75

1808:                                             ; preds = %1802
  %1809 = add i64 %953, 2
  %1810 = icmp eq i64 %955, 2
  br i1 %1810, label %965, label %1811

1811:                                             ; preds = %1808
  %1812 = getelementptr inbounds i8, i8* %954, i64 2
  %1813 = getelementptr inbounds i8, i8* %925, i64 %1809
  %1814 = load i8, i8* %1813, align 1
  %1815 = load i8, i8* %1812, align 1
  %1816 = icmp eq i8 %1814, %1815
  br i1 %1816, label %1817, label %965, !prof !75

1817:                                             ; preds = %1811
  %1818 = add i64 %953, 3
  %1819 = icmp eq i64 %955, 3
  br i1 %1819, label %965, label %1820

1820:                                             ; preds = %1817
  %1821 = getelementptr inbounds i8, i8* %954, i64 3
  %1822 = getelementptr inbounds i8, i8* %925, i64 %1818
  %1823 = load i8, i8* %1822, align 1
  %1824 = load i8, i8* %1821, align 1
  %1825 = icmp eq i8 %1823, %1824
  br i1 %1825, label %1826, label %965, !prof !75

1826:                                             ; preds = %1820
  %1827 = add i64 %953, 4
  %1828 = icmp eq i64 %955, 4
  br i1 %1828, label %965, label %1829

1829:                                             ; preds = %1826
  %1830 = getelementptr inbounds i8, i8* %954, i64 4
  %1831 = getelementptr inbounds i8, i8* %925, i64 %1827
  %1832 = load i8, i8* %1831, align 1
  %1833 = load i8, i8* %1830, align 1
  %1834 = icmp eq i8 %1832, %1833
  br i1 %1834, label %1835, label %965, !prof !75

1835:                                             ; preds = %1829
  %1836 = add i64 %953, 5
  %1837 = icmp eq i64 %955, 5
  br i1 %1837, label %965, label %1838

1838:                                             ; preds = %1835
  %1839 = getelementptr inbounds i8, i8* %954, i64 5
  %1840 = getelementptr inbounds i8, i8* %925, i64 %1836
  %1841 = load i8, i8* %1840, align 1
  %1842 = load i8, i8* %1839, align 1
  %1843 = icmp eq i8 %1841, %1842
  br i1 %1843, label %1844, label %965, !prof !75

1844:                                             ; preds = %1838
  %1845 = add i64 %953, 6
  %1846 = icmp eq i64 %955, 6
  br i1 %1846, label %965, label %1847

1847:                                             ; preds = %1844
  %1848 = getelementptr inbounds i8, i8* %954, i64 6
  %1849 = getelementptr inbounds i8, i8* %925, i64 %1845
  %1850 = load i8, i8* %1849, align 1
  %1851 = load i8, i8* %1848, align 1
  %1852 = icmp eq i8 %1850, %1851
  %1853 = add i64 %953, 7
  %1854 = select i1 %1852, i64 %1853, i64 %1845, !prof !75
  br label %965
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentFastImpl11(%struct.MemoryManager*, i8*, i64, i32, i32* nocapture, i8*, i16*, i64*, i8*, i64*, i8*) unnamed_addr #2 {
  %12 = alloca [256 x i64], align 16
  %13 = alloca [128 x i32], align 16
  %14 = alloca [256 x i8], align 16
  %15 = alloca [256 x i16], align 16
  %16 = bitcast [128 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 512, i1 false) #6
  %17 = icmp ult i64 %2, 98304
  %18 = select i1 %17, i64 %2, i64 98304
  %19 = load i64, i64* %9, align 8
  %20 = add i64 %19, 3
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 256, i1 false) #6
  %22 = bitcast [256 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 512, i1 false) #6
  %23 = lshr i64 %19, 3
  %24 = getelementptr inbounds i8, i8* %10, i64 %23
  %25 = load i8, i8* %24, align 1, !alias.scope !389, !noalias !392
  %26 = zext i8 %25 to i64
  %27 = bitcast i8* %24 to i64*
  store i64 %26, i64* %27, align 8, !alias.scope !389, !noalias !392
  %28 = add i64 %19, 1
  %29 = icmp ult i64 %18, 65537
  %30 = select i1 %29, i64 4, i64 5
  %31 = add nsw i64 %30, -4
  %32 = lshr i64 %28, 3
  %33 = getelementptr inbounds i8, i8* %10, i64 %32
  %34 = load i8, i8* %33, align 1, !alias.scope !394, !noalias !397
  %35 = zext i8 %34 to i64
  %36 = and i64 %28, 7
  %37 = shl i64 %31, %36
  %38 = or i64 %37, %35
  %39 = bitcast i8* %33 to i64*
  store i64 %38, i64* %39, align 8, !alias.scope !394, !noalias !397
  %40 = shl nuw nsw i64 %30, 2
  %41 = add nsw i64 %18, -1
  %42 = lshr i64 %20, 3
  %43 = getelementptr inbounds i8, i8* %10, i64 %42
  %44 = load i8, i8* %43, align 1, !alias.scope !399, !noalias !402
  %45 = zext i8 %44 to i64
  %46 = and i64 %20, 7
  %47 = shl i64 %41, %46
  %48 = or i64 %47, %45
  %49 = bitcast i8* %43 to i64*
  store i64 %48, i64* %49, align 8, !alias.scope !399, !noalias !402
  %50 = add i64 %20, %40
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds i8, i8* %10, i64 %51
  %53 = load i8, i8* %52, align 1, !alias.scope !404, !noalias !407
  %54 = zext i8 %53 to i64
  %55 = bitcast i8* %52 to i64*
  store i64 %54, i64* %55, align 8, !alias.scope !404, !noalias !407
  %56 = add i64 %50, 1
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds i8, i8* %10, i64 %57
  %59 = load i8, i8* %58, align 1, !alias.scope !409, !noalias !412
  %60 = zext i8 %59 to i64
  %61 = bitcast i8* %58 to i64*
  store i64 %60, i64* %61, align 8, !alias.scope !409, !noalias !412
  %62 = add i64 %50, 14
  store i64 %62, i64* %9, align 8, !alias.scope !412, !noalias !409
  %63 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 0
  %64 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1, i64 %18, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  %65 = load i64, i64* %7, align 8
  %66 = icmp ugt i64 %65, 7
  %67 = load i64, i64* %9, align 8
  br i1 %66, label %68, label %89

68:                                               ; preds = %11
  %69 = and i64 %67, 7
  br label %70

70:                                               ; preds = %68, %70
  %71 = phi i64 [ %84, %70 ], [ %67, %68 ]
  %72 = phi i64 [ %85, %70 ], [ 0, %68 ]
  %73 = lshr exact i64 %72, 3
  %74 = getelementptr inbounds i8, i8* %8, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = lshr i64 %71, 3
  %78 = getelementptr inbounds i8, i8* %10, i64 %77
  %79 = load i8, i8* %78, align 1, !alias.scope !414, !noalias !417
  %80 = zext i8 %79 to i64
  %81 = shl i64 %76, %69
  %82 = or i64 %81, %80
  %83 = bitcast i8* %78 to i64*
  store i64 %82, i64* %83, align 8, !alias.scope !414, !noalias !417
  %84 = add i64 %71, 8
  store i64 %84, i64* %9, align 8, !alias.scope !417, !noalias !414
  %85 = add i64 %72, 8
  %86 = or i64 %85, 7
  %87 = load i64, i64* %7, align 8
  %88 = icmp ult i64 %86, %87
  br i1 %88, label %70, label %89

89:                                               ; preds = %70, %11
  %90 = phi i64 [ %67, %11 ], [ %84, %70 ]
  %91 = phi i64 [ %65, %11 ], [ %87, %70 ]
  %92 = and i64 %91, 7
  %93 = lshr i64 %91, 3
  %94 = getelementptr inbounds i8, i8* %8, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = lshr i64 %90, 3
  %98 = getelementptr inbounds i8, i8* %10, i64 %97
  %99 = load i8, i8* %98, align 1, !alias.scope !419, !noalias !422
  %100 = zext i8 %99 to i64
  %101 = and i64 %90, 7
  %102 = shl i64 %96, %101
  %103 = or i64 %102, %100
  %104 = bitcast i8* %98 to i64*
  store i64 %103, i64* %104, align 8, !alias.scope !419, !noalias !422
  %105 = add i64 %92, %90
  store i64 %105, i64* %9, align 8, !alias.scope !422, !noalias !419
  %106 = ptrtoint i8* %1 to i64
  %107 = getelementptr inbounds i8, i8* %5, i64 63
  %108 = getelementptr inbounds i16, i16* %6, i64 63
  %109 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 63
  %110 = getelementptr inbounds i8, i8* %5, i64 62
  %111 = getelementptr inbounds i16, i16* %6, i64 62
  %112 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 62
  %113 = getelementptr inbounds i8, i8* %5, i64 61
  %114 = getelementptr inbounds i16, i16* %6, i64 61
  %115 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 61
  %116 = getelementptr inbounds i8, i8* %5, i64 64
  %117 = getelementptr inbounds i16, i16* %6, i64 64
  %118 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 64
  %119 = getelementptr inbounds i8, i8* %5, i64 39
  %120 = getelementptr inbounds i16, i16* %6, i64 39
  %121 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 39
  %122 = bitcast [256 x i64]* %12 to i8*
  %123 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 0
  br label %124

124:                                              ; preds = %1699, %89
  %125 = phi i64 [ %1703, %1699 ], [ %20, %89 ]
  %126 = phi i64 [ %1744, %1699 ], [ %64, %89 ]
  %127 = phi i64 [ %1701, %1699 ], [ %18, %89 ]
  %128 = phi i8* [ %1696, %1699 ], [ %1, %89 ]
  %129 = phi i64 [ %1697, %1699 ], [ %2, %89 ]
  %130 = ptrtoint i8* %128 to i64
  %131 = icmp ult i64 %126, 981
  br label %132

132:                                              ; preds = %1255, %124
  %133 = phi i64 [ %127, %124 ], [ %1196, %1255 ]
  %134 = phi i64 [ %127, %124 ], [ %1193, %1255 ]
  %135 = phi i8* [ %128, %124 ], [ %1190, %1255 ]
  %136 = phi i64 [ %129, %124 ], [ %1191, %1255 ]
  %137 = phi i8* [ %128, %124 ], [ %138, %1255 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %16, i8* align 16 bitcast ([128 x i32]* @kCmdHistoSeed to i8*), i64 512, i1 false) #6
  %138 = getelementptr inbounds i8, i8* %137, i64 %134
  %139 = icmp ugt i64 %134, 15
  br i1 %139, label %140, label %1189, !prof !75

140:                                              ; preds = %132
  %141 = add nsw i64 %134, -5
  %142 = add i64 %136, -16
  %143 = icmp ult i64 %141, %142
  %144 = select i1 %143, i64 %141, i64 %142
  %145 = getelementptr inbounds i8, i8* %137, i64 %144
  %146 = ptrtoint i8* %138 to i64
  br label %147

147:                                              ; preds = %1184, %140
  %148 = phi i8* [ %137, %140 ], [ %1185, %1184 ]
  %149 = phi i32 [ -1, %140 ], [ %1186, %1184 ]
  %150 = phi i8* [ %135, %140 ], [ %1185, %1184 ]
  %151 = getelementptr inbounds i8, i8* %148, i64 1
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = sext i32 %149 to i64
  %155 = sub nsw i64 0, %154
  %156 = icmp sgt i32 %149, 0
  br label %157

157:                                              ; preds = %211, %147
  %158 = phi i64 [ %153, %147 ], [ %170, %211 ]
  %159 = phi i32 [ 32, %147 ], [ %163, %211 ]
  %160 = phi i8* [ %151, %147 ], [ %166, %211 ]
  %161 = mul i64 %158, 8503243848024064
  %162 = lshr i64 %161, 53
  %163 = add i32 %159, 1
  %164 = lshr i32 %159, 5
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %160, i64 %165
  %167 = icmp ugt i8* %166, %145
  br i1 %167, label %1189, label %168, !prof !76

168:                                              ; preds = %157
  %169 = bitcast i8* %166 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds i8, i8* %160, i64 %155
  %172 = bitcast i8* %160 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = bitcast i8* %171 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %173, %175
  br i1 %176, label %177, label %189

177:                                              ; preds = %168
  %178 = getelementptr inbounds i8, i8* %160, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds i8, i8* %171, i64 4
  %181 = load i8, i8* %180, align 1
  %182 = icmp eq i8 %179, %181
  %183 = and i1 %156, %182
  br i1 %183, label %184, label %189, !prof !77

184:                                              ; preds = %177
  %185 = ptrtoint i8* %160 to i64
  %186 = sub i64 %185, %106
  %187 = trunc i64 %186 to i32
  %188 = getelementptr inbounds i32, i32* %4, i64 %162
  store i32 %187, i32* %188, align 4
  br label %214

189:                                              ; preds = %177, %168
  %190 = getelementptr inbounds i32, i32* %4, i64 %162
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i8, i8* %1, i64 %192
  %194 = ptrtoint i8* %160 to i64
  %195 = sub i64 %194, %106
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %190, align 4
  %197 = load i32, i32* %172, align 4
  %198 = bitcast i8* %193 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %201, label %208

201:                                              ; preds = %189
  %202 = getelementptr inbounds i8, i8* %160, i64 4
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds i8, i8* %193, i64 4
  %205 = load i8, i8* %204, align 1
  %206 = icmp eq i8 %203, %205
  %207 = zext i1 %206 to i32
  br label %208

208:                                              ; preds = %201, %189
  %209 = phi i32 [ 0, %189 ], [ %207, %201 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212, !prof !75

211:                                              ; preds = %208, %214
  br label %157

212:                                              ; preds = %208
  %213 = ptrtoint i8* %160 to i64
  br label %214

214:                                              ; preds = %212, %184
  %215 = phi i64 [ %185, %184 ], [ %213, %212 ]
  %216 = phi i8* [ %171, %184 ], [ %193, %212 ]
  %217 = ptrtoint i8* %216 to i64
  %218 = sub i64 %215, %217
  %219 = icmp sgt i64 %218, 262128
  br i1 %219, label %211, label %220

220:                                              ; preds = %214
  %221 = getelementptr inbounds i8, i8* %216, i64 5
  %222 = getelementptr inbounds i8, i8* %160, i64 5
  %223 = sub i64 %146, %215
  %224 = add i64 %223, -5
  %225 = lshr i64 %224, 3
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %247, label %227, !prof !76

227:                                              ; preds = %220, %237
  %228 = phi i64 [ %240, %237 ], [ %225, %220 ]
  %229 = phi i8* [ %238, %237 ], [ %222, %220 ]
  %230 = phi i64 [ %239, %237 ], [ 0, %220 ]
  %231 = bitcast i8* %229 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds i8, i8* %221, i64 %230
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = icmp eq i64 %232, %235
  br i1 %236, label %237, label %242, !prof !76

237:                                              ; preds = %227
  %238 = getelementptr inbounds i8, i8* %229, i64 8
  %239 = add nuw i64 %230, 8
  %240 = add nsw i64 %228, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %247, label %227, !prof !76

242:                                              ; preds = %227
  %243 = xor i64 %235, %232
  %244 = call i64 @llvm.cttz.i64(i64 %243, i1 true) #6, !range !78
  %245 = lshr i64 %244, 3
  %246 = or i64 %245, %230
  br label %260

247:                                              ; preds = %237, %220
  %248 = phi i64 [ 0, %220 ], [ %239, %237 ]
  %249 = phi i8* [ %222, %220 ], [ %238, %237 ]
  %250 = and i64 %224, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds i8, i8* %221, i64 %248
  %254 = load i8, i8* %253, align 1
  %255 = load i8, i8* %249, align 1
  %256 = icmp eq i8 %254, %255
  br i1 %256, label %257, label %260, !prof !75

257:                                              ; preds = %252
  %258 = add i64 %248, 1
  %259 = icmp eq i64 %250, 1
  br i1 %259, label %260, label %1749

260:                                              ; preds = %1794, %257, %252, %1749, %1755, %1758, %1764, %1767, %1773, %1776, %1782, %1785, %1791, %247, %242
  %261 = phi i64 [ %246, %242 ], [ %248, %247 ], [ %248, %252 ], [ %258, %257 ], [ %258, %1749 ], [ %1756, %1755 ], [ %1756, %1758 ], [ %1765, %1764 ], [ %1765, %1767 ], [ %1774, %1773 ], [ %1774, %1776 ], [ %1783, %1782 ], [ %1783, %1785 ], [ %1792, %1791 ], [ %1801, %1794 ]
  %262 = add i64 %261, 5
  %263 = trunc i64 %218 to i32
  %264 = ptrtoint i8* %150 to i64
  %265 = sub i64 %215, %264
  %266 = getelementptr inbounds i8, i8* %160, i64 %262
  %267 = icmp ult i64 %265, 6210
  br i1 %267, label %268, label %380, !prof !75

268:                                              ; preds = %260
  %269 = icmp ult i64 %265, 6
  br i1 %269, label %502, label %270

270:                                              ; preds = %268
  %271 = icmp ult i64 %265, 130
  br i1 %271, label %272, label %313

272:                                              ; preds = %270
  %273 = add nsw i64 %265, -2
  %274 = trunc i64 %273 to i32
  %275 = call i32 @llvm.ctlz.i32(i32 %274, i1 true) #6, !range !7
  %276 = sub nsw i32 30, %275
  %277 = zext i32 %276 to i64
  %278 = lshr i64 %273, %277
  %279 = shl nsw i32 %276, 1
  %280 = zext i32 %279 to i64
  %281 = add nuw nsw i64 %280, 42
  %282 = add nuw nsw i64 %281, %278
  %283 = getelementptr inbounds i8, i8* %5, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = getelementptr inbounds i16, i16* %6, i64 %282
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i64
  %289 = load i64, i64* %9, align 8, !alias.scope !424, !noalias !427
  %290 = lshr i64 %289, 3
  %291 = getelementptr inbounds i8, i8* %10, i64 %290
  %292 = load i8, i8* %291, align 1, !alias.scope !427, !noalias !424
  %293 = zext i8 %292 to i64
  %294 = and i64 %289, 7
  %295 = shl i64 %288, %294
  %296 = or i64 %295, %293
  %297 = bitcast i8* %291 to i64*
  store i64 %296, i64* %297, align 8, !alias.scope !427, !noalias !424
  %298 = add i64 %289, %285
  %299 = shl i64 %278, %277
  %300 = sub i64 %273, %299
  %301 = lshr i64 %298, 3
  %302 = getelementptr inbounds i8, i8* %10, i64 %301
  %303 = load i8, i8* %302, align 1, !alias.scope !429, !noalias !432
  %304 = zext i8 %303 to i64
  %305 = and i64 %298, 7
  %306 = shl i64 %300, %305
  %307 = or i64 %306, %304
  %308 = bitcast i8* %302 to i64*
  store i64 %307, i64* %308, align 8, !alias.scope !429, !noalias !432
  %309 = add i64 %298, %277
  store i64 %309, i64* %9, align 8, !alias.scope !432, !noalias !429
  %310 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %282
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, 1
  store i32 %312, i32* %310, align 4
  br label %524

313:                                              ; preds = %270
  %314 = icmp ult i64 %265, 2114
  br i1 %314, label %315, label %353

315:                                              ; preds = %313
  %316 = add nsw i64 %265, -66
  %317 = trunc i64 %316 to i32
  %318 = call i32 @llvm.ctlz.i32(i32 %317, i1 true) #6, !range !7
  %319 = xor i32 %318, 31
  %320 = add nuw nsw i32 %319, 50
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %5, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds i16, i16* %6, i64 %321
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i64
  %328 = load i64, i64* %9, align 8, !alias.scope !434, !noalias !437
  %329 = lshr i64 %328, 3
  %330 = getelementptr inbounds i8, i8* %10, i64 %329
  %331 = load i8, i8* %330, align 1, !alias.scope !437, !noalias !434
  %332 = zext i8 %331 to i64
  %333 = and i64 %328, 7
  %334 = shl i64 %327, %333
  %335 = or i64 %334, %332
  %336 = bitcast i8* %330 to i64*
  store i64 %335, i64* %336, align 8, !alias.scope !437, !noalias !434
  %337 = add i64 %328, %324
  %338 = zext i32 %319 to i64
  %339 = shl i64 1, %338
  %340 = sub i64 %316, %339
  %341 = lshr i64 %337, 3
  %342 = getelementptr inbounds i8, i8* %10, i64 %341
  %343 = load i8, i8* %342, align 1, !alias.scope !439, !noalias !442
  %344 = zext i8 %343 to i64
  %345 = and i64 %337, 7
  %346 = shl i64 %340, %345
  %347 = or i64 %346, %344
  %348 = bitcast i8* %342 to i64*
  store i64 %347, i64* %348, align 8, !alias.scope !439, !noalias !442
  %349 = add i64 %337, %338
  store i64 %349, i64* %9, align 8, !alias.scope !442, !noalias !439
  %350 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %321
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %351, 1
  store i32 %352, i32* %350, align 4
  br label %524

353:                                              ; preds = %313
  %354 = load i8, i8* %113, align 1
  %355 = zext i8 %354 to i64
  %356 = load i16, i16* %114, align 2
  %357 = zext i16 %356 to i64
  %358 = load i64, i64* %9, align 8, !alias.scope !444, !noalias !447
  %359 = lshr i64 %358, 3
  %360 = getelementptr inbounds i8, i8* %10, i64 %359
  %361 = load i8, i8* %360, align 1, !alias.scope !447, !noalias !444
  %362 = zext i8 %361 to i64
  %363 = and i64 %358, 7
  %364 = shl i64 %357, %363
  %365 = or i64 %364, %362
  %366 = bitcast i8* %360 to i64*
  store i64 %365, i64* %366, align 8, !alias.scope !447, !noalias !444
  %367 = add i64 %358, %355
  %368 = add nsw i64 %265, -2114
  %369 = lshr i64 %367, 3
  %370 = getelementptr inbounds i8, i8* %10, i64 %369
  %371 = load i8, i8* %370, align 1, !alias.scope !449, !noalias !452
  %372 = zext i8 %371 to i64
  %373 = and i64 %367, 7
  %374 = shl i64 %368, %373
  %375 = or i64 %374, %372
  %376 = bitcast i8* %370 to i64*
  store i64 %375, i64* %376, align 8, !alias.scope !449, !noalias !452
  %377 = add i64 %367, 12
  store i64 %377, i64* %9, align 8, !alias.scope !452, !noalias !449
  %378 = load i32, i32* %115, align 4
  %379 = add i32 %378, 1
  store i32 %379, i32* %115, align 4
  br label %524

380:                                              ; preds = %260
  %381 = sub i64 %264, %130
  %382 = mul i64 %381, 50
  %383 = icmp ugt i64 %382, %265
  %384 = or i1 %131, %383
  br i1 %384, label %446, label %385

385:                                              ; preds = %380
  %386 = add i64 %125, -3
  %387 = sub i64 %215, %130
  %388 = trunc i64 %386 to i32
  %389 = and i32 %388, 7
  %390 = shl nsw i32 -1, %389
  %391 = lshr i64 %386, 3
  %392 = getelementptr inbounds i8, i8* %10, i64 %391
  %393 = load i8, i8* %392, align 1
  %394 = trunc i32 %390 to i8
  %395 = and i8 %394, 127
  %396 = xor i8 %395, 127
  %397 = and i8 %393, %396
  store i8 %397, i8* %392, align 1
  store i64 %386, i64* %9, align 8
  %398 = load i8, i8* %392, align 1, !alias.scope !454, !noalias !457
  %399 = zext i8 %398 to i64
  %400 = bitcast i8* %392 to i64*
  store i64 %399, i64* %400, align 8, !alias.scope !454, !noalias !457
  %401 = add i64 %125, -2
  %402 = icmp ult i64 %387, 65537
  %403 = icmp ult i64 %387, 1048577
  %404 = select i1 %403, i64 5, i64 6
  %405 = select i1 %402, i64 4, i64 %404
  %406 = add nsw i64 %405, -4
  %407 = lshr i64 %401, 3
  %408 = getelementptr inbounds i8, i8* %10, i64 %407
  %409 = load i8, i8* %408, align 1, !alias.scope !459, !noalias !462
  %410 = zext i8 %409 to i64
  %411 = and i64 %401, 7
  %412 = shl i64 %406, %411
  %413 = or i64 %412, %410
  %414 = bitcast i8* %408 to i64*
  store i64 %413, i64* %414, align 8, !alias.scope !459, !noalias !462
  %415 = shl nuw nsw i64 %405, 2
  %416 = add i64 %387, -1
  %417 = lshr i64 %125, 3
  %418 = getelementptr inbounds i8, i8* %10, i64 %417
  %419 = load i8, i8* %418, align 1, !alias.scope !464, !noalias !467
  %420 = zext i8 %419 to i64
  %421 = and i64 %125, 7
  %422 = shl i64 %416, %421
  %423 = or i64 %422, %420
  %424 = bitcast i8* %418 to i64*
  store i64 %423, i64* %424, align 8, !alias.scope !464, !noalias !467
  %425 = add i64 %415, %125
  %426 = lshr i64 %425, 3
  %427 = getelementptr inbounds i8, i8* %10, i64 %426
  %428 = load i8, i8* %427, align 1, !alias.scope !469, !noalias !472
  %429 = zext i8 %428 to i64
  %430 = and i64 %425, 7
  %431 = shl i64 1, %430
  %432 = or i64 %431, %429
  %433 = bitcast i8* %427 to i64*
  store i64 %432, i64* %433, align 8, !alias.scope !469, !noalias !472
  %434 = add i64 %425, 8
  %435 = and i64 %434, 4294967288
  store i64 %435, i64* %9, align 8
  %436 = lshr exact i64 %435, 3
  %437 = getelementptr inbounds i8, i8* %10, i64 %436
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %437, i8* align 1 %128, i64 %387, i1 false) #6
  %438 = shl i64 %387, 3
  %439 = load i64, i64* %9, align 8
  %440 = add i64 %439, %438
  store i64 %440, i64* %9, align 8
  %441 = lshr i64 %440, 3
  %442 = getelementptr inbounds i8, i8* %10, i64 %441
  store i8 0, i8* %442, align 1
  %443 = ptrtoint i8* %137 to i64
  %444 = add i64 %136, %443
  %445 = sub i64 %444, %215
  br label %1695

446:                                              ; preds = %380
  %447 = icmp ult i64 %265, 22594
  br i1 %447, label %448, label %475

448:                                              ; preds = %446
  %449 = load i8, i8* %110, align 1
  %450 = zext i8 %449 to i64
  %451 = load i16, i16* %111, align 2
  %452 = zext i16 %451 to i64
  %453 = load i64, i64* %9, align 8, !alias.scope !474, !noalias !477
  %454 = lshr i64 %453, 3
  %455 = getelementptr inbounds i8, i8* %10, i64 %454
  %456 = load i8, i8* %455, align 1, !alias.scope !477, !noalias !474
  %457 = zext i8 %456 to i64
  %458 = and i64 %453, 7
  %459 = shl i64 %452, %458
  %460 = or i64 %459, %457
  %461 = bitcast i8* %455 to i64*
  store i64 %460, i64* %461, align 8, !alias.scope !477, !noalias !474
  %462 = add i64 %453, %450
  %463 = add nsw i64 %265, -6210
  %464 = lshr i64 %462, 3
  %465 = getelementptr inbounds i8, i8* %10, i64 %464
  %466 = load i8, i8* %465, align 1, !alias.scope !479, !noalias !482
  %467 = zext i8 %466 to i64
  %468 = and i64 %462, 7
  %469 = shl i64 %463, %468
  %470 = or i64 %469, %467
  %471 = bitcast i8* %465 to i64*
  store i64 %470, i64* %471, align 8, !alias.scope !479, !noalias !482
  %472 = add i64 %462, 14
  store i64 %472, i64* %9, align 8, !alias.scope !482, !noalias !479
  %473 = load i32, i32* %112, align 8
  %474 = add i32 %473, 1
  store i32 %474, i32* %112, align 8
  br label %524

475:                                              ; preds = %446
  %476 = load i8, i8* %107, align 1
  %477 = zext i8 %476 to i64
  %478 = load i16, i16* %108, align 2
  %479 = zext i16 %478 to i64
  %480 = load i64, i64* %9, align 8, !alias.scope !484, !noalias !487
  %481 = lshr i64 %480, 3
  %482 = getelementptr inbounds i8, i8* %10, i64 %481
  %483 = load i8, i8* %482, align 1, !alias.scope !487, !noalias !484
  %484 = zext i8 %483 to i64
  %485 = and i64 %480, 7
  %486 = shl i64 %479, %485
  %487 = or i64 %486, %484
  %488 = bitcast i8* %482 to i64*
  store i64 %487, i64* %488, align 8, !alias.scope !487, !noalias !484
  %489 = add i64 %480, %477
  %490 = add i64 %265, -22594
  %491 = lshr i64 %489, 3
  %492 = getelementptr inbounds i8, i8* %10, i64 %491
  %493 = load i8, i8* %492, align 1, !alias.scope !489, !noalias !492
  %494 = zext i8 %493 to i64
  %495 = and i64 %489, 7
  %496 = shl i64 %490, %495
  %497 = or i64 %496, %494
  %498 = bitcast i8* %492 to i64*
  store i64 %497, i64* %498, align 8, !alias.scope !489, !noalias !492
  %499 = add i64 %489, 24
  store i64 %499, i64* %9, align 8, !alias.scope !492, !noalias !489
  %500 = load i32, i32* %109, align 4
  %501 = add i32 %500, 1
  store i32 %501, i32* %109, align 4
  br label %524

502:                                              ; preds = %268
  %503 = add nuw nsw i64 %265, 40
  %504 = getelementptr inbounds i8, i8* %5, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = zext i8 %505 to i64
  %507 = getelementptr inbounds i16, i16* %6, i64 %503
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i64
  %510 = load i64, i64* %9, align 8, !alias.scope !494, !noalias !497
  %511 = lshr i64 %510, 3
  %512 = getelementptr inbounds i8, i8* %10, i64 %511
  %513 = load i8, i8* %512, align 1, !alias.scope !497, !noalias !494
  %514 = zext i8 %513 to i64
  %515 = and i64 %510, 7
  %516 = shl i64 %509, %515
  %517 = or i64 %516, %514
  %518 = bitcast i8* %512 to i64*
  store i64 %517, i64* %518, align 8, !alias.scope !497, !noalias !494
  %519 = add i64 %510, %506
  store i64 %519, i64* %9, align 8, !alias.scope !494, !noalias !497
  %520 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %503
  %521 = load i32, i32* %520, align 4
  %522 = add i32 %521, 1
  store i32 %522, i32* %520, align 4
  %523 = icmp eq i64 %265, 0
  br i1 %523, label %599, label %524

524:                                              ; preds = %502, %475, %448, %353, %315, %272
  %525 = phi i64 [ %519, %502 ], [ %499, %475 ], [ %472, %448 ], [ %377, %353 ], [ %349, %315 ], [ %309, %272 ]
  %526 = and i64 %265, 1
  %527 = add i64 %264, 1
  %528 = icmp eq i64 %215, %527
  br i1 %528, label %575, label %529

529:                                              ; preds = %524
  %530 = sub i64 %265, %526
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ %525, %529 ], [ %571, %531 ]
  %533 = phi i64 [ 0, %529 ], [ %572, %531 ]
  %534 = phi i64 [ %530, %529 ], [ %573, %531 ]
  %535 = getelementptr inbounds i8, i8* %150, i64 %533
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i64
  %538 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i64
  %541 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %537
  %542 = load i16, i16* %541, align 2
  %543 = zext i16 %542 to i64
  %544 = lshr i64 %532, 3
  %545 = getelementptr inbounds i8, i8* %10, i64 %544
  %546 = load i8, i8* %545, align 1, !alias.scope !499, !noalias !502
  %547 = zext i8 %546 to i64
  %548 = and i64 %532, 7
  %549 = shl i64 %543, %548
  %550 = or i64 %549, %547
  %551 = bitcast i8* %545 to i64*
  store i64 %550, i64* %551, align 8, !alias.scope !499, !noalias !502
  %552 = add i64 %532, %540
  store i64 %552, i64* %9, align 8, !alias.scope !502, !noalias !499
  %553 = or i64 %533, 1
  %554 = getelementptr inbounds i8, i8* %150, i64 %553
  %555 = load i8, i8* %554, align 1
  %556 = zext i8 %555 to i64
  %557 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %556
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i64
  %560 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %556
  %561 = load i16, i16* %560, align 2
  %562 = zext i16 %561 to i64
  %563 = lshr i64 %552, 3
  %564 = getelementptr inbounds i8, i8* %10, i64 %563
  %565 = load i8, i8* %564, align 1, !alias.scope !499, !noalias !502
  %566 = zext i8 %565 to i64
  %567 = and i64 %552, 7
  %568 = shl i64 %562, %567
  %569 = or i64 %568, %566
  %570 = bitcast i8* %564 to i64*
  store i64 %569, i64* %570, align 8, !alias.scope !499, !noalias !502
  %571 = add i64 %552, %559
  store i64 %571, i64* %9, align 8, !alias.scope !502, !noalias !499
  %572 = add nuw i64 %533, 2
  %573 = add i64 %534, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %531

575:                                              ; preds = %531, %524
  %576 = phi i64 [ undef, %524 ], [ %571, %531 ]
  %577 = phi i64 [ %525, %524 ], [ %571, %531 ]
  %578 = phi i64 [ 0, %524 ], [ %572, %531 ]
  %579 = icmp eq i64 %526, 0
  br i1 %579, label %599, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i8, i8* %150, i64 %578
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i64
  %584 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  %587 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %583
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i64
  %590 = lshr i64 %577, 3
  %591 = getelementptr inbounds i8, i8* %10, i64 %590
  %592 = load i8, i8* %591, align 1, !alias.scope !499, !noalias !502
  %593 = zext i8 %592 to i64
  %594 = and i64 %577, 7
  %595 = shl i64 %589, %594
  %596 = or i64 %595, %593
  %597 = bitcast i8* %591 to i64*
  store i64 %596, i64* %597, align 8, !alias.scope !499, !noalias !502
  %598 = add i64 %577, %586
  store i64 %598, i64* %9, align 8, !alias.scope !502, !noalias !499
  br label %599

599:                                              ; preds = %580, %575, %502
  %600 = phi i64 [ %519, %502 ], [ %576, %575 ], [ %598, %580 ]
  %601 = icmp eq i32 %149, %263
  br i1 %601, label %602, label %618

602:                                              ; preds = %599
  %603 = load i8, i8* %116, align 1
  %604 = zext i8 %603 to i64
  %605 = load i16, i16* %117, align 2
  %606 = zext i16 %605 to i64
  %607 = lshr i64 %600, 3
  %608 = getelementptr inbounds i8, i8* %10, i64 %607
  %609 = load i8, i8* %608, align 1, !alias.scope !504, !noalias !507
  %610 = zext i8 %609 to i64
  %611 = and i64 %600, 7
  %612 = shl i64 %606, %611
  %613 = or i64 %612, %610
  %614 = bitcast i8* %608 to i64*
  store i64 %613, i64* %614, align 8, !alias.scope !504, !noalias !507
  %615 = add i64 %600, %604
  store i64 %615, i64* %9, align 8, !alias.scope !507, !noalias !504
  %616 = load i32, i32* %118, align 16
  %617 = add i32 %616, 1
  store i32 %617, i32* %118, align 16
  br label %664

618:                                              ; preds = %599
  %619 = shl i64 %218, 32
  %620 = ashr exact i64 %619, 32
  %621 = add nsw i64 %620, 3
  %622 = trunc i64 %621 to i32
  %623 = call i32 @llvm.ctlz.i32(i32 %622, i1 true) #6, !range !7
  %624 = xor i32 %623, 31
  %625 = add nsw i32 %624, -1
  %626 = zext i32 %625 to i64
  %627 = lshr i64 %621, %626
  %628 = and i64 %627, 1
  %629 = or i64 %628, 2
  %630 = shl i64 %629, %626
  %631 = shl nuw nsw i32 %624, 1
  %632 = add nsw i32 %631, -4
  %633 = zext i32 %632 to i64
  %634 = or i64 %628, %633
  %635 = add nuw nsw i64 %634, 80
  %636 = getelementptr inbounds i8, i8* %5, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds i16, i16* %6, i64 %635
  %640 = load i16, i16* %639, align 2
  %641 = zext i16 %640 to i64
  %642 = lshr i64 %600, 3
  %643 = getelementptr inbounds i8, i8* %10, i64 %642
  %644 = load i8, i8* %643, align 1, !alias.scope !509, !noalias !512
  %645 = zext i8 %644 to i64
  %646 = and i64 %600, 7
  %647 = shl i64 %641, %646
  %648 = or i64 %647, %645
  %649 = bitcast i8* %643 to i64*
  store i64 %648, i64* %649, align 8, !alias.scope !509, !noalias !512
  %650 = add i64 %600, %638
  %651 = sub i64 %621, %630
  %652 = lshr i64 %650, 3
  %653 = getelementptr inbounds i8, i8* %10, i64 %652
  %654 = load i8, i8* %653, align 1, !alias.scope !514, !noalias !517
  %655 = zext i8 %654 to i64
  %656 = and i64 %650, 7
  %657 = shl i64 %651, %656
  %658 = or i64 %657, %655
  %659 = bitcast i8* %653 to i64*
  store i64 %658, i64* %659, align 8, !alias.scope !514, !noalias !517
  %660 = add i64 %650, %626
  store i64 %660, i64* %9, align 8, !alias.scope !517, !noalias !514
  %661 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %635
  %662 = load i32, i32* %661, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %661, align 4
  br label %664

664:                                              ; preds = %618, %602
  %665 = phi i64 [ %615, %602 ], [ %660, %618 ]
  %666 = phi i32 [ %149, %602 ], [ %263, %618 ]
  %667 = icmp ult i64 %262, 12
  br i1 %667, label %668, label %688

668:                                              ; preds = %664
  %669 = add nsw i64 %261, 1
  %670 = getelementptr inbounds i8, i8* %5, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i64
  %673 = getelementptr inbounds i16, i16* %6, i64 %669
  %674 = load i16, i16* %673, align 2
  %675 = zext i16 %674 to i64
  %676 = lshr i64 %665, 3
  %677 = getelementptr inbounds i8, i8* %10, i64 %676
  %678 = load i8, i8* %677, align 1, !alias.scope !519, !noalias !522
  %679 = zext i8 %678 to i64
  %680 = and i64 %665, 7
  %681 = shl i64 %675, %680
  %682 = or i64 %681, %679
  %683 = bitcast i8* %677 to i64*
  store i64 %682, i64* %683, align 8, !alias.scope !519, !noalias !522
  %684 = add i64 %665, %672
  store i64 %684, i64* %9, align 8, !alias.scope !522, !noalias !519
  %685 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %669
  %686 = load i32, i32* %685, align 4
  %687 = add i32 %686, 1
  store i32 %687, i32* %685, align 4
  br label %874

688:                                              ; preds = %664
  %689 = icmp ult i64 %262, 72
  br i1 %689, label %690, label %730

690:                                              ; preds = %688
  %691 = add nsw i64 %261, -3
  %692 = trunc i64 %691 to i32
  %693 = call i32 @llvm.ctlz.i32(i32 %692, i1 true) #6, !range !7
  %694 = sub nsw i32 30, %693
  %695 = zext i32 %694 to i64
  %696 = lshr i64 %691, %695
  %697 = shl nsw i32 %694, 1
  %698 = zext i32 %697 to i64
  %699 = add nuw nsw i64 %698, 4
  %700 = add nuw nsw i64 %699, %696
  %701 = getelementptr inbounds i8, i8* %5, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i64
  %704 = getelementptr inbounds i16, i16* %6, i64 %700
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i64
  %707 = lshr i64 %665, 3
  %708 = getelementptr inbounds i8, i8* %10, i64 %707
  %709 = load i8, i8* %708, align 1, !alias.scope !524, !noalias !527
  %710 = zext i8 %709 to i64
  %711 = and i64 %665, 7
  %712 = shl i64 %706, %711
  %713 = or i64 %712, %710
  %714 = bitcast i8* %708 to i64*
  store i64 %713, i64* %714, align 8, !alias.scope !524, !noalias !527
  %715 = add i64 %665, %703
  %716 = shl i64 %696, %695
  %717 = sub i64 %691, %716
  %718 = lshr i64 %715, 3
  %719 = getelementptr inbounds i8, i8* %10, i64 %718
  %720 = load i8, i8* %719, align 1, !alias.scope !529, !noalias !532
  %721 = zext i8 %720 to i64
  %722 = and i64 %715, 7
  %723 = shl i64 %717, %722
  %724 = or i64 %723, %721
  %725 = bitcast i8* %719 to i64*
  store i64 %724, i64* %725, align 8, !alias.scope !529, !noalias !532
  %726 = add i64 %715, %695
  store i64 %726, i64* %9, align 8, !alias.scope !532, !noalias !529
  %727 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %700
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, 1
  store i32 %729, i32* %727, align 4
  br label %874

730:                                              ; preds = %688
  %731 = icmp ult i64 %262, 136
  br i1 %731, label %732, label %779

732:                                              ; preds = %730
  %733 = add nsw i64 %261, -3
  %734 = lshr i64 %733, 5
  %735 = add nuw nsw i64 %734, 30
  %736 = getelementptr inbounds i8, i8* %5, i64 %735
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i64
  %739 = getelementptr inbounds i16, i16* %6, i64 %735
  %740 = load i16, i16* %739, align 2
  %741 = zext i16 %740 to i64
  %742 = lshr i64 %665, 3
  %743 = getelementptr inbounds i8, i8* %10, i64 %742
  %744 = load i8, i8* %743, align 1, !alias.scope !534, !noalias !537
  %745 = zext i8 %744 to i64
  %746 = and i64 %665, 7
  %747 = shl i64 %741, %746
  %748 = or i64 %747, %745
  %749 = bitcast i8* %743 to i64*
  store i64 %748, i64* %749, align 8, !alias.scope !534, !noalias !537
  %750 = add i64 %665, %738
  %751 = and i64 %733, 31
  %752 = lshr i64 %750, 3
  %753 = getelementptr inbounds i8, i8* %10, i64 %752
  %754 = load i8, i8* %753, align 1, !alias.scope !539, !noalias !542
  %755 = zext i8 %754 to i64
  %756 = and i64 %750, 7
  %757 = shl i64 %751, %756
  %758 = or i64 %757, %755
  %759 = bitcast i8* %753 to i64*
  store i64 %758, i64* %759, align 8, !alias.scope !539, !noalias !542
  %760 = add i64 %750, 5
  store i64 %760, i64* %9, align 8, !alias.scope !542, !noalias !539
  %761 = load i8, i8* %116, align 1
  %762 = zext i8 %761 to i64
  %763 = load i16, i16* %117, align 2
  %764 = zext i16 %763 to i64
  %765 = lshr i64 %760, 3
  %766 = getelementptr inbounds i8, i8* %10, i64 %765
  %767 = load i8, i8* %766, align 1, !alias.scope !544, !noalias !547
  %768 = zext i8 %767 to i64
  %769 = and i64 %760, 7
  %770 = shl i64 %764, %769
  %771 = or i64 %770, %768
  %772 = bitcast i8* %766 to i64*
  store i64 %771, i64* %772, align 8, !alias.scope !544, !noalias !547
  %773 = add i64 %760, %762
  store i64 %773, i64* %9, align 8, !alias.scope !547, !noalias !544
  %774 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %735
  %775 = load i32, i32* %774, align 4
  %776 = add i32 %775, 1
  store i32 %776, i32* %774, align 4
  %777 = load i32, i32* %118, align 16
  %778 = add i32 %777, 1
  store i32 %778, i32* %118, align 16
  br label %874

779:                                              ; preds = %730
  %780 = icmp ult i64 %262, 2120
  br i1 %780, label %781, label %833

781:                                              ; preds = %779
  %782 = add nsw i64 %261, -67
  %783 = trunc i64 %782 to i32
  %784 = call i32 @llvm.ctlz.i32(i32 %783, i1 true) #6, !range !7
  %785 = xor i32 %784, 31
  %786 = add nuw nsw i32 %785, 28
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds i8, i8* %5, i64 %787
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i64
  %791 = getelementptr inbounds i16, i16* %6, i64 %787
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i64
  %794 = lshr i64 %665, 3
  %795 = getelementptr inbounds i8, i8* %10, i64 %794
  %796 = load i8, i8* %795, align 1, !alias.scope !549, !noalias !552
  %797 = zext i8 %796 to i64
  %798 = and i64 %665, 7
  %799 = shl i64 %793, %798
  %800 = or i64 %799, %797
  %801 = bitcast i8* %795 to i64*
  store i64 %800, i64* %801, align 8, !alias.scope !549, !noalias !552
  %802 = add i64 %665, %790
  %803 = zext i32 %785 to i64
  %804 = shl i64 1, %803
  %805 = sub i64 %782, %804
  %806 = lshr i64 %802, 3
  %807 = getelementptr inbounds i8, i8* %10, i64 %806
  %808 = load i8, i8* %807, align 1, !alias.scope !554, !noalias !557
  %809 = zext i8 %808 to i64
  %810 = and i64 %802, 7
  %811 = shl i64 %805, %810
  %812 = or i64 %811, %809
  %813 = bitcast i8* %807 to i64*
  store i64 %812, i64* %813, align 8, !alias.scope !554, !noalias !557
  %814 = add i64 %802, %803
  store i64 %814, i64* %9, align 8, !alias.scope !557, !noalias !554
  %815 = load i8, i8* %116, align 1
  %816 = zext i8 %815 to i64
  %817 = load i16, i16* %117, align 2
  %818 = zext i16 %817 to i64
  %819 = lshr i64 %814, 3
  %820 = getelementptr inbounds i8, i8* %10, i64 %819
  %821 = load i8, i8* %820, align 1, !alias.scope !559, !noalias !562
  %822 = zext i8 %821 to i64
  %823 = and i64 %814, 7
  %824 = shl i64 %818, %823
  %825 = or i64 %824, %822
  %826 = bitcast i8* %820 to i64*
  store i64 %825, i64* %826, align 8, !alias.scope !559, !noalias !562
  %827 = add i64 %814, %816
  store i64 %827, i64* %9, align 8, !alias.scope !562, !noalias !559
  %828 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %787
  %829 = load i32, i32* %828, align 4
  %830 = add i32 %829, 1
  store i32 %830, i32* %828, align 4
  %831 = load i32, i32* %118, align 16
  %832 = add i32 %831, 1
  store i32 %832, i32* %118, align 16
  br label %874

833:                                              ; preds = %779
  %834 = load i8, i8* %119, align 1
  %835 = zext i8 %834 to i64
  %836 = load i16, i16* %120, align 2
  %837 = zext i16 %836 to i64
  %838 = lshr i64 %665, 3
  %839 = getelementptr inbounds i8, i8* %10, i64 %838
  %840 = load i8, i8* %839, align 1, !alias.scope !564, !noalias !567
  %841 = zext i8 %840 to i64
  %842 = and i64 %665, 7
  %843 = shl i64 %837, %842
  %844 = or i64 %843, %841
  %845 = bitcast i8* %839 to i64*
  store i64 %844, i64* %845, align 8, !alias.scope !564, !noalias !567
  %846 = add i64 %665, %835
  %847 = add i64 %261, -2115
  %848 = lshr i64 %846, 3
  %849 = getelementptr inbounds i8, i8* %10, i64 %848
  %850 = load i8, i8* %849, align 1, !alias.scope !569, !noalias !572
  %851 = zext i8 %850 to i64
  %852 = and i64 %846, 7
  %853 = shl i64 %847, %852
  %854 = or i64 %853, %851
  %855 = bitcast i8* %849 to i64*
  store i64 %854, i64* %855, align 8, !alias.scope !569, !noalias !572
  %856 = add i64 %846, 24
  store i64 %856, i64* %9, align 8, !alias.scope !572, !noalias !569
  %857 = load i8, i8* %116, align 1
  %858 = zext i8 %857 to i64
  %859 = load i16, i16* %117, align 2
  %860 = zext i16 %859 to i64
  %861 = lshr i64 %856, 3
  %862 = getelementptr inbounds i8, i8* %10, i64 %861
  %863 = load i8, i8* %862, align 1, !alias.scope !574, !noalias !577
  %864 = zext i8 %863 to i64
  %865 = and i64 %856, 7
  %866 = shl i64 %860, %865
  %867 = or i64 %866, %864
  %868 = bitcast i8* %862 to i64*
  store i64 %867, i64* %868, align 8, !alias.scope !574, !noalias !577
  %869 = add i64 %856, %858
  store i64 %869, i64* %9, align 8, !alias.scope !577, !noalias !574
  %870 = load i32, i32* %121, align 4
  %871 = add i32 %870, 1
  store i32 %871, i32* %121, align 4
  %872 = load i32, i32* %118, align 16
  %873 = add i32 %872, 1
  store i32 %873, i32* %118, align 16
  br label %874

874:                                              ; preds = %833, %781, %732, %690, %668
  %875 = icmp ult i8* %266, %145
  br i1 %875, label %876, label %1189, !prof !75

876:                                              ; preds = %874
  %877 = getelementptr inbounds i8, i8* %266, i64 -3
  %878 = bitcast i8* %877 to i64*
  %879 = load i64, i64* %878, align 8
  %880 = mul i64 %879, 8503243848024064
  %881 = lshr i64 %880, 53
  %882 = lshr i64 %879, 24
  %883 = mul i64 %882, 8503243848024064
  %884 = lshr i64 %883, 53
  %885 = ptrtoint i8* %266 to i64
  %886 = sub i64 %885, %106
  %887 = trunc i64 %886 to i32
  %888 = add i32 %887, -3
  %889 = getelementptr inbounds i32, i32* %4, i64 %881
  store i32 %888, i32* %889, align 4
  %890 = lshr i64 %879, 8
  %891 = mul i64 %890, 8503243848024064
  %892 = lshr i64 %891, 53
  %893 = add i32 %887, -2
  %894 = getelementptr inbounds i32, i32* %4, i64 %892
  store i32 %893, i32* %894, align 4
  %895 = lshr i64 %879, 16
  %896 = mul i64 %895, 8503243848024064
  %897 = lshr i64 %896, 53
  %898 = add i32 %887, -1
  %899 = getelementptr inbounds i32, i32* %4, i64 %897
  store i32 %898, i32* %899, align 4
  %900 = getelementptr inbounds i32, i32* %4, i64 %884
  %901 = load i32, i32* %900, align 4
  store i32 %887, i32* %900, align 4
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i8, i8* %1, i64 %902
  %904 = bitcast i8* %266 to i32*
  %905 = load i32, i32* %904, align 4
  %906 = bitcast i8* %903 to i32*
  %907 = load i32, i32* %906, align 4
  %908 = icmp eq i32 %905, %907
  br i1 %908, label %909, label %1184

909:                                              ; preds = %876
  %910 = getelementptr inbounds i8, i8* %266, i64 4
  %911 = load i8, i8* %910, align 1
  %912 = getelementptr inbounds i8, i8* %903, i64 4
  %913 = load i8, i8* %912, align 1
  %914 = icmp eq i8 %911, %913
  br i1 %914, label %921, label %1184

915:                                              ; preds = %1149
  %916 = getelementptr inbounds i8, i8* %972, i64 4
  %917 = load i8, i8* %916, align 1
  %918 = getelementptr inbounds i8, i8* %1176, i64 4
  %919 = load i8, i8* %918, align 1
  %920 = icmp eq i8 %917, %919
  br i1 %920, label %921, label %1187

921:                                              ; preds = %909, %915
  %922 = phi i8* [ %972, %915 ], [ %266, %909 ]
  %923 = phi i32 [ %973, %915 ], [ %666, %909 ]
  %924 = phi i8* [ %1176, %915 ], [ %903, %909 ]
  %925 = getelementptr inbounds i8, i8* %924, i64 5
  %926 = getelementptr inbounds i8, i8* %922, i64 5
  %927 = ptrtoint i8* %922 to i64
  %928 = sub i64 %146, %927
  %929 = add i64 %928, -5
  %930 = lshr i64 %929, 3
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %952, label %932, !prof !76

932:                                              ; preds = %921, %942
  %933 = phi i64 [ %945, %942 ], [ %930, %921 ]
  %934 = phi i8* [ %943, %942 ], [ %926, %921 ]
  %935 = phi i64 [ %944, %942 ], [ 0, %921 ]
  %936 = bitcast i8* %934 to i64*
  %937 = load i64, i64* %936, align 8
  %938 = getelementptr inbounds i8, i8* %925, i64 %935
  %939 = bitcast i8* %938 to i64*
  %940 = load i64, i64* %939, align 8
  %941 = icmp eq i64 %937, %940
  br i1 %941, label %942, label %947, !prof !76

942:                                              ; preds = %932
  %943 = getelementptr inbounds i8, i8* %934, i64 8
  %944 = add nuw i64 %935, 8
  %945 = add nsw i64 %933, -1
  %946 = icmp eq i64 %945, 0
  br i1 %946, label %952, label %932, !prof !76

947:                                              ; preds = %932
  %948 = xor i64 %940, %937
  %949 = call i64 @llvm.cttz.i64(i64 %948, i1 true) #6, !range !78
  %950 = lshr i64 %949, 3
  %951 = or i64 %950, %935
  br label %965

952:                                              ; preds = %942, %921
  %953 = phi i64 [ 0, %921 ], [ %944, %942 ]
  %954 = phi i8* [ %926, %921 ], [ %943, %942 ]
  %955 = and i64 %929, 7
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %965, label %957

957:                                              ; preds = %952
  %958 = getelementptr inbounds i8, i8* %925, i64 %953
  %959 = load i8, i8* %958, align 1
  %960 = load i8, i8* %954, align 1
  %961 = icmp eq i8 %959, %960
  br i1 %961, label %962, label %965, !prof !75

962:                                              ; preds = %957
  %963 = add i64 %953, 1
  %964 = icmp eq i64 %955, 1
  br i1 %964, label %965, label %1802

965:                                              ; preds = %1847, %962, %957, %1802, %1808, %1811, %1817, %1820, %1826, %1829, %1835, %1838, %1844, %952, %947
  %966 = phi i64 [ %951, %947 ], [ %953, %952 ], [ %953, %957 ], [ %963, %962 ], [ %963, %1802 ], [ %1809, %1808 ], [ %1809, %1811 ], [ %1818, %1817 ], [ %1818, %1820 ], [ %1827, %1826 ], [ %1827, %1829 ], [ %1836, %1835 ], [ %1836, %1838 ], [ %1845, %1844 ], [ %1854, %1847 ]
  %967 = add i64 %966, 5
  %968 = ptrtoint i8* %924 to i64
  %969 = sub i64 %927, %968
  %970 = icmp sgt i64 %969, 262128
  br i1 %970, label %1184, label %971

971:                                              ; preds = %965
  %972 = getelementptr inbounds i8, i8* %922, i64 %967
  %973 = trunc i64 %969 to i32
  %974 = icmp ult i64 %967, 10
  br i1 %974, label %975, label %994

975:                                              ; preds = %971
  %976 = add nsw i64 %966, 19
  %977 = getelementptr inbounds i8, i8* %5, i64 %976
  %978 = load i8, i8* %977, align 1
  %979 = zext i8 %978 to i64
  %980 = getelementptr inbounds i16, i16* %6, i64 %976
  %981 = load i16, i16* %980, align 2
  %982 = zext i16 %981 to i64
  %983 = load i64, i64* %9, align 8, !alias.scope !579, !noalias !582
  %984 = lshr i64 %983, 3
  %985 = getelementptr inbounds i8, i8* %10, i64 %984
  %986 = load i8, i8* %985, align 1, !alias.scope !582, !noalias !579
  %987 = zext i8 %986 to i64
  %988 = and i64 %983, 7
  %989 = shl i64 %982, %988
  %990 = or i64 %989, %987
  %991 = bitcast i8* %985 to i64*
  store i64 %990, i64* %991, align 8, !alias.scope !582, !noalias !579
  %992 = add i64 %983, %979
  store i64 %992, i64* %9, align 8, !alias.scope !579, !noalias !582
  %993 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %976
  br label %1098

994:                                              ; preds = %971
  %995 = icmp ult i64 %967, 134
  br i1 %995, label %996, label %1035

996:                                              ; preds = %994
  %997 = add nsw i64 %966, -1
  %998 = trunc i64 %997 to i32
  %999 = call i32 @llvm.ctlz.i32(i32 %998, i1 true) #6, !range !7
  %1000 = sub nsw i32 30, %999
  %1001 = zext i32 %1000 to i64
  %1002 = lshr i64 %997, %1001
  %1003 = shl nsw i32 %1000, 1
  %1004 = zext i32 %1003 to i64
  %1005 = add nuw nsw i64 %1004, 20
  %1006 = add nuw nsw i64 %1005, %1002
  %1007 = getelementptr inbounds i8, i8* %5, i64 %1006
  %1008 = load i8, i8* %1007, align 1
  %1009 = zext i8 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %6, i64 %1006
  %1011 = load i16, i16* %1010, align 2
  %1012 = zext i16 %1011 to i64
  %1013 = load i64, i64* %9, align 8, !alias.scope !584, !noalias !587
  %1014 = lshr i64 %1013, 3
  %1015 = getelementptr inbounds i8, i8* %10, i64 %1014
  %1016 = load i8, i8* %1015, align 1, !alias.scope !587, !noalias !584
  %1017 = zext i8 %1016 to i64
  %1018 = and i64 %1013, 7
  %1019 = shl i64 %1012, %1018
  %1020 = or i64 %1019, %1017
  %1021 = bitcast i8* %1015 to i64*
  store i64 %1020, i64* %1021, align 8, !alias.scope !587, !noalias !584
  %1022 = add i64 %1013, %1009
  %1023 = shl i64 %1002, %1001
  %1024 = sub i64 %997, %1023
  %1025 = lshr i64 %1022, 3
  %1026 = getelementptr inbounds i8, i8* %10, i64 %1025
  %1027 = load i8, i8* %1026, align 1, !alias.scope !589, !noalias !592
  %1028 = zext i8 %1027 to i64
  %1029 = and i64 %1022, 7
  %1030 = shl i64 %1024, %1029
  %1031 = or i64 %1030, %1028
  %1032 = bitcast i8* %1026 to i64*
  store i64 %1031, i64* %1032, align 8, !alias.scope !589, !noalias !592
  %1033 = add i64 %1022, %1001
  store i64 %1033, i64* %9, align 8, !alias.scope !592, !noalias !589
  %1034 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1006
  br label %1098

1035:                                             ; preds = %994
  %1036 = icmp ult i64 %967, 2118
  br i1 %1036, label %1037, label %1073

1037:                                             ; preds = %1035
  %1038 = add nsw i64 %966, -65
  %1039 = trunc i64 %1038 to i32
  %1040 = call i32 @llvm.ctlz.i32(i32 %1039, i1 true) #6, !range !7
  %1041 = xor i32 %1040, 31
  %1042 = add nuw nsw i32 %1041, 28
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds i8, i8* %5, i64 %1043
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i64
  %1047 = getelementptr inbounds i16, i16* %6, i64 %1043
  %1048 = load i16, i16* %1047, align 2
  %1049 = zext i16 %1048 to i64
  %1050 = load i64, i64* %9, align 8, !alias.scope !594, !noalias !597
  %1051 = lshr i64 %1050, 3
  %1052 = getelementptr inbounds i8, i8* %10, i64 %1051
  %1053 = load i8, i8* %1052, align 1, !alias.scope !597, !noalias !594
  %1054 = zext i8 %1053 to i64
  %1055 = and i64 %1050, 7
  %1056 = shl i64 %1049, %1055
  %1057 = or i64 %1056, %1054
  %1058 = bitcast i8* %1052 to i64*
  store i64 %1057, i64* %1058, align 8, !alias.scope !597, !noalias !594
  %1059 = add i64 %1050, %1046
  %1060 = zext i32 %1041 to i64
  %1061 = shl i64 1, %1060
  %1062 = sub i64 %1038, %1061
  %1063 = lshr i64 %1059, 3
  %1064 = getelementptr inbounds i8, i8* %10, i64 %1063
  %1065 = load i8, i8* %1064, align 1, !alias.scope !599, !noalias !602
  %1066 = zext i8 %1065 to i64
  %1067 = and i64 %1059, 7
  %1068 = shl i64 %1062, %1067
  %1069 = or i64 %1068, %1066
  %1070 = bitcast i8* %1064 to i64*
  store i64 %1069, i64* %1070, align 8, !alias.scope !599, !noalias !602
  %1071 = add i64 %1059, %1060
  store i64 %1071, i64* %9, align 8, !alias.scope !602, !noalias !599
  %1072 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1043
  br label %1098

1073:                                             ; preds = %1035
  %1074 = load i8, i8* %119, align 1
  %1075 = zext i8 %1074 to i64
  %1076 = load i16, i16* %120, align 2
  %1077 = zext i16 %1076 to i64
  %1078 = load i64, i64* %9, align 8, !alias.scope !604, !noalias !607
  %1079 = lshr i64 %1078, 3
  %1080 = getelementptr inbounds i8, i8* %10, i64 %1079
  %1081 = load i8, i8* %1080, align 1, !alias.scope !607, !noalias !604
  %1082 = zext i8 %1081 to i64
  %1083 = and i64 %1078, 7
  %1084 = shl i64 %1077, %1083
  %1085 = or i64 %1084, %1082
  %1086 = bitcast i8* %1080 to i64*
  store i64 %1085, i64* %1086, align 8, !alias.scope !607, !noalias !604
  %1087 = add i64 %1078, %1075
  %1088 = add i64 %966, -2113
  %1089 = lshr i64 %1087, 3
  %1090 = getelementptr inbounds i8, i8* %10, i64 %1089
  %1091 = load i8, i8* %1090, align 1, !alias.scope !609, !noalias !612
  %1092 = zext i8 %1091 to i64
  %1093 = and i64 %1087, 7
  %1094 = shl i64 %1088, %1093
  %1095 = or i64 %1094, %1092
  %1096 = bitcast i8* %1090 to i64*
  store i64 %1095, i64* %1096, align 8, !alias.scope !609, !noalias !612
  %1097 = add i64 %1087, 24
  store i64 %1097, i64* %9, align 8, !alias.scope !612, !noalias !609
  br label %1098

1098:                                             ; preds = %1073, %1037, %996, %975
  %1099 = phi i32* [ %121, %1073 ], [ %1072, %1037 ], [ %1034, %996 ], [ %993, %975 ]
  %1100 = phi i64 [ %1097, %1073 ], [ %1071, %1037 ], [ %1033, %996 ], [ %992, %975 ]
  %1101 = load i32, i32* %1099, align 4
  %1102 = add i32 %1101, 1
  store i32 %1102, i32* %1099, align 4
  %1103 = shl i64 %969, 32
  %1104 = ashr exact i64 %1103, 32
  %1105 = add nsw i64 %1104, 3
  %1106 = trunc i64 %1105 to i32
  %1107 = call i32 @llvm.ctlz.i32(i32 %1106, i1 true) #6, !range !7
  %1108 = xor i32 %1107, 31
  %1109 = add nsw i32 %1108, -1
  %1110 = zext i32 %1109 to i64
  %1111 = lshr i64 %1105, %1110
  %1112 = and i64 %1111, 1
  %1113 = or i64 %1112, 2
  %1114 = shl i64 %1113, %1110
  %1115 = shl nuw nsw i32 %1108, 1
  %1116 = add nsw i32 %1115, -4
  %1117 = zext i32 %1116 to i64
  %1118 = or i64 %1112, %1117
  %1119 = add nuw nsw i64 %1118, 80
  %1120 = getelementptr inbounds i8, i8* %5, i64 %1119
  %1121 = load i8, i8* %1120, align 1
  %1122 = zext i8 %1121 to i64
  %1123 = getelementptr inbounds i16, i16* %6, i64 %1119
  %1124 = load i16, i16* %1123, align 2
  %1125 = zext i16 %1124 to i64
  %1126 = lshr i64 %1100, 3
  %1127 = getelementptr inbounds i8, i8* %10, i64 %1126
  %1128 = load i8, i8* %1127, align 1, !alias.scope !614, !noalias !617
  %1129 = zext i8 %1128 to i64
  %1130 = and i64 %1100, 7
  %1131 = shl i64 %1125, %1130
  %1132 = or i64 %1131, %1129
  %1133 = bitcast i8* %1127 to i64*
  store i64 %1132, i64* %1133, align 8, !alias.scope !614, !noalias !617
  %1134 = add i64 %1100, %1122
  %1135 = sub i64 %1105, %1114
  %1136 = lshr i64 %1134, 3
  %1137 = getelementptr inbounds i8, i8* %10, i64 %1136
  %1138 = load i8, i8* %1137, align 1, !alias.scope !619, !noalias !622
  %1139 = zext i8 %1138 to i64
  %1140 = and i64 %1134, 7
  %1141 = shl i64 %1135, %1140
  %1142 = or i64 %1141, %1139
  %1143 = bitcast i8* %1137 to i64*
  store i64 %1142, i64* %1143, align 8, !alias.scope !619, !noalias !622
  %1144 = add i64 %1134, %1110
  store i64 %1144, i64* %9, align 8, !alias.scope !622, !noalias !619
  %1145 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1119
  %1146 = load i32, i32* %1145, align 4
  %1147 = add i32 %1146, 1
  store i32 %1147, i32* %1145, align 4
  %1148 = icmp ult i8* %972, %145
  br i1 %1148, label %1149, label %1189, !prof !75

1149:                                             ; preds = %1098
  %1150 = getelementptr inbounds i8, i8* %972, i64 -3
  %1151 = bitcast i8* %1150 to i64*
  %1152 = load i64, i64* %1151, align 8
  %1153 = mul i64 %1152, 8503243848024064
  %1154 = lshr i64 %1153, 53
  %1155 = lshr i64 %1152, 24
  %1156 = mul i64 %1155, 8503243848024064
  %1157 = lshr i64 %1156, 53
  %1158 = ptrtoint i8* %972 to i64
  %1159 = sub i64 %1158, %106
  %1160 = trunc i64 %1159 to i32
  %1161 = add i32 %1160, -3
  %1162 = getelementptr inbounds i32, i32* %4, i64 %1154
  store i32 %1161, i32* %1162, align 4
  %1163 = lshr i64 %1152, 8
  %1164 = mul i64 %1163, 8503243848024064
  %1165 = lshr i64 %1164, 53
  %1166 = add i32 %1160, -2
  %1167 = getelementptr inbounds i32, i32* %4, i64 %1165
  store i32 %1166, i32* %1167, align 4
  %1168 = lshr i64 %1152, 16
  %1169 = mul i64 %1168, 8503243848024064
  %1170 = lshr i64 %1169, 53
  %1171 = add i32 %1160, -1
  %1172 = getelementptr inbounds i32, i32* %4, i64 %1170
  store i32 %1171, i32* %1172, align 4
  %1173 = getelementptr inbounds i32, i32* %4, i64 %1157
  %1174 = load i32, i32* %1173, align 4
  store i32 %1160, i32* %1173, align 4
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds i8, i8* %1, i64 %1175
  %1177 = bitcast i8* %972 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = bitcast i8* %1176 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = icmp eq i32 %1178, %1180
  br i1 %1181, label %915, label %1182

1182:                                             ; preds = %1149
  %1183 = trunc i64 %969 to i32
  br label %1184

1184:                                             ; preds = %965, %1182, %1187, %909, %876
  %1185 = phi i8* [ %266, %876 ], [ %266, %909 ], [ %972, %1182 ], [ %972, %1187 ], [ %922, %965 ]
  %1186 = phi i32 [ %666, %876 ], [ %666, %909 ], [ %1183, %1182 ], [ %1188, %1187 ], [ %923, %965 ]
  br label %147

1187:                                             ; preds = %915
  %1188 = trunc i64 %969 to i32
  br label %1184

1189:                                             ; preds = %874, %157, %1098, %132
  %1190 = phi i8* [ %135, %132 ], [ %972, %1098 ], [ %150, %157 ], [ %266, %874 ]
  %1191 = sub i64 %136, %134
  %1192 = icmp ult i64 %1191, 65536
  %1193 = select i1 %1192, i64 %1191, i64 65536
  %1194 = icmp eq i64 %1191, 0
  br i1 %1194, label %1286, label %1195

1195:                                             ; preds = %1189
  %1196 = add i64 %1193, %133
  %1197 = icmp ult i64 %1196, 1048577
  br i1 %1197, label %1198, label %1286

1198:                                             ; preds = %1195
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %122) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %122, i8 0, i64 2048, i1 false) #6
  %1199 = icmp eq i64 %1193, 0
  br i1 %1199, label %1214, label %1200

1200:                                             ; preds = %1198, %1200
  %1201 = phi i64 [ %1208, %1200 ], [ 0, %1198 ]
  %1202 = getelementptr inbounds i8, i8* %138, i64 %1201
  %1203 = load i8, i8* %1202, align 1
  %1204 = zext i8 %1203 to i64
  %1205 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1204
  %1206 = load i64, i64* %1205, align 8
  %1207 = add i64 %1206, 1
  store i64 %1207, i64* %1205, align 8
  %1208 = add i64 %1201, 43
  %1209 = icmp ult i64 %1208, %1193
  br i1 %1209, label %1200, label %1210

1210:                                             ; preds = %1200
  %1211 = add nuw nsw i64 %1193, 42
  %1212 = udiv i64 %1211, 43
  %1213 = icmp ult i64 %1211, 11008
  br i1 %1213, label %1214, label %1219

1214:                                             ; preds = %1210, %1198
  %1215 = phi i64 [ %1212, %1210 ], [ 0, %1198 ]
  %1216 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1215
  %1217 = load double, double* %1216, align 8
  %1218 = uitofp i64 %1215 to double
  br label %1222

1219:                                             ; preds = %1210
  %1220 = uitofp i64 %1212 to double
  %1221 = call double @log2(double %1220) #6
  br label %1222

1222:                                             ; preds = %1219, %1214
  %1223 = phi double [ %1218, %1214 ], [ %1220, %1219 ]
  %1224 = phi double [ %1217, %1214 ], [ %1221, %1219 ]
  %1225 = fadd double %1224, 5.000000e-01
  %1226 = fmul double %1223, %1225
  %1227 = fadd double %1226, 2.000000e+02
  br label %1228

1228:                                             ; preds = %1243, %1222
  %1229 = phi double [ %1227, %1222 ], [ %1247, %1243 ]
  %1230 = phi i64 [ 0, %1222 ], [ %1248, %1243 ]
  %1231 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1230
  %1232 = load i64, i64* %1231, align 8
  %1233 = uitofp i64 %1232 to double
  %1234 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1230
  %1235 = load i8, i8* %1234, align 1
  %1236 = uitofp i8 %1235 to double
  %1237 = icmp ult i64 %1232, 256
  br i1 %1237, label %1238, label %1241

1238:                                             ; preds = %1228
  %1239 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1232
  %1240 = load double, double* %1239, align 8
  br label %1243

1241:                                             ; preds = %1228
  %1242 = call double @log2(double %1233) #6
  br label %1243

1243:                                             ; preds = %1241, %1238
  %1244 = phi double [ %1240, %1238 ], [ %1242, %1241 ]
  %1245 = fadd double %1244, %1236
  %1246 = fmul double %1245, %1233
  %1247 = fsub double %1229, %1246
  %1248 = add nuw nsw i64 %1230, 1
  %1249 = icmp eq i64 %1248, 256
  br i1 %1249, label %1250, label %1228

1250:                                             ; preds = %1243
  %1251 = fcmp ult double %1247, 0.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %122) #6
  br i1 %1251, label %1286, label %1252

1252:                                             ; preds = %1250
  %1253 = trunc i64 %1196 to i32
  %1254 = add i32 %1253, -1
  br label %1255

1255:                                             ; preds = %1255, %1252
  %1256 = phi i64 [ 20, %1252 ], [ %1282, %1255 ]
  %1257 = phi i32 [ %1254, %1252 ], [ %1283, %1255 ]
  %1258 = phi i64 [ %125, %1252 ], [ %1284, %1255 ]
  %1259 = lshr i64 %1258, 3
  %1260 = and i64 %1258, 7
  %1261 = sub nuw nsw i64 8, %1260
  %1262 = icmp ult i64 %1256, %1261
  %1263 = select i1 %1262, i64 %1256, i64 %1261
  %1264 = add nuw nsw i64 %1263, %1260
  %1265 = trunc i64 %1264 to i32
  %1266 = shl nsw i32 -1, %1265
  %1267 = trunc i64 %1260 to i32
  %1268 = shl nsw i32 -1, %1267
  %1269 = xor i32 %1268, 255
  %1270 = or i32 %1266, %1269
  %1271 = getelementptr inbounds i8, i8* %10, i64 %1259
  %1272 = load i8, i8* %1271, align 1
  %1273 = zext i8 %1272 to i32
  %1274 = and i32 %1270, %1273
  %1275 = trunc i64 %1263 to i32
  %1276 = shl nsw i32 -1, %1275
  %1277 = xor i32 %1276, -1
  %1278 = and i32 %1257, %1277
  %1279 = shl i32 %1278, %1267
  %1280 = or i32 %1274, %1279
  %1281 = trunc i32 %1280 to i8
  store i8 %1281, i8* %1271, align 1
  %1282 = sub i64 %1256, %1263
  %1283 = lshr i32 %1257, %1275
  %1284 = add i64 %1263, %1258
  %1285 = icmp eq i64 %1282, 0
  br i1 %1285, label %132, label %1255

1286:                                             ; preds = %1250, %1195, %1189
  %1287 = icmp ult i8* %1190, %138
  br i1 %1287, label %1288, label %1695

1288:                                             ; preds = %1286
  %1289 = ptrtoint i8* %138 to i64
  %1290 = ptrtoint i8* %1190 to i64
  %1291 = sub i64 %1289, %1290
  %1292 = icmp ult i64 %1291, 6210
  br i1 %1292, label %1293, label %1478, !prof !75

1293:                                             ; preds = %1288
  %1294 = icmp ult i64 %1291, 6
  br i1 %1294, label %1399, label %1295

1295:                                             ; preds = %1293
  %1296 = icmp ult i64 %1291, 130
  br i1 %1296, label %1297, label %1336

1297:                                             ; preds = %1295
  %1298 = add nsw i64 %1291, -2
  %1299 = trunc i64 %1298 to i32
  %1300 = call i32 @llvm.ctlz.i32(i32 %1299, i1 true) #6, !range !7
  %1301 = sub nsw i32 30, %1300
  %1302 = zext i32 %1301 to i64
  %1303 = lshr i64 %1298, %1302
  %1304 = shl nsw i32 %1301, 1
  %1305 = zext i32 %1304 to i64
  %1306 = add nuw nsw i64 %1305, 42
  %1307 = add nuw nsw i64 %1306, %1303
  %1308 = getelementptr inbounds i8, i8* %5, i64 %1307
  %1309 = load i8, i8* %1308, align 1
  %1310 = zext i8 %1309 to i64
  %1311 = getelementptr inbounds i16, i16* %6, i64 %1307
  %1312 = load i16, i16* %1311, align 2
  %1313 = zext i16 %1312 to i64
  %1314 = load i64, i64* %9, align 8, !alias.scope !624, !noalias !627
  %1315 = lshr i64 %1314, 3
  %1316 = getelementptr inbounds i8, i8* %10, i64 %1315
  %1317 = load i8, i8* %1316, align 1, !alias.scope !627, !noalias !624
  %1318 = zext i8 %1317 to i64
  %1319 = and i64 %1314, 7
  %1320 = shl i64 %1313, %1319
  %1321 = or i64 %1320, %1318
  %1322 = bitcast i8* %1316 to i64*
  store i64 %1321, i64* %1322, align 8, !alias.scope !627, !noalias !624
  %1323 = add i64 %1314, %1310
  %1324 = shl i64 %1303, %1302
  %1325 = sub i64 %1298, %1324
  %1326 = lshr i64 %1323, 3
  %1327 = getelementptr inbounds i8, i8* %10, i64 %1326
  %1328 = load i8, i8* %1327, align 1, !alias.scope !629, !noalias !632
  %1329 = zext i8 %1328 to i64
  %1330 = and i64 %1323, 7
  %1331 = shl i64 %1325, %1330
  %1332 = or i64 %1331, %1329
  %1333 = bitcast i8* %1327 to i64*
  store i64 %1332, i64* %1333, align 8, !alias.scope !629, !noalias !632
  %1334 = add i64 %1323, %1302
  store i64 %1334, i64* %9, align 8, !alias.scope !632, !noalias !629
  %1335 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1307
  br label %1421

1336:                                             ; preds = %1295
  %1337 = icmp ult i64 %1291, 2114
  br i1 %1337, label %1338, label %1374

1338:                                             ; preds = %1336
  %1339 = add nsw i64 %1291, -66
  %1340 = trunc i64 %1339 to i32
  %1341 = call i32 @llvm.ctlz.i32(i32 %1340, i1 true) #6, !range !7
  %1342 = xor i32 %1341, 31
  %1343 = add nuw nsw i32 %1342, 50
  %1344 = zext i32 %1343 to i64
  %1345 = getelementptr inbounds i8, i8* %5, i64 %1344
  %1346 = load i8, i8* %1345, align 1
  %1347 = zext i8 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %6, i64 %1344
  %1349 = load i16, i16* %1348, align 2
  %1350 = zext i16 %1349 to i64
  %1351 = load i64, i64* %9, align 8, !alias.scope !634, !noalias !637
  %1352 = lshr i64 %1351, 3
  %1353 = getelementptr inbounds i8, i8* %10, i64 %1352
  %1354 = load i8, i8* %1353, align 1, !alias.scope !637, !noalias !634
  %1355 = zext i8 %1354 to i64
  %1356 = and i64 %1351, 7
  %1357 = shl i64 %1350, %1356
  %1358 = or i64 %1357, %1355
  %1359 = bitcast i8* %1353 to i64*
  store i64 %1358, i64* %1359, align 8, !alias.scope !637, !noalias !634
  %1360 = add i64 %1351, %1347
  %1361 = zext i32 %1342 to i64
  %1362 = shl i64 1, %1361
  %1363 = sub i64 %1339, %1362
  %1364 = lshr i64 %1360, 3
  %1365 = getelementptr inbounds i8, i8* %10, i64 %1364
  %1366 = load i8, i8* %1365, align 1, !alias.scope !639, !noalias !642
  %1367 = zext i8 %1366 to i64
  %1368 = and i64 %1360, 7
  %1369 = shl i64 %1363, %1368
  %1370 = or i64 %1369, %1367
  %1371 = bitcast i8* %1365 to i64*
  store i64 %1370, i64* %1371, align 8, !alias.scope !639, !noalias !642
  %1372 = add i64 %1360, %1361
  store i64 %1372, i64* %9, align 8, !alias.scope !642, !noalias !639
  %1373 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1344
  br label %1421

1374:                                             ; preds = %1336
  %1375 = load i8, i8* %113, align 1
  %1376 = zext i8 %1375 to i64
  %1377 = load i16, i16* %114, align 2
  %1378 = zext i16 %1377 to i64
  %1379 = load i64, i64* %9, align 8, !alias.scope !644, !noalias !647
  %1380 = lshr i64 %1379, 3
  %1381 = getelementptr inbounds i8, i8* %10, i64 %1380
  %1382 = load i8, i8* %1381, align 1, !alias.scope !647, !noalias !644
  %1383 = zext i8 %1382 to i64
  %1384 = and i64 %1379, 7
  %1385 = shl i64 %1378, %1384
  %1386 = or i64 %1385, %1383
  %1387 = bitcast i8* %1381 to i64*
  store i64 %1386, i64* %1387, align 8, !alias.scope !647, !noalias !644
  %1388 = add i64 %1379, %1376
  %1389 = add nsw i64 %1291, -2114
  %1390 = lshr i64 %1388, 3
  %1391 = getelementptr inbounds i8, i8* %10, i64 %1390
  %1392 = load i8, i8* %1391, align 1, !alias.scope !649, !noalias !652
  %1393 = zext i8 %1392 to i64
  %1394 = and i64 %1388, 7
  %1395 = shl i64 %1389, %1394
  %1396 = or i64 %1395, %1393
  %1397 = bitcast i8* %1391 to i64*
  store i64 %1396, i64* %1397, align 8, !alias.scope !649, !noalias !652
  %1398 = add i64 %1388, 12
  store i64 %1398, i64* %9, align 8, !alias.scope !652, !noalias !649
  br label %1421

1399:                                             ; preds = %1293
  %1400 = add nuw nsw i64 %1291, 40
  %1401 = getelementptr inbounds i8, i8* %5, i64 %1400
  %1402 = load i8, i8* %1401, align 1
  %1403 = zext i8 %1402 to i64
  %1404 = getelementptr inbounds i16, i16* %6, i64 %1400
  %1405 = load i16, i16* %1404, align 2
  %1406 = zext i16 %1405 to i64
  %1407 = load i64, i64* %9, align 8, !alias.scope !654, !noalias !657
  %1408 = lshr i64 %1407, 3
  %1409 = getelementptr inbounds i8, i8* %10, i64 %1408
  %1410 = load i8, i8* %1409, align 1, !alias.scope !657, !noalias !654
  %1411 = zext i8 %1410 to i64
  %1412 = and i64 %1407, 7
  %1413 = shl i64 %1406, %1412
  %1414 = or i64 %1413, %1411
  %1415 = bitcast i8* %1409 to i64*
  store i64 %1414, i64* %1415, align 8, !alias.scope !657, !noalias !654
  %1416 = add i64 %1407, %1403
  store i64 %1416, i64* %9, align 8, !alias.scope !654, !noalias !657
  %1417 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1400
  %1418 = load i32, i32* %1417, align 4
  %1419 = add i32 %1418, 1
  store i32 %1419, i32* %1417, align 4
  %1420 = icmp eq i64 %1291, 0
  br i1 %1420, label %1695, label %1426

1421:                                             ; preds = %1297, %1338, %1374
  %1422 = phi i32* [ %115, %1374 ], [ %1373, %1338 ], [ %1335, %1297 ]
  %1423 = phi i64 [ %1398, %1374 ], [ %1372, %1338 ], [ %1334, %1297 ]
  %1424 = load i32, i32* %1422, align 4
  %1425 = add i32 %1424, 1
  store i32 %1425, i32* %1422, align 4
  br label %1426

1426:                                             ; preds = %1421, %1399
  %1427 = phi i64 [ %1423, %1421 ], [ %1416, %1399 ]
  %1428 = xor i64 %1290, -1
  %1429 = and i64 %1291, 1
  %1430 = sub i64 0, %1289
  %1431 = icmp eq i64 %1428, %1430
  br i1 %1431, label %1649, label %1432

1432:                                             ; preds = %1426
  %1433 = sub i64 %1291, %1429
  br label %1434

1434:                                             ; preds = %1434, %1432
  %1435 = phi i64 [ %1427, %1432 ], [ %1474, %1434 ]
  %1436 = phi i64 [ 0, %1432 ], [ %1475, %1434 ]
  %1437 = phi i64 [ %1433, %1432 ], [ %1476, %1434 ]
  %1438 = getelementptr inbounds i8, i8* %1190, i64 %1436
  %1439 = load i8, i8* %1438, align 1
  %1440 = zext i8 %1439 to i64
  %1441 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1440
  %1442 = load i8, i8* %1441, align 1
  %1443 = zext i8 %1442 to i64
  %1444 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1440
  %1445 = load i16, i16* %1444, align 2
  %1446 = zext i16 %1445 to i64
  %1447 = lshr i64 %1435, 3
  %1448 = getelementptr inbounds i8, i8* %10, i64 %1447
  %1449 = load i8, i8* %1448, align 1, !alias.scope !659, !noalias !662
  %1450 = zext i8 %1449 to i64
  %1451 = and i64 %1435, 7
  %1452 = shl i64 %1446, %1451
  %1453 = or i64 %1452, %1450
  %1454 = bitcast i8* %1448 to i64*
  store i64 %1453, i64* %1454, align 8, !alias.scope !659, !noalias !662
  %1455 = add i64 %1435, %1443
  store i64 %1455, i64* %9, align 8, !alias.scope !662, !noalias !659
  %1456 = or i64 %1436, 1
  %1457 = getelementptr inbounds i8, i8* %1190, i64 %1456
  %1458 = load i8, i8* %1457, align 1
  %1459 = zext i8 %1458 to i64
  %1460 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1459
  %1461 = load i8, i8* %1460, align 1
  %1462 = zext i8 %1461 to i64
  %1463 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1459
  %1464 = load i16, i16* %1463, align 2
  %1465 = zext i16 %1464 to i64
  %1466 = lshr i64 %1455, 3
  %1467 = getelementptr inbounds i8, i8* %10, i64 %1466
  %1468 = load i8, i8* %1467, align 1, !alias.scope !659, !noalias !662
  %1469 = zext i8 %1468 to i64
  %1470 = and i64 %1455, 7
  %1471 = shl i64 %1465, %1470
  %1472 = or i64 %1471, %1469
  %1473 = bitcast i8* %1467 to i64*
  store i64 %1472, i64* %1473, align 8, !alias.scope !659, !noalias !662
  %1474 = add i64 %1455, %1462
  store i64 %1474, i64* %9, align 8, !alias.scope !662, !noalias !659
  %1475 = add nuw i64 %1436, 2
  %1476 = add i64 %1437, -2
  %1477 = icmp eq i64 %1476, 0
  br i1 %1477, label %1649, label %1434

1478:                                             ; preds = %1288
  %1479 = sub i64 %1290, %130
  %1480 = mul i64 %1479, 50
  %1481 = icmp ugt i64 %1480, %1291
  %1482 = or i1 %131, %1481
  br i1 %1482, label %1541, label %1483

1483:                                             ; preds = %1478
  %1484 = add i64 %125, -3
  %1485 = sub i64 %1289, %130
  %1486 = trunc i64 %1484 to i32
  %1487 = and i32 %1486, 7
  %1488 = shl nsw i32 -1, %1487
  %1489 = lshr i64 %1484, 3
  %1490 = getelementptr inbounds i8, i8* %10, i64 %1489
  %1491 = load i8, i8* %1490, align 1
  %1492 = trunc i32 %1488 to i8
  %1493 = and i8 %1492, 127
  %1494 = xor i8 %1493, 127
  %1495 = and i8 %1491, %1494
  store i8 %1495, i8* %1490, align 1
  store i64 %1484, i64* %9, align 8
  %1496 = load i8, i8* %1490, align 1, !alias.scope !664, !noalias !667
  %1497 = zext i8 %1496 to i64
  %1498 = bitcast i8* %1490 to i64*
  store i64 %1497, i64* %1498, align 8, !alias.scope !664, !noalias !667
  %1499 = add i64 %125, -2
  %1500 = icmp ult i64 %1485, 65537
  %1501 = icmp ult i64 %1485, 1048577
  %1502 = select i1 %1501, i64 5, i64 6
  %1503 = select i1 %1500, i64 4, i64 %1502
  %1504 = add nsw i64 %1503, -4
  %1505 = lshr i64 %1499, 3
  %1506 = getelementptr inbounds i8, i8* %10, i64 %1505
  %1507 = load i8, i8* %1506, align 1, !alias.scope !669, !noalias !672
  %1508 = zext i8 %1507 to i64
  %1509 = and i64 %1499, 7
  %1510 = shl i64 %1504, %1509
  %1511 = or i64 %1510, %1508
  %1512 = bitcast i8* %1506 to i64*
  store i64 %1511, i64* %1512, align 8, !alias.scope !669, !noalias !672
  %1513 = shl nuw nsw i64 %1503, 2
  %1514 = add i64 %1485, -1
  %1515 = lshr i64 %125, 3
  %1516 = getelementptr inbounds i8, i8* %10, i64 %1515
  %1517 = load i8, i8* %1516, align 1, !alias.scope !674, !noalias !677
  %1518 = zext i8 %1517 to i64
  %1519 = and i64 %125, 7
  %1520 = shl i64 %1514, %1519
  %1521 = or i64 %1520, %1518
  %1522 = bitcast i8* %1516 to i64*
  store i64 %1521, i64* %1522, align 8, !alias.scope !674, !noalias !677
  %1523 = add i64 %1513, %125
  %1524 = lshr i64 %1523, 3
  %1525 = getelementptr inbounds i8, i8* %10, i64 %1524
  %1526 = load i8, i8* %1525, align 1, !alias.scope !679, !noalias !682
  %1527 = zext i8 %1526 to i64
  %1528 = and i64 %1523, 7
  %1529 = shl i64 1, %1528
  %1530 = or i64 %1529, %1527
  %1531 = bitcast i8* %1525 to i64*
  store i64 %1530, i64* %1531, align 8, !alias.scope !679, !noalias !682
  %1532 = add i64 %1523, 8
  %1533 = and i64 %1532, 4294967288
  store i64 %1533, i64* %9, align 8
  %1534 = lshr exact i64 %1533, 3
  %1535 = getelementptr inbounds i8, i8* %10, i64 %1534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1535, i8* align 1 %128, i64 %1485, i1 false) #6
  %1536 = shl i64 %1485, 3
  %1537 = load i64, i64* %9, align 8
  %1538 = add i64 %1537, %1536
  store i64 %1538, i64* %9, align 8
  %1539 = lshr i64 %1538, 3
  %1540 = getelementptr inbounds i8, i8* %10, i64 %1539
  store i8 0, i8* %1540, align 1
  br label %1695

1541:                                             ; preds = %1478
  %1542 = icmp ult i64 %1291, 22594
  br i1 %1542, label %1543, label %1570

1543:                                             ; preds = %1541
  %1544 = load i8, i8* %110, align 1
  %1545 = zext i8 %1544 to i64
  %1546 = load i16, i16* %111, align 2
  %1547 = zext i16 %1546 to i64
  %1548 = load i64, i64* %9, align 8, !alias.scope !684, !noalias !687
  %1549 = lshr i64 %1548, 3
  %1550 = getelementptr inbounds i8, i8* %10, i64 %1549
  %1551 = load i8, i8* %1550, align 1, !alias.scope !687, !noalias !684
  %1552 = zext i8 %1551 to i64
  %1553 = and i64 %1548, 7
  %1554 = shl i64 %1547, %1553
  %1555 = or i64 %1554, %1552
  %1556 = bitcast i8* %1550 to i64*
  store i64 %1555, i64* %1556, align 8, !alias.scope !687, !noalias !684
  %1557 = add i64 %1548, %1545
  %1558 = add nsw i64 %1291, -6210
  %1559 = lshr i64 %1557, 3
  %1560 = getelementptr inbounds i8, i8* %10, i64 %1559
  %1561 = load i8, i8* %1560, align 1, !alias.scope !689, !noalias !692
  %1562 = zext i8 %1561 to i64
  %1563 = and i64 %1557, 7
  %1564 = shl i64 %1558, %1563
  %1565 = or i64 %1564, %1562
  %1566 = bitcast i8* %1560 to i64*
  store i64 %1565, i64* %1566, align 8, !alias.scope !689, !noalias !692
  %1567 = add i64 %1557, 14
  store i64 %1567, i64* %9, align 8, !alias.scope !692, !noalias !689
  %1568 = load i32, i32* %112, align 8
  %1569 = add i32 %1568, 1
  store i32 %1569, i32* %112, align 8
  br label %1597

1570:                                             ; preds = %1541
  %1571 = load i8, i8* %107, align 1
  %1572 = zext i8 %1571 to i64
  %1573 = load i16, i16* %108, align 2
  %1574 = zext i16 %1573 to i64
  %1575 = load i64, i64* %9, align 8, !alias.scope !694, !noalias !697
  %1576 = lshr i64 %1575, 3
  %1577 = getelementptr inbounds i8, i8* %10, i64 %1576
  %1578 = load i8, i8* %1577, align 1, !alias.scope !697, !noalias !694
  %1579 = zext i8 %1578 to i64
  %1580 = and i64 %1575, 7
  %1581 = shl i64 %1574, %1580
  %1582 = or i64 %1581, %1579
  %1583 = bitcast i8* %1577 to i64*
  store i64 %1582, i64* %1583, align 8, !alias.scope !697, !noalias !694
  %1584 = add i64 %1575, %1572
  %1585 = add i64 %1291, -22594
  %1586 = lshr i64 %1584, 3
  %1587 = getelementptr inbounds i8, i8* %10, i64 %1586
  %1588 = load i8, i8* %1587, align 1, !alias.scope !699, !noalias !702
  %1589 = zext i8 %1588 to i64
  %1590 = and i64 %1584, 7
  %1591 = shl i64 %1585, %1590
  %1592 = or i64 %1591, %1589
  %1593 = bitcast i8* %1587 to i64*
  store i64 %1592, i64* %1593, align 8, !alias.scope !699, !noalias !702
  %1594 = add i64 %1584, 24
  store i64 %1594, i64* %9, align 8, !alias.scope !702, !noalias !699
  %1595 = load i32, i32* %109, align 4
  %1596 = add i32 %1595, 1
  store i32 %1596, i32* %109, align 4
  br label %1597

1597:                                             ; preds = %1570, %1543
  %1598 = phi i64 [ %1567, %1543 ], [ %1594, %1570 ]
  %1599 = xor i64 %1290, -1
  %1600 = and i64 %1291, 1
  %1601 = sub i64 0, %1289
  %1602 = icmp eq i64 %1599, %1601
  br i1 %1602, label %1672, label %1603

1603:                                             ; preds = %1597
  %1604 = sub i64 %1291, %1600
  br label %1605

1605:                                             ; preds = %1605, %1603
  %1606 = phi i64 [ %1598, %1603 ], [ %1645, %1605 ]
  %1607 = phi i64 [ 0, %1603 ], [ %1646, %1605 ]
  %1608 = phi i64 [ %1604, %1603 ], [ %1647, %1605 ]
  %1609 = getelementptr inbounds i8, i8* %1190, i64 %1607
  %1610 = load i8, i8* %1609, align 1
  %1611 = zext i8 %1610 to i64
  %1612 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1611
  %1613 = load i8, i8* %1612, align 1
  %1614 = zext i8 %1613 to i64
  %1615 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1611
  %1616 = load i16, i16* %1615, align 2
  %1617 = zext i16 %1616 to i64
  %1618 = lshr i64 %1606, 3
  %1619 = getelementptr inbounds i8, i8* %10, i64 %1618
  %1620 = load i8, i8* %1619, align 1, !alias.scope !704, !noalias !707
  %1621 = zext i8 %1620 to i64
  %1622 = and i64 %1606, 7
  %1623 = shl i64 %1617, %1622
  %1624 = or i64 %1623, %1621
  %1625 = bitcast i8* %1619 to i64*
  store i64 %1624, i64* %1625, align 8, !alias.scope !704, !noalias !707
  %1626 = add i64 %1606, %1614
  store i64 %1626, i64* %9, align 8, !alias.scope !707, !noalias !704
  %1627 = or i64 %1607, 1
  %1628 = getelementptr inbounds i8, i8* %1190, i64 %1627
  %1629 = load i8, i8* %1628, align 1
  %1630 = zext i8 %1629 to i64
  %1631 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1630
  %1632 = load i8, i8* %1631, align 1
  %1633 = zext i8 %1632 to i64
  %1634 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1630
  %1635 = load i16, i16* %1634, align 2
  %1636 = zext i16 %1635 to i64
  %1637 = lshr i64 %1626, 3
  %1638 = getelementptr inbounds i8, i8* %10, i64 %1637
  %1639 = load i8, i8* %1638, align 1, !alias.scope !704, !noalias !707
  %1640 = zext i8 %1639 to i64
  %1641 = and i64 %1626, 7
  %1642 = shl i64 %1636, %1641
  %1643 = or i64 %1642, %1640
  %1644 = bitcast i8* %1638 to i64*
  store i64 %1643, i64* %1644, align 8, !alias.scope !704, !noalias !707
  %1645 = add i64 %1626, %1633
  store i64 %1645, i64* %9, align 8, !alias.scope !707, !noalias !704
  %1646 = add nuw i64 %1607, 2
  %1647 = add i64 %1608, -2
  %1648 = icmp eq i64 %1647, 0
  br i1 %1648, label %1672, label %1605

1649:                                             ; preds = %1434, %1426
  %1650 = phi i64 [ %1427, %1426 ], [ %1474, %1434 ]
  %1651 = phi i64 [ 0, %1426 ], [ %1475, %1434 ]
  %1652 = icmp eq i64 %1429, 0
  br i1 %1652, label %1695, label %1653

1653:                                             ; preds = %1649
  %1654 = getelementptr inbounds i8, i8* %1190, i64 %1651
  %1655 = load i8, i8* %1654, align 1
  %1656 = zext i8 %1655 to i64
  %1657 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1656
  %1658 = load i8, i8* %1657, align 1
  %1659 = zext i8 %1658 to i64
  %1660 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1656
  %1661 = load i16, i16* %1660, align 2
  %1662 = zext i16 %1661 to i64
  %1663 = lshr i64 %1650, 3
  %1664 = getelementptr inbounds i8, i8* %10, i64 %1663
  %1665 = load i8, i8* %1664, align 1, !alias.scope !659, !noalias !662
  %1666 = zext i8 %1665 to i64
  %1667 = and i64 %1650, 7
  %1668 = shl i64 %1662, %1667
  %1669 = or i64 %1668, %1666
  %1670 = bitcast i8* %1664 to i64*
  store i64 %1669, i64* %1670, align 8, !alias.scope !659, !noalias !662
  %1671 = add i64 %1650, %1659
  store i64 %1671, i64* %9, align 8, !alias.scope !662, !noalias !659
  br label %1695

1672:                                             ; preds = %1605, %1597
  %1673 = phi i64 [ %1598, %1597 ], [ %1645, %1605 ]
  %1674 = phi i64 [ 0, %1597 ], [ %1646, %1605 ]
  %1675 = icmp eq i64 %1600, 0
  br i1 %1675, label %1695, label %1676

1676:                                             ; preds = %1672
  %1677 = getelementptr inbounds i8, i8* %1190, i64 %1674
  %1678 = load i8, i8* %1677, align 1
  %1679 = zext i8 %1678 to i64
  %1680 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1679
  %1681 = load i8, i8* %1680, align 1
  %1682 = zext i8 %1681 to i64
  %1683 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1679
  %1684 = load i16, i16* %1683, align 2
  %1685 = zext i16 %1684 to i64
  %1686 = lshr i64 %1673, 3
  %1687 = getelementptr inbounds i8, i8* %10, i64 %1686
  %1688 = load i8, i8* %1687, align 1, !alias.scope !704, !noalias !707
  %1689 = zext i8 %1688 to i64
  %1690 = and i64 %1673, 7
  %1691 = shl i64 %1685, %1690
  %1692 = or i64 %1691, %1689
  %1693 = bitcast i8* %1687 to i64*
  store i64 %1692, i64* %1693, align 8, !alias.scope !704, !noalias !707
  %1694 = add i64 %1673, %1682
  store i64 %1694, i64* %9, align 8, !alias.scope !707, !noalias !704
  br label %1695

1695:                                             ; preds = %1676, %1672, %1653, %1649, %1483, %1399, %1286, %385
  %1696 = phi i8* [ %138, %1483 ], [ %138, %1286 ], [ %138, %1399 ], [ %160, %385 ], [ %138, %1649 ], [ %138, %1653 ], [ %138, %1672 ], [ %138, %1676 ]
  %1697 = phi i64 [ %1191, %1483 ], [ %1191, %1286 ], [ %1191, %1399 ], [ %445, %385 ], [ %1191, %1649 ], [ %1191, %1653 ], [ %1191, %1672 ], [ %1191, %1676 ]
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1745, label %1699

1699:                                             ; preds = %1695
  %1700 = icmp ult i64 %1697, 98304
  %1701 = select i1 %1700, i64 %1697, i64 98304
  %1702 = load i64, i64* %9, align 8
  %1703 = add i64 %1702, 3
  %1704 = lshr i64 %1702, 3
  %1705 = getelementptr inbounds i8, i8* %10, i64 %1704
  %1706 = load i8, i8* %1705, align 1, !alias.scope !709, !noalias !712
  %1707 = zext i8 %1706 to i64
  %1708 = bitcast i8* %1705 to i64*
  store i64 %1707, i64* %1708, align 8, !alias.scope !709, !noalias !712
  %1709 = add i64 %1702, 1
  %1710 = icmp ult i64 %1701, 65537
  %1711 = select i1 %1710, i64 4, i64 5
  %1712 = add nsw i64 %1711, -4
  %1713 = lshr i64 %1709, 3
  %1714 = getelementptr inbounds i8, i8* %10, i64 %1713
  %1715 = load i8, i8* %1714, align 1, !alias.scope !714, !noalias !717
  %1716 = zext i8 %1715 to i64
  %1717 = and i64 %1709, 7
  %1718 = shl i64 %1712, %1717
  %1719 = or i64 %1718, %1716
  %1720 = bitcast i8* %1714 to i64*
  store i64 %1719, i64* %1720, align 8, !alias.scope !714, !noalias !717
  %1721 = shl nuw nsw i64 %1711, 2
  %1722 = add nsw i64 %1701, -1
  %1723 = lshr i64 %1703, 3
  %1724 = getelementptr inbounds i8, i8* %10, i64 %1723
  %1725 = load i8, i8* %1724, align 1, !alias.scope !719, !noalias !722
  %1726 = zext i8 %1725 to i64
  %1727 = and i64 %1703, 7
  %1728 = shl i64 %1722, %1727
  %1729 = or i64 %1728, %1726
  %1730 = bitcast i8* %1724 to i64*
  store i64 %1729, i64* %1730, align 8, !alias.scope !719, !noalias !722
  %1731 = add i64 %1703, %1721
  %1732 = lshr i64 %1731, 3
  %1733 = getelementptr inbounds i8, i8* %10, i64 %1732
  %1734 = load i8, i8* %1733, align 1, !alias.scope !724, !noalias !727
  %1735 = zext i8 %1734 to i64
  %1736 = bitcast i8* %1733 to i64*
  store i64 %1735, i64* %1736, align 8, !alias.scope !724, !noalias !727
  %1737 = add i64 %1731, 1
  %1738 = lshr i64 %1737, 3
  %1739 = getelementptr inbounds i8, i8* %10, i64 %1738
  %1740 = load i8, i8* %1739, align 1, !alias.scope !729, !noalias !732
  %1741 = zext i8 %1740 to i64
  %1742 = bitcast i8* %1739 to i64*
  store i64 %1741, i64* %1742, align 8, !alias.scope !729, !noalias !732
  %1743 = add i64 %1731, 14
  store i64 %1743, i64* %9, align 8, !alias.scope !732, !noalias !729
  %1744 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1696, i64 %1701, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %9, i8* %10) #6
  br label %124

1745:                                             ; preds = %1695
  %1746 = icmp eq i32 %3, 0
  br i1 %1746, label %1747, label %1748

1747:                                             ; preds = %1745
  store i8 0, i8* %8, align 1
  store i64 0, i64* %7, align 8
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %7, i8* %8) #6
  br label %1748

1748:                                             ; preds = %1745, %1747
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %16) #6
  ret void

1749:                                             ; preds = %257
  %1750 = getelementptr inbounds i8, i8* %249, i64 1
  %1751 = getelementptr inbounds i8, i8* %221, i64 %258
  %1752 = load i8, i8* %1751, align 1
  %1753 = load i8, i8* %1750, align 1
  %1754 = icmp eq i8 %1752, %1753
  br i1 %1754, label %1755, label %260, !prof !75

1755:                                             ; preds = %1749
  %1756 = add i64 %248, 2
  %1757 = icmp eq i64 %250, 2
  br i1 %1757, label %260, label %1758

1758:                                             ; preds = %1755
  %1759 = getelementptr inbounds i8, i8* %249, i64 2
  %1760 = getelementptr inbounds i8, i8* %221, i64 %1756
  %1761 = load i8, i8* %1760, align 1
  %1762 = load i8, i8* %1759, align 1
  %1763 = icmp eq i8 %1761, %1762
  br i1 %1763, label %1764, label %260, !prof !75

1764:                                             ; preds = %1758
  %1765 = add i64 %248, 3
  %1766 = icmp eq i64 %250, 3
  br i1 %1766, label %260, label %1767

1767:                                             ; preds = %1764
  %1768 = getelementptr inbounds i8, i8* %249, i64 3
  %1769 = getelementptr inbounds i8, i8* %221, i64 %1765
  %1770 = load i8, i8* %1769, align 1
  %1771 = load i8, i8* %1768, align 1
  %1772 = icmp eq i8 %1770, %1771
  br i1 %1772, label %1773, label %260, !prof !75

1773:                                             ; preds = %1767
  %1774 = add i64 %248, 4
  %1775 = icmp eq i64 %250, 4
  br i1 %1775, label %260, label %1776

1776:                                             ; preds = %1773
  %1777 = getelementptr inbounds i8, i8* %249, i64 4
  %1778 = getelementptr inbounds i8, i8* %221, i64 %1774
  %1779 = load i8, i8* %1778, align 1
  %1780 = load i8, i8* %1777, align 1
  %1781 = icmp eq i8 %1779, %1780
  br i1 %1781, label %1782, label %260, !prof !75

1782:                                             ; preds = %1776
  %1783 = add i64 %248, 5
  %1784 = icmp eq i64 %250, 5
  br i1 %1784, label %260, label %1785

1785:                                             ; preds = %1782
  %1786 = getelementptr inbounds i8, i8* %249, i64 5
  %1787 = getelementptr inbounds i8, i8* %221, i64 %1783
  %1788 = load i8, i8* %1787, align 1
  %1789 = load i8, i8* %1786, align 1
  %1790 = icmp eq i8 %1788, %1789
  br i1 %1790, label %1791, label %260, !prof !75

1791:                                             ; preds = %1785
  %1792 = add i64 %248, 6
  %1793 = icmp eq i64 %250, 6
  br i1 %1793, label %260, label %1794

1794:                                             ; preds = %1791
  %1795 = getelementptr inbounds i8, i8* %249, i64 6
  %1796 = getelementptr inbounds i8, i8* %221, i64 %1792
  %1797 = load i8, i8* %1796, align 1
  %1798 = load i8, i8* %1795, align 1
  %1799 = icmp eq i8 %1797, %1798
  %1800 = add i64 %248, 7
  %1801 = select i1 %1799, i64 %1800, i64 %1792, !prof !75
  br label %260

1802:                                             ; preds = %962
  %1803 = getelementptr inbounds i8, i8* %954, i64 1
  %1804 = getelementptr inbounds i8, i8* %925, i64 %963
  %1805 = load i8, i8* %1804, align 1
  %1806 = load i8, i8* %1803, align 1
  %1807 = icmp eq i8 %1805, %1806
  br i1 %1807, label %1808, label %965, !prof !75

1808:                                             ; preds = %1802
  %1809 = add i64 %953, 2
  %1810 = icmp eq i64 %955, 2
  br i1 %1810, label %965, label %1811

1811:                                             ; preds = %1808
  %1812 = getelementptr inbounds i8, i8* %954, i64 2
  %1813 = getelementptr inbounds i8, i8* %925, i64 %1809
  %1814 = load i8, i8* %1813, align 1
  %1815 = load i8, i8* %1812, align 1
  %1816 = icmp eq i8 %1814, %1815
  br i1 %1816, label %1817, label %965, !prof !75

1817:                                             ; preds = %1811
  %1818 = add i64 %953, 3
  %1819 = icmp eq i64 %955, 3
  br i1 %1819, label %965, label %1820

1820:                                             ; preds = %1817
  %1821 = getelementptr inbounds i8, i8* %954, i64 3
  %1822 = getelementptr inbounds i8, i8* %925, i64 %1818
  %1823 = load i8, i8* %1822, align 1
  %1824 = load i8, i8* %1821, align 1
  %1825 = icmp eq i8 %1823, %1824
  br i1 %1825, label %1826, label %965, !prof !75

1826:                                             ; preds = %1820
  %1827 = add i64 %953, 4
  %1828 = icmp eq i64 %955, 4
  br i1 %1828, label %965, label %1829

1829:                                             ; preds = %1826
  %1830 = getelementptr inbounds i8, i8* %954, i64 4
  %1831 = getelementptr inbounds i8, i8* %925, i64 %1827
  %1832 = load i8, i8* %1831, align 1
  %1833 = load i8, i8* %1830, align 1
  %1834 = icmp eq i8 %1832, %1833
  br i1 %1834, label %1835, label %965, !prof !75

1835:                                             ; preds = %1829
  %1836 = add i64 %953, 5
  %1837 = icmp eq i64 %955, 5
  br i1 %1837, label %965, label %1838

1838:                                             ; preds = %1835
  %1839 = getelementptr inbounds i8, i8* %954, i64 5
  %1840 = getelementptr inbounds i8, i8* %925, i64 %1836
  %1841 = load i8, i8* %1840, align 1
  %1842 = load i8, i8* %1839, align 1
  %1843 = icmp eq i8 %1841, %1842
  br i1 %1843, label %1844, label %965, !prof !75

1844:                                             ; preds = %1838
  %1845 = add i64 %953, 6
  %1846 = icmp eq i64 %955, 6
  br i1 %1846, label %965, label %1847

1847:                                             ; preds = %1844
  %1848 = getelementptr inbounds i8, i8* %954, i64 6
  %1849 = getelementptr inbounds i8, i8* %925, i64 %1845
  %1850 = load i8, i8* %1849, align 1
  %1851 = load i8, i8* %1848, align 1
  %1852 = icmp eq i8 %1850, %1851
  %1853 = add i64 %953, 7
  %1854 = select i1 %1852, i64 %1853, i64 %1845, !prof !75
  br label %965
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentFastImpl13(%struct.MemoryManager*, i8*, i64, i32, i32* nocapture, i8*, i16*, i64*, i8*, i64*, i8*) unnamed_addr #2 {
  %12 = alloca [256 x i64], align 16
  %13 = alloca [128 x i32], align 16
  %14 = alloca [256 x i8], align 16
  %15 = alloca [256 x i16], align 16
  %16 = bitcast [128 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 512, i1 false) #6
  %17 = icmp ult i64 %2, 98304
  %18 = select i1 %17, i64 %2, i64 98304
  %19 = load i64, i64* %9, align 8
  %20 = add i64 %19, 3
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 256, i1 false) #6
  %22 = bitcast [256 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 512, i1 false) #6
  %23 = lshr i64 %19, 3
  %24 = getelementptr inbounds i8, i8* %10, i64 %23
  %25 = load i8, i8* %24, align 1, !alias.scope !734, !noalias !737
  %26 = zext i8 %25 to i64
  %27 = bitcast i8* %24 to i64*
  store i64 %26, i64* %27, align 8, !alias.scope !734, !noalias !737
  %28 = add i64 %19, 1
  %29 = icmp ult i64 %18, 65537
  %30 = select i1 %29, i64 4, i64 5
  %31 = add nsw i64 %30, -4
  %32 = lshr i64 %28, 3
  %33 = getelementptr inbounds i8, i8* %10, i64 %32
  %34 = load i8, i8* %33, align 1, !alias.scope !739, !noalias !742
  %35 = zext i8 %34 to i64
  %36 = and i64 %28, 7
  %37 = shl i64 %31, %36
  %38 = or i64 %37, %35
  %39 = bitcast i8* %33 to i64*
  store i64 %38, i64* %39, align 8, !alias.scope !739, !noalias !742
  %40 = shl nuw nsw i64 %30, 2
  %41 = add nsw i64 %18, -1
  %42 = lshr i64 %20, 3
  %43 = getelementptr inbounds i8, i8* %10, i64 %42
  %44 = load i8, i8* %43, align 1, !alias.scope !744, !noalias !747
  %45 = zext i8 %44 to i64
  %46 = and i64 %20, 7
  %47 = shl i64 %41, %46
  %48 = or i64 %47, %45
  %49 = bitcast i8* %43 to i64*
  store i64 %48, i64* %49, align 8, !alias.scope !744, !noalias !747
  %50 = add i64 %20, %40
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds i8, i8* %10, i64 %51
  %53 = load i8, i8* %52, align 1, !alias.scope !749, !noalias !752
  %54 = zext i8 %53 to i64
  %55 = bitcast i8* %52 to i64*
  store i64 %54, i64* %55, align 8, !alias.scope !749, !noalias !752
  %56 = add i64 %50, 1
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds i8, i8* %10, i64 %57
  %59 = load i8, i8* %58, align 1, !alias.scope !754, !noalias !757
  %60 = zext i8 %59 to i64
  %61 = bitcast i8* %58 to i64*
  store i64 %60, i64* %61, align 8, !alias.scope !754, !noalias !757
  %62 = add i64 %50, 14
  store i64 %62, i64* %9, align 8, !alias.scope !757, !noalias !754
  %63 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 0
  %64 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1, i64 %18, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  %65 = load i64, i64* %7, align 8
  %66 = icmp ugt i64 %65, 7
  %67 = load i64, i64* %9, align 8
  br i1 %66, label %68, label %89

68:                                               ; preds = %11
  %69 = and i64 %67, 7
  br label %70

70:                                               ; preds = %68, %70
  %71 = phi i64 [ %84, %70 ], [ %67, %68 ]
  %72 = phi i64 [ %85, %70 ], [ 0, %68 ]
  %73 = lshr exact i64 %72, 3
  %74 = getelementptr inbounds i8, i8* %8, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = lshr i64 %71, 3
  %78 = getelementptr inbounds i8, i8* %10, i64 %77
  %79 = load i8, i8* %78, align 1, !alias.scope !759, !noalias !762
  %80 = zext i8 %79 to i64
  %81 = shl i64 %76, %69
  %82 = or i64 %81, %80
  %83 = bitcast i8* %78 to i64*
  store i64 %82, i64* %83, align 8, !alias.scope !759, !noalias !762
  %84 = add i64 %71, 8
  store i64 %84, i64* %9, align 8, !alias.scope !762, !noalias !759
  %85 = add i64 %72, 8
  %86 = or i64 %85, 7
  %87 = load i64, i64* %7, align 8
  %88 = icmp ult i64 %86, %87
  br i1 %88, label %70, label %89

89:                                               ; preds = %70, %11
  %90 = phi i64 [ %67, %11 ], [ %84, %70 ]
  %91 = phi i64 [ %65, %11 ], [ %87, %70 ]
  %92 = and i64 %91, 7
  %93 = lshr i64 %91, 3
  %94 = getelementptr inbounds i8, i8* %8, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = lshr i64 %90, 3
  %98 = getelementptr inbounds i8, i8* %10, i64 %97
  %99 = load i8, i8* %98, align 1, !alias.scope !764, !noalias !767
  %100 = zext i8 %99 to i64
  %101 = and i64 %90, 7
  %102 = shl i64 %96, %101
  %103 = or i64 %102, %100
  %104 = bitcast i8* %98 to i64*
  store i64 %103, i64* %104, align 8, !alias.scope !764, !noalias !767
  %105 = add i64 %92, %90
  store i64 %105, i64* %9, align 8, !alias.scope !767, !noalias !764
  %106 = ptrtoint i8* %1 to i64
  %107 = getelementptr inbounds i8, i8* %5, i64 63
  %108 = getelementptr inbounds i16, i16* %6, i64 63
  %109 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 63
  %110 = getelementptr inbounds i8, i8* %5, i64 62
  %111 = getelementptr inbounds i16, i16* %6, i64 62
  %112 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 62
  %113 = getelementptr inbounds i8, i8* %5, i64 61
  %114 = getelementptr inbounds i16, i16* %6, i64 61
  %115 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 61
  %116 = getelementptr inbounds i8, i8* %5, i64 64
  %117 = getelementptr inbounds i16, i16* %6, i64 64
  %118 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 64
  %119 = getelementptr inbounds i8, i8* %5, i64 39
  %120 = getelementptr inbounds i16, i16* %6, i64 39
  %121 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 39
  %122 = bitcast [256 x i64]* %12 to i8*
  %123 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 0
  br label %124

124:                                              ; preds = %1699, %89
  %125 = phi i64 [ %1703, %1699 ], [ %20, %89 ]
  %126 = phi i64 [ %1744, %1699 ], [ %64, %89 ]
  %127 = phi i64 [ %1701, %1699 ], [ %18, %89 ]
  %128 = phi i8* [ %1696, %1699 ], [ %1, %89 ]
  %129 = phi i64 [ %1697, %1699 ], [ %2, %89 ]
  %130 = ptrtoint i8* %128 to i64
  %131 = icmp ult i64 %126, 981
  br label %132

132:                                              ; preds = %1255, %124
  %133 = phi i64 [ %127, %124 ], [ %1196, %1255 ]
  %134 = phi i64 [ %127, %124 ], [ %1193, %1255 ]
  %135 = phi i8* [ %128, %124 ], [ %1190, %1255 ]
  %136 = phi i64 [ %129, %124 ], [ %1191, %1255 ]
  %137 = phi i8* [ %128, %124 ], [ %138, %1255 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %16, i8* align 16 bitcast ([128 x i32]* @kCmdHistoSeed to i8*), i64 512, i1 false) #6
  %138 = getelementptr inbounds i8, i8* %137, i64 %134
  %139 = icmp ugt i64 %134, 15
  br i1 %139, label %140, label %1189, !prof !75

140:                                              ; preds = %132
  %141 = add nsw i64 %134, -5
  %142 = add i64 %136, -16
  %143 = icmp ult i64 %141, %142
  %144 = select i1 %143, i64 %141, i64 %142
  %145 = getelementptr inbounds i8, i8* %137, i64 %144
  %146 = ptrtoint i8* %138 to i64
  br label %147

147:                                              ; preds = %1184, %140
  %148 = phi i8* [ %137, %140 ], [ %1185, %1184 ]
  %149 = phi i32 [ -1, %140 ], [ %1186, %1184 ]
  %150 = phi i8* [ %135, %140 ], [ %1185, %1184 ]
  %151 = getelementptr inbounds i8, i8* %148, i64 1
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = sext i32 %149 to i64
  %155 = sub nsw i64 0, %154
  %156 = icmp sgt i32 %149, 0
  br label %157

157:                                              ; preds = %211, %147
  %158 = phi i64 [ %153, %147 ], [ %170, %211 ]
  %159 = phi i32 [ 32, %147 ], [ %163, %211 ]
  %160 = phi i8* [ %151, %147 ], [ %166, %211 ]
  %161 = mul i64 %158, 8503243848024064
  %162 = lshr i64 %161, 51
  %163 = add i32 %159, 1
  %164 = lshr i32 %159, 5
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %160, i64 %165
  %167 = icmp ugt i8* %166, %145
  br i1 %167, label %1189, label %168, !prof !76

168:                                              ; preds = %157
  %169 = bitcast i8* %166 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds i8, i8* %160, i64 %155
  %172 = bitcast i8* %160 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = bitcast i8* %171 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %173, %175
  br i1 %176, label %177, label %189

177:                                              ; preds = %168
  %178 = getelementptr inbounds i8, i8* %160, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds i8, i8* %171, i64 4
  %181 = load i8, i8* %180, align 1
  %182 = icmp eq i8 %179, %181
  %183 = and i1 %156, %182
  br i1 %183, label %184, label %189, !prof !77

184:                                              ; preds = %177
  %185 = ptrtoint i8* %160 to i64
  %186 = sub i64 %185, %106
  %187 = trunc i64 %186 to i32
  %188 = getelementptr inbounds i32, i32* %4, i64 %162
  store i32 %187, i32* %188, align 4
  br label %214

189:                                              ; preds = %177, %168
  %190 = getelementptr inbounds i32, i32* %4, i64 %162
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i8, i8* %1, i64 %192
  %194 = ptrtoint i8* %160 to i64
  %195 = sub i64 %194, %106
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %190, align 4
  %197 = load i32, i32* %172, align 4
  %198 = bitcast i8* %193 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %201, label %208

201:                                              ; preds = %189
  %202 = getelementptr inbounds i8, i8* %160, i64 4
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds i8, i8* %193, i64 4
  %205 = load i8, i8* %204, align 1
  %206 = icmp eq i8 %203, %205
  %207 = zext i1 %206 to i32
  br label %208

208:                                              ; preds = %201, %189
  %209 = phi i32 [ 0, %189 ], [ %207, %201 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212, !prof !75

211:                                              ; preds = %208, %214
  br label %157

212:                                              ; preds = %208
  %213 = ptrtoint i8* %160 to i64
  br label %214

214:                                              ; preds = %212, %184
  %215 = phi i64 [ %185, %184 ], [ %213, %212 ]
  %216 = phi i8* [ %171, %184 ], [ %193, %212 ]
  %217 = ptrtoint i8* %216 to i64
  %218 = sub i64 %215, %217
  %219 = icmp sgt i64 %218, 262128
  br i1 %219, label %211, label %220

220:                                              ; preds = %214
  %221 = getelementptr inbounds i8, i8* %216, i64 5
  %222 = getelementptr inbounds i8, i8* %160, i64 5
  %223 = sub i64 %146, %215
  %224 = add i64 %223, -5
  %225 = lshr i64 %224, 3
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %247, label %227, !prof !76

227:                                              ; preds = %220, %237
  %228 = phi i64 [ %240, %237 ], [ %225, %220 ]
  %229 = phi i8* [ %238, %237 ], [ %222, %220 ]
  %230 = phi i64 [ %239, %237 ], [ 0, %220 ]
  %231 = bitcast i8* %229 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds i8, i8* %221, i64 %230
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = icmp eq i64 %232, %235
  br i1 %236, label %237, label %242, !prof !76

237:                                              ; preds = %227
  %238 = getelementptr inbounds i8, i8* %229, i64 8
  %239 = add nuw i64 %230, 8
  %240 = add nsw i64 %228, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %247, label %227, !prof !76

242:                                              ; preds = %227
  %243 = xor i64 %235, %232
  %244 = call i64 @llvm.cttz.i64(i64 %243, i1 true) #6, !range !78
  %245 = lshr i64 %244, 3
  %246 = or i64 %245, %230
  br label %260

247:                                              ; preds = %237, %220
  %248 = phi i64 [ 0, %220 ], [ %239, %237 ]
  %249 = phi i8* [ %222, %220 ], [ %238, %237 ]
  %250 = and i64 %224, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds i8, i8* %221, i64 %248
  %254 = load i8, i8* %253, align 1
  %255 = load i8, i8* %249, align 1
  %256 = icmp eq i8 %254, %255
  br i1 %256, label %257, label %260, !prof !75

257:                                              ; preds = %252
  %258 = add i64 %248, 1
  %259 = icmp eq i64 %250, 1
  br i1 %259, label %260, label %1749

260:                                              ; preds = %1794, %257, %252, %1749, %1755, %1758, %1764, %1767, %1773, %1776, %1782, %1785, %1791, %247, %242
  %261 = phi i64 [ %246, %242 ], [ %248, %247 ], [ %248, %252 ], [ %258, %257 ], [ %258, %1749 ], [ %1756, %1755 ], [ %1756, %1758 ], [ %1765, %1764 ], [ %1765, %1767 ], [ %1774, %1773 ], [ %1774, %1776 ], [ %1783, %1782 ], [ %1783, %1785 ], [ %1792, %1791 ], [ %1801, %1794 ]
  %262 = add i64 %261, 5
  %263 = trunc i64 %218 to i32
  %264 = ptrtoint i8* %150 to i64
  %265 = sub i64 %215, %264
  %266 = getelementptr inbounds i8, i8* %160, i64 %262
  %267 = icmp ult i64 %265, 6210
  br i1 %267, label %268, label %380, !prof !75

268:                                              ; preds = %260
  %269 = icmp ult i64 %265, 6
  br i1 %269, label %502, label %270

270:                                              ; preds = %268
  %271 = icmp ult i64 %265, 130
  br i1 %271, label %272, label %313

272:                                              ; preds = %270
  %273 = add nsw i64 %265, -2
  %274 = trunc i64 %273 to i32
  %275 = call i32 @llvm.ctlz.i32(i32 %274, i1 true) #6, !range !7
  %276 = sub nsw i32 30, %275
  %277 = zext i32 %276 to i64
  %278 = lshr i64 %273, %277
  %279 = shl nsw i32 %276, 1
  %280 = zext i32 %279 to i64
  %281 = add nuw nsw i64 %280, 42
  %282 = add nuw nsw i64 %281, %278
  %283 = getelementptr inbounds i8, i8* %5, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = getelementptr inbounds i16, i16* %6, i64 %282
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i64
  %289 = load i64, i64* %9, align 8, !alias.scope !769, !noalias !772
  %290 = lshr i64 %289, 3
  %291 = getelementptr inbounds i8, i8* %10, i64 %290
  %292 = load i8, i8* %291, align 1, !alias.scope !772, !noalias !769
  %293 = zext i8 %292 to i64
  %294 = and i64 %289, 7
  %295 = shl i64 %288, %294
  %296 = or i64 %295, %293
  %297 = bitcast i8* %291 to i64*
  store i64 %296, i64* %297, align 8, !alias.scope !772, !noalias !769
  %298 = add i64 %289, %285
  %299 = shl i64 %278, %277
  %300 = sub i64 %273, %299
  %301 = lshr i64 %298, 3
  %302 = getelementptr inbounds i8, i8* %10, i64 %301
  %303 = load i8, i8* %302, align 1, !alias.scope !774, !noalias !777
  %304 = zext i8 %303 to i64
  %305 = and i64 %298, 7
  %306 = shl i64 %300, %305
  %307 = or i64 %306, %304
  %308 = bitcast i8* %302 to i64*
  store i64 %307, i64* %308, align 8, !alias.scope !774, !noalias !777
  %309 = add i64 %298, %277
  store i64 %309, i64* %9, align 8, !alias.scope !777, !noalias !774
  %310 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %282
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, 1
  store i32 %312, i32* %310, align 4
  br label %524

313:                                              ; preds = %270
  %314 = icmp ult i64 %265, 2114
  br i1 %314, label %315, label %353

315:                                              ; preds = %313
  %316 = add nsw i64 %265, -66
  %317 = trunc i64 %316 to i32
  %318 = call i32 @llvm.ctlz.i32(i32 %317, i1 true) #6, !range !7
  %319 = xor i32 %318, 31
  %320 = add nuw nsw i32 %319, 50
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %5, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds i16, i16* %6, i64 %321
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i64
  %328 = load i64, i64* %9, align 8, !alias.scope !779, !noalias !782
  %329 = lshr i64 %328, 3
  %330 = getelementptr inbounds i8, i8* %10, i64 %329
  %331 = load i8, i8* %330, align 1, !alias.scope !782, !noalias !779
  %332 = zext i8 %331 to i64
  %333 = and i64 %328, 7
  %334 = shl i64 %327, %333
  %335 = or i64 %334, %332
  %336 = bitcast i8* %330 to i64*
  store i64 %335, i64* %336, align 8, !alias.scope !782, !noalias !779
  %337 = add i64 %328, %324
  %338 = zext i32 %319 to i64
  %339 = shl i64 1, %338
  %340 = sub i64 %316, %339
  %341 = lshr i64 %337, 3
  %342 = getelementptr inbounds i8, i8* %10, i64 %341
  %343 = load i8, i8* %342, align 1, !alias.scope !784, !noalias !787
  %344 = zext i8 %343 to i64
  %345 = and i64 %337, 7
  %346 = shl i64 %340, %345
  %347 = or i64 %346, %344
  %348 = bitcast i8* %342 to i64*
  store i64 %347, i64* %348, align 8, !alias.scope !784, !noalias !787
  %349 = add i64 %337, %338
  store i64 %349, i64* %9, align 8, !alias.scope !787, !noalias !784
  %350 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %321
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %351, 1
  store i32 %352, i32* %350, align 4
  br label %524

353:                                              ; preds = %313
  %354 = load i8, i8* %113, align 1
  %355 = zext i8 %354 to i64
  %356 = load i16, i16* %114, align 2
  %357 = zext i16 %356 to i64
  %358 = load i64, i64* %9, align 8, !alias.scope !789, !noalias !792
  %359 = lshr i64 %358, 3
  %360 = getelementptr inbounds i8, i8* %10, i64 %359
  %361 = load i8, i8* %360, align 1, !alias.scope !792, !noalias !789
  %362 = zext i8 %361 to i64
  %363 = and i64 %358, 7
  %364 = shl i64 %357, %363
  %365 = or i64 %364, %362
  %366 = bitcast i8* %360 to i64*
  store i64 %365, i64* %366, align 8, !alias.scope !792, !noalias !789
  %367 = add i64 %358, %355
  %368 = add nsw i64 %265, -2114
  %369 = lshr i64 %367, 3
  %370 = getelementptr inbounds i8, i8* %10, i64 %369
  %371 = load i8, i8* %370, align 1, !alias.scope !794, !noalias !797
  %372 = zext i8 %371 to i64
  %373 = and i64 %367, 7
  %374 = shl i64 %368, %373
  %375 = or i64 %374, %372
  %376 = bitcast i8* %370 to i64*
  store i64 %375, i64* %376, align 8, !alias.scope !794, !noalias !797
  %377 = add i64 %367, 12
  store i64 %377, i64* %9, align 8, !alias.scope !797, !noalias !794
  %378 = load i32, i32* %115, align 4
  %379 = add i32 %378, 1
  store i32 %379, i32* %115, align 4
  br label %524

380:                                              ; preds = %260
  %381 = sub i64 %264, %130
  %382 = mul i64 %381, 50
  %383 = icmp ugt i64 %382, %265
  %384 = or i1 %131, %383
  br i1 %384, label %446, label %385

385:                                              ; preds = %380
  %386 = add i64 %125, -3
  %387 = sub i64 %215, %130
  %388 = trunc i64 %386 to i32
  %389 = and i32 %388, 7
  %390 = shl nsw i32 -1, %389
  %391 = lshr i64 %386, 3
  %392 = getelementptr inbounds i8, i8* %10, i64 %391
  %393 = load i8, i8* %392, align 1
  %394 = trunc i32 %390 to i8
  %395 = and i8 %394, 127
  %396 = xor i8 %395, 127
  %397 = and i8 %393, %396
  store i8 %397, i8* %392, align 1
  store i64 %386, i64* %9, align 8
  %398 = load i8, i8* %392, align 1, !alias.scope !799, !noalias !802
  %399 = zext i8 %398 to i64
  %400 = bitcast i8* %392 to i64*
  store i64 %399, i64* %400, align 8, !alias.scope !799, !noalias !802
  %401 = add i64 %125, -2
  %402 = icmp ult i64 %387, 65537
  %403 = icmp ult i64 %387, 1048577
  %404 = select i1 %403, i64 5, i64 6
  %405 = select i1 %402, i64 4, i64 %404
  %406 = add nsw i64 %405, -4
  %407 = lshr i64 %401, 3
  %408 = getelementptr inbounds i8, i8* %10, i64 %407
  %409 = load i8, i8* %408, align 1, !alias.scope !804, !noalias !807
  %410 = zext i8 %409 to i64
  %411 = and i64 %401, 7
  %412 = shl i64 %406, %411
  %413 = or i64 %412, %410
  %414 = bitcast i8* %408 to i64*
  store i64 %413, i64* %414, align 8, !alias.scope !804, !noalias !807
  %415 = shl nuw nsw i64 %405, 2
  %416 = add i64 %387, -1
  %417 = lshr i64 %125, 3
  %418 = getelementptr inbounds i8, i8* %10, i64 %417
  %419 = load i8, i8* %418, align 1, !alias.scope !809, !noalias !812
  %420 = zext i8 %419 to i64
  %421 = and i64 %125, 7
  %422 = shl i64 %416, %421
  %423 = or i64 %422, %420
  %424 = bitcast i8* %418 to i64*
  store i64 %423, i64* %424, align 8, !alias.scope !809, !noalias !812
  %425 = add i64 %415, %125
  %426 = lshr i64 %425, 3
  %427 = getelementptr inbounds i8, i8* %10, i64 %426
  %428 = load i8, i8* %427, align 1, !alias.scope !814, !noalias !817
  %429 = zext i8 %428 to i64
  %430 = and i64 %425, 7
  %431 = shl i64 1, %430
  %432 = or i64 %431, %429
  %433 = bitcast i8* %427 to i64*
  store i64 %432, i64* %433, align 8, !alias.scope !814, !noalias !817
  %434 = add i64 %425, 8
  %435 = and i64 %434, 4294967288
  store i64 %435, i64* %9, align 8
  %436 = lshr exact i64 %435, 3
  %437 = getelementptr inbounds i8, i8* %10, i64 %436
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %437, i8* align 1 %128, i64 %387, i1 false) #6
  %438 = shl i64 %387, 3
  %439 = load i64, i64* %9, align 8
  %440 = add i64 %439, %438
  store i64 %440, i64* %9, align 8
  %441 = lshr i64 %440, 3
  %442 = getelementptr inbounds i8, i8* %10, i64 %441
  store i8 0, i8* %442, align 1
  %443 = ptrtoint i8* %137 to i64
  %444 = add i64 %136, %443
  %445 = sub i64 %444, %215
  br label %1695

446:                                              ; preds = %380
  %447 = icmp ult i64 %265, 22594
  br i1 %447, label %448, label %475

448:                                              ; preds = %446
  %449 = load i8, i8* %110, align 1
  %450 = zext i8 %449 to i64
  %451 = load i16, i16* %111, align 2
  %452 = zext i16 %451 to i64
  %453 = load i64, i64* %9, align 8, !alias.scope !819, !noalias !822
  %454 = lshr i64 %453, 3
  %455 = getelementptr inbounds i8, i8* %10, i64 %454
  %456 = load i8, i8* %455, align 1, !alias.scope !822, !noalias !819
  %457 = zext i8 %456 to i64
  %458 = and i64 %453, 7
  %459 = shl i64 %452, %458
  %460 = or i64 %459, %457
  %461 = bitcast i8* %455 to i64*
  store i64 %460, i64* %461, align 8, !alias.scope !822, !noalias !819
  %462 = add i64 %453, %450
  %463 = add nsw i64 %265, -6210
  %464 = lshr i64 %462, 3
  %465 = getelementptr inbounds i8, i8* %10, i64 %464
  %466 = load i8, i8* %465, align 1, !alias.scope !824, !noalias !827
  %467 = zext i8 %466 to i64
  %468 = and i64 %462, 7
  %469 = shl i64 %463, %468
  %470 = or i64 %469, %467
  %471 = bitcast i8* %465 to i64*
  store i64 %470, i64* %471, align 8, !alias.scope !824, !noalias !827
  %472 = add i64 %462, 14
  store i64 %472, i64* %9, align 8, !alias.scope !827, !noalias !824
  %473 = load i32, i32* %112, align 8
  %474 = add i32 %473, 1
  store i32 %474, i32* %112, align 8
  br label %524

475:                                              ; preds = %446
  %476 = load i8, i8* %107, align 1
  %477 = zext i8 %476 to i64
  %478 = load i16, i16* %108, align 2
  %479 = zext i16 %478 to i64
  %480 = load i64, i64* %9, align 8, !alias.scope !829, !noalias !832
  %481 = lshr i64 %480, 3
  %482 = getelementptr inbounds i8, i8* %10, i64 %481
  %483 = load i8, i8* %482, align 1, !alias.scope !832, !noalias !829
  %484 = zext i8 %483 to i64
  %485 = and i64 %480, 7
  %486 = shl i64 %479, %485
  %487 = or i64 %486, %484
  %488 = bitcast i8* %482 to i64*
  store i64 %487, i64* %488, align 8, !alias.scope !832, !noalias !829
  %489 = add i64 %480, %477
  %490 = add i64 %265, -22594
  %491 = lshr i64 %489, 3
  %492 = getelementptr inbounds i8, i8* %10, i64 %491
  %493 = load i8, i8* %492, align 1, !alias.scope !834, !noalias !837
  %494 = zext i8 %493 to i64
  %495 = and i64 %489, 7
  %496 = shl i64 %490, %495
  %497 = or i64 %496, %494
  %498 = bitcast i8* %492 to i64*
  store i64 %497, i64* %498, align 8, !alias.scope !834, !noalias !837
  %499 = add i64 %489, 24
  store i64 %499, i64* %9, align 8, !alias.scope !837, !noalias !834
  %500 = load i32, i32* %109, align 4
  %501 = add i32 %500, 1
  store i32 %501, i32* %109, align 4
  br label %524

502:                                              ; preds = %268
  %503 = add nuw nsw i64 %265, 40
  %504 = getelementptr inbounds i8, i8* %5, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = zext i8 %505 to i64
  %507 = getelementptr inbounds i16, i16* %6, i64 %503
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i64
  %510 = load i64, i64* %9, align 8, !alias.scope !839, !noalias !842
  %511 = lshr i64 %510, 3
  %512 = getelementptr inbounds i8, i8* %10, i64 %511
  %513 = load i8, i8* %512, align 1, !alias.scope !842, !noalias !839
  %514 = zext i8 %513 to i64
  %515 = and i64 %510, 7
  %516 = shl i64 %509, %515
  %517 = or i64 %516, %514
  %518 = bitcast i8* %512 to i64*
  store i64 %517, i64* %518, align 8, !alias.scope !842, !noalias !839
  %519 = add i64 %510, %506
  store i64 %519, i64* %9, align 8, !alias.scope !839, !noalias !842
  %520 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %503
  %521 = load i32, i32* %520, align 4
  %522 = add i32 %521, 1
  store i32 %522, i32* %520, align 4
  %523 = icmp eq i64 %265, 0
  br i1 %523, label %599, label %524

524:                                              ; preds = %502, %475, %448, %353, %315, %272
  %525 = phi i64 [ %519, %502 ], [ %499, %475 ], [ %472, %448 ], [ %377, %353 ], [ %349, %315 ], [ %309, %272 ]
  %526 = and i64 %265, 1
  %527 = add i64 %264, 1
  %528 = icmp eq i64 %215, %527
  br i1 %528, label %575, label %529

529:                                              ; preds = %524
  %530 = sub i64 %265, %526
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ %525, %529 ], [ %571, %531 ]
  %533 = phi i64 [ 0, %529 ], [ %572, %531 ]
  %534 = phi i64 [ %530, %529 ], [ %573, %531 ]
  %535 = getelementptr inbounds i8, i8* %150, i64 %533
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i64
  %538 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i64
  %541 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %537
  %542 = load i16, i16* %541, align 2
  %543 = zext i16 %542 to i64
  %544 = lshr i64 %532, 3
  %545 = getelementptr inbounds i8, i8* %10, i64 %544
  %546 = load i8, i8* %545, align 1, !alias.scope !844, !noalias !847
  %547 = zext i8 %546 to i64
  %548 = and i64 %532, 7
  %549 = shl i64 %543, %548
  %550 = or i64 %549, %547
  %551 = bitcast i8* %545 to i64*
  store i64 %550, i64* %551, align 8, !alias.scope !844, !noalias !847
  %552 = add i64 %532, %540
  store i64 %552, i64* %9, align 8, !alias.scope !847, !noalias !844
  %553 = or i64 %533, 1
  %554 = getelementptr inbounds i8, i8* %150, i64 %553
  %555 = load i8, i8* %554, align 1
  %556 = zext i8 %555 to i64
  %557 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %556
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i64
  %560 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %556
  %561 = load i16, i16* %560, align 2
  %562 = zext i16 %561 to i64
  %563 = lshr i64 %552, 3
  %564 = getelementptr inbounds i8, i8* %10, i64 %563
  %565 = load i8, i8* %564, align 1, !alias.scope !844, !noalias !847
  %566 = zext i8 %565 to i64
  %567 = and i64 %552, 7
  %568 = shl i64 %562, %567
  %569 = or i64 %568, %566
  %570 = bitcast i8* %564 to i64*
  store i64 %569, i64* %570, align 8, !alias.scope !844, !noalias !847
  %571 = add i64 %552, %559
  store i64 %571, i64* %9, align 8, !alias.scope !847, !noalias !844
  %572 = add nuw i64 %533, 2
  %573 = add i64 %534, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %531

575:                                              ; preds = %531, %524
  %576 = phi i64 [ undef, %524 ], [ %571, %531 ]
  %577 = phi i64 [ %525, %524 ], [ %571, %531 ]
  %578 = phi i64 [ 0, %524 ], [ %572, %531 ]
  %579 = icmp eq i64 %526, 0
  br i1 %579, label %599, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i8, i8* %150, i64 %578
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i64
  %584 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  %587 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %583
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i64
  %590 = lshr i64 %577, 3
  %591 = getelementptr inbounds i8, i8* %10, i64 %590
  %592 = load i8, i8* %591, align 1, !alias.scope !844, !noalias !847
  %593 = zext i8 %592 to i64
  %594 = and i64 %577, 7
  %595 = shl i64 %589, %594
  %596 = or i64 %595, %593
  %597 = bitcast i8* %591 to i64*
  store i64 %596, i64* %597, align 8, !alias.scope !844, !noalias !847
  %598 = add i64 %577, %586
  store i64 %598, i64* %9, align 8, !alias.scope !847, !noalias !844
  br label %599

599:                                              ; preds = %580, %575, %502
  %600 = phi i64 [ %519, %502 ], [ %576, %575 ], [ %598, %580 ]
  %601 = icmp eq i32 %149, %263
  br i1 %601, label %602, label %618

602:                                              ; preds = %599
  %603 = load i8, i8* %116, align 1
  %604 = zext i8 %603 to i64
  %605 = load i16, i16* %117, align 2
  %606 = zext i16 %605 to i64
  %607 = lshr i64 %600, 3
  %608 = getelementptr inbounds i8, i8* %10, i64 %607
  %609 = load i8, i8* %608, align 1, !alias.scope !849, !noalias !852
  %610 = zext i8 %609 to i64
  %611 = and i64 %600, 7
  %612 = shl i64 %606, %611
  %613 = or i64 %612, %610
  %614 = bitcast i8* %608 to i64*
  store i64 %613, i64* %614, align 8, !alias.scope !849, !noalias !852
  %615 = add i64 %600, %604
  store i64 %615, i64* %9, align 8, !alias.scope !852, !noalias !849
  %616 = load i32, i32* %118, align 16
  %617 = add i32 %616, 1
  store i32 %617, i32* %118, align 16
  br label %664

618:                                              ; preds = %599
  %619 = shl i64 %218, 32
  %620 = ashr exact i64 %619, 32
  %621 = add nsw i64 %620, 3
  %622 = trunc i64 %621 to i32
  %623 = call i32 @llvm.ctlz.i32(i32 %622, i1 true) #6, !range !7
  %624 = xor i32 %623, 31
  %625 = add nsw i32 %624, -1
  %626 = zext i32 %625 to i64
  %627 = lshr i64 %621, %626
  %628 = and i64 %627, 1
  %629 = or i64 %628, 2
  %630 = shl i64 %629, %626
  %631 = shl nuw nsw i32 %624, 1
  %632 = add nsw i32 %631, -4
  %633 = zext i32 %632 to i64
  %634 = or i64 %628, %633
  %635 = add nuw nsw i64 %634, 80
  %636 = getelementptr inbounds i8, i8* %5, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds i16, i16* %6, i64 %635
  %640 = load i16, i16* %639, align 2
  %641 = zext i16 %640 to i64
  %642 = lshr i64 %600, 3
  %643 = getelementptr inbounds i8, i8* %10, i64 %642
  %644 = load i8, i8* %643, align 1, !alias.scope !854, !noalias !857
  %645 = zext i8 %644 to i64
  %646 = and i64 %600, 7
  %647 = shl i64 %641, %646
  %648 = or i64 %647, %645
  %649 = bitcast i8* %643 to i64*
  store i64 %648, i64* %649, align 8, !alias.scope !854, !noalias !857
  %650 = add i64 %600, %638
  %651 = sub i64 %621, %630
  %652 = lshr i64 %650, 3
  %653 = getelementptr inbounds i8, i8* %10, i64 %652
  %654 = load i8, i8* %653, align 1, !alias.scope !859, !noalias !862
  %655 = zext i8 %654 to i64
  %656 = and i64 %650, 7
  %657 = shl i64 %651, %656
  %658 = or i64 %657, %655
  %659 = bitcast i8* %653 to i64*
  store i64 %658, i64* %659, align 8, !alias.scope !859, !noalias !862
  %660 = add i64 %650, %626
  store i64 %660, i64* %9, align 8, !alias.scope !862, !noalias !859
  %661 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %635
  %662 = load i32, i32* %661, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %661, align 4
  br label %664

664:                                              ; preds = %618, %602
  %665 = phi i64 [ %615, %602 ], [ %660, %618 ]
  %666 = phi i32 [ %149, %602 ], [ %263, %618 ]
  %667 = icmp ult i64 %262, 12
  br i1 %667, label %668, label %688

668:                                              ; preds = %664
  %669 = add nsw i64 %261, 1
  %670 = getelementptr inbounds i8, i8* %5, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i64
  %673 = getelementptr inbounds i16, i16* %6, i64 %669
  %674 = load i16, i16* %673, align 2
  %675 = zext i16 %674 to i64
  %676 = lshr i64 %665, 3
  %677 = getelementptr inbounds i8, i8* %10, i64 %676
  %678 = load i8, i8* %677, align 1, !alias.scope !864, !noalias !867
  %679 = zext i8 %678 to i64
  %680 = and i64 %665, 7
  %681 = shl i64 %675, %680
  %682 = or i64 %681, %679
  %683 = bitcast i8* %677 to i64*
  store i64 %682, i64* %683, align 8, !alias.scope !864, !noalias !867
  %684 = add i64 %665, %672
  store i64 %684, i64* %9, align 8, !alias.scope !867, !noalias !864
  %685 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %669
  %686 = load i32, i32* %685, align 4
  %687 = add i32 %686, 1
  store i32 %687, i32* %685, align 4
  br label %874

688:                                              ; preds = %664
  %689 = icmp ult i64 %262, 72
  br i1 %689, label %690, label %730

690:                                              ; preds = %688
  %691 = add nsw i64 %261, -3
  %692 = trunc i64 %691 to i32
  %693 = call i32 @llvm.ctlz.i32(i32 %692, i1 true) #6, !range !7
  %694 = sub nsw i32 30, %693
  %695 = zext i32 %694 to i64
  %696 = lshr i64 %691, %695
  %697 = shl nsw i32 %694, 1
  %698 = zext i32 %697 to i64
  %699 = add nuw nsw i64 %698, 4
  %700 = add nuw nsw i64 %699, %696
  %701 = getelementptr inbounds i8, i8* %5, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i64
  %704 = getelementptr inbounds i16, i16* %6, i64 %700
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i64
  %707 = lshr i64 %665, 3
  %708 = getelementptr inbounds i8, i8* %10, i64 %707
  %709 = load i8, i8* %708, align 1, !alias.scope !869, !noalias !872
  %710 = zext i8 %709 to i64
  %711 = and i64 %665, 7
  %712 = shl i64 %706, %711
  %713 = or i64 %712, %710
  %714 = bitcast i8* %708 to i64*
  store i64 %713, i64* %714, align 8, !alias.scope !869, !noalias !872
  %715 = add i64 %665, %703
  %716 = shl i64 %696, %695
  %717 = sub i64 %691, %716
  %718 = lshr i64 %715, 3
  %719 = getelementptr inbounds i8, i8* %10, i64 %718
  %720 = load i8, i8* %719, align 1, !alias.scope !874, !noalias !877
  %721 = zext i8 %720 to i64
  %722 = and i64 %715, 7
  %723 = shl i64 %717, %722
  %724 = or i64 %723, %721
  %725 = bitcast i8* %719 to i64*
  store i64 %724, i64* %725, align 8, !alias.scope !874, !noalias !877
  %726 = add i64 %715, %695
  store i64 %726, i64* %9, align 8, !alias.scope !877, !noalias !874
  %727 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %700
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, 1
  store i32 %729, i32* %727, align 4
  br label %874

730:                                              ; preds = %688
  %731 = icmp ult i64 %262, 136
  br i1 %731, label %732, label %779

732:                                              ; preds = %730
  %733 = add nsw i64 %261, -3
  %734 = lshr i64 %733, 5
  %735 = add nuw nsw i64 %734, 30
  %736 = getelementptr inbounds i8, i8* %5, i64 %735
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i64
  %739 = getelementptr inbounds i16, i16* %6, i64 %735
  %740 = load i16, i16* %739, align 2
  %741 = zext i16 %740 to i64
  %742 = lshr i64 %665, 3
  %743 = getelementptr inbounds i8, i8* %10, i64 %742
  %744 = load i8, i8* %743, align 1, !alias.scope !879, !noalias !882
  %745 = zext i8 %744 to i64
  %746 = and i64 %665, 7
  %747 = shl i64 %741, %746
  %748 = or i64 %747, %745
  %749 = bitcast i8* %743 to i64*
  store i64 %748, i64* %749, align 8, !alias.scope !879, !noalias !882
  %750 = add i64 %665, %738
  %751 = and i64 %733, 31
  %752 = lshr i64 %750, 3
  %753 = getelementptr inbounds i8, i8* %10, i64 %752
  %754 = load i8, i8* %753, align 1, !alias.scope !884, !noalias !887
  %755 = zext i8 %754 to i64
  %756 = and i64 %750, 7
  %757 = shl i64 %751, %756
  %758 = or i64 %757, %755
  %759 = bitcast i8* %753 to i64*
  store i64 %758, i64* %759, align 8, !alias.scope !884, !noalias !887
  %760 = add i64 %750, 5
  store i64 %760, i64* %9, align 8, !alias.scope !887, !noalias !884
  %761 = load i8, i8* %116, align 1
  %762 = zext i8 %761 to i64
  %763 = load i16, i16* %117, align 2
  %764 = zext i16 %763 to i64
  %765 = lshr i64 %760, 3
  %766 = getelementptr inbounds i8, i8* %10, i64 %765
  %767 = load i8, i8* %766, align 1, !alias.scope !889, !noalias !892
  %768 = zext i8 %767 to i64
  %769 = and i64 %760, 7
  %770 = shl i64 %764, %769
  %771 = or i64 %770, %768
  %772 = bitcast i8* %766 to i64*
  store i64 %771, i64* %772, align 8, !alias.scope !889, !noalias !892
  %773 = add i64 %760, %762
  store i64 %773, i64* %9, align 8, !alias.scope !892, !noalias !889
  %774 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %735
  %775 = load i32, i32* %774, align 4
  %776 = add i32 %775, 1
  store i32 %776, i32* %774, align 4
  %777 = load i32, i32* %118, align 16
  %778 = add i32 %777, 1
  store i32 %778, i32* %118, align 16
  br label %874

779:                                              ; preds = %730
  %780 = icmp ult i64 %262, 2120
  br i1 %780, label %781, label %833

781:                                              ; preds = %779
  %782 = add nsw i64 %261, -67
  %783 = trunc i64 %782 to i32
  %784 = call i32 @llvm.ctlz.i32(i32 %783, i1 true) #6, !range !7
  %785 = xor i32 %784, 31
  %786 = add nuw nsw i32 %785, 28
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds i8, i8* %5, i64 %787
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i64
  %791 = getelementptr inbounds i16, i16* %6, i64 %787
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i64
  %794 = lshr i64 %665, 3
  %795 = getelementptr inbounds i8, i8* %10, i64 %794
  %796 = load i8, i8* %795, align 1, !alias.scope !894, !noalias !897
  %797 = zext i8 %796 to i64
  %798 = and i64 %665, 7
  %799 = shl i64 %793, %798
  %800 = or i64 %799, %797
  %801 = bitcast i8* %795 to i64*
  store i64 %800, i64* %801, align 8, !alias.scope !894, !noalias !897
  %802 = add i64 %665, %790
  %803 = zext i32 %785 to i64
  %804 = shl i64 1, %803
  %805 = sub i64 %782, %804
  %806 = lshr i64 %802, 3
  %807 = getelementptr inbounds i8, i8* %10, i64 %806
  %808 = load i8, i8* %807, align 1, !alias.scope !899, !noalias !902
  %809 = zext i8 %808 to i64
  %810 = and i64 %802, 7
  %811 = shl i64 %805, %810
  %812 = or i64 %811, %809
  %813 = bitcast i8* %807 to i64*
  store i64 %812, i64* %813, align 8, !alias.scope !899, !noalias !902
  %814 = add i64 %802, %803
  store i64 %814, i64* %9, align 8, !alias.scope !902, !noalias !899
  %815 = load i8, i8* %116, align 1
  %816 = zext i8 %815 to i64
  %817 = load i16, i16* %117, align 2
  %818 = zext i16 %817 to i64
  %819 = lshr i64 %814, 3
  %820 = getelementptr inbounds i8, i8* %10, i64 %819
  %821 = load i8, i8* %820, align 1, !alias.scope !904, !noalias !907
  %822 = zext i8 %821 to i64
  %823 = and i64 %814, 7
  %824 = shl i64 %818, %823
  %825 = or i64 %824, %822
  %826 = bitcast i8* %820 to i64*
  store i64 %825, i64* %826, align 8, !alias.scope !904, !noalias !907
  %827 = add i64 %814, %816
  store i64 %827, i64* %9, align 8, !alias.scope !907, !noalias !904
  %828 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %787
  %829 = load i32, i32* %828, align 4
  %830 = add i32 %829, 1
  store i32 %830, i32* %828, align 4
  %831 = load i32, i32* %118, align 16
  %832 = add i32 %831, 1
  store i32 %832, i32* %118, align 16
  br label %874

833:                                              ; preds = %779
  %834 = load i8, i8* %119, align 1
  %835 = zext i8 %834 to i64
  %836 = load i16, i16* %120, align 2
  %837 = zext i16 %836 to i64
  %838 = lshr i64 %665, 3
  %839 = getelementptr inbounds i8, i8* %10, i64 %838
  %840 = load i8, i8* %839, align 1, !alias.scope !909, !noalias !912
  %841 = zext i8 %840 to i64
  %842 = and i64 %665, 7
  %843 = shl i64 %837, %842
  %844 = or i64 %843, %841
  %845 = bitcast i8* %839 to i64*
  store i64 %844, i64* %845, align 8, !alias.scope !909, !noalias !912
  %846 = add i64 %665, %835
  %847 = add i64 %261, -2115
  %848 = lshr i64 %846, 3
  %849 = getelementptr inbounds i8, i8* %10, i64 %848
  %850 = load i8, i8* %849, align 1, !alias.scope !914, !noalias !917
  %851 = zext i8 %850 to i64
  %852 = and i64 %846, 7
  %853 = shl i64 %847, %852
  %854 = or i64 %853, %851
  %855 = bitcast i8* %849 to i64*
  store i64 %854, i64* %855, align 8, !alias.scope !914, !noalias !917
  %856 = add i64 %846, 24
  store i64 %856, i64* %9, align 8, !alias.scope !917, !noalias !914
  %857 = load i8, i8* %116, align 1
  %858 = zext i8 %857 to i64
  %859 = load i16, i16* %117, align 2
  %860 = zext i16 %859 to i64
  %861 = lshr i64 %856, 3
  %862 = getelementptr inbounds i8, i8* %10, i64 %861
  %863 = load i8, i8* %862, align 1, !alias.scope !919, !noalias !922
  %864 = zext i8 %863 to i64
  %865 = and i64 %856, 7
  %866 = shl i64 %860, %865
  %867 = or i64 %866, %864
  %868 = bitcast i8* %862 to i64*
  store i64 %867, i64* %868, align 8, !alias.scope !919, !noalias !922
  %869 = add i64 %856, %858
  store i64 %869, i64* %9, align 8, !alias.scope !922, !noalias !919
  %870 = load i32, i32* %121, align 4
  %871 = add i32 %870, 1
  store i32 %871, i32* %121, align 4
  %872 = load i32, i32* %118, align 16
  %873 = add i32 %872, 1
  store i32 %873, i32* %118, align 16
  br label %874

874:                                              ; preds = %833, %781, %732, %690, %668
  %875 = icmp ult i8* %266, %145
  br i1 %875, label %876, label %1189, !prof !75

876:                                              ; preds = %874
  %877 = getelementptr inbounds i8, i8* %266, i64 -3
  %878 = bitcast i8* %877 to i64*
  %879 = load i64, i64* %878, align 8
  %880 = mul i64 %879, 8503243848024064
  %881 = lshr i64 %880, 51
  %882 = lshr i64 %879, 24
  %883 = mul i64 %882, 8503243848024064
  %884 = lshr i64 %883, 51
  %885 = ptrtoint i8* %266 to i64
  %886 = sub i64 %885, %106
  %887 = trunc i64 %886 to i32
  %888 = add i32 %887, -3
  %889 = getelementptr inbounds i32, i32* %4, i64 %881
  store i32 %888, i32* %889, align 4
  %890 = lshr i64 %879, 8
  %891 = mul i64 %890, 8503243848024064
  %892 = lshr i64 %891, 51
  %893 = add i32 %887, -2
  %894 = getelementptr inbounds i32, i32* %4, i64 %892
  store i32 %893, i32* %894, align 4
  %895 = lshr i64 %879, 16
  %896 = mul i64 %895, 8503243848024064
  %897 = lshr i64 %896, 51
  %898 = add i32 %887, -1
  %899 = getelementptr inbounds i32, i32* %4, i64 %897
  store i32 %898, i32* %899, align 4
  %900 = getelementptr inbounds i32, i32* %4, i64 %884
  %901 = load i32, i32* %900, align 4
  store i32 %887, i32* %900, align 4
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i8, i8* %1, i64 %902
  %904 = bitcast i8* %266 to i32*
  %905 = load i32, i32* %904, align 4
  %906 = bitcast i8* %903 to i32*
  %907 = load i32, i32* %906, align 4
  %908 = icmp eq i32 %905, %907
  br i1 %908, label %909, label %1184

909:                                              ; preds = %876
  %910 = getelementptr inbounds i8, i8* %266, i64 4
  %911 = load i8, i8* %910, align 1
  %912 = getelementptr inbounds i8, i8* %903, i64 4
  %913 = load i8, i8* %912, align 1
  %914 = icmp eq i8 %911, %913
  br i1 %914, label %921, label %1184

915:                                              ; preds = %1149
  %916 = getelementptr inbounds i8, i8* %972, i64 4
  %917 = load i8, i8* %916, align 1
  %918 = getelementptr inbounds i8, i8* %1176, i64 4
  %919 = load i8, i8* %918, align 1
  %920 = icmp eq i8 %917, %919
  br i1 %920, label %921, label %1187

921:                                              ; preds = %909, %915
  %922 = phi i8* [ %972, %915 ], [ %266, %909 ]
  %923 = phi i32 [ %973, %915 ], [ %666, %909 ]
  %924 = phi i8* [ %1176, %915 ], [ %903, %909 ]
  %925 = getelementptr inbounds i8, i8* %924, i64 5
  %926 = getelementptr inbounds i8, i8* %922, i64 5
  %927 = ptrtoint i8* %922 to i64
  %928 = sub i64 %146, %927
  %929 = add i64 %928, -5
  %930 = lshr i64 %929, 3
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %952, label %932, !prof !76

932:                                              ; preds = %921, %942
  %933 = phi i64 [ %945, %942 ], [ %930, %921 ]
  %934 = phi i8* [ %943, %942 ], [ %926, %921 ]
  %935 = phi i64 [ %944, %942 ], [ 0, %921 ]
  %936 = bitcast i8* %934 to i64*
  %937 = load i64, i64* %936, align 8
  %938 = getelementptr inbounds i8, i8* %925, i64 %935
  %939 = bitcast i8* %938 to i64*
  %940 = load i64, i64* %939, align 8
  %941 = icmp eq i64 %937, %940
  br i1 %941, label %942, label %947, !prof !76

942:                                              ; preds = %932
  %943 = getelementptr inbounds i8, i8* %934, i64 8
  %944 = add nuw i64 %935, 8
  %945 = add nsw i64 %933, -1
  %946 = icmp eq i64 %945, 0
  br i1 %946, label %952, label %932, !prof !76

947:                                              ; preds = %932
  %948 = xor i64 %940, %937
  %949 = call i64 @llvm.cttz.i64(i64 %948, i1 true) #6, !range !78
  %950 = lshr i64 %949, 3
  %951 = or i64 %950, %935
  br label %965

952:                                              ; preds = %942, %921
  %953 = phi i64 [ 0, %921 ], [ %944, %942 ]
  %954 = phi i8* [ %926, %921 ], [ %943, %942 ]
  %955 = and i64 %929, 7
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %965, label %957

957:                                              ; preds = %952
  %958 = getelementptr inbounds i8, i8* %925, i64 %953
  %959 = load i8, i8* %958, align 1
  %960 = load i8, i8* %954, align 1
  %961 = icmp eq i8 %959, %960
  br i1 %961, label %962, label %965, !prof !75

962:                                              ; preds = %957
  %963 = add i64 %953, 1
  %964 = icmp eq i64 %955, 1
  br i1 %964, label %965, label %1802

965:                                              ; preds = %1847, %962, %957, %1802, %1808, %1811, %1817, %1820, %1826, %1829, %1835, %1838, %1844, %952, %947
  %966 = phi i64 [ %951, %947 ], [ %953, %952 ], [ %953, %957 ], [ %963, %962 ], [ %963, %1802 ], [ %1809, %1808 ], [ %1809, %1811 ], [ %1818, %1817 ], [ %1818, %1820 ], [ %1827, %1826 ], [ %1827, %1829 ], [ %1836, %1835 ], [ %1836, %1838 ], [ %1845, %1844 ], [ %1854, %1847 ]
  %967 = add i64 %966, 5
  %968 = ptrtoint i8* %924 to i64
  %969 = sub i64 %927, %968
  %970 = icmp sgt i64 %969, 262128
  br i1 %970, label %1184, label %971

971:                                              ; preds = %965
  %972 = getelementptr inbounds i8, i8* %922, i64 %967
  %973 = trunc i64 %969 to i32
  %974 = icmp ult i64 %967, 10
  br i1 %974, label %975, label %994

975:                                              ; preds = %971
  %976 = add nsw i64 %966, 19
  %977 = getelementptr inbounds i8, i8* %5, i64 %976
  %978 = load i8, i8* %977, align 1
  %979 = zext i8 %978 to i64
  %980 = getelementptr inbounds i16, i16* %6, i64 %976
  %981 = load i16, i16* %980, align 2
  %982 = zext i16 %981 to i64
  %983 = load i64, i64* %9, align 8, !alias.scope !924, !noalias !927
  %984 = lshr i64 %983, 3
  %985 = getelementptr inbounds i8, i8* %10, i64 %984
  %986 = load i8, i8* %985, align 1, !alias.scope !927, !noalias !924
  %987 = zext i8 %986 to i64
  %988 = and i64 %983, 7
  %989 = shl i64 %982, %988
  %990 = or i64 %989, %987
  %991 = bitcast i8* %985 to i64*
  store i64 %990, i64* %991, align 8, !alias.scope !927, !noalias !924
  %992 = add i64 %983, %979
  store i64 %992, i64* %9, align 8, !alias.scope !924, !noalias !927
  %993 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %976
  br label %1098

994:                                              ; preds = %971
  %995 = icmp ult i64 %967, 134
  br i1 %995, label %996, label %1035

996:                                              ; preds = %994
  %997 = add nsw i64 %966, -1
  %998 = trunc i64 %997 to i32
  %999 = call i32 @llvm.ctlz.i32(i32 %998, i1 true) #6, !range !7
  %1000 = sub nsw i32 30, %999
  %1001 = zext i32 %1000 to i64
  %1002 = lshr i64 %997, %1001
  %1003 = shl nsw i32 %1000, 1
  %1004 = zext i32 %1003 to i64
  %1005 = add nuw nsw i64 %1004, 20
  %1006 = add nuw nsw i64 %1005, %1002
  %1007 = getelementptr inbounds i8, i8* %5, i64 %1006
  %1008 = load i8, i8* %1007, align 1
  %1009 = zext i8 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %6, i64 %1006
  %1011 = load i16, i16* %1010, align 2
  %1012 = zext i16 %1011 to i64
  %1013 = load i64, i64* %9, align 8, !alias.scope !929, !noalias !932
  %1014 = lshr i64 %1013, 3
  %1015 = getelementptr inbounds i8, i8* %10, i64 %1014
  %1016 = load i8, i8* %1015, align 1, !alias.scope !932, !noalias !929
  %1017 = zext i8 %1016 to i64
  %1018 = and i64 %1013, 7
  %1019 = shl i64 %1012, %1018
  %1020 = or i64 %1019, %1017
  %1021 = bitcast i8* %1015 to i64*
  store i64 %1020, i64* %1021, align 8, !alias.scope !932, !noalias !929
  %1022 = add i64 %1013, %1009
  %1023 = shl i64 %1002, %1001
  %1024 = sub i64 %997, %1023
  %1025 = lshr i64 %1022, 3
  %1026 = getelementptr inbounds i8, i8* %10, i64 %1025
  %1027 = load i8, i8* %1026, align 1, !alias.scope !934, !noalias !937
  %1028 = zext i8 %1027 to i64
  %1029 = and i64 %1022, 7
  %1030 = shl i64 %1024, %1029
  %1031 = or i64 %1030, %1028
  %1032 = bitcast i8* %1026 to i64*
  store i64 %1031, i64* %1032, align 8, !alias.scope !934, !noalias !937
  %1033 = add i64 %1022, %1001
  store i64 %1033, i64* %9, align 8, !alias.scope !937, !noalias !934
  %1034 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1006
  br label %1098

1035:                                             ; preds = %994
  %1036 = icmp ult i64 %967, 2118
  br i1 %1036, label %1037, label %1073

1037:                                             ; preds = %1035
  %1038 = add nsw i64 %966, -65
  %1039 = trunc i64 %1038 to i32
  %1040 = call i32 @llvm.ctlz.i32(i32 %1039, i1 true) #6, !range !7
  %1041 = xor i32 %1040, 31
  %1042 = add nuw nsw i32 %1041, 28
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds i8, i8* %5, i64 %1043
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i64
  %1047 = getelementptr inbounds i16, i16* %6, i64 %1043
  %1048 = load i16, i16* %1047, align 2
  %1049 = zext i16 %1048 to i64
  %1050 = load i64, i64* %9, align 8, !alias.scope !939, !noalias !942
  %1051 = lshr i64 %1050, 3
  %1052 = getelementptr inbounds i8, i8* %10, i64 %1051
  %1053 = load i8, i8* %1052, align 1, !alias.scope !942, !noalias !939
  %1054 = zext i8 %1053 to i64
  %1055 = and i64 %1050, 7
  %1056 = shl i64 %1049, %1055
  %1057 = or i64 %1056, %1054
  %1058 = bitcast i8* %1052 to i64*
  store i64 %1057, i64* %1058, align 8, !alias.scope !942, !noalias !939
  %1059 = add i64 %1050, %1046
  %1060 = zext i32 %1041 to i64
  %1061 = shl i64 1, %1060
  %1062 = sub i64 %1038, %1061
  %1063 = lshr i64 %1059, 3
  %1064 = getelementptr inbounds i8, i8* %10, i64 %1063
  %1065 = load i8, i8* %1064, align 1, !alias.scope !944, !noalias !947
  %1066 = zext i8 %1065 to i64
  %1067 = and i64 %1059, 7
  %1068 = shl i64 %1062, %1067
  %1069 = or i64 %1068, %1066
  %1070 = bitcast i8* %1064 to i64*
  store i64 %1069, i64* %1070, align 8, !alias.scope !944, !noalias !947
  %1071 = add i64 %1059, %1060
  store i64 %1071, i64* %9, align 8, !alias.scope !947, !noalias !944
  %1072 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1043
  br label %1098

1073:                                             ; preds = %1035
  %1074 = load i8, i8* %119, align 1
  %1075 = zext i8 %1074 to i64
  %1076 = load i16, i16* %120, align 2
  %1077 = zext i16 %1076 to i64
  %1078 = load i64, i64* %9, align 8, !alias.scope !949, !noalias !952
  %1079 = lshr i64 %1078, 3
  %1080 = getelementptr inbounds i8, i8* %10, i64 %1079
  %1081 = load i8, i8* %1080, align 1, !alias.scope !952, !noalias !949
  %1082 = zext i8 %1081 to i64
  %1083 = and i64 %1078, 7
  %1084 = shl i64 %1077, %1083
  %1085 = or i64 %1084, %1082
  %1086 = bitcast i8* %1080 to i64*
  store i64 %1085, i64* %1086, align 8, !alias.scope !952, !noalias !949
  %1087 = add i64 %1078, %1075
  %1088 = add i64 %966, -2113
  %1089 = lshr i64 %1087, 3
  %1090 = getelementptr inbounds i8, i8* %10, i64 %1089
  %1091 = load i8, i8* %1090, align 1, !alias.scope !954, !noalias !957
  %1092 = zext i8 %1091 to i64
  %1093 = and i64 %1087, 7
  %1094 = shl i64 %1088, %1093
  %1095 = or i64 %1094, %1092
  %1096 = bitcast i8* %1090 to i64*
  store i64 %1095, i64* %1096, align 8, !alias.scope !954, !noalias !957
  %1097 = add i64 %1087, 24
  store i64 %1097, i64* %9, align 8, !alias.scope !957, !noalias !954
  br label %1098

1098:                                             ; preds = %1073, %1037, %996, %975
  %1099 = phi i32* [ %121, %1073 ], [ %1072, %1037 ], [ %1034, %996 ], [ %993, %975 ]
  %1100 = phi i64 [ %1097, %1073 ], [ %1071, %1037 ], [ %1033, %996 ], [ %992, %975 ]
  %1101 = load i32, i32* %1099, align 4
  %1102 = add i32 %1101, 1
  store i32 %1102, i32* %1099, align 4
  %1103 = shl i64 %969, 32
  %1104 = ashr exact i64 %1103, 32
  %1105 = add nsw i64 %1104, 3
  %1106 = trunc i64 %1105 to i32
  %1107 = call i32 @llvm.ctlz.i32(i32 %1106, i1 true) #6, !range !7
  %1108 = xor i32 %1107, 31
  %1109 = add nsw i32 %1108, -1
  %1110 = zext i32 %1109 to i64
  %1111 = lshr i64 %1105, %1110
  %1112 = and i64 %1111, 1
  %1113 = or i64 %1112, 2
  %1114 = shl i64 %1113, %1110
  %1115 = shl nuw nsw i32 %1108, 1
  %1116 = add nsw i32 %1115, -4
  %1117 = zext i32 %1116 to i64
  %1118 = or i64 %1112, %1117
  %1119 = add nuw nsw i64 %1118, 80
  %1120 = getelementptr inbounds i8, i8* %5, i64 %1119
  %1121 = load i8, i8* %1120, align 1
  %1122 = zext i8 %1121 to i64
  %1123 = getelementptr inbounds i16, i16* %6, i64 %1119
  %1124 = load i16, i16* %1123, align 2
  %1125 = zext i16 %1124 to i64
  %1126 = lshr i64 %1100, 3
  %1127 = getelementptr inbounds i8, i8* %10, i64 %1126
  %1128 = load i8, i8* %1127, align 1, !alias.scope !959, !noalias !962
  %1129 = zext i8 %1128 to i64
  %1130 = and i64 %1100, 7
  %1131 = shl i64 %1125, %1130
  %1132 = or i64 %1131, %1129
  %1133 = bitcast i8* %1127 to i64*
  store i64 %1132, i64* %1133, align 8, !alias.scope !959, !noalias !962
  %1134 = add i64 %1100, %1122
  %1135 = sub i64 %1105, %1114
  %1136 = lshr i64 %1134, 3
  %1137 = getelementptr inbounds i8, i8* %10, i64 %1136
  %1138 = load i8, i8* %1137, align 1, !alias.scope !964, !noalias !967
  %1139 = zext i8 %1138 to i64
  %1140 = and i64 %1134, 7
  %1141 = shl i64 %1135, %1140
  %1142 = or i64 %1141, %1139
  %1143 = bitcast i8* %1137 to i64*
  store i64 %1142, i64* %1143, align 8, !alias.scope !964, !noalias !967
  %1144 = add i64 %1134, %1110
  store i64 %1144, i64* %9, align 8, !alias.scope !967, !noalias !964
  %1145 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1119
  %1146 = load i32, i32* %1145, align 4
  %1147 = add i32 %1146, 1
  store i32 %1147, i32* %1145, align 4
  %1148 = icmp ult i8* %972, %145
  br i1 %1148, label %1149, label %1189, !prof !75

1149:                                             ; preds = %1098
  %1150 = getelementptr inbounds i8, i8* %972, i64 -3
  %1151 = bitcast i8* %1150 to i64*
  %1152 = load i64, i64* %1151, align 8
  %1153 = mul i64 %1152, 8503243848024064
  %1154 = lshr i64 %1153, 51
  %1155 = lshr i64 %1152, 24
  %1156 = mul i64 %1155, 8503243848024064
  %1157 = lshr i64 %1156, 51
  %1158 = ptrtoint i8* %972 to i64
  %1159 = sub i64 %1158, %106
  %1160 = trunc i64 %1159 to i32
  %1161 = add i32 %1160, -3
  %1162 = getelementptr inbounds i32, i32* %4, i64 %1154
  store i32 %1161, i32* %1162, align 4
  %1163 = lshr i64 %1152, 8
  %1164 = mul i64 %1163, 8503243848024064
  %1165 = lshr i64 %1164, 51
  %1166 = add i32 %1160, -2
  %1167 = getelementptr inbounds i32, i32* %4, i64 %1165
  store i32 %1166, i32* %1167, align 4
  %1168 = lshr i64 %1152, 16
  %1169 = mul i64 %1168, 8503243848024064
  %1170 = lshr i64 %1169, 51
  %1171 = add i32 %1160, -1
  %1172 = getelementptr inbounds i32, i32* %4, i64 %1170
  store i32 %1171, i32* %1172, align 4
  %1173 = getelementptr inbounds i32, i32* %4, i64 %1157
  %1174 = load i32, i32* %1173, align 4
  store i32 %1160, i32* %1173, align 4
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds i8, i8* %1, i64 %1175
  %1177 = bitcast i8* %972 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = bitcast i8* %1176 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = icmp eq i32 %1178, %1180
  br i1 %1181, label %915, label %1182

1182:                                             ; preds = %1149
  %1183 = trunc i64 %969 to i32
  br label %1184

1184:                                             ; preds = %965, %1182, %1187, %909, %876
  %1185 = phi i8* [ %266, %876 ], [ %266, %909 ], [ %972, %1182 ], [ %972, %1187 ], [ %922, %965 ]
  %1186 = phi i32 [ %666, %876 ], [ %666, %909 ], [ %1183, %1182 ], [ %1188, %1187 ], [ %923, %965 ]
  br label %147

1187:                                             ; preds = %915
  %1188 = trunc i64 %969 to i32
  br label %1184

1189:                                             ; preds = %874, %157, %1098, %132
  %1190 = phi i8* [ %135, %132 ], [ %972, %1098 ], [ %150, %157 ], [ %266, %874 ]
  %1191 = sub i64 %136, %134
  %1192 = icmp ult i64 %1191, 65536
  %1193 = select i1 %1192, i64 %1191, i64 65536
  %1194 = icmp eq i64 %1191, 0
  br i1 %1194, label %1286, label %1195

1195:                                             ; preds = %1189
  %1196 = add i64 %1193, %133
  %1197 = icmp ult i64 %1196, 1048577
  br i1 %1197, label %1198, label %1286

1198:                                             ; preds = %1195
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %122) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %122, i8 0, i64 2048, i1 false) #6
  %1199 = icmp eq i64 %1193, 0
  br i1 %1199, label %1214, label %1200

1200:                                             ; preds = %1198, %1200
  %1201 = phi i64 [ %1208, %1200 ], [ 0, %1198 ]
  %1202 = getelementptr inbounds i8, i8* %138, i64 %1201
  %1203 = load i8, i8* %1202, align 1
  %1204 = zext i8 %1203 to i64
  %1205 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1204
  %1206 = load i64, i64* %1205, align 8
  %1207 = add i64 %1206, 1
  store i64 %1207, i64* %1205, align 8
  %1208 = add i64 %1201, 43
  %1209 = icmp ult i64 %1208, %1193
  br i1 %1209, label %1200, label %1210

1210:                                             ; preds = %1200
  %1211 = add nuw nsw i64 %1193, 42
  %1212 = udiv i64 %1211, 43
  %1213 = icmp ult i64 %1211, 11008
  br i1 %1213, label %1214, label %1219

1214:                                             ; preds = %1210, %1198
  %1215 = phi i64 [ %1212, %1210 ], [ 0, %1198 ]
  %1216 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1215
  %1217 = load double, double* %1216, align 8
  %1218 = uitofp i64 %1215 to double
  br label %1222

1219:                                             ; preds = %1210
  %1220 = uitofp i64 %1212 to double
  %1221 = call double @log2(double %1220) #6
  br label %1222

1222:                                             ; preds = %1219, %1214
  %1223 = phi double [ %1218, %1214 ], [ %1220, %1219 ]
  %1224 = phi double [ %1217, %1214 ], [ %1221, %1219 ]
  %1225 = fadd double %1224, 5.000000e-01
  %1226 = fmul double %1223, %1225
  %1227 = fadd double %1226, 2.000000e+02
  br label %1228

1228:                                             ; preds = %1243, %1222
  %1229 = phi double [ %1227, %1222 ], [ %1247, %1243 ]
  %1230 = phi i64 [ 0, %1222 ], [ %1248, %1243 ]
  %1231 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1230
  %1232 = load i64, i64* %1231, align 8
  %1233 = uitofp i64 %1232 to double
  %1234 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1230
  %1235 = load i8, i8* %1234, align 1
  %1236 = uitofp i8 %1235 to double
  %1237 = icmp ult i64 %1232, 256
  br i1 %1237, label %1238, label %1241

1238:                                             ; preds = %1228
  %1239 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1232
  %1240 = load double, double* %1239, align 8
  br label %1243

1241:                                             ; preds = %1228
  %1242 = call double @log2(double %1233) #6
  br label %1243

1243:                                             ; preds = %1241, %1238
  %1244 = phi double [ %1240, %1238 ], [ %1242, %1241 ]
  %1245 = fadd double %1244, %1236
  %1246 = fmul double %1245, %1233
  %1247 = fsub double %1229, %1246
  %1248 = add nuw nsw i64 %1230, 1
  %1249 = icmp eq i64 %1248, 256
  br i1 %1249, label %1250, label %1228

1250:                                             ; preds = %1243
  %1251 = fcmp ult double %1247, 0.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %122) #6
  br i1 %1251, label %1286, label %1252

1252:                                             ; preds = %1250
  %1253 = trunc i64 %1196 to i32
  %1254 = add i32 %1253, -1
  br label %1255

1255:                                             ; preds = %1255, %1252
  %1256 = phi i64 [ 20, %1252 ], [ %1282, %1255 ]
  %1257 = phi i32 [ %1254, %1252 ], [ %1283, %1255 ]
  %1258 = phi i64 [ %125, %1252 ], [ %1284, %1255 ]
  %1259 = lshr i64 %1258, 3
  %1260 = and i64 %1258, 7
  %1261 = sub nuw nsw i64 8, %1260
  %1262 = icmp ult i64 %1256, %1261
  %1263 = select i1 %1262, i64 %1256, i64 %1261
  %1264 = add nuw nsw i64 %1263, %1260
  %1265 = trunc i64 %1264 to i32
  %1266 = shl nsw i32 -1, %1265
  %1267 = trunc i64 %1260 to i32
  %1268 = shl nsw i32 -1, %1267
  %1269 = xor i32 %1268, 255
  %1270 = or i32 %1266, %1269
  %1271 = getelementptr inbounds i8, i8* %10, i64 %1259
  %1272 = load i8, i8* %1271, align 1
  %1273 = zext i8 %1272 to i32
  %1274 = and i32 %1270, %1273
  %1275 = trunc i64 %1263 to i32
  %1276 = shl nsw i32 -1, %1275
  %1277 = xor i32 %1276, -1
  %1278 = and i32 %1257, %1277
  %1279 = shl i32 %1278, %1267
  %1280 = or i32 %1274, %1279
  %1281 = trunc i32 %1280 to i8
  store i8 %1281, i8* %1271, align 1
  %1282 = sub i64 %1256, %1263
  %1283 = lshr i32 %1257, %1275
  %1284 = add i64 %1263, %1258
  %1285 = icmp eq i64 %1282, 0
  br i1 %1285, label %132, label %1255

1286:                                             ; preds = %1250, %1195, %1189
  %1287 = icmp ult i8* %1190, %138
  br i1 %1287, label %1288, label %1695

1288:                                             ; preds = %1286
  %1289 = ptrtoint i8* %138 to i64
  %1290 = ptrtoint i8* %1190 to i64
  %1291 = sub i64 %1289, %1290
  %1292 = icmp ult i64 %1291, 6210
  br i1 %1292, label %1293, label %1478, !prof !75

1293:                                             ; preds = %1288
  %1294 = icmp ult i64 %1291, 6
  br i1 %1294, label %1399, label %1295

1295:                                             ; preds = %1293
  %1296 = icmp ult i64 %1291, 130
  br i1 %1296, label %1297, label %1336

1297:                                             ; preds = %1295
  %1298 = add nsw i64 %1291, -2
  %1299 = trunc i64 %1298 to i32
  %1300 = call i32 @llvm.ctlz.i32(i32 %1299, i1 true) #6, !range !7
  %1301 = sub nsw i32 30, %1300
  %1302 = zext i32 %1301 to i64
  %1303 = lshr i64 %1298, %1302
  %1304 = shl nsw i32 %1301, 1
  %1305 = zext i32 %1304 to i64
  %1306 = add nuw nsw i64 %1305, 42
  %1307 = add nuw nsw i64 %1306, %1303
  %1308 = getelementptr inbounds i8, i8* %5, i64 %1307
  %1309 = load i8, i8* %1308, align 1
  %1310 = zext i8 %1309 to i64
  %1311 = getelementptr inbounds i16, i16* %6, i64 %1307
  %1312 = load i16, i16* %1311, align 2
  %1313 = zext i16 %1312 to i64
  %1314 = load i64, i64* %9, align 8, !alias.scope !969, !noalias !972
  %1315 = lshr i64 %1314, 3
  %1316 = getelementptr inbounds i8, i8* %10, i64 %1315
  %1317 = load i8, i8* %1316, align 1, !alias.scope !972, !noalias !969
  %1318 = zext i8 %1317 to i64
  %1319 = and i64 %1314, 7
  %1320 = shl i64 %1313, %1319
  %1321 = or i64 %1320, %1318
  %1322 = bitcast i8* %1316 to i64*
  store i64 %1321, i64* %1322, align 8, !alias.scope !972, !noalias !969
  %1323 = add i64 %1314, %1310
  %1324 = shl i64 %1303, %1302
  %1325 = sub i64 %1298, %1324
  %1326 = lshr i64 %1323, 3
  %1327 = getelementptr inbounds i8, i8* %10, i64 %1326
  %1328 = load i8, i8* %1327, align 1, !alias.scope !974, !noalias !977
  %1329 = zext i8 %1328 to i64
  %1330 = and i64 %1323, 7
  %1331 = shl i64 %1325, %1330
  %1332 = or i64 %1331, %1329
  %1333 = bitcast i8* %1327 to i64*
  store i64 %1332, i64* %1333, align 8, !alias.scope !974, !noalias !977
  %1334 = add i64 %1323, %1302
  store i64 %1334, i64* %9, align 8, !alias.scope !977, !noalias !974
  %1335 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1307
  br label %1421

1336:                                             ; preds = %1295
  %1337 = icmp ult i64 %1291, 2114
  br i1 %1337, label %1338, label %1374

1338:                                             ; preds = %1336
  %1339 = add nsw i64 %1291, -66
  %1340 = trunc i64 %1339 to i32
  %1341 = call i32 @llvm.ctlz.i32(i32 %1340, i1 true) #6, !range !7
  %1342 = xor i32 %1341, 31
  %1343 = add nuw nsw i32 %1342, 50
  %1344 = zext i32 %1343 to i64
  %1345 = getelementptr inbounds i8, i8* %5, i64 %1344
  %1346 = load i8, i8* %1345, align 1
  %1347 = zext i8 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %6, i64 %1344
  %1349 = load i16, i16* %1348, align 2
  %1350 = zext i16 %1349 to i64
  %1351 = load i64, i64* %9, align 8, !alias.scope !979, !noalias !982
  %1352 = lshr i64 %1351, 3
  %1353 = getelementptr inbounds i8, i8* %10, i64 %1352
  %1354 = load i8, i8* %1353, align 1, !alias.scope !982, !noalias !979
  %1355 = zext i8 %1354 to i64
  %1356 = and i64 %1351, 7
  %1357 = shl i64 %1350, %1356
  %1358 = or i64 %1357, %1355
  %1359 = bitcast i8* %1353 to i64*
  store i64 %1358, i64* %1359, align 8, !alias.scope !982, !noalias !979
  %1360 = add i64 %1351, %1347
  %1361 = zext i32 %1342 to i64
  %1362 = shl i64 1, %1361
  %1363 = sub i64 %1339, %1362
  %1364 = lshr i64 %1360, 3
  %1365 = getelementptr inbounds i8, i8* %10, i64 %1364
  %1366 = load i8, i8* %1365, align 1, !alias.scope !984, !noalias !987
  %1367 = zext i8 %1366 to i64
  %1368 = and i64 %1360, 7
  %1369 = shl i64 %1363, %1368
  %1370 = or i64 %1369, %1367
  %1371 = bitcast i8* %1365 to i64*
  store i64 %1370, i64* %1371, align 8, !alias.scope !984, !noalias !987
  %1372 = add i64 %1360, %1361
  store i64 %1372, i64* %9, align 8, !alias.scope !987, !noalias !984
  %1373 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1344
  br label %1421

1374:                                             ; preds = %1336
  %1375 = load i8, i8* %113, align 1
  %1376 = zext i8 %1375 to i64
  %1377 = load i16, i16* %114, align 2
  %1378 = zext i16 %1377 to i64
  %1379 = load i64, i64* %9, align 8, !alias.scope !989, !noalias !992
  %1380 = lshr i64 %1379, 3
  %1381 = getelementptr inbounds i8, i8* %10, i64 %1380
  %1382 = load i8, i8* %1381, align 1, !alias.scope !992, !noalias !989
  %1383 = zext i8 %1382 to i64
  %1384 = and i64 %1379, 7
  %1385 = shl i64 %1378, %1384
  %1386 = or i64 %1385, %1383
  %1387 = bitcast i8* %1381 to i64*
  store i64 %1386, i64* %1387, align 8, !alias.scope !992, !noalias !989
  %1388 = add i64 %1379, %1376
  %1389 = add nsw i64 %1291, -2114
  %1390 = lshr i64 %1388, 3
  %1391 = getelementptr inbounds i8, i8* %10, i64 %1390
  %1392 = load i8, i8* %1391, align 1, !alias.scope !994, !noalias !997
  %1393 = zext i8 %1392 to i64
  %1394 = and i64 %1388, 7
  %1395 = shl i64 %1389, %1394
  %1396 = or i64 %1395, %1393
  %1397 = bitcast i8* %1391 to i64*
  store i64 %1396, i64* %1397, align 8, !alias.scope !994, !noalias !997
  %1398 = add i64 %1388, 12
  store i64 %1398, i64* %9, align 8, !alias.scope !997, !noalias !994
  br label %1421

1399:                                             ; preds = %1293
  %1400 = add nuw nsw i64 %1291, 40
  %1401 = getelementptr inbounds i8, i8* %5, i64 %1400
  %1402 = load i8, i8* %1401, align 1
  %1403 = zext i8 %1402 to i64
  %1404 = getelementptr inbounds i16, i16* %6, i64 %1400
  %1405 = load i16, i16* %1404, align 2
  %1406 = zext i16 %1405 to i64
  %1407 = load i64, i64* %9, align 8, !alias.scope !999, !noalias !1002
  %1408 = lshr i64 %1407, 3
  %1409 = getelementptr inbounds i8, i8* %10, i64 %1408
  %1410 = load i8, i8* %1409, align 1, !alias.scope !1002, !noalias !999
  %1411 = zext i8 %1410 to i64
  %1412 = and i64 %1407, 7
  %1413 = shl i64 %1406, %1412
  %1414 = or i64 %1413, %1411
  %1415 = bitcast i8* %1409 to i64*
  store i64 %1414, i64* %1415, align 8, !alias.scope !1002, !noalias !999
  %1416 = add i64 %1407, %1403
  store i64 %1416, i64* %9, align 8, !alias.scope !999, !noalias !1002
  %1417 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1400
  %1418 = load i32, i32* %1417, align 4
  %1419 = add i32 %1418, 1
  store i32 %1419, i32* %1417, align 4
  %1420 = icmp eq i64 %1291, 0
  br i1 %1420, label %1695, label %1426

1421:                                             ; preds = %1297, %1338, %1374
  %1422 = phi i32* [ %115, %1374 ], [ %1373, %1338 ], [ %1335, %1297 ]
  %1423 = phi i64 [ %1398, %1374 ], [ %1372, %1338 ], [ %1334, %1297 ]
  %1424 = load i32, i32* %1422, align 4
  %1425 = add i32 %1424, 1
  store i32 %1425, i32* %1422, align 4
  br label %1426

1426:                                             ; preds = %1421, %1399
  %1427 = phi i64 [ %1423, %1421 ], [ %1416, %1399 ]
  %1428 = xor i64 %1290, -1
  %1429 = and i64 %1291, 1
  %1430 = sub i64 0, %1289
  %1431 = icmp eq i64 %1428, %1430
  br i1 %1431, label %1649, label %1432

1432:                                             ; preds = %1426
  %1433 = sub i64 %1291, %1429
  br label %1434

1434:                                             ; preds = %1434, %1432
  %1435 = phi i64 [ %1427, %1432 ], [ %1474, %1434 ]
  %1436 = phi i64 [ 0, %1432 ], [ %1475, %1434 ]
  %1437 = phi i64 [ %1433, %1432 ], [ %1476, %1434 ]
  %1438 = getelementptr inbounds i8, i8* %1190, i64 %1436
  %1439 = load i8, i8* %1438, align 1
  %1440 = zext i8 %1439 to i64
  %1441 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1440
  %1442 = load i8, i8* %1441, align 1
  %1443 = zext i8 %1442 to i64
  %1444 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1440
  %1445 = load i16, i16* %1444, align 2
  %1446 = zext i16 %1445 to i64
  %1447 = lshr i64 %1435, 3
  %1448 = getelementptr inbounds i8, i8* %10, i64 %1447
  %1449 = load i8, i8* %1448, align 1, !alias.scope !1004, !noalias !1007
  %1450 = zext i8 %1449 to i64
  %1451 = and i64 %1435, 7
  %1452 = shl i64 %1446, %1451
  %1453 = or i64 %1452, %1450
  %1454 = bitcast i8* %1448 to i64*
  store i64 %1453, i64* %1454, align 8, !alias.scope !1004, !noalias !1007
  %1455 = add i64 %1435, %1443
  store i64 %1455, i64* %9, align 8, !alias.scope !1007, !noalias !1004
  %1456 = or i64 %1436, 1
  %1457 = getelementptr inbounds i8, i8* %1190, i64 %1456
  %1458 = load i8, i8* %1457, align 1
  %1459 = zext i8 %1458 to i64
  %1460 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1459
  %1461 = load i8, i8* %1460, align 1
  %1462 = zext i8 %1461 to i64
  %1463 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1459
  %1464 = load i16, i16* %1463, align 2
  %1465 = zext i16 %1464 to i64
  %1466 = lshr i64 %1455, 3
  %1467 = getelementptr inbounds i8, i8* %10, i64 %1466
  %1468 = load i8, i8* %1467, align 1, !alias.scope !1004, !noalias !1007
  %1469 = zext i8 %1468 to i64
  %1470 = and i64 %1455, 7
  %1471 = shl i64 %1465, %1470
  %1472 = or i64 %1471, %1469
  %1473 = bitcast i8* %1467 to i64*
  store i64 %1472, i64* %1473, align 8, !alias.scope !1004, !noalias !1007
  %1474 = add i64 %1455, %1462
  store i64 %1474, i64* %9, align 8, !alias.scope !1007, !noalias !1004
  %1475 = add nuw i64 %1436, 2
  %1476 = add i64 %1437, -2
  %1477 = icmp eq i64 %1476, 0
  br i1 %1477, label %1649, label %1434

1478:                                             ; preds = %1288
  %1479 = sub i64 %1290, %130
  %1480 = mul i64 %1479, 50
  %1481 = icmp ugt i64 %1480, %1291
  %1482 = or i1 %131, %1481
  br i1 %1482, label %1541, label %1483

1483:                                             ; preds = %1478
  %1484 = add i64 %125, -3
  %1485 = sub i64 %1289, %130
  %1486 = trunc i64 %1484 to i32
  %1487 = and i32 %1486, 7
  %1488 = shl nsw i32 -1, %1487
  %1489 = lshr i64 %1484, 3
  %1490 = getelementptr inbounds i8, i8* %10, i64 %1489
  %1491 = load i8, i8* %1490, align 1
  %1492 = trunc i32 %1488 to i8
  %1493 = and i8 %1492, 127
  %1494 = xor i8 %1493, 127
  %1495 = and i8 %1491, %1494
  store i8 %1495, i8* %1490, align 1
  store i64 %1484, i64* %9, align 8
  %1496 = load i8, i8* %1490, align 1, !alias.scope !1009, !noalias !1012
  %1497 = zext i8 %1496 to i64
  %1498 = bitcast i8* %1490 to i64*
  store i64 %1497, i64* %1498, align 8, !alias.scope !1009, !noalias !1012
  %1499 = add i64 %125, -2
  %1500 = icmp ult i64 %1485, 65537
  %1501 = icmp ult i64 %1485, 1048577
  %1502 = select i1 %1501, i64 5, i64 6
  %1503 = select i1 %1500, i64 4, i64 %1502
  %1504 = add nsw i64 %1503, -4
  %1505 = lshr i64 %1499, 3
  %1506 = getelementptr inbounds i8, i8* %10, i64 %1505
  %1507 = load i8, i8* %1506, align 1, !alias.scope !1014, !noalias !1017
  %1508 = zext i8 %1507 to i64
  %1509 = and i64 %1499, 7
  %1510 = shl i64 %1504, %1509
  %1511 = or i64 %1510, %1508
  %1512 = bitcast i8* %1506 to i64*
  store i64 %1511, i64* %1512, align 8, !alias.scope !1014, !noalias !1017
  %1513 = shl nuw nsw i64 %1503, 2
  %1514 = add i64 %1485, -1
  %1515 = lshr i64 %125, 3
  %1516 = getelementptr inbounds i8, i8* %10, i64 %1515
  %1517 = load i8, i8* %1516, align 1, !alias.scope !1019, !noalias !1022
  %1518 = zext i8 %1517 to i64
  %1519 = and i64 %125, 7
  %1520 = shl i64 %1514, %1519
  %1521 = or i64 %1520, %1518
  %1522 = bitcast i8* %1516 to i64*
  store i64 %1521, i64* %1522, align 8, !alias.scope !1019, !noalias !1022
  %1523 = add i64 %1513, %125
  %1524 = lshr i64 %1523, 3
  %1525 = getelementptr inbounds i8, i8* %10, i64 %1524
  %1526 = load i8, i8* %1525, align 1, !alias.scope !1024, !noalias !1027
  %1527 = zext i8 %1526 to i64
  %1528 = and i64 %1523, 7
  %1529 = shl i64 1, %1528
  %1530 = or i64 %1529, %1527
  %1531 = bitcast i8* %1525 to i64*
  store i64 %1530, i64* %1531, align 8, !alias.scope !1024, !noalias !1027
  %1532 = add i64 %1523, 8
  %1533 = and i64 %1532, 4294967288
  store i64 %1533, i64* %9, align 8
  %1534 = lshr exact i64 %1533, 3
  %1535 = getelementptr inbounds i8, i8* %10, i64 %1534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1535, i8* align 1 %128, i64 %1485, i1 false) #6
  %1536 = shl i64 %1485, 3
  %1537 = load i64, i64* %9, align 8
  %1538 = add i64 %1537, %1536
  store i64 %1538, i64* %9, align 8
  %1539 = lshr i64 %1538, 3
  %1540 = getelementptr inbounds i8, i8* %10, i64 %1539
  store i8 0, i8* %1540, align 1
  br label %1695

1541:                                             ; preds = %1478
  %1542 = icmp ult i64 %1291, 22594
  br i1 %1542, label %1543, label %1570

1543:                                             ; preds = %1541
  %1544 = load i8, i8* %110, align 1
  %1545 = zext i8 %1544 to i64
  %1546 = load i16, i16* %111, align 2
  %1547 = zext i16 %1546 to i64
  %1548 = load i64, i64* %9, align 8, !alias.scope !1029, !noalias !1032
  %1549 = lshr i64 %1548, 3
  %1550 = getelementptr inbounds i8, i8* %10, i64 %1549
  %1551 = load i8, i8* %1550, align 1, !alias.scope !1032, !noalias !1029
  %1552 = zext i8 %1551 to i64
  %1553 = and i64 %1548, 7
  %1554 = shl i64 %1547, %1553
  %1555 = or i64 %1554, %1552
  %1556 = bitcast i8* %1550 to i64*
  store i64 %1555, i64* %1556, align 8, !alias.scope !1032, !noalias !1029
  %1557 = add i64 %1548, %1545
  %1558 = add nsw i64 %1291, -6210
  %1559 = lshr i64 %1557, 3
  %1560 = getelementptr inbounds i8, i8* %10, i64 %1559
  %1561 = load i8, i8* %1560, align 1, !alias.scope !1034, !noalias !1037
  %1562 = zext i8 %1561 to i64
  %1563 = and i64 %1557, 7
  %1564 = shl i64 %1558, %1563
  %1565 = or i64 %1564, %1562
  %1566 = bitcast i8* %1560 to i64*
  store i64 %1565, i64* %1566, align 8, !alias.scope !1034, !noalias !1037
  %1567 = add i64 %1557, 14
  store i64 %1567, i64* %9, align 8, !alias.scope !1037, !noalias !1034
  %1568 = load i32, i32* %112, align 8
  %1569 = add i32 %1568, 1
  store i32 %1569, i32* %112, align 8
  br label %1597

1570:                                             ; preds = %1541
  %1571 = load i8, i8* %107, align 1
  %1572 = zext i8 %1571 to i64
  %1573 = load i16, i16* %108, align 2
  %1574 = zext i16 %1573 to i64
  %1575 = load i64, i64* %9, align 8, !alias.scope !1039, !noalias !1042
  %1576 = lshr i64 %1575, 3
  %1577 = getelementptr inbounds i8, i8* %10, i64 %1576
  %1578 = load i8, i8* %1577, align 1, !alias.scope !1042, !noalias !1039
  %1579 = zext i8 %1578 to i64
  %1580 = and i64 %1575, 7
  %1581 = shl i64 %1574, %1580
  %1582 = or i64 %1581, %1579
  %1583 = bitcast i8* %1577 to i64*
  store i64 %1582, i64* %1583, align 8, !alias.scope !1042, !noalias !1039
  %1584 = add i64 %1575, %1572
  %1585 = add i64 %1291, -22594
  %1586 = lshr i64 %1584, 3
  %1587 = getelementptr inbounds i8, i8* %10, i64 %1586
  %1588 = load i8, i8* %1587, align 1, !alias.scope !1044, !noalias !1047
  %1589 = zext i8 %1588 to i64
  %1590 = and i64 %1584, 7
  %1591 = shl i64 %1585, %1590
  %1592 = or i64 %1591, %1589
  %1593 = bitcast i8* %1587 to i64*
  store i64 %1592, i64* %1593, align 8, !alias.scope !1044, !noalias !1047
  %1594 = add i64 %1584, 24
  store i64 %1594, i64* %9, align 8, !alias.scope !1047, !noalias !1044
  %1595 = load i32, i32* %109, align 4
  %1596 = add i32 %1595, 1
  store i32 %1596, i32* %109, align 4
  br label %1597

1597:                                             ; preds = %1570, %1543
  %1598 = phi i64 [ %1567, %1543 ], [ %1594, %1570 ]
  %1599 = xor i64 %1290, -1
  %1600 = and i64 %1291, 1
  %1601 = sub i64 0, %1289
  %1602 = icmp eq i64 %1599, %1601
  br i1 %1602, label %1672, label %1603

1603:                                             ; preds = %1597
  %1604 = sub i64 %1291, %1600
  br label %1605

1605:                                             ; preds = %1605, %1603
  %1606 = phi i64 [ %1598, %1603 ], [ %1645, %1605 ]
  %1607 = phi i64 [ 0, %1603 ], [ %1646, %1605 ]
  %1608 = phi i64 [ %1604, %1603 ], [ %1647, %1605 ]
  %1609 = getelementptr inbounds i8, i8* %1190, i64 %1607
  %1610 = load i8, i8* %1609, align 1
  %1611 = zext i8 %1610 to i64
  %1612 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1611
  %1613 = load i8, i8* %1612, align 1
  %1614 = zext i8 %1613 to i64
  %1615 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1611
  %1616 = load i16, i16* %1615, align 2
  %1617 = zext i16 %1616 to i64
  %1618 = lshr i64 %1606, 3
  %1619 = getelementptr inbounds i8, i8* %10, i64 %1618
  %1620 = load i8, i8* %1619, align 1, !alias.scope !1049, !noalias !1052
  %1621 = zext i8 %1620 to i64
  %1622 = and i64 %1606, 7
  %1623 = shl i64 %1617, %1622
  %1624 = or i64 %1623, %1621
  %1625 = bitcast i8* %1619 to i64*
  store i64 %1624, i64* %1625, align 8, !alias.scope !1049, !noalias !1052
  %1626 = add i64 %1606, %1614
  store i64 %1626, i64* %9, align 8, !alias.scope !1052, !noalias !1049
  %1627 = or i64 %1607, 1
  %1628 = getelementptr inbounds i8, i8* %1190, i64 %1627
  %1629 = load i8, i8* %1628, align 1
  %1630 = zext i8 %1629 to i64
  %1631 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1630
  %1632 = load i8, i8* %1631, align 1
  %1633 = zext i8 %1632 to i64
  %1634 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1630
  %1635 = load i16, i16* %1634, align 2
  %1636 = zext i16 %1635 to i64
  %1637 = lshr i64 %1626, 3
  %1638 = getelementptr inbounds i8, i8* %10, i64 %1637
  %1639 = load i8, i8* %1638, align 1, !alias.scope !1049, !noalias !1052
  %1640 = zext i8 %1639 to i64
  %1641 = and i64 %1626, 7
  %1642 = shl i64 %1636, %1641
  %1643 = or i64 %1642, %1640
  %1644 = bitcast i8* %1638 to i64*
  store i64 %1643, i64* %1644, align 8, !alias.scope !1049, !noalias !1052
  %1645 = add i64 %1626, %1633
  store i64 %1645, i64* %9, align 8, !alias.scope !1052, !noalias !1049
  %1646 = add nuw i64 %1607, 2
  %1647 = add i64 %1608, -2
  %1648 = icmp eq i64 %1647, 0
  br i1 %1648, label %1672, label %1605

1649:                                             ; preds = %1434, %1426
  %1650 = phi i64 [ %1427, %1426 ], [ %1474, %1434 ]
  %1651 = phi i64 [ 0, %1426 ], [ %1475, %1434 ]
  %1652 = icmp eq i64 %1429, 0
  br i1 %1652, label %1695, label %1653

1653:                                             ; preds = %1649
  %1654 = getelementptr inbounds i8, i8* %1190, i64 %1651
  %1655 = load i8, i8* %1654, align 1
  %1656 = zext i8 %1655 to i64
  %1657 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1656
  %1658 = load i8, i8* %1657, align 1
  %1659 = zext i8 %1658 to i64
  %1660 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1656
  %1661 = load i16, i16* %1660, align 2
  %1662 = zext i16 %1661 to i64
  %1663 = lshr i64 %1650, 3
  %1664 = getelementptr inbounds i8, i8* %10, i64 %1663
  %1665 = load i8, i8* %1664, align 1, !alias.scope !1004, !noalias !1007
  %1666 = zext i8 %1665 to i64
  %1667 = and i64 %1650, 7
  %1668 = shl i64 %1662, %1667
  %1669 = or i64 %1668, %1666
  %1670 = bitcast i8* %1664 to i64*
  store i64 %1669, i64* %1670, align 8, !alias.scope !1004, !noalias !1007
  %1671 = add i64 %1650, %1659
  store i64 %1671, i64* %9, align 8, !alias.scope !1007, !noalias !1004
  br label %1695

1672:                                             ; preds = %1605, %1597
  %1673 = phi i64 [ %1598, %1597 ], [ %1645, %1605 ]
  %1674 = phi i64 [ 0, %1597 ], [ %1646, %1605 ]
  %1675 = icmp eq i64 %1600, 0
  br i1 %1675, label %1695, label %1676

1676:                                             ; preds = %1672
  %1677 = getelementptr inbounds i8, i8* %1190, i64 %1674
  %1678 = load i8, i8* %1677, align 1
  %1679 = zext i8 %1678 to i64
  %1680 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1679
  %1681 = load i8, i8* %1680, align 1
  %1682 = zext i8 %1681 to i64
  %1683 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1679
  %1684 = load i16, i16* %1683, align 2
  %1685 = zext i16 %1684 to i64
  %1686 = lshr i64 %1673, 3
  %1687 = getelementptr inbounds i8, i8* %10, i64 %1686
  %1688 = load i8, i8* %1687, align 1, !alias.scope !1049, !noalias !1052
  %1689 = zext i8 %1688 to i64
  %1690 = and i64 %1673, 7
  %1691 = shl i64 %1685, %1690
  %1692 = or i64 %1691, %1689
  %1693 = bitcast i8* %1687 to i64*
  store i64 %1692, i64* %1693, align 8, !alias.scope !1049, !noalias !1052
  %1694 = add i64 %1673, %1682
  store i64 %1694, i64* %9, align 8, !alias.scope !1052, !noalias !1049
  br label %1695

1695:                                             ; preds = %1676, %1672, %1653, %1649, %1483, %1399, %1286, %385
  %1696 = phi i8* [ %138, %1483 ], [ %138, %1286 ], [ %138, %1399 ], [ %160, %385 ], [ %138, %1649 ], [ %138, %1653 ], [ %138, %1672 ], [ %138, %1676 ]
  %1697 = phi i64 [ %1191, %1483 ], [ %1191, %1286 ], [ %1191, %1399 ], [ %445, %385 ], [ %1191, %1649 ], [ %1191, %1653 ], [ %1191, %1672 ], [ %1191, %1676 ]
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1745, label %1699

1699:                                             ; preds = %1695
  %1700 = icmp ult i64 %1697, 98304
  %1701 = select i1 %1700, i64 %1697, i64 98304
  %1702 = load i64, i64* %9, align 8
  %1703 = add i64 %1702, 3
  %1704 = lshr i64 %1702, 3
  %1705 = getelementptr inbounds i8, i8* %10, i64 %1704
  %1706 = load i8, i8* %1705, align 1, !alias.scope !1054, !noalias !1057
  %1707 = zext i8 %1706 to i64
  %1708 = bitcast i8* %1705 to i64*
  store i64 %1707, i64* %1708, align 8, !alias.scope !1054, !noalias !1057
  %1709 = add i64 %1702, 1
  %1710 = icmp ult i64 %1701, 65537
  %1711 = select i1 %1710, i64 4, i64 5
  %1712 = add nsw i64 %1711, -4
  %1713 = lshr i64 %1709, 3
  %1714 = getelementptr inbounds i8, i8* %10, i64 %1713
  %1715 = load i8, i8* %1714, align 1, !alias.scope !1059, !noalias !1062
  %1716 = zext i8 %1715 to i64
  %1717 = and i64 %1709, 7
  %1718 = shl i64 %1712, %1717
  %1719 = or i64 %1718, %1716
  %1720 = bitcast i8* %1714 to i64*
  store i64 %1719, i64* %1720, align 8, !alias.scope !1059, !noalias !1062
  %1721 = shl nuw nsw i64 %1711, 2
  %1722 = add nsw i64 %1701, -1
  %1723 = lshr i64 %1703, 3
  %1724 = getelementptr inbounds i8, i8* %10, i64 %1723
  %1725 = load i8, i8* %1724, align 1, !alias.scope !1064, !noalias !1067
  %1726 = zext i8 %1725 to i64
  %1727 = and i64 %1703, 7
  %1728 = shl i64 %1722, %1727
  %1729 = or i64 %1728, %1726
  %1730 = bitcast i8* %1724 to i64*
  store i64 %1729, i64* %1730, align 8, !alias.scope !1064, !noalias !1067
  %1731 = add i64 %1703, %1721
  %1732 = lshr i64 %1731, 3
  %1733 = getelementptr inbounds i8, i8* %10, i64 %1732
  %1734 = load i8, i8* %1733, align 1, !alias.scope !1069, !noalias !1072
  %1735 = zext i8 %1734 to i64
  %1736 = bitcast i8* %1733 to i64*
  store i64 %1735, i64* %1736, align 8, !alias.scope !1069, !noalias !1072
  %1737 = add i64 %1731, 1
  %1738 = lshr i64 %1737, 3
  %1739 = getelementptr inbounds i8, i8* %10, i64 %1738
  %1740 = load i8, i8* %1739, align 1, !alias.scope !1074, !noalias !1077
  %1741 = zext i8 %1740 to i64
  %1742 = bitcast i8* %1739 to i64*
  store i64 %1741, i64* %1742, align 8, !alias.scope !1074, !noalias !1077
  %1743 = add i64 %1731, 14
  store i64 %1743, i64* %9, align 8, !alias.scope !1077, !noalias !1074
  %1744 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1696, i64 %1701, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %9, i8* %10) #6
  br label %124

1745:                                             ; preds = %1695
  %1746 = icmp eq i32 %3, 0
  br i1 %1746, label %1747, label %1748

1747:                                             ; preds = %1745
  store i8 0, i8* %8, align 1
  store i64 0, i64* %7, align 8
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %7, i8* %8) #6
  br label %1748

1748:                                             ; preds = %1745, %1747
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %16) #6
  ret void

1749:                                             ; preds = %257
  %1750 = getelementptr inbounds i8, i8* %249, i64 1
  %1751 = getelementptr inbounds i8, i8* %221, i64 %258
  %1752 = load i8, i8* %1751, align 1
  %1753 = load i8, i8* %1750, align 1
  %1754 = icmp eq i8 %1752, %1753
  br i1 %1754, label %1755, label %260, !prof !75

1755:                                             ; preds = %1749
  %1756 = add i64 %248, 2
  %1757 = icmp eq i64 %250, 2
  br i1 %1757, label %260, label %1758

1758:                                             ; preds = %1755
  %1759 = getelementptr inbounds i8, i8* %249, i64 2
  %1760 = getelementptr inbounds i8, i8* %221, i64 %1756
  %1761 = load i8, i8* %1760, align 1
  %1762 = load i8, i8* %1759, align 1
  %1763 = icmp eq i8 %1761, %1762
  br i1 %1763, label %1764, label %260, !prof !75

1764:                                             ; preds = %1758
  %1765 = add i64 %248, 3
  %1766 = icmp eq i64 %250, 3
  br i1 %1766, label %260, label %1767

1767:                                             ; preds = %1764
  %1768 = getelementptr inbounds i8, i8* %249, i64 3
  %1769 = getelementptr inbounds i8, i8* %221, i64 %1765
  %1770 = load i8, i8* %1769, align 1
  %1771 = load i8, i8* %1768, align 1
  %1772 = icmp eq i8 %1770, %1771
  br i1 %1772, label %1773, label %260, !prof !75

1773:                                             ; preds = %1767
  %1774 = add i64 %248, 4
  %1775 = icmp eq i64 %250, 4
  br i1 %1775, label %260, label %1776

1776:                                             ; preds = %1773
  %1777 = getelementptr inbounds i8, i8* %249, i64 4
  %1778 = getelementptr inbounds i8, i8* %221, i64 %1774
  %1779 = load i8, i8* %1778, align 1
  %1780 = load i8, i8* %1777, align 1
  %1781 = icmp eq i8 %1779, %1780
  br i1 %1781, label %1782, label %260, !prof !75

1782:                                             ; preds = %1776
  %1783 = add i64 %248, 5
  %1784 = icmp eq i64 %250, 5
  br i1 %1784, label %260, label %1785

1785:                                             ; preds = %1782
  %1786 = getelementptr inbounds i8, i8* %249, i64 5
  %1787 = getelementptr inbounds i8, i8* %221, i64 %1783
  %1788 = load i8, i8* %1787, align 1
  %1789 = load i8, i8* %1786, align 1
  %1790 = icmp eq i8 %1788, %1789
  br i1 %1790, label %1791, label %260, !prof !75

1791:                                             ; preds = %1785
  %1792 = add i64 %248, 6
  %1793 = icmp eq i64 %250, 6
  br i1 %1793, label %260, label %1794

1794:                                             ; preds = %1791
  %1795 = getelementptr inbounds i8, i8* %249, i64 6
  %1796 = getelementptr inbounds i8, i8* %221, i64 %1792
  %1797 = load i8, i8* %1796, align 1
  %1798 = load i8, i8* %1795, align 1
  %1799 = icmp eq i8 %1797, %1798
  %1800 = add i64 %248, 7
  %1801 = select i1 %1799, i64 %1800, i64 %1792, !prof !75
  br label %260

1802:                                             ; preds = %962
  %1803 = getelementptr inbounds i8, i8* %954, i64 1
  %1804 = getelementptr inbounds i8, i8* %925, i64 %963
  %1805 = load i8, i8* %1804, align 1
  %1806 = load i8, i8* %1803, align 1
  %1807 = icmp eq i8 %1805, %1806
  br i1 %1807, label %1808, label %965, !prof !75

1808:                                             ; preds = %1802
  %1809 = add i64 %953, 2
  %1810 = icmp eq i64 %955, 2
  br i1 %1810, label %965, label %1811

1811:                                             ; preds = %1808
  %1812 = getelementptr inbounds i8, i8* %954, i64 2
  %1813 = getelementptr inbounds i8, i8* %925, i64 %1809
  %1814 = load i8, i8* %1813, align 1
  %1815 = load i8, i8* %1812, align 1
  %1816 = icmp eq i8 %1814, %1815
  br i1 %1816, label %1817, label %965, !prof !75

1817:                                             ; preds = %1811
  %1818 = add i64 %953, 3
  %1819 = icmp eq i64 %955, 3
  br i1 %1819, label %965, label %1820

1820:                                             ; preds = %1817
  %1821 = getelementptr inbounds i8, i8* %954, i64 3
  %1822 = getelementptr inbounds i8, i8* %925, i64 %1818
  %1823 = load i8, i8* %1822, align 1
  %1824 = load i8, i8* %1821, align 1
  %1825 = icmp eq i8 %1823, %1824
  br i1 %1825, label %1826, label %965, !prof !75

1826:                                             ; preds = %1820
  %1827 = add i64 %953, 4
  %1828 = icmp eq i64 %955, 4
  br i1 %1828, label %965, label %1829

1829:                                             ; preds = %1826
  %1830 = getelementptr inbounds i8, i8* %954, i64 4
  %1831 = getelementptr inbounds i8, i8* %925, i64 %1827
  %1832 = load i8, i8* %1831, align 1
  %1833 = load i8, i8* %1830, align 1
  %1834 = icmp eq i8 %1832, %1833
  br i1 %1834, label %1835, label %965, !prof !75

1835:                                             ; preds = %1829
  %1836 = add i64 %953, 5
  %1837 = icmp eq i64 %955, 5
  br i1 %1837, label %965, label %1838

1838:                                             ; preds = %1835
  %1839 = getelementptr inbounds i8, i8* %954, i64 5
  %1840 = getelementptr inbounds i8, i8* %925, i64 %1836
  %1841 = load i8, i8* %1840, align 1
  %1842 = load i8, i8* %1839, align 1
  %1843 = icmp eq i8 %1841, %1842
  br i1 %1843, label %1844, label %965, !prof !75

1844:                                             ; preds = %1838
  %1845 = add i64 %953, 6
  %1846 = icmp eq i64 %955, 6
  br i1 %1846, label %965, label %1847

1847:                                             ; preds = %1844
  %1848 = getelementptr inbounds i8, i8* %954, i64 6
  %1849 = getelementptr inbounds i8, i8* %925, i64 %1845
  %1850 = load i8, i8* %1849, align 1
  %1851 = load i8, i8* %1848, align 1
  %1852 = icmp eq i8 %1850, %1851
  %1853 = add i64 %953, 7
  %1854 = select i1 %1852, i64 %1853, i64 %1845, !prof !75
  br label %965
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentFastImpl15(%struct.MemoryManager*, i8*, i64, i32, i32* nocapture, i8*, i16*, i64*, i8*, i64*, i8*) unnamed_addr #2 {
  %12 = alloca [256 x i64], align 16
  %13 = alloca [128 x i32], align 16
  %14 = alloca [256 x i8], align 16
  %15 = alloca [256 x i16], align 16
  %16 = bitcast [128 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 512, i1 false) #6
  %17 = icmp ult i64 %2, 98304
  %18 = select i1 %17, i64 %2, i64 98304
  %19 = load i64, i64* %9, align 8
  %20 = add i64 %19, 3
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 256, i1 false) #6
  %22 = bitcast [256 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 512, i1 false) #6
  %23 = lshr i64 %19, 3
  %24 = getelementptr inbounds i8, i8* %10, i64 %23
  %25 = load i8, i8* %24, align 1, !alias.scope !1079, !noalias !1082
  %26 = zext i8 %25 to i64
  %27 = bitcast i8* %24 to i64*
  store i64 %26, i64* %27, align 8, !alias.scope !1079, !noalias !1082
  %28 = add i64 %19, 1
  %29 = icmp ult i64 %18, 65537
  %30 = select i1 %29, i64 4, i64 5
  %31 = add nsw i64 %30, -4
  %32 = lshr i64 %28, 3
  %33 = getelementptr inbounds i8, i8* %10, i64 %32
  %34 = load i8, i8* %33, align 1, !alias.scope !1084, !noalias !1087
  %35 = zext i8 %34 to i64
  %36 = and i64 %28, 7
  %37 = shl i64 %31, %36
  %38 = or i64 %37, %35
  %39 = bitcast i8* %33 to i64*
  store i64 %38, i64* %39, align 8, !alias.scope !1084, !noalias !1087
  %40 = shl nuw nsw i64 %30, 2
  %41 = add nsw i64 %18, -1
  %42 = lshr i64 %20, 3
  %43 = getelementptr inbounds i8, i8* %10, i64 %42
  %44 = load i8, i8* %43, align 1, !alias.scope !1089, !noalias !1092
  %45 = zext i8 %44 to i64
  %46 = and i64 %20, 7
  %47 = shl i64 %41, %46
  %48 = or i64 %47, %45
  %49 = bitcast i8* %43 to i64*
  store i64 %48, i64* %49, align 8, !alias.scope !1089, !noalias !1092
  %50 = add i64 %20, %40
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds i8, i8* %10, i64 %51
  %53 = load i8, i8* %52, align 1, !alias.scope !1094, !noalias !1097
  %54 = zext i8 %53 to i64
  %55 = bitcast i8* %52 to i64*
  store i64 %54, i64* %55, align 8, !alias.scope !1094, !noalias !1097
  %56 = add i64 %50, 1
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds i8, i8* %10, i64 %57
  %59 = load i8, i8* %58, align 1, !alias.scope !1099, !noalias !1102
  %60 = zext i8 %59 to i64
  %61 = bitcast i8* %58 to i64*
  store i64 %60, i64* %61, align 8, !alias.scope !1099, !noalias !1102
  %62 = add i64 %50, 14
  store i64 %62, i64* %9, align 8, !alias.scope !1102, !noalias !1099
  %63 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 0
  %64 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1, i64 %18, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  %65 = load i64, i64* %7, align 8
  %66 = icmp ugt i64 %65, 7
  %67 = load i64, i64* %9, align 8
  br i1 %66, label %68, label %89

68:                                               ; preds = %11
  %69 = and i64 %67, 7
  br label %70

70:                                               ; preds = %68, %70
  %71 = phi i64 [ %84, %70 ], [ %67, %68 ]
  %72 = phi i64 [ %85, %70 ], [ 0, %68 ]
  %73 = lshr exact i64 %72, 3
  %74 = getelementptr inbounds i8, i8* %8, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = lshr i64 %71, 3
  %78 = getelementptr inbounds i8, i8* %10, i64 %77
  %79 = load i8, i8* %78, align 1, !alias.scope !1104, !noalias !1107
  %80 = zext i8 %79 to i64
  %81 = shl i64 %76, %69
  %82 = or i64 %81, %80
  %83 = bitcast i8* %78 to i64*
  store i64 %82, i64* %83, align 8, !alias.scope !1104, !noalias !1107
  %84 = add i64 %71, 8
  store i64 %84, i64* %9, align 8, !alias.scope !1107, !noalias !1104
  %85 = add i64 %72, 8
  %86 = or i64 %85, 7
  %87 = load i64, i64* %7, align 8
  %88 = icmp ult i64 %86, %87
  br i1 %88, label %70, label %89

89:                                               ; preds = %70, %11
  %90 = phi i64 [ %67, %11 ], [ %84, %70 ]
  %91 = phi i64 [ %65, %11 ], [ %87, %70 ]
  %92 = and i64 %91, 7
  %93 = lshr i64 %91, 3
  %94 = getelementptr inbounds i8, i8* %8, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = lshr i64 %90, 3
  %98 = getelementptr inbounds i8, i8* %10, i64 %97
  %99 = load i8, i8* %98, align 1, !alias.scope !1109, !noalias !1112
  %100 = zext i8 %99 to i64
  %101 = and i64 %90, 7
  %102 = shl i64 %96, %101
  %103 = or i64 %102, %100
  %104 = bitcast i8* %98 to i64*
  store i64 %103, i64* %104, align 8, !alias.scope !1109, !noalias !1112
  %105 = add i64 %92, %90
  store i64 %105, i64* %9, align 8, !alias.scope !1112, !noalias !1109
  %106 = ptrtoint i8* %1 to i64
  %107 = getelementptr inbounds i8, i8* %5, i64 63
  %108 = getelementptr inbounds i16, i16* %6, i64 63
  %109 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 63
  %110 = getelementptr inbounds i8, i8* %5, i64 62
  %111 = getelementptr inbounds i16, i16* %6, i64 62
  %112 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 62
  %113 = getelementptr inbounds i8, i8* %5, i64 61
  %114 = getelementptr inbounds i16, i16* %6, i64 61
  %115 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 61
  %116 = getelementptr inbounds i8, i8* %5, i64 64
  %117 = getelementptr inbounds i16, i16* %6, i64 64
  %118 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 64
  %119 = getelementptr inbounds i8, i8* %5, i64 39
  %120 = getelementptr inbounds i16, i16* %6, i64 39
  %121 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 39
  %122 = bitcast [256 x i64]* %12 to i8*
  %123 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 0
  br label %124

124:                                              ; preds = %1699, %89
  %125 = phi i64 [ %1703, %1699 ], [ %20, %89 ]
  %126 = phi i64 [ %1744, %1699 ], [ %64, %89 ]
  %127 = phi i64 [ %1701, %1699 ], [ %18, %89 ]
  %128 = phi i8* [ %1696, %1699 ], [ %1, %89 ]
  %129 = phi i64 [ %1697, %1699 ], [ %2, %89 ]
  %130 = ptrtoint i8* %128 to i64
  %131 = icmp ult i64 %126, 981
  br label %132

132:                                              ; preds = %1255, %124
  %133 = phi i64 [ %127, %124 ], [ %1196, %1255 ]
  %134 = phi i64 [ %127, %124 ], [ %1193, %1255 ]
  %135 = phi i8* [ %128, %124 ], [ %1190, %1255 ]
  %136 = phi i64 [ %129, %124 ], [ %1191, %1255 ]
  %137 = phi i8* [ %128, %124 ], [ %138, %1255 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %16, i8* align 16 bitcast ([128 x i32]* @kCmdHistoSeed to i8*), i64 512, i1 false) #6
  %138 = getelementptr inbounds i8, i8* %137, i64 %134
  %139 = icmp ugt i64 %134, 15
  br i1 %139, label %140, label %1189, !prof !75

140:                                              ; preds = %132
  %141 = add nsw i64 %134, -5
  %142 = add i64 %136, -16
  %143 = icmp ult i64 %141, %142
  %144 = select i1 %143, i64 %141, i64 %142
  %145 = getelementptr inbounds i8, i8* %137, i64 %144
  %146 = ptrtoint i8* %138 to i64
  br label %147

147:                                              ; preds = %1184, %140
  %148 = phi i8* [ %137, %140 ], [ %1185, %1184 ]
  %149 = phi i32 [ -1, %140 ], [ %1186, %1184 ]
  %150 = phi i8* [ %135, %140 ], [ %1185, %1184 ]
  %151 = getelementptr inbounds i8, i8* %148, i64 1
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = sext i32 %149 to i64
  %155 = sub nsw i64 0, %154
  %156 = icmp sgt i32 %149, 0
  br label %157

157:                                              ; preds = %211, %147
  %158 = phi i64 [ %153, %147 ], [ %170, %211 ]
  %159 = phi i32 [ 32, %147 ], [ %163, %211 ]
  %160 = phi i8* [ %151, %147 ], [ %166, %211 ]
  %161 = mul i64 %158, 8503243848024064
  %162 = lshr i64 %161, 49
  %163 = add i32 %159, 1
  %164 = lshr i32 %159, 5
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %160, i64 %165
  %167 = icmp ugt i8* %166, %145
  br i1 %167, label %1189, label %168, !prof !76

168:                                              ; preds = %157
  %169 = bitcast i8* %166 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds i8, i8* %160, i64 %155
  %172 = bitcast i8* %160 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = bitcast i8* %171 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %173, %175
  br i1 %176, label %177, label %189

177:                                              ; preds = %168
  %178 = getelementptr inbounds i8, i8* %160, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds i8, i8* %171, i64 4
  %181 = load i8, i8* %180, align 1
  %182 = icmp eq i8 %179, %181
  %183 = and i1 %156, %182
  br i1 %183, label %184, label %189, !prof !77

184:                                              ; preds = %177
  %185 = ptrtoint i8* %160 to i64
  %186 = sub i64 %185, %106
  %187 = trunc i64 %186 to i32
  %188 = getelementptr inbounds i32, i32* %4, i64 %162
  store i32 %187, i32* %188, align 4
  br label %214

189:                                              ; preds = %177, %168
  %190 = getelementptr inbounds i32, i32* %4, i64 %162
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i8, i8* %1, i64 %192
  %194 = ptrtoint i8* %160 to i64
  %195 = sub i64 %194, %106
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %190, align 4
  %197 = load i32, i32* %172, align 4
  %198 = bitcast i8* %193 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %201, label %208

201:                                              ; preds = %189
  %202 = getelementptr inbounds i8, i8* %160, i64 4
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds i8, i8* %193, i64 4
  %205 = load i8, i8* %204, align 1
  %206 = icmp eq i8 %203, %205
  %207 = zext i1 %206 to i32
  br label %208

208:                                              ; preds = %201, %189
  %209 = phi i32 [ 0, %189 ], [ %207, %201 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212, !prof !75

211:                                              ; preds = %208, %214
  br label %157

212:                                              ; preds = %208
  %213 = ptrtoint i8* %160 to i64
  br label %214

214:                                              ; preds = %212, %184
  %215 = phi i64 [ %185, %184 ], [ %213, %212 ]
  %216 = phi i8* [ %171, %184 ], [ %193, %212 ]
  %217 = ptrtoint i8* %216 to i64
  %218 = sub i64 %215, %217
  %219 = icmp sgt i64 %218, 262128
  br i1 %219, label %211, label %220

220:                                              ; preds = %214
  %221 = getelementptr inbounds i8, i8* %216, i64 5
  %222 = getelementptr inbounds i8, i8* %160, i64 5
  %223 = sub i64 %146, %215
  %224 = add i64 %223, -5
  %225 = lshr i64 %224, 3
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %247, label %227, !prof !76

227:                                              ; preds = %220, %237
  %228 = phi i64 [ %240, %237 ], [ %225, %220 ]
  %229 = phi i8* [ %238, %237 ], [ %222, %220 ]
  %230 = phi i64 [ %239, %237 ], [ 0, %220 ]
  %231 = bitcast i8* %229 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds i8, i8* %221, i64 %230
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = icmp eq i64 %232, %235
  br i1 %236, label %237, label %242, !prof !76

237:                                              ; preds = %227
  %238 = getelementptr inbounds i8, i8* %229, i64 8
  %239 = add nuw i64 %230, 8
  %240 = add nsw i64 %228, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %247, label %227, !prof !76

242:                                              ; preds = %227
  %243 = xor i64 %235, %232
  %244 = call i64 @llvm.cttz.i64(i64 %243, i1 true) #6, !range !78
  %245 = lshr i64 %244, 3
  %246 = or i64 %245, %230
  br label %260

247:                                              ; preds = %237, %220
  %248 = phi i64 [ 0, %220 ], [ %239, %237 ]
  %249 = phi i8* [ %222, %220 ], [ %238, %237 ]
  %250 = and i64 %224, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds i8, i8* %221, i64 %248
  %254 = load i8, i8* %253, align 1
  %255 = load i8, i8* %249, align 1
  %256 = icmp eq i8 %254, %255
  br i1 %256, label %257, label %260, !prof !75

257:                                              ; preds = %252
  %258 = add i64 %248, 1
  %259 = icmp eq i64 %250, 1
  br i1 %259, label %260, label %1749

260:                                              ; preds = %1794, %257, %252, %1749, %1755, %1758, %1764, %1767, %1773, %1776, %1782, %1785, %1791, %247, %242
  %261 = phi i64 [ %246, %242 ], [ %248, %247 ], [ %248, %252 ], [ %258, %257 ], [ %258, %1749 ], [ %1756, %1755 ], [ %1756, %1758 ], [ %1765, %1764 ], [ %1765, %1767 ], [ %1774, %1773 ], [ %1774, %1776 ], [ %1783, %1782 ], [ %1783, %1785 ], [ %1792, %1791 ], [ %1801, %1794 ]
  %262 = add i64 %261, 5
  %263 = trunc i64 %218 to i32
  %264 = ptrtoint i8* %150 to i64
  %265 = sub i64 %215, %264
  %266 = getelementptr inbounds i8, i8* %160, i64 %262
  %267 = icmp ult i64 %265, 6210
  br i1 %267, label %268, label %380, !prof !75

268:                                              ; preds = %260
  %269 = icmp ult i64 %265, 6
  br i1 %269, label %502, label %270

270:                                              ; preds = %268
  %271 = icmp ult i64 %265, 130
  br i1 %271, label %272, label %313

272:                                              ; preds = %270
  %273 = add nsw i64 %265, -2
  %274 = trunc i64 %273 to i32
  %275 = call i32 @llvm.ctlz.i32(i32 %274, i1 true) #6, !range !7
  %276 = sub nsw i32 30, %275
  %277 = zext i32 %276 to i64
  %278 = lshr i64 %273, %277
  %279 = shl nsw i32 %276, 1
  %280 = zext i32 %279 to i64
  %281 = add nuw nsw i64 %280, 42
  %282 = add nuw nsw i64 %281, %278
  %283 = getelementptr inbounds i8, i8* %5, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i64
  %286 = getelementptr inbounds i16, i16* %6, i64 %282
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i64
  %289 = load i64, i64* %9, align 8, !alias.scope !1114, !noalias !1117
  %290 = lshr i64 %289, 3
  %291 = getelementptr inbounds i8, i8* %10, i64 %290
  %292 = load i8, i8* %291, align 1, !alias.scope !1117, !noalias !1114
  %293 = zext i8 %292 to i64
  %294 = and i64 %289, 7
  %295 = shl i64 %288, %294
  %296 = or i64 %295, %293
  %297 = bitcast i8* %291 to i64*
  store i64 %296, i64* %297, align 8, !alias.scope !1117, !noalias !1114
  %298 = add i64 %289, %285
  %299 = shl i64 %278, %277
  %300 = sub i64 %273, %299
  %301 = lshr i64 %298, 3
  %302 = getelementptr inbounds i8, i8* %10, i64 %301
  %303 = load i8, i8* %302, align 1, !alias.scope !1119, !noalias !1122
  %304 = zext i8 %303 to i64
  %305 = and i64 %298, 7
  %306 = shl i64 %300, %305
  %307 = or i64 %306, %304
  %308 = bitcast i8* %302 to i64*
  store i64 %307, i64* %308, align 8, !alias.scope !1119, !noalias !1122
  %309 = add i64 %298, %277
  store i64 %309, i64* %9, align 8, !alias.scope !1122, !noalias !1119
  %310 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %282
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, 1
  store i32 %312, i32* %310, align 4
  br label %524

313:                                              ; preds = %270
  %314 = icmp ult i64 %265, 2114
  br i1 %314, label %315, label %353

315:                                              ; preds = %313
  %316 = add nsw i64 %265, -66
  %317 = trunc i64 %316 to i32
  %318 = call i32 @llvm.ctlz.i32(i32 %317, i1 true) #6, !range !7
  %319 = xor i32 %318, 31
  %320 = add nuw nsw i32 %319, 50
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %5, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds i16, i16* %6, i64 %321
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i64
  %328 = load i64, i64* %9, align 8, !alias.scope !1124, !noalias !1127
  %329 = lshr i64 %328, 3
  %330 = getelementptr inbounds i8, i8* %10, i64 %329
  %331 = load i8, i8* %330, align 1, !alias.scope !1127, !noalias !1124
  %332 = zext i8 %331 to i64
  %333 = and i64 %328, 7
  %334 = shl i64 %327, %333
  %335 = or i64 %334, %332
  %336 = bitcast i8* %330 to i64*
  store i64 %335, i64* %336, align 8, !alias.scope !1127, !noalias !1124
  %337 = add i64 %328, %324
  %338 = zext i32 %319 to i64
  %339 = shl i64 1, %338
  %340 = sub i64 %316, %339
  %341 = lshr i64 %337, 3
  %342 = getelementptr inbounds i8, i8* %10, i64 %341
  %343 = load i8, i8* %342, align 1, !alias.scope !1129, !noalias !1132
  %344 = zext i8 %343 to i64
  %345 = and i64 %337, 7
  %346 = shl i64 %340, %345
  %347 = or i64 %346, %344
  %348 = bitcast i8* %342 to i64*
  store i64 %347, i64* %348, align 8, !alias.scope !1129, !noalias !1132
  %349 = add i64 %337, %338
  store i64 %349, i64* %9, align 8, !alias.scope !1132, !noalias !1129
  %350 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %321
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %351, 1
  store i32 %352, i32* %350, align 4
  br label %524

353:                                              ; preds = %313
  %354 = load i8, i8* %113, align 1
  %355 = zext i8 %354 to i64
  %356 = load i16, i16* %114, align 2
  %357 = zext i16 %356 to i64
  %358 = load i64, i64* %9, align 8, !alias.scope !1134, !noalias !1137
  %359 = lshr i64 %358, 3
  %360 = getelementptr inbounds i8, i8* %10, i64 %359
  %361 = load i8, i8* %360, align 1, !alias.scope !1137, !noalias !1134
  %362 = zext i8 %361 to i64
  %363 = and i64 %358, 7
  %364 = shl i64 %357, %363
  %365 = or i64 %364, %362
  %366 = bitcast i8* %360 to i64*
  store i64 %365, i64* %366, align 8, !alias.scope !1137, !noalias !1134
  %367 = add i64 %358, %355
  %368 = add nsw i64 %265, -2114
  %369 = lshr i64 %367, 3
  %370 = getelementptr inbounds i8, i8* %10, i64 %369
  %371 = load i8, i8* %370, align 1, !alias.scope !1139, !noalias !1142
  %372 = zext i8 %371 to i64
  %373 = and i64 %367, 7
  %374 = shl i64 %368, %373
  %375 = or i64 %374, %372
  %376 = bitcast i8* %370 to i64*
  store i64 %375, i64* %376, align 8, !alias.scope !1139, !noalias !1142
  %377 = add i64 %367, 12
  store i64 %377, i64* %9, align 8, !alias.scope !1142, !noalias !1139
  %378 = load i32, i32* %115, align 4
  %379 = add i32 %378, 1
  store i32 %379, i32* %115, align 4
  br label %524

380:                                              ; preds = %260
  %381 = sub i64 %264, %130
  %382 = mul i64 %381, 50
  %383 = icmp ugt i64 %382, %265
  %384 = or i1 %131, %383
  br i1 %384, label %446, label %385

385:                                              ; preds = %380
  %386 = add i64 %125, -3
  %387 = sub i64 %215, %130
  %388 = trunc i64 %386 to i32
  %389 = and i32 %388, 7
  %390 = shl nsw i32 -1, %389
  %391 = lshr i64 %386, 3
  %392 = getelementptr inbounds i8, i8* %10, i64 %391
  %393 = load i8, i8* %392, align 1
  %394 = trunc i32 %390 to i8
  %395 = and i8 %394, 127
  %396 = xor i8 %395, 127
  %397 = and i8 %393, %396
  store i8 %397, i8* %392, align 1
  store i64 %386, i64* %9, align 8
  %398 = load i8, i8* %392, align 1, !alias.scope !1144, !noalias !1147
  %399 = zext i8 %398 to i64
  %400 = bitcast i8* %392 to i64*
  store i64 %399, i64* %400, align 8, !alias.scope !1144, !noalias !1147
  %401 = add i64 %125, -2
  %402 = icmp ult i64 %387, 65537
  %403 = icmp ult i64 %387, 1048577
  %404 = select i1 %403, i64 5, i64 6
  %405 = select i1 %402, i64 4, i64 %404
  %406 = add nsw i64 %405, -4
  %407 = lshr i64 %401, 3
  %408 = getelementptr inbounds i8, i8* %10, i64 %407
  %409 = load i8, i8* %408, align 1, !alias.scope !1149, !noalias !1152
  %410 = zext i8 %409 to i64
  %411 = and i64 %401, 7
  %412 = shl i64 %406, %411
  %413 = or i64 %412, %410
  %414 = bitcast i8* %408 to i64*
  store i64 %413, i64* %414, align 8, !alias.scope !1149, !noalias !1152
  %415 = shl nuw nsw i64 %405, 2
  %416 = add i64 %387, -1
  %417 = lshr i64 %125, 3
  %418 = getelementptr inbounds i8, i8* %10, i64 %417
  %419 = load i8, i8* %418, align 1, !alias.scope !1154, !noalias !1157
  %420 = zext i8 %419 to i64
  %421 = and i64 %125, 7
  %422 = shl i64 %416, %421
  %423 = or i64 %422, %420
  %424 = bitcast i8* %418 to i64*
  store i64 %423, i64* %424, align 8, !alias.scope !1154, !noalias !1157
  %425 = add i64 %415, %125
  %426 = lshr i64 %425, 3
  %427 = getelementptr inbounds i8, i8* %10, i64 %426
  %428 = load i8, i8* %427, align 1, !alias.scope !1159, !noalias !1162
  %429 = zext i8 %428 to i64
  %430 = and i64 %425, 7
  %431 = shl i64 1, %430
  %432 = or i64 %431, %429
  %433 = bitcast i8* %427 to i64*
  store i64 %432, i64* %433, align 8, !alias.scope !1159, !noalias !1162
  %434 = add i64 %425, 8
  %435 = and i64 %434, 4294967288
  store i64 %435, i64* %9, align 8
  %436 = lshr exact i64 %435, 3
  %437 = getelementptr inbounds i8, i8* %10, i64 %436
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %437, i8* align 1 %128, i64 %387, i1 false) #6
  %438 = shl i64 %387, 3
  %439 = load i64, i64* %9, align 8
  %440 = add i64 %439, %438
  store i64 %440, i64* %9, align 8
  %441 = lshr i64 %440, 3
  %442 = getelementptr inbounds i8, i8* %10, i64 %441
  store i8 0, i8* %442, align 1
  %443 = ptrtoint i8* %137 to i64
  %444 = add i64 %136, %443
  %445 = sub i64 %444, %215
  br label %1695

446:                                              ; preds = %380
  %447 = icmp ult i64 %265, 22594
  br i1 %447, label %448, label %475

448:                                              ; preds = %446
  %449 = load i8, i8* %110, align 1
  %450 = zext i8 %449 to i64
  %451 = load i16, i16* %111, align 2
  %452 = zext i16 %451 to i64
  %453 = load i64, i64* %9, align 8, !alias.scope !1164, !noalias !1167
  %454 = lshr i64 %453, 3
  %455 = getelementptr inbounds i8, i8* %10, i64 %454
  %456 = load i8, i8* %455, align 1, !alias.scope !1167, !noalias !1164
  %457 = zext i8 %456 to i64
  %458 = and i64 %453, 7
  %459 = shl i64 %452, %458
  %460 = or i64 %459, %457
  %461 = bitcast i8* %455 to i64*
  store i64 %460, i64* %461, align 8, !alias.scope !1167, !noalias !1164
  %462 = add i64 %453, %450
  %463 = add nsw i64 %265, -6210
  %464 = lshr i64 %462, 3
  %465 = getelementptr inbounds i8, i8* %10, i64 %464
  %466 = load i8, i8* %465, align 1, !alias.scope !1169, !noalias !1172
  %467 = zext i8 %466 to i64
  %468 = and i64 %462, 7
  %469 = shl i64 %463, %468
  %470 = or i64 %469, %467
  %471 = bitcast i8* %465 to i64*
  store i64 %470, i64* %471, align 8, !alias.scope !1169, !noalias !1172
  %472 = add i64 %462, 14
  store i64 %472, i64* %9, align 8, !alias.scope !1172, !noalias !1169
  %473 = load i32, i32* %112, align 8
  %474 = add i32 %473, 1
  store i32 %474, i32* %112, align 8
  br label %524

475:                                              ; preds = %446
  %476 = load i8, i8* %107, align 1
  %477 = zext i8 %476 to i64
  %478 = load i16, i16* %108, align 2
  %479 = zext i16 %478 to i64
  %480 = load i64, i64* %9, align 8, !alias.scope !1174, !noalias !1177
  %481 = lshr i64 %480, 3
  %482 = getelementptr inbounds i8, i8* %10, i64 %481
  %483 = load i8, i8* %482, align 1, !alias.scope !1177, !noalias !1174
  %484 = zext i8 %483 to i64
  %485 = and i64 %480, 7
  %486 = shl i64 %479, %485
  %487 = or i64 %486, %484
  %488 = bitcast i8* %482 to i64*
  store i64 %487, i64* %488, align 8, !alias.scope !1177, !noalias !1174
  %489 = add i64 %480, %477
  %490 = add i64 %265, -22594
  %491 = lshr i64 %489, 3
  %492 = getelementptr inbounds i8, i8* %10, i64 %491
  %493 = load i8, i8* %492, align 1, !alias.scope !1179, !noalias !1182
  %494 = zext i8 %493 to i64
  %495 = and i64 %489, 7
  %496 = shl i64 %490, %495
  %497 = or i64 %496, %494
  %498 = bitcast i8* %492 to i64*
  store i64 %497, i64* %498, align 8, !alias.scope !1179, !noalias !1182
  %499 = add i64 %489, 24
  store i64 %499, i64* %9, align 8, !alias.scope !1182, !noalias !1179
  %500 = load i32, i32* %109, align 4
  %501 = add i32 %500, 1
  store i32 %501, i32* %109, align 4
  br label %524

502:                                              ; preds = %268
  %503 = add nuw nsw i64 %265, 40
  %504 = getelementptr inbounds i8, i8* %5, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = zext i8 %505 to i64
  %507 = getelementptr inbounds i16, i16* %6, i64 %503
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i64
  %510 = load i64, i64* %9, align 8, !alias.scope !1184, !noalias !1187
  %511 = lshr i64 %510, 3
  %512 = getelementptr inbounds i8, i8* %10, i64 %511
  %513 = load i8, i8* %512, align 1, !alias.scope !1187, !noalias !1184
  %514 = zext i8 %513 to i64
  %515 = and i64 %510, 7
  %516 = shl i64 %509, %515
  %517 = or i64 %516, %514
  %518 = bitcast i8* %512 to i64*
  store i64 %517, i64* %518, align 8, !alias.scope !1187, !noalias !1184
  %519 = add i64 %510, %506
  store i64 %519, i64* %9, align 8, !alias.scope !1184, !noalias !1187
  %520 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %503
  %521 = load i32, i32* %520, align 4
  %522 = add i32 %521, 1
  store i32 %522, i32* %520, align 4
  %523 = icmp eq i64 %265, 0
  br i1 %523, label %599, label %524

524:                                              ; preds = %502, %475, %448, %353, %315, %272
  %525 = phi i64 [ %519, %502 ], [ %499, %475 ], [ %472, %448 ], [ %377, %353 ], [ %349, %315 ], [ %309, %272 ]
  %526 = and i64 %265, 1
  %527 = add i64 %264, 1
  %528 = icmp eq i64 %215, %527
  br i1 %528, label %575, label %529

529:                                              ; preds = %524
  %530 = sub i64 %265, %526
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ %525, %529 ], [ %571, %531 ]
  %533 = phi i64 [ 0, %529 ], [ %572, %531 ]
  %534 = phi i64 [ %530, %529 ], [ %573, %531 ]
  %535 = getelementptr inbounds i8, i8* %150, i64 %533
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i64
  %538 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i64
  %541 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %537
  %542 = load i16, i16* %541, align 2
  %543 = zext i16 %542 to i64
  %544 = lshr i64 %532, 3
  %545 = getelementptr inbounds i8, i8* %10, i64 %544
  %546 = load i8, i8* %545, align 1, !alias.scope !1189, !noalias !1192
  %547 = zext i8 %546 to i64
  %548 = and i64 %532, 7
  %549 = shl i64 %543, %548
  %550 = or i64 %549, %547
  %551 = bitcast i8* %545 to i64*
  store i64 %550, i64* %551, align 8, !alias.scope !1189, !noalias !1192
  %552 = add i64 %532, %540
  store i64 %552, i64* %9, align 8, !alias.scope !1192, !noalias !1189
  %553 = or i64 %533, 1
  %554 = getelementptr inbounds i8, i8* %150, i64 %553
  %555 = load i8, i8* %554, align 1
  %556 = zext i8 %555 to i64
  %557 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %556
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i64
  %560 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %556
  %561 = load i16, i16* %560, align 2
  %562 = zext i16 %561 to i64
  %563 = lshr i64 %552, 3
  %564 = getelementptr inbounds i8, i8* %10, i64 %563
  %565 = load i8, i8* %564, align 1, !alias.scope !1189, !noalias !1192
  %566 = zext i8 %565 to i64
  %567 = and i64 %552, 7
  %568 = shl i64 %562, %567
  %569 = or i64 %568, %566
  %570 = bitcast i8* %564 to i64*
  store i64 %569, i64* %570, align 8, !alias.scope !1189, !noalias !1192
  %571 = add i64 %552, %559
  store i64 %571, i64* %9, align 8, !alias.scope !1192, !noalias !1189
  %572 = add nuw i64 %533, 2
  %573 = add i64 %534, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %531

575:                                              ; preds = %531, %524
  %576 = phi i64 [ undef, %524 ], [ %571, %531 ]
  %577 = phi i64 [ %525, %524 ], [ %571, %531 ]
  %578 = phi i64 [ 0, %524 ], [ %572, %531 ]
  %579 = icmp eq i64 %526, 0
  br i1 %579, label %599, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds i8, i8* %150, i64 %578
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i64
  %584 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %583
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  %587 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %583
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i64
  %590 = lshr i64 %577, 3
  %591 = getelementptr inbounds i8, i8* %10, i64 %590
  %592 = load i8, i8* %591, align 1, !alias.scope !1189, !noalias !1192
  %593 = zext i8 %592 to i64
  %594 = and i64 %577, 7
  %595 = shl i64 %589, %594
  %596 = or i64 %595, %593
  %597 = bitcast i8* %591 to i64*
  store i64 %596, i64* %597, align 8, !alias.scope !1189, !noalias !1192
  %598 = add i64 %577, %586
  store i64 %598, i64* %9, align 8, !alias.scope !1192, !noalias !1189
  br label %599

599:                                              ; preds = %580, %575, %502
  %600 = phi i64 [ %519, %502 ], [ %576, %575 ], [ %598, %580 ]
  %601 = icmp eq i32 %149, %263
  br i1 %601, label %602, label %618

602:                                              ; preds = %599
  %603 = load i8, i8* %116, align 1
  %604 = zext i8 %603 to i64
  %605 = load i16, i16* %117, align 2
  %606 = zext i16 %605 to i64
  %607 = lshr i64 %600, 3
  %608 = getelementptr inbounds i8, i8* %10, i64 %607
  %609 = load i8, i8* %608, align 1, !alias.scope !1194, !noalias !1197
  %610 = zext i8 %609 to i64
  %611 = and i64 %600, 7
  %612 = shl i64 %606, %611
  %613 = or i64 %612, %610
  %614 = bitcast i8* %608 to i64*
  store i64 %613, i64* %614, align 8, !alias.scope !1194, !noalias !1197
  %615 = add i64 %600, %604
  store i64 %615, i64* %9, align 8, !alias.scope !1197, !noalias !1194
  %616 = load i32, i32* %118, align 16
  %617 = add i32 %616, 1
  store i32 %617, i32* %118, align 16
  br label %664

618:                                              ; preds = %599
  %619 = shl i64 %218, 32
  %620 = ashr exact i64 %619, 32
  %621 = add nsw i64 %620, 3
  %622 = trunc i64 %621 to i32
  %623 = call i32 @llvm.ctlz.i32(i32 %622, i1 true) #6, !range !7
  %624 = xor i32 %623, 31
  %625 = add nsw i32 %624, -1
  %626 = zext i32 %625 to i64
  %627 = lshr i64 %621, %626
  %628 = and i64 %627, 1
  %629 = or i64 %628, 2
  %630 = shl i64 %629, %626
  %631 = shl nuw nsw i32 %624, 1
  %632 = add nsw i32 %631, -4
  %633 = zext i32 %632 to i64
  %634 = or i64 %628, %633
  %635 = add nuw nsw i64 %634, 80
  %636 = getelementptr inbounds i8, i8* %5, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds i16, i16* %6, i64 %635
  %640 = load i16, i16* %639, align 2
  %641 = zext i16 %640 to i64
  %642 = lshr i64 %600, 3
  %643 = getelementptr inbounds i8, i8* %10, i64 %642
  %644 = load i8, i8* %643, align 1, !alias.scope !1199, !noalias !1202
  %645 = zext i8 %644 to i64
  %646 = and i64 %600, 7
  %647 = shl i64 %641, %646
  %648 = or i64 %647, %645
  %649 = bitcast i8* %643 to i64*
  store i64 %648, i64* %649, align 8, !alias.scope !1199, !noalias !1202
  %650 = add i64 %600, %638
  %651 = sub i64 %621, %630
  %652 = lshr i64 %650, 3
  %653 = getelementptr inbounds i8, i8* %10, i64 %652
  %654 = load i8, i8* %653, align 1, !alias.scope !1204, !noalias !1207
  %655 = zext i8 %654 to i64
  %656 = and i64 %650, 7
  %657 = shl i64 %651, %656
  %658 = or i64 %657, %655
  %659 = bitcast i8* %653 to i64*
  store i64 %658, i64* %659, align 8, !alias.scope !1204, !noalias !1207
  %660 = add i64 %650, %626
  store i64 %660, i64* %9, align 8, !alias.scope !1207, !noalias !1204
  %661 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %635
  %662 = load i32, i32* %661, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %661, align 4
  br label %664

664:                                              ; preds = %618, %602
  %665 = phi i64 [ %615, %602 ], [ %660, %618 ]
  %666 = phi i32 [ %149, %602 ], [ %263, %618 ]
  %667 = icmp ult i64 %262, 12
  br i1 %667, label %668, label %688

668:                                              ; preds = %664
  %669 = add nsw i64 %261, 1
  %670 = getelementptr inbounds i8, i8* %5, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i64
  %673 = getelementptr inbounds i16, i16* %6, i64 %669
  %674 = load i16, i16* %673, align 2
  %675 = zext i16 %674 to i64
  %676 = lshr i64 %665, 3
  %677 = getelementptr inbounds i8, i8* %10, i64 %676
  %678 = load i8, i8* %677, align 1, !alias.scope !1209, !noalias !1212
  %679 = zext i8 %678 to i64
  %680 = and i64 %665, 7
  %681 = shl i64 %675, %680
  %682 = or i64 %681, %679
  %683 = bitcast i8* %677 to i64*
  store i64 %682, i64* %683, align 8, !alias.scope !1209, !noalias !1212
  %684 = add i64 %665, %672
  store i64 %684, i64* %9, align 8, !alias.scope !1212, !noalias !1209
  %685 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %669
  %686 = load i32, i32* %685, align 4
  %687 = add i32 %686, 1
  store i32 %687, i32* %685, align 4
  br label %874

688:                                              ; preds = %664
  %689 = icmp ult i64 %262, 72
  br i1 %689, label %690, label %730

690:                                              ; preds = %688
  %691 = add nsw i64 %261, -3
  %692 = trunc i64 %691 to i32
  %693 = call i32 @llvm.ctlz.i32(i32 %692, i1 true) #6, !range !7
  %694 = sub nsw i32 30, %693
  %695 = zext i32 %694 to i64
  %696 = lshr i64 %691, %695
  %697 = shl nsw i32 %694, 1
  %698 = zext i32 %697 to i64
  %699 = add nuw nsw i64 %698, 4
  %700 = add nuw nsw i64 %699, %696
  %701 = getelementptr inbounds i8, i8* %5, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i64
  %704 = getelementptr inbounds i16, i16* %6, i64 %700
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i64
  %707 = lshr i64 %665, 3
  %708 = getelementptr inbounds i8, i8* %10, i64 %707
  %709 = load i8, i8* %708, align 1, !alias.scope !1214, !noalias !1217
  %710 = zext i8 %709 to i64
  %711 = and i64 %665, 7
  %712 = shl i64 %706, %711
  %713 = or i64 %712, %710
  %714 = bitcast i8* %708 to i64*
  store i64 %713, i64* %714, align 8, !alias.scope !1214, !noalias !1217
  %715 = add i64 %665, %703
  %716 = shl i64 %696, %695
  %717 = sub i64 %691, %716
  %718 = lshr i64 %715, 3
  %719 = getelementptr inbounds i8, i8* %10, i64 %718
  %720 = load i8, i8* %719, align 1, !alias.scope !1219, !noalias !1222
  %721 = zext i8 %720 to i64
  %722 = and i64 %715, 7
  %723 = shl i64 %717, %722
  %724 = or i64 %723, %721
  %725 = bitcast i8* %719 to i64*
  store i64 %724, i64* %725, align 8, !alias.scope !1219, !noalias !1222
  %726 = add i64 %715, %695
  store i64 %726, i64* %9, align 8, !alias.scope !1222, !noalias !1219
  %727 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %700
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, 1
  store i32 %729, i32* %727, align 4
  br label %874

730:                                              ; preds = %688
  %731 = icmp ult i64 %262, 136
  br i1 %731, label %732, label %779

732:                                              ; preds = %730
  %733 = add nsw i64 %261, -3
  %734 = lshr i64 %733, 5
  %735 = add nuw nsw i64 %734, 30
  %736 = getelementptr inbounds i8, i8* %5, i64 %735
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i64
  %739 = getelementptr inbounds i16, i16* %6, i64 %735
  %740 = load i16, i16* %739, align 2
  %741 = zext i16 %740 to i64
  %742 = lshr i64 %665, 3
  %743 = getelementptr inbounds i8, i8* %10, i64 %742
  %744 = load i8, i8* %743, align 1, !alias.scope !1224, !noalias !1227
  %745 = zext i8 %744 to i64
  %746 = and i64 %665, 7
  %747 = shl i64 %741, %746
  %748 = or i64 %747, %745
  %749 = bitcast i8* %743 to i64*
  store i64 %748, i64* %749, align 8, !alias.scope !1224, !noalias !1227
  %750 = add i64 %665, %738
  %751 = and i64 %733, 31
  %752 = lshr i64 %750, 3
  %753 = getelementptr inbounds i8, i8* %10, i64 %752
  %754 = load i8, i8* %753, align 1, !alias.scope !1229, !noalias !1232
  %755 = zext i8 %754 to i64
  %756 = and i64 %750, 7
  %757 = shl i64 %751, %756
  %758 = or i64 %757, %755
  %759 = bitcast i8* %753 to i64*
  store i64 %758, i64* %759, align 8, !alias.scope !1229, !noalias !1232
  %760 = add i64 %750, 5
  store i64 %760, i64* %9, align 8, !alias.scope !1232, !noalias !1229
  %761 = load i8, i8* %116, align 1
  %762 = zext i8 %761 to i64
  %763 = load i16, i16* %117, align 2
  %764 = zext i16 %763 to i64
  %765 = lshr i64 %760, 3
  %766 = getelementptr inbounds i8, i8* %10, i64 %765
  %767 = load i8, i8* %766, align 1, !alias.scope !1234, !noalias !1237
  %768 = zext i8 %767 to i64
  %769 = and i64 %760, 7
  %770 = shl i64 %764, %769
  %771 = or i64 %770, %768
  %772 = bitcast i8* %766 to i64*
  store i64 %771, i64* %772, align 8, !alias.scope !1234, !noalias !1237
  %773 = add i64 %760, %762
  store i64 %773, i64* %9, align 8, !alias.scope !1237, !noalias !1234
  %774 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %735
  %775 = load i32, i32* %774, align 4
  %776 = add i32 %775, 1
  store i32 %776, i32* %774, align 4
  %777 = load i32, i32* %118, align 16
  %778 = add i32 %777, 1
  store i32 %778, i32* %118, align 16
  br label %874

779:                                              ; preds = %730
  %780 = icmp ult i64 %262, 2120
  br i1 %780, label %781, label %833

781:                                              ; preds = %779
  %782 = add nsw i64 %261, -67
  %783 = trunc i64 %782 to i32
  %784 = call i32 @llvm.ctlz.i32(i32 %783, i1 true) #6, !range !7
  %785 = xor i32 %784, 31
  %786 = add nuw nsw i32 %785, 28
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds i8, i8* %5, i64 %787
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i64
  %791 = getelementptr inbounds i16, i16* %6, i64 %787
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i64
  %794 = lshr i64 %665, 3
  %795 = getelementptr inbounds i8, i8* %10, i64 %794
  %796 = load i8, i8* %795, align 1, !alias.scope !1239, !noalias !1242
  %797 = zext i8 %796 to i64
  %798 = and i64 %665, 7
  %799 = shl i64 %793, %798
  %800 = or i64 %799, %797
  %801 = bitcast i8* %795 to i64*
  store i64 %800, i64* %801, align 8, !alias.scope !1239, !noalias !1242
  %802 = add i64 %665, %790
  %803 = zext i32 %785 to i64
  %804 = shl i64 1, %803
  %805 = sub i64 %782, %804
  %806 = lshr i64 %802, 3
  %807 = getelementptr inbounds i8, i8* %10, i64 %806
  %808 = load i8, i8* %807, align 1, !alias.scope !1244, !noalias !1247
  %809 = zext i8 %808 to i64
  %810 = and i64 %802, 7
  %811 = shl i64 %805, %810
  %812 = or i64 %811, %809
  %813 = bitcast i8* %807 to i64*
  store i64 %812, i64* %813, align 8, !alias.scope !1244, !noalias !1247
  %814 = add i64 %802, %803
  store i64 %814, i64* %9, align 8, !alias.scope !1247, !noalias !1244
  %815 = load i8, i8* %116, align 1
  %816 = zext i8 %815 to i64
  %817 = load i16, i16* %117, align 2
  %818 = zext i16 %817 to i64
  %819 = lshr i64 %814, 3
  %820 = getelementptr inbounds i8, i8* %10, i64 %819
  %821 = load i8, i8* %820, align 1, !alias.scope !1249, !noalias !1252
  %822 = zext i8 %821 to i64
  %823 = and i64 %814, 7
  %824 = shl i64 %818, %823
  %825 = or i64 %824, %822
  %826 = bitcast i8* %820 to i64*
  store i64 %825, i64* %826, align 8, !alias.scope !1249, !noalias !1252
  %827 = add i64 %814, %816
  store i64 %827, i64* %9, align 8, !alias.scope !1252, !noalias !1249
  %828 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %787
  %829 = load i32, i32* %828, align 4
  %830 = add i32 %829, 1
  store i32 %830, i32* %828, align 4
  %831 = load i32, i32* %118, align 16
  %832 = add i32 %831, 1
  store i32 %832, i32* %118, align 16
  br label %874

833:                                              ; preds = %779
  %834 = load i8, i8* %119, align 1
  %835 = zext i8 %834 to i64
  %836 = load i16, i16* %120, align 2
  %837 = zext i16 %836 to i64
  %838 = lshr i64 %665, 3
  %839 = getelementptr inbounds i8, i8* %10, i64 %838
  %840 = load i8, i8* %839, align 1, !alias.scope !1254, !noalias !1257
  %841 = zext i8 %840 to i64
  %842 = and i64 %665, 7
  %843 = shl i64 %837, %842
  %844 = or i64 %843, %841
  %845 = bitcast i8* %839 to i64*
  store i64 %844, i64* %845, align 8, !alias.scope !1254, !noalias !1257
  %846 = add i64 %665, %835
  %847 = add i64 %261, -2115
  %848 = lshr i64 %846, 3
  %849 = getelementptr inbounds i8, i8* %10, i64 %848
  %850 = load i8, i8* %849, align 1, !alias.scope !1259, !noalias !1262
  %851 = zext i8 %850 to i64
  %852 = and i64 %846, 7
  %853 = shl i64 %847, %852
  %854 = or i64 %853, %851
  %855 = bitcast i8* %849 to i64*
  store i64 %854, i64* %855, align 8, !alias.scope !1259, !noalias !1262
  %856 = add i64 %846, 24
  store i64 %856, i64* %9, align 8, !alias.scope !1262, !noalias !1259
  %857 = load i8, i8* %116, align 1
  %858 = zext i8 %857 to i64
  %859 = load i16, i16* %117, align 2
  %860 = zext i16 %859 to i64
  %861 = lshr i64 %856, 3
  %862 = getelementptr inbounds i8, i8* %10, i64 %861
  %863 = load i8, i8* %862, align 1, !alias.scope !1264, !noalias !1267
  %864 = zext i8 %863 to i64
  %865 = and i64 %856, 7
  %866 = shl i64 %860, %865
  %867 = or i64 %866, %864
  %868 = bitcast i8* %862 to i64*
  store i64 %867, i64* %868, align 8, !alias.scope !1264, !noalias !1267
  %869 = add i64 %856, %858
  store i64 %869, i64* %9, align 8, !alias.scope !1267, !noalias !1264
  %870 = load i32, i32* %121, align 4
  %871 = add i32 %870, 1
  store i32 %871, i32* %121, align 4
  %872 = load i32, i32* %118, align 16
  %873 = add i32 %872, 1
  store i32 %873, i32* %118, align 16
  br label %874

874:                                              ; preds = %833, %781, %732, %690, %668
  %875 = icmp ult i8* %266, %145
  br i1 %875, label %876, label %1189, !prof !75

876:                                              ; preds = %874
  %877 = getelementptr inbounds i8, i8* %266, i64 -3
  %878 = bitcast i8* %877 to i64*
  %879 = load i64, i64* %878, align 8
  %880 = mul i64 %879, 8503243848024064
  %881 = lshr i64 %880, 49
  %882 = lshr i64 %879, 24
  %883 = mul i64 %882, 8503243848024064
  %884 = lshr i64 %883, 49
  %885 = ptrtoint i8* %266 to i64
  %886 = sub i64 %885, %106
  %887 = trunc i64 %886 to i32
  %888 = add i32 %887, -3
  %889 = getelementptr inbounds i32, i32* %4, i64 %881
  store i32 %888, i32* %889, align 4
  %890 = lshr i64 %879, 8
  %891 = mul i64 %890, 8503243848024064
  %892 = lshr i64 %891, 49
  %893 = add i32 %887, -2
  %894 = getelementptr inbounds i32, i32* %4, i64 %892
  store i32 %893, i32* %894, align 4
  %895 = lshr i64 %879, 16
  %896 = mul i64 %895, 8503243848024064
  %897 = lshr i64 %896, 49
  %898 = add i32 %887, -1
  %899 = getelementptr inbounds i32, i32* %4, i64 %897
  store i32 %898, i32* %899, align 4
  %900 = getelementptr inbounds i32, i32* %4, i64 %884
  %901 = load i32, i32* %900, align 4
  store i32 %887, i32* %900, align 4
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i8, i8* %1, i64 %902
  %904 = bitcast i8* %266 to i32*
  %905 = load i32, i32* %904, align 4
  %906 = bitcast i8* %903 to i32*
  %907 = load i32, i32* %906, align 4
  %908 = icmp eq i32 %905, %907
  br i1 %908, label %909, label %1184

909:                                              ; preds = %876
  %910 = getelementptr inbounds i8, i8* %266, i64 4
  %911 = load i8, i8* %910, align 1
  %912 = getelementptr inbounds i8, i8* %903, i64 4
  %913 = load i8, i8* %912, align 1
  %914 = icmp eq i8 %911, %913
  br i1 %914, label %921, label %1184

915:                                              ; preds = %1149
  %916 = getelementptr inbounds i8, i8* %972, i64 4
  %917 = load i8, i8* %916, align 1
  %918 = getelementptr inbounds i8, i8* %1176, i64 4
  %919 = load i8, i8* %918, align 1
  %920 = icmp eq i8 %917, %919
  br i1 %920, label %921, label %1187

921:                                              ; preds = %909, %915
  %922 = phi i8* [ %972, %915 ], [ %266, %909 ]
  %923 = phi i32 [ %973, %915 ], [ %666, %909 ]
  %924 = phi i8* [ %1176, %915 ], [ %903, %909 ]
  %925 = getelementptr inbounds i8, i8* %924, i64 5
  %926 = getelementptr inbounds i8, i8* %922, i64 5
  %927 = ptrtoint i8* %922 to i64
  %928 = sub i64 %146, %927
  %929 = add i64 %928, -5
  %930 = lshr i64 %929, 3
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %952, label %932, !prof !76

932:                                              ; preds = %921, %942
  %933 = phi i64 [ %945, %942 ], [ %930, %921 ]
  %934 = phi i8* [ %943, %942 ], [ %926, %921 ]
  %935 = phi i64 [ %944, %942 ], [ 0, %921 ]
  %936 = bitcast i8* %934 to i64*
  %937 = load i64, i64* %936, align 8
  %938 = getelementptr inbounds i8, i8* %925, i64 %935
  %939 = bitcast i8* %938 to i64*
  %940 = load i64, i64* %939, align 8
  %941 = icmp eq i64 %937, %940
  br i1 %941, label %942, label %947, !prof !76

942:                                              ; preds = %932
  %943 = getelementptr inbounds i8, i8* %934, i64 8
  %944 = add nuw i64 %935, 8
  %945 = add nsw i64 %933, -1
  %946 = icmp eq i64 %945, 0
  br i1 %946, label %952, label %932, !prof !76

947:                                              ; preds = %932
  %948 = xor i64 %940, %937
  %949 = call i64 @llvm.cttz.i64(i64 %948, i1 true) #6, !range !78
  %950 = lshr i64 %949, 3
  %951 = or i64 %950, %935
  br label %965

952:                                              ; preds = %942, %921
  %953 = phi i64 [ 0, %921 ], [ %944, %942 ]
  %954 = phi i8* [ %926, %921 ], [ %943, %942 ]
  %955 = and i64 %929, 7
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %965, label %957

957:                                              ; preds = %952
  %958 = getelementptr inbounds i8, i8* %925, i64 %953
  %959 = load i8, i8* %958, align 1
  %960 = load i8, i8* %954, align 1
  %961 = icmp eq i8 %959, %960
  br i1 %961, label %962, label %965, !prof !75

962:                                              ; preds = %957
  %963 = add i64 %953, 1
  %964 = icmp eq i64 %955, 1
  br i1 %964, label %965, label %1802

965:                                              ; preds = %1847, %962, %957, %1802, %1808, %1811, %1817, %1820, %1826, %1829, %1835, %1838, %1844, %952, %947
  %966 = phi i64 [ %951, %947 ], [ %953, %952 ], [ %953, %957 ], [ %963, %962 ], [ %963, %1802 ], [ %1809, %1808 ], [ %1809, %1811 ], [ %1818, %1817 ], [ %1818, %1820 ], [ %1827, %1826 ], [ %1827, %1829 ], [ %1836, %1835 ], [ %1836, %1838 ], [ %1845, %1844 ], [ %1854, %1847 ]
  %967 = add i64 %966, 5
  %968 = ptrtoint i8* %924 to i64
  %969 = sub i64 %927, %968
  %970 = icmp sgt i64 %969, 262128
  br i1 %970, label %1184, label %971

971:                                              ; preds = %965
  %972 = getelementptr inbounds i8, i8* %922, i64 %967
  %973 = trunc i64 %969 to i32
  %974 = icmp ult i64 %967, 10
  br i1 %974, label %975, label %994

975:                                              ; preds = %971
  %976 = add nsw i64 %966, 19
  %977 = getelementptr inbounds i8, i8* %5, i64 %976
  %978 = load i8, i8* %977, align 1
  %979 = zext i8 %978 to i64
  %980 = getelementptr inbounds i16, i16* %6, i64 %976
  %981 = load i16, i16* %980, align 2
  %982 = zext i16 %981 to i64
  %983 = load i64, i64* %9, align 8, !alias.scope !1269, !noalias !1272
  %984 = lshr i64 %983, 3
  %985 = getelementptr inbounds i8, i8* %10, i64 %984
  %986 = load i8, i8* %985, align 1, !alias.scope !1272, !noalias !1269
  %987 = zext i8 %986 to i64
  %988 = and i64 %983, 7
  %989 = shl i64 %982, %988
  %990 = or i64 %989, %987
  %991 = bitcast i8* %985 to i64*
  store i64 %990, i64* %991, align 8, !alias.scope !1272, !noalias !1269
  %992 = add i64 %983, %979
  store i64 %992, i64* %9, align 8, !alias.scope !1269, !noalias !1272
  %993 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %976
  br label %1098

994:                                              ; preds = %971
  %995 = icmp ult i64 %967, 134
  br i1 %995, label %996, label %1035

996:                                              ; preds = %994
  %997 = add nsw i64 %966, -1
  %998 = trunc i64 %997 to i32
  %999 = call i32 @llvm.ctlz.i32(i32 %998, i1 true) #6, !range !7
  %1000 = sub nsw i32 30, %999
  %1001 = zext i32 %1000 to i64
  %1002 = lshr i64 %997, %1001
  %1003 = shl nsw i32 %1000, 1
  %1004 = zext i32 %1003 to i64
  %1005 = add nuw nsw i64 %1004, 20
  %1006 = add nuw nsw i64 %1005, %1002
  %1007 = getelementptr inbounds i8, i8* %5, i64 %1006
  %1008 = load i8, i8* %1007, align 1
  %1009 = zext i8 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %6, i64 %1006
  %1011 = load i16, i16* %1010, align 2
  %1012 = zext i16 %1011 to i64
  %1013 = load i64, i64* %9, align 8, !alias.scope !1274, !noalias !1277
  %1014 = lshr i64 %1013, 3
  %1015 = getelementptr inbounds i8, i8* %10, i64 %1014
  %1016 = load i8, i8* %1015, align 1, !alias.scope !1277, !noalias !1274
  %1017 = zext i8 %1016 to i64
  %1018 = and i64 %1013, 7
  %1019 = shl i64 %1012, %1018
  %1020 = or i64 %1019, %1017
  %1021 = bitcast i8* %1015 to i64*
  store i64 %1020, i64* %1021, align 8, !alias.scope !1277, !noalias !1274
  %1022 = add i64 %1013, %1009
  %1023 = shl i64 %1002, %1001
  %1024 = sub i64 %997, %1023
  %1025 = lshr i64 %1022, 3
  %1026 = getelementptr inbounds i8, i8* %10, i64 %1025
  %1027 = load i8, i8* %1026, align 1, !alias.scope !1279, !noalias !1282
  %1028 = zext i8 %1027 to i64
  %1029 = and i64 %1022, 7
  %1030 = shl i64 %1024, %1029
  %1031 = or i64 %1030, %1028
  %1032 = bitcast i8* %1026 to i64*
  store i64 %1031, i64* %1032, align 8, !alias.scope !1279, !noalias !1282
  %1033 = add i64 %1022, %1001
  store i64 %1033, i64* %9, align 8, !alias.scope !1282, !noalias !1279
  %1034 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1006
  br label %1098

1035:                                             ; preds = %994
  %1036 = icmp ult i64 %967, 2118
  br i1 %1036, label %1037, label %1073

1037:                                             ; preds = %1035
  %1038 = add nsw i64 %966, -65
  %1039 = trunc i64 %1038 to i32
  %1040 = call i32 @llvm.ctlz.i32(i32 %1039, i1 true) #6, !range !7
  %1041 = xor i32 %1040, 31
  %1042 = add nuw nsw i32 %1041, 28
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds i8, i8* %5, i64 %1043
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i64
  %1047 = getelementptr inbounds i16, i16* %6, i64 %1043
  %1048 = load i16, i16* %1047, align 2
  %1049 = zext i16 %1048 to i64
  %1050 = load i64, i64* %9, align 8, !alias.scope !1284, !noalias !1287
  %1051 = lshr i64 %1050, 3
  %1052 = getelementptr inbounds i8, i8* %10, i64 %1051
  %1053 = load i8, i8* %1052, align 1, !alias.scope !1287, !noalias !1284
  %1054 = zext i8 %1053 to i64
  %1055 = and i64 %1050, 7
  %1056 = shl i64 %1049, %1055
  %1057 = or i64 %1056, %1054
  %1058 = bitcast i8* %1052 to i64*
  store i64 %1057, i64* %1058, align 8, !alias.scope !1287, !noalias !1284
  %1059 = add i64 %1050, %1046
  %1060 = zext i32 %1041 to i64
  %1061 = shl i64 1, %1060
  %1062 = sub i64 %1038, %1061
  %1063 = lshr i64 %1059, 3
  %1064 = getelementptr inbounds i8, i8* %10, i64 %1063
  %1065 = load i8, i8* %1064, align 1, !alias.scope !1289, !noalias !1292
  %1066 = zext i8 %1065 to i64
  %1067 = and i64 %1059, 7
  %1068 = shl i64 %1062, %1067
  %1069 = or i64 %1068, %1066
  %1070 = bitcast i8* %1064 to i64*
  store i64 %1069, i64* %1070, align 8, !alias.scope !1289, !noalias !1292
  %1071 = add i64 %1059, %1060
  store i64 %1071, i64* %9, align 8, !alias.scope !1292, !noalias !1289
  %1072 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1043
  br label %1098

1073:                                             ; preds = %1035
  %1074 = load i8, i8* %119, align 1
  %1075 = zext i8 %1074 to i64
  %1076 = load i16, i16* %120, align 2
  %1077 = zext i16 %1076 to i64
  %1078 = load i64, i64* %9, align 8, !alias.scope !1294, !noalias !1297
  %1079 = lshr i64 %1078, 3
  %1080 = getelementptr inbounds i8, i8* %10, i64 %1079
  %1081 = load i8, i8* %1080, align 1, !alias.scope !1297, !noalias !1294
  %1082 = zext i8 %1081 to i64
  %1083 = and i64 %1078, 7
  %1084 = shl i64 %1077, %1083
  %1085 = or i64 %1084, %1082
  %1086 = bitcast i8* %1080 to i64*
  store i64 %1085, i64* %1086, align 8, !alias.scope !1297, !noalias !1294
  %1087 = add i64 %1078, %1075
  %1088 = add i64 %966, -2113
  %1089 = lshr i64 %1087, 3
  %1090 = getelementptr inbounds i8, i8* %10, i64 %1089
  %1091 = load i8, i8* %1090, align 1, !alias.scope !1299, !noalias !1302
  %1092 = zext i8 %1091 to i64
  %1093 = and i64 %1087, 7
  %1094 = shl i64 %1088, %1093
  %1095 = or i64 %1094, %1092
  %1096 = bitcast i8* %1090 to i64*
  store i64 %1095, i64* %1096, align 8, !alias.scope !1299, !noalias !1302
  %1097 = add i64 %1087, 24
  store i64 %1097, i64* %9, align 8, !alias.scope !1302, !noalias !1299
  br label %1098

1098:                                             ; preds = %1073, %1037, %996, %975
  %1099 = phi i32* [ %121, %1073 ], [ %1072, %1037 ], [ %1034, %996 ], [ %993, %975 ]
  %1100 = phi i64 [ %1097, %1073 ], [ %1071, %1037 ], [ %1033, %996 ], [ %992, %975 ]
  %1101 = load i32, i32* %1099, align 4
  %1102 = add i32 %1101, 1
  store i32 %1102, i32* %1099, align 4
  %1103 = shl i64 %969, 32
  %1104 = ashr exact i64 %1103, 32
  %1105 = add nsw i64 %1104, 3
  %1106 = trunc i64 %1105 to i32
  %1107 = call i32 @llvm.ctlz.i32(i32 %1106, i1 true) #6, !range !7
  %1108 = xor i32 %1107, 31
  %1109 = add nsw i32 %1108, -1
  %1110 = zext i32 %1109 to i64
  %1111 = lshr i64 %1105, %1110
  %1112 = and i64 %1111, 1
  %1113 = or i64 %1112, 2
  %1114 = shl i64 %1113, %1110
  %1115 = shl nuw nsw i32 %1108, 1
  %1116 = add nsw i32 %1115, -4
  %1117 = zext i32 %1116 to i64
  %1118 = or i64 %1112, %1117
  %1119 = add nuw nsw i64 %1118, 80
  %1120 = getelementptr inbounds i8, i8* %5, i64 %1119
  %1121 = load i8, i8* %1120, align 1
  %1122 = zext i8 %1121 to i64
  %1123 = getelementptr inbounds i16, i16* %6, i64 %1119
  %1124 = load i16, i16* %1123, align 2
  %1125 = zext i16 %1124 to i64
  %1126 = lshr i64 %1100, 3
  %1127 = getelementptr inbounds i8, i8* %10, i64 %1126
  %1128 = load i8, i8* %1127, align 1, !alias.scope !1304, !noalias !1307
  %1129 = zext i8 %1128 to i64
  %1130 = and i64 %1100, 7
  %1131 = shl i64 %1125, %1130
  %1132 = or i64 %1131, %1129
  %1133 = bitcast i8* %1127 to i64*
  store i64 %1132, i64* %1133, align 8, !alias.scope !1304, !noalias !1307
  %1134 = add i64 %1100, %1122
  %1135 = sub i64 %1105, %1114
  %1136 = lshr i64 %1134, 3
  %1137 = getelementptr inbounds i8, i8* %10, i64 %1136
  %1138 = load i8, i8* %1137, align 1, !alias.scope !1309, !noalias !1312
  %1139 = zext i8 %1138 to i64
  %1140 = and i64 %1134, 7
  %1141 = shl i64 %1135, %1140
  %1142 = or i64 %1141, %1139
  %1143 = bitcast i8* %1137 to i64*
  store i64 %1142, i64* %1143, align 8, !alias.scope !1309, !noalias !1312
  %1144 = add i64 %1134, %1110
  store i64 %1144, i64* %9, align 8, !alias.scope !1312, !noalias !1309
  %1145 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1119
  %1146 = load i32, i32* %1145, align 4
  %1147 = add i32 %1146, 1
  store i32 %1147, i32* %1145, align 4
  %1148 = icmp ult i8* %972, %145
  br i1 %1148, label %1149, label %1189, !prof !75

1149:                                             ; preds = %1098
  %1150 = getelementptr inbounds i8, i8* %972, i64 -3
  %1151 = bitcast i8* %1150 to i64*
  %1152 = load i64, i64* %1151, align 8
  %1153 = mul i64 %1152, 8503243848024064
  %1154 = lshr i64 %1153, 49
  %1155 = lshr i64 %1152, 24
  %1156 = mul i64 %1155, 8503243848024064
  %1157 = lshr i64 %1156, 49
  %1158 = ptrtoint i8* %972 to i64
  %1159 = sub i64 %1158, %106
  %1160 = trunc i64 %1159 to i32
  %1161 = add i32 %1160, -3
  %1162 = getelementptr inbounds i32, i32* %4, i64 %1154
  store i32 %1161, i32* %1162, align 4
  %1163 = lshr i64 %1152, 8
  %1164 = mul i64 %1163, 8503243848024064
  %1165 = lshr i64 %1164, 49
  %1166 = add i32 %1160, -2
  %1167 = getelementptr inbounds i32, i32* %4, i64 %1165
  store i32 %1166, i32* %1167, align 4
  %1168 = lshr i64 %1152, 16
  %1169 = mul i64 %1168, 8503243848024064
  %1170 = lshr i64 %1169, 49
  %1171 = add i32 %1160, -1
  %1172 = getelementptr inbounds i32, i32* %4, i64 %1170
  store i32 %1171, i32* %1172, align 4
  %1173 = getelementptr inbounds i32, i32* %4, i64 %1157
  %1174 = load i32, i32* %1173, align 4
  store i32 %1160, i32* %1173, align 4
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds i8, i8* %1, i64 %1175
  %1177 = bitcast i8* %972 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = bitcast i8* %1176 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = icmp eq i32 %1178, %1180
  br i1 %1181, label %915, label %1182

1182:                                             ; preds = %1149
  %1183 = trunc i64 %969 to i32
  br label %1184

1184:                                             ; preds = %965, %1182, %1187, %909, %876
  %1185 = phi i8* [ %266, %876 ], [ %266, %909 ], [ %972, %1182 ], [ %972, %1187 ], [ %922, %965 ]
  %1186 = phi i32 [ %666, %876 ], [ %666, %909 ], [ %1183, %1182 ], [ %1188, %1187 ], [ %923, %965 ]
  br label %147

1187:                                             ; preds = %915
  %1188 = trunc i64 %969 to i32
  br label %1184

1189:                                             ; preds = %874, %157, %1098, %132
  %1190 = phi i8* [ %135, %132 ], [ %972, %1098 ], [ %150, %157 ], [ %266, %874 ]
  %1191 = sub i64 %136, %134
  %1192 = icmp ult i64 %1191, 65536
  %1193 = select i1 %1192, i64 %1191, i64 65536
  %1194 = icmp eq i64 %1191, 0
  br i1 %1194, label %1286, label %1195

1195:                                             ; preds = %1189
  %1196 = add i64 %1193, %133
  %1197 = icmp ult i64 %1196, 1048577
  br i1 %1197, label %1198, label %1286

1198:                                             ; preds = %1195
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %122) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %122, i8 0, i64 2048, i1 false) #6
  %1199 = icmp eq i64 %1193, 0
  br i1 %1199, label %1214, label %1200

1200:                                             ; preds = %1198, %1200
  %1201 = phi i64 [ %1208, %1200 ], [ 0, %1198 ]
  %1202 = getelementptr inbounds i8, i8* %138, i64 %1201
  %1203 = load i8, i8* %1202, align 1
  %1204 = zext i8 %1203 to i64
  %1205 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1204
  %1206 = load i64, i64* %1205, align 8
  %1207 = add i64 %1206, 1
  store i64 %1207, i64* %1205, align 8
  %1208 = add i64 %1201, 43
  %1209 = icmp ult i64 %1208, %1193
  br i1 %1209, label %1200, label %1210

1210:                                             ; preds = %1200
  %1211 = add nuw nsw i64 %1193, 42
  %1212 = udiv i64 %1211, 43
  %1213 = icmp ult i64 %1211, 11008
  br i1 %1213, label %1214, label %1219

1214:                                             ; preds = %1210, %1198
  %1215 = phi i64 [ %1212, %1210 ], [ 0, %1198 ]
  %1216 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1215
  %1217 = load double, double* %1216, align 8
  %1218 = uitofp i64 %1215 to double
  br label %1222

1219:                                             ; preds = %1210
  %1220 = uitofp i64 %1212 to double
  %1221 = call double @log2(double %1220) #6
  br label %1222

1222:                                             ; preds = %1219, %1214
  %1223 = phi double [ %1218, %1214 ], [ %1220, %1219 ]
  %1224 = phi double [ %1217, %1214 ], [ %1221, %1219 ]
  %1225 = fadd double %1224, 5.000000e-01
  %1226 = fmul double %1223, %1225
  %1227 = fadd double %1226, 2.000000e+02
  br label %1228

1228:                                             ; preds = %1243, %1222
  %1229 = phi double [ %1227, %1222 ], [ %1247, %1243 ]
  %1230 = phi i64 [ 0, %1222 ], [ %1248, %1243 ]
  %1231 = getelementptr inbounds [256 x i64], [256 x i64]* %12, i64 0, i64 %1230
  %1232 = load i64, i64* %1231, align 8
  %1233 = uitofp i64 %1232 to double
  %1234 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1230
  %1235 = load i8, i8* %1234, align 1
  %1236 = uitofp i8 %1235 to double
  %1237 = icmp ult i64 %1232, 256
  br i1 %1237, label %1238, label %1241

1238:                                             ; preds = %1228
  %1239 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %1232
  %1240 = load double, double* %1239, align 8
  br label %1243

1241:                                             ; preds = %1228
  %1242 = call double @log2(double %1233) #6
  br label %1243

1243:                                             ; preds = %1241, %1238
  %1244 = phi double [ %1240, %1238 ], [ %1242, %1241 ]
  %1245 = fadd double %1244, %1236
  %1246 = fmul double %1245, %1233
  %1247 = fsub double %1229, %1246
  %1248 = add nuw nsw i64 %1230, 1
  %1249 = icmp eq i64 %1248, 256
  br i1 %1249, label %1250, label %1228

1250:                                             ; preds = %1243
  %1251 = fcmp ult double %1247, 0.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %122) #6
  br i1 %1251, label %1286, label %1252

1252:                                             ; preds = %1250
  %1253 = trunc i64 %1196 to i32
  %1254 = add i32 %1253, -1
  br label %1255

1255:                                             ; preds = %1255, %1252
  %1256 = phi i64 [ 20, %1252 ], [ %1282, %1255 ]
  %1257 = phi i32 [ %1254, %1252 ], [ %1283, %1255 ]
  %1258 = phi i64 [ %125, %1252 ], [ %1284, %1255 ]
  %1259 = lshr i64 %1258, 3
  %1260 = and i64 %1258, 7
  %1261 = sub nuw nsw i64 8, %1260
  %1262 = icmp ult i64 %1256, %1261
  %1263 = select i1 %1262, i64 %1256, i64 %1261
  %1264 = add nuw nsw i64 %1263, %1260
  %1265 = trunc i64 %1264 to i32
  %1266 = shl nsw i32 -1, %1265
  %1267 = trunc i64 %1260 to i32
  %1268 = shl nsw i32 -1, %1267
  %1269 = xor i32 %1268, 255
  %1270 = or i32 %1266, %1269
  %1271 = getelementptr inbounds i8, i8* %10, i64 %1259
  %1272 = load i8, i8* %1271, align 1
  %1273 = zext i8 %1272 to i32
  %1274 = and i32 %1270, %1273
  %1275 = trunc i64 %1263 to i32
  %1276 = shl nsw i32 -1, %1275
  %1277 = xor i32 %1276, -1
  %1278 = and i32 %1257, %1277
  %1279 = shl i32 %1278, %1267
  %1280 = or i32 %1274, %1279
  %1281 = trunc i32 %1280 to i8
  store i8 %1281, i8* %1271, align 1
  %1282 = sub i64 %1256, %1263
  %1283 = lshr i32 %1257, %1275
  %1284 = add i64 %1263, %1258
  %1285 = icmp eq i64 %1282, 0
  br i1 %1285, label %132, label %1255

1286:                                             ; preds = %1250, %1195, %1189
  %1287 = icmp ult i8* %1190, %138
  br i1 %1287, label %1288, label %1695

1288:                                             ; preds = %1286
  %1289 = ptrtoint i8* %138 to i64
  %1290 = ptrtoint i8* %1190 to i64
  %1291 = sub i64 %1289, %1290
  %1292 = icmp ult i64 %1291, 6210
  br i1 %1292, label %1293, label %1478, !prof !75

1293:                                             ; preds = %1288
  %1294 = icmp ult i64 %1291, 6
  br i1 %1294, label %1399, label %1295

1295:                                             ; preds = %1293
  %1296 = icmp ult i64 %1291, 130
  br i1 %1296, label %1297, label %1336

1297:                                             ; preds = %1295
  %1298 = add nsw i64 %1291, -2
  %1299 = trunc i64 %1298 to i32
  %1300 = call i32 @llvm.ctlz.i32(i32 %1299, i1 true) #6, !range !7
  %1301 = sub nsw i32 30, %1300
  %1302 = zext i32 %1301 to i64
  %1303 = lshr i64 %1298, %1302
  %1304 = shl nsw i32 %1301, 1
  %1305 = zext i32 %1304 to i64
  %1306 = add nuw nsw i64 %1305, 42
  %1307 = add nuw nsw i64 %1306, %1303
  %1308 = getelementptr inbounds i8, i8* %5, i64 %1307
  %1309 = load i8, i8* %1308, align 1
  %1310 = zext i8 %1309 to i64
  %1311 = getelementptr inbounds i16, i16* %6, i64 %1307
  %1312 = load i16, i16* %1311, align 2
  %1313 = zext i16 %1312 to i64
  %1314 = load i64, i64* %9, align 8, !alias.scope !1314, !noalias !1317
  %1315 = lshr i64 %1314, 3
  %1316 = getelementptr inbounds i8, i8* %10, i64 %1315
  %1317 = load i8, i8* %1316, align 1, !alias.scope !1317, !noalias !1314
  %1318 = zext i8 %1317 to i64
  %1319 = and i64 %1314, 7
  %1320 = shl i64 %1313, %1319
  %1321 = or i64 %1320, %1318
  %1322 = bitcast i8* %1316 to i64*
  store i64 %1321, i64* %1322, align 8, !alias.scope !1317, !noalias !1314
  %1323 = add i64 %1314, %1310
  %1324 = shl i64 %1303, %1302
  %1325 = sub i64 %1298, %1324
  %1326 = lshr i64 %1323, 3
  %1327 = getelementptr inbounds i8, i8* %10, i64 %1326
  %1328 = load i8, i8* %1327, align 1, !alias.scope !1319, !noalias !1322
  %1329 = zext i8 %1328 to i64
  %1330 = and i64 %1323, 7
  %1331 = shl i64 %1325, %1330
  %1332 = or i64 %1331, %1329
  %1333 = bitcast i8* %1327 to i64*
  store i64 %1332, i64* %1333, align 8, !alias.scope !1319, !noalias !1322
  %1334 = add i64 %1323, %1302
  store i64 %1334, i64* %9, align 8, !alias.scope !1322, !noalias !1319
  %1335 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1307
  br label %1421

1336:                                             ; preds = %1295
  %1337 = icmp ult i64 %1291, 2114
  br i1 %1337, label %1338, label %1374

1338:                                             ; preds = %1336
  %1339 = add nsw i64 %1291, -66
  %1340 = trunc i64 %1339 to i32
  %1341 = call i32 @llvm.ctlz.i32(i32 %1340, i1 true) #6, !range !7
  %1342 = xor i32 %1341, 31
  %1343 = add nuw nsw i32 %1342, 50
  %1344 = zext i32 %1343 to i64
  %1345 = getelementptr inbounds i8, i8* %5, i64 %1344
  %1346 = load i8, i8* %1345, align 1
  %1347 = zext i8 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %6, i64 %1344
  %1349 = load i16, i16* %1348, align 2
  %1350 = zext i16 %1349 to i64
  %1351 = load i64, i64* %9, align 8, !alias.scope !1324, !noalias !1327
  %1352 = lshr i64 %1351, 3
  %1353 = getelementptr inbounds i8, i8* %10, i64 %1352
  %1354 = load i8, i8* %1353, align 1, !alias.scope !1327, !noalias !1324
  %1355 = zext i8 %1354 to i64
  %1356 = and i64 %1351, 7
  %1357 = shl i64 %1350, %1356
  %1358 = or i64 %1357, %1355
  %1359 = bitcast i8* %1353 to i64*
  store i64 %1358, i64* %1359, align 8, !alias.scope !1327, !noalias !1324
  %1360 = add i64 %1351, %1347
  %1361 = zext i32 %1342 to i64
  %1362 = shl i64 1, %1361
  %1363 = sub i64 %1339, %1362
  %1364 = lshr i64 %1360, 3
  %1365 = getelementptr inbounds i8, i8* %10, i64 %1364
  %1366 = load i8, i8* %1365, align 1, !alias.scope !1329, !noalias !1332
  %1367 = zext i8 %1366 to i64
  %1368 = and i64 %1360, 7
  %1369 = shl i64 %1363, %1368
  %1370 = or i64 %1369, %1367
  %1371 = bitcast i8* %1365 to i64*
  store i64 %1370, i64* %1371, align 8, !alias.scope !1329, !noalias !1332
  %1372 = add i64 %1360, %1361
  store i64 %1372, i64* %9, align 8, !alias.scope !1332, !noalias !1329
  %1373 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1344
  br label %1421

1374:                                             ; preds = %1336
  %1375 = load i8, i8* %113, align 1
  %1376 = zext i8 %1375 to i64
  %1377 = load i16, i16* %114, align 2
  %1378 = zext i16 %1377 to i64
  %1379 = load i64, i64* %9, align 8, !alias.scope !1334, !noalias !1337
  %1380 = lshr i64 %1379, 3
  %1381 = getelementptr inbounds i8, i8* %10, i64 %1380
  %1382 = load i8, i8* %1381, align 1, !alias.scope !1337, !noalias !1334
  %1383 = zext i8 %1382 to i64
  %1384 = and i64 %1379, 7
  %1385 = shl i64 %1378, %1384
  %1386 = or i64 %1385, %1383
  %1387 = bitcast i8* %1381 to i64*
  store i64 %1386, i64* %1387, align 8, !alias.scope !1337, !noalias !1334
  %1388 = add i64 %1379, %1376
  %1389 = add nsw i64 %1291, -2114
  %1390 = lshr i64 %1388, 3
  %1391 = getelementptr inbounds i8, i8* %10, i64 %1390
  %1392 = load i8, i8* %1391, align 1, !alias.scope !1339, !noalias !1342
  %1393 = zext i8 %1392 to i64
  %1394 = and i64 %1388, 7
  %1395 = shl i64 %1389, %1394
  %1396 = or i64 %1395, %1393
  %1397 = bitcast i8* %1391 to i64*
  store i64 %1396, i64* %1397, align 8, !alias.scope !1339, !noalias !1342
  %1398 = add i64 %1388, 12
  store i64 %1398, i64* %9, align 8, !alias.scope !1342, !noalias !1339
  br label %1421

1399:                                             ; preds = %1293
  %1400 = add nuw nsw i64 %1291, 40
  %1401 = getelementptr inbounds i8, i8* %5, i64 %1400
  %1402 = load i8, i8* %1401, align 1
  %1403 = zext i8 %1402 to i64
  %1404 = getelementptr inbounds i16, i16* %6, i64 %1400
  %1405 = load i16, i16* %1404, align 2
  %1406 = zext i16 %1405 to i64
  %1407 = load i64, i64* %9, align 8, !alias.scope !1344, !noalias !1347
  %1408 = lshr i64 %1407, 3
  %1409 = getelementptr inbounds i8, i8* %10, i64 %1408
  %1410 = load i8, i8* %1409, align 1, !alias.scope !1347, !noalias !1344
  %1411 = zext i8 %1410 to i64
  %1412 = and i64 %1407, 7
  %1413 = shl i64 %1406, %1412
  %1414 = or i64 %1413, %1411
  %1415 = bitcast i8* %1409 to i64*
  store i64 %1414, i64* %1415, align 8, !alias.scope !1347, !noalias !1344
  %1416 = add i64 %1407, %1403
  store i64 %1416, i64* %9, align 8, !alias.scope !1344, !noalias !1347
  %1417 = getelementptr inbounds [128 x i32], [128 x i32]* %13, i64 0, i64 %1400
  %1418 = load i32, i32* %1417, align 4
  %1419 = add i32 %1418, 1
  store i32 %1419, i32* %1417, align 4
  %1420 = icmp eq i64 %1291, 0
  br i1 %1420, label %1695, label %1426

1421:                                             ; preds = %1297, %1338, %1374
  %1422 = phi i32* [ %115, %1374 ], [ %1373, %1338 ], [ %1335, %1297 ]
  %1423 = phi i64 [ %1398, %1374 ], [ %1372, %1338 ], [ %1334, %1297 ]
  %1424 = load i32, i32* %1422, align 4
  %1425 = add i32 %1424, 1
  store i32 %1425, i32* %1422, align 4
  br label %1426

1426:                                             ; preds = %1421, %1399
  %1427 = phi i64 [ %1423, %1421 ], [ %1416, %1399 ]
  %1428 = xor i64 %1290, -1
  %1429 = and i64 %1291, 1
  %1430 = sub i64 0, %1289
  %1431 = icmp eq i64 %1428, %1430
  br i1 %1431, label %1649, label %1432

1432:                                             ; preds = %1426
  %1433 = sub i64 %1291, %1429
  br label %1434

1434:                                             ; preds = %1434, %1432
  %1435 = phi i64 [ %1427, %1432 ], [ %1474, %1434 ]
  %1436 = phi i64 [ 0, %1432 ], [ %1475, %1434 ]
  %1437 = phi i64 [ %1433, %1432 ], [ %1476, %1434 ]
  %1438 = getelementptr inbounds i8, i8* %1190, i64 %1436
  %1439 = load i8, i8* %1438, align 1
  %1440 = zext i8 %1439 to i64
  %1441 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1440
  %1442 = load i8, i8* %1441, align 1
  %1443 = zext i8 %1442 to i64
  %1444 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1440
  %1445 = load i16, i16* %1444, align 2
  %1446 = zext i16 %1445 to i64
  %1447 = lshr i64 %1435, 3
  %1448 = getelementptr inbounds i8, i8* %10, i64 %1447
  %1449 = load i8, i8* %1448, align 1, !alias.scope !1349, !noalias !1352
  %1450 = zext i8 %1449 to i64
  %1451 = and i64 %1435, 7
  %1452 = shl i64 %1446, %1451
  %1453 = or i64 %1452, %1450
  %1454 = bitcast i8* %1448 to i64*
  store i64 %1453, i64* %1454, align 8, !alias.scope !1349, !noalias !1352
  %1455 = add i64 %1435, %1443
  store i64 %1455, i64* %9, align 8, !alias.scope !1352, !noalias !1349
  %1456 = or i64 %1436, 1
  %1457 = getelementptr inbounds i8, i8* %1190, i64 %1456
  %1458 = load i8, i8* %1457, align 1
  %1459 = zext i8 %1458 to i64
  %1460 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1459
  %1461 = load i8, i8* %1460, align 1
  %1462 = zext i8 %1461 to i64
  %1463 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1459
  %1464 = load i16, i16* %1463, align 2
  %1465 = zext i16 %1464 to i64
  %1466 = lshr i64 %1455, 3
  %1467 = getelementptr inbounds i8, i8* %10, i64 %1466
  %1468 = load i8, i8* %1467, align 1, !alias.scope !1349, !noalias !1352
  %1469 = zext i8 %1468 to i64
  %1470 = and i64 %1455, 7
  %1471 = shl i64 %1465, %1470
  %1472 = or i64 %1471, %1469
  %1473 = bitcast i8* %1467 to i64*
  store i64 %1472, i64* %1473, align 8, !alias.scope !1349, !noalias !1352
  %1474 = add i64 %1455, %1462
  store i64 %1474, i64* %9, align 8, !alias.scope !1352, !noalias !1349
  %1475 = add nuw i64 %1436, 2
  %1476 = add i64 %1437, -2
  %1477 = icmp eq i64 %1476, 0
  br i1 %1477, label %1649, label %1434

1478:                                             ; preds = %1288
  %1479 = sub i64 %1290, %130
  %1480 = mul i64 %1479, 50
  %1481 = icmp ugt i64 %1480, %1291
  %1482 = or i1 %131, %1481
  br i1 %1482, label %1541, label %1483

1483:                                             ; preds = %1478
  %1484 = add i64 %125, -3
  %1485 = sub i64 %1289, %130
  %1486 = trunc i64 %1484 to i32
  %1487 = and i32 %1486, 7
  %1488 = shl nsw i32 -1, %1487
  %1489 = lshr i64 %1484, 3
  %1490 = getelementptr inbounds i8, i8* %10, i64 %1489
  %1491 = load i8, i8* %1490, align 1
  %1492 = trunc i32 %1488 to i8
  %1493 = and i8 %1492, 127
  %1494 = xor i8 %1493, 127
  %1495 = and i8 %1491, %1494
  store i8 %1495, i8* %1490, align 1
  store i64 %1484, i64* %9, align 8
  %1496 = load i8, i8* %1490, align 1, !alias.scope !1354, !noalias !1357
  %1497 = zext i8 %1496 to i64
  %1498 = bitcast i8* %1490 to i64*
  store i64 %1497, i64* %1498, align 8, !alias.scope !1354, !noalias !1357
  %1499 = add i64 %125, -2
  %1500 = icmp ult i64 %1485, 65537
  %1501 = icmp ult i64 %1485, 1048577
  %1502 = select i1 %1501, i64 5, i64 6
  %1503 = select i1 %1500, i64 4, i64 %1502
  %1504 = add nsw i64 %1503, -4
  %1505 = lshr i64 %1499, 3
  %1506 = getelementptr inbounds i8, i8* %10, i64 %1505
  %1507 = load i8, i8* %1506, align 1, !alias.scope !1359, !noalias !1362
  %1508 = zext i8 %1507 to i64
  %1509 = and i64 %1499, 7
  %1510 = shl i64 %1504, %1509
  %1511 = or i64 %1510, %1508
  %1512 = bitcast i8* %1506 to i64*
  store i64 %1511, i64* %1512, align 8, !alias.scope !1359, !noalias !1362
  %1513 = shl nuw nsw i64 %1503, 2
  %1514 = add i64 %1485, -1
  %1515 = lshr i64 %125, 3
  %1516 = getelementptr inbounds i8, i8* %10, i64 %1515
  %1517 = load i8, i8* %1516, align 1, !alias.scope !1364, !noalias !1367
  %1518 = zext i8 %1517 to i64
  %1519 = and i64 %125, 7
  %1520 = shl i64 %1514, %1519
  %1521 = or i64 %1520, %1518
  %1522 = bitcast i8* %1516 to i64*
  store i64 %1521, i64* %1522, align 8, !alias.scope !1364, !noalias !1367
  %1523 = add i64 %1513, %125
  %1524 = lshr i64 %1523, 3
  %1525 = getelementptr inbounds i8, i8* %10, i64 %1524
  %1526 = load i8, i8* %1525, align 1, !alias.scope !1369, !noalias !1372
  %1527 = zext i8 %1526 to i64
  %1528 = and i64 %1523, 7
  %1529 = shl i64 1, %1528
  %1530 = or i64 %1529, %1527
  %1531 = bitcast i8* %1525 to i64*
  store i64 %1530, i64* %1531, align 8, !alias.scope !1369, !noalias !1372
  %1532 = add i64 %1523, 8
  %1533 = and i64 %1532, 4294967288
  store i64 %1533, i64* %9, align 8
  %1534 = lshr exact i64 %1533, 3
  %1535 = getelementptr inbounds i8, i8* %10, i64 %1534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1535, i8* align 1 %128, i64 %1485, i1 false) #6
  %1536 = shl i64 %1485, 3
  %1537 = load i64, i64* %9, align 8
  %1538 = add i64 %1537, %1536
  store i64 %1538, i64* %9, align 8
  %1539 = lshr i64 %1538, 3
  %1540 = getelementptr inbounds i8, i8* %10, i64 %1539
  store i8 0, i8* %1540, align 1
  br label %1695

1541:                                             ; preds = %1478
  %1542 = icmp ult i64 %1291, 22594
  br i1 %1542, label %1543, label %1570

1543:                                             ; preds = %1541
  %1544 = load i8, i8* %110, align 1
  %1545 = zext i8 %1544 to i64
  %1546 = load i16, i16* %111, align 2
  %1547 = zext i16 %1546 to i64
  %1548 = load i64, i64* %9, align 8, !alias.scope !1374, !noalias !1377
  %1549 = lshr i64 %1548, 3
  %1550 = getelementptr inbounds i8, i8* %10, i64 %1549
  %1551 = load i8, i8* %1550, align 1, !alias.scope !1377, !noalias !1374
  %1552 = zext i8 %1551 to i64
  %1553 = and i64 %1548, 7
  %1554 = shl i64 %1547, %1553
  %1555 = or i64 %1554, %1552
  %1556 = bitcast i8* %1550 to i64*
  store i64 %1555, i64* %1556, align 8, !alias.scope !1377, !noalias !1374
  %1557 = add i64 %1548, %1545
  %1558 = add nsw i64 %1291, -6210
  %1559 = lshr i64 %1557, 3
  %1560 = getelementptr inbounds i8, i8* %10, i64 %1559
  %1561 = load i8, i8* %1560, align 1, !alias.scope !1379, !noalias !1382
  %1562 = zext i8 %1561 to i64
  %1563 = and i64 %1557, 7
  %1564 = shl i64 %1558, %1563
  %1565 = or i64 %1564, %1562
  %1566 = bitcast i8* %1560 to i64*
  store i64 %1565, i64* %1566, align 8, !alias.scope !1379, !noalias !1382
  %1567 = add i64 %1557, 14
  store i64 %1567, i64* %9, align 8, !alias.scope !1382, !noalias !1379
  %1568 = load i32, i32* %112, align 8
  %1569 = add i32 %1568, 1
  store i32 %1569, i32* %112, align 8
  br label %1597

1570:                                             ; preds = %1541
  %1571 = load i8, i8* %107, align 1
  %1572 = zext i8 %1571 to i64
  %1573 = load i16, i16* %108, align 2
  %1574 = zext i16 %1573 to i64
  %1575 = load i64, i64* %9, align 8, !alias.scope !1384, !noalias !1387
  %1576 = lshr i64 %1575, 3
  %1577 = getelementptr inbounds i8, i8* %10, i64 %1576
  %1578 = load i8, i8* %1577, align 1, !alias.scope !1387, !noalias !1384
  %1579 = zext i8 %1578 to i64
  %1580 = and i64 %1575, 7
  %1581 = shl i64 %1574, %1580
  %1582 = or i64 %1581, %1579
  %1583 = bitcast i8* %1577 to i64*
  store i64 %1582, i64* %1583, align 8, !alias.scope !1387, !noalias !1384
  %1584 = add i64 %1575, %1572
  %1585 = add i64 %1291, -22594
  %1586 = lshr i64 %1584, 3
  %1587 = getelementptr inbounds i8, i8* %10, i64 %1586
  %1588 = load i8, i8* %1587, align 1, !alias.scope !1389, !noalias !1392
  %1589 = zext i8 %1588 to i64
  %1590 = and i64 %1584, 7
  %1591 = shl i64 %1585, %1590
  %1592 = or i64 %1591, %1589
  %1593 = bitcast i8* %1587 to i64*
  store i64 %1592, i64* %1593, align 8, !alias.scope !1389, !noalias !1392
  %1594 = add i64 %1584, 24
  store i64 %1594, i64* %9, align 8, !alias.scope !1392, !noalias !1389
  %1595 = load i32, i32* %109, align 4
  %1596 = add i32 %1595, 1
  store i32 %1596, i32* %109, align 4
  br label %1597

1597:                                             ; preds = %1570, %1543
  %1598 = phi i64 [ %1567, %1543 ], [ %1594, %1570 ]
  %1599 = xor i64 %1290, -1
  %1600 = and i64 %1291, 1
  %1601 = sub i64 0, %1289
  %1602 = icmp eq i64 %1599, %1601
  br i1 %1602, label %1672, label %1603

1603:                                             ; preds = %1597
  %1604 = sub i64 %1291, %1600
  br label %1605

1605:                                             ; preds = %1605, %1603
  %1606 = phi i64 [ %1598, %1603 ], [ %1645, %1605 ]
  %1607 = phi i64 [ 0, %1603 ], [ %1646, %1605 ]
  %1608 = phi i64 [ %1604, %1603 ], [ %1647, %1605 ]
  %1609 = getelementptr inbounds i8, i8* %1190, i64 %1607
  %1610 = load i8, i8* %1609, align 1
  %1611 = zext i8 %1610 to i64
  %1612 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1611
  %1613 = load i8, i8* %1612, align 1
  %1614 = zext i8 %1613 to i64
  %1615 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1611
  %1616 = load i16, i16* %1615, align 2
  %1617 = zext i16 %1616 to i64
  %1618 = lshr i64 %1606, 3
  %1619 = getelementptr inbounds i8, i8* %10, i64 %1618
  %1620 = load i8, i8* %1619, align 1, !alias.scope !1394, !noalias !1397
  %1621 = zext i8 %1620 to i64
  %1622 = and i64 %1606, 7
  %1623 = shl i64 %1617, %1622
  %1624 = or i64 %1623, %1621
  %1625 = bitcast i8* %1619 to i64*
  store i64 %1624, i64* %1625, align 8, !alias.scope !1394, !noalias !1397
  %1626 = add i64 %1606, %1614
  store i64 %1626, i64* %9, align 8, !alias.scope !1397, !noalias !1394
  %1627 = or i64 %1607, 1
  %1628 = getelementptr inbounds i8, i8* %1190, i64 %1627
  %1629 = load i8, i8* %1628, align 1
  %1630 = zext i8 %1629 to i64
  %1631 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1630
  %1632 = load i8, i8* %1631, align 1
  %1633 = zext i8 %1632 to i64
  %1634 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1630
  %1635 = load i16, i16* %1634, align 2
  %1636 = zext i16 %1635 to i64
  %1637 = lshr i64 %1626, 3
  %1638 = getelementptr inbounds i8, i8* %10, i64 %1637
  %1639 = load i8, i8* %1638, align 1, !alias.scope !1394, !noalias !1397
  %1640 = zext i8 %1639 to i64
  %1641 = and i64 %1626, 7
  %1642 = shl i64 %1636, %1641
  %1643 = or i64 %1642, %1640
  %1644 = bitcast i8* %1638 to i64*
  store i64 %1643, i64* %1644, align 8, !alias.scope !1394, !noalias !1397
  %1645 = add i64 %1626, %1633
  store i64 %1645, i64* %9, align 8, !alias.scope !1397, !noalias !1394
  %1646 = add nuw i64 %1607, 2
  %1647 = add i64 %1608, -2
  %1648 = icmp eq i64 %1647, 0
  br i1 %1648, label %1672, label %1605

1649:                                             ; preds = %1434, %1426
  %1650 = phi i64 [ %1427, %1426 ], [ %1474, %1434 ]
  %1651 = phi i64 [ 0, %1426 ], [ %1475, %1434 ]
  %1652 = icmp eq i64 %1429, 0
  br i1 %1652, label %1695, label %1653

1653:                                             ; preds = %1649
  %1654 = getelementptr inbounds i8, i8* %1190, i64 %1651
  %1655 = load i8, i8* %1654, align 1
  %1656 = zext i8 %1655 to i64
  %1657 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1656
  %1658 = load i8, i8* %1657, align 1
  %1659 = zext i8 %1658 to i64
  %1660 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1656
  %1661 = load i16, i16* %1660, align 2
  %1662 = zext i16 %1661 to i64
  %1663 = lshr i64 %1650, 3
  %1664 = getelementptr inbounds i8, i8* %10, i64 %1663
  %1665 = load i8, i8* %1664, align 1, !alias.scope !1349, !noalias !1352
  %1666 = zext i8 %1665 to i64
  %1667 = and i64 %1650, 7
  %1668 = shl i64 %1662, %1667
  %1669 = or i64 %1668, %1666
  %1670 = bitcast i8* %1664 to i64*
  store i64 %1669, i64* %1670, align 8, !alias.scope !1349, !noalias !1352
  %1671 = add i64 %1650, %1659
  store i64 %1671, i64* %9, align 8, !alias.scope !1352, !noalias !1349
  br label %1695

1672:                                             ; preds = %1605, %1597
  %1673 = phi i64 [ %1598, %1597 ], [ %1645, %1605 ]
  %1674 = phi i64 [ 0, %1597 ], [ %1646, %1605 ]
  %1675 = icmp eq i64 %1600, 0
  br i1 %1675, label %1695, label %1676

1676:                                             ; preds = %1672
  %1677 = getelementptr inbounds i8, i8* %1190, i64 %1674
  %1678 = load i8, i8* %1677, align 1
  %1679 = zext i8 %1678 to i64
  %1680 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 %1679
  %1681 = load i8, i8* %1680, align 1
  %1682 = zext i8 %1681 to i64
  %1683 = getelementptr inbounds [256 x i16], [256 x i16]* %15, i64 0, i64 %1679
  %1684 = load i16, i16* %1683, align 2
  %1685 = zext i16 %1684 to i64
  %1686 = lshr i64 %1673, 3
  %1687 = getelementptr inbounds i8, i8* %10, i64 %1686
  %1688 = load i8, i8* %1687, align 1, !alias.scope !1394, !noalias !1397
  %1689 = zext i8 %1688 to i64
  %1690 = and i64 %1673, 7
  %1691 = shl i64 %1685, %1690
  %1692 = or i64 %1691, %1689
  %1693 = bitcast i8* %1687 to i64*
  store i64 %1692, i64* %1693, align 8, !alias.scope !1394, !noalias !1397
  %1694 = add i64 %1673, %1682
  store i64 %1694, i64* %9, align 8, !alias.scope !1397, !noalias !1394
  br label %1695

1695:                                             ; preds = %1676, %1672, %1653, %1649, %1483, %1399, %1286, %385
  %1696 = phi i8* [ %138, %1483 ], [ %138, %1286 ], [ %138, %1399 ], [ %160, %385 ], [ %138, %1649 ], [ %138, %1653 ], [ %138, %1672 ], [ %138, %1676 ]
  %1697 = phi i64 [ %1191, %1483 ], [ %1191, %1286 ], [ %1191, %1399 ], [ %445, %385 ], [ %1191, %1649 ], [ %1191, %1653 ], [ %1191, %1672 ], [ %1191, %1676 ]
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %1745, label %1699

1699:                                             ; preds = %1695
  %1700 = icmp ult i64 %1697, 98304
  %1701 = select i1 %1700, i64 %1697, i64 98304
  %1702 = load i64, i64* %9, align 8
  %1703 = add i64 %1702, 3
  %1704 = lshr i64 %1702, 3
  %1705 = getelementptr inbounds i8, i8* %10, i64 %1704
  %1706 = load i8, i8* %1705, align 1, !alias.scope !1399, !noalias !1402
  %1707 = zext i8 %1706 to i64
  %1708 = bitcast i8* %1705 to i64*
  store i64 %1707, i64* %1708, align 8, !alias.scope !1399, !noalias !1402
  %1709 = add i64 %1702, 1
  %1710 = icmp ult i64 %1701, 65537
  %1711 = select i1 %1710, i64 4, i64 5
  %1712 = add nsw i64 %1711, -4
  %1713 = lshr i64 %1709, 3
  %1714 = getelementptr inbounds i8, i8* %10, i64 %1713
  %1715 = load i8, i8* %1714, align 1, !alias.scope !1404, !noalias !1407
  %1716 = zext i8 %1715 to i64
  %1717 = and i64 %1709, 7
  %1718 = shl i64 %1712, %1717
  %1719 = or i64 %1718, %1716
  %1720 = bitcast i8* %1714 to i64*
  store i64 %1719, i64* %1720, align 8, !alias.scope !1404, !noalias !1407
  %1721 = shl nuw nsw i64 %1711, 2
  %1722 = add nsw i64 %1701, -1
  %1723 = lshr i64 %1703, 3
  %1724 = getelementptr inbounds i8, i8* %10, i64 %1723
  %1725 = load i8, i8* %1724, align 1, !alias.scope !1409, !noalias !1412
  %1726 = zext i8 %1725 to i64
  %1727 = and i64 %1703, 7
  %1728 = shl i64 %1722, %1727
  %1729 = or i64 %1728, %1726
  %1730 = bitcast i8* %1724 to i64*
  store i64 %1729, i64* %1730, align 8, !alias.scope !1409, !noalias !1412
  %1731 = add i64 %1703, %1721
  %1732 = lshr i64 %1731, 3
  %1733 = getelementptr inbounds i8, i8* %10, i64 %1732
  %1734 = load i8, i8* %1733, align 1, !alias.scope !1414, !noalias !1417
  %1735 = zext i8 %1734 to i64
  %1736 = bitcast i8* %1733 to i64*
  store i64 %1735, i64* %1736, align 8, !alias.scope !1414, !noalias !1417
  %1737 = add i64 %1731, 1
  %1738 = lshr i64 %1737, 3
  %1739 = getelementptr inbounds i8, i8* %10, i64 %1738
  %1740 = load i8, i8* %1739, align 1, !alias.scope !1419, !noalias !1422
  %1741 = zext i8 %1740 to i64
  %1742 = bitcast i8* %1739 to i64*
  store i64 %1741, i64* %1742, align 8, !alias.scope !1419, !noalias !1422
  %1743 = add i64 %1731, 14
  store i64 %1743, i64* %9, align 8, !alias.scope !1422, !noalias !1419
  %1744 = call fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager* %0, i8* %1696, i64 %1701, i8* nonnull %21, i16* nonnull %63, i64* %9, i8* %10) #6
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %9, i8* %10) #6
  br label %124

1745:                                             ; preds = %1695
  %1746 = icmp eq i32 %3, 0
  br i1 %1746, label %1747, label %1748

1747:                                             ; preds = %1745
  store i8 0, i8* %8, align 1
  store i64 0, i64* %7, align 8
  call fastcc void @BuildAndStoreCommandPrefixCode(i32* nonnull %123, i8* %5, i16* %6, i64* %7, i8* %8) #6
  br label %1748

1748:                                             ; preds = %1745, %1747
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %16) #6
  ret void

1749:                                             ; preds = %257
  %1750 = getelementptr inbounds i8, i8* %249, i64 1
  %1751 = getelementptr inbounds i8, i8* %221, i64 %258
  %1752 = load i8, i8* %1751, align 1
  %1753 = load i8, i8* %1750, align 1
  %1754 = icmp eq i8 %1752, %1753
  br i1 %1754, label %1755, label %260, !prof !75

1755:                                             ; preds = %1749
  %1756 = add i64 %248, 2
  %1757 = icmp eq i64 %250, 2
  br i1 %1757, label %260, label %1758

1758:                                             ; preds = %1755
  %1759 = getelementptr inbounds i8, i8* %249, i64 2
  %1760 = getelementptr inbounds i8, i8* %221, i64 %1756
  %1761 = load i8, i8* %1760, align 1
  %1762 = load i8, i8* %1759, align 1
  %1763 = icmp eq i8 %1761, %1762
  br i1 %1763, label %1764, label %260, !prof !75

1764:                                             ; preds = %1758
  %1765 = add i64 %248, 3
  %1766 = icmp eq i64 %250, 3
  br i1 %1766, label %260, label %1767

1767:                                             ; preds = %1764
  %1768 = getelementptr inbounds i8, i8* %249, i64 3
  %1769 = getelementptr inbounds i8, i8* %221, i64 %1765
  %1770 = load i8, i8* %1769, align 1
  %1771 = load i8, i8* %1768, align 1
  %1772 = icmp eq i8 %1770, %1771
  br i1 %1772, label %1773, label %260, !prof !75

1773:                                             ; preds = %1767
  %1774 = add i64 %248, 4
  %1775 = icmp eq i64 %250, 4
  br i1 %1775, label %260, label %1776

1776:                                             ; preds = %1773
  %1777 = getelementptr inbounds i8, i8* %249, i64 4
  %1778 = getelementptr inbounds i8, i8* %221, i64 %1774
  %1779 = load i8, i8* %1778, align 1
  %1780 = load i8, i8* %1777, align 1
  %1781 = icmp eq i8 %1779, %1780
  br i1 %1781, label %1782, label %260, !prof !75

1782:                                             ; preds = %1776
  %1783 = add i64 %248, 5
  %1784 = icmp eq i64 %250, 5
  br i1 %1784, label %260, label %1785

1785:                                             ; preds = %1782
  %1786 = getelementptr inbounds i8, i8* %249, i64 5
  %1787 = getelementptr inbounds i8, i8* %221, i64 %1783
  %1788 = load i8, i8* %1787, align 1
  %1789 = load i8, i8* %1786, align 1
  %1790 = icmp eq i8 %1788, %1789
  br i1 %1790, label %1791, label %260, !prof !75

1791:                                             ; preds = %1785
  %1792 = add i64 %248, 6
  %1793 = icmp eq i64 %250, 6
  br i1 %1793, label %260, label %1794

1794:                                             ; preds = %1791
  %1795 = getelementptr inbounds i8, i8* %249, i64 6
  %1796 = getelementptr inbounds i8, i8* %221, i64 %1792
  %1797 = load i8, i8* %1796, align 1
  %1798 = load i8, i8* %1795, align 1
  %1799 = icmp eq i8 %1797, %1798
  %1800 = add i64 %248, 7
  %1801 = select i1 %1799, i64 %1800, i64 %1792, !prof !75
  br label %260

1802:                                             ; preds = %962
  %1803 = getelementptr inbounds i8, i8* %954, i64 1
  %1804 = getelementptr inbounds i8, i8* %925, i64 %963
  %1805 = load i8, i8* %1804, align 1
  %1806 = load i8, i8* %1803, align 1
  %1807 = icmp eq i8 %1805, %1806
  br i1 %1807, label %1808, label %965, !prof !75

1808:                                             ; preds = %1802
  %1809 = add i64 %953, 2
  %1810 = icmp eq i64 %955, 2
  br i1 %1810, label %965, label %1811

1811:                                             ; preds = %1808
  %1812 = getelementptr inbounds i8, i8* %954, i64 2
  %1813 = getelementptr inbounds i8, i8* %925, i64 %1809
  %1814 = load i8, i8* %1813, align 1
  %1815 = load i8, i8* %1812, align 1
  %1816 = icmp eq i8 %1814, %1815
  br i1 %1816, label %1817, label %965, !prof !75

1817:                                             ; preds = %1811
  %1818 = add i64 %953, 3
  %1819 = icmp eq i64 %955, 3
  br i1 %1819, label %965, label %1820

1820:                                             ; preds = %1817
  %1821 = getelementptr inbounds i8, i8* %954, i64 3
  %1822 = getelementptr inbounds i8, i8* %925, i64 %1818
  %1823 = load i8, i8* %1822, align 1
  %1824 = load i8, i8* %1821, align 1
  %1825 = icmp eq i8 %1823, %1824
  br i1 %1825, label %1826, label %965, !prof !75

1826:                                             ; preds = %1820
  %1827 = add i64 %953, 4
  %1828 = icmp eq i64 %955, 4
  br i1 %1828, label %965, label %1829

1829:                                             ; preds = %1826
  %1830 = getelementptr inbounds i8, i8* %954, i64 4
  %1831 = getelementptr inbounds i8, i8* %925, i64 %1827
  %1832 = load i8, i8* %1831, align 1
  %1833 = load i8, i8* %1830, align 1
  %1834 = icmp eq i8 %1832, %1833
  br i1 %1834, label %1835, label %965, !prof !75

1835:                                             ; preds = %1829
  %1836 = add i64 %953, 5
  %1837 = icmp eq i64 %955, 5
  br i1 %1837, label %965, label %1838

1838:                                             ; preds = %1835
  %1839 = getelementptr inbounds i8, i8* %954, i64 5
  %1840 = getelementptr inbounds i8, i8* %925, i64 %1836
  %1841 = load i8, i8* %1840, align 1
  %1842 = load i8, i8* %1839, align 1
  %1843 = icmp eq i8 %1841, %1842
  br i1 %1843, label %1844, label %965, !prof !75

1844:                                             ; preds = %1838
  %1845 = add i64 %953, 6
  %1846 = icmp eq i64 %955, 6
  br i1 %1846, label %965, label %1847

1847:                                             ; preds = %1844
  %1848 = getelementptr inbounds i8, i8* %954, i64 6
  %1849 = getelementptr inbounds i8, i8* %925, i64 %1845
  %1850 = load i8, i8* %1849, align 1
  %1851 = load i8, i8* %1848, align 1
  %1852 = icmp eq i8 %1850, %1851
  %1853 = add i64 %953, 7
  %1854 = select i1 %1852, i64 %1853, i64 %1845, !prof !75
  br label %965
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @BuildAndStoreLiteralPrefixCode(%struct.MemoryManager*, i8* nocapture readonly, i64, i8*, i16*, i64*, i8*) unnamed_addr #0 {
  %8 = alloca [256 x i32], align 16
  %9 = bitcast [256 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 1024, i1 false)
  %10 = icmp ult i64 %2, 32768
  br i1 %10, label %11, label %90

11:                                               ; preds = %7
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %67, label %13

13:                                               ; preds = %11
  %14 = add i64 %2, -1
  %15 = and i64 %2, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %52, label %17

17:                                               ; preds = %13
  %18 = sub i64 %2, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %49, %19 ]
  %21 = phi i64 [ %18, %17 ], [ %50, %19 ]
  %22 = getelementptr inbounds i8, i8* %1, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %25, align 4
  %28 = or i64 %20, 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 4
  %35 = or i64 %20, 2
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %39, align 4
  %42 = or i64 %20, 3
  %43 = getelementptr inbounds i8, i8* %1, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %47, 1
  store i32 %48, i32* %46, align 4
  %49 = add nuw i64 %20, 4
  %50 = add i64 %21, -4
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %19

52:                                               ; preds = %19, %13
  %53 = phi i64 [ 0, %13 ], [ %49, %19 ]
  %54 = icmp eq i64 %15, 0
  br i1 %54, label %67, label %55

55:                                               ; preds = %52, %55
  %56 = phi i64 [ %64, %55 ], [ %53, %52 ]
  %57 = phi i64 [ %65, %55 ], [ %15, %52 ]
  %58 = getelementptr inbounds i8, i8* %1, i64 %56
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* %61, align 4
  %64 = add nuw i64 %56, 1
  %65 = add i64 %57, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %55, !llvm.loop !1424

67:                                               ; preds = %52, %55, %11
  br label %68

68:                                               ; preds = %68, %67
  %69 = phi i64 [ %2, %67 ], [ %87, %68 ]
  %70 = phi i64 [ 0, %67 ], [ %88, %68 ]
  %71 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %70
  %72 = load i32, i32* %71, align 8
  %73 = icmp ult i32 %72, 11
  %74 = select i1 %73, i32 %72, i32 11
  %75 = shl nuw nsw i32 %74, 1
  %76 = add i32 %75, %72
  store i32 %76, i32* %71, align 8
  %77 = zext i32 %75 to i64
  %78 = add i64 %69, %77
  %79 = or i64 %70, 1
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = icmp ult i32 %81, 11
  %83 = select i1 %82, i32 %81, i32 11
  %84 = shl nuw nsw i32 %83, 1
  %85 = add i32 %84, %81
  store i32 %85, i32* %80, align 4
  %86 = zext i32 %84 to i64
  %87 = add i64 %78, %86
  %88 = add nuw nsw i64 %70, 2
  %89 = icmp eq i64 %88, 256
  br i1 %89, label %127, label %68

90:                                               ; preds = %7, %90
  %91 = phi i64 [ %98, %90 ], [ 0, %7 ]
  %92 = getelementptr inbounds i8, i8* %1, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %96, 1
  store i32 %97, i32* %95, align 4
  %98 = add i64 %91, 29
  %99 = icmp ult i64 %98, %2
  br i1 %99, label %90, label %100

100:                                              ; preds = %90
  %101 = add i64 %2, 28
  %102 = udiv i64 %101, 29
  br label %103

103:                                              ; preds = %103, %100
  %104 = phi i64 [ %102, %100 ], [ %124, %103 ]
  %105 = phi i64 [ 0, %100 ], [ %125, %103 ]
  %106 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %105
  %107 = load i32, i32* %106, align 8
  %108 = icmp ult i32 %107, 11
  %109 = select i1 %108, i32 %107, i32 11
  %110 = shl nuw nsw i32 %109, 1
  %111 = or i32 %110, 1
  %112 = add i32 %111, %107
  store i32 %112, i32* %106, align 8
  %113 = zext i32 %111 to i64
  %114 = add i64 %104, %113
  %115 = or i64 %105, 1
  %116 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = icmp ult i32 %117, 11
  %119 = select i1 %118, i32 %117, i32 11
  %120 = shl nuw nsw i32 %119, 1
  %121 = or i32 %120, 1
  %122 = add i32 %121, %117
  store i32 %122, i32* %116, align 4
  %123 = zext i32 %121 to i64
  %124 = add i64 %114, %123
  %125 = add nuw nsw i64 %105, 2
  %126 = icmp eq i64 %125, 256
  br i1 %126, label %127, label %103

127:                                              ; preds = %103, %68
  %128 = phi i64 [ %87, %68 ], [ %124, %103 ]
  %129 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 0
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %129, i64 %128, i64 8, i8* %3, i16* %4, i64* %5, i8* %6) #6
  br label %130

130:                                              ; preds = %159, %127
  %131 = phi i64 [ 0, %127 ], [ %160, %159 ]
  %132 = phi i64 [ 0, %127 ], [ %161, %159 ]
  %133 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %132
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %143, label %136

136:                                              ; preds = %130
  %137 = getelementptr inbounds i8, i8* %3, i64 %132
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = mul i32 %134, %139
  %141 = zext i32 %140 to i64
  %142 = add i64 %131, %141
  br label %143

143:                                              ; preds = %130, %136
  %144 = phi i64 [ %142, %136 ], [ %131, %130 ]
  %145 = or i64 %132, 1
  %146 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %159, label %152

149:                                              ; preds = %159
  %150 = mul i64 %160, 125
  %151 = udiv i64 %150, %128
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #6
  ret i64 %151

152:                                              ; preds = %143
  %153 = getelementptr inbounds i8, i8* %3, i64 %145
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = mul i32 %147, %155
  %157 = zext i32 %156 to i64
  %158 = add i64 %144, %157
  br label %159

159:                                              ; preds = %152, %143
  %160 = phi i64 [ %158, %152 ], [ %144, %143 ]
  %161 = add nuw nsw i64 %132, 2
  %162 = icmp eq i64 %161, 256
  br i1 %162, label %149, label %130
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @BuildAndStoreCommandPrefixCode(i32*, i8*, i16*, i64*, i8*) unnamed_addr #0 {
  %6 = alloca [129 x %struct.HuffmanTree], align 16
  %7 = alloca [704 x i8], align 16
  %8 = alloca [64 x i16], align 16
  %9 = bitcast [129 x %struct.HuffmanTree]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1032, i1 false)
  %10 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 704, i1 false)
  %11 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  %12 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %6, i64 0, i64 0
  call void @BrotliCreateHuffmanTree(i32* %0, i64 64, i32 15, %struct.HuffmanTree* nonnull %12, i8* %1) #6
  %13 = getelementptr inbounds i32, i32* %0, i64 64
  %14 = getelementptr inbounds i8, i8* %1, i64 64
  call void @BrotliCreateHuffmanTree(i32* %13, i64 64, i32 14, %struct.HuffmanTree* nonnull %12, i8* %14) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 1 %1, i64 24, i1 false)
  %15 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 24
  %16 = getelementptr inbounds i8, i8* %1, i64 40
  %17 = bitcast i8* %16 to i64*
  %18 = bitcast i8* %15 to i64*
  %19 = load i64, i64* %17, align 1
  store i64 %19, i64* %18, align 8
  %20 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 32
  %21 = getelementptr inbounds i8, i8* %1, i64 24
  %22 = bitcast i8* %21 to i64*
  %23 = bitcast i8* %20 to i64*
  %24 = load i64, i64* %22, align 1
  store i64 %24, i64* %23, align 16
  %25 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 40
  %26 = getelementptr inbounds i8, i8* %1, i64 48
  %27 = bitcast i8* %26 to i64*
  %28 = bitcast i8* %25 to i64*
  %29 = load i64, i64* %27, align 1
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 48
  %31 = getelementptr inbounds i8, i8* %1, i64 32
  %32 = bitcast i8* %31 to i64*
  %33 = bitcast i8* %30 to i64*
  %34 = load i64, i64* %32, align 1
  store i64 %34, i64* %33, align 16
  %35 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 56
  %36 = getelementptr inbounds i8, i8* %1, i64 56
  %37 = bitcast i8* %36 to i64*
  %38 = bitcast i8* %35 to i64*
  %39 = load i64, i64* %37, align 1
  store i64 %39, i64* %38, align 8
  %40 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %10, i64 64, i16* nonnull %40) #6
  %41 = bitcast i16* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* nonnull align 16 %11, i64 48, i1 false)
  %42 = getelementptr inbounds i16, i16* %2, i64 24
  %43 = bitcast i16* %42 to i8*
  %44 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 32
  %45 = bitcast i16* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %43, i8* align 16 %45, i64 16, i1 false)
  %46 = getelementptr inbounds i16, i16* %2, i64 32
  %47 = bitcast i16* %46 to i8*
  %48 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 48
  %49 = bitcast i16* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %47, i8* align 16 %49, i64 16, i1 false)
  %50 = getelementptr inbounds i16, i16* %2, i64 40
  %51 = bitcast i16* %50 to i8*
  %52 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 24
  %53 = bitcast i16* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %51, i8* align 16 %53, i64 16, i1 false)
  %54 = getelementptr inbounds i16, i16* %2, i64 48
  %55 = bitcast i16* %54 to i8*
  %56 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 40
  %57 = bitcast i16* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 16 %57, i64 16, i1 false)
  %58 = getelementptr inbounds i16, i16* %2, i64 56
  %59 = bitcast i16* %58 to i8*
  %60 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 56
  %61 = bitcast i16* %60 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %59, i8* align 16 %61, i64 16, i1 false)
  %62 = getelementptr inbounds i16, i16* %2, i64 64
  call void @BrotliConvertBitDepthsToSymbols(i8* %14, i64 64, i16* %62) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 64, i1 false)
  %63 = bitcast i8* %1 to i64*
  %64 = bitcast [704 x i8]* %7 to i64*
  %65 = load i64, i64* %63, align 1
  store i64 %65, i64* %64, align 16
  %66 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 64
  %67 = getelementptr inbounds i8, i8* %1, i64 8
  %68 = bitcast i8* %67 to i64*
  %69 = bitcast i8* %66 to i64*
  %70 = load i64, i64* %68, align 1
  store i64 %70, i64* %69, align 16
  %71 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 128
  %72 = getelementptr inbounds i8, i8* %1, i64 16
  %73 = bitcast i8* %72 to i64*
  %74 = bitcast i8* %71 to i64*
  %75 = load i64, i64* %73, align 1
  store i64 %75, i64* %74, align 16
  %76 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 192
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %22, align 1
  store i64 %78, i64* %77, align 16
  %79 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 384
  %80 = bitcast i8* %79 to i64*
  %81 = load i64, i64* %32, align 1
  store i64 %81, i64* %80, align 16
  %82 = load i8, i8* %16, align 1
  store i8 %82, i8* %71, align 16
  %83 = load i8, i8* %26, align 1
  %84 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 256
  store i8 %83, i8* %84, align 16
  %85 = load i8, i8* %36, align 1
  %86 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 448
  store i8 %85, i8* %86, align 16
  %87 = getelementptr inbounds i8, i8* %1, i64 41
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 136
  store i8 %88, i8* %89, align 8
  %90 = getelementptr inbounds i8, i8* %1, i64 49
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 264
  store i8 %91, i8* %92, align 8
  %93 = getelementptr inbounds i8, i8* %1, i64 57
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 456
  store i8 %94, i8* %95, align 8
  %96 = getelementptr inbounds i8, i8* %1, i64 42
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 144
  store i8 %97, i8* %98, align 16
  %99 = getelementptr inbounds i8, i8* %1, i64 50
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 272
  store i8 %100, i8* %101, align 16
  %102 = getelementptr inbounds i8, i8* %1, i64 58
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 464
  store i8 %103, i8* %104, align 16
  %105 = getelementptr inbounds i8, i8* %1, i64 43
  %106 = load i8, i8* %105, align 1
  %107 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 152
  store i8 %106, i8* %107, align 8
  %108 = getelementptr inbounds i8, i8* %1, i64 51
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 280
  store i8 %109, i8* %110, align 8
  %111 = getelementptr inbounds i8, i8* %1, i64 59
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 472
  store i8 %112, i8* %113, align 8
  %114 = getelementptr inbounds i8, i8* %1, i64 44
  %115 = load i8, i8* %114, align 1
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 160
  store i8 %115, i8* %116, align 16
  %117 = getelementptr inbounds i8, i8* %1, i64 52
  %118 = load i8, i8* %117, align 1
  %119 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 288
  store i8 %118, i8* %119, align 16
  %120 = getelementptr inbounds i8, i8* %1, i64 60
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 480
  store i8 %121, i8* %122, align 16
  %123 = getelementptr inbounds i8, i8* %1, i64 45
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 168
  store i8 %124, i8* %125, align 8
  %126 = getelementptr inbounds i8, i8* %1, i64 53
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 296
  store i8 %127, i8* %128, align 8
  %129 = getelementptr inbounds i8, i8* %1, i64 61
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 488
  store i8 %130, i8* %131, align 8
  %132 = getelementptr inbounds i8, i8* %1, i64 46
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 176
  store i8 %133, i8* %134, align 16
  %135 = getelementptr inbounds i8, i8* %1, i64 54
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 304
  store i8 %136, i8* %137, align 16
  %138 = getelementptr inbounds i8, i8* %1, i64 62
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 496
  store i8 %139, i8* %140, align 16
  %141 = getelementptr inbounds i8, i8* %1, i64 47
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 184
  store i8 %142, i8* %143, align 8
  %144 = getelementptr inbounds i8, i8* %1, i64 55
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 312
  store i8 %145, i8* %146, align 8
  %147 = getelementptr inbounds i8, i8* %1, i64 63
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 504
  store i8 %148, i8* %149, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %10, i64 704, %struct.HuffmanTree* nonnull %12, i64* %3, i8* %4) #6
  call void @BrotliStoreHuffmanTree(i8* %14, i64 64, %struct.HuffmanTree* nonnull %12, i64* %3, i8* %4) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %9) #6
  ret void
}

declare hidden void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager*, i32*, i64, i64, i8*, i16*, i64*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #3

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #5

declare hidden void @BrotliCreateHuffmanTree(i32*, i64, i32, %struct.HuffmanTree*, i8*) local_unnamed_addr #4

declare hidden void @BrotliConvertBitDepthsToSymbols(i8*, i64, i16*) local_unnamed_addr #4

declare hidden void @BrotliStoreHuffmanTree(i8*, i64, %struct.HuffmanTree*, i64*, i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"BrotliWriteBits: argument 1"}
!4 = distinct !{!4, !"BrotliWriteBits"}
!5 = !{!6}
!6 = distinct !{!6, !4, !"BrotliWriteBits: argument 0"}
!7 = !{i32 0, i32 33}
!8 = !{!9}
!9 = distinct !{!9, !10, !"BrotliWriteBits: argument 1"}
!10 = distinct !{!10, !"BrotliWriteBits"}
!11 = !{!12}
!12 = distinct !{!12, !10, !"BrotliWriteBits: argument 0"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"BrotliWriteBits: argument 1"}
!15 = distinct !{!15, !"BrotliWriteBits"}
!16 = !{!17}
!17 = distinct !{!17, !15, !"BrotliWriteBits: argument 0"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"BrotliWriteBits: argument 1"}
!20 = distinct !{!20, !"BrotliWriteBits"}
!21 = !{!22}
!22 = distinct !{!22, !20, !"BrotliWriteBits: argument 0"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"BrotliWriteBits: argument 1"}
!25 = distinct !{!25, !"BrotliWriteBits"}
!26 = !{!27}
!27 = distinct !{!27, !25, !"BrotliWriteBits: argument 0"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"BrotliWriteBits: argument 0"}
!30 = distinct !{!30, !"BrotliWriteBits"}
!31 = !{!32}
!32 = distinct !{!32, !30, !"BrotliWriteBits: argument 1"}
!33 = !{!29, !6}
!34 = !{}
!35 = !{!36, !38}
!36 = distinct !{!36, !37, !"BrotliWriteBits: argument 1"}
!37 = distinct !{!37, !"BrotliWriteBits"}
!38 = distinct !{!38, !39, !"BrotliWriteBits: argument 1"}
!39 = distinct !{!39, !"BrotliWriteBits"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"BrotliWriteBits: argument 1"}
!42 = distinct !{!42, !"BrotliWriteBits"}
!43 = !{!44}
!44 = distinct !{!44, !42, !"BrotliWriteBits: argument 0"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"BrotliWriteBits: argument 1"}
!47 = distinct !{!47, !"BrotliWriteBits"}
!48 = !{!49}
!49 = distinct !{!49, !47, !"BrotliWriteBits: argument 0"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"BrotliWriteBits: argument 1"}
!52 = distinct !{!52, !"BrotliWriteBits"}
!53 = !{!54}
!54 = distinct !{!54, !52, !"BrotliWriteBits: argument 0"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"BrotliWriteBits: argument 1"}
!57 = distinct !{!57, !"BrotliWriteBits"}
!58 = !{!59}
!59 = distinct !{!59, !57, !"BrotliWriteBits: argument 0"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"BrotliWriteBits: argument 1"}
!62 = distinct !{!62, !"BrotliWriteBits"}
!63 = !{!64}
!64 = distinct !{!64, !62, !"BrotliWriteBits: argument 0"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"BrotliWriteBits: argument 1"}
!67 = distinct !{!67, !"BrotliWriteBits"}
!68 = !{!69}
!69 = distinct !{!69, !67, !"BrotliWriteBits: argument 0"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"BrotliWriteBits: argument 1"}
!72 = distinct !{!72, !"BrotliWriteBits"}
!73 = !{!74}
!74 = distinct !{!74, !72, !"BrotliWriteBits: argument 0"}
!75 = !{!"branch_weights", i32 2000, i32 1}
!76 = !{!"branch_weights", i32 1, i32 2000}
!77 = !{!"branch_weights", i32 2000, i32 2002}
!78 = !{i64 0, i64 65}
!79 = !{!80}
!80 = distinct !{!80, !81, !"BrotliWriteBits: argument 0"}
!81 = distinct !{!81, !"BrotliWriteBits"}
!82 = !{!83}
!83 = distinct !{!83, !81, !"BrotliWriteBits: argument 1"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"BrotliWriteBits: argument 1"}
!86 = distinct !{!86, !"BrotliWriteBits"}
!87 = !{!88}
!88 = distinct !{!88, !86, !"BrotliWriteBits: argument 0"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"BrotliWriteBits: argument 0"}
!91 = distinct !{!91, !"BrotliWriteBits"}
!92 = !{!93}
!93 = distinct !{!93, !91, !"BrotliWriteBits: argument 1"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"BrotliWriteBits: argument 1"}
!96 = distinct !{!96, !"BrotliWriteBits"}
!97 = !{!98}
!98 = distinct !{!98, !96, !"BrotliWriteBits: argument 0"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"BrotliWriteBits: argument 0"}
!101 = distinct !{!101, !"BrotliWriteBits"}
!102 = !{!103}
!103 = distinct !{!103, !101, !"BrotliWriteBits: argument 1"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"BrotliWriteBits: argument 1"}
!106 = distinct !{!106, !"BrotliWriteBits"}
!107 = !{!108}
!108 = distinct !{!108, !106, !"BrotliWriteBits: argument 0"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"BrotliWriteBits: argument 1"}
!111 = distinct !{!111, !"BrotliWriteBits"}
!112 = !{!113}
!113 = distinct !{!113, !111, !"BrotliWriteBits: argument 0"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"BrotliWriteBits: argument 1"}
!116 = distinct !{!116, !"BrotliWriteBits"}
!117 = !{!118}
!118 = distinct !{!118, !116, !"BrotliWriteBits: argument 0"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"BrotliWriteBits: argument 1"}
!121 = distinct !{!121, !"BrotliWriteBits"}
!122 = !{!123}
!123 = distinct !{!123, !121, !"BrotliWriteBits: argument 0"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"BrotliWriteBits: argument 1"}
!126 = distinct !{!126, !"BrotliWriteBits"}
!127 = !{!128}
!128 = distinct !{!128, !126, !"BrotliWriteBits: argument 0"}
!129 = !{!130}
!130 = distinct !{!130, !131, !"BrotliWriteBits: argument 0"}
!131 = distinct !{!131, !"BrotliWriteBits"}
!132 = !{!133}
!133 = distinct !{!133, !131, !"BrotliWriteBits: argument 1"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"BrotliWriteBits: argument 1"}
!136 = distinct !{!136, !"BrotliWriteBits"}
!137 = !{!138}
!138 = distinct !{!138, !136, !"BrotliWriteBits: argument 0"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"BrotliWriteBits: argument 0"}
!141 = distinct !{!141, !"BrotliWriteBits"}
!142 = !{!143}
!143 = distinct !{!143, !141, !"BrotliWriteBits: argument 1"}
!144 = !{!145}
!145 = distinct !{!145, !146, !"BrotliWriteBits: argument 1"}
!146 = distinct !{!146, !"BrotliWriteBits"}
!147 = !{!148}
!148 = distinct !{!148, !146, !"BrotliWriteBits: argument 0"}
!149 = !{!150}
!150 = distinct !{!150, !151, !"BrotliWriteBits: argument 0"}
!151 = distinct !{!151, !"BrotliWriteBits"}
!152 = !{!153}
!153 = distinct !{!153, !151, !"BrotliWriteBits: argument 1"}
!154 = !{!155}
!155 = distinct !{!155, !156, !"BrotliWriteBits: argument 1"}
!156 = distinct !{!156, !"BrotliWriteBits"}
!157 = !{!158}
!158 = distinct !{!158, !156, !"BrotliWriteBits: argument 0"}
!159 = !{!160}
!160 = distinct !{!160, !161, !"BrotliWriteBits: argument 1"}
!161 = distinct !{!161, !"BrotliWriteBits"}
!162 = !{!163}
!163 = distinct !{!163, !161, !"BrotliWriteBits: argument 0"}
!164 = !{!165}
!165 = distinct !{!165, !166, !"BrotliWriteBits: argument 1"}
!166 = distinct !{!166, !"BrotliWriteBits"}
!167 = !{!168}
!168 = distinct !{!168, !166, !"BrotliWriteBits: argument 0"}
!169 = !{!170}
!170 = distinct !{!170, !171, !"BrotliWriteBits: argument 1"}
!171 = distinct !{!171, !"BrotliWriteBits"}
!172 = !{!173}
!173 = distinct !{!173, !171, !"BrotliWriteBits: argument 0"}
!174 = !{!175}
!175 = distinct !{!175, !176, !"BrotliWriteBits: argument 1"}
!176 = distinct !{!176, !"BrotliWriteBits"}
!177 = !{!178}
!178 = distinct !{!178, !176, !"BrotliWriteBits: argument 0"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"BrotliWriteBits: argument 1"}
!181 = distinct !{!181, !"BrotliWriteBits"}
!182 = !{!183}
!183 = distinct !{!183, !181, !"BrotliWriteBits: argument 0"}
!184 = !{!185}
!185 = distinct !{!185, !186, !"BrotliWriteBits: argument 1"}
!186 = distinct !{!186, !"BrotliWriteBits"}
!187 = !{!188}
!188 = distinct !{!188, !186, !"BrotliWriteBits: argument 0"}
!189 = !{!190}
!190 = distinct !{!190, !191, !"BrotliWriteBits: argument 1"}
!191 = distinct !{!191, !"BrotliWriteBits"}
!192 = !{!193}
!193 = distinct !{!193, !191, !"BrotliWriteBits: argument 0"}
!194 = !{!195}
!195 = distinct !{!195, !196, !"BrotliWriteBits: argument 1"}
!196 = distinct !{!196, !"BrotliWriteBits"}
!197 = !{!198}
!198 = distinct !{!198, !196, !"BrotliWriteBits: argument 0"}
!199 = !{!200}
!200 = distinct !{!200, !201, !"BrotliWriteBits: argument 1"}
!201 = distinct !{!201, !"BrotliWriteBits"}
!202 = !{!203}
!203 = distinct !{!203, !201, !"BrotliWriteBits: argument 0"}
!204 = !{!205}
!205 = distinct !{!205, !206, !"BrotliWriteBits: argument 1"}
!206 = distinct !{!206, !"BrotliWriteBits"}
!207 = !{!208}
!208 = distinct !{!208, !206, !"BrotliWriteBits: argument 0"}
!209 = !{!210}
!210 = distinct !{!210, !211, !"BrotliWriteBits: argument 1"}
!211 = distinct !{!211, !"BrotliWriteBits"}
!212 = !{!213}
!213 = distinct !{!213, !211, !"BrotliWriteBits: argument 0"}
!214 = !{!215}
!215 = distinct !{!215, !216, !"BrotliWriteBits: argument 1"}
!216 = distinct !{!216, !"BrotliWriteBits"}
!217 = !{!218}
!218 = distinct !{!218, !216, !"BrotliWriteBits: argument 0"}
!219 = !{!220}
!220 = distinct !{!220, !221, !"BrotliWriteBits: argument 1"}
!221 = distinct !{!221, !"BrotliWriteBits"}
!222 = !{!223}
!223 = distinct !{!223, !221, !"BrotliWriteBits: argument 0"}
!224 = !{!225}
!225 = distinct !{!225, !226, !"BrotliWriteBits: argument 1"}
!226 = distinct !{!226, !"BrotliWriteBits"}
!227 = !{!228}
!228 = distinct !{!228, !226, !"BrotliWriteBits: argument 0"}
!229 = !{!230}
!230 = distinct !{!230, !231, !"BrotliWriteBits: argument 1"}
!231 = distinct !{!231, !"BrotliWriteBits"}
!232 = !{!233}
!233 = distinct !{!233, !231, !"BrotliWriteBits: argument 0"}
!234 = !{!235}
!235 = distinct !{!235, !236, !"BrotliWriteBits: argument 0"}
!236 = distinct !{!236, !"BrotliWriteBits"}
!237 = !{!238}
!238 = distinct !{!238, !236, !"BrotliWriteBits: argument 1"}
!239 = !{!240}
!240 = distinct !{!240, !241, !"BrotliWriteBits: argument 0"}
!241 = distinct !{!241, !"BrotliWriteBits"}
!242 = !{!243}
!243 = distinct !{!243, !241, !"BrotliWriteBits: argument 1"}
!244 = !{!245}
!245 = distinct !{!245, !246, !"BrotliWriteBits: argument 1"}
!246 = distinct !{!246, !"BrotliWriteBits"}
!247 = !{!248}
!248 = distinct !{!248, !246, !"BrotliWriteBits: argument 0"}
!249 = !{!250}
!250 = distinct !{!250, !251, !"BrotliWriteBits: argument 0"}
!251 = distinct !{!251, !"BrotliWriteBits"}
!252 = !{!253}
!253 = distinct !{!253, !251, !"BrotliWriteBits: argument 1"}
!254 = !{!255}
!255 = distinct !{!255, !256, !"BrotliWriteBits: argument 1"}
!256 = distinct !{!256, !"BrotliWriteBits"}
!257 = !{!258}
!258 = distinct !{!258, !256, !"BrotliWriteBits: argument 0"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"BrotliWriteBits: argument 0"}
!261 = distinct !{!261, !"BrotliWriteBits"}
!262 = !{!263}
!263 = distinct !{!263, !261, !"BrotliWriteBits: argument 1"}
!264 = !{!265}
!265 = distinct !{!265, !266, !"BrotliWriteBits: argument 1"}
!266 = distinct !{!266, !"BrotliWriteBits"}
!267 = !{!268}
!268 = distinct !{!268, !266, !"BrotliWriteBits: argument 0"}
!269 = !{!270}
!270 = distinct !{!270, !271, !"BrotliWriteBits: argument 1"}
!271 = distinct !{!271, !"BrotliWriteBits"}
!272 = !{!273}
!273 = distinct !{!273, !271, !"BrotliWriteBits: argument 0"}
!274 = !{!275}
!275 = distinct !{!275, !276, !"BrotliWriteBits: argument 1"}
!276 = distinct !{!276, !"BrotliWriteBits"}
!277 = !{!278}
!278 = distinct !{!278, !276, !"BrotliWriteBits: argument 0"}
!279 = !{!280}
!280 = distinct !{!280, !281, !"BrotliWriteBits: argument 0"}
!281 = distinct !{!281, !"BrotliWriteBits"}
!282 = !{!283}
!283 = distinct !{!283, !281, !"BrotliWriteBits: argument 1"}
!284 = !{!285}
!285 = distinct !{!285, !286, !"BrotliWriteBits: argument 1"}
!286 = distinct !{!286, !"BrotliWriteBits"}
!287 = !{!288}
!288 = distinct !{!288, !286, !"BrotliWriteBits: argument 0"}
!289 = !{!290}
!290 = distinct !{!290, !291, !"BrotliWriteBits: argument 0"}
!291 = distinct !{!291, !"BrotliWriteBits"}
!292 = !{!293}
!293 = distinct !{!293, !291, !"BrotliWriteBits: argument 1"}
!294 = !{!295}
!295 = distinct !{!295, !296, !"BrotliWriteBits: argument 1"}
!296 = distinct !{!296, !"BrotliWriteBits"}
!297 = !{!298}
!298 = distinct !{!298, !296, !"BrotliWriteBits: argument 0"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"BrotliWriteBits: argument 0"}
!301 = distinct !{!301, !"BrotliWriteBits"}
!302 = !{!303}
!303 = distinct !{!303, !301, !"BrotliWriteBits: argument 1"}
!304 = !{!305}
!305 = distinct !{!305, !306, !"BrotliWriteBits: argument 1"}
!306 = distinct !{!306, !"BrotliWriteBits"}
!307 = !{!308}
!308 = distinct !{!308, !306, !"BrotliWriteBits: argument 0"}
!309 = !{!310}
!310 = distinct !{!310, !311, !"BrotliWriteBits: argument 0"}
!311 = distinct !{!311, !"BrotliWriteBits"}
!312 = !{!313}
!313 = distinct !{!313, !311, !"BrotliWriteBits: argument 1"}
!314 = !{!315}
!315 = distinct !{!315, !316, !"BrotliWriteBits: argument 1"}
!316 = distinct !{!316, !"BrotliWriteBits"}
!317 = !{!318}
!318 = distinct !{!318, !316, !"BrotliWriteBits: argument 0"}
!319 = !{!320}
!320 = distinct !{!320, !321, !"BrotliWriteBits: argument 1"}
!321 = distinct !{!321, !"BrotliWriteBits"}
!322 = !{!323}
!323 = distinct !{!323, !321, !"BrotliWriteBits: argument 0"}
!324 = !{!325}
!325 = distinct !{!325, !326, !"BrotliWriteBits: argument 1"}
!326 = distinct !{!326, !"BrotliWriteBits"}
!327 = !{!328}
!328 = distinct !{!328, !326, !"BrotliWriteBits: argument 0"}
!329 = !{!330}
!330 = distinct !{!330, !331, !"BrotliWriteBits: argument 1"}
!331 = distinct !{!331, !"BrotliWriteBits"}
!332 = !{!333}
!333 = distinct !{!333, !331, !"BrotliWriteBits: argument 0"}
!334 = !{!335}
!335 = distinct !{!335, !336, !"BrotliWriteBits: argument 1"}
!336 = distinct !{!336, !"BrotliWriteBits"}
!337 = !{!338}
!338 = distinct !{!338, !336, !"BrotliWriteBits: argument 0"}
!339 = !{!340}
!340 = distinct !{!340, !341, !"BrotliWriteBits: argument 0"}
!341 = distinct !{!341, !"BrotliWriteBits"}
!342 = !{!343}
!343 = distinct !{!343, !341, !"BrotliWriteBits: argument 1"}
!344 = !{!345}
!345 = distinct !{!345, !346, !"BrotliWriteBits: argument 1"}
!346 = distinct !{!346, !"BrotliWriteBits"}
!347 = !{!348}
!348 = distinct !{!348, !346, !"BrotliWriteBits: argument 0"}
!349 = !{!350}
!350 = distinct !{!350, !351, !"BrotliWriteBits: argument 0"}
!351 = distinct !{!351, !"BrotliWriteBits"}
!352 = !{!353}
!353 = distinct !{!353, !351, !"BrotliWriteBits: argument 1"}
!354 = !{!355}
!355 = distinct !{!355, !356, !"BrotliWriteBits: argument 1"}
!356 = distinct !{!356, !"BrotliWriteBits"}
!357 = !{!358}
!358 = distinct !{!358, !356, !"BrotliWriteBits: argument 0"}
!359 = !{!360}
!360 = distinct !{!360, !361, !"BrotliWriteBits: argument 1"}
!361 = distinct !{!361, !"BrotliWriteBits"}
!362 = !{!363}
!363 = distinct !{!363, !361, !"BrotliWriteBits: argument 0"}
!364 = !{!365}
!365 = distinct !{!365, !366, !"BrotliWriteBits: argument 1"}
!366 = distinct !{!366, !"BrotliWriteBits"}
!367 = !{!368}
!368 = distinct !{!368, !366, !"BrotliWriteBits: argument 0"}
!369 = !{!370}
!370 = distinct !{!370, !371, !"BrotliWriteBits: argument 1"}
!371 = distinct !{!371, !"BrotliWriteBits"}
!372 = !{!373}
!373 = distinct !{!373, !371, !"BrotliWriteBits: argument 0"}
!374 = !{!375}
!375 = distinct !{!375, !376, !"BrotliWriteBits: argument 1"}
!376 = distinct !{!376, !"BrotliWriteBits"}
!377 = !{!378}
!378 = distinct !{!378, !376, !"BrotliWriteBits: argument 0"}
!379 = !{!380}
!380 = distinct !{!380, !381, !"BrotliWriteBits: argument 1"}
!381 = distinct !{!381, !"BrotliWriteBits"}
!382 = !{!383}
!383 = distinct !{!383, !381, !"BrotliWriteBits: argument 0"}
!384 = !{!385}
!385 = distinct !{!385, !386, !"BrotliWriteBits: argument 1"}
!386 = distinct !{!386, !"BrotliWriteBits"}
!387 = !{!388}
!388 = distinct !{!388, !386, !"BrotliWriteBits: argument 0"}
!389 = !{!390}
!390 = distinct !{!390, !391, !"BrotliWriteBits: argument 1"}
!391 = distinct !{!391, !"BrotliWriteBits"}
!392 = !{!393}
!393 = distinct !{!393, !391, !"BrotliWriteBits: argument 0"}
!394 = !{!395}
!395 = distinct !{!395, !396, !"BrotliWriteBits: argument 1"}
!396 = distinct !{!396, !"BrotliWriteBits"}
!397 = !{!398}
!398 = distinct !{!398, !396, !"BrotliWriteBits: argument 0"}
!399 = !{!400}
!400 = distinct !{!400, !401, !"BrotliWriteBits: argument 1"}
!401 = distinct !{!401, !"BrotliWriteBits"}
!402 = !{!403}
!403 = distinct !{!403, !401, !"BrotliWriteBits: argument 0"}
!404 = !{!405}
!405 = distinct !{!405, !406, !"BrotliWriteBits: argument 1"}
!406 = distinct !{!406, !"BrotliWriteBits"}
!407 = !{!408}
!408 = distinct !{!408, !406, !"BrotliWriteBits: argument 0"}
!409 = !{!410}
!410 = distinct !{!410, !411, !"BrotliWriteBits: argument 1"}
!411 = distinct !{!411, !"BrotliWriteBits"}
!412 = !{!413}
!413 = distinct !{!413, !411, !"BrotliWriteBits: argument 0"}
!414 = !{!415}
!415 = distinct !{!415, !416, !"BrotliWriteBits: argument 1"}
!416 = distinct !{!416, !"BrotliWriteBits"}
!417 = !{!418}
!418 = distinct !{!418, !416, !"BrotliWriteBits: argument 0"}
!419 = !{!420}
!420 = distinct !{!420, !421, !"BrotliWriteBits: argument 1"}
!421 = distinct !{!421, !"BrotliWriteBits"}
!422 = !{!423}
!423 = distinct !{!423, !421, !"BrotliWriteBits: argument 0"}
!424 = !{!425}
!425 = distinct !{!425, !426, !"BrotliWriteBits: argument 0"}
!426 = distinct !{!426, !"BrotliWriteBits"}
!427 = !{!428}
!428 = distinct !{!428, !426, !"BrotliWriteBits: argument 1"}
!429 = !{!430}
!430 = distinct !{!430, !431, !"BrotliWriteBits: argument 1"}
!431 = distinct !{!431, !"BrotliWriteBits"}
!432 = !{!433}
!433 = distinct !{!433, !431, !"BrotliWriteBits: argument 0"}
!434 = !{!435}
!435 = distinct !{!435, !436, !"BrotliWriteBits: argument 0"}
!436 = distinct !{!436, !"BrotliWriteBits"}
!437 = !{!438}
!438 = distinct !{!438, !436, !"BrotliWriteBits: argument 1"}
!439 = !{!440}
!440 = distinct !{!440, !441, !"BrotliWriteBits: argument 1"}
!441 = distinct !{!441, !"BrotliWriteBits"}
!442 = !{!443}
!443 = distinct !{!443, !441, !"BrotliWriteBits: argument 0"}
!444 = !{!445}
!445 = distinct !{!445, !446, !"BrotliWriteBits: argument 0"}
!446 = distinct !{!446, !"BrotliWriteBits"}
!447 = !{!448}
!448 = distinct !{!448, !446, !"BrotliWriteBits: argument 1"}
!449 = !{!450}
!450 = distinct !{!450, !451, !"BrotliWriteBits: argument 1"}
!451 = distinct !{!451, !"BrotliWriteBits"}
!452 = !{!453}
!453 = distinct !{!453, !451, !"BrotliWriteBits: argument 0"}
!454 = !{!455}
!455 = distinct !{!455, !456, !"BrotliWriteBits: argument 1"}
!456 = distinct !{!456, !"BrotliWriteBits"}
!457 = !{!458}
!458 = distinct !{!458, !456, !"BrotliWriteBits: argument 0"}
!459 = !{!460}
!460 = distinct !{!460, !461, !"BrotliWriteBits: argument 1"}
!461 = distinct !{!461, !"BrotliWriteBits"}
!462 = !{!463}
!463 = distinct !{!463, !461, !"BrotliWriteBits: argument 0"}
!464 = !{!465}
!465 = distinct !{!465, !466, !"BrotliWriteBits: argument 1"}
!466 = distinct !{!466, !"BrotliWriteBits"}
!467 = !{!468}
!468 = distinct !{!468, !466, !"BrotliWriteBits: argument 0"}
!469 = !{!470}
!470 = distinct !{!470, !471, !"BrotliWriteBits: argument 1"}
!471 = distinct !{!471, !"BrotliWriteBits"}
!472 = !{!473}
!473 = distinct !{!473, !471, !"BrotliWriteBits: argument 0"}
!474 = !{!475}
!475 = distinct !{!475, !476, !"BrotliWriteBits: argument 0"}
!476 = distinct !{!476, !"BrotliWriteBits"}
!477 = !{!478}
!478 = distinct !{!478, !476, !"BrotliWriteBits: argument 1"}
!479 = !{!480}
!480 = distinct !{!480, !481, !"BrotliWriteBits: argument 1"}
!481 = distinct !{!481, !"BrotliWriteBits"}
!482 = !{!483}
!483 = distinct !{!483, !481, !"BrotliWriteBits: argument 0"}
!484 = !{!485}
!485 = distinct !{!485, !486, !"BrotliWriteBits: argument 0"}
!486 = distinct !{!486, !"BrotliWriteBits"}
!487 = !{!488}
!488 = distinct !{!488, !486, !"BrotliWriteBits: argument 1"}
!489 = !{!490}
!490 = distinct !{!490, !491, !"BrotliWriteBits: argument 1"}
!491 = distinct !{!491, !"BrotliWriteBits"}
!492 = !{!493}
!493 = distinct !{!493, !491, !"BrotliWriteBits: argument 0"}
!494 = !{!495}
!495 = distinct !{!495, !496, !"BrotliWriteBits: argument 0"}
!496 = distinct !{!496, !"BrotliWriteBits"}
!497 = !{!498}
!498 = distinct !{!498, !496, !"BrotliWriteBits: argument 1"}
!499 = !{!500}
!500 = distinct !{!500, !501, !"BrotliWriteBits: argument 1"}
!501 = distinct !{!501, !"BrotliWriteBits"}
!502 = !{!503}
!503 = distinct !{!503, !501, !"BrotliWriteBits: argument 0"}
!504 = !{!505}
!505 = distinct !{!505, !506, !"BrotliWriteBits: argument 1"}
!506 = distinct !{!506, !"BrotliWriteBits"}
!507 = !{!508}
!508 = distinct !{!508, !506, !"BrotliWriteBits: argument 0"}
!509 = !{!510}
!510 = distinct !{!510, !511, !"BrotliWriteBits: argument 1"}
!511 = distinct !{!511, !"BrotliWriteBits"}
!512 = !{!513}
!513 = distinct !{!513, !511, !"BrotliWriteBits: argument 0"}
!514 = !{!515}
!515 = distinct !{!515, !516, !"BrotliWriteBits: argument 1"}
!516 = distinct !{!516, !"BrotliWriteBits"}
!517 = !{!518}
!518 = distinct !{!518, !516, !"BrotliWriteBits: argument 0"}
!519 = !{!520}
!520 = distinct !{!520, !521, !"BrotliWriteBits: argument 1"}
!521 = distinct !{!521, !"BrotliWriteBits"}
!522 = !{!523}
!523 = distinct !{!523, !521, !"BrotliWriteBits: argument 0"}
!524 = !{!525}
!525 = distinct !{!525, !526, !"BrotliWriteBits: argument 1"}
!526 = distinct !{!526, !"BrotliWriteBits"}
!527 = !{!528}
!528 = distinct !{!528, !526, !"BrotliWriteBits: argument 0"}
!529 = !{!530}
!530 = distinct !{!530, !531, !"BrotliWriteBits: argument 1"}
!531 = distinct !{!531, !"BrotliWriteBits"}
!532 = !{!533}
!533 = distinct !{!533, !531, !"BrotliWriteBits: argument 0"}
!534 = !{!535}
!535 = distinct !{!535, !536, !"BrotliWriteBits: argument 1"}
!536 = distinct !{!536, !"BrotliWriteBits"}
!537 = !{!538}
!538 = distinct !{!538, !536, !"BrotliWriteBits: argument 0"}
!539 = !{!540}
!540 = distinct !{!540, !541, !"BrotliWriteBits: argument 1"}
!541 = distinct !{!541, !"BrotliWriteBits"}
!542 = !{!543}
!543 = distinct !{!543, !541, !"BrotliWriteBits: argument 0"}
!544 = !{!545}
!545 = distinct !{!545, !546, !"BrotliWriteBits: argument 1"}
!546 = distinct !{!546, !"BrotliWriteBits"}
!547 = !{!548}
!548 = distinct !{!548, !546, !"BrotliWriteBits: argument 0"}
!549 = !{!550}
!550 = distinct !{!550, !551, !"BrotliWriteBits: argument 1"}
!551 = distinct !{!551, !"BrotliWriteBits"}
!552 = !{!553}
!553 = distinct !{!553, !551, !"BrotliWriteBits: argument 0"}
!554 = !{!555}
!555 = distinct !{!555, !556, !"BrotliWriteBits: argument 1"}
!556 = distinct !{!556, !"BrotliWriteBits"}
!557 = !{!558}
!558 = distinct !{!558, !556, !"BrotliWriteBits: argument 0"}
!559 = !{!560}
!560 = distinct !{!560, !561, !"BrotliWriteBits: argument 1"}
!561 = distinct !{!561, !"BrotliWriteBits"}
!562 = !{!563}
!563 = distinct !{!563, !561, !"BrotliWriteBits: argument 0"}
!564 = !{!565}
!565 = distinct !{!565, !566, !"BrotliWriteBits: argument 1"}
!566 = distinct !{!566, !"BrotliWriteBits"}
!567 = !{!568}
!568 = distinct !{!568, !566, !"BrotliWriteBits: argument 0"}
!569 = !{!570}
!570 = distinct !{!570, !571, !"BrotliWriteBits: argument 1"}
!571 = distinct !{!571, !"BrotliWriteBits"}
!572 = !{!573}
!573 = distinct !{!573, !571, !"BrotliWriteBits: argument 0"}
!574 = !{!575}
!575 = distinct !{!575, !576, !"BrotliWriteBits: argument 1"}
!576 = distinct !{!576, !"BrotliWriteBits"}
!577 = !{!578}
!578 = distinct !{!578, !576, !"BrotliWriteBits: argument 0"}
!579 = !{!580}
!580 = distinct !{!580, !581, !"BrotliWriteBits: argument 0"}
!581 = distinct !{!581, !"BrotliWriteBits"}
!582 = !{!583}
!583 = distinct !{!583, !581, !"BrotliWriteBits: argument 1"}
!584 = !{!585}
!585 = distinct !{!585, !586, !"BrotliWriteBits: argument 0"}
!586 = distinct !{!586, !"BrotliWriteBits"}
!587 = !{!588}
!588 = distinct !{!588, !586, !"BrotliWriteBits: argument 1"}
!589 = !{!590}
!590 = distinct !{!590, !591, !"BrotliWriteBits: argument 1"}
!591 = distinct !{!591, !"BrotliWriteBits"}
!592 = !{!593}
!593 = distinct !{!593, !591, !"BrotliWriteBits: argument 0"}
!594 = !{!595}
!595 = distinct !{!595, !596, !"BrotliWriteBits: argument 0"}
!596 = distinct !{!596, !"BrotliWriteBits"}
!597 = !{!598}
!598 = distinct !{!598, !596, !"BrotliWriteBits: argument 1"}
!599 = !{!600}
!600 = distinct !{!600, !601, !"BrotliWriteBits: argument 1"}
!601 = distinct !{!601, !"BrotliWriteBits"}
!602 = !{!603}
!603 = distinct !{!603, !601, !"BrotliWriteBits: argument 0"}
!604 = !{!605}
!605 = distinct !{!605, !606, !"BrotliWriteBits: argument 0"}
!606 = distinct !{!606, !"BrotliWriteBits"}
!607 = !{!608}
!608 = distinct !{!608, !606, !"BrotliWriteBits: argument 1"}
!609 = !{!610}
!610 = distinct !{!610, !611, !"BrotliWriteBits: argument 1"}
!611 = distinct !{!611, !"BrotliWriteBits"}
!612 = !{!613}
!613 = distinct !{!613, !611, !"BrotliWriteBits: argument 0"}
!614 = !{!615}
!615 = distinct !{!615, !616, !"BrotliWriteBits: argument 1"}
!616 = distinct !{!616, !"BrotliWriteBits"}
!617 = !{!618}
!618 = distinct !{!618, !616, !"BrotliWriteBits: argument 0"}
!619 = !{!620}
!620 = distinct !{!620, !621, !"BrotliWriteBits: argument 1"}
!621 = distinct !{!621, !"BrotliWriteBits"}
!622 = !{!623}
!623 = distinct !{!623, !621, !"BrotliWriteBits: argument 0"}
!624 = !{!625}
!625 = distinct !{!625, !626, !"BrotliWriteBits: argument 0"}
!626 = distinct !{!626, !"BrotliWriteBits"}
!627 = !{!628}
!628 = distinct !{!628, !626, !"BrotliWriteBits: argument 1"}
!629 = !{!630}
!630 = distinct !{!630, !631, !"BrotliWriteBits: argument 1"}
!631 = distinct !{!631, !"BrotliWriteBits"}
!632 = !{!633}
!633 = distinct !{!633, !631, !"BrotliWriteBits: argument 0"}
!634 = !{!635}
!635 = distinct !{!635, !636, !"BrotliWriteBits: argument 0"}
!636 = distinct !{!636, !"BrotliWriteBits"}
!637 = !{!638}
!638 = distinct !{!638, !636, !"BrotliWriteBits: argument 1"}
!639 = !{!640}
!640 = distinct !{!640, !641, !"BrotliWriteBits: argument 1"}
!641 = distinct !{!641, !"BrotliWriteBits"}
!642 = !{!643}
!643 = distinct !{!643, !641, !"BrotliWriteBits: argument 0"}
!644 = !{!645}
!645 = distinct !{!645, !646, !"BrotliWriteBits: argument 0"}
!646 = distinct !{!646, !"BrotliWriteBits"}
!647 = !{!648}
!648 = distinct !{!648, !646, !"BrotliWriteBits: argument 1"}
!649 = !{!650}
!650 = distinct !{!650, !651, !"BrotliWriteBits: argument 1"}
!651 = distinct !{!651, !"BrotliWriteBits"}
!652 = !{!653}
!653 = distinct !{!653, !651, !"BrotliWriteBits: argument 0"}
!654 = !{!655}
!655 = distinct !{!655, !656, !"BrotliWriteBits: argument 0"}
!656 = distinct !{!656, !"BrotliWriteBits"}
!657 = !{!658}
!658 = distinct !{!658, !656, !"BrotliWriteBits: argument 1"}
!659 = !{!660}
!660 = distinct !{!660, !661, !"BrotliWriteBits: argument 1"}
!661 = distinct !{!661, !"BrotliWriteBits"}
!662 = !{!663}
!663 = distinct !{!663, !661, !"BrotliWriteBits: argument 0"}
!664 = !{!665}
!665 = distinct !{!665, !666, !"BrotliWriteBits: argument 1"}
!666 = distinct !{!666, !"BrotliWriteBits"}
!667 = !{!668}
!668 = distinct !{!668, !666, !"BrotliWriteBits: argument 0"}
!669 = !{!670}
!670 = distinct !{!670, !671, !"BrotliWriteBits: argument 1"}
!671 = distinct !{!671, !"BrotliWriteBits"}
!672 = !{!673}
!673 = distinct !{!673, !671, !"BrotliWriteBits: argument 0"}
!674 = !{!675}
!675 = distinct !{!675, !676, !"BrotliWriteBits: argument 1"}
!676 = distinct !{!676, !"BrotliWriteBits"}
!677 = !{!678}
!678 = distinct !{!678, !676, !"BrotliWriteBits: argument 0"}
!679 = !{!680}
!680 = distinct !{!680, !681, !"BrotliWriteBits: argument 1"}
!681 = distinct !{!681, !"BrotliWriteBits"}
!682 = !{!683}
!683 = distinct !{!683, !681, !"BrotliWriteBits: argument 0"}
!684 = !{!685}
!685 = distinct !{!685, !686, !"BrotliWriteBits: argument 0"}
!686 = distinct !{!686, !"BrotliWriteBits"}
!687 = !{!688}
!688 = distinct !{!688, !686, !"BrotliWriteBits: argument 1"}
!689 = !{!690}
!690 = distinct !{!690, !691, !"BrotliWriteBits: argument 1"}
!691 = distinct !{!691, !"BrotliWriteBits"}
!692 = !{!693}
!693 = distinct !{!693, !691, !"BrotliWriteBits: argument 0"}
!694 = !{!695}
!695 = distinct !{!695, !696, !"BrotliWriteBits: argument 0"}
!696 = distinct !{!696, !"BrotliWriteBits"}
!697 = !{!698}
!698 = distinct !{!698, !696, !"BrotliWriteBits: argument 1"}
!699 = !{!700}
!700 = distinct !{!700, !701, !"BrotliWriteBits: argument 1"}
!701 = distinct !{!701, !"BrotliWriteBits"}
!702 = !{!703}
!703 = distinct !{!703, !701, !"BrotliWriteBits: argument 0"}
!704 = !{!705}
!705 = distinct !{!705, !706, !"BrotliWriteBits: argument 1"}
!706 = distinct !{!706, !"BrotliWriteBits"}
!707 = !{!708}
!708 = distinct !{!708, !706, !"BrotliWriteBits: argument 0"}
!709 = !{!710}
!710 = distinct !{!710, !711, !"BrotliWriteBits: argument 1"}
!711 = distinct !{!711, !"BrotliWriteBits"}
!712 = !{!713}
!713 = distinct !{!713, !711, !"BrotliWriteBits: argument 0"}
!714 = !{!715}
!715 = distinct !{!715, !716, !"BrotliWriteBits: argument 1"}
!716 = distinct !{!716, !"BrotliWriteBits"}
!717 = !{!718}
!718 = distinct !{!718, !716, !"BrotliWriteBits: argument 0"}
!719 = !{!720}
!720 = distinct !{!720, !721, !"BrotliWriteBits: argument 1"}
!721 = distinct !{!721, !"BrotliWriteBits"}
!722 = !{!723}
!723 = distinct !{!723, !721, !"BrotliWriteBits: argument 0"}
!724 = !{!725}
!725 = distinct !{!725, !726, !"BrotliWriteBits: argument 1"}
!726 = distinct !{!726, !"BrotliWriteBits"}
!727 = !{!728}
!728 = distinct !{!728, !726, !"BrotliWriteBits: argument 0"}
!729 = !{!730}
!730 = distinct !{!730, !731, !"BrotliWriteBits: argument 1"}
!731 = distinct !{!731, !"BrotliWriteBits"}
!732 = !{!733}
!733 = distinct !{!733, !731, !"BrotliWriteBits: argument 0"}
!734 = !{!735}
!735 = distinct !{!735, !736, !"BrotliWriteBits: argument 1"}
!736 = distinct !{!736, !"BrotliWriteBits"}
!737 = !{!738}
!738 = distinct !{!738, !736, !"BrotliWriteBits: argument 0"}
!739 = !{!740}
!740 = distinct !{!740, !741, !"BrotliWriteBits: argument 1"}
!741 = distinct !{!741, !"BrotliWriteBits"}
!742 = !{!743}
!743 = distinct !{!743, !741, !"BrotliWriteBits: argument 0"}
!744 = !{!745}
!745 = distinct !{!745, !746, !"BrotliWriteBits: argument 1"}
!746 = distinct !{!746, !"BrotliWriteBits"}
!747 = !{!748}
!748 = distinct !{!748, !746, !"BrotliWriteBits: argument 0"}
!749 = !{!750}
!750 = distinct !{!750, !751, !"BrotliWriteBits: argument 1"}
!751 = distinct !{!751, !"BrotliWriteBits"}
!752 = !{!753}
!753 = distinct !{!753, !751, !"BrotliWriteBits: argument 0"}
!754 = !{!755}
!755 = distinct !{!755, !756, !"BrotliWriteBits: argument 1"}
!756 = distinct !{!756, !"BrotliWriteBits"}
!757 = !{!758}
!758 = distinct !{!758, !756, !"BrotliWriteBits: argument 0"}
!759 = !{!760}
!760 = distinct !{!760, !761, !"BrotliWriteBits: argument 1"}
!761 = distinct !{!761, !"BrotliWriteBits"}
!762 = !{!763}
!763 = distinct !{!763, !761, !"BrotliWriteBits: argument 0"}
!764 = !{!765}
!765 = distinct !{!765, !766, !"BrotliWriteBits: argument 1"}
!766 = distinct !{!766, !"BrotliWriteBits"}
!767 = !{!768}
!768 = distinct !{!768, !766, !"BrotliWriteBits: argument 0"}
!769 = !{!770}
!770 = distinct !{!770, !771, !"BrotliWriteBits: argument 0"}
!771 = distinct !{!771, !"BrotliWriteBits"}
!772 = !{!773}
!773 = distinct !{!773, !771, !"BrotliWriteBits: argument 1"}
!774 = !{!775}
!775 = distinct !{!775, !776, !"BrotliWriteBits: argument 1"}
!776 = distinct !{!776, !"BrotliWriteBits"}
!777 = !{!778}
!778 = distinct !{!778, !776, !"BrotliWriteBits: argument 0"}
!779 = !{!780}
!780 = distinct !{!780, !781, !"BrotliWriteBits: argument 0"}
!781 = distinct !{!781, !"BrotliWriteBits"}
!782 = !{!783}
!783 = distinct !{!783, !781, !"BrotliWriteBits: argument 1"}
!784 = !{!785}
!785 = distinct !{!785, !786, !"BrotliWriteBits: argument 1"}
!786 = distinct !{!786, !"BrotliWriteBits"}
!787 = !{!788}
!788 = distinct !{!788, !786, !"BrotliWriteBits: argument 0"}
!789 = !{!790}
!790 = distinct !{!790, !791, !"BrotliWriteBits: argument 0"}
!791 = distinct !{!791, !"BrotliWriteBits"}
!792 = !{!793}
!793 = distinct !{!793, !791, !"BrotliWriteBits: argument 1"}
!794 = !{!795}
!795 = distinct !{!795, !796, !"BrotliWriteBits: argument 1"}
!796 = distinct !{!796, !"BrotliWriteBits"}
!797 = !{!798}
!798 = distinct !{!798, !796, !"BrotliWriteBits: argument 0"}
!799 = !{!800}
!800 = distinct !{!800, !801, !"BrotliWriteBits: argument 1"}
!801 = distinct !{!801, !"BrotliWriteBits"}
!802 = !{!803}
!803 = distinct !{!803, !801, !"BrotliWriteBits: argument 0"}
!804 = !{!805}
!805 = distinct !{!805, !806, !"BrotliWriteBits: argument 1"}
!806 = distinct !{!806, !"BrotliWriteBits"}
!807 = !{!808}
!808 = distinct !{!808, !806, !"BrotliWriteBits: argument 0"}
!809 = !{!810}
!810 = distinct !{!810, !811, !"BrotliWriteBits: argument 1"}
!811 = distinct !{!811, !"BrotliWriteBits"}
!812 = !{!813}
!813 = distinct !{!813, !811, !"BrotliWriteBits: argument 0"}
!814 = !{!815}
!815 = distinct !{!815, !816, !"BrotliWriteBits: argument 1"}
!816 = distinct !{!816, !"BrotliWriteBits"}
!817 = !{!818}
!818 = distinct !{!818, !816, !"BrotliWriteBits: argument 0"}
!819 = !{!820}
!820 = distinct !{!820, !821, !"BrotliWriteBits: argument 0"}
!821 = distinct !{!821, !"BrotliWriteBits"}
!822 = !{!823}
!823 = distinct !{!823, !821, !"BrotliWriteBits: argument 1"}
!824 = !{!825}
!825 = distinct !{!825, !826, !"BrotliWriteBits: argument 1"}
!826 = distinct !{!826, !"BrotliWriteBits"}
!827 = !{!828}
!828 = distinct !{!828, !826, !"BrotliWriteBits: argument 0"}
!829 = !{!830}
!830 = distinct !{!830, !831, !"BrotliWriteBits: argument 0"}
!831 = distinct !{!831, !"BrotliWriteBits"}
!832 = !{!833}
!833 = distinct !{!833, !831, !"BrotliWriteBits: argument 1"}
!834 = !{!835}
!835 = distinct !{!835, !836, !"BrotliWriteBits: argument 1"}
!836 = distinct !{!836, !"BrotliWriteBits"}
!837 = !{!838}
!838 = distinct !{!838, !836, !"BrotliWriteBits: argument 0"}
!839 = !{!840}
!840 = distinct !{!840, !841, !"BrotliWriteBits: argument 0"}
!841 = distinct !{!841, !"BrotliWriteBits"}
!842 = !{!843}
!843 = distinct !{!843, !841, !"BrotliWriteBits: argument 1"}
!844 = !{!845}
!845 = distinct !{!845, !846, !"BrotliWriteBits: argument 1"}
!846 = distinct !{!846, !"BrotliWriteBits"}
!847 = !{!848}
!848 = distinct !{!848, !846, !"BrotliWriteBits: argument 0"}
!849 = !{!850}
!850 = distinct !{!850, !851, !"BrotliWriteBits: argument 1"}
!851 = distinct !{!851, !"BrotliWriteBits"}
!852 = !{!853}
!853 = distinct !{!853, !851, !"BrotliWriteBits: argument 0"}
!854 = !{!855}
!855 = distinct !{!855, !856, !"BrotliWriteBits: argument 1"}
!856 = distinct !{!856, !"BrotliWriteBits"}
!857 = !{!858}
!858 = distinct !{!858, !856, !"BrotliWriteBits: argument 0"}
!859 = !{!860}
!860 = distinct !{!860, !861, !"BrotliWriteBits: argument 1"}
!861 = distinct !{!861, !"BrotliWriteBits"}
!862 = !{!863}
!863 = distinct !{!863, !861, !"BrotliWriteBits: argument 0"}
!864 = !{!865}
!865 = distinct !{!865, !866, !"BrotliWriteBits: argument 1"}
!866 = distinct !{!866, !"BrotliWriteBits"}
!867 = !{!868}
!868 = distinct !{!868, !866, !"BrotliWriteBits: argument 0"}
!869 = !{!870}
!870 = distinct !{!870, !871, !"BrotliWriteBits: argument 1"}
!871 = distinct !{!871, !"BrotliWriteBits"}
!872 = !{!873}
!873 = distinct !{!873, !871, !"BrotliWriteBits: argument 0"}
!874 = !{!875}
!875 = distinct !{!875, !876, !"BrotliWriteBits: argument 1"}
!876 = distinct !{!876, !"BrotliWriteBits"}
!877 = !{!878}
!878 = distinct !{!878, !876, !"BrotliWriteBits: argument 0"}
!879 = !{!880}
!880 = distinct !{!880, !881, !"BrotliWriteBits: argument 1"}
!881 = distinct !{!881, !"BrotliWriteBits"}
!882 = !{!883}
!883 = distinct !{!883, !881, !"BrotliWriteBits: argument 0"}
!884 = !{!885}
!885 = distinct !{!885, !886, !"BrotliWriteBits: argument 1"}
!886 = distinct !{!886, !"BrotliWriteBits"}
!887 = !{!888}
!888 = distinct !{!888, !886, !"BrotliWriteBits: argument 0"}
!889 = !{!890}
!890 = distinct !{!890, !891, !"BrotliWriteBits: argument 1"}
!891 = distinct !{!891, !"BrotliWriteBits"}
!892 = !{!893}
!893 = distinct !{!893, !891, !"BrotliWriteBits: argument 0"}
!894 = !{!895}
!895 = distinct !{!895, !896, !"BrotliWriteBits: argument 1"}
!896 = distinct !{!896, !"BrotliWriteBits"}
!897 = !{!898}
!898 = distinct !{!898, !896, !"BrotliWriteBits: argument 0"}
!899 = !{!900}
!900 = distinct !{!900, !901, !"BrotliWriteBits: argument 1"}
!901 = distinct !{!901, !"BrotliWriteBits"}
!902 = !{!903}
!903 = distinct !{!903, !901, !"BrotliWriteBits: argument 0"}
!904 = !{!905}
!905 = distinct !{!905, !906, !"BrotliWriteBits: argument 1"}
!906 = distinct !{!906, !"BrotliWriteBits"}
!907 = !{!908}
!908 = distinct !{!908, !906, !"BrotliWriteBits: argument 0"}
!909 = !{!910}
!910 = distinct !{!910, !911, !"BrotliWriteBits: argument 1"}
!911 = distinct !{!911, !"BrotliWriteBits"}
!912 = !{!913}
!913 = distinct !{!913, !911, !"BrotliWriteBits: argument 0"}
!914 = !{!915}
!915 = distinct !{!915, !916, !"BrotliWriteBits: argument 1"}
!916 = distinct !{!916, !"BrotliWriteBits"}
!917 = !{!918}
!918 = distinct !{!918, !916, !"BrotliWriteBits: argument 0"}
!919 = !{!920}
!920 = distinct !{!920, !921, !"BrotliWriteBits: argument 1"}
!921 = distinct !{!921, !"BrotliWriteBits"}
!922 = !{!923}
!923 = distinct !{!923, !921, !"BrotliWriteBits: argument 0"}
!924 = !{!925}
!925 = distinct !{!925, !926, !"BrotliWriteBits: argument 0"}
!926 = distinct !{!926, !"BrotliWriteBits"}
!927 = !{!928}
!928 = distinct !{!928, !926, !"BrotliWriteBits: argument 1"}
!929 = !{!930}
!930 = distinct !{!930, !931, !"BrotliWriteBits: argument 0"}
!931 = distinct !{!931, !"BrotliWriteBits"}
!932 = !{!933}
!933 = distinct !{!933, !931, !"BrotliWriteBits: argument 1"}
!934 = !{!935}
!935 = distinct !{!935, !936, !"BrotliWriteBits: argument 1"}
!936 = distinct !{!936, !"BrotliWriteBits"}
!937 = !{!938}
!938 = distinct !{!938, !936, !"BrotliWriteBits: argument 0"}
!939 = !{!940}
!940 = distinct !{!940, !941, !"BrotliWriteBits: argument 0"}
!941 = distinct !{!941, !"BrotliWriteBits"}
!942 = !{!943}
!943 = distinct !{!943, !941, !"BrotliWriteBits: argument 1"}
!944 = !{!945}
!945 = distinct !{!945, !946, !"BrotliWriteBits: argument 1"}
!946 = distinct !{!946, !"BrotliWriteBits"}
!947 = !{!948}
!948 = distinct !{!948, !946, !"BrotliWriteBits: argument 0"}
!949 = !{!950}
!950 = distinct !{!950, !951, !"BrotliWriteBits: argument 0"}
!951 = distinct !{!951, !"BrotliWriteBits"}
!952 = !{!953}
!953 = distinct !{!953, !951, !"BrotliWriteBits: argument 1"}
!954 = !{!955}
!955 = distinct !{!955, !956, !"BrotliWriteBits: argument 1"}
!956 = distinct !{!956, !"BrotliWriteBits"}
!957 = !{!958}
!958 = distinct !{!958, !956, !"BrotliWriteBits: argument 0"}
!959 = !{!960}
!960 = distinct !{!960, !961, !"BrotliWriteBits: argument 1"}
!961 = distinct !{!961, !"BrotliWriteBits"}
!962 = !{!963}
!963 = distinct !{!963, !961, !"BrotliWriteBits: argument 0"}
!964 = !{!965}
!965 = distinct !{!965, !966, !"BrotliWriteBits: argument 1"}
!966 = distinct !{!966, !"BrotliWriteBits"}
!967 = !{!968}
!968 = distinct !{!968, !966, !"BrotliWriteBits: argument 0"}
!969 = !{!970}
!970 = distinct !{!970, !971, !"BrotliWriteBits: argument 0"}
!971 = distinct !{!971, !"BrotliWriteBits"}
!972 = !{!973}
!973 = distinct !{!973, !971, !"BrotliWriteBits: argument 1"}
!974 = !{!975}
!975 = distinct !{!975, !976, !"BrotliWriteBits: argument 1"}
!976 = distinct !{!976, !"BrotliWriteBits"}
!977 = !{!978}
!978 = distinct !{!978, !976, !"BrotliWriteBits: argument 0"}
!979 = !{!980}
!980 = distinct !{!980, !981, !"BrotliWriteBits: argument 0"}
!981 = distinct !{!981, !"BrotliWriteBits"}
!982 = !{!983}
!983 = distinct !{!983, !981, !"BrotliWriteBits: argument 1"}
!984 = !{!985}
!985 = distinct !{!985, !986, !"BrotliWriteBits: argument 1"}
!986 = distinct !{!986, !"BrotliWriteBits"}
!987 = !{!988}
!988 = distinct !{!988, !986, !"BrotliWriteBits: argument 0"}
!989 = !{!990}
!990 = distinct !{!990, !991, !"BrotliWriteBits: argument 0"}
!991 = distinct !{!991, !"BrotliWriteBits"}
!992 = !{!993}
!993 = distinct !{!993, !991, !"BrotliWriteBits: argument 1"}
!994 = !{!995}
!995 = distinct !{!995, !996, !"BrotliWriteBits: argument 1"}
!996 = distinct !{!996, !"BrotliWriteBits"}
!997 = !{!998}
!998 = distinct !{!998, !996, !"BrotliWriteBits: argument 0"}
!999 = !{!1000}
!1000 = distinct !{!1000, !1001, !"BrotliWriteBits: argument 0"}
!1001 = distinct !{!1001, !"BrotliWriteBits"}
!1002 = !{!1003}
!1003 = distinct !{!1003, !1001, !"BrotliWriteBits: argument 1"}
!1004 = !{!1005}
!1005 = distinct !{!1005, !1006, !"BrotliWriteBits: argument 1"}
!1006 = distinct !{!1006, !"BrotliWriteBits"}
!1007 = !{!1008}
!1008 = distinct !{!1008, !1006, !"BrotliWriteBits: argument 0"}
!1009 = !{!1010}
!1010 = distinct !{!1010, !1011, !"BrotliWriteBits: argument 1"}
!1011 = distinct !{!1011, !"BrotliWriteBits"}
!1012 = !{!1013}
!1013 = distinct !{!1013, !1011, !"BrotliWriteBits: argument 0"}
!1014 = !{!1015}
!1015 = distinct !{!1015, !1016, !"BrotliWriteBits: argument 1"}
!1016 = distinct !{!1016, !"BrotliWriteBits"}
!1017 = !{!1018}
!1018 = distinct !{!1018, !1016, !"BrotliWriteBits: argument 0"}
!1019 = !{!1020}
!1020 = distinct !{!1020, !1021, !"BrotliWriteBits: argument 1"}
!1021 = distinct !{!1021, !"BrotliWriteBits"}
!1022 = !{!1023}
!1023 = distinct !{!1023, !1021, !"BrotliWriteBits: argument 0"}
!1024 = !{!1025}
!1025 = distinct !{!1025, !1026, !"BrotliWriteBits: argument 1"}
!1026 = distinct !{!1026, !"BrotliWriteBits"}
!1027 = !{!1028}
!1028 = distinct !{!1028, !1026, !"BrotliWriteBits: argument 0"}
!1029 = !{!1030}
!1030 = distinct !{!1030, !1031, !"BrotliWriteBits: argument 0"}
!1031 = distinct !{!1031, !"BrotliWriteBits"}
!1032 = !{!1033}
!1033 = distinct !{!1033, !1031, !"BrotliWriteBits: argument 1"}
!1034 = !{!1035}
!1035 = distinct !{!1035, !1036, !"BrotliWriteBits: argument 1"}
!1036 = distinct !{!1036, !"BrotliWriteBits"}
!1037 = !{!1038}
!1038 = distinct !{!1038, !1036, !"BrotliWriteBits: argument 0"}
!1039 = !{!1040}
!1040 = distinct !{!1040, !1041, !"BrotliWriteBits: argument 0"}
!1041 = distinct !{!1041, !"BrotliWriteBits"}
!1042 = !{!1043}
!1043 = distinct !{!1043, !1041, !"BrotliWriteBits: argument 1"}
!1044 = !{!1045}
!1045 = distinct !{!1045, !1046, !"BrotliWriteBits: argument 1"}
!1046 = distinct !{!1046, !"BrotliWriteBits"}
!1047 = !{!1048}
!1048 = distinct !{!1048, !1046, !"BrotliWriteBits: argument 0"}
!1049 = !{!1050}
!1050 = distinct !{!1050, !1051, !"BrotliWriteBits: argument 1"}
!1051 = distinct !{!1051, !"BrotliWriteBits"}
!1052 = !{!1053}
!1053 = distinct !{!1053, !1051, !"BrotliWriteBits: argument 0"}
!1054 = !{!1055}
!1055 = distinct !{!1055, !1056, !"BrotliWriteBits: argument 1"}
!1056 = distinct !{!1056, !"BrotliWriteBits"}
!1057 = !{!1058}
!1058 = distinct !{!1058, !1056, !"BrotliWriteBits: argument 0"}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1061, !"BrotliWriteBits: argument 1"}
!1061 = distinct !{!1061, !"BrotliWriteBits"}
!1062 = !{!1063}
!1063 = distinct !{!1063, !1061, !"BrotliWriteBits: argument 0"}
!1064 = !{!1065}
!1065 = distinct !{!1065, !1066, !"BrotliWriteBits: argument 1"}
!1066 = distinct !{!1066, !"BrotliWriteBits"}
!1067 = !{!1068}
!1068 = distinct !{!1068, !1066, !"BrotliWriteBits: argument 0"}
!1069 = !{!1070}
!1070 = distinct !{!1070, !1071, !"BrotliWriteBits: argument 1"}
!1071 = distinct !{!1071, !"BrotliWriteBits"}
!1072 = !{!1073}
!1073 = distinct !{!1073, !1071, !"BrotliWriteBits: argument 0"}
!1074 = !{!1075}
!1075 = distinct !{!1075, !1076, !"BrotliWriteBits: argument 1"}
!1076 = distinct !{!1076, !"BrotliWriteBits"}
!1077 = !{!1078}
!1078 = distinct !{!1078, !1076, !"BrotliWriteBits: argument 0"}
!1079 = !{!1080}
!1080 = distinct !{!1080, !1081, !"BrotliWriteBits: argument 1"}
!1081 = distinct !{!1081, !"BrotliWriteBits"}
!1082 = !{!1083}
!1083 = distinct !{!1083, !1081, !"BrotliWriteBits: argument 0"}
!1084 = !{!1085}
!1085 = distinct !{!1085, !1086, !"BrotliWriteBits: argument 1"}
!1086 = distinct !{!1086, !"BrotliWriteBits"}
!1087 = !{!1088}
!1088 = distinct !{!1088, !1086, !"BrotliWriteBits: argument 0"}
!1089 = !{!1090}
!1090 = distinct !{!1090, !1091, !"BrotliWriteBits: argument 1"}
!1091 = distinct !{!1091, !"BrotliWriteBits"}
!1092 = !{!1093}
!1093 = distinct !{!1093, !1091, !"BrotliWriteBits: argument 0"}
!1094 = !{!1095}
!1095 = distinct !{!1095, !1096, !"BrotliWriteBits: argument 1"}
!1096 = distinct !{!1096, !"BrotliWriteBits"}
!1097 = !{!1098}
!1098 = distinct !{!1098, !1096, !"BrotliWriteBits: argument 0"}
!1099 = !{!1100}
!1100 = distinct !{!1100, !1101, !"BrotliWriteBits: argument 1"}
!1101 = distinct !{!1101, !"BrotliWriteBits"}
!1102 = !{!1103}
!1103 = distinct !{!1103, !1101, !"BrotliWriteBits: argument 0"}
!1104 = !{!1105}
!1105 = distinct !{!1105, !1106, !"BrotliWriteBits: argument 1"}
!1106 = distinct !{!1106, !"BrotliWriteBits"}
!1107 = !{!1108}
!1108 = distinct !{!1108, !1106, !"BrotliWriteBits: argument 0"}
!1109 = !{!1110}
!1110 = distinct !{!1110, !1111, !"BrotliWriteBits: argument 1"}
!1111 = distinct !{!1111, !"BrotliWriteBits"}
!1112 = !{!1113}
!1113 = distinct !{!1113, !1111, !"BrotliWriteBits: argument 0"}
!1114 = !{!1115}
!1115 = distinct !{!1115, !1116, !"BrotliWriteBits: argument 0"}
!1116 = distinct !{!1116, !"BrotliWriteBits"}
!1117 = !{!1118}
!1118 = distinct !{!1118, !1116, !"BrotliWriteBits: argument 1"}
!1119 = !{!1120}
!1120 = distinct !{!1120, !1121, !"BrotliWriteBits: argument 1"}
!1121 = distinct !{!1121, !"BrotliWriteBits"}
!1122 = !{!1123}
!1123 = distinct !{!1123, !1121, !"BrotliWriteBits: argument 0"}
!1124 = !{!1125}
!1125 = distinct !{!1125, !1126, !"BrotliWriteBits: argument 0"}
!1126 = distinct !{!1126, !"BrotliWriteBits"}
!1127 = !{!1128}
!1128 = distinct !{!1128, !1126, !"BrotliWriteBits: argument 1"}
!1129 = !{!1130}
!1130 = distinct !{!1130, !1131, !"BrotliWriteBits: argument 1"}
!1131 = distinct !{!1131, !"BrotliWriteBits"}
!1132 = !{!1133}
!1133 = distinct !{!1133, !1131, !"BrotliWriteBits: argument 0"}
!1134 = !{!1135}
!1135 = distinct !{!1135, !1136, !"BrotliWriteBits: argument 0"}
!1136 = distinct !{!1136, !"BrotliWriteBits"}
!1137 = !{!1138}
!1138 = distinct !{!1138, !1136, !"BrotliWriteBits: argument 1"}
!1139 = !{!1140}
!1140 = distinct !{!1140, !1141, !"BrotliWriteBits: argument 1"}
!1141 = distinct !{!1141, !"BrotliWriteBits"}
!1142 = !{!1143}
!1143 = distinct !{!1143, !1141, !"BrotliWriteBits: argument 0"}
!1144 = !{!1145}
!1145 = distinct !{!1145, !1146, !"BrotliWriteBits: argument 1"}
!1146 = distinct !{!1146, !"BrotliWriteBits"}
!1147 = !{!1148}
!1148 = distinct !{!1148, !1146, !"BrotliWriteBits: argument 0"}
!1149 = !{!1150}
!1150 = distinct !{!1150, !1151, !"BrotliWriteBits: argument 1"}
!1151 = distinct !{!1151, !"BrotliWriteBits"}
!1152 = !{!1153}
!1153 = distinct !{!1153, !1151, !"BrotliWriteBits: argument 0"}
!1154 = !{!1155}
!1155 = distinct !{!1155, !1156, !"BrotliWriteBits: argument 1"}
!1156 = distinct !{!1156, !"BrotliWriteBits"}
!1157 = !{!1158}
!1158 = distinct !{!1158, !1156, !"BrotliWriteBits: argument 0"}
!1159 = !{!1160}
!1160 = distinct !{!1160, !1161, !"BrotliWriteBits: argument 1"}
!1161 = distinct !{!1161, !"BrotliWriteBits"}
!1162 = !{!1163}
!1163 = distinct !{!1163, !1161, !"BrotliWriteBits: argument 0"}
!1164 = !{!1165}
!1165 = distinct !{!1165, !1166, !"BrotliWriteBits: argument 0"}
!1166 = distinct !{!1166, !"BrotliWriteBits"}
!1167 = !{!1168}
!1168 = distinct !{!1168, !1166, !"BrotliWriteBits: argument 1"}
!1169 = !{!1170}
!1170 = distinct !{!1170, !1171, !"BrotliWriteBits: argument 1"}
!1171 = distinct !{!1171, !"BrotliWriteBits"}
!1172 = !{!1173}
!1173 = distinct !{!1173, !1171, !"BrotliWriteBits: argument 0"}
!1174 = !{!1175}
!1175 = distinct !{!1175, !1176, !"BrotliWriteBits: argument 0"}
!1176 = distinct !{!1176, !"BrotliWriteBits"}
!1177 = !{!1178}
!1178 = distinct !{!1178, !1176, !"BrotliWriteBits: argument 1"}
!1179 = !{!1180}
!1180 = distinct !{!1180, !1181, !"BrotliWriteBits: argument 1"}
!1181 = distinct !{!1181, !"BrotliWriteBits"}
!1182 = !{!1183}
!1183 = distinct !{!1183, !1181, !"BrotliWriteBits: argument 0"}
!1184 = !{!1185}
!1185 = distinct !{!1185, !1186, !"BrotliWriteBits: argument 0"}
!1186 = distinct !{!1186, !"BrotliWriteBits"}
!1187 = !{!1188}
!1188 = distinct !{!1188, !1186, !"BrotliWriteBits: argument 1"}
!1189 = !{!1190}
!1190 = distinct !{!1190, !1191, !"BrotliWriteBits: argument 1"}
!1191 = distinct !{!1191, !"BrotliWriteBits"}
!1192 = !{!1193}
!1193 = distinct !{!1193, !1191, !"BrotliWriteBits: argument 0"}
!1194 = !{!1195}
!1195 = distinct !{!1195, !1196, !"BrotliWriteBits: argument 1"}
!1196 = distinct !{!1196, !"BrotliWriteBits"}
!1197 = !{!1198}
!1198 = distinct !{!1198, !1196, !"BrotliWriteBits: argument 0"}
!1199 = !{!1200}
!1200 = distinct !{!1200, !1201, !"BrotliWriteBits: argument 1"}
!1201 = distinct !{!1201, !"BrotliWriteBits"}
!1202 = !{!1203}
!1203 = distinct !{!1203, !1201, !"BrotliWriteBits: argument 0"}
!1204 = !{!1205}
!1205 = distinct !{!1205, !1206, !"BrotliWriteBits: argument 1"}
!1206 = distinct !{!1206, !"BrotliWriteBits"}
!1207 = !{!1208}
!1208 = distinct !{!1208, !1206, !"BrotliWriteBits: argument 0"}
!1209 = !{!1210}
!1210 = distinct !{!1210, !1211, !"BrotliWriteBits: argument 1"}
!1211 = distinct !{!1211, !"BrotliWriteBits"}
!1212 = !{!1213}
!1213 = distinct !{!1213, !1211, !"BrotliWriteBits: argument 0"}
!1214 = !{!1215}
!1215 = distinct !{!1215, !1216, !"BrotliWriteBits: argument 1"}
!1216 = distinct !{!1216, !"BrotliWriteBits"}
!1217 = !{!1218}
!1218 = distinct !{!1218, !1216, !"BrotliWriteBits: argument 0"}
!1219 = !{!1220}
!1220 = distinct !{!1220, !1221, !"BrotliWriteBits: argument 1"}
!1221 = distinct !{!1221, !"BrotliWriteBits"}
!1222 = !{!1223}
!1223 = distinct !{!1223, !1221, !"BrotliWriteBits: argument 0"}
!1224 = !{!1225}
!1225 = distinct !{!1225, !1226, !"BrotliWriteBits: argument 1"}
!1226 = distinct !{!1226, !"BrotliWriteBits"}
!1227 = !{!1228}
!1228 = distinct !{!1228, !1226, !"BrotliWriteBits: argument 0"}
!1229 = !{!1230}
!1230 = distinct !{!1230, !1231, !"BrotliWriteBits: argument 1"}
!1231 = distinct !{!1231, !"BrotliWriteBits"}
!1232 = !{!1233}
!1233 = distinct !{!1233, !1231, !"BrotliWriteBits: argument 0"}
!1234 = !{!1235}
!1235 = distinct !{!1235, !1236, !"BrotliWriteBits: argument 1"}
!1236 = distinct !{!1236, !"BrotliWriteBits"}
!1237 = !{!1238}
!1238 = distinct !{!1238, !1236, !"BrotliWriteBits: argument 0"}
!1239 = !{!1240}
!1240 = distinct !{!1240, !1241, !"BrotliWriteBits: argument 1"}
!1241 = distinct !{!1241, !"BrotliWriteBits"}
!1242 = !{!1243}
!1243 = distinct !{!1243, !1241, !"BrotliWriteBits: argument 0"}
!1244 = !{!1245}
!1245 = distinct !{!1245, !1246, !"BrotliWriteBits: argument 1"}
!1246 = distinct !{!1246, !"BrotliWriteBits"}
!1247 = !{!1248}
!1248 = distinct !{!1248, !1246, !"BrotliWriteBits: argument 0"}
!1249 = !{!1250}
!1250 = distinct !{!1250, !1251, !"BrotliWriteBits: argument 1"}
!1251 = distinct !{!1251, !"BrotliWriteBits"}
!1252 = !{!1253}
!1253 = distinct !{!1253, !1251, !"BrotliWriteBits: argument 0"}
!1254 = !{!1255}
!1255 = distinct !{!1255, !1256, !"BrotliWriteBits: argument 1"}
!1256 = distinct !{!1256, !"BrotliWriteBits"}
!1257 = !{!1258}
!1258 = distinct !{!1258, !1256, !"BrotliWriteBits: argument 0"}
!1259 = !{!1260}
!1260 = distinct !{!1260, !1261, !"BrotliWriteBits: argument 1"}
!1261 = distinct !{!1261, !"BrotliWriteBits"}
!1262 = !{!1263}
!1263 = distinct !{!1263, !1261, !"BrotliWriteBits: argument 0"}
!1264 = !{!1265}
!1265 = distinct !{!1265, !1266, !"BrotliWriteBits: argument 1"}
!1266 = distinct !{!1266, !"BrotliWriteBits"}
!1267 = !{!1268}
!1268 = distinct !{!1268, !1266, !"BrotliWriteBits: argument 0"}
!1269 = !{!1270}
!1270 = distinct !{!1270, !1271, !"BrotliWriteBits: argument 0"}
!1271 = distinct !{!1271, !"BrotliWriteBits"}
!1272 = !{!1273}
!1273 = distinct !{!1273, !1271, !"BrotliWriteBits: argument 1"}
!1274 = !{!1275}
!1275 = distinct !{!1275, !1276, !"BrotliWriteBits: argument 0"}
!1276 = distinct !{!1276, !"BrotliWriteBits"}
!1277 = !{!1278}
!1278 = distinct !{!1278, !1276, !"BrotliWriteBits: argument 1"}
!1279 = !{!1280}
!1280 = distinct !{!1280, !1281, !"BrotliWriteBits: argument 1"}
!1281 = distinct !{!1281, !"BrotliWriteBits"}
!1282 = !{!1283}
!1283 = distinct !{!1283, !1281, !"BrotliWriteBits: argument 0"}
!1284 = !{!1285}
!1285 = distinct !{!1285, !1286, !"BrotliWriteBits: argument 0"}
!1286 = distinct !{!1286, !"BrotliWriteBits"}
!1287 = !{!1288}
!1288 = distinct !{!1288, !1286, !"BrotliWriteBits: argument 1"}
!1289 = !{!1290}
!1290 = distinct !{!1290, !1291, !"BrotliWriteBits: argument 1"}
!1291 = distinct !{!1291, !"BrotliWriteBits"}
!1292 = !{!1293}
!1293 = distinct !{!1293, !1291, !"BrotliWriteBits: argument 0"}
!1294 = !{!1295}
!1295 = distinct !{!1295, !1296, !"BrotliWriteBits: argument 0"}
!1296 = distinct !{!1296, !"BrotliWriteBits"}
!1297 = !{!1298}
!1298 = distinct !{!1298, !1296, !"BrotliWriteBits: argument 1"}
!1299 = !{!1300}
!1300 = distinct !{!1300, !1301, !"BrotliWriteBits: argument 1"}
!1301 = distinct !{!1301, !"BrotliWriteBits"}
!1302 = !{!1303}
!1303 = distinct !{!1303, !1301, !"BrotliWriteBits: argument 0"}
!1304 = !{!1305}
!1305 = distinct !{!1305, !1306, !"BrotliWriteBits: argument 1"}
!1306 = distinct !{!1306, !"BrotliWriteBits"}
!1307 = !{!1308}
!1308 = distinct !{!1308, !1306, !"BrotliWriteBits: argument 0"}
!1309 = !{!1310}
!1310 = distinct !{!1310, !1311, !"BrotliWriteBits: argument 1"}
!1311 = distinct !{!1311, !"BrotliWriteBits"}
!1312 = !{!1313}
!1313 = distinct !{!1313, !1311, !"BrotliWriteBits: argument 0"}
!1314 = !{!1315}
!1315 = distinct !{!1315, !1316, !"BrotliWriteBits: argument 0"}
!1316 = distinct !{!1316, !"BrotliWriteBits"}
!1317 = !{!1318}
!1318 = distinct !{!1318, !1316, !"BrotliWriteBits: argument 1"}
!1319 = !{!1320}
!1320 = distinct !{!1320, !1321, !"BrotliWriteBits: argument 1"}
!1321 = distinct !{!1321, !"BrotliWriteBits"}
!1322 = !{!1323}
!1323 = distinct !{!1323, !1321, !"BrotliWriteBits: argument 0"}
!1324 = !{!1325}
!1325 = distinct !{!1325, !1326, !"BrotliWriteBits: argument 0"}
!1326 = distinct !{!1326, !"BrotliWriteBits"}
!1327 = !{!1328}
!1328 = distinct !{!1328, !1326, !"BrotliWriteBits: argument 1"}
!1329 = !{!1330}
!1330 = distinct !{!1330, !1331, !"BrotliWriteBits: argument 1"}
!1331 = distinct !{!1331, !"BrotliWriteBits"}
!1332 = !{!1333}
!1333 = distinct !{!1333, !1331, !"BrotliWriteBits: argument 0"}
!1334 = !{!1335}
!1335 = distinct !{!1335, !1336, !"BrotliWriteBits: argument 0"}
!1336 = distinct !{!1336, !"BrotliWriteBits"}
!1337 = !{!1338}
!1338 = distinct !{!1338, !1336, !"BrotliWriteBits: argument 1"}
!1339 = !{!1340}
!1340 = distinct !{!1340, !1341, !"BrotliWriteBits: argument 1"}
!1341 = distinct !{!1341, !"BrotliWriteBits"}
!1342 = !{!1343}
!1343 = distinct !{!1343, !1341, !"BrotliWriteBits: argument 0"}
!1344 = !{!1345}
!1345 = distinct !{!1345, !1346, !"BrotliWriteBits: argument 0"}
!1346 = distinct !{!1346, !"BrotliWriteBits"}
!1347 = !{!1348}
!1348 = distinct !{!1348, !1346, !"BrotliWriteBits: argument 1"}
!1349 = !{!1350}
!1350 = distinct !{!1350, !1351, !"BrotliWriteBits: argument 1"}
!1351 = distinct !{!1351, !"BrotliWriteBits"}
!1352 = !{!1353}
!1353 = distinct !{!1353, !1351, !"BrotliWriteBits: argument 0"}
!1354 = !{!1355}
!1355 = distinct !{!1355, !1356, !"BrotliWriteBits: argument 1"}
!1356 = distinct !{!1356, !"BrotliWriteBits"}
!1357 = !{!1358}
!1358 = distinct !{!1358, !1356, !"BrotliWriteBits: argument 0"}
!1359 = !{!1360}
!1360 = distinct !{!1360, !1361, !"BrotliWriteBits: argument 1"}
!1361 = distinct !{!1361, !"BrotliWriteBits"}
!1362 = !{!1363}
!1363 = distinct !{!1363, !1361, !"BrotliWriteBits: argument 0"}
!1364 = !{!1365}
!1365 = distinct !{!1365, !1366, !"BrotliWriteBits: argument 1"}
!1366 = distinct !{!1366, !"BrotliWriteBits"}
!1367 = !{!1368}
!1368 = distinct !{!1368, !1366, !"BrotliWriteBits: argument 0"}
!1369 = !{!1370}
!1370 = distinct !{!1370, !1371, !"BrotliWriteBits: argument 1"}
!1371 = distinct !{!1371, !"BrotliWriteBits"}
!1372 = !{!1373}
!1373 = distinct !{!1373, !1371, !"BrotliWriteBits: argument 0"}
!1374 = !{!1375}
!1375 = distinct !{!1375, !1376, !"BrotliWriteBits: argument 0"}
!1376 = distinct !{!1376, !"BrotliWriteBits"}
!1377 = !{!1378}
!1378 = distinct !{!1378, !1376, !"BrotliWriteBits: argument 1"}
!1379 = !{!1380}
!1380 = distinct !{!1380, !1381, !"BrotliWriteBits: argument 1"}
!1381 = distinct !{!1381, !"BrotliWriteBits"}
!1382 = !{!1383}
!1383 = distinct !{!1383, !1381, !"BrotliWriteBits: argument 0"}
!1384 = !{!1385}
!1385 = distinct !{!1385, !1386, !"BrotliWriteBits: argument 0"}
!1386 = distinct !{!1386, !"BrotliWriteBits"}
!1387 = !{!1388}
!1388 = distinct !{!1388, !1386, !"BrotliWriteBits: argument 1"}
!1389 = !{!1390}
!1390 = distinct !{!1390, !1391, !"BrotliWriteBits: argument 1"}
!1391 = distinct !{!1391, !"BrotliWriteBits"}
!1392 = !{!1393}
!1393 = distinct !{!1393, !1391, !"BrotliWriteBits: argument 0"}
!1394 = !{!1395}
!1395 = distinct !{!1395, !1396, !"BrotliWriteBits: argument 1"}
!1396 = distinct !{!1396, !"BrotliWriteBits"}
!1397 = !{!1398}
!1398 = distinct !{!1398, !1396, !"BrotliWriteBits: argument 0"}
!1399 = !{!1400}
!1400 = distinct !{!1400, !1401, !"BrotliWriteBits: argument 1"}
!1401 = distinct !{!1401, !"BrotliWriteBits"}
!1402 = !{!1403}
!1403 = distinct !{!1403, !1401, !"BrotliWriteBits: argument 0"}
!1404 = !{!1405}
!1405 = distinct !{!1405, !1406, !"BrotliWriteBits: argument 1"}
!1406 = distinct !{!1406, !"BrotliWriteBits"}
!1407 = !{!1408}
!1408 = distinct !{!1408, !1406, !"BrotliWriteBits: argument 0"}
!1409 = !{!1410}
!1410 = distinct !{!1410, !1411, !"BrotliWriteBits: argument 1"}
!1411 = distinct !{!1411, !"BrotliWriteBits"}
!1412 = !{!1413}
!1413 = distinct !{!1413, !1411, !"BrotliWriteBits: argument 0"}
!1414 = !{!1415}
!1415 = distinct !{!1415, !1416, !"BrotliWriteBits: argument 1"}
!1416 = distinct !{!1416, !"BrotliWriteBits"}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1416, !"BrotliWriteBits: argument 0"}
!1419 = !{!1420}
!1420 = distinct !{!1420, !1421, !"BrotliWriteBits: argument 1"}
!1421 = distinct !{!1421, !"BrotliWriteBits"}
!1422 = !{!1423}
!1423 = distinct !{!1423, !1421, !"BrotliWriteBits: argument 0"}
!1424 = distinct !{!1424, !1425}
!1425 = !{!"llvm.loop.unroll.disable"}
