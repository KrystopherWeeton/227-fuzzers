; ModuleID = '../../third_party/angle/src/compiler/translator/TranslatorVulkan.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/TranslatorVulkan.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.179" }
%"struct.std::__1::array.179" = type { [6 x i8*] }
%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.24" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.25"*, i64, i32, %"class.std::__1::basic_string.31" }
%"class.sh::TVector.25" = type { %"class.std::__1::vector.26" }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.28" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.34 }
%union.anon.34 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TranslatorVulkan" = type { %"class.sh::TCompiler" }
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.73", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.104", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.138", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.131", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { i32*, i32*, %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.60" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.53" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.sh::TVariable"**, %"class.sh::TVariable"**, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.sh::TVariable"** }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.39, i32 }
%union.anon.39 = type { i32 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.45", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.45" = type { %"class.std::__1::vector.46" }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { i32*, i32*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32* }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.65", %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { i64 }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.75" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.80", %"class.std::__1::vector.87", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.95", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"class.std::__1::unique_ptr.89"*, %"class.std::__1::unique_ptr.89"*, %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::unique_ptr.89" = type opaque
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.std::__1::unique_ptr.89"* }
%"class.std::__1::map.95" = type { %"class.std::__1::__tree.96" }
%"class.std::__1::__tree.96" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.97", %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"class.std::__1::map.104" = type { %"class.std::__1::__tree.105" }
%"class.std::__1::__tree.105" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.106", %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.115", %"class.std::__1::map", %"class.std::__1::vector.53", %"class.std::__1::vector.124" }
%"class.std::__1::map.115" = type { %"class.std::__1::__tree.116" }
%"class.std::__1::__tree.116" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.117", %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.131" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.138" = type { %"class.std::__1::__tree.139" }
%"class.std::__1::__tree.139" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.140", %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::PerformanceDiagnostics" = type { %"class.sh::TDiagnostics"* }
%"class.sh::SpecConst" = type <{ i32 (...)**, %"class.sh::TSymbolTable"*, i64, %"class.angle::BitSetT", [4 x i8] }>
%"class.sh::DriverUniform" = type { i32 (...)**, %"class.sh::TVariable"*, %"class.sh::TType"* }
%"class.sh::TVector.209" = type { %"class.std::__1::vector.210" }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { i32*, i32*, %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::array.221" = type { [8 x %"class.sh::TIntermNode"*] }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TVariable"*, %"class.sh::TIntermTyped"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser" = type { %"class.sh::TIntermTraverser", %"class.absl::flat_hash_map"* }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.150", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.157", %"class.std::__1::vector.164", %"class.sh::TVector.45", %"class.std::__1::vector.171" }
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.152" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.45" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.159" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.45", %"class.sh::TVector.45" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.164" = type { %"class.std::__1::__vector_base.165" }
%"class.std::__1::__vector_base.165" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.166" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.173" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::ImmutableStringBuilder" = type { i64, i64, i8* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.45" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.209", i8, [7 x i8] }>
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.45", i8, i8, %"class.sh::TFunction"* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.sh::DriverUniformExtended" = type { %"class.sh::DriverUniform" }
%"class.sh::TOutputVulkanGLSL" = type <{ %"class.sh::TOutputGLSL", i32, i32, i32, i8, i8, [2 x i8] }>
%"class.sh::TOutputGLSL" = type { %"class.sh::TOutputGLSLBase" }
%"class.sh::TOutputGLSLBase" = type { %"class.sh::TIntermTraverser", %"class.sh::TInfoSinkBase"*, i8, i32, i64 (i8*, i64)*, %"class.std::__1::map.138"*, i32, i32, i32, i64 }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh13TInfoSinkBaselsIiEERS0_RKT_ = comdat any

$_ZN2sh16TranslatorVulkanD0Ev = comdat any

$_ZN2sh9TCompiler13getAsCompilerEv = comdat any

$_ZN2sh9TCompiler27initBuiltInFunctionEmulatorEPNS_23BuiltInFunctionEmulatorEm = comdat any

$_ZN2sh16TranslatorVulkan30transformDepthBeforeCorrectionEPNS_12TIntermBlockEPKNS_13DriverUniformE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE2atIS6_SA_EEDTclsrT0_5valueclL_ZNSF_9addressofIKSJ_EEPT_RSQ_EclL_ZNSF_7declvalIRSP_EEDTclsr3std3__1E9__declvalISQ_ELi0EEEvEEEEERKSQ_ = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIS8_EEE4typeENSE_IPKS3_EESA_SA_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

$_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_ = comdat any

$_ZN2sh15GetSwizzleIndexIiJEEEvPNS_7TVectorIiEET_DpT0_ = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh16TranslatorVulkanE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TCompiler"*)* @_ZN2sh9TCompilerD2Ev to i8*), i8* bitcast (void (%"class.sh::TranslatorVulkan"*)* @_ZN2sh16TranslatorVulkanD0Ev to i8*), i8* bitcast (%"class.sh::TCompiler"* (%"class.sh::TCompiler"*)* @_ZN2sh9TCompiler13getAsCompilerEv to i8*), i8* bitcast (void (%"class.sh::TCompiler"*, %"class.sh::BuiltInFunctionEmulator"*, i64)* @_ZN2sh9TCompiler27initBuiltInFunctionEmulatorEPNS_23BuiltInFunctionEmulatorEm to i8*), i8* bitcast (i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, i64, %"class.sh::PerformanceDiagnostics"*)* @_ZN2sh16TranslatorVulkan9translateEPNS_12TIntermBlockEmPNS_22PerformanceDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TranslatorVulkan"*)* @_ZN2sh16TranslatorVulkan36shouldFlattenPragmaStdglInvariantAllEv to i8*), i8* bitcast (i1 (%"class.sh::TCompiler"*, i64)* @_ZN2sh9TCompiler22shouldCollectVariablesEm to i8*), i8* bitcast (i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)* @_ZN2sh16TranslatorVulkan30transformDepthBeforeCorrectionEPNS_12TIntermBlockEPKNS_13DriverUniformE to i8*)] }, align 8
@.str = private unnamed_addr constant [19 x i8] c"#version 450 core\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"gl_ClipDistance\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"gl_CullDistance\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"gl_SampleMaskIn\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"gl_SamplePosition\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"gl_PointCoord\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"gl_FragCoord\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"gl_LastFragData\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"gl_FragColor\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"gl_FragData\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"gl_SampleMask\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"gl_SecondaryFragColorEXT\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"gl_SecondaryFragDataEXT\00", align 1
@.str.13 = private unnamed_addr constant [48 x i8] c"layout(location = 0) out vec4 webgl_FragColor;\0A\00", align 1
@.str.14 = private unnamed_addr constant [66 x i8] c"layout(location = 0) out vec4 webgl_FragData[gl_MaxDrawBuffers];\0A\00", align 1
@.str.15 = private unnamed_addr constant [68 x i8] c"layout(location = 0, index = 1) out vec4 angle_SecondaryFragColor;\0A\00", align 1
@.str.16 = private unnamed_addr constant [66 x i8] c"layout(location = 0, index = 1) out vec4 angle_SecondaryFragData[\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"];\0A\00", align 1
@_ZN2sh12_GLOBAL__N_122kFlippedPointCoordNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.37, i32 0, i32 0), i64 17 }, align 8
@.str.18 = private unnamed_addr constant [14 x i8] c"gl_NumSamples\00", align 1
@__const._ZN2sh12_GLOBAL__N_122DeclareDefaultUniformsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEN2gl10ShaderTypeE.layoutQualifier = private unnamed_addr constant { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, [2 x i8] zeroinitializer, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0, [3 x i8] zeroinitializer }, align 4
@_ZN2sh12_GLOBAL__N_120kDefaultUniformNamesE = internal unnamed_addr constant %"class.angle::PackedEnumMap" { %"struct.std::__1::array.179" { [6 x i8*] [i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk22kDefaultUniformsNameVSE, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk23kDefaultUniformsNameTCSE, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk23kDefaultUniformsNameTESE, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk22kDefaultUniformsNameGSE, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk22kDefaultUniformsNameFSE, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk22kDefaultUniformsNameCSE, i32 0, i32 0)] } }, align 8
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN2sh2vk22kDefaultUniformsNameVSE = external constant [0 x i8], align 1
@_ZN2sh2vk23kDefaultUniformsNameTCSE = external constant [0 x i8], align 1
@_ZN2sh2vk23kDefaultUniformsNameTESE = external constant [0 x i8], align 1
@_ZN2sh2vk22kDefaultUniformsNameGSE = external constant [0 x i8], align 1
@_ZN2sh2vk22kDefaultUniformsNameFSE = external constant [0 x i8], align 1
@_ZN2sh2vk22kDefaultUniformsNameCSE = external constant [0 x i8], align 1
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZTVN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"*)* @_ZN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str.22 = private unnamed_addr constant [4 x i8] c"gl_\00", align 1
@.str.23 = private unnamed_addr constant [45 x i8] c"absl::container_internal::raw_hash_map<>::at\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"gl_DepthRange\00", align 1
@_ZN2sh2vk28kXfbExtensionPositionOutNameE = external constant [0 x i8], align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE11ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE11ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 3, i32 11, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE11ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE89ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE89ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 3, i32 89, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE89ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE73ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE73ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 3, i32 73, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE73ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZN2sh2vk28kLineRasterEmulationPositionE = external constant [0 x i8], align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"10B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 2, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh13TIntermBranchE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh3ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"20B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh3ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 3, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh3ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00A\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 0, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@.str.37 = private unnamed_addr constant [18 x i8] c"flippedPointCoord\00", align 1
@_ZN2sh12_GLOBAL__N_121kFlippedFragCoordNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0), i64 16 }, align 8
@.str.38 = private unnamed_addr constant [17 x i8] c"flippedFragCoord\00", align 1
@.str.39 = private unnamed_addr constant [8 x i8] c"strides\00", align 1
@_ZN2sh2vk35kXfbEmulationGetOffsetsFunctionNameE = external constant [0 x i8], align 1
@_ZN2sh2vk32kXfbEmulationCaptureFunctionNameE = external constant [0 x i8], align 1
@_ZN2sh2vk28kXfbEmulationBufferFieldNameE = external constant [0 x i8], align 1
@_ZN2sh2vk28kXfbEmulationBufferBlockNameE = external constant [0 x i8], align 1
@_ZN2sh2vk23kXfbEmulationBufferNameE = external constant [0 x i8], align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"30D\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 3, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 4, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.24"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh13DriverUniformE = external unnamed_addr constant { [10 x i8*] }, align 8
@_ZTVN2sh21DriverUniformExtendedE = external unnamed_addr constant { [10 x i8*] }, align 8
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8

@_ZN2sh16TranslatorVulkanC1Ej12ShShaderSpec = hidden unnamed_addr alias void (%"class.sh::TranslatorVulkan"*, i32, i32), void (%"class.sh::TranslatorVulkan"*, i32, i32)* @_ZN2sh16TranslatorVulkanC2Ej12ShShaderSpec

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TranslatorVulkanC2Ej12ShShaderSpec(%"class.sh::TranslatorVulkan"*, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0
  tail call void @_ZN2sh9TCompilerC2Ej12ShShaderSpec14ShShaderOutput(%"class.sh::TCompiler"* %4, i32 %1, i32 %2, i32 35720) #9
  %5 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2sh16TranslatorVulkanE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

declare void @_ZN2sh9TCompilerC2Ej12ShShaderSpec14ShShaderOutput(%"class.sh::TCompiler"*, i32, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TranslatorVulkan13translateImplERNS_13TInfoSinkBaseEPNS_12TIntermBlockEmPNS_22PerformanceDiagnosticsEPNS_9SpecConstEPNS_13DriverUniformE(%"class.sh::TranslatorVulkan"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), %"class.sh::TIntermBlock"*, i64, %"class.sh::PerformanceDiagnostics"* nocapture readnone, %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*) local_unnamed_addr #2 align 2 {
  %8 = alloca %"class.sh::TVector.209", align 8
  %9 = alloca %"class.sh::TVector.209", align 8
  %10 = alloca %"class.sh::TVector.209", align 8
  %11 = alloca %"class.sh::TVector.209", align 8
  %12 = alloca %"class.sh::TVector.209", align 8
  %13 = alloca %"class.sh::TVector.209", align 8
  %14 = alloca %"class.sh::TVector.209", align 8
  %15 = alloca %"class.sh::TVector.209", align 8
  %16 = alloca %"class.sh::TVector.209", align 8
  %17 = alloca %"class.sh::TVector.209", align 8
  %18 = alloca %"class.sh::TVector.209", align 8
  %19 = alloca %"class.sh::TVector.209", align 8
  %20 = alloca %"struct.std::__1::array.221", align 8
  %21 = alloca %"class.sh::TIntermNode"*, align 8
  %22 = alloca %"class.sh::ImmutableString", align 8
  %23 = alloca %"class.sh::TVector.45", align 8
  %24 = alloca %"class.sh::ImmutableString", align 8
  %25 = alloca %"class.sh::TVector", align 8
  %26 = alloca %"struct.sh::TLayoutQualifier", align 4
  %27 = alloca %"struct.sh::TMemoryQualifier", align 8
  %28 = alloca %"class.sh::ImmutableString", align 8
  %29 = alloca %"class.sh::ImmutableString", align 8
  %30 = alloca %"class.absl::flat_hash_map", align 8
  %31 = alloca %"class.sh::ImmutableString", align 8
  %32 = alloca %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", align 8
  %33 = alloca %"class.sh::ImmutableString", align 8
  %34 = alloca %"class.sh::ImmutableString", align 8
  %35 = alloca %"class.sh::TVector.45", align 8
  %36 = alloca %"class.sh::ImmutableString", align 8
  %37 = alloca %"class.sh::TVector.45", align 8
  %38 = alloca %"class.sh::TVector.45", align 8
  %39 = alloca %"class.sh::TVector.45", align 8
  %40 = alloca i32, align 4
  %41 = alloca %"class.sh::ImmutableStringBuilder", align 8
  %42 = alloca %"class.sh::ImmutableStringBuilder", align 8
  %43 = alloca %"struct.sh::TLayoutQualifier", align 16
  %44 = alloca %"struct.sh::TMemoryQualifier", align 8
  %45 = alloca %"class.sh::ImmutableString", align 8
  %46 = alloca %"class.sh::ImmutableString", align 8
  %47 = alloca i32, align 4
  %48 = alloca %"class.sh::ImmutableString", align 8
  %49 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0
  %50 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 14
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 35633
  br i1 %52, label %53, label %56

53:                                               ; preds = %7
  %54 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 21
  %55 = tail call zeroext i1 @_ZN2sh24ShaderBuiltinsWorkaroundEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEm(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %54, i64 %3) #9
  br i1 %55, label %56, label %2868

56:                                               ; preds = %53, %7
  %57 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  %58 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %57, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)) #9
  %59 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 3
  %60 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %59, i64 0, i32 0, i32 0
  %61 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %60, align 8
  %62 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %63 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %62, align 8
  %64 = icmp eq %"struct.sh::ShaderVariable"* %61, %63
  br i1 %64, label %65, label %76

65:                                               ; preds = %137, %56
  %66 = phi i32 [ 0, %56 ], [ %139, %137 ]
  %67 = phi i32 [ 0, %56 ], [ %138, %137 ]
  %68 = phi i32 [ 0, %56 ], [ %114, %137 ]
  %69 = phi i32 [ 0, %56 ], [ %95, %137 ]
  %70 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 21
  %71 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 1
  %72 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 4
  %73 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 2
  %74 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 7
  %75 = tail call zeroext i1 @_ZN2sh32RemoveInactiveInterfaceVariablesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableERKNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEESD_SD_SD_RKNS7_INS_14InterfaceBlockENS9_ISE_EEEE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.std::__1::vector.1"* dereferenceable(24) %71, %"class.std::__1::vector.1"* dereferenceable(24) %72, %"class.std::__1::vector.1"* dereferenceable(24) %73, %"class.std::__1::vector.1"* dereferenceable(24) %59, %"class.std::__1::vector.8"* dereferenceable(24) %74) #9
  br i1 %75, label %142, label %2868

76:                                               ; preds = %56, %137
  %77 = phi i32 [ %95, %137 ], [ 0, %56 ]
  %78 = phi i32 [ %114, %137 ], [ 0, %56 ]
  %79 = phi i32 [ %138, %137 ], [ 0, %56 ]
  %80 = phi i32 [ %139, %137 ], [ 0, %56 ]
  %81 = phi %"struct.sh::ShaderVariable"* [ %140, %137 ], [ %61, %56 ]
  %82 = tail call zeroext i1 @_ZNK2sh14ShaderVariable9isBuiltInEv(%"struct.sh::ShaderVariable"* %81) #9
  br i1 %82, label %94, label %83

83:                                               ; preds = %76
  %84 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 6
  %85 = load i8, i8* %84, align 1, !range !2
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %94, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = tail call zeroext i1 @_ZN2gl12IsOpaqueTypeEj(i32 %89) #9
  %91 = xor i1 %90, true
  %92 = zext i1 %91 to i32
  %93 = add nsw i32 %77, %92
  br label %94

94:                                               ; preds = %87, %83, %76
  %95 = phi i32 [ %77, %76 ], [ %77, %83 ], [ %93, %87 ]
  %96 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 7, i32 0, i32 0
  %97 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %96, align 8
  %98 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 7, i32 0, i32 1
  %99 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %98, align 8
  %100 = icmp eq %"struct.sh::ShaderVariable"* %97, %99
  br i1 %100, label %101, label %111

101:                                              ; preds = %94
  %102 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 4
  %103 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 4, i32 0, i32 1
  %104 = bitcast i32** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.std::__1::vector.131"* %102 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %105, %107
  %109 = ashr exact i64 %108, 2
  %110 = icmp ugt i64 %109, 1
  br i1 %110, label %111, label %113

111:                                              ; preds = %94, %101
  %112 = add nsw i32 %78, 1
  br label %113

113:                                              ; preds = %111, %101
  %114 = phi i32 [ %112, %111 ], [ %78, %101 ]
  %115 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 6
  %116 = load i8, i8* %115, align 1, !range !2
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %137, label %118

118:                                              ; preds = %113
  %119 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 0
  %120 = load i32, i32* %119, align 8
  %121 = tail call zeroext i1 @_ZN2gl11IsImageTypeEj(i32 %120) #9
  br i1 %121, label %122, label %128

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 0, i32 14
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 33326
  %126 = zext i1 %125 to i32
  %127 = add nsw i32 %79, %126
  br label %128

128:                                              ; preds = %122, %118
  %129 = phi i32 [ %127, %122 ], [ %79, %118 ]
  %130 = load i8, i8* %115, align 1
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %137, label %132

132:                                              ; preds = %128
  %133 = load i32, i32* %119, align 8
  %134 = tail call zeroext i1 @_ZN2gl19IsAtomicCounterTypeEj(i32 %133) #9
  %135 = zext i1 %134 to i32
  %136 = add nsw i32 %80, %135
  br label %137

137:                                              ; preds = %113, %132, %128
  %138 = phi i32 [ %129, %128 ], [ %129, %132 ], [ %79, %113 ]
  %139 = phi i32 [ %80, %128 ], [ %136, %132 ], [ %80, %113 ]
  %140 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %81, i64 1
  %141 = icmp eq %"struct.sh::ShaderVariable"* %140, %63
  br i1 %141, label %65, label %76

142:                                              ; preds = %65
  %143 = tail call zeroext i1 @_ZN2sh44MonomorphizeUnsupportedFunctionsInVulkanGLSLEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEm(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i64 %3) #9
  br i1 %143, label %144, label %2868

144:                                              ; preds = %142
  %145 = icmp sgt i32 %68, 0
  br i1 %145, label %146, label %154

146:                                              ; preds = %144
  %147 = tail call zeroext i1 @_ZN2sh37SeparateStructFromUniformDeclarationsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70) #9
  br i1 %147, label %148, label %2868

148:                                              ; preds = %146
  %149 = bitcast i32* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149) #9
  store i32 -1431655766, i32* %47, align 4
  %150 = call zeroext i1 @_ZN2sh21RewriteStructSamplersEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPi(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i32* nonnull %47) #9
  %151 = load i32, i32* %47, align 4
  %152 = select i1 %150, i32 %151, i32 0
  %153 = sub nsw i32 %69, %152
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149) #9
  br i1 %150, label %154, label %2868

154:                                              ; preds = %148, %144
  %155 = phi i32 [ %153, %148 ], [ %69, %144 ]
  %156 = call zeroext i1 @_ZN2sh35RewriteArrayOfArrayOfOpaqueUniformsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70) #9
  br i1 %156, label %157, label %2868

157:                                              ; preds = %154
  %158 = and i64 %3, 4398046511104
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %164, label %160

160:                                              ; preds = %157
  %161 = load i32, i32* %50, align 4
  %162 = icmp eq i32 %161, 35632
  %163 = call zeroext i1 @_ZN2sh31RewriteCubeMapSamplersAs2DArrayEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEb(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i1 zeroext %162) #9
  br i1 %163, label %164, label %2868

164:                                              ; preds = %157, %160
  %165 = call zeroext i1 @_ZN2sh25FlagSamplersForTexelFetchEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.std::__1::vector.1"* %59) #9
  br i1 %165, label %166, label %2868

166:                                              ; preds = %164
  %167 = load i32, i32* %50, align 4
  %168 = call zeroext i8 @_ZN2gl10FromGLenumINS_10ShaderTypeEEET_j(i32 %167) #9
  %169 = icmp sgt i32 %155, 0
  br i1 %169, label %170, label %888

170:                                              ; preds = %166
  %171 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %172 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %171, i64 24) #9
  %173 = bitcast i8* %172 to %"class.sh::TVector.25"*
  call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 24, i1 false) #9
  %174 = bitcast %"class.sh::TVector"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %174) #9
  %175 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %25, i64 0, i32 0, i32 0, i32 0
  %176 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %25, i64 0, i32 0, i32 0, i32 1
  %177 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %25, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %174, i8 0, i64 24, i1 false) #9
  %178 = bitcast %"class.sh::TIntermBlock"* %2 to %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)***
  %179 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*** %178, align 8
  %180 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %179, i64 27
  %181 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %180, align 8
  %182 = call %"class.sh::TVector.45"* %181(%"class.sh::TIntermBlock"* %2) #9
  %183 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %182, i64 0, i32 0, i32 0, i32 0
  %184 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %183, align 8
  %185 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %182, i64 0, i32 0, i32 0, i32 1
  %186 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %185, align 8
  %187 = icmp eq %"class.sh::TIntermNode"** %184, %186
  br i1 %187, label %200, label %188

188:                                              ; preds = %170
  %189 = getelementptr inbounds i8, i8* %172, i64 8
  %190 = bitcast i8* %189 to %"class.sh::TField"***
  %191 = getelementptr inbounds i8, i8* %172, i64 16
  %192 = bitcast i8* %191 to %"class.sh::TField"***
  %193 = bitcast i8* %189 to i64*
  %194 = bitcast i8* %172 to i64*
  %195 = bitcast i8* %191 to i64*
  %196 = bitcast i8* %172 to %"class.sh::TField"***
  %197 = bitcast %"class.sh::TVariable"*** %176 to i64*
  %198 = bitcast %"class.sh::TVector"* %25 to i64*
  %199 = bitcast %"class.sh::TVariable"*** %177 to i64*
  br label %241

200:                                              ; preds = %757, %170
  %201 = bitcast %"struct.sh::TLayoutQualifier"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %201) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %201, i8* align 4 bitcast ({ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }* @__const._ZN2sh12_GLOBAL__N_122DeclareDefaultUniformsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEN2gl10ShaderTypeE.layoutQualifier to i8*), i64 92, i1 false) #9
  %202 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %26, i64 0, i32 3
  store i32 3, i32* %202, align 4
  %203 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %27, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %203) #9
  %204 = bitcast %"struct.sh::TMemoryQualifier"* %27 to i40*
  store i40 0, i40* %204, align 8
  %205 = bitcast %"class.sh::ImmutableString"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %205) #9
  %206 = zext i8 %168 to i64
  %207 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* @_ZN2sh12_GLOBAL__N_120kDefaultUniformNamesE, i64 0, i32 0, i32 0, i64 %206
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %28, i64 0, i32 0
  store i8* %208, i8** %209, align 8
  %210 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %28, i64 0, i32 1
  %211 = icmp eq i8* %208, null
  br i1 %211, label %218, label %212

212:                                              ; preds = %200, %212
  %213 = phi i64 [ %217, %212 ], [ 0, %200 ]
  %214 = getelementptr inbounds i8, i8* %208, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = icmp eq i8 %215, 0
  %217 = add i64 %213, 1
  br i1 %216, label %218, label %212

218:                                              ; preds = %212, %200
  %219 = phi i64 [ 0, %200 ], [ %213, %212 ]
  store i64 %219, i64* %210, align 8
  %220 = bitcast %"class.sh::ImmutableString"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %220) #9
  %221 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %29, i64 0, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0), i8** %221, align 8
  %222 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %29, i64 0, i32 1
  store i64 0, i64* %222, align 8
  %223 = call %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.sh::TVector.25"* %173, i32 6, %"struct.sh::TLayoutQualifier"* nonnull dereferenceable(92) %26, %"struct.sh::TMemoryQualifier"* nonnull dereferenceable(5) %27, i32 0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %28, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %29) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %220) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %205) #9
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %203) #9
  %224 = bitcast %"class.absl::flat_hash_map"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %224) #9
  %225 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %30, i64 0, i32 0, i32 0, i32 0
  %226 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %30, i64 0, i32 0, i32 0, i32 1
  %227 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %30, i64 0, i32 0, i32 0, i32 3
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %225, align 8
  %228 = bitcast %"union.absl::container_internal::map_slot_type"** %226 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %228, i8 0, i64 32, i1 false) #9
  %229 = bitcast %"class.sh::TVariable"*** %176 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %"class.sh::TVector"* %25 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = icmp eq i64 %230, %232
  br i1 %233, label %760, label %234

234:                                              ; preds = %218
  %235 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %223, i64 0, i32 1
  %236 = bitcast %"class.sh::ImmutableString"* %31 to i8*
  %237 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %31, i64 0, i32 0
  %238 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %31, i64 0, i32 1
  %239 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %30, i64 0, i32 0, i32 0
  %240 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %776

241:                                              ; preds = %757, %188
  %242 = phi %"class.sh::TIntermNode"** [ %184, %188 ], [ %758, %757 ]
  %243 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %242, align 8
  %244 = bitcast %"class.sh::TIntermNode"* %243 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %245 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %244, align 8
  %246 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %245, i64 11
  %247 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %246, align 8
  %248 = call %"class.sh::TIntermDeclaration"* %247(%"class.sh::TIntermNode"* %243) #9
  %249 = icmp eq %"class.sh::TIntermDeclaration"* %248, null
  br i1 %249, label %757, label %250

250:                                              ; preds = %241
  %251 = bitcast %"class.sh::TIntermDeclaration"* %248 to %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)***
  %252 = load %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)*** %251, align 8
  %253 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)** %252, i64 27
  %254 = load %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)** %253, align 8
  %255 = call %"class.sh::TVector.45"* %254(%"class.sh::TIntermDeclaration"* nonnull %248) #9
  %256 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %255, i64 0, i32 0, i32 0, i32 0
  %257 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %256, align 8
  %258 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, align 8
  %259 = bitcast %"class.sh::TIntermNode"* %258 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %260 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %259, align 8
  %261 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %260, i64 19
  %262 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %261, align 8
  %263 = call %"class.sh::TIntermSymbol"* %262(%"class.sh::TIntermNode"* %258) #9
  %264 = icmp eq %"class.sh::TIntermSymbol"* %263, null
  br i1 %264, label %757, label %265

265:                                              ; preds = %250
  %266 = bitcast %"class.sh::TIntermSymbol"* %263 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  %267 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %266, align 8
  %268 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %267, i64 31
  %269 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %268, align 8
  %270 = call dereferenceable(184) %"class.sh::TType"* %269(%"class.sh::TIntermSymbol"* nonnull %263) #9
  %271 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %270, i64 0, i32 2
  %272 = load i32, i32* %271, align 8
  %273 = icmp eq i32 %272, 6
  br i1 %273, label %274, label %757

274:                                              ; preds = %265
  %275 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %270, i64 0, i32 12
  %276 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %275, align 8
  %277 = icmp eq %"class.sh::TInterfaceBlock"* %276, null
  br i1 %277, label %278, label %757

278:                                              ; preds = %274
  %279 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %270, i64 0, i32 0
  %280 = load i32, i32* %279, align 8
  %281 = add i32 %280, -8
  %282 = icmp ult i32 %281, 43
  %283 = add i32 %280, -51
  %284 = icmp ult i32 %283, 33
  %285 = or i1 %282, %284
  %286 = icmp eq i32 %280, 6
  %287 = or i1 %286, %285
  %288 = xor i1 %287, true
  %289 = add i32 %280, -84
  %290 = icmp ugt i32 %289, 5
  %291 = and i1 %290, %288
  br i1 %291, label %292, label %757

292:                                              ; preds = %278
  %293 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %294 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %293, i64 184) #9
  %295 = bitcast i8* %294 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %295, %"class.sh::TType"* dereferenceable(184) %270) #9
  %296 = getelementptr inbounds i8, i8* %294, i64 4
  %297 = bitcast i8* %296 to i32*
  store i32 0, i32* %297, align 4
  %298 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %299 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %298, i64 48) #9
  %300 = call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %263) #9
  %301 = extractvalue { i8*, i64 } %300, 0
  %302 = extractvalue { i8*, i64 } %300, 1
  %303 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %263, i64 0, i32 0, i32 0, i32 1
  %304 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %263, i64 0, i32 1
  %305 = bitcast %"class.sh::TVariable"** %304 to %"class.sh::TSymbol"**
  %306 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %305, align 8
  %307 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %306, i64 0, i32 2
  %308 = load i8, i8* %307, align 4
  %309 = bitcast i8* %299 to i8**
  store i8* %294, i8** %309, align 8
  %310 = getelementptr inbounds i8, i8* %299, i64 8
  %311 = bitcast i8* %310 to i8**
  store i8* %301, i8** %311, align 8
  %312 = getelementptr inbounds i8, i8* %299, i64 16
  %313 = bitcast i8* %312 to i64*
  store i64 %302, i64* %313, align 8
  %314 = getelementptr inbounds i8, i8* %299, i64 24
  %315 = bitcast %"struct.sh::TSourceLoc"* %303 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %314, i8* align 4 %315, i64 16, i1 false) #9
  %316 = getelementptr inbounds i8, i8* %299, i64 40
  store i8 %308, i8* %316, align 8
  %317 = ptrtoint i8* %299 to i64
  %318 = load %"class.sh::TField"**, %"class.sh::TField"*** %190, align 8
  %319 = load %"class.sh::TField"**, %"class.sh::TField"*** %192, align 8
  %320 = icmp ult %"class.sh::TField"** %318, %319
  %321 = ptrtoint %"class.sh::TField"** %319 to i64
  br i1 %320, label %322, label %326

322:                                              ; preds = %292
  %323 = bitcast %"class.sh::TField"** %318 to i64*
  store i64 %317, i64* %323, align 8
  %324 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %318, i64 1
  %325 = ptrtoint %"class.sh::TField"** %324 to i64
  store i64 %325, i64* %193, align 8
  br label %536

326:                                              ; preds = %292
  %327 = ptrtoint %"class.sh::TField"** %318 to i64
  %328 = load i64, i64* %194, align 8
  %329 = sub i64 %327, %328
  %330 = ashr exact i64 %329, 3
  %331 = add nsw i64 %330, 1
  %332 = icmp ugt i64 %331, 2305843009213693951
  br i1 %332, label %333, label %335

333:                                              ; preds = %326
  %334 = bitcast i8* %172 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %334) #15
  unreachable

335:                                              ; preds = %326
  %336 = sub i64 %321, %328
  %337 = ashr exact i64 %336, 3
  %338 = icmp ult i64 %337, 1152921504606846975
  br i1 %338, label %339, label %344

339:                                              ; preds = %335
  %340 = ashr exact i64 %336, 2
  %341 = icmp ult i64 %340, %331
  %342 = select i1 %341, i64 %331, i64 %340
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %350, label %344

344:                                              ; preds = %339, %335
  %345 = phi i64 [ %342, %339 ], [ 2305843009213693951, %335 ]
  %346 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %347 = shl i64 %345, 3
  %348 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %346, i64 %347) #9
  %349 = bitcast i8* %348 to %"class.sh::TField"**
  br label %350

350:                                              ; preds = %344, %339
  %351 = phi i64 [ %345, %344 ], [ 0, %339 ]
  %352 = phi %"class.sh::TField"** [ %349, %344 ], [ null, %339 ]
  %353 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %352, i64 %330
  %354 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %352, i64 %351
  %355 = ptrtoint %"class.sh::TField"** %354 to i64
  %356 = bitcast %"class.sh::TField"** %353 to i64*
  store i64 %317, i64* %356, align 8
  %357 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %353, i64 1
  %358 = ptrtoint %"class.sh::TField"** %357 to i64
  %359 = load %"class.sh::TField"**, %"class.sh::TField"*** %196, align 8
  %360 = ptrtoint %"class.sh::TField"** %359 to i64
  %361 = load %"class.sh::TField"**, %"class.sh::TField"*** %190, align 8
  %362 = icmp eq %"class.sh::TField"** %361, %359
  br i1 %362, label %533, label %363

363:                                              ; preds = %350
  %364 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 -1
  %365 = ptrtoint %"class.sh::TField"** %364 to i64
  %366 = sub i64 %365, %360
  %367 = lshr i64 %366, 3
  %368 = add nuw nsw i64 %367, 1
  %369 = icmp ult i64 %368, 4
  br i1 %369, label %463, label %370

370:                                              ; preds = %363
  %371 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %352, i64 -1
  %372 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 -1
  %373 = ptrtoint %"class.sh::TField"** %372 to i64
  %374 = sub i64 %373, %360
  %375 = lshr i64 %374, 3
  %376 = sub nsw i64 %330, %375
  %377 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %371, i64 %376
  %378 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 -1
  %379 = sub nsw i64 0, %375
  %380 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %378, i64 %379
  %381 = icmp ult %"class.sh::TField"** %377, %361
  %382 = icmp ult %"class.sh::TField"** %380, %353
  %383 = and i1 %381, %382
  br i1 %383, label %463, label %384

384:                                              ; preds = %370
  %385 = and i64 %368, 4611686018427387900
  %386 = sub nsw i64 0, %385
  %387 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %353, i64 %386
  %388 = sub nsw i64 0, %385
  %389 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 %388
  %390 = add nsw i64 %385, -4
  %391 = lshr exact i64 %390, 2
  %392 = add nuw nsw i64 %391, 1
  %393 = and i64 %392, 1
  %394 = icmp eq i64 %390, 0
  br i1 %394, label %439, label %395

395:                                              ; preds = %384
  %396 = sub nuw nsw i64 %392, %393
  %397 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %353, i64 -1
  %398 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 -1
  %399 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %353, i64 -1
  %400 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 -1
  br label %401

401:                                              ; preds = %401, %395
  %402 = phi i64 [ 0, %395 ], [ %436, %401 ]
  %403 = phi i64 [ %396, %395 ], [ %437, %401 ]
  %404 = sub i64 0, %402
  %405 = sub i64 0, %402
  %406 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %397, i64 %404
  %407 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %398, i64 %405
  %408 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %407, i64 -1
  %409 = bitcast %"class.sh::TField"** %408 to <2 x i64>*
  %410 = load <2 x i64>, <2 x i64>* %409, align 8, !alias.scope !3
  %411 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %407, i64 -2
  %412 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %411, i64 -1
  %413 = bitcast %"class.sh::TField"** %412 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %413, align 8, !alias.scope !3
  %415 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %406, i64 -1
  %416 = bitcast %"class.sh::TField"** %415 to <2 x i64>*
  store <2 x i64> %410, <2 x i64>* %416, align 8, !alias.scope !6, !noalias !3
  %417 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %406, i64 -2
  %418 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %417, i64 -1
  %419 = bitcast %"class.sh::TField"** %418 to <2 x i64>*
  store <2 x i64> %414, <2 x i64>* %419, align 8, !alias.scope !6, !noalias !3
  %420 = sub nuw nsw i64 -4, %402
  %421 = sub nuw nsw i64 -4, %402
  %422 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %399, i64 %420
  %423 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %400, i64 %421
  %424 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %423, i64 -1
  %425 = bitcast %"class.sh::TField"** %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 8, !alias.scope !3
  %427 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %423, i64 -2
  %428 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %427, i64 -1
  %429 = bitcast %"class.sh::TField"** %428 to <2 x i64>*
  %430 = load <2 x i64>, <2 x i64>* %429, align 8, !alias.scope !3
  %431 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %422, i64 -1
  %432 = bitcast %"class.sh::TField"** %431 to <2 x i64>*
  store <2 x i64> %426, <2 x i64>* %432, align 8, !alias.scope !6, !noalias !3
  %433 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %422, i64 -2
  %434 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %433, i64 -1
  %435 = bitcast %"class.sh::TField"** %434 to <2 x i64>*
  store <2 x i64> %430, <2 x i64>* %435, align 8, !alias.scope !6, !noalias !3
  %436 = add i64 %402, 8
  %437 = add i64 %403, -2
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %401, !llvm.loop !8

439:                                              ; preds = %401, %384
  %440 = phi i64 [ 0, %384 ], [ %436, %401 ]
  %441 = icmp eq i64 %393, 0
  br i1 %441, label %461, label %442

442:                                              ; preds = %439
  %443 = sub i64 0, %440
  %444 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %353, i64 -1
  %445 = sub i64 0, %440
  %446 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %361, i64 -1
  %447 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %444, i64 %443
  %448 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %446, i64 %445
  %449 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %448, i64 -1
  %450 = bitcast %"class.sh::TField"** %449 to <2 x i64>*
  %451 = load <2 x i64>, <2 x i64>* %450, align 8, !alias.scope !3
  %452 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %448, i64 -2
  %453 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %452, i64 -1
  %454 = bitcast %"class.sh::TField"** %453 to <2 x i64>*
  %455 = load <2 x i64>, <2 x i64>* %454, align 8, !alias.scope !3
  %456 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %447, i64 -1
  %457 = bitcast %"class.sh::TField"** %456 to <2 x i64>*
  store <2 x i64> %451, <2 x i64>* %457, align 8, !alias.scope !6, !noalias !3
  %458 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %447, i64 -2
  %459 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %458, i64 -1
  %460 = bitcast %"class.sh::TField"** %459 to <2 x i64>*
  store <2 x i64> %455, <2 x i64>* %460, align 8, !alias.scope !6, !noalias !3
  br label %461

461:                                              ; preds = %439, %442
  %462 = icmp eq i64 %368, %385
  br i1 %462, label %533, label %463

463:                                              ; preds = %461, %370, %363
  %464 = phi %"class.sh::TField"** [ %353, %370 ], [ %353, %363 ], [ %387, %461 ]
  %465 = phi %"class.sh::TField"** [ %361, %370 ], [ %361, %363 ], [ %389, %461 ]
  %466 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %465, i64 -1
  %467 = ptrtoint %"class.sh::TField"** %466 to i64
  %468 = sub i64 %467, %360
  %469 = lshr i64 %468, 3
  %470 = add nuw nsw i64 %469, 1
  %471 = and i64 %470, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %484, label %473

473:                                              ; preds = %463, %473
  %474 = phi %"class.sh::TField"** [ %477, %473 ], [ %464, %463 ]
  %475 = phi %"class.sh::TField"** [ %478, %473 ], [ %465, %463 ]
  %476 = phi i64 [ %482, %473 ], [ %471, %463 ]
  %477 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %474, i64 -1
  %478 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %475, i64 -1
  %479 = bitcast %"class.sh::TField"** %478 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = bitcast %"class.sh::TField"** %477 to i64*
  store i64 %480, i64* %481, align 8
  %482 = add i64 %476, -1
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %473, !llvm.loop !10

484:                                              ; preds = %473, %463
  %485 = phi %"class.sh::TField"** [ undef, %463 ], [ %477, %473 ]
  %486 = phi %"class.sh::TField"** [ %464, %463 ], [ %477, %473 ]
  %487 = phi %"class.sh::TField"** [ %465, %463 ], [ %478, %473 ]
  %488 = icmp ult i64 %468, 56
  br i1 %488, label %533, label %489

489:                                              ; preds = %484, %489
  %490 = phi %"class.sh::TField"** [ %527, %489 ], [ %486, %484 ]
  %491 = phi %"class.sh::TField"** [ %528, %489 ], [ %487, %484 ]
  %492 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -1
  %493 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -1
  %494 = bitcast %"class.sh::TField"** %493 to i64*
  %495 = load i64, i64* %494, align 8
  %496 = bitcast %"class.sh::TField"** %492 to i64*
  store i64 %495, i64* %496, align 8
  %497 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -2
  %498 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -2
  %499 = bitcast %"class.sh::TField"** %498 to i64*
  %500 = load i64, i64* %499, align 8
  %501 = bitcast %"class.sh::TField"** %497 to i64*
  store i64 %500, i64* %501, align 8
  %502 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -3
  %503 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -3
  %504 = bitcast %"class.sh::TField"** %503 to i64*
  %505 = load i64, i64* %504, align 8
  %506 = bitcast %"class.sh::TField"** %502 to i64*
  store i64 %505, i64* %506, align 8
  %507 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -4
  %508 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -4
  %509 = bitcast %"class.sh::TField"** %508 to i64*
  %510 = load i64, i64* %509, align 8
  %511 = bitcast %"class.sh::TField"** %507 to i64*
  store i64 %510, i64* %511, align 8
  %512 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -5
  %513 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -5
  %514 = bitcast %"class.sh::TField"** %513 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = bitcast %"class.sh::TField"** %512 to i64*
  store i64 %515, i64* %516, align 8
  %517 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -6
  %518 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -6
  %519 = bitcast %"class.sh::TField"** %518 to i64*
  %520 = load i64, i64* %519, align 8
  %521 = bitcast %"class.sh::TField"** %517 to i64*
  store i64 %520, i64* %521, align 8
  %522 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -7
  %523 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -7
  %524 = bitcast %"class.sh::TField"** %523 to i64*
  %525 = load i64, i64* %524, align 8
  %526 = bitcast %"class.sh::TField"** %522 to i64*
  store i64 %525, i64* %526, align 8
  %527 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %490, i64 -8
  %528 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %491, i64 -8
  %529 = bitcast %"class.sh::TField"** %528 to i64*
  %530 = load i64, i64* %529, align 8
  %531 = bitcast %"class.sh::TField"** %527 to i64*
  store i64 %530, i64* %531, align 8
  %532 = icmp eq %"class.sh::TField"** %528, %359
  br i1 %532, label %533, label %489, !llvm.loop !12

533:                                              ; preds = %484, %489, %461, %350
  %534 = phi %"class.sh::TField"** [ %353, %350 ], [ %387, %461 ], [ %485, %484 ], [ %527, %489 ]
  %535 = ptrtoint %"class.sh::TField"** %534 to i64
  store i64 %535, i64* %194, align 8
  store i64 %358, i64* %193, align 8
  store i64 %355, i64* %195, align 8
  br label %536

536:                                              ; preds = %533, %322
  %537 = bitcast %"class.sh::TVariable"** %304 to i64*
  %538 = load i64, i64* %537, align 8
  %539 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %176, align 8
  %540 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %177, align 8
  %541 = icmp ult %"class.sh::TVariable"** %539, %540
  %542 = ptrtoint %"class.sh::TVariable"** %540 to i64
  br i1 %541, label %543, label %547

543:                                              ; preds = %536
  %544 = bitcast %"class.sh::TVariable"** %539 to i64*
  store i64 %538, i64* %544, align 8
  %545 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %539, i64 1
  %546 = ptrtoint %"class.sh::TVariable"** %545 to i64
  store i64 %546, i64* %197, align 8
  br label %757

547:                                              ; preds = %536
  %548 = ptrtoint %"class.sh::TVariable"** %539 to i64
  %549 = load i64, i64* %198, align 8
  %550 = sub i64 %548, %549
  %551 = ashr exact i64 %550, 3
  %552 = add nsw i64 %551, 1
  %553 = icmp ugt i64 %552, 2305843009213693951
  br i1 %553, label %554, label %556

554:                                              ; preds = %547
  %555 = bitcast %"class.sh::TVector"* %25 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %555) #15
  unreachable

556:                                              ; preds = %547
  %557 = sub i64 %542, %549
  %558 = ashr exact i64 %557, 3
  %559 = icmp ult i64 %558, 1152921504606846975
  br i1 %559, label %560, label %565

560:                                              ; preds = %556
  %561 = ashr exact i64 %557, 2
  %562 = icmp ult i64 %561, %552
  %563 = select i1 %562, i64 %552, i64 %561
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %571, label %565

565:                                              ; preds = %560, %556
  %566 = phi i64 [ %563, %560 ], [ 2305843009213693951, %556 ]
  %567 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %568 = shl i64 %566, 3
  %569 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %567, i64 %568) #9
  %570 = bitcast i8* %569 to %"class.sh::TVariable"**
  br label %571

571:                                              ; preds = %565, %560
  %572 = phi i64 [ %566, %565 ], [ 0, %560 ]
  %573 = phi %"class.sh::TVariable"** [ %570, %565 ], [ null, %560 ]
  %574 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %573, i64 %551
  %575 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %573, i64 %572
  %576 = ptrtoint %"class.sh::TVariable"** %575 to i64
  %577 = bitcast %"class.sh::TVariable"** %574 to i64*
  store i64 %538, i64* %577, align 8
  %578 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %574, i64 1
  %579 = ptrtoint %"class.sh::TVariable"** %578 to i64
  %580 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %175, align 8
  %581 = ptrtoint %"class.sh::TVariable"** %580 to i64
  %582 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %176, align 8
  %583 = icmp eq %"class.sh::TVariable"** %582, %580
  br i1 %583, label %754, label %584

584:                                              ; preds = %571
  %585 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 -1
  %586 = ptrtoint %"class.sh::TVariable"** %585 to i64
  %587 = sub i64 %586, %581
  %588 = lshr i64 %587, 3
  %589 = add nuw nsw i64 %588, 1
  %590 = icmp ult i64 %589, 4
  br i1 %590, label %684, label %591

591:                                              ; preds = %584
  %592 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %573, i64 -1
  %593 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 -1
  %594 = ptrtoint %"class.sh::TVariable"** %593 to i64
  %595 = sub i64 %594, %581
  %596 = lshr i64 %595, 3
  %597 = sub nsw i64 %551, %596
  %598 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %592, i64 %597
  %599 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 -1
  %600 = sub nsw i64 0, %596
  %601 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %599, i64 %600
  %602 = icmp ult %"class.sh::TVariable"** %598, %582
  %603 = icmp ult %"class.sh::TVariable"** %601, %574
  %604 = and i1 %602, %603
  br i1 %604, label %684, label %605

605:                                              ; preds = %591
  %606 = and i64 %589, 4611686018427387900
  %607 = sub nsw i64 0, %606
  %608 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %574, i64 %607
  %609 = sub nsw i64 0, %606
  %610 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 %609
  %611 = add nsw i64 %606, -4
  %612 = lshr exact i64 %611, 2
  %613 = add nuw nsw i64 %612, 1
  %614 = and i64 %613, 1
  %615 = icmp eq i64 %611, 0
  br i1 %615, label %660, label %616

616:                                              ; preds = %605
  %617 = sub nuw nsw i64 %613, %614
  %618 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %574, i64 -1
  %619 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 -1
  %620 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %574, i64 -1
  %621 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 -1
  br label %622

622:                                              ; preds = %622, %616
  %623 = phi i64 [ 0, %616 ], [ %657, %622 ]
  %624 = phi i64 [ %617, %616 ], [ %658, %622 ]
  %625 = sub i64 0, %623
  %626 = sub i64 0, %623
  %627 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %618, i64 %625
  %628 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %619, i64 %626
  %629 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %628, i64 -1
  %630 = bitcast %"class.sh::TVariable"** %629 to <2 x i64>*
  %631 = load <2 x i64>, <2 x i64>* %630, align 8, !alias.scope !13
  %632 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %628, i64 -2
  %633 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %632, i64 -1
  %634 = bitcast %"class.sh::TVariable"** %633 to <2 x i64>*
  %635 = load <2 x i64>, <2 x i64>* %634, align 8, !alias.scope !13
  %636 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %627, i64 -1
  %637 = bitcast %"class.sh::TVariable"** %636 to <2 x i64>*
  store <2 x i64> %631, <2 x i64>* %637, align 8, !alias.scope !16, !noalias !13
  %638 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %627, i64 -2
  %639 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %638, i64 -1
  %640 = bitcast %"class.sh::TVariable"** %639 to <2 x i64>*
  store <2 x i64> %635, <2 x i64>* %640, align 8, !alias.scope !16, !noalias !13
  %641 = sub nuw nsw i64 -4, %623
  %642 = sub nuw nsw i64 -4, %623
  %643 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %620, i64 %641
  %644 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %621, i64 %642
  %645 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %644, i64 -1
  %646 = bitcast %"class.sh::TVariable"** %645 to <2 x i64>*
  %647 = load <2 x i64>, <2 x i64>* %646, align 8, !alias.scope !13
  %648 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %644, i64 -2
  %649 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %648, i64 -1
  %650 = bitcast %"class.sh::TVariable"** %649 to <2 x i64>*
  %651 = load <2 x i64>, <2 x i64>* %650, align 8, !alias.scope !13
  %652 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %643, i64 -1
  %653 = bitcast %"class.sh::TVariable"** %652 to <2 x i64>*
  store <2 x i64> %647, <2 x i64>* %653, align 8, !alias.scope !16, !noalias !13
  %654 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %643, i64 -2
  %655 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %654, i64 -1
  %656 = bitcast %"class.sh::TVariable"** %655 to <2 x i64>*
  store <2 x i64> %651, <2 x i64>* %656, align 8, !alias.scope !16, !noalias !13
  %657 = add i64 %623, 8
  %658 = add i64 %624, -2
  %659 = icmp eq i64 %658, 0
  br i1 %659, label %660, label %622, !llvm.loop !18

660:                                              ; preds = %622, %605
  %661 = phi i64 [ 0, %605 ], [ %657, %622 ]
  %662 = icmp eq i64 %614, 0
  br i1 %662, label %682, label %663

663:                                              ; preds = %660
  %664 = sub i64 0, %661
  %665 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %574, i64 -1
  %666 = sub i64 0, %661
  %667 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %582, i64 -1
  %668 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %665, i64 %664
  %669 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %667, i64 %666
  %670 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %669, i64 -1
  %671 = bitcast %"class.sh::TVariable"** %670 to <2 x i64>*
  %672 = load <2 x i64>, <2 x i64>* %671, align 8, !alias.scope !13
  %673 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %669, i64 -2
  %674 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %673, i64 -1
  %675 = bitcast %"class.sh::TVariable"** %674 to <2 x i64>*
  %676 = load <2 x i64>, <2 x i64>* %675, align 8, !alias.scope !13
  %677 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %668, i64 -1
  %678 = bitcast %"class.sh::TVariable"** %677 to <2 x i64>*
  store <2 x i64> %672, <2 x i64>* %678, align 8, !alias.scope !16, !noalias !13
  %679 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %668, i64 -2
  %680 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %679, i64 -1
  %681 = bitcast %"class.sh::TVariable"** %680 to <2 x i64>*
  store <2 x i64> %676, <2 x i64>* %681, align 8, !alias.scope !16, !noalias !13
  br label %682

682:                                              ; preds = %660, %663
  %683 = icmp eq i64 %589, %606
  br i1 %683, label %754, label %684

684:                                              ; preds = %682, %591, %584
  %685 = phi %"class.sh::TVariable"** [ %574, %591 ], [ %574, %584 ], [ %608, %682 ]
  %686 = phi %"class.sh::TVariable"** [ %582, %591 ], [ %582, %584 ], [ %610, %682 ]
  %687 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %686, i64 -1
  %688 = ptrtoint %"class.sh::TVariable"** %687 to i64
  %689 = sub i64 %688, %581
  %690 = lshr i64 %689, 3
  %691 = add nuw nsw i64 %690, 1
  %692 = and i64 %691, 7
  %693 = icmp eq i64 %692, 0
  br i1 %693, label %705, label %694

694:                                              ; preds = %684, %694
  %695 = phi %"class.sh::TVariable"** [ %698, %694 ], [ %685, %684 ]
  %696 = phi %"class.sh::TVariable"** [ %699, %694 ], [ %686, %684 ]
  %697 = phi i64 [ %703, %694 ], [ %692, %684 ]
  %698 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %695, i64 -1
  %699 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %696, i64 -1
  %700 = bitcast %"class.sh::TVariable"** %699 to i64*
  %701 = load i64, i64* %700, align 8
  %702 = bitcast %"class.sh::TVariable"** %698 to i64*
  store i64 %701, i64* %702, align 8
  %703 = add i64 %697, -1
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %705, label %694, !llvm.loop !19

705:                                              ; preds = %694, %684
  %706 = phi %"class.sh::TVariable"** [ undef, %684 ], [ %698, %694 ]
  %707 = phi %"class.sh::TVariable"** [ %685, %684 ], [ %698, %694 ]
  %708 = phi %"class.sh::TVariable"** [ %686, %684 ], [ %699, %694 ]
  %709 = icmp ult i64 %689, 56
  br i1 %709, label %754, label %710

710:                                              ; preds = %705, %710
  %711 = phi %"class.sh::TVariable"** [ %748, %710 ], [ %707, %705 ]
  %712 = phi %"class.sh::TVariable"** [ %749, %710 ], [ %708, %705 ]
  %713 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -1
  %714 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -1
  %715 = bitcast %"class.sh::TVariable"** %714 to i64*
  %716 = load i64, i64* %715, align 8
  %717 = bitcast %"class.sh::TVariable"** %713 to i64*
  store i64 %716, i64* %717, align 8
  %718 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -2
  %719 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -2
  %720 = bitcast %"class.sh::TVariable"** %719 to i64*
  %721 = load i64, i64* %720, align 8
  %722 = bitcast %"class.sh::TVariable"** %718 to i64*
  store i64 %721, i64* %722, align 8
  %723 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -3
  %724 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -3
  %725 = bitcast %"class.sh::TVariable"** %724 to i64*
  %726 = load i64, i64* %725, align 8
  %727 = bitcast %"class.sh::TVariable"** %723 to i64*
  store i64 %726, i64* %727, align 8
  %728 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -4
  %729 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -4
  %730 = bitcast %"class.sh::TVariable"** %729 to i64*
  %731 = load i64, i64* %730, align 8
  %732 = bitcast %"class.sh::TVariable"** %728 to i64*
  store i64 %731, i64* %732, align 8
  %733 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -5
  %734 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -5
  %735 = bitcast %"class.sh::TVariable"** %734 to i64*
  %736 = load i64, i64* %735, align 8
  %737 = bitcast %"class.sh::TVariable"** %733 to i64*
  store i64 %736, i64* %737, align 8
  %738 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -6
  %739 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -6
  %740 = bitcast %"class.sh::TVariable"** %739 to i64*
  %741 = load i64, i64* %740, align 8
  %742 = bitcast %"class.sh::TVariable"** %738 to i64*
  store i64 %741, i64* %742, align 8
  %743 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -7
  %744 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -7
  %745 = bitcast %"class.sh::TVariable"** %744 to i64*
  %746 = load i64, i64* %745, align 8
  %747 = bitcast %"class.sh::TVariable"** %743 to i64*
  store i64 %746, i64* %747, align 8
  %748 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %711, i64 -8
  %749 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %712, i64 -8
  %750 = bitcast %"class.sh::TVariable"** %749 to i64*
  %751 = load i64, i64* %750, align 8
  %752 = bitcast %"class.sh::TVariable"** %748 to i64*
  store i64 %751, i64* %752, align 8
  %753 = icmp eq %"class.sh::TVariable"** %749, %580
  br i1 %753, label %754, label %710, !llvm.loop !20

754:                                              ; preds = %705, %710, %682, %571
  %755 = phi %"class.sh::TVariable"** [ %574, %571 ], [ %608, %682 ], [ %706, %705 ], [ %748, %710 ]
  %756 = ptrtoint %"class.sh::TVariable"** %755 to i64
  store i64 %756, i64* %198, align 8
  store i64 %579, i64* %197, align 8
  store i64 %576, i64* %199, align 8
  br label %757

757:                                              ; preds = %754, %543, %278, %274, %265, %250, %241
  %758 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %242, i64 1
  %759 = icmp eq %"class.sh::TIntermNode"** %758, %186
  br i1 %759, label %200, label %241

760:                                              ; preds = %878, %218
  %761 = bitcast %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %761) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %761, i8 -86, i64 160, i1 false) #9
  %762 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %32, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %762, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #9
  %763 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %32, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %763, align 8
  %764 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %32, i64 0, i32 1
  store %"class.absl::flat_hash_map"* %30, %"class.absl::flat_hash_map"** %764, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %2, %"class.sh::TIntermTraverser"* nonnull %762) #9
  %765 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %766 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %762, %"class.sh::TCompiler"* %49, %"class.sh::TIntermNode"* %765) #9
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %762) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %761) #9
  %767 = load i64, i64* %227, align 8
  %768 = icmp eq i64 %767, 0
  br i1 %768, label %771, label %769

769:                                              ; preds = %760
  %770 = load i8*, i8** %225, align 8
  call void @_ZdlPv(i8* %770) #16
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %225, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %228, i8 0, i64 32, i1 false) #9
  br label %771

771:                                              ; preds = %769, %760
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %224) #9
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %201) #9
  %772 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %175, align 8
  %773 = icmp eq %"class.sh::TVariable"** %772, null
  br i1 %773, label %887, label %774

774:                                              ; preds = %771
  %775 = ptrtoint %"class.sh::TVariable"** %772 to i64
  store i64 %775, i64* %229, align 8
  br label %887

776:                                              ; preds = %878, %234
  %777 = phi i64 [ %232, %234 ], [ %883, %878 ]
  %778 = phi i64 [ 0, %234 ], [ %881, %878 ]
  %779 = inttoptr i64 %777 to %"class.sh::TVariable"**
  %780 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %779, i64 %778
  %781 = bitcast %"class.sh::TVariable"** %780 to i64*
  %782 = load i64, i64* %781, align 8
  %783 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %784 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %783, i64 184) #9
  %785 = bitcast i8* %784 to %"class.sh::TType"*
  %786 = inttoptr i64 %782 to %"class.sh::TVariable"*
  %787 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %786, i64 0, i32 1
  %788 = load %"class.sh::TType"*, %"class.sh::TType"** %787, align 8
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %785, %"class.sh::TType"* dereferenceable(184) %788) #9
  %789 = getelementptr inbounds i8, i8* %784, i64 4
  %790 = bitcast i8* %789 to i32*
  store i32 0, i32* %790, align 4
  %791 = load %"class.sh::TType"*, %"class.sh::TType"** %235, align 8
  %792 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %791, i64 0, i32 12
  %793 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %792, align 8
  call void @_ZN2sh5TType22setInterfaceBlockFieldEPKNS_15TInterfaceBlockEm(%"class.sh::TType"* %785, %"class.sh::TInterfaceBlock"* %793, i64 %778) #9
  %794 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %795 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %794, i64 40) #9
  %796 = bitcast i8* %795 to %"class.sh::TVariable"*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %236) #9
  %797 = inttoptr i64 %782 to %"class.sh::TSymbol"*
  %798 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %797) #9
  %799 = extractvalue { i8*, i64 } %798, 0
  store i8* %799, i8** %237, align 8
  %800 = extractvalue { i8*, i64 } %798, 1
  store i64 %800, i64* %238, align 8
  %801 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %797, i64 0, i32 2
  %802 = load i8, i8* %801, align 4
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %796, %"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %31, %"class.sh::TType"* %785, i8 zeroext %802, i8 zeroext 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %236) #9
  %803 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %804 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %803, i64 32) #9
  %805 = bitcast i8* %804 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %805, %"class.sh::TVariable"* %796) #9
  %806 = add i64 %782, %240
  %807 = zext i64 %806 to i128
  %808 = mul nuw i128 %807, 11376068507788127593
  %809 = lshr i128 %808, 64
  %810 = xor i128 %809, %808
  %811 = trunc i128 %810 to i64
  %812 = add i64 %782, %811
  %813 = zext i64 %812 to i128
  %814 = mul nuw i128 %813, 11376068507788127593
  %815 = lshr i128 %814, 64
  %816 = xor i128 %815, %814
  %817 = trunc i128 %816 to i64
  %818 = load i8*, i8** %225, align 8
  %819 = load i64, i64* %227, align 8
  %820 = lshr i64 %817, 7
  %821 = ptrtoint i8* %818 to i64
  %822 = lshr i64 %821, 12
  %823 = xor i64 %822, %820
  %824 = trunc i128 %816 to i8
  %825 = and i8 %824, 127
  %826 = insertelement <16 x i8> undef, i8 %825, i32 0
  %827 = shufflevector <16 x i8> %826, <16 x i8> undef, <16 x i32> zeroinitializer
  %828 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %226, align 8
  br label %829

829:                                              ; preds = %858, %776
  %830 = phi i64 [ %823, %776 ], [ %860, %858 ]
  %831 = phi i64 [ 0, %776 ], [ %859, %858 ]
  %832 = and i64 %830, %819
  %833 = getelementptr inbounds i8, i8* %818, i64 %832
  %834 = bitcast i8* %833 to <16 x i8>*
  %835 = load <16 x i8>, <16 x i8>* %834, align 1
  %836 = icmp eq <16 x i8> %827, %835
  %837 = bitcast <16 x i1> %836 to i16
  %838 = icmp eq i16 %837, 0
  br i1 %838, label %854, label %839

839:                                              ; preds = %829
  %840 = zext i16 %837 to i32
  br label %841

841:                                              ; preds = %850, %839
  %842 = phi i32 [ %840, %839 ], [ %852, %850 ]
  %843 = call i32 @llvm.cttz.i32(i32 %842, i1 false) #9, !range !21
  %844 = zext i32 %843 to i64
  %845 = add i64 %832, %844
  %846 = and i64 %845, %819
  %847 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %828, i64 %846, i32 0, i32 0
  %848 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %847, align 8
  %849 = icmp eq %"class.sh::TVariable"* %848, %786
  br i1 %849, label %869, label %850, !prof !22

850:                                              ; preds = %841
  %851 = add i32 %842, -1
  %852 = and i32 %851, %842
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %854, label %841

854:                                              ; preds = %850, %829
  %855 = icmp eq <16 x i8> %835, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %856 = bitcast <16 x i1> %855 to i16
  %857 = icmp eq i16 %856, 0
  br i1 %857, label %858, label %861, !prof !23

858:                                              ; preds = %854
  %859 = add i64 %831, 16
  %860 = add i64 %859, %832
  br label %829

861:                                              ; preds = %854
  %862 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* nonnull %239, i64 %817) #9
  %863 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %226, align 8, !noalias !24
  %864 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %863, i64 %862
  %865 = bitcast %"union.absl::container_internal::map_slot_type"* %864 to i64*
  store i64 %782, i64* %865, align 8, !noalias !24
  %866 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %863, i64 %862, i32 0, i32 1
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %866, align 8, !noalias !24
  %867 = load i8*, i8** %225, align 8, !noalias !24
  %868 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %226, align 8, !noalias !24
  br label %869

869:                                              ; preds = %841, %861
  %870 = phi %"union.absl::container_internal::map_slot_type"* [ %868, %861 ], [ %828, %841 ]
  %871 = phi i8* [ %867, %861 ], [ %818, %841 ]
  %872 = phi i64 [ %862, %861 ], [ %846, %841 ]
  %873 = getelementptr inbounds i8, i8* %871, i64 %872
  %874 = icmp ne i8* %873, null
  call void @llvm.assume(i1 %874) #9, !noalias !24
  %875 = load i8, i8* %873, align 1
  %876 = icmp sgt i8 %875, -1
  br i1 %876, label %878, label %877, !prof !22

877:                                              ; preds = %869
  call void @llvm.trap() #9
  unreachable

878:                                              ; preds = %869
  %879 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %870, i64 %872, i32 0, i32 1
  %880 = bitcast %"class.sh::TIntermTyped"** %879 to i8**
  store i8* %804, i8** %880, align 8
  %881 = add nuw i64 %778, 1
  %882 = load i64, i64* %229, align 8
  %883 = load i64, i64* %231, align 8
  %884 = sub i64 %882, %883
  %885 = ashr exact i64 %884, 3
  %886 = icmp ult i64 %881, %885
  br i1 %886, label %776, label %760

887:                                              ; preds = %771, %774
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %174) #9
  br i1 %766, label %888, label %2868

888:                                              ; preds = %887, %166
  %889 = load i32, i32* %50, align 4
  %890 = icmp eq i32 %889, 37305
  br i1 %890, label %891, label %893

891:                                              ; preds = %888
  %892 = call zeroext i1 @_ZN2sh13DriverUniform32addComputeDriverUniformsToShaderEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* %6, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70) #9
  br label %895

893:                                              ; preds = %888
  %894 = call zeroext i1 @_ZN2sh13DriverUniform33addGraphicsDriverUniformsToShaderEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* %6, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70) #9
  br label %895

895:                                              ; preds = %893, %891
  %896 = icmp sgt i32 %67, 0
  br i1 %896, label %897, label %899

897:                                              ; preds = %895
  %898 = call zeroext i1 @_ZN2sh17RewriteR32fImagesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70) #9
  br i1 %898, label %899, label %2868

899:                                              ; preds = %897, %895
  %900 = icmp sgt i32 %66, 0
  br i1 %900, label %901, label %905

901:                                              ; preds = %899
  %902 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform19getAbcBufferOffsetsEv(%"class.sh::DriverUniform"* %6) #9
  %903 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %902, i64 0, i32 0, i32 0, i32 0
  %904 = call zeroext i1 @_ZN2sh21RewriteAtomicCountersEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.sh::TIntermTyped"* %903) #9
  br i1 %904, label %911, label %2868

905:                                              ; preds = %899
  %906 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 25
  %907 = load i32, i32* %906, align 8
  %908 = icmp sgt i32 %907, 309
  br i1 %908, label %909, label %911

909:                                              ; preds = %905
  %910 = call zeroext i1 @_ZN2sh27RemoveAtomicCounterBuiltinsEPNS_9TCompilerEPNS_12TIntermBlockE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2) #9
  br i1 %910, label %911, label %2868

911:                                              ; preds = %905, %909, %901
  %912 = icmp eq i8 %168, 5
  br i1 %912, label %1016, label %913

913:                                              ; preds = %911
  %914 = bitcast %"class.sh::ImmutableString"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %914) #9
  %915 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %24, i64 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i64 0, i64 0), i8** %915, align 8
  %916 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %24, i64 0, i32 1
  store i64 13, i64* %916, align 8
  %917 = call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %24, i32 0) #9
  %918 = bitcast %"class.sh::TSymbol"* %917 to %"class.sh::TVariable"*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %914) #9
  %919 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getDepthRangeRefEv(%"class.sh::DriverUniform"* %6) #9
  %920 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %919, i64 0, i32 0, i32 0, i32 0
  %921 = call zeroext i1 @_ZN2sh24ReplaceVariableWithTypedEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TVariable"* %918, %"class.sh::TIntermTyped"* %920) #9
  br i1 %921, label %922, label %2868

922:                                              ; preds = %913
  %923 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %924 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %923, align 8
  %925 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 5, i32 0, i32 1
  %926 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %925, align 8
  %927 = icmp eq %"struct.sh::ShaderVariable"* %924, %926
  br i1 %927, label %960, label %928

928:                                              ; preds = %922, %957
  %929 = phi %"struct.sh::ShaderVariable"* [ %958, %957 ], [ %924, %922 ]
  %930 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %929, i64 0, i32 2
  %931 = bitcast %"class.std::__1::basic_string"* %930 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %932 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %931, i64 0, i32 1, i32 0
  %933 = load i8, i8* %932, align 1
  %934 = icmp slt i8 %933, 0
  %935 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %929, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %936 = load i64, i64* %935, align 8
  %937 = zext i8 %933 to i64
  %938 = select i1 %934, i64 %936, i64 %937
  %939 = icmp eq i64 %938, 15
  br i1 %939, label %940, label %947

940:                                              ; preds = %928
  %941 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %930, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i64 15) #9
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %960, label %943

943:                                              ; preds = %940
  %944 = load i8, i8* %932, align 1
  %945 = load i64, i64* %935, align 8
  %946 = zext i8 %944 to i64
  br label %947

947:                                              ; preds = %943, %928
  %948 = phi i64 [ %946, %943 ], [ %937, %928 ]
  %949 = phi i64 [ %945, %943 ], [ %936, %928 ]
  %950 = phi i8 [ %944, %943 ], [ %933, %928 ]
  %951 = icmp slt i8 %950, 0
  %952 = select i1 %951, i64 %949, i64 %948
  %953 = icmp eq i64 %952, 15
  br i1 %953, label %954, label %957

954:                                              ; preds = %947
  %955 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %930, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 15) #9
  %956 = icmp eq i32 %955, 0
  br i1 %956, label %960, label %957

957:                                              ; preds = %947, %954
  %958 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %929, i64 1
  %959 = icmp eq %"struct.sh::ShaderVariable"* %958, %926
  br i1 %959, label %960, label %928

960:                                              ; preds = %940, %954, %957, %922
  %961 = phi i8 [ 0, %922 ], [ 0, %957 ], [ 0, %954 ], [ 1, %940 ]
  %962 = phi i8 [ 0, %922 ], [ 0, %957 ], [ 1, %954 ], [ 0, %940 ]
  %963 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 4, i32 0, i32 0
  %964 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %963, align 8
  %965 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 4, i32 0, i32 1
  %966 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %965, align 8
  %967 = icmp eq %"struct.sh::ShaderVariable"* %964, %966
  br i1 %967, label %1000, label %968

968:                                              ; preds = %960, %997
  %969 = phi %"struct.sh::ShaderVariable"* [ %998, %997 ], [ %964, %960 ]
  %970 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %969, i64 0, i32 2
  %971 = bitcast %"class.std::__1::basic_string"* %970 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %972 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %971, i64 0, i32 1, i32 0
  %973 = load i8, i8* %972, align 1
  %974 = icmp slt i8 %973, 0
  %975 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %969, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %976 = load i64, i64* %975, align 8
  %977 = zext i8 %973 to i64
  %978 = select i1 %974, i64 %976, i64 %977
  %979 = icmp eq i64 %978, 15
  br i1 %979, label %980, label %987

980:                                              ; preds = %968
  %981 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %970, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i64 15) #9
  %982 = icmp eq i32 %981, 0
  br i1 %982, label %1003, label %983

983:                                              ; preds = %980
  %984 = load i8, i8* %972, align 1
  %985 = load i64, i64* %975, align 8
  %986 = zext i8 %984 to i64
  br label %987

987:                                              ; preds = %983, %968
  %988 = phi i64 [ %986, %983 ], [ %977, %968 ]
  %989 = phi i64 [ %985, %983 ], [ %976, %968 ]
  %990 = phi i8 [ %984, %983 ], [ %973, %968 ]
  %991 = icmp slt i8 %990, 0
  %992 = select i1 %991, i64 %989, i64 %988
  %993 = icmp eq i64 %992, 15
  br i1 %993, label %994, label %997

994:                                              ; preds = %987
  %995 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %970, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 15) #9
  %996 = icmp eq i32 %995, 0
  br i1 %996, label %1000, label %997

997:                                              ; preds = %987, %994
  %998 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %969, i64 1
  %999 = icmp eq %"struct.sh::ShaderVariable"* %998, %966
  br i1 %999, label %1000, label %968

1000:                                             ; preds = %994, %997, %960
  %1001 = phi i8 [ %962, %960 ], [ %962, %997 ], [ 1, %994 ]
  %1002 = icmp eq i8 %961, 0
  br i1 %1002, label %1009, label %1003

1003:                                             ; preds = %980, %1000
  %1004 = phi i8 [ %1001, %1000 ], [ %962, %980 ]
  %1005 = load i32, i32* %50, align 4
  %1006 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform23getClipDistancesEnabledEv(%"class.sh::DriverUniform"* %6) #9
  %1007 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1006, i64 0, i32 0, i32 0, i32 0
  %1008 = call zeroext i1 @_ZN2sh30ReplaceClipDistanceAssignmentsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEjPKNS_12TIntermTypedE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i32 %1005, %"class.sh::TIntermTyped"* %1007) #9
  br i1 %1008, label %1009, label %2868

1009:                                             ; preds = %1000, %1003
  %1010 = phi i8 [ %1001, %1000 ], [ %1004, %1003 ]
  %1011 = and i8 %1010, 1
  %1012 = icmp eq i8 %1011, 0
  br i1 %1012, label %1016, label %1013

1013:                                             ; preds = %1009
  %1014 = load i32, i32* %50, align 4
  %1015 = call zeroext i1 @_ZN2sh30ReplaceCullDistanceAssignmentsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEj(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i32 %1014) #9
  br i1 %1015, label %1016, label %2868

1016:                                             ; preds = %1009, %1013, %911
  %1017 = call zeroext i1 @_ZN2gl35ShaderTypeSupportsTransformFeedbackENS_10ShaderTypeE(i8 zeroext %168) #9
  %1018 = xor i1 %1017, true
  %1019 = and i64 %3, 72057594037927936
  %1020 = icmp eq i64 %1019, 0
  %1021 = or i1 %1020, %1018
  br i1 %1021, label %1077, label %1022

1022:                                             ; preds = %1016
  %1023 = load i32, i32* %50, align 4
  switch i32 %1023, label %1027 [
    i32 35633, label %1024
    i32 36487, label %1025
    i32 36313, label %1026
  ]

1024:                                             ; preds = %1022
  br label %1027

1025:                                             ; preds = %1022
  br label %1027

1026:                                             ; preds = %1022
  br label %1027

1027:                                             ; preds = %1026, %1025, %1024, %1022
  %1028 = phi %"class.sh::TType"* [ null, %1022 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE73ELh4ELh1EEE to %"class.sh::TType"*), %1026 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE89ELh4ELh1EEE to %"class.sh::TType"*), %1025 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE3ELNS_10TQualifierE11ELh4ELh1EEE to %"class.sh::TType"*), %1024 ]
  %1029 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1030 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1029, i64 40) #9
  %1031 = bitcast %"class.sh::ImmutableString"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1031) #9
  %1032 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %22, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk28kXfbExtensionPositionOutNameE, i64 0, i64 0), i8** %1032, align 8
  br label %1033

1033:                                             ; preds = %1033, %1027
  %1034 = phi i64 [ %1038, %1033 ], [ 0, %1027 ]
  %1035 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk28kXfbExtensionPositionOutNameE, i64 0, i64 %1034
  %1036 = load i8, i8* %1035, align 1
  %1037 = icmp eq i8 %1036, 0
  %1038 = add i64 %1034, 1
  br i1 %1037, label %1039, label %1033

1039:                                             ; preds = %1033
  %1040 = bitcast i8* %1030 to %"class.sh::TVariable"*
  %1041 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %22, i64 0, i32 1
  store i64 %1034, i64* %1041, align 8
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %1040, %"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %22, %"class.sh::TType"* %1028, i8 zeroext 2, i8 zeroext 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1031) #9
  %1042 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1043 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1042, i64 56) #9
  %1044 = bitcast i8* %1043 to %"class.sh::TIntermDeclaration"*
  %1045 = bitcast i8* %1043 to i32 (...)***
  %1046 = getelementptr inbounds i8, i8* %1043, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1046, i8 0, i64 16, i1 false) #9
  %1047 = getelementptr inbounds i8, i8* %1043, i64 24
  %1048 = bitcast i8* %1047 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1045, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1048, align 8
  %1049 = getelementptr inbounds i8, i8* %1043, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1049, i8 0, i64 24, i1 false) #9
  %1050 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1051 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1050, i64 32) #9
  %1052 = bitcast i8* %1051 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1052, %"class.sh::TVariable"* %1040) #9
  %1053 = bitcast i8* %1051 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %1044, %"class.sh::TIntermTyped"* %1053) #9
  %1054 = call i64 @_ZN2sh32FindFirstFunctionDefinitionIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %1055 = bitcast %"class.sh::TVector.45"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1055) #9
  %1056 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1057 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1056, i64 8) #9
  %1058 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %23, i64 0, i32 0, i32 0, i32 1
  %1059 = bitcast %"class.sh::TVector.45"* %23 to i8**
  store i8* %1057, i8** %1059, align 8
  %1060 = getelementptr inbounds i8, i8* %1057, i64 8
  %1061 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %23, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1062 = bitcast %"class.sh::TIntermNode"*** %1061 to i8**
  store i8* %1060, i8** %1062, align 8
  %1063 = bitcast i8* %1057 to i64*
  %1064 = ptrtoint i8* %1043 to i64
  store i64 %1064, i64* %1063, align 8
  %1065 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 1
  %1066 = bitcast %"class.sh::TIntermNode"*** %1058 to i64*
  %1067 = ptrtoint i8* %1060 to i64
  store i64 %1067, i64* %1066, align 8
  %1068 = call zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"* %1065, i64 %1054, %"class.sh::TVector.45"* nonnull dereferenceable(24) %23) #9
  %1069 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %23, i64 0, i32 0, i32 0, i32 0
  %1070 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1069, align 8
  %1071 = icmp eq %"class.sh::TIntermNode"** %1070, null
  br i1 %1071, label %1074, label %1072

1072:                                             ; preds = %1039
  %1073 = ptrtoint %"class.sh::TIntermNode"** %1070 to i64
  store i64 %1073, i64* %1066, align 8
  br label %1074

1074:                                             ; preds = %1039, %1072
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1055) #9
  %1075 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %1076 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermNode"* %1075) #9
  br i1 %1076, label %1077, label %2868

1077:                                             ; preds = %1016, %1074
  switch i8 %168, label %2862 [
    i8 4, label %1078
    i8 0, label %1760
    i8 3, label %2838
    i8 1, label %2849
    i8 2, label %2852
    i8 5, label %2861
  ]

1078:                                             ; preds = %1077
  %1079 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 4, i32 0, i32 0
  %1080 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %1079, align 8
  %1081 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 4, i32 0, i32 1
  %1082 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %1081, align 8
  %1083 = icmp eq %"struct.sh::ShaderVariable"* %1080, %1082
  br i1 %1083, label %1164, label %1084

1084:                                             ; preds = %1078, %1159
  %1085 = phi i8 [ %1161, %1159 ], [ 0, %1078 ]
  %1086 = phi i8 [ %1160, %1159 ], [ 0, %1078 ]
  %1087 = phi %"struct.sh::ShaderVariable"* [ %1162, %1159 ], [ %1080, %1078 ]
  %1088 = call zeroext i1 @_ZNK2sh14ShaderVariable9isBuiltInEv(%"struct.sh::ShaderVariable"* %1087) #9
  br i1 %1088, label %1089, label %1159

1089:                                             ; preds = %1084
  %1090 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %1087, i64 0, i32 2
  %1091 = bitcast %"class.std::__1::basic_string"* %1090 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %1092 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %1091, i64 0, i32 1, i32 0
  %1093 = load i8, i8* %1092, align 1
  %1094 = icmp slt i8 %1093, 0
  %1095 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %1087, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1096 = load i64, i64* %1095, align 8
  %1097 = zext i8 %1093 to i64
  %1098 = select i1 %1094, i64 %1096, i64 %1097
  %1099 = icmp eq i64 %1098, 15
  br i1 %1099, label %1100, label %1107

1100:                                             ; preds = %1089
  %1101 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1090, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 15) #9
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1159, label %1103

1103:                                             ; preds = %1100
  %1104 = load i8, i8* %1092, align 1
  %1105 = load i64, i64* %1095, align 8
  %1106 = zext i8 %1104 to i64
  br label %1107

1107:                                             ; preds = %1103, %1089
  %1108 = phi i64 [ %1106, %1103 ], [ %1097, %1089 ]
  %1109 = phi i64 [ %1105, %1103 ], [ %1096, %1089 ]
  %1110 = phi i8 [ %1104, %1103 ], [ %1093, %1089 ]
  %1111 = icmp slt i8 %1110, 0
  %1112 = select i1 %1111, i64 %1109, i64 %1108
  %1113 = icmp eq i64 %1112, 17
  br i1 %1113, label %1114, label %1121

1114:                                             ; preds = %1107
  %1115 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1090, i64 0, i64 -1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i64 17) #9
  %1116 = icmp eq i32 %1115, 0
  br i1 %1116, label %1159, label %1117

1117:                                             ; preds = %1114
  %1118 = load i8, i8* %1092, align 1
  %1119 = load i64, i64* %1095, align 8
  %1120 = zext i8 %1118 to i64
  br label %1121

1121:                                             ; preds = %1117, %1107
  %1122 = phi i64 [ %1120, %1117 ], [ %1108, %1107 ]
  %1123 = phi i64 [ %1119, %1117 ], [ %1109, %1107 ]
  %1124 = phi i8 [ %1118, %1117 ], [ %1110, %1107 ]
  %1125 = icmp slt i8 %1124, 0
  %1126 = select i1 %1125, i64 %1123, i64 %1122
  %1127 = icmp eq i64 %1126, 13
  br i1 %1127, label %1128, label %1135

1128:                                             ; preds = %1121
  %1129 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1090, i64 0, i64 -1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i64 13) #9
  %1130 = icmp eq i32 %1129, 0
  br i1 %1130, label %1164, label %1131

1131:                                             ; preds = %1128
  %1132 = load i8, i8* %1092, align 1
  %1133 = load i64, i64* %1095, align 8
  %1134 = zext i8 %1132 to i64
  br label %1135

1135:                                             ; preds = %1131, %1121
  %1136 = phi i64 [ %1134, %1131 ], [ %1122, %1121 ]
  %1137 = phi i64 [ %1133, %1131 ], [ %1123, %1121 ]
  %1138 = phi i8 [ %1132, %1131 ], [ %1124, %1121 ]
  %1139 = icmp slt i8 %1138, 0
  %1140 = select i1 %1139, i64 %1137, i64 %1136
  %1141 = icmp eq i64 %1140, 12
  br i1 %1141, label %1142, label %1149

1142:                                             ; preds = %1135
  %1143 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1090, i64 0, i64 -1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i64 12) #9
  %1144 = icmp eq i32 %1143, 0
  br i1 %1144, label %1164, label %1145

1145:                                             ; preds = %1142
  %1146 = load i8, i8* %1092, align 1
  %1147 = load i64, i64* %1095, align 8
  %1148 = zext i8 %1146 to i64
  br label %1149

1149:                                             ; preds = %1145, %1135
  %1150 = phi i64 [ %1148, %1145 ], [ %1136, %1135 ]
  %1151 = phi i64 [ %1147, %1145 ], [ %1137, %1135 ]
  %1152 = phi i8 [ %1146, %1145 ], [ %1138, %1135 ]
  %1153 = icmp slt i8 %1152, 0
  %1154 = select i1 %1153, i64 %1151, i64 %1150
  %1155 = icmp eq i64 %1154, 15
  br i1 %1155, label %1156, label %1159

1156:                                             ; preds = %1149
  %1157 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1090, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i64 15) #9
  %1158 = icmp eq i32 %1157, 0
  br i1 %1158, label %1164, label %1159

1159:                                             ; preds = %1149, %1156, %1084, %1100, %1114
  %1160 = phi i8 [ %1086, %1114 ], [ 1, %1100 ], [ %1086, %1084 ], [ %1086, %1156 ], [ %1086, %1149 ]
  %1161 = phi i8 [ 1, %1114 ], [ %1085, %1100 ], [ %1085, %1084 ], [ %1085, %1156 ], [ %1085, %1149 ]
  %1162 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %1087, i64 1
  %1163 = icmp eq %"struct.sh::ShaderVariable"* %1162, %1082
  br i1 %1163, label %1164, label %1084

1164:                                             ; preds = %1156, %1142, %1128, %1159, %1078
  %1165 = phi i8 [ 0, %1078 ], [ %1160, %1159 ], [ %1086, %1128 ], [ %1086, %1142 ], [ %1086, %1156 ]
  %1166 = phi i8 [ 0, %1078 ], [ %1161, %1159 ], [ %1085, %1128 ], [ %1085, %1142 ], [ %1085, %1156 ]
  %1167 = phi i8 [ 0, %1078 ], [ 0, %1159 ], [ 1, %1128 ], [ 0, %1142 ], [ 0, %1156 ]
  %1168 = phi i8 [ 0, %1078 ], [ 0, %1159 ], [ 0, %1128 ], [ 1, %1142 ], [ 0, %1156 ]
  %1169 = phi i8 [ 0, %1078 ], [ 0, %1159 ], [ 0, %1128 ], [ 0, %1142 ], [ 1, %1156 ]
  %1170 = and i64 %3, 140737488355328
  %1171 = icmp eq i64 %1170, 0
  br i1 %1171, label %1515, label %1172

1172:                                             ; preds = %1164
  %1173 = icmp eq i8 %1168, 0
  %1174 = call fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_134AddANGLEPositionVaryingDeclarationEPNS_12TIntermBlockEPNS_12TSymbolTableENS_10TQualifierE(%"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i32 4) #9
  %1175 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform14getViewportRefEv(%"class.sh::DriverUniform"* %6) #9
  %1176 = bitcast %"class.sh::TIntermBinary"* %1175 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)***
  %1177 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)*** %1176, align 8
  %1178 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)** %1177, i64 23
  %1179 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)** %1178, align 8
  %1180 = call %"class.sh::TIntermTyped"* %1179(%"class.sh::TIntermBinary"* %1175) #9
  %1181 = bitcast %"class.sh::TVector.209"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1181) #9
  %1182 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %19, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1181, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %19, i32 0, i32 1) #9
  %1183 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1184 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1183, i64 248) #9
  %1185 = bitcast i8* %1184 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1185, %"class.sh::TIntermTyped"* %1180, %"class.sh::TVector.209"* nonnull dereferenceable(24) %19) #9
  %1186 = load i32*, i32** %1182, align 8
  %1187 = icmp eq i32* %1186, null
  br i1 %1187, label %1192, label %1188

1188:                                             ; preds = %1172
  %1189 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %19, i64 0, i32 0, i32 0, i32 1
  %1190 = ptrtoint i32* %1186 to i64
  %1191 = bitcast i32** %1189 to i64*
  store i64 %1190, i64* %1191, align 8
  br label %1192

1192:                                             ; preds = %1188, %1172
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1181) #9
  %1193 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1175, i64 0, i32 0, i32 0, i32 0
  %1194 = bitcast %"class.sh::TVector.209"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1194) #9
  %1195 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %18, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1194, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %18, i32 2, i32 3) #9
  %1196 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1197 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1196, i64 248) #9
  %1198 = bitcast i8* %1197 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1198, %"class.sh::TIntermTyped"* %1193, %"class.sh::TVector.209"* nonnull dereferenceable(24) %18) #9
  %1199 = load i32*, i32** %1195, align 8
  %1200 = icmp eq i32* %1199, null
  br i1 %1200, label %1205, label %1201

1201:                                             ; preds = %1192
  %1202 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %18, i64 0, i32 0, i32 0, i32 1
  %1203 = ptrtoint i32* %1199 to i64
  %1204 = bitcast i32** %1202 to i64*
  store i64 %1203, i64* %1204, align 8
  br label %1205

1205:                                             ; preds = %1201, %1192
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1194) #9
  %1206 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1207 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1206, i64 32) #9
  %1208 = bitcast i8* %1207 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1208, %"class.sh::TVariable"* %1174) #9
  %1209 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 5.000000e-01) #9
  %1210 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1211 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1210, i64 240) #9
  %1212 = bitcast i8* %1211 to %"class.sh::TIntermBinary"*
  %1213 = bitcast i8* %1207 to %"class.sh::TIntermTyped"*
  %1214 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1209, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1212, i8 zeroext 31, %"class.sh::TIntermTyped"* %1213, %"class.sh::TIntermTyped"* %1214) #9
  %1215 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1216 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1215, i64 240) #9
  %1217 = bitcast i8* %1216 to %"class.sh::TIntermBinary"*
  %1218 = bitcast i8* %1211 to %"class.sh::TIntermTyped"*
  %1219 = bitcast %"class.sh::TIntermConstantUnion"* %1209 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)***
  %1220 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*** %1219, align 8
  %1221 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %1220, i64 23
  %1222 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %1221, align 8
  %1223 = call %"class.sh::TIntermTyped"* %1222(%"class.sh::TIntermConstantUnion"* %1209) #9
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1217, i8 zeroext 13, %"class.sh::TIntermTyped"* %1218, %"class.sh::TIntermTyped"* %1223) #9
  %1224 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1225 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1224, i64 240) #9
  %1226 = bitcast i8* %1225 to %"class.sh::TIntermBinary"*
  %1227 = bitcast i8* %1216 to %"class.sh::TIntermTyped"*
  %1228 = bitcast i8* %1197 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1226, i8 zeroext 15, %"class.sh::TIntermTyped"* %1227, %"class.sh::TIntermTyped"* %1228) #9
  %1229 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1230 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1229, i64 240) #9
  %1231 = bitcast i8* %1230 to %"class.sh::TIntermBinary"*
  %1232 = bitcast i8* %1225 to %"class.sh::TIntermTyped"*
  %1233 = bitcast i8* %1184 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1231, i8 zeroext 13, %"class.sh::TIntermTyped"* %1232, %"class.sh::TIntermTyped"* %1233) #9
  %1234 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1235 = bitcast i8* %1230 to %"class.sh::TIntermTyped"*
  %1236 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1234, %"class.sh::TIntermTyped"* %1235) #9
  %1237 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1238 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1237, i64 240) #9
  %1239 = bitcast i8* %1238 to %"class.sh::TIntermUnary"*
  %1240 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1241 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1240, i64 32) #9
  %1242 = bitcast i8* %1241 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1242, %"class.sh::TVariable"* %1234) #9
  %1243 = bitcast i8* %1241 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %1239, i8 zeroext 112, %"class.sh::TIntermTyped"* %1243, %"class.sh::TFunction"* null) #9
  %1244 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1245 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1244, i64 240) #9
  %1246 = bitcast i8* %1245 to %"class.sh::TIntermUnary"*
  %1247 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1248 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1247, i64 32) #9
  %1249 = bitcast i8* %1248 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1249, %"class.sh::TVariable"* %1234) #9
  %1250 = bitcast i8* %1248 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %1246, i8 zeroext 113, %"class.sh::TIntermTyped"* %1250, %"class.sh::TFunction"* null) #9
  %1251 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1252 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1251, i64 240) #9
  %1253 = bitcast i8* %1252 to %"class.sh::TIntermBinary"*
  %1254 = bitcast i8* %1238 to %"class.sh::TIntermTyped"*
  %1255 = bitcast i8* %1245 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1253, i8 zeroext 13, %"class.sh::TIntermTyped"* %1254, %"class.sh::TIntermTyped"* %1255) #9
  %1256 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1257 = bitcast i8* %1252 to %"class.sh::TIntermTyped"*
  %1258 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1256, %"class.sh::TIntermTyped"* %1257) #9
  %1259 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_FragCoordEv() #9
  %1260 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1261 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1260, i64 32) #9
  %1262 = bitcast i8* %1261 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1262, %"class.sh::TVariable"* %1259) #9
  %1263 = bitcast i8* %1261 to %"class.sh::TIntermTyped"*
  %1264 = bitcast %"class.sh::TVector.209"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1264) #9
  %1265 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %17, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1264, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %17, i32 0, i32 1) #9
  %1266 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1267 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1266, i64 248) #9
  %1268 = bitcast i8* %1267 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1268, %"class.sh::TIntermTyped"* %1263, %"class.sh::TVector.209"* nonnull dereferenceable(24) %17) #9
  %1269 = load i32*, i32** %1265, align 8
  %1270 = icmp eq i32* %1269, null
  br i1 %1270, label %1275, label %1271

1271:                                             ; preds = %1205
  %1272 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %17, i64 0, i32 0, i32 0, i32 1
  %1273 = ptrtoint i32* %1269 to i64
  %1274 = bitcast i32** %1272 to i64*
  store i64 %1273, i64* %1274, align 8
  br label %1275

1275:                                             ; preds = %1271, %1205
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1264) #9
  %1276 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1277 = bitcast i8* %1267 to %"class.sh::TIntermTyped"*
  %1278 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1276, %"class.sh::TIntermTyped"* %1277) #9
  %1279 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1280 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1279, i64 32) #9
  %1281 = bitcast i8* %1280 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1281, %"class.sh::TVariable"* %1234) #9
  %1282 = bitcast i8* %1280 to %"class.sh::TIntermTyped"*
  %1283 = bitcast %"class.sh::TVector.209"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1283) #9
  %1284 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %16, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1283, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %16, i32 1, i32 0) #9
  %1285 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1286 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1285, i64 248) #9
  %1287 = bitcast i8* %1286 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1287, %"class.sh::TIntermTyped"* %1282, %"class.sh::TVector.209"* nonnull dereferenceable(24) %16) #9
  %1288 = load i32*, i32** %1284, align 8
  %1289 = icmp eq i32* %1288, null
  br i1 %1289, label %1294, label %1290

1290:                                             ; preds = %1275
  %1291 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %16, i64 0, i32 0, i32 0, i32 1
  %1292 = ptrtoint i32* %1288 to i64
  %1293 = bitcast i32** %1291 to i64*
  store i64 %1292, i64* %1293, align 8
  br label %1294

1294:                                             ; preds = %1290, %1275
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1283) #9
  %1295 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1296 = bitcast i8* %1286 to %"class.sh::TIntermTyped"*
  %1297 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1295, %"class.sh::TIntermTyped"* %1296) #9
  %1298 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1299 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1298, i64 32) #9
  %1300 = bitcast i8* %1299 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1300, %"class.sh::TVariable"* %1256) #9
  %1301 = bitcast i8* %1299 to %"class.sh::TIntermTyped"*
  %1302 = bitcast %"class.sh::TVector.209"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1302) #9
  %1303 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %15, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1302, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %15, i32 1, i32 0) #9
  %1304 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1305 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1304, i64 248) #9
  %1306 = bitcast i8* %1305 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1306, %"class.sh::TIntermTyped"* %1301, %"class.sh::TVector.209"* nonnull dereferenceable(24) %15) #9
  %1307 = load i32*, i32** %1303, align 8
  %1308 = icmp eq i32* %1307, null
  br i1 %1308, label %1313, label %1309

1309:                                             ; preds = %1294
  %1310 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %15, i64 0, i32 0, i32 0, i32 1
  %1311 = ptrtoint i32* %1307 to i64
  %1312 = bitcast i32** %1310 to i64*
  store i64 %1311, i64* %1312, align 8
  br label %1313

1313:                                             ; preds = %1309, %1294
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1302) #9
  %1314 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1315 = bitcast i8* %1305 to %"class.sh::TIntermTyped"*
  %1316 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1314, %"class.sh::TIntermTyped"* %1315) #9
  %1317 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1318 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1317, i64 32) #9
  %1319 = bitcast i8* %1318 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1319, %"class.sh::TVariable"* %1276) #9
  %1320 = bitcast i8* %1318 to %"class.sh::TIntermTyped"*
  %1321 = bitcast %"class.sh::TVector.209"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1321) #9
  %1322 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %14, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1321, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %14, i32 1, i32 0) #9
  %1323 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1324 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1323, i64 248) #9
  %1325 = bitcast i8* %1324 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1325, %"class.sh::TIntermTyped"* %1320, %"class.sh::TVector.209"* nonnull dereferenceable(24) %14) #9
  %1326 = load i32*, i32** %1322, align 8
  %1327 = icmp eq i32* %1326, null
  br i1 %1327, label %1332, label %1328

1328:                                             ; preds = %1313
  %1329 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %14, i64 0, i32 0, i32 0, i32 1
  %1330 = ptrtoint i32* %1326 to i64
  %1331 = bitcast i32** %1329 to i64*
  store i64 %1330, i64* %1331, align 8
  br label %1332

1332:                                             ; preds = %1328, %1313
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1321) #9
  %1333 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1334 = bitcast i8* %1324 to %"class.sh::TIntermTyped"*
  %1335 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1333, %"class.sh::TIntermTyped"* %1334) #9
  %1336 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1337 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1336, i64 240) #9
  %1338 = bitcast i8* %1337 to %"class.sh::TIntermBinary"*
  %1339 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1340 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1339, i64 32) #9
  %1341 = bitcast i8* %1340 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1341, %"class.sh::TVariable"* %1256) #9
  %1342 = bitcast i8* %1340 to %"class.sh::TIntermTyped"*
  %1343 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1344 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1343, i64 32) #9
  %1345 = bitcast i8* %1344 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1345, %"class.sh::TVariable"* %1314) #9
  %1346 = bitcast i8* %1344 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1338, i8 zeroext 16, %"class.sh::TIntermTyped"* %1342, %"class.sh::TIntermTyped"* %1346) #9
  %1347 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1348 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1347, i64 240) #9
  %1349 = bitcast i8* %1348 to %"class.sh::TIntermBinary"*
  %1350 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1351 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1350, i64 32) #9
  %1352 = bitcast i8* %1351 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1352, %"class.sh::TVariable"* %1333) #9
  %1353 = bitcast i8* %1351 to %"class.sh::TIntermTyped"*
  %1354 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1355 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1354, i64 32) #9
  %1356 = bitcast i8* %1355 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1356, %"class.sh::TVariable"* %1295) #9
  %1357 = bitcast i8* %1355 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1349, i8 zeroext 14, %"class.sh::TIntermTyped"* %1353, %"class.sh::TIntermTyped"* %1357) #9
  %1358 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1359 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1358, i64 240) #9
  %1360 = bitcast i8* %1359 to %"class.sh::TIntermBinary"*
  %1361 = bitcast i8* %1337 to %"class.sh::TIntermTyped"*
  %1362 = bitcast i8* %1348 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1360, i8 zeroext 15, %"class.sh::TIntermTyped"* %1361, %"class.sh::TIntermTyped"* %1362) #9
  %1363 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1364 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1363, i64 240) #9
  %1365 = bitcast i8* %1364 to %"class.sh::TIntermBinary"*
  %1366 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1367 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1366, i64 32) #9
  %1368 = bitcast i8* %1367 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1368, %"class.sh::TVariable"* %1234) #9
  %1369 = bitcast i8* %1367 to %"class.sh::TIntermTyped"*
  %1370 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1371 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1370, i64 32) #9
  %1372 = bitcast i8* %1371 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1372, %"class.sh::TVariable"* %1276) #9
  %1373 = bitcast i8* %1371 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1365, i8 zeroext 14, %"class.sh::TIntermTyped"* %1369, %"class.sh::TIntermTyped"* %1373) #9
  %1374 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1375 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1374, i64 240) #9
  %1376 = bitcast i8* %1375 to %"class.sh::TIntermBinary"*
  %1377 = bitcast i8* %1364 to %"class.sh::TIntermTyped"*
  %1378 = bitcast i8* %1359 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1376, i8 zeroext 13, %"class.sh::TIntermTyped"* %1377, %"class.sh::TIntermTyped"* %1378) #9
  %1379 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1380 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1379, i64 240) #9
  %1381 = bitcast i8* %1380 to %"class.sh::TIntermUnary"*
  %1382 = bitcast i8* %1375 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %1381, i8 zeroext 69, %"class.sh::TIntermTyped"* %1382, %"class.sh::TFunction"* null) #9
  %1383 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1384 = bitcast i8* %1380 to %"class.sh::TIntermTyped"*
  %1385 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1383, %"class.sh::TIntermTyped"* %1384) #9
  %1386 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 0x3FE000D1C0000000) #9
  %1387 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1388 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1387, i64 32) #9
  %1389 = bitcast i8* %1388 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1389, %"class.sh::TVariable"* %1383) #9
  %1390 = bitcast i8* %1388 to %"class.sh::TIntermTyped"*
  %1391 = bitcast %"class.sh::TVector.209"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1391) #9
  %1392 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %13, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1391, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %13, i32 0) #9
  %1393 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1394 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1393, i64 248) #9
  %1395 = bitcast i8* %1394 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1395, %"class.sh::TIntermTyped"* %1390, %"class.sh::TVector.209"* nonnull dereferenceable(24) %13) #9
  %1396 = load i32*, i32** %1392, align 8
  %1397 = icmp eq i32* %1396, null
  br i1 %1397, label %1402, label %1398

1398:                                             ; preds = %1332
  %1399 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %13, i64 0, i32 0, i32 0, i32 1
  %1400 = ptrtoint i32* %1396 to i64
  %1401 = bitcast i32** %1399 to i64*
  store i64 %1400, i64* %1401, align 8
  br label %1402

1402:                                             ; preds = %1398, %1332
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1391) #9
  %1403 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1404 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1403, i64 240) #9
  %1405 = bitcast i8* %1404 to %"class.sh::TIntermBinary"*
  %1406 = bitcast i8* %1394 to %"class.sh::TIntermTyped"*
  %1407 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1386, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1405, i8 zeroext 21, %"class.sh::TIntermTyped"* %1406, %"class.sh::TIntermTyped"* %1407) #9
  %1408 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1409 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1408, i64 32) #9
  %1410 = bitcast i8* %1409 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1410, %"class.sh::TVariable"* %1383) #9
  %1411 = bitcast i8* %1409 to %"class.sh::TIntermTyped"*
  %1412 = bitcast %"class.sh::TVector.209"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1412) #9
  %1413 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %12, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1412, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %12, i32 1) #9
  %1414 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1415 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1414, i64 248) #9
  %1416 = bitcast i8* %1415 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1416, %"class.sh::TIntermTyped"* %1411, %"class.sh::TVector.209"* nonnull dereferenceable(24) %12) #9
  %1417 = load i32*, i32** %1413, align 8
  %1418 = icmp eq i32* %1417, null
  br i1 %1418, label %1423, label %1419

1419:                                             ; preds = %1402
  %1420 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %12, i64 0, i32 0, i32 0, i32 1
  %1421 = ptrtoint i32* %1417 to i64
  %1422 = bitcast i32** %1420 to i64*
  store i64 %1421, i64* %1422, align 8
  br label %1423

1423:                                             ; preds = %1419, %1402
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1412) #9
  %1424 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1425 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1424, i64 240) #9
  %1426 = bitcast i8* %1425 to %"class.sh::TIntermBinary"*
  %1427 = bitcast i8* %1415 to %"class.sh::TIntermTyped"*
  %1428 = bitcast %"class.sh::TIntermConstantUnion"* %1386 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)***
  %1429 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*** %1428, align 8
  %1430 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %1429, i64 23
  %1431 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %1430, align 8
  %1432 = call %"class.sh::TIntermTyped"* %1431(%"class.sh::TIntermConstantUnion"* %1386) #9
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1426, i8 zeroext 21, %"class.sh::TIntermTyped"* %1427, %"class.sh::TIntermTyped"* %1432) #9
  %1433 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1434 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1433, i64 240) #9
  %1435 = bitcast i8* %1434 to %"class.sh::TIntermBinary"*
  %1436 = bitcast i8* %1404 to %"class.sh::TIntermTyped"*
  %1437 = bitcast i8* %1425 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1435, i8 zeroext 38, %"class.sh::TIntermTyped"* %1436, %"class.sh::TIntermTyped"* %1437) #9
  %1438 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1439 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1438, i64 40) #9
  %1440 = bitcast i8* %1439 to i32 (...)***
  %1441 = getelementptr inbounds i8, i8* %1439, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1441, i8 0, i64 16, i1 false) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermBranchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1440, align 8
  %1442 = getelementptr inbounds i8, i8* %1439, i64 24
  store i8 -123, i8* %1442, align 8
  %1443 = getelementptr inbounds i8, i8* %1439, i64 32
  %1444 = bitcast i8* %1443 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %1444, align 8
  %1445 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1446 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1445, i64 64) #9
  %1447 = bitcast i8* %1446 to %"class.sh::TIntermBlock"*
  %1448 = bitcast i8* %1446 to i32 (...)***
  %1449 = getelementptr inbounds i8, i8* %1446, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1449, i8 0, i64 16, i1 false) #9
  %1450 = getelementptr inbounds i8, i8* %1446, i64 24
  %1451 = bitcast i8* %1450 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1448, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1451, align 8
  %1452 = getelementptr inbounds i8, i8* %1446, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1452, i8 0, i64 25, i1 false) #9
  %1453 = bitcast i8* %1439 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1447, %"class.sh::TIntermNode"* %1453) #9
  %1454 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1455 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1454, i64 48) #9
  %1456 = bitcast i8* %1455 to %"class.sh::TIntermIfElse"*
  %1457 = bitcast i8* %1434 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* %1456, %"class.sh::TIntermTyped"* %1457, %"class.sh::TIntermBlock"* %1447, %"class.sh::TIntermBlock"* null) #9
  %1458 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1459 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1458, i64 64) #9
  %1460 = bitcast i8* %1459 to %"class.sh::TIntermBlock"*
  %1461 = bitcast i8* %1459 to i32 (...)***
  %1462 = getelementptr inbounds i8, i8* %1459, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1462, i8 0, i64 16, i1 false) #9
  %1463 = getelementptr inbounds i8, i8* %1459, i64 24
  %1464 = bitcast i8* %1463 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1461, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1464, align 8
  %1465 = getelementptr inbounds i8, i8* %1459, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1465, i8 0, i64 25, i1 false) #9
  %1466 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)**), align 8
  %1467 = call %"class.sh::TVector.45"* %1466(%"class.sh::TIntermBlock"* %1460) #9
  %1468 = bitcast %"struct.std::__1::array.221"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1468) #9
  %1469 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 0
  %1470 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1236, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1470, %"class.sh::TIntermNode"** %1469, align 8
  %1471 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 1
  %1472 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1258, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1472, %"class.sh::TIntermNode"** %1471, align 8
  %1473 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 2
  %1474 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1278, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1474, %"class.sh::TIntermNode"** %1473, align 8
  %1475 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 3
  %1476 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1297, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1476, %"class.sh::TIntermNode"** %1475, align 8
  %1477 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 4
  %1478 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1316, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1478, %"class.sh::TIntermNode"** %1477, align 8
  %1479 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 5
  %1480 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1335, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1480, %"class.sh::TIntermNode"** %1479, align 8
  %1481 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 6
  %1482 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1385, i64 0, i32 0
  store %"class.sh::TIntermNode"* %1482, %"class.sh::TIntermNode"** %1481, align 8
  %1483 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 7
  %1484 = bitcast %"class.sh::TIntermNode"** %1483 to i8**
  store i8* %1455, i8** %1484, align 8
  %1485 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %1467, i64 0, i32 0
  %1486 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %1467, i64 0, i32 0, i32 0, i32 0
  %1487 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1486, align 8
  %1488 = getelementptr inbounds %"struct.std::__1::array.221", %"struct.std::__1::array.221"* %20, i64 0, i32 0, i64 8
  %1489 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIS8_EEE4typeENSE_IPKS3_EESA_SA_(%"class.std::__1::vector.46"* %1485, %"class.sh::TIntermNode"** %1487, %"class.sh::TIntermNode"** nonnull %1469, %"class.sh::TIntermNode"** %1488) #9
  %1490 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1491 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1490, i64 48) #9
  %1492 = bitcast i8* %1491 to %"class.sh::TIntermIfElse"*
  %1493 = call %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst22getLineRasterEmulationEv(%"class.sh::SpecConst"* %5) #9
  %1494 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1493, i64 0, i32 0
  call void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* %1492, %"class.sh::TIntermTyped"* %1494, %"class.sh::TIntermBlock"* %1460, %"class.sh::TIntermBlock"* null) #9
  %1495 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %1496 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %1495, i64 0, i32 2
  %1497 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1496, align 8
  %1498 = bitcast %"class.sh::TIntermBlock"* %1497 to %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)***
  %1499 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*** %1498, align 8
  %1500 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1499, i64 27
  %1501 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1500, align 8
  %1502 = call %"class.sh::TVector.45"* %1501(%"class.sh::TIntermBlock"* %1497) #9
  %1503 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %1502, i64 0, i32 0
  %1504 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %1502, i64 0, i32 0, i32 0, i32 0
  %1505 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %1504, align 8
  %1506 = bitcast %"class.sh::TIntermNode"** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1506) #9
  %1507 = bitcast %"class.sh::TIntermNode"** %21 to i8**
  store i8* %1491, i8** %1507, align 8
  %1508 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.46"* %1503, %"class.sh::TIntermNode"** %1505, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %21) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1506) #9
  br i1 %1173, label %1509, label %1512

1509:                                             ; preds = %1423
  %1510 = call fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_125InsertFragCoordCorrectionEPNS_9TCompilerEmPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableEPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"* %49, i64 %3, %"class.sh::TIntermBlock"* %2, %"class.sh::TVector.45"* %1467, %"class.sh::TSymbolTable"* %70, %"class.sh::SpecConst"* %5, %"class.sh::DriverUniform"* %6) #9
  br i1 %1510, label %1512, label %1511

1511:                                             ; preds = %1509
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1468) #9
  br label %2868

1512:                                             ; preds = %1423, %1509
  %1513 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %1514 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermNode"* %1513) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1468) #9
  br i1 %1514, label %1515, label %2868

1515:                                             ; preds = %1164, %1512
  %1516 = and i64 %3, 4503599627370496
  %1517 = icmp ne i64 %1516, 0
  %1518 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %1519 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %1518, align 8
  %1520 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %1521 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %1520, align 8
  %1522 = icmp eq %"struct.sh::ShaderVariable"* %1519, %1521
  br i1 %1522, label %1633, label %1526

1523:                                             ; preds = %1603
  %1524 = and i8 %1604, 1
  %1525 = icmp eq i8 %1524, 0
  br i1 %1525, label %1613, label %1611

1526:                                             ; preds = %1515, %1603
  %1527 = phi i8 [ %1608, %1603 ], [ 0, %1515 ]
  %1528 = phi i8 [ %1607, %1603 ], [ 0, %1515 ]
  %1529 = phi i8 [ %1606, %1603 ], [ 0, %1515 ]
  %1530 = phi i8 [ %1605, %1603 ], [ 0, %1515 ]
  %1531 = phi i8 [ %1604, %1603 ], [ 0, %1515 ]
  %1532 = phi %"struct.sh::ShaderVariable"* [ %1609, %1603 ], [ %1519, %1515 ]
  %1533 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %1532, i64 0, i32 2
  %1534 = bitcast %"class.std::__1::basic_string"* %1533 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %1535 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %1534, i64 0, i32 1, i32 0
  %1536 = load i8, i8* %1535, align 1
  %1537 = icmp slt i8 %1536, 0
  %1538 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %1532, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1539 = load i64, i64* %1538, align 8
  %1540 = zext i8 %1536 to i64
  %1541 = select i1 %1537, i64 %1539, i64 %1540
  %1542 = icmp eq i64 %1541, 12
  br i1 %1542, label %1543, label %1550

1543:                                             ; preds = %1526
  %1544 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1533, i64 0, i64 -1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i64 12) #9
  %1545 = icmp eq i32 %1544, 0
  br i1 %1545, label %1603, label %1546

1546:                                             ; preds = %1543
  %1547 = load i8, i8* %1535, align 1
  %1548 = load i64, i64* %1538, align 8
  %1549 = zext i8 %1547 to i64
  br label %1550

1550:                                             ; preds = %1546, %1526
  %1551 = phi i64 [ %1549, %1546 ], [ %1540, %1526 ]
  %1552 = phi i64 [ %1548, %1546 ], [ %1539, %1526 ]
  %1553 = phi i8 [ %1547, %1546 ], [ %1536, %1526 ]
  %1554 = icmp slt i8 %1553, 0
  %1555 = select i1 %1554, i64 %1552, i64 %1551
  %1556 = icmp eq i64 %1555, 11
  br i1 %1556, label %1557, label %1564

1557:                                             ; preds = %1550
  %1558 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1533, i64 0, i64 -1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i64 11) #9
  %1559 = icmp eq i32 %1558, 0
  br i1 %1559, label %1603, label %1560

1560:                                             ; preds = %1557
  %1561 = load i8, i8* %1535, align 1
  %1562 = load i64, i64* %1538, align 8
  %1563 = zext i8 %1561 to i64
  br label %1564

1564:                                             ; preds = %1560, %1550
  %1565 = phi i64 [ %1563, %1560 ], [ %1551, %1550 ]
  %1566 = phi i64 [ %1562, %1560 ], [ %1552, %1550 ]
  %1567 = phi i8 [ %1561, %1560 ], [ %1553, %1550 ]
  %1568 = icmp slt i8 %1567, 0
  %1569 = select i1 %1568, i64 %1566, i64 %1565
  %1570 = icmp eq i64 %1569, 13
  br i1 %1570, label %1571, label %1578

1571:                                             ; preds = %1564
  %1572 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1533, i64 0, i64 -1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i64 13) #9
  %1573 = icmp eq i32 %1572, 0
  br i1 %1573, label %1603, label %1574

1574:                                             ; preds = %1571
  %1575 = load i8, i8* %1535, align 1
  %1576 = load i64, i64* %1538, align 8
  %1577 = zext i8 %1575 to i64
  br label %1578

1578:                                             ; preds = %1574, %1564
  %1579 = phi i64 [ %1577, %1574 ], [ %1565, %1564 ]
  %1580 = phi i64 [ %1576, %1574 ], [ %1566, %1564 ]
  %1581 = phi i8 [ %1575, %1574 ], [ %1567, %1564 ]
  %1582 = icmp slt i8 %1581, 0
  %1583 = select i1 %1582, i64 %1580, i64 %1579
  %1584 = icmp eq i64 %1583, 24
  br i1 %1584, label %1585, label %1592

1585:                                             ; preds = %1578
  %1586 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1533, i64 0, i64 -1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i64 24) #9
  %1587 = icmp eq i32 %1586, 0
  br i1 %1587, label %1603, label %1588

1588:                                             ; preds = %1585
  %1589 = load i8, i8* %1535, align 1
  %1590 = load i64, i64* %1538, align 8
  %1591 = zext i8 %1589 to i64
  br label %1592

1592:                                             ; preds = %1588, %1578
  %1593 = phi i64 [ %1591, %1588 ], [ %1579, %1578 ]
  %1594 = phi i64 [ %1590, %1588 ], [ %1580, %1578 ]
  %1595 = phi i8 [ %1589, %1588 ], [ %1581, %1578 ]
  %1596 = icmp slt i8 %1595, 0
  %1597 = select i1 %1596, i64 %1594, i64 %1593
  %1598 = icmp eq i64 %1597, 23
  br i1 %1598, label %1599, label %1603

1599:                                             ; preds = %1592
  %1600 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1533, i64 0, i64 -1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i64 23) #9
  %1601 = icmp eq i32 %1600, 0
  %1602 = select i1 %1601, i8 1, i8 %1527
  br label %1603

1603:                                             ; preds = %1599, %1592, %1585, %1571, %1557, %1543
  %1604 = phi i8 [ 1, %1543 ], [ %1531, %1557 ], [ %1531, %1571 ], [ %1531, %1585 ], [ %1531, %1592 ], [ %1531, %1599 ]
  %1605 = phi i8 [ %1530, %1543 ], [ 1, %1557 ], [ %1530, %1571 ], [ %1530, %1585 ], [ %1530, %1592 ], [ %1530, %1599 ]
  %1606 = phi i8 [ %1529, %1543 ], [ %1529, %1557 ], [ 1, %1571 ], [ %1529, %1585 ], [ %1529, %1592 ], [ %1529, %1599 ]
  %1607 = phi i8 [ %1528, %1543 ], [ %1528, %1557 ], [ %1528, %1571 ], [ 1, %1585 ], [ %1528, %1592 ], [ %1528, %1599 ]
  %1608 = phi i8 [ %1527, %1543 ], [ %1527, %1557 ], [ %1527, %1571 ], [ %1527, %1585 ], [ %1527, %1592 ], [ %1602, %1599 ]
  %1609 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %1532, i64 1
  %1610 = icmp eq %"struct.sh::ShaderVariable"* %1609, %1521
  br i1 %1610, label %1523, label %1526

1611:                                             ; preds = %1523
  %1612 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %57, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %1613

1613:                                             ; preds = %1523, %1611
  %1614 = and i8 %1605, 1
  %1615 = icmp eq i8 %1614, 0
  br i1 %1615, label %1618, label %1616

1616:                                             ; preds = %1613
  %1617 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %57, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.14, i64 0, i64 0)) #9
  br label %1618

1618:                                             ; preds = %1613, %1616
  %1619 = and i8 %1607, 1
  %1620 = icmp eq i8 %1619, 0
  br i1 %1620, label %1623, label %1621

1621:                                             ; preds = %1618
  %1622 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %57, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.15, i64 0, i64 0)) #9
  br label %1623

1623:                                             ; preds = %1618, %1621
  %1624 = and i8 %1608, 1
  %1625 = icmp eq i8 %1624, 0
  br i1 %1625, label %1633, label %1626

1626:                                             ; preds = %1623
  %1627 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %57, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.16, i64 0, i64 0)) #9
  %1628 = call dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"* %49) #9
  %1629 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %1628, i64 0, i32 56
  %1630 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIiEERS0_RKT_(%"class.sh::TInfoSinkBase"* %1, i32* dereferenceable(4) %1629)
  %1631 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1630, i64 0, i32 0
  %1632 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %1631, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0)) #9
  br label %1633

1633:                                             ; preds = %1515, %1623, %1626
  %1634 = phi i8 [ %1606, %1623 ], [ %1606, %1626 ], [ 0, %1515 ]
  %1635 = icmp eq i8 %1167, 0
  br i1 %1635, label %1672, label %1636

1636:                                             ; preds = %1633
  %1637 = call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst12getNegFlipXYEv(%"class.sh::SpecConst"* %5) #9
  %1638 = icmp eq %"class.sh::TIntermTyped"* %1637, null
  br i1 %1638, label %1639, label %1646

1639:                                             ; preds = %1636
  %1640 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %1641 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %1640, align 8
  %1642 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1641, i64 3
  %1643 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1642, align 8
  %1644 = call %"class.sh::TIntermBinary"* %1643(%"class.sh::DriverUniform"* %6) #9
  %1645 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1644, i64 0, i32 0, i32 0, i32 0
  br label %1646

1646:                                             ; preds = %1636, %1639
  %1647 = phi %"class.sh::TIntermTyped"* [ %1637, %1636 ], [ %1645, %1639 ]
  %1648 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 5.000000e-01) #9
  br i1 %1517, label %1649, label %1659

1649:                                             ; preds = %1646
  %1650 = call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getFragRotationMatrixEv(%"class.sh::SpecConst"* %5) #9
  %1651 = icmp eq %"class.sh::TIntermTyped"* %1650, null
  br i1 %1651, label %1652, label %1659

1652:                                             ; preds = %1649
  %1653 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %1654 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %1653, align 8
  %1655 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1654, i64 4
  %1656 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1655, align 8
  %1657 = call %"class.sh::TIntermBinary"* %1656(%"class.sh::DriverUniform"* %6) #9
  %1658 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1657, i64 0, i32 0, i32 0, i32 0
  br label %1659

1659:                                             ; preds = %1649, %1652, %1646
  %1660 = phi %"class.sh::TIntermTyped"* [ %1650, %1649 ], [ %1658, %1652 ], [ null, %1646 ]
  %1661 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %1662 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %1661, i64 0, i32 2
  %1663 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1662, align 8
  %1664 = bitcast %"class.sh::TIntermBlock"* %1663 to %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)***
  %1665 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*** %1664, align 8
  %1666 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1665, i64 27
  %1667 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1666, align 8
  %1668 = call %"class.sh::TVector.45"* %1667(%"class.sh::TIntermBlock"* %1663) #9
  %1669 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_PointCoordEv() #9
  %1670 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1648, i64 0, i32 0, i32 0
  %1671 = call fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_128RotateAndFlipBuiltinVariableEPNS_9TCompilerEPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TIntermTypedEPNS_12TSymbolTableEPKNS_9TVariableERKNS_15ImmutableStringESB_SB_(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TVector.45"* %1668, %"class.sh::TIntermTyped"* %1647, %"class.sh::TSymbolTable"* %70, %"class.sh::TVariable"* %1669, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_122kFlippedPointCoordNameE, %"class.sh::TIntermTyped"* %1670, %"class.sh::TIntermTyped"* %1660)
  br i1 %1671, label %1672, label %2868

1672:                                             ; preds = %1633, %1659
  %1673 = and i8 %1166, 1
  %1674 = icmp eq i8 %1673, 0
  br i1 %1674, label %1711, label %1675

1675:                                             ; preds = %1672
  %1676 = call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst9getFlipXYEv(%"class.sh::SpecConst"* %5) #9
  %1677 = icmp eq %"class.sh::TIntermTyped"* %1676, null
  br i1 %1677, label %1678, label %1685

1678:                                             ; preds = %1675
  %1679 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %1680 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %1679, align 8
  %1681 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1680, i64 2
  %1682 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1681, align 8
  %1683 = call %"class.sh::TIntermBinary"* %1682(%"class.sh::DriverUniform"* %6) #9
  %1684 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1683, i64 0, i32 0, i32 0, i32 0
  br label %1685

1685:                                             ; preds = %1675, %1678
  %1686 = phi %"class.sh::TIntermTyped"* [ %1676, %1675 ], [ %1684, %1678 ]
  %1687 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 5.000000e-01) #9
  br i1 %1517, label %1688, label %1698

1688:                                             ; preds = %1685
  %1689 = call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getFragRotationMatrixEv(%"class.sh::SpecConst"* %5) #9
  %1690 = icmp eq %"class.sh::TIntermTyped"* %1689, null
  br i1 %1690, label %1691, label %1698

1691:                                             ; preds = %1688
  %1692 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %1693 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %1692, align 8
  %1694 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1693, i64 4
  %1695 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %1694, align 8
  %1696 = call %"class.sh::TIntermBinary"* %1695(%"class.sh::DriverUniform"* %6) #9
  %1697 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1696, i64 0, i32 0, i32 0, i32 0
  br label %1698

1698:                                             ; preds = %1688, %1691, %1685
  %1699 = phi %"class.sh::TIntermTyped"* [ %1689, %1688 ], [ %1697, %1691 ], [ null, %1685 ]
  %1700 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %1701 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %1700, i64 0, i32 2
  %1702 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1701, align 8
  %1703 = bitcast %"class.sh::TIntermBlock"* %1702 to %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)***
  %1704 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*** %1703, align 8
  %1705 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1704, i64 27
  %1706 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1705, align 8
  %1707 = call %"class.sh::TVector.45"* %1706(%"class.sh::TIntermBlock"* %1702) #9
  %1708 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable17gl_SamplePositionEv() #9
  %1709 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1687, i64 0, i32 0, i32 0
  %1710 = call fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_128RotateAndFlipBuiltinVariableEPNS_9TCompilerEPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TIntermTypedEPNS_12TSymbolTableEPKNS_9TVariableERKNS_15ImmutableStringESB_SB_(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TVector.45"* %1707, %"class.sh::TIntermTyped"* %1686, %"class.sh::TSymbolTable"* %70, %"class.sh::TVariable"* %1708, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_122kFlippedPointCoordNameE, %"class.sh::TIntermTyped"* %1709, %"class.sh::TIntermTyped"* %1699)
  br i1 %1710, label %1711, label %2868

1711:                                             ; preds = %1672, %1698
  %1712 = icmp eq i8 %1168, 0
  br i1 %1712, label %1723, label %1713

1713:                                             ; preds = %1711
  %1714 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %1715 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %1714, i64 0, i32 2
  %1716 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1715, align 8
  %1717 = bitcast %"class.sh::TIntermBlock"* %1716 to %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)***
  %1718 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*** %1717, align 8
  %1719 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1718, i64 27
  %1720 = load %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermBlock"*)** %1719, align 8
  %1721 = call %"class.sh::TVector.45"* %1720(%"class.sh::TIntermBlock"* %1716) #9
  %1722 = call fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_125InsertFragCoordCorrectionEPNS_9TCompilerEmPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableEPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"* %49, i64 %3, %"class.sh::TIntermBlock"* %2, %"class.sh::TVector.45"* %1721, %"class.sh::TSymbolTable"* %70, %"class.sh::SpecConst"* %5, %"class.sh::DriverUniform"* %6)
  br i1 %1722, label %1723, label %2868

1723:                                             ; preds = %1711, %1713
  %1724 = icmp eq i8 %1169, 0
  br i1 %1724, label %1727, label %1725

1725:                                             ; preds = %1723
  %1726 = call zeroext i1 @_ZN2sh19ReplaceLastFragDataEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.std::__1::vector.1"* %59) #9
  br i1 %1726, label %1727, label %2868

1727:                                             ; preds = %1723, %1725
  %1728 = call zeroext i1 @_ZN2sh21ReplaceInOutVariablesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.std::__1::vector.1"* %59) #9
  br i1 %1728, label %1729, label %2868

1729:                                             ; preds = %1727
  %1730 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %1731 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 25
  %1732 = load i32, i32* %1731, align 8
  %1733 = call zeroext i1 @_ZN2sh11RewriteDfdyEPNS_9TCompilerEmPNS_11TIntermNodeERKNS_12TSymbolTableEiPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"* %49, i64 %3, %"class.sh::TIntermNode"* %1730, %"class.sh::TSymbolTable"* dereferenceable(1720) %70, i32 %1732, %"class.sh::SpecConst"* %5, %"class.sh::DriverUniform"* %6) #9
  br i1 %1733, label %1734, label %2868

1734:                                             ; preds = %1729
  %1735 = load i32, i32* %1731, align 8
  %1736 = call zeroext i1 @_ZN2sh26RewriteInterpolateAtOffsetEPNS_9TCompilerEmPNS_11TIntermNodeERKNS_12TSymbolTableEiPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"* %49, i64 %3, %"class.sh::TIntermNode"* %1730, %"class.sh::TSymbolTable"* dereferenceable(1720) %70, i32 %1735, %"class.sh::SpecConst"* %5, %"class.sh::DriverUniform"* %6) #9
  br i1 %1736, label %1737, label %2868

1737:                                             ; preds = %1734
  %1738 = and i8 %1165, 1
  %1739 = icmp eq i8 %1738, 0
  br i1 %1739, label %1742, label %1740

1740:                                             ; preds = %1737
  %1741 = call zeroext i1 @_ZN2sh19RewriteSampleMaskInEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70) #9
  br i1 %1741, label %1742, label %2868

1742:                                             ; preds = %1737, %1740
  %1743 = and i8 %1634, 1
  %1744 = icmp eq i8 %1743, 0
  br i1 %1744, label %1749, label %1745

1745:                                             ; preds = %1742
  %1746 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getNumSamplesRefEv(%"class.sh::DriverUniform"* %6) #9
  %1747 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1746, i64 0, i32 0, i32 0, i32 0
  %1748 = call zeroext i1 @_ZN2sh17RewriteSampleMaskEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.sh::TIntermTyped"* %1747) #9
  br i1 %1748, label %1749, label %2868

1749:                                             ; preds = %1742, %1745
  %1750 = bitcast %"class.sh::ImmutableString"* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1750) #9
  %1751 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %48, i64 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8** %1751, align 8
  %1752 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %48, i64 0, i32 1
  store i64 13, i64* %1752, align 8
  %1753 = load i32, i32* %1731, align 8
  %1754 = call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %48, i32 %1753) #9
  %1755 = bitcast %"class.sh::TSymbol"* %1754 to %"class.sh::TVariable"*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1750) #9
  %1756 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getNumSamplesRefEv(%"class.sh::DriverUniform"* %6) #9
  %1757 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1756, i64 0, i32 0, i32 0, i32 0
  %1758 = call zeroext i1 @_ZN2sh24ReplaceVariableWithTypedEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TVariable"* %1755, %"class.sh::TIntermTyped"* %1757) #9
  br i1 %1758, label %1759, label %2868

1759:                                             ; preds = %1749
  call void @_ZN2sh26EmitEarlyFragmentTestsGLSLERKNS_9TCompilerERNS_13TInfoSinkBaseE(%"class.sh::TCompiler"* dereferenceable(3104) %49, %"class.sh::TInfoSinkBase"* dereferenceable(48) %1) #9
  br label %2862

1760:                                             ; preds = %1077
  %1761 = and i64 %3, 140737488355328
  %1762 = icmp eq i64 %1761, 0
  br i1 %1762, label %1954, label %1763

1763:                                             ; preds = %1760
  %1764 = call fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_134AddANGLEPositionVaryingDeclarationEPNS_12TIntermBlockEPNS_12TSymbolTableENS_10TQualifierE(%"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, i32 5) #9
  %1765 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform14getViewportRefEv(%"class.sh::DriverUniform"* %6) #9
  %1766 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1767 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1766, i64 32) #9
  %1768 = bitcast i8* %1767 to %"class.sh::TIntermSymbol"*
  %1769 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable11gl_PositionEv() #9
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1768, %"class.sh::TVariable"* %1769) #9
  %1770 = bitcast i8* %1767 to %"class.sh::TIntermTyped"*
  %1771 = bitcast %"class.sh::TVector.209"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1771) #9
  %1772 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %11, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1771, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %11, i32 0, i32 1) #9
  %1773 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1774 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1773, i64 248) #9
  %1775 = bitcast i8* %1774 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1775, %"class.sh::TIntermTyped"* %1770, %"class.sh::TVector.209"* nonnull dereferenceable(24) %11) #9
  %1776 = load i32*, i32** %1772, align 8
  %1777 = icmp eq i32* %1776, null
  br i1 %1777, label %1782, label %1778

1778:                                             ; preds = %1763
  %1779 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %11, i64 0, i32 0, i32 0, i32 1
  %1780 = ptrtoint i32* %1776 to i64
  %1781 = bitcast i32** %1779 to i64*
  store i64 %1780, i64* %1781, align 8
  br label %1782

1782:                                             ; preds = %1778, %1763
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1771) #9
  %1783 = bitcast i8* %1767 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %1784 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %1783, align 8
  %1785 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %1784, i64 23
  %1786 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %1785, align 8
  %1787 = call %"class.sh::TIntermTyped"* %1786(%"class.sh::TIntermSymbol"* %1768) #9
  %1788 = bitcast %"class.sh::TVector.209"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1788) #9
  %1789 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %10, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1788, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %10, i32 3) #9
  %1790 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1791 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1790, i64 248) #9
  %1792 = bitcast i8* %1791 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1792, %"class.sh::TIntermTyped"* %1787, %"class.sh::TVector.209"* nonnull dereferenceable(24) %10) #9
  %1793 = load i32*, i32** %1789, align 8
  %1794 = icmp eq i32* %1793, null
  br i1 %1794, label %1799, label %1795

1795:                                             ; preds = %1782
  %1796 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %10, i64 0, i32 0, i32 0, i32 1
  %1797 = ptrtoint i32* %1793 to i64
  %1798 = bitcast i32** %1796 to i64*
  store i64 %1797, i64* %1798, align 8
  br label %1799

1799:                                             ; preds = %1795, %1782
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1788) #9
  %1800 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1801 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1802 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1801, i64 240) #9
  %1803 = bitcast i8* %1802 to %"class.sh::TIntermBinary"*
  %1804 = bitcast i8* %1774 to %"class.sh::TIntermTyped"*
  %1805 = bitcast i8* %1791 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1803, i8 zeroext 16, %"class.sh::TIntermTyped"* %1804, %"class.sh::TIntermTyped"* %1805) #9
  %1806 = bitcast i8* %1802 to %"class.sh::TIntermTyped"*
  %1807 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1800, %"class.sh::TIntermTyped"* %1806) #9
  %1808 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1809 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1808, i64 240) #9
  %1810 = bitcast i8* %1809 to %"class.sh::TIntermBinary"*
  %1811 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %1800) #9
  %1812 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1811, i64 0, i32 0
  %1813 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 1.000000e+00) #9
  %1814 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1813, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1810, i8 zeroext 13, %"class.sh::TIntermTyped"* %1812, %"class.sh::TIntermTyped"* %1814) #9
  %1815 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1765, i64 0, i32 0, i32 0, i32 0
  %1816 = bitcast %"class.sh::TVector.209"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1816) #9
  %1817 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %9, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1816, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %9, i32 2, i32 3) #9
  %1818 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1819 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1818, i64 248) #9
  %1820 = bitcast i8* %1819 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1820, %"class.sh::TIntermTyped"* %1815, %"class.sh::TVector.209"* nonnull dereferenceable(24) %9) #9
  %1821 = load i32*, i32** %1817, align 8
  %1822 = icmp eq i32* %1821, null
  br i1 %1822, label %1827, label %1823

1823:                                             ; preds = %1799
  %1824 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %9, i64 0, i32 0, i32 0, i32 1
  %1825 = ptrtoint i32* %1821 to i64
  %1826 = bitcast i32** %1824 to i64*
  store i64 %1825, i64* %1826, align 8
  br label %1827

1827:                                             ; preds = %1823, %1799
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1816) #9
  %1828 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1829 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1828, i64 240) #9
  %1830 = bitcast i8* %1829 to %"class.sh::TIntermBinary"*
  %1831 = bitcast i8* %1819 to %"class.sh::TIntermTyped"*
  %1832 = bitcast i8* %1809 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1830, i8 zeroext 15, %"class.sh::TIntermTyped"* %1831, %"class.sh::TIntermTyped"* %1832) #9
  %1833 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1834 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1833, i64 240) #9
  %1835 = bitcast i8* %1834 to %"class.sh::TIntermBinary"*
  %1836 = bitcast i8* %1829 to %"class.sh::TIntermTyped"*
  %1837 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 5.000000e-01) #9
  %1838 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1837, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1835, i8 zeroext 31, %"class.sh::TIntermTyped"* %1836, %"class.sh::TIntermTyped"* %1838) #9
  %1839 = bitcast %"class.sh::TIntermBinary"* %1765 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)***
  %1840 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)*** %1839, align 8
  %1841 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)** %1840, i64 23
  %1842 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)** %1841, align 8
  %1843 = call %"class.sh::TIntermTyped"* %1842(%"class.sh::TIntermBinary"* %1765) #9
  %1844 = bitcast %"class.sh::TVector.209"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1844) #9
  %1845 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %8, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1844, i8 0, i64 24, i1 false) #9
  call void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* nonnull %8, i32 0, i32 1) #9
  %1846 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1847 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1846, i64 248) #9
  %1848 = bitcast i8* %1847 to %"class.sh::TIntermSwizzle"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1848, %"class.sh::TIntermTyped"* %1843, %"class.sh::TVector.209"* nonnull dereferenceable(24) %8) #9
  %1849 = load i32*, i32** %1845, align 8
  %1850 = icmp eq i32* %1849, null
  br i1 %1850, label %1855, label %1851

1851:                                             ; preds = %1827
  %1852 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %8, i64 0, i32 0, i32 0, i32 1
  %1853 = ptrtoint i32* %1849 to i64
  %1854 = bitcast i32** %1852 to i64*
  store i64 %1853, i64* %1854, align 8
  br label %1855

1855:                                             ; preds = %1827, %1851
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1844) #9
  %1856 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1857 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1856, i64 240) #9
  %1858 = bitcast i8* %1857 to %"class.sh::TIntermBinary"*
  %1859 = bitcast i8* %1834 to %"class.sh::TIntermTyped"*
  %1860 = bitcast i8* %1847 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1858, i8 zeroext 13, %"class.sh::TIntermTyped"* %1859, %"class.sh::TIntermTyped"* %1860) #9
  %1861 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1862 = bitcast i8* %1857 to %"class.sh::TIntermTyped"*
  %1863 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1861, %"class.sh::TIntermTyped"* %1862) #9
  %1864 = call dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"* %49) #9
  %1865 = getelementptr inbounds %struct.ShBuiltInResources, %struct.ShBuiltInResources* %1864, i64 0, i32 120
  %1866 = load i32, i32* %1865, align 4
  %1867 = shl i32 1, %1866
  %1868 = sitofp i32 %1867 to float
  %1869 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %1868) #9
  %1870 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1871 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1870, i64 240) #9
  %1872 = bitcast i8* %1871 to %"class.sh::TIntermBinary"*
  %1873 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %1861) #9
  %1874 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1873, i64 0, i32 0
  %1875 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1869, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1872, i8 zeroext 31, %"class.sh::TIntermTyped"* %1874, %"class.sh::TIntermTyped"* %1875) #9
  %1876 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1877 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1876, i64 240) #9
  %1878 = bitcast i8* %1877 to %"class.sh::TIntermUnary"*
  %1879 = bitcast i8* %1871 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %1878, i8 zeroext 73, %"class.sh::TIntermTyped"* %1879, %"class.sh::TFunction"* null) #9
  %1880 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1881 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1880, i64 240) #9
  %1882 = bitcast i8* %1881 to %"class.sh::TIntermBinary"*
  %1883 = bitcast i8* %1877 to %"class.sh::TIntermTyped"*
  %1884 = bitcast %"class.sh::TIntermConstantUnion"* %1869 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)***
  %1885 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*** %1884, align 8
  %1886 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %1885, i64 23
  %1887 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)** %1886, align 8
  %1888 = call %"class.sh::TIntermTyped"* %1887(%"class.sh::TIntermConstantUnion"* %1869) #9
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1882, i8 zeroext 16, %"class.sh::TIntermTyped"* %1883, %"class.sh::TIntermTyped"* %1888) #9
  %1889 = call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %70, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*)) #9
  %1890 = bitcast i8* %1881 to %"class.sh::TIntermTyped"*
  %1891 = call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %1889, %"class.sh::TIntermTyped"* %1890) #9
  %1892 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1893 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1892, i64 240) #9
  %1894 = bitcast i8* %1893 to %"class.sh::TIntermBinary"*
  %1895 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %1889) #9
  %1896 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1895, i64 0, i32 0
  %1897 = bitcast i8* %1847 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)***
  %1898 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)*** %1897, align 8
  %1899 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)** %1898, i64 23
  %1900 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)** %1899, align 8
  %1901 = call %"class.sh::TIntermTyped"* %1900(%"class.sh::TIntermSwizzle"* %1848) #9
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1894, i8 zeroext 14, %"class.sh::TIntermTyped"* %1896, %"class.sh::TIntermTyped"* %1901) #9
  %1902 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1903 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1902, i64 240) #9
  %1904 = bitcast i8* %1903 to %"class.sh::TIntermBinary"*
  %1905 = bitcast i8* %1893 to %"class.sh::TIntermTyped"*
  %1906 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 2.000000e+00) #9
  %1907 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1906, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1904, i8 zeroext 31, %"class.sh::TIntermTyped"* %1905, %"class.sh::TIntermTyped"* %1907) #9
  %1908 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1909 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1908, i64 240) #9
  %1910 = bitcast i8* %1909 to %"class.sh::TIntermBinary"*
  %1911 = bitcast i8* %1903 to %"class.sh::TIntermTyped"*
  %1912 = bitcast i8* %1819 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)***
  %1913 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)*** %1912, align 8
  %1914 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)** %1913, i64 23
  %1915 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSwizzle"*)** %1914, align 8
  %1916 = call %"class.sh::TIntermTyped"* %1915(%"class.sh::TIntermSwizzle"* %1820) #9
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1910, i8 zeroext 16, %"class.sh::TIntermTyped"* %1911, %"class.sh::TIntermTyped"* %1916) #9
  %1917 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1918 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1917, i64 240) #9
  %1919 = bitcast i8* %1918 to %"class.sh::TIntermBinary"*
  %1920 = bitcast i8* %1909 to %"class.sh::TIntermTyped"*
  %1921 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 1.000000e+00) #9
  %1922 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1921, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1919, i8 zeroext 14, %"class.sh::TIntermTyped"* %1920, %"class.sh::TIntermTyped"* %1922) #9
  %1923 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1924 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1923, i64 32) #9
  %1925 = bitcast i8* %1924 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1925, %"class.sh::TVariable"* %1764) #9
  %1926 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1927 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1926, i64 240) #9
  %1928 = bitcast i8* %1927 to %"class.sh::TIntermBinary"*
  %1929 = bitcast i8* %1924 to %"class.sh::TIntermTyped"*
  %1930 = bitcast i8* %1918 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1928, i8 zeroext -118, %"class.sh::TIntermTyped"* %1929, %"class.sh::TIntermTyped"* %1930) #9
  %1931 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1932 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1931, i64 64) #9
  %1933 = bitcast i8* %1932 to %"class.sh::TIntermBlock"*
  %1934 = bitcast i8* %1932 to i32 (...)***
  %1935 = getelementptr inbounds i8, i8* %1932, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1935, i8 0, i64 16, i1 false) #9
  %1936 = getelementptr inbounds i8, i8* %1932, i64 24
  %1937 = bitcast i8* %1936 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1934, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %1937, align 8
  %1938 = getelementptr inbounds i8, i8* %1932, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %1938, i8 0, i64 25, i1 false) #9
  %1939 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1807, i64 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1933, %"class.sh::TIntermNode"* %1939) #9
  %1940 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1863, i64 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1933, %"class.sh::TIntermNode"* %1940) #9
  %1941 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1891, i64 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1933, %"class.sh::TIntermNode"* %1941) #9
  %1942 = bitcast i8* %1927 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1933, %"class.sh::TIntermNode"* %1942) #9
  %1943 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1944 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1943, i64 48) #9
  %1945 = bitcast i8* %1944 to %"class.sh::TIntermIfElse"*
  %1946 = call %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst22getLineRasterEmulationEv(%"class.sh::SpecConst"* %5) #9
  %1947 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1946, i64 0, i32 0
  call void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* %1945, %"class.sh::TIntermTyped"* %1947, %"class.sh::TIntermBlock"* %1933, %"class.sh::TIntermBlock"* null) #9
  %1948 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %1949 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %1948, i64 0, i32 2
  %1950 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1949, align 8
  %1951 = bitcast i8* %1944 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1950, %"class.sh::TIntermNode"* %1951) #9
  %1952 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %1953 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermNode"* %1952) #9
  br i1 %1953, label %1954, label %2868

1954:                                             ; preds = %1760, %1855
  %1955 = and i64 %3, 36028797018963968
  %1956 = icmp eq i64 %1955, 0
  br i1 %1956, label %2832, label %1957

1957:                                             ; preds = %1954
  %1958 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1959 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1958, i64 40) #9
  %1960 = bitcast %"class.sh::ImmutableString"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1960) #9
  %1961 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %33, i64 0, i32 0
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i64 0, i64 0), i8** %1961, align 8
  %1962 = bitcast i8* %1959 to %"class.sh::TVariable"*
  %1963 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %33, i64 0, i32 1
  store i64 7, i64* %1963, align 8
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %1962, %"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %33, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1960) #9
  %1964 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1965 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1964, i64 32) #9
  %1966 = bitcast i8* %1965 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1966, %"class.sh::TVariable"* %1962) #9
  %1967 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1968 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1967, i64 32) #9
  %1969 = bitcast i8* %1968 to %"class.sh::TIntermSymbol"*
  %1970 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable14gl_VertexIndexEv() #9
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1969, %"class.sh::TVariable"* %1970) #9
  %1971 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1972 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1971, i64 32) #9
  %1973 = bitcast i8* %1972 to %"class.sh::TIntermSymbol"*
  %1974 = call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable16gl_InstanceIndexEv() #9
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %1973, %"class.sh::TVariable"* %1974) #9
  %1975 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform25getXfbVerticesPerInstanceEv(%"class.sh::DriverUniform"* %6) #9
  %1976 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform19getXfbBufferOffsetsEv(%"class.sh::DriverUniform"* %6) #9
  %1977 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1978 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1977, i64 240) #9
  %1979 = bitcast i8* %1978 to %"class.sh::TIntermBinary"*
  %1980 = bitcast i8* %1972 to %"class.sh::TIntermTyped"*
  %1981 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1975, i64 0, i32 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1979, i8 zeroext 15, %"class.sh::TIntermTyped"* %1980, %"class.sh::TIntermTyped"* %1981) #9
  %1982 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1983 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1982, i64 240) #9
  %1984 = bitcast i8* %1983 to %"class.sh::TIntermBinary"*
  %1985 = bitcast i8* %1968 to %"class.sh::TIntermTyped"*
  %1986 = bitcast i8* %1978 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1984, i8 zeroext 13, %"class.sh::TIntermTyped"* %1985, %"class.sh::TIntermTyped"* %1986) #9
  %1987 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1988 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1987, i64 240) #9
  %1989 = bitcast i8* %1988 to %"class.sh::TIntermBinary"*
  %1990 = bitcast i8* %1983 to %"class.sh::TIntermTyped"*
  %1991 = bitcast i8* %1965 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1989, i8 zeroext 31, %"class.sh::TIntermTyped"* %1990, %"class.sh::TIntermTyped"* %1991) #9
  %1992 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1993 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1992, i64 240) #9
  %1994 = bitcast i8* %1993 to %"class.sh::TIntermBinary"*
  %1995 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1976, i64 0, i32 0, i32 0, i32 0
  %1996 = bitcast i8* %1988 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1994, i8 zeroext 13, %"class.sh::TIntermTyped"* %1995, %"class.sh::TIntermTyped"* %1996) #9
  %1997 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %1998 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1997, i64 64) #9
  %1999 = bitcast i8* %1998 to %"class.sh::TIntermBlock"*
  %2000 = bitcast i8* %1998 to i32 (...)***
  %2001 = getelementptr inbounds i8, i8* %1998, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %2001, i8 0, i64 16, i1 false) #9
  %2002 = getelementptr inbounds i8, i8* %1998, i64 24
  %2003 = bitcast i8* %2002 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2000, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %2003, align 8
  %2004 = getelementptr inbounds i8, i8* %1998, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %2004, i8 0, i64 25, i1 false) #9
  %2005 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2006 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2005, i64 40) #9
  %2007 = bitcast i8* %2006 to i32 (...)***
  %2008 = getelementptr inbounds i8, i8* %2006, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %2008, i8 0, i64 16, i1 false) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermBranchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2007, align 8
  %2009 = getelementptr inbounds i8, i8* %2006, i64 24
  store i8 -122, i8* %2009, align 8
  %2010 = getelementptr inbounds i8, i8* %2006, i64 32
  %2011 = bitcast i8* %2010 to i8**
  store i8* %1993, i8** %2011, align 8
  %2012 = bitcast i8* %2006 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %1999, %"class.sh::TIntermNode"* %2012) #9
  %2013 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2014 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2013, i64 80) #9
  %2015 = bitcast %"class.sh::ImmutableString"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2015) #9
  %2016 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %34, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk35kXfbEmulationGetOffsetsFunctionNameE, i64 0, i64 0), i8** %2016, align 8
  br label %2017

2017:                                             ; preds = %2017, %1957
  %2018 = phi i64 [ %2022, %2017 ], [ 0, %1957 ]
  %2019 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk35kXfbEmulationGetOffsetsFunctionNameE, i64 0, i64 %2018
  %2020 = load i8, i8* %2019, align 1
  %2021 = icmp eq i8 %2020, 0
  %2022 = add i64 %2018, 1
  br i1 %2021, label %2023, label %2017

2023:                                             ; preds = %2017
  %2024 = bitcast i8* %2014 to %"class.sh::TFunction"*
  %2025 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %34, i64 0, i32 1
  store i64 %2018, i64* %2025, align 8
  call void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"* %2024, %"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %34, i8 zeroext 2, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE to %"class.sh::TType"*), i1 zeroext true) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2015) #9
  call void @_ZN2sh9TFunction12addParameterEPKNS_9TVariableE(%"class.sh::TFunction"* %2024, %"class.sh::TVariable"* %1962) #9
  %2026 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh36CreateInternalFunctionDefinitionNodeERKNS_9TFunctionEPNS_12TIntermBlockE(%"class.sh::TFunction"* dereferenceable(80) %2024, %"class.sh::TIntermBlock"* %1999) #9
  %2027 = call i64 @_ZN2sh13FindMainIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %2) #9
  %2028 = bitcast %"class.sh::TVector.45"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2028) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2028, i8 0, i64 24, i1 false) #9
  %2029 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2030 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2029, i64 8) #9
  %2031 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %35, i64 0, i32 0, i32 0, i32 1
  %2032 = bitcast %"class.sh::TVector.45"* %35 to i8**
  store i8* %2030, i8** %2032, align 8
  %2033 = getelementptr inbounds i8, i8* %2030, i64 8
  %2034 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %35, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2035 = bitcast %"class.sh::TIntermNode"*** %2034 to i8**
  store i8* %2033, i8** %2035, align 8
  %2036 = bitcast i8* %2030 to i64*
  %2037 = ptrtoint %"class.sh::TIntermFunctionDefinition"* %2026 to i64
  store i64 %2037, i64* %2036, align 8
  %2038 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 1
  %2039 = bitcast %"class.sh::TIntermNode"*** %2031 to i64*
  %2040 = ptrtoint i8* %2033 to i64
  store i64 %2040, i64* %2039, align 8
  %2041 = call zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"* %2038, i64 %2027, %"class.sh::TVector.45"* nonnull dereferenceable(24) %35) #9
  %2042 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %35, i64 0, i32 0, i32 0, i32 0
  %2043 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2042, align 8
  %2044 = icmp eq %"class.sh::TIntermNode"** %2043, null
  br i1 %2044, label %2047, label %2045

2045:                                             ; preds = %2023
  %2046 = ptrtoint %"class.sh::TIntermNode"** %2043 to i64
  store i64 %2046, i64* %2039, align 8
  br label %2047

2047:                                             ; preds = %2045, %2023
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2028) #9
  %2048 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2049 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2048, i64 64) #9
  %2050 = bitcast i8* %2049 to i32 (...)***
  %2051 = getelementptr inbounds i8, i8* %2049, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %2051, i8 0, i64 16, i1 false) #9
  %2052 = getelementptr inbounds i8, i8* %2049, i64 24
  %2053 = bitcast i8* %2052 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2050, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %2053, align 8
  %2054 = getelementptr inbounds i8, i8* %2049, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %2054, i8 0, i64 25, i1 false) #9
  %2055 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2056 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2055, i64 80) #9
  %2057 = bitcast %"class.sh::ImmutableString"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2057) #9
  %2058 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %36, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk32kXfbEmulationCaptureFunctionNameE, i64 0, i64 0), i8** %2058, align 8
  br label %2059

2059:                                             ; preds = %2059, %2047
  %2060 = phi i64 [ %2064, %2059 ], [ 0, %2047 ]
  %2061 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk32kXfbEmulationCaptureFunctionNameE, i64 0, i64 %2060
  %2062 = load i8, i8* %2061, align 1
  %2063 = icmp eq i8 %2062, 0
  %2064 = add i64 %2060, 1
  br i1 %2063, label %2065, label %2059

2065:                                             ; preds = %2059
  %2066 = bitcast i8* %2049 to %"class.sh::TIntermBlock"*
  %2067 = bitcast i8* %2056 to %"class.sh::TFunction"*
  %2068 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %36, i64 0, i32 1
  store i64 %2060, i64* %2068, align 8
  call void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"* %2067, %"class.sh::TSymbolTable"* %70, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %36, i8 zeroext 2, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i1 zeroext false) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2057) #9
  %2069 = bitcast %"class.sh::TVector.45"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2069) #9
  %2070 = call %"class.sh::TIntermFunctionDefinition"* @_ZN2sh36CreateInternalFunctionDefinitionNodeERKNS_9TFunctionEPNS_12TIntermBlockE(%"class.sh::TFunction"* dereferenceable(80) %2067, %"class.sh::TIntermBlock"* %2066) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2069, i8 0, i64 24, i1 false) #9
  %2071 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2072 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2071, i64 8) #9
  %2073 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %37, i64 0, i32 0, i32 0, i32 1
  %2074 = bitcast %"class.sh::TVector.45"* %37 to i8**
  store i8* %2072, i8** %2074, align 8
  %2075 = getelementptr inbounds i8, i8* %2072, i64 8
  %2076 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %37, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2077 = bitcast %"class.sh::TIntermNode"*** %2076 to i8**
  store i8* %2075, i8** %2077, align 8
  %2078 = bitcast i8* %2072 to i64*
  %2079 = ptrtoint %"class.sh::TIntermFunctionDefinition"* %2070 to i64
  store i64 %2079, i64* %2078, align 8
  %2080 = bitcast %"class.sh::TIntermNode"*** %2073 to i64*
  %2081 = ptrtoint i8* %2075 to i64
  store i64 %2081, i64* %2080, align 8
  %2082 = call zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"* %2038, i64 %2027, %"class.sh::TVector.45"* nonnull dereferenceable(24) %37) #9
  %2083 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %37, i64 0, i32 0, i32 0, i32 0
  %2084 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2083, align 8
  %2085 = icmp eq %"class.sh::TIntermNode"** %2084, null
  br i1 %2085, label %2088, label %2086

2086:                                             ; preds = %2065
  %2087 = ptrtoint %"class.sh::TIntermNode"** %2084 to i64
  store i64 %2087, i64* %2080, align 8
  br label %2088

2088:                                             ; preds = %2065, %2086
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2069) #9
  %2089 = call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform20getXfbActiveUnpausedEv(%"class.sh::DriverUniform"* %6) #9
  %2090 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2091 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2090, i64 240) #9
  %2092 = bitcast i8* %2091 to %"class.sh::TIntermBinary"*
  %2093 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2089, i64 0, i32 0, i32 0, i32 0
  %2094 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32 0) #9
  %2095 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %2094, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %2092, i8 zeroext 19, %"class.sh::TIntermTyped"* %2093, %"class.sh::TIntermTyped"* %2095) #9
  %2096 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80) %2067, %"class.sh::TVector.45"* null) #9
  %2097 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2098 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2097, i64 64) #9
  %2099 = bitcast i8* %2098 to %"class.sh::TIntermBlock"*
  %2100 = bitcast i8* %2098 to i32 (...)***
  %2101 = getelementptr inbounds i8, i8* %2098, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %2101, i8 0, i64 16, i1 false) #9
  %2102 = getelementptr inbounds i8, i8* %2098, i64 24
  %2103 = bitcast i8* %2102 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2100, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %2103, align 8
  %2104 = getelementptr inbounds i8, i8* %2098, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %2104, i8 0, i64 25, i1 false) #9
  %2105 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2096, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %2099, %"class.sh::TIntermNode"* %2105) #9
  %2106 = bitcast %"class.sh::TVector.45"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2106) #9
  %2107 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %38, i64 0, i32 0, i32 0, i32 0
  %2108 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %38, i64 0, i32 0, i32 0, i32 1
  %2109 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %38, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2106, i8 0, i64 24, i1 false) #9
  %2110 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 0) #9
  %2111 = ptrtoint %"class.sh::TIntermConstantUnion"* %2110 to i64
  %2112 = bitcast %"class.sh::TIntermNode"*** %2108 to i64*
  %2113 = bitcast %"class.sh::TVector.45"* %38 to i64*
  %2114 = bitcast %"class.sh::TIntermNode"*** %2109 to i64*
  %2115 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2116 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2115, i64 8) #9
  %2117 = bitcast i8* %2116 to %"class.sh::TIntermNode"**
  %2118 = getelementptr inbounds i8, i8* %2116, i64 8
  %2119 = ptrtoint i8* %2118 to i64
  %2120 = bitcast i8* %2116 to i64*
  store i64 %2111, i64* %2120, align 8
  %2121 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2107, align 8
  %2122 = ptrtoint %"class.sh::TIntermNode"** %2121 to i64
  %2123 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2108, align 8
  %2124 = bitcast %"class.sh::TIntermNode"** %2123 to i8*
  %2125 = icmp eq %"class.sh::TIntermNode"** %2123, %2121
  br i1 %2125, label %2299, label %2126

2126:                                             ; preds = %2088
  %2127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 -1
  %2128 = ptrtoint %"class.sh::TIntermNode"** %2127 to i64
  %2129 = sub i64 %2128, %2122
  %2130 = lshr i64 %2129, 3
  %2131 = add nuw nsw i64 %2130, 1
  %2132 = icmp ult i64 %2131, 4
  br i1 %2132, label %2229, label %2133

2133:                                             ; preds = %2126
  %2134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 -1
  %2135 = ptrtoint %"class.sh::TIntermNode"** %2134 to i64
  %2136 = sub i64 %2135, %2122
  %2137 = lshr i64 %2136, 3
  %2138 = and i64 %2136, -8
  %2139 = xor i64 %2138, -8
  %2140 = getelementptr i8, i8* %2116, i64 %2139
  %2141 = xor i64 %2137, -1
  %2142 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 %2141
  %2143 = bitcast %"class.sh::TIntermNode"** %2142 to i8*
  %2144 = icmp ult i8* %2140, %2124
  %2145 = icmp ugt i8* %2116, %2143
  %2146 = and i1 %2144, %2145
  br i1 %2146, label %2229, label %2147

2147:                                             ; preds = %2133
  %2148 = and i64 %2131, 4611686018427387900
  %2149 = sub nsw i64 0, %2148
  %2150 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2117, i64 %2149
  %2151 = sub nsw i64 0, %2148
  %2152 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 %2151
  %2153 = add nsw i64 %2148, -4
  %2154 = lshr exact i64 %2153, 2
  %2155 = add nuw nsw i64 %2154, 1
  %2156 = and i64 %2155, 1
  %2157 = icmp eq i64 %2153, 0
  br i1 %2157, label %2204, label %2158

2158:                                             ; preds = %2147
  %2159 = sub nuw nsw i64 %2155, %2156
  %2160 = getelementptr i8, i8* %2116, i64 -8
  %2161 = bitcast i8* %2160 to %"class.sh::TIntermNode"**
  %2162 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 -1
  %2163 = getelementptr i8, i8* %2116, i64 -8
  %2164 = bitcast i8* %2163 to %"class.sh::TIntermNode"**
  %2165 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 -1
  br label %2166

2166:                                             ; preds = %2166, %2158
  %2167 = phi i64 [ 0, %2158 ], [ %2201, %2166 ]
  %2168 = phi i64 [ %2159, %2158 ], [ %2202, %2166 ]
  %2169 = sub i64 0, %2167
  %2170 = sub i64 0, %2167
  %2171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2161, i64 %2169
  %2172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2162, i64 %2170
  %2173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2172, i64 -1
  %2174 = bitcast %"class.sh::TIntermNode"** %2173 to <2 x i64>*
  %2175 = load <2 x i64>, <2 x i64>* %2174, align 8, !alias.scope !29
  %2176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2172, i64 -2
  %2177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2176, i64 -1
  %2178 = bitcast %"class.sh::TIntermNode"** %2177 to <2 x i64>*
  %2179 = load <2 x i64>, <2 x i64>* %2178, align 8, !alias.scope !29
  %2180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2171, i64 -1
  %2181 = bitcast %"class.sh::TIntermNode"** %2180 to <2 x i64>*
  store <2 x i64> %2175, <2 x i64>* %2181, align 8, !alias.scope !32, !noalias !29
  %2182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2171, i64 -2
  %2183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2182, i64 -1
  %2184 = bitcast %"class.sh::TIntermNode"** %2183 to <2 x i64>*
  store <2 x i64> %2179, <2 x i64>* %2184, align 8, !alias.scope !32, !noalias !29
  %2185 = sub nuw nsw i64 -4, %2167
  %2186 = sub nuw nsw i64 -4, %2167
  %2187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2164, i64 %2185
  %2188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2165, i64 %2186
  %2189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2188, i64 -1
  %2190 = bitcast %"class.sh::TIntermNode"** %2189 to <2 x i64>*
  %2191 = load <2 x i64>, <2 x i64>* %2190, align 8, !alias.scope !29
  %2192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2188, i64 -2
  %2193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2192, i64 -1
  %2194 = bitcast %"class.sh::TIntermNode"** %2193 to <2 x i64>*
  %2195 = load <2 x i64>, <2 x i64>* %2194, align 8, !alias.scope !29
  %2196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2187, i64 -1
  %2197 = bitcast %"class.sh::TIntermNode"** %2196 to <2 x i64>*
  store <2 x i64> %2191, <2 x i64>* %2197, align 8, !alias.scope !32, !noalias !29
  %2198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2187, i64 -2
  %2199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2198, i64 -1
  %2200 = bitcast %"class.sh::TIntermNode"** %2199 to <2 x i64>*
  store <2 x i64> %2195, <2 x i64>* %2200, align 8, !alias.scope !32, !noalias !29
  %2201 = add i64 %2167, 8
  %2202 = add i64 %2168, -2
  %2203 = icmp eq i64 %2202, 0
  br i1 %2203, label %2204, label %2166, !llvm.loop !34

2204:                                             ; preds = %2166, %2147
  %2205 = phi i64 [ 0, %2147 ], [ %2201, %2166 ]
  %2206 = icmp eq i64 %2156, 0
  br i1 %2206, label %2227, label %2207

2207:                                             ; preds = %2204
  %2208 = sub i64 0, %2205
  %2209 = getelementptr i8, i8* %2116, i64 -8
  %2210 = bitcast i8* %2209 to %"class.sh::TIntermNode"**
  %2211 = sub i64 0, %2205
  %2212 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2123, i64 -1
  %2213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2210, i64 %2208
  %2214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2212, i64 %2211
  %2215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2214, i64 -1
  %2216 = bitcast %"class.sh::TIntermNode"** %2215 to <2 x i64>*
  %2217 = load <2 x i64>, <2 x i64>* %2216, align 8, !alias.scope !29
  %2218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2214, i64 -2
  %2219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2218, i64 -1
  %2220 = bitcast %"class.sh::TIntermNode"** %2219 to <2 x i64>*
  %2221 = load <2 x i64>, <2 x i64>* %2220, align 8, !alias.scope !29
  %2222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2213, i64 -1
  %2223 = bitcast %"class.sh::TIntermNode"** %2222 to <2 x i64>*
  store <2 x i64> %2217, <2 x i64>* %2223, align 8, !alias.scope !32, !noalias !29
  %2224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2213, i64 -2
  %2225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2224, i64 -1
  %2226 = bitcast %"class.sh::TIntermNode"** %2225 to <2 x i64>*
  store <2 x i64> %2221, <2 x i64>* %2226, align 8, !alias.scope !32, !noalias !29
  br label %2227

2227:                                             ; preds = %2204, %2207
  %2228 = icmp eq i64 %2131, %2148
  br i1 %2228, label %2299, label %2229

2229:                                             ; preds = %2227, %2133, %2126
  %2230 = phi %"class.sh::TIntermNode"** [ %2117, %2133 ], [ %2117, %2126 ], [ %2150, %2227 ]
  %2231 = phi %"class.sh::TIntermNode"** [ %2123, %2133 ], [ %2123, %2126 ], [ %2152, %2227 ]
  %2232 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2231, i64 -1
  %2233 = ptrtoint %"class.sh::TIntermNode"** %2232 to i64
  %2234 = sub i64 %2233, %2122
  %2235 = lshr i64 %2234, 3
  %2236 = add nuw nsw i64 %2235, 1
  %2237 = and i64 %2236, 7
  %2238 = icmp eq i64 %2237, 0
  br i1 %2238, label %2250, label %2239

2239:                                             ; preds = %2229, %2239
  %2240 = phi %"class.sh::TIntermNode"** [ %2243, %2239 ], [ %2230, %2229 ]
  %2241 = phi %"class.sh::TIntermNode"** [ %2244, %2239 ], [ %2231, %2229 ]
  %2242 = phi i64 [ %2248, %2239 ], [ %2237, %2229 ]
  %2243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2240, i64 -1
  %2244 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2241, i64 -1
  %2245 = bitcast %"class.sh::TIntermNode"** %2244 to i64*
  %2246 = load i64, i64* %2245, align 8
  %2247 = bitcast %"class.sh::TIntermNode"** %2243 to i64*
  store i64 %2246, i64* %2247, align 8
  %2248 = add i64 %2242, -1
  %2249 = icmp eq i64 %2248, 0
  br i1 %2249, label %2250, label %2239, !llvm.loop !35

2250:                                             ; preds = %2239, %2229
  %2251 = phi %"class.sh::TIntermNode"** [ undef, %2229 ], [ %2243, %2239 ]
  %2252 = phi %"class.sh::TIntermNode"** [ %2230, %2229 ], [ %2243, %2239 ]
  %2253 = phi %"class.sh::TIntermNode"** [ %2231, %2229 ], [ %2244, %2239 ]
  %2254 = icmp ult i64 %2234, 56
  br i1 %2254, label %2299, label %2255

2255:                                             ; preds = %2250, %2255
  %2256 = phi %"class.sh::TIntermNode"** [ %2293, %2255 ], [ %2252, %2250 ]
  %2257 = phi %"class.sh::TIntermNode"** [ %2294, %2255 ], [ %2253, %2250 ]
  %2258 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -1
  %2259 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -1
  %2260 = bitcast %"class.sh::TIntermNode"** %2259 to i64*
  %2261 = load i64, i64* %2260, align 8
  %2262 = bitcast %"class.sh::TIntermNode"** %2258 to i64*
  store i64 %2261, i64* %2262, align 8
  %2263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -2
  %2264 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -2
  %2265 = bitcast %"class.sh::TIntermNode"** %2264 to i64*
  %2266 = load i64, i64* %2265, align 8
  %2267 = bitcast %"class.sh::TIntermNode"** %2263 to i64*
  store i64 %2266, i64* %2267, align 8
  %2268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -3
  %2269 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -3
  %2270 = bitcast %"class.sh::TIntermNode"** %2269 to i64*
  %2271 = load i64, i64* %2270, align 8
  %2272 = bitcast %"class.sh::TIntermNode"** %2268 to i64*
  store i64 %2271, i64* %2272, align 8
  %2273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -4
  %2274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -4
  %2275 = bitcast %"class.sh::TIntermNode"** %2274 to i64*
  %2276 = load i64, i64* %2275, align 8
  %2277 = bitcast %"class.sh::TIntermNode"** %2273 to i64*
  store i64 %2276, i64* %2277, align 8
  %2278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -5
  %2279 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -5
  %2280 = bitcast %"class.sh::TIntermNode"** %2279 to i64*
  %2281 = load i64, i64* %2280, align 8
  %2282 = bitcast %"class.sh::TIntermNode"** %2278 to i64*
  store i64 %2281, i64* %2282, align 8
  %2283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -6
  %2284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -6
  %2285 = bitcast %"class.sh::TIntermNode"** %2284 to i64*
  %2286 = load i64, i64* %2285, align 8
  %2287 = bitcast %"class.sh::TIntermNode"** %2283 to i64*
  store i64 %2286, i64* %2287, align 8
  %2288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -7
  %2289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -7
  %2290 = bitcast %"class.sh::TIntermNode"** %2289 to i64*
  %2291 = load i64, i64* %2290, align 8
  %2292 = bitcast %"class.sh::TIntermNode"** %2288 to i64*
  store i64 %2291, i64* %2292, align 8
  %2293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2256, i64 -8
  %2294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2257, i64 -8
  %2295 = bitcast %"class.sh::TIntermNode"** %2294 to i64*
  %2296 = load i64, i64* %2295, align 8
  %2297 = bitcast %"class.sh::TIntermNode"** %2293 to i64*
  store i64 %2296, i64* %2297, align 8
  %2298 = icmp eq %"class.sh::TIntermNode"** %2294, %2121
  br i1 %2298, label %2299, label %2255, !llvm.loop !36

2299:                                             ; preds = %2250, %2255, %2227, %2088
  %2300 = phi %"class.sh::TIntermNode"** [ %2117, %2088 ], [ %2150, %2227 ], [ %2251, %2250 ], [ %2293, %2255 ]
  %2301 = ptrtoint %"class.sh::TIntermNode"** %2300 to i64
  store i64 %2301, i64* %2113, align 8
  store i64 %2119, i64* %2112, align 8
  store i64 %2119, i64* %2114, align 8
  %2302 = bitcast %"class.sh::TVector.45"* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2302) #9
  %2303 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %39, i64 0, i32 0, i32 0, i32 0
  %2304 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %39, i64 0, i32 0, i32 0, i32 1
  %2305 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %39, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2302, i8 0, i64 24, i1 false) #9
  %2306 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE to %"class.sh::TType"*), %"class.sh::TVector.45"* nonnull %38) #9
  %2307 = ptrtoint %"class.sh::TIntermAggregate"* %2306 to i64
  %2308 = bitcast %"class.sh::TIntermNode"*** %2304 to i64*
  %2309 = bitcast %"class.sh::TVector.45"* %39 to i64*
  %2310 = bitcast %"class.sh::TIntermNode"*** %2305 to i64*
  %2311 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2312 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2311, i64 8) #9
  %2313 = bitcast i8* %2312 to %"class.sh::TIntermNode"**
  %2314 = getelementptr inbounds i8, i8* %2312, i64 8
  %2315 = ptrtoint i8* %2314 to i64
  %2316 = bitcast i8* %2312 to i64*
  store i64 %2307, i64* %2316, align 8
  %2317 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2303, align 8
  %2318 = ptrtoint %"class.sh::TIntermNode"** %2317 to i64
  %2319 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2304, align 8
  %2320 = bitcast %"class.sh::TIntermNode"** %2319 to i8*
  %2321 = icmp eq %"class.sh::TIntermNode"** %2319, %2317
  br i1 %2321, label %2495, label %2322

2322:                                             ; preds = %2299
  %2323 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 -1
  %2324 = ptrtoint %"class.sh::TIntermNode"** %2323 to i64
  %2325 = sub i64 %2324, %2318
  %2326 = lshr i64 %2325, 3
  %2327 = add nuw nsw i64 %2326, 1
  %2328 = icmp ult i64 %2327, 4
  br i1 %2328, label %2425, label %2329

2329:                                             ; preds = %2322
  %2330 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 -1
  %2331 = ptrtoint %"class.sh::TIntermNode"** %2330 to i64
  %2332 = sub i64 %2331, %2318
  %2333 = lshr i64 %2332, 3
  %2334 = and i64 %2332, -8
  %2335 = xor i64 %2334, -8
  %2336 = getelementptr i8, i8* %2312, i64 %2335
  %2337 = xor i64 %2333, -1
  %2338 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 %2337
  %2339 = bitcast %"class.sh::TIntermNode"** %2338 to i8*
  %2340 = icmp ult i8* %2336, %2320
  %2341 = icmp ugt i8* %2312, %2339
  %2342 = and i1 %2340, %2341
  br i1 %2342, label %2425, label %2343

2343:                                             ; preds = %2329
  %2344 = and i64 %2327, 4611686018427387900
  %2345 = sub nsw i64 0, %2344
  %2346 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2313, i64 %2345
  %2347 = sub nsw i64 0, %2344
  %2348 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 %2347
  %2349 = add nsw i64 %2344, -4
  %2350 = lshr exact i64 %2349, 2
  %2351 = add nuw nsw i64 %2350, 1
  %2352 = and i64 %2351, 1
  %2353 = icmp eq i64 %2349, 0
  br i1 %2353, label %2402, label %2354

2354:                                             ; preds = %2343
  %2355 = sub nuw nsw i64 %2351, %2352
  %2356 = getelementptr i8, i8* %2312, i64 -8
  %2357 = bitcast i8* %2356 to %"class.sh::TIntermNode"**
  %2358 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 -1
  %2359 = getelementptr i8, i8* %2312, i64 -8
  %2360 = bitcast i8* %2359 to %"class.sh::TIntermNode"**
  %2361 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 -1
  br label %2362

2362:                                             ; preds = %2362, %2354
  %2363 = phi i64 [ 0, %2354 ], [ %2397, %2362 ]
  %2364 = phi i64 [ %2355, %2354 ], [ %2398, %2362 ]
  %2365 = sub i64 0, %2363
  %2366 = sub i64 0, %2363
  %2367 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2357, i64 %2365
  %2368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2358, i64 %2366
  %2369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2368, i64 -1
  %2370 = bitcast %"class.sh::TIntermNode"** %2369 to <2 x i64>*
  %2371 = load <2 x i64>, <2 x i64>* %2370, align 8, !alias.scope !37
  %2372 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2368, i64 -2
  %2373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2372, i64 -1
  %2374 = bitcast %"class.sh::TIntermNode"** %2373 to <2 x i64>*
  %2375 = load <2 x i64>, <2 x i64>* %2374, align 8, !alias.scope !37
  %2376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2367, i64 -1
  %2377 = bitcast %"class.sh::TIntermNode"** %2376 to <2 x i64>*
  store <2 x i64> %2371, <2 x i64>* %2377, align 8, !alias.scope !40, !noalias !37
  %2378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2367, i64 -2
  %2379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2378, i64 -1
  %2380 = bitcast %"class.sh::TIntermNode"** %2379 to <2 x i64>*
  store <2 x i64> %2375, <2 x i64>* %2380, align 8, !alias.scope !40, !noalias !37
  %2381 = sub nuw nsw i64 -4, %2363
  %2382 = sub nuw nsw i64 -4, %2363
  %2383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2360, i64 %2381
  %2384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2361, i64 %2382
  %2385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2384, i64 -1
  %2386 = bitcast %"class.sh::TIntermNode"** %2385 to <2 x i64>*
  %2387 = load <2 x i64>, <2 x i64>* %2386, align 8, !alias.scope !37
  %2388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2384, i64 -2
  %2389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2388, i64 -1
  %2390 = bitcast %"class.sh::TIntermNode"** %2389 to <2 x i64>*
  %2391 = load <2 x i64>, <2 x i64>* %2390, align 8, !alias.scope !37
  %2392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2383, i64 -1
  %2393 = bitcast %"class.sh::TIntermNode"** %2392 to <2 x i64>*
  store <2 x i64> %2387, <2 x i64>* %2393, align 8, !alias.scope !40, !noalias !37
  %2394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2383, i64 -2
  %2395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2394, i64 -1
  %2396 = bitcast %"class.sh::TIntermNode"** %2395 to <2 x i64>*
  store <2 x i64> %2391, <2 x i64>* %2396, align 8, !alias.scope !40, !noalias !37
  %2397 = add i64 %2363, 8
  %2398 = add i64 %2364, -2
  %2399 = icmp eq i64 %2398, 0
  br i1 %2399, label %2400, label %2362, !llvm.loop !42

2400:                                             ; preds = %2362
  %2401 = sub nuw nsw i64 -8, %2363
  br label %2402

2402:                                             ; preds = %2400, %2343
  %2403 = phi i64 [ 0, %2343 ], [ %2401, %2400 ]
  %2404 = icmp eq i64 %2352, 0
  br i1 %2404, label %2423, label %2405

2405:                                             ; preds = %2402
  %2406 = getelementptr i8, i8* %2312, i64 -8
  %2407 = bitcast i8* %2406 to %"class.sh::TIntermNode"**
  %2408 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2319, i64 -1
  %2409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2407, i64 %2403
  %2410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2408, i64 %2403
  %2411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2410, i64 -1
  %2412 = bitcast %"class.sh::TIntermNode"** %2411 to <2 x i64>*
  %2413 = load <2 x i64>, <2 x i64>* %2412, align 8, !alias.scope !37
  %2414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2410, i64 -2
  %2415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2414, i64 -1
  %2416 = bitcast %"class.sh::TIntermNode"** %2415 to <2 x i64>*
  %2417 = load <2 x i64>, <2 x i64>* %2416, align 8, !alias.scope !37
  %2418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2409, i64 -1
  %2419 = bitcast %"class.sh::TIntermNode"** %2418 to <2 x i64>*
  store <2 x i64> %2413, <2 x i64>* %2419, align 8, !alias.scope !40, !noalias !37
  %2420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2409, i64 -2
  %2421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2420, i64 -1
  %2422 = bitcast %"class.sh::TIntermNode"** %2421 to <2 x i64>*
  store <2 x i64> %2417, <2 x i64>* %2422, align 8, !alias.scope !40, !noalias !37
  br label %2423

2423:                                             ; preds = %2402, %2405
  %2424 = icmp eq i64 %2327, %2344
  br i1 %2424, label %2495, label %2425

2425:                                             ; preds = %2423, %2329, %2322
  %2426 = phi %"class.sh::TIntermNode"** [ %2313, %2329 ], [ %2313, %2322 ], [ %2346, %2423 ]
  %2427 = phi %"class.sh::TIntermNode"** [ %2319, %2329 ], [ %2319, %2322 ], [ %2348, %2423 ]
  %2428 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2427, i64 -1
  %2429 = ptrtoint %"class.sh::TIntermNode"** %2428 to i64
  %2430 = sub i64 %2429, %2318
  %2431 = lshr i64 %2430, 3
  %2432 = add nuw nsw i64 %2431, 1
  %2433 = and i64 %2432, 7
  %2434 = icmp eq i64 %2433, 0
  br i1 %2434, label %2446, label %2435

2435:                                             ; preds = %2425, %2435
  %2436 = phi %"class.sh::TIntermNode"** [ %2439, %2435 ], [ %2426, %2425 ]
  %2437 = phi %"class.sh::TIntermNode"** [ %2440, %2435 ], [ %2427, %2425 ]
  %2438 = phi i64 [ %2444, %2435 ], [ %2433, %2425 ]
  %2439 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2436, i64 -1
  %2440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2437, i64 -1
  %2441 = bitcast %"class.sh::TIntermNode"** %2440 to i64*
  %2442 = load i64, i64* %2441, align 8
  %2443 = bitcast %"class.sh::TIntermNode"** %2439 to i64*
  store i64 %2442, i64* %2443, align 8
  %2444 = add i64 %2438, -1
  %2445 = icmp eq i64 %2444, 0
  br i1 %2445, label %2446, label %2435, !llvm.loop !43

2446:                                             ; preds = %2435, %2425
  %2447 = phi %"class.sh::TIntermNode"** [ undef, %2425 ], [ %2439, %2435 ]
  %2448 = phi %"class.sh::TIntermNode"** [ %2426, %2425 ], [ %2439, %2435 ]
  %2449 = phi %"class.sh::TIntermNode"** [ %2427, %2425 ], [ %2440, %2435 ]
  %2450 = icmp ult i64 %2430, 56
  br i1 %2450, label %2495, label %2451

2451:                                             ; preds = %2446, %2451
  %2452 = phi %"class.sh::TIntermNode"** [ %2489, %2451 ], [ %2448, %2446 ]
  %2453 = phi %"class.sh::TIntermNode"** [ %2490, %2451 ], [ %2449, %2446 ]
  %2454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -1
  %2455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -1
  %2456 = bitcast %"class.sh::TIntermNode"** %2455 to i64*
  %2457 = load i64, i64* %2456, align 8
  %2458 = bitcast %"class.sh::TIntermNode"** %2454 to i64*
  store i64 %2457, i64* %2458, align 8
  %2459 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -2
  %2460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -2
  %2461 = bitcast %"class.sh::TIntermNode"** %2460 to i64*
  %2462 = load i64, i64* %2461, align 8
  %2463 = bitcast %"class.sh::TIntermNode"** %2459 to i64*
  store i64 %2462, i64* %2463, align 8
  %2464 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -3
  %2465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -3
  %2466 = bitcast %"class.sh::TIntermNode"** %2465 to i64*
  %2467 = load i64, i64* %2466, align 8
  %2468 = bitcast %"class.sh::TIntermNode"** %2464 to i64*
  store i64 %2467, i64* %2468, align 8
  %2469 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -4
  %2470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -4
  %2471 = bitcast %"class.sh::TIntermNode"** %2470 to i64*
  %2472 = load i64, i64* %2471, align 8
  %2473 = bitcast %"class.sh::TIntermNode"** %2469 to i64*
  store i64 %2472, i64* %2473, align 8
  %2474 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -5
  %2475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -5
  %2476 = bitcast %"class.sh::TIntermNode"** %2475 to i64*
  %2477 = load i64, i64* %2476, align 8
  %2478 = bitcast %"class.sh::TIntermNode"** %2474 to i64*
  store i64 %2477, i64* %2478, align 8
  %2479 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -6
  %2480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -6
  %2481 = bitcast %"class.sh::TIntermNode"** %2480 to i64*
  %2482 = load i64, i64* %2481, align 8
  %2483 = bitcast %"class.sh::TIntermNode"** %2479 to i64*
  store i64 %2482, i64* %2483, align 8
  %2484 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -7
  %2485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -7
  %2486 = bitcast %"class.sh::TIntermNode"** %2485 to i64*
  %2487 = load i64, i64* %2486, align 8
  %2488 = bitcast %"class.sh::TIntermNode"** %2484 to i64*
  store i64 %2487, i64* %2488, align 8
  %2489 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2452, i64 -8
  %2490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2453, i64 -8
  %2491 = bitcast %"class.sh::TIntermNode"** %2490 to i64*
  %2492 = load i64, i64* %2491, align 8
  %2493 = bitcast %"class.sh::TIntermNode"** %2489 to i64*
  store i64 %2492, i64* %2493, align 8
  %2494 = icmp eq %"class.sh::TIntermNode"** %2490, %2317
  br i1 %2494, label %2495, label %2451, !llvm.loop !44

2495:                                             ; preds = %2446, %2451, %2423, %2299
  %2496 = phi %"class.sh::TIntermNode"** [ %2313, %2299 ], [ %2346, %2423 ], [ %2447, %2446 ], [ %2489, %2451 ]
  %2497 = ptrtoint %"class.sh::TIntermNode"** %2496 to i64
  store i64 %2497, i64* %2309, align 8
  store i64 %2315, i64* %2308, align 8
  store i64 %2315, i64* %2310, align 8
  %2498 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80) %2024, %"class.sh::TVector.45"* nonnull %39) #9
  %2499 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2498, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %2099, %"class.sh::TIntermNode"* %2499) #9
  %2500 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2501 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2500, i64 48) #9
  %2502 = bitcast i8* %2501 to %"class.sh::TIntermIfElse"*
  %2503 = bitcast i8* %2091 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* %2502, %"class.sh::TIntermTyped"* %2503, %"class.sh::TIntermBlock"* %2099, %"class.sh::TIntermBlock"* null) #9
  %2504 = bitcast i8* %2501 to %"class.sh::TIntermNode"*
  %2505 = call zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermBlock"* %2, %"class.sh::TIntermNode"* %2504, %"class.sh::TSymbolTable"* %70) #9
  br i1 %2505, label %2506, label %2819

2506:                                             ; preds = %2495
  %2507 = bitcast i32* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2507) #9
  store i32 0, i32* %40, align 4
  %2508 = bitcast %"class.sh::ImmutableStringBuilder"* %41 to i8*
  %2509 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %41, i64 0, i32 0
  %2510 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %41, i64 0, i32 1
  %2511 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %41, i64 0, i32 2
  %2512 = bitcast %"class.sh::ImmutableStringBuilder"* %42 to i8*
  %2513 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %42, i64 0, i32 0
  %2514 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %42, i64 0, i32 1
  %2515 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %42, i64 0, i32 2
  %2516 = bitcast %"struct.sh::TLayoutQualifier"* %43 to i8*
  %2517 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 4, i32 0, i64 0
  %2518 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 7
  %2519 = bitcast i32* %2517 to i8*
  %2520 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 8
  %2521 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 9
  %2522 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 10
  %2523 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 12
  %2524 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 13
  %2525 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 14
  %2526 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 15
  %2527 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 20
  %2528 = bitcast i32* %2526 to i8*
  %2529 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 21
  %2530 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %43, i64 0, i32 22
  %2531 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %44, i64 0, i32 0
  %2532 = bitcast %"struct.sh::TMemoryQualifier"* %44 to i40*
  %2533 = bitcast %"class.sh::ImmutableString"* %45 to i8*
  %2534 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %45, i64 0, i32 0
  %2535 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %45, i64 0, i32 1
  %2536 = bitcast %"class.sh::ImmutableString"* %46 to i8*
  %2537 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %46, i64 0, i32 0
  %2538 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %46, i64 0, i32 1
  %2539 = bitcast i8** %2511 to i64*
  %2540 = bitcast i8** %2515 to i64*
  %2541 = bitcast %"struct.sh::TLayoutQualifier"* %43 to <4 x i32>*
  br label %2545

2542:                                             ; preds = %2796
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2507) #9
  %2543 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %2544 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermNode"* %2543) #9
  br label %2819

2545:                                             ; preds = %2796, %2506
  %2546 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2547 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2546, i64 24) #9
  call void @llvm.memset.p0i8.i64(i8* align 8 %2547, i8 0, i64 24, i1 false) #9
  %2548 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2549 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2548, i64 184) #9
  %2550 = bitcast i8* %2549 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %2550, i32 1, i8 zeroext 1, i8 zeroext 1) #9
  call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %2550, i32 0) #9
  %2551 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2552 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2551, i64 48) #9
  br label %2553

2553:                                             ; preds = %2553, %2545
  %2554 = phi i64 [ %2558, %2553 ], [ 0, %2545 ]
  %2555 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk28kXfbEmulationBufferFieldNameE, i64 0, i64 %2554
  %2556 = load i8, i8* %2555, align 1
  %2557 = icmp eq i8 %2556, 0
  %2558 = add i64 %2554, 1
  br i1 %2557, label %2559, label %2553

2559:                                             ; preds = %2553
  %2560 = bitcast i8* %2547 to %"class.sh::TVector.25"*
  %2561 = bitcast i8* %2552 to i8**
  store i8* %2549, i8** %2561, align 8
  %2562 = getelementptr inbounds i8, i8* %2552, i64 8
  %2563 = bitcast i8* %2562 to i8**
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk28kXfbEmulationBufferFieldNameE, i64 0, i64 0), i8** %2563, align 8
  %2564 = getelementptr inbounds i8, i8* %2552, i64 16
  %2565 = bitcast i8* %2564 to i64*
  store i64 %2554, i64* %2565, align 8
  %2566 = getelementptr inbounds i8, i8* %2552, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %2566, i8 0, i64 16, i1 false) #9
  %2567 = getelementptr inbounds i8, i8* %2552, i64 40
  store i8 2, i8* %2567, align 8
  %2568 = ptrtoint i8* %2552 to i64
  %2569 = getelementptr inbounds i8, i8* %2547, i64 8
  %2570 = bitcast i8* %2569 to %"class.sh::TField"***
  %2571 = load %"class.sh::TField"**, %"class.sh::TField"*** %2570, align 8
  %2572 = getelementptr inbounds i8, i8* %2547, i64 16
  %2573 = bitcast i8* %2572 to %"class.sh::TField"***
  %2574 = load %"class.sh::TField"**, %"class.sh::TField"*** %2573, align 8
  %2575 = icmp eq %"class.sh::TField"** %2571, %2574
  %2576 = ptrtoint %"class.sh::TField"** %2574 to i64
  br i1 %2575, label %2582, label %2577

2577:                                             ; preds = %2559
  %2578 = bitcast %"class.sh::TField"** %2571 to i64*
  store i64 %2568, i64* %2578, align 8
  %2579 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2571, i64 1
  %2580 = ptrtoint %"class.sh::TField"** %2579 to i64
  %2581 = bitcast i8* %2569 to i64*
  store i64 %2580, i64* %2581, align 8
  br label %2796

2582:                                             ; preds = %2559
  %2583 = ptrtoint %"class.sh::TField"** %2571 to i64
  %2584 = bitcast i8* %2569 to i64*
  %2585 = bitcast i8* %2547 to i64*
  %2586 = load i64, i64* %2585, align 8
  %2587 = sub i64 %2583, %2586
  %2588 = ashr exact i64 %2587, 3
  %2589 = add nsw i64 %2588, 1
  %2590 = icmp ugt i64 %2589, 2305843009213693951
  br i1 %2590, label %2591, label %2593

2591:                                             ; preds = %2582
  %2592 = bitcast i8* %2547 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2592) #15
  unreachable

2593:                                             ; preds = %2582
  %2594 = bitcast i8* %2572 to i64*
  %2595 = sub i64 %2576, %2586
  %2596 = ashr exact i64 %2595, 3
  %2597 = icmp ult i64 %2596, 1152921504606846975
  br i1 %2597, label %2598, label %2603

2598:                                             ; preds = %2593
  %2599 = ashr exact i64 %2595, 2
  %2600 = icmp ult i64 %2599, %2589
  %2601 = select i1 %2600, i64 %2589, i64 %2599
  %2602 = icmp eq i64 %2601, 0
  br i1 %2602, label %2609, label %2603

2603:                                             ; preds = %2598, %2593
  %2604 = phi i64 [ %2601, %2598 ], [ 2305843009213693951, %2593 ]
  %2605 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2606 = shl i64 %2604, 3
  %2607 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2605, i64 %2606) #9
  %2608 = bitcast i8* %2607 to %"class.sh::TField"**
  br label %2609

2609:                                             ; preds = %2603, %2598
  %2610 = phi i64 [ %2604, %2603 ], [ 0, %2598 ]
  %2611 = phi %"class.sh::TField"** [ %2608, %2603 ], [ null, %2598 ]
  %2612 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2611, i64 %2588
  %2613 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2611, i64 %2610
  %2614 = ptrtoint %"class.sh::TField"** %2613 to i64
  %2615 = bitcast %"class.sh::TField"** %2612 to i64*
  store i64 %2568, i64* %2615, align 8
  %2616 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2612, i64 1
  %2617 = ptrtoint %"class.sh::TField"** %2616 to i64
  %2618 = bitcast i8* %2547 to %"class.sh::TField"***
  %2619 = load %"class.sh::TField"**, %"class.sh::TField"*** %2618, align 8
  %2620 = ptrtoint %"class.sh::TField"** %2619 to i64
  %2621 = load %"class.sh::TField"**, %"class.sh::TField"*** %2570, align 8
  %2622 = icmp eq %"class.sh::TField"** %2621, %2619
  br i1 %2622, label %2793, label %2623

2623:                                             ; preds = %2609
  %2624 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 -1
  %2625 = ptrtoint %"class.sh::TField"** %2624 to i64
  %2626 = sub i64 %2625, %2620
  %2627 = lshr i64 %2626, 3
  %2628 = add nuw nsw i64 %2627, 1
  %2629 = icmp ult i64 %2628, 4
  br i1 %2629, label %2723, label %2630

2630:                                             ; preds = %2623
  %2631 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2611, i64 -1
  %2632 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 -1
  %2633 = ptrtoint %"class.sh::TField"** %2632 to i64
  %2634 = sub i64 %2633, %2620
  %2635 = lshr i64 %2634, 3
  %2636 = sub nsw i64 %2588, %2635
  %2637 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2631, i64 %2636
  %2638 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 -1
  %2639 = sub nsw i64 0, %2635
  %2640 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2638, i64 %2639
  %2641 = icmp ult %"class.sh::TField"** %2637, %2621
  %2642 = icmp ult %"class.sh::TField"** %2640, %2612
  %2643 = and i1 %2641, %2642
  br i1 %2643, label %2723, label %2644

2644:                                             ; preds = %2630
  %2645 = and i64 %2628, 4611686018427387900
  %2646 = sub nsw i64 0, %2645
  %2647 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2612, i64 %2646
  %2648 = sub nsw i64 0, %2645
  %2649 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 %2648
  %2650 = add nsw i64 %2645, -4
  %2651 = lshr exact i64 %2650, 2
  %2652 = add nuw nsw i64 %2651, 1
  %2653 = and i64 %2652, 1
  %2654 = icmp eq i64 %2650, 0
  br i1 %2654, label %2699, label %2655

2655:                                             ; preds = %2644
  %2656 = sub nuw nsw i64 %2652, %2653
  %2657 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2612, i64 -1
  %2658 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 -1
  %2659 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2612, i64 -1
  %2660 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 -1
  br label %2661

2661:                                             ; preds = %2661, %2655
  %2662 = phi i64 [ 0, %2655 ], [ %2696, %2661 ]
  %2663 = phi i64 [ %2656, %2655 ], [ %2697, %2661 ]
  %2664 = sub i64 0, %2662
  %2665 = sub i64 0, %2662
  %2666 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2657, i64 %2664
  %2667 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2658, i64 %2665
  %2668 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2667, i64 -1
  %2669 = bitcast %"class.sh::TField"** %2668 to <2 x i64>*
  %2670 = load <2 x i64>, <2 x i64>* %2669, align 8, !alias.scope !45
  %2671 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2667, i64 -2
  %2672 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2671, i64 -1
  %2673 = bitcast %"class.sh::TField"** %2672 to <2 x i64>*
  %2674 = load <2 x i64>, <2 x i64>* %2673, align 8, !alias.scope !45
  %2675 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2666, i64 -1
  %2676 = bitcast %"class.sh::TField"** %2675 to <2 x i64>*
  store <2 x i64> %2670, <2 x i64>* %2676, align 8, !alias.scope !48, !noalias !45
  %2677 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2666, i64 -2
  %2678 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2677, i64 -1
  %2679 = bitcast %"class.sh::TField"** %2678 to <2 x i64>*
  store <2 x i64> %2674, <2 x i64>* %2679, align 8, !alias.scope !48, !noalias !45
  %2680 = sub nuw nsw i64 -4, %2662
  %2681 = sub nuw nsw i64 -4, %2662
  %2682 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2659, i64 %2680
  %2683 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2660, i64 %2681
  %2684 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2683, i64 -1
  %2685 = bitcast %"class.sh::TField"** %2684 to <2 x i64>*
  %2686 = load <2 x i64>, <2 x i64>* %2685, align 8, !alias.scope !45
  %2687 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2683, i64 -2
  %2688 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2687, i64 -1
  %2689 = bitcast %"class.sh::TField"** %2688 to <2 x i64>*
  %2690 = load <2 x i64>, <2 x i64>* %2689, align 8, !alias.scope !45
  %2691 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2682, i64 -1
  %2692 = bitcast %"class.sh::TField"** %2691 to <2 x i64>*
  store <2 x i64> %2686, <2 x i64>* %2692, align 8, !alias.scope !48, !noalias !45
  %2693 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2682, i64 -2
  %2694 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2693, i64 -1
  %2695 = bitcast %"class.sh::TField"** %2694 to <2 x i64>*
  store <2 x i64> %2690, <2 x i64>* %2695, align 8, !alias.scope !48, !noalias !45
  %2696 = add i64 %2662, 8
  %2697 = add i64 %2663, -2
  %2698 = icmp eq i64 %2697, 0
  br i1 %2698, label %2699, label %2661, !llvm.loop !50

2699:                                             ; preds = %2661, %2644
  %2700 = phi i64 [ 0, %2644 ], [ %2696, %2661 ]
  %2701 = icmp eq i64 %2653, 0
  br i1 %2701, label %2721, label %2702

2702:                                             ; preds = %2699
  %2703 = sub i64 0, %2700
  %2704 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2612, i64 -1
  %2705 = sub i64 0, %2700
  %2706 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2621, i64 -1
  %2707 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2704, i64 %2703
  %2708 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2706, i64 %2705
  %2709 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2708, i64 -1
  %2710 = bitcast %"class.sh::TField"** %2709 to <2 x i64>*
  %2711 = load <2 x i64>, <2 x i64>* %2710, align 8, !alias.scope !45
  %2712 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2708, i64 -2
  %2713 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2712, i64 -1
  %2714 = bitcast %"class.sh::TField"** %2713 to <2 x i64>*
  %2715 = load <2 x i64>, <2 x i64>* %2714, align 8, !alias.scope !45
  %2716 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2707, i64 -1
  %2717 = bitcast %"class.sh::TField"** %2716 to <2 x i64>*
  store <2 x i64> %2711, <2 x i64>* %2717, align 8, !alias.scope !48, !noalias !45
  %2718 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2707, i64 -2
  %2719 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2718, i64 -1
  %2720 = bitcast %"class.sh::TField"** %2719 to <2 x i64>*
  store <2 x i64> %2715, <2 x i64>* %2720, align 8, !alias.scope !48, !noalias !45
  br label %2721

2721:                                             ; preds = %2699, %2702
  %2722 = icmp eq i64 %2628, %2645
  br i1 %2722, label %2793, label %2723

2723:                                             ; preds = %2721, %2630, %2623
  %2724 = phi %"class.sh::TField"** [ %2612, %2630 ], [ %2612, %2623 ], [ %2647, %2721 ]
  %2725 = phi %"class.sh::TField"** [ %2621, %2630 ], [ %2621, %2623 ], [ %2649, %2721 ]
  %2726 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %2725, i64 -1
  %2727 = ptrtoint %"class.sh::TField"** %2726 to i64
  %2728 = sub i64 %2727, %2620
  %2729 = lshr i64 %2728, 3
  %2730 = add nuw nsw i64 %2729, 1
  %2731 = and i64 %2730, 7
  %2732 = icmp eq i64 %2731, 0
  br i1 %2732, label %2744, label %2733

2733:                                             ; preds = %2723, %2733
  %2734 = phi %"class.sh::TField"** [ %2737, %2733 ], [ %2724, %2723 ]
  %2735 = phi %"class.sh::TField"** [ %2738, %2733 ], [ %2725, %2723 ]
  %2736 = phi i64 [ %2742, %2733 ], [ %2731, %2723 ]
  %2737 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2734, i64 -1
  %2738 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2735, i64 -1
  %2739 = bitcast %"class.sh::TField"** %2738 to i64*
  %2740 = load i64, i64* %2739, align 8
  %2741 = bitcast %"class.sh::TField"** %2737 to i64*
  store i64 %2740, i64* %2741, align 8
  %2742 = add i64 %2736, -1
  %2743 = icmp eq i64 %2742, 0
  br i1 %2743, label %2744, label %2733, !llvm.loop !51

2744:                                             ; preds = %2733, %2723
  %2745 = phi %"class.sh::TField"** [ undef, %2723 ], [ %2737, %2733 ]
  %2746 = phi %"class.sh::TField"** [ %2724, %2723 ], [ %2737, %2733 ]
  %2747 = phi %"class.sh::TField"** [ %2725, %2723 ], [ %2738, %2733 ]
  %2748 = icmp ult i64 %2728, 56
  br i1 %2748, label %2793, label %2749

2749:                                             ; preds = %2744, %2749
  %2750 = phi %"class.sh::TField"** [ %2787, %2749 ], [ %2746, %2744 ]
  %2751 = phi %"class.sh::TField"** [ %2788, %2749 ], [ %2747, %2744 ]
  %2752 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -1
  %2753 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -1
  %2754 = bitcast %"class.sh::TField"** %2753 to i64*
  %2755 = load i64, i64* %2754, align 8
  %2756 = bitcast %"class.sh::TField"** %2752 to i64*
  store i64 %2755, i64* %2756, align 8
  %2757 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -2
  %2758 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -2
  %2759 = bitcast %"class.sh::TField"** %2758 to i64*
  %2760 = load i64, i64* %2759, align 8
  %2761 = bitcast %"class.sh::TField"** %2757 to i64*
  store i64 %2760, i64* %2761, align 8
  %2762 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -3
  %2763 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -3
  %2764 = bitcast %"class.sh::TField"** %2763 to i64*
  %2765 = load i64, i64* %2764, align 8
  %2766 = bitcast %"class.sh::TField"** %2762 to i64*
  store i64 %2765, i64* %2766, align 8
  %2767 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -4
  %2768 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -4
  %2769 = bitcast %"class.sh::TField"** %2768 to i64*
  %2770 = load i64, i64* %2769, align 8
  %2771 = bitcast %"class.sh::TField"** %2767 to i64*
  store i64 %2770, i64* %2771, align 8
  %2772 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -5
  %2773 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -5
  %2774 = bitcast %"class.sh::TField"** %2773 to i64*
  %2775 = load i64, i64* %2774, align 8
  %2776 = bitcast %"class.sh::TField"** %2772 to i64*
  store i64 %2775, i64* %2776, align 8
  %2777 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -6
  %2778 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -6
  %2779 = bitcast %"class.sh::TField"** %2778 to i64*
  %2780 = load i64, i64* %2779, align 8
  %2781 = bitcast %"class.sh::TField"** %2777 to i64*
  store i64 %2780, i64* %2781, align 8
  %2782 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -7
  %2783 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -7
  %2784 = bitcast %"class.sh::TField"** %2783 to i64*
  %2785 = load i64, i64* %2784, align 8
  %2786 = bitcast %"class.sh::TField"** %2782 to i64*
  store i64 %2785, i64* %2786, align 8
  %2787 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2750, i64 -8
  %2788 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %2751, i64 -8
  %2789 = bitcast %"class.sh::TField"** %2788 to i64*
  %2790 = load i64, i64* %2789, align 8
  %2791 = bitcast %"class.sh::TField"** %2787 to i64*
  store i64 %2790, i64* %2791, align 8
  %2792 = icmp eq %"class.sh::TField"** %2788, %2619
  br i1 %2792, label %2793, label %2749, !llvm.loop !52

2793:                                             ; preds = %2744, %2749, %2721, %2609
  %2794 = phi %"class.sh::TField"** [ %2612, %2609 ], [ %2647, %2721 ], [ %2745, %2744 ], [ %2787, %2749 ]
  %2795 = ptrtoint %"class.sh::TField"** %2794 to i64
  store i64 %2795, i64* %2585, align 8
  store i64 %2617, i64* %2584, align 8
  store i64 %2614, i64* %2594, align 8
  br label %2796

2796:                                             ; preds = %2793, %2577
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2508) #9
  store i64 -6148914691236517206, i64* %2539, align 8
  %2797 = call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk28kXfbEmulationBufferBlockNameE, i64 0, i64 0)) #17
  %2798 = add i64 %2797, 2
  store i64 0, i64* %2509, align 8
  store i64 %2798, i64* %2510, align 8
  %2799 = add i64 %2797, 3
  %2800 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2801 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2800, i64 %2799) #9
  store i8* %2801, i8** %2511, align 8
  %2802 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsEPKc(%"class.sh::ImmutableStringBuilder"* nonnull %41, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk28kXfbEmulationBufferBlockNameE, i64 0, i64 0)) #9
  call void @_ZN2sh22ImmutableStringBuilder13appendDecimalERKj(%"class.sh::ImmutableStringBuilder"* nonnull %41, i32* nonnull dereferenceable(4) %40) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2512) #9
  store i64 -6148914691236517206, i64* %2540, align 8
  %2803 = call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk23kXfbEmulationBufferNameE, i64 0, i64 0)) #17
  %2804 = add i64 %2803, 2
  store i64 0, i64* %2513, align 8
  store i64 %2804, i64* %2514, align 8
  %2805 = add i64 %2803, 3
  %2806 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %2807 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2806, i64 %2805) #9
  store i8* %2807, i8** %2515, align 8
  %2808 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsEPKc(%"class.sh::ImmutableStringBuilder"* nonnull %42, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk23kXfbEmulationBufferNameE, i64 0, i64 0)) #9
  call void @_ZN2sh22ImmutableStringBuilder13appendDecimalERKj(%"class.sh::ImmutableStringBuilder"* nonnull %42, i32* nonnull dereferenceable(4) %40) #9
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %2516) #9
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %2541, align 16, !alias.scope !53
  call void @llvm.memset.p0i8.i64(i8* align 16 %2519, i8 -1, i64 20, i1 false) #9, !alias.scope !53
  store i32 0, i32* %2518, align 4, !alias.scope !53
  store i32 -1, i32* %2520, align 8, !alias.scope !53
  store i8 0, i8* %2521, align 4, !alias.scope !53
  store i8 0, i8* %2522, align 1, !alias.scope !53
  store i32 0, i32* %2523, align 16, !alias.scope !53
  store i32 0, i32* %2524, align 4, !alias.scope !53
  store i32 -1, i32* %2525, align 8, !alias.scope !53
  call void @llvm.memset.p0i8.i64(i8* align 4 %2528, i8 0, i64 20, i1 false) #9, !alias.scope !53
  store i32 -1, i32* %2527, align 16, !alias.scope !53
  store i32 -1, i32* %2529, align 4, !alias.scope !53
  store i8 0, i8* %2530, align 8, !alias.scope !53
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %2531) #9
  store i40 0, i40* %2532, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2533) #9
  %2809 = call { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"* nonnull %41) #9
  %2810 = extractvalue { i8*, i64 } %2809, 0
  store i8* %2810, i8** %2534, align 8
  %2811 = extractvalue { i8*, i64 } %2809, 1
  store i64 %2811, i64* %2535, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2536) #9
  %2812 = call { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"* nonnull %42) #9
  %2813 = extractvalue { i8*, i64 } %2812, 0
  store i8* %2813, i8** %2537, align 8
  %2814 = extractvalue { i8*, i64 } %2812, 1
  store i64 %2814, i64* %2538, align 8
  %2815 = call %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"* %2, %"class.sh::TSymbolTable"* %70, %"class.sh::TVector.25"* %2560, i32 7, %"struct.sh::TLayoutQualifier"* nonnull dereferenceable(92) %43, %"struct.sh::TMemoryQualifier"* nonnull dereferenceable(5) %44, i32 0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %45, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %46) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2536) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2533) #9
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %2531) #9
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %2516) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2512) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2508) #9
  %2816 = load i32, i32* %40, align 4
  %2817 = add i32 %2816, 1
  store i32 %2817, i32* %40, align 4
  %2818 = icmp ult i32 %2817, 4
  br i1 %2818, label %2545, label %2542

2819:                                             ; preds = %2542, %2495
  %2820 = phi i1 [ %2544, %2542 ], [ false, %2495 ]
  %2821 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2303, align 8
  %2822 = icmp eq %"class.sh::TIntermNode"** %2821, null
  br i1 %2822, label %2825, label %2823

2823:                                             ; preds = %2819
  %2824 = ptrtoint %"class.sh::TIntermNode"** %2821 to i64
  store i64 %2824, i64* %2308, align 8
  br label %2825

2825:                                             ; preds = %2823, %2819
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2302) #9
  %2826 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2107, align 8
  %2827 = icmp eq %"class.sh::TIntermNode"** %2826, null
  br i1 %2827, label %2831, label %2828

2828:                                             ; preds = %2825
  %2829 = ptrtoint %"class.sh::TIntermNode"** %2826 to i64
  %2830 = bitcast %"class.sh::TIntermNode"*** %2108 to i64*
  store i64 %2829, i64* %2830, align 8
  br label %2831

2831:                                             ; preds = %2825, %2828
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2106) #9
  br i1 %2820, label %2832, label %2868

2832:                                             ; preds = %1954, %2831
  %2833 = bitcast %"class.sh::TranslatorVulkan"* %0 to i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)***
  %2834 = load i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)**, i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)*** %2833, align 8
  %2835 = getelementptr inbounds i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)*, i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)** %2834, i64 7
  %2836 = load i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)*, i1 (%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*)** %2835, align 8
  %2837 = call zeroext i1 %2836(%"class.sh::TranslatorVulkan"* %0, %"class.sh::TIntermBlock"* %2, %"class.sh::DriverUniform"* %6) #9
  br i1 %2837, label %2862, label %2868

2838:                                             ; preds = %1077
  %2839 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 34
  %2840 = load i32, i32* %2839, align 4
  %2841 = icmp sgt i32 %2840, 1
  %2842 = select i1 %2841, i32 %2840, i32 1
  %2843 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 36
  %2844 = load i32, i32* %2843, align 4
  %2845 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 35
  %2846 = load i32, i32* %2845, align 8
  %2847 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 37
  %2848 = load i32, i32* %2847, align 8
  call void @_ZN2sh35WriteGeometryShaderLayoutQualifiersERNS_13TInfoSinkBaseENS_20TLayoutPrimitiveTypeEiS2_i(%"class.sh::TInfoSinkBase"* dereferenceable(48) %1, i32 %2844, i32 %2846, i32 %2848, i32 %2842) #9
  br label %2862

2849:                                             ; preds = %1077
  %2850 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 38
  %2851 = load i32, i32* %2850, align 4
  call void @_ZN2sh38WriteTessControlShaderLayoutQualifiersERNS_13TInfoSinkBaseEi(%"class.sh::TInfoSinkBase"* dereferenceable(48) %1, i32 %2851) #9
  br label %2862

2852:                                             ; preds = %1077
  %2853 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 39
  %2854 = load i32, i32* %2853, align 8
  %2855 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 40
  %2856 = load i32, i32* %2855, align 4
  %2857 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 41
  %2858 = load i32, i32* %2857, align 8
  %2859 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 42
  %2860 = load i32, i32* %2859, align 4
  call void @_ZN2sh41WriteTessEvaluationShaderLayoutQualifiersERNS_13TInfoSinkBaseENS_25TLayoutTessEvaluationTypeES2_S2_S2_(%"class.sh::TInfoSinkBase"* dereferenceable(48) %1, i32 %2854, i32 %2856, i32 %2858, i32 %2860) #9
  br label %2862

2861:                                             ; preds = %1077
  call void @_ZN2sh21EmitWorkGroupSizeGLSLERKNS_9TCompilerERNS_13TInfoSinkBaseE(%"class.sh::TCompiler"* dereferenceable(3104) %49, %"class.sh::TInfoSinkBase"* dereferenceable(48) %1) #9
  br label %2862

2862:                                             ; preds = %1759, %1077, %2832, %2861, %2852, %2849, %2838
  call void @_ZNK2sh9SpecConst18outputLayoutStringERNS_13TInfoSinkBaseE(%"class.sh::SpecConst"* %5, %"class.sh::TInfoSinkBase"* dereferenceable(48) %1) #9
  %2863 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %5, i64 0, i32 3, i32 0
  %2864 = load i32, i32* %2863, align 4, !noalias !56
  %2865 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 11, i32 0
  store i32 %2864, i32* %2865, align 4
  %2866 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %2, i64 0, i32 0
  %2867 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %49, %"class.sh::TIntermNode"* %2866) #9
  br label %2868

2868:                                             ; preds = %1511, %1740, %1734, %1729, %1727, %1725, %1713, %1659, %1698, %1745, %1749, %1512, %148, %65, %142, %146, %154, %160, %164, %2862, %2832, %2831, %1855, %1074, %1003, %1013, %913, %909, %897, %887, %901, %53
  %2869 = phi i1 [ false, %53 ], [ false, %148 ], [ false, %65 ], [ false, %142 ], [ false, %146 ], [ false, %154 ], [ false, %160 ], [ false, %164 ], [ false, %901 ], [ false, %887 ], [ false, %897 ], [ false, %909 ], [ false, %913 ], [ false, %1013 ], [ false, %1003 ], [ false, %1074 ], [ false, %1855 ], [ false, %2831 ], [ false, %2832 ], [ %2867, %2862 ], [ false, %1512 ], [ false, %1749 ], [ false, %1745 ], [ false, %1698 ], [ false, %1659 ], [ false, %1713 ], [ false, %1725 ], [ false, %1727 ], [ false, %1729 ], [ false, %1734 ], [ false, %1740 ], [ false, %1511 ]
  ret i1 %2869
}

declare zeroext i1 @_ZN2sh24ShaderBuiltinsWorkaroundEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEm(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZNK2sh14ShaderVariable9isBuiltInEv(%"struct.sh::ShaderVariable"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl12IsOpaqueTypeEj(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl11IsImageTypeEj(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl19IsAtomicCounterTypeEj(i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZN2sh32RemoveInactiveInterfaceVariablesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableERKNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEESD_SD_SD_RKNS7_INS_14InterfaceBlockENS9_ISE_EEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.std::__1::vector.1"* dereferenceable(24), %"class.std::__1::vector.1"* dereferenceable(24), %"class.std::__1::vector.1"* dereferenceable(24), %"class.std::__1::vector.1"* dereferenceable(24), %"class.std::__1::vector.8"* dereferenceable(24)) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh44MonomorphizeUnsupportedFunctionsInVulkanGLSLEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEm(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh37SeparateStructFromUniformDeclarationsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh21RewriteStructSamplersEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPi(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i32*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh35RewriteArrayOfArrayOfOpaqueUniformsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh31RewriteCubeMapSamplersAs2DArrayEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEb(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i1 zeroext) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh25FlagSamplersForTexelFetchEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.std::__1::vector.1"*) local_unnamed_addr #1

declare zeroext i8 @_ZN2gl10FromGLenumINS_10ShaderTypeEEET_j(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh13DriverUniform32addComputeDriverUniformsToShaderEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::DriverUniform"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh13DriverUniform33addGraphicsDriverUniformsToShaderEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::DriverUniform"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh17RewriteR32fImagesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform19getAbcBufferOffsetsEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh21RewriteAtomicCountersEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh27RemoveAtomicCounterBuiltinsEPNS_9TCompilerEPNS_12TIntermBlockE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh30ReplaceClipDistanceAssignmentsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEjPKNS_12TIntermTypedE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i32, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform23getClipDistancesEnabledEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh30ReplaceCullDistanceAssignmentsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEj(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2gl35ShaderTypeSupportsTransformFeedbackENS_10ShaderTypeE(i8 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIiEERS0_RKT_(%"class.sh::TInfoSinkBase"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::locale", align 8
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::locale", align 8
  %6 = alloca %"class.std::__1::basic_ostringstream", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.std::__1::basic_ostringstream"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %8) #9
  %9 = bitcast %"class.std::__1::locale"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 1
  %11 = bitcast %"class.std::__1::basic_stringbuf"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 -86, i64 256, i1 false) #9, !alias.scope !59
  %12 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 2, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %12, align 8, !alias.scope !59
  %14 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %10, i64 0, i32 0
  %15 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8, !noalias !59
  %16 = bitcast %"class.std::__1::basic_ostringstream"* %6 to i64*
  store i64 %15, i64* %16, align 8, !alias.scope !59
  %17 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8, !noalias !59
  %18 = bitcast %"class.std::__1::basic_ostringstream"* %6 to i8**
  %19 = inttoptr i64 %15 to i8*
  %20 = getelementptr i8, i8* %19, i64 -24
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8, !noalias !59
  %23 = getelementptr inbounds i8, i8* %8, i64 %22
  %24 = bitcast i8* %23 to i64*
  store i64 %17, i64* %24, align 8, !alias.scope !59
  %25 = load i8*, i8** %18, align 8, !alias.scope !59
  %26 = getelementptr i8, i8* %25, i64 -24
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8, !noalias !59
  %29 = getelementptr inbounds i8, i8* %8, i64 %28
  %30 = bitcast i8* %29 to %"class.std::__1::ios_base"*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %30, i8* %11) #9
  %31 = getelementptr inbounds i8, i8* %29, i64 136
  %32 = bitcast i8* %31 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %32, align 8, !alias.scope !59
  %33 = getelementptr inbounds i8, i8* %29, i64 144
  %34 = bitcast i8* %33 to i32*
  store i32 -1, i32* %34, align 8, !alias.scope !59
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %13, align 8, !alias.scope !59
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %12, align 8, !alias.scope !59
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %14) #9
  %35 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %10, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8, !alias.scope !59
  %36 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 1, i32 1
  %37 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 1, i32 3
  %38 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 32, i1 false) #9, !alias.scope !59
  store i32 16, i32* %37, align 8, !alias.scope !59
  %39 = load i8*, i8** %18, align 8, !alias.scope !59
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds i8, i8* %8, i64 %42
  %44 = call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #9
  %45 = bitcast %"class.std::__1::locale"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45)
  %46 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46)
  %47 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %5, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %47, align 8, !alias.scope !62
  %48 = bitcast i8* %43 to %"class.std::__1::ios_base"*
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %5, %"class.std::__1::ios_base"* %48) #9
  call void @_ZNSt3__18ios_base5imbueERKNS_6localeE(%"class.std::__1::locale"* nonnull sret %3, %"class.std::__1::ios_base"* %48, %"class.std::__1::locale"* dereferenceable(8) %44) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %3) #9
  %49 = getelementptr inbounds i8, i8* %43, i64 40
  %50 = bitcast i8* %49 to %"class.std::__1::basic_streambuf"**
  %51 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %50, align 8, !noalias !62
  %52 = icmp eq %"class.std::__1::basic_streambuf"* %51, null
  br i1 %52, label %61, label %53

53:                                               ; preds = %2
  %54 = bitcast %"class.std::__1::basic_streambuf"* %51 to void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)***
  %55 = load void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)**, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*** %54, align 8, !noalias !65
  %56 = getelementptr inbounds void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)** %55, i64 2
  %57 = load void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)** %56, align 8, !noalias !65
  call void %57(%"class.std::__1::basic_streambuf"* nonnull %51, %"class.std::__1::locale"* dereferenceable(8) %44) #9, !noalias !65
  %58 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %4, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %58, align 8, !alias.scope !65, !noalias !62
  %59 = getelementptr inbounds %"class.std::__1::basic_streambuf", %"class.std::__1::basic_streambuf"* %51, i64 0, i32 1
  call void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale"* dereferenceable(8) %59) #9
  %60 = call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16localeaSERKS0_(%"class.std::__1::locale"* %59, %"class.std::__1::locale"* dereferenceable(8) %44) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #9
  br label %61

61:                                               ; preds = %2, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46)
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %62 = bitcast %"class.std::__1::basic_ostringstream"* %6 to %"class.std::__1::basic_ostream"*
  %63 = load i32, i32* %1, align 4
  %64 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"* nonnull %62, i32 %63) #9
  %65 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %0, i64 0, i32 0
  %66 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #9
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.std::__1::basic_stringbuf"* %10) #9
  %67 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %67, i64 0, i32 1, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = zext i8 %69 to i64
  %76 = select i1 %70, i8* %72, i8* %66
  %77 = select i1 %70, i64 %74, i64 %75
  %78 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %65, i8* %76, i64 %77) #9
  %79 = load i8, i8* %68, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %61
  %82 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %82) #16
  br label %83

83:                                               ; preds = %61, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #9
  %84 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %84, i64* %16, align 8
  %85 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %86 = inttoptr i64 %84 to i8*
  %87 = getelementptr i8, i8* %86, i64 -24
  %88 = bitcast i8* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds i8, i8* %8, i64 %89
  %91 = bitcast i8* %90 to i64*
  store i64 %85, i64* %91, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %92 = bitcast %"class.std::__1::basic_string"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %83
  %97 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  call void @_ZdlPv(i8* %98) #16
  br label %99

99:                                               ; preds = %83, %96
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %14) #9
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %62, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #9
  %100 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 2
  %101 = bitcast %"class.std::__1::basic_ios.base"* %100 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %101) #9
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %8) #9
  ret %"class.sh::TInfoSinkBase"* %0
}

declare dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"*) local_unnamed_addr #1

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst12getNegFlipXYEv(%"class.sh::SpecConst"*) local_unnamed_addr #1

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float) local_unnamed_addr #1

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getFragRotationMatrixEv(%"class.sh::SpecConst"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_128RotateAndFlipBuiltinVariableEPNS_9TCompilerEPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TIntermTypedEPNS_12TSymbolTableEPKNS_9TVariableERKNS_15ImmutableStringESB_SB_(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TVector.45"*, %"class.sh::TIntermTyped"*, %"class.sh::TSymbolTable"*, %"class.sh::TVariable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #0 {
  %10 = alloca %"class.sh::TVector.209", align 8
  %11 = alloca %"class.sh::TVector.45", align 8
  %12 = alloca %"class.sh::TIntermNode"*, align 8
  %13 = alloca %"class.sh::TIntermNode"*, align 8
  %14 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %15 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %14, i64 32) #9
  %16 = bitcast i8* %15 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %16, %"class.sh::TVariable"* %5) #9
  %17 = bitcast %"class.sh::TVector.209"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #9
  %18 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %10, i64 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %10, i64 0, i32 0, i32 0, i32 1
  %20 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %10, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %22 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %21, i64 8) #9
  %23 = bitcast i8* %22 to i32*
  %24 = bitcast %"class.sh::TVector.209"* %10 to i8**
  store i8* %22, i8** %24, align 8
  %25 = getelementptr inbounds i8, i8* %22, i64 8
  %26 = bitcast i32** %20 to i8**
  store i8* %25, i8** %26, align 8
  store i32 0, i32* %23, align 4
  %27 = getelementptr inbounds i8, i8* %22, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %22, i64 8
  %30 = bitcast i32** %19 to i64*
  %31 = ptrtoint i8* %29 to i64
  store i64 %31, i64* %30, align 8
  %32 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %33 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %32, i64 248) #9
  %34 = bitcast i8* %33 to %"class.sh::TIntermSwizzle"*
  %35 = bitcast i8* %15 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %34, %"class.sh::TIntermTyped"* %35, %"class.sh::TVector.209"* nonnull dereferenceable(24) %10) #9
  %36 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %5, i64 0, i32 1
  %37 = load %"class.sh::TType"*, %"class.sh::TType"** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %37, i64 0, i32 8
  %39 = load i8, i8* %38, align 8
  switch i8 %39, label %43 [
    i8 1, label %44
    i8 2, label %40
    i8 3, label %41
    i8 4, label %42
  ]

40:                                               ; preds = %9
  br label %44

41:                                               ; preds = %9
  br label %44

42:                                               ; preds = %9
  br label %44

43:                                               ; preds = %9
  br label %44

44:                                               ; preds = %9, %40, %41, %42, %43
  %45 = phi %"class.sh::TType"* [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE0ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), %43 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh4ELh1EEE to %"class.sh::TType"*), %42 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh3ELh1EEE to %"class.sh::TType"*), %41 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh2ELh1EEE to %"class.sh::TType"*), %40 ], [ bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.24"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), %9 ]
  %46 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %47 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %46, i64 40) #9
  %48 = bitcast i8* %47 to %"class.sh::TVariable"*
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %48, %"class.sh::TSymbolTable"* %4, %"class.sh::ImmutableString"* dereferenceable(16) %6, %"class.sh::TType"* nonnull %45, i8 zeroext 2, i8 zeroext 0) #9
  call void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %48) #9
  %49 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %50 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %49, i64 32) #9
  %51 = bitcast i8* %50 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %51, %"class.sh::TVariable"* %48) #9
  %52 = call zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %5, %"class.sh::TVariable"* %48) #9
  br i1 %52, label %53, label %317

53:                                               ; preds = %44
  %54 = icmp eq %"class.sh::TIntermTyped"* %8, null
  br i1 %54, label %60, label %55

55:                                               ; preds = %53
  %56 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %57 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %56, i64 240) #9
  %58 = bitcast i8* %57 to %"class.sh::TIntermBinary"*
  %59 = bitcast i8* %33 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %58, i8 zeroext 33, %"class.sh::TIntermTyped"* nonnull %8, %"class.sh::TIntermTyped"* %59) #9
  br label %60

60:                                               ; preds = %55, %53
  %61 = phi i8* [ %57, %55 ], [ %33, %53 ]
  %62 = bitcast i8* %61 to %"class.sh::TIntermTyped"*
  %63 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %64 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %63, i64 240) #9
  %65 = bitcast i8* %64 to %"class.sh::TIntermBinary"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %65, i8 zeroext 14, %"class.sh::TIntermTyped"* %62, %"class.sh::TIntermTyped"* %7) #9
  %66 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %67 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %66, i64 240) #9
  %68 = bitcast i8* %67 to %"class.sh::TIntermBinary"*
  %69 = bitcast i8* %64 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %68, i8 zeroext 15, %"class.sh::TIntermTyped"* %69, %"class.sh::TIntermTyped"* %3) #9
  %70 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %71 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %70, i64 240) #9
  %72 = bitcast i8* %71 to %"class.sh::TIntermBinary"*
  %73 = bitcast i8* %67 to %"class.sh::TIntermTyped"*
  %74 = bitcast %"class.sh::TIntermTyped"* %7 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %75 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %74, align 8
  %76 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %75, i64 23
  %77 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %76, align 8
  %78 = call %"class.sh::TIntermTyped"* %77(%"class.sh::TIntermTyped"* %7) #9
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %72, i8 zeroext 13, %"class.sh::TIntermTyped"* %73, %"class.sh::TIntermTyped"* %78) #9
  %79 = bitcast %"class.sh::TVector.45"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #9
  %80 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %11, i64 0, i32 0, i32 0, i32 0
  %81 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %11, i64 0, i32 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %11, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 24, i1 false) #9
  %83 = bitcast i8* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %84 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %83, align 8
  %85 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %84, i64 23
  %86 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %85, align 8
  %87 = call %"class.sh::TIntermTyped"* %86(%"class.sh::TIntermSymbol"* %16) #9
  %88 = ptrtoint %"class.sh::TIntermTyped"* %87 to i64
  %89 = bitcast %"class.sh::TIntermNode"*** %81 to i64*
  %90 = bitcast %"class.sh::TVector.45"* %11 to i64*
  %91 = bitcast %"class.sh::TIntermNode"*** %82 to i64*
  %92 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %93 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %92, i64 8) #9
  %94 = bitcast i8* %93 to %"class.sh::TIntermNode"**
  %95 = getelementptr inbounds i8, i8* %93, i64 8
  %96 = ptrtoint i8* %95 to i64
  %97 = bitcast i8* %93 to i64*
  store i64 %88, i64* %97, align 8
  %98 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %80, align 8
  %99 = ptrtoint %"class.sh::TIntermNode"** %98 to i64
  %100 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %81, align 8
  %101 = bitcast %"class.sh::TIntermNode"** %100 to i8*
  %102 = icmp eq %"class.sh::TIntermNode"** %100, %98
  br i1 %102, label %276, label %103

103:                                              ; preds = %60
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  %105 = ptrtoint %"class.sh::TIntermNode"** %104 to i64
  %106 = sub i64 %105, %99
  %107 = lshr i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = icmp ult i64 %108, 4
  br i1 %109, label %206, label %110

110:                                              ; preds = %103
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  %112 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %113 = sub i64 %112, %99
  %114 = lshr i64 %113, 3
  %115 = and i64 %113, -8
  %116 = xor i64 %115, -8
  %117 = getelementptr i8, i8* %93, i64 %116
  %118 = xor i64 %114, -1
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 %118
  %120 = bitcast %"class.sh::TIntermNode"** %119 to i8*
  %121 = icmp ult i8* %117, %101
  %122 = icmp ugt i8* %93, %120
  %123 = and i1 %121, %122
  br i1 %123, label %206, label %124

124:                                              ; preds = %110
  %125 = and i64 %108, 4611686018427387900
  %126 = sub nsw i64 0, %125
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 %126
  %128 = sub nsw i64 0, %125
  %129 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 %128
  %130 = add nsw i64 %125, -4
  %131 = lshr exact i64 %130, 2
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 1
  %134 = icmp eq i64 %130, 0
  br i1 %134, label %183, label %135

135:                                              ; preds = %124
  %136 = sub nuw nsw i64 %132, %133
  %137 = getelementptr i8, i8* %93, i64 -8
  %138 = bitcast i8* %137 to %"class.sh::TIntermNode"**
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  %140 = getelementptr i8, i8* %93, i64 -8
  %141 = bitcast i8* %140 to %"class.sh::TIntermNode"**
  %142 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  br label %143

143:                                              ; preds = %143, %135
  %144 = phi i64 [ 0, %135 ], [ %178, %143 ]
  %145 = phi i64 [ %136, %135 ], [ %179, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 %146
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 %147
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %151 = bitcast %"class.sh::TIntermNode"** %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !68
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -2
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 -1
  %155 = bitcast %"class.sh::TIntermNode"** %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !68
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 -1
  %158 = bitcast %"class.sh::TIntermNode"** %157 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %158, align 8, !alias.scope !71, !noalias !68
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 -2
  %160 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %159, i64 -1
  %161 = bitcast %"class.sh::TIntermNode"** %160 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %161, align 8, !alias.scope !71, !noalias !68
  %162 = sub nuw nsw i64 -4, %144
  %163 = sub nuw nsw i64 -4, %144
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 %162
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 %163
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !68
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -2
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -1
  %171 = bitcast %"class.sh::TIntermNode"** %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 8, !alias.scope !68
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %174, align 8, !alias.scope !71, !noalias !68
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -2
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -1
  %177 = bitcast %"class.sh::TIntermNode"** %176 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %177, align 8, !alias.scope !71, !noalias !68
  %178 = add i64 %144, 8
  %179 = add i64 %145, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %143, !llvm.loop !73

181:                                              ; preds = %143
  %182 = sub nuw nsw i64 -8, %144
  br label %183

183:                                              ; preds = %181, %124
  %184 = phi i64 [ 0, %124 ], [ %182, %181 ]
  %185 = icmp eq i64 %133, 0
  br i1 %185, label %204, label %186

186:                                              ; preds = %183
  %187 = getelementptr i8, i8* %93, i64 -8
  %188 = bitcast i8* %187 to %"class.sh::TIntermNode"**
  %189 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 %184
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 %184
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %191, i64 -1
  %193 = bitcast %"class.sh::TIntermNode"** %192 to <2 x i64>*
  %194 = load <2 x i64>, <2 x i64>* %193, align 8, !alias.scope !68
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %191, i64 -2
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %195, i64 -1
  %197 = bitcast %"class.sh::TIntermNode"** %196 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 8, !alias.scope !68
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 -1
  %200 = bitcast %"class.sh::TIntermNode"** %199 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %200, align 8, !alias.scope !71, !noalias !68
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 -2
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %201, i64 -1
  %203 = bitcast %"class.sh::TIntermNode"** %202 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %203, align 8, !alias.scope !71, !noalias !68
  br label %204

204:                                              ; preds = %183, %186
  %205 = icmp eq i64 %108, %125
  br i1 %205, label %276, label %206

206:                                              ; preds = %204, %110, %103
  %207 = phi %"class.sh::TIntermNode"** [ %94, %110 ], [ %94, %103 ], [ %127, %204 ]
  %208 = phi %"class.sh::TIntermNode"** [ %100, %110 ], [ %100, %103 ], [ %129, %204 ]
  %209 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -1
  %210 = ptrtoint %"class.sh::TIntermNode"** %209 to i64
  %211 = sub i64 %210, %99
  %212 = lshr i64 %211, 3
  %213 = add nuw nsw i64 %212, 1
  %214 = and i64 %213, 7
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %227, label %216

216:                                              ; preds = %206, %216
  %217 = phi %"class.sh::TIntermNode"** [ %220, %216 ], [ %207, %206 ]
  %218 = phi %"class.sh::TIntermNode"** [ %221, %216 ], [ %208, %206 ]
  %219 = phi i64 [ %225, %216 ], [ %214, %206 ]
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 -1
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = add i64 %219, -1
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %216, !llvm.loop !74

227:                                              ; preds = %216, %206
  %228 = phi %"class.sh::TIntermNode"** [ undef, %206 ], [ %220, %216 ]
  %229 = phi %"class.sh::TIntermNode"** [ %207, %206 ], [ %220, %216 ]
  %230 = phi %"class.sh::TIntermNode"** [ %208, %206 ], [ %221, %216 ]
  %231 = icmp ult i64 %211, 56
  br i1 %231, label %276, label %232

232:                                              ; preds = %227, %232
  %233 = phi %"class.sh::TIntermNode"** [ %270, %232 ], [ %229, %227 ]
  %234 = phi %"class.sh::TIntermNode"** [ %271, %232 ], [ %230, %227 ]
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -1
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -1
  %237 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -2
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -2
  %242 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.sh::TIntermNode"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -3
  %246 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -3
  %247 = bitcast %"class.sh::TIntermNode"** %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = bitcast %"class.sh::TIntermNode"** %245 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -4
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -4
  %252 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.sh::TIntermNode"** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -5
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -5
  %257 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %"class.sh::TIntermNode"** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -6
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -6
  %262 = bitcast %"class.sh::TIntermNode"** %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = bitcast %"class.sh::TIntermNode"** %260 to i64*
  store i64 %263, i64* %264, align 8
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -7
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -7
  %267 = bitcast %"class.sh::TIntermNode"** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %"class.sh::TIntermNode"** %265 to i64*
  store i64 %268, i64* %269, align 8
  %270 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -8
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -8
  %272 = bitcast %"class.sh::TIntermNode"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.sh::TIntermNode"** %270 to i64*
  store i64 %273, i64* %274, align 8
  %275 = icmp eq %"class.sh::TIntermNode"** %271, %98
  br i1 %275, label %276, label %232, !llvm.loop !75

276:                                              ; preds = %227, %232, %204, %60
  %277 = phi %"class.sh::TIntermNode"** [ %94, %60 ], [ %127, %204 ], [ %228, %227 ], [ %270, %232 ]
  %278 = ptrtoint %"class.sh::TIntermNode"** %277 to i64
  store i64 %278, i64* %90, align 8
  store i64 %96, i64* %89, align 8
  store i64 %96, i64* %91, align 8
  %279 = load %"class.sh::TType"*, %"class.sh::TType"** %36, align 8
  %280 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %279, %"class.sh::TVector.45"* nonnull %11) #9
  %281 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %282 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %281, i64 240) #9
  %283 = bitcast i8* %282 to %"class.sh::TIntermBinary"*
  %284 = bitcast i8* %50 to %"class.sh::TIntermTyped"*
  %285 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %280, i64 0, i32 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %283, i8 zeroext -117, %"class.sh::TIntermTyped"* %284, %"class.sh::TIntermTyped"* %285) #9
  %286 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %287 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %286, i64 248) #9
  %288 = bitcast i8* %287 to %"class.sh::TIntermSwizzle"*
  %289 = bitcast i8* %50 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %290 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %289, align 8
  %291 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %290, i64 23
  %292 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %291, align 8
  %293 = call %"class.sh::TIntermTyped"* %292(%"class.sh::TIntermSymbol"* %51) #9
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %288, %"class.sh::TIntermTyped"* %293, %"class.sh::TVector.209"* nonnull dereferenceable(24) %10) #9
  %294 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %295 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %294, i64 240) #9
  %296 = bitcast i8* %295 to %"class.sh::TIntermBinary"*
  %297 = bitcast i8* %287 to %"class.sh::TIntermTyped"*
  %298 = bitcast i8* %71 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %296, i8 zeroext -118, %"class.sh::TIntermTyped"* %297, %"class.sh::TIntermTyped"* %298) #9
  %299 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %2, i64 0, i32 0
  %300 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %2, i64 0, i32 0, i32 0, i32 0
  %301 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %300, align 8
  %302 = bitcast %"class.sh::TIntermNode"** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %302) #9
  %303 = bitcast %"class.sh::TIntermNode"** %12 to i8**
  store i8* %295, i8** %303, align 8
  %304 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.46"* %299, %"class.sh::TIntermNode"** %301, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %12)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %302) #9
  %305 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %300, align 8
  %306 = bitcast %"class.sh::TIntermNode"** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %306) #9
  %307 = bitcast %"class.sh::TIntermNode"** %13 to i8**
  store i8* %282, i8** %307, align 8
  %308 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.46"* %299, %"class.sh::TIntermNode"** %305, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %13)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %306) #9
  %309 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %310 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %309) #9
  %311 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %80, align 8
  %312 = icmp eq %"class.sh::TIntermNode"** %311, null
  br i1 %312, label %316, label %313

313:                                              ; preds = %276
  %314 = ptrtoint %"class.sh::TIntermNode"** %311 to i64
  %315 = bitcast %"class.sh::TIntermNode"*** %81 to i64*
  store i64 %314, i64* %315, align 8
  br label %316

316:                                              ; preds = %276, %313
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #9
  br label %317

317:                                              ; preds = %44, %316
  %318 = phi i1 [ %310, %316 ], [ false, %44 ]
  %319 = load i32*, i32** %18, align 8
  %320 = icmp eq i32* %319, null
  br i1 %320, label %323, label %321

321:                                              ; preds = %317
  %322 = ptrtoint i32* %319 to i64
  store i64 %322, i64* %30, align 8
  br label %323

323:                                              ; preds = %317, %321
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #9
  ret i1 %318
}

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable13gl_PointCoordEv() local_unnamed_addr #1

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst9getFlipXYEv(%"class.sh::SpecConst"*) local_unnamed_addr #1

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable17gl_SamplePositionEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_125InsertFragCoordCorrectionEPNS_9TCompilerEmPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableEPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"*, i64, %"class.sh::TIntermBlock"*, %"class.sh::TVector.45"*, %"class.sh::TSymbolTable"*, %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*) unnamed_addr #0 {
  %8 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst9getFlipXYEv(%"class.sh::SpecConst"* %5) #9
  %9 = icmp eq %"class.sh::TIntermTyped"* %8, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %7
  %11 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %12 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %12, i64 2
  %14 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %13, align 8
  %15 = tail call %"class.sh::TIntermBinary"* %14(%"class.sh::DriverUniform"* %6) #9
  %16 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %15, i64 0, i32 0, i32 0, i32 0
  br label %17

17:                                               ; preds = %7, %10
  %18 = phi %"class.sh::TIntermTyped"* [ %8, %7 ], [ %16, %10 ]
  %19 = tail call %"class.sh::TIntermBinary"* @_ZN2sh9SpecConst17getHalfRenderAreaEv(%"class.sh::SpecConst"* %5) #9
  %20 = icmp eq %"class.sh::TIntermBinary"* %19, null
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %23 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %23, i64 5
  %25 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %24, align 8
  %26 = tail call %"class.sh::TIntermBinary"* %25(%"class.sh::DriverUniform"* %6) #9
  br label %27

27:                                               ; preds = %17, %21
  %28 = phi %"class.sh::TIntermBinary"* [ %19, %17 ], [ %26, %21 ]
  %29 = and i64 %1, 4503599627370496
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %41, label %31

31:                                               ; preds = %27
  %32 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getFragRotationMatrixEv(%"class.sh::SpecConst"* %5) #9
  %33 = icmp eq %"class.sh::TIntermTyped"* %32, null
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  %35 = bitcast %"class.sh::DriverUniform"* %6 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %36 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %35, align 8
  %37 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %36, i64 4
  %38 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %37, align 8
  %39 = tail call %"class.sh::TIntermBinary"* %38(%"class.sh::DriverUniform"* %6) #9
  %40 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %39, i64 0, i32 0, i32 0, i32 0
  br label %41

41:                                               ; preds = %31, %27, %34
  %42 = phi %"class.sh::TIntermTyped"* [ %32, %31 ], [ %40, %34 ], [ null, %27 ]
  %43 = tail call %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_FragCoordEv() #9
  %44 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %28, i64 0, i32 0, i32 0, i32 0
  %45 = tail call fastcc zeroext i1 @_ZN2sh12_GLOBAL__N_128RotateAndFlipBuiltinVariableEPNS_9TCompilerEPNS_12TIntermBlockEPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TIntermTypedEPNS_12TSymbolTableEPKNS_9TVariableERKNS_15ImmutableStringESB_SB_(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %2, %"class.sh::TVector.45"* %3, %"class.sh::TIntermTyped"* %18, %"class.sh::TSymbolTable"* %4, %"class.sh::TVariable"* %43, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_121kFlippedFragCoordNameE, %"class.sh::TIntermTyped"* %44, %"class.sh::TIntermTyped"* %42)
  ret i1 %45
}

declare zeroext i1 @_ZN2sh19ReplaceLastFragDataEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.std::__1::vector.1"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh21ReplaceInOutVariablesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.std::__1::vector.1"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh11RewriteDfdyEPNS_9TCompilerEmPNS_11TIntermNodeERKNS_12TSymbolTableEiPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"*, i64, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32, %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh26RewriteInterpolateAtOffsetEPNS_9TCompilerEmPNS_11TIntermNodeERKNS_12TSymbolTableEiPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"*, i64, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32, %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh19RewriteSampleMaskInEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getNumSamplesRefEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh17RewriteSampleMaskEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

declare %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh24ReplaceVariableWithTypedEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

declare void @_ZN2sh26EmitEarlyFragmentTestsGLSLERKNS_9TCompilerERNS_13TInfoSinkBaseE(%"class.sh::TCompiler"* dereferenceable(3104), %"class.sh::TInfoSinkBase"* dereferenceable(48)) local_unnamed_addr #1

declare void @_ZN2sh35WriteGeometryShaderLayoutQualifiersERNS_13TInfoSinkBaseENS_20TLayoutPrimitiveTypeEiS2_i(%"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i32, i32, i32) local_unnamed_addr #1

declare void @_ZN2sh38WriteTessControlShaderLayoutQualifiersERNS_13TInfoSinkBaseEi(%"class.sh::TInfoSinkBase"* dereferenceable(48), i32) local_unnamed_addr #1

declare void @_ZN2sh41WriteTessEvaluationShaderLayoutQualifiersERNS_13TInfoSinkBaseENS_25TLayoutTessEvaluationTypeES2_S2_S2_(%"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i32, i32, i32) local_unnamed_addr #1

declare void @_ZN2sh21EmitWorkGroupSizeGLSLERKNS_9TCompilerERNS_13TInfoSinkBaseE(%"class.sh::TCompiler"* dereferenceable(3104), %"class.sh::TInfoSinkBase"* dereferenceable(48)) local_unnamed_addr #1

declare void @_ZNK2sh9SpecConst18outputLayoutStringERNS_13TInfoSinkBaseE(%"class.sh::SpecConst"*, %"class.sh::TInfoSinkBase"* dereferenceable(48)) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TranslatorVulkan9translateEPNS_12TIntermBlockEmPNS_22PerformanceDiagnosticsE(%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, i64, %"class.sh::PerformanceDiagnostics"* nocapture readnone) unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector.131", align 16
  %6 = alloca %"class.sh::TInfoSinkBase", align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.sh::SpecConst", align 8
  %9 = alloca %"class.sh::DriverUniform", align 8
  %10 = alloca %"class.sh::DriverUniformExtended", align 8
  %11 = alloca %"class.sh::TOutputVulkanGLSL", align 8
  %12 = bitcast %"class.sh::TInfoSinkBase"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #9
  %13 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %6, i64 0, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %6, i64 0, i32 1, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 48, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #9
  store i8 0, i8* %7, align 1
  %16 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0
  %17 = call zeroext i1 @_ZN2sh9TCompiler24emulatePrecisionIfNeededEPNS_12TIntermBlockERNS_13TInfoSinkBaseEPb14ShShaderOutput(%"class.sh::TCompiler"* %16, %"class.sh::TIntermBlock"* %1, %"class.sh::TInfoSinkBase"* nonnull dereferenceable(48) %6, i8* nonnull %7, i32 35659) #9
  br i1 %17, label %18, label %93

18:                                               ; preds = %4
  %19 = and i64 %2, 1125899906842624
  %20 = icmp eq i64 %19, 0
  %21 = bitcast %"class.sh::SpecConst"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #9
  %22 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 21
  %23 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 14
  %24 = bitcast %"class.sh::SpecConst"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 32, i1 false)
  %25 = load i32, i32* %23, align 4
  call void @_ZN2sh9SpecConstC1EPNS_12TSymbolTableEmj(%"class.sh::SpecConst"* nonnull %8, %"class.sh::TSymbolTable"* %22, i64 %2, i32 %25) #9
  %26 = and i64 %2, 18014398509481984
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.sh::DriverUniform"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #9
  %30 = getelementptr inbounds %"class.sh::DriverUniform", %"class.sh::DriverUniform"* %9, i64 0, i32 0
  %31 = getelementptr inbounds %"class.sh::DriverUniform", %"class.sh::DriverUniform"* %9, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2sh13DriverUniformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %30, align 8
  %32 = bitcast %"class.sh::TVariable"** %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false) #9
  %33 = call zeroext i1 @_ZN2sh16TranslatorVulkan13translateImplERNS_13TInfoSinkBaseEPNS_12TIntermBlockEmPNS_22PerformanceDiagnosticsEPNS_9SpecConstEPNS_13DriverUniformE(%"class.sh::TranslatorVulkan"* %0, %"class.sh::TInfoSinkBase"* nonnull dereferenceable(48) %6, %"class.sh::TIntermBlock"* %1, i64 %2, %"class.sh::PerformanceDiagnostics"* undef, %"class.sh::SpecConst"* nonnull %8, %"class.sh::DriverUniform"* nonnull %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #9
  br i1 %33, label %41, label %91

34:                                               ; preds = %18
  %35 = bitcast %"class.sh::DriverUniformExtended"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #9
  %36 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %10, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %10, i64 0, i32 0, i32 1
  %38 = bitcast %"class.sh::TVariable"** %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2sh21DriverUniformExtendedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %39 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %10, i64 0, i32 0
  %40 = call zeroext i1 @_ZN2sh16TranslatorVulkan13translateImplERNS_13TInfoSinkBaseEPNS_12TIntermBlockEmPNS_22PerformanceDiagnosticsEPNS_9SpecConstEPNS_13DriverUniformE(%"class.sh::TranslatorVulkan"* %0, %"class.sh::TInfoSinkBase"* nonnull dereferenceable(48) %6, %"class.sh::TIntermBlock"* %1, i64 %2, %"class.sh::PerformanceDiagnostics"* undef, %"class.sh::SpecConst"* nonnull %8, %"class.sh::DriverUniform"* nonnull %39)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #9
  br i1 %40, label %41, label %91

41:                                               ; preds = %34, %28
  %42 = bitcast %"class.sh::TOutputVulkanGLSL"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 224, i8* nonnull %42) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 224, i1 false)
  %43 = call i32 @_ZNK2sh9TCompiler29getArrayIndexClampingStrategyEv(%"class.sh::TCompiler"* %16) #9
  %44 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 19, i32 58
  %45 = load i64 (i8*, i64)*, i64 (i8*, i64)** %44, align 8
  %46 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 43
  %47 = load i32, i32* %23, align 4
  %48 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 25
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 16
  %51 = load i32, i32* %50, align 4
  %52 = load i8, i8* %7, align 1, !range !2
  %53 = icmp ne i8 %52, 0
  call void @_ZN2sh17TOutputVulkanGLSLC1ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputbbm(%"class.sh::TOutputVulkanGLSL"* nonnull %11, %"class.sh::TInfoSinkBase"* nonnull dereferenceable(48) %6, i32 %43, i64 (i8*, i64)* %45, %"class.std::__1::map.138"* dereferenceable(24) %46, %"class.sh::TSymbolTable"* %22, i32 %47, i32 %49, i32 %51, i1 zeroext %53, i1 zeroext %20, i64 %2) #9
  %54 = getelementptr inbounds %"class.sh::TOutputVulkanGLSL", %"class.sh::TOutputVulkanGLSL"* %11, i64 0, i32 0, i32 0, i32 0
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %54) #9
  %55 = bitcast %"class.std::__1::vector.131"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #9
  %56 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %5, i64 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 24, i1 false) #9
  %58 = call dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"* %16) #9
  %59 = load i32, i32* %23, align 4
  %60 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %6, i64 0, i32 0
  %61 = call zeroext i1 @_ZN2sh21GlslangCompileToSpirvERK18ShBuiltInResourcesjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS3_6vectorIjNS7_IjEEEE(%struct.ShBuiltInResources* dereferenceable(520) %58, i32 %59, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %60, %"class.std::__1::vector.131"* nonnull %5) #9
  br i1 %61, label %62, label %81

62:                                               ; preds = %41
  %63 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 26, i32 2, i32 1
  %64 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %63, i64 0, i32 0, i32 0
  %65 = load i32*, i32** %64, align 8
  %66 = icmp eq i32* %65, null
  br i1 %66, label %73, label %67

67:                                               ; preds = %62
  %68 = ptrtoint i32* %65 to i64
  %69 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 26, i32 2, i32 1, i32 0, i32 1
  %70 = bitcast i32** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = bitcast i32* %65 to i8*
  call void @_ZdlPv(i8* %71) #16
  %72 = bitcast %"class.std::__1::vector.131"* %63 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 24, i1 false) #9
  br label %73

73:                                               ; preds = %62, %67
  %74 = bitcast %"class.std::__1::vector.131"* %5 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 16
  %76 = bitcast %"class.std::__1::vector.131"* %63 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %76, align 8
  %77 = bitcast i32** %57 to i64*
  %78 = load i64, i64* %77, align 16
  %79 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 26, i32 2, i32 1, i32 0, i32 2, i32 0, i32 0
  %80 = bitcast i32** %79 to i64*
  store i64 %78, i64* %80, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 24, i1 false) #9
  br label %89

81:                                               ; preds = %41
  %82 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %5, i64 0, i32 0, i32 0
  %83 = load i32*, i32** %82, align 16
  %84 = icmp eq i32* %83, null
  br i1 %84, label %89, label %85

85:                                               ; preds = %81
  %86 = bitcast i32* %83 to i8*
  %87 = ptrtoint i32* %83 to i64
  %88 = bitcast i32** %56 to i64*
  store i64 %87, i64* %88, align 8
  call void @_ZdlPv(i8* %86) #16
  br label %89

89:                                               ; preds = %73, %81, %85
  %90 = phi i1 [ true, %73 ], [ false, %81 ], [ false, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #9
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %54) #9
  call void @llvm.lifetime.end.p0i8(i64 224, i8* nonnull %42) #9
  br label %91

91:                                               ; preds = %28, %34, %89
  %92 = phi i1 [ %90, %89 ], [ false, %28 ], [ false, %34 ]
  call void @_ZN2sh9SpecConstD1Ev(%"class.sh::SpecConst"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #9
  br label %93

93:                                               ; preds = %4, %91
  %94 = phi i1 [ %92, %91 ], [ false, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  %95 = load i32*, i32** %14, align 8
  %96 = icmp eq i32* %95, null
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = ptrtoint i32* %95 to i64
  %99 = bitcast i32** %15 to i64*
  store i64 %98, i64* %99, align 8
  %100 = bitcast i32* %95 to i8*
  call void @_ZdlPv(i8* %100) #16
  br label %101

101:                                              ; preds = %97, %93
  %102 = bitcast %"class.sh::TInfoSinkBase"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %103 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %102, i64 0, i32 1, i32 0
  %104 = load i8, i8* %103, align 1
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %107) #16
  br label %108

108:                                              ; preds = %101, %106
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #9
  ret i1 %94
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare zeroext i1 @_ZN2sh9TCompiler24emulatePrecisionIfNeededEPNS_12TIntermBlockERNS_13TInfoSinkBaseEPb14ShShaderOutput(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), i8*, i32) local_unnamed_addr #1

declare void @_ZN2sh9SpecConstC1EPNS_12TSymbolTableEmj(%"class.sh::SpecConst"*, %"class.sh::TSymbolTable"*, i64, i32) unnamed_addr #1

declare i32 @_ZNK2sh9TCompiler29getArrayIndexClampingStrategyEv(%"class.sh::TCompiler"*) local_unnamed_addr #1

declare void @_ZN2sh17TOutputVulkanGLSLC1ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputbbm(%"class.sh::TOutputVulkanGLSL"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i64 (i8*, i64)*, %"class.std::__1::map.138"* dereferenceable(24), %"class.sh::TSymbolTable"*, i32, i32, i32, i1 zeroext, i1 zeroext, i64) unnamed_addr #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TranslatorVulkan14compileToSpirvERKNS_13TInfoSinkBaseE(%"class.sh::TranslatorVulkan"*, %"class.sh::TInfoSinkBase"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.131", align 16
  %4 = bitcast %"class.std::__1::vector.131"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %3, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 24, i1 false) #9
  %7 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0
  %8 = tail call dereferenceable(520) %struct.ShBuiltInResources* @_ZNK2sh9TCompiler12getResourcesEv(%"class.sh::TCompiler"* %7) #9
  %9 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 14
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  %12 = call zeroext i1 @_ZN2sh21GlslangCompileToSpirvERK18ShBuiltInResourcesjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS3_6vectorIjNS7_IjEEEE(%struct.ShBuiltInResources* dereferenceable(520) %8, i32 %10, %"class.std::__1::basic_string"* dereferenceable(24) %11, %"class.std::__1::vector.131"* nonnull %3) #9
  br i1 %12, label %13, label %32

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 26, i32 2, i32 1
  %15 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %14, i64 0, i32 0, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = icmp eq i32* %16, null
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = ptrtoint i32* %16 to i64
  %20 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 26, i32 2, i32 1, i32 0, i32 1
  %21 = bitcast i32** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = bitcast i32* %16 to i8*
  call void @_ZdlPv(i8* %22) #16
  %23 = bitcast %"class.std::__1::vector.131"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 24, i1 false) #9
  br label %24

24:                                               ; preds = %18, %13
  %25 = bitcast %"class.std::__1::vector.131"* %3 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = bitcast %"class.std::__1::vector.131"* %14 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %27, align 8
  %28 = bitcast i32** %6 to i64*
  %29 = load i64, i64* %28, align 16
  %30 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0, i32 26, i32 2, i32 1, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast i32** %30 to i64*
  store i64 %29, i64* %31, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 24, i1 false) #9
  br label %40

32:                                               ; preds = %2
  %33 = getelementptr inbounds %"class.std::__1::vector.131", %"class.std::__1::vector.131"* %3, i64 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 16
  %35 = icmp eq i32* %34, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = bitcast i32* %34 to i8*
  %38 = ptrtoint i32* %34 to i64
  %39 = bitcast i32** %5 to i64*
  store i64 %38, i64* %39, align 8
  call void @_ZdlPv(i8* %37) #16
  br label %40

40:                                               ; preds = %24, %32, %36
  %41 = phi i1 [ true, %24 ], [ false, %32 ], [ false, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret i1 %41
}

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN2sh9SpecConstD1Ev(%"class.sh::SpecConst"*) unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2sh16TranslatorVulkan36shouldFlattenPragmaStdglInvariantAllEv(%"class.sh::TranslatorVulkan"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i1 false
}

declare zeroext i1 @_ZN2sh21GlslangCompileToSpirvERK18ShBuiltInResourcesjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS3_6vectorIjNS7_IjEEEE(%struct.ShBuiltInResources* dereferenceable(520), i32, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector.131"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2sh9TCompilerD2Ev(%"class.sh::TCompiler"*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TranslatorVulkanD0Ev(%"class.sh::TranslatorVulkan"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TranslatorVulkan", %"class.sh::TranslatorVulkan"* %0, i64 0, i32 0
  tail call void @_ZN2sh9TCompilerD2Ev(%"class.sh::TCompiler"* %2) #9
  %3 = bitcast %"class.sh::TranslatorVulkan"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TCompiler"* @_ZN2sh9TCompiler13getAsCompilerEv(%"class.sh::TCompiler"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TCompiler"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh9TCompiler27initBuiltInFunctionEmulatorEPNS_23BuiltInFunctionEmulatorEm(%"class.sh::TCompiler"*, %"class.sh::BuiltInFunctionEmulator"*, i64) unnamed_addr #0 comdat align 2 {
  ret void
}

declare zeroext i1 @_ZN2sh9TCompiler22shouldCollectVariablesEm(%"class.sh::TCompiler"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TranslatorVulkan30transformDepthBeforeCorrectionEPNS_12TIntermBlockEPKNS_13DriverUniformE(%"class.sh::TranslatorVulkan"*, %"class.sh::TIntermBlock"*, %"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #1

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #1

declare { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TVector.25"*, i32, %"struct.sh::TLayoutQualifier"* dereferenceable(92), %"struct.sh::TMemoryQualifier"* dereferenceable(5), i32, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN2sh5TType22setInterfaceBlockFieldEPKNS_15TInterfaceBlockEm(%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i64) local_unnamed_addr #1

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #1

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #1

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #1

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #1

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #9, !range !21
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !22

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #9
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #9
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #9
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #9, !range !21
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 4
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #16
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #9
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %100, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %96
  br i1 %24, label %100, label %99

28:                                               ; preds = %25, %96
  %29 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %96

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #9, !range !21
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i8*
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #9
  br label %96

96:                                               ; preds = %28, %74
  %97 = add nuw i64 %29, 1
  %98 = icmp eq i64 %97, %8
  br i1 %98, label %27, label %28

99:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #16
  br label %100

100:                                              ; preds = %2, %27, %99
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #9
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %128, %1
  %12 = phi i64 [ 0, %1 ], [ %130, %128 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %128
  %20 = phi i64 [ %6, %8 ], [ %131, %128 ]
  %21 = phi i64 [ 0, %8 ], [ %130, %128 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %128

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #9, !range !21
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !22

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %128

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %92, label %103, label %117

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type"* %104 to i8*
  %107 = bitcast %"union.absl::container_internal::map_slot_type"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #9
  %108 = load i8*, i8** %2, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %21
  store i8 -128, i8* %109, align 1
  %110 = load i8*, i8** %2, align 8
  %111 = add i64 %21, -15
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, %111
  %114 = and i64 %112, 15
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 -128, i8* %116, align 1
  br label %128

117:                                              ; preds = %89
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %119 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %123 = bitcast %"union.absl::container_internal::map_slot_type"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %123, i64 16, i1 false) #9
  %124 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %124, i64 %73
  %126 = bitcast %"union.absl::container_internal::map_slot_type"* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 8
  %127 = add i64 %21, -1
  br label %128

128:                                              ; preds = %79, %117, %103, %19
  %129 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %127, %117 ]
  %130 = add i64 %129, 1
  %131 = load i64, i64* %4, align 8
  %132 = icmp eq i64 %130, %131
  br i1 %132, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #13

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverserD0Ev(%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"*) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"*, %"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TVariable"*, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 1
  %5 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %5, i64 0, i32 1
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 6
  br i1 %10, label %11, label %50

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 12
  %13 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %12, align 8
  %14 = icmp eq %"class.sh::TInterfaceBlock"* %13, null
  br i1 %14, label %15, label %50

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = add i32 %17, -8
  %19 = icmp ult i32 %18, 43
  %20 = add i32 %17, -51
  %21 = icmp ult i32 %20, 33
  %22 = or i1 %19, %21
  %23 = icmp eq i32 %17, 6
  %24 = or i1 %23, %22
  %25 = xor i1 %24, true
  %26 = add i32 %17, -84
  %27 = icmp ugt i32 %26, 5
  %28 = and i1 %27, %25
  br i1 %28, label %29, label %50

29:                                               ; preds = %15
  %30 = bitcast %"class.sh::TVariable"* %5 to %"class.sh::TSymbol"*
  %31 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %30) #9
  %32 = extractvalue { i8*, i64 } %31, 0
  %33 = icmp eq i8* %32, null
  %34 = select i1 %33, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i64 0, i64 0), i8* %32
  %35 = tail call zeroext i1 @_ZN5angle10BeginsWithEPKcS1_(i8* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0)) #9
  br i1 %35, label %50, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0
  %38 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 1
  %39 = bitcast %"class.absl::flat_hash_map"** %38 to %"class.absl::container_internal::raw_hash_map"**
  %40 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %39, align 8
  %41 = bitcast %"class.sh::TVariable"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #9
  store %"class.sh::TVariable"* %5, %"class.sh::TVariable"** %3, align 8
  %42 = call dereferenceable(8) %"class.sh::TIntermTyped"** @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE2atIS6_SA_EEDTclsrT0_5valueclL_ZNSF_9addressofIKSJ_EEPT_RSQ_EclL_ZNSF_7declvalIRSP_EEDTclsr3std3__1E9__declvalISQ_ELi0EEEvEEEEERKSQ_(%"class.absl::container_internal::raw_hash_map"* %40, %"class.sh::TVariable"** nonnull dereferenceable(8) %3)
  %43 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %42, align 8
  %44 = bitcast %"class.sh::TIntermTyped"* %43 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %45 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %44, align 8
  %46 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %45, i64 23
  %47 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %46, align 8
  %48 = call %"class.sh::TIntermTyped"* %47(%"class.sh::TIntermTyped"* %43) #9
  %49 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %48, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %37, %"class.sh::TIntermNode"* %49, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #9
  br label %50

50:                                               ; preds = %15, %2, %11, %29, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_131ReplaceDefaultUniformsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::TVector.45", align 16
  %6 = alloca %"class.sh::TIntermBlock"*, align 8
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %7 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)***
  %8 = load %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)** %8, i64 27
  %10 = load %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.45"* (%"class.sh::TIntermDeclaration"*)** %9, align 8
  %11 = tail call %"class.sh::TVector.45"* %10(%"class.sh::TIntermDeclaration"* %2) #9
  %12 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %14 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, align 8
  %15 = bitcast %"class.sh::TIntermNode"* %14 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %16 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %16, i64 4
  %18 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, align 8
  %19 = tail call %"class.sh::TIntermTyped"* %18(%"class.sh::TIntermNode"* %14) #9
  %20 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %21 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %21, i64 31
  %23 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %22, align 8
  %24 = tail call dereferenceable(184) %"class.sh::TType"* %23(%"class.sh::TIntermTyped"* %19) #9
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %24, i64 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 6
  %28 = ptrtoint %"class.sh::TIntermDeclaration"* %2 to i64
  br i1 %27, label %29, label %106

29:                                               ; preds = %3
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %24, i64 0, i32 12
  %31 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %30, align 8
  %32 = icmp eq %"class.sh::TInterfaceBlock"* %31, null
  br i1 %32, label %33, label %106

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %24, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = add i32 %35, -8
  %37 = icmp ult i32 %36, 43
  %38 = add i32 %35, -51
  %39 = icmp ult i32 %38, 33
  %40 = or i1 %37, %39
  %41 = icmp eq i32 %35, 6
  %42 = or i1 %41, %40
  %43 = xor i1 %42, true
  %44 = add i32 %35, -84
  %45 = icmp ugt i32 %44, 5
  %46 = and i1 %45, %43
  br i1 %46, label %47, label %106

47:                                               ; preds = %33
  %48 = bitcast %"class.sh::TVector.45"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #9
  %49 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %5, i64 0, i32 0, i32 0, i32 0
  %50 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %5, i64 0, i32 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 0, i64 24, i1 false) #9
  %52 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0, i32 7
  %53 = bitcast %"class.sh::TIntermBlock"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #9
  %54 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %55 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %56 = bitcast %"class.sh::TIntermNode"*** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"class.std::__1::vector.46"* %54 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %57, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ult i64 %61, 2
  br i1 %62, label %69, label %63

63:                                               ; preds = %47
  %64 = inttoptr i64 %59 to %"class.sh::TIntermNode"**
  %65 = add nsw i64 %61, -2
  %66 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 %65
  %67 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, align 8
  %68 = bitcast %"class.sh::TIntermNode"* %67 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %69

69:                                               ; preds = %47, %63
  %70 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %68, %63 ], [ null, %47 ]
  %71 = phi %"class.sh::TIntermNode"* [ %67, %63 ], [ null, %47 ]
  %72 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %70, align 8
  %73 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %72, i64 8
  %74 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %73, align 8
  %75 = tail call %"class.sh::TIntermBlock"* %74(%"class.sh::TIntermNode"* %71) #9
  store %"class.sh::TIntermBlock"* %75, %"class.sh::TIntermBlock"** %6, align 8
  %76 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %77 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %76, align 8
  %78 = getelementptr inbounds %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser", %"class.sh::(anonymous namespace)::ReplaceDefaultUniformsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %79 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %78, align 8
  %80 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %77, %79
  br i1 %80, label %81, label %99

81:                                               ; preds = %69
  %82 = icmp eq %"class.sh::TIntermBlock"* %75, null
  %83 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %75, i64 0, i32 1
  %84 = select i1 %82, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %83
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %77, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %84, %"class.sh::TIntermAggregateBase"** %85, align 8
  %86 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %77, i64 0, i32 1
  %87 = bitcast %"class.sh::TIntermNode"** %86 to i64*
  store i64 %28, i64* %87, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %77, i64 0, i32 2
  %89 = bitcast %"class.sh::TVector.45"* %5 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 16
  %91 = bitcast %"class.sh::TVector.45"* %88 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %91, align 8
  %92 = bitcast %"class.sh::TIntermNode"*** %51 to i64*
  %93 = load i64, i64* %92, align 16
  %94 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %77, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast %"class.sh::TIntermNode"*** %94 to i64*
  store i64 %93, i64* %95, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 0, i64 24, i1 false) #9
  %96 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %77, i64 1
  %97 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %96 to i64
  %98 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %76 to i64*
  store i64 %97, i64* %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #9
  br label %105

99:                                               ; preds = %69
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.150"* %52, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %6, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TVector.45"* nonnull dereferenceable(24) %5) #9
  %100 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %49, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #9
  %101 = icmp eq %"class.sh::TIntermNode"** %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %99
  %103 = ptrtoint %"class.sh::TIntermNode"** %100 to i64
  %104 = bitcast %"class.sh::TIntermNode"*** %50 to i64*
  store i64 %103, i64* %104, align 8
  br label %105

105:                                              ; preds = %81, %99, %102
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #9
  br label %106

106:                                              ; preds = %33, %3, %29, %105
  %107 = phi i1 [ false, %105 ], [ true, %29 ], [ true, %3 ], [ true, %33 ]
  ret i1 %107
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.sh::TIntermTyped"** @_ZNK4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE2atIS6_SA_EEDTclsrT0_5valueclL_ZNSF_9addressofIKSJ_EEPT_RSQ_EclL_ZNSF_7declvalIRSP_EEDTclsr3std3__1E9__declvalISQ_ELi0EEEvEEEEERKSQ_(%"class.absl::container_internal::raw_hash_map"*, %"class.sh::TVariable"** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = bitcast %"class.sh::TVariable"** %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %6 = add i64 %5, %4
  %7 = zext i64 %6 to i128
  %8 = mul nuw i128 %7, 11376068507788127593
  %9 = lshr i128 %8, 64
  %10 = xor i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = add i64 %4, %11
  %13 = zext i64 %12 to i128
  %14 = mul nuw i128 %13, 11376068507788127593
  %15 = lshr i128 %14, 64
  %16 = xor i128 %15, %14
  %17 = trunc i128 %16 to i64
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = lshr i64 %17, 7
  %23 = ptrtoint i8* %19 to i64
  %24 = lshr i64 %23, 12
  %25 = xor i64 %22, %24
  %26 = trunc i128 %16 to i8
  %27 = and i8 %26, 127
  %28 = insertelement <16 x i8> undef, i8 %27, i32 0
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  %31 = inttoptr i64 %4 to %"class.sh::TVariable"*
  br label %32

32:                                               ; preds = %62, %2
  %33 = phi i64 [ %25, %2 ], [ %64, %62 ]
  %34 = phi i64 [ 0, %2 ], [ %63, %62 ]
  %35 = and i64 %33, %21
  %36 = getelementptr inbounds i8, i8* %19, i64 %35
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = icmp eq <16 x i8> %29, %38
  %40 = bitcast <16 x i1> %39 to i16
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %58, label %42

42:                                               ; preds = %32
  %43 = zext i16 %40 to i32
  %44 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %30, align 8
  br label %45

45:                                               ; preds = %54, %42
  %46 = phi i32 [ %43, %42 ], [ %56, %54 ]
  %47 = tail call i32 @llvm.cttz.i32(i32 %46, i1 false) #9, !range !21
  %48 = zext i32 %47 to i64
  %49 = add i64 %35, %48
  %50 = and i64 %49, %21
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %44, i64 %50, i32 0, i32 0
  %52 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %51, align 8
  %53 = icmp eq %"class.sh::TVariable"* %52, %31
  br i1 %53, label %65, label %54, !prof !22

54:                                               ; preds = %45
  %55 = add i32 %46, -1
  %56 = and i32 %55, %46
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %45

58:                                               ; preds = %54, %32
  %59 = icmp eq <16 x i8> %38, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %71, !prof !23

62:                                               ; preds = %58
  %63 = add i64 %34, 16
  %64 = add i64 %63, %35
  br label %32

65:                                               ; preds = %45
  %66 = getelementptr inbounds i8, i8* %19, i64 %50
  %67 = icmp ne i8* %66, null
  tail call void @llvm.assume(i1 %67) #9
  %68 = load i8, i8* %66, align 1
  %69 = icmp sgt i8 %68, -1
  br i1 %69, label %72, label %70, !prof !22

70:                                               ; preds = %65
  tail call void @llvm.trap() #9
  unreachable

71:                                               ; preds = %58
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.23, i64 0, i64 0)) #15
  unreachable

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %44, i64 %50, i32 0, i32 1
  ret %"class.sh::TIntermTyped"** %73
}

declare zeroext i1 @_ZN5angle10BeginsWithEPKcS1_(i8*, i8*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.150"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector.45"* dereferenceable(24)) local_unnamed_addr #6 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.150"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.150"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #15
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #16
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector.45"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #9
  %50 = bitcast %"class.sh::TVector.45"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector.45"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector.45"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #9
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.150", %"class.std::__1::vector.150"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #9
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector.45"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #9
  %82 = bitcast %"class.sh::TVector.45"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector.45"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector.45"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #9
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #16
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getDepthRangeRefEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

declare i64 @_ZN2sh32FindFirstFunctionDefinitionIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"*, i64, %"class.sh::TVector.45"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TVariable"* @_ZN2sh12_GLOBAL__N_134AddANGLEPositionVaryingDeclarationEPNS_12TIntermBlockEPNS_12TSymbolTableENS_10TQualifierE(%"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, i32) unnamed_addr #0 {
  %4 = alloca %"class.sh::ImmutableString", align 8
  %5 = alloca %"class.sh::TVector.45", align 8
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 184) #9
  %8 = bitcast i8* %7 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* %8, i32 1, i32 2, i32 %2, i8 zeroext 2, i8 zeroext 1) #9
  %9 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %10 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %9, i64 40) #9
  %11 = bitcast %"class.sh::ImmutableString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %4, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk28kLineRasterEmulationPositionE, i64 0, i64 0), i8** %12, align 8
  br label %13

13:                                               ; preds = %13, %3
  %14 = phi i64 [ %18, %13 ], [ 0, %3 ]
  %15 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk28kLineRasterEmulationPositionE, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = add i64 %14, 1
  br i1 %17, label %19, label %13

19:                                               ; preds = %13
  %20 = bitcast i8* %10 to %"class.sh::TVariable"*
  %21 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %4, i64 0, i32 1
  store i64 %14, i64* %21, align 8
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %20, %"class.sh::TSymbolTable"* %1, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %4, %"class.sh::TType"* %8, i8 zeroext 2, i8 zeroext 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #9
  %22 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %23 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %22, i64 32) #9
  %24 = bitcast i8* %23 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %24, %"class.sh::TVariable"* %20) #9
  %25 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %26 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %25, i64 56) #9
  %27 = bitcast i8* %26 to %"class.sh::TIntermDeclaration"*
  %28 = bitcast i8* %26 to i32 (...)***
  %29 = getelementptr inbounds i8, i8* %26, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #9
  %30 = getelementptr inbounds i8, i8* %26, i64 24
  %31 = bitcast i8* %30 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = getelementptr inbounds i8, i8* %26, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #9
  %33 = bitcast i8* %23 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %27, %"class.sh::TIntermTyped"* %33) #9
  %34 = bitcast %"class.sh::TVector.45"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #9
  %35 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %5, i64 0, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %5, i64 0, i32 0, i32 0, i32 1
  %37 = getelementptr inbounds %"class.sh::TVector.45", %"class.sh::TVector.45"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 24, i1 false) #9
  %38 = ptrtoint i8* %26 to i64
  %39 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  %40 = bitcast %"class.sh::TVector.45"* %5 to i64*
  %41 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %42 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %43 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %42, i64 8) #9
  %44 = bitcast i8* %43 to %"class.sh::TIntermNode"**
  %45 = getelementptr inbounds i8, i8* %43, i64 8
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast i8* %43 to i64*
  store i64 %38, i64* %47, align 8
  %48 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %49 = ptrtoint %"class.sh::TIntermNode"** %48 to i64
  %50 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %51 = bitcast %"class.sh::TIntermNode"** %50 to i8*
  %52 = icmp eq %"class.sh::TIntermNode"** %50, %48
  br i1 %52, label %226, label %53

53:                                               ; preds = %19
  %54 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %55 = ptrtoint %"class.sh::TIntermNode"** %54 to i64
  %56 = sub i64 %55, %49
  %57 = lshr i64 %56, 3
  %58 = add nuw nsw i64 %57, 1
  %59 = icmp ult i64 %58, 4
  br i1 %59, label %156, label %60

60:                                               ; preds = %53
  %61 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %62 = ptrtoint %"class.sh::TIntermNode"** %61 to i64
  %63 = sub i64 %62, %49
  %64 = lshr i64 %63, 3
  %65 = and i64 %63, -8
  %66 = xor i64 %65, -8
  %67 = getelementptr i8, i8* %43, i64 %66
  %68 = xor i64 %64, -1
  %69 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %68
  %70 = bitcast %"class.sh::TIntermNode"** %69 to i8*
  %71 = icmp ult i8* %67, %51
  %72 = icmp ugt i8* %43, %70
  %73 = and i1 %71, %72
  br i1 %73, label %156, label %74

74:                                               ; preds = %60
  %75 = and i64 %58, 4611686018427387900
  %76 = sub nsw i64 0, %75
  %77 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %44, i64 %76
  %78 = sub nsw i64 0, %75
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %78
  %80 = add nsw i64 %75, -4
  %81 = lshr exact i64 %80, 2
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %133, label %85

85:                                               ; preds = %74
  %86 = sub nuw nsw i64 %82, %83
  %87 = getelementptr i8, i8* %43, i64 -8
  %88 = bitcast i8* %87 to %"class.sh::TIntermNode"**
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %90 = getelementptr i8, i8* %43, i64 -8
  %91 = bitcast i8* %90 to %"class.sh::TIntermNode"**
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  br label %93

93:                                               ; preds = %93, %85
  %94 = phi i64 [ 0, %85 ], [ %128, %93 ]
  %95 = phi i64 [ %86, %85 ], [ %129, %93 ]
  %96 = sub i64 0, %94
  %97 = sub i64 0, %94
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 %96
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 %97
  %100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !76
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -2
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !76
  %107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 -1
  %108 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %108, align 8, !alias.scope !79, !noalias !76
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 -2
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -1
  %111 = bitcast %"class.sh::TIntermNode"** %110 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %111, align 8, !alias.scope !79, !noalias !76
  %112 = sub nuw nsw i64 -4, %94
  %113 = sub nuw nsw i64 -4, %94
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 %112
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %113
  %116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -1
  %117 = bitcast %"class.sh::TIntermNode"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !76
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -2
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !76
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -1
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %124, align 8, !alias.scope !79, !noalias !76
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -2
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %127, align 8, !alias.scope !79, !noalias !76
  %128 = add i64 %94, 8
  %129 = add i64 %95, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %93, !llvm.loop !81

131:                                              ; preds = %93
  %132 = sub nuw nsw i64 -8, %94
  br label %133

133:                                              ; preds = %131, %74
  %134 = phi i64 [ 0, %74 ], [ %132, %131 ]
  %135 = icmp eq i64 %83, 0
  br i1 %135, label %154, label %136

136:                                              ; preds = %133
  %137 = getelementptr i8, i8* %43, i64 -8
  %138 = bitcast i8* %137 to %"class.sh::TIntermNode"**
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 %134
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 %134
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !76
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -2
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !76
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -1
  %150 = bitcast %"class.sh::TIntermNode"** %149 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %150, align 8, !alias.scope !79, !noalias !76
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -2
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %151, i64 -1
  %153 = bitcast %"class.sh::TIntermNode"** %152 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %153, align 8, !alias.scope !79, !noalias !76
  br label %154

154:                                              ; preds = %133, %136
  %155 = icmp eq i64 %58, %75
  br i1 %155, label %226, label %156

156:                                              ; preds = %154, %60, %53
  %157 = phi %"class.sh::TIntermNode"** [ %44, %60 ], [ %44, %53 ], [ %77, %154 ]
  %158 = phi %"class.sh::TIntermNode"** [ %50, %60 ], [ %50, %53 ], [ %79, %154 ]
  %159 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 -1
  %160 = ptrtoint %"class.sh::TIntermNode"** %159 to i64
  %161 = sub i64 %160, %49
  %162 = lshr i64 %161, 3
  %163 = add nuw nsw i64 %162, 1
  %164 = and i64 %163, 7
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %177, label %166

166:                                              ; preds = %156, %166
  %167 = phi %"class.sh::TIntermNode"** [ %170, %166 ], [ %157, %156 ]
  %168 = phi %"class.sh::TIntermNode"** [ %171, %166 ], [ %158, %156 ]
  %169 = phi i64 [ %175, %166 ], [ %164, %156 ]
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %167, i64 -1
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %172 = bitcast %"class.sh::TIntermNode"** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.sh::TIntermNode"** %170 to i64*
  store i64 %173, i64* %174, align 8
  %175 = add i64 %169, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %166, !llvm.loop !82

177:                                              ; preds = %166, %156
  %178 = phi %"class.sh::TIntermNode"** [ undef, %156 ], [ %170, %166 ]
  %179 = phi %"class.sh::TIntermNode"** [ %157, %156 ], [ %170, %166 ]
  %180 = phi %"class.sh::TIntermNode"** [ %158, %156 ], [ %171, %166 ]
  %181 = icmp ult i64 %161, 56
  br i1 %181, label %226, label %182

182:                                              ; preds = %177, %182
  %183 = phi %"class.sh::TIntermNode"** [ %220, %182 ], [ %179, %177 ]
  %184 = phi %"class.sh::TIntermNode"** [ %221, %182 ], [ %180, %177 ]
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -1
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %187 = bitcast %"class.sh::TIntermNode"** %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  store i64 %188, i64* %189, align 8
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -2
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -2
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -3
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -3
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -4
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -4
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -5
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -5
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -6
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -6
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -7
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -7
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -8
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -8
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = icmp eq %"class.sh::TIntermNode"** %221, %48
  br i1 %225, label %226, label %182, !llvm.loop !83

226:                                              ; preds = %177, %182, %154, %19
  %227 = phi %"class.sh::TIntermNode"** [ %44, %19 ], [ %77, %154 ], [ %178, %177 ], [ %220, %182 ]
  %228 = ptrtoint %"class.sh::TIntermNode"** %227 to i64
  store i64 %228, i64* %40, align 8
  store i64 %46, i64* %39, align 8
  store i64 %46, i64* %41, align 8
  %229 = call i64 @_ZN2sh13FindMainIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %0) #9
  %230 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 1
  %231 = call zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"* %230, i64 %229, %"class.sh::TVector.45"* nonnull dereferenceable(24) %5) #9
  %232 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %233 = icmp eq %"class.sh::TIntermNode"** %232, null
  br i1 %233, label %237, label %234

234:                                              ; preds = %226
  %235 = ptrtoint %"class.sh::TIntermNode"** %232 to i64
  %236 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  store i64 %235, i64* %236, align 8
  br label %237

237:                                              ; preds = %226, %234
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #9
  ret %"class.sh::TVariable"* %20
}

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform14getViewportRefEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #1

declare %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*) local_unnamed_addr #1

declare %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

declare void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #1

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable12gl_FragCoordEv() local_unnamed_addr #1

declare void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #1

declare void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIS8_EEE4typeENSE_IPKS3_EESA_SA_(%"class.std::__1::vector.46"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %7 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint %"class.sh::TIntermNode"** %3 to i64
  %10 = sub i64 %9, %7
  %11 = ashr exact i64 %10, 3
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %834

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = ptrtoint %"class.sh::TIntermNode"** %18 to i64
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp sgt i64 %11, %21
  %23 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  br i1 %22, label %359, label %24

24:                                               ; preds = %13
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 3
  %27 = icmp sgt i64 %11, %26
  br i1 %27, label %28, label %213

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %26
  %30 = icmp eq %"class.sh::TIntermNode"** %29, %3
  br i1 %30, label %208, label %31

31:                                               ; preds = %28
  %32 = xor i64 %26, -1
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = sub i64 %34, %7
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %134, label %39

39:                                               ; preds = %31
  %40 = xor i64 %26, -1
  %41 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %40
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = sub i64 %42, %7
  %44 = lshr i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %45
  %47 = add nsw i64 %26, %44
  %48 = add nsw i64 %47, 1
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %48
  %50 = icmp ult %"class.sh::TIntermNode"** %18, %49
  %51 = icmp ult %"class.sh::TIntermNode"** %29, %46
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %39
  %54 = and i64 %37, 4611686018427387900
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %54
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %54
  %57 = add nsw i64 %54, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 12
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %65
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %65
  %69 = bitcast %"class.sh::TIntermNode"** %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !84
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 2
  %72 = bitcast %"class.sh::TIntermNode"** %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !84
  %74 = bitcast %"class.sh::TIntermNode"** %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !alias.scope !87, !noalias !84
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 2
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 8, !alias.scope !87, !noalias !84
  %77 = or i64 %65, 4
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %77
  %80 = bitcast %"class.sh::TIntermNode"** %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !84
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !84
  %85 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !alias.scope !87, !noalias !84
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, i64 2
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %87, align 8, !alias.scope !87, !noalias !84
  %88 = or i64 %65, 8
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %88
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %88
  %91 = bitcast %"class.sh::TIntermNode"** %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !84
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !84
  %96 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !alias.scope !87, !noalias !84
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 2
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %98, align 8, !alias.scope !87, !noalias !84
  %99 = or i64 %65, 12
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %99
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !84
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !84
  %107 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !87, !noalias !84
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 2
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !87, !noalias !84
  %110 = add i64 %65, 16
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !89

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %117
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %117
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !84
  %123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 2
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !84
  %126 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !87, !noalias !84
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 2
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !87, !noalias !84
  %129 = add i64 %117, 4
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !90

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %37, %54
  br i1 %133, label %205, label %134

134:                                              ; preds = %132, %39, %31
  %135 = phi %"class.sh::TIntermNode"** [ %18, %39 ], [ %18, %31 ], [ %55, %132 ]
  %136 = phi %"class.sh::TIntermNode"** [ %29, %39 ], [ %29, %31 ], [ %56, %132 ]
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %139 = ptrtoint %"class.sh::TIntermNode"** %138 to i64
  %140 = sub i64 %139, %137
  %141 = lshr i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %134, %145
  %146 = phi %"class.sh::TIntermNode"** [ %153, %145 ], [ %135, %134 ]
  %147 = phi %"class.sh::TIntermNode"** [ %152, %145 ], [ %136, %134 ]
  %148 = phi i64 [ %154, %145 ], [ %143, %134 ]
  %149 = bitcast %"class.sh::TIntermNode"** %146 to i64*
  %150 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 1
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 1
  %154 = add i64 %148, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !91

156:                                              ; preds = %145, %134
  %157 = phi %"class.sh::TIntermNode"** [ undef, %134 ], [ %153, %145 ]
  %158 = phi %"class.sh::TIntermNode"** [ %135, %134 ], [ %153, %145 ]
  %159 = phi %"class.sh::TIntermNode"** [ %136, %134 ], [ %152, %145 ]
  %160 = icmp ult i64 %140, 56
  br i1 %160, label %205, label %161

161:                                              ; preds = %156, %161
  %162 = phi %"class.sh::TIntermNode"** [ %203, %161 ], [ %158, %156 ]
  %163 = phi %"class.sh::TIntermNode"** [ %202, %161 ], [ %159, %156 ]
  %164 = bitcast %"class.sh::TIntermNode"** %162 to i64*
  %165 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %164, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 1
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 1
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 2
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 3
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 3
  %179 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  %180 = bitcast %"class.sh::TIntermNode"** %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %179, align 8
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 4
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 4
  %184 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  %185 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 5
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 5
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 6
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 6
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 7
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 7
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 8
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 8
  %204 = icmp eq %"class.sh::TIntermNode"** %202, %3
  br i1 %204, label %205, label %161, !llvm.loop !92

205:                                              ; preds = %156, %161, %132
  %206 = phi %"class.sh::TIntermNode"** [ %55, %132 ], [ %157, %156 ], [ %203, %161 ]
  %207 = ptrtoint %"class.sh::TIntermNode"** %206 to i64
  br label %208

208:                                              ; preds = %205, %28
  %209 = phi i64 [ %19, %28 ], [ %207, %205 ]
  store i64 %209, i64* %23, align 8
  %210 = icmp sgt i64 %25, 0
  br i1 %210, label %211, label %834

211:                                              ; preds = %208
  %212 = inttoptr i64 %209 to %"class.sh::TIntermNode"**
  br label %213

213:                                              ; preds = %211, %24
  %214 = phi i64 [ %209, %211 ], [ %19, %24 ]
  %215 = phi %"class.sh::TIntermNode"** [ %212, %211 ], [ %18, %24 ]
  %216 = phi %"class.sh::TIntermNode"** [ %29, %211 ], [ %3, %24 ]
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %11
  %218 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %219 = sub i64 %214, %218
  %220 = ashr exact i64 %219, 3
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %220
  %222 = icmp ult %"class.sh::TIntermNode"** %221, %18
  br i1 %222, label %223, label %336

223:                                              ; preds = %213
  %224 = sub nsw i64 0, %220
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %224
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i8*
  %227 = xor i64 %6, -1
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i64 %231, 4
  br i1 %232, label %233, label %236

233:                                              ; preds = %331, %236, %223
  %234 = phi %"class.sh::TIntermNode"** [ %215, %236 ], [ %215, %223 ], [ %254, %331 ]
  %235 = phi %"class.sh::TIntermNode"** [ %221, %236 ], [ %221, %223 ], [ %255, %331 ]
  br label %344

236:                                              ; preds = %223
  %237 = sub nsw i64 0, %220
  %238 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %237
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i8*
  %240 = xor i64 %6, -1
  %241 = getelementptr i8, i8* %239, i64 %240
  %242 = ptrtoint i8* %241 to i64
  %243 = lshr i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %244
  %246 = add nsw i64 %220, %243
  %247 = add nsw i64 %246, 1
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %247
  %249 = icmp ult %"class.sh::TIntermNode"** %215, %248
  %250 = icmp ult %"class.sh::TIntermNode"** %221, %245
  %251 = and i1 %249, %250
  br i1 %251, label %233, label %252

252:                                              ; preds = %236
  %253 = and i64 %231, 4611686018427387900
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %253
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %253
  %256 = add nsw i64 %253, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 12
  br i1 %260, label %312, label %261

261:                                              ; preds = %252
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %309, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %310, %263 ]
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %264
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %264
  %268 = bitcast %"class.sh::TIntermNode"** %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !93
  %270 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %267, i64 2
  %271 = bitcast %"class.sh::TIntermNode"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !93
  %273 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !96, !noalias !93
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 2
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !96, !noalias !93
  %276 = or i64 %264, 4
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %276
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %276
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !93
  %281 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %278, i64 2
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !93
  %284 = bitcast %"class.sh::TIntermNode"** %277 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !96, !noalias !93
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 2
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !96, !noalias !93
  %287 = or i64 %264, 8
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %287
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %287
  %290 = bitcast %"class.sh::TIntermNode"** %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !93
  %292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 2
  %293 = bitcast %"class.sh::TIntermNode"** %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !93
  %295 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !96, !noalias !93
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 2
  %297 = bitcast %"class.sh::TIntermNode"** %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !96, !noalias !93
  %298 = or i64 %264, 12
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %298
  %300 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %298
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !93
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %300, i64 2
  %304 = bitcast %"class.sh::TIntermNode"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !93
  %306 = bitcast %"class.sh::TIntermNode"** %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !96, !noalias !93
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 2
  %308 = bitcast %"class.sh::TIntermNode"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !96, !noalias !93
  %309 = add i64 %264, 16
  %310 = add i64 %265, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %263, !llvm.loop !98

312:                                              ; preds = %263, %252
  %313 = phi i64 [ 0, %252 ], [ %309, %263 ]
  %314 = icmp eq i64 %259, 0
  br i1 %314, label %331, label %315

315:                                              ; preds = %312, %315
  %316 = phi i64 [ %328, %315 ], [ %313, %312 ]
  %317 = phi i64 [ %329, %315 ], [ %259, %312 ]
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %316
  %319 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %316
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !93
  %322 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 2
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !93
  %325 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %325, align 8, !alias.scope !96, !noalias !93
  %326 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 2
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %327, align 8, !alias.scope !96, !noalias !93
  %328 = add i64 %316, 4
  %329 = add i64 %317, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %315, !llvm.loop !99

331:                                              ; preds = %315, %312
  %332 = icmp eq i64 %231, %253
  br i1 %332, label %333, label %233

333:                                              ; preds = %344, %331
  %334 = phi %"class.sh::TIntermNode"** [ %254, %331 ], [ %351, %344 ]
  %335 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  br label %336

336:                                              ; preds = %333, %213
  %337 = phi i64 [ %335, %333 ], [ %214, %213 ]
  store i64 %337, i64* %23, align 8
  %338 = icmp eq i64 %219, 0
  br i1 %338, label %353, label %339

339:                                              ; preds = %336
  %340 = sub nsw i64 0, %220
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %340
  %342 = bitcast %"class.sh::TIntermNode"** %341 to i8*
  %343 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %342, i8* align 8 %343, i64 %219, i1 false) #9
  br label %353

344:                                              ; preds = %233, %344
  %345 = phi %"class.sh::TIntermNode"** [ %351, %344 ], [ %234, %233 ]
  %346 = phi %"class.sh::TIntermNode"** [ %350, %344 ], [ %235, %233 ]
  %347 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %"class.sh::TIntermNode"** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 1
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 1
  %352 = icmp ult %"class.sh::TIntermNode"** %350, %18
  br i1 %352, label %344, label %333, !llvm.loop !100

353:                                              ; preds = %336, %339
  %354 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %355 = sub i64 %354, %7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %834, label %357

357:                                              ; preds = %353
  %358 = bitcast %"class.sh::TIntermNode"** %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %358, i64 %355, i1 false) #9
  br label %834

359:                                              ; preds = %13
  %360 = bitcast %"class.std::__1::vector.46"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %19, %361
  %363 = ashr exact i64 %362, 3
  %364 = add nsw i64 %363, %11
  %365 = icmp ugt i64 %364, 2305843009213693951
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector.46"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #15
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %16, %361
  %370 = ashr exact i64 %369, 3
  %371 = icmp ult i64 %370, 1152921504606846975
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %6, %361
  %374 = ashr exact i64 %373, 3
  br label %382

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 2
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %6, %361
  %380 = ashr exact i64 %379, 3
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %389, label %382

382:                                              ; preds = %372, %375
  %383 = phi i64 [ %374, %372 ], [ %380, %375 ]
  %384 = phi i64 [ 2305843009213693951, %372 ], [ %378, %375 ]
  %385 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %386 = shl i64 %384, 3
  %387 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %385, i64 %386) #9
  %388 = bitcast i8* %387 to %"class.sh::TIntermNode"**
  br label %389

389:                                              ; preds = %382, %375
  %390 = phi i64 [ %383, %382 ], [ %380, %375 ]
  %391 = phi i64 [ %384, %382 ], [ 0, %375 ]
  %392 = phi %"class.sh::TIntermNode"** [ %388, %382 ], [ null, %375 ]
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %390
  %394 = ptrtoint %"class.sh::TIntermNode"** %393 to i64
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %391
  %396 = ptrtoint %"class.sh::TIntermNode"** %395 to i64
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %11
  %398 = add i64 %10, -8
  %399 = lshr i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 7
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %418, label %403

403:                                              ; preds = %389, %403
  %404 = phi %"class.sh::TIntermNode"** [ %411, %403 ], [ %393, %389 ]
  %405 = phi %"class.sh::TIntermNode"** [ %413, %403 ], [ %2, %389 ]
  %406 = phi i64 [ %412, %403 ], [ %394, %389 ]
  %407 = phi i64 [ %414, %403 ], [ %401, %389 ]
  %408 = bitcast %"class.sh::TIntermNode"** %405 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = inttoptr i64 %406 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %405, i64 1
  %414 = add i64 %407, -1
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %403, !llvm.loop !101

416:                                              ; preds = %403
  %417 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  br label %418

418:                                              ; preds = %389, %416
  %419 = phi %"class.sh::TIntermNode"** [ %393, %389 ], [ %411, %416 ]
  %420 = phi %"class.sh::TIntermNode"** [ %2, %389 ], [ %413, %416 ]
  %421 = phi i64 [ %394, %389 ], [ %417, %416 ]
  %422 = icmp ult i64 %398, 56
  br i1 %422, label %469, label %423

423:                                              ; preds = %418, %423
  %424 = phi %"class.sh::TIntermNode"** [ %465, %423 ], [ %419, %418 ]
  %425 = phi %"class.sh::TIntermNode"** [ %467, %423 ], [ %420, %418 ]
  %426 = phi i64 [ %466, %423 ], [ %421, %418 ]
  %427 = bitcast %"class.sh::TIntermNode"** %425 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = inttoptr i64 %426 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 1
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 2
  %437 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 3
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 3
  %442 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 4
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 4
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 5
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 5
  %452 = bitcast %"class.sh::TIntermNode"** %451 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 6
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 6
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 7
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 7
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 8
  %466 = ptrtoint %"class.sh::TIntermNode"** %465 to i64
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 8
  %468 = icmp eq %"class.sh::TIntermNode"** %397, %465
  br i1 %468, label %469, label %423

469:                                              ; preds = %423, %418
  %470 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %471 = ptrtoint %"class.sh::TIntermNode"** %470 to i64
  %472 = icmp eq %"class.sh::TIntermNode"** %470, %1
  br i1 %472, label %645, label %473

473:                                              ; preds = %469
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %475 = ptrtoint %"class.sh::TIntermNode"** %474 to i64
  %476 = sub i64 %475, %471
  %477 = lshr i64 %476, 3
  %478 = add nuw nsw i64 %477, 1
  %479 = icmp ult i64 %478, 4
  br i1 %479, label %572, label %480

480:                                              ; preds = %473
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %482 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  %483 = sub i64 %482, %471
  %484 = lshr i64 %483, 3
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %390, %485
  %487 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %486
  %488 = xor i64 %484, -1
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %488
  %490 = icmp ult %"class.sh::TIntermNode"** %487, %1
  %491 = icmp ult %"class.sh::TIntermNode"** %489, %393
  %492 = and i1 %490, %491
  br i1 %492, label %572, label %493

493:                                              ; preds = %480
  %494 = and i64 %478, 4611686018427387900
  %495 = sub nsw i64 0, %494
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %495
  %497 = sub nsw i64 0, %494
  %498 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %497
  %499 = add nsw i64 %494, -4
  %500 = lshr exact i64 %499, 2
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 1
  %503 = icmp eq i64 %499, 0
  br i1 %503, label %548, label %504

504:                                              ; preds = %493
  %505 = sub nuw nsw i64 %501, %502
  %506 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %508 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %510

510:                                              ; preds = %510, %504
  %511 = phi i64 [ 0, %504 ], [ %545, %510 ]
  %512 = phi i64 [ %505, %504 ], [ %546, %510 ]
  %513 = sub i64 0, %511
  %514 = sub i64 0, %511
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 %513
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 %514
  %517 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -1
  %518 = bitcast %"class.sh::TIntermNode"** %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 8, !alias.scope !102
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -2
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = bitcast %"class.sh::TIntermNode"** %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 8, !alias.scope !102
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -1
  %525 = bitcast %"class.sh::TIntermNode"** %524 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %525, align 8, !alias.scope !105, !noalias !102
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -2
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 -1
  %528 = bitcast %"class.sh::TIntermNode"** %527 to <2 x i64>*
  store <2 x i64> %523, <2 x i64>* %528, align 8, !alias.scope !105, !noalias !102
  %529 = sub nuw nsw i64 -4, %511
  %530 = sub nuw nsw i64 -4, %511
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 %529
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %509, i64 %530
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 8, !alias.scope !102
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -2
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !102
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %541, align 8, !alias.scope !105, !noalias !102
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -2
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 -1
  %544 = bitcast %"class.sh::TIntermNode"** %543 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %544, align 8, !alias.scope !105, !noalias !102
  %545 = add i64 %511, 8
  %546 = add i64 %512, -2
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %510, !llvm.loop !107

548:                                              ; preds = %510, %493
  %549 = phi i64 [ 0, %493 ], [ %545, %510 ]
  %550 = icmp eq i64 %502, 0
  br i1 %550, label %570, label %551

551:                                              ; preds = %548
  %552 = sub i64 0, %549
  %553 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %554 = sub i64 0, %549
  %555 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %552
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %559 = bitcast %"class.sh::TIntermNode"** %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8, !alias.scope !102
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, i64 -1
  %563 = bitcast %"class.sh::TIntermNode"** %562 to <2 x i64>*
  %564 = load <2 x i64>, <2 x i64>* %563, align 8, !alias.scope !102
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %566 = bitcast %"class.sh::TIntermNode"** %565 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %566, align 8, !alias.scope !105, !noalias !102
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -2
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 -1
  %569 = bitcast %"class.sh::TIntermNode"** %568 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %569, align 8, !alias.scope !105, !noalias !102
  br label %570

570:                                              ; preds = %548, %551
  %571 = icmp eq i64 %478, %494
  br i1 %571, label %642, label %572

572:                                              ; preds = %570, %480, %473
  %573 = phi %"class.sh::TIntermNode"** [ %393, %480 ], [ %393, %473 ], [ %496, %570 ]
  %574 = phi %"class.sh::TIntermNode"** [ %1, %480 ], [ %1, %473 ], [ %498, %570 ]
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  %577 = sub i64 %576, %471
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %572, %582
  %583 = phi %"class.sh::TIntermNode"** [ %586, %582 ], [ %573, %572 ]
  %584 = phi %"class.sh::TIntermNode"** [ %587, %582 ], [ %574, %572 ]
  %585 = phi i64 [ %591, %582 ], [ %580, %572 ]
  %586 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %583, i64 -1
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %588 = bitcast %"class.sh::TIntermNode"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"class.sh::TIntermNode"** %586 to i64*
  store i64 %589, i64* %590, align 8
  %591 = add i64 %585, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %582, !llvm.loop !108

593:                                              ; preds = %582, %572
  %594 = phi %"class.sh::TIntermNode"** [ undef, %572 ], [ %586, %582 ]
  %595 = phi %"class.sh::TIntermNode"** [ %573, %572 ], [ %586, %582 ]
  %596 = phi %"class.sh::TIntermNode"** [ %574, %572 ], [ %587, %582 ]
  %597 = icmp ult i64 %577, 56
  br i1 %597, label %642, label %598

598:                                              ; preds = %593, %598
  %599 = phi %"class.sh::TIntermNode"** [ %636, %598 ], [ %595, %593 ]
  %600 = phi %"class.sh::TIntermNode"** [ %637, %598 ], [ %596, %593 ]
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %601 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -2
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -3
  %612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -3
  %613 = bitcast %"class.sh::TIntermNode"** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.sh::TIntermNode"** %611 to i64*
  store i64 %614, i64* %615, align 8
  %616 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -4
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -4
  %618 = bitcast %"class.sh::TIntermNode"** %617 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = bitcast %"class.sh::TIntermNode"** %616 to i64*
  store i64 %619, i64* %620, align 8
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -5
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -5
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -6
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -6
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -7
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -7
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -8
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -8
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = icmp eq %"class.sh::TIntermNode"** %637, %470
  br i1 %641, label %642, label %598, !llvm.loop !109

642:                                              ; preds = %593, %598, %570
  %643 = phi %"class.sh::TIntermNode"** [ %496, %570 ], [ %594, %593 ], [ %636, %598 ]
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  br label %645

645:                                              ; preds = %642, %469
  %646 = phi i64 [ %394, %469 ], [ %644, %642 ]
  %647 = phi %"class.sh::TIntermNode"** [ %393, %469 ], [ %643, %642 ]
  %648 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %649 = icmp eq %"class.sh::TIntermNode"** %648, %1
  br i1 %649, label %650, label %652

650:                                              ; preds = %645
  %651 = ptrtoint %"class.sh::TIntermNode"** %647 to i64
  br label %830

652:                                              ; preds = %645
  %653 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %654 = ptrtoint %"class.sh::TIntermNode"** %653 to i64
  %655 = sub i64 %654, %6
  %656 = lshr i64 %655, 3
  %657 = add nuw nsw i64 %656, 1
  %658 = icmp ult i64 %657, 4
  br i1 %658, label %755, label %659

659:                                              ; preds = %652
  %660 = add nsw i64 %390, %11
  %661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %662 = ptrtoint %"class.sh::TIntermNode"** %661 to i64
  %663 = sub i64 %662, %6
  %664 = lshr i64 %663, 3
  %665 = add nsw i64 %660, %664
  %666 = add nsw i64 %665, 1
  %667 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %666
  %668 = add nuw nsw i64 %664, 1
  %669 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %668
  %670 = icmp ult %"class.sh::TIntermNode"** %397, %669
  %671 = icmp ugt %"class.sh::TIntermNode"** %667, %1
  %672 = and i1 %670, %671
  br i1 %672, label %755, label %673

673:                                              ; preds = %659
  %674 = and i64 %657, 4611686018427387900
  %675 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %676 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %677 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %674
  %678 = add nsw i64 %674, -4
  %679 = lshr exact i64 %678, 2
  %680 = add nuw nsw i64 %679, 1
  %681 = and i64 %680, 3
  %682 = icmp ult i64 %678, 12
  br i1 %682, label %734, label %683

683:                                              ; preds = %673
  %684 = sub nsw i64 %680, %681
  br label %685

685:                                              ; preds = %685, %683
  %686 = phi i64 [ 0, %683 ], [ %731, %685 ]
  %687 = phi i64 [ %684, %683 ], [ %732, %685 ]
  %688 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %686
  %689 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %686
  %690 = bitcast %"class.sh::TIntermNode"** %689 to <2 x i64>*
  %691 = load <2 x i64>, <2 x i64>* %690, align 8, !alias.scope !110
  %692 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 2
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !110
  %695 = bitcast %"class.sh::TIntermNode"** %688 to <2 x i64>*
  store <2 x i64> %691, <2 x i64>* %695, align 8, !alias.scope !113, !noalias !110
  %696 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 2
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %697, align 8, !alias.scope !113, !noalias !110
  %698 = or i64 %686, 4
  %699 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %698
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %698
  %701 = bitcast %"class.sh::TIntermNode"** %700 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 8, !alias.scope !110
  %703 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 2
  %704 = bitcast %"class.sh::TIntermNode"** %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 8, !alias.scope !110
  %706 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %702, <2 x i64>* %706, align 8, !alias.scope !113, !noalias !110
  %707 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 2
  %708 = bitcast %"class.sh::TIntermNode"** %707 to <2 x i64>*
  store <2 x i64> %705, <2 x i64>* %708, align 8, !alias.scope !113, !noalias !110
  %709 = or i64 %686, 8
  %710 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %709
  %711 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %709
  %712 = bitcast %"class.sh::TIntermNode"** %711 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 8, !alias.scope !110
  %714 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %711, i64 2
  %715 = bitcast %"class.sh::TIntermNode"** %714 to <2 x i64>*
  %716 = load <2 x i64>, <2 x i64>* %715, align 8, !alias.scope !110
  %717 = bitcast %"class.sh::TIntermNode"** %710 to <2 x i64>*
  store <2 x i64> %713, <2 x i64>* %717, align 8, !alias.scope !113, !noalias !110
  %718 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 2
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  store <2 x i64> %716, <2 x i64>* %719, align 8, !alias.scope !113, !noalias !110
  %720 = or i64 %686, 12
  %721 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %720
  %722 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %720
  %723 = bitcast %"class.sh::TIntermNode"** %722 to <2 x i64>*
  %724 = load <2 x i64>, <2 x i64>* %723, align 8, !alias.scope !110
  %725 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %722, i64 2
  %726 = bitcast %"class.sh::TIntermNode"** %725 to <2 x i64>*
  %727 = load <2 x i64>, <2 x i64>* %726, align 8, !alias.scope !110
  %728 = bitcast %"class.sh::TIntermNode"** %721 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %728, align 8, !alias.scope !113, !noalias !110
  %729 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %721, i64 2
  %730 = bitcast %"class.sh::TIntermNode"** %729 to <2 x i64>*
  store <2 x i64> %727, <2 x i64>* %730, align 8, !alias.scope !113, !noalias !110
  %731 = add i64 %686, 16
  %732 = add i64 %687, -4
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %685, !llvm.loop !115

734:                                              ; preds = %685, %673
  %735 = phi i64 [ 0, %673 ], [ %731, %685 ]
  %736 = icmp eq i64 %681, 0
  br i1 %736, label %753, label %737

737:                                              ; preds = %734, %737
  %738 = phi i64 [ %750, %737 ], [ %735, %734 ]
  %739 = phi i64 [ %751, %737 ], [ %681, %734 ]
  %740 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %738
  %741 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %738
  %742 = bitcast %"class.sh::TIntermNode"** %741 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %742, align 8, !alias.scope !110
  %744 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 2
  %745 = bitcast %"class.sh::TIntermNode"** %744 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !110
  %747 = bitcast %"class.sh::TIntermNode"** %740 to <2 x i64>*
  store <2 x i64> %743, <2 x i64>* %747, align 8, !alias.scope !113, !noalias !110
  %748 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %740, i64 2
  %749 = bitcast %"class.sh::TIntermNode"** %748 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %749, align 8, !alias.scope !113, !noalias !110
  %750 = add i64 %738, 4
  %751 = add i64 %739, -1
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %737, !llvm.loop !116

753:                                              ; preds = %737, %734
  %754 = icmp eq i64 %657, %674
  br i1 %754, label %830, label %755

755:                                              ; preds = %753, %659, %652
  %756 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %675, %753 ]
  %757 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %676, %753 ]
  %758 = phi %"class.sh::TIntermNode"** [ %1, %659 ], [ %1, %652 ], [ %677, %753 ]
  %759 = ptrtoint %"class.sh::TIntermNode"** %758 to i64
  %760 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %761 = ptrtoint %"class.sh::TIntermNode"** %760 to i64
  %762 = sub i64 %761, %759
  %763 = lshr i64 %762, 3
  %764 = add nuw nsw i64 %763, 1
  %765 = and i64 %764, 7
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %779, label %767

767:                                              ; preds = %755, %767
  %768 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %756, %755 ]
  %769 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %757, %755 ]
  %770 = phi %"class.sh::TIntermNode"** [ %775, %767 ], [ %758, %755 ]
  %771 = phi i64 [ %777, %767 ], [ %765, %755 ]
  %772 = bitcast %"class.sh::TIntermNode"** %769 to i64*
  %773 = bitcast %"class.sh::TIntermNode"** %770 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %772, align 8
  %775 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %770, i64 1
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %768, i64 1
  %777 = add i64 %771, -1
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %779, label %767, !llvm.loop !117

779:                                              ; preds = %767, %755
  %780 = phi %"class.sh::TIntermNode"** [ undef, %755 ], [ %776, %767 ]
  %781 = phi %"class.sh::TIntermNode"** [ %756, %755 ], [ %776, %767 ]
  %782 = phi %"class.sh::TIntermNode"** [ %757, %755 ], [ %776, %767 ]
  %783 = phi %"class.sh::TIntermNode"** [ %758, %755 ], [ %775, %767 ]
  %784 = icmp ult i64 %762, 56
  br i1 %784, label %830, label %785

785:                                              ; preds = %779, %785
  %786 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %781, %779 ]
  %787 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %782, %779 ]
  %788 = phi %"class.sh::TIntermNode"** [ %827, %785 ], [ %783, %779 ]
  %789 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %790 = bitcast %"class.sh::TIntermNode"** %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %789, align 8
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 1
  %793 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 1
  %794 = bitcast %"class.sh::TIntermNode"** %793 to i64*
  %795 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %794, align 8
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 2
  %798 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 2
  %799 = bitcast %"class.sh::TIntermNode"** %798 to i64*
  %800 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %799, align 8
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 3
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 3
  %804 = bitcast %"class.sh::TIntermNode"** %803 to i64*
  %805 = bitcast %"class.sh::TIntermNode"** %802 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %804, align 8
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 4
  %808 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 4
  %809 = bitcast %"class.sh::TIntermNode"** %808 to i64*
  %810 = bitcast %"class.sh::TIntermNode"** %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %809, align 8
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 5
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 5
  %814 = bitcast %"class.sh::TIntermNode"** %813 to i64*
  %815 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %814, align 8
  %817 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 6
  %818 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 6
  %819 = bitcast %"class.sh::TIntermNode"** %818 to i64*
  %820 = bitcast %"class.sh::TIntermNode"** %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %819, align 8
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 7
  %823 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 7
  %824 = bitcast %"class.sh::TIntermNode"** %823 to i64*
  %825 = bitcast %"class.sh::TIntermNode"** %822 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %824, align 8
  %827 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 8
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 8
  %829 = icmp eq %"class.sh::TIntermNode"** %827, %648
  br i1 %829, label %830, label %785, !llvm.loop !118

830:                                              ; preds = %779, %785, %753, %650
  %831 = phi %"class.sh::TIntermNode"** [ %397, %650 ], [ %675, %753 ], [ %780, %779 ], [ %828, %785 ]
  %832 = phi i64 [ %651, %650 ], [ %646, %753 ], [ %646, %785 ], [ %646, %779 ]
  %833 = ptrtoint %"class.sh::TIntermNode"** %831 to i64
  store i64 %832, i64* %360, align 8
  store i64 %833, i64* %23, align 8
  store i64 %396, i64* %15, align 8
  ret %"class.sh::TIntermNode"** %393

834:                                              ; preds = %208, %353, %357, %4
  ret %"class.sh::TIntermNode"** %1
}

declare %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst22getLineRasterEmulationEv(%"class.sh::SpecConst"*) local_unnamed_addr #1

declare %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.46"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp ult %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %13 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %14, label %164

14:                                               ; preds = %3
  %15 = icmp eq %"class.sh::TIntermNode"** %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %21 = ptrtoint %"class.sh::TIntermNode"** %20 to i64
  %22 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %578

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %25 = ptrtoint %"class.sh::TIntermNode"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %27
  %29 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %30 = icmp ult %"class.sh::TIntermNode"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %32
  %34 = bitcast %"class.sh::TIntermNode"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.sh::TIntermNode"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.sh::TIntermNode"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %151

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %45
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %55
  %57 = icmp ult %"class.sh::TIntermNode"** %8, %56
  %58 = icmp ult %"class.sh::TIntermNode"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %61
  %63 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %72
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %72
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !119
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 2
  %79 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !119
  %81 = bitcast %"class.sh::TIntermNode"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !122, !noalias !119
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !122, !noalias !119
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %84
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %84
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !119
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 2
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !119
  %92 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !122, !noalias !119
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !122, !noalias !119
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %95
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %95
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !119
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 2
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !119
  %103 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !122, !noalias !119
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !122, !noalias !119
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %106
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !119
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 2
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !119
  %114 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !122, !noalias !119
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 2
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !122, !noalias !119
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !124

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %124
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %124
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !119
  %130 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 2
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !119
  %133 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !122, !noalias !119
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 2
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !122, !noalias !119
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !125

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %151, %139
  %142 = phi %"class.sh::TIntermNode"** [ %62, %139 ], [ %158, %151 ]
  %143 = ptrtoint %"class.sh::TIntermNode"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %148
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %5, i64 %26, i1 false) #9
  br label %160

151:                                              ; preds = %41, %151
  %152 = phi %"class.sh::TIntermNode"** [ %158, %151 ], [ %42, %41 ]
  %153 = phi %"class.sh::TIntermNode"** [ %157, %151 ], [ %43, %41 ]
  %154 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.sh::TIntermNode"** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 1
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 1
  %159 = icmp ult %"class.sh::TIntermNode"** %157, %8
  br i1 %159, label %151, label %141, !llvm.loop !126

160:                                              ; preds = %144, %147
  %161 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %162, i64* %163, align 8
  br label %578

164:                                              ; preds = %3
  %165 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %166 = bitcast %"class.std::__1::vector.46"* %0 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %12, %167
  %169 = ashr exact i64 %168, 3
  %170 = add nsw i64 %169, 1
  %171 = icmp ugt i64 %170, 2305843009213693951
  br i1 %171, label %172, label %174

172:                                              ; preds = %164
  %173 = bitcast %"class.std::__1::vector.46"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %173) #15
  unreachable

174:                                              ; preds = %164
  %175 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %176 = sub i64 %13, %167
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %182, label %179

179:                                              ; preds = %174
  %180 = sub i64 %4, %167
  %181 = ashr exact i64 %180, 3
  br label %189

182:                                              ; preds = %174
  %183 = ashr exact i64 %176, 2
  %184 = icmp ult i64 %183, %170
  %185 = select i1 %184, i64 %170, i64 %183
  %186 = sub i64 %4, %167
  %187 = ashr exact i64 %186, 3
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %196, label %189

189:                                              ; preds = %179, %182
  %190 = phi i64 [ %181, %179 ], [ %187, %182 ]
  %191 = phi i64 [ 2305843009213693951, %179 ], [ %185, %182 ]
  %192 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %193 = shl i64 %191, 3
  %194 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %192, i64 %193) #9
  %195 = bitcast i8* %194 to %"class.sh::TIntermNode"**
  br label %196

196:                                              ; preds = %182, %189
  %197 = phi i64 [ %190, %189 ], [ %187, %182 ]
  %198 = phi i64 [ %191, %189 ], [ 0, %182 ]
  %199 = phi %"class.sh::TIntermNode"** [ %195, %189 ], [ null, %182 ]
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %197
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %198
  %202 = ptrtoint %"class.sh::TIntermNode"** %201 to i64
  %203 = icmp eq i64 %197, %198
  br i1 %203, label %204, label %222

204:                                              ; preds = %196
  %205 = icmp sgt i64 %197, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %204
  %207 = add nuw nsw i64 %197, 1
  %208 = sdiv i64 %207, -2
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 %208
  br label %222

210:                                              ; preds = %204
  %211 = shl nsw i64 %197, 1
  %212 = icmp eq i64 %197, 0
  %213 = select i1 %212, i64 1, i64 %211
  %214 = lshr i64 %213, 2
  %215 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %216 = shl i64 %213, 3
  %217 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %215, i64 %216) #9
  %218 = bitcast i8* %217 to %"class.sh::TIntermNode"**
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %214
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %213
  %221 = ptrtoint %"class.sh::TIntermNode"** %220 to i64
  br label %222

222:                                              ; preds = %196, %206, %210
  %223 = phi %"class.sh::TIntermNode"** [ %209, %206 ], [ %219, %210 ], [ %200, %196 ]
  %224 = phi i64 [ %202, %206 ], [ %221, %210 ], [ %202, %196 ]
  %225 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  %226 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %225, align 8
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 1
  %229 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %230 = ptrtoint %"class.sh::TIntermNode"** %229 to i64
  %231 = icmp eq %"class.sh::TIntermNode"** %229, %1
  br i1 %231, label %399, label %232

232:                                              ; preds = %222
  %233 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %234 = ptrtoint %"class.sh::TIntermNode"** %233 to i64
  %235 = sub i64 %234, %230
  %236 = lshr i64 %235, 3
  %237 = add nuw nsw i64 %236, 1
  %238 = icmp ult i64 %237, 4
  br i1 %238, label %329, label %239

239:                                              ; preds = %232
  %240 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %241 = ptrtoint %"class.sh::TIntermNode"** %240 to i64
  %242 = sub i64 %241, %230
  %243 = lshr i64 %242, 3
  %244 = xor i64 %243, -1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %244
  %246 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %244
  %247 = icmp ult %"class.sh::TIntermNode"** %245, %1
  %248 = icmp ult %"class.sh::TIntermNode"** %246, %223
  %249 = and i1 %247, %248
  br i1 %249, label %329, label %250

250:                                              ; preds = %239
  %251 = and i64 %237, 4611686018427387900
  %252 = sub nsw i64 0, %251
  %253 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %252
  %254 = sub nsw i64 0, %251
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %254
  %256 = add nsw i64 %251, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 1
  %260 = icmp eq i64 %256, 0
  br i1 %260, label %305, label %261

261:                                              ; preds = %250
  %262 = sub nuw nsw i64 %258, %259
  %263 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %264 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %265 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %267

267:                                              ; preds = %267, %261
  %268 = phi i64 [ 0, %261 ], [ %302, %267 ]
  %269 = phi i64 [ %262, %261 ], [ %303, %267 ]
  %270 = sub i64 0, %268
  %271 = sub i64 0, %268
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %270
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %271
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -1
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !127
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -2
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 -1
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !127
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %282, align 8, !alias.scope !130, !noalias !127
  %283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -2
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %283, i64 -1
  %285 = bitcast %"class.sh::TIntermNode"** %284 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %285, align 8, !alias.scope !130, !noalias !127
  %286 = sub nuw nsw i64 -4, %268
  %287 = sub nuw nsw i64 -4, %268
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 %286
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 %287
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -1
  %291 = bitcast %"class.sh::TIntermNode"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !127
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -2
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 -1
  %295 = bitcast %"class.sh::TIntermNode"** %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !alias.scope !127
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -1
  %298 = bitcast %"class.sh::TIntermNode"** %297 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %298, align 8, !alias.scope !130, !noalias !127
  %299 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -2
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 -1
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %301, align 8, !alias.scope !130, !noalias !127
  %302 = add i64 %268, 8
  %303 = add i64 %269, -2
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %267, !llvm.loop !132

305:                                              ; preds = %267, %250
  %306 = phi i64 [ 0, %250 ], [ %302, %267 ]
  %307 = icmp eq i64 %259, 0
  br i1 %307, label %327, label %308

308:                                              ; preds = %305
  %309 = sub i64 0, %306
  %310 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %311 = sub i64 0, %306
  %312 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 %309
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %312, i64 %311
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = bitcast %"class.sh::TIntermNode"** %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8, !alias.scope !127
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -2
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 -1
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !127
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -1
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  store <2 x i64> %317, <2 x i64>* %323, align 8, !alias.scope !130, !noalias !127
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -2
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %326, align 8, !alias.scope !130, !noalias !127
  br label %327

327:                                              ; preds = %305, %308
  %328 = icmp eq i64 %237, %251
  br i1 %328, label %399, label %329

329:                                              ; preds = %327, %239, %232
  %330 = phi %"class.sh::TIntermNode"** [ %223, %239 ], [ %223, %232 ], [ %253, %327 ]
  %331 = phi %"class.sh::TIntermNode"** [ %1, %239 ], [ %1, %232 ], [ %255, %327 ]
  %332 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %333 = ptrtoint %"class.sh::TIntermNode"** %332 to i64
  %334 = sub i64 %333, %230
  %335 = lshr i64 %334, 3
  %336 = add nuw nsw i64 %335, 1
  %337 = and i64 %336, 7
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %350, label %339

339:                                              ; preds = %329, %339
  %340 = phi %"class.sh::TIntermNode"** [ %343, %339 ], [ %330, %329 ]
  %341 = phi %"class.sh::TIntermNode"** [ %344, %339 ], [ %331, %329 ]
  %342 = phi i64 [ %348, %339 ], [ %337, %329 ]
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -1
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -1
  %345 = bitcast %"class.sh::TIntermNode"** %344 to i64*
  %346 = load i64, i64* %345, align 8
  %347 = bitcast %"class.sh::TIntermNode"** %343 to i64*
  store i64 %346, i64* %347, align 8
  %348 = add i64 %342, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %339, !llvm.loop !133

350:                                              ; preds = %339, %329
  %351 = phi %"class.sh::TIntermNode"** [ undef, %329 ], [ %343, %339 ]
  %352 = phi %"class.sh::TIntermNode"** [ %330, %329 ], [ %343, %339 ]
  %353 = phi %"class.sh::TIntermNode"** [ %331, %329 ], [ %344, %339 ]
  %354 = icmp ult i64 %334, 56
  br i1 %354, label %399, label %355

355:                                              ; preds = %350, %355
  %356 = phi %"class.sh::TIntermNode"** [ %393, %355 ], [ %352, %350 ]
  %357 = phi %"class.sh::TIntermNode"** [ %394, %355 ], [ %353, %350 ]
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -1
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -1
  %360 = bitcast %"class.sh::TIntermNode"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = bitcast %"class.sh::TIntermNode"** %358 to i64*
  store i64 %361, i64* %362, align 8
  %363 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -2
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -2
  %365 = bitcast %"class.sh::TIntermNode"** %364 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = bitcast %"class.sh::TIntermNode"** %363 to i64*
  store i64 %366, i64* %367, align 8
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -3
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -3
  %370 = bitcast %"class.sh::TIntermNode"** %369 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = bitcast %"class.sh::TIntermNode"** %368 to i64*
  store i64 %371, i64* %372, align 8
  %373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -4
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -4
  %375 = bitcast %"class.sh::TIntermNode"** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.sh::TIntermNode"** %373 to i64*
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -5
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -5
  %380 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %"class.sh::TIntermNode"** %378 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -6
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -6
  %385 = bitcast %"class.sh::TIntermNode"** %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %"class.sh::TIntermNode"** %383 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -7
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -7
  %390 = bitcast %"class.sh::TIntermNode"** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.sh::TIntermNode"** %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -8
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -8
  %395 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %"class.sh::TIntermNode"** %393 to i64*
  store i64 %396, i64* %397, align 8
  %398 = icmp eq %"class.sh::TIntermNode"** %394, %229
  br i1 %398, label %399, label %355, !llvm.loop !134

399:                                              ; preds = %350, %355, %327, %222
  %400 = phi %"class.sh::TIntermNode"** [ %223, %222 ], [ %253, %327 ], [ %351, %350 ], [ %393, %355 ]
  %401 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %402 = icmp eq %"class.sh::TIntermNode"** %401, %1
  br i1 %402, label %574, label %403

403:                                              ; preds = %399
  %404 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %405 = ptrtoint %"class.sh::TIntermNode"** %404 to i64
  %406 = sub i64 %405, %4
  %407 = lshr i64 %406, 3
  %408 = add nuw nsw i64 %407, 1
  %409 = icmp ult i64 %408, 4
  br i1 %409, label %503, label %410

410:                                              ; preds = %403
  %411 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = sub i64 %412, %4
  %414 = lshr i64 %413, 3
  %415 = add nuw nsw i64 %414, 2
  %416 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %415
  %417 = add nuw nsw i64 %414, 1
  %418 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %417
  %419 = icmp ult %"class.sh::TIntermNode"** %228, %418
  %420 = icmp ugt %"class.sh::TIntermNode"** %416, %1
  %421 = and i1 %419, %420
  br i1 %421, label %503, label %422

422:                                              ; preds = %410
  %423 = and i64 %408, 4611686018427387900
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %423
  %425 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %423
  %426 = add nsw i64 %423, -4
  %427 = lshr exact i64 %426, 2
  %428 = add nuw nsw i64 %427, 1
  %429 = and i64 %428, 3
  %430 = icmp ult i64 %426, 12
  br i1 %430, label %482, label %431

431:                                              ; preds = %422
  %432 = sub nsw i64 %428, %429
  br label %433

433:                                              ; preds = %433, %431
  %434 = phi i64 [ 0, %431 ], [ %479, %433 ]
  %435 = phi i64 [ %432, %431 ], [ %480, %433 ]
  %436 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %434
  %437 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %434
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !135
  %440 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %437, i64 2
  %441 = bitcast %"class.sh::TIntermNode"** %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !135
  %443 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %443, align 8, !alias.scope !138, !noalias !135
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 2
  %445 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %445, align 8, !alias.scope !138, !noalias !135
  %446 = or i64 %434, 4
  %447 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %446
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %446
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !135
  %451 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 2
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !135
  %454 = bitcast %"class.sh::TIntermNode"** %447 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %454, align 8, !alias.scope !138, !noalias !135
  %455 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %447, i64 2
  %456 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %456, align 8, !alias.scope !138, !noalias !135
  %457 = or i64 %434, 8
  %458 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %457
  %459 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %457
  %460 = bitcast %"class.sh::TIntermNode"** %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !135
  %462 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 2
  %463 = bitcast %"class.sh::TIntermNode"** %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 8, !alias.scope !135
  %465 = bitcast %"class.sh::TIntermNode"** %458 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %465, align 8, !alias.scope !138, !noalias !135
  %466 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 2
  %467 = bitcast %"class.sh::TIntermNode"** %466 to <2 x i64>*
  store <2 x i64> %464, <2 x i64>* %467, align 8, !alias.scope !138, !noalias !135
  %468 = or i64 %434, 12
  %469 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %468
  %470 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %468
  %471 = bitcast %"class.sh::TIntermNode"** %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !135
  %473 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %470, i64 2
  %474 = bitcast %"class.sh::TIntermNode"** %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 8, !alias.scope !135
  %476 = bitcast %"class.sh::TIntermNode"** %469 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %476, align 8, !alias.scope !138, !noalias !135
  %477 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 2
  %478 = bitcast %"class.sh::TIntermNode"** %477 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %478, align 8, !alias.scope !138, !noalias !135
  %479 = add i64 %434, 16
  %480 = add i64 %435, -4
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %433, !llvm.loop !140

482:                                              ; preds = %433, %422
  %483 = phi i64 [ 0, %422 ], [ %479, %433 ]
  %484 = icmp eq i64 %429, 0
  br i1 %484, label %501, label %485

485:                                              ; preds = %482, %485
  %486 = phi i64 [ %498, %485 ], [ %483, %482 ]
  %487 = phi i64 [ %499, %485 ], [ %429, %482 ]
  %488 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %486
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %486
  %490 = bitcast %"class.sh::TIntermNode"** %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 8, !alias.scope !135
  %492 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %489, i64 2
  %493 = bitcast %"class.sh::TIntermNode"** %492 to <2 x i64>*
  %494 = load <2 x i64>, <2 x i64>* %493, align 8, !alias.scope !135
  %495 = bitcast %"class.sh::TIntermNode"** %488 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %495, align 8, !alias.scope !138, !noalias !135
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 2
  %497 = bitcast %"class.sh::TIntermNode"** %496 to <2 x i64>*
  store <2 x i64> %494, <2 x i64>* %497, align 8, !alias.scope !138, !noalias !135
  %498 = add i64 %486, 4
  %499 = add i64 %487, -1
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %501, label %485, !llvm.loop !141

501:                                              ; preds = %485, %482
  %502 = icmp eq i64 %408, %423
  br i1 %502, label %574, label %503

503:                                              ; preds = %501, %410, %403
  %504 = phi %"class.sh::TIntermNode"** [ %228, %410 ], [ %228, %403 ], [ %424, %501 ]
  %505 = phi %"class.sh::TIntermNode"** [ %1, %410 ], [ %1, %403 ], [ %425, %501 ]
  %506 = ptrtoint %"class.sh::TIntermNode"** %505 to i64
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %508 = ptrtoint %"class.sh::TIntermNode"** %507 to i64
  %509 = sub i64 %508, %506
  %510 = lshr i64 %509, 3
  %511 = add nuw nsw i64 %510, 1
  %512 = and i64 %511, 7
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %525, label %514

514:                                              ; preds = %503, %514
  %515 = phi %"class.sh::TIntermNode"** [ %522, %514 ], [ %504, %503 ]
  %516 = phi %"class.sh::TIntermNode"** [ %521, %514 ], [ %505, %503 ]
  %517 = phi i64 [ %523, %514 ], [ %512, %503 ]
  %518 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %519 = bitcast %"class.sh::TIntermNode"** %516 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %518, align 8
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 1
  %522 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 1
  %523 = add i64 %517, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %514, !llvm.loop !142

525:                                              ; preds = %514, %503
  %526 = phi %"class.sh::TIntermNode"** [ undef, %503 ], [ %522, %514 ]
  %527 = phi %"class.sh::TIntermNode"** [ %504, %503 ], [ %522, %514 ]
  %528 = phi %"class.sh::TIntermNode"** [ %505, %503 ], [ %521, %514 ]
  %529 = icmp ult i64 %509, 56
  br i1 %529, label %574, label %530

530:                                              ; preds = %525, %530
  %531 = phi %"class.sh::TIntermNode"** [ %572, %530 ], [ %527, %525 ]
  %532 = phi %"class.sh::TIntermNode"** [ %571, %530 ], [ %528, %525 ]
  %533 = bitcast %"class.sh::TIntermNode"** %531 to i64*
  %534 = bitcast %"class.sh::TIntermNode"** %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %533, align 8
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 1
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to i64*
  %539 = bitcast %"class.sh::TIntermNode"** %536 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %538, align 8
  %541 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 2
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 2
  %543 = bitcast %"class.sh::TIntermNode"** %542 to i64*
  %544 = bitcast %"class.sh::TIntermNode"** %541 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %543, align 8
  %546 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 3
  %547 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 3
  %548 = bitcast %"class.sh::TIntermNode"** %547 to i64*
  %549 = bitcast %"class.sh::TIntermNode"** %546 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %548, align 8
  %551 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 4
  %552 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 4
  %553 = bitcast %"class.sh::TIntermNode"** %552 to i64*
  %554 = bitcast %"class.sh::TIntermNode"** %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %553, align 8
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 5
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 5
  %558 = bitcast %"class.sh::TIntermNode"** %557 to i64*
  %559 = bitcast %"class.sh::TIntermNode"** %556 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %558, align 8
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 6
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 6
  %563 = bitcast %"class.sh::TIntermNode"** %562 to i64*
  %564 = bitcast %"class.sh::TIntermNode"** %561 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %563, align 8
  %566 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 7
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 7
  %568 = bitcast %"class.sh::TIntermNode"** %567 to i64*
  %569 = bitcast %"class.sh::TIntermNode"** %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %568, align 8
  %571 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 8
  %573 = icmp eq %"class.sh::TIntermNode"** %571, %401
  br i1 %573, label %574, label %530, !llvm.loop !143

574:                                              ; preds = %525, %530, %501, %399
  %575 = phi %"class.sh::TIntermNode"** [ %228, %399 ], [ %424, %501 ], [ %526, %525 ], [ %572, %530 ]
  %576 = ptrtoint %"class.sh::TIntermNode"** %400 to i64
  %577 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  store i64 %576, i64* %166, align 8
  store i64 %577, i64* %165, align 8
  store i64 %224, i64* %175, align 8
  ret %"class.sh::TIntermNode"** %223

578:                                              ; preds = %16, %160
  ret %"class.sh::TIntermNode"** %1
}

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

declare i64 @_ZN2sh13FindMainIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh15GetSwizzleIndexIiJiEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"*, i32, i32) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %14, label %10

10:                                               ; preds = %3
  store i32 %1, i32* %5, align 4
  %11 = getelementptr inbounds i32, i32* %5, i64 1
  %12 = ptrtoint i32* %11 to i64
  %13 = bitcast i32** %4 to i64*
  store i64 %12, i64* %13, align 8
  br label %208

14:                                               ; preds = %3
  %15 = ptrtoint i32* %5 to i64
  %16 = bitcast i32** %4 to i64*
  %17 = bitcast %"class.sh::TVector.209"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = ashr exact i64 %19, 2
  %21 = add nsw i64 %20, 1
  %22 = icmp ugt i64 %21, 4611686018427387903
  br i1 %22, label %23, label %25

23:                                               ; preds = %14
  %24 = bitcast %"class.sh::TVector.209"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #15
  unreachable

25:                                               ; preds = %14
  %26 = bitcast i32** %6 to i64*
  %27 = sub i64 %9, %18
  %28 = ashr exact i64 %27, 2
  %29 = icmp ult i64 %28, 2305843009213693951
  br i1 %29, label %30, label %35

30:                                               ; preds = %25
  %31 = ashr exact i64 %27, 1
  %32 = icmp ult i64 %31, %21
  %33 = select i1 %32, i64 %21, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %30, %25
  %36 = phi i64 [ %33, %30 ], [ 4611686018427387903, %25 ]
  %37 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %38 = shl i64 %36, 2
  %39 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %37, i64 %38) #9
  %40 = bitcast i8* %39 to i32*
  br label %41

41:                                               ; preds = %35, %30
  %42 = phi i64 [ %36, %35 ], [ 0, %30 ]
  %43 = phi i32* [ %40, %35 ], [ null, %30 ]
  %44 = getelementptr inbounds i32, i32* %43, i64 %20
  %45 = getelementptr inbounds i32, i32* %43, i64 %42
  %46 = ptrtoint i32* %45 to i64
  store i32 %1, i32* %44, align 4
  %47 = getelementptr inbounds i32, i32* %44, i64 1
  %48 = ptrtoint i32* %47 to i64
  %49 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = ptrtoint i32* %50 to i64
  %52 = load i32*, i32** %4, align 8
  %53 = icmp eq i32* %52, %50
  br i1 %53, label %205, label %54

54:                                               ; preds = %41
  %55 = getelementptr i32, i32* %52, i64 -1
  %56 = ptrtoint i32* %55 to i64
  %57 = sub i64 %56, %51
  %58 = lshr i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = icmp ult i64 %59, 8
  br i1 %60, label %153, label %61

61:                                               ; preds = %54
  %62 = getelementptr i32, i32* %52, i64 -1
  %63 = ptrtoint i32* %62 to i64
  %64 = sub i64 %63, %51
  %65 = lshr i64 %64, 2
  %66 = xor i64 %65, -1
  %67 = add nsw i64 %20, %66
  %68 = getelementptr i32, i32* %43, i64 %67
  %69 = xor i64 %65, -1
  %70 = getelementptr i32, i32* %52, i64 %69
  %71 = icmp ult i32* %68, %52
  %72 = icmp ult i32* %70, %44
  %73 = and i1 %71, %72
  br i1 %73, label %153, label %74

74:                                               ; preds = %61
  %75 = and i64 %59, 9223372036854775800
  %76 = sub nsw i64 0, %75
  %77 = getelementptr i32, i32* %44, i64 %76
  %78 = sub nsw i64 0, %75
  %79 = getelementptr i32, i32* %52, i64 %78
  %80 = add nsw i64 %75, -8
  %81 = lshr exact i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %131, label %85

85:                                               ; preds = %74
  %86 = sub nuw nsw i64 %82, %83
  %87 = getelementptr i32, i32* %44, i64 -1
  %88 = getelementptr i32, i32* %52, i64 -1
  %89 = getelementptr i32, i32* %44, i64 -1
  %90 = getelementptr i32, i32* %52, i64 -1
  br label %91

91:                                               ; preds = %91, %85
  %92 = phi i64 [ 0, %85 ], [ %126, %91 ]
  %93 = phi i64 [ %86, %85 ], [ %127, %91 ]
  %94 = sub i64 0, %92
  %95 = sub i64 0, %92
  %96 = getelementptr inbounds i32, i32* %87, i64 %94
  %97 = getelementptr inbounds i32, i32* %88, i64 %95
  %98 = getelementptr inbounds i32, i32* %97, i64 -3
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !144
  %101 = getelementptr inbounds i32, i32* %97, i64 -4
  %102 = getelementptr inbounds i32, i32* %101, i64 -3
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !144
  %105 = getelementptr inbounds i32, i32* %96, i64 -3
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %106, align 4, !alias.scope !147, !noalias !144
  %107 = getelementptr inbounds i32, i32* %96, i64 -4
  %108 = getelementptr inbounds i32, i32* %107, i64 -3
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %109, align 4, !alias.scope !147, !noalias !144
  %110 = sub nuw nsw i64 -8, %92
  %111 = sub nuw nsw i64 -8, %92
  %112 = getelementptr inbounds i32, i32* %89, i64 %110
  %113 = getelementptr inbounds i32, i32* %90, i64 %111
  %114 = getelementptr inbounds i32, i32* %113, i64 -3
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !144
  %117 = getelementptr inbounds i32, i32* %113, i64 -4
  %118 = getelementptr inbounds i32, i32* %117, i64 -3
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !144
  %121 = getelementptr inbounds i32, i32* %112, i64 -3
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %122, align 4, !alias.scope !147, !noalias !144
  %123 = getelementptr inbounds i32, i32* %112, i64 -4
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %125, align 4, !alias.scope !147, !noalias !144
  %126 = add i64 %92, 16
  %127 = add i64 %93, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %91, !llvm.loop !149

129:                                              ; preds = %91
  %130 = sub nuw nsw i64 -16, %92
  br label %131

131:                                              ; preds = %129, %74
  %132 = phi i64 [ 0, %74 ], [ %130, %129 ]
  %133 = icmp eq i64 %83, 0
  br i1 %133, label %151, label %134

134:                                              ; preds = %131
  %135 = getelementptr i32, i32* %44, i64 -1
  %136 = getelementptr i32, i32* %52, i64 -1
  %137 = getelementptr inbounds i32, i32* %135, i64 %132
  %138 = getelementptr inbounds i32, i32* %136, i64 %132
  %139 = getelementptr inbounds i32, i32* %138, i64 -3
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4, !alias.scope !144
  %142 = getelementptr inbounds i32, i32* %138, i64 -4
  %143 = getelementptr inbounds i32, i32* %142, i64 -3
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !alias.scope !144
  %146 = getelementptr inbounds i32, i32* %137, i64 -3
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %147, align 4, !alias.scope !147, !noalias !144
  %148 = getelementptr inbounds i32, i32* %137, i64 -4
  %149 = getelementptr inbounds i32, i32* %148, i64 -3
  %150 = bitcast i32* %149 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %150, align 4, !alias.scope !147, !noalias !144
  br label %151

151:                                              ; preds = %131, %134
  %152 = icmp eq i64 %59, %75
  br i1 %152, label %205, label %153

153:                                              ; preds = %151, %61, %54
  %154 = phi i32* [ %44, %61 ], [ %44, %54 ], [ %77, %151 ]
  %155 = phi i32* [ %52, %61 ], [ %52, %54 ], [ %79, %151 ]
  %156 = getelementptr i32, i32* %155, i64 -1
  %157 = ptrtoint i32* %156 to i64
  %158 = sub i64 %157, %51
  %159 = lshr i64 %158, 2
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %160, 7
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %172, label %163

163:                                              ; preds = %153, %163
  %164 = phi i32* [ %167, %163 ], [ %154, %153 ]
  %165 = phi i32* [ %168, %163 ], [ %155, %153 ]
  %166 = phi i64 [ %170, %163 ], [ %161, %153 ]
  %167 = getelementptr inbounds i32, i32* %164, i64 -1
  %168 = getelementptr inbounds i32, i32* %165, i64 -1
  %169 = load i32, i32* %168, align 4
  store i32 %169, i32* %167, align 4
  %170 = add i64 %166, -1
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %163, !llvm.loop !150

172:                                              ; preds = %163, %153
  %173 = phi i32* [ undef, %153 ], [ %167, %163 ]
  %174 = phi i32* [ %154, %153 ], [ %167, %163 ]
  %175 = phi i32* [ %155, %153 ], [ %168, %163 ]
  %176 = icmp ult i64 %158, 28
  br i1 %176, label %205, label %177

177:                                              ; preds = %172, %177
  %178 = phi i32* [ %201, %177 ], [ %174, %172 ]
  %179 = phi i32* [ %202, %177 ], [ %175, %172 ]
  %180 = getelementptr inbounds i32, i32* %178, i64 -1
  %181 = getelementptr inbounds i32, i32* %179, i64 -1
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* %180, align 4
  %183 = getelementptr inbounds i32, i32* %178, i64 -2
  %184 = getelementptr inbounds i32, i32* %179, i64 -2
  %185 = load i32, i32* %184, align 4
  store i32 %185, i32* %183, align 4
  %186 = getelementptr inbounds i32, i32* %178, i64 -3
  %187 = getelementptr inbounds i32, i32* %179, i64 -3
  %188 = load i32, i32* %187, align 4
  store i32 %188, i32* %186, align 4
  %189 = getelementptr inbounds i32, i32* %178, i64 -4
  %190 = getelementptr inbounds i32, i32* %179, i64 -4
  %191 = load i32, i32* %190, align 4
  store i32 %191, i32* %189, align 4
  %192 = getelementptr inbounds i32, i32* %178, i64 -5
  %193 = getelementptr inbounds i32, i32* %179, i64 -5
  %194 = load i32, i32* %193, align 4
  store i32 %194, i32* %192, align 4
  %195 = getelementptr inbounds i32, i32* %178, i64 -6
  %196 = getelementptr inbounds i32, i32* %179, i64 -6
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %195, align 4
  %198 = getelementptr inbounds i32, i32* %178, i64 -7
  %199 = getelementptr inbounds i32, i32* %179, i64 -7
  %200 = load i32, i32* %199, align 4
  store i32 %200, i32* %198, align 4
  %201 = getelementptr inbounds i32, i32* %178, i64 -8
  %202 = getelementptr inbounds i32, i32* %179, i64 -8
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %201, align 4
  %204 = icmp eq i32* %202, %50
  br i1 %204, label %205, label %177, !llvm.loop !151

205:                                              ; preds = %172, %177, %151, %41
  %206 = phi i32* [ %44, %41 ], [ %77, %151 ], [ %173, %172 ], [ %201, %177 ]
  %207 = ptrtoint i32* %206 to i64
  store i64 %207, i64* %17, align 8
  store i64 %48, i64* %16, align 8
  store i64 %46, i64* %26, align 8
  br label %208

208:                                              ; preds = %10, %205
  tail call void @_ZN2sh15GetSwizzleIndexIiJEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"* %0, i32 %2)
  ret void
}

declare void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.209"* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh15GetSwizzleIndexIiJEEEvPNS_7TVectorIiEET_DpT0_(%"class.sh::TVector.209"*, i32) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  %8 = ptrtoint i32* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i32 %1, i32* %4, align 4
  %10 = getelementptr inbounds i32, i32* %4, i64 1
  %11 = ptrtoint i32* %10 to i64
  %12 = bitcast i32** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %207

13:                                               ; preds = %2
  %14 = ptrtoint i32* %4 to i64
  %15 = bitcast i32** %3 to i64*
  %16 = bitcast %"class.sh::TVector.209"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = ashr exact i64 %18, 2
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 4611686018427387903
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = bitcast %"class.sh::TVector.209"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #15
  unreachable

24:                                               ; preds = %13
  %25 = bitcast i32** %5 to i64*
  %26 = sub i64 %8, %17
  %27 = ashr exact i64 %26, 2
  %28 = icmp ult i64 %27, 2305843009213693951
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = ashr exact i64 %26, 1
  %31 = icmp ult i64 %30, %20
  %32 = select i1 %31, i64 %20, i64 %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %29, %24
  %35 = phi i64 [ %32, %29 ], [ 4611686018427387903, %24 ]
  %36 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %37 = shl i64 %35, 2
  %38 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %36, i64 %37) #9
  %39 = bitcast i8* %38 to i32*
  br label %40

40:                                               ; preds = %34, %29
  %41 = phi i64 [ %35, %34 ], [ 0, %29 ]
  %42 = phi i32* [ %39, %34 ], [ null, %29 ]
  %43 = getelementptr inbounds i32, i32* %42, i64 %19
  %44 = getelementptr inbounds i32, i32* %42, i64 %41
  %45 = ptrtoint i32* %44 to i64
  store i32 %1, i32* %43, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 1
  %47 = ptrtoint i32* %46 to i64
  %48 = getelementptr inbounds %"class.sh::TVector.209", %"class.sh::TVector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = ptrtoint i32* %49 to i64
  %51 = load i32*, i32** %3, align 8
  %52 = icmp eq i32* %51, %49
  br i1 %52, label %204, label %53

53:                                               ; preds = %40
  %54 = getelementptr i32, i32* %51, i64 -1
  %55 = ptrtoint i32* %54 to i64
  %56 = sub i64 %55, %50
  %57 = lshr i64 %56, 2
  %58 = add nuw nsw i64 %57, 1
  %59 = icmp ult i64 %58, 8
  br i1 %59, label %152, label %60

60:                                               ; preds = %53
  %61 = getelementptr i32, i32* %51, i64 -1
  %62 = ptrtoint i32* %61 to i64
  %63 = sub i64 %62, %50
  %64 = lshr i64 %63, 2
  %65 = xor i64 %64, -1
  %66 = add nsw i64 %19, %65
  %67 = getelementptr i32, i32* %42, i64 %66
  %68 = xor i64 %64, -1
  %69 = getelementptr i32, i32* %51, i64 %68
  %70 = icmp ult i32* %67, %51
  %71 = icmp ult i32* %69, %43
  %72 = and i1 %70, %71
  br i1 %72, label %152, label %73

73:                                               ; preds = %60
  %74 = and i64 %58, 9223372036854775800
  %75 = sub nsw i64 0, %74
  %76 = getelementptr i32, i32* %43, i64 %75
  %77 = sub nsw i64 0, %74
  %78 = getelementptr i32, i32* %51, i64 %77
  %79 = add nsw i64 %74, -8
  %80 = lshr exact i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = and i64 %81, 1
  %83 = icmp eq i64 %79, 0
  br i1 %83, label %130, label %84

84:                                               ; preds = %73
  %85 = sub nuw nsw i64 %81, %82
  %86 = getelementptr i32, i32* %43, i64 -1
  %87 = getelementptr i32, i32* %51, i64 -1
  %88 = getelementptr i32, i32* %43, i64 -1
  %89 = getelementptr i32, i32* %51, i64 -1
  br label %90

90:                                               ; preds = %90, %84
  %91 = phi i64 [ 0, %84 ], [ %125, %90 ]
  %92 = phi i64 [ %85, %84 ], [ %126, %90 ]
  %93 = sub i64 0, %91
  %94 = sub i64 0, %91
  %95 = getelementptr inbounds i32, i32* %86, i64 %93
  %96 = getelementptr inbounds i32, i32* %87, i64 %94
  %97 = getelementptr inbounds i32, i32* %96, i64 -3
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !152
  %100 = getelementptr inbounds i32, i32* %96, i64 -4
  %101 = getelementptr inbounds i32, i32* %100, i64 -3
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !152
  %104 = getelementptr inbounds i32, i32* %95, i64 -3
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %105, align 4, !alias.scope !155, !noalias !152
  %106 = getelementptr inbounds i32, i32* %95, i64 -4
  %107 = getelementptr inbounds i32, i32* %106, i64 -3
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %108, align 4, !alias.scope !155, !noalias !152
  %109 = sub nuw nsw i64 -8, %91
  %110 = sub nuw nsw i64 -8, %91
  %111 = getelementptr inbounds i32, i32* %88, i64 %109
  %112 = getelementptr inbounds i32, i32* %89, i64 %110
  %113 = getelementptr inbounds i32, i32* %112, i64 -3
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !152
  %116 = getelementptr inbounds i32, i32* %112, i64 -4
  %117 = getelementptr inbounds i32, i32* %116, i64 -3
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !152
  %120 = getelementptr inbounds i32, i32* %111, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %121, align 4, !alias.scope !155, !noalias !152
  %122 = getelementptr inbounds i32, i32* %111, i64 -4
  %123 = getelementptr inbounds i32, i32* %122, i64 -3
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %124, align 4, !alias.scope !155, !noalias !152
  %125 = add i64 %91, 16
  %126 = add i64 %92, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %90, !llvm.loop !157

128:                                              ; preds = %90
  %129 = sub nuw nsw i64 -16, %91
  br label %130

130:                                              ; preds = %128, %73
  %131 = phi i64 [ 0, %73 ], [ %129, %128 ]
  %132 = icmp eq i64 %82, 0
  br i1 %132, label %150, label %133

133:                                              ; preds = %130
  %134 = getelementptr i32, i32* %43, i64 -1
  %135 = getelementptr i32, i32* %51, i64 -1
  %136 = getelementptr inbounds i32, i32* %134, i64 %131
  %137 = getelementptr inbounds i32, i32* %135, i64 %131
  %138 = getelementptr inbounds i32, i32* %137, i64 -3
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4, !alias.scope !152
  %141 = getelementptr inbounds i32, i32* %137, i64 -4
  %142 = getelementptr inbounds i32, i32* %141, i64 -3
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4, !alias.scope !152
  %145 = getelementptr inbounds i32, i32* %136, i64 -3
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %146, align 4, !alias.scope !155, !noalias !152
  %147 = getelementptr inbounds i32, i32* %136, i64 -4
  %148 = getelementptr inbounds i32, i32* %147, i64 -3
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %149, align 4, !alias.scope !155, !noalias !152
  br label %150

150:                                              ; preds = %130, %133
  %151 = icmp eq i64 %58, %74
  br i1 %151, label %204, label %152

152:                                              ; preds = %150, %60, %53
  %153 = phi i32* [ %43, %60 ], [ %43, %53 ], [ %76, %150 ]
  %154 = phi i32* [ %51, %60 ], [ %51, %53 ], [ %78, %150 ]
  %155 = getelementptr i32, i32* %154, i64 -1
  %156 = ptrtoint i32* %155 to i64
  %157 = sub i64 %156, %50
  %158 = lshr i64 %157, 2
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 7
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %171, label %162

162:                                              ; preds = %152, %162
  %163 = phi i32* [ %166, %162 ], [ %153, %152 ]
  %164 = phi i32* [ %167, %162 ], [ %154, %152 ]
  %165 = phi i64 [ %169, %162 ], [ %160, %152 ]
  %166 = getelementptr inbounds i32, i32* %163, i64 -1
  %167 = getelementptr inbounds i32, i32* %164, i64 -1
  %168 = load i32, i32* %167, align 4
  store i32 %168, i32* %166, align 4
  %169 = add i64 %165, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %162, !llvm.loop !158

171:                                              ; preds = %162, %152
  %172 = phi i32* [ undef, %152 ], [ %166, %162 ]
  %173 = phi i32* [ %153, %152 ], [ %166, %162 ]
  %174 = phi i32* [ %154, %152 ], [ %167, %162 ]
  %175 = icmp ult i64 %157, 28
  br i1 %175, label %204, label %176

176:                                              ; preds = %171, %176
  %177 = phi i32* [ %200, %176 ], [ %173, %171 ]
  %178 = phi i32* [ %201, %176 ], [ %174, %171 ]
  %179 = getelementptr inbounds i32, i32* %177, i64 -1
  %180 = getelementptr inbounds i32, i32* %178, i64 -1
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = getelementptr inbounds i32, i32* %177, i64 -2
  %183 = getelementptr inbounds i32, i32* %178, i64 -2
  %184 = load i32, i32* %183, align 4
  store i32 %184, i32* %182, align 4
  %185 = getelementptr inbounds i32, i32* %177, i64 -3
  %186 = getelementptr inbounds i32, i32* %178, i64 -3
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = getelementptr inbounds i32, i32* %177, i64 -4
  %189 = getelementptr inbounds i32, i32* %178, i64 -4
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %188, align 4
  %191 = getelementptr inbounds i32, i32* %177, i64 -5
  %192 = getelementptr inbounds i32, i32* %178, i64 -5
  %193 = load i32, i32* %192, align 4
  store i32 %193, i32* %191, align 4
  %194 = getelementptr inbounds i32, i32* %177, i64 -6
  %195 = getelementptr inbounds i32, i32* %178, i64 -6
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %194, align 4
  %197 = getelementptr inbounds i32, i32* %177, i64 -7
  %198 = getelementptr inbounds i32, i32* %178, i64 -7
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %197, align 4
  %200 = getelementptr inbounds i32, i32* %177, i64 -8
  %201 = getelementptr inbounds i32, i32* %178, i64 -8
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = icmp eq i32* %201, %49
  br i1 %203, label %204, label %176, !llvm.loop !159

204:                                              ; preds = %171, %176, %150, %40
  %205 = phi i32* [ %43, %40 ], [ %76, %150 ], [ %172, %171 ], [ %200, %176 ]
  %206 = ptrtoint i32* %205 to i64
  store i64 %206, i64* %16, align 8
  store i64 %47, i64* %15, align 8
  store i64 %45, i64* %25, align 8
  br label %207

207:                                              ; preds = %9, %204
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"*, %"class.sh::TVariable"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh15ReplaceVariableEPNS_9TCompilerEPNS_12TIntermBlockEPKNS_9TVariableES6_(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TVariable"*, %"class.sh::TVariable"*) local_unnamed_addr #1

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.45"*) local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZN2sh9SpecConst17getHalfRenderAreaEv(%"class.sh::SpecConst"*) local_unnamed_addr #1

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable11gl_PositionEv() local_unnamed_addr #1

declare %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #1

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable14gl_VertexIndexEv() local_unnamed_addr #1

declare %"class.sh::TVariable"* @_ZN2sh15BuiltInVariable16gl_InstanceIndexEv() local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform25getXfbVerticesPerInstanceEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform19getXfbBufferOffsetsEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare void @_ZN2sh9TFunctionC1EPNS_12TSymbolTableERKNS_15ImmutableStringENS_10SymbolTypeEPKNS_5TTypeEb(%"class.sh::TFunction"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), i8 zeroext, %"class.sh::TType"*, i1 zeroext) unnamed_addr #1

declare void @_ZN2sh9TFunction12addParameterEPKNS_9TVariableE(%"class.sh::TFunction"*, %"class.sh::TVariable"*) local_unnamed_addr #1

declare %"class.sh::TIntermFunctionDefinition"* @_ZN2sh36CreateInternalFunctionDefinitionNodeERKNS_9TFunctionEPNS_12TIntermBlockE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TIntermBlock"*) local_unnamed_addr #1

declare %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform20getXfbActiveUnpausedEv(%"class.sh::DriverUniform"*) local_unnamed_addr #1

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32) local_unnamed_addr #1

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.45"*) local_unnamed_addr #1

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"*, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

declare void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #14

declare dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsEPKc(%"class.sh::ImmutableStringBuilder"*, i8*) local_unnamed_addr #1

declare void @_ZN2sh22ImmutableStringBuilder13appendDecimalERKj(%"class.sh::ImmutableStringBuilder"*, i32* dereferenceable(4)) local_unnamed_addr #1

declare { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"*) local_unnamed_addr #1

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #1

declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #1

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #1

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #1

declare void @_ZNSt3__18ios_base5imbueERKNS_6localeE(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*, %"class.std::__1::locale"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) unnamed_addr #4

; Function Attrs: nounwind
declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16localeaSERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind }
attributes #16 = { builtin nounwind }
attributes #17 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{i32 0, i32 33}
!22 = !{!"branch_weights", i32 2000, i32 1}
!23 = !{!"branch_weights", i32 1, i32 2000}
!24 = !{!25, !27}
!25 = distinct !{!25, !26, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!26 = distinct !{!26, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
!27 = distinct !{!27, !28, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_: argument 0"}
!28 = distinct !{!28, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_"}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !9}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !9}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!55 = distinct !{!55, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZNK2sh9SpecConst21getSpecConstUsageBitsEv: argument 0"}
!58 = distinct !{!58, !"_ZNK2sh9SpecConst21getSpecConstUsageBitsEv"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN2sh16InitializeStreamINSt3__119basic_ostringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v: argument 0"}
!61 = distinct !{!61, !"_ZN2sh16InitializeStreamINSt3__119basic_ostringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE: argument 0"}
!64 = distinct !{!64, !"_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE: argument 0"}
!67 = distinct !{!67, !"_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE"}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !9}
!74 = distinct !{!74, !11}
!75 = distinct !{!75, !9}
!76 = !{!77}
!77 = distinct !{!77, !78}
!78 = distinct !{!78, !"LVerDomain"}
!79 = !{!80}
!80 = distinct !{!80, !78}
!81 = distinct !{!81, !9}
!82 = distinct !{!82, !11}
!83 = distinct !{!83, !9}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !9}
!90 = distinct !{!90, !11}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !9}
!93 = !{!94}
!94 = distinct !{!94, !95}
!95 = distinct !{!95, !"LVerDomain"}
!96 = !{!97}
!97 = distinct !{!97, !95}
!98 = distinct !{!98, !9}
!99 = distinct !{!99, !11}
!100 = distinct !{!100, !9}
!101 = distinct !{!101, !11}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !9}
!108 = distinct !{!108, !11}
!109 = distinct !{!109, !9}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !9}
!116 = distinct !{!116, !11}
!117 = distinct !{!117, !11}
!118 = distinct !{!118, !9}
!119 = !{!120}
!120 = distinct !{!120, !121}
!121 = distinct !{!121, !"LVerDomain"}
!122 = !{!123}
!123 = distinct !{!123, !121}
!124 = distinct !{!124, !9}
!125 = distinct !{!125, !11}
!126 = distinct !{!126, !9}
!127 = !{!128}
!128 = distinct !{!128, !129}
!129 = distinct !{!129, !"LVerDomain"}
!130 = !{!131}
!131 = distinct !{!131, !129}
!132 = distinct !{!132, !9}
!133 = distinct !{!133, !11}
!134 = distinct !{!134, !9}
!135 = !{!136}
!136 = distinct !{!136, !137}
!137 = distinct !{!137, !"LVerDomain"}
!138 = !{!139}
!139 = distinct !{!139, !137}
!140 = distinct !{!140, !9}
!141 = distinct !{!141, !11}
!142 = distinct !{!142, !11}
!143 = distinct !{!143, !9}
!144 = !{!145}
!145 = distinct !{!145, !146}
!146 = distinct !{!146, !"LVerDomain"}
!147 = !{!148}
!148 = distinct !{!148, !146}
!149 = distinct !{!149, !9}
!150 = distinct !{!150, !11}
!151 = distinct !{!151, !9}
!152 = !{!153}
!153 = distinct !{!153, !154}
!154 = distinct !{!154, !"LVerDomain"}
!155 = !{!156}
!156 = distinct !{!156, !154}
!157 = distinct !{!157, !9}
!158 = distinct !{!158, !11}
!159 = distinct !{!159, !9}
