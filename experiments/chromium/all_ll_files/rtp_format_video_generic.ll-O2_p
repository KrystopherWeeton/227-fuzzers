; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format_video_generic.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format_video_generic.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RtpPacketizerGeneric" = type { %"class.webrtc::RtpPacketizer", [3 x i8], i64, %"class.rtc::ArrayView", %"class.std::__1::vector", %"class.std::__1::__wrap_iter" }
%"class.webrtc::RtpPacketizer" = type { i32 (...)** }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__wrap_iter" = type { i32* }
%"struct.webrtc::RTPVideoHeader" = type { %"class.absl::optional", i32, i16, i16, i32, i8, i8, i8, i8, i8, i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::VideoSendTiming", %"class.absl::optional.16", %"class.absl::optional.26", %"class.absl::variant" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" }
%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" = type { i64, i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.4", %"class.absl::InlinedVector.11", %"class.std::__1::bitset" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.3" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.3" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.4" = type { %"class.absl::inlined_vector_internal::Storage.5" }
%"class.absl::inlined_vector_internal::Storage.5" = type { %"class.absl::container_internal::CompressedTuple.6", %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" }
%"class.absl::container_internal::CompressedTuple.6" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.7" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.7" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.3" }
%"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"class.absl::InlinedVector.11" = type { %"class.absl::inlined_vector_internal::Storage.12" }
%"class.absl::inlined_vector_internal::Storage.12" = type { %"class.absl::container_internal::CompressedTuple.13", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.13" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.14" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.14" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.3" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.21" }
%"class.absl::optional.21" = type { %"class.absl::optional_internal::optional_data.22" }
%"class.absl::optional_internal::optional_data.22" = type { %"class.absl::optional_internal::optional_data_base.23" }
%"class.absl::optional_internal::optional_data_base.23" = type { %"class.absl::optional_internal::optional_data_dtor_base.24" }
%"class.absl::optional_internal::optional_data_dtor_base.24" = type { i8, %union.anon.25 }
%union.anon.25 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { i16 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::Union", i64 }
%"union.absl::variant_internal::Union" = type { %"union.absl::variant_internal::Union.31" }
%"union.absl::variant_internal::Union.31" = type { %"union.absl::variant_internal::Union.32" }
%"union.absl::variant_internal::Union.32" = type { %"struct.webrtc::RTPVideoHeaderVP9" }
%"struct.webrtc::RTPVideoHeaderVP9" = type { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [3 x i16], i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }
%"struct.webrtc::RtpPacketizer::PayloadSizeLimits" = type { i32, i32, i32, i32 }
%"class.webrtc::RtpPacketToSend" = type <{ %"class.webrtc::RtpPacket", i64, %"class.absl::optional.48", i8, i8, %"class.absl::optional.26", [2 x i8], %"class.rtc::scoped_refptr.53", i8, i8, i8, i8, [4 x i8] }>
%"class.webrtc::RtpPacket" = type { i8, i8, i8, i16, i32, i32, i64, i64, %"class.webrtc::RtpHeaderExtensionMap", %"class.std::__1::vector.37", i64, %"class.rtc::CopyOnWriteBuffer" }
%"class.webrtc::RtpHeaderExtensionMap" = type { [21 x i8], i8 }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.webrtc::RtpPacket::ExtensionInfo"*, %"struct.webrtc::RtpPacket::ExtensionInfo"*, %"class.std::__1::__compressed_pair.39" }
%"struct.webrtc::RtpPacket::ExtensionInfo" = type { i8, i8, i16 }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.webrtc::RtpPacket::ExtensionInfo"* }
%"class.rtc::CopyOnWriteBuffer" = type { %"class.rtc::scoped_refptr", i64, i64 }
%"class.rtc::scoped_refptr" = type { %"class.rtc::FinalRefCountedObject"* }
%"class.rtc::FinalRefCountedObject" = type <{ %"class.rtc::BufferT", %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i8* }
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { i64 }
%"class.rtc::scoped_refptr.53" = type { %"class.rtc::RefCountedBase"* }
%"class.rtc::RefCountedBase" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = comdat any

@_ZTVN6webrtc20RtpPacketizerGenericE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::RtpPacketizerGeneric"*)* @_ZN6webrtc20RtpPacketizerGenericD2Ev to i8*), i8* bitcast (void (%"class.webrtc::RtpPacketizerGeneric"*)* @_ZN6webrtc20RtpPacketizerGenericD0Ev to i8*), i8* bitcast (i64 (%"class.webrtc::RtpPacketizerGeneric"*)* @_ZNK6webrtc20RtpPacketizerGeneric10NumPacketsEv to i8*), i8* bitcast (i1 (%"class.webrtc::RtpPacketizerGeneric"*, %"class.webrtc::RtpPacketToSend"*)* @_ZN6webrtc20RtpPacketizerGeneric10NextPacketEPNS_15RtpPacketToSendE to i8*)] }, align 8
@.str = private unnamed_addr constant [77 x i8] c"../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format_video_generic.cc\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"out_ptr\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t = linkonce_odr hidden constant [1 x i8] zeroinitializer, comdat, align 1

@_ZN6webrtc20RtpPacketizerGenericC1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_14RTPVideoHeaderE = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketizerGeneric"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeader"*), void (%"class.webrtc::RtpPacketizerGeneric"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeader"*)* @_ZN6webrtc20RtpPacketizerGenericC2EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_14RTPVideoHeaderE
@_ZN6webrtc20RtpPacketizerGenericC1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsE = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketizerGeneric"*, i8*, i64, i64, i64), void (%"class.webrtc::RtpPacketizerGeneric"*, i8*, i64, i64, i64)* @_ZN6webrtc20RtpPacketizerGenericC2EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsE
@_ZN6webrtc20RtpPacketizerGenericD1Ev = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketizerGeneric"*), void (%"class.webrtc::RtpPacketizerGeneric"*)* @_ZN6webrtc20RtpPacketizerGenericD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20RtpPacketizerGenericC2EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_14RTPVideoHeaderE(%"class.webrtc::RtpPacketizerGeneric"* nocapture, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeader"* nocapture readonly dereferenceable(1928)) unnamed_addr #0 align 2 {
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"*
  %9 = alloca %"class.std::__1::vector", align 16
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %3, i64* %10, align 8
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc20RtpPacketizerGenericE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 0
  %14 = icmp eq i64 %2, 0
  %15 = select i1 %14, i8* null, i8* %1
  store i8* %15, i8** %13, align 8
  %16 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 1
  store i64 %2, i64* %16, align 8
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4
  %18 = bitcast %"class.std::__1::vector"* %17 to i8*
  %19 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 5
  %20 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 2
  %21 = bitcast %"class.std::__1::vector"* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 32, i1 false)
  store i64 1, i64* %20, align 8
  %22 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 0
  store i8 2, i8* %22, align 8
  %23 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 3
  %26 = select i1 %25, i8 3, i8 2
  store i8 %26, i8* %22, align 8
  %27 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 4
  %30 = trunc i64 %3 to i32
  br i1 %29, label %31, label %42

31:                                               ; preds = %6
  %32 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15
  %33 = bitcast %"class.absl::variant"* %32 to i16*
  %34 = load i16, i16* %33, align 2
  %35 = or i8 %26, 4
  store i8 %35, i8* %22, align 8
  %36 = lshr i16 %34, 8
  %37 = trunc i16 %36 to i8
  %38 = and i8 %37, 127
  %39 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 1
  store i8 %38, i8* %39, align 1
  %40 = trunc i16 %34 to i8
  %41 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 2
  store i8 %40, i8* %41, align 2
  store i64 3, i64* %20, align 8
  br label %42

42:                                               ; preds = %6, %31
  %43 = phi i32 [ 1, %6 ], [ 3, %31 ]
  %44 = bitcast { i64, i64 }* %7 to i32*
  %45 = sub i32 %30, %43
  store i32 %45, i32* %44, align 8
  %46 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #7
  %47 = trunc i64 %2 to i32
  call void @_ZN6webrtc13RtpPacketizer17SplitAboutEquallyEiRKNS0_17PayloadSizeLimitsE(%"class.std::__1::vector"* nonnull sret %9, i32 %47, %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* nonnull dereferenceable(16) %8) #7
  %48 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = icmp eq i32* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %42
  %52 = ptrtoint i32* %49 to i64
  %53 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 1
  %54 = bitcast i32** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = bitcast i32* %49 to i8*
  call void @_ZdlPv(i8* %55) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #7
  br label %56

56:                                               ; preds = %51, %42
  %57 = bitcast %"class.std::__1::vector"* %9 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 16
  %59 = bitcast %"class.std::__1::vector"* %17 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %61 = bitcast i32** %60 to i64*
  %62 = load i64, i64* %61, align 16
  %63 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %64 = bitcast i32** %63 to i64*
  store i64 %62, i64* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #7
  %65 = bitcast %"class.std::__1::__wrap_iter"* %19 to i64*
  %66 = extractelement <2 x i64> %58, i32 0
  store i64 %66, i64* %65, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc20RtpPacketizerGeneric11BuildHeaderERKNS_14RTPVideoHeaderE(%"class.webrtc::RtpPacketizerGeneric"* nocapture, %"struct.webrtc::RTPVideoHeader"* readonly dereferenceable(1928)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 2
  store i64 1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 0
  store i8 2, i8* %4, align 8
  %5 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 3
  %8 = select i1 %7, i8 3, i8 2
  store i8 %8, i8* %4, align 8
  %9 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15
  %10 = icmp eq %"class.absl::variant"* %9, null
  br i1 %10, label %25, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 4
  br i1 %14, label %15, label %25

15:                                               ; preds = %11
  %16 = bitcast %"class.absl::variant"* %9 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = or i8 %8, 4
  store i8 %18, i8* %4, align 8
  %19 = lshr i16 %17, 8
  %20 = trunc i16 %19 to i8
  %21 = and i8 %20, 127
  %22 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 1
  store i8 %21, i8* %22, align 1
  %23 = trunc i16 %17 to i8
  %24 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 2
  store i8 %23, i8* %24, align 2
  store i64 3, i64* %3, align 8
  br label %25

25:                                               ; preds = %11, %2, %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN6webrtc13RtpPacketizer17SplitAboutEquallyEiRKNS0_17PayloadSizeLimitsE(%"class.std::__1::vector"* sret, i32, %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20RtpPacketizerGenericC2EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsE(%"class.webrtc::RtpPacketizerGeneric"* nocapture, i8*, i64, i64, i64) unnamed_addr #0 align 2 {
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"*
  %8 = alloca %"class.std::__1::vector", align 16
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %3, i64* %9, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc20RtpPacketizerGenericE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 2
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 0
  %14 = icmp eq i64 %2, 0
  %15 = select i1 %14, i8* null, i8* %1
  store i8* %15, i8** %13, align 8
  %16 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 1
  store i64 %2, i64* %16, align 8
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4
  %18 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 5
  %19 = bitcast %"class.std::__1::vector"* %8 to i8*
  %20 = bitcast %"class.std::__1::vector"* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #7
  %21 = trunc i64 %2 to i32
  call void @_ZN6webrtc13RtpPacketizer17SplitAboutEquallyEiRKNS0_17PayloadSizeLimitsE(%"class.std::__1::vector"* nonnull sret %8, i32 %21, %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* nonnull dereferenceable(16) %7) #7
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = icmp eq i32* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %5
  %26 = bitcast %"class.std::__1::vector"* %17 to i8*
  %27 = ptrtoint i32* %23 to i64
  %28 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 1
  %29 = bitcast i32** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = bitcast i32* %23 to i8*
  call void @_ZdlPv(i8* %30) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #7
  br label %31

31:                                               ; preds = %25, %5
  %32 = bitcast %"class.std::__1::vector"* %8 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 16
  %34 = bitcast %"class.std::__1::vector"* %17 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %34, align 8
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %36 = bitcast i32** %35 to i64*
  %37 = load i64, i64* %36, align 16
  %38 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %39 = bitcast i32** %38 to i64*
  store i64 %37, i64* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #7
  %40 = bitcast %"class.std::__1::__wrap_iter"* %18 to i64*
  %41 = extractelement <2 x i64> %33, i32 0
  store i64 %41, i64* %40, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20RtpPacketizerGenericD2Ev(%"class.webrtc::RtpPacketizerGeneric"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc20RtpPacketizerGenericE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20RtpPacketizerGenericD0Ev(%"class.webrtc::RtpPacketizerGeneric"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc20RtpPacketizerGenericE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.webrtc::RtpPacketizerGeneric"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc20RtpPacketizerGeneric10NumPacketsEv(%"class.webrtc::RtpPacketizerGeneric"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 1
  %3 = bitcast i32** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 5
  %6 = bitcast %"class.std::__1::__wrap_iter"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %4, %7
  %9 = ashr exact i64 %8, 2
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtc20RtpPacketizerGeneric10NextPacketEPNS_15RtpPacketToSendE(%"class.webrtc::RtpPacketizerGeneric"* nocapture, %"class.webrtc::RtpPacketToSend"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 4, i32 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 5, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, %4
  br i1 %7, label %49, label %8

8:                                                ; preds = %2
  %9 = load i32, i32* %6, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %"class.webrtc::RtpPacketToSend", %"class.webrtc::RtpPacketToSend"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %10
  %15 = tail call i8* @_ZN6webrtc9RtpPacket15AllocatePayloadEm(%"class.webrtc::RtpPacket"* %11, i64 %14) #7
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %8
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, i64 0, i64 0)) #9
  unreachable

18:                                               ; preds = %8
  %19 = load i64, i64* %12, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 1, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %15, i8* align 8 %22, i64 %19, i1 false)
  %23 = load i8, i8* %22, align 8
  %24 = and i8 %23, -3
  store i8 %24, i8* %22, align 8
  %25 = load i64, i64* %12, align 8
  br label %26

26:                                               ; preds = %18, %21
  %27 = phi i64 [ 0, %18 ], [ %25, %21 ]
  %28 = getelementptr inbounds i8, i8* %15, i64 %27
  %29 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %30, i64 %10, i1 false)
  %31 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp ugt i64 %32, %10
  br i1 %33, label %34, label %42

34:                                               ; preds = %26
  %35 = load i8*, i8** %29, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %10
  %37 = sub i64 %32, %10
  %38 = icmp ult i64 %37, %32
  %39 = select i1 %38, i64 %37, i64 %32
  %40 = icmp eq i64 %39, 0
  %41 = select i1 %40, i8* null, i8* %36
  br label %42

42:                                               ; preds = %26, %34
  %43 = phi i64 [ %39, %34 ], [ 0, %26 ]
  %44 = phi i8* [ %41, %34 ], [ null, %26 ]
  %45 = getelementptr inbounds %"class.webrtc::RtpPacketizerGeneric", %"class.webrtc::RtpPacketizerGeneric"* %0, i64 0, i32 3, i32 0, i32 0
  store i8* %44, i8** %45, align 8
  store i64 %43, i64* %31, align 8
  %46 = load i32*, i32** %5, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 1
  store i32* %47, i32** %5, align 8
  %48 = icmp eq i64 %43, 0
  tail call void @_ZN6webrtc9RtpPacket9SetMarkerEb(%"class.webrtc::RtpPacket"* %11, i1 zeroext %48) #7
  br label %49

49:                                               ; preds = %2, %42
  %50 = phi i1 [ true, %42 ], [ false, %2 ]
  ret i1 %50
}

declare i8* @_ZN6webrtc9RtpPacket15AllocatePayloadEm(%"class.webrtc::RtpPacket"*, i64) local_unnamed_addr #3

declare void @_ZN6webrtc9RtpPacket9SetMarkerEb(%"class.webrtc::RtpPacket"*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
