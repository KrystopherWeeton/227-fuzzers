; ModuleID = '../../third_party/ffmpeg/libavcodec/rdft.c'
source_filename = "../../third_party/ffmpeg/libavcodec/rdft.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.RDFTContext = type { i32, i32, i32, float*, float*, i32, %struct.FFTContext, void (%struct.RDFTContext*, float*)* }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }

@ff_cos_tabs = external local_unnamed_addr constant [18 x float*], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_rdft_init(%struct.RDFTContext*, i32, i32) local_unnamed_addr #0 {
  %4 = shl i32 1, %1
  %5 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = icmp eq i32 %2, 3
  %7 = or i32 %2, 2
  %8 = icmp eq i32 %7, 3
  %9 = zext i1 %8 to i32
  %10 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 1
  store i32 %9, i32* %10, align 4
  %11 = or i32 %2, 1
  %12 = icmp eq i32 %11, 3
  %13 = select i1 %12, i32 1, i32 -1
  %14 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 2
  store i32 %13, i32* %14, align 8
  %15 = icmp eq i32 %2, 0
  %16 = or i1 %6, %15
  %17 = zext i1 %16 to i32
  %18 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 5
  store i32 %17, i32* %18, align 8
  %19 = add i32 %1, -4
  %20 = icmp ugt i32 %19, 12
  br i1 %20, label %42, label %21

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6
  %23 = add nsw i32 %1, -1
  %24 = add i32 %2, -1
  %25 = icmp ult i32 %24, 2
  %26 = zext i1 %25 to i32
  %27 = tail call i32 @ff_fft_init(%struct.FFTContext* %22, i32 %23, i32 %26) #3
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %42, label %29

29:                                               ; preds = %21
  tail call void @ff_init_ff_cos_tabs(i32 %1) #3
  %30 = sext i32 %1 to i64
  %31 = getelementptr inbounds [18 x float*], [18 x float*]* @ff_cos_tabs, i64 0, i64 %30
  %32 = bitcast float** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 3
  %35 = bitcast float** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = inttoptr i64 %33 to float*
  %37 = ashr i32 %4, 2
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds float, float* %36, i64 %38
  %40 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 4
  store float* %39, float** %40, align 8
  %41 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 7
  store void (%struct.RDFTContext*, float*)* @rdft_calc_c, void (%struct.RDFTContext*, float*)** %41, align 8
  br label %42

42:                                               ; preds = %21, %3, %29
  %43 = phi i32 [ 0, %29 ], [ -22, %3 ], [ %27, %21 ]
  ret i32 %43
}

declare i32 @ff_fft_init(%struct.FFTContext*, i32, i32) local_unnamed_addr #1

declare void @ff_init_ff_cos_tabs(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @rdft_calc_c(%struct.RDFTContext*, float*) #2 {
  %3 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to double
  %9 = fsub nsz double 5.000000e-01, %8
  %10 = fptrunc double %9 to float
  %11 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 3
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 4
  %14 = load float*, float** %13, align 8
  %15 = icmp eq i32 %7, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6
  %18 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6, i32 8
  %19 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %18, align 8
  %20 = bitcast float* %1 to %struct.FFTComplex*
  tail call void %19(%struct.FFTContext* %17, %struct.FFTComplex* %20) #3
  %21 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6, i32 9
  %22 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %21, align 8
  tail call void %22(%struct.FFTContext* %17, %struct.FFTComplex* %20) #3
  br label %23

23:                                               ; preds = %2, %16
  %24 = load float, float* %1, align 4
  %25 = getelementptr inbounds float, float* %1, i64 1
  %26 = load float, float* %25, align 4
  %27 = fadd nsz float %24, %26
  store float %27, float* %1, align 4
  %28 = fsub nsz float %24, %26
  store float %28, float* %25, align 4
  %29 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 5
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  %32 = ashr i32 %5, 2
  %33 = icmp sgt i32 %5, 7
  br i1 %31, label %38, label %34

34:                                               ; preds = %23
  br i1 %33, label %35, label %118

35:                                               ; preds = %34
  %36 = sext i32 %5 to i64
  %37 = sext i32 %32 to i64
  br label %42

38:                                               ; preds = %23
  br i1 %33, label %39, label %118

39:                                               ; preds = %38
  %40 = sext i32 %5 to i64
  %41 = sext i32 %32 to i64
  br label %80

42:                                               ; preds = %35, %42
  %43 = phi i64 [ 1, %35 ], [ %78, %42 ]
  %44 = shl nuw nsw i64 %43, 1
  %45 = sub nsw i64 %36, %44
  %46 = getelementptr inbounds float, float* %1, i64 %44
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds float, float* %1, i64 %45
  %49 = load float, float* %48, align 4
  %50 = fadd nsz float %47, %49
  %51 = fmul nsz float %50, 5.000000e-01
  %52 = fsub nsz float %49, %47
  %53 = fmul nsz float %52, %10
  %54 = or i64 %44, 1
  %55 = getelementptr inbounds float, float* %1, i64 %54
  %56 = load float, float* %55, align 4
  %57 = add nsw i64 %45, 1
  %58 = getelementptr inbounds float, float* %1, i64 %57
  %59 = load float, float* %58, align 4
  %60 = fsub nsz float %56, %59
  %61 = fmul nsz float %60, 5.000000e-01
  %62 = fadd nsz float %56, %59
  %63 = fmul nsz float %62, %10
  %64 = getelementptr inbounds float, float* %12, i64 %43
  %65 = load float, float* %64, align 4
  %66 = fmul nsz float %65, %63
  %67 = getelementptr inbounds float, float* %14, i64 %43
  %68 = load float, float* %67, align 4
  %69 = fmul nsz float %53, %68
  %70 = fadd nsz float %66, %69
  %71 = fmul nsz float %53, %65
  %72 = fmul nsz float %63, %68
  %73 = fsub nsz float %71, %72
  %74 = fadd nsz float %51, %70
  store float %74, float* %46, align 4
  %75 = fadd nsz float %61, %73
  store float %75, float* %55, align 4
  %76 = fsub nsz float %51, %70
  store float %76, float* %48, align 4
  %77 = fsub nsz float %73, %61
  store float %77, float* %58, align 4
  %78 = add nuw nsw i64 %43, 1
  %79 = icmp slt i64 %78, %37
  br i1 %79, label %42, label %118

80:                                               ; preds = %39, %80
  %81 = phi i64 [ 1, %39 ], [ %116, %80 ]
  %82 = shl nuw nsw i64 %81, 1
  %83 = sub nsw i64 %40, %82
  %84 = getelementptr inbounds float, float* %1, i64 %82
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds float, float* %1, i64 %83
  %87 = load float, float* %86, align 4
  %88 = fadd nsz float %85, %87
  %89 = fmul nsz float %88, 5.000000e-01
  %90 = fsub nsz float %87, %85
  %91 = fmul nsz float %90, %10
  %92 = or i64 %82, 1
  %93 = getelementptr inbounds float, float* %1, i64 %92
  %94 = load float, float* %93, align 4
  %95 = add nsw i64 %83, 1
  %96 = getelementptr inbounds float, float* %1, i64 %95
  %97 = load float, float* %96, align 4
  %98 = fsub nsz float %94, %97
  %99 = fmul nsz float %98, 5.000000e-01
  %100 = fadd nsz float %94, %97
  %101 = fmul nsz float %100, %10
  %102 = getelementptr inbounds float, float* %12, i64 %81
  %103 = load float, float* %102, align 4
  %104 = fmul nsz float %103, %101
  %105 = getelementptr inbounds float, float* %14, i64 %81
  %106 = load float, float* %105, align 4
  %107 = fmul nsz float %91, %106
  %108 = fsub nsz float %104, %107
  %109 = fmul nsz float %91, %103
  %110 = fmul nsz float %101, %106
  %111 = fadd nsz float %109, %110
  %112 = fadd nsz float %89, %108
  store float %112, float* %84, align 4
  %113 = fadd nsz float %99, %111
  store float %113, float* %93, align 4
  %114 = fsub nsz float %89, %108
  store float %114, float* %86, align 4
  %115 = fsub nsz float %111, %99
  store float %115, float* %96, align 4
  %116 = add nuw nsw i64 %81, 1
  %117 = icmp slt i64 %116, %41
  br i1 %117, label %80, label %118

118:                                              ; preds = %42, %80, %34, %38
  %119 = phi i64 [ 1, %38 ], [ 1, %34 ], [ %116, %80 ], [ %78, %42 ]
  %120 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 2
  %121 = load i32, i32* %120, align 8
  %122 = sitofp i32 %121 to float
  %123 = shl i64 %119, 1
  %124 = and i64 %123, 4294967294
  %125 = or i64 %124, 1
  %126 = getelementptr inbounds float, float* %1, i64 %125
  %127 = load float, float* %126, align 4
  %128 = fmul nsz float %127, %122
  store float %128, float* %126, align 4
  %129 = load i32, i32* %6, align 4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %142, label %131

131:                                              ; preds = %118
  %132 = load float, float* %1, align 4
  %133 = fmul nsz float %132, 5.000000e-01
  store float %133, float* %1, align 4
  %134 = load float, float* %25, align 4
  %135 = fmul nsz float %134, 5.000000e-01
  store float %135, float* %25, align 4
  %136 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6
  %137 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6, i32 8
  %138 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %137, align 8
  %139 = bitcast float* %1 to %struct.FFTComplex*
  tail call void %138(%struct.FFTContext* %136, %struct.FFTComplex* %139) #3
  %140 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6, i32 9
  %141 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %140, align 8
  tail call void %141(%struct.FFTContext* %136, %struct.FFTComplex* %139) #3
  br label %142

142:                                              ; preds = %118, %131
  ret void
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_rdft_end(%struct.RDFTContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %0, i64 0, i32 6
  tail call void @ff_fft_end(%struct.FFTContext* %2) #3
  ret void
}

declare void @ff_fft_end(%struct.FFTContext*) local_unnamed_addr #1

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
