; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/string_view.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/string_view.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN3WTF12g_empty_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN3WTF10StringImpl12empty16_bit_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@.str.2 = private unnamed_addr constant [18 x i8] c"StackBackingStore\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

@_ZN3WTF10StringViewC1EPKDs = hidden unnamed_addr alias void (%"class.WTF::StringView"*, i16*), void (%"class.WTF::StringView"*, i16*)* @_ZN3WTF10StringViewC2EPKDs

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10StringViewC2EPKDs(%"class.WTF::StringView"* nocapture, i16*) unnamed_addr #0 align 2 {
  %3 = icmp eq i16* %1, null
  br i1 %3, label %15, label %4

4:                                                ; preds = %2, %4
  %5 = phi i64 [ %9, %4 ], [ 0, %2 ]
  %6 = getelementptr inbounds i16, i16* %1, i64 %5
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 0
  %9 = add i64 %5, 1
  br i1 %8, label %10, label %4

10:                                               ; preds = %4
  %11 = icmp ult i64 %5, 4294967296
  br i1 %11, label %13, label %12, !prof !2

12:                                               ; preds = %10
  tail call void @llvm.trap() #8
  unreachable

13:                                               ; preds = %10
  %14 = trunc i64 %5 to i32
  br label %15

15:                                               ; preds = %2, %13
  %16 = phi i32 [ %14, %13 ], [ 0, %2 ]
  %17 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E to i64*), align 8
  %18 = bitcast %"class.WTF::StringView"* %0 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %20 = bitcast i8** %19 to i16**
  store i16* %1, i16** %20, align 8
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %16, i32* %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF10StringView8ToStringEv(%"class.WTF::StringView"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %9

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %8, align 8
  br label %76

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %36

13:                                               ; preds = %9
  %14 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %17, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %18, label %76, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %76

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i33
  %28 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %27, i33 1) #8
  %29 = extractvalue { i33, i1 } %28, 1
  %30 = extractvalue { i33, i1 } %28, 0
  %31 = icmp slt i33 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %33, label %34, !prof !3

33:                                               ; preds = %24
  tail call void @llvm.trap() #8
  unreachable

34:                                               ; preds = %24
  %35 = trunc i33 %30 to i32
  store i32 %35, i32* %25, align 4
  br label %76

36:                                               ; preds = %9
  %37 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %41 = icmp eq i8* %4, %40
  br i1 %41, label %42, label %66

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = icmp ne i32 %11, %44
  %46 = icmp eq %"class.WTF::StringImpl"* %38, null
  %47 = or i1 %46, %45
  br i1 %47, label %66, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %38, %"class.WTF::StringImpl"** %49, align 8
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %76

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i33
  %58 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #8
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !3

63:                                               ; preds = %54
  tail call void @llvm.trap() #8
  unreachable

64:                                               ; preds = %54
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %55, align 4
  br label %76

66:                                               ; preds = %42, %36
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %66
  call void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"* nonnull %2, i8* nonnull %4, i32 %11) #8
  br label %76

72:                                               ; preds = %66
  %73 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* nonnull %6, i32 %11) #8
  %74 = ptrtoint %"class.WTF::StringImpl"* %73 to i64
  %75 = bitcast %"class.WTF::String"* %2 to i64*
  store i64 %74, i64* %75, align 8
  br label %76

76:                                               ; preds = %64, %48, %34, %19, %13, %72, %71, %7
  %77 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  ret %"class.WTF::StringImpl"* %78
}

declare void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"*, i8*, i32) unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF10StringView14ToAtomicStringEv(%"class.WTF::StringView"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::AtomicString", align 8
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %30

7:                                                ; preds = %1
  %8 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %103, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %103

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #8
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !3

27:                                               ; preds = %18
  tail call void @llvm.trap() #8
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %103

30:                                               ; preds = %1
  %31 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %57

34:                                               ; preds = %30
  %35 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %36 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %39, label %103, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %103

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #8
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !3

54:                                               ; preds = %45
  tail call void @llvm.trap() #8
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %103

57:                                               ; preds = %30
  %58 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 1
  %61 = bitcast %"class.WTF::StringImpl"* %60 to i8*
  %62 = icmp eq i8* %4, %61
  br i1 %62, label %63, label %96

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp ne i32 %32, %65
  %67 = icmp eq %"class.WTF::StringImpl"* %59, null
  %68 = or i1 %67, %66
  br i1 %68, label %96, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load atomic i32, i32* %70 acquire, align 4
  %72 = and i32 %71, 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %90, label %74

74:                                               ; preds = %69
  %75 = load atomic i32, i32* %70 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %92

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i33
  %82 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #8
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !3

87:                                               ; preds = %78
  tail call void @llvm.trap() #8
  unreachable

88:                                               ; preds = %78
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %79, align 4
  br label %92

90:                                               ; preds = %69
  %91 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %59) #8
  br label %92

92:                                               ; preds = %74, %88, %90
  %93 = phi %"class.WTF::StringImpl"* [ %91, %90 ], [ %59, %74 ], [ %59, %88 ]
  %94 = ptrtoint %"class.WTF::StringImpl"* %93 to i64
  %95 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  store i64 %94, i64* %95, align 8
  br label %103

96:                                               ; preds = %63, %57
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %102, label %101

101:                                              ; preds = %96
  call void @_ZN3WTF12AtomicStringC1EPKhj(%"class.WTF::AtomicString"* nonnull %2, i8* nonnull %4, i32 %32) #8
  br label %103

102:                                              ; preds = %96
  call void @_ZN3WTF12AtomicStringC1EPKDsj(%"class.WTF::AtomicString"* nonnull %2, i16* nonnull %6, i32 %32) #8
  br label %103

103:                                              ; preds = %55, %40, %34, %28, %13, %7, %92, %102, %101
  %104 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  ret %"class.WTF::StringImpl"* %105
}

declare void @_ZN3WTF12AtomicStringC1EPKhj(%"class.WTF::AtomicString"*, i8*, i32) unnamed_addr #1

declare void @_ZN3WTF12AtomicStringC1EPKDsj(%"class.WTF::AtomicString"*, i16*, i32) unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nocapture readonly dereferenceable(24), %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  br i1 %5, label %9, label %11

9:                                                ; preds = %2
  %10 = icmp ne i8* %8, null
  br label %14

11:                                               ; preds = %2
  %12 = icmp eq i8* %8, null
  %13 = bitcast i8* %8 to i16*
  br i1 %12, label %14, label %17

14:                                               ; preds = %9, %11
  %15 = phi i1 [ %10, %9 ], [ false, %11 ]
  %16 = xor i1 %5, %15
  br label %95

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %95

23:                                               ; preds = %17
  %24 = icmp eq i8* %4, %8
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  br i1 %24, label %30, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  br label %42

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 1
  %34 = icmp ne i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 1
  %40 = icmp ne i32 %39, 0
  %41 = xor i1 %34, %40
  br i1 %41, label %42, label %95

42:                                               ; preds = %27, %30
  %43 = phi %"class.WTF::StringImpl"* [ %29, %27 ], [ %36, %30 ]
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 1
  %51 = icmp ne i32 %50, 0
  br i1 %47, label %73, label %52

52:                                               ; preds = %42
  br i1 %51, label %53, label %57

53:                                               ; preds = %52
  %54 = zext i32 %19 to i64
  %55 = tail call i32 @bcmp(i8* nonnull %4, i8* nonnull %8, i64 %54) #8
  %56 = icmp eq i32 %55, 0
  br label %95

57:                                               ; preds = %52
  %58 = icmp eq i32 %19, 0
  br i1 %58, label %95, label %59

59:                                               ; preds = %57
  %60 = zext i32 %19 to i64
  br label %63

61:                                               ; preds = %63
  %62 = icmp eq i64 %72, %60
  br i1 %62, label %95, label %63

63:                                               ; preds = %61, %59
  %64 = phi i64 [ 0, %59 ], [ %72, %61 ]
  %65 = getelementptr inbounds i8, i8* %4, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i16, i16* %13, i64 %64
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = icmp eq i32 %67, %70
  %72 = add nuw nsw i64 %64, 1
  br i1 %71, label %61, label %95

73:                                               ; preds = %42
  br i1 %51, label %74, label %90

74:                                               ; preds = %73
  %75 = icmp eq i32 %19, 0
  br i1 %75, label %95, label %76

76:                                               ; preds = %74
  %77 = zext i32 %19 to i64
  br label %80

78:                                               ; preds = %80
  %79 = icmp eq i64 %89, %77
  br i1 %79, label %95, label %80

80:                                               ; preds = %78, %76
  %81 = phi i64 [ 0, %76 ], [ %89, %78 ]
  %82 = getelementptr inbounds i8, i8* %8, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i16, i16* %6, i64 %81
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = icmp eq i32 %84, %87
  %89 = add nuw nsw i64 %81, 1
  br i1 %88, label %78, label %95

90:                                               ; preds = %73
  %91 = zext i32 %19 to i64
  %92 = shl nuw nsw i64 %91, 1
  %93 = tail call i32 @bcmp(i8* nonnull %4, i8* nonnull %8, i64 %92) #8
  %94 = icmp eq i32 %93, 0
  br label %95

95:                                               ; preds = %63, %61, %80, %78, %74, %57, %30, %17, %90, %53, %14
  %96 = phi i1 [ %16, %14 ], [ %56, %53 ], [ %94, %90 ], [ false, %17 ], [ true, %30 ], [ true, %57 ], [ true, %74 ], [ true, %78 ], [ false, %80 ], [ false, %63 ], [ true, %61 ]
  ret i1 %96
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF37DeprecatedEqualIgnoringCaseAndNullityERKNS_10StringViewES2_(%"class.WTF::StringView"* nocapture readonly dereferenceable(24), %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %43

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp ne i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %14, label %32, label %22

22:                                               ; preds = %8
  %23 = load i8*, i8** %21, align 8
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %20, label %25, label %28

25:                                               ; preds = %22
  %26 = load i8*, i8** %24, align 8
  %27 = tail call zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKhS1_j(i8* %23, i8* %26, i32 %4) #8
  br label %43

28:                                               ; preds = %22
  %29 = bitcast i8** %24 to i16**
  %30 = load i16*, i16** %29, align 8
  %31 = tail call zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsPKhj(i16* %30, i8* %23, i32 %4) #8
  br label %43

32:                                               ; preds = %8
  %33 = bitcast i8** %21 to i16**
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %20, label %36, label %39

36:                                               ; preds = %32
  %37 = load i8*, i8** %35, align 8
  %38 = tail call zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsPKhj(i16* %34, i8* %37, i32 %4) #8
  br label %43

39:                                               ; preds = %32
  %40 = bitcast i8** %35 to i16**
  %41 = load i16*, i16** %40, align 8
  %42 = tail call zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsS1_j(i16* %34, i16* %41, i32 %4) #8
  br label %43

43:                                               ; preds = %2, %39, %36, %28, %25
  %44 = phi i1 [ %27, %25 ], [ %31, %28 ], [ %38, %36 ], [ %42, %39 ], [ false, %2 ]
  ret i1 %44
}

declare zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKhS1_j(i8*, i8*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsPKhj(i16*, i8*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsS1_j(i16*, i16*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseERKNS_10StringViewES2_(%"class.WTF::StringView"* nocapture readonly dereferenceable(24), %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  br i1 %5, label %8, label %10

8:                                                ; preds = %2
  %9 = icmp ne i8* %7, null
  br label %12

10:                                               ; preds = %2
  %11 = icmp eq i8* %7, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %8, %10
  %13 = phi i1 [ %9, %8 ], [ false, %10 ]
  %14 = xor i1 %5, %13
  br label %17

15:                                               ; preds = %10
  %16 = tail call zeroext i1 @_ZN3WTF37DeprecatedEqualIgnoringCaseAndNullityERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24) %0, %"class.WTF::StringView"* dereferenceable(24) %1)
  br label %17

17:                                               ; preds = %15, %12
  %18 = phi i1 [ %14, %12 ], [ %16, %15 ]
  ret i1 %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseERKNS_10StringViewES2_(%"class.WTF::StringView"* nocapture readonly dereferenceable(24), %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  br i1 %5, label %9, label %11

9:                                                ; preds = %2
  %10 = icmp ne i8* %8, null
  br label %14

11:                                               ; preds = %2
  %12 = icmp eq i8* %8, null
  %13 = bitcast i8* %8 to i16*
  br i1 %12, label %14, label %17

14:                                               ; preds = %9, %11
  %15 = phi i1 [ %10, %9 ], [ false, %11 ]
  %16 = xor i1 %5, %15
  br label %143

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %143

23:                                               ; preds = %17
  %24 = icmp eq i8* %4, %8
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  br i1 %24, label %30, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  br label %42

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 1
  %34 = icmp ne i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 1
  %40 = icmp ne i32 %39, 0
  %41 = xor i1 %34, %40
  br i1 %41, label %42, label %143

42:                                               ; preds = %27, %30
  %43 = phi %"class.WTF::StringImpl"* [ %29, %27 ], [ %36, %30 ]
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 1
  %51 = icmp ne i32 %50, 0
  %52 = icmp eq i32 %19, 0
  br i1 %47, label %96, label %53

53:                                               ; preds = %42
  br i1 %51, label %54, label %73

54:                                               ; preds = %53
  br i1 %52, label %143, label %55

55:                                               ; preds = %54
  %56 = zext i32 %19 to i64
  br label %59

57:                                               ; preds = %59
  %58 = icmp eq i64 %72, %56
  br i1 %58, label %143, label %59

59:                                               ; preds = %57, %55
  %60 = phi i64 [ 0, %55 ], [ %72, %57 ]
  %61 = getelementptr inbounds i8, i8* %4, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds i8, i8* %8, i64 %60
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %65, %70
  %72 = add nuw nsw i64 %60, 1
  br i1 %71, label %57, label %143

73:                                               ; preds = %53
  br i1 %52, label %143, label %74

74:                                               ; preds = %73
  %75 = zext i32 %19 to i64
  br label %78

76:                                               ; preds = %78
  %77 = icmp eq i64 %95, %75
  br i1 %77, label %143, label %78

78:                                               ; preds = %76, %74
  %79 = phi i64 [ 0, %74 ], [ %95, %76 ]
  %80 = getelementptr inbounds i8, i8* %4, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i16, i16* %13, i64 %79
  %87 = load i16, i16* %86, align 2
  %88 = add i16 %87, -65
  %89 = icmp ult i16 %88, 26
  %90 = zext i1 %89 to i16
  %91 = shl nuw nsw i16 %90, 5
  %92 = or i16 %91, %87
  %93 = zext i16 %92 to i32
  %94 = icmp eq i32 %85, %93
  %95 = add nuw nsw i64 %79, 1
  br i1 %94, label %76, label %143

96:                                               ; preds = %42
  br i1 %51, label %97, label %120

97:                                               ; preds = %96
  br i1 %52, label %143, label %98

98:                                               ; preds = %97
  %99 = zext i32 %19 to i64
  br label %102

100:                                              ; preds = %102
  %101 = icmp eq i64 %119, %99
  br i1 %101, label %143, label %102

102:                                              ; preds = %100, %98
  %103 = phi i64 [ 0, %98 ], [ %119, %100 ]
  %104 = getelementptr inbounds i16, i16* %6, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = add i16 %105, -65
  %107 = icmp ult i16 %106, 26
  %108 = zext i1 %107 to i16
  %109 = shl nuw nsw i16 %108, 5
  %110 = or i16 %109, %105
  %111 = zext i16 %110 to i32
  %112 = getelementptr inbounds i8, i8* %8, i64 %103
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i64
  %115 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = icmp eq i32 %111, %117
  %119 = add nuw nsw i64 %103, 1
  br i1 %118, label %100, label %143

120:                                              ; preds = %96
  br i1 %52, label %143, label %121

121:                                              ; preds = %120
  %122 = zext i32 %19 to i64
  br label %125

123:                                              ; preds = %125
  %124 = icmp eq i64 %142, %122
  br i1 %124, label %143, label %125

125:                                              ; preds = %123, %121
  %126 = phi i64 [ 0, %121 ], [ %142, %123 ]
  %127 = getelementptr inbounds i16, i16* %6, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = add i16 %128, -65
  %130 = icmp ult i16 %129, 26
  %131 = zext i1 %130 to i16
  %132 = shl nuw nsw i16 %131, 5
  %133 = or i16 %132, %128
  %134 = getelementptr inbounds i16, i16* %13, i64 %126
  %135 = load i16, i16* %134, align 2
  %136 = add i16 %135, -65
  %137 = icmp ult i16 %136, 26
  %138 = zext i1 %137 to i16
  %139 = shl nuw nsw i16 %138, 5
  %140 = or i16 %139, %135
  %141 = icmp eq i16 %133, %140
  %142 = add nuw nsw i64 %126, 1
  br i1 %141, label %123, label %143

143:                                              ; preds = %78, %76, %59, %57, %125, %123, %102, %100, %120, %97, %73, %54, %30, %17, %14
  %144 = phi i1 [ %16, %14 ], [ false, %17 ], [ true, %30 ], [ true, %54 ], [ true, %73 ], [ true, %97 ], [ true, %120 ], [ false, %102 ], [ true, %100 ], [ false, %125 ], [ true, %123 ], [ false, %59 ], [ true, %57 ], [ false, %78 ], [ true, %76 ]
  ret i1 %144
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF10StringView26LowerASCIIMaybeUsingBufferERNS0_17StackBackingStoreE(%"class.WTF::StringView"* noalias nocapture sret, %"class.WTF::StringView"* nocapture readonly, %"class.WTF::StringView::StackBackingStore"* dereferenceable(136)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !noalias !4
  %6 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8, !noalias !4
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4, !noalias !4
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %11, label %170, label %13

13:                                               ; preds = %3
  %14 = load i8*, i8** %12, align 8, !noalias !4
  %15 = icmp eq i32 %5, 0
  br i1 %15, label %110, label %16

16:                                               ; preds = %13
  %17 = zext i32 %5 to i64
  %18 = icmp ult i32 %5, 32
  br i1 %18, label %95, label %19

19:                                               ; preds = %16
  %20 = and i64 %17, 4294967264
  %21 = add nsw i64 %20, -32
  %22 = lshr exact i64 %21, 5
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %61, label %26

26:                                               ; preds = %19
  %27 = sub nuw nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %58, %28 ]
  %30 = phi <16 x i1> [ zeroinitializer, %26 ], [ %56, %28 ]
  %31 = phi <16 x i1> [ zeroinitializer, %26 ], [ %57, %28 ]
  %32 = phi i64 [ %27, %26 ], [ %59, %28 ]
  %33 = getelementptr inbounds i8, i8* %14, i64 %29
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !noalias !4
  %36 = getelementptr inbounds i8, i8* %33, i64 16
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1, !noalias !4
  %39 = add <16 x i8> %35, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %40 = add <16 x i8> %38, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %41 = icmp ult <16 x i8> %39, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %42 = icmp ult <16 x i8> %40, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %43 = or <16 x i1> %30, %41
  %44 = or <16 x i1> %31, %42
  %45 = or i64 %29, 32
  %46 = getelementptr inbounds i8, i8* %14, i64 %45
  %47 = bitcast i8* %46 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1, !noalias !4
  %49 = getelementptr inbounds i8, i8* %46, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !noalias !4
  %52 = add <16 x i8> %48, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %53 = add <16 x i8> %51, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %54 = icmp ult <16 x i8> %52, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %55 = icmp ult <16 x i8> %53, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %56 = or <16 x i1> %43, %54
  %57 = or <16 x i1> %44, %55
  %58 = add i64 %29, 64
  %59 = add i64 %32, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %28, !llvm.loop !7

61:                                               ; preds = %28, %19
  %62 = phi <16 x i1> [ undef, %19 ], [ %56, %28 ]
  %63 = phi <16 x i1> [ undef, %19 ], [ %57, %28 ]
  %64 = phi i64 [ 0, %19 ], [ %58, %28 ]
  %65 = phi <16 x i1> [ zeroinitializer, %19 ], [ %56, %28 ]
  %66 = phi <16 x i1> [ zeroinitializer, %19 ], [ %57, %28 ]
  %67 = icmp eq i64 %24, 0
  br i1 %67, label %81, label %68

68:                                               ; preds = %61
  %69 = getelementptr inbounds i8, i8* %14, i64 %64
  %70 = getelementptr inbounds i8, i8* %69, i64 16
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !noalias !4
  %73 = add <16 x i8> %72, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %74 = icmp ult <16 x i8> %73, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %75 = or <16 x i1> %66, %74
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !noalias !4
  %78 = add <16 x i8> %77, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %79 = icmp ult <16 x i8> %78, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %80 = or <16 x i1> %65, %79
  br label %81

81:                                               ; preds = %61, %68
  %82 = phi <16 x i1> [ %62, %61 ], [ %80, %68 ]
  %83 = phi <16 x i1> [ %63, %61 ], [ %75, %68 ]
  %84 = or <16 x i1> %83, %82
  %85 = shufflevector <16 x i1> %84, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = or <16 x i1> %84, %85
  %87 = shufflevector <16 x i1> %86, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = or <16 x i1> %86, %87
  %89 = shufflevector <16 x i1> %88, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = or <16 x i1> %88, %89
  %91 = shufflevector <16 x i1> %90, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = or <16 x i1> %90, %91
  %93 = extractelement <16 x i1> %92, i32 0
  %94 = icmp eq i64 %20, %17
  br i1 %94, label %108, label %95

95:                                               ; preds = %81, %16
  %96 = phi i64 [ 0, %16 ], [ %20, %81 ]
  %97 = phi i1 [ false, %16 ], [ %93, %81 ]
  br label %98

98:                                               ; preds = %95, %98
  %99 = phi i64 [ %106, %98 ], [ %96, %95 ]
  %100 = phi i1 [ %105, %98 ], [ %97, %95 ]
  %101 = getelementptr inbounds i8, i8* %14, i64 %99
  %102 = load i8, i8* %101, align 1, !noalias !4
  %103 = add i8 %102, -65
  %104 = icmp ult i8 %103, 26
  %105 = or i1 %100, %104
  %106 = add nuw nsw i64 %99, 1
  %107 = icmp eq i64 %106, %17
  br i1 %107, label %108, label %98, !llvm.loop !9

108:                                              ; preds = %98, %81
  %109 = phi i1 [ %93, %81 ], [ %105, %98 ]
  br i1 %109, label %113, label %110

110:                                              ; preds = %108, %13
  %111 = bitcast %"class.WTF::StringView"* %1 to i8*
  %112 = bitcast %"class.WTF::StringView"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %111, i64 24, i1 false) #8
  br label %337

113:                                              ; preds = %108
  %114 = icmp ugt i32 %5, 128
  br i1 %114, label %115, label %123, !prof !3

115:                                              ; preds = %113
  %116 = sext i32 %5 to i64
  %117 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %116, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0)) #8, !noalias !11
  %118 = getelementptr inbounds %"class.WTF::StringView::StackBackingStore", %"class.WTF::StringView::StackBackingStore"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8, !noalias !11
  store i8* %117, i8** %118, align 8, !noalias !11
  %120 = icmp eq i8* %119, null
  br i1 %120, label %125, label %121

121:                                              ; preds = %115
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %119) #8, !noalias !11
  %122 = load i8*, i8** %118, align 8, !noalias !11
  br label %125

123:                                              ; preds = %113
  %124 = bitcast %"class.WTF::StringView::StackBackingStore"* %2 to i8*
  br label %125

125:                                              ; preds = %123, %121, %115
  %126 = phi i8* [ %124, %123 ], [ %117, %115 ], [ %122, %121 ]
  %127 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8, !noalias !11
  %128 = and i64 %17, 1
  %129 = icmp eq i32 %5, 1
  br i1 %129, label %132, label %130

130:                                              ; preds = %125
  %131 = sub nsw i64 %17, %128
  br label %149

132:                                              ; preds = %149, %125
  %133 = phi i64 [ 0, %125 ], [ %167, %149 ]
  %134 = icmp eq i64 %128, 0
  br i1 %134, label %143, label %135

135:                                              ; preds = %132
  %136 = load i8*, i8** %12, align 8, !noalias !4
  %137 = getelementptr inbounds i8, i8* %136, i64 %133
  %138 = load i8, i8* %137, align 1, !noalias !4
  %139 = zext i8 %138 to i64
  %140 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1, !noalias !4
  %142 = getelementptr inbounds i8, i8* %126, i64 %133
  store i8 %141, i8* %142, align 1, !noalias !4
  br label %143

143:                                              ; preds = %132, %135
  %144 = bitcast %"class.WTF::StringView"* %0 to i64*
  store i64 %127, i64* %144, align 8, !alias.scope !4
  %145 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  store i8* %126, i8** %145, align 8, !alias.scope !4
  %146 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %5, i32* %146, align 8, !alias.scope !4
  %147 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 3, i64 0
  %148 = bitcast i8* %147 to i32*
  store i32 -1431655766, i32* %148, align 4, !alias.scope !4
  br label %337

149:                                              ; preds = %149, %130
  %150 = phi i64 [ 0, %130 ], [ %167, %149 ]
  %151 = phi i64 [ %131, %130 ], [ %168, %149 ]
  %152 = load i8*, i8** %12, align 8, !noalias !4
  %153 = getelementptr inbounds i8, i8* %152, i64 %150
  %154 = load i8, i8* %153, align 1, !noalias !4
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1, !noalias !4
  %158 = getelementptr inbounds i8, i8* %126, i64 %150
  store i8 %157, i8* %158, align 1, !noalias !4
  %159 = or i64 %150, 1
  %160 = load i8*, i8** %12, align 8, !noalias !4
  %161 = getelementptr inbounds i8, i8* %160, i64 %159
  %162 = load i8, i8* %161, align 1, !noalias !4
  %163 = zext i8 %162 to i64
  %164 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %163
  %165 = load i8, i8* %164, align 1, !noalias !4
  %166 = getelementptr inbounds i8, i8* %126, i64 %159
  store i8 %165, i8* %166, align 1, !noalias !4
  %167 = add nuw nsw i64 %150, 2
  %168 = add i64 %151, -2
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %132, label %149

170:                                              ; preds = %3
  %171 = bitcast i8** %12 to i16**
  %172 = load i16*, i16** %171, align 8, !noalias !4
  %173 = icmp eq i32 %5, 0
  br i1 %173, label %266, label %174

174:                                              ; preds = %170
  %175 = zext i32 %5 to i64
  %176 = icmp ult i32 %5, 16
  br i1 %176, label %251, label %177

177:                                              ; preds = %174
  %178 = and i64 %175, 4294967280
  %179 = add nsw i64 %178, -16
  %180 = lshr exact i64 %179, 4
  %181 = add nuw nsw i64 %180, 1
  %182 = and i64 %181, 1
  %183 = icmp eq i64 %179, 0
  br i1 %183, label %219, label %184

184:                                              ; preds = %177
  %185 = sub nuw nsw i64 %181, %182
  br label %186

186:                                              ; preds = %186, %184
  %187 = phi i64 [ 0, %184 ], [ %216, %186 ]
  %188 = phi <8 x i1> [ zeroinitializer, %184 ], [ %214, %186 ]
  %189 = phi <8 x i1> [ zeroinitializer, %184 ], [ %215, %186 ]
  %190 = phi i64 [ %185, %184 ], [ %217, %186 ]
  %191 = getelementptr inbounds i16, i16* %172, i64 %187
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 2, !noalias !4
  %194 = getelementptr inbounds i16, i16* %191, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2, !noalias !4
  %197 = add <8 x i16> %193, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %198 = add <8 x i16> %196, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %199 = icmp ult <8 x i16> %197, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %200 = icmp ult <8 x i16> %198, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %201 = or <8 x i1> %188, %199
  %202 = or <8 x i1> %189, %200
  %203 = or i64 %187, 16
  %204 = getelementptr inbounds i16, i16* %172, i64 %203
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !noalias !4
  %207 = getelementptr inbounds i16, i16* %204, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !noalias !4
  %210 = add <8 x i16> %206, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %211 = add <8 x i16> %209, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %212 = icmp ult <8 x i16> %210, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %213 = icmp ult <8 x i16> %211, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %214 = or <8 x i1> %201, %212
  %215 = or <8 x i1> %202, %213
  %216 = add i64 %187, 32
  %217 = add i64 %190, -2
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %186, !llvm.loop !14

219:                                              ; preds = %186, %177
  %220 = phi <8 x i1> [ undef, %177 ], [ %214, %186 ]
  %221 = phi <8 x i1> [ undef, %177 ], [ %215, %186 ]
  %222 = phi i64 [ 0, %177 ], [ %216, %186 ]
  %223 = phi <8 x i1> [ zeroinitializer, %177 ], [ %214, %186 ]
  %224 = phi <8 x i1> [ zeroinitializer, %177 ], [ %215, %186 ]
  %225 = icmp eq i64 %182, 0
  br i1 %225, label %239, label %226

226:                                              ; preds = %219
  %227 = getelementptr inbounds i16, i16* %172, i64 %222
  %228 = getelementptr inbounds i16, i16* %227, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !noalias !4
  %231 = add <8 x i16> %230, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %232 = icmp ult <8 x i16> %231, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %233 = or <8 x i1> %224, %232
  %234 = bitcast i16* %227 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 2, !noalias !4
  %236 = add <8 x i16> %235, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %237 = icmp ult <8 x i16> %236, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %238 = or <8 x i1> %223, %237
  br label %239

239:                                              ; preds = %219, %226
  %240 = phi <8 x i1> [ %220, %219 ], [ %238, %226 ]
  %241 = phi <8 x i1> [ %221, %219 ], [ %233, %226 ]
  %242 = or <8 x i1> %241, %240
  %243 = shufflevector <8 x i1> %242, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = or <8 x i1> %242, %243
  %245 = shufflevector <8 x i1> %244, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %246 = or <8 x i1> %244, %245
  %247 = shufflevector <8 x i1> %246, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %248 = or <8 x i1> %246, %247
  %249 = extractelement <8 x i1> %248, i32 0
  %250 = icmp eq i64 %178, %175
  br i1 %250, label %264, label %251

251:                                              ; preds = %239, %174
  %252 = phi i64 [ 0, %174 ], [ %178, %239 ]
  %253 = phi i1 [ false, %174 ], [ %249, %239 ]
  br label %254

254:                                              ; preds = %251, %254
  %255 = phi i64 [ %262, %254 ], [ %252, %251 ]
  %256 = phi i1 [ %261, %254 ], [ %253, %251 ]
  %257 = getelementptr inbounds i16, i16* %172, i64 %255
  %258 = load i16, i16* %257, align 2, !noalias !4
  %259 = add i16 %258, -65
  %260 = icmp ult i16 %259, 26
  %261 = or i1 %256, %260
  %262 = add nuw nsw i64 %255, 1
  %263 = icmp eq i64 %262, %175
  br i1 %263, label %264, label %254, !llvm.loop !15

264:                                              ; preds = %254, %239
  %265 = phi i1 [ %249, %239 ], [ %261, %254 ]
  br i1 %265, label %269, label %266

266:                                              ; preds = %264, %170
  %267 = bitcast %"class.WTF::StringView"* %1 to i8*
  %268 = bitcast %"class.WTF::StringView"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %268, i8* align 8 %267, i64 24, i1 false) #8
  br label %337

269:                                              ; preds = %264
  %270 = sext i32 %5 to i64
  %271 = shl nsw i64 %270, 1
  %272 = icmp ugt i64 %271, 128
  br i1 %272, label %273, label %283, !prof !3

273:                                              ; preds = %269
  %274 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %271, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0)) #8, !noalias !16
  %275 = getelementptr inbounds %"class.WTF::StringView::StackBackingStore", %"class.WTF::StringView::StackBackingStore"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %276 = load i8*, i8** %275, align 8, !noalias !16
  store i8* %274, i8** %275, align 8, !noalias !16
  %277 = icmp eq i8* %276, null
  br i1 %277, label %278, label %280

278:                                              ; preds = %273
  %279 = bitcast i8* %274 to i16*
  br label %285

280:                                              ; preds = %273
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %276) #8, !noalias !16
  %281 = bitcast i8** %275 to i16**
  %282 = load i16*, i16** %281, align 8, !noalias !16
  br label %285

283:                                              ; preds = %269
  %284 = getelementptr inbounds %"class.WTF::StringView::StackBackingStore", %"class.WTF::StringView::StackBackingStore"* %2, i64 0, i32 0, i64 0
  br label %285

285:                                              ; preds = %283, %280, %278
  %286 = phi i16* [ %284, %283 ], [ %279, %278 ], [ %282, %280 ]
  %287 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E to i64*), align 8, !noalias !16
  %288 = and i64 %175, 1
  %289 = icmp eq i32 %5, 1
  br i1 %289, label %292, label %290

290:                                              ; preds = %285
  %291 = sub nsw i64 %175, %288
  br label %312

292:                                              ; preds = %312, %285
  %293 = phi i64 [ 0, %285 ], [ %334, %312 ]
  %294 = icmp eq i64 %288, 0
  br i1 %294, label %305, label %295

295:                                              ; preds = %292
  %296 = load i16*, i16** %171, align 8, !noalias !4
  %297 = getelementptr inbounds i16, i16* %296, i64 %293
  %298 = load i16, i16* %297, align 2, !noalias !4
  %299 = add i16 %298, -65
  %300 = icmp ult i16 %299, 26
  %301 = zext i1 %300 to i16
  %302 = shl nuw nsw i16 %301, 5
  %303 = or i16 %302, %298
  %304 = getelementptr inbounds i16, i16* %286, i64 %293
  store i16 %303, i16* %304, align 2, !noalias !4
  br label %305

305:                                              ; preds = %292, %295
  %306 = bitcast %"class.WTF::StringView"* %0 to i64*
  store i64 %287, i64* %306, align 8, !alias.scope !4
  %307 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %308 = bitcast i8** %307 to i16**
  store i16* %286, i16** %308, align 8, !alias.scope !4
  %309 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %5, i32* %309, align 8, !alias.scope !4
  %310 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 3, i64 0
  %311 = bitcast i8* %310 to i32*
  store i32 -1431655766, i32* %311, align 4, !alias.scope !4
  br label %337

312:                                              ; preds = %312, %290
  %313 = phi i64 [ 0, %290 ], [ %334, %312 ]
  %314 = phi i64 [ %291, %290 ], [ %335, %312 ]
  %315 = load i16*, i16** %171, align 8, !noalias !4
  %316 = getelementptr inbounds i16, i16* %315, i64 %313
  %317 = load i16, i16* %316, align 2, !noalias !4
  %318 = add i16 %317, -65
  %319 = icmp ult i16 %318, 26
  %320 = zext i1 %319 to i16
  %321 = shl nuw nsw i16 %320, 5
  %322 = or i16 %321, %317
  %323 = getelementptr inbounds i16, i16* %286, i64 %313
  store i16 %322, i16* %323, align 2, !noalias !4
  %324 = or i64 %313, 1
  %325 = load i16*, i16** %171, align 8, !noalias !4
  %326 = getelementptr inbounds i16, i16* %325, i64 %324
  %327 = load i16, i16* %326, align 2, !noalias !4
  %328 = add i16 %327, -65
  %329 = icmp ult i16 %328, 26
  %330 = zext i1 %329 to i16
  %331 = shl nuw nsw i16 %330, 5
  %332 = or i16 %331, %327
  %333 = getelementptr inbounds i16, i16* %286, i64 %324
  store i16 %332, i16* %333, align 2, !noalias !4
  %334 = add nuw nsw i64 %313, 2
  %335 = add i64 %314, -2
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %292, label %312

337:                                              ; preds = %110, %143, %266, %305
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

declare i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN3WTF16ConvertASCIICaseINS_10StringViewENS_14LowerConverterENS_12_GLOBAL__N_124StackStringViewAllocatorEEENT1_16ResultStringTypeERKT_OT0_OS5_: argument 0"}
!6 = distinct !{!6, !"_ZN3WTF16ConvertASCIICaseINS_10StringViewENS_14LowerConverterENS_12_GLOBAL__N_124StackStringViewAllocatorEEENT1_16ResultStringTypeERKT_OT0_OS5_"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10, !8}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = !{!12, !5}
!12 = distinct !{!12, !13, !"_ZN3WTF12_GLOBAL__N_124StackStringViewAllocator5AllocIhEENS_10StringViewEjRPT_: argument 0"}
!13 = distinct !{!13, !"_ZN3WTF12_GLOBAL__N_124StackStringViewAllocator5AllocIhEENS_10StringViewEjRPT_"}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !10, !8}
!16 = !{!17, !5}
!17 = distinct !{!17, !18, !"_ZN3WTF12_GLOBAL__N_124StackStringViewAllocator5AllocIDsEENS_10StringViewEjRPT_: argument 0"}
!18 = distinct !{!18, !"_ZN3WTF12_GLOBAL__N_124StackStringViewAllocator5AllocIDsEENS_10StringViewEjRPT_"}
