; ModuleID = '../../third_party/blink/renderer/core/css/css_computed_style_declaration.cc'
source_filename = "../../third_party/blink/renderer/core/css/css_computed_style_declaration.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<WTF::Vector<const blink::CSSProperty *, 0, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<WTF::Vector<const blink::CSSProperty *, 0, WTF::PartitionAllocator> >::InstanceStorage" = type { [16 x i8] }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::StaticSingleton.2015" = type { %"class.WTF::StaticSingleton<WTF::HashSet<blink::CSSPropertyID, WTF::IntHash<blink::CSSPropertyID>, WTF::HashTraits<blink::CSSPropertyID>, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<WTF::HashSet<blink::CSSPropertyID, WTF::IntHash<blink::CSSPropertyID>, WTF::HashTraits<blink::CSSPropertyID>, WTF::PartitionAllocator> >::InstanceStorage" = type { [24 x i8] }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.263", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.263" = type { %"class.base::RefCounted.264" }
%"class.base::RefCounted.264" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.267" }
%"class.blink::HeapHashMap.267" = type { %"class.WTF::HashMap.270" }
%"class.WTF::HashMap.270" = type { %"class.WTF::HashTable.271" }
%"class.WTF::HashTable.271" = type <{ %"struct.WTF::KeyValuePair.273"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.273" = type { %"class.blink::WeakMember.274", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.274" = type { %"class.blink::MemberBase.275" }
%"class.blink::MemberBase.275" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.276", i32, [4 x i8], %"class.std::__1::unique_ptr.414", %"class.std::__1::unique_ptr.414", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.424", %"class.std::__1::unique_ptr.430", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.442", %"class.std::__1::unique_ptr.448", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.455", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.276" = type { %"class.std::__1::__compressed_pair.277" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.279", %"class.std::__1::unique_ptr.285", %"class.std::__1::unique_ptr.291", %"class.std::__1::unique_ptr.297", %"class.std::__1::unique_ptr.303", %"class.std::__1::unique_ptr.309", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.327", %"class.std::__1::unique_ptr.327", %"class.std::__1::unique_ptr.334", %"class.std::__1::unique_ptr.341", %"class.std::__1::unique_ptr.348", %"class.std::__1::unique_ptr.348", %"class.std::__1::unique_ptr.355", %"class.std::__1::unique_ptr.362", %"class.std::__1::unique_ptr.369", %"class.std::__1::unique_ptr.394", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.279" = type { %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.281" }
%"struct.std::__1::__compressed_pair_elem.281" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.285" = type { %"class.std::__1::__compressed_pair.286" }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.291" = type { %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.297" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.303" = type { %"class.std::__1::__compressed_pair.304" }
%"class.std::__1::__compressed_pair.304" = type { %"struct.std::__1::__compressed_pair_elem.305" }
%"struct.std::__1::__compressed_pair_elem.305" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.309" = type { %"class.std::__1::__compressed_pair.310" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.312" = type { %"struct.std::__1::__atomic_base.313" }
%"struct.std::__1::__atomic_base.313" = type { %"struct.std::__1::__atomic_base.314" }
%"struct.std::__1::__atomic_base.314" = type { %"struct.std::__1::__cxx_atomic_impl.315" }
%"struct.std::__1::__cxx_atomic_impl.315" = type { %"struct.std::__1::__cxx_atomic_base_impl.316" }
%"struct.std::__1::__cxx_atomic_base_impl.316" = type { i64 }
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.blink::Worklist.323"* }
%"class.blink::Worklist.323" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.327" = type { %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.329" }
%"struct.std::__1::__compressed_pair_elem.329" = type { %"class.blink::Worklist.330"* }
%"class.blink::Worklist.330" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.blink::Worklist.337"* }
%"class.blink::Worklist.337" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.341" = type { %"class.std::__1::__compressed_pair.342" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"class.blink::Worklist.344"* }
%"class.blink::Worklist.344" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.348" = type { %"class.std::__1::__compressed_pair.349" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.350" }
%"struct.std::__1::__compressed_pair_elem.350" = type { %"class.blink::Worklist.351"* }
%"class.blink::Worklist.351" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.355" = type { %"class.std::__1::__compressed_pair.356" }
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.357" }
%"struct.std::__1::__compressed_pair_elem.357" = type { %"class.blink::Worklist.358"* }
%"class.blink::Worklist.358" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.362" = type { %"class.std::__1::__compressed_pair.363" }
%"class.std::__1::__compressed_pair.363" = type { %"struct.std::__1::__compressed_pair_elem.364" }
%"struct.std::__1::__compressed_pair_elem.364" = type { %"class.blink::Worklist.365"* }
%"class.blink::Worklist.365" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.312" }
%"class.std::__1::unique_ptr.369" = type { %"class.std::__1::__compressed_pair.370" }
%"class.std::__1::__compressed_pair.370" = type { %"struct.std::__1::__compressed_pair_elem.371" }
%"struct.std::__1::__compressed_pair_elem.371" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.372", %"class.std::__1::__compressed_pair.380", %"class.std::__1::__compressed_pair.385", %"class.std::__1::__compressed_pair.387", [4 x i8] }>
%"class.std::__1::unique_ptr.372" = type { %"class.std::__1::__compressed_pair.373" }
%"class.std::__1::__compressed_pair.373" = type { %"struct.std::__1::__compressed_pair_elem.374", %"struct.std::__1::__compressed_pair_elem.375" }
%"struct.std::__1::__compressed_pair_elem.374" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.387" = type { %"struct.std::__1::__compressed_pair_elem.388" }
%"struct.std::__1::__compressed_pair_elem.388" = type { float }
%"class.std::__1::unique_ptr.394" = type { %"class.std::__1::__compressed_pair.395" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.397", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.397" = type { %"class.std::__1::__compressed_pair.398" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.399" }
%"struct.std::__1::__compressed_pair_elem.399" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.406" }
%"class.WTF::Vector.406" = type { %"class.WTF::VectorBuffer.407" }
%"class.WTF::VectorBuffer.407" = type { %"class.WTF::VectorBufferBase.408" }
%"class.WTF::VectorBufferBase.408" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.414" = type { %"class.std::__1::__compressed_pair.415" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.422" }
%"class.WTF::VectorBuffer.422" = type { %"class.WTF::VectorBufferBase.423" }
%"class.WTF::VectorBufferBase.423" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.424" = type { %"class.std::__1::__compressed_pair.425" }
%"class.std::__1::__compressed_pair.425" = type { %"struct.std::__1::__compressed_pair_elem.426" }
%"struct.std::__1::__compressed_pair_elem.426" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.436" }
%"class.std::__1::unique_ptr.436" = type { %"class.std::__1::__compressed_pair.437" }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.438" }
%"struct.std::__1::__compressed_pair_elem.438" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.323"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.330"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.337"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.344"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.351"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.1486" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.1486" = type { %"struct.std::__1::__compressed_pair_elem.1487" }
%"struct.std::__1::__compressed_pair_elem.1487" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.442" = type { %"class.std::__1::__compressed_pair.443" }
%"class.std::__1::__compressed_pair.443" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"struct.std::__1::__compressed_pair_elem.444" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.448" = type { %"class.std::__1::__compressed_pair.449" }
%"class.std::__1::__compressed_pair.449" = type { %"struct.std::__1::__compressed_pair_elem.450" }
%"struct.std::__1::__compressed_pair_elem.450" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.454 }
%class.scoped_refptr.454 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.455" = type { %"struct.std::__1::__atomic_base.456" }
%"struct.std::__1::__atomic_base.456" = type { %"struct.std::__1::__cxx_atomic_impl.457" }
%"struct.std::__1::__cxx_atomic_impl.457" = type { %"struct.std::__1::__cxx_atomic_base_impl.458" }
%"struct.std::__1::__cxx_atomic_base_impl.458" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.225" }
%"struct.std::__1::atomic.225" = type { %"struct.std::__1::__atomic_base.226" }
%"struct.std::__1::__atomic_base.226" = type { %"struct.std::__1::__atomic_base.227" }
%"struct.std::__1::__atomic_base.227" = type { %"struct.std::__1::__cxx_atomic_impl.228" }
%"struct.std::__1::__cxx_atomic_impl.228" = type { %"struct.std::__1::__cxx_atomic_base_impl.229" }
%"struct.std::__1::__cxx_atomic_base_impl.229" = type { i32 }
%"class.blink::CSSComputedStyleDeclaration" = type <{ %"class.blink::CSSStyleDeclaration", %"class.blink::Member.84", i8, [7 x i8], %"class.WTF::AtomicString", i8, [7 x i8] }>
%"class.blink::CSSStyleDeclaration" = type { %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextClient" }
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.83" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::WeakMember.83" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.49", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.58", %"class.blink::Member.60", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.69", %"class.blink::Member.75", %"class.blink::Member.77", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.5" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.3" }
%"class.WTF::HashTable.3" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::Supplementable.5" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.6" }
%"class.blink::HeapHashMap.6" = type { %"class.WTF::HashMap.9" }
%"class.WTF::HashMap.9" = type { %"class.WTF::HashTable.10" }
%"class.WTF::HashTable.10" = type <{ %"struct.WTF::KeyValuePair.12"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.12" = type { i8*, %"class.blink::Member.1957" }
%"class.blink::Member.1957" = type { %"class.blink::MemberBase.1958" }
%"class.blink::MemberBase.1958" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1959" }
%"class.blink::Member.1959" = type { %"class.blink::MemberBase.1960" }
%"class.blink::MemberBase.1960" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39", %"class.blink::Member", i32, [4 x i8], %"class.WTF::HashSet.45", i32, i32 }
%class.scoped_refptr = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.15 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.15 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type { %"class.url::Origin", %"class.std::__1::map", %"class.std::__1::map.28", %"class.std::__1::map.37"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.18 }
%union.anon.18 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::map.28" = type { %"class.std::__1::__tree.29" }
%"class.std::__1::__tree.29" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::map.37" = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.WTF::HashSet.45" = type { %"class.WTF::HashTable.46" }
%"class.WTF::HashTable.46" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.49" = type { %"class.blink::MemberBase.50" }
%"class.blink::MemberBase.50" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.53" }
%"class.WTF::Vector.53" = type { %"class.WTF::VectorBuffer.54" }
%"class.WTF::VectorBuffer.54" = type { %"class.WTF::VectorBufferBase.55" }
%"class.WTF::VectorBufferBase.55" = type { %"class.blink::Member.56"*, i32, i32 }
%"class.blink::Member.56" = type opaque
%"class.blink::Member.58" = type { %"class.blink::MemberBase.59" }
%"class.blink::MemberBase.59" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.60" = type { %"class.blink::MemberBase.61" }
%"class.blink::MemberBase.61" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.62", i32, i32 }
%"class.blink::HeapHashMap.62" = type { %"class.WTF::HashMap.65" }
%"class.WTF::HashMap.65" = type { %"class.WTF::HashTable.66" }
%"class.WTF::HashTable.66" = type <{ %"struct.WTF::KeyValuePair.68"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.68" = type opaque
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.75" = type { %"class.blink::MemberBase.76" }
%"class.blink::MemberBase.76" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.77" = type { %"class.blink::MemberBase.78" }
%"class.blink::MemberBase.78" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.84" = type { %"class.blink::MemberBase.85" }
%"class.blink::MemberBase.85" = type { %"class.blink::Node"* }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.84", %"class.blink::Member.86", %"class.blink::Member.84", %"class.blink::Member.84", %"class.blink::Member.88" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.86" = type { %"class.blink::MemberBase.87" }
%"class.blink::MemberBase.87" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.92", %"class.blink::Member.94", %"class.blink::Member.86", %"class.blink::Member.96", %"class.blink::Member.96", %"class.blink::Member.141", %"class.blink::Member.143", %"class.blink::Member.145", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.150", %"class.blink::HeapVector.152" }
%"class.blink::Member.92" = type { %"class.blink::MemberBase.93" }
%"class.blink::MemberBase.93" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.84", %"class.blink::Member.84" }
%"class.blink::Member.94" = type { %"class.blink::MemberBase.95" }
%"class.blink::MemberBase.95" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable.213", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.221", %"class.WTF::Vector.221", i8, i32, %"class.blink::Member.232", %"class.blink::Member", %"class.blink::Member.234", %"class.blink::Member.236", %"class.blink::Member.238", %"class.blink::Member.240", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.248", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.254", %"class.blink::Member.256", %"class.blink::Member.158", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.259", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.134", %"class.blink::Member.111", %"class.blink::Member.471", %"class.blink::Member.111", %"class.blink::Member.111", %"class.blink::Member.111", %"class.blink::UserActionElementSet", %"class.blink::Member.480", double, double, i64, i64, %"class.blink::HeapHashSet.482", %"class.blink::HeapHashSet.489", i16, i8, %"class.blink::Member.496", %"class.blink::Member.498", %"class.blink::Member.1270", %"class.blink::Member.1272", %"class.blink::TextLinkColors", %"class.blink::Member.1274", i8, [7 x i8], %"class.blink::HeapHashMap.1276", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.111", %"class.WTF::Vector.1283", %"class.blink::Member.1288", %"class.blink::Member.1290", i8, %"class.blink::Member.111", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.1292", %"class.blink::HeapVector.1294", %"class.std::__1::unique_ptr.1302", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1308", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.1321", %"class.WTF::Vector.1323", i8, i8, %"class.std::__1::unique_ptr.1328", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.134", %"class.blink::HeapVector.1334", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1342", i8, i32, %"class.blink::Member.1344", %"class.blink::Member.1346", %"class.blink::Member.1348", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1350", %"class.WTF::HashMap.1352", %"class.blink::Member.1357", %"class.blink::Member.1359", %"class.blink::Member.1361", %"class.blink::Member.1363", %"class.blink::Member.94", %"class.blink::Member.94", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1365", i8, i32, %"class.blink::Member.1372", %"class.blink::Member.1374", i32, %"class.blink::Member.1376", %"class.blink::Member.1378", %"class.blink::Member.1380", %"class.std::__1::unique_ptr.1382", i64, %"class.std::__1::unique_ptr.1388", i32, i32, %"class.blink::Member.1399", %"class.blink::Member.1401", %"class.blink::Member.1403", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1405", %"class.WTF::Vector.1407", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1412", %"class.blink::Member.1419", %"class.std::__1::unique_ptr.1421", %"class.blink::Member.1427", i8, i8, %"class.WTF::String", %"class.blink::Member.1429", i8, [7 x i8], %"class.blink::HeapHashMap.1431", %"class.blink::HeapObserverSet.1438", %"class.blink::Member.1446", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1448", i32, i8, i8, %"class.blink::WeakMember.1450", %"class.blink::Member.1451" }
%"class.blink::Supplementable.213" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.214" }
%"class.blink::HeapHashMap.214" = type { %"class.WTF::HashMap.217" }
%"class.WTF::HashMap.217" = type { %"class.WTF::HashTable.218" }
%"class.WTF::HashTable.218" = type <{ %"struct.WTF::KeyValuePair.220"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.220" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.221" = type { %"class.WTF::VectorBuffer.222" }
%"class.WTF::VectorBuffer.222" = type { %"class.WTF::VectorBufferBase.223" }
%"class.WTF::VectorBufferBase.223" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.224 }
%class.scoped_refptr.224 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.225" }
%"class.blink::Member.232" = type { %"class.blink::MemberBase.233" }
%"class.blink::MemberBase.233" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.234" = type { %"class.blink::MemberBase.235" }
%"class.blink::MemberBase.235" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.236" = type { %"class.blink::MemberBase.237" }
%"class.blink::MemberBase.237" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.238" = type { %"class.blink::MemberBase.239" }
%"class.blink::MemberBase.239" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.240" = type { %"class.blink::MemberBase.241" }
%"class.blink::MemberBase.241" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.248" = type { %"class.std::__1::__compressed_pair.249" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.250" }
%"struct.std::__1::__compressed_pair_elem.250" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.242" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.242" = type { %"class.std::__1::__compressed_pair.243" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.244" }
%"struct.std::__1::__compressed_pair_elem.244" = type { %"class.blink::KURL"* }
%"class.blink::Member.254" = type { %"class.blink::MemberBase.255" }
%"class.blink::MemberBase.255" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.256" = type { %"class.blink::MemberBase.257" }
%"class.blink::MemberBase.257" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.158" = type { %"class.blink::MemberBase.159" }
%"class.blink::MemberBase.159" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.160", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.162, %"class.WTF::Vector.181", %"class.WTF::Vector.181", %"class.blink::Member.84", %"class.blink::Member.186", %"class.blink::HeapHashSet.190", %"class.blink::Member.94", %"class.WTF::HashSet.197", %"class.WTF::TextPosition", %"class.blink::Member.201", %"class.blink::HeapVector.203", %"class.blink::Member.210" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.160" = type { %"class.blink::MemberBase.161" }
%"class.blink::MemberBase.161" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.162 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.163", %"class.WTF::Vector.165" }
%"class.WTF::RefCounted.163" = type { %"class.base::RefCounted.164" }
%"class.base::RefCounted.164" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.165" = type { %"class.WTF::VectorBuffer.166" }
%"class.WTF::VectorBuffer.166" = type { %"class.WTF::VectorBufferBase.167" }
%"class.WTF::VectorBufferBase.167" = type { %"class.std::__1::unique_ptr.168"*, i32, i32 }
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.171", %"class.WTF::String" }
%"class.WTF::Vector.171" = type { %"class.WTF::VectorBuffer.172" }
%"class.WTF::VectorBuffer.172" = type { %"class.WTF::VectorBufferBase.173" }
%"class.WTF::VectorBufferBase.173" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.WTF::Vector.181" = type { %"class.WTF::VectorBuffer.182" }
%"class.WTF::VectorBuffer.182" = type { %"class.WTF::VectorBufferBase.183" }
%"class.WTF::VectorBufferBase.183" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type <{ %"class.blink::MediaQueryExp", i8, [7 x i8] }>
%"class.blink::Member.186" = type { %"class.blink::MemberBase.187" }
%"class.blink::MemberBase.187" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.188" }
%"class.blink::Member.188" = type { %"class.blink::MemberBase.189" }
%"class.blink::MemberBase.189" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.190" = type { %"class.WTF::HashSet.193" }
%"class.WTF::HashSet.193" = type { %"class.WTF::HashTable.194" }
%"class.WTF::HashTable.194" = type <{ %"class.blink::WeakMember.196"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.196" = type { %"class.blink::MemberBase.87" }
%"class.WTF::HashSet.197" = type { %"class.WTF::HashTable.198" }
%"class.WTF::HashTable.198" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.201" = type { %"class.blink::MemberBase.202" }
%"class.blink::MemberBase.202" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.162, %"class.blink::Member.158", %"class.blink::Member.186" }
%"class.blink::HeapVector.203" = type { %"class.WTF::Vector.206" }
%"class.WTF::Vector.206" = type { %"class.WTF::VectorBuffer.207" }
%"class.WTF::VectorBuffer.207" = type { %"class.WTF::VectorBufferBase.208" }
%"class.WTF::VectorBufferBase.208" = type { %"class.blink::Member.186"*, i32, i32 }
%"class.blink::Member.210" = type { %"class.blink::MemberBase.211" }
%"class.blink::MemberBase.211" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.258 }
%class.scoped_refptr.258 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.259" = type { %"class.WTF::VectorBuffer.260" }
%"class.WTF::VectorBuffer.260" = type { %"class.WTF::VectorBufferBase.261" }
%"class.WTF::VectorBufferBase.261" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.262 }
%class.scoped_refptr.262 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.471" = type { %"class.blink::MemberBase.472" }
%"class.blink::MemberBase.472" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.473" }
%"class.blink::HeapHashMap.473" = type { %"class.WTF::HashMap.476" }
%"class.WTF::HashMap.476" = type { %"class.WTF::HashTable.477" }
%"class.WTF::HashTable.477" = type <{ %"struct.WTF::KeyValuePair.479"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.479" = type opaque
%"class.blink::Member.480" = type { %"class.blink::MemberBase.481" }
%"class.blink::MemberBase.481" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.482" = type { %"class.WTF::HashSet.485" }
%"class.WTF::HashSet.485" = type { %"class.WTF::HashTable.486" }
%"class.WTF::HashTable.486" = type <{ %"class.blink::WeakMember.488"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.488" = type opaque
%"class.blink::HeapHashSet.489" = type { %"class.WTF::HashSet.492" }
%"class.WTF::HashSet.492" = type { %"class.WTF::HashTable.493" }
%"class.WTF::HashTable.493" = type <{ %"class.blink::WeakMember.495"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.495" = type opaque
%"class.blink::Member.496" = type { %"class.blink::MemberBase.497" }
%"class.blink::MemberBase.497" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.498" = type { %"class.blink::MemberBase.499" }
%"class.blink::MemberBase.499" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type { %"class.blink::FontSelectorClient", %"class.blink::NameClient", %"class.blink::Member.94", i32, i32, i32, %"class.blink::Member.158", %"class.blink::Member.502", %"class.blink::Member.529", %"class.blink::HeapHashMap.531", i8, i8, i8, [5 x i8], %"class.blink::HeapHashSet.538", %"class.blink::HeapHashSet.538", %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, %"class.blink::Member.544", %"class.blink::Member.567", %"class.blink::Member.1033", %"class.blink::Member.1035", %"class.blink::Member.1041", %"class.blink::PendingInvalidations", %"class.blink::StyleInvalidationRoot", %"class.blink::StyleRecalcRoot", %"class.blink::LayoutTreeRebuildRoot", %"class.blink::HeapHashSet.1203", %"class.blink::Member.1209", %"class.blink::HeapHashMap.1211", %"class.blink::HeapHashMap.1218", %"class.std::__1::unique_ptr.1225", i32, %"class.blink::HeapVector.1231", %"class.blink::HeapVector.1231", %"class.blink::HeapVector.514", %"class.blink::HeapHashSet.1239", %"class.blink::HeapHashMap.1246", %"class.blink::Member.1253", %"class.blink::HeapHashMap.1255", %class.scoped_refptr.1262, %class.scoped_refptr.658, %"class.blink::Member.1167", i32, i32, %"class.blink::Color", i32, %"class.blink::Color", [4 x i8], %"class.blink::HeapHashSet.1263", %"class.blink::Member.111" }
%"class.blink::FontSelectorClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.502" = type { %"class.blink::MemberBase.503" }
%"class.blink::MemberBase.503" = type { %"class.blink::DocumentStyleSheetCollection"* }
%"class.blink::DocumentStyleSheetCollection" = type { %"class.blink::TreeScopeStyleSheetCollection" }
%"class.blink::TreeScopeStyleSheetCollection" = type { %"class.blink::StyleSheetCollection.base", %"class.blink::Member.86", %"class.blink::TreeOrderedList" }
%"class.blink::StyleSheetCollection.base" = type <{ %"class.blink::NameClient", %"class.blink::HeapVector.506", %"class.blink::HeapVector.514", i8 }>
%"class.blink::HeapVector.506" = type { %"class.WTF::Vector.509" }
%"class.WTF::Vector.509" = type { %"class.WTF::VectorBuffer.510" }
%"class.WTF::VectorBuffer.510" = type { %"class.WTF::VectorBufferBase.511" }
%"class.WTF::VectorBufferBase.511" = type { %"class.blink::Member.512"*, i32, i32 }
%"class.blink::Member.512" = type opaque
%"class.blink::TreeOrderedList" = type { %"class.blink::HeapListHashSet" }
%"class.blink::HeapListHashSet" = type { %"class.WTF::ListHashSet.base", [7 x i8] }
%"class.WTF::ListHashSet.base" = type <{ %"class.WTF::HashTable.525", %"class.blink::Member.527", %"class.blink::Member.527", %"struct.blink::HeapListHashSetAllocator::AllocatorProvider" }>
%"class.WTF::HashTable.525" = type <{ %"class.blink::Member.527"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.527" = type { %"class.blink::MemberBase.528" }
%"class.blink::MemberBase.528" = type { %"class.blink::HeapListHashSetNode"* }
%"class.blink::HeapListHashSetNode" = type { %"class.blink::Member.84", %"class.blink::Member.527", %"class.blink::Member.527" }
%"struct.blink::HeapListHashSetAllocator::AllocatorProvider" = type { i8 }
%"class.blink::Member.529" = type { %"class.blink::MemberBase.530" }
%"class.blink::MemberBase.530" = type { %"class.blink::StyleRuleUsageTracker"* }
%"class.blink::StyleRuleUsageTracker" = type opaque
%"class.blink::HeapHashMap.531" = type { %"class.WTF::HashMap.534" }
%"class.WTF::HashMap.534" = type { %"class.WTF::HashTable.535" }
%"class.WTF::HashTable.535" = type <{ %"struct.WTF::KeyValuePair.537"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.537" = type opaque
%"class.blink::HeapHashSet.538" = type { %"class.WTF::HashSet.541" }
%"class.WTF::HashSet.541" = type { %"class.WTF::HashTable.542" }
%"class.WTF::HashTable.542" = type <{ %"class.blink::Member.86"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.544" = type { %"class.blink::MemberBase.545" }
%"class.blink::MemberBase.545" = type { %"class.blink::ReferenceFilterOperation"* }
%"class.blink::ReferenceFilterOperation" = type { %"class.blink::FilterOperation.base", %"class.WTF::AtomicString", %"class.blink::Member.548", %"class.blink::Member.559" }
%"class.blink::FilterOperation.base" = type <{ i32 (...)**, i32 }>
%"class.blink::Member.548" = type { %"class.blink::MemberBase.549" }
%"class.blink::MemberBase.549" = type { %"class.blink::SVGResource"* }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.111", %"class.blink::HeapHashMap.552" }
%"class.blink::HeapHashMap.552" = type { %"class.WTF::HashMap.555" }
%"class.WTF::HashMap.555" = type { %"class.WTF::HashTable.556" }
%"class.WTF::HashTable.556" = type <{ %"struct.WTF::KeyValuePair.558"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.558" = type opaque
%"class.blink::Member.559" = type { %"class.blink::MemberBase.560" }
%"class.blink::MemberBase.560" = type { %"class.blink::Filter"* }
%"class.blink::Filter" = type { %"class.blink::FloatRect", %"class.blink::FloatRect", float, i32, %"class.blink::Member.563", %"class.blink::Member.565" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.563" = type { %"class.blink::MemberBase.564" }
%"class.blink::MemberBase.564" = type { %"class.blink::SourceGraphic"* }
%"class.blink::SourceGraphic" = type opaque
%"class.blink::Member.565" = type { %"class.blink::MemberBase.566" }
%"class.blink::MemberBase.566" = type { %"class.blink::FilterEffect"* }
%"class.blink::FilterEffect" = type { i32 (...)**, %"class.blink::HeapVector.1470", %"class.blink::Member.559", %"class.blink::FloatRect", i8, i8, i32, [4 x %class.sk_sp.1477] }
%"class.blink::HeapVector.1470" = type { %"class.WTF::Vector.1473" }
%"class.WTF::Vector.1473" = type { %"class.WTF::VectorBuffer.1474" }
%"class.WTF::VectorBuffer.1474" = type { %"class.WTF::VectorBufferBase.1475" }
%"class.WTF::VectorBufferBase.1475" = type { %"class.blink::Member.565"*, i32, i32 }
%class.sk_sp.1477 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.1478, i32, %"class.absl::optional.1479", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.225" }>
%class.sk_sp.1478 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.1479" = type { %"class.absl::optional_internal::optional_data.1480" }
%"class.absl::optional_internal::optional_data.1480" = type { %"class.absl::optional_internal::optional_data_base.1481" }
%"class.absl::optional_internal::optional_data_base.1481" = type { %"class.absl::optional_internal::optional_data_dtor_base.1482" }
%"class.absl::optional_internal::optional_data_dtor_base.1482" = type { i8, %union.anon.1483 }
%union.anon.1483 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.blink::Member.567" = type { %"class.blink::MemberBase.568" }
%"class.blink::MemberBase.568" = type { %"class.blink::StyleResolver"* }
%"class.blink::StyleResolver" = type <{ %"class.blink::MatchedPropertiesCache", %"class.blink::Member.94", %class.scoped_refptr.578, %"class.blink::SelectorFilter", %"class.blink::Member.529", i8, i8, [6 x i8] }>
%"class.blink::MatchedPropertiesCache" = type { %"class.blink::HeapHashMap.571" }
%"class.blink::HeapHashMap.571" = type { %"class.WTF::HashMap.574" }
%"class.WTF::HashMap.574" = type { %"class.WTF::HashTable.575" }
%"class.WTF::HashTable.575" = type <{ %"struct.WTF::KeyValuePair.577"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.577" = type opaque
%class.scoped_refptr.578 = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.1000", %"class.std::__1::unique_ptr.1002" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.643", %"class.blink::DataRef.723", %"class.blink::DataRef.727", %"class.blink::DataRef.925", %"class.blink::DataRef.983", %"class.blink::DataRef.987", %"class.blink::DataRef.991", %"class.blink::DataRef.995", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr.579 }
%class.scoped_refptr.579 = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted.580", %"class.blink::DataRef.582", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted.580" = type { %"class.base::RefCounted.581" }
%"class.base::RefCounted.581" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.582" = type { %class.scoped_refptr.583 }
%class.scoped_refptr.583 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.584", %"class.blink::Font" }
%"class.WTF::RefCounted.584" = type { %"class.base::RefCounted.585" }
%"class.base::RefCounted.585" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.612 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.587, %class.scoped_refptr.595, %class.scoped_refptr.605, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.611 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.586 }
%class.scoped_refptr.586 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.1466", [4 x i8] }>
%"class.WTF::RefCounted.1466" = type { %"class.base::RefCounted.1467" }
%"class.base::RefCounted.1467" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.587 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.593", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector.588" }
%"class.WTF::Vector.588" = type { %"class.WTF::VectorBuffer.589" }
%"class.WTF::VectorBuffer.589" = type { %"class.WTF::VectorBufferBase.590" }
%"class.WTF::VectorBufferBase.590" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.593" = type { %"class.base::RefCounted.594" }
%"class.base::RefCounted.594" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.595 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.596", %"class.WTF::RefCounted.603", [4 x i8] }>
%"class.blink::FontSettings.596" = type { %"class.WTF::Vector.597" }
%"class.WTF::Vector.597" = type { %"class.WTF::VectorBuffer.598" }
%"class.WTF::VectorBuffer.598" = type { %"class.WTF::VectorBufferBase.599" }
%"class.WTF::VectorBufferBase.599" = type { %"class.blink::FontTagValuePair.600"*, i32, i32 }
%"class.blink::FontTagValuePair.600" = type { i32, float }
%"class.WTF::RefCounted.603" = type { %"class.base::RefCounted.604" }
%"class.base::RefCounted.604" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.605 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.606", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.608, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.606" = type { %"class.base::RefCounted.607" }
%"class.base::RefCounted.607" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.608 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.609", [4 x i8] }>
%"class.WTF::RefCounted.609" = type { %"class.base::RefCounted.610" }
%"class.base::RefCounted.610" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.611 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.612 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.613", %"class.WTF::Vector.615", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.613" = type { %"class.base::RefCounted.614" }
%"class.base::RefCounted.614" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.615" = type { %"class.WTF::VectorBuffer.616" }
%"class.WTF::VectorBuffer.616" = type { %"class.WTF::VectorBufferBase.617", [8 x i8] }
%"class.WTF::VectorBufferBase.617" = type { %class.scoped_refptr.618*, i32, i32 }
%class.scoped_refptr.618 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.619", [4 x i8] }>
%"class.WTF::RefCounted.619" = type { %"class.base::RefCounted.620" }
%"class.base::RefCounted.620" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr.629", %class.scoped_refptr.636, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.619" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional.623", %"class.absl::optional.623", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional.623" = type { %"class.absl::optional_internal::optional_data.624" }
%"class.absl::optional_internal::optional_data.624" = type { %"class.absl::optional_internal::optional_data_base.625" }
%"class.absl::optional_internal::optional_data_base.625" = type { %"class.absl::optional_internal::optional_data_dtor_base.626" }
%"class.absl::optional_internal::optional_data_dtor_base.626" = type { i8, %union.anon.627 }
%union.anon.627 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.628, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.225" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.465" }
%"struct.std::__1::atomic.465" = type { %"struct.std::__1::__atomic_base.466" }
%"struct.std::__1::__atomic_base.466" = type { %"struct.std::__1::__atomic_base.467" }
%"struct.std::__1::__atomic_base.467" = type { %"struct.std::__1::__cxx_atomic_impl.468" }
%"struct.std::__1::__cxx_atomic_impl.468" = type { %"struct.std::__1::__cxx_atomic_base_impl.469" }
%"struct.std::__1::__cxx_atomic_base_impl.469" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.628 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr.629" = type { %"class.std::__1::__compressed_pair.630" }
%"class.std::__1::__compressed_pair.630" = type { %"struct.std::__1::__compressed_pair_elem.631" }
%"struct.std::__1::__compressed_pair_elem.631" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.632, %class.scoped_refptr.632 }
%class.scoped_refptr.632 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.636 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.637", [4 x i8] }>
%"class.WTF::RefCounted.637" = type { %"class.base::RefCounted.638" }
%"class.base::RefCounted.638" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase.639" }
%"class.blink::PersistentBase.639" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr.640" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr.640" = type { %"class.blink::PersistentNode"* }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.641 }
%class.scoped_refptr.641 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.464", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.464" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.465" }
%"class.blink::Length" = type <{ %union.anon.642, i8, i8, i8, i8 }>
%union.anon.642 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::DataRef.643" = type { %class.scoped_refptr.644 }
%class.scoped_refptr.644 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.645", [4 x i8], %"class.blink::DataRef.647", %"class.blink::DataRef.688", %"class.WTF::Vector.692", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.696, %class.scoped_refptr.705, %"class.blink::Persistent.713", %"class.blink::Persistent.715", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.645" = type { %"class.base::RefCounted.646" }
%"class.base::RefCounted.646" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.647" = type { %class.scoped_refptr.648 }
%class.scoped_refptr.648 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.649", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.651, %class.scoped_refptr.658, %"class.blink::Persistent.675", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.649" = type { %"class.base::RefCounted.650" }
%"class.base::RefCounted.650" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.651 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.652", %"class.WTF::Vector.653" }
%"class.base::RefCountedThreadSafe.652" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.653" = type { %"class.WTF::VectorBuffer.654" }
%"class.WTF::VectorBuffer.654" = type { %"class.WTF::VectorBufferBase.655" }
%"class.WTF::VectorBufferBase.655" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%"class.blink::Persistent.675" = type { %"class.blink::PersistentBase.676" }
%"class.blink::PersistentBase.676" = type { %"class.blink::HeapVector.677"*, %"class.blink::PersistentNodePtr" }
%"class.blink::HeapVector.677" = type { %"class.WTF::Vector.680" }
%"class.WTF::Vector.680" = type { %"class.WTF::VectorBuffer.681" }
%"class.WTF::VectorBuffer.681" = type { %"class.WTF::VectorBufferBase.682" }
%"class.WTF::VectorBufferBase.682" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member.683", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member.683" = type { %"class.blink::MemberBase.684" }
%"class.blink::MemberBase.684" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.688" = type { %class.scoped_refptr.689 }
%class.scoped_refptr.689 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.690", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.690" = type { %"class.base::RefCounted.691" }
%"class.base::RefCounted.691" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.692" = type { %"class.WTF::VectorBuffer.693" }
%"class.WTF::VectorBuffer.693" = type { %"class.WTF::VectorBufferBase.131" }
%"class.WTF::VectorBufferBase.131" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.696 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.697", %"class.WTF::Vector.699" }
%"class.WTF::RefCounted.697" = type { %"class.base::RefCounted.698" }
%"class.base::RefCounted.698" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.699" = type { %"class.WTF::VectorBuffer.700" }
%"class.WTF::VectorBuffer.700" = type { %"class.WTF::VectorBufferBase.701" }
%"class.WTF::VectorBufferBase.701" = type { %"struct.std::__1::pair.702"*, i32, i32 }
%"struct.std::__1::pair.702" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.705 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.706", [4 x i8], %"class.WTF::Vector.708" }
%"class.WTF::RefCounted.706" = type { %"class.base::RefCounted.707" }
%"class.base::RefCounted.707" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.708" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.710", [28 x i8] }>
%"class.WTF::VectorBufferBase.710" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::Persistent.713" = type { %"class.blink::PersistentBase.714" }
%"class.blink::PersistentBase.714" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr" }
%"class.blink::Persistent.715" = type { %"class.blink::PersistentBase.716" }
%"class.blink::PersistentBase.716" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.719", %"class.blink::Member.721" }
%"class.blink::Member.719" = type { %"class.blink::MemberBase.720" }
%"class.blink::MemberBase.720" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.721" = type { %"class.blink::MemberBase.722" }
%"class.blink::MemberBase.722" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.723" = type { %class.scoped_refptr.724 }
%class.scoped_refptr.724 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.725", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.725" = type { %"class.base::RefCounted.726" }
%"class.base::RefCounted.726" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.727" = type { %class.scoped_refptr.728 }
%class.scoped_refptr.728 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.729", [4 x i8], %"class.blink::DataRef.731", %"class.blink::DataRef.795", %"class.blink::TransformOperations", %class.scoped_refptr.705, %"class.blink::Persistent.919", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.729" = type { %"class.base::RefCounted.730" }
%"class.base::RefCounted.730" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.731" = type { %class.scoped_refptr.732 }
%class.scoped_refptr.732 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.733", [4 x i8], %"class.blink::DataRef.735", %"class.blink::Persistent.773", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.733" = type { %"class.base::RefCounted.734" }
%"class.base::RefCounted.734" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.735" = type { %class.scoped_refptr.736 }
%class.scoped_refptr.736 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.737", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.755, %class.scoped_refptr.758, %class.scoped_refptr.761, %class.scoped_refptr.764, %class.scoped_refptr.765, %class.scoped_refptr.766, %"class.blink::Persistent.773", %"class.blink::Persistent.786", %"class.absl::optional.790", %"class.absl::optional.790", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.737" = type { %"class.base::RefCounted.738" }
%"class.base::RefCounted.738" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.739", %"class.std::__1::unique_ptr.744" }
%"class.WTF::Vector.739" = type { %"class.WTF::VectorBuffer.740" }
%"class.WTF::VectorBuffer.740" = type { %"class.WTF::VectorBufferBase.741" }
%"class.WTF::VectorBufferBase.741" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.747", %"class.WTF::Vector.739", i32, i32 }
%"class.WTF::Vector.747" = type { %"class.WTF::VectorBuffer.748" }
%"class.WTF::VectorBuffer.748" = type { %"class.WTF::VectorBufferBase.749" }
%"class.WTF::VectorBufferBase.749" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.755 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.756", [4 x i8] }>
%"class.WTF::RefCounted.756" = type { %"class.base::RefCounted.757" }
%"class.base::RefCounted.757" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.758 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.759", [4 x i8] }>
%"class.WTF::RefCounted.759" = type { %"class.base::RefCounted.760" }
%"class.base::RefCounted.760" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.761 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.762" }>
%"class.WTF::RefCounted.762" = type { %"class.base::RefCounted.763" }
%"class.base::RefCounted.763" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.764 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.765 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.766 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.767", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.767" = type { %"class.base::RefCounted.768" }
%"class.base::RefCounted.768" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.769" }
%"class.blink::DataRef.769" = type { %class.scoped_refptr.770 }
%class.scoped_refptr.770 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.713", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.771" }
%"class.WTF::RefCounted.771" = type { %"class.base::RefCounted.772" }
%"class.base::RefCounted.772" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.786" = type { %"class.blink::PersistentBase.787" }
%"class.blink::PersistentBase.787" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.758, %"class.blink::Member.683", i32, [4 x i8] }>
%"class.absl::optional.790" = type { %"class.absl::optional_internal::optional_data.791" }
%"class.absl::optional_internal::optional_data.791" = type { %"class.absl::optional_internal::optional_data_base.792" }
%"class.absl::optional_internal::optional_data_base.792" = type { %"class.absl::optional_internal::optional_data_dtor_base.793" }
%"class.absl::optional_internal::optional_data_dtor_base.793" = type { i8, [3 x i8], %union.anon.794 }
%union.anon.794 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.773" = type { %"class.blink::PersistentBase.774" }
%"class.blink::PersistentBase.774" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.777" }
%"class.blink::HeapVector.777" = type { %"class.WTF::Vector.780" }
%"class.WTF::Vector.780" = type { %"class.WTF::VectorBuffer.781" }
%"class.WTF::VectorBuffer.781" = type { %"class.WTF::VectorBufferBase.782" }
%"class.WTF::VectorBufferBase.782" = type { %"class.blink::Member.783"*, i32, i32 }
%"class.blink::Member.783" = type { %"class.blink::MemberBase.784" }
%"class.blink::MemberBase.784" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.795" = type { %class.scoped_refptr.796 }
%class.scoped_refptr.796 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.797", %"class.blink::DataRef.799", %"class.blink::DataRef.803", %"class.blink::DataRef.812", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.831", %"class.std::__1::unique_ptr.842", %"class.std::__1::unique_ptr.880", %"class.std::__1::unique_ptr.891", %"class.std::__1::unique_ptr.902", %"class.WTF::Vector.908", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.797" = type { %"class.base::RefCounted.798" }
%"class.base::RefCounted.798" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.799" = type { %class.scoped_refptr.800 }
%class.scoped_refptr.800 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.801", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.801" = type { %"class.base::RefCounted.802" }
%"class.base::RefCounted.802" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.803" = type { %class.scoped_refptr.804 }
%class.scoped_refptr.804 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.805", [4 x i8], %"class.WTF::Vector.807", i8, [7 x i8] }>
%"class.WTF::RefCounted.805" = type { %"class.base::RefCounted.806" }
%"class.base::RefCounted.806" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.807" = type { %"class.WTF::VectorBuffer.808" }
%"class.WTF::VectorBuffer.808" = type { %"class.WTF::VectorBufferBase.809" }
%"class.WTF::VectorBufferBase.809" = type { i32*, i32, i32 }
%"class.blink::DataRef.812" = type { %class.scoped_refptr.813 }
%class.scoped_refptr.813 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.814", [4 x i8], %"class.WTF::HashMap.816", %"class.WTF::HashMap.816", %"class.WTF::HashMap.816", %"class.WTF::HashMap.816", %"class.WTF::HashMap.816", %"class.WTF::HashMap.816", %"class.WTF::HashMap.821", %"class.WTF::HashMap.821", %"class.WTF::HashMap.821", %"class.WTF::HashMap.821", %"class.WTF::HashMap.826", %"class.WTF::Vector.739", %"class.WTF::Vector.739", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.814" = type { %"class.base::RefCounted.815" }
%"class.base::RefCounted.815" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.816" = type { %"class.WTF::HashTable.817" }
%"class.WTF::HashTable.817" = type <{ %"struct.WTF::KeyValuePair.820"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.820" = type { %"class.WTF::String", %"class.WTF::Vector.1973" }
%"class.WTF::Vector.1973" = type { %"class.WTF::VectorBuffer.1974" }
%"class.WTF::VectorBuffer.1974" = type { %"class.WTF::VectorBufferBase.1975" }
%"class.WTF::VectorBufferBase.1975" = type { i64*, i32, i32 }
%"class.WTF::HashMap.821" = type { %"class.WTF::HashTable.822" }
%"class.WTF::HashTable.822" = type <{ %"struct.WTF::KeyValuePair.825"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.825" = type { i64, %"class.WTF::Vector.908" }
%"class.WTF::HashMap.826" = type { %"class.WTF::HashTable.827" }
%"class.WTF::HashTable.827" = type <{ %"struct.WTF::KeyValuePair.830"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.830" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.831" = type { %"class.std::__1::__compressed_pair.832" }
%"class.std::__1::__compressed_pair.832" = type { %"struct.std::__1::__compressed_pair_elem.833" }
%"struct.std::__1::__compressed_pair_elem.833" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.834" }
%"class.WTF::HashMap.834" = type { %"class.WTF::HashTable.835" }
%"class.WTF::HashTable.835" = type <{ %"struct.WTF::KeyValuePair.838"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.838" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.1978", %"class.absl::optional.1978", %"class.absl::optional.1978" }
%"class.absl::optional.1978" = type { %"class.absl::optional_internal::optional_data.1979" }
%"class.absl::optional_internal::optional_data.1979" = type { %"class.absl::optional_internal::optional_data_base.1980" }
%"class.absl::optional_internal::optional_data_base.1980" = type { %"class.absl::optional_internal::optional_data_dtor_base.1981" }
%"class.absl::optional_internal::optional_data_dtor_base.1981" = type { i8, %union.anon.1982 }
%union.anon.1982 = type { i32 }
%"class.std::__1::unique_ptr.842" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.692", %"class.WTF::Vector.857", %"class.WTF::Vector.845", %"class.WTF::Vector.862", %"class.WTF::Vector.867", %"class.WTF::Vector.872" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.845", %"class.WTF::Vector.845", %"class.WTF::Vector.850" }
%"class.WTF::Vector.850" = type { %"class.WTF::VectorBuffer.851" }
%"class.WTF::VectorBuffer.851" = type { %"class.WTF::VectorBufferBase.852" }
%"class.WTF::VectorBufferBase.852" = type { %class.scoped_refptr.853*, i32, i32 }
%class.scoped_refptr.853 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.854" }
%"class.base::RefCountedThreadSafe.854" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.857" = type { %"class.WTF::VectorBuffer.858" }
%"class.WTF::VectorBuffer.858" = type { %"class.WTF::VectorBufferBase.859" }
%"class.WTF::VectorBufferBase.859" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.845" = type { %"class.WTF::VectorBuffer.846" }
%"class.WTF::VectorBuffer.846" = type { %"class.WTF::VectorBufferBase.847" }
%"class.WTF::VectorBufferBase.847" = type { double*, i32, i32 }
%"class.WTF::Vector.862" = type { %"class.WTF::VectorBuffer.863" }
%"class.WTF::VectorBuffer.863" = type { %"class.WTF::VectorBufferBase.864" }
%"class.WTF::VectorBufferBase.864" = type { i32*, i32, i32 }
%"class.WTF::Vector.867" = type { %"class.WTF::VectorBuffer.868" }
%"class.WTF::VectorBuffer.868" = type { %"class.WTF::VectorBufferBase.869" }
%"class.WTF::VectorBufferBase.869" = type { i32*, i32, i32 }
%"class.WTF::Vector.872" = type { %"class.WTF::VectorBuffer.873" }
%"class.WTF::VectorBuffer.873" = type { %"class.WTF::VectorBufferBase.874" }
%"class.WTF::VectorBufferBase.874" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.880" = type { %"class.std::__1::__compressed_pair.881" }
%"class.std::__1::__compressed_pair.881" = type { %"struct.std::__1::__compressed_pair_elem.882" }
%"struct.std::__1::__compressed_pair_elem.882" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.883" }
%"class.WTF::Vector.883" = type { %"class.WTF::VectorBuffer.884" }
%"class.WTF::VectorBuffer.884" = type { %"class.WTF::VectorBufferBase.885" }
%"class.WTF::VectorBufferBase.885" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.891" = type { %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.894" }
%"class.WTF::Vector.894" = type { %"class.WTF::VectorBuffer.895" }
%"class.WTF::VectorBuffer.895" = type { %"class.WTF::VectorBufferBase.896" }
%"class.WTF::VectorBufferBase.896" = type { %"class.blink::Persistent.713"*, i32, i32 }
%"class.std::__1::unique_ptr.902" = type { %"class.std::__1::__compressed_pair.903" }
%"class.std::__1::__compressed_pair.903" = type { %"struct.std::__1::__compressed_pair_elem.904" }
%"struct.std::__1::__compressed_pair_elem.904" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap.661", %"class.blink::Persistent.666" }
%"class.WTF::HashMap.661" = type { %"class.WTF::HashTable.662" }
%"class.WTF::HashTable.662" = type <{ %"struct.WTF::KeyValuePair.665"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.665" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1910 }
%class.scoped_refptr.1910 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.1911", %"class.WTF::Vector.908", %"class.WTF::Vector.1913", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.1911" = type { %"class.base::RefCounted.1912" }
%"class.base::RefCounted.1912" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.1913" = type { %"class.WTF::VectorBuffer.1914" }
%"class.WTF::VectorBuffer.1914" = type { %"class.WTF::VectorBufferBase.1915" }
%"class.WTF::VectorBufferBase.1915" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.1916 }
%union.anon.1916 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent.666" = type { %"class.blink::PersistentBase.667" }
%"class.blink::PersistentBase.667" = type { %"class.blink::HeapHashMap.668"*, %"class.blink::PersistentNodePtr" }
%"class.blink::HeapHashMap.668" = type { %"class.WTF::HashMap.671" }
%"class.WTF::HashMap.671" = type { %"class.WTF::HashTable.672" }
%"class.WTF::HashTable.672" = type <{ %"struct.WTF::KeyValuePair.674"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.674" = type { %"class.WTF::AtomicString", %"class.blink::Member.1167" }
%"class.WTF::Vector.908" = type { %"class.WTF::VectorBuffer.909" }
%"class.WTF::VectorBuffer.909" = type { %"class.WTF::VectorBufferBase.910" }
%"class.WTF::VectorBufferBase.910" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.713", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.913" }
%"class.WTF::Vector.913" = type { %"class.WTF::VectorBuffer.914" }
%"class.WTF::VectorBuffer.914" = type { %"class.WTF::VectorBufferBase.915" }
%"class.WTF::VectorBufferBase.915" = type { %class.scoped_refptr.916*, i32, i32 }
%class.scoped_refptr.916 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.762", [4 x i8] }>
%"class.blink::Persistent.919" = type { %"class.blink::PersistentBase.920" }
%"class.blink::PersistentBase.920" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.923" }
%"class.blink::Member.923" = type { %"class.blink::MemberBase.924" }
%"class.blink::MemberBase.924" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.925" = type { %class.scoped_refptr.926 }
%class.scoped_refptr.926 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.927", [4 x i8], %"class.blink::DataRef.929", %"class.blink::DataRef.933", %"class.blink::DataRef.954", %"class.blink::DataRef.963", %"class.blink::DataRef.975", %"class.blink::DataRef.979", %class.scoped_refptr.958, i32, [4 x i8] }>
%"class.WTF::RefCounted.927" = type { %"class.base::RefCounted.928" }
%"class.base::RefCounted.928" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.929" = type { %class.scoped_refptr.930 }
%class.scoped_refptr.930 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.931", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.931" = type { %"class.base::RefCounted.932" }
%"class.base::RefCounted.932" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.933" = type { %class.scoped_refptr.934 }
%class.scoped_refptr.934 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.935", %class.scoped_refptr.937, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.935" = type { %"class.base::RefCounted.936" }
%"class.base::RefCounted.936" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.937 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.938", %"class.std::__1::unique_ptr.944", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.759" }>
%"class.std::__1::unique_ptr.938" = type { %"class.std::__1::__compressed_pair.939" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.944" = type { %"class.std::__1::__compressed_pair.945" }
%"class.std::__1::__compressed_pair.945" = type { %"struct.std::__1::__compressed_pair_elem.946" }
%"struct.std::__1::__compressed_pair_elem.946" = type { %"class.blink::Path"* }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.947, i32, %"struct.std::__1::atomic.465", %"struct.std::__1::atomic.465", i8, i8 }>
%class.sk_sp.947 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.948, %class.SkTDArray.949, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.225" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.948 = type { i8*, i32, i32 }
%class.SkTDArray.949 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.950 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.225", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.950 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.455", [3 x i8] }
%"class.blink::DataRef.954" = type { %class.scoped_refptr.955 }
%class.scoped_refptr.955 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.956", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.956" = type { %"class.base::RefCounted.957" }
%"class.base::RefCounted.957" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.958, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.963" = type { %class.scoped_refptr.964 }
%class.scoped_refptr.964 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.965", [4 x i8], %class.scoped_refptr.967, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.965" = type { %"class.base::RefCounted.966" }
%"class.base::RefCounted.966" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.967 = type { %"class.base::RefCountedData.968"* }
%"class.base::RefCountedData.968" = type { %"class.base::RefCountedThreadSafe.969", %"class.WTF::Vector.970" }
%"class.base::RefCountedThreadSafe.969" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.970" = type { %"class.WTF::VectorBuffer.971" }
%"class.WTF::VectorBuffer.971" = type { %"class.WTF::VectorBufferBase.972" }
%"class.WTF::VectorBufferBase.972" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.975" = type { %class.scoped_refptr.976 }
%class.scoped_refptr.976 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.977", %class.scoped_refptr.958, %class.scoped_refptr.958, %class.scoped_refptr.958 }
%"class.WTF::RefCounted.977" = type { %"class.base::RefCounted.978" }
%"class.base::RefCounted.978" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.979" = type { %class.scoped_refptr.980 }
%class.scoped_refptr.980 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.981", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.981" = type { %"class.base::RefCounted.982" }
%"class.base::RefCounted.982" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.958 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.959", %"class.blink::Persistent.961", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.959" = type { %"class.base::RefCounted.960" }
%"class.base::RefCounted.960" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.961" = type { %"class.blink::PersistentBase.962" }
%"class.blink::PersistentBase.962" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DataRef.983" = type { %class.scoped_refptr.984 }
%class.scoped_refptr.984 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.985", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.985" = type { %"class.base::RefCounted.986" }
%"class.base::RefCounted.986" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.987" = type { %class.scoped_refptr.988 }
%class.scoped_refptr.988 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.989", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.989" = type { %"class.base::RefCounted.990" }
%"class.base::RefCounted.990" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.991" = type { %class.scoped_refptr.992 }
%class.scoped_refptr.992 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.993", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.993" = type { %"class.base::RefCounted.994" }
%"class.base::RefCounted.994" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.995" = type { %class.scoped_refptr.996 }
%class.scoped_refptr.996 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.997", %class.scoped_refptr.999 }
%"class.WTF::RefCounted.997" = type { %"class.base::RefCounted.998" }
%"class.base::RefCounted.998" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.999 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.1464", %"class.blink::StyleVariables", %class.scoped_refptr.999 }
%"class.WTF::RefCounted.1464" = type { %"class.base::RefCounted.1465" }
%"class.base::RefCounted.1465" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.1000" = type { %"class.base::RefCounted.1001" }
%"class.base::RefCounted.1001" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.1002" = type { %"class.std::__1::__compressed_pair.1003" }
%"class.std::__1::__compressed_pair.1003" = type { %"struct.std::__1::__compressed_pair_elem.1004" }
%"struct.std::__1::__compressed_pair_elem.1004" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.1005" }
%"class.std::__1::unique_ptr.1005" = type { %"class.std::__1::__compressed_pair.1006" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.1007" }
%"struct.std::__1::__compressed_pair_elem.1007" = type { %"class.WTF::Vector.1008"* }
%"class.WTF::Vector.1008" = type { %"class.WTF::VectorBuffer.1983" }
%"class.WTF::VectorBuffer.1983" = type { %"class.WTF::VectorBufferBase.1984", [32 x i8] }
%"class.WTF::VectorBufferBase.1984" = type { %class.scoped_refptr.578*, i32, i32 }
%"class.blink::SelectorFilter" = type { %"class.blink::HeapVector.1015", %"class.std::__1::unique_ptr.1027" }
%"class.blink::HeapVector.1015" = type { %"class.WTF::Vector.1018" }
%"class.WTF::Vector.1018" = type { %"class.WTF::VectorBuffer.1019" }
%"class.WTF::VectorBuffer.1019" = type { %"class.WTF::VectorBufferBase.1020" }
%"class.WTF::VectorBufferBase.1020" = type { %"class.blink::SelectorFilter::ParentStackFrame"*, i32, i32 }
%"class.blink::SelectorFilter::ParentStackFrame" = type { %"class.blink::Member.111", %"class.WTF::Vector.1021" }
%"class.WTF::Vector.1021" = type { %"class.WTF::VectorBuffer.1022" }
%"class.WTF::VectorBuffer.1022" = type { %"class.WTF::VectorBufferBase.1023", [16 x i8] }
%"class.WTF::VectorBufferBase.1023" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.1027" = type { %"class.std::__1::__compressed_pair.1028" }
%"class.std::__1::__compressed_pair.1028" = type { %"struct.std::__1::__compressed_pair_elem.1029" }
%"struct.std::__1::__compressed_pair_elem.1029" = type { %"class.WTF::BloomFilter"* }
%"class.WTF::BloomFilter" = type { [4096 x i8] }
%"class.blink::Member.1033" = type { %"class.blink::MemberBase.1034" }
%"class.blink::MemberBase.1034" = type { %"class.blink::ViewportStyleResolver"* }
%"class.blink::ViewportStyleResolver" = type opaque
%"class.blink::Member.1035" = type { %"class.blink::MemberBase.1036" }
%"class.blink::MemberBase.1036" = type { %"class.blink::MediaQueryEvaluator"* }
%"class.blink::MediaQueryEvaluator" = type <{ %"class.WTF::String", %"class.blink::Member.1039", i8, [7 x i8] }>
%"class.blink::Member.1039" = type { %"class.blink::MemberBase.1040" }
%"class.blink::MemberBase.1040" = type { %"class.blink::MediaValues"* }
%"class.blink::MediaValues" = type opaque
%"class.blink::Member.1041" = type { %"class.blink::MemberBase.1042" }
%"class.blink::MemberBase.1042" = type { %"class.blink::CSSGlobalRuleSet"* }
%"class.blink::CSSGlobalRuleSet" = type <{ %"class.blink::RuleFeatureSet", %"class.blink::Member.1063", i8, i8, [6 x i8] }>
%"class.blink::RuleFeatureSet" = type <{ %"struct.blink::RuleFeatureSet::FeatureMetadata", [4 x i8], %"class.WTF::HashMap.1045", %"class.WTF::HashMap.1045", %"class.WTF::HashMap.1045", %"class.WTF::HashMap.1050", %class.scoped_refptr.1055, %class.scoped_refptr.1062, %class.scoped_refptr.1061, %"class.WTF::Vector.181", %"class.WTF::Vector.181", i8, [7 x i8] }>
%"struct.blink::RuleFeatureSet::FeatureMetadata" = type <{ i8, i8, i8, i8, i32, i8, [3 x i8] }>
%"class.WTF::HashMap.1045" = type { %"class.WTF::HashTable.1046" }
%"class.WTF::HashTable.1046" = type <{ %"struct.WTF::KeyValuePair.1049"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1049" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1961 }
%class.scoped_refptr.1961 = type { %"class.blink::InvalidationSet"* }
%"class.blink::InvalidationSet" = type <{ %"class.WTF::RefCounted.1056", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1058", %"union.blink::InvalidationSet::Backing.1059", %"union.blink::InvalidationSet::Backing.1060", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8, [5 x i8] }>
%"class.WTF::RefCounted.1056" = type { %"class.base::RefCounted.1057" }
%"class.base::RefCounted.1057" = type { %"class.base::subtle::RefCountedBase" }
%"union.blink::InvalidationSet::Backing" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1058" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1059" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1060" = type { %"class.WTF::StringImpl"* }
%"class.blink::InvalidationFlags" = type { i8 }
%"class.blink::InvalidationSet::BackingFlags" = type { i8 }
%"class.WTF::HashMap.1050" = type { %"class.WTF::HashTable.1051" }
%"class.WTF::HashTable.1051" = type <{ %"struct.WTF::KeyValuePair.1054"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1054" = type opaque
%class.scoped_refptr.1055 = type { %"class.blink::SiblingInvalidationSet"* }
%"class.blink::SiblingInvalidationSet" = type { %"class.blink::InvalidationSet.base", i32, %class.scoped_refptr.1061, %class.scoped_refptr.1061 }
%"class.blink::InvalidationSet.base" = type <{ %"class.WTF::RefCounted.1056", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1058", %"union.blink::InvalidationSet::Backing.1059", %"union.blink::InvalidationSet::Backing.1060", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8 }>
%class.scoped_refptr.1062 = type { %"class.blink::NthSiblingInvalidationSet"* }
%"class.blink::NthSiblingInvalidationSet" = type { %"class.blink::SiblingInvalidationSet" }
%class.scoped_refptr.1061 = type { %"class.blink::DescendantInvalidationSet"* }
%"class.blink::DescendantInvalidationSet" = type { %"class.blink::InvalidationSet.base", [5 x i8] }
%"class.blink::Member.1063" = type { %"class.blink::MemberBase.1064" }
%"class.blink::MemberBase.1064" = type { %"class.blink::RuleSet"* }
%"class.blink::RuleSet" = type { %"class.blink::HeapHashMap.1067", %"class.blink::HeapHashMap.1067", %"class.blink::HeapHashMap.1067", %"class.blink::HeapHashMap.1067", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::HeapVector.1074", %"class.blink::RuleFeatureSet", %"class.blink::HeapVector.1110", %"class.blink::HeapVector.1118", %"class.blink::HeapVector.1126", %"class.blink::HeapVector.1143", %"class.blink::HeapVector.1151", %"class.blink::HeapVector.1159", %"class.blink::HeapVector.1172", %"class.WTF::Vector.1179", i32, %"class.blink::Member.1185" }
%"class.blink::HeapHashMap.1067" = type { %"class.WTF::HashMap.1070" }
%"class.WTF::HashMap.1070" = type { %"class.WTF::HashTable.1071" }
%"class.WTF::HashTable.1071" = type <{ %"struct.WTF::KeyValuePair.1073"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1073" = type { %"class.WTF::AtomicString", %"class.blink::Member.1971" }
%"class.blink::Member.1971" = type { %"class.blink::MemberBase.1972" }
%"class.blink::MemberBase.1972" = type { %"class.blink::HeapVector.1074"* }
%"class.blink::HeapVector.1074" = type { %"class.WTF::Vector.1077" }
%"class.WTF::Vector.1077" = type { %"class.WTF::VectorBuffer.1078" }
%"class.WTF::VectorBuffer.1078" = type { %"class.WTF::VectorBufferBase.1079" }
%"class.WTF::VectorBufferBase.1079" = type { %"class.blink::Member.1080"*, i32, i32 }
%"class.blink::Member.1080" = type { %"class.blink::MemberBase.1081" }
%"class.blink::MemberBase.1081" = type { %"class.blink::RuleData"* }
%"class.blink::RuleData" = type { %"class.blink::Member.1084", i64, [4 x i32] }
%"class.blink::Member.1084" = type { %"class.blink::MemberBase.1085" }
%"class.blink::MemberBase.1085" = type { %"class.blink::StyleRule"* }
%"class.blink::StyleRule" = type { %"class.blink::StyleRuleBase", i32, %"class.blink::CSSSelectorList", %"class.blink::Member.122", %"class.blink::Member.1105" }
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::CSSSelectorList" = type { %"class.blink::CSSSelector"* }
%"class.blink::CSSSelector" = type { i24, %"union.blink::CSSSelector::DataUnion" }
%"union.blink::CSSSelector::DataUnion" = type { %"class.WTF::AtomicString" }
%"class.blink::Member.122" = type { %"class.blink::MemberBase.123" }
%"class.blink::MemberBase.123" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::Member.1105" = type { %"class.blink::MemberBase.1106" }
%"class.blink::MemberBase.1106" = type { %"class.blink::CSSLazyPropertyParser"* }
%"class.blink::CSSLazyPropertyParser" = type { i32 (...)** }
%"class.blink::HeapVector.1110" = type { %"class.WTF::Vector.1113" }
%"class.WTF::Vector.1113" = type { %"class.WTF::VectorBuffer.1114" }
%"class.WTF::VectorBuffer.1114" = type { %"class.WTF::VectorBufferBase.1115" }
%"class.WTF::VectorBufferBase.1115" = type { %"class.blink::Member.1116"*, i32, i32 }
%"class.blink::Member.1116" = type { %"class.blink::MemberBase.1967" }
%"class.blink::MemberBase.1967" = type { %"class.blink::StyleRulePage"* }
%"class.blink::StyleRulePage" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.122", %"class.blink::CSSSelectorList" }
%"class.blink::HeapVector.1118" = type { %"class.WTF::Vector.1121" }
%"class.WTF::Vector.1121" = type { %"class.WTF::VectorBuffer.1122" }
%"class.WTF::VectorBuffer.1122" = type { %"class.WTF::VectorBufferBase.1123" }
%"class.WTF::VectorBufferBase.1123" = type { %"class.blink::Member.1124"*, i32, i32 }
%"class.blink::Member.1124" = type { %"class.blink::MemberBase.1968" }
%"class.blink::MemberBase.1968" = type { %"class.blink::StyleRuleFontFace"* }
%"class.blink::StyleRuleFontFace" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.122" }
%"class.blink::HeapVector.1126" = type { %"class.WTF::Vector.1129" }
%"class.WTF::Vector.1129" = type { %"class.WTF::VectorBuffer.1130" }
%"class.WTF::VectorBuffer.1130" = type { %"class.WTF::VectorBufferBase.1131" }
%"class.WTF::VectorBufferBase.1131" = type { %"class.blink::Member.1132"*, i32, i32 }
%"class.blink::Member.1132" = type { %"class.blink::MemberBase.1133" }
%"class.blink::MemberBase.1133" = type { %"class.blink::StyleRuleKeyframes"* }
%"class.blink::StyleRuleKeyframes" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.blink::HeapVector.1134", %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::HeapVector.1134" = type { %"class.WTF::Vector.1137" }
%"class.WTF::Vector.1137" = type { %"class.WTF::VectorBuffer.1138" }
%"class.WTF::VectorBuffer.1138" = type { %"class.WTF::VectorBufferBase.1139" }
%"class.WTF::VectorBufferBase.1139" = type { %"class.blink::Member.1140"*, i32, i32 }
%"class.blink::Member.1140" = type opaque
%"class.blink::HeapVector.1143" = type { %"class.WTF::Vector.1146" }
%"class.WTF::Vector.1146" = type { %"class.WTF::VectorBuffer.1147" }
%"class.WTF::VectorBuffer.1147" = type { %"class.WTF::VectorBufferBase.1148" }
%"class.WTF::VectorBufferBase.1148" = type { %"class.blink::Member.1149"*, i32, i32 }
%"class.blink::Member.1149" = type { %"class.blink::MemberBase.1969" }
%"class.blink::MemberBase.1969" = type { %"class.blink::StyleRuleProperty"* }
%"class.blink::StyleRuleProperty" = type { %"class.blink::StyleRuleBase", %"class.WTF::String", %"class.blink::Member.122" }
%"class.blink::HeapVector.1151" = type { %"class.WTF::Vector.1154" }
%"class.WTF::Vector.1154" = type { %"class.WTF::VectorBuffer.1155" }
%"class.WTF::VectorBuffer.1155" = type { %"class.WTF::VectorBufferBase.1156" }
%"class.WTF::VectorBufferBase.1156" = type { %"class.blink::Member.1157"*, i32, i32 }
%"class.blink::Member.1157" = type { %"class.blink::MemberBase.1970" }
%"class.blink::MemberBase.1970" = type { %"class.blink::StyleRuleCounterStyle"* }
%"class.blink::StyleRuleCounterStyle" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.WTF::AtomicString", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", i32, [4 x i8] }>
%"class.blink::HeapVector.1159" = type { %"class.WTF::Vector.1162" }
%"class.WTF::Vector.1162" = type { %"class.WTF::VectorBuffer.1163" }
%"class.WTF::VectorBuffer.1163" = type { %"class.WTF::VectorBufferBase.1164" }
%"class.WTF::VectorBufferBase.1164" = type { %"class.blink::Member.1165"*, i32, i32 }
%"class.blink::Member.1165" = type { %"class.blink::MemberBase.1166" }
%"class.blink::MemberBase.1166" = type { %"class.blink::StyleRuleScrollTimeline"* }
%"class.blink::StyleRuleScrollTimeline" = type { %"class.blink::StyleRuleBase", %"class.WTF::AtomicString", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167", %"class.blink::Member.1167" }
%"class.blink::HeapVector.1172" = type { %"class.WTF::Vector.1175" }
%"class.WTF::Vector.1175" = type { %"class.WTF::VectorBuffer.1176" }
%"class.WTF::VectorBuffer.1176" = type { %"class.WTF::VectorBufferBase.1177" }
%"class.WTF::VectorBufferBase.1177" = type { %"class.blink::MinimalRuleData"*, i32, i32 }
%"class.blink::MinimalRuleData" = type { %"class.blink::Member.1084", i32, i32 }
%"class.WTF::Vector.1179" = type { %"class.WTF::VectorBuffer.1180" }
%"class.WTF::VectorBuffer.1180" = type { %"class.WTF::VectorBufferBase.1181" }
%"class.WTF::VectorBufferBase.1181" = type { %"class.blink::MediaQuerySetResult"*, i32, i32 }
%"class.blink::MediaQuerySetResult" = type <{ %class.scoped_refptr.1182, i8, [7 x i8] }>
%class.scoped_refptr.1182 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::Member.1185" = type { %"class.blink::MemberBase.1186" }
%"class.blink::MemberBase.1186" = type { %"class.blink::RuleSet::PendingRuleMaps"* }
%"class.blink::RuleSet::PendingRuleMaps" = type { %"class.blink::HeapHashMap.1189", %"class.blink::HeapHashMap.1189", %"class.blink::HeapHashMap.1189", %"class.blink::HeapHashMap.1189" }
%"class.blink::HeapHashMap.1189" = type { %"class.WTF::HashMap.1192" }
%"class.WTF::HashMap.1192" = type { %"class.WTF::HashTable.1193" }
%"class.WTF::HashTable.1193" = type <{ %"struct.WTF::KeyValuePair.1195"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1195" = type opaque
%"class.blink::PendingInvalidations" = type { %"class.blink::HeapHashMap.1196" }
%"class.blink::HeapHashMap.1196" = type { %"class.WTF::HashMap.1199" }
%"class.WTF::HashMap.1199" = type { %"class.WTF::HashTable.1200" }
%"class.WTF::HashTable.1200" = type <{ %"struct.WTF::KeyValuePair.1202"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1202" = type { %"class.blink::Member.92", %"class.blink::NodeInvalidationSets" }
%"class.blink::NodeInvalidationSets" = type { %"class.WTF::Vector.1962", %"class.WTF::Vector.1962" }
%"class.WTF::Vector.1962" = type { %"class.WTF::VectorBuffer.1963" }
%"class.WTF::VectorBuffer.1963" = type { %"class.WTF::VectorBufferBase.1964" }
%"class.WTF::VectorBufferBase.1964" = type { %class.scoped_refptr.1961*, i32, i32 }
%"class.blink::StyleInvalidationRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::StyleTraversalRoot.base" = type <{ i32 (...)**, %"class.blink::Member.84", i32 }>
%"class.blink::StyleRecalcRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::LayoutTreeRebuildRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::HeapHashSet.1203" = type { %"class.WTF::HashSet.1206" }
%"class.WTF::HashSet.1206" = type { %"class.WTF::HashTable.1207" }
%"class.WTF::HashTable.1207" = type <{ %"class.blink::Member.111"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1209" = type { %"class.blink::MemberBase.1210" }
%"class.blink::MemberBase.1210" = type { %"class.blink::CSSFontSelector"* }
%"class.blink::CSSFontSelector" = type opaque
%"class.blink::HeapHashMap.1211" = type { %"class.WTF::HashMap.1214" }
%"class.WTF::HashMap.1214" = type { %"class.WTF::HashTable.1215" }
%"class.WTF::HashTable.1215" = type <{ %"struct.WTF::KeyValuePair.1217"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1217" = type opaque
%"class.blink::HeapHashMap.1218" = type { %"class.WTF::HashMap.1221" }
%"class.WTF::HashMap.1221" = type { %"class.WTF::HashTable.1222" }
%"class.WTF::HashTable.1222" = type <{ %"struct.WTF::KeyValuePair.1224"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1224" = type opaque
%"class.std::__1::unique_ptr.1225" = type { %"class.std::__1::__compressed_pair.1226" }
%"class.std::__1::__compressed_pair.1226" = type { %"struct.std::__1::__compressed_pair_elem.1227" }
%"struct.std::__1::__compressed_pair_elem.1227" = type { %"class.blink::StyleResolverStats"* }
%"class.blink::StyleResolverStats" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.blink::HeapVector.1231" = type { %"class.WTF::Vector.1234" }
%"class.WTF::Vector.1234" = type { %"class.WTF::VectorBuffer.1235" }
%"class.WTF::VectorBuffer.1235" = type { %"class.WTF::VectorBufferBase.1236" }
%"class.WTF::VectorBufferBase.1236" = type { %"struct.std::__1::pair.1237"*, i32, i32 }
%"struct.std::__1::pair.1237" = type opaque
%"class.blink::HeapVector.514" = type { %"class.WTF::Vector.517" }
%"class.WTF::Vector.517" = type { %"class.WTF::VectorBuffer.518" }
%"class.WTF::VectorBuffer.518" = type { %"class.WTF::VectorBufferBase.519" }
%"class.WTF::VectorBufferBase.519" = type { %"struct.std::__1::pair.520"*, i32, i32 }
%"struct.std::__1::pair.520" = type opaque
%"class.blink::HeapHashSet.1239" = type { %"class.WTF::HashSet.1242" }
%"class.WTF::HashSet.1242" = type { %"class.WTF::HashTable.1243" }
%"class.WTF::HashTable.1243" = type <{ %"class.blink::WeakMember.1245"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1245" = type { %"class.blink::MemberBase.159" }
%"class.blink::HeapHashMap.1246" = type { %"class.WTF::HashMap.1249" }
%"class.WTF::HashMap.1249" = type { %"class.WTF::HashTable.1250" }
%"class.WTF::HashTable.1250" = type <{ %"struct.WTF::KeyValuePair.1252"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1252" = type { %"class.WTF::AtomicString", %"class.blink::Member.1132" }
%"class.blink::Member.1253" = type { %"class.blink::MemberBase.1254" }
%"class.blink::MemberBase.1254" = type { %"class.blink::CounterStyleMap"* }
%"class.blink::CounterStyleMap" = type opaque
%"class.blink::HeapHashMap.1255" = type { %"class.WTF::HashMap.1258" }
%"class.WTF::HashMap.1258" = type { %"class.WTF::HashTable.1259" }
%"class.WTF::HashTable.1259" = type <{ %"struct.WTF::KeyValuePair.1261"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1261" = type opaque
%class.scoped_refptr.1262 = type { %"class.blink::DocumentStyleEnvironmentVariables"* }
%"class.blink::DocumentStyleEnvironmentVariables" = type opaque
%class.scoped_refptr.658 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.659", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.659" = type { %"class.base::RefCounted.660" }
%"class.base::RefCounted.660" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.1167" = type { %"class.blink::MemberBase.1168" }
%"class.blink::MemberBase.1168" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::HeapHashSet.1263" = type { %"class.WTF::HashSet.1266" }
%"class.WTF::HashSet.1266" = type { %"class.WTF::HashTable.1267" }
%"class.WTF::HashTable.1267" = type <{ %"class.blink::Member.1269"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1269" = type opaque
%"class.blink::Member.1270" = type { %"class.blink::MemberBase.1271" }
%"class.blink::MemberBase.1271" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.86", %"class.blink::HeapVector.152" }
%"class.blink::Member.1272" = type { %"class.blink::MemberBase.1273" }
%"class.blink::MemberBase.1273" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.1274" = type { %"class.blink::MemberBase.1275" }
%"class.blink::MemberBase.1275" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.1276" = type { %"class.WTF::HashMap.1279" }
%"class.WTF::HashMap.1279" = type { %"class.WTF::HashTable.1280" }
%"class.WTF::HashTable.1280" = type <{ %"struct.WTF::KeyValuePair.1282"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1282" = type opaque
%"class.WTF::Vector.1283" = type { %"class.WTF::VectorBuffer.1284" }
%"class.WTF::VectorBuffer.1284" = type { %"class.WTF::VectorBufferBase.1285" }
%"class.WTF::VectorBufferBase.1285" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.1288" = type { %"class.blink::MemberBase.1289" }
%"class.blink::MemberBase.1289" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.1290" = type { %"class.blink::MemberBase.1291" }
%"class.blink::MemberBase.1291" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.111" = type { %"class.blink::MemberBase.112" }
%"class.blink::MemberBase.112" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.116" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.113 }
%class.scoped_refptr.113 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.114", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.114" = type { %"class.base::RefCounted.115" }
%"class.base::RefCounted.115" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.116" = type { %"class.blink::MemberBase.117" }
%"class.blink::MemberBase.117" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.120", %"class.blink::Member.122", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.120" = type { %"class.WTF::SingleThreadedBitField.121" }
%"class.WTF::SingleThreadedBitField.121" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.126 }
%class.scoped_refptr.126 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.127", %"class.WTF::AtomicString", %"class.WTF::Vector.129" }
%"class.WTF::RefCounted.127" = type { %"class.base::RefCounted.128" }
%"class.base::RefCounted.128" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.129" = type { %"class.WTF::VectorBuffer.130" }
%"class.WTF::VectorBuffer.130" = type { %"class.WTF::VectorBufferBase.131", [32 x i8] }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.1292" = type { %"class.blink::MemberBase.1293" }
%"class.blink::MemberBase.1293" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.1294" = type { %"class.WTF::Vector.1297" }
%"class.WTF::Vector.1297" = type { %"class.WTF::VectorBuffer.1298" }
%"class.WTF::VectorBuffer.1298" = type { %"class.WTF::VectorBufferBase.1299" }
%"class.WTF::VectorBufferBase.1299" = type { %"class.blink::Member.1300"*, i32, i32 }
%"class.blink::Member.1300" = type opaque
%"class.std::__1::unique_ptr.1302" = type { %"class.std::__1::__compressed_pair.1303" }
%"class.std::__1::__compressed_pair.1303" = type { %"struct.std::__1::__compressed_pair_elem.1304" }
%"struct.std::__1::__compressed_pair_elem.1304" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.1308" = type { %"class.WTF::HashSet.1311" }
%"class.WTF::HashSet.1311" = type { %"class.WTF::HashTable.1312" }
%"class.WTF::HashTable.1312" = type <{ %"class.blink::WeakMember.1314"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1314" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.1315", i32, [4 x i8] }>
%"class.WTF::Vector.1315" = type { %"class.WTF::VectorBuffer.1316" }
%"class.WTF::VectorBuffer.1316" = type { %"class.WTF::VectorBufferBase.1317" }
%"class.WTF::VectorBufferBase.1317" = type { %"struct.std::__1::pair.1318"*, i32, i32 }
%"struct.std::__1::pair.1318" = type opaque
%"class.blink::Member.1321" = type { %"class.blink::MemberBase.1322" }
%"class.blink::MemberBase.1322" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.1323" = type { %"class.WTF::VectorBuffer.1324" }
%"class.WTF::VectorBuffer.1324" = type { %"class.WTF::VectorBufferBase.1325" }
%"class.WTF::VectorBufferBase.1325" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type <{ %"struct.blink::PhysicalRect", i8, [3 x i8] }>
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.std::__1::unique_ptr.1328" = type { %"class.std::__1::__compressed_pair.1329" }
%"class.std::__1::__compressed_pair.1329" = type { %"struct.std::__1::__compressed_pair_elem.1330" }
%"struct.std::__1::__compressed_pair_elem.1330" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.134" = type { %"class.WTF::Vector.137" }
%"class.WTF::Vector.137" = type { %"class.WTF::VectorBuffer.138" }
%"class.WTF::VectorBuffer.138" = type { %"class.WTF::VectorBufferBase.139" }
%"class.WTF::VectorBufferBase.139" = type { %"class.blink::Member.111"*, i32, i32 }
%"class.blink::HeapVector.1334" = type { %"class.WTF::Vector.1337" }
%"class.WTF::Vector.1337" = type { %"class.WTF::VectorBuffer.1338" }
%"class.WTF::VectorBuffer.1338" = type { %"class.WTF::VectorBufferBase.1339" }
%"class.WTF::VectorBufferBase.1339" = type { %"class.blink::Member.1340"*, i32, i32 }
%"class.blink::Member.1340" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.94" }
%"class.blink::Member.1342" = type { %"class.blink::MemberBase.1343" }
%"class.blink::MemberBase.1343" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1344" = type { %"class.blink::MemberBase.1345" }
%"class.blink::MemberBase.1345" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1346" = type { %"class.blink::MemberBase.1347" }
%"class.blink::MemberBase.1347" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1348" = type { %"class.blink::MemberBase.1349" }
%"class.blink::MemberBase.1349" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1350" = type { %"class.blink::MemberBase.1351" }
%"class.blink::MemberBase.1351" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1352" = type { %"class.WTF::HashTable.1353" }
%"class.WTF::HashTable.1353" = type <{ %"struct.WTF::KeyValuePair.1356"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1356" = type opaque
%"class.blink::Member.1357" = type { %"class.blink::MemberBase.1358" }
%"class.blink::MemberBase.1358" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1359" = type { %"class.blink::MemberBase.1360" }
%"class.blink::MemberBase.1360" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1361" = type { %"class.blink::MemberBase.1362" }
%"class.blink::MemberBase.1362" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1363" = type { %"class.blink::MemberBase.1364" }
%"class.blink::MemberBase.1364" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.470", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.461, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.461 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.462" }>
%"class.base::RefCountedThreadSafe.462" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.463 }
%class.scoped_refptr.463 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::WeakMember.470" = type { %"class.blink::MemberBase.95" }
%"class.blink::HeapHashSet.1365" = type { %"class.WTF::HashSet.1368" }
%"class.WTF::HashSet.1368" = type { %"class.WTF::HashTable.1369" }
%"class.WTF::HashTable.1369" = type <{ %"class.blink::Member.1371"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1371" = type opaque
%"class.blink::Member.1372" = type { %"class.blink::MemberBase.1373" }
%"class.blink::MemberBase.1373" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1374" = type { %"class.blink::MemberBase.1375" }
%"class.blink::MemberBase.1375" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1376" = type { %"class.blink::MemberBase.1377" }
%"class.blink::MemberBase.1377" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1378" = type { %"class.blink::MemberBase.1379" }
%"class.blink::MemberBase.1379" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1380" = type { %"class.blink::MemberBase.1381" }
%"class.blink::MemberBase.1381" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1382" = type { %"class.std::__1::__compressed_pair.1383" }
%"class.std::__1::__compressed_pair.1383" = type { %"struct.std::__1::__compressed_pair_elem.1384" }
%"struct.std::__1::__compressed_pair_elem.1384" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1388" = type { %"class.std::__1::__compressed_pair.1389" }
%"class.std::__1::__compressed_pair.1389" = type { %"struct.std::__1::__compressed_pair_elem.1390" }
%"struct.std::__1::__compressed_pair_elem.1390" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type { %"class.WTF::HashSet.197", %"class.WTF::HashSet.197", %"class.WTF::HashSet.197", %"class.WTF::HashSet.197", %"class.WTF::HashSet.197", %"class.WTF::HashSet.197", i32, [4 x i8], %"class.WTF::HashMap.1391", %"class.WTF::HashMap.1391", %"class.WTF::HashMap.1391", %"class.WTF::HashMap.1391", %"class.WTF::HashMap.1391", %"class.WTF::HashMap.1391", %"class.WTF::HashMap.1391", i64, i64, %"class.ukm::UkmRecorder"*, i64, %"class.blink::TaskRunnerTimer" }
%"class.WTF::HashMap.1391" = type { %"class.WTF::HashTable.1392" }
%"class.WTF::HashTable.1392" = type <{ %"struct.WTF::KeyValuePair.1395"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1395" = type opaque
%"class.blink::TaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::FontMatchingMetrics"*, { i64, i64 } }
%"class.blink::Member.1399" = type { %"class.blink::MemberBase.1400" }
%"class.blink::MemberBase.1400" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1401" = type { %"class.blink::MemberBase.1402" }
%"class.blink::MemberBase.1402" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1403" = type { %"class.blink::MemberBase.1404" }
%"class.blink::MemberBase.1404" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1405" = type { %"class.blink::MemberBase.1406" }
%"class.blink::MemberBase.1406" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.1407" = type { %"class.WTF::VectorBuffer.1408" }
%"class.WTF::VectorBuffer.1408" = type { %"class.WTF::VectorBufferBase.1409" }
%"class.WTF::VectorBufferBase.1409" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.1412" = type { %"class.WTF::HashMap.1415" }
%"class.WTF::HashMap.1415" = type { %"class.WTF::HashTable.1416" }
%"class.WTF::HashTable.1416" = type <{ %"struct.WTF::KeyValuePair.1418"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1418" = type opaque
%"class.blink::Member.1419" = type { %"class.blink::MemberBase.1420" }
%"class.blink::MemberBase.1420" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1421" = type { %"class.std::__1::__compressed_pair.1422" }
%"class.std::__1::__compressed_pair.1422" = type { %"struct.std::__1::__compressed_pair_elem.1423" }
%"struct.std::__1::__compressed_pair_elem.1423" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1427" = type { %"class.blink::MemberBase.1428" }
%"class.blink::MemberBase.1428" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1429" = type { %"class.blink::MemberBase.1430" }
%"class.blink::MemberBase.1430" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1431" = type { %"class.WTF::HashMap.1434" }
%"class.WTF::HashMap.1434" = type { %"class.WTF::HashTable.1435" }
%"class.WTF::HashTable.1435" = type <{ %"struct.WTF::KeyValuePair.1437"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1437" = type opaque
%"class.blink::HeapObserverSet.1438" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1439" }
%"class.blink::HeapHashSet.1439" = type { %"class.WTF::HashSet.1442" }
%"class.WTF::HashSet.1442" = type { %"class.WTF::HashTable.1443" }
%"class.WTF::HashTable.1443" = type <{ %"class.blink::WeakMember.1445"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1445" = type opaque
%"class.blink::Member.1446" = type { %"class.blink::MemberBase.1447" }
%"class.blink::MemberBase.1447" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1448" = type { %"class.blink::MemberBase.1449" }
%"class.blink::MemberBase.1449" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.94", %"class.blink::HeapHashSet.1455", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1462", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1455" = type { %"class.WTF::HashSet.1458" }
%"class.WTF::HashSet.1458" = type { %"class.WTF::HashTable.1459" }
%"class.WTF::HashTable.1459" = type <{ %"class.blink::Member.1461"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1461" = type opaque
%"class.blink::HeapTaskRunnerTimer.1462" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1463", { i64, i64 } }
%"class.blink::WeakMember.1463" = type { %"class.blink::MemberBase.1449" }
%"class.blink::WeakMember.1450" = type { %"class.blink::MemberBase.85" }
%"class.blink::Member.1451" = type { %"class.blink::MemberBase.1452" }
%"class.blink::MemberBase.1452" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.96" = type { %"class.blink::MemberBase.97" }
%"class.blink::MemberBase.97" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.100" }
%"class.blink::HeapHashMap.100" = type { %"class.WTF::HashMap.103" }
%"class.WTF::HashMap.103" = type { %"class.WTF::HashTable.104" }
%"class.WTF::HashTable.104" = type <{ %"struct.WTF::KeyValuePair.106"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.106" = type { %"class.WTF::AtomicString", %"class.blink::Member.107" }
%"class.blink::Member.107" = type { %"class.blink::MemberBase.108" }
%"class.blink::MemberBase.108" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.111", i32, %"class.blink::HeapVector.134" }
%"class.blink::Member.141" = type { %"class.blink::MemberBase.142" }
%"class.blink::MemberBase.142" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.143" = type { %"class.blink::MemberBase.144" }
%"class.blink::MemberBase.144" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.145" = type { %"class.blink::MemberBase.146" }
%"class.blink::MemberBase.146" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.147" }
%"class.blink::Member.147" = type { %"class.blink::MemberBase.148" }
%"class.blink::MemberBase.148" = type { %"class.blink::HeapHashMap.149"* }
%"class.blink::HeapHashMap.149" = type opaque
%"class.blink::Member.150" = type { %"class.blink::MemberBase.151" }
%"class.blink::MemberBase.151" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.152" = type { %"class.WTF::Vector.155" }
%"class.WTF::Vector.155" = type { %"class.WTF::VectorBuffer.156" }
%"class.WTF::VectorBuffer.156" = type { %"class.WTF::VectorBufferBase.157" }
%"class.WTF::VectorBufferBase.157" = type { %"class.blink::Member.158"*, i32, i32 }
%"class.blink::Member.88" = type { %"class.blink::MemberBase.89" }
%"class.blink::MemberBase.89" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::CSSProperty"**, i32, i32 }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.1491" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.1491" = type { %"class.v8::TracedReference.1492" }
%"class.v8::TracedReference.1492" = type { %"class.v8::BasicTracedReference.1493" }
%"class.v8::BasicTracedReference.1493" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::CSSIdentifierValue" = type { %"class.blink::CSSValue", i32 }
%"class.blink::CSSNumericLiteralValue" = type { %"class.blink::CSSPrimitiveValue", double }
%"class.blink::CSSPrimitiveValue" = type { %"class.blink::CSSValue" }
%"class.blink::PseudoElement" = type <{ %"class.blink::Element", i8, [7 x i8] }>
%"class.blink::LayoutObject" = type { %"class.blink::ImageResourceObserver", %"class.blink::DisplayItemClient.base", i8, [2 x i8], %"class.blink::LayoutObject::LayoutObjectBitfields", %class.scoped_refptr.578, %"class.blink::UntracedMember", %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::FragmentData" }
%"class.blink::ImageResourceObserver" = type { i32 (...)** }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::LayoutObject::LayoutObjectBitfields" = type { [12 x i8] }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.1494" }
%"class.blink::MemberBase.1494" = type { %"class.blink::Node"* }
%"class.blink::FragmentData" = type { %"struct.blink::PhysicalOffset", %"class.std::__1::unique_ptr.1495" }
%"class.std::__1::unique_ptr.1495" = type { %"class.std::__1::__compressed_pair.1496" }
%"class.std::__1::__compressed_pair.1496" = type { %"struct.std::__1::__compressed_pair_elem.1497" }
%"struct.std::__1::__compressed_pair_elem.1497" = type { %"struct.blink::FragmentData::RareData"* }
%"struct.blink::FragmentData::RareData" = type { %"class.std::__1::unique_ptr.1498", i64, %"struct.blink::PhysicalOffset", %"class.blink::LayoutUnit", %"class.std::__1::unique_ptr.1504", %"class.std::__1::unique_ptr.1620", i8, %"class.absl::optional.1626", %class.scoped_refptr.1602, %"class.blink::CullRect", %"class.blink::CullRect", %"class.std::__1::unique_ptr.1631" }
%"class.std::__1::unique_ptr.1498" = type { %"class.std::__1::__compressed_pair.1499" }
%"class.std::__1::__compressed_pair.1499" = type { %"struct.std::__1::__compressed_pair_elem.1500" }
%"struct.std::__1::__compressed_pair_elem.1500" = type { %"class.blink::PaintLayer"* }
%"class.blink::PaintLayer" = type opaque
%"class.std::__1::unique_ptr.1504" = type { %"class.std::__1::__compressed_pair.1505" }
%"class.std::__1::__compressed_pair.1505" = type { %"struct.std::__1::__compressed_pair_elem.1506" }
%"struct.std::__1::__compressed_pair_elem.1506" = type { %"class.blink::ObjectPaintProperties"* }
%"class.blink::ObjectPaintProperties" = type { %class.scoped_refptr.1507, %class.scoped_refptr.1507, %class.scoped_refptr.1507, %class.scoped_refptr.1507, %class.scoped_refptr.1507, %class.scoped_refptr.1507, %class.scoped_refptr.1542, %class.scoped_refptr.1558, %class.scoped_refptr.1559, %class.scoped_refptr.1559, %class.scoped_refptr.1559, %class.scoped_refptr.1559, %class.scoped_refptr.1559, %class.scoped_refptr.1559, %class.scoped_refptr.1592, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1593, %class.scoped_refptr.1616 }
%class.scoped_refptr.1507 = type { %"class.blink::TransformPaintPropertyNode"* }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.1524" }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.1508", i8, i8, %class.scoped_refptr.1510, i32, i32 }
%"class.WTF::RefCounted.1508" = type { %"class.base::RefCounted.1509" }
%"class.base::RefCounted.1509" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.1510 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.1517, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.1518", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.1511" }
%"class.std::__1::unique_ptr.1511" = type { %"class.std::__1::__compressed_pair.1512" }
%"class.std::__1::__compressed_pair.1512" = type { %"struct.std::__1::__compressed_pair_elem.1513" }
%"struct.std::__1::__compressed_pair_elem.1513" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%class.scoped_refptr.1517 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.1543", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.1543" = type { %"class.WTF::RefCounted.1544", i8, i8, %class.scoped_refptr.1517, i32, i32 }
%"class.WTF::RefCounted.1544" = type { %"class.base::RefCounted.1545" }
%"class.base::RefCounted.1545" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.1546" }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntSize" = type { i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.1546" = type { %"class.absl::optional_internal::optional_data.1547" }
%"class.absl::optional_internal::optional_data.1547" = type { %"class.absl::optional_internal::optional_data_base.1548" }
%"class.absl::optional_internal::optional_data_base.1548" = type { %"class.absl::optional_internal::optional_data_dtor_base.1549" }
%"class.absl::optional_internal::optional_data_dtor_base.1549" = type { i8, %union.anon.1550 }
%union.anon.1550 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector.1551", %"struct.cc::TargetSnapAreaElementIds" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector.1551" = type { %"class.std::__1::__vector_base.1552" }
%"class.std::__1::__vector_base.1552" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.1553" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"class.std::__1::__compressed_pair.1553" = type { %"struct.std::__1::__compressed_pair_elem.1554" }
%"struct.std::__1::__compressed_pair_elem.1554" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.1518" = type { %"class.std::__1::__compressed_pair.1519" }
%"class.std::__1::__compressed_pair.1519" = type { %"struct.std::__1::__compressed_pair_elem.1520" }
%"struct.std::__1::__compressed_pair_elem.1520" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.1524" = type { %"class.std::__1::__compressed_pair.1525" }
%"class.std::__1::__compressed_pair.1525" = type { %"struct.std::__1::__compressed_pair_elem.1526" }
%"struct.std::__1::__compressed_pair_elem.1526" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.1527", %"class.std::__1::unique_ptr.1533", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1527" = type { %"class.std::__1::__compressed_pair.1528" }
%"class.std::__1::__compressed_pair.1528" = type { %"struct.std::__1::__compressed_pair_elem.1529" }
%"struct.std::__1::__compressed_pair_elem.1529" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.1533" = type { %"class.std::__1::__compressed_pair.1534" }
%"class.std::__1::__compressed_pair.1534" = type { %"struct.std::__1::__compressed_pair_elem.1535" }
%"struct.std::__1::__compressed_pair_elem.1535" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%class.scoped_refptr.1542 = type { %"class.blink::ScrollPaintPropertyNode"* }
%class.scoped_refptr.1558 = type { %"class.blink::TransformPaintPropertyNodeAlias"* }
%"class.blink::TransformPaintPropertyNodeAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias" }
%class.scoped_refptr.1559 = type { %"class.blink::EffectPaintPropertyNode"* }
%"class.blink::EffectPaintPropertyNode" = type { %"class.blink::EffectPaintPropertyNodeOrAlias", %"struct.blink::EffectPaintPropertyNode::State" }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.1560" }
%"class.blink::PaintPropertyNode.1560" = type { %"class.WTF::RefCounted.1561", i8, i8, %class.scoped_refptr.1563, i32, i32 }
%"class.WTF::RefCounted.1561" = type { %"class.base::RefCounted.1562" }
%"class.base::RefCounted.1562" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.1563 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"struct.blink::EffectPaintPropertyNode::State" = type <{ %class.scoped_refptr.1510, %class.scoped_refptr.1564, %"class.blink::CompositorFilterOperations", %"class.std::__1::unique_ptr.1579", float, i32, i64, %"struct.cc::ElementId", %"class.cc::DocumentTransitionSharedElementId", i8, i8, i8, [5 x i8] }>
%class.scoped_refptr.1564 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.1594" }
%"class.blink::PaintPropertyNode.1594" = type { %"class.WTF::RefCounted.1595", i8, i8, %class.scoped_refptr.1564, i32, i32 }
%"class.WTF::RefCounted.1595" = type { %"class.base::RefCounted.1596" }
%"class.base::RefCounted.1596" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.1565" }
%"class.std::__1::vector.1565" = type { %"class.std::__1::__vector_base.1566" }
%"class.std::__1::__vector_base.1566" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.1574" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.1477, [20 x float], i32, [4 x i8], %"class.std::__1::vector.1567", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector.1567" = type { %"class.std::__1::__vector_base.1568" }
%"class.std::__1::__vector_base.1568" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.1569" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.1569" = type { %"struct.std::__1::__compressed_pair_elem.1570" }
%"struct.std::__1::__compressed_pair_elem.1570" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.1574" = type { %"struct.std::__1::__compressed_pair_elem.1575" }
%"struct.std::__1::__compressed_pair_elem.1575" = type { %"class.cc::FilterOperation"* }
%"class.std::__1::unique_ptr.1579" = type { %"class.std::__1::__compressed_pair.1580" }
%"class.std::__1::__compressed_pair.1580" = type { %"struct.std::__1::__compressed_pair_elem.1581" }
%"struct.std::__1::__compressed_pair_elem.1581" = type { %"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo"* }
%"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo" = type { %"class.blink::CompositorFilterOperations", %"class.gfx::RRectF", %"struct.cc::ElementId" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.1585" }
%"class.std::__1::vector.1585" = type { %"class.std::__1::__vector_base.1586" }
%"class.std::__1::__vector_base.1586" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1587" }
%"class.std::__1::__compressed_pair.1587" = type { %"struct.std::__1::__compressed_pair_elem.1588" }
%"struct.std::__1::__compressed_pair_elem.1588" = type { i32* }
%class.scoped_refptr.1592 = type { %"class.blink::EffectPaintPropertyNodeAlias"* }
%"class.blink::EffectPaintPropertyNodeAlias" = type { %"class.blink::EffectPaintPropertyNodeOrAlias" }
%class.scoped_refptr.1593 = type { %"class.blink::ClipPaintPropertyNode"* }
%"class.blink::ClipPaintPropertyNode" = type { %"class.blink::ClipPaintPropertyNodeOrAlias", %"struct.blink::ClipPaintPropertyNode::State", %"class.std::__1::unique_ptr.1605" }
%"struct.blink::ClipPaintPropertyNode::State" = type { %class.scoped_refptr.1510, %"class.absl::optional.1597", %class.scoped_refptr.1602, %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect" }
%"class.absl::optional.1597" = type { %"class.absl::optional_internal::optional_data.1598" }
%"class.absl::optional_internal::optional_data.1598" = type { %"class.absl::optional_internal::optional_data_base.1599" }
%"class.absl::optional_internal::optional_data_base.1599" = type { %"class.absl::optional_internal::optional_data_dtor_base.1600" }
%"class.absl::optional_internal::optional_data_dtor_base.1600" = type { i8, [3 x i8], %union.anon.1601 }
%union.anon.1601 = type { %"class.blink::FloatClipRect" }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.1605" = type { %"class.std::__1::__compressed_pair.1606" }
%"class.std::__1::__compressed_pair.1606" = type { %"struct.std::__1::__compressed_pair_elem.1607" }
%"struct.std::__1::__compressed_pair_elem.1607" = type { %"class.blink::GeometryMapperClipCache"* }
%"class.blink::GeometryMapperClipCache" = type <{ %"class.WTF::Vector.1608", i32, [4 x i8] }>
%"class.WTF::Vector.1608" = type { %"class.WTF::VectorBuffer.1609" }
%"class.WTF::VectorBuffer.1609" = type { %"class.WTF::VectorBufferBase.1610" }
%"class.WTF::VectorBufferBase.1610" = type { %"struct.blink::GeometryMapperClipCache::ClipCacheEntry"*, i32, i32 }
%"struct.blink::GeometryMapperClipCache::ClipCacheEntry" = type { %"struct.blink::GeometryMapperClipCache::ClipAndTransform", %"class.blink::FloatClipRect", i8, [3 x i8] }
%"struct.blink::GeometryMapperClipCache::ClipAndTransform" = type <{ %"class.blink::ClipPaintPropertyNode"*, %"class.blink::TransformPaintPropertyNode"*, i32, [4 x i8] }>
%class.scoped_refptr.1616 = type { %"class.blink::ClipPaintPropertyNodeAlias"* }
%"class.blink::ClipPaintPropertyNodeAlias" = type { %"class.blink::ClipPaintPropertyNodeOrAlias" }
%"class.std::__1::unique_ptr.1620" = type { %"class.std::__1::__compressed_pair.1621" }
%"class.std::__1::__compressed_pair.1621" = type { %"struct.std::__1::__compressed_pair_elem.1622" }
%"struct.std::__1::__compressed_pair_elem.1622" = type { %"class.blink::RefCountedPropertyTreeState"* }
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.1510, %class.scoped_refptr.1564, %class.scoped_refptr.1563 }
%"class.absl::optional.1626" = type { %"class.absl::optional_internal::optional_data.1627" }
%"class.absl::optional_internal::optional_data.1627" = type { %"class.absl::optional_internal::optional_data_base.1628" }
%"class.absl::optional_internal::optional_data_base.1628" = type { %"class.absl::optional_internal::optional_data_dtor_base.1629" }
%"class.absl::optional_internal::optional_data_dtor_base.1629" = type { i8, %union.anon.1630 }
%union.anon.1630 = type { %"class.blink::IntRect" }
%class.scoped_refptr.1602 = type { %"class.blink::RefCountedPath"* }
%"class.blink::RefCountedPath" = type { %"class.blink::Path", %"class.WTF::RefCounted.1603", [4 x i8] }
%"class.WTF::RefCounted.1603" = type { %"class.base::RefCounted.1604" }
%"class.base::RefCounted.1604" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CullRect" = type { %"class.blink::IntRect" }
%"class.std::__1::unique_ptr.1631" = type { %"class.std::__1::__compressed_pair.1632" }
%"class.std::__1::__compressed_pair.1632" = type { %"struct.std::__1::__compressed_pair_elem.1633" }
%"struct.std::__1::__compressed_pair_elem.1633" = type { %"class.blink::FragmentData"* }
%"class.blink::NodeRareData" = type { %"class.blink::NodeData", %"class.blink::Member.1987", %"class.blink::Member.1989", %"class.blink::Member.1991", %"class.blink::Member.2010", %"class.blink::Member.2012" }
%"class.blink::Member.1987" = type { %"class.blink::MemberBase.1988" }
%"class.blink::MemberBase.1988" = type { %"class.blink::NodeRenderingData"* }
%"class.blink::NodeRenderingData" = type { %"class.blink::NodeData", %"class.blink::LayoutObject"*, %class.scoped_refptr.578 }
%"class.blink::Member.1989" = type { %"class.blink::MemberBase.1990" }
%"class.blink::MemberBase.1990" = type { %"class.blink::NodeListsNodeData"* }
%"class.blink::NodeListsNodeData" = type opaque
%"class.blink::Member.1991" = type { %"class.blink::MemberBase.1992" }
%"class.blink::MemberBase.1992" = type { %"class.blink::NodeMutationObserverData"* }
%"class.blink::NodeMutationObserverData" = type { %"class.blink::HeapVector.1995", %"class.blink::HeapHashSet.2004" }
%"class.blink::HeapVector.1995" = type { %"class.WTF::Vector.1998" }
%"class.WTF::Vector.1998" = type { %"class.WTF::VectorBuffer.1999" }
%"class.WTF::VectorBuffer.1999" = type { %"class.WTF::VectorBufferBase.2000" }
%"class.WTF::VectorBufferBase.2000" = type { %"class.blink::Member.2001"*, i32, i32 }
%"class.blink::Member.2001" = type { %"class.blink::MemberBase.2002" }
%"class.blink::MemberBase.2002" = type { %"class.blink::MutationObserverRegistration"* }
%"class.blink::MutationObserverRegistration" = type opaque
%"class.blink::HeapHashSet.2004" = type { %"class.WTF::HashSet.2007" }
%"class.WTF::HashSet.2007" = type { %"class.WTF::HashTable.2008" }
%"class.WTF::HashTable.2008" = type <{ %"class.blink::Member.2001"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.2010" = type { %"class.blink::MemberBase.2011" }
%"class.blink::MemberBase.2011" = type { %"class.blink::FlatTreeNodeData"* }
%"class.blink::FlatTreeNodeData" = type opaque
%"class.blink::Member.2012" = type { %"class.blink::MemberBase.2013" }
%"class.blink::MemberBase.2013" = type { %"class.blink::HeapHashSet.2014"* }
%"class.blink::HeapHashSet.2014" = type opaque
%"class.blink::CSSPropertyName" = type { i32, %"class.WTF::AtomicString" }
%"class.blink::CSSPropertyRef" = type { i32, %"class.blink::CustomProperty" }
%"class.blink::CustomProperty" = type { %"class.blink::Variable.base", %"class.WTF::AtomicString", %"class.blink::Member.1901" }
%"class.blink::Variable.base" = type { %"class.blink::Longhand.base" }
%"class.blink::Longhand.base" = type { %"class.blink::CSSProperty.base" }
%"class.blink::CSSProperty.base" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8 }>
%"class.blink::Member.1901" = type { %"class.blink::MemberBase.1902" }
%"class.blink::MemberBase.1902" = type { %"class.blink::PropertyRegistration"* }
%"class.blink::PropertyRegistration" = type <{ %"class.blink::CSSSyntaxDefinition", i8, [7 x i8], %"class.blink::Member.1167", %class.scoped_refptr.1910, %"class.WTF::Vector.1920", i8, [7 x i8] }>
%"class.blink::CSSSyntaxDefinition" = type { %"class.WTF::Vector.1905" }
%"class.WTF::Vector.1905" = type { %"class.WTF::VectorBuffer.1906" }
%"class.WTF::VectorBuffer.1906" = type { %"class.WTF::VectorBufferBase.1907" }
%"class.WTF::VectorBufferBase.1907" = type { %"class.blink::CSSSyntaxComponent"*, i32, i32 }
%"class.blink::CSSSyntaxComponent" = type <{ i32, [4 x i8], %"class.WTF::String", i32, [4 x i8] }>
%"class.WTF::Vector.1920" = type { %"class.WTF::VectorBuffer.1921" }
%"class.WTF::VectorBuffer.1921" = type { %"class.WTF::VectorBufferBase.1922" }
%"class.WTF::VectorBufferBase.1922" = type { %"class.std::__1::unique_ptr.1923"*, i32, i32 }
%"class.std::__1::unique_ptr.1923" = type opaque
%"class.WTF::HashTable.2021" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::HTMLFrameOwnerElement" = type <{ %"class.blink::HTMLElement", %"class.blink::FrameOwner", %"class.blink::Member.1640", %"class.blink::Member.1642", %"struct.blink::FramePolicy", %"class.blink::Member.1667", i8, i8, [6 x i8] }>
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::FrameOwner" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.1640" = type { %"class.blink::MemberBase.1641" }
%"class.blink::MemberBase.1641" = type { %"class.blink::Frame"* }
%"class.blink::Frame" = type { i32 (...)**, %"class.blink::FrameTree", %"class.blink::Member.1671", %"class.blink::Member.1673", %"class.blink::Member.1675", i8, i32, i8, i32, %"class.blink::Member.1877", %"class.blink::Member.1698", %"class.blink::FrameLifecycle", %"class.blink::Member.1640", %"class.blink::Member.1640", %"class.blink::Member.1640", %"class.blink::Member.1640", %"class.blink::Member.1640", %"class.blink::Member.1640", %"class.blink::Member.1879", %"class.blink::NavigationRateLimiter", i32, %"class.base::flat_map", %"class.blink::Member.1881", i8, %"class.base::UnguessableToken", %"class.absl::optional.1883", %"class.absl::optional.1888", %"class.blink::UserActivationState", i8, [7 x i8], %"class.blink::MultiToken", %"class.blink::TaskHandle", %"class.blink::OpenedFrameTracker" }
%"class.blink::FrameTree" = type <{ %"class.blink::Member.1640", %"class.WTF::AtomicString", i32, i8, i8, [2 x i8] }>
%"class.blink::Member.1671" = type { %"class.blink::MemberBase.1672" }
%"class.blink::MemberBase.1672" = type { %"class.blink::Page"* }
%"class.blink::Page" = type opaque
%"class.blink::Member.1673" = type { %"class.blink::MemberBase.1674" }
%"class.blink::MemberBase.1674" = type { %"class.blink::FrameOwner"* }
%"class.blink::Member.1675" = type { %"class.blink::MemberBase.1676" }
%"class.blink::MemberBase.1676" = type { %"class.blink::DOMWindow"* }
%"class.blink::DOMWindow" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::Member.1640", %"class.blink::Member.1698", %"class.blink::Member.1700", %"class.blink::Member.1702", i8, %"class.WTF::Vector.1704" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.1691" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.1679" }
%"class.blink::HeapVector.1679" = type { %"class.WTF::Vector.1682" }
%"class.WTF::Vector.1682" = type { %"class.WTF::VectorBuffer.1683" }
%"class.WTF::VectorBuffer.1683" = type { %"class.WTF::VectorBufferBase.1684", [32 x i8] }
%"class.WTF::VectorBufferBase.1684" = type { %"struct.std::__1::pair.1685"*, i32, i32 }
%"struct.std::__1::pair.1685" = type { %"class.WTF::AtomicString", %"class.blink::Member.1686" }
%"class.blink::Member.1686" = type { %"class.blink::MemberBase.1687" }
%"class.blink::MemberBase.1687" = type { %"class.blink::HeapVector.1688"* }
%"class.blink::HeapVector.1688" = type opaque
%"class.std::__1::unique_ptr.1691" = type { %"class.std::__1::__compressed_pair.1692" }
%"class.std::__1::__compressed_pair.1692" = type { %"struct.std::__1::__compressed_pair_elem.1693" }
%"struct.std::__1::__compressed_pair_elem.1693" = type { %"class.WTF::Vector.1694"* }
%"class.WTF::Vector.1694" = type opaque
%"class.blink::Member.1700" = type { %"class.blink::MemberBase.1701" }
%"class.blink::MemberBase.1701" = type { %"class.blink::InputDeviceCapabilitiesConstants"* }
%"class.blink::InputDeviceCapabilitiesConstants" = type opaque
%"class.blink::Member.1702" = type { %"class.blink::MemberBase.1703" }
%"class.blink::MemberBase.1703" = type { %"class.blink::Location"* }
%"class.blink::Location" = type opaque
%"class.WTF::Vector.1704" = type { %"class.WTF::VectorBuffer.1705" }
%"class.WTF::VectorBuffer.1705" = type { %"class.WTF::VectorBufferBase.1706" }
%"class.WTF::VectorBufferBase.1706" = type { %"struct.blink::DOMWindow::CoopAccessMonitor"*, i32, i32 }
%"struct.blink::DOMWindow::CoopAccessMonitor" = type { i32, %"class.util::TokenType", %"class.mojo::Remote", i8, %"class.WTF::String" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.mojo::Remote" = type { %"class.mojo::internal::InterfacePtrState" }
%"class.mojo::internal::InterfacePtrState" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1869" }
%"class.mojo::internal::InterfacePtrStateBase.base" = type <{ %class.scoped_refptr.1707, %"class.std::__1::unique_ptr.1819", %"class.mojo::ScopedHandleBase", [4 x i8], %class.scoped_refptr.1709, i32 }>
%class.scoped_refptr.1707 = type { %"class.mojo::internal::MultiplexRouter"* }
%"class.mojo::internal::MultiplexRouter" = type <{ %"class.mojo::MessageReceiver", %"class.mojo::AssociatedGroupController.base", [4 x i8], %"class.mojo::PipeControlMessageHandlerDelegate", i32, i8, [3 x i8], %class.scoped_refptr.1709, %"class.mojo::MessageHeaderValidator"*, %"class.mojo::MessageDispatcher", %"class.mojo::Connector", %"class.mojo::ScopedHandleBase", [4 x i8], %"class.absl::optional.1785", %"class.absl::optional.1790", %"class.absl::optional.1742", %"class.mojo::PipeControlMessageHandler", %"class.mojo::PipeControlMessageProxy", %"class.base::small_map", i32, [4 x i8], %"class.base::circular_deque", %"class.std::__1::map.1810", i8, [7 x i8], %class.scoped_refptr.1709, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%"class.mojo::AssociatedGroupController.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1708" }>
%"class.base::RefCountedThreadSafe.1708" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::PipeControlMessageHandlerDelegate" = type { i32 (...)** }
%"class.mojo::MessageHeaderValidator" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string" }
%"class.mojo::MessageDispatcher" = type { %"class.mojo::MessageReceiver", %"class.std::__1::unique_ptr.1710", %"class.std::__1::unique_ptr.1716", %"class.mojo::MessageReceiver"*, %"class.base::WeakPtrFactory.1722" }
%"class.std::__1::unique_ptr.1710" = type { %"class.std::__1::__compressed_pair.1711" }
%"class.std::__1::__compressed_pair.1711" = type { %"struct.std::__1::__compressed_pair_elem.1712" }
%"struct.std::__1::__compressed_pair_elem.1712" = type { %"class.mojo::MessageReceiver"* }
%"class.std::__1::unique_ptr.1716" = type { %"class.std::__1::__compressed_pair.1717" }
%"class.std::__1::__compressed_pair.1717" = type { %"struct.std::__1::__compressed_pair_elem.1718" }
%"struct.std::__1::__compressed_pair_elem.1718" = type { %"class.mojo::MessageFilter"* }
%"class.mojo::MessageFilter" = type { i32 (...)** }
%"class.base::WeakPtrFactory.1722" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.mojo::Connector" = type { %"class.mojo::MessageReceiver", %"class.base::OnceCallback", %"class.mojo::ScopedHandleBase", %"class.mojo::MessageReceiver"*, %class.scoped_refptr.1709, %"class.std::__1::unique_ptr.1723", %"class.absl::optional.1732", %"struct.std::__1::atomic.455", i8, i8, i8, i8, i32, i32, %"class.absl::optional.1742", %"class.std::__1::unique_ptr.1747", i8, i64, %class.scoped_refptr.1781, %"class.base::Lock", i8, i8*, %"class.mojo::Connector::RunLoopNestingObserver"*, i8, i64, %"class.mojo::ConnectionGroup::Ref", %"class.base::WeakPtr.1783", %"class.base::WeakPtrFactory.1784" }
%"class.std::__1::unique_ptr.1723" = type { %"class.std::__1::__compressed_pair.1724" }
%"class.std::__1::__compressed_pair.1724" = type { %"struct.std::__1::__compressed_pair_elem.1725" }
%"struct.std::__1::__compressed_pair_elem.1725" = type { %"class.mojo::SimpleWatcher"* }
%"class.mojo::SimpleWatcher" = type { i32, %class.scoped_refptr.1709, i8, %"class.mojo::ScopedHandleBase.1726", %class.scoped_refptr.1727, %"class.mojo::Handle", i32, %"class.base::RepeatingCallback", i8*, %"class.base::WeakPtrFactory.1728" }
%"class.mojo::ScopedHandleBase.1726" = type { %"class.mojo::TrapHandle" }
%"class.mojo::TrapHandle" = type { %"class.mojo::Handle" }
%class.scoped_refptr.1727 = type { %"class.mojo::SimpleWatcher::Context"* }
%"class.mojo::SimpleWatcher::Context" = type opaque
%"class.mojo::Handle" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.1728" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.1732" = type { %"class.absl::optional_internal::optional_data.1733" }
%"class.absl::optional_internal::optional_data.1733" = type { %"class.absl::optional_internal::optional_data_base.1734" }
%"class.absl::optional_internal::optional_data_base.1734" = type { %"class.absl::optional_internal::optional_data_dtor_base.1735" }
%"class.absl::optional_internal::optional_data_dtor_base.1735" = type { i8, %union.anon.1736 }
%union.anon.1736 = type { %"class.mojo::HandleSignalTracker" }
%"class.mojo::HandleSignalTracker" = type { %"class.base::RepeatingCallback.1737", %"struct.mojo::HandleSignalsState", %"class.mojo::SimpleWatcher", %"class.mojo::SimpleWatcher" }
%"class.base::RepeatingCallback.1737" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.mojo::HandleSignalsState" = type { %struct.MojoHandleSignalsState }
%struct.MojoHandleSignalsState = type { i32, i32 }
%"class.std::__1::unique_ptr.1747" = type { %"class.std::__1::__compressed_pair.1748" }
%"class.std::__1::__compressed_pair.1748" = type { %"struct.std::__1::__compressed_pair_elem.1749" }
%"struct.std::__1::__compressed_pair_elem.1749" = type { %"class.mojo::SyncHandleWatcher"* }
%"class.mojo::SyncHandleWatcher" = type { %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.1750", i8, i64, %class.scoped_refptr.1751, %class.scoped_refptr.1776 }
%"class.base::RepeatingCallback.1750" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.1751 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted.1752", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map.1754", %"class.std::__1::map.1765", i8, [7 x i8] }>
%"class.base::RefCounted.1752" = type { %"class.base::subtle::RefCountedBase" }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.1753 }
%class.scoped_refptr.1753 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map.1754" = type { %"class.std::__1::__tree.1755" }
%"class.std::__1::__tree.1755" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1756", %"class.std::__1::__compressed_pair.1760" }
%"class.std::__1::__compressed_pair.1756" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1760" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::map.1765" = type { %"class.std::__1::__tree.1766" }
%"class.std::__1::__tree.1766" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1767", %"class.std::__1::__compressed_pair.1771" }
%"class.std::__1::__compressed_pair.1767" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1771" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%class.scoped_refptr.1776 = type { %"class.base::RefCountedData.1777"* }
%"class.base::RefCountedData.1777" = type opaque
%class.scoped_refptr.1781 = type { %"class.mojo::internal::MessageQuotaChecker"* }
%"class.mojo::internal::MessageQuotaChecker" = type opaque
%"class.mojo::Connector::RunLoopNestingObserver" = type opaque
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.1782 }
%class.scoped_refptr.1782 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1900", [4 x i8], %"class.base::RepeatingCallback.1822", %class.scoped_refptr.1709, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::RefCountedThreadSafe.1900" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback.1822" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtr.1783" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::WeakPtrFactory.1784" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.1785" = type { %"class.absl::optional_internal::optional_data.1786" }
%"class.absl::optional_internal::optional_data.1786" = type { %"class.absl::optional_internal::optional_data_base.1787" }
%"class.absl::optional_internal::optional_data_base.1787" = type { %"class.absl::optional_internal::optional_data_dtor_base.1788" }
%"class.absl::optional_internal::optional_data_dtor_base.1788" = type { i8, %union.anon.1789 }
%union.anon.1789 = type { %"class.mojo::SimpleWatcher" }
%"class.absl::optional.1790" = type { %"class.absl::optional_internal::optional_data.1791" }
%"class.absl::optional_internal::optional_data.1791" = type { %"class.absl::optional_internal::optional_data_base.1792" }
%"class.absl::optional_internal::optional_data_base.1792" = type { %"class.absl::optional_internal::optional_data_dtor_base.1793" }
%"class.absl::optional_internal::optional_data_dtor_base.1793" = type { i8, [7 x i8], %union.anon.1794 }
%union.anon.1794 = type { %"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" }
%"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.absl::optional.1742" = type { %"class.absl::optional_internal::optional_data.1743" }
%"class.absl::optional_internal::optional_data.1743" = type { %"class.absl::optional_internal::optional_data_base.1744" }
%"class.absl::optional_internal::optional_data_base.1744" = type { %"class.absl::optional_internal::optional_data_dtor_base.1745" }
%"class.absl::optional_internal::optional_data_dtor_base.1745" = type { i8, %union.anon.1746 }
%union.anon.1746 = type { %"class.base::Lock" }
%"class.mojo::PipeControlMessageHandler" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string", %"class.mojo::PipeControlMessageHandlerDelegate"* }
%"class.mojo::PipeControlMessageProxy" = type { %"class.mojo::MessageReceiver"* }
%"class.base::small_map" = type { i64, %"class.base::internal::small_map_default_init", %union.anon.1795 }
%"class.base::internal::small_map_default_init" = type { i8 }
%union.anon.1795 = type { %"class.std::__1::map.1798" }
%"class.std::__1::map.1798" = type { %"class.std::__1::__tree.1799" }
%"class.std::__1::__tree.1799" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1800", %"class.std::__1::__compressed_pair.1804" }
%"class.std::__1::__compressed_pair.1800" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1804" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.1809"*, i64 }
%"class.std::__1::unique_ptr.1809" = type opaque
%"class.std::__1::map.1810" = type { %"class.std::__1::__tree.1811" }
%"class.std::__1::__tree.1811" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1812", %"class.std::__1::__compressed_pair.1816" }
%"class.std::__1::__compressed_pair.1812" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1816" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::unique_ptr.1819" = type { %"class.std::__1::__compressed_pair.1820" }
%"class.std::__1::__compressed_pair.1820" = type { %"struct.std::__1::__compressed_pair_elem.1821" }
%"struct.std::__1::__compressed_pair_elem.1821" = type { %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::InterfaceEndpointClient" = type { %"class.mojo::MessageReceiverWithResponder", i8, %"class.base::RepeatingCallback.1822", %"class.base::OnceCallback.1823", %"class.absl::optional.1824", %"class.absl::optional.1829", %"class.mojo::ConnectionGroup::Ref", i32, %"class.mojo::ScopedInterfaceEndpointHandle", %"class.std::__1::unique_ptr.1836", %"class.mojo::InterfaceEndpointController"*, %"class.mojo::MessageReceiverWithResponderStatus"*, %"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk", %"class.mojo::MessageDispatcher", %"class.std::__1::map.1844", %"class.std::__1::map.1855", i64, %"class.base::OnceCallback", %"class.base::OnceCallback.1864", i8, %class.scoped_refptr.1709, %"class.mojo::internal::ControlMessageProxy", %"class.mojo::internal::ControlMessageHandler", i8*, %"class.base::WeakPtrFactory.1865" }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.base::OnceCallback.1823" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.1824" = type { %"class.absl::optional_internal::optional_data.1825" }
%"class.absl::optional_internal::optional_data.1825" = type { %"class.absl::optional_internal::optional_data_base.1826" }
%"class.absl::optional_internal::optional_data_base.1826" = type { %"class.absl::optional_internal::optional_data_dtor_base.1827" }
%"class.absl::optional_internal::optional_data_dtor_base.1827" = type { i8, %union.anon.1828 }
%union.anon.1828 = type { %"class.base::TimeDelta" }
%"class.absl::optional.1829" = type { %"class.absl::optional_internal::optional_data.1830" }
%"class.absl::optional_internal::optional_data.1830" = type { %"class.absl::optional_internal::optional_data_base.1831" }
%"class.absl::optional_internal::optional_data_base.1831" = type { %"class.absl::optional_internal::optional_data_dtor_base.1832" }
%"class.absl::optional_internal::optional_data_dtor_base.1832" = type { i8, %union.anon.1833 }
%union.anon.1833 = type { %"class.base::OneShotTimer" }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.1709, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory.1834" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory.1834" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr.1835 }
%class.scoped_refptr.1835 = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::unique_ptr.1836" = type { %"class.std::__1::__compressed_pair.1837" }
%"class.std::__1::__compressed_pair.1837" = type { %"struct.std::__1::__compressed_pair_elem.1838" }
%"struct.std::__1::__compressed_pair_elem.1838" = type { %"class.mojo::AssociatedGroup"* }
%"class.mojo::AssociatedGroup" = type { %"class.base::RepeatingCallback.1839", %class.scoped_refptr.1840 }
%"class.base::RepeatingCallback.1839" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.1840 = type { %"class.mojo::AssociatedGroupController"* }
%"class.mojo::AssociatedGroupController" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1708", [4 x i8] }>
%"class.mojo::InterfaceEndpointController" = type opaque
%"class.mojo::MessageReceiverWithResponderStatus" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk" = type { %"class.mojo::MessageReceiver", %"class.mojo::InterfaceEndpointClient"* }
%"class.std::__1::map.1844" = type { %"class.std::__1::__tree.1845" }
%"class.std::__1::__tree.1845" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1846", %"class.std::__1::__compressed_pair.1850" }
%"class.std::__1::__compressed_pair.1846" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1850" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::map.1855" = type { %"class.std::__1::__tree.1856" }
%"class.std::__1::__tree.1856" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1857", %"class.std::__1::__compressed_pair.1861" }
%"class.std::__1::__compressed_pair.1857" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1861" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.base::OnceCallback.1864" = type { %"class.base::internal::CallbackBase" }
%"class.mojo::internal::ControlMessageProxy" = type { %"class.mojo::InterfaceEndpointClient"*, i8, %"class.base::OnceCallback" }
%"class.mojo::internal::ControlMessageHandler" = type <{ %"class.mojo::MessageReceiverWithResponderStatus", %"class.mojo::InterfaceEndpointClient"*, i32, [4 x i8] }>
%"class.base::WeakPtrFactory.1865" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%class.scoped_refptr.1709 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.std::__1::unique_ptr.1869" = type { %"class.std::__1::__compressed_pair.1870" }
%"class.std::__1::__compressed_pair.1870" = type { %"struct.std::__1::__compressed_pair_elem.1871" }
%"struct.std::__1::__compressed_pair_elem.1871" = type { %"class.network::mojom::blink::CrossOriginOpenerPolicyReporterProxy"* }
%"class.network::mojom::blink::CrossOriginOpenerPolicyReporterProxy" = type { %"class.network::mojom::blink::CrossOriginOpenerPolicyReporter", %"class.mojo::MessageReceiverWithResponder"* }
%"class.network::mojom::blink::CrossOriginOpenerPolicyReporter" = type { i32 (...)** }
%"class.blink::Member.1877" = type { %"class.blink::MemberBase.1878" }
%"class.blink::MemberBase.1878" = type { %"class.blink::FrameClient"* }
%"class.blink::FrameClient" = type opaque
%"class.blink::Member.1698" = type { %"class.blink::MemberBase.1699" }
%"class.blink::MemberBase.1699" = type { %"class.blink::WindowProxyManager"* }
%"class.blink::WindowProxyManager" = type opaque
%"class.blink::FrameLifecycle" = type { i32 }
%"class.blink::Member.1879" = type { %"class.blink::MemberBase.1880" }
%"class.blink::MemberBase.1880" = type { %"class.blink::LocalFrame"* }
%"class.blink::LocalFrame" = type opaque
%"class.blink::NavigationRateLimiter" = type <{ %"class.blink::Member.1640", %"class.base::TimeTicks", i32, i8, i8, [2 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree.1658" }
%"class.base::internal::flat_tree.1658" = type { %"class.std::__1::vector.1659" }
%"class.std::__1::vector.1659" = type { %"class.std::__1::__vector_base.1660" }
%"class.std::__1::__vector_base.1660" = type { %"struct.std::__1::pair.1661"*, %"struct.std::__1::pair.1661"*, %"class.std::__1::__compressed_pair.1662" }
%"struct.std::__1::pair.1661" = type { i32, [4 x i8], %"class.blink::PolicyValue" }
%"class.blink::PolicyValue" = type <{ i32, i8, [3 x i8], double, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.1662" = type { %"struct.std::__1::__compressed_pair_elem.1663" }
%"struct.std::__1::__compressed_pair_elem.1663" = type { %"struct.std::__1::pair.1661"* }
%"class.blink::Member.1881" = type { %"class.blink::MemberBase.1882" }
%"class.blink::MemberBase.1882" = type { %"class.blink::WindowAgentFactory"* }
%"class.blink::WindowAgentFactory" = type opaque
%"class.absl::optional.1883" = type { %"class.absl::optional_internal::optional_data.1884" }
%"class.absl::optional_internal::optional_data.1884" = type { %"class.absl::optional_internal::optional_data_base.1885" }
%"class.absl::optional_internal::optional_data_base.1885" = type { %"class.absl::optional_internal::optional_data_dtor_base.1886" }
%"class.absl::optional_internal::optional_data_dtor_base.1886" = type { i8, %union.anon.1887 }
%union.anon.1887 = type { %"class.std::__1::basic_string" }
%"class.absl::optional.1888" = type { %"class.absl::optional_internal::optional_data.1889" }
%"class.absl::optional_internal::optional_data.1889" = type { %"class.absl::optional_internal::optional_data_base.1890" }
%"class.absl::optional_internal::optional_data_base.1890" = type { %"class.absl::optional_internal::optional_data_dtor_base.1891" }
%"class.absl::optional_internal::optional_data_dtor_base.1891" = type { i8, %union.anon.1892 }
%union.anon.1892 = type { %"class.base::UnguessableToken" }
%"class.blink::UserActivationState" = type { i8, %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i32 }
%"class.blink::MultiToken" = type <{ %"class.base::UnguessableToken", i32, [4 x i8] }>
%"class.blink::OpenedFrameTracker" = type { %"class.blink::HeapHashSet.1893" }
%"class.blink::HeapHashSet.1893" = type { %"class.WTF::HashSet.1896" }
%"class.WTF::HashSet.1896" = type { %"class.WTF::HashTable.1897" }
%"class.WTF::HashTable.1897" = type <{ %"class.blink::WeakMember.1899"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1899" = type opaque
%"class.blink::Member.1642" = type { %"class.blink::MemberBase.1643" }
%"class.blink::MemberBase.1643" = type { %"class.blink::EmbeddedContentView"* }
%"class.blink::EmbeddedContentView" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::IntRect", i8, i8, i8, [5 x i8] }>
%"struct.blink::FramePolicy" = type <{ i32, [4 x i8], %"class.std::__1::vector.1644", %"class.base::flat_map", i8, [7 x i8] }>
%"class.std::__1::vector.1644" = type { %"class.std::__1::__vector_base.1645" }
%"class.std::__1::__vector_base.1645" = type { %"struct.blink::ParsedPermissionsPolicyDeclaration"*, %"struct.blink::ParsedPermissionsPolicyDeclaration"*, %"class.std::__1::__compressed_pair.1653" }
%"struct.blink::ParsedPermissionsPolicyDeclaration" = type <{ i32, [4 x i8], %"class.std::__1::vector.1646", i8, i8, [6 x i8] }>
%"class.std::__1::vector.1646" = type { %"class.std::__1::__vector_base.1647" }
%"class.std::__1::__vector_base.1647" = type { %"class.url::Origin"*, %"class.url::Origin"*, %"class.std::__1::__compressed_pair.1648" }
%"class.std::__1::__compressed_pair.1648" = type { %"struct.std::__1::__compressed_pair_elem.1649" }
%"struct.std::__1::__compressed_pair_elem.1649" = type { %"class.url::Origin"* }
%"class.std::__1::__compressed_pair.1653" = type { %"struct.std::__1::__compressed_pair_elem.1654" }
%"struct.std::__1::__compressed_pair_elem.1654" = type { %"struct.blink::ParsedPermissionsPolicyDeclaration"* }
%"class.blink::Member.1667" = type { %"class.blink::MemberBase.1668" }
%"class.blink::MemberBase.1668" = type { %"class.blink::LazyLoadFrameObserver"* }
%"class.blink::LazyLoadFrameObserver" = type opaque
%"class.blink::MutableCSSPropertyValueSet" = type <{ %"class.blink::CSSPropertyValueSet", [4 x i8], %"class.blink::Member.1926", %"class.blink::HeapVector.1930", i8, [7 x i8] }>
%"class.blink::Member.1926" = type { %"class.blink::MemberBase.1927" }
%"class.blink::MemberBase.1927" = type { %"class.blink::PropertySetCSSStyleDeclaration"* }
%"class.blink::PropertySetCSSStyleDeclaration" = type { %"class.blink::AbstractPropertySetCSSStyleDeclaration", %"class.blink::Member.1928" }
%"class.blink::AbstractPropertySetCSSStyleDeclaration" = type { %"class.blink::CSSStyleDeclaration" }
%"class.blink::Member.1928" = type { %"class.blink::MemberBase.1929" }
%"class.blink::MemberBase.1929" = type { %"class.blink::MutableCSSPropertyValueSet"* }
%"class.blink::HeapVector.1930" = type { %"class.WTF::Vector.1933" }
%"class.WTF::Vector.1933" = type { %"class.WTF::VectorBuffer.1934" }
%"class.WTF::VectorBuffer.1934" = type { %"class.WTF::VectorBufferBase.1935", [96 x i8] }
%"class.WTF::VectorBufferBase.1935" = type { %"class.blink::CSSPropertyValue"*, i32, i32 }
%"class.blink::CSSPropertyValue" = type { %"struct.blink::CSSPropertyValueMetadata", %"class.blink::Member.1167" }
%"struct.blink::CSSPropertyValueMetadata" = type <{ %"class.WTF::AtomicString", i16, [6 x i8] }>
%"class.blink::HeapVector.1938" = type { %"class.WTF::Vector.1941" }
%"class.WTF::Vector.1941" = type { %"class.WTF::VectorBuffer.1942" }
%"class.WTF::VectorBuffer.1942" = type { %"class.WTF::VectorBufferBase.1935", [6144 x i8] }
%"class.blink::HeapVectorBacking" = type { i8 }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.1945", i8* }
%"class.WTF::StringAppend.1945" = type { i8*, %"class.WTF::String" }
%"class.WTF::StringTypeAdapter.2068" = type <{ i8*, i32, [4 x i8] }>
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.1950, %"class.blink::Member.1951", %"class.blink::SelfKeepAlive", %"class.util::TokenType.1955" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.1950 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.1951" = type { %"class.blink::MemberBase.1952" }
%"class.blink::MemberBase.1952" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.1953" }
%"class.blink::Persistent.1953" = type { %"class.blink::PersistentBase.1954" }
%"class.blink::PersistentBase.1954" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType.1955" = type { %"class.base::StrongAlias.1956" }
%"class.base::StrongAlias.1956" = type { %"class.base::UnguessableToken" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::StringTypeAdapter.2069" = type { %"class.WTF::StringTypeAdapter.2070" }
%"class.WTF::StringTypeAdapter.2070" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink19CSSStyleDeclaration18GetWrapperTypeInfoEv = comdat any

$_ZNK5blink19CSSStyleDeclaration16ParentStyleSheetEv = comdat any

$_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS5_S7_S8_EERKS2_S2_EENS_18HashTableAddResultIS9_S2_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6ExpandEPS2_ = comdat any

$_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE8RehashToEPS2_jSA_ = comdat any

$_ZN3WTF12VectorBufferIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_16CSSPropertyValueEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS1_EEE14AllocateObjectIS5_EEPvm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS3_EEEEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF15ConstructTraitsIN5blink16CSSPropertyValueENS_12VectorTraitsIS2_EENS1_13HeapAllocatorEE25ConstructAndNotifyElementIJS2_EEEPS2_PvDpOT_ = comdat any

$_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator16NotifyNewObjectsINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEvPT_m = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_19CSSPropertyValueSetEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_19CSSPropertyValueSetEE7GetNameEPKv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index = comdat any

@_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties = internal global i64 0, align 8
@_ZN5blinkL24kCSSComputablePropertiesE = internal constant [343 x i32] [i32 28, i32 30, i32 31, i32 32, i32 33, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 447, i32 448, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 2, i32 113, i32 114, i32 115, i32 117, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 127, i32 132, i32 133, i32 134, i32 135, i32 3, i32 137, i32 138, i32 139, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 4, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 477, i32 12, i32 13, i32 14, i32 15, i32 17, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 171, i32 172, i32 173, i32 174, i32 175, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 237, i32 238, i32 239, i32 240, i32 242, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 255, i32 256, i32 257, i32 258, i32 259, i32 260, i32 261, i32 262, i32 263, i32 264, i32 265, i32 266, i32 267, i32 268, i32 272, i32 273, i32 274, i32 275, i32 276, i32 277, i32 278, i32 279, i32 282, i32 283, i32 284, i32 285, i32 286, i32 289, i32 291, i32 292, i32 293, i32 294, i32 295, i32 296, i32 297, i32 298, i32 299, i32 300, i32 301, i32 302, i32 304, i32 305, i32 309, i32 310, i32 312, i32 313, i32 320, i32 321, i32 322, i32 323, i32 324, i32 325, i32 329, i32 333, i32 334, i32 335, i32 336, i32 337, i32 338, i32 339, i32 340, i32 341, i32 342, i32 347, i32 348, i32 349, i32 350, i32 351, i32 514, i32 353, i32 354, i32 355, i32 356, i32 358, i32 359, i32 360, i32 21, i32 361, i32 362, i32 363, i32 365, i32 367, i32 368, i32 369, i32 371, i32 372, i32 373, i32 374, i32 375, i32 376, i32 377, i32 378, i32 380, i32 382, i32 383, i32 385, i32 436, i32 437, i32 438, i32 439, i32 440, i32 441, i32 26, i32 442, i32 443, i32 444, i32 27, i32 386, i32 387, i32 388, i32 389, i32 390, i32 391, i32 392, i32 393, i32 394, i32 395, i32 396, i32 397, i32 22, i32 398, i32 399, i32 400, i32 401, i32 23, i32 520, i32 402, i32 403, i32 404, i32 405, i32 406, i32 407, i32 408, i32 409, i32 410, i32 521, i32 522, i32 415, i32 418, i32 419, i32 421, i32 422, i32 423, i32 424, i32 425, i32 426, i32 427, i32 24, i32 428, i32 429, i32 430, i32 434, i32 435, i32 25], align 16
@_ZTVN5blink27CSSComputedStyleDeclarationE = hidden unnamed_addr constant { [28 x i8*], [3 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*)* @_ZN5blink27CSSComputedStyleDeclarationD2Ev to i8*), i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*)* @_ZN5blink27CSSComputedStyleDeclarationD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Visitor"*)* @_ZNK5blink27CSSComputedStyleDeclaration5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::CSSStyleDeclaration"*)* @_ZNK5blink19CSSStyleDeclaration18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (%"class.blink::CSSRule"* (%"class.blink::CSSComputedStyleDeclaration"*)* @_ZNK5blink27CSSComputedStyleDeclaration10parentRuleEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*)* @_ZNK5blink27CSSComputedStyleDeclaration7cssTextEv to i8*), i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::ExecutionContext"*, %"class.WTF::String"*, %"class.blink::ExceptionState"*)* @_ZN5blink27CSSComputedStyleDeclaration10setCSSTextEPKNS_16ExecutionContextERKN3WTF6StringERNS_14ExceptionStateE to i8*), i8* bitcast (i32 (%"class.blink::CSSComputedStyleDeclaration"*)* @_ZNK5blink27CSSComputedStyleDeclaration6lengthEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*, i32)* @_ZNK5blink27CSSComputedStyleDeclaration4itemEj to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::String"*)* @_ZN5blink27CSSComputedStyleDeclaration16getPropertyValueERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::String"*)* @_ZN5blink27CSSComputedStyleDeclaration19getPropertyPriorityERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::String"*)* @_ZN5blink27CSSComputedStyleDeclaration20GetPropertyShorthandERKN3WTF6StringE to i8*), i8* bitcast (i1 (%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::String"*)* @_ZN5blink27CSSComputedStyleDeclaration18IsPropertyImplicitERKN3WTF6StringE to i8*), i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::ExecutionContext"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.blink::ExceptionState"*)* @_ZN5blink27CSSComputedStyleDeclaration11setPropertyEPKNS_16ExecutionContextERKN3WTF6StringES7_S7_RNS_14ExceptionStateE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::String"*, %"class.blink::ExceptionState"*)* @_ZN5blink27CSSComputedStyleDeclaration14removePropertyERKN3WTF6StringERNS_14ExceptionStateE to i8*), i8* bitcast (%"class.blink::CSSValue"* (%"class.blink::CSSComputedStyleDeclaration"*, i32)* @_ZN5blink27CSSComputedStyleDeclaration27GetPropertyCSSValueInternalENS_13CSSPropertyIDE to i8*), i8* bitcast (%"class.blink::CSSValue"* (%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::StringImpl"*)* @_ZN5blink27CSSComputedStyleDeclaration27GetPropertyCSSValueInternalEN3WTF12AtomicStringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::CSSComputedStyleDeclaration"*, i32)* @_ZN5blink27CSSComputedStyleDeclaration24GetPropertyValueInternalENS_13CSSPropertyIDE to i8*), i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*, i32, %"class.WTF::String"*, %"class.WTF::String"*, i1, i32, %"class.blink::ExceptionState"*)* @_ZN5blink27CSSComputedStyleDeclaration19SetPropertyInternalENS_13CSSPropertyIDERKN3WTF6StringES5_bNS_17SecureContextModeERNS_14ExceptionStateE to i8*), i8* bitcast (i1 (%"class.blink::CSSComputedStyleDeclaration"*, i32, %"class.blink::CSSValue"*)* @_ZNK5blink27CSSComputedStyleDeclaration18CssPropertyMatchesENS_13CSSPropertyIDERKNS_8CSSValueE to i8*), i8* bitcast (%"class.blink::CSSStyleSheet"* (%"class.blink::CSSStyleDeclaration"*)* @_ZNK5blink19CSSStyleDeclaration16ParentStyleSheetEv to i8*)], [3 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (void (%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Visitor"*)* @_ZThn16_NK5blink27CSSComputedStyleDeclaration5TraceEPNS_7VisitorE to i8*)] }, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [52 x i8] c"These styles are computed, and therefore read-only.\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"These styles are computed, and therefore the '\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"' property is read-only.\00", align 1
@_ZTVN5blink15ScriptWrappableE = external unnamed_addr constant { [11 x i8*] }, align 8
@_ZN5blink17font_family_names16kWebkitMonospaceE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.4 = private unnamed_addr constant [64 x i8] c"../../third_party/blink/renderer/core/css/css_global_rule_set.h\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"features_.IsAlive()\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase33is_css_container_queries_enabled_E = external local_unnamed_addr global i8, align 1
@_ZZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set = internal global %"class.WTF::StaticSingleton.2015" zeroinitializer, align 8
@_ZGVZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set = internal global i64 0, align 8
@.str.6 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.7 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13CSSPropertyIDEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSPropertyID]\00", align 1
@_ZTVN5blink14CustomPropertyE = external unnamed_addr constant { [25 x i8*] }, align 8
@_ZN5blink19CSSStyleDeclaration18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@.str.8 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.9 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.11 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.13 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS3_EEEEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.16 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_16CSSPropertyValueENS_12VectorTraitsIS3_EEEEEEPKcv = private unnamed_addr constant [142 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapVectorBacking<blink::CSSPropertyValue, WTF::VectorTraits<blink::CSSPropertyValue> >]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.17 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.18 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSPropertyValueSetEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSPropertyValueSet]\00", align 1
@_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_19CSSPropertyValueSetEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_19CSSPropertyValueSetEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.19 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.20 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.21 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

@_ZN5blink27CSSComputedStyleDeclarationC1EPNS_4NodeEbRKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Node"*, i1, %"class.WTF::String"*), void (%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Node"*, i1, %"class.WTF::String"*)* @_ZN5blink27CSSComputedStyleDeclarationC2EPNS_4NodeEbRKN3WTF6StringE
@_ZN5blink27CSSComputedStyleDeclarationD1Ev = hidden unnamed_addr alias void (%"class.blink::CSSComputedStyleDeclaration"*), void (%"class.blink::CSSComputedStyleDeclaration"*)* @_ZN5blink27CSSComputedStyleDeclarationD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextE(%"class.blink::ExecutionContext"*) local_unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 0), i8 0, i64 16, i1 false) #10
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  br label %8

8:                                                ; preds = %4, %7, %1
  %9 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @_ZN5blink11CSSProperty39FilterWebExposedCSSPropertiesIntoVectorEPKNS_16ExecutionContextEPKNS_13CSSPropertyIDEmRN3WTF6VectorIPKS0_Lj0ENS7_18PartitionAllocatorEEE(%"class.blink::ExecutionContext"* %0, i32* getelementptr inbounds ([343 x i32], [343 x i32]* @_ZN5blinkL24kCSSComputablePropertiesE, i64 0, i64 0), i64 343, %"class.WTF::Vector"* dereferenceable(16) bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*)) #10
  br label %12

12:                                               ; preds = %11, %8
  ret %"class.WTF::Vector"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

declare void @_ZN5blink11CSSProperty39FilterWebExposedCSSPropertiesIntoVectorEPKNS_16ExecutionContextEPKNS_13CSSPropertyIDEmRN3WTF6VectorIPKS0_Lj0ENS7_18PartitionAllocatorEEE(%"class.blink::ExecutionContext"*, i32*, i64, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CSSComputedStyleDeclarationC2EPNS_4NodeEbRKN3WTF6StringE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Node"*, i1 zeroext, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %5 = zext i1 %2 to i8
  %6 = icmp eq %"class.blink::Node"* %1, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %4
  %8 = bitcast %"class.blink::Node"* %1 to %"class.blink::ExecutionContext"* (%"class.blink::Node"*)***
  %9 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)**, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %9, i64 10
  %11 = load %"class.blink::ExecutionContext"* (%"class.blink::Node"*)*, %"class.blink::ExecutionContext"* (%"class.blink::Node"*)** %10, align 8
  %12 = tail call %"class.blink::ExecutionContext"* %11(%"class.blink::Node"* nonnull %1) #10
  br label %13

13:                                               ; preds = %4, %7
  %14 = phi %"class.blink::ExecutionContext"* [ %12, %7 ], [ null, %4 ]
  %15 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink15ScriptWrappableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %16, align 8
  %17 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN5blink22ExecutionContextClientC2EPNS_16ExecutionContextE(%"class.blink::ExecutionContextClient"* %17, %"class.blink::ExecutionContext"* %14) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*], [3 x i8*] }, { [28 x i8*], [3 x i8*] }* @_ZTVN5blink27CSSComputedStyleDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %18 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*], [3 x i8*] }, { [28 x i8*], [3 x i8*] }* @_ZTVN5blink27CSSComputedStyleDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::Node"* %1, %"class.blink::Node"** %19, align 8
  %20 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %21 = tail call zeroext i8 @_ZN5blink17CSSSelectorParser18ParsePseudoElementERKN3WTF6StringEPKNS_4NodeE(%"class.WTF::String"* dereferenceable(8) %3, %"class.blink::Node"* %1) #10
  store i8 %21, i8* %20, align 8
  %22 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 4
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %22, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  %24 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 5
  store i8 %5, i8* %24, align 8
  %25 = icmp eq i8 %21, 10
  br i1 %25, label %48, label %26

26:                                               ; preds = %13
  %27 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %28 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %27, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %69, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %51

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #10
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !3

45:                                               ; preds = %36
  tail call void @llvm.trap() #10
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %51

48:                                               ; preds = %13
  %49 = tail call %"class.WTF::StringImpl"* @_ZN5blink17CSSSelectorParser26ParsePseudoElementArgumentERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %3) #10
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %69, label %51

51:                                               ; preds = %46, %31, %48
  %52 = phi %"class.WTF::StringImpl"* [ %49, %48 ], [ %29, %31 ], [ %29, %46 ]
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = and i32 %54, 2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i33
  %61 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %60, i33 1) #10
  %62 = extractvalue { i33, i1 } %61, 1
  %63 = extractvalue { i33, i1 } %61, 0
  %64 = icmp slt i33 %63, 0
  %65 = or i1 %62, %64
  br i1 %65, label %66, label %67, !prof !3

66:                                               ; preds = %57
  tail call void @llvm.trap() #10
  unreachable

67:                                               ; preds = %57
  %68 = trunc i33 %63 to i32
  store i32 %68, i32* %58, align 4
  br label %69

69:                                               ; preds = %26, %67, %51, %48
  %70 = phi i1 [ false, %67 ], [ false, %51 ], [ true, %48 ], [ true, %26 ]
  %71 = phi %"class.WTF::StringImpl"* [ %52, %67 ], [ %52, %51 ], [ null, %48 ], [ null, %26 ]
  %72 = ptrtoint %"class.WTF::StringImpl"* %71 to i64
  %73 = bitcast %"class.WTF::AtomicString"* %22 to i64*
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  store i64 %72, i64* %73, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %89, label %76

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  br i1 %80, label %83, label %85

83:                                               ; preds = %76
  %84 = add i32 %82, -1
  store i32 %84, i32* %81, align 4
  br label %85

85:                                               ; preds = %83, %76
  %86 = phi i32 [ %84, %83 ], [ %82, %76 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #10
  br label %89

89:                                               ; preds = %69, %85, %88
  br i1 %70, label %103, label %90

90:                                               ; preds = %89
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  br i1 %94, label %97, label %99

97:                                               ; preds = %90
  %98 = add i32 %96, -1
  store i32 %98, i32* %95, align 4
  br label %99

99:                                               ; preds = %97, %90
  %100 = phi i32 [ %98, %97 ], [ %96, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #10
  br label %103

103:                                              ; preds = %89, %99, %102
  ret void
}

declare zeroext i8 @_ZN5blink17CSSSelectorParser18ParsePseudoElementERKN3WTF6StringEPKNS_4NodeE(%"class.WTF::String"* dereferenceable(8), %"class.blink::Node"*) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN5blink17CSSSelectorParser26ParsePseudoElementArgumentERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CSSComputedStyleDeclarationD2Ev(%"class.blink::CSSComputedStyleDeclaration"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*], [3 x i8*] }, { [28 x i8*], [3 x i8*] }* @_ZTVN5blink27CSSComputedStyleDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*], [3 x i8*] }, { [28 x i8*], [3 x i8*] }* @_ZTVN5blink27CSSComputedStyleDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  br i1 %11, label %14, label %16

14:                                               ; preds = %7
  %15 = add i32 %13, -1
  store i32 %15, i32* %12, align 4
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i32 [ %15, %14 ], [ %13, %7 ]
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #10
  br label %20

20:                                               ; preds = %1, %16, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CSSComputedStyleDeclarationD0Ev(%"class.blink::CSSComputedStyleDeclaration"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*], [3 x i8*] }, { [28 x i8*], [3 x i8*] }* @_ZTVN5blink27CSSComputedStyleDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*], [3 x i8*] }, { [28 x i8*], [3 x i8*] }* @_ZTVN5blink27CSSComputedStyleDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  br i1 %11, label %14, label %16

14:                                               ; preds = %7
  %15 = add i32 %13, -1
  store i32 %15, i32* %12, align 4
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i32 [ %15, %14 ], [ %13, %7 ]
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #10
  br label %20

20:                                               ; preds = %1, %16, %19
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink27CSSComputedStyleDeclaration7cssTextEv(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone) unnamed_addr #4 align 2 {
  ret %"class.WTF::StringImpl"* null
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CSSComputedStyleDeclaration10setCSSTextEPKNS_16ExecutionContextERKN3WTF6StringERNS_14ExceptionStateE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, %"class.blink::ExecutionContext"* nocapture readnone, %"class.WTF::String"* nocapture readnone dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %3, i32 7, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0)) #10
  ret void
}

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration36GetFontSizeCSSValuePreferringKeywordEv(%"class.blink::CSSComputedStyleDeclaration"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %53, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %3, i64 0, i32 3, i32 0, i32 0
  %7 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %7, i64 0, i32 2, i32 0, i32 0
  %9 = load %"class.blink::Document"*, %"class.blink::Document"** %8, align 8
  tail call void @_ZN5blink8Document20UpdateStyleAndLayoutENS_20DocumentUpdateReasonE(%"class.blink::Document"* %9, i32 7) #10
  %10 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %11 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %12 = load i8, i8* %11, align 8
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %14 = bitcast %"class.blink::Node"* %10 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %15 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %15, i64 71
  %17 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %16, align 8
  %18 = tail call %"class.blink::ComputedStyle"* %17(%"class.blink::Node"* %10, i8 zeroext %12, %"class.WTF::AtomicString"* dereferenceable(8) %13) #10
  %19 = icmp eq %"class.blink::ComputedStyle"* %18, null
  br i1 %19, label %53, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %22, i64 0, i32 1, i32 0, i32 0
  %24 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %24, i64 0, i32 1, i32 0, i32 12, i32 0
  %26 = bitcast %"struct.blink::FontDescription::BitFields"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 21
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 15
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %20
  %33 = add nuw nsw i32 %30, 67
  %34 = tail call %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32 %33) #10
  %35 = getelementptr inbounds %"class.blink::CSSIdentifierValue", %"class.blink::CSSIdentifierValue"* %34, i64 0, i32 0
  br label %53

36:                                               ; preds = %20
  %37 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %24, i64 0, i32 1, i32 0, i32 5
  %38 = load float, float* %37, align 4
  %39 = fadd float %38, 5.000000e-01
  %40 = fptosi float %39 to i32
  %41 = sitofp i32 %40 to double
  %42 = fptrunc double %41 to float
  %43 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %18, i64 0, i32 0, i32 1, i32 0, i32 0
  %44 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %44, i64 0, i32 2, i32 0, i32 0
  %46 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* %46, i64 0, i32 6
  %48 = load float, float* %47, align 8
  %49 = fdiv float %42, %48
  %50 = fpext float %49 to double
  %51 = tail call %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double %50, i32 5) #10
  %52 = getelementptr inbounds %"class.blink::CSSNumericLiteralValue", %"class.blink::CSSNumericLiteralValue"* %51, i64 0, i32 0, i32 0
  br label %53

53:                                               ; preds = %1, %32, %36, %5
  %54 = phi %"class.blink::CSSValue"* [ null, %1 ], [ %52, %36 ], [ %35, %32 ], [ null, %5 ]
  ret %"class.blink::CSSValue"* %54
}

declare void @_ZN5blink8Document20UpdateStyleAndLayoutENS_20DocumentUpdateReasonE(%"class.blink::Document"*, i32) local_unnamed_addr #3

declare %"class.blink::CSSIdentifierValue"* @_ZN5blink18CSSIdentifierValue6CreateENS_10CSSValueIDE(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink27CSSComputedStyleDeclaration15IsMonospaceFontEv(%"class.blink::CSSComputedStyleDeclaration"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %36, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %7 = load i8, i8* %6, align 8
  %8 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %9 = bitcast %"class.blink::Node"* %3 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %10 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %10, i64 71
  %12 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %11, align 8
  %13 = tail call %"class.blink::ComputedStyle"* %12(%"class.blink::Node"* nonnull %3, i8 zeroext %7, %"class.WTF::AtomicString"* dereferenceable(8) %8) #10
  %14 = icmp eq %"class.blink::ComputedStyle"* %13, null
  br i1 %14, label %36, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %13, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %17, i64 0, i32 1, i32 0, i32 0
  %19 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %19, i64 0, i32 1, i32 0, i32 12, i32 0
  %21 = bitcast %"struct.blink::FontDescription::BitFields"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 1792
  %24 = icmp eq i64 %23, 1024
  br i1 %24, label %25, label %36

25:                                               ; preds = %15
  %26 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %19, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %27 = load %"class.blink::SharedFontFamily"*, %"class.blink::SharedFontFamily"** %26, align 8
  %28 = icmp eq %"class.blink::SharedFontFamily"* %27, null
  br i1 %28, label %29, label %36

29:                                               ; preds = %25
  %30 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink17font_family_names16kWebkitMonospaceE, align 8
  %31 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %19, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %30, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %32, %34
  br label %36

36:                                               ; preds = %1, %29, %25, %15, %5
  %37 = phi i1 [ false, %1 ], [ false, %5 ], [ false, %25 ], [ false, %15 ], [ %35, %29 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ComputedStyle"* @_ZNK5blink27CSSComputedStyleDeclaration20ComputeComputedStyleEv(%"class.blink::CSSComputedStyleDeclaration"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %5
  %11 = bitcast %"class.blink::Node"* %3 to %"class.blink::Element"*
  %12 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %13 = load i8, i8* %12, align 8
  %14 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %11, i8 zeroext %13) #10
  %15 = icmp eq %"class.blink::PseudoElement"* %14, null
  %16 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %14, i64 0, i32 0, i32 0, i32 0
  br i1 %15, label %17, label %19

17:                                               ; preds = %10
  %18 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  br label %19

19:                                               ; preds = %1, %5, %10, %17
  %20 = phi %"class.blink::Node"* [ null, %1 ], [ %16, %10 ], [ %18, %17 ], [ %3, %5 ]
  %21 = bitcast %"class.blink::Node"* %20 to i8 (%"class.blink::Node"*)***
  %22 = load i8 (%"class.blink::Node"*)**, i8 (%"class.blink::Node"*)*** %21, align 8
  %23 = getelementptr inbounds i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %22, i64 34
  %24 = load i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %23, align 8
  %25 = tail call zeroext i8 %24(%"class.blink::Node"* %20) #10
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %29 = load i8, i8* %28, align 8
  br label %30

30:                                               ; preds = %19, %27
  %31 = phi i8 [ %29, %27 ], [ 0, %19 ]
  %32 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 4
  %33 = bitcast %"class.blink::Node"* %20 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %34 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %33, align 8
  %35 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %34, i64 71
  %36 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %35, align 8
  %37 = tail call %"class.blink::ComputedStyle"* %36(%"class.blink::Node"* %20, i8 zeroext %31, %"class.WTF::AtomicString"* dereferenceable(8) %32) #10
  %38 = icmp eq %"class.blink::ComputedStyle"* %37, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %30
  %40 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %37, i64 0, i32 0, i32 9
  %41 = bitcast [20 x i8]* %40 to i160*
  %42 = load i160, i160* %41, align 8
  %43 = and i160 %42, 43556142965880123323311949751266331066368
  %44 = icmp eq i160 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %39
  %46 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %47 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %46, i64 0, i32 3, i32 0, i32 0
  %48 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %47, align 8
  %49 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %48, i64 0, i32 2, i32 0, i32 0
  %50 = load %"class.blink::Document"*, %"class.blink::Document"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %50, i64 0, i32 2
  %52 = bitcast %"class.blink::UseCounter"* %51 to void (%"class.blink::UseCounter"*, i32)***
  %53 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %53, i64 3
  %55 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %54, align 8
  tail call void %55(%"class.blink::UseCounter"* %51, i32 3088) #10
  br label %56

56:                                               ; preds = %39, %30, %45
  ret %"class.blink::ComputedStyle"* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZNK5blink27CSSComputedStyleDeclaration10StyledNodeEv(%"class.blink::CSSComputedStyleDeclaration"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %5
  %11 = bitcast %"class.blink::Node"* %3 to %"class.blink::Element"*
  %12 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %13 = load i8, i8* %12, align 8
  %14 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %11, i8 zeroext %13) #10
  %15 = icmp eq %"class.blink::PseudoElement"* %14, null
  %16 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %14, i64 0, i32 0, i32 0, i32 0
  br i1 %15, label %17, label %19

17:                                               ; preds = %10
  %18 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  br label %19

19:                                               ; preds = %5, %17, %1, %10
  %20 = phi %"class.blink::Node"* [ null, %1 ], [ %16, %10 ], [ %18, %17 ], [ %3, %5 ]
  ret %"class.blink::Node"* %20
}

declare %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"*, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::LayoutObject"* @_ZNK5blink27CSSComputedStyleDeclaration18StyledLayoutObjectEv(%"class.blink::CSSComputedStyleDeclaration"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %47, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = bitcast %"class.blink::Node"* %3 to %"class.blink::Element"*
  %12 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %13 = load i8, i8* %12, align 8
  %14 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %11, i8 zeroext %13) #10
  %15 = icmp eq %"class.blink::PseudoElement"* %14, null
  %16 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %14, i64 0, i32 0, i32 0, i32 0
  br i1 %15, label %17, label %19

17:                                               ; preds = %10
  %18 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  br label %19

19:                                               ; preds = %10, %17
  %20 = phi %"class.blink::Node"* [ %16, %10 ], [ %18, %17 ]
  %21 = icmp eq %"class.blink::Node"* %20, null
  br i1 %21, label %47, label %22

22:                                               ; preds = %5, %19
  %23 = phi %"class.blink::Node"* [ %20, %19 ], [ %3, %5 ]
  %24 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %25 = load i8, i8* %24, align 8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %29 = icmp eq %"class.blink::Node"* %23, %28
  br i1 %29, label %47, label %30

30:                                               ; preds = %22, %27
  %31 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %23, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %23, i64 0, i32 6, i32 0, i32 0
  br i1 %34, label %40, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.blink::NodeData"** %35 to %"class.blink::NodeRareData"**
  %38 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::NodeRareData", %"class.blink::NodeRareData"* %38, i64 0, i32 1, i32 0, i32 0
  br label %42

40:                                               ; preds = %30
  %41 = bitcast %"class.blink::NodeData"** %35 to %"class.blink::NodeRenderingData"**
  br label %42

42:                                               ; preds = %36, %40
  %43 = phi %"class.blink::NodeRenderingData"** [ %39, %36 ], [ %41, %40 ]
  %44 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %44, i64 0, i32 1
  %46 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %45, align 8
  br label %47

47:                                               ; preds = %1, %27, %19, %42
  %48 = phi %"class.blink::LayoutObject"* [ %46, %42 ], [ null, %19 ], [ null, %27 ], [ null, %1 ]
  ret %"class.blink::LayoutObject"* %48
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueENS_13CSSPropertyIDE(%"class.blink::CSSComputedStyleDeclaration"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CSSPropertyName", align 8
  %4 = icmp eq i32 %1, 1
  br i1 %4, label %26, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.blink::CSSPropertyName"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %8, align 8
  %9 = call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %3)
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  br i1 %16, label %19, label %21

19:                                               ; preds = %12
  %20 = add i32 %18, -1
  store i32 %20, i32* %17, align 4
  br label %21

21:                                               ; preds = %19, %12
  %22 = phi i32 [ %20, %19 ], [ %18, %12 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %10) #10
  br label %25

25:                                               ; preds = %5, %21, %24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  br label %26

26:                                               ; preds = %2, %25
  %27 = phi %"class.blink::CSSValue"* [ %9, %25 ], [ null, %2 ]
  ret %"class.blink::CSSValue"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::CSSPropertyName"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca %"class.blink::CSSPropertyRef", align 8
  %5 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %7 = icmp eq %"class.blink::Node"* %6, null
  br i1 %7, label %181, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = bitcast %"class.blink::Node"* %6 to %"class.blink::Element"*
  %15 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 8
  %17 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %14, i8 zeroext %16) #10
  %18 = icmp eq %"class.blink::PseudoElement"* %17, null
  %19 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %17, i64 0, i32 0, i32 0, i32 0
  br i1 %18, label %20, label %22

20:                                               ; preds = %13
  %21 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi %"class.blink::Node"* [ %19, %13 ], [ %21, %20 ]
  %24 = icmp eq %"class.blink::Node"* %23, null
  br i1 %24, label %181, label %25

25:                                               ; preds = %8, %22
  %26 = phi %"class.blink::Node"* [ %23, %22 ], [ %6, %8 ]
  tail call void @_ZNK5blink27CSSComputedStyleDeclaration32UpdateStyleAndLayoutTreeIfNeededEPKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* %1)
  %27 = bitcast %"class.blink::CSSPropertyRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %27) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 48, i1 false)
  %28 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %26, i64 0, i32 3, i32 0, i32 0
  %29 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %29, i64 0, i32 2, i32 0, i32 0
  %31 = load %"class.blink::Document"*, %"class.blink::Document"** %30, align 8
  call void @_ZN5blink14CSSPropertyRefC1ERKNS_15CSSPropertyNameERKNS_8DocumentE(%"class.blink::CSSPropertyRef"* nonnull %4, %"class.blink::CSSPropertyName"* dereferenceable(16) %1, %"class.blink::Document"* dereferenceable(2848) %31) #10
  %32 = getelementptr inbounds %"class.blink::CSSPropertyRef", %"class.blink::CSSPropertyRef"* %4, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  switch i32 %33, label %37 [
    i32 0, label %161
    i32 1, label %34
  ]

34:                                               ; preds = %25
  %35 = getelementptr inbounds %"class.blink::CSSPropertyRef", %"class.blink::CSSPropertyRef"* %4, i64 0, i32 1
  %36 = bitcast %"class.blink::CustomProperty"* %35 to %"class.blink::CSSProperty"*
  br label %40

37:                                               ; preds = %25
  %38 = and i32 %33, 1023
  %39 = call dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32 %38) #10
  br label %40

40:                                               ; preds = %34, %37
  %41 = phi %"class.blink::CSSProperty"* [ %36, %34 ], [ %39, %37 ]
  call void @_ZNK5blink27CSSComputedStyleDeclaration28UpdateStyleAndLayoutIfNeededEPKNS_11CSSPropertyE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSProperty"* %41)
  %42 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %43 = icmp eq %"class.blink::Node"* %42, null
  br i1 %43, label %58, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %42, i64 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 12
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %58

49:                                               ; preds = %44
  %50 = bitcast %"class.blink::Node"* %42 to %"class.blink::Element"*
  %51 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %52 = load i8, i8* %51, align 8
  %53 = call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %50, i8 zeroext %52) #10
  %54 = icmp eq %"class.blink::PseudoElement"* %53, null
  %55 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %53, i64 0, i32 0, i32 0, i32 0
  br i1 %54, label %56, label %58

56:                                               ; preds = %49
  %57 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  br label %58

58:                                               ; preds = %56, %49, %44, %40
  %59 = phi %"class.blink::Node"* [ null, %40 ], [ %55, %49 ], [ %57, %56 ], [ %42, %44 ]
  %60 = bitcast %"class.blink::Node"* %59 to i8 (%"class.blink::Node"*)***
  %61 = load i8 (%"class.blink::Node"*)**, i8 (%"class.blink::Node"*)*** %60, align 8
  %62 = getelementptr inbounds i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %61, i64 34
  %63 = load i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %62, align 8
  %64 = call zeroext i8 %63(%"class.blink::Node"* %59) #10
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %68 = load i8, i8* %67, align 8
  br label %69

69:                                               ; preds = %66, %58
  %70 = phi i8 [ %68, %66 ], [ 0, %58 ]
  %71 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 4
  %72 = bitcast %"class.blink::Node"* %59 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %73 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %72, align 8
  %74 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %73, i64 71
  %75 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %74, align 8
  %76 = call %"class.blink::ComputedStyle"* %75(%"class.blink::Node"* %59, i8 zeroext %70, %"class.WTF::AtomicString"* dereferenceable(8) %71) #10
  %77 = icmp eq %"class.blink::ComputedStyle"* %76, null
  br i1 %77, label %161, label %78

78:                                               ; preds = %69
  %79 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %76, i64 0, i32 0, i32 9
  %80 = bitcast [20 x i8]* %79 to i160*
  %81 = load i160, i160* %80, align 8
  %82 = and i160 %81, 43556142965880123323311949751266331066368
  %83 = icmp eq i160 %82, 0
  br i1 %83, label %95, label %84

84:                                               ; preds = %78
  %85 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %86 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %85, i64 0, i32 3, i32 0, i32 0
  %87 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %86, align 8
  %88 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %87, i64 0, i32 2, i32 0, i32 0
  %89 = load %"class.blink::Document"*, %"class.blink::Document"** %88, align 8
  %90 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %89, i64 0, i32 2
  %91 = bitcast %"class.blink::UseCounter"* %90 to void (%"class.blink::UseCounter"*, i32)***
  %92 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %91, align 8
  %93 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %92, i64 3
  %94 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %93, align 8
  call void %94(%"class.blink::UseCounter"* %90, i32 3088) #10
  br label %95

95:                                               ; preds = %78, %84
  %96 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %97 = icmp eq %"class.blink::Node"* %96, null
  br i1 %97, label %140, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %96, i64 0, i32 1
  %100 = load i32, i32* %99, align 8
  %101 = and i32 %100, 12
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %115

103:                                              ; preds = %98
  %104 = bitcast %"class.blink::Node"* %96 to %"class.blink::Element"*
  %105 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %106 = load i8, i8* %105, align 8
  %107 = call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %104, i8 zeroext %106) #10
  %108 = icmp eq %"class.blink::PseudoElement"* %107, null
  %109 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %107, i64 0, i32 0, i32 0, i32 0
  br i1 %108, label %110, label %112

110:                                              ; preds = %103
  %111 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  br label %112

112:                                              ; preds = %110, %103
  %113 = phi %"class.blink::Node"* [ %109, %103 ], [ %111, %110 ]
  %114 = icmp eq %"class.blink::Node"* %113, null
  br i1 %114, label %140, label %115

115:                                              ; preds = %112, %98
  %116 = phi %"class.blink::Node"* [ %113, %112 ], [ %96, %98 ]
  %117 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %118 = load i8, i8* %117, align 8
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %115
  %121 = load %"class.blink::Node"*, %"class.blink::Node"** %5, align 8
  %122 = icmp eq %"class.blink::Node"* %116, %121
  br i1 %122, label %140, label %123

123:                                              ; preds = %120, %115
  %124 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %116, i64 0, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %116, i64 0, i32 6, i32 0, i32 0
  br i1 %127, label %133, label %129

129:                                              ; preds = %123
  %130 = bitcast %"class.blink::NodeData"** %128 to %"class.blink::NodeRareData"**
  %131 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %130, align 8
  %132 = getelementptr inbounds %"class.blink::NodeRareData", %"class.blink::NodeRareData"* %131, i64 0, i32 1, i32 0, i32 0
  br label %135

133:                                              ; preds = %123
  %134 = bitcast %"class.blink::NodeData"** %128 to %"class.blink::NodeRenderingData"**
  br label %135

135:                                              ; preds = %133, %129
  %136 = phi %"class.blink::NodeRenderingData"** [ %132, %129 ], [ %134, %133 ]
  %137 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %136, align 8
  %138 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %137, i64 0, i32 1
  %139 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %138, align 8
  br label %140

140:                                              ; preds = %95, %112, %120, %135
  %141 = phi %"class.blink::LayoutObject"* [ %139, %135 ], [ null, %112 ], [ null, %120 ], [ null, %95 ]
  %142 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 5
  %143 = load i8, i8* %142, align 8, !range !4
  %144 = icmp ne i8 %143, 0
  %145 = call %"class.blink::CSSValue"* @_ZNK5blink11CSSProperty25CSSValueFromComputedStyleERKNS_13ComputedStyleEPKNS_12LayoutObjectEb(%"class.blink::CSSProperty"* %41, %"class.blink::ComputedStyle"* nonnull dereferenceable(104) %76, %"class.blink::LayoutObject"* %141, i1 zeroext %144) #10
  %146 = icmp eq %"class.blink::CSSValue"* %145, null
  br i1 %146, label %147, label %161

147:                                              ; preds = %140
  %148 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set to i8*) acquire, align 8
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %150, label %154, !prof !2

150:                                              ; preds = %147
  %151 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set) #10
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %154, label %153

153:                                              ; preds = %150
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton.2015", %"class.WTF::StaticSingleton.2015"* @_ZZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #10
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set) #10
  br label %154

154:                                              ; preds = %153, %150, %147
  %155 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %41, i64 0, i32 1
  %156 = load i32, i32* %155, align 8
  %157 = icmp eq i32 %156, 1
  br i1 %157, label %161, label %158

158:                                              ; preds = %154
  %159 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %159) #10
  store i32 %156, i32* %3, align 4
  %160 = call { i32*, i8 } @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS5_S7_S8_EERKS2_S2_EENS_18HashTableAddResultIS9_S2_EEOT0_OT1_(%"class.WTF::HashTable.2021"* bitcast (%"class.WTF::StaticSingleton.2015"* @_ZZN5blink12_GLOBAL__N_126LogUnimplementedPropertyIDERKNS_11CSSPropertyEE17s_property_id_set to %"class.WTF::HashTable.2021"*), i32* nonnull dereferenceable(4) %3, i32* nonnull dereferenceable(4) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #10
  br label %161

161:                                              ; preds = %25, %158, %154, %69, %140
  %162 = phi %"class.blink::CSSValue"* [ null, %25 ], [ %145, %140 ], [ null, %69 ], [ null, %154 ], [ null, %158 ]
  %163 = getelementptr inbounds %"class.blink::CSSPropertyRef", %"class.blink::CSSPropertyRef"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [25 x i8*] }, { [25 x i8*] }* @_ZTVN5blink14CustomPropertyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %163, align 8
  %164 = getelementptr inbounds %"class.blink::CSSPropertyRef", %"class.blink::CSSPropertyRef"* %4, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %165 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %166 = icmp eq %"class.WTF::StringImpl"* %165, null
  br i1 %166, label %180, label %167

167:                                              ; preds = %161
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load atomic i32, i32* %168 monotonic, align 4
  %170 = and i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  br i1 %171, label %174, label %176

174:                                              ; preds = %167
  %175 = add i32 %173, -1
  store i32 %175, i32* %172, align 4
  br label %176

176:                                              ; preds = %174, %167
  %177 = phi i32 [ %175, %174 ], [ %173, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %165) #10
  br label %180

180:                                              ; preds = %161, %176, %179
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %27) #10
  br label %181

181:                                              ; preds = %2, %22, %180
  %182 = phi %"class.blink::CSSValue"* [ %162, %180 ], [ null, %22 ], [ null, %2 ]
  ret %"class.blink::CSSValue"* %182
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueEN3WTF12AtomicStringE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CSSPropertyName", align 8
  %4 = bitcast %"class.blink::CSSPropertyName"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 0
  store i32 1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #10
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !3

22:                                               ; preds = %13
  tail call void @llvm.trap() #10
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %2, %8, %23
  %26 = call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %3)
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %25, %38, %41
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #10
  br i1 %7, label %56, label %43

43:                                               ; preds = %42
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %43
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %43
  %53 = phi i32 [ %51, %50 ], [ %49, %43 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %56

56:                                               ; preds = %42, %52, %55
  ret %"class.blink::CSSValue"* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink27CSSComputedStyleDeclaration12GetVariablesEv(%"class.blink::HeapHashMap.668"* noalias sret, %"class.blink::CSSComputedStyleDeclaration"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = icmp eq %"class.blink::Node"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %4, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %20

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::Node"* %4 to %"class.blink::Element"*
  %13 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 8
  %15 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %12, i8 zeroext %14) #10
  %16 = icmp eq %"class.blink::PseudoElement"* %15, null
  %17 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %15, i64 0, i32 0, i32 0, i32 0
  br i1 %16, label %18, label %20

18:                                               ; preds = %11
  %19 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  br label %20

20:                                               ; preds = %18, %11, %6, %2
  %21 = phi %"class.blink::Node"* [ null, %2 ], [ %17, %11 ], [ %19, %18 ], [ %4, %6 ]
  %22 = bitcast %"class.blink::Node"* %21 to i8 (%"class.blink::Node"*)***
  %23 = load i8 (%"class.blink::Node"*)**, i8 (%"class.blink::Node"*)*** %22, align 8
  %24 = getelementptr inbounds i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %23, i64 34
  %25 = load i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %24, align 8
  %26 = tail call zeroext i8 %25(%"class.blink::Node"* %21) #10
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %1, i64 0, i32 2
  %30 = load i8, i8* %29, align 8
  br label %31

31:                                               ; preds = %28, %20
  %32 = phi i8 [ %30, %28 ], [ 0, %20 ]
  %33 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %1, i64 0, i32 4
  %34 = bitcast %"class.blink::Node"* %21 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %35 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %35, i64 71
  %37 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %36, align 8
  %38 = tail call %"class.blink::ComputedStyle"* %37(%"class.blink::Node"* %21, i8 zeroext %32, %"class.WTF::AtomicString"* dereferenceable(8) %33) #10
  %39 = icmp eq %"class.blink::ComputedStyle"* %38, null
  br i1 %39, label %57, label %40

40:                                               ; preds = %31
  %41 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %38, i64 0, i32 0, i32 9
  %42 = bitcast [20 x i8]* %41 to i160*
  %43 = load i160, i160* %42, align 8
  %44 = and i160 %43, 43556142965880123323311949751266331066368
  %45 = icmp eq i160 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %40
  %47 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %48 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %47, i64 0, i32 3, i32 0, i32 0
  %49 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %48, align 8
  %50 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %49, i64 0, i32 2, i32 0, i32 0
  %51 = load %"class.blink::Document"*, %"class.blink::Document"** %50, align 8
  %52 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %51, i64 0, i32 2
  %53 = bitcast %"class.blink::UseCounter"* %52 to void (%"class.blink::UseCounter"*, i32)***
  %54 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %54, i64 3
  %56 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %55, align 8
  tail call void %56(%"class.blink::UseCounter"* %52, i32 3088) #10
  br label %59

57:                                               ; preds = %31
  %58 = bitcast %"class.blink::HeapHashMap.668"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 20, i1 false) #10
  br label %84

59:                                               ; preds = %40, %46
  %60 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %61 = icmp eq %"class.blink::Node"* %60, null
  br i1 %61, label %76, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %60, i64 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = and i32 %64, 12
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %76

67:                                               ; preds = %62
  %68 = bitcast %"class.blink::Node"* %60 to %"class.blink::Element"*
  %69 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %1, i64 0, i32 2
  %70 = load i8, i8* %69, align 8
  %71 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %68, i8 zeroext %70) #10
  %72 = icmp eq %"class.blink::PseudoElement"* %71, null
  %73 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %71, i64 0, i32 0, i32 0, i32 0
  br i1 %72, label %74, label %76

74:                                               ; preds = %67
  %75 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  br label %76

76:                                               ; preds = %59, %62, %67, %74
  %77 = phi %"class.blink::Node"* [ null, %59 ], [ %73, %67 ], [ %75, %74 ], [ %60, %62 ]
  %78 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %77, i64 0, i32 3, i32 0, i32 0
  %79 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %78, align 8
  %80 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %79, i64 0, i32 2, i32 0, i32 0
  %81 = load %"class.blink::Document"*, %"class.blink::Document"** %80, align 8
  %82 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %81, i64 0, i32 144, i32 0, i32 0
  %83 = load %"class.blink::PropertyRegistry"*, %"class.blink::PropertyRegistry"** %82, align 8
  tail call void @_ZN5blink28ComputedStyleCSSValueMapping12GetVariablesERKNS_13ComputedStyleEPKNS_16PropertyRegistryE(%"class.blink::HeapHashMap.668"* sret %0, %"class.blink::ComputedStyle"* nonnull dereferenceable(104) %38, %"class.blink::PropertyRegistry"* %83) #10
  br label %84

84:                                               ; preds = %76, %57
  ret void
}

declare void @_ZN5blink28ComputedStyleCSSValueMapping12GetVariablesERKNS_13ComputedStyleEPKNS_16PropertyRegistryE(%"class.blink::HeapHashMap.668"* sret, %"class.blink::ComputedStyle"* dereferenceable(104), %"class.blink::PropertyRegistry"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink27CSSComputedStyleDeclaration32UpdateStyleAndLayoutTreeIfNeededEPKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readonly, %"class.blink::CSSPropertyName"* readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %84, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = bitcast %"class.blink::Node"* %5 to %"class.blink::Element"*
  %14 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %15 = load i8, i8* %14, align 8
  %16 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %13, i8 zeroext %15) #10
  %17 = icmp eq %"class.blink::PseudoElement"* %16, null
  %18 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %16, i64 0, i32 0, i32 0, i32 0
  br i1 %17, label %19, label %21

19:                                               ; preds = %12
  %20 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  br label %21

21:                                               ; preds = %12, %19
  %22 = phi %"class.blink::Node"* [ %18, %12 ], [ %20, %19 ]
  %23 = icmp eq %"class.blink::Node"* %22, null
  br i1 %23, label %84, label %24

24:                                               ; preds = %7, %21
  %25 = phi %"class.blink::Node"* [ %22, %21 ], [ %5, %7 ]
  %26 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %25, i64 0, i32 3, i32 0, i32 0
  %27 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %26, align 8
  %28 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %27, i64 0, i32 2, i32 0, i32 0
  %29 = load %"class.blink::Document"*, %"class.blink::Document"** %28, align 8
  %30 = tail call %"class.blink::HTMLFrameOwnerElement"* @_ZNK5blink8Document10LocalOwnerEv(%"class.blink::Document"* %29) #10
  %31 = icmp eq %"class.blink::HTMLFrameOwnerElement"* %30, null
  br i1 %31, label %82, label %32

32:                                               ; preds = %24
  %33 = icmp eq %"class.blink::CSSPropertyName"* %1, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %1, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %45, label %38

38:                                               ; preds = %34
  %39 = tail call dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32 %36) #10
  %40 = bitcast %"class.blink::CSSProperty"* %39 to i1 (%"class.blink::CSSProperty"*)***
  %41 = load i1 (%"class.blink::CSSProperty"*)**, i1 (%"class.blink::CSSProperty"*)*** %40, align 8
  %42 = getelementptr inbounds i1 (%"class.blink::CSSProperty"*)*, i1 (%"class.blink::CSSProperty"*)** %41, i64 8
  %43 = load i1 (%"class.blink::CSSProperty"*)*, i1 (%"class.blink::CSSProperty"*)** %42, align 8
  %44 = tail call zeroext i1 %43(%"class.blink::CSSProperty"* %39) #10
  br i1 %44, label %61, label %45

45:                                               ; preds = %32, %34, %38
  %46 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %29, i64 0, i32 59, i32 0, i32 0
  %47 = load %"class.blink::StyleEngine"*, %"class.blink::StyleEngine"** %46, align 8
  tail call void @_ZN5blink11StyleEngine17UpdateActiveStyleEv(%"class.blink::StyleEngine"* %47) #10
  %48 = getelementptr inbounds %"class.blink::StyleEngine", %"class.blink::StyleEngine"* %47, i64 0, i32 31, i32 0, i32 0
  %49 = load %"class.blink::CSSGlobalRuleSet"*, %"class.blink::CSSGlobalRuleSet"** %48, align 8
  %50 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %49, i64 0, i32 0, i32 11
  %51 = load i8, i8* %50, align 8
  %52 = and i8 %51, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %45
  %55 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0)) #10
  %56 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #10
  br label %57

57:                                               ; preds = %45, %54
  %58 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %49, i64 0, i32 0, i32 9, i32 0, i32 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %82, label %61

61:                                               ; preds = %57, %38
  %62 = getelementptr inbounds %"class.blink::HTMLFrameOwnerElement", %"class.blink::HTMLFrameOwnerElement"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %63 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %63, i64 0, i32 2, i32 0, i32 0
  %65 = load %"class.blink::Document"*, %"class.blink::Document"** %64, align 8
  call void @_ZN5blink8Document20UpdateStyleAndLayoutENS_20DocumentUpdateReasonE(%"class.blink::Document"* %65, i32 15) #10
  %66 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %67 = icmp eq %"class.blink::Node"* %66, null
  br i1 %67, label %82, label %68

68:                                               ; preds = %61
  %69 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %66, i64 0, i32 1
  %70 = load i32, i32* %69, align 8
  %71 = and i32 %70, 12
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %82

73:                                               ; preds = %68
  %74 = bitcast %"class.blink::Node"* %66 to %"class.blink::Element"*
  %75 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %76 = load i8, i8* %75, align 8
  %77 = call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %74, i8 zeroext %76) #10
  %78 = icmp eq %"class.blink::PseudoElement"* %77, null
  %79 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %77, i64 0, i32 0, i32 0, i32 0
  br i1 %78, label %80, label %82

80:                                               ; preds = %73
  %81 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  br label %82

82:                                               ; preds = %57, %80, %73, %68, %61, %24
  %83 = phi %"class.blink::Node"* [ %25, %24 ], [ %25, %57 ], [ null, %61 ], [ %79, %73 ], [ %81, %80 ], [ %66, %68 ]
  call void @_ZN5blink8Document31UpdateStyleAndLayoutTreeForNodeEPKNS_4NodeE(%"class.blink::Document"* %29, %"class.blink::Node"* %83) #10
  br label %84

84:                                               ; preds = %2, %21, %82
  ret void
}

declare %"class.blink::HTMLFrameOwnerElement"* @_ZNK5blink8Document10LocalOwnerEv(%"class.blink::Document"*) local_unnamed_addr #3

declare dereferenceable(24) %"class.blink::CSSProperty"* @_ZN5blink11CSSProperty3GetENS_13CSSPropertyIDE(i32) local_unnamed_addr #3

declare void @_ZN5blink8Document31UpdateStyleAndLayoutTreeForNodeEPKNS_4NodeE(%"class.blink::Document"*, %"class.blink::Node"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink27CSSComputedStyleDeclaration28UpdateStyleAndLayoutIfNeededEPKNS_11CSSPropertyE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::CSSProperty"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = icmp eq %"class.blink::Node"* %4, null
  br i1 %5, label %192, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %4, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::Node"* %4 to %"class.blink::Element"*
  %13 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %14 = load i8, i8* %13, align 8
  %15 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %12, i8 zeroext %14) #10
  %16 = icmp eq %"class.blink::PseudoElement"* %15, null
  %17 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %15, i64 0, i32 0, i32 0, i32 0
  br i1 %16, label %18, label %20

18:                                               ; preds = %11
  %19 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  br label %20

20:                                               ; preds = %11, %18
  %21 = phi %"class.blink::Node"* [ %17, %11 ], [ %19, %18 ]
  %22 = icmp eq %"class.blink::Node"* %21, null
  br i1 %22, label %192, label %23

23:                                               ; preds = %6, %20
  %24 = phi %"class.blink::Node"* [ %21, %20 ], [ %4, %6 ]
  %25 = icmp eq %"class.blink::CSSProperty"* %1, null
  br i1 %25, label %132, label %26

26:                                               ; preds = %23
  %27 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %28 = icmp eq %"class.blink::Node"* %27, null
  br i1 %28, label %43, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %27, i64 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 12
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %43

34:                                               ; preds = %29
  %35 = bitcast %"class.blink::Node"* %27 to %"class.blink::Element"*
  %36 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %37 = load i8, i8* %36, align 8
  %38 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %35, i8 zeroext %37) #10
  %39 = icmp eq %"class.blink::PseudoElement"* %38, null
  %40 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %38, i64 0, i32 0, i32 0, i32 0
  br i1 %39, label %41, label %43

41:                                               ; preds = %34
  %42 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  br label %43

43:                                               ; preds = %41, %34, %29, %26
  %44 = phi %"class.blink::Node"* [ null, %26 ], [ %40, %34 ], [ %42, %41 ], [ %27, %29 ]
  %45 = bitcast %"class.blink::Node"* %44 to i8 (%"class.blink::Node"*)***
  %46 = load i8 (%"class.blink::Node"*)**, i8 (%"class.blink::Node"*)*** %45, align 8
  %47 = getelementptr inbounds i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %46, i64 34
  %48 = load i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %47, align 8
  %49 = tail call zeroext i8 %48(%"class.blink::Node"* %44) #10
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %53 = load i8, i8* %52, align 8
  br label %54

54:                                               ; preds = %51, %43
  %55 = phi i8 [ %53, %51 ], [ 0, %43 ]
  %56 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 4
  %57 = bitcast %"class.blink::Node"* %44 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %58 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %57, align 8
  %59 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %58, i64 71
  %60 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %59, align 8
  %61 = tail call %"class.blink::ComputedStyle"* %60(%"class.blink::Node"* %44, i8 zeroext %55, %"class.WTF::AtomicString"* dereferenceable(8) %56) #10
  %62 = icmp eq %"class.blink::ComputedStyle"* %61, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %61, i64 0, i32 0, i32 9
  %65 = bitcast [20 x i8]* %64 to i160*
  %66 = load i160, i160* %65, align 8
  %67 = and i160 %66, 43556142965880123323311949751266331066368
  %68 = icmp eq i160 %67, 0
  br i1 %68, label %80, label %69

69:                                               ; preds = %63
  %70 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %71 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %70, i64 0, i32 3, i32 0, i32 0
  %72 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %71, align 8
  %73 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %72, i64 0, i32 2, i32 0, i32 0
  %74 = load %"class.blink::Document"*, %"class.blink::Document"** %73, align 8
  %75 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %74, i64 0, i32 2
  %76 = bitcast %"class.blink::UseCounter"* %75 to void (%"class.blink::UseCounter"*, i32)***
  %77 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %77, i64 3
  %79 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %78, align 8
  tail call void %79(%"class.blink::UseCounter"* %75, i32 3088) #10
  br label %80

80:                                               ; preds = %54, %63, %69
  %81 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %82 = icmp eq %"class.blink::Node"* %81, null
  br i1 %82, label %125, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %81, i64 0, i32 1
  %85 = load i32, i32* %84, align 8
  %86 = and i32 %85, 12
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %100

88:                                               ; preds = %83
  %89 = bitcast %"class.blink::Node"* %81 to %"class.blink::Element"*
  %90 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %91 = load i8, i8* %90, align 8
  %92 = tail call %"class.blink::PseudoElement"* @_ZNK5blink7Element16GetPseudoElementENS_8PseudoIdE(%"class.blink::Element"* nonnull %89, i8 zeroext %91) #10
  %93 = icmp eq %"class.blink::PseudoElement"* %92, null
  %94 = getelementptr inbounds %"class.blink::PseudoElement", %"class.blink::PseudoElement"* %92, i64 0, i32 0, i32 0, i32 0
  br i1 %93, label %95, label %97

95:                                               ; preds = %88
  %96 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi %"class.blink::Node"* [ %94, %88 ], [ %96, %95 ]
  %99 = icmp eq %"class.blink::Node"* %98, null
  br i1 %99, label %125, label %100

100:                                              ; preds = %97, %83
  %101 = phi %"class.blink::Node"* [ %98, %97 ], [ %81, %83 ]
  %102 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %103 = load i8, i8* %102, align 8
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %108, label %105

105:                                              ; preds = %100
  %106 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %107 = icmp eq %"class.blink::Node"* %101, %106
  br i1 %107, label %125, label %108

108:                                              ; preds = %105, %100
  %109 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %101, i64 0, i32 1
  %110 = load i32, i32* %109, align 8
  %111 = and i32 %110, 1
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %101, i64 0, i32 6, i32 0, i32 0
  br i1 %112, label %118, label %114

114:                                              ; preds = %108
  %115 = bitcast %"class.blink::NodeData"** %113 to %"class.blink::NodeRareData"**
  %116 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %115, align 8
  %117 = getelementptr inbounds %"class.blink::NodeRareData", %"class.blink::NodeRareData"* %116, i64 0, i32 1, i32 0, i32 0
  br label %120

118:                                              ; preds = %108
  %119 = bitcast %"class.blink::NodeData"** %113 to %"class.blink::NodeRenderingData"**
  br label %120

120:                                              ; preds = %118, %114
  %121 = phi %"class.blink::NodeRenderingData"** [ %117, %114 ], [ %119, %118 ]
  %122 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %121, align 8
  %123 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %122, i64 0, i32 1
  %124 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %123, align 8
  br label %125

125:                                              ; preds = %80, %97, %105, %120
  %126 = phi %"class.blink::LayoutObject"* [ %124, %120 ], [ null, %97 ], [ null, %105 ], [ null, %80 ]
  %127 = bitcast %"class.blink::CSSProperty"* %1 to i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)***
  %128 = load i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)**, i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)*** %127, align 8
  %129 = getelementptr inbounds i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)*, i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)** %128, i64 9
  %130 = load i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)*, i1 (%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"*, %"class.blink::LayoutObject"*)** %129, align 8
  %131 = tail call zeroext i1 %130(%"class.blink::CSSProperty"* nonnull %1, %"class.blink::ComputedStyle"* %61, %"class.blink::LayoutObject"* %126) #10
  br i1 %131, label %187, label %132

132:                                              ; preds = %23, %125
  %133 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase33is_css_container_queries_enabled_E, align 1, !range !4
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %192, label %135

135:                                              ; preds = %132, %183
  %136 = phi %"class.blink::Node"* [ %185, %183 ], [ %24, %132 ]
  %137 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %136, i64 0, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = and i32 %138, 12
  %140 = icmp eq i32 %139, 0
  %141 = and i32 %138, 1
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %136, i64 0, i32 6, i32 0, i32 0
  br i1 %140, label %144, label %155

144:                                              ; preds = %135
  br i1 %142, label %151, label %145

145:                                              ; preds = %144
  %146 = bitcast %"class.blink::NodeData"** %143 to %"class.blink::NodeRareData"**
  %147 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %146, align 8
  %148 = getelementptr inbounds %"class.blink::NodeRareData", %"class.blink::NodeRareData"* %147, i64 0, i32 1, i32 0, i32 0
  %149 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %148, align 8
  %150 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %149, i64 0, i32 2, i32 0
  br label %170

151:                                              ; preds = %144
  %152 = bitcast %"class.blink::NodeData"** %143 to %"class.blink::NodeRenderingData"**
  %153 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %152, align 8
  %154 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %153, i64 0, i32 2, i32 0
  br label %170

155:                                              ; preds = %135
  br i1 %142, label %160, label %156

156:                                              ; preds = %155
  %157 = bitcast %"class.blink::NodeData"** %143 to %"class.blink::NodeRareData"**
  %158 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %157, align 8
  %159 = getelementptr inbounds %"class.blink::NodeRareData", %"class.blink::NodeRareData"* %158, i64 0, i32 1, i32 0, i32 0
  br label %162

160:                                              ; preds = %155
  %161 = bitcast %"class.blink::NodeData"** %143 to %"class.blink::NodeRenderingData"**
  br label %162

162:                                              ; preds = %160, %156
  %163 = phi %"class.blink::NodeRenderingData"** [ %159, %156 ], [ %161, %160 ]
  %164 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %163, align 8
  %165 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %164, i64 0, i32 1
  %166 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %165, align 8
  %167 = icmp eq %"class.blink::LayoutObject"* %166, null
  br i1 %167, label %187, label %168

168:                                              ; preds = %162
  %169 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %166, i64 0, i32 5, i32 0
  br label %170

170:                                              ; preds = %168, %151, %145
  %171 = phi %"class.blink::ComputedStyle"** [ %169, %168 ], [ %150, %145 ], [ %154, %151 ]
  %172 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %171, align 8
  %173 = icmp eq %"class.blink::ComputedStyle"* %172, null
  br i1 %173, label %187, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %172, i64 0, i32 0, i32 3, i32 0, i32 0
  %176 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"** %175, align 8
  %177 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* %176, i64 0, i32 3, i32 0, i32 0
  %178 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"** %177, align 8
  %179 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* %178, i64 0, i32 39
  %180 = load i32, i32* %179, align 4
  %181 = trunc i32 %180 to i16
  %182 = icmp slt i16 %181, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %174
  %184 = tail call %"class.blink::ContainerNode"* @_ZN5blink17FlatTreeTraversal14TraverseParentERKNS_4NodeE(%"class.blink::Node"* nonnull dereferenceable(64) %136) #10
  %185 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %184, i64 0, i32 0
  %186 = icmp eq %"class.blink::ContainerNode"* %184, null
  br i1 %186, label %192, label %135

187:                                              ; preds = %174, %162, %170, %125
  %188 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %24, i64 0, i32 3, i32 0, i32 0
  %189 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %188, align 8
  %190 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %189, i64 0, i32 2, i32 0, i32 0
  %191 = load %"class.blink::Document"*, %"class.blink::Document"** %190, align 8
  tail call void @_ZN5blink8Document27UpdateStyleAndLayoutForNodeEPKNS_4NodeENS_20DocumentUpdateReasonE(%"class.blink::Document"* %191, %"class.blink::Node"* nonnull %24, i32 15) #10
  br label %192

192:                                              ; preds = %183, %2, %132, %187, %20
  ret void
}

declare void @_ZN5blink8Document27UpdateStyleAndLayoutForNodeEPKNS_4NodeENS_20DocumentUpdateReasonE(%"class.blink::Document"*, %"class.blink::Node"*, i32) local_unnamed_addr #3

declare void @_ZN5blink14CSSPropertyRefC1ERKNS_15CSSPropertyNameERKNS_8DocumentE(%"class.blink::CSSPropertyRef"*, %"class.blink::CSSPropertyName"* dereferenceable(16), %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #3

declare %"class.blink::CSSValue"* @_ZNK5blink11CSSProperty25CSSValueFromComputedStyleERKNS_13ComputedStyleEPKNS_12LayoutObjectEb(%"class.blink::CSSProperty"*, %"class.blink::ComputedStyle"* dereferenceable(104), %"class.blink::LayoutObject"*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink27CSSComputedStyleDeclaration16GetPropertyValueENS_13CSSPropertyIDE(%"class.blink::CSSComputedStyleDeclaration"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CSSPropertyName", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = icmp eq i32 %1, 1
  br i1 %5, label %31, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.blink::CSSPropertyName"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 0
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %3) #10
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  br i1 %17, label %20, label %22

20:                                               ; preds = %13
  %21 = add i32 %19, -1
  store i32 %21, i32* %18, align 4
  br label %22

22:                                               ; preds = %20, %13
  %23 = phi i32 [ %21, %20 ], [ %19, %13 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %11) #10
  br label %26

26:                                               ; preds = %6, %22, %25
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  %27 = icmp eq %"class.blink::CSSValue"* %10, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = call %"class.WTF::StringImpl"* @_ZNK5blink8CSSValue7CssTextEv(%"class.blink::CSSValue"* nonnull %10) #10
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %29, %"class.WTF::StringImpl"** %30, align 8
  br label %34

31:                                               ; preds = %2, %26
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0) #10
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  br label %34

34:                                               ; preds = %31, %28
  %35 = phi %"class.WTF::StringImpl"* [ %33, %31 ], [ %29, %28 ]
  ret %"class.WTF::StringImpl"* %35
}

declare %"class.WTF::StringImpl"* @_ZNK5blink8CSSValue7CssTextEv(%"class.blink::CSSValue"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink27CSSComputedStyleDeclaration6lengthEv(%"class.blink::CSSComputedStyleDeclaration"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::Node"*, %"class.blink::Node"** %2, align 8
  %4 = icmp eq %"class.blink::Node"* %3, null
  br i1 %4, label %21, label %5

5:                                                ; preds = %1
  %6 = tail call zeroext i1 @_ZNK5blink4Node16InActiveDocumentEv(%"class.blink::Node"* nonnull %3) #10
  br i1 %6, label %7, label %21

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1
  %9 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %8) #10
  %10 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to i8*) acquire, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16, !prof !2

12:                                               ; preds = %7
  %13 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 0), i8 0, i64 16, i1 false) #10
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  br label %16

16:                                               ; preds = %15, %12, %7
  %17 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %16
  tail call void @_ZN5blink11CSSProperty39FilterWebExposedCSSPropertiesIntoVectorEPKNS_16ExecutionContextEPKNS_13CSSPropertyIDEmRN3WTF6VectorIPKS0_Lj0ENS7_18PartitionAllocatorEEE(%"class.blink::ExecutionContext"* %9, i32* getelementptr inbounds ([343 x i32], [343 x i32]* @_ZN5blinkL24kCSSComputablePropertiesE, i64 0, i64 0), i64 343, %"class.WTF::Vector"* dereferenceable(16) bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*)) #10
  %20 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  br label %21

21:                                               ; preds = %19, %16, %1, %5
  %22 = phi i32 [ 0, %5 ], [ 0, %1 ], [ %17, %16 ], [ %20, %19 ]
  ret i32 %22
}

declare zeroext i1 @_ZNK5blink4Node16InActiveDocumentEv(%"class.blink::Node"*) local_unnamed_addr #3

declare %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink27CSSComputedStyleDeclaration4itemEj(%"class.blink::CSSComputedStyleDeclaration"*, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = tail call i32 @_ZNK5blink27CSSComputedStyleDeclaration6lengthEv(%"class.blink::CSSComputedStyleDeclaration"* %0)
  %5 = icmp ugt i32 %4, %1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0) #10
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  br label %53

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1
  %11 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %10) #10
  %12 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to i8*) acquire, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %18, !prof !2

14:                                               ; preds = %9
  %15 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 0), i8 0, i64 16, i1 false) #10
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  br label %18

18:                                               ; preds = %17, %14, %9
  %19 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZN5blink11CSSProperty39FilterWebExposedCSSPropertiesIntoVectorEPKNS_16ExecutionContextEPKNS_13CSSPropertyIDEmRN3WTF6VectorIPKS0_Lj0ENS7_18PartitionAllocatorEEE(%"class.blink::ExecutionContext"* %11, i32* getelementptr inbounds ([343 x i32], [343 x i32]* @_ZN5blinkL24kCSSComputablePropertiesE, i64 0, i64 0), i64 343, %"class.WTF::Vector"* dereferenceable(16) bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*)) #10
  br label %22

22:                                               ; preds = %18, %21
  %23 = tail call dereferenceable(8) %"class.blink::CSSProperty"** @_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*), i32 %1) #10
  %24 = bitcast %"class.blink::CSSProperty"** %23 to %"class.blink::CSSUnresolvedProperty"**
  %25 = load %"class.blink::CSSUnresolvedProperty"*, %"class.blink::CSSUnresolvedProperty"** %24, align 8
  %26 = bitcast %"class.blink::CSSUnresolvedProperty"* %25 to %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)***
  %27 = load %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)**, %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)*, %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)** %27, i64 4
  %29 = load %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)*, %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)** %28, align 8
  %30 = tail call dereferenceable(8) %"class.WTF::AtomicString"* %29(%"class.blink::CSSUnresolvedProperty"* %25) #10
  %31 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %51, label %34

34:                                               ; preds = %22
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i33
  %43 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %42, i33 1) #10
  %44 = extractvalue { i33, i1 } %43, 1
  %45 = extractvalue { i33, i1 } %43, 0
  %46 = icmp slt i33 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49, !prof !3

48:                                               ; preds = %39
  tail call void @llvm.trap() #10
  unreachable

49:                                               ; preds = %39
  %50 = trunc i33 %45 to i32
  store i32 %50, i32* %40, align 4
  br label %51

51:                                               ; preds = %22, %34, %49
  %52 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %52, align 8
  br label %53

53:                                               ; preds = %51, %6
  %54 = phi %"class.WTF::StringImpl"* [ %32, %51 ], [ %8, %6 ]
  ret %"class.WTF::StringImpl"* %54
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink27CSSComputedStyleDeclaration18CssPropertyMatchesENS_13CSSPropertyIDERKNS_8CSSValueE(%"class.blink::CSSComputedStyleDeclaration"*, i32, %"class.blink::CSSValue"* dereferenceable(3)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::CSSPropertyName", align 8
  switch i32 %1, label %51 [
    i32 8, label %5
    i32 1, label %72
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %2, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = icmp ult i8 %7, 3
  br i1 %8, label %9, label %51

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.blink::Node"*, %"class.blink::Node"** %10, align 8
  %12 = icmp eq %"class.blink::Node"* %11, null
  br i1 %12, label %51, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 0, i32 3, i32 0, i32 0
  %15 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %15, i64 0, i32 2, i32 0, i32 0
  %17 = load %"class.blink::Document"*, %"class.blink::Document"** %16, align 8
  tail call void @_ZN5blink8Document20UpdateStyleAndLayoutENS_20DocumentUpdateReasonE(%"class.blink::Document"* %17, i32 7) #10
  %18 = load %"class.blink::Node"*, %"class.blink::Node"** %10, align 8
  %19 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 2
  %20 = load i8, i8* %19, align 8
  %21 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %22 = bitcast %"class.blink::Node"* %18 to %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)***
  %23 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)**, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %23, i64 71
  %25 = load %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)*, %"class.blink::ComputedStyle"* (%"class.blink::Node"*, i8, %"class.WTF::AtomicString"*)** %24, align 8
  %26 = tail call %"class.blink::ComputedStyle"* %25(%"class.blink::Node"* %18, i8 zeroext %20, %"class.WTF::AtomicString"* dereferenceable(8) %21) #10
  %27 = icmp eq %"class.blink::ComputedStyle"* %26, null
  br i1 %27, label %51, label %28

28:                                               ; preds = %13
  %29 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %30, i64 0, i32 1, i32 0, i32 0
  %32 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %32, i64 0, i32 1, i32 0, i32 12, i32 0
  %34 = bitcast %"struct.blink::FontDescription::BitFields"* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = lshr i64 %35, 21
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 15
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %28
  %41 = load i8, i8* %6, align 1
  %42 = icmp ne i8 %41, 2
  %43 = icmp eq %"class.blink::CSSValue"* %2, null
  %44 = or i1 %43, %42
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = add nuw nsw i32 %38, 67
  %47 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %2, i64 1, i32 1
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, %46
  br i1 %50, label %81, label %51

51:                                               ; preds = %9, %5, %3, %40, %45, %13, %28
  %52 = bitcast %"class.blink::CSSPropertyName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #10
  %53 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %4, i64 0, i32 0
  store i32 %1, i32* %53, align 8
  %54 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %54, align 8
  %55 = call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %4) #10
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %51
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  br i1 %62, label %65, label %67

65:                                               ; preds = %58
  %66 = add i32 %64, -1
  store i32 %66, i32* %63, align 4
  br label %67

67:                                               ; preds = %65, %58
  %68 = phi i32 [ %66, %65 ], [ %64, %58 ]
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %56) #10
  br label %71

71:                                               ; preds = %70, %67, %51
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #10
  br label %72

72:                                               ; preds = %3, %71
  %73 = phi %"class.blink::CSSValue"* [ %55, %71 ], [ null, %3 ]
  %74 = icmp eq %"class.blink::CSSValue"* %73, %2
  br i1 %74, label %81, label %75

75:                                               ; preds = %72
  %76 = icmp ne %"class.blink::CSSValue"* %73, null
  %77 = icmp ne %"class.blink::CSSValue"* %2, null
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = call zeroext i1 @_ZNK5blink8CSSValueeqERKS0_(%"class.blink::CSSValue"* nonnull %73, %"class.blink::CSSValue"* nonnull dereferenceable(3) %2) #10
  br label %81

81:                                               ; preds = %79, %75, %72, %45
  %82 = phi i1 [ true, %45 ], [ %80, %79 ], [ true, %72 ], [ false, %75 ]
  ret i1 %82
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::MutableCSSPropertyValueSet"* @_ZNK5blink27CSSComputedStyleDeclaration14CopyPropertiesEv(%"class.blink::CSSComputedStyleDeclaration"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1
  %3 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %2) #10
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %10, !prof !2

6:                                                ; preds = %1
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 0), i8 0, i64 16, i1 false) #10
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties) #10
  br label %10

10:                                               ; preds = %9, %6, %1
  %11 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  tail call void @_ZN5blink11CSSProperty39FilterWebExposedCSSPropertiesIntoVectorEPKNS_16ExecutionContextEPKNS_13CSSPropertyIDEmRN3WTF6VectorIPKS0_Lj0ENS7_18PartitionAllocatorEEE(%"class.blink::ExecutionContext"* %3, i32* getelementptr inbounds ([343 x i32], [343 x i32]* @_ZN5blinkL24kCSSComputablePropertiesE, i64 0, i64 0), i64 343, %"class.WTF::Vector"* dereferenceable(16) bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*)) #10
  br label %14

14:                                               ; preds = %10, %13
  %15 = tail call %"class.blink::MutableCSSPropertyValueSet"* @_ZNK5blink27CSSComputedStyleDeclaration19CopyPropertiesInSetERKN3WTF6VectorIPKNS_11CSSPropertyELj0ENS1_18PartitionAllocatorEEE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.WTF::Vector"* dereferenceable(16) bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink27CSSComputedStyleDeclaration20ComputablePropertiesEPKNS_16ExecutionContextEE12s_properties to %"class.WTF::Vector"*))
  ret %"class.blink::MutableCSSPropertyValueSet"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::MutableCSSPropertyValueSet"* @_ZNK5blink27CSSComputedStyleDeclaration19CopyPropertiesInSetERKN3WTF6VectorIPKNS_11CSSPropertyELj0ENS1_18PartitionAllocatorEEE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::HeapVector.1938", align 8
  %4 = alloca %"class.blink::CSSPropertyName", align 8
  %5 = alloca %"class.blink::CSSPropertyValue", align 8
  %6 = bitcast %"class.blink::HeapVector.1938"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6160, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0, i32 0, i32 1, i64 0
  %8 = bitcast %"class.blink::HeapVector.1938"* %3 to i8**
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 256, i32* %9, align 8
  %10 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 6148, i1 false) #10
  %12 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %14, 256
  br i1 %15, label %16, label %31

16:                                               ; preds = %2
  %17 = zext i32 %14 to i64
  %18 = call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_16CSSPropertyValueEEEmm(i64 %17) #10
  %19 = udiv i64 %18, 24
  %20 = call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE4CallEm(i64 %19) #10
  %21 = ptrtoint %"class.blink::HeapVectorBacking"* %20 to i64
  %22 = bitcast %"class.blink::HeapVector.1938"* %3 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = trunc i64 %19 to i32
  store i32 %23, i32* %9, align 8
  %24 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %20, i64 0, i32 0
  %28 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %27) #10
  br label %29

29:                                               ; preds = %26, %16
  %30 = load i32, i32* %13, align 4
  br label %31

31:                                               ; preds = %29, %2
  %32 = phi i32 [ %30, %29 ], [ %14, %2 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %43, label %34

34:                                               ; preds = %31
  %35 = bitcast %"class.blink::CSSPropertyName"* %4 to i8*
  %36 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %4, i64 0, i32 0
  %37 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  %38 = bitcast %"class.blink::CSSPropertyValue"* %5 to i8*
  %39 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %5, i64 0, i32 0
  %40 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %5, i64 0, i32 1, i32 0, i32 0
  %41 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %95

43:                                               ; preds = %154, %31
  %44 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %44, align 8
  %46 = load i32, i32* %10, align 4
  %47 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64 136) #10
  %48 = bitcast i8* %47 to %"class.blink::MutableCSSPropertyValueSet"*
  call void @_ZN5blink26MutableCSSPropertyValueSetC1EPKNS_16CSSPropertyValueEj(%"class.blink::MutableCSSPropertyValueSet"* %48, %"class.blink::CSSPropertyValue"* %45, i32 %46) #10
  %49 = getelementptr inbounds i8, i8* %47, i64 -4
  %50 = bitcast i8* %49 to i16*
  %51 = load atomic i16, i16* %50 monotonic, align 2
  %52 = or i16 %51, 1
  store atomic i16 %52, i16* %50 release, align 2
  %53 = load i32, i32* %10, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %57, !prof !3

55:                                               ; preds = %43
  %56 = bitcast i8* %7 to %"class.blink::CSSPropertyValue"*
  br label %88

57:                                               ; preds = %43
  %58 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %44, align 8
  %59 = icmp ne %"class.blink::CSSPropertyValue"* %58, null
  %60 = bitcast i8* %7 to %"class.blink::CSSPropertyValue"*
  %61 = icmp ne %"class.blink::CSSPropertyValue"* %58, %60
  %62 = and i1 %59, %61
  br i1 %62, label %88, label %63

63:                                               ; preds = %57
  %64 = zext i32 %53 to i64
  %65 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %58, i64 %64
  br label %66

66:                                               ; preds = %84, %63
  %67 = phi %"class.blink::CSSPropertyValue"* [ %85, %84 ], [ %58, %63 ]
  %68 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %67, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %70, label %84, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %69) #10
  br label %84

84:                                               ; preds = %83, %80, %66
  %85 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %67, i64 1
  %86 = icmp eq %"class.blink::CSSPropertyValue"* %85, %65
  br i1 %86, label %87, label %66

87:                                               ; preds = %84
  store i32 0, i32* %10, align 4
  br label %88

88:                                               ; preds = %55, %87, %57
  %89 = phi %"class.blink::CSSPropertyValue"* [ %56, %55 ], [ %60, %87 ], [ %60, %57 ]
  %90 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %44, align 8
  %91 = icmp eq %"class.blink::CSSPropertyValue"* %90, %89
  br i1 %91, label %94, label %92, !prof !5

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.blink::HeapVector.1938", %"class.blink::HeapVector.1938"* %3, i64 0, i32 0, i32 0
  call void @_ZN3WTF12VectorBufferIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.1942"* nonnull %93, %"class.blink::CSSPropertyValue"* %90) #10
  br label %94

94:                                               ; preds = %88, %92
  call void @llvm.lifetime.end.p0i8(i64 6160, i8* nonnull %6) #10
  ret %"class.blink::MutableCSSPropertyValueSet"* %48

95:                                               ; preds = %34, %154
  %96 = phi i32 [ 0, %34 ], [ %155, %154 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 16, i1 false)
  %97 = call dereferenceable(8) %"class.blink::CSSProperty"** @_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %1, i32 %96) #10
  %98 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %97, align 8
  %99 = bitcast %"class.blink::CSSProperty"* %98 to { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)***
  %100 = load { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)**, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*** %99, align 8
  %101 = getelementptr inbounds { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)** %100, i64 6
  %102 = load { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)*, { i32, %"class.WTF::StringImpl"* } (%"class.blink::CSSProperty"*)** %101, align 8
  %103 = call { i32, %"class.WTF::StringImpl"* } %102(%"class.blink::CSSProperty"* %98) #10
  %104 = extractvalue { i32, %"class.WTF::StringImpl"* } %103, 0
  store i32 %104, i32* %36, align 8
  %105 = extractvalue { i32, %"class.WTF::StringImpl"* } %103, 1
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %37, align 8
  %106 = call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %4)
  %107 = icmp eq %"class.blink::CSSValue"* %106, null
  br i1 %107, label %138, label %108

108:                                              ; preds = %95
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #10
  call void @_ZN5blink24CSSPropertyValueMetadataC1ERKNS_15CSSPropertyNameEbibb(%"struct.blink::CSSPropertyValueMetadata"* nonnull %39, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %4, i1 zeroext false, i32 0, i1 zeroext false, i1 zeroext false) #10
  store %"class.blink::CSSValue"* %106, %"class.blink::CSSValue"** %40, align 8
  %109 = load i32, i32* %10, align 4
  %110 = load i32, i32* %9, align 8
  %111 = icmp eq i32 %109, %110
  br i1 %111, label %120, label %112, !prof !3

112:                                              ; preds = %108
  %113 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %41, align 8
  %114 = zext i32 %109 to i64
  %115 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %113, i64 %114
  %116 = bitcast %"class.blink::CSSPropertyValue"* %115 to i8*
  %117 = call %"class.blink::CSSPropertyValue"* @_ZN3WTF15ConstructTraitsIN5blink16CSSPropertyValueENS_12VectorTraitsIS2_EENS1_13HeapAllocatorEE25ConstructAndNotifyElementIJS2_EEEPS2_PvDpOT_(i8* %116, %"class.blink::CSSPropertyValue"* nonnull dereferenceable(24) %5) #10
  %118 = load i32, i32* %10, align 4
  %119 = add i32 %118, 1
  store i32 %119, i32* %10, align 4
  br label %121

120:                                              ; preds = %108
  call void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.1941"* nonnull %12, %"class.blink::CSSPropertyValue"* nonnull dereferenceable(24) %5) #10
  br label %121

121:                                              ; preds = %112, %120
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %123 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %123, label %137, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load atomic i32, i32* %125 monotonic, align 4
  %127 = and i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  br i1 %128, label %131, label %133

131:                                              ; preds = %124
  %132 = add i32 %130, -1
  store i32 %132, i32* %129, align 4
  br label %133

133:                                              ; preds = %131, %124
  %134 = phi i32 [ %132, %131 ], [ %130, %124 ]
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %137

136:                                              ; preds = %133
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %122) #10
  br label %137

137:                                              ; preds = %121, %133, %136
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #10
  br label %138

138:                                              ; preds = %95, %137
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %154, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %139) #10
  br label %154

154:                                              ; preds = %138, %150, %153
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #10
  %155 = add nuw i32 %96, 1
  %156 = load i32, i32* %13, align 4
  %157 = icmp ult i32 %155, %156
  br i1 %157, label %95, label %43
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.blink::CSSRule"* @_ZNK5blink27CSSComputedStyleDeclaration10parentRuleEv(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone) unnamed_addr #4 align 2 {
  ret %"class.blink::CSSRule"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27CSSComputedStyleDeclaration16getPropertyValueERKN3WTF6StringE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0, i32 1
  %4 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink22ExecutionContextClient19GetExecutionContextEv(%"class.blink::ExecutionContextClient"* %3) #10
  %5 = tail call i32 @_ZN5blink13CssPropertyIDEPKNS_16ExecutionContextERKN3WTF6StringE(%"class.blink::ExecutionContext"* %4, %"class.WTF::String"* dereferenceable(8) %1) #10
  switch i32 %5, label %40 [
    i32 0, label %43
    i32 1, label %6
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %33, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = and i32 %12, 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %10
  %16 = load atomic i32, i32* %11 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #10
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !3

28:                                               ; preds = %19
  tail call void @llvm.trap() #10
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  br label %33

31:                                               ; preds = %10
  %32 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %33

33:                                               ; preds = %6, %15, %29, %31
  %34 = phi %"class.WTF::StringImpl"* [ %32, %31 ], [ %8, %15 ], [ %8, %29 ], [ null, %6 ]
  %35 = tail call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueEN3WTF12AtomicStringE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.WTF::StringImpl"* %34)
  %36 = icmp eq %"class.blink::CSSValue"* %35, null
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = tail call %"class.WTF::StringImpl"* @_ZNK5blink8CSSValue7CssTextEv(%"class.blink::CSSValue"* nonnull %35) #10
  %39 = ptrtoint %"class.WTF::StringImpl"* %38 to i64
  br label %43

40:                                               ; preds = %2
  %41 = tail call %"class.WTF::StringImpl"* @_ZNK5blink27CSSComputedStyleDeclaration16GetPropertyValueENS_13CSSPropertyIDE(%"class.blink::CSSComputedStyleDeclaration"* %0, i32 %5)
  %42 = ptrtoint %"class.WTF::StringImpl"* %41 to i64
  br label %43

43:                                               ; preds = %2, %33, %37, %40
  %44 = phi i64 [ %39, %37 ], [ %42, %40 ], [ 0, %2 ], [ 0, %33 ]
  %45 = inttoptr i64 %44 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %45
}

declare i32 @_ZN5blink13CssPropertyIDEPKNS_16ExecutionContextERKN3WTF6StringE(%"class.blink::ExecutionContext"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27CSSComputedStyleDeclaration19getPropertyPriorityERKN3WTF6StringE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, %"class.WTF::String"* nocapture readnone dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0) #10
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  ret %"class.WTF::StringImpl"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27CSSComputedStyleDeclaration20GetPropertyShorthandERKN3WTF6StringE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, %"class.WTF::String"* nocapture readnone dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0) #10
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  ret %"class.WTF::StringImpl"* %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink27CSSComputedStyleDeclaration18IsPropertyImplicitERKN3WTF6StringE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, %"class.WTF::String"* nocapture readnone dereferenceable(8)) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CSSComputedStyleDeclaration11setPropertyEPKNS_16ExecutionContextERKN3WTF6StringES7_S7_RNS_14ExceptionStateE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, %"class.blink::ExecutionContext"* nocapture readnone, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readnone dereferenceable(8), %"class.WTF::String"* nocapture readnone dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 align 2 {
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::StringAppend", align 8
  %9 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = bitcast %"class.WTF::StringAppend"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %89, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %31

21:                                               ; preds = %14
  %22 = zext i32 %20 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #10
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !3

28:                                               ; preds = %21
  tail call void @llvm.trap() #10
  unreachable

29:                                               ; preds = %21
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %19, align 4
  br label %31

31:                                               ; preds = %29, %14
  %32 = phi i32 [ %30, %29 ], [ %20, %14 ]
  %33 = load atomic i32, i32* %15 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %46

36:                                               ; preds = %31
  %37 = zext i32 %32 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #10
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !3

43:                                               ; preds = %36
  tail call void @llvm.trap() #10
  unreachable

44:                                               ; preds = %36
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %19, align 4
  br label %46

46:                                               ; preds = %44, %31
  %47 = phi i32 [ %45, %44 ], [ %32, %31 ]
  %48 = load atomic i32, i32* %15 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = add i32 %47, -1
  store i32 %52, i32* %19, align 4
  br label %53

53:                                               ; preds = %51, %46
  %54 = phi i32 [ %52, %51 ], [ %47, %46 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %57

57:                                               ; preds = %53, %56
  %58 = load atomic i32, i32* %15 monotonic, align 4, !noalias !6
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = load i32, i32* %19, align 4
  br i1 %60, label %62, label %72

62:                                               ; preds = %57
  %63 = zext i32 %61 to i33
  %64 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %63, i33 1) #10
  %65 = extractvalue { i33, i1 } %64, 1
  %66 = extractvalue { i33, i1 } %64, 0
  %67 = icmp slt i33 %66, 0
  %68 = or i1 %65, %67
  br i1 %68, label %69, label %70, !prof !3

69:                                               ; preds = %62
  tail call void @llvm.trap() #10, !noalias !6
  unreachable

70:                                               ; preds = %62
  %71 = trunc i33 %66 to i32
  store i32 %71, i32* %19, align 4, !noalias !6
  br label %72

72:                                               ; preds = %57, %70
  %73 = phi i32 [ %71, %70 ], [ %61, %57 ]
  %74 = bitcast %"class.WTF::StringAppend"* %8 to i64*
  store i64 ptrtoint ([47 x i8]* @.str.2 to i64), i64* %74, align 8, !alias.scope !6
  %75 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %75, align 8, !alias.scope !6
  %76 = load atomic i32, i32* %15 monotonic, align 4, !noalias !6
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %93

79:                                               ; preds = %72
  %80 = zext i32 %73 to i33
  %81 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %80, i33 1) #10
  %82 = extractvalue { i33, i1 } %81, 1
  %83 = extractvalue { i33, i1 } %81, 0
  %84 = icmp slt i33 %83, 0
  %85 = or i1 %82, %84
  br i1 %85, label %86, label %87, !prof !3

86:                                               ; preds = %79
  tail call void @llvm.trap() #10, !noalias !6
  unreachable

87:                                               ; preds = %79
  %88 = trunc i33 %83 to i32
  store i32 %88, i32* %19, align 4, !noalias !6
  br label %93

89:                                               ; preds = %6
  %90 = bitcast %"class.WTF::StringAppend"* %8 to i64*
  store i64 ptrtoint ([47 x i8]* @.str.2 to i64), i64* %90, align 8, !alias.scope !6
  %91 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %91, align 8, !alias.scope !6
  %92 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8** %92, align 8, !alias.scope !6
  br label %105

93:                                               ; preds = %87, %72
  %94 = phi i32 [ %88, %87 ], [ %73, %72 ]
  %95 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8** %95, align 8, !alias.scope !6
  %96 = load atomic i32, i32* %15 monotonic, align 4, !noalias !6
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %93
  %100 = add i32 %94, -1
  store i32 %100, i32* %19, align 4, !noalias !6
  br label %101

101:                                              ; preds = %99, %93
  %102 = phi i32 [ %100, %99 ], [ %94, %93 ]
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10, !noalias !6
  br label %105

105:                                              ; preds = %89, %101, %104
  %106 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %8)
  %107 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %106, %"class.WTF::StringImpl"** %107, align 8
  %108 = bitcast %"class.blink::ExceptionState"* %5 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %109 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %108, align 8
  %110 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %109, align 8
  call void %110(%"class.blink::ExceptionState"* %5, i32 7, %"class.WTF::String"* nonnull dereferenceable(8) %7) #10
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %126, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %122

120:                                              ; preds = %113
  %121 = add i32 %119, -1
  store i32 %121, i32* %118, align 4
  br label %122

122:                                              ; preds = %120, %113
  %123 = phi i32 [ %121, %120 ], [ %119, %113 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %122
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %111) #10
  br label %126

126:                                              ; preds = %105, %122, %125
  %127 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  %128 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %127, align 8
  %129 = icmp eq %"class.WTF::StringImpl"* %128, null
  br i1 %129, label %143, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %128, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %132 = load atomic i32, i32* %131 monotonic, align 4
  %133 = and i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %128, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  br i1 %134, label %137, label %139

137:                                              ; preds = %130
  %138 = add i32 %136, -1
  store i32 %138, i32* %135, align 4
  br label %139

139:                                              ; preds = %137, %130
  %140 = phi i32 [ %138, %137 ], [ %136, %130 ]
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %128) #10
  br label %143

143:                                              ; preds = %126, %139, %142
  br i1 %13, label %157, label %144

144:                                              ; preds = %143
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %157

157:                                              ; preds = %143, %153, %156
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.2068"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #10
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %3, i8* %8) #10
  %9 = bitcast %"class.WTF::StringTypeAdapter.2068"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #10
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %2, i8* %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #10
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #10
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %34
  call void @llvm.trap() #10
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #10
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #10
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #10
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %70
  call void @llvm.trap() #10
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #10
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27CSSComputedStyleDeclaration14removePropertyERKN3WTF6StringERNS_14ExceptionStateE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::StringAppend", align 8
  %6 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = bitcast %"class.WTF::StringAppend"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %86, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %28

18:                                               ; preds = %11
  %19 = zext i32 %17 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %18
  tail call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %18
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %16, align 4
  br label %28

28:                                               ; preds = %26, %11
  %29 = phi i32 [ %27, %26 ], [ %17, %11 ]
  %30 = load atomic i32, i32* %12 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %43

33:                                               ; preds = %28
  %34 = zext i32 %29 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #10
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !3

40:                                               ; preds = %33
  tail call void @llvm.trap() #10
  unreachable

41:                                               ; preds = %33
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %16, align 4
  br label %43

43:                                               ; preds = %41, %28
  %44 = phi i32 [ %42, %41 ], [ %29, %28 ]
  %45 = load atomic i32, i32* %12 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = add i32 %44, -1
  store i32 %49, i32* %16, align 4
  br label %50

50:                                               ; preds = %48, %43
  %51 = phi i32 [ %49, %48 ], [ %44, %43 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10
  br label %54

54:                                               ; preds = %50, %53
  %55 = load atomic i32, i32* %12 monotonic, align 4, !noalias !9
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = load i32, i32* %16, align 4
  br i1 %57, label %59, label %69

59:                                               ; preds = %54
  %60 = zext i32 %58 to i33
  %61 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %60, i33 1) #10
  %62 = extractvalue { i33, i1 } %61, 1
  %63 = extractvalue { i33, i1 } %61, 0
  %64 = icmp slt i33 %63, 0
  %65 = or i1 %62, %64
  br i1 %65, label %66, label %67, !prof !3

66:                                               ; preds = %59
  tail call void @llvm.trap() #10, !noalias !9
  unreachable

67:                                               ; preds = %59
  %68 = trunc i33 %63 to i32
  store i32 %68, i32* %16, align 4, !noalias !9
  br label %69

69:                                               ; preds = %54, %67
  %70 = phi i32 [ %68, %67 ], [ %58, %54 ]
  %71 = bitcast %"class.WTF::StringAppend"* %5 to i64*
  store i64 ptrtoint ([47 x i8]* @.str.2 to i64), i64* %71, align 8, !alias.scope !9
  %72 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %72, align 8, !alias.scope !9
  %73 = load atomic i32, i32* %12 monotonic, align 4, !noalias !9
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %69
  %77 = zext i32 %70 to i33
  %78 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %77, i33 1) #10
  %79 = extractvalue { i33, i1 } %78, 1
  %80 = extractvalue { i33, i1 } %78, 0
  %81 = icmp slt i33 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %84, !prof !3

83:                                               ; preds = %76
  tail call void @llvm.trap() #10, !noalias !9
  unreachable

84:                                               ; preds = %76
  %85 = trunc i33 %80 to i32
  store i32 %85, i32* %16, align 4, !noalias !9
  br label %90

86:                                               ; preds = %3
  %87 = bitcast %"class.WTF::StringAppend"* %5 to i64*
  store i64 ptrtoint ([47 x i8]* @.str.2 to i64), i64* %87, align 8, !alias.scope !9
  %88 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %88, align 8, !alias.scope !9
  %89 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8** %89, align 8, !alias.scope !9
  br label %102

90:                                               ; preds = %84, %69
  %91 = phi i32 [ %85, %84 ], [ %70, %69 ]
  %92 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8** %92, align 8, !alias.scope !9
  %93 = load atomic i32, i32* %12 monotonic, align 4, !noalias !9
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %90
  %97 = add i32 %91, -1
  store i32 %97, i32* %16, align 4, !noalias !9
  br label %98

98:                                               ; preds = %96, %90
  %99 = phi i32 [ %97, %96 ], [ %91, %90 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10, !noalias !9
  br label %102

102:                                              ; preds = %86, %98, %101
  %103 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %5)
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %103, %"class.WTF::StringImpl"** %104, align 8
  %105 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %106 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %105, align 8
  %107 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %106, align 8
  call void %107(%"class.blink::ExceptionState"* %2, i32 7, %"class.WTF::String"* nonnull dereferenceable(8) %4) #10
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %102
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  br i1 %114, label %117, label %119

117:                                              ; preds = %110
  %118 = add i32 %116, -1
  store i32 %118, i32* %115, align 4
  br label %119

119:                                              ; preds = %117, %110
  %120 = phi i32 [ %118, %117 ], [ %116, %110 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %108) #10
  br label %123

123:                                              ; preds = %102, %119, %122
  %124 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #10
  br label %140

140:                                              ; preds = %123, %136, %139
  br i1 %10, label %154, label %141

141:                                              ; preds = %140
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10
  br label %154

154:                                              ; preds = %140, %150, %153
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret %"class.WTF::StringImpl"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZN5blink27CSSComputedStyleDeclaration27GetPropertyCSSValueInternalENS_13CSSPropertyIDE(%"class.blink::CSSComputedStyleDeclaration"*, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CSSPropertyName", align 8
  %4 = icmp eq i32 %1, 1
  br i1 %4, label %26, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.blink::CSSPropertyName"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %8, align 8
  %9 = call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueERKNS_15CSSPropertyNameE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.blink::CSSPropertyName"* nonnull dereferenceable(16) %3) #10
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  br i1 %16, label %19, label %21

19:                                               ; preds = %12
  %20 = add i32 %18, -1
  store i32 %20, i32* %17, align 4
  br label %21

21:                                               ; preds = %19, %12
  %22 = phi i32 [ %20, %19 ], [ %18, %12 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %10) #10
  br label %25

25:                                               ; preds = %24, %21, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  br label %26

26:                                               ; preds = %2, %25
  %27 = phi %"class.blink::CSSValue"* [ %9, %25 ], [ null, %2 ]
  ret %"class.blink::CSSValue"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSValue"* @_ZN5blink27CSSComputedStyleDeclaration27GetPropertyCSSValueInternalEN3WTF12AtomicStringE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.WTF::StringImpl"*) unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %3, label %21, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i33
  %13 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %12, i33 1) #10
  %14 = extractvalue { i33, i1 } %13, 1
  %15 = extractvalue { i33, i1 } %13, 0
  %16 = icmp slt i33 %15, 0
  %17 = or i1 %14, %16
  br i1 %17, label %18, label %19, !prof !3

18:                                               ; preds = %9
  tail call void @llvm.trap() #10
  unreachable

19:                                               ; preds = %9
  %20 = trunc i33 %15 to i32
  store i32 %20, i32* %10, align 4
  br label %23

21:                                               ; preds = %2
  %22 = tail call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueEN3WTF12AtomicStringE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.WTF::StringImpl"* null)
  br label %36

23:                                               ; preds = %4, %19
  %24 = tail call %"class.blink::CSSValue"* @_ZNK5blink27CSSComputedStyleDeclaration19GetPropertyCSSValueEN3WTF12AtomicStringE(%"class.blink::CSSComputedStyleDeclaration"* %0, %"class.WTF::StringImpl"* nonnull %1)
  %25 = load atomic i32, i32* %5 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %36

36:                                               ; preds = %21, %32, %35
  %37 = phi %"class.blink::CSSValue"* [ %22, %21 ], [ %24, %32 ], [ %24, %35 ]
  ret %"class.blink::CSSValue"* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27CSSComputedStyleDeclaration24GetPropertyValueInternalENS_13CSSPropertyIDE(%"class.blink::CSSComputedStyleDeclaration"*, i32) unnamed_addr #0 align 2 {
  %3 = tail call %"class.WTF::StringImpl"* @_ZNK5blink27CSSComputedStyleDeclaration16GetPropertyValueENS_13CSSPropertyIDE(%"class.blink::CSSComputedStyleDeclaration"* %0, i32 %1)
  ret %"class.WTF::StringImpl"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27CSSComputedStyleDeclaration19SetPropertyInternalENS_13CSSPropertyIDERKN3WTF6StringES5_bNS_17SecureContextModeERNS_14ExceptionStateE(%"class.blink::CSSComputedStyleDeclaration"* nocapture readnone, i32, %"class.WTF::String"* nocapture readnone dereferenceable(8), %"class.WTF::String"* nocapture readnone dereferenceable(8), i1 zeroext, i32, %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 align 2 {
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = tail call dereferenceable(8) %"class.blink::CSSUnresolvedProperty"* @_ZN5blink21CSSUnresolvedProperty3GetENS_13CSSPropertyIDE(i32 %1) #10
  %13 = bitcast %"class.blink::CSSUnresolvedProperty"* %12 to %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)***
  %14 = load %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)**, %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)*, %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)** %14, i64 4
  %16 = load %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)*, %"class.WTF::AtomicString"* (%"class.blink::CSSUnresolvedProperty"*)** %15, align 8
  %17 = tail call dereferenceable(8) %"class.WTF::AtomicString"* %16(%"class.blink::CSSUnresolvedProperty"* %12) #10
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %112, label %21

21:                                               ; preds = %7
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %38

28:                                               ; preds = %21
  %29 = zext i32 %27 to i33
  %30 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %29, i33 1) #10
  %31 = extractvalue { i33, i1 } %30, 1
  %32 = extractvalue { i33, i1 } %30, 0
  %33 = icmp slt i33 %32, 0
  %34 = or i1 %31, %33
  br i1 %34, label %35, label %36, !prof !3

35:                                               ; preds = %28
  tail call void @llvm.trap() #10
  unreachable

36:                                               ; preds = %28
  %37 = trunc i33 %32 to i32
  store i32 %37, i32* %26, align 4
  br label %38

38:                                               ; preds = %21, %36
  %39 = phi i32 [ %37, %36 ], [ %27, %21 ]
  %40 = load atomic i32, i32* %22 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  br i1 %42, label %44, label %54

44:                                               ; preds = %38
  %45 = zext i32 %39 to i33
  %46 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #10
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !3

51:                                               ; preds = %44
  tail call void @llvm.trap() #10
  unreachable

52:                                               ; preds = %44
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %43, align 4
  br label %54

54:                                               ; preds = %52, %38
  %55 = phi i32 [ %53, %52 ], [ %39, %38 ]
  %56 = load atomic i32, i32* %22 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %69

59:                                               ; preds = %54
  %60 = zext i32 %55 to i33
  %61 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %60, i33 1) #10
  %62 = extractvalue { i33, i1 } %61, 1
  %63 = extractvalue { i33, i1 } %61, 0
  %64 = icmp slt i33 %63, 0
  %65 = or i1 %62, %64
  br i1 %65, label %66, label %67, !prof !3

66:                                               ; preds = %59
  tail call void @llvm.trap() #10
  unreachable

67:                                               ; preds = %59
  %68 = trunc i33 %63 to i32
  store i32 %68, i32* %43, align 4
  br label %69

69:                                               ; preds = %67, %54
  %70 = phi i32 [ %68, %67 ], [ %55, %54 ]
  %71 = load atomic i32, i32* %22 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = add i32 %70, -1
  store i32 %75, i32* %43, align 4
  br label %76

76:                                               ; preds = %74, %69
  %77 = phi i32 [ %75, %74 ], [ %70, %69 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #10
  br label %80

80:                                               ; preds = %76, %79
  %81 = load atomic i32, i32* %22 monotonic, align 4, !noalias !12
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = load i32, i32* %43, align 4
  br i1 %83, label %85, label %95

85:                                               ; preds = %80
  %86 = zext i32 %84 to i33
  %87 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #10
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !3

92:                                               ; preds = %85
  tail call void @llvm.trap() #10, !noalias !12
  unreachable

93:                                               ; preds = %85
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %43, align 4, !noalias !12
  br label %95

95:                                               ; preds = %80, %93
  %96 = phi i32 [ %94, %93 ], [ %84, %80 ]
  %97 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([47 x i8]* @.str.2 to i64), i64* %97, align 8, !alias.scope !12
  %98 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %98, align 8, !alias.scope !12
  %99 = load atomic i32, i32* %22 monotonic, align 4, !noalias !12
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %116

102:                                              ; preds = %95
  %103 = zext i32 %96 to i33
  %104 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %103, i33 1) #10
  %105 = extractvalue { i33, i1 } %104, 1
  %106 = extractvalue { i33, i1 } %104, 0
  %107 = icmp slt i33 %106, 0
  %108 = or i1 %105, %107
  br i1 %108, label %109, label %110, !prof !3

109:                                              ; preds = %102
  tail call void @llvm.trap() #10, !noalias !12
  unreachable

110:                                              ; preds = %102
  %111 = trunc i33 %106 to i32
  store i32 %111, i32* %43, align 4, !noalias !12
  br label %116

112:                                              ; preds = %7
  %113 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([47 x i8]* @.str.2 to i64), i64* %113, align 8, !alias.scope !12
  %114 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %114, align 8, !alias.scope !12
  %115 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8** %115, align 8, !alias.scope !12
  br label %128

116:                                              ; preds = %110, %95
  %117 = phi i32 [ %111, %110 ], [ %96, %95 ]
  %118 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8** %118, align 8, !alias.scope !12
  %119 = load atomic i32, i32* %22 monotonic, align 4, !noalias !12
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %116
  %123 = add i32 %117, -1
  store i32 %123, i32* %43, align 4, !noalias !12
  br label %124

124:                                              ; preds = %122, %116
  %125 = phi i32 [ %123, %122 ], [ %117, %116 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #10, !noalias !12
  br label %128

128:                                              ; preds = %112, %124, %127
  %129 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %9)
  %130 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %129, %"class.WTF::StringImpl"** %130, align 8
  %131 = bitcast %"class.blink::ExceptionState"* %6 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %132 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %131, align 8
  %133 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %132, align 8
  call void %133(%"class.blink::ExceptionState"* %6, i32 7, %"class.WTF::String"* nonnull dereferenceable(8) %8) #10
  %134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  %135 = icmp eq %"class.WTF::StringImpl"* %134, null
  br i1 %135, label %149, label %136

136:                                              ; preds = %128
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load atomic i32, i32* %137 monotonic, align 4
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %142 = load i32, i32* %141, align 4
  br i1 %140, label %143, label %145

143:                                              ; preds = %136
  %144 = add i32 %142, -1
  store i32 %144, i32* %141, align 4
  br label %145

145:                                              ; preds = %143, %136
  %146 = phi i32 [ %144, %143 ], [ %142, %136 ]
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %145
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %134) #10
  br label %149

149:                                              ; preds = %128, %145, %148
  %150 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %151 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %150, align 8
  %152 = icmp eq %"class.WTF::StringImpl"* %151, null
  br i1 %152, label %166, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 0
  %159 = load i32, i32* %158, align 4
  br i1 %157, label %160, label %162

160:                                              ; preds = %153
  %161 = add i32 %159, -1
  store i32 %161, i32* %158, align 4
  br label %162

162:                                              ; preds = %160, %153
  %163 = phi i32 [ %161, %160 ], [ %159, %153 ]
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %166

165:                                              ; preds = %162
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %151) #10
  br label %166

166:                                              ; preds = %149, %162, %165
  br i1 %20, label %192, label %167

167:                                              ; preds = %166
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load atomic i32, i32* %168 monotonic, align 4
  %170 = and i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  br i1 %171, label %174, label %176

174:                                              ; preds = %167
  %175 = add i32 %173, -1
  store i32 %175, i32* %172, align 4
  br label %176

176:                                              ; preds = %174, %167
  %177 = phi i32 [ %175, %174 ], [ %173, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %181

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #10
  %180 = load i32, i32* %172, align 4
  br label %181

181:                                              ; preds = %176, %179
  %182 = phi i32 [ %177, %176 ], [ %180, %179 ]
  %183 = load atomic i32, i32* %168 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %188

186:                                              ; preds = %181
  %187 = add i32 %182, -1
  store i32 %187, i32* %172, align 4
  br label %188

188:                                              ; preds = %186, %181
  %189 = phi i32 [ %187, %186 ], [ %182, %181 ]
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %192

191:                                              ; preds = %188
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #10
  br label %192

192:                                              ; preds = %166, %188, %191
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  ret void
}

declare dereferenceable(8) %"class.blink::CSSUnresolvedProperty"* @_ZN5blink21CSSUnresolvedProperty3GetENS_13CSSPropertyIDE(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink27CSSComputedStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member.84"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv) #10
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 0, i32 0
  tail call void @_ZNK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSStyleDeclaration"* %14, %"class.blink::Visitor"* %1) #10
  ret void
}

declare void @_ZNK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSStyleDeclaration"*, %"class.blink::Visitor"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_NK5blink27CSSComputedStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSComputedStyleDeclaration"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSComputedStyleDeclaration", %"class.blink::CSSComputedStyleDeclaration"* %0, i64 -1, i32 4
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 4
  %5 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = inttoptr i64 %6 to i8*
  %10 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, i64 5
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %12, align 8
  tail call void %13(%"class.blink::Visitor"* %1, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv) #10
  br label %14

14:                                               ; preds = %2, %8
  %15 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::CSSStyleDeclaration"*
  tail call void @_ZNK5blink19CSSStyleDeclaration5TraceEPNS_7VisitorE(%"class.blink::CSSStyleDeclaration"* %15, %"class.blink::Visitor"* %1) #10
  ret void
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink19CSSStyleDeclaration18GetWrapperTypeInfoEv(%"class.blink::CSSStyleDeclaration"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink19CSSStyleDeclaration18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #3

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::CSSStyleSheet"* @_ZNK5blink19CSSStyleDeclaration16ParentStyleSheetEv(%"class.blink::CSSStyleDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::CSSStyleSheet"* null
}

declare void @_ZN5blink22ExecutionContextClientC2EPNS_16ExecutionContextE(%"class.blink::ExecutionContextClient"*, %"class.blink::ExecutionContext"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare %"class.blink::CSSNumericLiteralValue"* @_ZN5blink22CSSNumericLiteralValue6CreateEdNS_17CSSPrimitiveValue8UnitTypeE(double, i32) local_unnamed_addr #3

declare void @_ZN5blink11StyleEngine17UpdateActiveStyleEv(%"class.blink::StyleEngine"*) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare %"class.blink::ContainerNode"* @_ZN5blink17FlatTreeTraversal14TraverseParentERKNS_4NodeE(%"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32*, i8 } @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS5_S7_S8_EERKS2_S2_EENS_18HashTableAddResultIS9_S2_EEOT0_OT1_(%"class.WTF::HashTable.2021"*, i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call i32* @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.2021"* %0, i32* null)
  %9 = load i32*, i32** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi i32* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %11, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %75, label %35

35:                                               ; preds = %10
  %36 = xor i32 %29, -1
  %37 = lshr i32 %27, 23
  %38 = add i32 %37, %36
  %39 = shl i32 %38, 12
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = xor i32 %41, %40
  %43 = shl i32 %42, 2
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 20
  %46 = xor i32 %45, %44
  %47 = or i32 %46, 1
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %35, %56
  %50 = phi i32 [ %33, %35 ], [ %64, %56 ]
  %51 = phi i32* [ %32, %35 ], [ %63, %56 ]
  %52 = phi i32* [ null, %35 ], [ %58, %56 ]
  %53 = phi i64 [ %31, %35 ], [ %62, %56 ]
  %54 = phi i64 [ 0, %35 ], [ %60, %56 ]
  %55 = icmp eq i32 %50, %16
  br i1 %55, label %89, label %56

56:                                               ; preds = %49
  %57 = icmp eq i32 %50, 1548
  %58 = select i1 %57, i32* %51, i32* %52
  %59 = icmp eq i64 %54, 0
  %60 = select i1 %59, i64 %48, i64 %54
  %61 = add i64 %60, %53
  %62 = and i64 %61, %15
  %63 = getelementptr inbounds i32, i32* %11, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %49

66:                                               ; preds = %56
  %67 = icmp eq i32* %58, null
  br i1 %67, label %75, label %68

68:                                               ; preds = %66
  store i32 0, i32* %58, align 4
  %69 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 3
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, 2147483647
  %72 = and i32 %71, 2147483647
  %73 = and i32 %70, -2147483648
  %74 = or i32 %72, %73
  store i32 %74, i32* %69, align 8
  br label %75

75:                                               ; preds = %10, %66, %68
  %76 = phi i32* [ %58, %68 ], [ %63, %66 ], [ %32, %10 ]
  %77 = load i32, i32* %2, align 4
  store i32 %77, i32* %76, align 4
  %78 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, 1
  store i32 %80, i32* %78, align 4
  %81 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, %80
  %84 = shl i32 %83, 1
  %85 = load i32, i32* %12, align 8
  %86 = icmp ult i32 %84, %85
  br i1 %86, label %89, label %87

87:                                               ; preds = %75
  %88 = tail call i32* @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.2021"* %0, i32* %76)
  br label %89

89:                                               ; preds = %49, %75, %87
  %90 = phi i8 [ 1, %75 ], [ 1, %87 ], [ 0, %49 ]
  %91 = phi i32* [ %76, %75 ], [ %88, %87 ], [ %51, %49 ]
  %92 = insertvalue { i32*, i8 } undef, i32* %91, 0
  %93 = insertvalue { i32*, i8 } %92, i8 %90, 1
  ret { i32*, i8 } %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.2021"*, i32*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 2
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13CSSPropertyIDEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #10
  %36 = bitcast i8* %35 to i32*
  %37 = call i32* @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE8RehashToEPS2_jSA_(%"class.WTF::HashTable.2021"* %0, i32* %36, i32 %32, i32* %1) #10
  ret i32* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3WTF9HashTableIN5blink13CSSPropertyIDES2_NS_17IdentityExtractorENS_7IntHashIS2_EENS_10HashTraitsIS2_EES7_NS_18PartitionAllocatorEE8RehashToEPS2_jSA_(%"class.WTF::HashTable.2021"*, i32*, i32, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i32* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.2021"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load i32*, i32** %9, align 8
  %17 = ptrtoint i32* %16 to i64
  br label %31

18:                                               ; preds = %110
  %19 = bitcast %"class.WTF::HashTable.2021"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %111, %18 ]
  %23 = phi i32* [ null, %10 ], [ %114, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #10
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable.2021", %"class.WTF::HashTable.2021"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret i32* %23

31:                                               ; preds = %13, %110
  %32 = phi i64 [ %17, %13 ], [ %111, %110 ]
  %33 = phi i32 [ %7, %13 ], [ %112, %110 ]
  %34 = phi i32* [ %16, %13 ], [ %113, %110 ]
  %35 = phi i32* [ null, %13 ], [ %114, %110 ]
  %36 = phi i32 [ 0, %13 ], [ %115, %110 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %34, i64 %37
  %39 = load i32, i32* %38, align 4
  switch i32 %39, label %40 [
    i32 1548, label %110
    i32 0, label %110
  ]

40:                                               ; preds = %31
  %41 = shl i32 %39, 15
  %42 = xor i32 %41, -1
  %43 = add i32 %39, %42
  %44 = lshr i32 %43, 10
  %45 = xor i32 %44, %43
  %46 = mul i32 %45, 9
  %47 = lshr i32 %46, 6
  %48 = xor i32 %47, %46
  %49 = shl i32 %48, 11
  %50 = xor i32 %49, -1
  %51 = add i32 %48, %50
  %52 = lshr i32 %51, 16
  %53 = xor i32 %52, %51
  %54 = and i32 %53, %14
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %1, i64 %55
  %57 = ptrtoint i32* %56 to i64
  %58 = load i32, i32* %56, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %77, label %60

60:                                               ; preds = %40
  %61 = xor i32 %53, -1
  %62 = lshr i32 %51, 23
  %63 = add i32 %62, %61
  %64 = shl i32 %63, 12
  %65 = xor i32 %64, %63
  %66 = lshr i32 %65, 7
  %67 = xor i32 %66, %65
  %68 = shl i32 %67, 2
  %69 = xor i32 %68, %67
  %70 = lshr i32 %69, 20
  %71 = xor i32 %70, %69
  %72 = or i32 %71, 1
  %73 = zext i32 %72 to i64
  br label %83

74:                                               ; preds = %90
  %75 = ptrtoint i32* %97 to i64
  %76 = inttoptr i64 %92 to i32*
  br label %77

77:                                               ; preds = %74, %40
  %78 = phi i64 [ %75, %74 ], [ %57, %40 ]
  %79 = phi i32* [ %76, %74 ], [ null, %40 ]
  %80 = icmp eq i32* %79, null
  %81 = ptrtoint i32* %79 to i64
  %82 = select i1 %80, i64 %78, i64 %81
  br label %101

83:                                               ; preds = %90, %60
  %84 = phi i64 [ 0, %60 ], [ %92, %90 ]
  %85 = phi i32 [ %58, %60 ], [ %99, %90 ]
  %86 = phi i64 [ %57, %60 ], [ %98, %90 ]
  %87 = phi i64 [ %55, %60 ], [ %96, %90 ]
  %88 = phi i64 [ 0, %60 ], [ %94, %90 ]
  %89 = icmp eq i32 %85, %39
  br i1 %89, label %101, label %90

90:                                               ; preds = %83
  %91 = icmp eq i32 %85, 1548
  %92 = select i1 %91, i64 %86, i64 %84
  %93 = icmp eq i64 %88, 0
  %94 = select i1 %93, i64 %73, i64 %88
  %95 = add i64 %94, %87
  %96 = and i64 %95, %15
  %97 = getelementptr inbounds i32, i32* %1, i64 %96
  %98 = ptrtoint i32* %97 to i64
  %99 = load i32, i32* %97, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %74, label %83

101:                                              ; preds = %83, %77
  %102 = phi i64 [ %82, %77 ], [ %86, %83 ]
  %103 = inttoptr i64 %102 to i32*
  store i32 %39, i32* %103, align 4
  %104 = load i32*, i32** %9, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 %37
  %106 = icmp eq i32* %105, %3
  %107 = select i1 %106, i32* %103, i32* %35
  %108 = load i32, i32* %6, align 8
  %109 = ptrtoint i32* %104 to i64
  br label %110

110:                                              ; preds = %31, %31, %101
  %111 = phi i64 [ %32, %31 ], [ %109, %101 ], [ %32, %31 ]
  %112 = phi i32 [ %33, %31 ], [ %108, %101 ], [ %33, %31 ]
  %113 = phi i32* [ %34, %31 ], [ %104, %101 ], [ %34, %31 ]
  %114 = phi i32* [ %35, %31 ], [ %107, %101 ], [ %35, %31 ]
  %115 = add i32 %36, 1
  %116 = icmp eq i32 %115, %112
  br i1 %116, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #3

declare void @_ZN5blink24CSSPropertyValueMetadataC1ERKNS_15CSSPropertyNameEbibb(%"struct.blink::CSSPropertyValueMetadata"*, %"class.blink::CSSPropertyName"* dereferenceable(16), i1 zeroext, i32, i1 zeroext, i1 zeroext) unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.1942"*, %"class.blink::CSSPropertyValue"*) local_unnamed_addr #8 comdat align 2 {
  %3 = bitcast %"class.blink::CSSPropertyValue"* %1 to i8*
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %3) #10
  ret void
}

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Node"*
  %4 = bitcast i8* %1 to void (%"class.blink::Node"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Node"*, %"class.blink::Visitor"*)**, void (%"class.blink::Node"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Node"*, %"class.blink::Visitor"*)*, void (%"class.blink::Node"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Node"*, %"class.blink::Visitor"*)*, void (%"class.blink::Node"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Node"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::CSSProperty"** @_ZNK3WTF6VectorIPKN5blink11CSSPropertyELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::CSSProperty"**, %"class.blink::CSSProperty"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %24, i64 %25
  ret %"class.blink::CSSProperty"** %26
}

declare zeroext i1 @_ZNK5blink8CSSValueeqERKS0_(%"class.blink::CSSValue"*, %"class.blink::CSSValue"* dereferenceable(3)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_16CSSPropertyValueEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 5592405
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 5592405) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.11, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 24
  ret i64 %20
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.13, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 24
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS1_EEE14AllocateObjectIS5_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS1_EEE14AllocateObjectIS5_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 4, i32 %20, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_16CSSPropertyValueENS_12VectorTraitsIS3_EEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #9 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #10
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* %21, i8* %22) #10
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #10
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !3

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #10
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #3

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #3

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 -2
  %6 = bitcast i8* %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp ult i16 %7, 4
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %22

17:                                               ; preds = %4
  %18 = load atomic i16, i16* %6 monotonic, align 2
  %19 = lshr i16 %18, 2
  %20 = zext i16 %19 to i64
  %21 = shl nuw nsw i64 %20, 3
  br label %22

22:                                               ; preds = %9, %17
  %23 = phi i64 [ %16, %9 ], [ %21, %17 ]
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)***
  %25 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)**, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %25, i64 4
  %27 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0, i8* nonnull %1, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE5TraceEPNS_7VisitorEPKv, i64 %23) #10
  br i1 %28, label %69, label %29

29:                                               ; preds = %2, %22
  %30 = bitcast i8* %1 to %"class.blink::CSSPropertyValue"*
  %31 = getelementptr inbounds i8, i8* %1, i64 -2
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = lshr i16 %33, 2
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %36, label %44, !prof !3

36:                                               ; preds = %29
  %37 = getelementptr inbounds i8, i8* %1, i64 -8
  %38 = ptrtoint i8* %37 to i64
  %39 = and i64 %38, -131072
  %40 = inttoptr i64 %39 to i8*
  %41 = getelementptr inbounds i8, i8* %40, i64 4144
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 16
  br label %47

44:                                               ; preds = %29
  %45 = zext i16 %34 to i64
  %46 = shl nuw nsw i64 %45, 3
  br label %47

47:                                               ; preds = %44, %36
  %48 = phi i64 [ %43, %36 ], [ %46, %44 ]
  %49 = add i64 %48, -8
  %50 = udiv i64 %49, 24
  %51 = icmp ugt i64 %49, 23
  br i1 %51, label %52, label %69

52:                                               ; preds = %47
  %53 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %54

54:                                               ; preds = %66, %52
  %55 = phi i64 [ 0, %52 ], [ %67, %66 ]
  %56 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %30, i64 %55, i32 1
  %57 = bitcast %"class.blink::Member.1167"* %56 to i64*
  %58 = load atomic i64, i64* %57 monotonic, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %54
  %61 = inttoptr i64 %58 to %"class.blink::CSSValue"*
  %62 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %61, i64 0, i32 0
  %63 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %53, align 8
  %64 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %63, i64 5
  %65 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %64, align 8
  tail call void %65(%"class.blink::Visitor"* %0, i8* %62, i8* %62, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #10
  br label %66

66:                                               ; preds = %60, %54
  %67 = add nuw nsw i64 %55, 1
  %68 = icmp ult i64 %67, %50
  br i1 %68, label %54, label %69

69:                                               ; preds = %66, %47, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS3_EEEEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -2
  %3 = bitcast i8* %2 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = lshr i16 %4, 2
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %7, label %15, !prof !3

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 -8
  %9 = ptrtoint i8* %8 to i64
  %10 = and i64 %9, -131072
  %11 = inttoptr i64 %10 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 4144
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 16
  br label %18

15:                                               ; preds = %1
  %16 = zext i16 %5 to i64
  %17 = shl nuw nsw i64 %16, 3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i64 [ %14, %7 ], [ %17, %15 ]
  %20 = add i64 %19, -8
  %21 = udiv i64 %20, 24
  %22 = bitcast i8* %0 to %"class.blink::CSSPropertyValue"*
  %23 = icmp ugt i64 %20, 23
  br i1 %23, label %24, label %47

24:                                               ; preds = %18, %43
  %25 = phi i64 [ %45, %43 ], [ 0, %18 ]
  %26 = phi i32 [ %44, %43 ], [ 0, %18 ]
  %27 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %22, i64 %25, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #10
  br label %43

43:                                               ; preds = %42, %39, %24
  %44 = add i32 %26, 1
  %45 = zext i32 %44 to i64
  %46 = icmp ugt i64 %21, %45
  br i1 %46, label %24, label %47

47:                                               ; preds = %43, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSValue"*
  tail call void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

declare void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"*, %"class.blink::Visitor"*) local_unnamed_addr #3

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::CSSPropertyValue"* @_ZN3WTF15ConstructTraitsIN5blink16CSSPropertyValueENS_12VectorTraitsIS2_EENS1_13HeapAllocatorEE25ConstructAndNotifyElementIJS2_EEEPS2_PvDpOT_(i8*, %"class.blink::CSSPropertyValue"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast i8* %0 to %"class.blink::CSSPropertyValue"*
  %4 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.blink::CSSPropertyValue"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast i8* %0 to i64*
  store i64 %6, i64* %7, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %4, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 8
  %9 = bitcast i8* %8 to i16*
  %10 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %1, i64 0, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  store i16 %11, i16* %9, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %1, i64 0, i32 1
  %14 = bitcast %"class.blink::Member.1167"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast i8* %12 to i64*
  store i64 %15, i64* %16, align 8
  %17 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %53, label %19

19:                                               ; preds = %2
  %20 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %21 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %20, i64 0, i32 1
  %22 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %21) #10
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %26, !prof !3

24:                                               ; preds = %19
  %25 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %21, i8* %25) #10
  br label %26

26:                                               ; preds = %24, %19
  %27 = phi i8* [ %25, %24 ], [ %22, %19 ]
  %28 = bitcast i8* %27 to %"class.blink::ThreadState"**
  %29 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %29, i64 0, i32 9
  %31 = load i8, i8* %30, align 1, !range !4
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %53, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %29, i64 0, i32 13
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, 1
  store i64 %36, i64* %34, align 8
  %37 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %29, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  %38 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %37, align 8
  %39 = load atomic i64, i64* %16 monotonic, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %50, label %41

41:                                               ; preds = %33
  %42 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %38, i64 0, i32 0, i32 0
  %43 = inttoptr i64 %39 to %"class.blink::CSSValue"*
  %44 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %43, i64 0, i32 0
  %45 = bitcast %"class.blink::MarkingVisitor"* %38 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %46 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %46, i64 5
  %48 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %47, align 8
  tail call void %48(%"class.blink::Visitor"* %42, i8* %44, i8* %44, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #10
  %49 = load i64, i64* %34, align 8
  br label %50

50:                                               ; preds = %41, %33
  %51 = phi i64 [ %36, %33 ], [ %49, %41 ]
  %52 = add i64 %51, -1
  store i64 %52, i64* %34, align 8
  br label %53

53:                                               ; preds = %2, %26, %50
  ret %"class.blink::CSSPropertyValue"* %3
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.1941"*, %"class.blink::CSSPropertyValue"* dereferenceable(24)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %6, align 8
  %8 = icmp ugt %"class.blink::CSSPropertyValue"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %7, i64 %10
  %12 = icmp ugt %"class.blink::CSSPropertyValue"* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1941"* %0, i32 %5) #10
  %14 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint %"class.blink::CSSPropertyValue"* %1 to i64
  %17 = ptrtoint %"class.blink::CSSPropertyValue"* %7 to i64
  %18 = sub i64 %16, %17
  %19 = sdiv exact i64 %18, 24
  tail call void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1941"* %0, i32 %5) #10
  %20 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %6, align 8
  %21 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi %"class.blink::CSSPropertyValue"* [ %14, %13 ], [ %20, %15 ]
  %24 = phi %"class.blink::CSSPropertyValue"* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %23, i64 %26
  %28 = bitcast %"class.blink::CSSPropertyValue"* %27 to i8*
  %29 = tail call %"class.blink::CSSPropertyValue"* @_ZN3WTF15ConstructTraitsIN5blink16CSSPropertyValueENS_12VectorTraitsIS2_EENS1_13HeapAllocatorEE25ConstructAndNotifyElementIJS2_EEEPS2_PvDpOT_(i8* %28, %"class.blink::CSSPropertyValue"* dereferenceable(24) %24)
  %30 = load i32, i32* %3, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1941"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0), i8* %15, i8* %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #10
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  call void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector.1941"* %0, i32 %27)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector.1941"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %75, !prof !5

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %8, align 8
  %10 = icmp eq %"class.blink::CSSPropertyValue"* %9, null
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = icmp ugt i32 %1, 256
  br i1 %12, label %13, label %26

13:                                               ; preds = %11
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_16CSSPropertyValueEEEmm(i64 %14) #10
  %16 = udiv i64 %15, 24
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE4CallEm(i64 %16) #10
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = bitcast %"class.WTF::Vector.1941"* %0 to i64*
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = trunc i64 %16 to i32
  store i32 %20, i32* %4, align 8
  %21 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %75, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %25 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %24) #10
  br label %75

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 1, i64 0
  %28 = ptrtoint i8* %27 to i64
  %29 = bitcast %"class.WTF::Vector.1941"* %0 to i64*
  store atomic i64 %28, i64* %29 monotonic, align 8
  store i32 256, i32* %4, align 8
  br label %75

30:                                               ; preds = %7
  %31 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 1, i64 0
  %32 = bitcast i8* %31 to %"class.blink::CSSPropertyValue"*
  %33 = icmp eq %"class.blink::CSSPropertyValue"* %9, %32
  br i1 %33, label %49, label %34

34:                                               ; preds = %30
  %35 = icmp ult i32 %1, 257
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  %37 = zext i32 %1 to i64
  %38 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_16CSSPropertyValueEEEmm(i64 %37) #10
  %39 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %8, align 8
  %40 = icmp eq %"class.blink::CSSPropertyValue"* %39, null
  br i1 %40, label %49, label %41

41:                                               ; preds = %34, %36
  %42 = phi i64 [ %38, %36 ], [ 6144, %34 ]
  %43 = phi %"class.blink::CSSPropertyValue"* [ %39, %36 ], [ %9, %34 ]
  %44 = bitcast %"class.blink::CSSPropertyValue"* %43 to i8*
  %45 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %44, i64 %42) #10
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = udiv i64 %42, 24
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %4, align 8
  br label %75

49:                                               ; preds = %30, %36, %41
  %50 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %51 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %50, i64 0, i32 1
  %52 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %51) #10
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %56, !prof !3

54:                                               ; preds = %49
  %55 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %51, i8* %55) #10
  br label %56

56:                                               ; preds = %54, %49
  %57 = phi i8* [ %55, %54 ], [ %52, %49 ]
  %58 = bitcast i8* %57 to %"class.blink::ThreadState"**
  %59 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %58, align 8
  %60 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 6
  %61 = load i8, i8* %60, align 8, !range !4
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 16
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %71, label %67

67:                                               ; preds = %56, %63
  %68 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 13
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %63, %67
  %72 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i64 0, i64 0)) #10
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #10
  br label %74

74:                                               ; preds = %67, %71
  call void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1941"* %0, i32 %1)
  br label %75

75:                                               ; preds = %46, %26, %23, %13, %2, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1941"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 257
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %5, align 8
  %7 = icmp eq %"class.blink::CSSPropertyValue"* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::CSSPropertyValue"*
  %10 = icmp eq %"class.blink::CSSPropertyValue"* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.1941"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 256, i32* %15, align 8
  br label %73

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0
  %21 = ptrtoint i8* %8 to i64
  %22 = bitcast %"class.WTF::Vector.1941"* %0 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 256, i32* %23, align 8
  %24 = icmp eq i8* %8, null
  %25 = bitcast %"class.blink::CSSPropertyValue"* %6 to i8*
  %26 = mul nuw nsw i64 %19, 24
  br i1 %24, label %28, label %27, !prof !3

27:                                               ; preds = %16
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %8, i8* nonnull %25, i64 %26) #10
  tail call void @_ZN5blink13HeapAllocator16NotifyNewObjectsINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEvPT_m(%"class.blink::CSSPropertyValue"* nonnull %9, i64 %19) #10
  br label %28

28:                                               ; preds = %16, %27
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %25, i64 %26) #10
  tail call void @_ZN3WTF12VectorBufferIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.1942"* %20, %"class.blink::CSSPropertyValue"* nonnull %6) #10
  br label %73

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_16CSSPropertyValueEEEmm(i64 %30) #10
  %32 = udiv i64 %31, 24
  %33 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEE4CallEm(i64 %32) #10
  %34 = bitcast %"class.blink::HeapVectorBacking"* %33 to %"class.blink::CSSPropertyValue"*
  %35 = ptrtoint %"class.blink::HeapVectorBacking"* %33 to i64
  %36 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %36, align 8
  %38 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 2
  %39 = icmp ne %"class.blink::HeapVectorBacking"* %33, null
  %40 = icmp ne %"class.blink::CSSPropertyValue"* %37, null
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %52, !prof !5

42:                                               ; preds = %29
  %43 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = bitcast i8* %43 to %"class.blink::CSSPropertyValue"*
  %45 = icmp eq %"class.blink::CSSPropertyValue"* %37, %44
  %46 = load i32, i32* %38, align 4
  %47 = zext i32 %46 to i64
  %48 = bitcast %"class.blink::CSSPropertyValue"* %37 to i8*
  %49 = mul nuw nsw i64 %47, 24
  %50 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %33, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %50, i8* nonnull %48, i64 %49) #10
  br i1 %45, label %51, label %52

51:                                               ; preds = %42
  tail call void @_ZN5blink13HeapAllocator16NotifyNewObjectsINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEvPT_m(%"class.blink::CSSPropertyValue"* nonnull %34, i64 %47) #10
  br label %52

52:                                               ; preds = %29, %42, %51
  %53 = bitcast %"class.WTF::Vector.1941"* %0 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = load i32, i32* %38, align 4
  %56 = zext i32 %55 to i64
  %57 = mul nuw nsw i64 %56, 24
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %54, i64 %57) #10
  %58 = load %"class.blink::CSSPropertyValue"*, %"class.blink::CSSPropertyValue"** %36, align 8
  %59 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 1, i64 0
  %60 = bitcast i8* %59 to %"class.blink::CSSPropertyValue"*
  %61 = icmp eq %"class.blink::CSSPropertyValue"* %58, %60
  br i1 %61, label %64, label %62, !prof !5

62:                                               ; preds = %52
  %63 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink16CSSPropertyValueELj256ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.1942"* %63, %"class.blink::CSSPropertyValue"* %58) #10
  br label %64

64:                                               ; preds = %52, %62
  %65 = bitcast %"class.WTF::Vector.1941"* %0 to i64*
  store atomic i64 %35, i64* %65 monotonic, align 8
  %66 = trunc i64 %32 to i32
  %67 = getelementptr inbounds %"class.WTF::Vector.1941", %"class.WTF::Vector.1941"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %66, i32* %67, align 8
  %68 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %33, i64 0, i32 0
  %72 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %71) #10
  br label %73

73:                                               ; preds = %70, %64, %28, %12
  ret void
}

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #3

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13HeapAllocator16NotifyNewObjectsINS_16CSSPropertyValueEN3WTF12VectorTraitsIS2_EEEEvPT_m(%"class.blink::CSSPropertyValue"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::CSSPropertyValue"* %0 to i8*
  %4 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %52, label %6

6:                                                ; preds = %2
  %7 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %8 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %7, i64 0, i32 1
  %9 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %8) #10
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13, !prof !3

11:                                               ; preds = %6
  %12 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %8, i8* %12) #10
  br label %13

13:                                               ; preds = %6, %11
  %14 = phi i8* [ %12, %11 ], [ %9, %6 ]
  %15 = bitcast i8* %14 to %"class.blink::ThreadState"**
  %16 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %16, i64 0, i32 9
  %18 = load i8, i8* %17, align 1, !range !4
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %52, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %16, i64 0, i32 13
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 1
  store i64 %23, i64* %21, align 8
  %24 = icmp eq i64 %1, 0
  br i1 %24, label %49, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %16, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  br label %27

27:                                               ; preds = %44, %25
  %28 = phi i8* [ %3, %25 ], [ %45, %44 ]
  %29 = phi i64 [ %1, %25 ], [ %30, %44 ]
  %30 = add i64 %29, -1
  %31 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %26, align 8
  %32 = getelementptr inbounds i8, i8* %28, i64 16
  %33 = bitcast i8* %32 to i64*
  %34 = load atomic i64, i64* %33 monotonic, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %31, i64 0, i32 0, i32 0
  %38 = inttoptr i64 %34 to %"class.blink::CSSValue"*
  %39 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %38, i64 0, i32 0
  %40 = bitcast %"class.blink::MarkingVisitor"* %31 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %41 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %41, i64 5
  %43 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %42, align 8
  tail call void %43(%"class.blink::Visitor"* %37, i8* %39, i8* %39, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #10
  br label %44

44:                                               ; preds = %27, %36
  %45 = getelementptr inbounds i8, i8* %28, i64 24
  %46 = icmp eq i64 %30, 0
  br i1 %46, label %47, label %27

47:                                               ; preds = %44
  %48 = load i64, i64* %21, align 8
  br label %49

49:                                               ; preds = %47, %20
  %50 = phi i64 [ %48, %47 ], [ %23, %20 ]
  %51 = add i64 %50, -1
  store i64 %51, i64* %21, align 8
  br label %52

52:                                               ; preds = %2, %13, %49
  ret void
}

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #3

declare void @_ZN5blink26MutableCSSPropertyValueSetC1EPKNS_16CSSPropertyValueEj(%"class.blink::MutableCSSPropertyValueSet"*, %"class.blink::CSSPropertyValue"*, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_19CSSPropertyValueSetEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #10
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_19CSSPropertyValueSetEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSPropertyValueSetEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_19CSSPropertyValueSetEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSPropertyValueSet"*
  tail call void @_ZNK5blink19CSSPropertyValueSet5TraceEPNS_7VisitorE(%"class.blink::CSSPropertyValueSet"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_19CSSPropertyValueSetEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::CSSPropertyValueSet"*
  tail call void @_ZN5blink19CSSPropertyValueSet30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSPropertyValueSet"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_19CSSPropertyValueSetEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

declare void @_ZNK5blink19CSSPropertyValueSet5TraceEPNS_7VisitorE(%"class.blink::CSSPropertyValueSet"*, %"class.blink::Visitor"*) local_unnamed_addr #3

declare void @_ZN5blink19CSSPropertyValueSet30FinalizeGarbageCollectedObjectEv(%"class.blink::CSSPropertyValueSet"*) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.2068"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2068", %"class.WTF::StringTypeAdapter.2068"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.2068"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %4, i8* %14) #10
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.1945"* %9) #10
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.1945"* %9) #10
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.19, i64 0, i64 0), i8* %25, i8* %26) #10
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.20, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.20, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #10
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2069", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.2068"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.2068"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %5, i8* %10) #10
  %11 = bitcast %"class.WTF::StringTypeAdapter.2068"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2068", %"class.WTF::StringTypeAdapter.2068"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %3, i8* %14) #10
  %15 = bitcast %"class.WTF::StringTypeAdapter.2069"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2069", %"class.WTF::StringTypeAdapter.2069"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2069", %"class.WTF::StringTypeAdapter.2069"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #10
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.2069"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.2068"* nonnull %3, i8* %1) #10
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2069", %"class.WTF::StringTypeAdapter.2069"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.2070"* nonnull %34, i8* %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.1945"* %6) #10
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.2068"* nonnull %5, i8* %40) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2069", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.2068"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.2068"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %5, i8* %10) #10
  %11 = bitcast %"class.WTF::StringTypeAdapter.2068"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2068", %"class.WTF::StringTypeAdapter.2068"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %3, i8* %14) #10
  %15 = bitcast %"class.WTF::StringTypeAdapter.2069"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2069", %"class.WTF::StringTypeAdapter.2069"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2069", %"class.WTF::StringTypeAdapter.2069"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #10
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.2069"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2068"* nonnull %3, i16* %1) #10
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2069", %"class.WTF::StringTypeAdapter.2069"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2070"* nonnull %34, i16* %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.1945"* %6) #10
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2068"* nonnull %5, i16* %40) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.1945"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.2068", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.2068"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.2068", %"class.WTF::StringTypeAdapter.2068"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.1945", %"class.WTF::StringAppend.1945"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.2068"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.2068"* nonnull %4, i8* %13) #10
  %14 = getelementptr inbounds %"class.WTF::StringAppend.1945", %"class.WTF::StringAppend.1945"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.19, i64 0, i64 0), i8* %30, i8* %31) #10
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.20, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #10
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0), i8* %45, i8* %46) #10
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.20, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #10
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.2068"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.2070"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2068"*, i16*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.2070"*, i16*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!8 = distinct !{!8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!11 = distinct !{!11, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!14 = distinct !{!14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
