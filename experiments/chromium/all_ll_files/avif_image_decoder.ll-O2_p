; ModuleID = '../../third_party/blink/renderer/platform/image-decoders/avif/avif_image_decoder.cc'
source_filename = "../../third_party/blink/renderer/platform/image-decoders/avif/avif_image_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.blink::AVIFImageDecoder" = type <{ %"class.blink::ImageDecoder", i8, [3 x i8], i32, i32, i8, i8, i8, i8, i32, [4 x i8], i64, i32, i8, [3 x i8], i32, i32, %struct.avifImage, %struct.avifImage*, %"class.std::__1::unique_ptr.28", %struct.avifIO, %"struct.blink::AVIFImageDecoder::AvifIOData", %"class.std::__1::unique_ptr.34", i32, [4 x i8] }>
%"class.blink::ImageDecoder" = type { i32 (...)**, %class.scoped_refptr, %"class.WTF::Vector", i8, i32, %"class.blink::ColorBehavior", %"class.blink::ImageOrientation", %"class.blink::IntSize", i64, i8, %"class.std::__1::unique_ptr", i8, %"class.blink::IntSize", i8, i8, i8, %"class.std::__1::unique_ptr.9", %class.sk_sp.1, i8, %"class.std::__1::unique_ptr.22" }
%class.scoped_refptr = type { %"class.blink::SegmentReader"* }
%"class.blink::SegmentReader" = type <{ i32 (...)**, %"class.WTF::ThreadSafeRefCounted", [4 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [128 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::ImageFrame"*, i32, i32 }
%"class.blink::ImageFrame" = type { %class.SkBitmap, %"class.SkBitmap::Allocator"*, i8, i32, %"class.blink::IntRect", i32, %"class.base::TimeDelta", i32, i32, i8, i8, i64 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.base::TimeDelta" = type { i64 }
%"class.blink::ColorBehavior" = type { i32 }
%"class.blink::ImageOrientation" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ImagePlanes"* }
%"class.blink::ImagePlanes" = type <{ [3 x i8*], [3 x i64], i32, i8, [3 x i8] }>
%"class.blink::IntSize" = type { i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.blink::ColorProfile"* }
%"class.blink::ColorProfile" = type { %struct.skcms_ICCProfile, %"class.std::__1::unique_ptr.13" }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.12, [8 x i8] }
%struct.anon.12 = type { i32, i8*, i8* }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::ColorProfileTransform"* }
%"class.blink::ColorProfileTransform" = type { %struct.skcms_ICCProfile*, %struct.skcms_ICCProfile }
%struct.avifImage = type { i32, i32, i32, i32, i32, i32, [3 x i8*], [3 x i32], i32, i32, i8*, i32, i32, i32, %struct.avifRWData, i16, i16, i16, i32, %struct.avifPixelAspectRatioBox, %struct.avifCleanApertureBox, %struct.avifImageRotation, %struct.avifImageMirror, %struct.avifRWData, %struct.avifRWData }
%struct.avifPixelAspectRatioBox = type { i32, i32 }
%struct.avifCleanApertureBox = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.avifImageRotation = type { i8 }
%struct.avifImageMirror = type { i8 }
%struct.avifRWData = type { i8*, i64 }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30", %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %struct.avifDecoder* }
%struct.avifDecoder = type { i32, i32, i32, %struct.avifImage*, i32, i32, %struct.avifImageTiming, i64, double, i64, i32, i32, i32, i32, i32, %struct.avifIOStats, %struct.avifIO*, %struct.avifDiagnostics, %struct.avifDecoderData* }
%struct.avifImageTiming = type { i64, double, i64, double, i64 }
%struct.avifIOStats = type { i64, i64 }
%struct.avifDiagnostics = type { [256 x i8] }
%struct.avifDecoderData = type opaque
%"struct.std::__1::__compressed_pair_elem.31" = type { void (%struct.avifDecoder*)* }
%struct.avifIO = type { void (%struct.avifIO*)*, i32 (%struct.avifIO*, i32, i64, i64, %struct.avifROData*)*, i32 (%struct.avifIO*, i32, i64, i8*, i64)*, i64, i32, i8* }
%struct.avifROData = type { i8*, i64 }
%"struct.blink::AVIFImageDecoder::AvifIOData" = type <{ %"class.blink::SegmentReader"*, %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.gfx::ColorTransform"* }
%"class.gfx::ColorTransform" = type { i32 (...)** }
%"class.cc::ScopedSubnormalFloatDisabler" = type { i32 }
%struct.avifExtent = type { i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.147 }
%union.anon.147 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::FastSharedBufferReader" = type { %class.scoped_refptr, i8*, i64, i64 }
%"class.media::VideoColorSpace" = type { i8, i8, i8, i8 }
%struct.avifPixelFormatInfo = type { i32, i32, i32 }
%"class.gfx::Point3F" = type { float, float, float }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.media::VideoFrame" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.48", %"class.media::VideoFrameLayout", %class.scoped_refptr.47, i32, %"class.gfx::Rect", %"class.gfx::Size", [4 x i8*], [4 x %"struct.gpu::MailboxHolder"], %"class.base::OnceCallback", %"class.base::UnsafeSharedMemoryRegion"*, %"class.base::UnsafeSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.std::__1::unique_ptr.58", %class.scoped_refptr.64, %"class.std::__1::vector.65", %"class.base::TimeDelta", %"class.base::Lock", %"struct.gpu::SyncToken", %"struct.media::VideoFrameMetadata", i32, %"class.gfx::ColorSpace", %"class.absl::optional.108", [4 x i8], %"class.absl::optional.113", %"class.std::__1::unique_ptr.118" }
%"class.base::RefCountedThreadSafe.48" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.media::VideoFrameLayout" = type { i32, %"class.gfx::Size", %"class.std::__1::vector.49", i8, i64, i64 }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"*, %"class.std::__1::__compressed_pair.51" }
%"struct.media::ColorPlaneLayout" = type { i32, i64, i64 }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.media::ColorPlaneLayout"* }
%class.scoped_refptr.47 = type { %"class.media::VideoFrame"* }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.56 }
%class.scoped_refptr.56 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.57", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.57" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::UnsafeSharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.gfx::GpuMemoryBuffer"* }
%"class.gfx::GpuMemoryBuffer" = type opaque
%class.scoped_refptr.64 = type { %"class.media::VideoFrame::DmabufHolder"* }
%"class.media::VideoFrame::DmabufHolder" = type opaque
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { %"class.base::OnceCallback.67"*, %"class.base::OnceCallback.67"*, %"class.std::__1::__compressed_pair.68" }
%"class.base::OnceCallback.67" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.base::OnceCallback.67"* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType", i64 }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"struct.media::VideoFrameMetadata" = type { i8, %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.73", %"class.absl::optional.78", %"class.absl::optional.83", i8, %"class.absl::optional.88", %"class.absl::optional.93", i8, %"class.absl::optional", i8, [3 x i8], %"class.absl::optional.98", i8, i8, i8, i8, i32, %"class.absl::optional.103", i8, %"class.absl::optional.93", %"class.absl::optional.93", %"class.absl::optional.93", %"class.absl::optional.93", %"class.absl::optional.93", %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.88", %"class.absl::optional.93", %"class.absl::optional", %"class.absl::optional.88", %"class.absl::optional.73" }
%"class.absl::optional.78" = type { %"class.absl::optional_internal::optional_data.79" }
%"class.absl::optional_internal::optional_data.79" = type { %"class.absl::optional_internal::optional_data_base.80" }
%"class.absl::optional_internal::optional_data_base.80" = type { %"class.absl::optional_internal::optional_data_dtor_base.81" }
%"class.absl::optional_internal::optional_data_dtor_base.81" = type { i8, %union.anon.82 }
%union.anon.82 = type { %"class.gfx::Rect" }
%"class.absl::optional.83" = type { %"class.absl::optional_internal::optional_data.84" }
%"class.absl::optional_internal::optional_data.84" = type { %"class.absl::optional_internal::optional_data_base.85" }
%"class.absl::optional_internal::optional_data_base.85" = type { %"class.absl::optional_internal::optional_data_dtor_base.86" }
%"class.absl::optional_internal::optional_data_dtor_base.86" = type { i8, %union.anon.87 }
%union.anon.87 = type { i32 }
%"class.absl::optional.98" = type { %"class.absl::optional_internal::optional_data.99" }
%"class.absl::optional_internal::optional_data.99" = type { %"class.absl::optional_internal::optional_data_base.100" }
%"class.absl::optional_internal::optional_data_base.100" = type { %"class.absl::optional_internal::optional_data_dtor_base.101" }
%"class.absl::optional_internal::optional_data_dtor_base.101" = type { i8, [3 x i8], %union.anon.102 }
%union.anon.102 = type { %"struct.media::VideoTransformation" }
%"struct.media::VideoTransformation" = type <{ i32, i8, [3 x i8] }>
%"class.absl::optional.103" = type { %"class.absl::optional_internal::optional_data.104" }
%"class.absl::optional_internal::optional_data.104" = type { %"class.absl::optional_internal::optional_data_base.105" }
%"class.absl::optional_internal::optional_data_base.105" = type { %"class.absl::optional_internal::optional_data_dtor_base.106" }
%"class.absl::optional_internal::optional_data_dtor_base.106" = type { i8, %union.anon.107 }
%union.anon.107 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.93" = type { %"class.absl::optional_internal::optional_data.94" }
%"class.absl::optional_internal::optional_data.94" = type { %"class.absl::optional_internal::optional_data_base.95" }
%"class.absl::optional_internal::optional_data_base.95" = type { %"class.absl::optional_internal::optional_data_dtor_base.96" }
%"class.absl::optional_internal::optional_data_dtor_base.96" = type { i8, %union.anon.97 }
%union.anon.97 = type { double }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional.88" = type { %"class.absl::optional_internal::optional_data.89" }
%"class.absl::optional_internal::optional_data.89" = type { %"class.absl::optional_internal::optional_data_base.90" }
%"class.absl::optional_internal::optional_data_base.90" = type { %"class.absl::optional_internal::optional_data_dtor_base.91" }
%"class.absl::optional_internal::optional_data_dtor_base.91" = type { i8, %union.anon.92 }
%union.anon.92 = type { %"class.base::TimeDelta" }
%"class.absl::optional.73" = type { %"class.absl::optional_internal::optional_data.74" }
%"class.absl::optional_internal::optional_data.74" = type { %"class.absl::optional_internal::optional_data_base.75" }
%"class.absl::optional_internal::optional_data_base.75" = type { %"class.absl::optional_internal::optional_data_dtor_base.76" }
%"class.absl::optional_internal::optional_data_dtor_base.76" = type { i8, %union.anon.77 }
%union.anon.77 = type { i32 }
%"class.absl::optional.108" = type { %"class.absl::optional_internal::optional_data.109" }
%"class.absl::optional_internal::optional_data.109" = type { %"class.absl::optional_internal::optional_data_base.110" }
%"class.absl::optional_internal::optional_data_base.110" = type { %"class.absl::optional_internal::optional_data_dtor_base.111" }
%"class.absl::optional_internal::optional_data_dtor_base.111" = type { i8, %union.anon.112 }
%union.anon.112 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.gfx::PointF" = type { float, float }
%"class.absl::optional.113" = type { %"class.absl::optional_internal::optional_data.114" }
%"class.absl::optional_internal::optional_data.114" = type { %"class.absl::optional_internal::optional_data_base.115" }
%"class.absl::optional_internal::optional_data_base.115" = type { %"class.absl::optional_internal::optional_data_dtor_base.116" }
%"class.absl::optional_internal::optional_data_dtor_base.116" = type { i8, [7 x i8], %union.anon.117 }
%union.anon.117 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.122" }
%"struct.std::__1::atomic.122" = type { %"struct.std::__1::__atomic_base.123" }
%"struct.std::__1::__atomic_base.123" = type { %"struct.std::__1::__atomic_base.124" }
%"struct.std::__1::__atomic_base.124" = type { %"struct.std::__1::__cxx_atomic_impl.125" }
%"struct.std::__1::__cxx_atomic_impl.125" = type { %"struct.std::__1::__cxx_atomic_base_impl.126" }
%"struct.std::__1::__cxx_atomic_base_impl.126" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr.121 }
%class.scoped_refptr.121 = type { %"class.WTF::StringImpl"* }
%"class.WTF::Vector.127" = type { %"class.WTF::VectorBuffer.128" }
%"class.WTF::VectorBuffer.128" = type { %"class.WTF::VectorBufferBase.129" }
%"class.WTF::VectorBufferBase.129" = type { %struct.SkISize*, i32, i32 }
%"struct.cc::ImageHeaderMetadata" = type <{ i32, i32, %"class.gfx::Size", %"class.absl::optional.132", i8, i8, %"class.absl::optional.137", %"class.absl::optional.137", [2 x i8] }>
%"class.absl::optional.132" = type { %"class.absl::optional_internal::optional_data.133" }
%"class.absl::optional_internal::optional_data.133" = type { %"class.absl::optional_internal::optional_data_base.134" }
%"class.absl::optional_internal::optional_data_base.134" = type { %"class.absl::optional_internal::optional_data_dtor_base.135" }
%"class.absl::optional_internal::optional_data_dtor_base.135" = type { i8, %union.anon.136 }
%union.anon.136 = type { %"class.gfx::Size" }
%"class.absl::optional.137" = type { %"class.absl::optional_internal::optional_data.138" }
%"class.absl::optional_internal::optional_data.138" = type { %"class.absl::optional_internal::optional_data_base.139" }
%"class.absl::optional_internal::optional_data_base.139" = type { %"class.absl::optional_internal::optional_data_dtor_base.140" }
%"class.absl::optional_internal::optional_data_dtor_base.140" = type { i8, %union.anon.141 }
%union.anon.141 = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN5blink12ImageDecoderD2Ev = comdat any

$_ZNK5blink12ImageDecoder4SizeEv = comdat any

$_ZN5blink12ImageDecoder9SetFailedEv = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_ = comdat any

$_ZN5blink12ImageDecoder7SetSizeEjj = comdat any

$_ZNK5blink16AVIFImageDecoder17FilenameExtensionEv = comdat any

$_ZNK5blink12ImageDecoder23GetSupportedDecodeSizesEv = comdat any

$_ZNK5blink12ImageDecoder11DecodedSizeEv = comdat any

$_ZNK5blink12ImageDecoder16FrameSizeAtIndexEm = comdat any

$_ZNK5blink12ImageDecoder7HotSpotERNS_8IntPointE = comdat any

$_ZN5blink12ImageDecoder18SetMemoryAllocatorEPN8SkBitmap9AllocatorE = comdat any

$_ZN5blink12ImageDecoder34FrameStatusSufficientForSuccessorsEj = comdat any

$_ZN5blink12ImageDecoder17OnInitFrameBufferEm = comdat any

$_ZN3WTF12VectorBufferIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZTVN5blink16AVIFImageDecoderE = hidden unnamed_addr constant { [37 x i8*] } { [37 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoderD2Ev to i8*), i8* bitcast (void (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoderD0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::AVIFImageDecoder"*)* @_ZNK5blink16AVIFImageDecoder17FilenameExtensionEv to i8*), i8* bitcast (i1 (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoder19ImageIsHighBitDepthEv to i8*), i8* bitcast (void (%"class.blink::AVIFImageDecoder"*, %"class.blink::SegmentReader"*)* @_ZN5blink16AVIFImageDecoder9OnSetDataEPNS_13SegmentReaderE to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder4SizeEv to i8*), i8* bitcast (void (%"class.WTF::Vector.127"*, %"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder23GetSupportedDecodeSizesEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder11DecodedSizeEv to i8*), i8* bitcast (i32 (%"class.blink::AVIFImageDecoder"*)* @_ZNK5blink16AVIFImageDecoder17GetYUVSubsamplingEv to i8*), i8* bitcast (i64 (%"class.blink::AVIFImageDecoder"*, i32)* @_ZNK5blink16AVIFImageDecoder14DecodedYUVSizeEN2cc8YUVIndexE to i8*), i8* bitcast (i64 (%"class.blink::AVIFImageDecoder"*, i32)* @_ZNK5blink16AVIFImageDecoder20DecodedYUVWidthBytesEN2cc8YUVIndexE to i8*), i8* bitcast (i32 (%"class.blink::AVIFImageDecoder"*)* @_ZNK5blink16AVIFImageDecoder16GetYUVColorSpaceEv to i8*), i8* bitcast (i8 (%"class.blink::AVIFImageDecoder"*)* @_ZNK5blink16AVIFImageDecoder14GetYUVBitDepthEv to i8*), i8* bitcast (void (%"struct.cc::ImageHeaderMetadata"*, %"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder33MakeMetadataForDecodeAccelerationEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i64)* @_ZNK5blink12ImageDecoder16FrameSizeAtIndexEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, i32, i32)* @_ZN5blink12ImageDecoder7SetSizeEjj to i8*), i8* bitcast (i32 (%"class.blink::AVIFImageDecoder"*)* @_ZNK5blink16AVIFImageDecoder15RepetitionCountEv to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, i64)* @_ZNK5blink12ImageDecoder20FrameHasAlphaAtIndexEm to i8*), i8* bitcast (i1 (%"class.blink::AVIFImageDecoder"*, i64)* @_ZNK5blink16AVIFImageDecoder22FrameIsReceivedAtIndexEm to i8*), i8* bitcast (i64 (%"class.blink::AVIFImageDecoder"*, i64)* @_ZNK5blink16AVIFImageDecoder20FrameDurationAtIndexEm to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i64)* @_ZNK5blink12ImageDecoder17FrameBytesAtIndexEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*)* @_ZN5blink12ImageDecoder9SetFailedEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i64)* @_ZN5blink12ImageDecoder21ClearCacheExceptFrameEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, %"class.blink::IntPoint"*)* @_ZNK5blink12ImageDecoder7HotSpotERNS_8IntPointE to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*, %"class.SkBitmap::Allocator"*)* @_ZN5blink12ImageDecoder18SetMemoryAllocatorEPN8SkBitmap9AllocatorE to i8*), i8* bitcast (void (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoder11DecodeToYUVEv to i8*), i8* bitcast (i1 (%"class.blink::AVIFImageDecoder"*)* @_ZNK5blink16AVIFImageDecoder37ImageHasBothStillAndAnimatedSubImagesEv to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*, i64)* @_ZN5blink12ImageDecoder16ClearFrameBufferEm to i8*), i8* bitcast (void (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoder10DecodeSizeEv to i8*), i8* bitcast (i64 (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoder16DecodeFrameCountEv to i8*), i8* bitcast (void (%"class.blink::AVIFImageDecoder"*, i64)* @_ZN5blink16AVIFImageDecoder18InitializeNewFrameEm to i8*), i8* bitcast (void (%"class.blink::AVIFImageDecoder"*, i64)* @_ZN5blink16AVIFImageDecoder6DecodeEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, i32)* @_ZN5blink12ImageDecoder34FrameStatusSufficientForSuccessorsEj to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*, i64)* @_ZN5blink12ImageDecoder17OnInitFrameBufferEm to i8*), i8* bitcast (i1 (%"class.blink::AVIFImageDecoder"*, i64)* @_ZNK5blink16AVIFImageDecoder27CanReusePreviousFrameBufferEm to i8*)] }, align 8
@.str = private unnamed_addr constant [5 x i8] c"avis\00", align 1
@__const._ZN5blink16AVIFImageDecoder13UpdateDemuxerEv.profile = private unnamed_addr constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } } { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i8 -86, [3 x i8] c"\AA\AA\AA", %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], [4 x i8] c"\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] } }, align 8
@_ZZN5blink16AVIFImageDecoder13UpdateDemuxerEvE23kAxisAngleToOrientation = internal unnamed_addr constant [3 x [4 x i8]] [[4 x i8] c"\01\08\03\06", [4 x i8] c"\02\07\04\05", [4 x i8] c"\04\05\02\07"], align 1
@__const._ZN5blink16AVIFImageDecoder11RenderImageEPK9avifImagePNS_10ImageFrameE.frame_cs = private unnamed_addr constant %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, align 4
@_ZTVN5blink12ImageDecoderE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV420Formats = internal unnamed_addr constant [3 x i32] [i32 1, i32 17, i32 22], align 4
@_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV422Formats = internal unnamed_addr constant [3 x i32] [i32 3, i32 19, i32 23], align 4
@_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV444Formats = internal unnamed_addr constant [3 x i32] [i32 5, i32 21, i32 24], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"avif\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.7 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1
@switch.table._ZNK5blink16AVIFImageDecoder17GetYUVSubsamplingEv = private unnamed_addr constant [5 x i32] [i32 6, i32 5, i32 3, i32 2, i32 6], align 4

@_ZN5blink16AVIFImageDecoderC1ENS_12ImageDecoder11AlphaOptionENS1_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorEmNS1_15AnimationOptionE = hidden unnamed_addr alias void (%"class.blink::AVIFImageDecoder"*, i32, i32, %"class.blink::ColorBehavior"*, i64, i32), void (%"class.blink::AVIFImageDecoder"*, i32, i32, %"class.blink::ColorBehavior"*, i64, i32)* @_ZN5blink16AVIFImageDecoderC2ENS_12ImageDecoder11AlphaOptionENS1_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorEmNS1_15AnimationOptionE
@_ZN5blink16AVIFImageDecoderD1Ev = hidden unnamed_addr alias void (%"class.blink::AVIFImageDecoder"*), void (%"class.blink::AVIFImageDecoder"*)* @_ZN5blink16AVIFImageDecoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoderC2ENS_12ImageDecoder11AlphaOptionENS1_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorEmNS1_15AnimationOptionE(%"class.blink::AVIFImageDecoder"*, i32, i32, %"class.blink::ColorBehavior"* nocapture readonly dereferenceable(4), i64, i32) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink12ImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  store %"class.blink::SegmentReader"* null, %"class.blink::SegmentReader"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 1, i64 0
  %11 = bitcast %"class.WTF::Vector"* %9 to i8**
  store i8* %10, i8** %11, align 8
  %12 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 3
  %15 = icmp eq i32 %1, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %14, align 8
  %17 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 4
  store i32 %2, i32* %17, align 4
  %18 = getelementptr inbounds %"class.blink::ColorBehavior", %"class.blink::ColorBehavior"* %3, i64 0, i32 0
  %19 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 5, i32 0
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %19, align 8
  %21 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 6, i32 0
  store i8 1, i8* %21, align 1
  %22 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 7, i32 0
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 7, i32 1
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 8
  store i64 %4, i64* %24, align 8
  %25 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 10
  %27 = bitcast %"class.std::__1::unique_ptr"* %26 to i64*
  store i64 0, i64* %27, align 8
  %28 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 11
  store i8 0, i8* %28, align 8
  %29 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12, i32 0
  %30 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 16
  %31 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 19
  %32 = bitcast %"class.std::__1::unique_ptr.22"* %31 to i64*
  store i64 0, i64* %32, align 8
  %33 = bitcast i32* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 11, i1 false) #15
  %34 = bitcast %"class.std::__1::unique_ptr.9"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 17, i1 false) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink16AVIFImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %35 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 1
  store i8 0, i8* %35, align 8
  %36 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 3
  %37 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 11
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 12
  %39 = bitcast i32* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 16, i1 false)
  store i32 10, i32* %38, align 8
  %40 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 13
  store i8 0, i8* %40, align 4
  %41 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 15
  store i32 0, i32* %41, align 8
  %42 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 16
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 18
  %44 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 5
  %45 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22
  %46 = bitcast %"class.std::__1::unique_ptr.34"* %45 to i64*
  store i64 0, i64* %46, align 8
  %47 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 23
  %48 = bitcast %struct.avifImage** %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 60, i1 false)
  %49 = bitcast i8** %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 41, i1 false)
  store i32 %5, i32* %47, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoderD2Ev(%"class.blink::AVIFImageDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink16AVIFImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %3, align 8
  store %"class.gfx::ColorTransform"* null, %"class.gfx::ColorTransform"** %3, align 8
  %5 = icmp eq %"class.gfx::ColorTransform"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.gfx::ColorTransform"* %4 to void (%"class.gfx::ColorTransform"*)***
  %8 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %8, i64 1
  %10 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %9, align 8
  tail call void %10(%"class.gfx::ColorTransform"* nonnull %4) #15
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21, i32 1, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i8* %13 to i64
  %17 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21, i32 1, i32 0, i32 1
  %18 = bitcast i8** %17 to i64*
  store i64 %16, i64* %18, align 8
  tail call void @_ZdlPv(i8* nonnull %13) #16
  br label %19

19:                                               ; preds = %11, %15
  %20 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %21 = load %struct.avifDecoder*, %struct.avifDecoder** %20, align 8
  store %struct.avifDecoder* null, %struct.avifDecoder** %20, align 8
  %22 = icmp eq %struct.avifDecoder* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 1, i32 0
  %25 = load void (%struct.avifDecoder*)*, void (%struct.avifDecoder*)** %24, align 8
  tail call void %25(%struct.avifDecoder* nonnull %21) #15
  br label %26

26:                                               ; preds = %19, %23
  %27 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0
  tail call void @_ZN5blink12ImageDecoderD2Ev(%"class.blink::ImageDecoder"* %27) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoderD2Ev(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink12ImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %4 = load %"class.blink::ColorProfileTransform"*, %"class.blink::ColorProfileTransform"** %3, align 8
  store %"class.blink::ColorProfileTransform"* null, %"class.blink::ColorProfileTransform"** %3, align 8
  %5 = icmp eq %"class.blink::ColorProfileTransform"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.blink::ColorProfileTransform"* %4 to i8*
  tail call void @free(i8* %7) #15
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 17, i32 0
  %10 = load %class.SkColorSpace*, %class.SkColorSpace** %9, align 8
  %11 = icmp eq %class.SkColorSpace* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 -1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %class.SkColorSpace* %10 to i8*
  tail call void @_ZdlPv(i8* %17) #16
  br label %18

18:                                               ; preds = %8, %12, %16
  %19 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %20 = load %"class.blink::ColorProfile"*, %"class.blink::ColorProfile"** %19, align 8
  store %"class.blink::ColorProfile"* null, %"class.blink::ColorProfile"** %19, align 8
  %21 = icmp eq %"class.blink::ColorProfile"* %20, null
  br i1 %21, label %29, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %20, i64 0, i32 1, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  store i8* null, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @_ZdaPv(i8* nonnull %24) #16
  br label %27

27:                                               ; preds = %26, %22
  %28 = bitcast %"class.blink::ColorProfile"* %20 to i8*
  tail call void @free(i8* %28) #15
  br label %29

29:                                               ; preds = %18, %27
  %30 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %31 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %30, align 8
  store %"class.blink::ImagePlanes"* null, %"class.blink::ImagePlanes"** %30, align 8
  %32 = icmp eq %"class.blink::ImagePlanes"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::ImagePlanes"* %31 to i8*
  tail call void @free(i8* %34) #15
  br label %35

35:                                               ; preds = %29, %33
  %36 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2
  %37 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %36, i64 0, i32 0, i32 0, i32 0
  br i1 %39, label %51, label %41, !prof !2

41:                                               ; preds = %35
  %42 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %40, align 8
  %43 = zext i32 %38 to i64
  %44 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %42, i64 %43
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi %"class.blink::ImageFrame"* [ %48, %45 ], [ %42, %41 ]
  %47 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %46, i64 0, i32 0
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %47) #15
  %48 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %46, i64 1
  %49 = icmp eq %"class.blink::ImageFrame"* %48, %44
  br i1 %49, label %50, label %45

50:                                               ; preds = %45
  store i32 0, i32* %37, align 4
  br label %51

51:                                               ; preds = %50, %35
  %52 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %40, align 8
  %53 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %54 = bitcast i8* %53 to %"class.blink::ImageFrame"*
  %55 = icmp eq %"class.blink::ImageFrame"* %52, %54
  br i1 %55, label %58, label %56, !prof !3

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %36, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"* %57, %"class.blink::ImageFrame"* %52) #15
  br label %58

58:                                               ; preds = %51, %56
  store %"class.blink::ImageFrame"* null, %"class.blink::ImageFrame"** %40, align 8
  %59 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 1, i32 0
  %60 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %59, align 8
  %61 = icmp eq %"class.blink::SegmentReader"* %60, null
  br i1 %61, label %74, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %60, i64 0, i32 1, i32 0
  %64 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = atomicrmw sub i32* %64, i32 1 acq_rel
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %74

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %63, i64 -2
  %69 = bitcast %"class.base::RefCountedThreadSafe"* %68 to %"class.blink::SegmentReader"*
  %70 = bitcast %"class.base::RefCountedThreadSafe"* %68 to void (%"class.blink::SegmentReader"*)***
  %71 = load void (%"class.blink::SegmentReader"*)**, void (%"class.blink::SegmentReader"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %71, i64 1
  %73 = load void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %72, align 8
  tail call void %73(%"class.blink::SegmentReader"* nonnull %69) #15
  br label %74

74:                                               ; preds = %58, %62, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoderD0Ev(%"class.blink::AVIFImageDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink16AVIFImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %3, align 8
  store %"class.gfx::ColorTransform"* null, %"class.gfx::ColorTransform"** %3, align 8
  %5 = icmp eq %"class.gfx::ColorTransform"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.gfx::ColorTransform"* %4 to void (%"class.gfx::ColorTransform"*)***
  %8 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %8, i64 1
  %10 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %9, align 8
  tail call void %10(%"class.gfx::ColorTransform"* nonnull %4) #15
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21, i32 1, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i8* %13 to i64
  %17 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21, i32 1, i32 0, i32 1
  %18 = bitcast i8** %17 to i64*
  store i64 %16, i64* %18, align 8
  tail call void @_ZdlPv(i8* nonnull %13) #16
  br label %19

19:                                               ; preds = %15, %11
  %20 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %21 = load %struct.avifDecoder*, %struct.avifDecoder** %20, align 8
  store %struct.avifDecoder* null, %struct.avifDecoder** %20, align 8
  %22 = icmp eq %struct.avifDecoder* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 1, i32 0
  %25 = load void (%struct.avifDecoder*)*, void (%struct.avifDecoder*)** %24, align 8
  tail call void %25(%struct.avifDecoder* nonnull %21) #15
  br label %26

26:                                               ; preds = %19, %23
  %27 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0
  tail call void @_ZN5blink12ImageDecoderD2Ev(%"class.blink::ImageDecoder"* %27) #15
  %28 = bitcast %"class.blink::AVIFImageDecoder"* %0 to i8*
  tail call void @free(i8* %28) #15
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink16AVIFImageDecoder19ImageIsHighBitDepthEv(%"class.blink::AVIFImageDecoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 4
  %4 = icmp ugt i8 %3, 8
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder9OnSetDataEPNS_13SegmentReaderE(%"class.blink::AVIFImageDecoder"*, %"class.blink::SegmentReader"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 14
  %5 = load i8, i8* %4, align 1, !range !4
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21, i32 0
  store %"class.blink::SegmentReader"* %8, %"class.blink::SegmentReader"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21, i32 2
  store i8 %5, i8* %10, align 8
  br i1 %6, label %21, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.blink::SegmentReader"* %8 to i64 (%"class.blink::SegmentReader"*)***
  %13 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %12, align 8
  %14 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %13, i64 2
  %15 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %14, align 8
  %16 = tail call i64 %15(%"class.blink::SegmentReader"* %8) #15
  %17 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 3
  store i64 %16, i64* %17, align 8
  %18 = tail call zeroext i1 @_ZN5blink16AVIFImageDecoder13UpdateDemuxerEv(%"class.blink::AVIFImageDecoder"* %0) #15
  br i1 %18, label %23, label %19

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %20, align 2
  br label %23

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 3
  store i64 268435456, i64* %22, align 8
  br label %23

23:                                               ; preds = %19, %11, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder13ParseMetadataEv(%"class.blink::AVIFImageDecoder"*) local_unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZN5blink16AVIFImageDecoder13UpdateDemuxerEv(%"class.blink::AVIFImageDecoder"* %0)
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %4, align 2
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink16AVIFImageDecoder17GetYUVSubsamplingEv(%"class.blink::AVIFImageDecoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %3 = load %struct.avifDecoder*, %struct.avifDecoder** %2, align 8
  %4 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %3, i64 0, i32 3
  %5 = load %struct.avifImage*, %struct.avifImage** %4, align 8
  %6 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZNK5blink16AVIFImageDecoder17GetYUVSubsamplingEv, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  ret i32 %10
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink16AVIFImageDecoder14DecodedYUVSizeEN2cc8YUVIndexE(%"class.blink::AVIFImageDecoder"* nocapture readonly, i32) unnamed_addr #3 align 2 {
  %3 = add i32 %1, -1
  %4 = icmp ult i32 %3, 2
  %5 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %6 = bitcast %"class.blink::IntSize"* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %7, 32
  br i1 %4, label %10, label %22

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 7
  %12 = load i8, i8* %11, align 2
  %13 = zext i8 %12 to i32
  %14 = add nsw i32 %13, %8
  %15 = ashr i32 %14, %13
  %16 = trunc i64 %9 to i32
  %17 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 8
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = add nsw i32 %19, %16
  %21 = ashr i32 %20, %19
  br label %24

22:                                               ; preds = %2
  %23 = trunc i64 %9 to i32
  br label %24

24:                                               ; preds = %22, %10
  %25 = phi i32 [ %15, %10 ], [ %8, %22 ]
  %26 = phi i32 [ %21, %10 ], [ %23, %22 ]
  %27 = zext i32 %26 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %25 to i64
  %30 = or i64 %28, %29
  ret i64 %30
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder4SizeEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 12
  %3 = bitcast %"class.blink::IntSize"* %2 to i64*
  %4 = load i64, i64* %3, align 4
  ret i64 %4
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink16AVIFImageDecoder20DecodedYUVWidthBytesEN2cc8YUVIndexE(%"class.blink::AVIFImageDecoder"* nocapture readonly, i32) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %4 = bitcast %"class.blink::IntSize"* %3 to i64*
  %5 = load i64, i64* %4, align 4
  %6 = trunc i64 %5 to i32
  %7 = add i32 %6, 127
  %8 = and i32 %7, -128
  %9 = add i32 %1, -1
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 7
  %13 = load i8, i8* %12, align 2
  %14 = zext i8 %13 to i32
  %15 = ashr i32 %8, %14
  br label %16

16:                                               ; preds = %2, %11
  %17 = phi i32 [ %15, %11 ], [ %8, %2 ]
  %18 = and i32 %17, 1023
  %19 = icmp eq i32 %18, 0
  %20 = add nsw i32 %17, 64
  %21 = select i1 %19, i32 %20, i32 %17
  %22 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 4
  %24 = icmp ugt i8 %23, 8
  %25 = zext i1 %24 to i32
  %26 = shl nsw i32 %21, %25
  %27 = sext i32 %26 to i64
  ret i64 %27
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink16AVIFImageDecoder16GetYUVColorSpaceEv(%"class.blink::AVIFImageDecoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK5blink16AVIFImageDecoder14GetYUVBitDepthEv(%"class.blink::AVIFImageDecoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 4
  ret i8 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder11DecodeToYUVEv(%"class.blink::AVIFImageDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  %3 = load i8, i8* %2, align 2, !range !4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %220

5:                                                ; preds = %1
  %6 = tail call i32 @_ZN5blink16AVIFImageDecoder11DecodeImageEm(%"class.blink::AVIFImageDecoder"* %0, i64 0)
  switch i32 %6, label %7 [
    i32 0, label %8
    i32 23, label %220
  ]

7:                                                ; preds = %5
  store i8 1, i8* %2, align 2
  br label %220

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 18
  %10 = load %struct.avifImage*, %struct.avifImage** %9, align 8
  %11 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 10, i32 0, i32 0, i32 0
  %12 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::ImagePlanes", %"class.blink::ImagePlanes"* %12, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 16
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = tail call i8* @_Znwm(i64 4) #16
  %18 = bitcast i8* %17 to %"class.cc::ScopedSubnormalFloatDisabler"*
  tail call void @_ZN2cc28ScopedSubnormalFloatDisablerC1Ev(%"class.cc::ScopedSubnormalFloatDisabler"* nonnull %18) #15
  br label %19

19:                                               ; preds = %16, %8
  %20 = phi i8* [ %17, %16 ], [ null, %8 ]
  %21 = phi %"class.cc::ScopedSubnormalFloatDisabler"* [ %18, %16 ], [ null, %8 ]
  %22 = select i1 %15, float 1.000000e+00, float 6.553500e+04
  %23 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  %24 = load i8, i8* %23, align 4
  %25 = zext i8 %24 to i32
  %26 = shl nsw i32 -1, %25
  %27 = xor i32 %26, -1
  %28 = sitofp i32 %27 to float
  %29 = fdiv float %22, %28
  %30 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %10, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %10, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 7
  %35 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 8
  %36 = insertelement <8 x float> undef, float %29, i32 0
  %37 = shufflevector <8 x float> %36, <8 x float> undef, <8 x i32> zeroinitializer
  br label %43

38:                                               ; preds = %215
  %39 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %11, align 8
  %40 = getelementptr inbounds %"class.blink::ImagePlanes", %"class.blink::ImagePlanes"* %39, i64 0, i32 3
  store i8 1, i8* %40, align 4
  %41 = icmp eq %"class.cc::ScopedSubnormalFloatDisabler"* %21, null
  br i1 %41, label %220, label %42

42:                                               ; preds = %38
  tail call void @_ZN2cc28ScopedSubnormalFloatDisablerD1Ev(%"class.cc::ScopedSubnormalFloatDisabler"* nonnull %21) #15
  tail call void @_ZdlPv(i8* %20) #16
  br label %220

43:                                               ; preds = %215, %19
  %44 = phi i64 [ 0, %19 ], [ %218, %215 ]
  %45 = phi i32 [ %33, %19 ], [ %217, %215 ]
  %46 = phi i32 [ %31, %19 ], [ %216, %215 ]
  %47 = trunc i64 %44 to i32
  %48 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %10, i64 0, i32 7, i64 %44
  %49 = load i32, i32* %48, align 4
  %50 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %11, align 8
  %51 = tail call i64 @_ZNK5blink11ImagePlanes8RowBytesEN2cc8YUVIndexE(%"class.blink::ImagePlanes"* %50, i32 %47) #15
  %52 = load i8, i8* %23, align 4
  %53 = icmp eq i8 %52, 8
  %54 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %10, i64 0, i32 6, i64 %44
  br i1 %53, label %55, label %60

55:                                               ; preds = %43
  %56 = load i8*, i8** %54, align 8
  %57 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %11, align 8
  %58 = tail call i8* @_ZN5blink11ImagePlanes5PlaneEN2cc8YUVIndexE(%"class.blink::ImagePlanes"* %57, i32 %47) #15
  %59 = trunc i64 %51 to i32
  tail call void @CopyPlane(i8* %56, i32 %49, i8* %58, i32 %59, i32 %46, i32 %45) #15
  br label %204

60:                                               ; preds = %43
  %61 = bitcast i8** %54 to i16**
  %62 = load i16*, i16** %61, align 8
  %63 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %11, align 8
  %64 = tail call i8* @_ZN5blink11ImagePlanes5PlaneEN2cc8YUVIndexE(%"class.blink::ImagePlanes"* %63, i32 %47) #15
  %65 = bitcast i8* %64 to i16*
  %66 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %11, align 8
  %67 = getelementptr inbounds %"class.blink::ImagePlanes", %"class.blink::ImagePlanes"* %66, i64 0, i32 2
  %68 = load i32, i32* %67, align 8
  switch i32 %68, label %204 [
    i32 18, label %69
    i32 16, label %201
  ]

69:                                               ; preds = %60
  %70 = lshr i32 %49, 1
  %71 = zext i32 %70 to i64
  %72 = lshr i64 %51, 1
  %73 = icmp eq i32 %45, 0
  br i1 %73, label %204, label %74

74:                                               ; preds = %69
  %75 = icmp eq i32 %46, 0
  %76 = zext i32 %45 to i64
  %77 = zext i32 %46 to i64
  %78 = and i64 %51, -2
  %79 = shl nuw nsw i64 %77, 1
  %80 = and i64 %77, 4294967288
  %81 = add nsw i64 %80, -8
  %82 = lshr exact i64 %81, 3
  %83 = add nuw nsw i64 %82, 1
  %84 = icmp ult i32 %46, 8
  %85 = and i64 %77, 4294967288
  %86 = and i64 %83, 1
  %87 = icmp eq i64 %81, 0
  %88 = sub nuw nsw i64 %83, %86
  %89 = icmp eq i64 %86, 0
  %90 = icmp eq i64 %85, %77
  %91 = and i64 %77, 1
  %92 = icmp eq i64 %91, 0
  %93 = sub nsw i64 0, %77
  br label %94

94:                                               ; preds = %175, %74
  %95 = phi i64 [ 0, %74 ], [ %176, %175 ]
  %96 = mul i64 %78, %95
  %97 = getelementptr i8, i8* %64, i64 %96
  %98 = add i64 %79, %96
  %99 = getelementptr i8, i8* %64, i64 %98
  %100 = mul i64 %95, %71
  %101 = getelementptr i16, i16* %62, i64 %100
  %102 = bitcast i16* %101 to i8*
  %103 = add i64 %100, %77
  %104 = getelementptr i16, i16* %62, i64 %103
  %105 = bitcast i16* %104 to i8*
  br i1 %75, label %175, label %106

106:                                              ; preds = %94
  %107 = mul nuw nsw i64 %95, %71
  %108 = mul i64 %72, %95
  br i1 %84, label %109, label %126

109:                                              ; preds = %174, %126, %106
  %110 = phi i64 [ 0, %126 ], [ 0, %106 ], [ %85, %174 ]
  %111 = xor i64 %110, -1
  br i1 %92, label %123, label %112

112:                                              ; preds = %109
  %113 = add nuw nsw i64 %107, %110
  %114 = getelementptr inbounds i16, i16* %62, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = uitofp i16 %115 to float
  %117 = fmul float %29, %116
  %118 = fadd float %117, 5.000000e-01
  %119 = fptoui float %118 to i16
  %120 = add i64 %108, %110
  %121 = getelementptr inbounds i16, i16* %65, i64 %120
  store i16 %119, i16* %121, align 2
  %122 = or i64 %110, 1
  br label %123

123:                                              ; preds = %112, %109
  %124 = phi i64 [ %122, %112 ], [ %110, %109 ]
  %125 = icmp eq i64 %111, %93
  br i1 %125, label %175, label %178

126:                                              ; preds = %106
  %127 = icmp ult i8* %97, %105
  %128 = icmp ugt i8* %99, %102
  %129 = and i1 %127, %128
  br i1 %129, label %109, label %130

130:                                              ; preds = %126
  br i1 %87, label %160, label %131

131:                                              ; preds = %130, %131
  %132 = phi i64 [ %157, %131 ], [ 0, %130 ]
  %133 = phi i64 [ %158, %131 ], [ %88, %130 ]
  %134 = add nuw nsw i64 %107, %132
  %135 = getelementptr inbounds i16, i16* %62, i64 %134
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !5
  %138 = uitofp <8 x i16> %137 to <8 x float>
  %139 = fmul <8 x float> %37, %138
  %140 = fadd <8 x float> %139, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %141 = fptoui <8 x float> %140 to <8 x i16>
  %142 = add i64 %108, %132
  %143 = getelementptr inbounds i16, i16* %65, i64 %142
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2, !alias.scope !8, !noalias !5
  %145 = or i64 %132, 8
  %146 = add nuw nsw i64 %107, %145
  %147 = getelementptr inbounds i16, i16* %62, i64 %146
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !5
  %150 = uitofp <8 x i16> %149 to <8 x float>
  %151 = fmul <8 x float> %37, %150
  %152 = fadd <8 x float> %151, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %153 = fptoui <8 x float> %152 to <8 x i16>
  %154 = add i64 %108, %145
  %155 = getelementptr inbounds i16, i16* %65, i64 %154
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %156, align 2, !alias.scope !8, !noalias !5
  %157 = add i64 %132, 16
  %158 = add i64 %133, -2
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %131, !llvm.loop !10

160:                                              ; preds = %131, %130
  %161 = phi i64 [ 0, %130 ], [ %157, %131 ]
  br i1 %89, label %174, label %162

162:                                              ; preds = %160
  %163 = add nuw nsw i64 %107, %161
  %164 = getelementptr inbounds i16, i16* %62, i64 %163
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2, !alias.scope !5
  %167 = uitofp <8 x i16> %166 to <8 x float>
  %168 = fmul <8 x float> %37, %167
  %169 = fadd <8 x float> %168, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %170 = fptoui <8 x float> %169 to <8 x i16>
  %171 = add i64 %108, %161
  %172 = getelementptr inbounds i16, i16* %65, i64 %171
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %173, align 2, !alias.scope !8, !noalias !5
  br label %174

174:                                              ; preds = %160, %162
  br i1 %90, label %175, label %109

175:                                              ; preds = %123, %178, %174, %94
  %176 = add nuw nsw i64 %95, 1
  %177 = icmp eq i64 %176, %76
  br i1 %177, label %204, label %94

178:                                              ; preds = %123, %178
  %179 = phi i64 [ %199, %178 ], [ %124, %123 ]
  %180 = add nuw nsw i64 %107, %179
  %181 = getelementptr inbounds i16, i16* %62, i64 %180
  %182 = load i16, i16* %181, align 2
  %183 = uitofp i16 %182 to float
  %184 = fmul float %29, %183
  %185 = fadd float %184, 5.000000e-01
  %186 = fptoui float %185 to i16
  %187 = add i64 %108, %179
  %188 = getelementptr inbounds i16, i16* %65, i64 %187
  store i16 %186, i16* %188, align 2
  %189 = add nuw nsw i64 %179, 1
  %190 = add nuw nsw i64 %107, %189
  %191 = getelementptr inbounds i16, i16* %62, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = uitofp i16 %192 to float
  %194 = fmul float %29, %193
  %195 = fadd float %194, 5.000000e-01
  %196 = fptoui float %195 to i16
  %197 = add i64 %108, %189
  %198 = getelementptr inbounds i16, i16* %65, i64 %197
  store i16 %196, i16* %198, align 2
  %199 = add nuw nsw i64 %179, 2
  %200 = icmp eq i64 %199, %77
  br i1 %200, label %175, label %178, !llvm.loop !12

201:                                              ; preds = %60
  %202 = trunc i64 %51 to i32
  %203 = tail call i32 @HalfFloatPlane(i16* %62, i32 %49, i16* %65, i32 %202, float %29, i32 %46, i32 %45) #15
  br label %204

204:                                              ; preds = %175, %69, %60, %201, %55
  %205 = icmp eq i32 %47, 0
  br i1 %205, label %206, label %215

206:                                              ; preds = %204
  %207 = load i8, i8* %34, align 2
  %208 = zext i8 %207 to i32
  %209 = add nsw i32 %46, %208
  %210 = ashr i32 %209, %208
  %211 = load i8, i8* %35, align 1
  %212 = zext i8 %211 to i32
  %213 = add nsw i32 %45, %212
  %214 = ashr i32 %213, %212
  br label %215

215:                                              ; preds = %206, %204
  %216 = phi i32 [ %210, %206 ], [ %46, %204 ]
  %217 = phi i32 [ %214, %206 ], [ %45, %204 ]
  %218 = add nuw nsw i64 %44, 1
  %219 = icmp eq i64 %218, 3
  br i1 %219, label %38, label %43

220:                                              ; preds = %1, %42, %38, %5, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink16AVIFImageDecoder11DecodeImageEm(%"class.blink::AVIFImageDecoder"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %4 = load %struct.avifDecoder*, %struct.avifDecoder** %3, align 8
  %5 = trunc i64 %1 to i32
  %6 = tail call i32 @avifDecoderNthImage(%struct.avifDecoder* %4, i32 %5) #15
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %123

8:                                                ; preds = %2
  %9 = load %struct.avifDecoder*, %struct.avifDecoder** %3, align 8
  %10 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %9, i64 0, i32 3
  %11 = load %struct.avifImage*, %struct.avifImage** %10, align 8
  %12 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %123

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %11, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %123

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %11, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  %27 = load i8, i8* %26, align 4
  %28 = zext i8 %27 to i32
  %29 = icmp eq i32 %25, %28
  br i1 %29, label %30, label %123

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %11, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 9
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %32, %34
  br i1 %35, label %36, label %123

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 18
  store %struct.avifImage* %11, %struct.avifImage** %37, align 8
  %38 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %11, i64 0, i32 18
  %39 = load i32, i32* %38, align 8
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = bitcast %struct.avifImage* %11 to i8*
  br i1 %41, label %123, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 13
  %45 = load i8, i8* %44, align 4, !range !4
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %123

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17
  %49 = bitcast %struct.avifImage* %48 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %42, i64 200, i1 false) #15
  %50 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %51 = bitcast %"class.blink::IntSize"* %50 to i64*
  %52 = load i64, i64* %51, align 4
  %53 = trunc i64 %52 to i32
  %54 = lshr i64 %52, 32
  %55 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %48, i64 0, i32 0
  store i32 %53, i32* %55, align 8
  %56 = trunc i64 %54 to i32
  %57 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 1
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = add i32 %59, 7
  %61 = lshr i32 %60, 3
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 16
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 7, i64 0
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = mul nsw i64 %68, %65
  %70 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 15
  %71 = load i32, i32* %70, align 8
  %72 = sext i32 %71 to i64
  %73 = mul nsw i64 %72, %62
  %74 = add i64 %73, %69
  %75 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 6, i64 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %74
  store i8* %77, i8** %75, align 8
  %78 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 4
  br i1 %80, label %111, label %81

81:                                               ; preds = %47
  %82 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 7
  %83 = load i8, i8* %82, align 2
  %84 = zext i8 %83 to i32
  %85 = add nsw i32 %71, %84
  %86 = ashr i32 %85, %84
  %87 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 8
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = add nsw i32 %64, %89
  %91 = ashr i32 %90, %89
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 7, i64 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = mul nsw i64 %92, %95
  %97 = sext i32 %86 to i64
  %98 = mul nsw i64 %97, %62
  %99 = add i64 %96, %98
  %100 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 6, i64 1
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %99
  store i8* %102, i8** %100, align 8
  %103 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 7, i64 2
  %104 = load i32, i32* %103, align 8
  %105 = zext i32 %104 to i64
  %106 = mul nsw i64 %105, %92
  %107 = add i64 %106, %98
  %108 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 6, i64 2
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 %107
  store i8* %110, i8** %108, align 8
  br label %111

111:                                              ; preds = %81, %47
  %112 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 10
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %122, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 11
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %117 to i64
  %119 = mul nsw i64 %118, %65
  %120 = add i64 %119, %73
  %121 = getelementptr inbounds i8, i8* %113, i64 %120
  store i8* %121, i8** %112, align 8
  br label %122

122:                                              ; preds = %111, %115
  store %struct.avifImage* %48, %struct.avifImage** %37, align 8
  br label %123

123:                                              ; preds = %17, %8, %23, %30, %43, %36, %122, %2
  %124 = phi i32 [ %6, %2 ], [ 1, %17 ], [ 1, %8 ], [ 1, %23 ], [ 1, %30 ], [ 0, %43 ], [ 0, %36 ], [ 0, %122 ]
  ret i32 %124
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12ImageDecoder9SetFailedEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 15
  store i8 1, i8* %2, align 2
  ret i1 false
}

declare i64 @_ZNK5blink11ImagePlanes8RowBytesEN2cc8YUVIndexE(%"class.blink::ImagePlanes"*, i32) local_unnamed_addr #4

declare i8* @_ZN5blink11ImagePlanes5PlaneEN2cc8YUVIndexE(%"class.blink::ImagePlanes"*, i32) local_unnamed_addr #4

declare void @CopyPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #4

declare i32 @HalfFloatPlane(i16*, i32, i16*, i32, float, i32, i32) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink16AVIFImageDecoder15RepetitionCountEv(%"class.blink::AVIFImageDecoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 11
  %3 = load i64, i64* %2, align 8
  %4 = icmp ugt i64 %3, 1
  %5 = select i1 %4, i32 -1, i32 -2
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16AVIFImageDecoder22FrameIsReceivedAtIndexEm(%"class.blink::AVIFImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %struct.avifExtent, align 8
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  %6 = load i8, i8* %5, align 2, !range !4
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %53

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 13
  %10 = load i8, i8* %9, align 4, !range !4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %53, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 11
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = tail call zeroext i1 @_ZNK5blink12ImageDecoder22FrameIsReceivedAtIndexEm(%"class.blink::ImageDecoder"* %4, i64 %1) #15
  br label %53

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i64 %21, %1
  br i1 %22, label %23, label %53

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 14
  %25 = load i8, i8* %24, align 1, !range !4
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %53

27:                                               ; preds = %23
  %28 = bitcast %struct.avifExtent* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #15
  %29 = getelementptr inbounds %struct.avifExtent, %struct.avifExtent* %3, i64 0, i32 0
  %30 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %31 = bitcast %struct.avifExtent* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 16, i1 false)
  %32 = load %struct.avifDecoder*, %struct.avifDecoder** %30, align 8
  %33 = trunc i64 %1 to i32
  %34 = call i32 @avifDecoderNthImageMaxExtent(%struct.avifDecoder* %32, i32 %33, %struct.avifExtent* nonnull %3) #15
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %51

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.avifExtent, %struct.avifExtent* %3, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %36
  %41 = load i64, i64* %29, align 8
  %42 = add i64 %41, %38
  %43 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  %44 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %43, align 8
  %45 = bitcast %"class.blink::SegmentReader"* %44 to i64 (%"class.blink::SegmentReader"*)***
  %46 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %45, align 8
  %47 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %46, i64 2
  %48 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %47, align 8
  %49 = call i64 %48(%"class.blink::SegmentReader"* %44) #15
  %50 = icmp ule i64 %42, %49
  br label %51

51:                                               ; preds = %36, %40, %27
  %52 = phi i1 [ false, %27 ], [ true, %36 ], [ %50, %40 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #15
  br label %53

53:                                               ; preds = %23, %8, %2, %18, %51, %16
  %54 = phi i1 [ %17, %16 ], [ %52, %51 ], [ false, %8 ], [ false, %18 ], [ true, %23 ], [ false, %2 ]
  ret i1 %54
}

declare zeroext i1 @_ZNK5blink12ImageDecoder22FrameIsReceivedAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #4

declare i32 @avifDecoderNthImageMaxExtent(%struct.avifDecoder*, i32, %struct.avifExtent*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink16AVIFImageDecoder20FrameDurationAtIndexEm(%"class.blink::AVIFImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = icmp ugt i64 %5, %1
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2
  %9 = trunc i64 %1 to i32
  %10 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZNK3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 %9) #15
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %10, i64 0, i32 6, i32 0
  %12 = load i64, i64* %11, align 8
  br label %13

13:                                               ; preds = %2, %7
  %14 = phi i64 [ %12, %7 ], [ 0, %2 ]
  ret i64 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16AVIFImageDecoder37ImageHasBothStillAndAnimatedSubImagesEv(%"class.blink::AVIFImageDecoder"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.blink::FastSharedBufferReader", align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 11
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1
  br i1 %7, label %50, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %9, align 8
  %11 = bitcast %"class.blink::SegmentReader"* %10 to i64 (%"class.blink::SegmentReader"*)***
  %12 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %11, align 8
  %13 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %12, i64 2
  %14 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %13, align 8
  %15 = tail call i64 %14(%"class.blink::SegmentReader"* %10) #15
  %16 = icmp ult i64 %15, 12
  br i1 %16, label %50, label %17

17:                                               ; preds = %8
  %18 = bitcast %"class.blink::FastSharedBufferReader"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #15
  %19 = getelementptr inbounds %"class.blink::FastSharedBufferReader", %"class.blink::FastSharedBufferReader"* %3, i64 0, i32 0, i32 0
  %20 = bitcast %"class.blink::FastSharedBufferReader"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 32, i1 false)
  %21 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %9, align 8
  %22 = icmp eq %"class.blink::SegmentReader"* %21, null
  br i1 %22, label %30, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %21, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0)) #15
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #15
  br label %30

30:                                               ; preds = %17, %23, %27
  call void @_ZN5blink22FastSharedBufferReaderC1E13scoped_refptrINS_13SegmentReaderEE(%"class.blink::FastSharedBufferReader"* nonnull %3, %"class.blink::SegmentReader"* %21) #15
  %31 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #15
  store i32 -1431655766, i32* %4, align 4
  %32 = call i8* @_ZNK5blink22FastSharedBufferReader18GetConsecutiveDataEmmPc(%"class.blink::FastSharedBufferReader"* nonnull %3, i64 8, i64 4, i8* nonnull %31) #15
  %33 = call i32 @bcmp(i8* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4)
  %34 = icmp eq i32 %33, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #15
  %35 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %19, align 8
  %36 = icmp eq %"class.blink::SegmentReader"* %35, null
  br i1 %36, label %49, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %35, i64 0, i32 1, i32 0
  %39 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw sub i32* %39, i32 1 acq_rel
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %49

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %38, i64 -2
  %44 = bitcast %"class.base::RefCountedThreadSafe"* %43 to %"class.blink::SegmentReader"*
  %45 = bitcast %"class.base::RefCountedThreadSafe"* %43 to void (%"class.blink::SegmentReader"*)***
  %46 = load void (%"class.blink::SegmentReader"*)**, void (%"class.blink::SegmentReader"*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %46, i64 1
  %48 = load void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %47, align 8
  call void %48(%"class.blink::SegmentReader"* nonnull %44) #15
  br label %49

49:                                               ; preds = %30, %37, %42
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #15
  br label %50

50:                                               ; preds = %49, %8, %1
  %51 = phi i1 [ true, %1 ], [ %34, %49 ], [ false, %8 ]
  ret i1 %51
}

declare void @_ZN5blink22FastSharedBufferReaderC1E13scoped_refptrINS_13SegmentReaderEE(%"class.blink::FastSharedBufferReader"*, %"class.blink::SegmentReader"*) unnamed_addr #4

declare i8* @_ZNK5blink22FastSharedBufferReader18GetConsecutiveDataEmmPc(%"class.blink::FastSharedBufferReader"*, i64, i64, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink16AVIFImageDecoder20MatchesAVIFSignatureERKNS_22FastSharedBufferReaderE(%"class.blink::FastSharedBufferReader"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %2 = alloca [144 x i8], align 16
  %3 = alloca %struct.avifROData, align 8
  %4 = getelementptr inbounds [144 x i8], [144 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %4) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 144, i1 false)
  %5 = bitcast %struct.avifROData* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #15
  %6 = getelementptr inbounds %struct.avifROData, %struct.avifROData* %3, i64 0, i32 0
  %7 = getelementptr inbounds %struct.avifROData, %struct.avifROData* %3, i64 0, i32 1
  %8 = getelementptr inbounds %"class.blink::FastSharedBufferReader", %"class.blink::FastSharedBufferReader"* %0, i64 0, i32 0, i32 0
  %9 = bitcast %struct.avifROData* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %8, align 8
  %11 = bitcast %"class.blink::SegmentReader"* %10 to i64 (%"class.blink::SegmentReader"*)***
  %12 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %11, align 8
  %13 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %12, i64 2
  %14 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %13, align 8
  %15 = tail call i64 %14(%"class.blink::SegmentReader"* %10) #15
  %16 = icmp ult i64 %15, 144
  %17 = select i1 %16, i64 %15, i64 144
  store i64 %17, i64* %7, align 8
  %18 = call i8* @_ZNK5blink22FastSharedBufferReader18GetConsecutiveDataEmmPc(%"class.blink::FastSharedBufferReader"* %0, i64 0, i64 %17, i8* nonnull %4) #15
  store i8* %18, i8** %6, align 8
  %19 = call i32 @avifPeekCompatibleFileType(%struct.avifROData* nonnull %3) #15
  %20 = icmp ne i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %4) #15
  ret i1 %20
}

declare i32 @avifPeekCompatibleFileType(%struct.avifROData*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gfx::ColorTransform"* @_ZN5blink16AVIFImageDecoder27GetColorTransformForTestingEv(%"class.blink::AVIFImageDecoder"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.gfx::ColorSpace", align 4
  %3 = alloca %"class.gfx::ColorSpace", align 4
  %4 = alloca %"class.gfx::ColorSpace", align 4
  %5 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %7 = load %struct.avifDecoder*, %struct.avifDecoder** %6, align 8
  %8 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %7, i64 0, i32 3
  %9 = load %struct.avifImage*, %struct.avifImage** %8, align 8
  call fastcc void @_ZN12_GLOBAL__N_113GetColorSpaceEPK9avifImage(%"class.gfx::ColorSpace"* nonnull sret %4, %struct.avifImage* %9)
  %10 = load %struct.avifDecoder*, %struct.avifDecoder** %6, align 8
  %11 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %10, i64 0, i32 3
  %12 = load %struct.avifImage*, %struct.avifImage** %11, align 8
  %13 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %12, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %16, align 8
  %18 = icmp eq %"class.gfx::ColorTransform"* %17, null
  %19 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %19) #15
  br i1 %18, label %26, label %20

20:                                               ; preds = %1
  %21 = bitcast %"class.gfx::ColorTransform"* %17 to void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)***
  %22 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %22, i64 2
  %24 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %23, align 8
  call void %24(%"class.gfx::ColorSpace"* nonnull sret %2, %"class.gfx::ColorTransform"* nonnull %17) #15
  %25 = call zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"* nonnull %2, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %4) #15
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %19) #15
  br i1 %25, label %40, label %27

26:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %19) #15
  br label %27

27:                                               ; preds = %26, %20
  %28 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %28) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %28, i8 0, i64 68, i1 false) #15
  %29 = call %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* nonnull dereferenceable(68) %4, i32 %14, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %3, i32 %14, i32 1) #15
  %30 = ptrtoint %"class.gfx::ColorTransform"* %29 to i64
  %31 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %16, align 8
  %32 = bitcast %"class.std::__1::unique_ptr.34"* %15 to i64*
  store i64 %30, i64* %32, align 8
  %33 = icmp eq %"class.gfx::ColorTransform"* %31, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %27
  %35 = bitcast %"class.gfx::ColorTransform"* %31 to void (%"class.gfx::ColorTransform"*)***
  %36 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %36, i64 1
  %38 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %37, align 8
  call void %38(%"class.gfx::ColorTransform"* nonnull %31) #15
  br label %39

39:                                               ; preds = %34, %27
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %28) #15
  br label %40

40:                                               ; preds = %20, %39
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %5) #15
  %41 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %16, align 8
  ret %"class.gfx::ColorTransform"* %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder20UpdateColorTransformERKN3gfx10ColorSpaceEi(%"class.blink::AVIFImageDecoder"* nocapture, %"class.gfx::ColorSpace"* dereferenceable(68), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::ColorSpace", align 4
  %5 = alloca %"class.gfx::ColorSpace", align 4
  %6 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %7, align 8
  %9 = icmp eq %"class.gfx::ColorTransform"* %8, null
  %10 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %10) #15
  br i1 %9, label %17, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.gfx::ColorTransform"* %8 to void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)***
  %13 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %13, i64 2
  %15 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %14, align 8
  call void %15(%"class.gfx::ColorSpace"* nonnull sret %4, %"class.gfx::ColorTransform"* nonnull %8) #15
  %16 = call zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"* nonnull %4, %"class.gfx::ColorSpace"* dereferenceable(68) %1) #15
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %10) #15
  br i1 %16, label %31, label %18

17:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %10) #15
  br label %18

18:                                               ; preds = %17, %11
  %19 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %19) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 68, i1 false) #15
  %20 = call %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* dereferenceable(68) %1, i32 %2, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %5, i32 %2, i32 1) #15
  %21 = ptrtoint %"class.gfx::ColorTransform"* %20 to i64
  %22 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %7, align 8
  %23 = bitcast %"class.std::__1::unique_ptr.34"* %6 to i64*
  store i64 %21, i64* %23, align 8
  %24 = icmp eq %"class.gfx::ColorTransform"* %22, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = bitcast %"class.gfx::ColorTransform"* %22 to void (%"class.gfx::ColorTransform"*)***
  %27 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %27, i64 1
  %29 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %28, align 8
  call void %29(%"class.gfx::ColorTransform"* nonnull %22) #15
  br label %30

30:                                               ; preds = %25, %18
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %19) #15
  br label %31

31:                                               ; preds = %11, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_113GetColorSpaceEPK9avifImage(%"class.gfx::ColorSpace"* noalias sret, %struct.avifImage* nocapture readonly) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to %"class.media::VideoColorSpace"*
  %5 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 15
  %6 = load i16, i16* %5, align 8
  %7 = icmp eq i16 %6, 2
  %8 = select i1 %7, i16 1, i16 %6
  %9 = zext i16 %8 to i32
  %10 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 16
  %11 = load i16, i16* %10, align 2
  %12 = icmp eq i16 %11, 2
  %13 = select i1 %12, i16 13, i16 %11
  %14 = zext i16 %13 to i32
  %15 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 17
  %16 = load i16, i16* %15, align 4
  %17 = icmp eq i16 %16, 2
  %18 = select i1 %17, i16 6, i16 %16
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 1
  %23 = select i1 %22, i8 2, i8 1
  %24 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #15
  store i32 -1431655766, i32* %3, align 4
  call void @_ZN5media15VideoColorSpaceC1EiiiN3gfx10ColorSpace7RangeIDE(%"class.media::VideoColorSpace"* nonnull %4, i32 %9, i32 %14, i32 %19, i8 zeroext %23) #15
  %25 = call zeroext i1 @_ZNK5media15VideoColorSpace11IsSpecifiedEv(%"class.media::VideoColorSpace"* nonnull %4) #15
  br i1 %25, label %26, label %27

26:                                               ; preds = %2
  call void @_ZNK5media15VideoColorSpace15ToGfxColorSpaceEv(%"class.gfx::ColorSpace"* sret %0, %"class.media::VideoColorSpace"* nonnull %4) #15
  br label %42

27:                                               ; preds = %2
  %28 = load i32, i32* %20, align 8
  %29 = icmp eq i32 %28, 1
  %30 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 0
  store i8 1, i8* %30, align 4
  %31 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 1
  br i1 %29, label %32, label %37

32:                                               ; preds = %27
  store i8 14, i8* %31, align 1, !alias.scope !13
  %33 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 2
  store i8 5, i8* %33, align 2, !alias.scope !13
  %34 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 3
  store i8 2, i8* %34, align 1, !alias.scope !13
  %35 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 4
  %36 = bitcast [9 x float]* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %36, i8 0, i64 64, i1 false) #15, !alias.scope !13
  br label %42

37:                                               ; preds = %27
  store i8 1, i8* %31, align 1, !alias.scope !16
  %38 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 2
  store i8 2, i8* %38, align 2, !alias.scope !16
  %39 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 3
  store i8 1, i8* %39, align 1, !alias.scope !16
  %40 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 4
  %41 = bitcast [9 x float]* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 64, i1 false) #15, !alias.scope !16
  br label %42

42:                                               ; preds = %37, %32, %26
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink16AVIFImageDecoder30ValidateClapPropertyForTestingEPK9avifImageRiS4_S4_S4_(%struct.avifImage* nocapture readonly, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) local_unnamed_addr #5 align 2 {
  %6 = tail call fastcc zeroext i1 @_ZN12_GLOBAL__N_120ValidateClapPropertyEPK9avifImageRiS3_S3_S3_(%struct.avifImage* %0, i32* dereferenceable(4) %1, i32* dereferenceable(4) %2, i32* dereferenceable(4) %3, i32* dereferenceable(4) %4)
  ret i1 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_120ValidateClapPropertyEPK9avifImageRiS3_S3_S3_(%struct.avifImage* nocapture readonly, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) unnamed_addr #5 {
  %6 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %9, 1
  %23 = icmp slt i32 %13, 1
  %24 = or i1 %22, %23
  %25 = icmp slt i32 %17, 1
  %26 = or i1 %24, %25
  %27 = icmp slt i32 %21, 1
  %28 = or i1 %26, %27
  br i1 %28, label %133, label %29

29:                                               ; preds = %5
  %30 = icmp slt i32 %7, 1
  %31 = icmp slt i32 %11, 1
  %32 = or i1 %30, %31
  br i1 %32, label %133, label %33

33:                                               ; preds = %29
  %34 = urem i32 %7, %9
  %35 = udiv i32 %7, %9
  %36 = icmp eq i32 %34, 0
  br i1 %36, label %37, label %133

37:                                               ; preds = %33
  %38 = urem i32 %11, %13
  %39 = udiv i32 %11, %13
  %40 = icmp eq i32 %38, 0
  br i1 %40, label %41, label %133

41:                                               ; preds = %37
  store i32 %35, i32* %1, align 4
  store i32 %39, i32* %2, align 4
  %42 = srem i32 %15, %17
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %53, label %44

44:                                               ; preds = %41
  %45 = and i32 %17, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %133

47:                                               ; preds = %44
  %48 = lshr i32 %17, 1
  %49 = icmp eq i32 %42, %48
  %50 = sub nsw i32 0, %48
  %51 = icmp eq i32 %42, %50
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %133

53:                                               ; preds = %41, %47
  %54 = srem i32 %19, %21
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %65, label %56

56:                                               ; preds = %53
  %57 = and i32 %21, 1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %133

59:                                               ; preds = %56
  %60 = lshr i32 %21, 1
  %61 = icmp eq i32 %54, %60
  %62 = sub nsw i32 0, %60
  %63 = icmp eq i32 %54, %62
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %133

65:                                               ; preds = %53, %59
  %66 = sext i32 %15 to i64
  %67 = shl nsw i64 %66, 1
  %68 = sext i32 %17 to i64
  %69 = sdiv i64 %67, %68
  %70 = sext i32 %19 to i64
  %71 = shl nsw i64 %70, 1
  %72 = sext i32 %21 to i64
  %73 = sdiv i64 %71, %72
  %74 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %133, label %77

77:                                               ; preds = %65
  %78 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %133, label %81

81:                                               ; preds = %77
  %82 = add nsw i32 %75, -1
  %83 = sext i32 %82 to i64
  %84 = add nsw i64 %69, %83
  %85 = add nsw i32 %79, -1
  %86 = sext i32 %85 to i64
  %87 = add nsw i64 %73, %86
  %88 = load i32, i32* %1, align 4
  %89 = add nsw i32 %88, -1
  %90 = sext i32 %89 to i64
  %91 = sub nsw i64 %84, %90
  %92 = icmp slt i64 %91, 0
  br i1 %92, label %133, label %93

93:                                               ; preds = %81
  %94 = add nsw i64 %84, %90
  %95 = shl nsw i32 %82, 1
  %96 = sext i32 %95 to i64
  %97 = icmp sgt i64 %94, %96
  br i1 %97, label %133, label %98

98:                                               ; preds = %93
  %99 = add nsw i32 %39, -1
  %100 = sext i32 %99 to i64
  %101 = sub nsw i64 %87, %100
  %102 = icmp slt i64 %101, 0
  br i1 %102, label %133, label %103

103:                                              ; preds = %98
  %104 = add nsw i64 %87, %100
  %105 = shl nsw i32 %85, 1
  %106 = sext i32 %105 to i64
  %107 = icmp sle i64 %104, %106
  %108 = and i64 %91, 1
  %109 = icmp eq i64 %108, 0
  %110 = and i1 %107, %109
  br i1 %110, label %111, label %133

111:                                              ; preds = %103
  %112 = lshr i64 %91, 1
  %113 = trunc i64 %112 to i32
  store i32 %113, i32* %3, align 4
  %114 = and i64 %101, 1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %133

116:                                              ; preds = %111
  %117 = lshr i64 %101, 1
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %4, align 4
  %119 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = and i32 %120, -2
  %122 = icmp eq i32 %121, 2
  br i1 %122, label %123, label %132

123:                                              ; preds = %116
  %124 = load i32, i32* %3, align 4
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %133

127:                                              ; preds = %123
  %128 = icmp ne i32 %120, 3
  %129 = and i32 %118, 1
  %130 = icmp eq i32 %129, 0
  %131 = or i1 %130, %128
  br i1 %131, label %132, label %133

132:                                              ; preds = %127, %116
  br label %133

133:                                              ; preds = %127, %56, %44, %103, %77, %65, %132, %98, %111, %123, %81, %93, %47, %59, %33, %37, %29, %5
  %134 = phi i1 [ false, %5 ], [ false, %29 ], [ false, %37 ], [ false, %33 ], [ false, %59 ], [ false, %47 ], [ false, %77 ], [ false, %65 ], [ false, %93 ], [ false, %81 ], [ true, %132 ], [ false, %103 ], [ false, %98 ], [ false, %111 ], [ false, %123 ], [ false, %44 ], [ false, %56 ], [ false, %127 ]
  ret i1 %134
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink16AVIFImageDecoder13UpdateDemuxerEv(%"class.blink::AVIFImageDecoder"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.avifPixelFormatInfo, align 4
  %3 = alloca %"class.gfx::ColorSpace", align 4
  %4 = alloca %class.sk_sp.1, align 8
  %5 = alloca %"class.gfx::ColorSpace", align 4
  %6 = alloca %struct.skcms_ICCProfile, align 8
  %7 = alloca %"class.gfx::ColorSpace", align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  %12 = load i8, i8* %11, align 2, !range !4
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 13
  %16 = load i8, i8* %15, align 4, !range !4
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %306

18:                                               ; preds = %14, %1
  %19 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 1
  %20 = load i8, i8* %19, align 8, !range !4
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %306

22:                                               ; preds = %18
  store i8 1, i8* %19, align 8
  %23 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %26 = icmp eq %struct.avifDecoder* %25, null
  br i1 %26, label %27, label %72

27:                                               ; preds = %22
  %28 = tail call %struct.avifDecoder* @avifDecoderCreate() #15
  %29 = ptrtoint %struct.avifDecoder* %28 to i64
  %30 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %31 = bitcast %"class.std::__1::unique_ptr.28"* %23 to i64*
  store i64 %29, i64* %31, align 8
  %32 = icmp eq %struct.avifDecoder* %30, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 1, i32 0
  %35 = load void (%struct.avifDecoder*)*, void (%struct.avifDecoder*)** %34, align 8
  tail call void %35(%struct.avifDecoder* nonnull %30) #15
  %36 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  br label %37

37:                                               ; preds = %33, %27
  %38 = phi %struct.avifDecoder* [ %36, %33 ], [ %28, %27 ]
  %39 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 1, i32 0
  %40 = bitcast void (%struct.avifDecoder*)** %39 to i64*
  store i64 ptrtoint (void (%struct.avifDecoder*)* @avifDecoderDestroy to i64), i64* %40, align 8
  %41 = icmp eq %struct.avifDecoder* %38, null
  br i1 %41, label %306, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %38, i64 0, i32 1
  store i32 2, i32* %43, align 4
  %44 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 23
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %42
  %48 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %49 = icmp eq i32 %45, 1
  %50 = select i1 %49, i32 2, i32 1
  %51 = tail call i32 @avifDecoderSetSource(%struct.avifDecoder* %48, i32 %50) #15
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %306

53:                                               ; preds = %47, %42
  %54 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %55 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %54, i64 0, i32 12
  store i32 1, i32* %55, align 8
  %56 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %57 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %56, i64 0, i32 11
  store i32 1, i32* %57, align 4
  %58 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %59 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %58, i64 0, i32 14
  %60 = load i32, i32* %59, align 8
  %61 = and i32 %60, -3
  store i32 %61, i32* %59, align 8
  %62 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20
  %63 = getelementptr inbounds %struct.avifIO, %struct.avifIO* %62, i64 0, i32 0
  store void (%struct.avifIO*)* null, void (%struct.avifIO*)** %63, align 8
  %64 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 1
  store i32 (%struct.avifIO*, i32, i64, i64, %struct.avifROData*)* @_ZN5blink16AVIFImageDecoder21ReadFromSegmentReaderEP6avifIOjmmP10avifROData, i32 (%struct.avifIO*, i32, i64, i64, %struct.avifROData*)** %64, align 8
  %65 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 2
  store i32 (%struct.avifIO*, i32, i64, i8*, i64)* null, i32 (%struct.avifIO*, i32, i64, i8*, i64)** %65, align 8
  %66 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 4
  store i32 0, i32* %66, align 8
  %67 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 21
  %68 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 20, i32 5
  %69 = bitcast i8** %68 to %"struct.blink::AVIFImageDecoder::AvifIOData"**
  store %"struct.blink::AVIFImageDecoder::AvifIOData"* %67, %"struct.blink::AVIFImageDecoder::AvifIOData"** %69, align 8
  %70 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  tail call void @avifDecoderSetIO(%struct.avifDecoder* %70, %struct.avifIO* %62) #15
  %71 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  br label %72

72:                                               ; preds = %22, %53
  %73 = phi %struct.avifDecoder* [ %25, %22 ], [ %71, %53 ]
  %74 = tail call i32 @avifDecoderParse(%struct.avifDecoder* %73) #15
  switch i32 %74, label %75 [
    i32 23, label %306
    i32 0, label %76
  ]

75:                                               ; preds = %72
  br label %306

76:                                               ; preds = %72
  %77 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %78 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %77, i64 0, i32 3
  %79 = load %struct.avifImage*, %struct.avifImage** %78, align 8
  %80 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %306, label %83

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %306, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 2
  %89 = load i32, i32* %88, align 8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %306, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %77, i64 0, i32 5
  %93 = load i32, i32* %92, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 11
  store i64 %94, i64* %95, align 8
  %96 = load i32, i32* %80, align 8
  %97 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 3
  store i32 %96, i32* %97, align 4
  %98 = load i32, i32* %84, align 4
  %99 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 4
  store i32 %98, i32* %99, align 8
  %100 = load i32, i32* %88, align 8
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  store i8 %101, i8* %102, align 4
  %103 = icmp ugt i8 %101, 8
  br i1 %103, label %104, label %108

104:                                              ; preds = %91
  %105 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 4
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 1
  br label %108

108:                                              ; preds = %104, %91
  %109 = phi i1 [ false, %91 ], [ %107, %104 ]
  %110 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 6
  %111 = zext i1 %109 to i8
  store i8 %111, i8* %110, align 1
  %112 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 3
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 9
  store i32 %113, i32* %114, align 8
  %115 = bitcast %struct.avifPixelFormatInfo* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %115) #15
  %116 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %2, i64 0, i32 0
  store i32 -1431655766, i32* %116, align 4
  %117 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %2, i64 0, i32 1
  store i32 -1431655766, i32* %117, align 4
  %118 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %2, i64 0, i32 2
  store i32 -1431655766, i32* %118, align 4
  %119 = load i32, i32* %112, align 4
  call void @avifGetPixelFormatInfo(i32 %119, %struct.avifPixelFormatInfo* nonnull %2) #15
  %120 = load i32, i32* %117, align 4
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 7
  store i8 %121, i8* %122, align 2
  %123 = load i32, i32* %118, align 4
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 8
  store i8 %124, i8* %125, align 1
  %126 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 5, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %187, label %129

129:                                              ; preds = %108
  %130 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 14, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %161, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 14, i32 0
  %135 = load i8*, i8** %134, align 8
  %136 = call %"class.blink::ColorProfile"* @_ZN5blink12ColorProfile6CreateEPKvm(i8* %135, i64 %131) #15
  %137 = icmp eq %"class.blink::ColorProfile"* %136, null
  br i1 %137, label %304, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %136, i64 0, i32 0, i32 2
  %140 = load i32, i32* %139, align 4
  %141 = load i32, i32* %112, align 4
  %142 = icmp eq i32 %141, 4
  br i1 %142, label %143, label %151

143:                                              ; preds = %138
  switch i32 %140, label %144 [
    i32 1380401696, label %160
    i32 1196573017, label %160
  ]

144:                                              ; preds = %143
  %145 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %136, i64 0, i32 1, i32 0, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  store i8* null, i8** %145, align 8
  %147 = icmp eq i8* %146, null
  br i1 %147, label %149, label %148

148:                                              ; preds = %144
  call void @_ZdaPv(i8* nonnull %146) #16
  br label %149

149:                                              ; preds = %144, %148
  %150 = bitcast %"class.blink::ColorProfile"* %136 to i8*
  call void @free(i8* %150) #15
  br label %304

151:                                              ; preds = %138
  %152 = icmp eq i32 %140, 1380401696
  br i1 %152, label %160, label %153

153:                                              ; preds = %151
  %154 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %136, i64 0, i32 1, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  store i8* null, i8** %154, align 8
  %156 = icmp eq i8* %155, null
  br i1 %156, label %158, label %157

157:                                              ; preds = %153
  call void @_ZdaPv(i8* nonnull %155) #16
  br label %158

158:                                              ; preds = %153, %157
  %159 = bitcast %"class.blink::ColorProfile"* %136 to i8*
  call void @free(i8* %159) #15
  br label %304

160:                                              ; preds = %151, %143, %143
  call void @_ZN5blink12ImageDecoder23SetEmbeddedColorProfileENSt3__110unique_ptrINS_12ColorProfileENS1_14default_deleteIS3_EEEE(%"class.blink::ImageDecoder"* %10, %"class.blink::ColorProfile"* nonnull %136) #15
  br label %187

161:                                              ; preds = %129
  %162 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 15
  %163 = load i16, i16* %162, align 8
  %164 = icmp eq i16 %163, 2
  br i1 %164, label %165, label %169

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 16
  %167 = load i16, i16* %166, align 2
  %168 = icmp eq i16 %167, 2
  br i1 %168, label %187, label %169

169:                                              ; preds = %165, %161
  %170 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %170) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %170, i8* align 4 getelementptr inbounds (%"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* @__const._ZN5blink16AVIFImageDecoder11RenderImageEPK9avifImagePNS_10ImageFrameE.frame_cs, i64 0, i32 0), i64 68, i1 false)
  call fastcc void @_ZN12_GLOBAL__N_113GetColorSpaceEPK9avifImage(%"class.gfx::ColorSpace"* nonnull sret %3, %struct.avifImage* %79)
  %171 = bitcast %class.sk_sp.1* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %171) #15
  %172 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %4, i64 0, i32 0
  store %class.SkColorSpace* inttoptr (i64 -6148914691236517206 to %class.SkColorSpace*), %class.SkColorSpace** %172, align 8
  %173 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %173) #15
  call void @_ZNK3gfx10ColorSpace17GetAsFullRangeRGBEv(%"class.gfx::ColorSpace"* nonnull sret %5, %"class.gfx::ColorSpace"* nonnull %3) #15
  call void @_ZNK3gfx10ColorSpace14ToSkColorSpaceEv(%class.sk_sp.1* nonnull sret %4, %"class.gfx::ColorSpace"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %173) #15
  %174 = bitcast %struct.skcms_ICCProfile* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %174) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %174, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN5blink16AVIFImageDecoder13UpdateDemuxerEv.profile to i8*), i64 1008, i1 false)
  %175 = load %class.SkColorSpace*, %class.SkColorSpace** %172, align 8
  call void @_ZNK12SkColorSpace9toProfileEP16skcms_ICCProfile(%class.SkColorSpace* %175, %struct.skcms_ICCProfile* nonnull %6) #15
  %176 = call noalias i8* @malloc(i64 1016) #15
  %177 = bitcast i8* %176 to %"class.blink::ColorProfile"*
  call void @_ZN5blink12ColorProfileC1ERK16skcms_ICCProfileNSt3__110unique_ptrIA_hNS4_14default_deleteIS6_EEEE(%"class.blink::ColorProfile"* %177, %struct.skcms_ICCProfile* nonnull dereferenceable(1008) %6, i8* null) #15
  call void @_ZN5blink12ImageDecoder23SetEmbeddedColorProfileENSt3__110unique_ptrINS_12ColorProfileENS1_14default_deleteIS3_EEEE(%"class.blink::ImageDecoder"* %10, %"class.blink::ColorProfile"* %177) #15
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %174) #15
  %178 = load %class.SkColorSpace*, %class.SkColorSpace** %172, align 8
  %179 = icmp eq %class.SkColorSpace* %178, null
  br i1 %179, label %186, label %180

180:                                              ; preds = %169
  %181 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %178, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = atomicrmw add i32* %181, i32 -1 acq_rel
  %183 = icmp eq i32 %182, 1
  br i1 %183, label %184, label %186

184:                                              ; preds = %180
  %185 = bitcast %class.SkColorSpace* %178 to i8*
  call void @_ZdlPv(i8* %185) #16
  br label %186

186:                                              ; preds = %169, %180, %184
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %171) #15
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %170) #15
  br label %187

187:                                              ; preds = %160, %165, %186, %108
  %188 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 18
  %189 = load i32, i32* %188, align 8
  %190 = and i32 %189, 4
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %196, label %192

192:                                              ; preds = %187
  %193 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 21, i32 0
  %194 = load i8, i8* %193, align 4
  %195 = zext i8 %194 to i64
  br label %196

196:                                              ; preds = %187, %192
  %197 = phi i64 [ %195, %192 ], [ 0, %187 ]
  %198 = and i32 %189, 8
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %205, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %79, i64 0, i32 22, i32 0
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = add nuw nsw i64 %203, 1
  br label %205

205:                                              ; preds = %196, %200
  %206 = phi i64 [ %204, %200 ], [ 0, %196 ]
  %207 = getelementptr inbounds [3 x [4 x i8]], [3 x [4 x i8]]* @_ZZN5blink16AVIFImageDecoder13UpdateDemuxerEvE23kAxisAngleToOrientation, i64 0, i64 %206, i64 %197
  %208 = load i8, i8* %207, align 1
  %209 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 6, i32 0
  store i8 %208, i8* %209, align 4
  %210 = load i32, i32* %114, align 8
  %211 = icmp eq i32 %210, 4
  %212 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %212) #15
  br i1 %211, label %229, label %213

213:                                              ; preds = %205
  %214 = load %struct.avifDecoder*, %struct.avifDecoder** %24, align 8
  %215 = getelementptr inbounds %struct.avifDecoder, %struct.avifDecoder* %214, i64 0, i32 10
  %216 = load i32, i32* %215, align 8
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %229

218:                                              ; preds = %213
  %219 = load i64, i64* %95, align 8
  %220 = icmp eq i64 %219, 1
  br i1 %220, label %221, label %229

221:                                              ; preds = %218
  call fastcc void @_ZN12_GLOBAL__N_113GetColorSpaceEPK9avifImage(%"class.gfx::ColorSpace"* nonnull sret %7, %struct.avifImage* %79)
  %222 = load i32, i32* %88, align 8
  %223 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 12
  %224 = call zeroext i1 @_ZNK3gfx10ColorSpace17ToSkYUVColorSpaceEiP15SkYUVColorSpace(%"class.gfx::ColorSpace"* nonnull %7, i32 %222, i32* %223) #15
  br i1 %224, label %225, label %229

225:                                              ; preds = %221
  %226 = call %"class.blink::ColorProfileTransform"* @_ZN5blink12ImageDecoder14ColorTransformEv(%"class.blink::ImageDecoder"* %10) #15
  %227 = icmp eq %"class.blink::ColorProfileTransform"* %226, null
  %228 = zext i1 %227 to i8
  br label %229

229:                                              ; preds = %213, %205, %225, %221, %218
  %230 = phi i8 [ 0, %221 ], [ 0, %218 ], [ 0, %213 ], [ 0, %205 ], [ %228, %225 ]
  %231 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 9
  store i8 %230, i8* %231, align 8
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %212) #15
  %232 = load i32, i32* %80, align 8
  %233 = load i32, i32* %84, align 4
  %234 = load i32, i32* %188, align 8
  %235 = and i32 %234, 2
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %251, label %237

237:                                              ; preds = %229
  %238 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %238) #15
  store i32 -1431655766, i32* %8, align 4
  %239 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %239) #15
  store i32 -1431655766, i32* %9, align 4
  %240 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 15
  %241 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 16
  %242 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_120ValidateClapPropertyEPK9avifImageRiS3_S3_S3_(%struct.avifImage* %79, i32* nonnull dereferenceable(4) %8, i32* nonnull dereferenceable(4) %9, i32* dereferenceable(4) %240, i32* dereferenceable(4) %241)
  br i1 %242, label %245, label %243

243:                                              ; preds = %237
  %244 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 13
  store i8 1, i8* %244, align 4
  br label %248

245:                                              ; preds = %237
  %246 = load i32, i32* %8, align 4
  %247 = load i32, i32* %9, align 4
  br label %248

248:                                              ; preds = %245, %243
  %249 = phi i32 [ %246, %245 ], [ %232, %243 ]
  %250 = phi i32 [ %247, %245 ], [ %233, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %239) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %238) #15
  br label %251

251:                                              ; preds = %229, %248
  %252 = phi i32 [ %249, %248 ], [ %232, %229 ]
  %253 = phi i32 [ %250, %248 ], [ %233, %229 ]
  %254 = bitcast %"class.blink::AVIFImageDecoder"* %0 to i1 (%"class.blink::ImageDecoder"*)***
  %255 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %254, align 8
  %256 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %255, i64 3
  %257 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %256, align 8
  %258 = call zeroext i1 %257(%"class.blink::ImageDecoder"* %10) #15
  br i1 %258, label %259, label %264

259:                                              ; preds = %251
  %260 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 4
  %261 = load i32, i32* %260, align 4
  %262 = icmp eq i32 %261, 1
  %263 = select i1 %262, i32 8, i32 4
  br label %264

264:                                              ; preds = %259, %251
  %265 = phi i32 [ 4, %251 ], [ %263, %259 ]
  %266 = lshr i32 %252, 31
  %267 = icmp eq i32 %266, 1
  br i1 %267, label %291, label %268

268:                                              ; preds = %264
  %269 = icmp slt i32 %252, 0
  %270 = sub i32 0, %252
  %271 = select i1 %269, i32 %270, i32 %252
  %272 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %271, i32 %253) #15
  %273 = extractvalue { i32, i1 } %272, 1
  %274 = extractvalue { i32, i1 } %272, 0
  %275 = add nuw nsw i32 %266, 2147483647
  %276 = icmp ugt i32 %274, %275
  %277 = or i1 %273, %276
  %278 = sub i32 0, %274
  %279 = select i1 %269, i32 %278, i32 %274
  br i1 %277, label %291, label %280

280:                                              ; preds = %268
  %281 = icmp slt i32 %279, 0
  %282 = sub i32 0, %279
  %283 = select i1 %281, i32 %282, i32 %279
  %284 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %283, i32 %265) #15
  %285 = extractvalue { i32, i1 } %284, 1
  %286 = extractvalue { i32, i1 } %284, 0
  %287 = lshr i32 %279, 31
  %288 = add nuw i32 %287, 2147483647
  %289 = icmp ugt i32 %286, %288
  %290 = or i1 %285, %289
  br i1 %290, label %291, label %296

291:                                              ; preds = %280, %268, %264
  %292 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %254, align 8
  %293 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %292, i64 21
  %294 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %293, align 8
  %295 = call zeroext i1 %294(%"class.blink::ImageDecoder"* %10) #15
  br label %304

296:                                              ; preds = %280
  %297 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %298 = bitcast %"class.blink::IntSize"* %297 to i64*
  %299 = zext i32 %253 to i64
  %300 = shl nuw i64 %299, 32
  %301 = zext i32 %252 to i64
  %302 = or i64 %300, %301
  store i64 %302, i64* %298, align 4
  %303 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 13
  store i8 1, i8* %303, align 4
  br label %304

304:                                              ; preds = %133, %296, %291, %158, %149
  %305 = phi i1 [ false, %149 ], [ false, %158 ], [ %295, %291 ], [ true, %296 ], [ false, %133 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %115) #15
  br label %306

306:                                              ; preds = %14, %37, %75, %72, %87, %76, %83, %304, %47, %18
  %307 = phi i1 [ true, %14 ], [ true, %18 ], [ false, %37 ], [ false, %47 ], [ false, %75 ], [ true, %72 ], [ %305, %304 ], [ false, %83 ], [ false, %76 ], [ false, %87 ]
  ret i1 %307
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder10DecodeSizeEv(%"class.blink::AVIFImageDecoder"*) unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZN5blink16AVIFImageDecoder13UpdateDemuxerEv(%"class.blink::AVIFImageDecoder"* %0) #15
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %4, align 2
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5blink16AVIFImageDecoder16DecodeFrameCountEv(%"class.blink::AVIFImageDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  %3 = load i8, i8* %2, align 2, !range !4
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %1
  %6 = tail call zeroext i1 @_ZN5blink16AVIFImageDecoder13UpdateDemuxerEv(%"class.blink::AVIFImageDecoder"* %0) #15
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  store i8 1, i8* %2, align 2
  br label %18

8:                                                ; preds = %5
  %9 = load i8, i8* %2, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 13
  %13 = load i8, i8* %12, align 4, !range !4
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 11
  %17 = load i64, i64* %16, align 8
  br label %22

18:                                               ; preds = %7, %11, %1, %8
  %19 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  br label %22

22:                                               ; preds = %18, %15
  %23 = phi i64 [ %17, %15 ], [ %21, %18 ]
  ret i64 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder18InitializeNewFrameEm(%"class.blink::AVIFImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %struct.avifImageTiming, align 8
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2
  %5 = trunc i64 %1 to i32
  %6 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %5) #15
  %7 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 6
  %8 = load i8, i8* %7, align 1, !range !4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %6, i64 0, i32 3
  store i32 1, i32* %11, align 4
  br label %12

12:                                               ; preds = %2, %10
  %13 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %14 = bitcast %"class.blink::IntSize"* %13 to i64*
  %15 = load i64, i64* %14, align 4
  %16 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %6, i64 0, i32 4
  %17 = bitcast %"class.blink::IntRect"* %16 to i64*
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %6, i64 0, i32 4, i32 1
  %19 = bitcast %"class.blink::IntSize"* %18 to i64*
  store i64 %15, i64* %19, align 8
  %20 = bitcast %struct.avifImageTiming* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #15
  %21 = getelementptr inbounds %struct.avifImageTiming, %struct.avifImageTiming* %3, i64 0, i32 0
  store i64 -6148914691236517206, i64* %21, align 8
  %22 = getelementptr inbounds %struct.avifImageTiming, %struct.avifImageTiming* %3, i64 0, i32 1
  store double 0xFFFFFFFFFFFFFFFF, double* %22, align 8
  %23 = getelementptr inbounds %struct.avifImageTiming, %struct.avifImageTiming* %3, i64 0, i32 2
  store i64 -6148914691236517206, i64* %23, align 8
  %24 = getelementptr inbounds %struct.avifImageTiming, %struct.avifImageTiming* %3, i64 0, i32 3
  store double 0xFFFFFFFFFFFFFFFF, double* %24, align 8
  %25 = getelementptr inbounds %struct.avifImageTiming, %struct.avifImageTiming* %3, i64 0, i32 4
  store i64 -6148914691236517206, i64* %25, align 8
  %26 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %27 = load %struct.avifDecoder*, %struct.avifDecoder** %26, align 8
  %28 = call i32 @avifDecoderNthImageTiming(%struct.avifDecoder* %27, i32 %5, %struct.avifImageTiming* nonnull %3) #15
  %29 = load double, double* %24, align 8
  %30 = fmul double %29, 1.000000e+06
  %31 = fcmp ult double %30, 0xC3E0000000000000
  %32 = fcmp ugt double %30, 0x43DFFFFFFFFFFFFF
  %33 = fcmp ogt double %30, 0xC3E0000000000000
  %34 = select i1 %33, double %30, double 0xC3E0000000000000
  %35 = fptosi double %34 to i64
  %36 = select i1 %31, i64 0, i64 9223372036854775807
  %37 = select i1 %32, i64 %36, i64 %35
  %38 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %6, i64 0, i32 6, i32 0
  store i64 %37, i64* %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #15
  ret void
}

declare i32 @avifDecoderNthImageTiming(%struct.avifDecoder*, i32, %struct.avifImageTiming*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder6DecodeEm(%"class.blink::AVIFImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 15
  %5 = load i8, i8* %4, align 2, !range !4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %2
  tail call void @_ZN5blink12ImageDecoder23UpdateAggressivePurgingEm(%"class.blink::ImageDecoder"* %3, i64 %1) #15
  %8 = tail call i32 @_ZN5blink16AVIFImageDecoder11DecodeImageEm(%"class.blink::AVIFImageDecoder"* %0, i64 %1)
  switch i32 %8, label %9 [
    i32 0, label %10
    i32 23, label %27
  ]

9:                                                ; preds = %7
  store i8 1, i8* %4, align 2
  br label %27

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 18
  %12 = load %struct.avifImage*, %struct.avifImage** %11, align 8
  %13 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 2
  %14 = trunc i64 %1 to i32
  %15 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %13, i32 %14) #15
  %16 = tail call zeroext i1 @_ZN5blink12ImageDecoder15InitFrameBufferEm(%"class.blink::ImageDecoder"* %3, i64 %1) #15
  br i1 %16, label %18, label %17

17:                                               ; preds = %10
  store i8 1, i8* %4, align 2
  br label %27

18:                                               ; preds = %10
  %19 = tail call zeroext i1 @_ZN5blink16AVIFImageDecoder11RenderImageEPK9avifImagePNS_10ImageFrameE(%"class.blink::AVIFImageDecoder"* %0, %struct.avifImage* %12, %"class.blink::ImageFrame"* %15)
  br i1 %19, label %21, label %20

20:                                               ; preds = %18
  store i8 1, i8* %4, align 2
  br label %27

21:                                               ; preds = %18
  tail call void @_ZN5blink16AVIFImageDecoder17ColorCorrectImageEPNS_10ImageFrameE(%"class.blink::AVIFImageDecoder"* %0, %"class.blink::ImageFrame"* %15)
  %22 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %15, i64 0, i32 10
  store i8 1, i8* %22, align 1
  %23 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %12, i64 0, i32 10
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %24, null
  tail call void @_ZN5blink10ImageFrame11SetHasAlphaEb(%"class.blink::ImageFrame"* %15, i1 zeroext %25) #15
  tail call void @_ZN5blink10ImageFrame9SetStatusENS0_6StatusE(%"class.blink::ImageFrame"* %15, i32 3) #15
  %26 = tail call zeroext i1 @_ZN5blink12ImageDecoder20PostDecodeProcessingEm(%"class.blink::ImageDecoder"* %3, i64 %1) #15
  br label %27

27:                                               ; preds = %2, %7, %9, %21, %20, %17
  ret void
}

declare void @_ZN5blink12ImageDecoder23UpdateAggressivePurgingEm(%"class.blink::ImageDecoder"*, i64) local_unnamed_addr #4

declare zeroext i1 @_ZN5blink12ImageDecoder15InitFrameBufferEm(%"class.blink::ImageDecoder"*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink16AVIFImageDecoder11RenderImageEPK9avifImagePNS_10ImageFrameE(%"class.blink::AVIFImageDecoder"* nocapture, %struct.avifImage* readonly, %"class.blink::ImageFrame"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.avifPixelFormatInfo, align 4
  %5 = alloca %"class.gfx::Point3F", align 4
  %6 = alloca %struct.avifPixelFormatInfo, align 4
  %7 = alloca %"class.gfx::Point3F", align 4
  %8 = alloca %"class.gfx::ColorSpace", align 4
  %9 = alloca %"class.gfx::ColorSpace", align 4
  %10 = alloca %struct.avifPixelFormatInfo, align 4
  %11 = alloca %"class.gfx::Point3F", align 4
  %12 = alloca i32, align 4
  %13 = alloca %"class.gfx::ColorSpace", align 4
  %14 = alloca %struct.avifPixelFormatInfo, align 4
  %15 = alloca %"class.gfx::Point3F", align 4
  %16 = alloca [4 x float], align 16
  %17 = alloca %struct.avifPixelFormatInfo, align 4
  %18 = alloca %"class.gfx::Point3F", align 4
  %19 = alloca %class.SkPixmap, align 8
  %20 = alloca %"class.gfx::ColorSpace", align 4
  %21 = alloca %"class.gfx::ColorSpace", align 4
  %22 = alloca %struct.avifPixelFormatInfo, align 4
  %23 = alloca %"class.gfx::Point3F", align 4
  %24 = alloca %"class.gfx::ColorSpace", align 4
  %25 = alloca i64, align 8
  %26 = bitcast i64* %25 to %"class.gfx::Size"*
  %27 = alloca %"class.gfx::Rect", align 4
  %28 = alloca %"class.gfx::Rect", align 4
  %29 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %24, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %29) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 getelementptr inbounds (%"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* @__const._ZN5blink16AVIFImageDecoder11RenderImageEPK9avifImagePNS_10ImageFrameE.frame_cs, i64 0, i32 0), i64 68, i1 false)
  call fastcc void @_ZN12_GLOBAL__N_113GetColorSpaceEPK9avifImage(%"class.gfx::ColorSpace"* nonnull sret %24, %struct.avifImage* %1)
  %30 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 4
  %33 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %2, i64 0, i32 9
  %34 = load i8, i8* %33, align 8, !range !4
  %35 = icmp ne i8 %34, 0
  %36 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 6
  %37 = load i8, i8* %36, align 1, !range !4
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %316, label %39

39:                                               ; preds = %3
  %40 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %43, align 8
  %45 = icmp eq %"class.gfx::ColorTransform"* %44, null
  %46 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %20, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %46) #15
  br i1 %45, label %53, label %47

47:                                               ; preds = %39
  %48 = bitcast %"class.gfx::ColorTransform"* %44 to void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)***
  %49 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %49, i64 2
  %51 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %50, align 8
  call void %51(%"class.gfx::ColorSpace"* nonnull sret %20, %"class.gfx::ColorTransform"* nonnull %44) #15
  %52 = call zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"* nonnull %20, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %24) #15
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %46) #15
  br i1 %52, label %67, label %54

53:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %46) #15
  br label %54

54:                                               ; preds = %53, %47
  %55 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %21, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %55) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %55, i8 0, i64 68, i1 false) #15
  %56 = call %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* nonnull dereferenceable(68) %24, i32 %41, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %21, i32 %41, i32 1) #15
  %57 = ptrtoint %"class.gfx::ColorTransform"* %56 to i64
  %58 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %43, align 8
  %59 = bitcast %"class.std::__1::unique_ptr.34"* %42 to i64*
  store i64 %57, i64* %59, align 8
  %60 = icmp eq %"class.gfx::ColorTransform"* %58, null
  br i1 %60, label %66, label %61

61:                                               ; preds = %54
  %62 = bitcast %"class.gfx::ColorTransform"* %58 to void (%"class.gfx::ColorTransform"*)***
  %63 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %63, i64 1
  %65 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %64, align 8
  call void %65(%"class.gfx::ColorTransform"* nonnull %58) #15
  br label %66

66:                                               ; preds = %61, %54
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %55) #15
  br label %67

67:                                               ; preds = %47, %66
  %68 = bitcast %class.SkPixmap* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %68) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %68, i8 0, i64 40, i1 false) #15
  %69 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %2, i64 0, i32 0
  %70 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %69, %class.SkPixmap* nonnull %19) #15
  %71 = bitcast %class.SkPixmap* %19 to i64**
  %72 = load i64*, i64** %71, align 8
  %73 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %19, i64 0, i32 2, i32 0, i32 0, i32 0
  %74 = load %class.SkColorSpace*, %class.SkColorSpace** %73, align 8
  %75 = icmp eq %class.SkColorSpace* %74, null
  br i1 %75, label %82, label %76

76:                                               ; preds = %67
  %77 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %82

80:                                               ; preds = %76
  %81 = bitcast %class.SkColorSpace* %74 to i8*
  call void @_ZdlPv(i8* %81) #16
  br label %82

82:                                               ; preds = %67, %76, %80
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %68) #15
  %83 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %43, align 8
  br i1 %32, label %84, label %185

84:                                               ; preds = %82
  %85 = bitcast %struct.avifPixelFormatInfo* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %85) #15
  %86 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %17, i64 0, i32 0
  store i32 -1431655766, i32* %86, align 4
  %87 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %17, i64 0, i32 1
  store i32 -1431655766, i32* %87, align 4
  %88 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %17, i64 0, i32 2
  store i32 -1431655766, i32* %88, align 4
  %89 = load i32, i32* %30, align 4
  call void @avifGetPixelFormatInfo(i32 %89, %struct.avifPixelFormatInfo* nonnull %17) #15
  %90 = bitcast %"class.gfx::Point3F"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %90) #15
  %91 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %18, i64 0, i32 0
  %92 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %18, i64 0, i32 1
  %93 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %18, i64 0, i32 2
  store float 0.000000e+00, float* %91, align 4
  store float 0.000000e+00, float* %92, align 4
  store float 0.000000e+00, float* %93, align 4
  %94 = load i32, i32* %40, align 8
  %95 = shl nsw i32 -1, %94
  %96 = xor i32 %95, -1
  %97 = sitofp i32 %96 to float
  %98 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %184, label %101

101:                                              ; preds = %84
  %102 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %103 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %104 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %105 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %106 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %107 = bitcast %"class.gfx::ColorTransform"* %83 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %108 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  %109 = bitcast [4 x float]* %16 to i8*
  %110 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 0
  %111 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 1
  %112 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 2
  %113 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 3
  br label %114

114:                                              ; preds = %140, %101
  %115 = phi i32 [ %99, %101 ], [ %141, %140 ]
  %116 = phi i64* [ %72, %101 ], [ %142, %140 ]
  %117 = phi i32 [ 0, %101 ], [ %143, %140 ]
  %118 = load i8*, i8** %102, align 8
  %119 = load i32, i32* %103, align 8
  %120 = mul i32 %119, %117
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %118, i64 %121
  %123 = bitcast i8* %122 to i16*
  %124 = load i8*, i8** %104, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %132, label %126

126:                                              ; preds = %114
  %127 = load i32, i32* %105, align 8
  %128 = mul i32 %127, %117
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %124, i64 %129
  %131 = bitcast i8* %130 to i16*
  br label %132

132:                                              ; preds = %126, %114
  %133 = phi i16* [ %131, %126 ], [ null, %114 ]
  %134 = load i32, i32* %106, align 8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %140, label %136

136:                                              ; preds = %132
  %137 = icmp eq i16* %133, null
  br label %145

138:                                              ; preds = %177
  %139 = load i32, i32* %98, align 4
  br label %140

140:                                              ; preds = %138, %132
  %141 = phi i32 [ %115, %132 ], [ %139, %138 ]
  %142 = phi i64* [ %116, %132 ], [ %179, %138 ]
  %143 = add nuw i32 %117, 1
  %144 = icmp ult i32 %143, %141
  br i1 %144, label %114, label %184

145:                                              ; preds = %177, %136
  %146 = phi i64 [ 0, %136 ], [ %180, %177 ]
  %147 = phi i64* [ %116, %136 ], [ %179, %177 ]
  %148 = getelementptr inbounds i16, i16* %123, i64 %146
  %149 = load i16, i16* %148, align 2
  %150 = uitofp i16 %149 to float
  %151 = fdiv float %150, %97
  store float %151, float* %91, align 4
  store float 5.000000e-01, float* %92, align 4
  store float 5.000000e-01, float* %93, align 4
  %152 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %107, align 8
  %153 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %152, i64 4
  %154 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %153, align 8
  call void %154(%"class.gfx::ColorTransform"* %83, %"class.gfx::Point3F"* nonnull %18, i64 1) #15
  br i1 %137, label %164, label %155

155:                                              ; preds = %145
  %156 = getelementptr inbounds i16, i16* %133, i64 %146
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = load i32, i32* %108, align 8
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %164

161:                                              ; preds = %155
  %162 = load i32, i32* %40, align 8
  %163 = call i32 @avifLimitedToFullY(i32 %162, i32 %158) #15
  br label %164

164:                                              ; preds = %161, %155, %145
  %165 = phi i32 [ %163, %161 ], [ %158, %155 ], [ %96, %145 ]
  %166 = sitofp i32 %165 to float
  %167 = fdiv float %166, %97
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #15
  %168 = load float, float* %91, align 4
  store float %168, float* %110, align 16
  %169 = load float, float* %92, align 4
  store float %169, float* %111, align 4
  %170 = load float, float* %93, align 4
  store float %170, float* %112, align 8
  store float %167, float* %113, align 4
  %171 = fcmp une float %167, 1.000000e+00
  %172 = and i1 %35, %171
  br i1 %172, label %173, label %177

173:                                              ; preds = %164
  %174 = fmul float %168, %167
  store float %174, float* %110, align 16
  %175 = fmul float %167, %169
  store float %175, float* %111, align 4
  %176 = fmul float %167, %170
  store float %176, float* %112, align 8
  br label %177

177:                                              ; preds = %173, %164
  %178 = bitcast i64* %147 to i16*
  call void @_ZN3gfx16FloatToHalfFloatEPKfPtm(float* nonnull %110, i16* %178, i64 4) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #15
  %179 = getelementptr inbounds i64, i64* %147, i64 1
  %180 = add nuw nsw i64 %146, 1
  %181 = load i32, i32* %106, align 8
  %182 = zext i32 %181 to i64
  %183 = icmp ult i64 %180, %182
  br i1 %183, label %145, label %138

184:                                              ; preds = %140, %84
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %90) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %85) #15
  br label %1258

185:                                              ; preds = %82
  %186 = bitcast %struct.avifPixelFormatInfo* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %186) #15
  %187 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %14, i64 0, i32 0
  store i32 -1431655766, i32* %187, align 4
  %188 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %14, i64 0, i32 1
  store i32 -1431655766, i32* %188, align 4
  %189 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %14, i64 0, i32 2
  store i32 -1431655766, i32* %189, align 4
  %190 = load i32, i32* %30, align 4
  call void @avifGetPixelFormatInfo(i32 %190, %struct.avifPixelFormatInfo* nonnull %14) #15
  %191 = bitcast %"class.gfx::Point3F"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %191) #15
  %192 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %15, i64 0, i32 0
  %193 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %15, i64 0, i32 1
  %194 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %15, i64 0, i32 2
  store float 0.000000e+00, float* %192, align 4
  store float 0.000000e+00, float* %193, align 4
  store float 0.000000e+00, float* %194, align 4
  %195 = load i32, i32* %40, align 8
  %196 = shl nsw i32 -1, %195
  %197 = xor i32 %196, -1
  %198 = sitofp i32 %197 to float
  %199 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %200 = load i32, i32* %199, align 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %315, label %202

202:                                              ; preds = %185
  %203 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %204 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %205 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %206 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %207 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %208 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %209 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %210 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %211 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %212 = bitcast %"class.gfx::ColorTransform"* %83 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %213 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  %214 = bitcast [4 x float]* %16 to i8*
  %215 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 0
  %216 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 1
  %217 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 2
  %218 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, i64 3
  br label %219

219:                                              ; preds = %259, %202
  %220 = phi i32 [ %200, %202 ], [ %260, %259 ]
  %221 = phi i64* [ %72, %202 ], [ %261, %259 ]
  %222 = phi i32 [ 0, %202 ], [ %262, %259 ]
  %223 = load i32, i32* %189, align 4
  %224 = lshr i32 %222, %223
  %225 = load i8*, i8** %203, align 8
  %226 = load i32, i32* %204, align 8
  %227 = mul i32 %226, %222
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %225, i64 %228
  %230 = bitcast i8* %229 to i16*
  %231 = load i8*, i8** %205, align 8
  %232 = load i32, i32* %206, align 4
  %233 = mul i32 %232, %224
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %231, i64 %234
  %236 = bitcast i8* %235 to i16*
  %237 = load i8*, i8** %207, align 8
  %238 = load i32, i32* %208, align 8
  %239 = mul i32 %238, %224
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %237, i64 %240
  %242 = bitcast i8* %241 to i16*
  %243 = load i8*, i8** %209, align 8
  %244 = icmp eq i8* %243, null
  br i1 %244, label %251, label %245

245:                                              ; preds = %219
  %246 = load i32, i32* %210, align 8
  %247 = mul i32 %246, %222
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %243, i64 %248
  %250 = bitcast i8* %249 to i16*
  br label %251

251:                                              ; preds = %245, %219
  %252 = phi i16* [ %250, %245 ], [ null, %219 ]
  %253 = load i32, i32* %211, align 8
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %259, label %255

255:                                              ; preds = %251
  %256 = icmp eq i16* %252, null
  br label %264

257:                                              ; preds = %308
  %258 = load i32, i32* %199, align 4
  br label %259

259:                                              ; preds = %257, %251
  %260 = phi i32 [ %220, %251 ], [ %258, %257 ]
  %261 = phi i64* [ %221, %251 ], [ %310, %257 ]
  %262 = add nuw i32 %222, 1
  %263 = icmp ult i32 %262, %260
  br i1 %263, label %219, label %315

264:                                              ; preds = %308, %255
  %265 = phi i64 [ 0, %255 ], [ %311, %308 ]
  %266 = phi i64* [ %221, %255 ], [ %310, %308 ]
  %267 = load i32, i32* %188, align 4
  %268 = trunc i64 %265 to i32
  %269 = lshr i32 %268, %267
  %270 = getelementptr inbounds i16, i16* %230, i64 %265
  %271 = load i16, i16* %270, align 2
  %272 = uitofp i16 %271 to float
  %273 = fdiv float %272, %198
  store float %273, float* %192, align 4
  %274 = sext i32 %269 to i64
  %275 = getelementptr inbounds i16, i16* %236, i64 %274
  %276 = load i16, i16* %275, align 2
  %277 = uitofp i16 %276 to float
  %278 = fdiv float %277, %198
  store float %278, float* %193, align 4
  %279 = getelementptr inbounds i16, i16* %242, i64 %274
  %280 = load i16, i16* %279, align 2
  %281 = uitofp i16 %280 to float
  %282 = fdiv float %281, %198
  store float %282, float* %194, align 4
  %283 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %212, align 8
  %284 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %283, i64 4
  %285 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %284, align 8
  call void %285(%"class.gfx::ColorTransform"* %83, %"class.gfx::Point3F"* nonnull %15, i64 1) #15
  br i1 %256, label %295, label %286

286:                                              ; preds = %264
  %287 = getelementptr inbounds i16, i16* %252, i64 %265
  %288 = load i16, i16* %287, align 2
  %289 = zext i16 %288 to i32
  %290 = load i32, i32* %213, align 8
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %295

292:                                              ; preds = %286
  %293 = load i32, i32* %40, align 8
  %294 = call i32 @avifLimitedToFullY(i32 %293, i32 %289) #15
  br label %295

295:                                              ; preds = %292, %286, %264
  %296 = phi i32 [ %294, %292 ], [ %289, %286 ], [ %197, %264 ]
  %297 = sitofp i32 %296 to float
  %298 = fdiv float %297, %198
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %214) #15
  %299 = load float, float* %192, align 4
  store float %299, float* %215, align 16
  %300 = load float, float* %193, align 4
  store float %300, float* %216, align 4
  %301 = load float, float* %194, align 4
  store float %301, float* %217, align 8
  store float %298, float* %218, align 4
  %302 = fcmp une float %298, 1.000000e+00
  %303 = and i1 %35, %302
  br i1 %303, label %304, label %308

304:                                              ; preds = %295
  %305 = fmul float %299, %298
  store float %305, float* %215, align 16
  %306 = fmul float %298, %300
  store float %306, float* %216, align 4
  %307 = fmul float %298, %301
  store float %307, float* %217, align 8
  br label %308

308:                                              ; preds = %304, %295
  %309 = bitcast i64* %266 to i16*
  call void @_ZN3gfx16FloatToHalfFloatEPKfPtm(float* nonnull %215, i16* %309, i64 4) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %214) #15
  %310 = getelementptr inbounds i64, i64* %266, i64 1
  %311 = add nuw nsw i64 %265, 1
  %312 = load i32, i32* %211, align 8
  %313 = zext i32 %312 to i64
  %314 = icmp ult i64 %311, %313
  br i1 %314, label %264, label %257

315:                                              ; preds = %259, %185
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %191) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %186) #15
  br label %1258

316:                                              ; preds = %3
  %317 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %2, i64 0, i32 0, i32 1, i32 0
  %318 = load i8*, i8** %317, align 8
  %319 = bitcast i8* %318 to i32*
  %320 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %320) #15
  store i32 -1431655766, i32* %12, align 4
  %321 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %321) #15
  call fastcc void @_ZN12_GLOBAL__N_113GetColorSpaceEPK9avifImage(%"class.gfx::ColorSpace"* nonnull sret %13, %struct.avifImage* %1) #15
  %322 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 2
  %323 = load i32, i32* %322, align 8
  %324 = call zeroext i1 @_ZNK3gfx10ColorSpace17ToSkYUVColorSpaceEiP15SkYUVColorSpace(%"class.gfx::ColorSpace"* nonnull %13, i32 %323, i32* nonnull %12) #15
  br i1 %324, label %327, label %325

325:                                              ; preds = %316
  %326 = load i32, i32* %322, align 8
  br label %337

327:                                              ; preds = %316
  %328 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %329 = load i8*, i8** %328, align 8
  %330 = icmp eq i8* %329, null
  br i1 %330, label %343, label %331

331:                                              ; preds = %327
  %332 = load i32, i32* %322, align 8
  %333 = icmp eq i32 %332, 8
  br i1 %333, label %334, label %337

334:                                              ; preds = %331
  %335 = load i32, i32* %30, align 4
  %336 = icmp eq i32 %335, 3
  br i1 %336, label %339, label %337

337:                                              ; preds = %325, %334, %331
  %338 = phi i32 [ %326, %325 ], [ 8, %334 ], [ %332, %331 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %321) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %320) #15
  br label %434

339:                                              ; preds = %334
  %340 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  %341 = load i32, i32* %340, align 8
  %342 = icmp eq i32 %341, 1
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %321) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %320) #15
  br i1 %342, label %345, label %434

343:                                              ; preds = %327
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %321) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %320) #15
  %344 = load i32, i32* %322, align 8
  switch i32 %344, label %1258 [
    i32 12, label %345
    i32 10, label %345
    i32 8, label %345
  ]

345:                                              ; preds = %339, %343, %343, %343
  %346 = phi i32 [ %344, %343 ], [ %344, %343 ], [ %344, %343 ], [ 8, %339 ]
  %347 = load i32, i32* %30, align 4
  %348 = add nsw i32 %346, -8
  %349 = sdiv i32 %348, 2
  switch i32 %347, label %352 [
    i32 3, label %353
    i32 4, label %353
    i32 2, label %350
    i32 1, label %351
    i32 0, label %1258
  ]

350:                                              ; preds = %345
  br label %353

351:                                              ; preds = %345
  br label %353

352:                                              ; preds = %345
  unreachable

353:                                              ; preds = %345, %345, %350, %351
  %354 = phi [3 x i32]* [ @_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV422Formats, %350 ], [ @_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV444Formats, %351 ], [ @_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV420Formats, %345 ], [ @_ZZN12_GLOBAL__N_122AvifToVideoPixelFormatE15avifPixelFormatiE14kYUV420Formats, %345 ]
  %355 = sext i32 %349 to i64
  %356 = getelementptr inbounds [3 x i32], [3 x i32]* %354, i64 0, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %1258, label %359

359:                                              ; preds = %353
  %360 = bitcast i64* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %360) #15
  %361 = bitcast i64* %25 to i32*
  %362 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %26, i64 0, i32 1
  %363 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %364 = load i32, i32* %363, align 8
  %365 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %366 = load i32, i32* %365, align 4
  %367 = icmp sgt i32 %364, 0
  %368 = select i1 %367, i32 %364, i32 0
  store i32 %368, i32* %361, align 8
  %369 = icmp sgt i32 %366, 0
  %370 = select i1 %369, i32 %366, i32 0
  store i32 %370, i32* %362, align 4
  br i1 %330, label %393, label %371

371:                                              ; preds = %359
  %372 = bitcast %"class.gfx::Rect"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %372) #15
  %373 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %27, i64 0, i32 0, i32 0
  store i32 0, i32* %373, align 4
  %374 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %27, i64 0, i32 0, i32 1
  store i32 0, i32* %374, align 4
  %375 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %27, i64 0, i32 1
  %376 = bitcast %"class.gfx::Size"* %375 to i64*
  %377 = load i64, i64* %25, align 8
  store i64 %377, i64* %376, align 4
  %378 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %379 = load i32, i32* %378, align 8
  %380 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %381 = load i32, i32* %380, align 4
  %382 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %383 = load i32, i32* %382, align 8
  %384 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %385 = load i32, i32* %384, align 8
  %386 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %387 = load i8*, i8** %386, align 8
  %388 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %389 = load i8*, i8** %388, align 8
  %390 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %391 = load i8*, i8** %390, align 8
  %392 = call %"class.media::VideoFrame"* @_ZN5media10VideoFrame20WrapExternalYuvaDataENS_16VideoPixelFormatERKN3gfx4SizeERKNS2_4RectES5_iiiiPhS9_S9_S9_N4base9TimeDeltaE(i32 4, %"class.gfx::Size"* nonnull dereferenceable(8) %26, %"class.gfx::Rect"* nonnull dereferenceable(16) %27, %"class.gfx::Size"* nonnull dereferenceable(8) %26, i32 %379, i32 %381, i32 %383, i32 %385, i8* %387, i8* %389, i8* %391, i8* nonnull %329, i64 0) #15
  br label %413

393:                                              ; preds = %359
  %394 = bitcast %"class.gfx::Rect"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %394) #15
  %395 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %28, i64 0, i32 0, i32 0
  store i32 0, i32* %395, align 4
  %396 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %28, i64 0, i32 0, i32 1
  store i32 0, i32* %396, align 4
  %397 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %28, i64 0, i32 1
  %398 = bitcast %"class.gfx::Size"* %397 to i64*
  %399 = load i64, i64* %25, align 8
  store i64 %399, i64* %398, align 4
  %400 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %401 = load i32, i32* %400, align 8
  %402 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %403 = load i32, i32* %402, align 4
  %404 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %405 = load i32, i32* %404, align 8
  %406 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %407 = load i8*, i8** %406, align 8
  %408 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %409 = load i8*, i8** %408, align 8
  %410 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %411 = load i8*, i8** %410, align 8
  %412 = call %"class.media::VideoFrame"* @_ZN5media10VideoFrame19WrapExternalYuvDataENS_16VideoPixelFormatERKN3gfx4SizeERKNS2_4RectES5_iiiPhS9_S9_N4base9TimeDeltaE(i32 %357, %"class.gfx::Size"* nonnull dereferenceable(8) %26, %"class.gfx::Rect"* nonnull dereferenceable(16) %28, %"class.gfx::Size"* nonnull dereferenceable(8) %26, i32 %401, i32 %403, i32 %405, i8* %407, i8* %409, i8* %411, i64 0) #15
  br label %413

413:                                              ; preds = %371, %393
  %414 = phi i8* [ %372, %371 ], [ %394, %393 ]
  %415 = phi %"class.media::VideoFrame"* [ %392, %371 ], [ %412, %393 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %414) #15
  %416 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %415, i64 0, i32 21, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %416, i8* nonnull align 4 %29, i64 68, i1 false) #15
  %417 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %415, i64 0, i32 5, i32 1, i32 0
  %418 = load i32, i32* %417, align 4
  %419 = shl nsw i32 %418, 2
  %420 = sext i32 %419 to i64
  call void @_ZN5media24PaintCanvasVideoRenderer28ConvertVideoFrameToRGBPixelsEPKNS_10VideoFrameEPvmb(%"class.media::VideoFrame"* %415, i8* %318, i64 %420, i1 zeroext %35) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %360) #15
  %421 = icmp eq %"class.media::VideoFrame"* %415, null
  br i1 %421, label %1258, label %422

422:                                              ; preds = %413
  %423 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %415, i64 0, i32 1
  %424 = getelementptr inbounds %"class.base::RefCountedThreadSafe.48", %"class.base::RefCountedThreadSafe.48"* %423, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %425 = atomicrmw sub i32* %424, i32 1 acq_rel
  %426 = icmp eq i32 %425, 1
  br i1 %426, label %427, label %1258

427:                                              ; preds = %422
  %428 = getelementptr inbounds %"class.base::RefCountedThreadSafe.48", %"class.base::RefCountedThreadSafe.48"* %423, i64 -2
  %429 = bitcast %"class.base::RefCountedThreadSafe.48"* %428 to %"class.media::VideoFrame"*
  %430 = bitcast %"class.base::RefCountedThreadSafe.48"* %428 to void (%"class.media::VideoFrame"*)***
  %431 = load void (%"class.media::VideoFrame"*)**, void (%"class.media::VideoFrame"*)*** %430, align 8
  %432 = getelementptr inbounds void (%"class.media::VideoFrame"*)*, void (%"class.media::VideoFrame"*)** %431, i64 1
  %433 = load void (%"class.media::VideoFrame"*)*, void (%"class.media::VideoFrame"*)** %432, align 8
  call void %433(%"class.media::VideoFrame"* nonnull %429) #15
  br label %1258

434:                                              ; preds = %337, %339
  %435 = phi i32 [ %338, %337 ], [ 8, %339 ]
  %436 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 22
  %437 = getelementptr inbounds %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34"* %436, i64 0, i32 0, i32 0, i32 0
  %438 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %437, align 8
  %439 = icmp eq %"class.gfx::ColorTransform"* %438, null
  %440 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %440) #15
  br i1 %439, label %447, label %441

441:                                              ; preds = %434
  %442 = bitcast %"class.gfx::ColorTransform"* %438 to void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)***
  %443 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*** %442, align 8
  %444 = getelementptr inbounds void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %443, i64 2
  %445 = load void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorSpace"*, %"class.gfx::ColorTransform"*)** %444, align 8
  call void %445(%"class.gfx::ColorSpace"* nonnull sret %8, %"class.gfx::ColorTransform"* nonnull %438) #15
  %446 = call zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"* nonnull %8, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %24) #15
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %440) #15
  br i1 %446, label %461, label %448

447:                                              ; preds = %434
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %440) #15
  br label %448

448:                                              ; preds = %447, %441
  %449 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %449) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %449, i8 0, i64 68, i1 false) #15
  %450 = call %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* nonnull dereferenceable(68) %24, i32 %435, %"class.gfx::ColorSpace"* nonnull dereferenceable(68) %9, i32 %435, i32 1) #15
  %451 = ptrtoint %"class.gfx::ColorTransform"* %450 to i64
  %452 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %437, align 8
  %453 = bitcast %"class.std::__1::unique_ptr.34"* %436 to i64*
  store i64 %451, i64* %453, align 8
  %454 = icmp eq %"class.gfx::ColorTransform"* %452, null
  br i1 %454, label %460, label %455

455:                                              ; preds = %448
  %456 = bitcast %"class.gfx::ColorTransform"* %452 to void (%"class.gfx::ColorTransform"*)***
  %457 = load void (%"class.gfx::ColorTransform"*)**, void (%"class.gfx::ColorTransform"*)*** %456, align 8
  %458 = getelementptr inbounds void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %457, i64 1
  %459 = load void (%"class.gfx::ColorTransform"*)*, void (%"class.gfx::ColorTransform"*)** %458, align 8
  call void %459(%"class.gfx::ColorTransform"* nonnull %452) #15
  br label %460

460:                                              ; preds = %455, %448
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %449) #15
  br label %461

461:                                              ; preds = %441, %460
  %462 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 5
  %463 = load i8, i8* %462, align 4
  %464 = icmp ugt i8 %463, 8
  %465 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %437, align 8
  br i1 %464, label %466, label %865

466:                                              ; preds = %461
  br i1 %32, label %467, label %651

467:                                              ; preds = %466
  %468 = bitcast %struct.avifPixelFormatInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %468) #15
  %469 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %6, i64 0, i32 0
  store i32 -1431655766, i32* %469, align 4
  %470 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %6, i64 0, i32 1
  store i32 -1431655766, i32* %470, align 4
  %471 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %6, i64 0, i32 2
  store i32 -1431655766, i32* %471, align 4
  %472 = load i32, i32* %30, align 4
  call void @avifGetPixelFormatInfo(i32 %472, %struct.avifPixelFormatInfo* nonnull %6) #15
  %473 = bitcast %"class.gfx::Point3F"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %473) #15
  %474 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %7, i64 0, i32 0
  %475 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %7, i64 0, i32 1
  %476 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %7, i64 0, i32 2
  store float 0.000000e+00, float* %474, align 4
  store float 0.000000e+00, float* %475, align 4
  store float 0.000000e+00, float* %476, align 4
  %477 = load i32, i32* %322, align 8
  %478 = shl nsw i32 -1, %477
  %479 = xor i32 %478, -1
  %480 = sitofp i32 %479 to float
  %481 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %482 = load i32, i32* %481, align 4
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %650, label %484

484:                                              ; preds = %467
  %485 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %486 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %487 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %488 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %489 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %490 = bitcast %"class.gfx::ColorTransform"* %465 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %491 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  br label %492

492:                                              ; preds = %518, %484
  %493 = phi i32 [ %482, %484 ], [ %519, %518 ]
  %494 = phi i32* [ %319, %484 ], [ %520, %518 ]
  %495 = phi i32 [ 0, %484 ], [ %521, %518 ]
  %496 = load i8*, i8** %485, align 8
  %497 = load i32, i32* %486, align 8
  %498 = mul i32 %497, %495
  %499 = zext i32 %498 to i64
  %500 = getelementptr inbounds i8, i8* %496, i64 %499
  %501 = bitcast i8* %500 to i16*
  %502 = load i8*, i8** %487, align 8
  %503 = icmp eq i8* %502, null
  br i1 %503, label %510, label %504

504:                                              ; preds = %492
  %505 = load i32, i32* %488, align 8
  %506 = mul i32 %505, %495
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds i8, i8* %502, i64 %507
  %509 = bitcast i8* %508 to i16*
  br label %510

510:                                              ; preds = %504, %492
  %511 = phi i16* [ %509, %504 ], [ null, %492 ]
  %512 = load i32, i32* %489, align 8
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %518, label %514

514:                                              ; preds = %510
  %515 = icmp eq i16* %511, null
  br label %523

516:                                              ; preds = %641
  %517 = load i32, i32* %481, align 4
  br label %518

518:                                              ; preds = %516, %510
  %519 = phi i32 [ %493, %510 ], [ %517, %516 ]
  %520 = phi i32* [ %494, %510 ], [ %645, %516 ]
  %521 = add nuw i32 %495, 1
  %522 = icmp ult i32 %521, %519
  br i1 %522, label %492, label %650

523:                                              ; preds = %641, %514
  %524 = phi i64 [ 0, %514 ], [ %646, %641 ]
  %525 = phi i32* [ %494, %514 ], [ %645, %641 ]
  %526 = getelementptr inbounds i16, i16* %501, i64 %524
  %527 = load i16, i16* %526, align 2
  %528 = uitofp i16 %527 to float
  %529 = fdiv float %528, %480
  store float %529, float* %474, align 4
  store float 5.000000e-01, float* %475, align 4
  store float 5.000000e-01, float* %476, align 4
  %530 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %490, align 8
  %531 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %530, i64 4
  %532 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %531, align 8
  call void %532(%"class.gfx::ColorTransform"* %465, %"class.gfx::Point3F"* nonnull %7, i64 1) #15
  br i1 %515, label %542, label %533

533:                                              ; preds = %523
  %534 = getelementptr inbounds i16, i16* %511, i64 %524
  %535 = load i16, i16* %534, align 2
  %536 = zext i16 %535 to i32
  %537 = load i32, i32* %491, align 8
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %539, label %542

539:                                              ; preds = %533
  %540 = load i32, i32* %322, align 8
  %541 = call i32 @avifLimitedToFullY(i32 %540, i32 %536) #15
  br label %542

542:                                              ; preds = %539, %533, %523
  %543 = phi i32 [ %541, %539 ], [ %536, %533 ], [ %479, %523 ]
  %544 = sitofp i32 %543 to float
  %545 = fdiv float %544, %480
  %546 = load float, float* %474, align 4
  %547 = fmul float %546, 2.550000e+02
  %548 = fcmp ult float %547, 0.000000e+00
  %549 = fadd float %547, 5.000000e-01
  %550 = call float @llvm.floor.f32(float %549) #15
  %551 = fadd float %547, -5.000000e-01
  %552 = call float @llvm.ceil.f32(float %551) #15
  %553 = select i1 %548, float %552, float %550
  %554 = fcmp ule float %553, -1.000000e+00
  %555 = fcmp ugt float %553, 2.550000e+02
  %556 = fptoui float %553 to i8
  %557 = select i1 %554, i8 0, i8 %556
  %558 = xor i1 %554, true
  %559 = sext i1 %558 to i8
  %560 = select i1 %555, i8 %559, i8 %557
  %561 = load float, float* %475, align 4
  %562 = fmul float %561, 2.550000e+02
  %563 = fcmp ult float %562, 0.000000e+00
  %564 = fadd float %562, 5.000000e-01
  %565 = call float @llvm.floor.f32(float %564) #15
  %566 = fadd float %562, -5.000000e-01
  %567 = call float @llvm.ceil.f32(float %566) #15
  %568 = select i1 %563, float %567, float %565
  %569 = fcmp ule float %568, -1.000000e+00
  %570 = fcmp ugt float %568, 2.550000e+02
  %571 = fptoui float %568 to i8
  %572 = select i1 %569, i8 0, i8 %571
  %573 = xor i1 %569, true
  %574 = sext i1 %573 to i8
  %575 = select i1 %570, i8 %574, i8 %572
  %576 = load float, float* %476, align 4
  %577 = fmul float %576, 2.550000e+02
  %578 = fcmp ult float %577, 0.000000e+00
  %579 = fadd float %577, 5.000000e-01
  %580 = call float @llvm.floor.f32(float %579) #15
  %581 = fadd float %577, -5.000000e-01
  %582 = call float @llvm.ceil.f32(float %581) #15
  %583 = select i1 %578, float %582, float %580
  %584 = fcmp ule float %583, -1.000000e+00
  %585 = fcmp ugt float %583, 2.550000e+02
  %586 = fptoui float %583 to i8
  %587 = select i1 %584, i8 0, i8 %586
  %588 = xor i1 %584, true
  %589 = sext i1 %588 to i8
  %590 = select i1 %585, i8 %589, i8 %587
  %591 = fmul float %545, 2.550000e+02
  %592 = fcmp ult float %591, 0.000000e+00
  %593 = fadd float %591, 5.000000e-01
  %594 = call float @llvm.floor.f32(float %593) #15
  %595 = fadd float %591, -5.000000e-01
  %596 = call float @llvm.ceil.f32(float %595) #15
  %597 = select i1 %592, float %596, float %594
  %598 = fcmp ule float %597, -1.000000e+00
  %599 = fcmp ugt float %597, 2.550000e+02
  %600 = fptoui float %597 to i8
  %601 = select i1 %598, i8 0, i8 %600
  %602 = xor i1 %598, true
  %603 = sext i1 %602 to i8
  %604 = select i1 %599, i8 %603, i8 %601
  br i1 %35, label %605, label %631

605:                                              ; preds = %542
  %606 = zext i8 %560 to i32
  %607 = zext i8 %575 to i32
  %608 = zext i8 %590 to i32
  %609 = zext i8 %604 to i32
  %610 = icmp eq i8 %604, -1
  br i1 %610, label %622, label %611

611:                                              ; preds = %605
  %612 = mul nuw nsw i32 %609, 257
  %613 = mul nuw nsw i32 %612, %606
  %614 = add nuw nsw i32 %613, 32896
  %615 = lshr i32 %614, 16
  %616 = mul nuw nsw i32 %612, %607
  %617 = add nuw nsw i32 %616, 32896
  %618 = lshr i32 %617, 16
  %619 = mul nuw nsw i32 %612, %608
  %620 = add nuw nsw i32 %619, 32896
  %621 = lshr i32 %620, 16
  br label %622

622:                                              ; preds = %611, %605
  %623 = phi i32 [ %621, %611 ], [ %608, %605 ]
  %624 = phi i32 [ %618, %611 ], [ %607, %605 ]
  %625 = phi i32 [ %615, %611 ], [ %606, %605 ]
  %626 = shl nuw i32 %609, 24
  %627 = shl nuw nsw i32 %625, 16
  %628 = shl nuw nsw i32 %624, 8
  %629 = or i32 %623, %626
  %630 = or i32 %629, %628
  br label %641

631:                                              ; preds = %542
  %632 = zext i8 %604 to i32
  %633 = zext i8 %560 to i32
  %634 = zext i8 %575 to i32
  %635 = zext i8 %590 to i32
  %636 = shl nuw i32 %632, 24
  %637 = shl nuw nsw i32 %633, 16
  %638 = or i32 %636, %637
  %639 = shl nuw nsw i32 %634, 8
  %640 = or i32 %638, %639
  br label %641

641:                                              ; preds = %631, %622
  %642 = phi i32 [ %635, %631 ], [ %627, %622 ]
  %643 = phi i32 [ %640, %631 ], [ %630, %622 ]
  %644 = or i32 %643, %642
  store i32 %644, i32* %525, align 4
  %645 = getelementptr inbounds i32, i32* %525, i64 1
  %646 = add nuw nsw i64 %524, 1
  %647 = load i32, i32* %489, align 8
  %648 = zext i32 %647 to i64
  %649 = icmp ult i64 %646, %648
  br i1 %649, label %523, label %516

650:                                              ; preds = %518, %467
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %473) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %468) #15
  br label %1258

651:                                              ; preds = %466
  %652 = bitcast %struct.avifPixelFormatInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %652) #15
  %653 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %4, i64 0, i32 0
  store i32 -1431655766, i32* %653, align 4
  %654 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %4, i64 0, i32 1
  store i32 -1431655766, i32* %654, align 4
  %655 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %4, i64 0, i32 2
  store i32 -1431655766, i32* %655, align 4
  %656 = load i32, i32* %30, align 4
  call void @avifGetPixelFormatInfo(i32 %656, %struct.avifPixelFormatInfo* nonnull %4) #15
  %657 = bitcast %"class.gfx::Point3F"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %657) #15
  %658 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %5, i64 0, i32 0
  %659 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %5, i64 0, i32 1
  %660 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %5, i64 0, i32 2
  store float 0.000000e+00, float* %658, align 4
  store float 0.000000e+00, float* %659, align 4
  store float 0.000000e+00, float* %660, align 4
  %661 = load i32, i32* %322, align 8
  %662 = shl nsw i32 -1, %661
  %663 = xor i32 %662, -1
  %664 = sitofp i32 %663 to float
  %665 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %666 = load i32, i32* %665, align 4
  %667 = icmp eq i32 %666, 0
  br i1 %667, label %864, label %668

668:                                              ; preds = %651
  %669 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %670 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %671 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %672 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %673 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %674 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %675 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %676 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %677 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %678 = bitcast %"class.gfx::ColorTransform"* %465 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %679 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  br label %680

680:                                              ; preds = %720, %668
  %681 = phi i32 [ %666, %668 ], [ %721, %720 ]
  %682 = phi i32* [ %319, %668 ], [ %722, %720 ]
  %683 = phi i32 [ 0, %668 ], [ %723, %720 ]
  %684 = load i32, i32* %655, align 4
  %685 = lshr i32 %683, %684
  %686 = load i8*, i8** %669, align 8
  %687 = load i32, i32* %670, align 8
  %688 = mul i32 %687, %683
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds i8, i8* %686, i64 %689
  %691 = bitcast i8* %690 to i16*
  %692 = load i8*, i8** %671, align 8
  %693 = load i32, i32* %672, align 4
  %694 = mul i32 %693, %685
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %692, i64 %695
  %697 = bitcast i8* %696 to i16*
  %698 = load i8*, i8** %673, align 8
  %699 = load i32, i32* %674, align 8
  %700 = mul i32 %699, %685
  %701 = zext i32 %700 to i64
  %702 = getelementptr inbounds i8, i8* %698, i64 %701
  %703 = bitcast i8* %702 to i16*
  %704 = load i8*, i8** %675, align 8
  %705 = icmp eq i8* %704, null
  br i1 %705, label %712, label %706

706:                                              ; preds = %680
  %707 = load i32, i32* %676, align 8
  %708 = mul i32 %707, %683
  %709 = zext i32 %708 to i64
  %710 = getelementptr inbounds i8, i8* %704, i64 %709
  %711 = bitcast i8* %710 to i16*
  br label %712

712:                                              ; preds = %706, %680
  %713 = phi i16* [ %711, %706 ], [ null, %680 ]
  %714 = load i32, i32* %677, align 8
  %715 = icmp eq i32 %714, 0
  br i1 %715, label %720, label %716

716:                                              ; preds = %712
  %717 = icmp eq i16* %713, null
  br label %725

718:                                              ; preds = %855
  %719 = load i32, i32* %665, align 4
  br label %720

720:                                              ; preds = %718, %712
  %721 = phi i32 [ %681, %712 ], [ %719, %718 ]
  %722 = phi i32* [ %682, %712 ], [ %859, %718 ]
  %723 = add nuw i32 %683, 1
  %724 = icmp ult i32 %723, %721
  br i1 %724, label %680, label %864

725:                                              ; preds = %855, %716
  %726 = phi i64 [ 0, %716 ], [ %860, %855 ]
  %727 = phi i32* [ %682, %716 ], [ %859, %855 ]
  %728 = load i32, i32* %654, align 4
  %729 = trunc i64 %726 to i32
  %730 = lshr i32 %729, %728
  %731 = getelementptr inbounds i16, i16* %691, i64 %726
  %732 = load i16, i16* %731, align 2
  %733 = uitofp i16 %732 to float
  %734 = fdiv float %733, %664
  store float %734, float* %658, align 4
  %735 = sext i32 %730 to i64
  %736 = getelementptr inbounds i16, i16* %697, i64 %735
  %737 = load i16, i16* %736, align 2
  %738 = uitofp i16 %737 to float
  %739 = fdiv float %738, %664
  store float %739, float* %659, align 4
  %740 = getelementptr inbounds i16, i16* %703, i64 %735
  %741 = load i16, i16* %740, align 2
  %742 = uitofp i16 %741 to float
  %743 = fdiv float %742, %664
  store float %743, float* %660, align 4
  %744 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %678, align 8
  %745 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %744, i64 4
  %746 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %745, align 8
  call void %746(%"class.gfx::ColorTransform"* %465, %"class.gfx::Point3F"* nonnull %5, i64 1) #15
  br i1 %717, label %756, label %747

747:                                              ; preds = %725
  %748 = getelementptr inbounds i16, i16* %713, i64 %726
  %749 = load i16, i16* %748, align 2
  %750 = zext i16 %749 to i32
  %751 = load i32, i32* %679, align 8
  %752 = icmp eq i32 %751, 0
  br i1 %752, label %753, label %756

753:                                              ; preds = %747
  %754 = load i32, i32* %322, align 8
  %755 = call i32 @avifLimitedToFullY(i32 %754, i32 %750) #15
  br label %756

756:                                              ; preds = %753, %747, %725
  %757 = phi i32 [ %755, %753 ], [ %750, %747 ], [ %663, %725 ]
  %758 = sitofp i32 %757 to float
  %759 = fdiv float %758, %664
  %760 = load float, float* %658, align 4
  %761 = fmul float %760, 2.550000e+02
  %762 = fcmp ult float %761, 0.000000e+00
  %763 = fadd float %761, 5.000000e-01
  %764 = call float @llvm.floor.f32(float %763) #15
  %765 = fadd float %761, -5.000000e-01
  %766 = call float @llvm.ceil.f32(float %765) #15
  %767 = select i1 %762, float %766, float %764
  %768 = fcmp ule float %767, -1.000000e+00
  %769 = fcmp ugt float %767, 2.550000e+02
  %770 = fptoui float %767 to i8
  %771 = select i1 %768, i8 0, i8 %770
  %772 = xor i1 %768, true
  %773 = sext i1 %772 to i8
  %774 = select i1 %769, i8 %773, i8 %771
  %775 = load float, float* %659, align 4
  %776 = fmul float %775, 2.550000e+02
  %777 = fcmp ult float %776, 0.000000e+00
  %778 = fadd float %776, 5.000000e-01
  %779 = call float @llvm.floor.f32(float %778) #15
  %780 = fadd float %776, -5.000000e-01
  %781 = call float @llvm.ceil.f32(float %780) #15
  %782 = select i1 %777, float %781, float %779
  %783 = fcmp ule float %782, -1.000000e+00
  %784 = fcmp ugt float %782, 2.550000e+02
  %785 = fptoui float %782 to i8
  %786 = select i1 %783, i8 0, i8 %785
  %787 = xor i1 %783, true
  %788 = sext i1 %787 to i8
  %789 = select i1 %784, i8 %788, i8 %786
  %790 = load float, float* %660, align 4
  %791 = fmul float %790, 2.550000e+02
  %792 = fcmp ult float %791, 0.000000e+00
  %793 = fadd float %791, 5.000000e-01
  %794 = call float @llvm.floor.f32(float %793) #15
  %795 = fadd float %791, -5.000000e-01
  %796 = call float @llvm.ceil.f32(float %795) #15
  %797 = select i1 %792, float %796, float %794
  %798 = fcmp ule float %797, -1.000000e+00
  %799 = fcmp ugt float %797, 2.550000e+02
  %800 = fptoui float %797 to i8
  %801 = select i1 %798, i8 0, i8 %800
  %802 = xor i1 %798, true
  %803 = sext i1 %802 to i8
  %804 = select i1 %799, i8 %803, i8 %801
  %805 = fmul float %759, 2.550000e+02
  %806 = fcmp ult float %805, 0.000000e+00
  %807 = fadd float %805, 5.000000e-01
  %808 = call float @llvm.floor.f32(float %807) #15
  %809 = fadd float %805, -5.000000e-01
  %810 = call float @llvm.ceil.f32(float %809) #15
  %811 = select i1 %806, float %810, float %808
  %812 = fcmp ule float %811, -1.000000e+00
  %813 = fcmp ugt float %811, 2.550000e+02
  %814 = fptoui float %811 to i8
  %815 = select i1 %812, i8 0, i8 %814
  %816 = xor i1 %812, true
  %817 = sext i1 %816 to i8
  %818 = select i1 %813, i8 %817, i8 %815
  br i1 %35, label %819, label %845

819:                                              ; preds = %756
  %820 = zext i8 %774 to i32
  %821 = zext i8 %789 to i32
  %822 = zext i8 %804 to i32
  %823 = zext i8 %818 to i32
  %824 = icmp eq i8 %818, -1
  br i1 %824, label %836, label %825

825:                                              ; preds = %819
  %826 = mul nuw nsw i32 %823, 257
  %827 = mul nuw nsw i32 %826, %820
  %828 = add nuw nsw i32 %827, 32896
  %829 = lshr i32 %828, 16
  %830 = mul nuw nsw i32 %826, %821
  %831 = add nuw nsw i32 %830, 32896
  %832 = lshr i32 %831, 16
  %833 = mul nuw nsw i32 %826, %822
  %834 = add nuw nsw i32 %833, 32896
  %835 = lshr i32 %834, 16
  br label %836

836:                                              ; preds = %825, %819
  %837 = phi i32 [ %835, %825 ], [ %822, %819 ]
  %838 = phi i32 [ %832, %825 ], [ %821, %819 ]
  %839 = phi i32 [ %829, %825 ], [ %820, %819 ]
  %840 = shl nuw i32 %823, 24
  %841 = shl nuw nsw i32 %839, 16
  %842 = shl nuw nsw i32 %838, 8
  %843 = or i32 %837, %840
  %844 = or i32 %843, %842
  br label %855

845:                                              ; preds = %756
  %846 = zext i8 %818 to i32
  %847 = zext i8 %774 to i32
  %848 = zext i8 %789 to i32
  %849 = zext i8 %804 to i32
  %850 = shl nuw i32 %846, 24
  %851 = shl nuw nsw i32 %847, 16
  %852 = or i32 %850, %851
  %853 = shl nuw nsw i32 %848, 8
  %854 = or i32 %852, %853
  br label %855

855:                                              ; preds = %845, %836
  %856 = phi i32 [ %849, %845 ], [ %841, %836 ]
  %857 = phi i32 [ %854, %845 ], [ %844, %836 ]
  %858 = or i32 %857, %856
  store i32 %858, i32* %727, align 4
  %859 = getelementptr inbounds i32, i32* %727, i64 1
  %860 = add nuw nsw i64 %726, 1
  %861 = load i32, i32* %677, align 8
  %862 = zext i32 %861 to i64
  %863 = icmp ult i64 %860, %862
  br i1 %863, label %725, label %718

864:                                              ; preds = %720, %651
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %657) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %652) #15
  br label %1258

865:                                              ; preds = %461
  br i1 %32, label %866, label %1048

866:                                              ; preds = %865
  %867 = bitcast %struct.avifPixelFormatInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %867) #15
  %868 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %10, i64 0, i32 0
  store i32 -1431655766, i32* %868, align 4
  %869 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %10, i64 0, i32 1
  store i32 -1431655766, i32* %869, align 4
  %870 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %10, i64 0, i32 2
  store i32 -1431655766, i32* %870, align 4
  %871 = load i32, i32* %30, align 4
  call void @avifGetPixelFormatInfo(i32 %871, %struct.avifPixelFormatInfo* nonnull %10) #15
  %872 = bitcast %"class.gfx::Point3F"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %872) #15
  %873 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %11, i64 0, i32 0
  %874 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %11, i64 0, i32 1
  %875 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %11, i64 0, i32 2
  store float 0.000000e+00, float* %873, align 4
  store float 0.000000e+00, float* %874, align 4
  store float 0.000000e+00, float* %875, align 4
  %876 = load i32, i32* %322, align 8
  %877 = shl nsw i32 -1, %876
  %878 = xor i32 %877, -1
  %879 = sitofp i32 %878 to float
  %880 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %881 = load i32, i32* %880, align 4
  %882 = icmp eq i32 %881, 0
  br i1 %882, label %1047, label %883

883:                                              ; preds = %866
  %884 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %885 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %886 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %887 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %888 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %889 = bitcast %"class.gfx::ColorTransform"* %465 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %890 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  br label %891

891:                                              ; preds = %915, %883
  %892 = phi i32 [ %881, %883 ], [ %916, %915 ]
  %893 = phi i32* [ %319, %883 ], [ %917, %915 ]
  %894 = phi i32 [ 0, %883 ], [ %918, %915 ]
  %895 = load i8*, i8** %884, align 8
  %896 = load i32, i32* %885, align 8
  %897 = mul i32 %896, %894
  %898 = zext i32 %897 to i64
  %899 = getelementptr inbounds i8, i8* %895, i64 %898
  %900 = load i8*, i8** %886, align 8
  %901 = icmp eq i8* %900, null
  br i1 %901, label %907, label %902

902:                                              ; preds = %891
  %903 = load i32, i32* %887, align 8
  %904 = mul i32 %903, %894
  %905 = zext i32 %904 to i64
  %906 = getelementptr inbounds i8, i8* %900, i64 %905
  br label %907

907:                                              ; preds = %902, %891
  %908 = phi i8* [ %906, %902 ], [ null, %891 ]
  %909 = load i32, i32* %888, align 8
  %910 = icmp eq i32 %909, 0
  br i1 %910, label %915, label %911

911:                                              ; preds = %907
  %912 = icmp eq i8* %908, null
  br label %920

913:                                              ; preds = %1038
  %914 = load i32, i32* %880, align 4
  br label %915

915:                                              ; preds = %913, %907
  %916 = phi i32 [ %892, %907 ], [ %914, %913 ]
  %917 = phi i32* [ %893, %907 ], [ %1042, %913 ]
  %918 = add nuw i32 %894, 1
  %919 = icmp ult i32 %918, %916
  br i1 %919, label %891, label %1047

920:                                              ; preds = %1038, %911
  %921 = phi i64 [ 0, %911 ], [ %1043, %1038 ]
  %922 = phi i32* [ %893, %911 ], [ %1042, %1038 ]
  %923 = getelementptr inbounds i8, i8* %899, i64 %921
  %924 = load i8, i8* %923, align 1
  %925 = uitofp i8 %924 to float
  %926 = fdiv float %925, %879
  store float %926, float* %873, align 4
  store float 5.000000e-01, float* %874, align 4
  store float 5.000000e-01, float* %875, align 4
  %927 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %889, align 8
  %928 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %927, i64 4
  %929 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %928, align 8
  call void %929(%"class.gfx::ColorTransform"* %465, %"class.gfx::Point3F"* nonnull %11, i64 1) #15
  br i1 %912, label %939, label %930

930:                                              ; preds = %920
  %931 = getelementptr inbounds i8, i8* %908, i64 %921
  %932 = load i8, i8* %931, align 1
  %933 = zext i8 %932 to i32
  %934 = load i32, i32* %890, align 8
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %936, label %939

936:                                              ; preds = %930
  %937 = load i32, i32* %322, align 8
  %938 = call i32 @avifLimitedToFullY(i32 %937, i32 %933) #15
  br label %939

939:                                              ; preds = %936, %930, %920
  %940 = phi i32 [ %938, %936 ], [ %933, %930 ], [ %878, %920 ]
  %941 = sitofp i32 %940 to float
  %942 = fdiv float %941, %879
  %943 = load float, float* %873, align 4
  %944 = fmul float %943, 2.550000e+02
  %945 = fcmp ult float %944, 0.000000e+00
  %946 = fadd float %944, 5.000000e-01
  %947 = call float @llvm.floor.f32(float %946) #15
  %948 = fadd float %944, -5.000000e-01
  %949 = call float @llvm.ceil.f32(float %948) #15
  %950 = select i1 %945, float %949, float %947
  %951 = fcmp ule float %950, -1.000000e+00
  %952 = fcmp ugt float %950, 2.550000e+02
  %953 = fptoui float %950 to i8
  %954 = select i1 %951, i8 0, i8 %953
  %955 = xor i1 %951, true
  %956 = sext i1 %955 to i8
  %957 = select i1 %952, i8 %956, i8 %954
  %958 = load float, float* %874, align 4
  %959 = fmul float %958, 2.550000e+02
  %960 = fcmp ult float %959, 0.000000e+00
  %961 = fadd float %959, 5.000000e-01
  %962 = call float @llvm.floor.f32(float %961) #15
  %963 = fadd float %959, -5.000000e-01
  %964 = call float @llvm.ceil.f32(float %963) #15
  %965 = select i1 %960, float %964, float %962
  %966 = fcmp ule float %965, -1.000000e+00
  %967 = fcmp ugt float %965, 2.550000e+02
  %968 = fptoui float %965 to i8
  %969 = select i1 %966, i8 0, i8 %968
  %970 = xor i1 %966, true
  %971 = sext i1 %970 to i8
  %972 = select i1 %967, i8 %971, i8 %969
  %973 = load float, float* %875, align 4
  %974 = fmul float %973, 2.550000e+02
  %975 = fcmp ult float %974, 0.000000e+00
  %976 = fadd float %974, 5.000000e-01
  %977 = call float @llvm.floor.f32(float %976) #15
  %978 = fadd float %974, -5.000000e-01
  %979 = call float @llvm.ceil.f32(float %978) #15
  %980 = select i1 %975, float %979, float %977
  %981 = fcmp ule float %980, -1.000000e+00
  %982 = fcmp ugt float %980, 2.550000e+02
  %983 = fptoui float %980 to i8
  %984 = select i1 %981, i8 0, i8 %983
  %985 = xor i1 %981, true
  %986 = sext i1 %985 to i8
  %987 = select i1 %982, i8 %986, i8 %984
  %988 = fmul float %942, 2.550000e+02
  %989 = fcmp ult float %988, 0.000000e+00
  %990 = fadd float %988, 5.000000e-01
  %991 = call float @llvm.floor.f32(float %990) #15
  %992 = fadd float %988, -5.000000e-01
  %993 = call float @llvm.ceil.f32(float %992) #15
  %994 = select i1 %989, float %993, float %991
  %995 = fcmp ule float %994, -1.000000e+00
  %996 = fcmp ugt float %994, 2.550000e+02
  %997 = fptoui float %994 to i8
  %998 = select i1 %995, i8 0, i8 %997
  %999 = xor i1 %995, true
  %1000 = sext i1 %999 to i8
  %1001 = select i1 %996, i8 %1000, i8 %998
  br i1 %35, label %1002, label %1028

1002:                                             ; preds = %939
  %1003 = zext i8 %957 to i32
  %1004 = zext i8 %972 to i32
  %1005 = zext i8 %987 to i32
  %1006 = zext i8 %1001 to i32
  %1007 = icmp eq i8 %1001, -1
  br i1 %1007, label %1019, label %1008

1008:                                             ; preds = %1002
  %1009 = mul nuw nsw i32 %1006, 257
  %1010 = mul nuw nsw i32 %1009, %1003
  %1011 = add nuw nsw i32 %1010, 32896
  %1012 = lshr i32 %1011, 16
  %1013 = mul nuw nsw i32 %1009, %1004
  %1014 = add nuw nsw i32 %1013, 32896
  %1015 = lshr i32 %1014, 16
  %1016 = mul nuw nsw i32 %1009, %1005
  %1017 = add nuw nsw i32 %1016, 32896
  %1018 = lshr i32 %1017, 16
  br label %1019

1019:                                             ; preds = %1008, %1002
  %1020 = phi i32 [ %1018, %1008 ], [ %1005, %1002 ]
  %1021 = phi i32 [ %1015, %1008 ], [ %1004, %1002 ]
  %1022 = phi i32 [ %1012, %1008 ], [ %1003, %1002 ]
  %1023 = shl nuw i32 %1006, 24
  %1024 = shl nuw nsw i32 %1022, 16
  %1025 = shl nuw nsw i32 %1021, 8
  %1026 = or i32 %1020, %1023
  %1027 = or i32 %1026, %1025
  br label %1038

1028:                                             ; preds = %939
  %1029 = zext i8 %1001 to i32
  %1030 = zext i8 %957 to i32
  %1031 = zext i8 %972 to i32
  %1032 = zext i8 %987 to i32
  %1033 = shl nuw i32 %1029, 24
  %1034 = shl nuw nsw i32 %1030, 16
  %1035 = or i32 %1033, %1034
  %1036 = shl nuw nsw i32 %1031, 8
  %1037 = or i32 %1035, %1036
  br label %1038

1038:                                             ; preds = %1028, %1019
  %1039 = phi i32 [ %1032, %1028 ], [ %1024, %1019 ]
  %1040 = phi i32 [ %1037, %1028 ], [ %1027, %1019 ]
  %1041 = or i32 %1040, %1039
  store i32 %1041, i32* %922, align 4
  %1042 = getelementptr inbounds i32, i32* %922, i64 1
  %1043 = add nuw nsw i64 %921, 1
  %1044 = load i32, i32* %888, align 8
  %1045 = zext i32 %1044 to i64
  %1046 = icmp ult i64 %1043, %1045
  br i1 %1046, label %920, label %913

1047:                                             ; preds = %915, %866
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %872) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %867) #15
  br label %1258

1048:                                             ; preds = %865
  %1049 = bitcast %struct.avifPixelFormatInfo* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1049) #15
  %1050 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %22, i64 0, i32 0
  store i32 -1431655766, i32* %1050, align 4
  %1051 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %22, i64 0, i32 1
  store i32 -1431655766, i32* %1051, align 4
  %1052 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %22, i64 0, i32 2
  store i32 -1431655766, i32* %1052, align 4
  %1053 = load i32, i32* %30, align 4
  call void @avifGetPixelFormatInfo(i32 %1053, %struct.avifPixelFormatInfo* nonnull %22) #15
  %1054 = bitcast %"class.gfx::Point3F"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1054) #15
  %1055 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %23, i64 0, i32 0
  %1056 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %23, i64 0, i32 1
  %1057 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %23, i64 0, i32 2
  store float 0.000000e+00, float* %1055, align 4
  store float 0.000000e+00, float* %1056, align 4
  store float 0.000000e+00, float* %1057, align 4
  %1058 = load i32, i32* %322, align 8
  %1059 = shl nsw i32 -1, %1058
  %1060 = xor i32 %1059, -1
  %1061 = sitofp i32 %1060 to float
  %1062 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %1063 = load i32, i32* %1062, align 4
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1257, label %1065

1065:                                             ; preds = %1048
  %1066 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %1067 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %1068 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %1069 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %1070 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %1071 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %1072 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %1073 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %1074 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %1075 = bitcast %"class.gfx::ColorTransform"* %465 to void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)***
  %1076 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  br label %1077

1077:                                             ; preds = %1113, %1065
  %1078 = phi i32 [ %1063, %1065 ], [ %1114, %1113 ]
  %1079 = phi i32* [ %319, %1065 ], [ %1115, %1113 ]
  %1080 = phi i32 [ 0, %1065 ], [ %1116, %1113 ]
  %1081 = load i32, i32* %1052, align 4
  %1082 = lshr i32 %1080, %1081
  %1083 = load i8*, i8** %1066, align 8
  %1084 = load i32, i32* %1067, align 8
  %1085 = mul i32 %1084, %1080
  %1086 = zext i32 %1085 to i64
  %1087 = getelementptr inbounds i8, i8* %1083, i64 %1086
  %1088 = load i8*, i8** %1068, align 8
  %1089 = load i32, i32* %1069, align 4
  %1090 = mul i32 %1089, %1082
  %1091 = zext i32 %1090 to i64
  %1092 = getelementptr inbounds i8, i8* %1088, i64 %1091
  %1093 = load i8*, i8** %1070, align 8
  %1094 = load i32, i32* %1071, align 8
  %1095 = mul i32 %1094, %1082
  %1096 = zext i32 %1095 to i64
  %1097 = getelementptr inbounds i8, i8* %1093, i64 %1096
  %1098 = load i8*, i8** %1072, align 8
  %1099 = icmp eq i8* %1098, null
  br i1 %1099, label %1105, label %1100

1100:                                             ; preds = %1077
  %1101 = load i32, i32* %1073, align 8
  %1102 = mul i32 %1101, %1080
  %1103 = zext i32 %1102 to i64
  %1104 = getelementptr inbounds i8, i8* %1098, i64 %1103
  br label %1105

1105:                                             ; preds = %1100, %1077
  %1106 = phi i8* [ %1104, %1100 ], [ null, %1077 ]
  %1107 = load i32, i32* %1074, align 8
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1113, label %1109

1109:                                             ; preds = %1105
  %1110 = icmp eq i8* %1106, null
  br label %1118

1111:                                             ; preds = %1248
  %1112 = load i32, i32* %1062, align 4
  br label %1113

1113:                                             ; preds = %1111, %1105
  %1114 = phi i32 [ %1078, %1105 ], [ %1112, %1111 ]
  %1115 = phi i32* [ %1079, %1105 ], [ %1252, %1111 ]
  %1116 = add nuw i32 %1080, 1
  %1117 = icmp ult i32 %1116, %1114
  br i1 %1117, label %1077, label %1257

1118:                                             ; preds = %1248, %1109
  %1119 = phi i64 [ 0, %1109 ], [ %1253, %1248 ]
  %1120 = phi i32* [ %1079, %1109 ], [ %1252, %1248 ]
  %1121 = load i32, i32* %1051, align 4
  %1122 = trunc i64 %1119 to i32
  %1123 = lshr i32 %1122, %1121
  %1124 = getelementptr inbounds i8, i8* %1087, i64 %1119
  %1125 = load i8, i8* %1124, align 1
  %1126 = uitofp i8 %1125 to float
  %1127 = fdiv float %1126, %1061
  store float %1127, float* %1055, align 4
  %1128 = sext i32 %1123 to i64
  %1129 = getelementptr inbounds i8, i8* %1092, i64 %1128
  %1130 = load i8, i8* %1129, align 1
  %1131 = uitofp i8 %1130 to float
  %1132 = fdiv float %1131, %1061
  store float %1132, float* %1056, align 4
  %1133 = getelementptr inbounds i8, i8* %1097, i64 %1128
  %1134 = load i8, i8* %1133, align 1
  %1135 = uitofp i8 %1134 to float
  %1136 = fdiv float %1135, %1061
  store float %1136, float* %1057, align 4
  %1137 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)**, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*** %1075, align 8
  %1138 = getelementptr inbounds void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %1137, i64 4
  %1139 = load void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)*, void (%"class.gfx::ColorTransform"*, %"class.gfx::Point3F"*, i64)** %1138, align 8
  call void %1139(%"class.gfx::ColorTransform"* %465, %"class.gfx::Point3F"* nonnull %23, i64 1) #15
  br i1 %1110, label %1149, label %1140

1140:                                             ; preds = %1118
  %1141 = getelementptr inbounds i8, i8* %1106, i64 %1119
  %1142 = load i8, i8* %1141, align 1
  %1143 = zext i8 %1142 to i32
  %1144 = load i32, i32* %1076, align 8
  %1145 = icmp eq i32 %1144, 0
  br i1 %1145, label %1146, label %1149

1146:                                             ; preds = %1140
  %1147 = load i32, i32* %322, align 8
  %1148 = call i32 @avifLimitedToFullY(i32 %1147, i32 %1143) #15
  br label %1149

1149:                                             ; preds = %1146, %1140, %1118
  %1150 = phi i32 [ %1148, %1146 ], [ %1143, %1140 ], [ %1060, %1118 ]
  %1151 = sitofp i32 %1150 to float
  %1152 = fdiv float %1151, %1061
  %1153 = load float, float* %1055, align 4
  %1154 = fmul float %1153, 2.550000e+02
  %1155 = fcmp ult float %1154, 0.000000e+00
  %1156 = fadd float %1154, 5.000000e-01
  %1157 = call float @llvm.floor.f32(float %1156) #15
  %1158 = fadd float %1154, -5.000000e-01
  %1159 = call float @llvm.ceil.f32(float %1158) #15
  %1160 = select i1 %1155, float %1159, float %1157
  %1161 = fcmp ule float %1160, -1.000000e+00
  %1162 = fcmp ugt float %1160, 2.550000e+02
  %1163 = fptoui float %1160 to i8
  %1164 = select i1 %1161, i8 0, i8 %1163
  %1165 = xor i1 %1161, true
  %1166 = sext i1 %1165 to i8
  %1167 = select i1 %1162, i8 %1166, i8 %1164
  %1168 = load float, float* %1056, align 4
  %1169 = fmul float %1168, 2.550000e+02
  %1170 = fcmp ult float %1169, 0.000000e+00
  %1171 = fadd float %1169, 5.000000e-01
  %1172 = call float @llvm.floor.f32(float %1171) #15
  %1173 = fadd float %1169, -5.000000e-01
  %1174 = call float @llvm.ceil.f32(float %1173) #15
  %1175 = select i1 %1170, float %1174, float %1172
  %1176 = fcmp ule float %1175, -1.000000e+00
  %1177 = fcmp ugt float %1175, 2.550000e+02
  %1178 = fptoui float %1175 to i8
  %1179 = select i1 %1176, i8 0, i8 %1178
  %1180 = xor i1 %1176, true
  %1181 = sext i1 %1180 to i8
  %1182 = select i1 %1177, i8 %1181, i8 %1179
  %1183 = load float, float* %1057, align 4
  %1184 = fmul float %1183, 2.550000e+02
  %1185 = fcmp ult float %1184, 0.000000e+00
  %1186 = fadd float %1184, 5.000000e-01
  %1187 = call float @llvm.floor.f32(float %1186) #15
  %1188 = fadd float %1184, -5.000000e-01
  %1189 = call float @llvm.ceil.f32(float %1188) #15
  %1190 = select i1 %1185, float %1189, float %1187
  %1191 = fcmp ule float %1190, -1.000000e+00
  %1192 = fcmp ugt float %1190, 2.550000e+02
  %1193 = fptoui float %1190 to i8
  %1194 = select i1 %1191, i8 0, i8 %1193
  %1195 = xor i1 %1191, true
  %1196 = sext i1 %1195 to i8
  %1197 = select i1 %1192, i8 %1196, i8 %1194
  %1198 = fmul float %1152, 2.550000e+02
  %1199 = fcmp ult float %1198, 0.000000e+00
  %1200 = fadd float %1198, 5.000000e-01
  %1201 = call float @llvm.floor.f32(float %1200) #15
  %1202 = fadd float %1198, -5.000000e-01
  %1203 = call float @llvm.ceil.f32(float %1202) #15
  %1204 = select i1 %1199, float %1203, float %1201
  %1205 = fcmp ule float %1204, -1.000000e+00
  %1206 = fcmp ugt float %1204, 2.550000e+02
  %1207 = fptoui float %1204 to i8
  %1208 = select i1 %1205, i8 0, i8 %1207
  %1209 = xor i1 %1205, true
  %1210 = sext i1 %1209 to i8
  %1211 = select i1 %1206, i8 %1210, i8 %1208
  br i1 %35, label %1212, label %1238

1212:                                             ; preds = %1149
  %1213 = zext i8 %1167 to i32
  %1214 = zext i8 %1182 to i32
  %1215 = zext i8 %1197 to i32
  %1216 = zext i8 %1211 to i32
  %1217 = icmp eq i8 %1211, -1
  br i1 %1217, label %1229, label %1218

1218:                                             ; preds = %1212
  %1219 = mul nuw nsw i32 %1216, 257
  %1220 = mul nuw nsw i32 %1219, %1213
  %1221 = add nuw nsw i32 %1220, 32896
  %1222 = lshr i32 %1221, 16
  %1223 = mul nuw nsw i32 %1219, %1214
  %1224 = add nuw nsw i32 %1223, 32896
  %1225 = lshr i32 %1224, 16
  %1226 = mul nuw nsw i32 %1219, %1215
  %1227 = add nuw nsw i32 %1226, 32896
  %1228 = lshr i32 %1227, 16
  br label %1229

1229:                                             ; preds = %1218, %1212
  %1230 = phi i32 [ %1228, %1218 ], [ %1215, %1212 ]
  %1231 = phi i32 [ %1225, %1218 ], [ %1214, %1212 ]
  %1232 = phi i32 [ %1222, %1218 ], [ %1213, %1212 ]
  %1233 = shl nuw i32 %1216, 24
  %1234 = shl nuw nsw i32 %1232, 16
  %1235 = shl nuw nsw i32 %1231, 8
  %1236 = or i32 %1230, %1233
  %1237 = or i32 %1236, %1235
  br label %1248

1238:                                             ; preds = %1149
  %1239 = zext i8 %1211 to i32
  %1240 = zext i8 %1167 to i32
  %1241 = zext i8 %1182 to i32
  %1242 = zext i8 %1197 to i32
  %1243 = shl nuw i32 %1239, 24
  %1244 = shl nuw nsw i32 %1240, 16
  %1245 = or i32 %1243, %1244
  %1246 = shl nuw nsw i32 %1241, 8
  %1247 = or i32 %1245, %1246
  br label %1248

1248:                                             ; preds = %1238, %1229
  %1249 = phi i32 [ %1242, %1238 ], [ %1234, %1229 ]
  %1250 = phi i32 [ %1247, %1238 ], [ %1237, %1229 ]
  %1251 = or i32 %1250, %1249
  store i32 %1251, i32* %1120, align 4
  %1252 = getelementptr inbounds i32, i32* %1120, i64 1
  %1253 = add nuw nsw i64 %1119, 1
  %1254 = load i32, i32* %1074, align 8
  %1255 = zext i32 %1254 to i64
  %1256 = icmp ult i64 %1253, %1255
  br i1 %1256, label %1118, label %1111

1257:                                             ; preds = %1113, %1048
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1054) #15
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1049) #15
  br label %1258

1258:                                             ; preds = %345, %343, %353, %427, %422, %413, %1047, %1257, %650, %864, %184, %315
  %1259 = phi i1 [ true, %315 ], [ true, %184 ], [ true, %1047 ], [ true, %1257 ], [ true, %650 ], [ true, %864 ], [ true, %413 ], [ true, %422 ], [ true, %427 ], [ false, %353 ], [ false, %343 ], [ false, %345 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %29) #15
  ret i1 %1259
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder17ColorCorrectImageEPNS_10ImageFrameE(%"class.blink::AVIFImageDecoder"*, %"class.blink::ImageFrame"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkPixmap, align 8
  %4 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0
  %5 = tail call %"class.blink::ColorProfileTransform"* @_ZN5blink12ImageDecoder14ColorTransformEv(%"class.blink::ImageDecoder"* %4) #15
  %6 = icmp eq %"class.blink::ColorProfileTransform"* %5, null
  br i1 %6, label %80, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !4
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 9
  %13 = load i8, i8* %12, align 8, !range !4
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i32 1, i32 2
  br label %16

16:                                               ; preds = %7, %11
  %17 = phi i32 [ 1, %7 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 6
  %19 = load i8, i8* %18, align 1, !range !4
  %20 = icmp eq i8 %19, 0
  %21 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %22 = bitcast %"class.blink::IntSize"* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = lshr i64 %23, 32
  %25 = trunc i64 %24 to i32
  %26 = icmp sgt i32 %25, 0
  br i1 %20, label %34, label %27

27:                                               ; preds = %16
  br i1 %26, label %28, label %80

28:                                               ; preds = %27
  %29 = bitcast %class.SkPixmap* %3 to i8*
  %30 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0
  %31 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %3, i64 0, i32 0
  %32 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %3, i64 0, i32 1
  %33 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %38

34:                                               ; preds = %16
  br i1 %26, label %35, label %80

35:                                               ; preds = %34
  %36 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0, i32 1, i32 0
  %37 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0, i32 1, i32 1
  br label %64

38:                                               ; preds = %28, %53
  %39 = phi i64 [ 0, %28 ], [ %60, %53 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %29) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 40, i1 false) #15
  %40 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %30, %class.SkPixmap* nonnull %3) #15
  %41 = load i8*, i8** %31, align 8
  %42 = load i64, i64* %32, align 8
  %43 = mul i64 %42, %39
  %44 = getelementptr inbounds i8, i8* %41, i64 %43
  %45 = load %class.SkColorSpace*, %class.SkColorSpace** %33, align 8
  %46 = icmp eq %class.SkColorSpace* %45, null
  br i1 %46, label %53, label %47

47:                                               ; preds = %38
  %48 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 -1 acq_rel
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = bitcast %class.SkColorSpace* %45 to i8*
  call void @_ZdlPv(i8* %52) #16
  br label %53

53:                                               ; preds = %38, %47, %51
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %29) #15
  %54 = call %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10SrcProfileEv(%"class.blink::ColorProfileTransform"* nonnull %5) #15
  %55 = call %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10DstProfileEv(%"class.blink::ColorProfileTransform"* nonnull %5) #15
  %56 = load i64, i64* %22, align 4
  %57 = shl i64 %56, 32
  %58 = ashr exact i64 %57, 32
  %59 = call zeroext i1 @skcms_Transform(i8* %44, i32 32, i32 %17, %struct.skcms_ICCProfile* %54, i8* %44, i32 32, i32 %17, %struct.skcms_ICCProfile* %55, i64 %58) #15
  %60 = add nuw nsw i64 %39, 1
  %61 = load i64, i64* %22, align 4
  %62 = ashr i64 %61, 32
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %38, label %80

64:                                               ; preds = %35, %64
  %65 = phi i64 [ 0, %35 ], [ %76, %64 ]
  %66 = load i8*, i8** %36, align 8
  %67 = load i64, i64* %37, align 8
  %68 = mul i64 %67, %65
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = tail call %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10SrcProfileEv(%"class.blink::ColorProfileTransform"* nonnull %5) #15
  %71 = tail call %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10DstProfileEv(%"class.blink::ColorProfileTransform"* nonnull %5) #15
  %72 = load i64, i64* %22, align 4
  %73 = shl i64 %72, 32
  %74 = ashr exact i64 %73, 32
  %75 = tail call zeroext i1 @skcms_Transform(i8* %69, i32 13, i32 %17, %struct.skcms_ICCProfile* %70, i8* %69, i32 13, i32 %17, %struct.skcms_ICCProfile* %71, i64 %74) #15
  %76 = add nuw nsw i64 %65, 1
  %77 = load i64, i64* %22, align 4
  %78 = ashr i64 %77, 32
  %79 = icmp slt i64 %76, %78
  br i1 %79, label %64, label %80

80:                                               ; preds = %53, %64, %27, %34, %2
  ret void
}

declare void @_ZN5blink10ImageFrame11SetHasAlphaEb(%"class.blink::ImageFrame"*, i1 zeroext) local_unnamed_addr #4

declare void @_ZN5blink10ImageFrame9SetStatusENS0_6StatusE(%"class.blink::ImageFrame"*, i32) local_unnamed_addr #4

declare zeroext i1 @_ZN5blink12ImageDecoder20PostDecodeProcessingEm(%"class.blink::ImageDecoder"*, i64) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink16AVIFImageDecoder27CanReusePreviousFrameBufferEm(%"class.blink::AVIFImageDecoder"* nocapture readnone, i64) unnamed_addr #6 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink16AVIFImageDecoder21ReadFromSegmentReaderEP6avifIOjmmP10avifROData(%struct.avifIO* nocapture readonly, i32, i64, i64, %struct.avifROData* nocapture) #0 align 2 {
  %6 = alloca i8*, align 8
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %8, label %93

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.avifIO, %struct.avifIO* %0, i64 0, i32 5
  %10 = bitcast i8** %9 to %"struct.blink::AVIFImageDecoder::AvifIOData"**
  %11 = load %"struct.blink::AVIFImageDecoder::AvifIOData"*, %"struct.blink::AVIFImageDecoder::AvifIOData"** %10, align 8
  %12 = getelementptr inbounds %"struct.blink::AVIFImageDecoder::AvifIOData", %"struct.blink::AVIFImageDecoder::AvifIOData"* %11, i64 0, i32 0
  %13 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %12, align 8
  %14 = bitcast %"class.blink::SegmentReader"* %13 to i64 (%"class.blink::SegmentReader"*)***
  %15 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %14, align 8
  %16 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %15, i64 2
  %17 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %16, align 8
  %18 = tail call i64 %17(%"class.blink::SegmentReader"* %13) #15
  %19 = icmp ult i64 %18, %2
  br i1 %19, label %20, label %25

20:                                               ; preds = %8
  %21 = getelementptr inbounds %"struct.blink::AVIFImageDecoder::AvifIOData", %"struct.blink::AVIFImageDecoder::AvifIOData"* %11, i64 0, i32 2
  %22 = load i8, i8* %21, align 8, !range !4
  %23 = icmp eq i8 %22, 0
  %24 = select i1 %23, i32 23, i32 22
  br label %93

25:                                               ; preds = %8
  %26 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %12, align 8
  %27 = bitcast %"class.blink::SegmentReader"* %26 to i64 (%"class.blink::SegmentReader"*)***
  %28 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %27, align 8
  %29 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %28, i64 2
  %30 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %29, align 8
  %31 = tail call i64 %30(%"class.blink::SegmentReader"* %26) #15
  %32 = sub i64 %31, %2
  %33 = icmp ult i64 %32, %3
  br i1 %33, label %34, label %38

34:                                               ; preds = %25
  %35 = getelementptr inbounds %"struct.blink::AVIFImageDecoder::AvifIOData", %"struct.blink::AVIFImageDecoder::AvifIOData"* %11, i64 0, i32 2
  %36 = load i8, i8* %35, align 8, !range !4
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %93, label %38

38:                                               ; preds = %34, %25
  %39 = phi i64 [ %3, %25 ], [ %32, %34 ]
  %40 = getelementptr inbounds %struct.avifROData, %struct.avifROData* %4, i64 0, i32 1
  store i64 %39, i64* %40, align 8
  %41 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #15
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %42 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %12, align 8
  %43 = bitcast %"class.blink::SegmentReader"* %42 to i64 (%"class.blink::SegmentReader"*, i8**, i64)***
  %44 = load i64 (%"class.blink::SegmentReader"*, i8**, i64)**, i64 (%"class.blink::SegmentReader"*, i8**, i64)*** %43, align 8
  %45 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*, i8**, i64)*, i64 (%"class.blink::SegmentReader"*, i8**, i64)** %44, i64 3
  %46 = load i64 (%"class.blink::SegmentReader"*, i8**, i64)*, i64 (%"class.blink::SegmentReader"*, i8**, i64)** %45, align 8
  %47 = call i64 %46(%"class.blink::SegmentReader"* %42, i8** nonnull dereferenceable(8) %6, i64 %2) #15
  %48 = icmp ult i64 %47, %39
  br i1 %48, label %51, label %49

49:                                               ; preds = %38
  %50 = bitcast i8** %6 to i64*
  br label %89

51:                                               ; preds = %38
  %52 = getelementptr inbounds %"struct.blink::AVIFImageDecoder::AvifIOData", %"struct.blink::AVIFImageDecoder::AvifIOData"* %11, i64 0, i32 1
  %53 = bitcast %"class.std::__1::vector"* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %"struct.blink::AVIFImageDecoder::AvifIOData", %"struct.blink::AVIFImageDecoder::AvifIOData"* %11, i64 0, i32 1, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  store i64 %54, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.blink::AVIFImageDecoder::AvifIOData", %"struct.blink::AVIFImageDecoder::AvifIOData"* %11, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %59, %54
  %61 = icmp ult i64 %60, %39
  %62 = inttoptr i64 %54 to i8*
  br i1 %61, label %63, label %70

63:                                               ; preds = %51
  %64 = call i8* @_Znwm(i64 %39) #16
  %65 = ptrtoint i8* %64 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %39
  %67 = ptrtoint i8* %66 to i64
  store i64 %65, i64* %53, align 8
  store i64 %65, i64* %56, align 8
  store i64 %67, i64* %58, align 8
  %68 = icmp eq i64 %54, 0
  br i1 %68, label %70, label %69

69:                                               ; preds = %63
  call void @_ZdlPv(i8* nonnull %62) #16
  br label %70

70:                                               ; preds = %69, %63, %51
  br label %71

71:                                               ; preds = %70, %71
  %72 = phi i64 [ %86, %71 ], [ %2, %70 ]
  %73 = phi i64 [ %87, %71 ], [ %39, %70 ]
  %74 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %12, align 8
  %75 = bitcast %"class.blink::SegmentReader"* %74 to i64 (%"class.blink::SegmentReader"*, i8**, i64)***
  %76 = load i64 (%"class.blink::SegmentReader"*, i8**, i64)**, i64 (%"class.blink::SegmentReader"*, i8**, i64)*** %75, align 8
  %77 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*, i8**, i64)*, i64 (%"class.blink::SegmentReader"*, i8**, i64)** %76, i64 3
  %78 = load i64 (%"class.blink::SegmentReader"*, i8**, i64)*, i64 (%"class.blink::SegmentReader"*, i8**, i64)** %77, align 8
  %79 = call i64 %78(%"class.blink::SegmentReader"* %74, i8** nonnull dereferenceable(8) %6, i64 %72) #15
  %80 = icmp ult i64 %73, %79
  %81 = select i1 %80, i64 %73, i64 %79
  %82 = load i8*, i8** %55, align 8
  %83 = load i8*, i8** %6, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %81
  %85 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %52, i8* %82, i8* %83, i8* %84)
  %86 = add i64 %81, %72
  %87 = sub i64 %73, %81
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %71

89:                                               ; preds = %71, %49
  %90 = phi i64* [ %50, %49 ], [ %53, %71 ]
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %struct.avifROData* %4 to i64*
  store i64 %91, i64* %92, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #15
  br label %93

93:                                               ; preds = %20, %34, %89, %5
  %94 = phi i32 [ 22, %5 ], [ %24, %20 ], [ 0, %89 ], [ 23, %34 ]
  ret i32 %94
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !19
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !19
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !22, !noalias !19
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !22, !noalias !19
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !19
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !19
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !22, !noalias !19
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !22, !noalias !19
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !19
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !19
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !22, !noalias !19
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !22, !noalias !19
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !19
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !19
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !22, !noalias !19
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !22, !noalias !19
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !24

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !19
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !19
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !22, !noalias !19
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !22, !noalias !19
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !25

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !27

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !28
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !28
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !31, !noalias !28
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !31, !noalias !28
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !28
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !28
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !31, !noalias !28
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !31, !noalias !28
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !28
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !28
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !31, !noalias !28
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !31, !noalias !28
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !28
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !28
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !31, !noalias !28
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !31, !noalias !28
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !33

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !28
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !28
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !31, !noalias !28
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !31, !noalias !28
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !34

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #15
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !35

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !36
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !36
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !39, !noalias !36
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !39, !noalias !36
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !36
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !36
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !39, !noalias !36
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !39, !noalias !36
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !36
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !36
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !39, !noalias !36
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !39, !noalias !36
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !36
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !36
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !39, !noalias !36
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !39, !noalias !36
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !41

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !36
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !36
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !39, !noalias !36
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !39, !noalias !36
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !42

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !43

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #17
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #16
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !44
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !44
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !47, !noalias !44
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !47, !noalias !44
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !44
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !44
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !47, !noalias !44
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !47, !noalias !44
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !44
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !44
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !47, !noalias !44
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !47, !noalias !44
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !44
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !44
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !47, !noalias !44
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !47, !noalias !44
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !49

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !44
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !44
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !47, !noalias !44
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !47, !noalias !44
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !50

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !51

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #15
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !52
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !52
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !55, !noalias !52
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !55, !noalias !52
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !52
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !52
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !55, !noalias !52
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !55, !noalias !52
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !52
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !52
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !55, !noalias !52
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !55, !noalias !52
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !52
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !52
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !55, !noalias !52
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !55, !noalias !52
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !57

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !52
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !52
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !55, !noalias !52
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !55, !noalias !52
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !58

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !59

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #16
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

declare %struct.avifDecoder* @avifDecoderCreate() local_unnamed_addr #4

declare void @avifDecoderDestroy(%struct.avifDecoder*) #4

declare i32 @avifDecoderSetSource(%struct.avifDecoder*, i32) local_unnamed_addr #4

declare void @avifDecoderSetIO(%struct.avifDecoder*, %struct.avifIO*) local_unnamed_addr #4

declare i32 @avifDecoderParse(%struct.avifDecoder*) local_unnamed_addr #4

declare void @avifGetPixelFormatInfo(i32, %struct.avifPixelFormatInfo*) local_unnamed_addr #4

declare %"class.blink::ColorProfile"* @_ZN5blink12ColorProfile6CreateEPKvm(i8*, i64) local_unnamed_addr #4

declare void @_ZN5blink12ImageDecoder23SetEmbeddedColorProfileENSt3__110unique_ptrINS_12ColorProfileENS1_14default_deleteIS3_EEEE(%"class.blink::ImageDecoder"*, %"class.blink::ColorProfile"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNK3gfx10ColorSpace17GetAsFullRangeRGBEv(%"class.gfx::ColorSpace"* sret, %"class.gfx::ColorSpace"*) local_unnamed_addr #4

declare void @_ZNK3gfx10ColorSpace14ToSkColorSpaceEv(%class.sk_sp.1* sret, %"class.gfx::ColorSpace"*) local_unnamed_addr #4

declare void @_ZNK12SkColorSpace9toProfileEP16skcms_ICCProfile(%class.SkColorSpace*, %struct.skcms_ICCProfile*) local_unnamed_addr #4

declare zeroext i1 @_ZNK3gfx10ColorSpace17ToSkYUVColorSpaceEiP15SkYUVColorSpace(%"class.gfx::ColorSpace"*, i32, i32*) local_unnamed_addr #4

declare %"class.blink::ColorProfileTransform"* @_ZN5blink12ImageDecoder14ColorTransformEv(%"class.blink::ImageDecoder"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12ImageDecoder7SetSizeEjj(%"class.blink::ImageDecoder"*, i32, i32) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.blink::ImageDecoder"* %0 to i1 (%"class.blink::ImageDecoder"*)***
  %5 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %5, i64 3
  %7 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.blink::ImageDecoder"* %0) #15
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  %13 = select i1 %12, i32 8, i32 4
  br label %14

14:                                               ; preds = %9, %3
  %15 = phi i32 [ 4, %3 ], [ %13, %9 ]
  %16 = lshr i32 %1, 31
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %41, label %18

18:                                               ; preds = %14
  %19 = icmp slt i32 %1, 0
  %20 = sub i32 0, %1
  %21 = select i1 %19, i32 %20, i32 %1
  %22 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %21, i32 %2) #15
  %23 = extractvalue { i32, i1 } %22, 1
  %24 = extractvalue { i32, i1 } %22, 0
  %25 = add nuw nsw i32 %16, 2147483647
  %26 = icmp ugt i32 %24, %25
  %27 = or i1 %23, %26
  %28 = sub i32 0, %24
  %29 = select i1 %19, i32 %28, i32 %24
  br i1 %27, label %41, label %30

30:                                               ; preds = %18
  %31 = icmp slt i32 %29, 0
  %32 = sub i32 0, %29
  %33 = select i1 %31, i32 %32, i32 %29
  %34 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %33, i32 %15) #15
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = lshr i32 %29, 31
  %38 = add nuw i32 %37, 2147483647
  %39 = icmp ugt i32 %36, %38
  %40 = or i1 %35, %39
  br i1 %40, label %41, label %46

41:                                               ; preds = %14, %18, %30
  %42 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %4, align 8
  %43 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %42, i64 21
  %44 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %43, align 8
  %45 = tail call zeroext i1 %44(%"class.blink::ImageDecoder"* %0) #15
  br label %54

46:                                               ; preds = %30
  %47 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 12
  %48 = bitcast %"class.blink::IntSize"* %47 to i64*
  %49 = zext i32 %2 to i64
  %50 = shl nuw i64 %49, 32
  %51 = zext i32 %1 to i64
  %52 = or i64 %50, %51
  store i64 %52, i64* %48, align 4
  %53 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 13
  store i8 1, i8* %53, align 4
  br label %54

54:                                               ; preds = %46, %41
  %55 = phi i1 [ %45, %41 ], [ true, %46 ]
  ret i1 %55
}

declare i32 @avifDecoderNthImage(%struct.avifDecoder*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16AVIFImageDecoder16CropDecodedImageEv(%"class.blink::AVIFImageDecoder"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 18
  %3 = bitcast %struct.avifImage** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17
  %6 = bitcast %struct.avifImage* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %4, i64 200, i1 false)
  %7 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 0, i32 12
  %8 = bitcast %"class.blink::IntSize"* %7 to i64*
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  %11 = lshr i64 %9, 32
  %12 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %5, i64 0, i32 0
  store i32 %10, i32* %12, align 8
  %13 = trunc i64 %11 to i32
  %14 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, 7
  %18 = lshr i32 %17, 3
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 7, i64 0
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = mul nsw i64 %25, %22
  %27 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 15
  %28 = load i32, i32* %27, align 8
  %29 = sext i32 %28 to i64
  %30 = mul nsw i64 %29, %19
  %31 = add i64 %30, %26
  %32 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 6, i64 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %31
  store i8* %34, i8** %32, align 8
  %35 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 4
  br i1 %37, label %68, label %38

38:                                               ; preds = %1
  %39 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 7
  %40 = load i8, i8* %39, align 2
  %41 = zext i8 %40 to i32
  %42 = add nsw i32 %28, %41
  %43 = ashr i32 %42, %41
  %44 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 8
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nsw i32 %21, %46
  %48 = ashr i32 %47, %46
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 7, i64 1
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = mul nsw i64 %49, %52
  %54 = sext i32 %43 to i64
  %55 = mul nsw i64 %54, %19
  %56 = add i64 %53, %55
  %57 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 6, i64 1
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 %56
  store i8* %59, i8** %57, align 8
  %60 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 7, i64 2
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  %63 = mul nsw i64 %62, %49
  %64 = add i64 %63, %55
  %65 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 6, i64 2
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %64
  store i8* %67, i8** %65, align 8
  br label %68

68:                                               ; preds = %1, %38
  %69 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 10
  %70 = load i8*, i8** %69, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %79, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.blink::AVIFImageDecoder", %"class.blink::AVIFImageDecoder"* %0, i64 0, i32 17, i32 11
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = mul nsw i64 %75, %22
  %77 = add i64 %76, %30
  %78 = getelementptr inbounds i8, i8* %70, i64 %77
  store i8* %78, i8** %69, align 8
  br label %79

79:                                               ; preds = %68, %72
  store %struct.avifImage* %5, %struct.avifImage** %2, align 8
  ret void
}

declare zeroext i1 @_ZNK3gfx10ColorSpaceeqERKS0_(%"class.gfx::ColorSpace"*, %"class.gfx::ColorSpace"* dereferenceable(68)) local_unnamed_addr #4

declare %"class.gfx::ColorTransform"* @_ZN3gfx14ColorTransform17NewColorTransformERKNS_10ColorSpaceEiS3_iNS0_6IntentE(%"class.gfx::ColorSpace"* dereferenceable(68), i32, %"class.gfx::ColorSpace"* dereferenceable(68), i32, i32) local_unnamed_addr #4

declare %"class.media::VideoFrame"* @_ZN5media10VideoFrame20WrapExternalYuvaDataENS_16VideoPixelFormatERKN3gfx4SizeERKNS2_4RectES5_iiiiPhS9_S9_S9_N4base9TimeDeltaE(i32, %"class.gfx::Size"* dereferenceable(8), %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Size"* dereferenceable(8), i32, i32, i32, i32, i8*, i8*, i8*, i8*, i64) local_unnamed_addr #4

declare %"class.media::VideoFrame"* @_ZN5media10VideoFrame19WrapExternalYuvDataENS_16VideoPixelFormatERKN3gfx4SizeERKNS2_4RectES5_iiiPhS9_S9_N4base9TimeDeltaE(i32, %"class.gfx::Size"* dereferenceable(8), %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Size"* dereferenceable(8), i32, i32, i32, i8*, i8*, i8*, i64) local_unnamed_addr #4

declare void @_ZN5media24PaintCanvasVideoRenderer28ConvertVideoFrameToRGBPixelsEPKNS_10VideoFrameEPvmb(%"class.media::VideoFrame"*, i8*, i64, i1 zeroext) local_unnamed_addr #4

declare zeroext i1 @skcms_Transform(i8*, i32, i32, %struct.skcms_ICCProfile*, i8*, i32, i32, %struct.skcms_ICCProfile*, i64) local_unnamed_addr #4

declare %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10SrcProfileEv(%"class.blink::ColorProfileTransform"*) local_unnamed_addr #4

declare %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10DstProfileEv(%"class.blink::ColorProfileTransform"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK5blink16AVIFImageDecoder17FilenameExtensionEv(%"class.blink::AVIFImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::String", align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #15
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  ret %"class.WTF::StringImpl"* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink12ImageDecoder23GetSupportedDecodeSizesEv(%"class.WTF::Vector.127"* noalias sret, %"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.WTF::Vector.127"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder11DecodedSizeEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.blink::ImageDecoder"* %0 to i64 (%"class.blink::ImageDecoder"*)***
  %3 = load i64 (%"class.blink::ImageDecoder"*)**, i64 (%"class.blink::ImageDecoder"*)*** %2, align 8
  %4 = getelementptr inbounds i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %3, i64 5
  %5 = load i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %4, align 8
  %6 = tail call i64 %5(%"class.blink::ImageDecoder"* %0) #15
  ret i64 %6
}

declare void @_ZNK5blink12ImageDecoder33MakeMetadataForDecodeAccelerationEv(%"struct.cc::ImageHeaderMetadata"* sret, %"class.blink::ImageDecoder"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder16FrameSizeAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::ImageDecoder"* %0 to i64 (%"class.blink::ImageDecoder"*)***
  %4 = load i64 (%"class.blink::ImageDecoder"*)**, i64 (%"class.blink::ImageDecoder"*)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %4, i64 5
  %6 = load i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %5, align 8
  %7 = tail call i64 %6(%"class.blink::ImageDecoder"* %0) #15
  ret i64 %7
}

declare zeroext i1 @_ZNK5blink12ImageDecoder20FrameHasAlphaAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #4

declare i64 @_ZNK5blink12ImageDecoder17FrameBytesAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #4

declare i64 @_ZN5blink12ImageDecoder21ClearCacheExceptFrameEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink12ImageDecoder7HotSpotERNS_8IntPointE(%"class.blink::ImageDecoder"*, %"class.blink::IntPoint"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoder18SetMemoryAllocatorEPN8SkBitmap9AllocatorE(%"class.blink::ImageDecoder"*, %"class.SkBitmap::Allocator"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call i64 @_ZN5blink12ImageDecoder10FrameCountEv(%"class.blink::ImageDecoder"* %0) #15
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7, %2
  %11 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 0) #15
  %12 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %11, i64 0, i32 1
  store %"class.SkBitmap::Allocator"* %1, %"class.SkBitmap::Allocator"** %12, align 8
  br label %13

13:                                               ; preds = %7, %10
  ret void
}

declare void @_ZN5blink12ImageDecoder16ClearFrameBufferEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12ImageDecoder34FrameStatusSufficientForSuccessorsEj(%"class.blink::ImageDecoder"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2
  %4 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %1) #15
  %5 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %6, 1
  %8 = icmp eq i32 %7, 3
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoder17OnInitFrameBufferEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #8

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"*, %"class.blink::ImageFrame"*) local_unnamed_addr #9 comdat align 2 {
  %3 = bitcast %"class.blink::ImageFrame"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #15
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

declare void @_ZN5media15VideoColorSpaceC1EiiiN3gfx10ColorSpace7RangeIDE(%"class.media::VideoColorSpace"*, i32, i32, i32, i8 zeroext) unnamed_addr #4

declare zeroext i1 @_ZNK5media15VideoColorSpace11IsSpecifiedEv(%"class.media::VideoColorSpace"*) local_unnamed_addr #4

declare void @_ZNK5media15VideoColorSpace15ToGfxColorSpaceEv(%"class.gfx::ColorSpace"* sret, %"class.media::VideoColorSpace"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #10

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #4

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #4

declare i64 @_ZN5blink12ImageDecoder10FrameCountEv(%"class.blink::ImageDecoder"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #15
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #15
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #15
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #15
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %24, i64 %25
  ret %"class.blink::ImageFrame"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN2cc28ScopedSubnormalFloatDisablerD1Ev(%"class.cc::ScopedSubnormalFloatDisabler"*) unnamed_addr #8

declare void @_ZN2cc28ScopedSubnormalFloatDisablerC1Ev(%"class.cc::ScopedSubnormalFloatDisabler"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(128) %"class.blink::ImageFrame"* @_ZNK3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #15
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #15
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #15
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #15
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %24, i64 %25
  ret %"class.blink::ImageFrame"* %26
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #12

declare void @_ZN5blink12ColorProfileC1ERK16skcms_ICCProfileNSt3__110unique_ptrIA_hNS4_14default_deleteIS6_EEEE(%"class.blink::ColorProfile"*, %struct.skcms_ICCProfile* dereferenceable(1008), i8*) unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #13

declare i32 @avifLimitedToFullY(i32, i32) local_unnamed_addr #4

declare void @_ZN3gfx16FloatToHalfFloatEPKfPtm(float*, i16*, i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #10

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #10

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { nounwind }
attributes #16 = { builtin nounwind }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3gfx10ColorSpace10CreateJpegEv: argument 0"}
!15 = distinct !{!15, !"_ZN3gfx10ColorSpace10CreateJpegEv"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3gfx10ColorSpace12CreateREC709Ev: argument 0"}
!18 = distinct !{!18, !"_ZN3gfx10ColorSpace12CreateREC709Ev"}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !11}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.unroll.disable"}
!27 = distinct !{!27, !11}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !26}
!35 = distinct !{!35, !11}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !11}
!42 = distinct !{!42, !26}
!43 = distinct !{!43, !11}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !11}
!50 = distinct !{!50, !26}
!51 = distinct !{!51, !11}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !11}
!58 = distinct !{!58, !26}
!59 = distinct !{!59, !11}
