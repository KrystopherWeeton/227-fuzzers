; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_filter_block1d4_h8_intrin_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %8, <8 x i16> %8) #7
  %10 = bitcast <16 x i8> %9 to <8 x i16>
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %45, label %12

12:                                               ; preds = %6
  %13 = shufflevector <8 x i16> %10, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 7>
  %14 = shufflevector <8 x i16> %13, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 7, i32 7, i32 7>
  %15 = shufflevector <8 x i16> %10, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 5, i32 undef, i32 undef>
  %16 = shufflevector <8 x i16> %15, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 5, i32 5, i32 5>
  %17 = bitcast <8 x i16> %16 to <16 x i8>
  %18 = bitcast <8 x i16> %14 to <16 x i8>
  br label %19

19:                                               ; preds = %19, %12
  %20 = phi i32 [ 0, %12 ], [ %43, %19 ]
  %21 = phi i8* [ %0, %12 ], [ %38, %19 ]
  %22 = phi i8* [ %2, %12 ], [ %42, %19 ]
  %23 = getelementptr inbounds i8, i8* %21, i64 -3
  %24 = bitcast i8* %23 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6>
  %27 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %26, <16 x i8> %17) #7
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %27, <16 x i8> %18) #7
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <8 x i16> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %33 = add <8 x i16> %30, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %33, <8 x i16> %34) #7
  %36 = ashr <8 x i16> %35, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %36, <8 x i16> undef) #7
  %38 = getelementptr inbounds i8, i8* %21, i64 %1
  %39 = bitcast <16 x i8> %37 to <4 x i32>
  %40 = extractelement <4 x i32> %39, i32 0
  %41 = bitcast i8* %22 to i32*
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %22, i64 %3
  %43 = add nuw i32 %20, 1
  %44 = icmp eq i32 %43, %4
  br i1 %44, label %45, label %19

45:                                               ; preds = %19, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_filter_block1d8_h8_intrin_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #2 {
  %7 = bitcast i16* %5 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16
  %9 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %10 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %11 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %12 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %13 = icmp eq i32 %4, 0
  br i1 %13, label %42, label %14

14:                                               ; preds = %6, %14
  %15 = phi i8* [ %36, %14 ], [ %0, %6 ]
  %16 = phi i32 [ %40, %14 ], [ 0, %6 ]
  %17 = phi i8* [ %39, %14 ], [ %2, %6 ]
  %18 = getelementptr inbounds i8, i8* %15, i64 -3
  %19 = bitcast i8* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %22 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %23 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %24 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %25 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %21, <16 x i8> %9) #7
  %26 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %22, <16 x i8> %10) #7
  %27 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %23, <16 x i8> %11) #7
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %24, <16 x i8> %12) #7
  %29 = add <8 x i16> %28, %26
  %30 = add <8 x i16> %25, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %31 = add <8 x i16> %30, %27
  %32 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %31, <8 x i16> %29) #7
  %33 = ashr <8 x i16> %32, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> undef) #7
  %35 = bitcast <16 x i8> %34 to <2 x i64>
  %36 = getelementptr inbounds i8, i8* %15, i64 %1
  %37 = extractelement <2 x i64> %35, i32 0
  %38 = bitcast i8* %17 to i64*
  store i64 %37, i64* %38, align 1
  %39 = getelementptr inbounds i8, i8* %17, i64 %3
  %40 = add nuw i32 %16, 1
  %41 = icmp eq i32 %40, %4
  br i1 %41, label %42, label %14

42:                                               ; preds = %14, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_filter_block1d8_v8_intrin_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #2 {
  %7 = bitcast i16* %5 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16
  %9 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %10 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %11 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %12 = shufflevector <16 x i8> %8, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %13 = icmp eq i32 %4, 0
  br i1 %13, label %92, label %14

14:                                               ; preds = %6
  %15 = mul nsw i64 %1, 6
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %18, i32 0
  %20 = mul nsw i64 %1, 5
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %23, i32 0
  %25 = shl nsw i64 %1, 2
  %26 = getelementptr inbounds i8, i8* %0, i64 %25
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %28, i32 0
  %30 = mul nsw i64 %1, 3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %33, i32 0
  %35 = shl nsw i64 %1, 1
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %38, i32 0
  %40 = getelementptr inbounds i8, i8* %0, i64 %1
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %42, i32 0
  %44 = bitcast i8* %0 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %45, i32 0
  %47 = mul nsw i64 %1, 7
  br label %48

48:                                               ; preds = %48, %14
  %49 = phi <2 x i64> [ %46, %14 ], [ %50, %48 ]
  %50 = phi <2 x i64> [ %43, %14 ], [ %51, %48 ]
  %51 = phi <2 x i64> [ %39, %14 ], [ %52, %48 ]
  %52 = phi <2 x i64> [ %34, %14 ], [ %53, %48 ]
  %53 = phi <2 x i64> [ %29, %14 ], [ %54, %48 ]
  %54 = phi <2 x i64> [ %24, %14 ], [ %55, %48 ]
  %55 = phi <2 x i64> [ %19, %14 ], [ %62, %48 ]
  %56 = phi i32 [ 0, %14 ], [ %90, %48 ]
  %57 = phi i8* [ %0, %14 ], [ %86, %48 ]
  %58 = phi i8* [ %2, %14 ], [ %89, %48 ]
  %59 = getelementptr inbounds i8, i8* %57, i64 %47
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %61, i32 0
  %63 = bitcast <2 x i64> %49 to <16 x i8>
  %64 = bitcast <2 x i64> %50 to <16 x i8>
  %65 = shufflevector <16 x i8> %63, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = bitcast <2 x i64> %51 to <16 x i8>
  %67 = bitcast <2 x i64> %52 to <16 x i8>
  %68 = shufflevector <16 x i8> %66, <16 x i8> %67, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = bitcast <2 x i64> %53 to <16 x i8>
  %70 = bitcast <2 x i64> %54 to <16 x i8>
  %71 = shufflevector <16 x i8> %69, <16 x i8> %70, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = bitcast <2 x i64> %55 to <16 x i8>
  %73 = bitcast <2 x i64> %62 to <16 x i8>
  %74 = shufflevector <16 x i8> %72, <16 x i8> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %9) #7
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %68, <16 x i8> %10) #7
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %71, <16 x i8> %11) #7
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %74, <16 x i8> %12) #7
  %79 = add <8 x i16> %78, %76
  %80 = add <8 x i16> %75, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %81 = add <8 x i16> %80, %77
  %82 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %81, <8 x i16> %79) #7
  %83 = ashr <8 x i16> %82, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> undef) #7
  %85 = bitcast <16 x i8> %84 to <2 x i64>
  %86 = getelementptr inbounds i8, i8* %57, i64 %1
  %87 = extractelement <2 x i64> %85, i32 0
  %88 = bitcast i8* %58 to i64*
  store i64 %87, i64* %88, align 1
  %89 = getelementptr inbounds i8, i8* %58, i64 %3
  %90 = add nuw i32 %56, 1
  %91 = icmp eq i32 %90, %4
  br i1 %91, label %92, label %48

92:                                               ; preds = %48, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_horiz_ssse3(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %116, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %37

27:                                               ; preds = %25, %27
  %28 = phi i8* [ %31, %27 ], [ %0, %25 ]
  %29 = phi i8* [ %32, %27 ], [ %2, %25 ]
  %30 = phi i32 [ %33, %27 ], [ %9, %25 ]
  tail call void @vpx_filter_block1d16_h8_ssse3(i8* %28, i64 %1, i8* %29, i64 %3, i32 %10, i16* %13) #7
  %31 = getelementptr inbounds i8, i8* %28, i64 16
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = add nsw i32 %30, -16
  %34 = icmp sgt i32 %33, 15
  br i1 %34, label %27, label %35

35:                                               ; preds = %27
  %36 = and i32 %9, 15
  br label %37

37:                                               ; preds = %35, %25
  %38 = phi i32 [ %9, %25 ], [ %36, %35 ]
  %39 = phi i8* [ %2, %25 ], [ %32, %35 ]
  %40 = phi i8* [ %0, %25 ], [ %31, %35 ]
  switch i32 %38, label %329 [
    i32 8, label %41
    i32 4, label %77
  ]

41:                                               ; preds = %37
  %42 = bitcast i16* %13 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 16
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %45 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %46 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %47 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %48 = icmp eq i32 %10, 0
  br i1 %48, label %329, label %49

49:                                               ; preds = %41, %49
  %50 = phi i8* [ %71, %49 ], [ %40, %41 ]
  %51 = phi i32 [ %75, %49 ], [ 0, %41 ]
  %52 = phi i8* [ %74, %49 ], [ %39, %41 ]
  %53 = getelementptr inbounds i8, i8* %50, i64 -3
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = shufflevector <16 x i8> %55, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %57 = shufflevector <16 x i8> %55, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %58 = shufflevector <16 x i8> %55, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %59 = shufflevector <16 x i8> %55, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %44) #7
  %61 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %57, <16 x i8> %45) #7
  %62 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %58, <16 x i8> %46) #7
  %63 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %59, <16 x i8> %47) #7
  %64 = add <8 x i16> %63, %61
  %65 = add <8 x i16> %60, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %66 = add <8 x i16> %65, %62
  %67 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %66, <8 x i16> %64) #7
  %68 = ashr <8 x i16> %67, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> undef) #7
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = getelementptr inbounds i8, i8* %50, i64 %1
  %72 = extractelement <2 x i64> %70, i32 0
  %73 = bitcast i8* %52 to i64*
  store i64 %72, i64* %73, align 1
  %74 = getelementptr inbounds i8, i8* %52, i64 %3
  %75 = add nuw i32 %51, 1
  %76 = icmp eq i32 %75, %10
  br i1 %76, label %329, label %49

77:                                               ; preds = %37
  %78 = bitcast i16* %13 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %79, <8 x i16> %79) #7
  %81 = bitcast <16 x i8> %80 to <8 x i16>
  %82 = icmp eq i32 %10, 0
  br i1 %82, label %329, label %83

83:                                               ; preds = %77
  %84 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 7>
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 7, i32 7, i32 7>
  %86 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 5, i32 undef, i32 undef>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 5, i32 5, i32 5>
  %88 = bitcast <8 x i16> %87 to <16 x i8>
  %89 = bitcast <8 x i16> %85 to <16 x i8>
  br label %90

90:                                               ; preds = %90, %83
  %91 = phi i32 [ 0, %83 ], [ %114, %90 ]
  %92 = phi i8* [ %40, %83 ], [ %109, %90 ]
  %93 = phi i8* [ %39, %83 ], [ %113, %90 ]
  %94 = getelementptr inbounds i8, i8* %92, i64 -3
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1
  %97 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6>
  %98 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %99 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %88) #7
  %100 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %98, <16 x i8> %89) #7
  %101 = add <8 x i16> %100, %99
  %102 = bitcast <8 x i16> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %104 = add <8 x i16> %101, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %104, <8 x i16> %105) #7
  %107 = ashr <8 x i16> %106, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %108 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %107, <8 x i16> undef) #7
  %109 = getelementptr inbounds i8, i8* %92, i64 %1
  %110 = bitcast <16 x i8> %108 to <4 x i32>
  %111 = extractelement <4 x i32> %110, i32 0
  %112 = bitcast i8* %93 to i32*
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds i8, i8* %93, i64 %3
  %114 = add nuw i32 %91, 1
  %115 = icmp eq i32 %114, %10
  br i1 %115, label %329, label %90

116:                                              ; preds = %11
  %117 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %118 = load i16, i16* %117, align 2
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %120 = load i16, i16* %119, align 2
  %121 = or i16 %120, %118
  %122 = icmp eq i16 %121, 0
  %123 = icmp sgt i32 %9, 15
  br i1 %122, label %128, label %124

124:                                              ; preds = %116
  br i1 %123, label %125, label %176

125:                                              ; preds = %124
  %126 = bitcast i16* %13 to <8 x i16>*
  %127 = icmp sgt i32 %10, 0
  br label %129

128:                                              ; preds = %116
  br i1 %123, label %313, label %323

129:                                              ; preds = %125, %169
  %130 = phi i8* [ %0, %125 ], [ %170, %169 ]
  %131 = phi i8* [ %2, %125 ], [ %171, %169 ]
  %132 = phi i32 [ %9, %125 ], [ %172, %169 ]
  %133 = load <8 x i16>, <8 x i16>* %126, align 1
  %134 = ashr <8 x i16> %133, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %135 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %134, <8 x i16> %134) #7
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %137 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  br i1 %127, label %138, label %169

138:                                              ; preds = %129
  %139 = getelementptr inbounds i8, i8* %130, i64 -1
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i32 [ %167, %140 ], [ %10, %138 ]
  %142 = phi i8* [ %165, %140 ], [ %139, %138 ]
  %143 = phi i8* [ %166, %140 ], [ %131, %138 ]
  %144 = bitcast i8* %142 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %147 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %148 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %136) #7
  %149 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %147, <16 x i8> %137) #7
  %150 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %148, <8 x i16> %149) #7
  %151 = getelementptr inbounds i8, i8* %142, i64 8
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %155 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %156 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %154, <16 x i8> %136) #7
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %155, <16 x i8> %137) #7
  %158 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %156, <8 x i16> %157) #7
  %159 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %150, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %160 = ashr <8 x i16> %159, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %161 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %158, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %162 = ashr <8 x i16> %161, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %163 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %160, <8 x i16> %162) #7
  %164 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %163, <16 x i8>* %164, align 16
  %165 = getelementptr inbounds i8, i8* %142, i64 %1
  %166 = getelementptr inbounds i8, i8* %143, i64 %3
  %167 = add nsw i32 %141, -1
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %140, label %169

169:                                              ; preds = %140, %129
  %170 = getelementptr inbounds i8, i8* %130, i64 16
  %171 = getelementptr inbounds i8, i8* %131, i64 16
  %172 = add nsw i32 %132, -16
  %173 = icmp sgt i32 %172, 15
  br i1 %173, label %129, label %174

174:                                              ; preds = %169
  %175 = and i32 %9, 15
  br label %176

176:                                              ; preds = %174, %124
  %177 = phi i32 [ %9, %124 ], [ %175, %174 ]
  %178 = phi i8* [ %2, %124 ], [ %171, %174 ]
  %179 = phi i8* [ %0, %124 ], [ %170, %174 ]
  switch i32 %177, label %329 [
    i32 8, label %180
    i32 4, label %250
  ]

180:                                              ; preds = %176
  %181 = bitcast i16* %13 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 1
  %183 = ashr <8 x i16> %182, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %184 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %183, <8 x i16> %183) #7
  %185 = shufflevector <16 x i8> %184, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %186 = shufflevector <16 x i8> %184, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %187 = icmp sgt i32 %10, 0
  br i1 %187, label %188, label %329

188:                                              ; preds = %180
  %189 = getelementptr inbounds i8, i8* %179, i64 -1
  %190 = and i32 %10, 1
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %209, label %192

192:                                              ; preds = %188
  %193 = bitcast i8* %189 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1
  %195 = shufflevector <16 x i8> %194, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %196 = shufflevector <16 x i8> %194, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %197 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %195, <16 x i8> %185) #7
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %186) #7
  %199 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %197, <8 x i16> %198) #7
  %200 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %199, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %201 = ashr <8 x i16> %200, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %202 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %201, <8 x i16> undef) #7
  %203 = bitcast <16 x i8> %202 to <2 x i64>
  %204 = extractelement <2 x i64> %203, i32 0
  %205 = bitcast i8* %178 to i64*
  store i64 %204, i64* %205, align 1
  %206 = getelementptr inbounds i8, i8* %189, i64 %1
  %207 = getelementptr inbounds i8, i8* %178, i64 %3
  %208 = add nsw i32 %10, -1
  br label %209

209:                                              ; preds = %188, %192
  %210 = phi i32 [ %10, %188 ], [ %208, %192 ]
  %211 = phi i8* [ %189, %188 ], [ %206, %192 ]
  %212 = phi i8* [ %178, %188 ], [ %207, %192 ]
  %213 = icmp eq i32 %10, 1
  br i1 %213, label %329, label %214

214:                                              ; preds = %209, %214
  %215 = phi i32 [ %248, %214 ], [ %210, %209 ]
  %216 = phi i8* [ %246, %214 ], [ %211, %209 ]
  %217 = phi i8* [ %247, %214 ], [ %212, %209 ]
  %218 = bitcast i8* %216 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = shufflevector <16 x i8> %219, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %221 = shufflevector <16 x i8> %219, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %222 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %220, <16 x i8> %185) #7
  %223 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %221, <16 x i8> %186) #7
  %224 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %222, <8 x i16> %223) #7
  %225 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %224, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %226 = ashr <8 x i16> %225, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %227 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %226, <8 x i16> undef) #7
  %228 = bitcast <16 x i8> %227 to <2 x i64>
  %229 = extractelement <2 x i64> %228, i32 0
  %230 = bitcast i8* %217 to i64*
  store i64 %229, i64* %230, align 1
  %231 = getelementptr inbounds i8, i8* %216, i64 %1
  %232 = getelementptr inbounds i8, i8* %217, i64 %3
  %233 = bitcast i8* %231 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1
  %235 = shufflevector <16 x i8> %234, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %236 = shufflevector <16 x i8> %234, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %237 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %235, <16 x i8> %185) #7
  %238 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %236, <16 x i8> %186) #7
  %239 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %237, <8 x i16> %238) #7
  %240 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %239, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %241 = ashr <8 x i16> %240, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %242 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %241, <8 x i16> undef) #7
  %243 = bitcast <16 x i8> %242 to <2 x i64>
  %244 = extractelement <2 x i64> %243, i32 0
  %245 = bitcast i8* %232 to i64*
  store i64 %244, i64* %245, align 1
  %246 = getelementptr inbounds i8, i8* %231, i64 %1
  %247 = getelementptr inbounds i8, i8* %232, i64 %3
  %248 = add nsw i32 %215, -2
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %214, label %329

250:                                              ; preds = %176
  %251 = bitcast i16* %13 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 1
  %253 = ashr <8 x i16> %252, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %254 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %253, <8 x i16> undef) #7
  %255 = shufflevector <16 x i8> %254, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %256 = icmp sgt i32 %10, 0
  br i1 %256, label %257, label %329

257:                                              ; preds = %250
  %258 = getelementptr inbounds i8, i8* %179, i64 -1
  %259 = and i32 %10, 1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %276, label %261

261:                                              ; preds = %257
  %262 = bitcast i8* %258 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 1
  %264 = shufflevector <16 x i8> %263, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6>
  %265 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %264, <16 x i8> %255) #7
  %266 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %265, <8 x i16> zeroinitializer) #7
  %267 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %266, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %268 = ashr <8 x i16> %267, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %269 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %268, <8 x i16> undef) #7
  %270 = bitcast <16 x i8> %269 to <4 x i32>
  %271 = extractelement <4 x i32> %270, i32 0
  %272 = bitcast i8* %178 to i32*
  store i32 %271, i32* %272, align 4
  %273 = getelementptr inbounds i8, i8* %258, i64 %1
  %274 = getelementptr inbounds i8, i8* %178, i64 %3
  %275 = add nsw i32 %10, -1
  br label %276

276:                                              ; preds = %257, %261
  %277 = phi i32 [ %10, %257 ], [ %275, %261 ]
  %278 = phi i8* [ %258, %257 ], [ %273, %261 ]
  %279 = phi i8* [ %178, %257 ], [ %274, %261 ]
  %280 = icmp eq i32 %10, 1
  br i1 %280, label %329, label %281

281:                                              ; preds = %276, %281
  %282 = phi i32 [ %311, %281 ], [ %277, %276 ]
  %283 = phi i8* [ %309, %281 ], [ %278, %276 ]
  %284 = phi i8* [ %310, %281 ], [ %279, %276 ]
  %285 = bitcast i8* %283 to <16 x i8>*
  %286 = load <16 x i8>, <16 x i8>* %285, align 1
  %287 = shufflevector <16 x i8> %286, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6>
  %288 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %287, <16 x i8> %255) #7
  %289 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %288, <8 x i16> zeroinitializer) #7
  %290 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %289, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %291 = ashr <8 x i16> %290, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %292 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %291, <8 x i16> undef) #7
  %293 = bitcast <16 x i8> %292 to <4 x i32>
  %294 = extractelement <4 x i32> %293, i32 0
  %295 = bitcast i8* %284 to i32*
  store i32 %294, i32* %295, align 4
  %296 = getelementptr inbounds i8, i8* %283, i64 %1
  %297 = getelementptr inbounds i8, i8* %284, i64 %3
  %298 = bitcast i8* %296 to <16 x i8>*
  %299 = load <16 x i8>, <16 x i8>* %298, align 1
  %300 = shufflevector <16 x i8> %299, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6>
  %301 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %300, <16 x i8> %255) #7
  %302 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %301, <8 x i16> zeroinitializer) #7
  %303 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %302, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %304 = ashr <8 x i16> %303, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %305 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %304, <8 x i16> undef) #7
  %306 = bitcast <16 x i8> %305 to <4 x i32>
  %307 = extractelement <4 x i32> %306, i32 0
  %308 = bitcast i8* %297 to i32*
  store i32 %307, i32* %308, align 4
  %309 = getelementptr inbounds i8, i8* %296, i64 %1
  %310 = getelementptr inbounds i8, i8* %297, i64 %3
  %311 = add nsw i32 %282, -2
  %312 = icmp sgt i32 %311, 0
  br i1 %312, label %281, label %329

313:                                              ; preds = %128, %313
  %314 = phi i8* [ %317, %313 ], [ %0, %128 ]
  %315 = phi i8* [ %318, %313 ], [ %2, %128 ]
  %316 = phi i32 [ %319, %313 ], [ %9, %128 ]
  tail call void @vpx_filter_block1d16_h2_ssse3(i8* %314, i64 %1, i8* %315, i64 %3, i32 %10, i16* %13) #7
  %317 = getelementptr inbounds i8, i8* %314, i64 16
  %318 = getelementptr inbounds i8, i8* %315, i64 16
  %319 = add nsw i32 %316, -16
  %320 = icmp sgt i32 %319, 15
  br i1 %320, label %313, label %321

321:                                              ; preds = %313
  %322 = and i32 %9, 15
  br label %323

323:                                              ; preds = %321, %128
  %324 = phi i32 [ %9, %128 ], [ %322, %321 ]
  %325 = phi i8* [ %2, %128 ], [ %318, %321 ]
  %326 = phi i8* [ %0, %128 ], [ %317, %321 ]
  switch i32 %324, label %329 [
    i32 8, label %327
    i32 4, label %328
  ]

327:                                              ; preds = %323
  tail call void @vpx_filter_block1d8_h2_ssse3(i8* %326, i64 %1, i8* %325, i64 %3, i32 %10, i16* %13) #7
  br label %329

328:                                              ; preds = %323
  tail call void @vpx_filter_block1d4_h2_ssse3(i8* %326, i64 %1, i8* %325, i64 %3, i32 %10, i16* %13) #7
  br label %329

329:                                              ; preds = %90, %49, %276, %281, %209, %214, %250, %180, %77, %41, %327, %328, %323, %176, %37
  ret void
}

declare void @vpx_filter_block1d16_h8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d16_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d8_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_vert_ssse3(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %135, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %40

27:                                               ; preds = %25
  %28 = mul i64 %1, -3
  br label %29

29:                                               ; preds = %27, %29
  %30 = phi i8* [ %0, %27 ], [ %34, %29 ]
  %31 = phi i8* [ %2, %27 ], [ %35, %29 ]
  %32 = phi i32 [ %9, %27 ], [ %36, %29 ]
  %33 = getelementptr inbounds i8, i8* %30, i64 %28
  tail call void @vpx_filter_block1d16_v8_ssse3(i8* %33, i64 %1, i8* %31, i64 %3, i32 %10, i16* %13) #7
  %34 = getelementptr inbounds i8, i8* %30, i64 16
  %35 = getelementptr inbounds i8, i8* %31, i64 16
  %36 = add nsw i32 %32, -16
  %37 = icmp sgt i32 %36, 15
  br i1 %37, label %29, label %38

38:                                               ; preds = %29
  %39 = and i32 %9, 15
  br label %40

40:                                               ; preds = %38, %25
  %41 = phi i32 [ %9, %25 ], [ %39, %38 ]
  %42 = phi i8* [ %2, %25 ], [ %35, %38 ]
  %43 = phi i8* [ %0, %25 ], [ %34, %38 ]
  switch i32 %41, label %407 [
    i32 8, label %44
    i32 4, label %132
  ]

44:                                               ; preds = %40
  %45 = mul i64 %1, -3
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = bitcast i16* %13 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 16
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %50 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %51 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %52 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %53 = icmp eq i32 %10, 0
  br i1 %53, label %407, label %54

54:                                               ; preds = %44
  %55 = mul nsw i64 %1, 6
  %56 = getelementptr inbounds i8, i8* %46, i64 %55
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %58, i32 0
  %60 = mul nsw i64 %1, 5
  %61 = getelementptr inbounds i8, i8* %46, i64 %60
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %63, i32 0
  %65 = shl nsw i64 %1, 2
  %66 = getelementptr inbounds i8, i8* %46, i64 %65
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %68, i32 0
  %70 = mul nsw i64 %1, 3
  %71 = getelementptr inbounds i8, i8* %46, i64 %70
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %73, i32 0
  %75 = shl nsw i64 %1, 1
  %76 = getelementptr inbounds i8, i8* %46, i64 %75
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %78, i32 0
  %80 = getelementptr inbounds i8, i8* %46, i64 %1
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %82, i32 0
  %84 = bitcast i8* %46 to i64*
  %85 = load i64, i64* %84, align 1
  %86 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %85, i32 0
  %87 = mul nsw i64 %1, 7
  br label %88

88:                                               ; preds = %88, %54
  %89 = phi <2 x i64> [ %86, %54 ], [ %90, %88 ]
  %90 = phi <2 x i64> [ %83, %54 ], [ %91, %88 ]
  %91 = phi <2 x i64> [ %79, %54 ], [ %92, %88 ]
  %92 = phi <2 x i64> [ %74, %54 ], [ %93, %88 ]
  %93 = phi <2 x i64> [ %69, %54 ], [ %94, %88 ]
  %94 = phi <2 x i64> [ %64, %54 ], [ %95, %88 ]
  %95 = phi <2 x i64> [ %59, %54 ], [ %102, %88 ]
  %96 = phi i32 [ 0, %54 ], [ %130, %88 ]
  %97 = phi i8* [ %46, %54 ], [ %126, %88 ]
  %98 = phi i8* [ %42, %54 ], [ %129, %88 ]
  %99 = getelementptr inbounds i8, i8* %97, i64 %87
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %101, i32 0
  %103 = bitcast <2 x i64> %89 to <16 x i8>
  %104 = bitcast <2 x i64> %90 to <16 x i8>
  %105 = shufflevector <16 x i8> %103, <16 x i8> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = bitcast <2 x i64> %91 to <16 x i8>
  %107 = bitcast <2 x i64> %92 to <16 x i8>
  %108 = shufflevector <16 x i8> %106, <16 x i8> %107, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <2 x i64> %93 to <16 x i8>
  %110 = bitcast <2 x i64> %94 to <16 x i8>
  %111 = shufflevector <16 x i8> %109, <16 x i8> %110, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = bitcast <2 x i64> %95 to <16 x i8>
  %113 = bitcast <2 x i64> %102 to <16 x i8>
  %114 = shufflevector <16 x i8> %112, <16 x i8> %113, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %105, <16 x i8> %49) #7
  %116 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %108, <16 x i8> %50) #7
  %117 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %111, <16 x i8> %51) #7
  %118 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %114, <16 x i8> %52) #7
  %119 = add <8 x i16> %118, %116
  %120 = add <8 x i16> %115, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %121 = add <8 x i16> %120, %117
  %122 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %121, <8 x i16> %119) #7
  %123 = ashr <8 x i16> %122, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> undef) #7
  %125 = bitcast <16 x i8> %124 to <2 x i64>
  %126 = getelementptr inbounds i8, i8* %97, i64 %1
  %127 = extractelement <2 x i64> %125, i32 0
  %128 = bitcast i8* %98 to i64*
  store i64 %127, i64* %128, align 1
  %129 = getelementptr inbounds i8, i8* %98, i64 %3
  %130 = add nuw i32 %96, 1
  %131 = icmp eq i32 %130, %10
  br i1 %131, label %407, label %88

132:                                              ; preds = %40
  %133 = mul i64 %1, -3
  %134 = getelementptr inbounds i8, i8* %43, i64 %133
  tail call void @vpx_filter_block1d4_v8_ssse3(i8* %134, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #7
  br label %407

135:                                              ; preds = %11
  %136 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %137 = load i16, i16* %136, align 2
  %138 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %139 = load i16, i16* %138, align 2
  %140 = or i16 %139, %137
  %141 = icmp eq i16 %140, 0
  %142 = icmp sgt i32 %9, 15
  br i1 %141, label %152, label %143

143:                                              ; preds = %135
  br i1 %142, label %144, label %233

144:                                              ; preds = %143
  %145 = sub i64 0, %1
  %146 = shl i64 %1, 1
  %147 = shl i64 %3, 1
  %148 = bitcast i16* %13 to <8 x i16>*
  %149 = icmp sgt i32 %10, 1
  %150 = mul nsw i64 %1, 3
  %151 = shl nsw i64 %1, 2
  br label %153

152:                                              ; preds = %135
  br i1 %142, label %391, label %401

153:                                              ; preds = %144, %226
  %154 = phi i8* [ %0, %144 ], [ %227, %226 ]
  %155 = phi i8* [ %2, %144 ], [ %228, %226 ]
  %156 = phi i32 [ %9, %144 ], [ %229, %226 ]
  %157 = getelementptr inbounds i8, i8* %154, i64 %145
  %158 = load <8 x i16>, <8 x i16>* %148, align 1
  %159 = ashr <8 x i16> %158, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %159, <8 x i16> %159) #7
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %162 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %163 = bitcast i8* %157 to <16 x i8>*
  %164 = load <16 x i8>, <16 x i8>* %163, align 1
  %165 = bitcast i8* %154 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 1
  %167 = getelementptr inbounds i8, i8* %157, i64 %146
  %168 = bitcast i8* %167 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 1
  %170 = bitcast <2 x i64> %169 to <16 x i8>
  br i1 %149, label %171, label %226

171:                                              ; preds = %153
  %172 = shufflevector <16 x i8> %166, <16 x i8> %170, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %173 = shufflevector <16 x i8> %166, <16 x i8> %170, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = shufflevector <16 x i8> %164, <16 x i8> %166, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %175 = shufflevector <16 x i8> %164, <16 x i8> %166, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %176

176:                                              ; preds = %176, %171
  %177 = phi i32 [ %10, %171 ], [ %224, %176 ]
  %178 = phi i8* [ %157, %171 ], [ %222, %176 ]
  %179 = phi <16 x i8> [ %172, %171 ], [ %196, %176 ]
  %180 = phi <16 x i8> [ %173, %171 ], [ %195, %176 ]
  %181 = phi <16 x i8> [ %174, %171 ], [ %190, %176 ]
  %182 = phi <16 x i8> [ %175, %171 ], [ %189, %176 ]
  %183 = phi <2 x i64> [ %169, %171 ], [ %193, %176 ]
  %184 = phi i8* [ %155, %171 ], [ %223, %176 ]
  %185 = getelementptr inbounds i8, i8* %178, i64 %150
  %186 = bitcast i8* %185 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = bitcast <2 x i64> %183 to <16 x i8>
  %189 = shufflevector <16 x i8> %188, <16 x i8> %187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = shufflevector <16 x i8> %188, <16 x i8> %187, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %191 = getelementptr inbounds i8, i8* %178, i64 %151
  %192 = bitcast i8* %191 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 1
  %194 = bitcast <2 x i64> %193 to <16 x i8>
  %195 = shufflevector <16 x i8> %187, <16 x i8> %194, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %196 = shufflevector <16 x i8> %187, <16 x i8> %194, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %182, <16 x i8> %161) #7
  %198 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %180, <16 x i8> %161) #7
  %199 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %189, <16 x i8> %162) #7
  %200 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %195, <16 x i8> %162) #7
  %201 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %197, <8 x i16> %199) #7
  %202 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %198, <8 x i16> %200) #7
  %203 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %181, <16 x i8> %161) #7
  %204 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %179, <16 x i8> %161) #7
  %205 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %190, <16 x i8> %162) #7
  %206 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %162) #7
  %207 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %203, <8 x i16> %205) #7
  %208 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %204, <8 x i16> %206) #7
  %209 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %201, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %210 = ashr <8 x i16> %209, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %211 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %202, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %212 = ashr <8 x i16> %211, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %213 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %207, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %214 = ashr <8 x i16> %213, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %215 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %208, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %216 = ashr <8 x i16> %215, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %217 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %210, <8 x i16> %214) #7
  %218 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %212, <8 x i16> %216) #7
  %219 = bitcast i8* %184 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %219, align 16
  %220 = getelementptr inbounds i8, i8* %184, i64 %3
  %221 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %218, <16 x i8>* %221, align 16
  %222 = getelementptr inbounds i8, i8* %178, i64 %146
  %223 = getelementptr inbounds i8, i8* %184, i64 %147
  %224 = add nsw i32 %177, -2
  %225 = icmp sgt i32 %224, 1
  br i1 %225, label %176, label %226

226:                                              ; preds = %176, %153
  %227 = getelementptr inbounds i8, i8* %154, i64 16
  %228 = getelementptr inbounds i8, i8* %155, i64 16
  %229 = add nsw i32 %156, -16
  %230 = icmp sgt i32 %229, 15
  br i1 %230, label %153, label %231

231:                                              ; preds = %226
  %232 = and i32 %9, 15
  br label %233

233:                                              ; preds = %231, %143
  %234 = phi i32 [ %9, %143 ], [ %232, %231 ]
  %235 = phi i8* [ %2, %143 ], [ %228, %231 ]
  %236 = phi i8* [ %0, %143 ], [ %227, %231 ]
  switch i32 %234, label %407 [
    i32 8, label %237
    i32 4, label %310
  ]

237:                                              ; preds = %233
  %238 = sub i64 0, %1
  %239 = getelementptr inbounds i8, i8* %236, i64 %238
  %240 = shl i64 %1, 1
  %241 = shl i64 %3, 1
  %242 = bitcast i16* %13 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 1
  %244 = ashr <8 x i16> %243, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %245 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %244, <8 x i16> %244) #7
  %246 = shufflevector <16 x i8> %245, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %247 = shufflevector <16 x i8> %245, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %248 = bitcast i8* %236 to i64*
  %249 = load i64, i64* %248, align 1
  %250 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %249, i32 0
  %251 = bitcast <2 x i64> %250 to <16 x i8>
  %252 = getelementptr inbounds i8, i8* %239, i64 %240
  %253 = bitcast i8* %252 to i64*
  %254 = load i64, i64* %253, align 1
  %255 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %254, i32 0
  %256 = icmp sgt i32 %10, 1
  br i1 %256, label %257, label %407

257:                                              ; preds = %237
  %258 = bitcast <2 x i64> %255 to <16 x i8>
  %259 = shufflevector <16 x i8> %251, <16 x i8> %258, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %260 = bitcast i8* %239 to i64*
  %261 = load i64, i64* %260, align 1
  %262 = insertelement <2 x i64> undef, i64 %261, i32 0
  %263 = bitcast <2 x i64> %262 to <16 x i8>
  %264 = shufflevector <16 x i8> %263, <16 x i8> %251, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %265 = mul nsw i64 %1, 3
  %266 = shl nsw i64 %1, 2
  br label %267

267:                                              ; preds = %267, %257
  %268 = phi i32 [ %10, %257 ], [ %308, %267 ]
  %269 = phi i8* [ %239, %257 ], [ %306, %267 ]
  %270 = phi <16 x i8> [ %259, %257 ], [ %286, %267 ]
  %271 = phi <16 x i8> [ %264, %257 ], [ %280, %267 ]
  %272 = phi <2 x i64> [ %255, %257 ], [ %284, %267 ]
  %273 = phi i8* [ %235, %257 ], [ %307, %267 ]
  %274 = getelementptr inbounds i8, i8* %269, i64 %265
  %275 = bitcast i8* %274 to i64*
  %276 = load i64, i64* %275, align 1
  %277 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %276, i32 0
  %278 = bitcast <2 x i64> %272 to <16 x i8>
  %279 = bitcast <2 x i64> %277 to <16 x i8>
  %280 = shufflevector <16 x i8> %278, <16 x i8> %279, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %281 = getelementptr inbounds i8, i8* %269, i64 %266
  %282 = bitcast i8* %281 to i64*
  %283 = load i64, i64* %282, align 1
  %284 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %283, i32 0
  %285 = bitcast <2 x i64> %284 to <16 x i8>
  %286 = shufflevector <16 x i8> %279, <16 x i8> %285, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %287 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %271, <16 x i8> %246) #7
  %288 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %270, <16 x i8> %246) #7
  %289 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %280, <16 x i8> %247) #7
  %290 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %286, <16 x i8> %247) #7
  %291 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %287, <8 x i16> %289) #7
  %292 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %288, <8 x i16> %290) #7
  %293 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %291, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %294 = ashr <8 x i16> %293, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %295 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %292, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %296 = ashr <8 x i16> %295, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %297 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %294, <8 x i16> undef) #7
  %298 = bitcast <16 x i8> %297 to <2 x i64>
  %299 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %296, <8 x i16> undef) #7
  %300 = bitcast <16 x i8> %299 to <2 x i64>
  %301 = extractelement <2 x i64> %298, i32 0
  %302 = bitcast i8* %273 to i64*
  store i64 %301, i64* %302, align 1
  %303 = getelementptr inbounds i8, i8* %273, i64 %3
  %304 = extractelement <2 x i64> %300, i32 0
  %305 = bitcast i8* %303 to i64*
  store i64 %304, i64* %305, align 1
  %306 = getelementptr inbounds i8, i8* %269, i64 %240
  %307 = getelementptr inbounds i8, i8* %273, i64 %241
  %308 = add nsw i32 %268, -2
  %309 = icmp sgt i32 %308, 1
  br i1 %309, label %267, label %407

310:                                              ; preds = %233
  %311 = sub i64 0, %1
  %312 = getelementptr inbounds i8, i8* %236, i64 %311
  %313 = shl i64 %1, 1
  %314 = shl i64 %3, 1
  %315 = bitcast i16* %13 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 1
  %317 = ashr <8 x i16> %316, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %318 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %317, <8 x i16> undef) #7
  %319 = shufflevector <16 x i8> %318, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %320 = bitcast i8* %236 to i64*
  %321 = load i64, i64* %320, align 1
  %322 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %321, i32 0
  %323 = bitcast <2 x i64> %322 to <4 x i32>
  %324 = getelementptr inbounds i8, i8* %312, i64 %313
  %325 = bitcast i8* %324 to i64*
  %326 = load i64, i64* %325, align 1
  %327 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %326, i32 0
  %328 = icmp sgt i32 %10, 1
  br i1 %328, label %329, label %407

329:                                              ; preds = %310
  %330 = bitcast i8* %312 to i64*
  %331 = load i64, i64* %330, align 1
  %332 = insertelement <2 x i64> undef, i64 %331, i32 0
  %333 = bitcast <2 x i64> %332 to <4 x i32>
  %334 = shufflevector <4 x i32> %333, <4 x i32> %323, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %335 = bitcast <4 x i32> %334 to <16 x i8>
  %336 = bitcast <2 x i64> %327 to <4 x i32>
  %337 = shufflevector <4 x i32> %323, <4 x i32> %336, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %338 = bitcast <4 x i32> %337 to <16 x i8>
  %339 = shufflevector <16 x i8> %335, <16 x i8> %338, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %340 = mul nsw i64 %1, 3
  %341 = shl nsw i64 %1, 2
  br label %342

342:                                              ; preds = %342, %329
  %343 = phi i32 [ %10, %329 ], [ %389, %342 ]
  %344 = phi <16 x i8> [ %339, %329 ], [ %363, %342 ]
  %345 = phi i8* [ %312, %329 ], [ %387, %342 ]
  %346 = phi i8* [ %235, %329 ], [ %388, %342 ]
  %347 = phi <2 x i64> [ %327, %329 ], [ %358, %342 ]
  %348 = getelementptr inbounds i8, i8* %345, i64 %340
  %349 = bitcast i8* %348 to i64*
  %350 = load i64, i64* %349, align 1
  %351 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %350, i32 0
  %352 = bitcast <2 x i64> %347 to <4 x i32>
  %353 = bitcast <2 x i64> %351 to <4 x i32>
  %354 = shufflevector <4 x i32> %352, <4 x i32> %353, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %355 = getelementptr inbounds i8, i8* %345, i64 %341
  %356 = bitcast i8* %355 to i64*
  %357 = load i64, i64* %356, align 1
  %358 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %357, i32 0
  %359 = bitcast <2 x i64> %358 to <4 x i32>
  %360 = shufflevector <4 x i32> %353, <4 x i32> %359, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %361 = bitcast <4 x i32> %354 to <16 x i8>
  %362 = bitcast <4 x i32> %360 to <16 x i8>
  %363 = shufflevector <16 x i8> %361, <16 x i8> %362, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %364 = bitcast <16 x i8> %344 to <8 x i16>
  %365 = bitcast <16 x i8> %363 to <8 x i16>
  %366 = shufflevector <8 x i16> %364, <8 x i16> %365, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %367 = shufflevector <8 x i16> %364, <8 x i16> %365, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %368 = bitcast <8 x i16> %366 to <16 x i8>
  %369 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %368, <16 x i8> %319) #7
  %370 = bitcast <8 x i16> %367 to <16 x i8>
  %371 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %370, <16 x i8> %319) #7
  %372 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %369, <8 x i16> zeroinitializer) #7
  %373 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %371, <8 x i16> zeroinitializer) #7
  %374 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %372, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %375 = ashr <8 x i16> %374, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %376 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %373, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %377 = ashr <8 x i16> %376, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %378 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %375, <8 x i16> undef) #7
  %379 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %377, <8 x i16> undef) #7
  %380 = bitcast <16 x i8> %378 to <4 x i32>
  %381 = extractelement <4 x i32> %380, i32 0
  %382 = bitcast i8* %346 to i32*
  store i32 %381, i32* %382, align 4
  %383 = bitcast <16 x i8> %379 to <4 x i32>
  %384 = extractelement <4 x i32> %383, i32 0
  %385 = getelementptr inbounds i8, i8* %346, i64 %3
  %386 = bitcast i8* %385 to i32*
  store i32 %384, i32* %386, align 4
  %387 = getelementptr inbounds i8, i8* %345, i64 %313
  %388 = getelementptr inbounds i8, i8* %346, i64 %314
  %389 = add nsw i32 %343, -2
  %390 = icmp sgt i32 %389, 1
  br i1 %390, label %342, label %407

391:                                              ; preds = %152, %391
  %392 = phi i8* [ %395, %391 ], [ %0, %152 ]
  %393 = phi i8* [ %396, %391 ], [ %2, %152 ]
  %394 = phi i32 [ %397, %391 ], [ %9, %152 ]
  tail call void @vpx_filter_block1d16_v2_ssse3(i8* %392, i64 %1, i8* %393, i64 %3, i32 %10, i16* %13) #7
  %395 = getelementptr inbounds i8, i8* %392, i64 16
  %396 = getelementptr inbounds i8, i8* %393, i64 16
  %397 = add nsw i32 %394, -16
  %398 = icmp sgt i32 %397, 15
  br i1 %398, label %391, label %399

399:                                              ; preds = %391
  %400 = and i32 %9, 15
  br label %401

401:                                              ; preds = %399, %152
  %402 = phi i32 [ %9, %152 ], [ %400, %399 ]
  %403 = phi i8* [ %2, %152 ], [ %396, %399 ]
  %404 = phi i8* [ %0, %152 ], [ %395, %399 ]
  switch i32 %402, label %407 [
    i32 8, label %405
    i32 4, label %406
  ]

405:                                              ; preds = %401
  tail call void @vpx_filter_block1d8_v2_ssse3(i8* %404, i64 %1, i8* %403, i64 %3, i32 %10, i16* %13) #7
  br label %407

406:                                              ; preds = %401
  tail call void @vpx_filter_block1d4_v2_ssse3(i8* %404, i64 %1, i8* %403, i64 %3, i32 %10, i16* %13) #7
  br label %407

407:                                              ; preds = %88, %342, %267, %310, %237, %44, %405, %406, %401, %233, %132, %40
  ret void
}

declare void @vpx_filter_block1d16_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d16_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d8_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_horiz_ssse3(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %43, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %37

27:                                               ; preds = %25, %27
  %28 = phi i8* [ %31, %27 ], [ %0, %25 ]
  %29 = phi i8* [ %32, %27 ], [ %2, %25 ]
  %30 = phi i32 [ %33, %27 ], [ %9, %25 ]
  tail call void @vpx_filter_block1d16_h8_avg_ssse3(i8* %28, i64 %1, i8* %29, i64 %3, i32 %10, i16* %13) #7
  %31 = getelementptr inbounds i8, i8* %28, i64 16
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = add nsw i32 %30, -16
  %34 = icmp sgt i32 %33, 15
  br i1 %34, label %27, label %35

35:                                               ; preds = %27
  %36 = and i32 %9, 15
  br label %37

37:                                               ; preds = %35, %25
  %38 = phi i32 [ %9, %25 ], [ %36, %35 ]
  %39 = phi i8* [ %2, %25 ], [ %32, %35 ]
  %40 = phi i8* [ %0, %25 ], [ %31, %35 ]
  switch i32 %38, label %85 [
    i32 8, label %41
    i32 4, label %42
  ]

41:                                               ; preds = %37
  tail call void @vpx_filter_block1d8_h8_avg_ssse3(i8* %40, i64 %1, i8* %39, i64 %3, i32 %10, i16* %13) #7
  br label %85

42:                                               ; preds = %37
  tail call void @vpx_filter_block1d4_h8_avg_ssse3(i8* %40, i64 %1, i8* %39, i64 %3, i32 %10, i16* %13) #7
  br label %85

43:                                               ; preds = %11
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %47 = load i16, i16* %46, align 2
  %48 = or i16 %47, %45
  %49 = icmp eq i16 %48, 0
  %50 = icmp sgt i32 %9, 15
  br i1 %49, label %52, label %51

51:                                               ; preds = %43
  br i1 %50, label %53, label %63

52:                                               ; preds = %43
  br i1 %50, label %69, label %79

53:                                               ; preds = %51, %53
  %54 = phi i8* [ %57, %53 ], [ %0, %51 ]
  %55 = phi i8* [ %58, %53 ], [ %2, %51 ]
  %56 = phi i32 [ %59, %53 ], [ %9, %51 ]
  tail call void @vpx_filter_block1d16_h8_avg_ssse3(i8* %54, i64 %1, i8* %55, i64 %3, i32 %10, i16* %13) #7
  %57 = getelementptr inbounds i8, i8* %54, i64 16
  %58 = getelementptr inbounds i8, i8* %55, i64 16
  %59 = add nsw i32 %56, -16
  %60 = icmp sgt i32 %59, 15
  br i1 %60, label %53, label %61

61:                                               ; preds = %53
  %62 = and i32 %9, 15
  br label %63

63:                                               ; preds = %61, %51
  %64 = phi i32 [ %9, %51 ], [ %62, %61 ]
  %65 = phi i8* [ %2, %51 ], [ %58, %61 ]
  %66 = phi i8* [ %0, %51 ], [ %57, %61 ]
  switch i32 %64, label %85 [
    i32 8, label %67
    i32 4, label %68
  ]

67:                                               ; preds = %63
  tail call void @vpx_filter_block1d8_h8_avg_ssse3(i8* %66, i64 %1, i8* %65, i64 %3, i32 %10, i16* %13) #7
  br label %85

68:                                               ; preds = %63
  tail call void @vpx_filter_block1d4_h8_avg_ssse3(i8* %66, i64 %1, i8* %65, i64 %3, i32 %10, i16* %13) #7
  br label %85

69:                                               ; preds = %52, %69
  %70 = phi i8* [ %73, %69 ], [ %0, %52 ]
  %71 = phi i8* [ %74, %69 ], [ %2, %52 ]
  %72 = phi i32 [ %75, %69 ], [ %9, %52 ]
  tail call void @vpx_filter_block1d16_h2_avg_ssse3(i8* %70, i64 %1, i8* %71, i64 %3, i32 %10, i16* %13) #7
  %73 = getelementptr inbounds i8, i8* %70, i64 16
  %74 = getelementptr inbounds i8, i8* %71, i64 16
  %75 = add nsw i32 %72, -16
  %76 = icmp sgt i32 %75, 15
  br i1 %76, label %69, label %77

77:                                               ; preds = %69
  %78 = and i32 %9, 15
  br label %79

79:                                               ; preds = %77, %52
  %80 = phi i32 [ %9, %52 ], [ %78, %77 ]
  %81 = phi i8* [ %2, %52 ], [ %74, %77 ]
  %82 = phi i8* [ %0, %52 ], [ %73, %77 ]
  switch i32 %80, label %85 [
    i32 8, label %83
    i32 4, label %84
  ]

83:                                               ; preds = %79
  tail call void @vpx_filter_block1d8_h2_avg_ssse3(i8* %82, i64 %1, i8* %81, i64 %3, i32 %10, i16* %13) #7
  br label %85

84:                                               ; preds = %79
  tail call void @vpx_filter_block1d4_h2_avg_ssse3(i8* %82, i64 %1, i8* %81, i64 %3, i32 %10, i16* %13) #7
  br label %85

85:                                               ; preds = %83, %84, %79, %67, %68, %63, %41, %42, %37
  ret void
}

declare void @vpx_filter_block1d16_h8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d8_h8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_h8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d16_h2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d8_h2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_h2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_vert_ssse3(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %50, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %40

27:                                               ; preds = %25
  %28 = mul i64 %1, -3
  br label %29

29:                                               ; preds = %27, %29
  %30 = phi i8* [ %0, %27 ], [ %34, %29 ]
  %31 = phi i8* [ %2, %27 ], [ %35, %29 ]
  %32 = phi i32 [ %9, %27 ], [ %36, %29 ]
  %33 = getelementptr inbounds i8, i8* %30, i64 %28
  tail call void @vpx_filter_block1d16_v8_avg_ssse3(i8* %33, i64 %1, i8* %31, i64 %3, i32 %10, i16* %13) #7
  %34 = getelementptr inbounds i8, i8* %30, i64 16
  %35 = getelementptr inbounds i8, i8* %31, i64 16
  %36 = add nsw i32 %32, -16
  %37 = icmp sgt i32 %36, 15
  br i1 %37, label %29, label %38

38:                                               ; preds = %29
  %39 = and i32 %9, 15
  br label %40

40:                                               ; preds = %38, %25
  %41 = phi i32 [ %9, %25 ], [ %39, %38 ]
  %42 = phi i8* [ %2, %25 ], [ %35, %38 ]
  %43 = phi i8* [ %0, %25 ], [ %34, %38 ]
  switch i32 %41, label %99 [
    i32 8, label %44
    i32 4, label %47
  ]

44:                                               ; preds = %40
  %45 = mul i64 %1, -3
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  tail call void @vpx_filter_block1d8_v8_avg_ssse3(i8* %46, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #7
  br label %99

47:                                               ; preds = %40
  %48 = mul i64 %1, -3
  %49 = getelementptr inbounds i8, i8* %43, i64 %48
  tail call void @vpx_filter_block1d4_v8_avg_ssse3(i8* %49, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #7
  br label %99

50:                                               ; preds = %11
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %52 = load i16, i16* %51, align 2
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %54 = load i16, i16* %53, align 2
  %55 = or i16 %54, %52
  %56 = icmp eq i16 %55, 0
  %57 = icmp sgt i32 %9, 15
  br i1 %56, label %61, label %58

58:                                               ; preds = %50
  br i1 %57, label %59, label %73

59:                                               ; preds = %58
  %60 = mul i64 %1, -3
  br label %62

61:                                               ; preds = %50
  br i1 %57, label %83, label %93

62:                                               ; preds = %59, %62
  %63 = phi i8* [ %0, %59 ], [ %67, %62 ]
  %64 = phi i8* [ %2, %59 ], [ %68, %62 ]
  %65 = phi i32 [ %9, %59 ], [ %69, %62 ]
  %66 = getelementptr inbounds i8, i8* %63, i64 %60
  tail call void @vpx_filter_block1d16_v8_avg_ssse3(i8* %66, i64 %1, i8* %64, i64 %3, i32 %10, i16* %13) #7
  %67 = getelementptr inbounds i8, i8* %63, i64 16
  %68 = getelementptr inbounds i8, i8* %64, i64 16
  %69 = add nsw i32 %65, -16
  %70 = icmp sgt i32 %69, 15
  br i1 %70, label %62, label %71

71:                                               ; preds = %62
  %72 = and i32 %9, 15
  br label %73

73:                                               ; preds = %71, %58
  %74 = phi i32 [ %9, %58 ], [ %72, %71 ]
  %75 = phi i8* [ %2, %58 ], [ %68, %71 ]
  %76 = phi i8* [ %0, %58 ], [ %67, %71 ]
  switch i32 %74, label %99 [
    i32 8, label %77
    i32 4, label %80
  ]

77:                                               ; preds = %73
  %78 = mul i64 %1, -3
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  tail call void @vpx_filter_block1d8_v8_avg_ssse3(i8* %79, i64 %1, i8* %75, i64 %3, i32 %10, i16* %13) #7
  br label %99

80:                                               ; preds = %73
  %81 = mul i64 %1, -3
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  tail call void @vpx_filter_block1d4_v8_avg_ssse3(i8* %82, i64 %1, i8* %75, i64 %3, i32 %10, i16* %13) #7
  br label %99

83:                                               ; preds = %61, %83
  %84 = phi i8* [ %87, %83 ], [ %0, %61 ]
  %85 = phi i8* [ %88, %83 ], [ %2, %61 ]
  %86 = phi i32 [ %89, %83 ], [ %9, %61 ]
  tail call void @vpx_filter_block1d16_v2_avg_ssse3(i8* %84, i64 %1, i8* %85, i64 %3, i32 %10, i16* %13) #7
  %87 = getelementptr inbounds i8, i8* %84, i64 16
  %88 = getelementptr inbounds i8, i8* %85, i64 16
  %89 = add nsw i32 %86, -16
  %90 = icmp sgt i32 %89, 15
  br i1 %90, label %83, label %91

91:                                               ; preds = %83
  %92 = and i32 %9, 15
  br label %93

93:                                               ; preds = %91, %61
  %94 = phi i32 [ %9, %61 ], [ %92, %91 ]
  %95 = phi i8* [ %2, %61 ], [ %88, %91 ]
  %96 = phi i8* [ %0, %61 ], [ %87, %91 ]
  switch i32 %94, label %99 [
    i32 8, label %97
    i32 4, label %98
  ]

97:                                               ; preds = %93
  tail call void @vpx_filter_block1d8_v2_avg_ssse3(i8* %96, i64 %1, i8* %95, i64 %3, i32 %10, i16* %13) #7
  br label %99

98:                                               ; preds = %93
  tail call void @vpx_filter_block1d4_v2_avg_ssse3(i8* %96, i64 %1, i8* %95, i64 %3, i32 %10, i16* %13) #7
  br label %99

99:                                               ; preds = %97, %98, %93, %77, %80, %73, %44, %47, %40
  ret void
}

declare void @vpx_filter_block1d16_v8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d8_v8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_v8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d16_v2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d8_v2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @vpx_filter_block1d4_v2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_scaled_2d_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = alloca [16 x i8], align 16
  %13 = alloca [64 x i8], align 16
  %14 = alloca [9152 x i8], align 16
  %15 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9152, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 9152, i1 false)
  %16 = add nsw i32 %10, -1
  %17 = mul nsw i32 %16, %8
  %18 = add nsw i32 %17, %7
  %19 = ashr i32 %18, 4
  %20 = add nsw i32 %19, 8
  %21 = icmp sgt i32 %9, 7
  %22 = mul i64 %1, -3
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  br i1 %21, label %24, label %280

24:                                               ; preds = %11
  %25 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %25) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 64, i1 false) #7
  %26 = getelementptr inbounds i8, i8* %23, i64 -3
  %27 = and i32 %20, 7
  %28 = add nsw i32 %19, 16
  %29 = sub nsw i32 %28, %27
  %30 = shl nsw i64 %1, 3
  %31 = shl nsw i64 %1, 1
  %32 = mul nsw i64 %1, 3
  %33 = shl nsw i64 %1, 2
  %34 = bitcast [64 x i8]* %13 to i64*
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 8
  %36 = bitcast i8* %35 to i64*
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 16
  %38 = bitcast i8* %37 to i64*
  %39 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 24
  %40 = bitcast i8* %39 to i64*
  %41 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 32
  %42 = bitcast i8* %41 to i64*
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 40
  %44 = bitcast i8* %43 to i64*
  %45 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 48
  %46 = bitcast i8* %45 to i64*
  %47 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 56
  %48 = bitcast i8* %47 to i64*
  %49 = sext i32 %9 to i64
  %50 = add nsw i64 %1, 3
  %51 = add nsw i64 %31, 3
  %52 = add nsw i64 %32, 3
  %53 = or i64 %33, 3
  %54 = mul nsw i64 %1, 5
  %55 = add nsw i64 %54, 3
  %56 = mul nsw i64 %1, 6
  %57 = add nsw i64 %56, 3
  %58 = mul nsw i64 %1, 7
  %59 = add nsw i64 %58, 3
  br label %60

60:                                               ; preds = %274, %24
  %61 = phi i8* [ %15, %24 ], [ %276, %274 ]
  %62 = phi i8* [ %26, %24 ], [ %275, %274 ]
  %63 = phi i32 [ %29, %24 ], [ %277, %274 ]
  br label %64

64:                                               ; preds = %60, %199
  %65 = phi i64 [ %272, %199 ], [ 0, %60 ]
  %66 = phi i32 [ %196, %199 ], [ %5, %60 ]
  br label %67

67:                                               ; preds = %195, %64
  %68 = phi i64 [ 0, %64 ], [ %197, %195 ]
  %69 = phi i32 [ %66, %64 ], [ %196, %195 ]
  %70 = ashr i32 %69, 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %62, i64 %71
  %73 = and i32 %69, 15
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %108

75:                                               ; preds = %67
  %76 = shl i64 %68, 3
  %77 = getelementptr inbounds i8, i8* %72, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %76
  store i8 %78, i8* %79, align 8
  %80 = getelementptr inbounds i8, i8* %72, i64 %50
  %81 = load i8, i8* %80, align 1
  %82 = or i64 %76, 1
  %83 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %82
  store i8 %81, i8* %83, align 1
  %84 = getelementptr inbounds i8, i8* %72, i64 %51
  %85 = load i8, i8* %84, align 1
  %86 = or i64 %76, 2
  %87 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %86
  store i8 %85, i8* %87, align 2
  %88 = getelementptr inbounds i8, i8* %72, i64 %52
  %89 = load i8, i8* %88, align 1
  %90 = or i64 %76, 3
  %91 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %90
  store i8 %89, i8* %91, align 1
  %92 = getelementptr inbounds i8, i8* %72, i64 %53
  %93 = load i8, i8* %92, align 1
  %94 = or i64 %76, 4
  %95 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %94
  store i8 %93, i8* %95, align 4
  %96 = getelementptr inbounds i8, i8* %72, i64 %55
  %97 = load i8, i8* %96, align 1
  %98 = or i64 %76, 5
  %99 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %98
  store i8 %97, i8* %99, align 1
  %100 = getelementptr inbounds i8, i8* %72, i64 %57
  %101 = load i8, i8* %100, align 1
  %102 = or i64 %76, 6
  %103 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %102
  store i8 %101, i8* %103, align 2
  %104 = getelementptr inbounds i8, i8* %72, i64 %59
  %105 = load i8, i8* %104, align 1
  %106 = or i64 %76, 7
  %107 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %106
  store i8 %105, i8* %107, align 1
  br label %195

108:                                              ; preds = %67
  %109 = zext i32 %73 to i64
  %110 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %109, i64 0
  %111 = shl nsw i64 %68, 3
  %112 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %111
  %113 = bitcast i8* %72 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = insertelement <2 x i64> undef, i64 %114, i32 0
  %116 = getelementptr inbounds i8, i8* %72, i64 %1
  %117 = bitcast i8* %116 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = insertelement <2 x i64> undef, i64 %118, i32 0
  %120 = getelementptr inbounds i8, i8* %72, i64 %31
  %121 = bitcast i8* %120 to i64*
  %122 = load i64, i64* %121, align 1
  %123 = insertelement <2 x i64> undef, i64 %122, i32 0
  %124 = getelementptr inbounds i8, i8* %72, i64 %32
  %125 = bitcast i8* %124 to i64*
  %126 = load i64, i64* %125, align 1
  %127 = insertelement <2 x i64> undef, i64 %126, i32 0
  %128 = getelementptr inbounds i8, i8* %72, i64 %33
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = getelementptr inbounds i8, i8* %128, i64 %1
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = getelementptr inbounds i8, i8* %128, i64 %31
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 1
  %139 = insertelement <2 x i64> undef, i64 %138, i32 0
  %140 = getelementptr inbounds i8, i8* %128, i64 %32
  %141 = bitcast i8* %140 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> undef, i64 %142, i32 0
  %144 = bitcast <2 x i64> %115 to <8 x i16>
  %145 = bitcast <2 x i64> %119 to <8 x i16>
  %146 = shufflevector <8 x i16> %144, <8 x i16> %145, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = bitcast <2 x i64> %123 to <8 x i16>
  %148 = bitcast <2 x i64> %127 to <8 x i16>
  %149 = shufflevector <8 x i16> %147, <8 x i16> %148, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %150 = bitcast <2 x i64> %131 to <8 x i16>
  %151 = bitcast <2 x i64> %135 to <8 x i16>
  %152 = shufflevector <8 x i16> %150, <8 x i16> %151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %153 = bitcast <2 x i64> %139 to <8 x i16>
  %154 = bitcast <2 x i64> %143 to <8 x i16>
  %155 = shufflevector <8 x i16> %153, <8 x i16> %154, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %156 = bitcast <8 x i16> %146 to <4 x i32>
  %157 = bitcast <8 x i16> %149 to <4 x i32>
  %158 = shufflevector <4 x i32> %156, <4 x i32> %157, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %159 = bitcast <4 x i32> %158 to <2 x i64>
  %160 = bitcast <8 x i16> %152 to <4 x i32>
  %161 = bitcast <8 x i16> %155 to <4 x i32>
  %162 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %163 = bitcast <4 x i32> %162 to <2 x i64>
  %164 = shufflevector <4 x i32> %156, <4 x i32> %157, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %159, <2 x i64> %163, <2 x i32> <i32 0, i32 2>
  %169 = shufflevector <2 x i64> %159, <2 x i64> %163, <2 x i32> <i32 1, i32 3>
  %170 = shufflevector <2 x i64> %165, <2 x i64> %167, <2 x i32> <i32 0, i32 2>
  %171 = shufflevector <2 x i64> %165, <2 x i64> %167, <2 x i32> <i32 1, i32 3>
  %172 = bitcast i16* %110 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 16
  %174 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %175 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %176 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %177 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %178 = bitcast <2 x i64> %168 to <16 x i8>
  %179 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %174) #7
  %180 = bitcast <2 x i64> %169 to <16 x i8>
  %181 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %180, <16 x i8> %175) #7
  %182 = bitcast <2 x i64> %170 to <16 x i8>
  %183 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %182, <16 x i8> %176) #7
  %184 = bitcast <2 x i64> %171 to <16 x i8>
  %185 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %177) #7
  %186 = add <8 x i16> %185, %181
  %187 = add <8 x i16> %179, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %188 = add <8 x i16> %187, %183
  %189 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %188, <8 x i16> %186) #7
  %190 = ashr <8 x i16> %189, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %191 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %190, <8 x i16> undef) #7
  %192 = bitcast <16 x i8> %191 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = bitcast i8* %112 to i64*
  store i64 %193, i64* %194, align 8
  br label %195

195:                                              ; preds = %108, %75
  %196 = add nsw i32 %69, %6
  %197 = add nuw nsw i64 %68, 1
  %198 = icmp eq i64 %197, 8
  br i1 %198, label %199, label %67

199:                                              ; preds = %195
  %200 = getelementptr inbounds i8, i8* %61, i64 %65
  %201 = load i64, i64* %34, align 16
  %202 = insertelement <2 x i64> undef, i64 %201, i32 0
  %203 = load i64, i64* %36, align 8
  %204 = insertelement <2 x i64> undef, i64 %203, i32 0
  %205 = load i64, i64* %38, align 16
  %206 = insertelement <2 x i64> undef, i64 %205, i32 0
  %207 = load i64, i64* %40, align 8
  %208 = insertelement <2 x i64> undef, i64 %207, i32 0
  %209 = load i64, i64* %42, align 16
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = load i64, i64* %44, align 8
  %212 = insertelement <2 x i64> undef, i64 %211, i32 0
  %213 = load i64, i64* %46, align 16
  %214 = insertelement <2 x i64> undef, i64 %213, i32 0
  %215 = load i64, i64* %48, align 8
  %216 = insertelement <2 x i64> undef, i64 %215, i32 0
  %217 = bitcast <2 x i64> %202 to <16 x i8>
  %218 = bitcast <2 x i64> %204 to <16 x i8>
  %219 = shufflevector <16 x i8> %217, <16 x i8> %218, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %220 = bitcast <2 x i64> %206 to <16 x i8>
  %221 = bitcast <2 x i64> %208 to <16 x i8>
  %222 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %223 = bitcast <2 x i64> %210 to <16 x i8>
  %224 = bitcast <2 x i64> %212 to <16 x i8>
  %225 = shufflevector <16 x i8> %223, <16 x i8> %224, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = bitcast <2 x i64> %214 to <16 x i8>
  %227 = bitcast <2 x i64> %216 to <16 x i8>
  %228 = shufflevector <16 x i8> %226, <16 x i8> %227, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = bitcast <16 x i8> %219 to <8 x i16>
  %230 = bitcast <16 x i8> %222 to <8 x i16>
  %231 = shufflevector <8 x i16> %229, <8 x i16> %230, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %232 = shufflevector <8 x i16> %229, <8 x i16> %230, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %233 = bitcast <16 x i8> %225 to <8 x i16>
  %234 = bitcast <16 x i8> %228 to <8 x i16>
  %235 = shufflevector <8 x i16> %233, <8 x i16> %234, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %236 = shufflevector <8 x i16> %233, <8 x i16> %234, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %237 = bitcast <8 x i16> %231 to <4 x i32>
  %238 = bitcast <8 x i16> %235 to <4 x i32>
  %239 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = bitcast <8 x i16> %232 to <4 x i32>
  %244 = bitcast <8 x i16> %236 to <4 x i32>
  %245 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %246 = bitcast <4 x i32> %245 to <2 x i64>
  %247 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %248 = bitcast <4 x i32> %247 to <2 x i64>
  %249 = extractelement <2 x i64> %240, i32 0
  %250 = bitcast i8* %200 to i64*
  store i64 %249, i64* %250, align 1
  %251 = getelementptr inbounds i8, i8* %200, i64 64
  %252 = extractelement <2 x i64> %240, i32 1
  %253 = bitcast i8* %251 to i64*
  store i64 %252, i64* %253, align 1
  %254 = getelementptr inbounds i8, i8* %200, i64 128
  %255 = extractelement <2 x i64> %242, i32 0
  %256 = bitcast i8* %254 to i64*
  store i64 %255, i64* %256, align 1
  %257 = getelementptr inbounds i8, i8* %200, i64 192
  %258 = extractelement <2 x i64> %242, i32 1
  %259 = bitcast i8* %257 to i64*
  store i64 %258, i64* %259, align 1
  %260 = getelementptr inbounds i8, i8* %200, i64 256
  %261 = extractelement <2 x i64> %246, i32 0
  %262 = bitcast i8* %260 to i64*
  store i64 %261, i64* %262, align 1
  %263 = getelementptr inbounds i8, i8* %200, i64 320
  %264 = extractelement <2 x i64> %246, i32 1
  %265 = bitcast i8* %263 to i64*
  store i64 %264, i64* %265, align 1
  %266 = getelementptr inbounds i8, i8* %200, i64 384
  %267 = extractelement <2 x i64> %248, i32 0
  %268 = bitcast i8* %266 to i64*
  store i64 %267, i64* %268, align 1
  %269 = getelementptr inbounds i8, i8* %200, i64 448
  %270 = extractelement <2 x i64> %248, i32 1
  %271 = bitcast i8* %269 to i64*
  store i64 %270, i64* %271, align 1
  %272 = add nuw nsw i64 %65, 8
  %273 = icmp slt i64 %272, %49
  br i1 %273, label %64, label %274

274:                                              ; preds = %199
  %275 = getelementptr inbounds i8, i8* %62, i64 %30
  %276 = getelementptr inbounds i8, i8* %61, i64 512
  %277 = add nsw i32 %63, -8
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %60

279:                                              ; preds = %274
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #7
  br label %435

280:                                              ; preds = %11
  %281 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %281) #7
  %282 = icmp sgt i32 %20, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %281, i8 -86, i64 16, i1 false) #7
  br i1 %282, label %283, label %434

283:                                              ; preds = %280
  %284 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 12
  %285 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 8
  %286 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 4
  %287 = getelementptr inbounds i8, i8* %23, i64 -3
  %288 = icmp sgt i32 %9, 0
  %289 = shl nsw i64 %1, 1
  %290 = mul nsw i64 %1, 3
  %291 = bitcast [16 x i8]* %12 to i32*
  %292 = bitcast i8* %286 to i32*
  %293 = bitcast i8* %285 to i32*
  %294 = bitcast i8* %284 to i32*
  %295 = shl nsw i64 %1, 2
  %296 = sext i32 %9 to i64
  %297 = add nsw i64 %1, 3
  %298 = add nsw i64 %289, 3
  %299 = add nsw i64 %290, 3
  br label %300

300:                                              ; preds = %429, %283
  %301 = phi i32 [ 0, %283 ], [ %432, %429 ]
  %302 = phi i8* [ %287, %283 ], [ %430, %429 ]
  %303 = phi i8* [ %15, %283 ], [ %431, %429 ]
  br i1 %288, label %304, label %429

304:                                              ; preds = %300, %389
  %305 = phi i64 [ %427, %389 ], [ 0, %300 ]
  %306 = phi i32 [ %386, %389 ], [ %5, %300 ]
  br label %307

307:                                              ; preds = %385, %304
  %308 = phi i64 [ 0, %304 ], [ %387, %385 ]
  %309 = phi i32 [ %306, %304 ], [ %386, %385 ]
  %310 = ashr i32 %309, 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %302, i64 %311
  %313 = and i32 %309, 15
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %332

315:                                              ; preds = %307
  %316 = shl i64 %308, 2
  %317 = getelementptr inbounds i8, i8* %312, i64 3
  %318 = load i8, i8* %317, align 1
  %319 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %316
  store i8 %318, i8* %319, align 4
  %320 = getelementptr inbounds i8, i8* %312, i64 %297
  %321 = load i8, i8* %320, align 1
  %322 = or i64 %316, 1
  %323 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %322
  store i8 %321, i8* %323, align 1
  %324 = getelementptr inbounds i8, i8* %312, i64 %298
  %325 = load i8, i8* %324, align 1
  %326 = or i64 %316, 2
  %327 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %326
  store i8 %325, i8* %327, align 2
  %328 = getelementptr inbounds i8, i8* %312, i64 %299
  %329 = load i8, i8* %328, align 1
  %330 = or i64 %316, 3
  %331 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %330
  store i8 %329, i8* %331, align 1
  br label %385

332:                                              ; preds = %307
  %333 = zext i32 %313 to i64
  %334 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %333, i64 0
  %335 = shl nsw i64 %308, 2
  %336 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %335
  %337 = bitcast i8* %312 to i64*
  %338 = load i64, i64* %337, align 1
  %339 = insertelement <2 x i64> undef, i64 %338, i32 0
  %340 = getelementptr inbounds i8, i8* %312, i64 %1
  %341 = bitcast i8* %340 to i64*
  %342 = load i64, i64* %341, align 1
  %343 = insertelement <2 x i64> undef, i64 %342, i32 0
  %344 = getelementptr inbounds i8, i8* %312, i64 %289
  %345 = bitcast i8* %344 to i64*
  %346 = load i64, i64* %345, align 1
  %347 = insertelement <2 x i64> undef, i64 %346, i32 0
  %348 = getelementptr inbounds i8, i8* %312, i64 %290
  %349 = bitcast i8* %348 to i64*
  %350 = load i64, i64* %349, align 1
  %351 = insertelement <2 x i64> undef, i64 %350, i32 0
  %352 = bitcast <2 x i64> %339 to <8 x i16>
  %353 = bitcast <2 x i64> %343 to <8 x i16>
  %354 = shufflevector <8 x i16> %352, <8 x i16> %353, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %355 = bitcast <2 x i64> %347 to <8 x i16>
  %356 = bitcast <2 x i64> %351 to <8 x i16>
  %357 = shufflevector <8 x i16> %355, <8 x i16> %356, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %358 = bitcast <8 x i16> %354 to <4 x i32>
  %359 = bitcast <8 x i16> %357 to <4 x i32>
  %360 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %361 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %362 = bitcast <4 x i32> %360 to <16 x i8>
  %363 = shufflevector <16 x i8> %362, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %364 = bitcast <4 x i32> %361 to <16 x i8>
  %365 = shufflevector <16 x i8> %364, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %366 = bitcast i16* %334 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 16
  %368 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %369 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %370 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %371 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %372 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %362, <16 x i8> %368) #7
  %373 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %363, <16 x i8> %369) #7
  %374 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %364, <16 x i8> %370) #7
  %375 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %365, <16 x i8> %371) #7
  %376 = add <8 x i16> %375, %373
  %377 = add <8 x i16> %372, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %378 = add <8 x i16> %377, %374
  %379 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %378, <8 x i16> %376) #7
  %380 = ashr <8 x i16> %379, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %381 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %380, <8 x i16> undef) #7
  %382 = bitcast <16 x i8> %381 to <4 x i32>
  %383 = extractelement <4 x i32> %382, i32 0
  %384 = bitcast i8* %336 to i32*
  store i32 %383, i32* %384, align 4
  br label %385

385:                                              ; preds = %332, %315
  %386 = add nsw i32 %309, %6
  %387 = add nuw nsw i64 %308, 1
  %388 = icmp eq i64 %387, 4
  br i1 %388, label %389, label %307

389:                                              ; preds = %385
  %390 = getelementptr inbounds i8, i8* %303, i64 %305
  %391 = load i32, i32* %291, align 16
  %392 = insertelement <4 x i32> undef, i32 %391, i32 0
  %393 = load i32, i32* %292, align 4
  %394 = insertelement <4 x i32> undef, i32 %393, i32 0
  %395 = load i32, i32* %293, align 8
  %396 = insertelement <4 x i32> undef, i32 %395, i32 0
  %397 = load i32, i32* %294, align 4
  %398 = insertelement <4 x i32> undef, i32 %397, i32 0
  %399 = bitcast <4 x i32> %392 to <16 x i8>
  %400 = bitcast <4 x i32> %394 to <16 x i8>
  %401 = shufflevector <16 x i8> %399, <16 x i8> %400, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %402 = bitcast <4 x i32> %396 to <16 x i8>
  %403 = bitcast <4 x i32> %398 to <16 x i8>
  %404 = shufflevector <16 x i8> %402, <16 x i8> %403, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %405 = bitcast <16 x i8> %401 to <8 x i16>
  %406 = bitcast <16 x i8> %404 to <8 x i16>
  %407 = shufflevector <8 x i16> %405, <8 x i16> %406, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %408 = bitcast <8 x i16> %407 to <16 x i8>
  %409 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %410 = bitcast <16 x i8> %409 to <4 x i32>
  %411 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %412 = bitcast <16 x i8> %411 to <4 x i32>
  %413 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %414 = bitcast <16 x i8> %413 to <4 x i32>
  %415 = bitcast <8 x i16> %407 to <4 x i32>
  %416 = extractelement <4 x i32> %415, i32 0
  %417 = bitcast i8* %390 to i32*
  store i32 %416, i32* %417, align 4
  %418 = extractelement <4 x i32> %410, i32 0
  %419 = getelementptr inbounds i8, i8* %390, i64 64
  %420 = bitcast i8* %419 to i32*
  store i32 %418, i32* %420, align 4
  %421 = extractelement <4 x i32> %412, i32 0
  %422 = getelementptr inbounds i8, i8* %390, i64 128
  %423 = bitcast i8* %422 to i32*
  store i32 %421, i32* %423, align 4
  %424 = extractelement <4 x i32> %414, i32 0
  %425 = getelementptr inbounds i8, i8* %390, i64 192
  %426 = bitcast i8* %425 to i32*
  store i32 %424, i32* %426, align 4
  %427 = add nuw nsw i64 %305, 4
  %428 = icmp slt i64 %427, %296
  br i1 %428, label %304, label %429

429:                                              ; preds = %389, %300
  %430 = getelementptr inbounds i8, i8* %302, i64 %295
  %431 = getelementptr inbounds i8, i8* %303, i64 256
  %432 = add nuw nsw i32 %301, 4
  %433 = icmp slt i32 %432, %20
  br i1 %433, label %300, label %434

434:                                              ; preds = %429, %280
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %281) #7
  br label %435

435:                                              ; preds = %434, %279
  %436 = icmp sgt i32 %9, 15
  br i1 %436, label %437, label %528

437:                                              ; preds = %435
  %438 = icmp sgt i32 %10, 0
  br i1 %438, label %439, label %709

439:                                              ; preds = %437
  %440 = sext i32 %9 to i64
  %441 = zext i32 %10 to i64
  br label %442

442:                                              ; preds = %524, %439
  %443 = phi i64 [ 0, %439 ], [ %526, %524 ]
  %444 = phi i32 [ %7, %439 ], [ %525, %524 ]
  %445 = ashr i32 %444, 4
  %446 = sext i32 %445 to i64
  %447 = shl nsw i64 %446, 6
  %448 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 %447
  %449 = and i32 %444, 15
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %520, label %451

451:                                              ; preds = %442
  %452 = zext i32 %449 to i64
  %453 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %452, i64 0
  %454 = mul nsw i64 %443, %3
  %455 = getelementptr inbounds i8, i8* %2, i64 %454
  %456 = bitcast i16* %453 to <16 x i8>*
  %457 = load <16 x i8>, <16 x i8>* %456, align 16
  %458 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %459 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %460 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %461 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  br label %462

462:                                              ; preds = %451, %462
  %463 = phi i64 [ %518, %462 ], [ 0, %451 ]
  %464 = phi i8* [ %515, %462 ], [ %448, %451 ]
  %465 = bitcast i8* %464 to <16 x i8>*
  %466 = load <16 x i8>, <16 x i8>* %465, align 1
  %467 = getelementptr inbounds i8, i8* %464, i64 64
  %468 = bitcast i8* %467 to <16 x i8>*
  %469 = load <16 x i8>, <16 x i8>* %468, align 1
  %470 = getelementptr inbounds i8, i8* %464, i64 128
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1
  %473 = getelementptr inbounds i8, i8* %464, i64 192
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1
  %476 = getelementptr inbounds i8, i8* %464, i64 256
  %477 = bitcast i8* %476 to <16 x i8>*
  %478 = load <16 x i8>, <16 x i8>* %477, align 1
  %479 = getelementptr inbounds i8, i8* %464, i64 320
  %480 = bitcast i8* %479 to <16 x i8>*
  %481 = load <16 x i8>, <16 x i8>* %480, align 1
  %482 = getelementptr inbounds i8, i8* %464, i64 384
  %483 = bitcast i8* %482 to <16 x i8>*
  %484 = load <16 x i8>, <16 x i8>* %483, align 1
  %485 = getelementptr inbounds i8, i8* %464, i64 448
  %486 = bitcast i8* %485 to <16 x i8>*
  %487 = load <16 x i8>, <16 x i8>* %486, align 1
  %488 = shufflevector <16 x i8> %466, <16 x i8> %469, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %489 = shufflevector <16 x i8> %466, <16 x i8> %469, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %490 = shufflevector <16 x i8> %472, <16 x i8> %475, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %491 = shufflevector <16 x i8> %472, <16 x i8> %475, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %492 = shufflevector <16 x i8> %478, <16 x i8> %481, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %493 = shufflevector <16 x i8> %478, <16 x i8> %481, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %494 = shufflevector <16 x i8> %484, <16 x i8> %487, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %495 = shufflevector <16 x i8> %484, <16 x i8> %487, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %496 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %488, <16 x i8> %458) #7
  %497 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %490, <16 x i8> %459) #7
  %498 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %492, <16 x i8> %460) #7
  %499 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %494, <16 x i8> %461) #7
  %500 = add <8 x i16> %499, %497
  %501 = add <8 x i16> %496, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %502 = add <8 x i16> %501, %498
  %503 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %502, <8 x i16> %500) #7
  %504 = ashr <8 x i16> %503, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %505 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %489, <16 x i8> %458) #7
  %506 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %491, <16 x i8> %459) #7
  %507 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %493, <16 x i8> %460) #7
  %508 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %495, <16 x i8> %461) #7
  %509 = add <8 x i16> %508, %506
  %510 = add <8 x i16> %505, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %511 = add <8 x i16> %510, %507
  %512 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %511, <8 x i16> %509) #7
  %513 = ashr <8 x i16> %512, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %514 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %504, <8 x i16> %513) #7
  %515 = getelementptr inbounds i8, i8* %464, i64 16
  %516 = getelementptr inbounds i8, i8* %455, i64 %463
  %517 = bitcast i8* %516 to <16 x i8>*
  store <16 x i8> %514, <16 x i8>* %517, align 16
  %518 = add nuw nsw i64 %463, 16
  %519 = icmp slt i64 %518, %440
  br i1 %519, label %462, label %524

520:                                              ; preds = %442
  %521 = mul nsw i64 %443, %3
  %522 = getelementptr inbounds i8, i8* %2, i64 %521
  %523 = getelementptr inbounds i8, i8* %448, i64 192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %522, i8* align 16 %523, i64 %440, i1 false) #7
  br label %524

524:                                              ; preds = %462, %520
  %525 = add nsw i32 %444, %8
  %526 = add nuw nsw i64 %443, 1
  %527 = icmp eq i64 %526, %441
  br i1 %527, label %709, label %442

528:                                              ; preds = %435
  %529 = icmp eq i32 %9, 8
  %530 = icmp sgt i32 %10, 0
  br i1 %529, label %531, label %621

531:                                              ; preds = %528
  br i1 %530, label %532, label %709

532:                                              ; preds = %531
  %533 = zext i32 %10 to i64
  br label %534

534:                                              ; preds = %617, %532
  %535 = phi i64 [ 0, %532 ], [ %619, %617 ]
  %536 = phi i32 [ %7, %532 ], [ %618, %617 ]
  %537 = ashr i32 %536, 4
  %538 = sext i32 %537 to i64
  %539 = shl nsw i64 %538, 6
  %540 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 %539
  %541 = and i32 %536, 15
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %610, label %543

543:                                              ; preds = %534
  %544 = zext i32 %541 to i64
  %545 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %544, i64 0
  %546 = mul nsw i64 %535, %3
  %547 = getelementptr inbounds i8, i8* %2, i64 %546
  %548 = bitcast i8* %540 to i64*
  %549 = load i64, i64* %548, align 16
  %550 = insertelement <2 x i64> undef, i64 %549, i32 0
  %551 = getelementptr inbounds i8, i8* %540, i64 64
  %552 = bitcast i8* %551 to i64*
  %553 = load i64, i64* %552, align 16
  %554 = insertelement <2 x i64> undef, i64 %553, i32 0
  %555 = getelementptr inbounds i8, i8* %540, i64 128
  %556 = bitcast i8* %555 to i64*
  %557 = load i64, i64* %556, align 16
  %558 = insertelement <2 x i64> undef, i64 %557, i32 0
  %559 = getelementptr inbounds i8, i8* %540, i64 192
  %560 = bitcast i8* %559 to i64*
  %561 = load i64, i64* %560, align 16
  %562 = insertelement <2 x i64> undef, i64 %561, i32 0
  %563 = getelementptr inbounds i8, i8* %540, i64 256
  %564 = bitcast i8* %563 to i64*
  %565 = load i64, i64* %564, align 16
  %566 = insertelement <2 x i64> undef, i64 %565, i32 0
  %567 = getelementptr inbounds i8, i8* %540, i64 320
  %568 = bitcast i8* %567 to i64*
  %569 = load i64, i64* %568, align 16
  %570 = insertelement <2 x i64> undef, i64 %569, i32 0
  %571 = getelementptr inbounds i8, i8* %540, i64 384
  %572 = bitcast i8* %571 to i64*
  %573 = load i64, i64* %572, align 16
  %574 = insertelement <2 x i64> undef, i64 %573, i32 0
  %575 = getelementptr inbounds i8, i8* %540, i64 448
  %576 = bitcast i8* %575 to i64*
  %577 = load i64, i64* %576, align 16
  %578 = insertelement <2 x i64> undef, i64 %577, i32 0
  %579 = bitcast <2 x i64> %550 to <16 x i8>
  %580 = bitcast <2 x i64> %554 to <16 x i8>
  %581 = shufflevector <16 x i8> %579, <16 x i8> %580, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %582 = bitcast <2 x i64> %558 to <16 x i8>
  %583 = bitcast <2 x i64> %562 to <16 x i8>
  %584 = shufflevector <16 x i8> %582, <16 x i8> %583, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %585 = bitcast <2 x i64> %566 to <16 x i8>
  %586 = bitcast <2 x i64> %570 to <16 x i8>
  %587 = shufflevector <16 x i8> %585, <16 x i8> %586, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %588 = bitcast <2 x i64> %574 to <16 x i8>
  %589 = bitcast <2 x i64> %578 to <16 x i8>
  %590 = shufflevector <16 x i8> %588, <16 x i8> %589, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %591 = bitcast i16* %545 to <16 x i8>*
  %592 = load <16 x i8>, <16 x i8>* %591, align 16
  %593 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %594 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %595 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %596 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %597 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %581, <16 x i8> %593) #7
  %598 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %584, <16 x i8> %594) #7
  %599 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %587, <16 x i8> %595) #7
  %600 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %590, <16 x i8> %596) #7
  %601 = add <8 x i16> %600, %598
  %602 = add <8 x i16> %597, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %603 = add <8 x i16> %602, %599
  %604 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %603, <8 x i16> %601) #7
  %605 = ashr <8 x i16> %604, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %606 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %605, <8 x i16> undef) #7
  %607 = bitcast <16 x i8> %606 to <2 x i64>
  %608 = extractelement <2 x i64> %607, i32 0
  %609 = bitcast i8* %547 to i64*
  store i64 %608, i64* %609, align 1
  br label %617

610:                                              ; preds = %534
  %611 = mul nsw i64 %535, %3
  %612 = getelementptr inbounds i8, i8* %2, i64 %611
  %613 = getelementptr inbounds i8, i8* %540, i64 192
  %614 = bitcast i8* %613 to i64*
  %615 = bitcast i8* %612 to i64*
  %616 = load i64, i64* %614, align 16
  store i64 %616, i64* %615, align 1
  br label %617

617:                                              ; preds = %610, %543
  %618 = add nsw i32 %536, %8
  %619 = add nuw nsw i64 %535, 1
  %620 = icmp eq i64 %619, %533
  br i1 %620, label %709, label %534

621:                                              ; preds = %528
  br i1 %530, label %622, label %709

622:                                              ; preds = %621
  %623 = sext i32 %9 to i64
  %624 = zext i32 %10 to i64
  br label %625

625:                                              ; preds = %705, %622
  %626 = phi i64 [ 0, %622 ], [ %707, %705 ]
  %627 = phi i32 [ %7, %622 ], [ %706, %705 ]
  %628 = ashr i32 %627, 4
  %629 = sext i32 %628 to i64
  %630 = shl nsw i64 %629, 6
  %631 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 %630
  %632 = and i32 %627, 15
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %701, label %634

634:                                              ; preds = %625
  %635 = zext i32 %632 to i64
  %636 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %635, i64 0
  %637 = mul nsw i64 %626, %3
  %638 = getelementptr inbounds i8, i8* %2, i64 %637
  %639 = bitcast i8* %631 to i32*
  %640 = load i32, i32* %639, align 16
  %641 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %640, i32 0
  %642 = getelementptr inbounds i8, i8* %631, i64 64
  %643 = bitcast i8* %642 to i32*
  %644 = load i32, i32* %643, align 16
  %645 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %644, i32 0
  %646 = getelementptr inbounds i8, i8* %631, i64 128
  %647 = bitcast i8* %646 to i32*
  %648 = load i32, i32* %647, align 16
  %649 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %648, i32 0
  %650 = getelementptr inbounds i8, i8* %631, i64 192
  %651 = bitcast i8* %650 to i32*
  %652 = load i32, i32* %651, align 16
  %653 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %652, i32 0
  %654 = getelementptr inbounds i8, i8* %631, i64 256
  %655 = bitcast i8* %654 to i32*
  %656 = load i32, i32* %655, align 16
  %657 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %656, i32 0
  %658 = getelementptr inbounds i8, i8* %631, i64 320
  %659 = bitcast i8* %658 to i32*
  %660 = load i32, i32* %659, align 16
  %661 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %660, i32 0
  %662 = getelementptr inbounds i8, i8* %631, i64 384
  %663 = bitcast i8* %662 to i32*
  %664 = load i32, i32* %663, align 16
  %665 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %664, i32 0
  %666 = getelementptr inbounds i8, i8* %631, i64 448
  %667 = bitcast i8* %666 to i32*
  %668 = load i32, i32* %667, align 16
  %669 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %668, i32 0
  %670 = bitcast <4 x i32> %641 to <16 x i8>
  %671 = bitcast <4 x i32> %645 to <16 x i8>
  %672 = shufflevector <16 x i8> %670, <16 x i8> %671, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %673 = bitcast <4 x i32> %649 to <16 x i8>
  %674 = bitcast <4 x i32> %653 to <16 x i8>
  %675 = shufflevector <16 x i8> %673, <16 x i8> %674, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %676 = bitcast <4 x i32> %657 to <16 x i8>
  %677 = bitcast <4 x i32> %661 to <16 x i8>
  %678 = shufflevector <16 x i8> %676, <16 x i8> %677, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %679 = bitcast <4 x i32> %665 to <16 x i8>
  %680 = bitcast <4 x i32> %669 to <16 x i8>
  %681 = shufflevector <16 x i8> %679, <16 x i8> %680, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %682 = bitcast i16* %636 to <16 x i8>*
  %683 = load <16 x i8>, <16 x i8>* %682, align 16
  %684 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %685 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %686 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %687 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %688 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %672, <16 x i8> %684) #7
  %689 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %675, <16 x i8> %685) #7
  %690 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %678, <16 x i8> %686) #7
  %691 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %681, <16 x i8> %687) #7
  %692 = add <8 x i16> %691, %689
  %693 = add <8 x i16> %688, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %694 = add <8 x i16> %693, %690
  %695 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %694, <8 x i16> %692) #7
  %696 = ashr <8 x i16> %695, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %697 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %696, <8 x i16> undef) #7
  %698 = bitcast <16 x i8> %697 to <4 x i32>
  %699 = extractelement <4 x i32> %698, i32 0
  %700 = bitcast i8* %638 to i32*
  store i32 %699, i32* %700, align 4
  br label %705

701:                                              ; preds = %625
  %702 = mul nsw i64 %626, %3
  %703 = getelementptr inbounds i8, i8* %2, i64 %702
  %704 = getelementptr inbounds i8, i8* %631, i64 192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %703, i8* align 16 %704, i64 %623, i1 false) #7
  br label %705

705:                                              ; preds = %701, %634
  %706 = add nsw i32 %627, %8
  %707 = add nuw nsw i64 %626, 1
  %708 = icmp eq i64 %707, %624
  br i1 %708, label %709, label %625

709:                                              ; preds = %705, %617, %524, %621, %531, %437
  call void @llvm.lifetime.end.p0i8(i64 9152, i8* nonnull %15) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_ssse3(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %12 = alloca [4544 x i8], align 16
  %13 = alloca [4544 x i8], align 16
  %14 = alloca [4160 x i8], align 16
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 0
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %19, %17
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 6
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 7
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %29) #7
  %30 = mul i64 %1, -3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_ssse3(i8* %31, i64 %1, i8* nonnull %29, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %32)
  %33 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 192
  call void @vpx_convolve8_vert_ssse3(i8* %33, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %29) #7
  br label %50

34:                                               ; preds = %11
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 2
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = or i16 %38, %36
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %42) #7
  %43 = sub i64 0, %1
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %10, 3
  call void @vpx_convolve8_horiz_ssse3(i8* %44, i64 %1, i8* nonnull %42, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %45)
  %46 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 64
  call void @vpx_convolve8_vert_ssse3(i8* %46, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %42) #7
  br label %50

47:                                               ; preds = %34
  %48 = getelementptr inbounds [4160 x i8], [4160 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %48) #7
  %49 = add nsw i32 %10, 1
  call void @vpx_convolve8_horiz_ssse3(i8* %0, i64 %1, i8* nonnull %48, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %49)
  call void @vpx_convolve8_vert_ssse3(i8* nonnull %48, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %48) #7
  br label %50

50:                                               ; preds = %41, %47, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_ssse3(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %12 = alloca [4544 x i8], align 16
  %13 = alloca [4544 x i8], align 16
  %14 = alloca [4160 x i8], align 16
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 0
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %19, %17
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 6
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 7
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %29) #7
  %30 = mul i64 %1, -3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_ssse3(i8* %31, i64 %1, i8* nonnull %29, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %32)
  %33 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 192
  call void @vpx_convolve8_avg_vert_ssse3(i8* %33, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %29) #7
  br label %50

34:                                               ; preds = %11
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 2
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = or i16 %38, %36
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %42) #7
  %43 = mul i64 %1, -3
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_ssse3(i8* %44, i64 %1, i8* nonnull %42, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %45)
  %46 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 192
  call void @vpx_convolve8_avg_vert_ssse3(i8* %46, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %42) #7
  br label %50

47:                                               ; preds = %34
  %48 = getelementptr inbounds [4160 x i8], [4160 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %48) #7
  %49 = add nsw i32 %10, 1
  call void @vpx_convolve8_horiz_ssse3(i8* %0, i64 %1, i8* nonnull %48, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %49)
  call void @vpx_convolve8_avg_vert_ssse3(i8* nonnull %48, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %48) #7
  br label %50

50:                                               ; preds = %41, %47, %28
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
