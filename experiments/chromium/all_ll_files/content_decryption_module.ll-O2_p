; ModuleID = '../../media/base/content_decryption_module.cc'
source_filename = "../../media/base/content_decryption_module.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::ContentDecryptionModule" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.media::CdmPromiseTemplate" = type <{ %"class.media::CdmPromise", i8, [7 x i8] }>
%"class.media::CdmPromise" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN5media23ContentDecryptionModuleE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.media::ContentDecryptionModule"*, i32, %"class.media::CdmPromiseTemplate"*)* @_ZN5media23ContentDecryptionModule18GetStatusForPolicyENS_11HdcpVersionENSt3__110unique_ptrINS_18CdmPromiseTemplateIJNS_17CdmKeyInformation9KeyStatusEEEENS2_14default_deleteIS7_EEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.media::ContentDecryptionModule"*)* @_ZNK5media23ContentDecryptionModule21DeleteOnCorrectThreadEv to i8*), i8* bitcast (void (%"class.media::ContentDecryptionModule"*)* @_ZN5media23ContentDecryptionModuleD2Ev to i8*), i8* bitcast (void (%"class.media::ContentDecryptionModule"*)* @_ZN5media23ContentDecryptionModuleD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [39 x i8] c"GetStatusForPolicy() is not supported.\00", align 1

@_ZN5media23ContentDecryptionModuleD1Ev = hidden unnamed_addr alias void (%"class.media::ContentDecryptionModule"*), void (%"class.media::ContentDecryptionModule"*)* @_ZN5media23ContentDecryptionModuleD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media23ContentDecryptionModuleC2Ev(%"class.media::ContentDecryptionModule"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::ContentDecryptionModule", %"class.media::ContentDecryptionModule"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.media::ContentDecryptionModule", %"class.media::ContentDecryptionModule"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN5media23ContentDecryptionModuleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media23ContentDecryptionModuleD2Ev(%"class.media::ContentDecryptionModule"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5media23ContentDecryptionModuleD0Ev(%"class.media::ContentDecryptionModule"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media23ContentDecryptionModule18GetStatusForPolicyENS_11HdcpVersionENSt3__110unique_ptrINS_18CdmPromiseTemplateIJNS_17CdmKeyInformation9KeyStatusEEEENS2_14default_deleteIS7_EEEE(%"class.media::ContentDecryptionModule"* nocapture readnone, i32, %"class.media::CdmPromiseTemplate"*) unnamed_addr #4 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = tail call i8* @_Znwm(i64 48) #10
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast i64* %8 to <2 x i64>*
  store <2 x i64> <i64 38, i64 -9223372036854775760>, <2 x i64>* %9, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %6, i8* align 1 getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i64 38, i1 false) #9
  %10 = getelementptr inbounds i8, i8* %6, i64 38
  store i8 0, i8* %10, align 1
  %11 = bitcast %"class.media::CdmPromiseTemplate"* %2 to void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)***
  %12 = load void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)**, void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)*, void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)** %12, i64 2
  %14 = load void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)*, void (%"class.media::CdmPromiseTemplate"*, i32, i32, %"class.std::__1::basic_string"*)** %13, align 8
  call void %14(%"class.media::CdmPromiseTemplate"* %2, i32 0, i32 0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #9
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %3
  %20 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %3, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  %22 = icmp eq %"class.media::CdmPromiseTemplate"* %2, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = bitcast %"class.media::CdmPromiseTemplate"* %2 to void (%"class.media::CdmPromiseTemplate"*)***
  %25 = load void (%"class.media::CdmPromiseTemplate"*)**, void (%"class.media::CdmPromiseTemplate"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.media::CdmPromiseTemplate"*)*, void (%"class.media::CdmPromiseTemplate"*)** %25, i64 1
  %27 = load void (%"class.media::CdmPromiseTemplate"*)*, void (%"class.media::CdmPromiseTemplate"*)** %26, align 8
  call void %27(%"class.media::CdmPromiseTemplate"* nonnull %2) #9
  br label %28

28:                                               ; preds = %21, %23
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5media23ContentDecryptionModule21DeleteOnCorrectThreadEv(%"class.media::ContentDecryptionModule"*) unnamed_addr #4 align 2 {
  %2 = icmp eq %"class.media::ContentDecryptionModule"* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.media::ContentDecryptionModule"* %0 to void (%"class.media::ContentDecryptionModule"*)***
  %5 = load void (%"class.media::ContentDecryptionModule"*)**, void (%"class.media::ContentDecryptionModule"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.media::ContentDecryptionModule"*)*, void (%"class.media::ContentDecryptionModule"*)** %5, i64 10
  %7 = load void (%"class.media::ContentDecryptionModule"*)*, void (%"class.media::ContentDecryptionModule"*)** %6, align 8
  tail call void %7(%"class.media::ContentDecryptionModule"* nonnull %0) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media29ContentDecryptionModuleTraits8DestructEPKNS_23ContentDecryptionModuleE(%"class.media::ContentDecryptionModule"*) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.media::ContentDecryptionModule"* %0 to void (%"class.media::ContentDecryptionModule"*)***
  %3 = load void (%"class.media::ContentDecryptionModule"*)**, void (%"class.media::ContentDecryptionModule"*)*** %2, align 8
  %4 = getelementptr inbounds void (%"class.media::ContentDecryptionModule"*)*, void (%"class.media::ContentDecryptionModule"*)** %3, i64 8
  %5 = load void (%"class.media::ContentDecryptionModule"*)*, void (%"class.media::ContentDecryptionModule"*)** %4, align 8
  tail call void %5(%"class.media::ContentDecryptionModule"* %0) #9
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
