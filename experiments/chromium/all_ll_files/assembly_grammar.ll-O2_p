; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/assembly_grammar.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/assembly_grammar.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" = type { i32, i8* }
%"class.spvtools::AssemblyGrammar" = type { i32, %struct.spv_operand_table_t*, %struct.spv_opcode_table_t*, %struct.spv_ext_inst_table_t* }
%struct.spv_operand_table_t = type { i32, %struct.spv_operand_desc_group_t* }
%struct.spv_operand_desc_group_t = type { i32, i32, %struct.spv_operand_desc_t* }
%struct.spv_operand_desc_t = type { i8*, i32, i32, i32*, i32, i32*, [16 x i32], i32, i32 }
%struct.spv_opcode_table_t = type { i32, %struct.spv_opcode_desc_t* }
%struct.spv_opcode_desc_t = type { i8*, i32, i32, i32*, i16, [16 x i32], i8, i8, i32, i32*, i32, i32 }
%struct.spv_ext_inst_table_t = type { i32, %struct.spv_ext_inst_group_t* }
%struct.spv_ext_inst_group_t = type { i32, i32, %struct.spv_ext_inst_desc_t* }
%struct.spv_ext_inst_desc_t = type { i8*, i32, i32, i32*, [16 x i32] }
%"class.spvtools::EnumSet" = type { i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::set"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.0", %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i32* }

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE = internal constant [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"] [%"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 114, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 115, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 110, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 111, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 109, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 112, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 113, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 117, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 120, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 122, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 121, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 124, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 116, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 126, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 200, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 130, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 132, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 134, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 135, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 137, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 138, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 139, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 194, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 195, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 196, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 197, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 199, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 198, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 127, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 129, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 131, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 136, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 140, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 141, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 79, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 81, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.37, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 82, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 166, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 167, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 168, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 164, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 165, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 169, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 170, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 171, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.46, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 176, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.47, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 177, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 172, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.49, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 173, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 178, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.51, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 179, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 174, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.53, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 175, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 65, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 66, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 67, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.57, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 70, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.58, i32 0, i32 0) }, %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry" { i32 5362, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.59, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [9 x i8] c"SConvert\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"FConvert\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"ConvertFToS\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"ConvertSToF\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"ConvertFToU\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"ConvertUToF\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"UConvert\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"ConvertPtrToU\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"ConvertUToPtr\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"GenericCastToPtr\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"PtrCastToGeneric\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"Bitcast\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"QuantizeToF16\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"SNegate\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"Not\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"IAdd\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"ISub\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"IMul\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"UDiv\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"SDiv\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"UMod\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"SRem\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"SMod\00", align 1
@.str.23 = private unnamed_addr constant [18 x i8] c"ShiftRightLogical\00", align 1
@.str.24 = private unnamed_addr constant [21 x i8] c"ShiftRightArithmetic\00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"ShiftLeftLogical\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"BitwiseOr\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"BitwiseAnd\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"BitwiseXor\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"FNegate\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"FAdd\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"FSub\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"FMul\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"FDiv\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"FRem\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"FMod\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"VectorShuffle\00", align 1
@.str.37 = private unnamed_addr constant [17 x i8] c"CompositeExtract\00", align 1
@.str.38 = private unnamed_addr constant [16 x i8] c"CompositeInsert\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c"LogicalOr\00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"LogicalAnd\00", align 1
@.str.41 = private unnamed_addr constant [11 x i8] c"LogicalNot\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"LogicalEqual\00", align 1
@.str.43 = private unnamed_addr constant [16 x i8] c"LogicalNotEqual\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"Select\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"IEqual\00", align 1
@.str.46 = private unnamed_addr constant [10 x i8] c"INotEqual\00", align 1
@.str.47 = private unnamed_addr constant [10 x i8] c"ULessThan\00", align 1
@.str.48 = private unnamed_addr constant [10 x i8] c"SLessThan\00", align 1
@.str.49 = private unnamed_addr constant [13 x i8] c"UGreaterThan\00", align 1
@.str.50 = private unnamed_addr constant [13 x i8] c"SGreaterThan\00", align 1
@.str.51 = private unnamed_addr constant [15 x i8] c"ULessThanEqual\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"SLessThanEqual\00", align 1
@.str.53 = private unnamed_addr constant [18 x i8] c"UGreaterThanEqual\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"SGreaterThanEqual\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"AccessChain\00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c"InBoundsAccessChain\00", align 1
@.str.57 = private unnamed_addr constant [15 x i8] c"PtrAccessChain\00", align 1
@.str.58 = private unnamed_addr constant [23 x i8] c"InBoundsPtrAccessChain\00", align 1
@.str.59 = private unnamed_addr constant [26 x i8] c"CooperativeMatrixLengthNV\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools15AssemblyGrammar7isValidEv(%"class.spvtools::AssemblyGrammar"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 1
  %3 = load %struct.spv_operand_table_t*, %struct.spv_operand_table_t** %2, align 8
  %4 = icmp eq %struct.spv_operand_table_t* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 2
  %7 = load %struct.spv_opcode_table_t*, %struct.spv_opcode_table_t** %6, align 8
  %8 = icmp eq %struct.spv_opcode_table_t* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 3
  %11 = load %struct.spv_ext_inst_table_t*, %struct.spv_ext_inst_table_t** %10, align 8
  %12 = icmp ne %struct.spv_ext_inst_table_t* %11, null
  br label %13

13:                                               ; preds = %5, %1, %9
  %14 = phi i1 [ false, %5 ], [ false, %1 ], [ %12, %9 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8spvtools15AssemblyGrammar26filterCapsAgainstTargetEnvEPK14SpvCapability_j(%"class.spvtools::EnumSet"* noalias nocapture sret, %"class.spvtools::AssemblyGrammar"* nocapture readonly, i32* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %struct.spv_operand_desc_t*, align 8
  %6 = getelementptr inbounds %"class.spvtools::EnumSet", %"class.spvtools::EnumSet"* %0, i64 0, i32 0
  %7 = bitcast %"class.spvtools::EnumSet"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #8
  %8 = icmp eq i32 %3, 0
  br i1 %8, label %114, label %9

9:                                                ; preds = %4
  %10 = bitcast %struct.spv_operand_desc_t** %5 to i8*
  %11 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %1, i64 0, i32 1
  %13 = getelementptr inbounds %"class.spvtools::EnumSet", %"class.spvtools::EnumSet"* %0, i64 0, i32 1
  %14 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %15 = zext i32 %3 to i64
  br label %16

16:                                               ; preds = %109, %9
  %17 = phi %"class.std::__1::set"* [ null, %9 ], [ %110, %109 ]
  %18 = phi i64 [ 0, %9 ], [ %111, %109 ]
  %19 = phi i64 [ 0, %9 ], [ %112, %109 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8
  store %struct.spv_operand_desc_t* null, %struct.spv_operand_desc_t** %5, align 8
  %20 = getelementptr inbounds i32, i32* %2, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = load i32, i32* %11, align 8
  %23 = load %struct.spv_operand_table_t*, %struct.spv_operand_table_t** %12, align 8
  %24 = call i32 @_Z26spvOperandTableValueLookup14spv_target_envPK19spv_operand_table_t18spv_operand_type_tjPPK18spv_operand_desc_t(i32 %22, %struct.spv_operand_table_t* %23, i32 32, i32 %21, %struct.spv_operand_desc_t** nonnull %5) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %109

26:                                               ; preds = %16
  %27 = load i32, i32* %20, align 4
  %28 = icmp ugt i32 %27, 63
  br i1 %28, label %33, label %29

29:                                               ; preds = %26
  %30 = zext i32 %27 to i64
  %31 = shl i64 1, %30
  %32 = or i64 %18, %31
  store i64 %32, i64* %6, align 8
  br label %109

33:                                               ; preds = %26
  %34 = icmp eq %"class.std::__1::set"* %17, null
  br i1 %34, label %35, label %42

35:                                               ; preds = %33
  %36 = call i8* @_Znwm(i64 24) #9
  %37 = getelementptr inbounds i8, i8* %36, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #8
  %38 = bitcast i8* %36 to i8**
  store i8* %37, i8** %38, align 8
  %39 = ptrtoint i8* %36 to i64
  store i64 %39, i64* %14, align 8
  %40 = bitcast i8* %36 to %"class.std::__1::set"*
  %41 = bitcast i8* %36 to %"class.std::__1::set"*
  br label %42

42:                                               ; preds = %35, %33
  %43 = phi %"class.std::__1::set"* [ %41, %35 ], [ %17, %33 ]
  %44 = phi %"class.std::__1::set"* [ %40, %35 ], [ %17, %33 ]
  %45 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %44, i64 0, i32 0, i32 1, i32 0, i32 0
  %46 = bitcast %"class.std::__1::__tree_end_node"* %45 to %"class.std::__1::__tree_node"**
  %47 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %46, align 8
  %48 = icmp eq %"class.std::__1::__tree_node"* %47, null
  br i1 %48, label %77, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %44, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %51

51:                                               ; preds = %73, %49
  %52 = phi %"class.std::__1::__tree_node"* [ %76, %73 ], [ %47, %49 ]
  %53 = phi %"class.std::__1::__tree_node_base"** [ %75, %73 ], [ %50, %49 ]
  %54 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %52, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp ult i32 %27, %55
  br i1 %56, label %57, label %63

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %52, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %58, align 8
  %60 = icmp eq %"class.std::__1::__tree_node_base"* %59, null
  br i1 %60, label %61, label %73

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %52, i64 0, i32 0, i32 0
  br label %79

63:                                               ; preds = %51
  %64 = icmp ult i32 %55, %27
  br i1 %64, label %65, label %71

65:                                               ; preds = %63
  %66 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %52, i64 0, i32 0, i32 1
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = icmp eq %"class.std::__1::__tree_node_base"* %67, null
  br i1 %68, label %69, label %73

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %52, i64 0, i32 0, i32 0
  br label %79

71:                                               ; preds = %63
  %72 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %52, i64 0, i32 0, i32 0
  br label %79

73:                                               ; preds = %65, %57
  %74 = phi %"class.std::__1::__tree_node_base"* [ %59, %57 ], [ %67, %65 ]
  %75 = phi %"class.std::__1::__tree_node_base"** [ %58, %57 ], [ %66, %65 ]
  %76 = bitcast %"class.std::__1::__tree_node_base"* %74 to %"class.std::__1::__tree_node"*
  br label %51

77:                                               ; preds = %42
  %78 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %45, i64 0, i32 0
  br label %79

79:                                               ; preds = %77, %71, %69, %61
  %80 = phi %"class.std::__1::__tree_end_node"* [ %45, %77 ], [ %62, %61 ], [ %70, %69 ], [ %72, %71 ]
  %81 = phi %"class.std::__1::__tree_node_base"** [ %78, %77 ], [ %58, %61 ], [ %66, %69 ], [ %53, %71 ]
  %82 = bitcast %"class.std::__1::__tree_node_base"** %81 to %"class.std::__1::__tree_node"**
  %83 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %82, align 8
  %84 = icmp eq %"class.std::__1::__tree_node"* %83, null
  br i1 %84, label %85, label %109

85:                                               ; preds = %79
  %86 = call i8* @_Znwm(i64 32) #9, !noalias !2
  %87 = getelementptr inbounds i8, i8* %86, i64 28
  %88 = bitcast i8* %87 to i32*
  store i32 %27, i32* %88, align 4, !noalias !2
  %89 = bitcast i8* %86 to %"class.std::__1::__tree_node_base"*
  %90 = getelementptr inbounds i8, i8* %86, i64 16
  %91 = bitcast i8* %90 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %80, %"class.std::__1::__tree_end_node"** %91, align 8
  %92 = bitcast %"class.std::__1::__tree_node_base"** %81 to i8**
  store i8* %86, i8** %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %44, i64 0, i32 0, i32 0
  %94 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %93, align 8
  %95 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %94, i64 0, i32 0
  %96 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %95, align 8
  %97 = icmp eq %"class.std::__1::__tree_node_base"* %96, null
  br i1 %97, label %102, label %98

98:                                               ; preds = %85
  %99 = ptrtoint %"class.std::__1::__tree_node_base"* %96 to i64
  %100 = bitcast %"class.std::__1::set"* %44 to i64*
  store i64 %99, i64* %100, align 8
  %101 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  br label %102

102:                                              ; preds = %98, %85
  %103 = phi %"class.std::__1::__tree_node_base"* [ %89, %85 ], [ %101, %98 ]
  %104 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %44, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %105 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %104, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %105, %"class.std::__1::__tree_node_base"* %103) #8
  %106 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %44, i64 0, i32 0, i32 2, i32 0, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %106, align 8
  br label %109

109:                                              ; preds = %102, %79, %29, %16
  %110 = phi %"class.std::__1::set"* [ %43, %102 ], [ %43, %79 ], [ %17, %29 ], [ %17, %16 ]
  %111 = phi i64 [ %18, %102 ], [ %18, %79 ], [ %32, %29 ], [ %18, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8
  %112 = add nuw nsw i64 %19, 1
  %113 = icmp eq i64 %112, %15
  br i1 %113, label %114, label %16

114:                                              ; preds = %109, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar13lookupOperandE18spv_operand_type_tjPPK18spv_operand_desc_t(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, i32, %struct.spv_operand_desc_t**) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 1
  %8 = load %struct.spv_operand_table_t*, %struct.spv_operand_table_t** %7, align 8
  %9 = tail call i32 @_Z26spvOperandTableValueLookup14spv_target_envPK19spv_operand_table_t18spv_operand_type_tjPPK18spv_operand_desc_t(i32 %6, %struct.spv_operand_table_t* %8, i32 %1, i32 %2, %struct.spv_operand_desc_t** %3) #8
  ret i32 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar12lookupOpcodeEPKcPPK17spv_opcode_desc_t(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i8*, %struct.spv_opcode_desc_t**) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 2
  %7 = load %struct.spv_opcode_table_t*, %struct.spv_opcode_table_t** %6, align 8
  %8 = tail call i32 @_Z24spvOpcodeTableNameLookup14spv_target_envPK18spv_opcode_table_tPKcPPK17spv_opcode_desc_t(i32 %5, %struct.spv_opcode_table_t* %7, i8* %1, %struct.spv_opcode_desc_t** %2) #8
  ret i32 %8
}

declare i32 @_Z24spvOpcodeTableNameLookup14spv_target_envPK18spv_opcode_table_tPKcPPK17spv_opcode_desc_t(i32, %struct.spv_opcode_table_t*, i8*, %struct.spv_opcode_desc_t**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar12lookupOpcodeE6SpvOp_PPK17spv_opcode_desc_t(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, %struct.spv_opcode_desc_t**) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 2
  %7 = load %struct.spv_opcode_table_t*, %struct.spv_opcode_table_t** %6, align 8
  %8 = tail call i32 @_Z25spvOpcodeTableValueLookup14spv_target_envPK18spv_opcode_table_t6SpvOp_PPK17spv_opcode_desc_t(i32 %5, %struct.spv_opcode_table_t* %7, i32 %1, %struct.spv_opcode_desc_t** %2) #8
  ret i32 %8
}

declare i32 @_Z25spvOpcodeTableValueLookup14spv_target_envPK18spv_opcode_table_t6SpvOp_PPK17spv_opcode_desc_t(i32, %struct.spv_opcode_table_t*, i32, %struct.spv_opcode_desc_t**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar13lookupOperandE18spv_operand_type_tPKcmPPK18spv_operand_desc_t(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, i8*, i64, %struct.spv_operand_desc_t**) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 1
  %9 = load %struct.spv_operand_table_t*, %struct.spv_operand_table_t** %8, align 8
  %10 = tail call i32 @_Z25spvOperandTableNameLookup14spv_target_envPK19spv_operand_table_t18spv_operand_type_tPKcmPPK18spv_operand_desc_t(i32 %7, %struct.spv_operand_table_t* %9, i32 %1, i8* %2, i64 %3, %struct.spv_operand_desc_t** %4) #8
  ret i32 %10
}

declare i32 @_Z25spvOperandTableNameLookup14spv_target_envPK19spv_operand_table_t18spv_operand_type_tPKcmPPK18spv_operand_desc_t(i32, %struct.spv_operand_table_t*, i32, i8*, i64, %struct.spv_operand_desc_t**) local_unnamed_addr #3

declare i32 @_Z26spvOperandTableValueLookup14spv_target_envPK19spv_operand_table_t18spv_operand_type_tjPPK18spv_operand_desc_t(i32, %struct.spv_operand_table_t*, i32, i32, %struct.spv_operand_desc_t**) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar24lookupSpecConstantOpcodeEPKcP6SpvOp_(%"class.spvtools::AssemblyGrammar"* nocapture readnone, i8* nocapture readonly, i32* nocapture) local_unnamed_addr #4 align 2 {
  br label %4

4:                                                ; preds = %10, %3
  %5 = phi %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* [ getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 0, i64 0), %3 ], [ %11, %10 ]
  %6 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %5, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i32 @strcmp(i8* %1, i8* %7) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %5, i64 1
  %12 = icmp eq %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %11, getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 1, i64 0)
  br i1 %12, label %18, label %4

13:                                               ; preds = %4
  %14 = icmp eq %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %5, getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 1, i64 0)
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %5, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %10, %13, %15
  %19 = phi i32 [ 0, %15 ], [ -9, %13 ], [ -9, %10 ]
  ret i32 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar24lookupSpecConstantOpcodeE6SpvOp_(%"class.spvtools::AssemblyGrammar"* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  br label %3

3:                                                ; preds = %37, %2
  %4 = phi %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* [ getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 0, i64 0), %2 ], [ %38, %37 ]
  %5 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 1
  %10 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %13, label %17

13:                                               ; preds = %37, %32, %27, %22, %17, %8, %3
  %14 = phi %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* [ %4, %3 ], [ %9, %8 ], [ %18, %17 ], [ %23, %22 ], [ %28, %27 ], [ %33, %32 ], [ getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 1, i64 0), %37 ]
  %15 = icmp eq %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %14, getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 1, i64 0)
  %16 = select i1 %15, i32 -9, i32 0
  ret i32 %16

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 2
  %19 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, %1
  br i1 %21, label %13, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 3
  %24 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %23, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, %1
  br i1 %26, label %13, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 4
  %29 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, %1
  br i1 %31, label %13, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 5
  %34 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, %1
  br i1 %36, label %13, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry", %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %4, i64 6
  %39 = icmp eq %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"* %38, getelementptr inbounds ([60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"], [60 x %"struct.spvtools::(anonymous namespace)::SpecConstantOpcodeEntry"]* @_ZN8spvtools12_GLOBAL__N_122kOpSpecConstantOpcodesE, i64 1, i64 0)
  br i1 %39, label %13, label %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar16parseMaskOperandE18spv_operand_type_tPKcPj(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, i8*, i32* nocapture) local_unnamed_addr #1 align 2 {
  %5 = alloca %struct.spv_operand_desc_t*, align 8
  %6 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 1
  %9 = load %struct.spv_operand_table_t*, %struct.spv_operand_table_t** %8, align 8
  %10 = icmp eq i8* %2, null
  br i1 %10, label %44, label %11

11:                                               ; preds = %4
  %12 = tail call i64 @strlen(i8* nonnull %2) #10
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %44, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %2, i64 %12
  %16 = bitcast %struct.spv_operand_desc_t** %5 to i8*
  br label %17

17:                                               ; preds = %36, %14
  %18 = phi i32 [ 0, %14 ], [ %40, %36 ]
  %19 = phi i8* [ %2, %14 ], [ %41, %36 ]
  %20 = icmp eq i8* %19, %15
  br i1 %20, label %28, label %21

21:                                               ; preds = %17, %25
  %22 = phi i8* [ %26, %25 ], [ %19, %17 ]
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 124
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %22, i64 1
  %27 = icmp eq i8* %26, %15
  br i1 %27, label %28, label %21

28:                                               ; preds = %25, %21, %17
  %29 = phi i8* [ %15, %17 ], [ %15, %25 ], [ %22, %21 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  store %struct.spv_operand_desc_t* null, %struct.spv_operand_desc_t** %5, align 8
  %30 = ptrtoint i8* %29 to i64
  %31 = ptrtoint i8* %19 to i64
  %32 = sub i64 %30, %31
  %33 = call i32 @_Z25spvOperandTableNameLookup14spv_target_envPK19spv_operand_table_t18spv_operand_type_tPKcmPPK18spv_operand_desc_t(i32 %7, %struct.spv_operand_table_t* %9, i32 %1, i8* %19, i64 %32, %struct.spv_operand_desc_t** nonnull %5) #8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %44

36:                                               ; preds = %28
  %37 = load %struct.spv_operand_desc_t*, %struct.spv_operand_desc_t** %5, align 8
  %38 = getelementptr inbounds %struct.spv_operand_desc_t, %struct.spv_operand_desc_t* %37, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = or i32 %39, %18
  %41 = getelementptr inbounds i8, i8* %29, i64 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  %42 = icmp eq i8* %29, %15
  br i1 %42, label %43, label %17

43:                                               ; preds = %36
  store i32 %40, i32* %3, align 4
  br label %44

44:                                               ; preds = %4, %11, %35, %43
  %45 = phi i32 [ -5, %4 ], [ -5, %11 ], [ 0, %43 ], [ -5, %35 ]
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar13lookupExtInstE19spv_ext_inst_type_tPKcPPK19spv_ext_inst_desc_t(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, i8*, %struct.spv_ext_inst_desc_t**) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 3
  %6 = load %struct.spv_ext_inst_table_t*, %struct.spv_ext_inst_table_t** %5, align 8
  %7 = tail call i32 @_Z25spvExtInstTableNameLookupPK20spv_ext_inst_table_t19spv_ext_inst_type_tPKcPPK19spv_ext_inst_desc_t(%struct.spv_ext_inst_table_t* %6, i32 %1, i8* %2, %struct.spv_ext_inst_desc_t** %3) #8
  ret i32 %7
}

declare i32 @_Z25spvExtInstTableNameLookupPK20spv_ext_inst_table_t19spv_ext_inst_type_tPKcPPK19spv_ext_inst_desc_t(%struct.spv_ext_inst_table_t*, i32, i8*, %struct.spv_ext_inst_desc_t**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8spvtools15AssemblyGrammar13lookupExtInstE19spv_ext_inst_type_tjPPK19spv_ext_inst_desc_t(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, i32, %struct.spv_ext_inst_desc_t**) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 3
  %6 = load %struct.spv_ext_inst_table_t*, %struct.spv_ext_inst_table_t** %5, align 8
  %7 = tail call i32 @_Z26spvExtInstTableValueLookupPK20spv_ext_inst_table_t19spv_ext_inst_type_tjPPK19spv_ext_inst_desc_t(%struct.spv_ext_inst_table_t* %6, i32 %1, i32 %2, %struct.spv_ext_inst_desc_t** %3) #8
  ret i32 %7
}

declare i32 @_Z26spvExtInstTableValueLookupPK20spv_ext_inst_table_t19spv_ext_inst_type_tjPPK19spv_ext_inst_desc_t(%struct.spv_ext_inst_table_t*, i32, i32, %struct.spv_ext_inst_desc_t**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8spvtools15AssemblyGrammar23pushOperandTypesForMaskE18spv_operand_type_tjPNSt3__16vectorIS1_NS2_9allocatorIS1_EEEE(%"class.spvtools::AssemblyGrammar"* nocapture readonly, i32, i32, %"class.std::__1::vector"*) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.spvtools::AssemblyGrammar", %"class.spvtools::AssemblyGrammar"* %0, i64 0, i32 1
  %8 = load %struct.spv_operand_table_t*, %struct.spv_operand_table_t** %7, align 8
  tail call void @_Z26spvPushOperandTypesForMask14spv_target_envPK19spv_operand_table_t18spv_operand_type_tjPNSt3__16vectorIS3_NS4_9allocatorIS3_EEEE(i32 %6, %struct.spv_operand_table_t* %8, i32 %1, i32 %2, %"class.std::__1::vector"* %3) #8
  ret void
}

declare void @_Z26spvPushOperandTypesForMask14spv_target_envPK19spv_operand_table_t18spv_operand_type_tjPNSt3__16vectorIS3_NS4_9allocatorIS3_EEEE(i32, %struct.spv_operand_table_t*, i32, i32, %"class.std::__1::vector"*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !5
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !5
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE16__construct_nodeIJRKjEEENS_10unique_ptrINS_11__tree_nodeIjPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE16__construct_nodeIJRKjEEENS_10unique_ptrINS_11__tree_nodeIjPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_"}
!5 = !{i8 0, i8 2}
