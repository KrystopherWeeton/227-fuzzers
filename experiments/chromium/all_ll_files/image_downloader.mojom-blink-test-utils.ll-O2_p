; ModuleID = 'gen/third_party/blink/public/mojom/image_downloader/image_downloader.mojom-blink-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/image_downloader/image_downloader.mojom-blink-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter" = type { %"class.blink::mojom::blink::ImageDownloader"* }
%"class.blink::mojom::blink::ImageDownloader" = type { i32 (...)** }
%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting" = type { %"class.blink::mojom::blink::ImageDownloader" }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.SkBitmap*, i32, i32 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.14 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.8, i32, i32 }
%class.sk_sp.8 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.3" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.9" }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.14 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.WTF::Vector.15" = type { %"class.WTF::VectorBuffer.16" }
%"class.WTF::VectorBuffer.16" = type { %"class.WTF::VectorBufferBase.17" }
%"class.WTF::VectorBufferBase.17" = type { %"class.gfx::Size"*, i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr.30, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.23", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.25" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr.30 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.31" }>
%"class.base::RefCountedThreadSafe.31" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.32 }
%class.scoped_refptr.32 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.33", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.33" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.9" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink5mojom5blink15ImageDownloaderD2Ev = comdat any

$_ZN5blink5mojom5blink36ImageDownloaderInterceptorForTestingD0Ev = comdat any

$_ZN3WTF6VectorI8SkBitmapLj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEEaSERKS4_ = comdat any

$_ZN3WTF6VectorI8SkBitmapLj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeI8SkBitmapEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm = comdat any

@.str = private unnamed_addr constant [14 x i8] c"DownloadImage\00", align 1
@.str.1 = private unnamed_addr constant [95 x i8] c"gen/third_party/blink/public/mojom/image_downloader/image_downloader.mojom-blink-test-utils.cc\00", align 1
@_ZTVN5blink5mojom5blink36ImageDownloaderInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::blink::ImageDownloader"*)* @_ZN5blink5mojom5blink15ImageDownloaderD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)* @_ZN5blink5mojom5blink36ImageDownloaderInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)* @_ZN5blink5mojom5blink36ImageDownloaderInterceptorForTesting13DownloadImageERKNS_4KURLEbjjbN4base12OnceCallbackIFviRKN3WTF6VectorI8SkBitmapLj0ENS8_18PartitionAllocatorEEERKNS9_IN3gfx4SizeELj0ESB_EEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI8SkBitmapEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = SkBitmap]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx4SizeEEEPKcv = private unnamed_addr constant [57 x i8] c"const char *WTF::GetStringWithTypeName() [T = gfx::Size]\00", align 1

@_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiterC1EPNS1_15ImageDownloaderE = hidden unnamed_addr alias void (%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"*, %"class.blink::mojom::blink::ImageDownloader"*), void (%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"*, %"class.blink::mojom::blink::ImageDownloader"*)* @_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiterC2EPNS1_15ImageDownloaderE
@_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"*), void (%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"*)* @_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink36ImageDownloaderInterceptorForTesting13DownloadImageERKNS_4KURLEbjjbN4base12OnceCallbackIFviRKN3WTF6VectorI8SkBitmapLj0ENS8_18PartitionAllocatorEEERKNS9_IN3gfx4SizeELj0ESB_EEEEE(%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*, %"class.blink::KURL"* dereferenceable(112), i1 zeroext, i32, i32, i1 zeroext, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %8 = alloca %"class.base::OnceCallback", align 8
  %9 = bitcast %"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"* %0 to %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)***
  %10 = load %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)**, %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)*, %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)** %10, i64 3
  %12 = load %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)*, %"class.blink::mojom::blink::ImageDownloader"* (%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*)** %11, align 8
  %13 = tail call %"class.blink::mojom::blink::ImageDownloader"* %12(%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"* %0) #10
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.base::OnceCallback"* %6 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.base::OnceCallback"* %8 to i64*
  store i64 %16, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8
  %18 = bitcast %"class.blink::mojom::blink::ImageDownloader"* %13 to void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)***
  %19 = load void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)** %19, i64 2
  %21 = load void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)** %20, align 8
  call void %21(%"class.blink::mojom::blink::ImageDownloader"* %13, %"class.blink::KURL"* dereferenceable(112) %1, i1 zeroext %2, i32 %3, i32 %4, i1 zeroext %5, %"class.base::OnceCallback"* nonnull %8) #10
  %22 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %22) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiterC2EPNS1_15ImageDownloaderE(%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"* nocapture, %"class.blink::mojom::blink::ImageDownloader"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::blink::ImageDownloaderAsyncWaiter", %"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::blink::ImageDownloader"* %1, %"class.blink::mojom::blink::ImageDownloader"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiterD2Ev(%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENS7_18PartitionAllocatorEEEPNS8_IN3gfx4SizeELj0ESA_EE(%"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"* nocapture readonly, %"class.blink::KURL"* dereferenceable(112), i1 zeroext, i32, i32, i1 zeroext, i32*, %"class.WTF::Vector"*, %"class.WTF::Vector.15"*) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.base::RunLoop", align 8
  %11 = alloca %"class.base::OnceCallback", align 8
  %12 = alloca %"class.base::Location", align 8
  %13 = ptrtoint i32* %6 to i64
  %14 = ptrtoint %"class.WTF::Vector"* %7 to i64
  %15 = ptrtoint %"class.WTF::Vector.15"* %8 to i64
  %16 = bitcast %"class.base::RunLoop"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %16) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %10, i32 0) #10
  %17 = getelementptr inbounds %"class.blink::mojom::blink::ImageDownloaderAsyncWaiter", %"class.blink::mojom::blink::ImageDownloaderAsyncWaiter"* %0, i64 0, i32 0
  %18 = load %"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::mojom::blink::ImageDownloader"** %17, align 8
  %19 = ptrtoint %"class.base::RunLoop"* %10 to i64
  %20 = call i8* @_Znwm(i64 72) #11, !noalias !2
  %21 = bitcast i8* %20 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %21, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, i32, %"class.WTF::Vector"*, %"class.WTF::Vector.15"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS3_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENSB_18PartitionAllocatorEEEPNSC_IN3gfx4SizeELj0ESE_EEE3$_0JPNS_7RunLoopESA_SG_SK_EEEFviRKSF_RKSJ_EE7RunOnceEPNS0_13BindStateBaseEiSQ_SS_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS2_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENSA_18PartitionAllocatorEEEPNSB_IN3gfx4SizeELj0ESD_EEE3$_0JPNS_7RunLoopES9_SF_SJ_EE7DestroyEPKNS0_13BindStateBaseE") #10, !noalias !2
  %22 = getelementptr inbounds i8, i8* %20, i64 40
  %23 = bitcast i8* %22 to i64*
  store i64 %19, i64* %23, align 8, !noalias !2
  %24 = getelementptr inbounds i8, i8* %20, i64 48
  %25 = bitcast i8* %24 to i64*
  store i64 %13, i64* %25, align 8, !noalias !2
  %26 = getelementptr inbounds i8, i8* %20, i64 56
  %27 = bitcast i8* %26 to i64*
  store i64 %14, i64* %27, align 8, !noalias !2
  %28 = getelementptr inbounds i8, i8* %20, i64 64
  %29 = bitcast i8* %28 to i64*
  store i64 %15, i64* %29, align 8, !noalias !2
  %30 = bitcast %"class.base::OnceCallback"* %11 to i8**
  store i8* %20, i8** %30, align 8, !alias.scope !2
  %31 = bitcast %"class.blink::mojom::blink::ImageDownloader"* %18 to void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)***
  %32 = load void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)** %32, i64 2
  %34 = load void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ImageDownloader"*, %"class.blink::KURL"*, i1, i32, i32, i1, %"class.base::OnceCallback"*)** %33, align 8
  call void %34(%"class.blink::mojom::blink::ImageDownloader"* %18, %"class.blink::KURL"* dereferenceable(112) %1, i1 zeroext %2, i32 %3, i32 %4, i1 zeroext %5, %"class.base::OnceCallback"* nonnull %11) #10
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %11, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %35) #10
  %36 = bitcast %"class.base::Location"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #10
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %12, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.1, i64 0, i64 0), i32 64) #10
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %12) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #10
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %16) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"*, i32) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"*, %"class.base::Location"* dereferenceable(32)) local_unnamed_addr #5

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink15ImageDownloaderD2Ev(%"class.blink::mojom::blink::ImageDownloader"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink36ImageDownloaderInterceptorForTestingD0Ev(%"class.blink::mojom::blink::ImageDownloaderInterceptorForTesting"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS3_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENSB_18PartitionAllocatorEEEPNSC_IN3gfx4SizeELj0ESE_EEE3$_0JPNS_7RunLoopESA_SG_SK_EEEFviRKSF_RKSJ_EE7RunOnceEPNS0_13BindStateBaseEiSQ_SS_"(%"class.base::internal::BindStateBase"* nocapture readonly, i32, %"class.WTF::Vector"* dereferenceable(16), %"class.WTF::Vector.15"* dereferenceable(16)) #0 align 2 {
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %6 = bitcast void ()** %5 to %"class.base::RunLoop"**
  %7 = getelementptr inbounds void ()*, void ()** %5, i64 1
  %8 = bitcast void ()** %7 to i32**
  %9 = getelementptr inbounds void ()*, void ()** %5, i64 2
  %10 = bitcast void ()** %9 to %"class.WTF::Vector"**
  %11 = getelementptr inbounds void ()*, void ()** %5, i64 3
  %12 = bitcast void ()** %11 to %"class.WTF::Vector.15"**
  %13 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %6, align 8
  %14 = load i32*, i32** %8, align 8
  %15 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %10, align 8
  %16 = load %"class.WTF::Vector.15"*, %"class.WTF::Vector.15"** %12, align 8
  store i32 %1, i32* %14, align 4
  %17 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorI8SkBitmapLj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"* %15, %"class.WTF::Vector"* dereferenceable(16) %2) #10
  %18 = tail call dereferenceable(16) %"class.WTF::Vector.15"* @_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.15"* %16, %"class.WTF::Vector.15"* dereferenceable(16) %3) #10
  tail call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %13) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorI8SkBitmapLj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %107, label %4, !prof !7

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %22

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %class.SkBitmap*, %class.SkBitmap** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %12, i64 %15
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi %class.SkBitmap* [ %19, %17 ], [ %16, %10 ]
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %18) #10
  %19 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %18, i64 1
  %20 = icmp eq %class.SkBitmap* %19, %14
  br i1 %20, label %21, label %17

21:                                               ; preds = %17
  store i32 %8, i32* %5, align 4
  br label %65

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp ugt i32 %8, %24
  br i1 %25, label %26, label %63

26:                                               ; preds = %22
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %46, label %28

28:                                               ; preds = %26
  %29 = icmp eq i32 %6, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %class.SkBitmap*, %class.SkBitmap** %31, align 8
  %33 = zext i32 %6 to i64
  %34 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %32, i64 %33
  br label %35

35:                                               ; preds = %35, %30
  %36 = phi %class.SkBitmap* [ %37, %35 ], [ %32, %30 ]
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %36) #10
  %37 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %36, i64 1
  %38 = icmp eq %class.SkBitmap* %37, %34
  br i1 %38, label %39, label %35

39:                                               ; preds = %35
  store i32 0, i32* %5, align 4
  br label %40

40:                                               ; preds = %39, %28
  %41 = bitcast %"class.WTF::Vector"* %0 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %43 monotonic, align 8
  store i32 0, i32* %23, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %42) #10
  %44 = load i32, i32* %7, align 4
  %45 = load i32, i32* %23, align 8
  br label %46

46:                                               ; preds = %26, %40
  %47 = phi i32 [ 0, %26 ], [ %45, %40 ]
  %48 = phi i32 [ %8, %26 ], [ %44, %40 ]
  %49 = icmp ult i32 %47, %48
  br i1 %49, label %50, label %63, !prof !8

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %class.SkBitmap*, %class.SkBitmap** %51, align 8
  %53 = icmp eq %class.SkBitmap* %52, null
  br i1 %53, label %54, label %62

54:                                               ; preds = %50
  %55 = zext i32 %48 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI8SkBitmapEEmm(i64 %55) #10
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI8SkBitmapEEPKcv, i64 0, i64 0)) #10
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = udiv i64 %56, 56
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %23, align 8
  br label %63

62:                                               ; preds = %50
  tail call void @_ZN3WTF6VectorI8SkBitmapLj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %48) #10
  br label %63

63:                                               ; preds = %22, %46, %54, %62
  %64 = load i32, i32* %5, align 4
  br label %65

65:                                               ; preds = %63, %21
  %66 = phi i32 [ %64, %63 ], [ %8, %21 ]
  %67 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %68 = load %class.SkBitmap*, %class.SkBitmap** %67, align 8
  %69 = zext i32 %66 to i64
  %70 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %68, i64 %69
  %71 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %72 = load %class.SkBitmap*, %class.SkBitmap** %71, align 8
  %73 = icmp eq i32 %66, 0
  br i1 %73, label %85, label %74

74:                                               ; preds = %65, %74
  %75 = phi %class.SkBitmap* [ %79, %74 ], [ %72, %65 ]
  %76 = phi %class.SkBitmap* [ %78, %74 ], [ %68, %65 ]
  %77 = tail call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %75, %class.SkBitmap* dereferenceable(56) %76) #10
  %78 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %76, i64 1
  %79 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %75, i64 1
  %80 = icmp eq %class.SkBitmap* %78, %70
  br i1 %80, label %81, label %74

81:                                               ; preds = %74
  %82 = load %class.SkBitmap*, %class.SkBitmap** %67, align 8
  %83 = load i32, i32* %5, align 4
  %84 = load %class.SkBitmap*, %class.SkBitmap** %71, align 8
  br label %85

85:                                               ; preds = %81, %65
  %86 = phi %class.SkBitmap* [ %84, %81 ], [ %72, %65 ]
  %87 = phi i32 [ %83, %81 ], [ 0, %65 ]
  %88 = phi %class.SkBitmap* [ %82, %81 ], [ %68, %65 ]
  %89 = zext i32 %87 to i64
  %90 = load i32, i32* %7, align 4
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %88, i64 %91
  %93 = icmp eq i32 %87, %90
  br i1 %93, label %105, label %94

94:                                               ; preds = %85
  %95 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %86, i64 %89
  %96 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %88, i64 %89
  br label %97

97:                                               ; preds = %94, %97
  %98 = phi %class.SkBitmap* [ %100, %97 ], [ %95, %94 ]
  %99 = phi %class.SkBitmap* [ %101, %97 ], [ %96, %94 ]
  tail call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* %98, %class.SkBitmap* dereferenceable(56) %99) #10
  %100 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %98, i64 1
  %101 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %99, i64 1
  %102 = icmp eq %class.SkBitmap* %101, %92
  br i1 %102, label %103, label %97

103:                                              ; preds = %97
  %104 = load i32, i32* %7, align 4
  br label %105

105:                                              ; preds = %103, %85
  %106 = phi i32 [ %104, %103 ], [ %87, %85 ]
  store i32 %106, i32* %5, align 4
  br label %107

107:                                              ; preds = %2, %105
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.15"* @_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.15"*, %"class.WTF::Vector.15"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.15"* %1, %0
  br i1 %3, label %90, label %4, !prof !7

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.15", %"class.WTF::Vector.15"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.15", %"class.WTF::Vector.15"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %60

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector.15", %"class.WTF::Vector.15"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %60

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = bitcast %"class.WTF::Vector.15"* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector.15"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #10
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %60, !prof !8

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector.15", %"class.WTF::Vector.15"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.gfx::Size"*, %"class.gfx::Size"** %31, align 8
  %33 = icmp eq %"class.gfx::Size"* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm(i64 %34) #10
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx4SizeEEEPKcv, i64 0, i64 0)) #10
  br i1 %33, label %37, label %42

37:                                               ; preds = %30
  %38 = ptrtoint i8* %36 to i64
  %39 = bitcast %"class.WTF::Vector.15"* %0 to i64*
  store atomic i64 %38, i64* %39 monotonic, align 8
  %40 = lshr i64 %35, 3
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %12, align 8
  br label %60

42:                                               ; preds = %30
  %43 = lshr i64 %35, 3
  %44 = ptrtoint i8* %36 to i64
  %45 = load %"class.gfx::Size"*, %"class.gfx::Size"** %31, align 8
  %46 = icmp ne i8* %36, null
  %47 = icmp ne %"class.gfx::Size"* %45, null
  %48 = and i1 %46, %47
  %49 = bitcast %"class.gfx::Size"* %45 to i8*
  br i1 %48, label %50, label %56, !prof !8

50:                                               ; preds = %42
  %51 = load i32, i32* %5, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %36, i8* nonnull align 4 %49, i64 %53, i1 false) #10
  %54 = bitcast %"class.WTF::Vector.15"* %0 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %50, %42
  %57 = phi i8* [ %55, %50 ], [ %49, %42 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #10
  %58 = bitcast %"class.WTF::Vector.15"* %0 to i64*
  store atomic i64 %44, i64* %58 monotonic, align 8
  %59 = trunc i64 %43 to i32
  store i32 %59, i32* %12, align 8
  br label %60

60:                                               ; preds = %56, %37, %26, %11, %10
  %61 = getelementptr inbounds %"class.WTF::Vector.15", %"class.WTF::Vector.15"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.WTF::Vector.15"* %1 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"class.WTF::Vector.15", %"class.WTF::Vector.15"* %0, i64 0, i32 0, i32 0, i32 0
  %67 = bitcast %"class.WTF::Vector.15"* %0 to i8**
  %68 = load i8*, i8** %67, align 8
  %69 = shl nuw nsw i64 %65, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %63, i64 %69, i1 false) #10
  %70 = load %"class.gfx::Size"*, %"class.gfx::Size"** %61, align 8
  %71 = load i32, i32* %5, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %70, i64 %72
  %74 = load %"class.gfx::Size"*, %"class.gfx::Size"** %66, align 8
  %75 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %74, i64 %72
  %76 = icmp ne %"class.gfx::Size"* %75, null
  %77 = icmp ne %"class.gfx::Size"* %73, null
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %88, !prof !8

79:                                               ; preds = %60
  %80 = load i32, i32* %7, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %70, i64 %81
  %83 = bitcast %"class.gfx::Size"* %75 to i8*
  %84 = bitcast %"class.gfx::Size"* %73 to i8*
  %85 = ptrtoint %"class.gfx::Size"* %82 to i64
  %86 = ptrtoint %"class.gfx::Size"* %73 to i64
  %87 = sub i64 %85, %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* nonnull align 4 %84, i64 %87, i1 false) #10
  br label %88

88:                                               ; preds = %60, %79
  %89 = load i32, i32* %7, align 4
  store i32 %89, i32* %5, align 4
  br label %90

90:                                               ; preds = %2, %88
  ret %"class.WTF::Vector.15"* %0
}

declare void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorI8SkBitmapLj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %22

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %class.SkBitmap*, %class.SkBitmap** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %4, %14
  %15 = phi %class.SkBitmap* [ %18, %14 ], [ %6, %4 ]
  %16 = phi %class.SkBitmap* [ %17, %14 ], [ null, %4 ]
  tail call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* %16, %class.SkBitmap* dereferenceable(56) %15) #10
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %15) #10
  %17 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %16, i64 1
  %18 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %15, i64 1
  %19 = icmp eq %class.SkBitmap* %18, %10
  br i1 %19, label %20, label %14

20:                                               ; preds = %14, %4
  %21 = bitcast %class.SkBitmap* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %21) #10
  br label %53

22:                                               ; preds = %2
  %23 = zext i32 %1 to i64
  %24 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI8SkBitmapEEmm(i64 %23) #10
  %25 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %24, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI8SkBitmapEEPKcv, i64 0, i64 0)) #10
  %26 = udiv i64 %24, 56
  %27 = ptrtoint i8* %25 to i64
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %29 = load %class.SkBitmap*, %class.SkBitmap** %28, align 8
  %30 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %29, i64 %32
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %22
  %36 = bitcast %class.SkBitmap* %29 to i8*
  br label %48

37:                                               ; preds = %22
  %38 = bitcast i8* %25 to %class.SkBitmap*
  br label %39

39:                                               ; preds = %37, %39
  %40 = phi %class.SkBitmap* [ %43, %39 ], [ %29, %37 ]
  %41 = phi %class.SkBitmap* [ %42, %39 ], [ %38, %37 ]
  tail call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* %41, %class.SkBitmap* dereferenceable(56) %40) #10
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %40) #10
  %42 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %41, i64 1
  %43 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %40, i64 1
  %44 = icmp eq %class.SkBitmap* %43, %33
  br i1 %44, label %45, label %39

45:                                               ; preds = %39
  %46 = bitcast %"class.WTF::Vector"* %0 to i8**
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %35, %45
  %49 = phi i8* [ %47, %45 ], [ %36, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #10
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %27, i64* %50 monotonic, align 8
  %51 = trunc i64 %26 to i32
  %52 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %51, i32* %52, align 8
  br label %53

53:                                               ; preds = %48, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI8SkBitmapEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 38310473
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 38310473) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 56
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #1

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

declare void @_ZN8SkBitmapC1EOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #5

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS2_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENSA_18PartitionAllocatorEEEPNSB_IN3gfx4SizeELj0ESD_EEE3$_0JPNS_7RunLoopES9_SF_SJ_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS3_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENSB_18PartitionAllocatorEEEPNSC_IN3gfx4SizeELj0ESE_EEE3$_0JPNS_7RunLoopERSA_RSG_RSK_EEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS3_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENSB_18PartitionAllocatorEEEPNSC_IN3gfx4SizeELj0ESE_EEE3$_0JPNS_7RunLoopERSA_RSG_RSK_EEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS1_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENS9_18PartitionAllocatorEEEPNSA_IN3gfx4SizeELj0ESC_EEE3$_0JPNS_7RunLoopERS8_RSE_RSI_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSS_DpOST_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIZN5blink5mojom5blink26ImageDownloaderAsyncWaiter13DownloadImageERKNS1_4KURLEbjjbPiPN3WTF6VectorI8SkBitmapLj0ENS9_18PartitionAllocatorEEEPNSA_IN3gfx4SizeELj0ESC_EEE3$_0JPNS_7RunLoopERS8_RSE_RSI_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSS_DpOST_"}
!7 = !{!"branch_weights", i32 1, i32 2000}
!8 = !{!"branch_weights", i32 2000, i32 1}
