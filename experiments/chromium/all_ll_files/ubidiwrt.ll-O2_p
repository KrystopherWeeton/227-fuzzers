; ModuleID = '../../third_party/icu/source/common/ubidiwrt.cpp'
source_filename = "../../third_party/icu/source/common/ubidiwrt.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UBiDi = type { %struct.UBiDi*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.Opening*, %struct.Para*, %struct.Run*, %struct.Isolate*, i8, i8, i8*, i8*, i8, i32, i32, i8, i8, i8, i16*, i32, i16*, i32, %struct.ImpTabPair*, i32, i32, i32, i32, i32, %struct.Para*, [10 x %struct.Para], i32, %struct.Run*, [1 x %struct.Run], i32, %struct.Isolate*, [5 x %struct.Isolate], %struct.InsertPoints, i32, i32 (i8*, i32)*, i8* }
%struct.Opening = type { i32, i32, i32, i16, i32, i8 }
%struct.ImpTabPair = type opaque
%struct.Para = type { i32, i32 }
%struct.Run = type { i32, i32, i32 }
%struct.Isolate = type { i32, i32, i32, i16 }
%struct.InsertPoints = type { i32, i32, i32, i32, %struct.Point* }
%struct.Point = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ubidi_writeReverse_69(i16*, i32, i16*, i32, i16 zeroext, i32*) local_unnamed_addr #0 {
  %7 = icmp eq i32* %5, null
  br i1 %7, label %48, label %8

8:                                                ; preds = %6
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %48

11:                                               ; preds = %8
  %12 = icmp eq i16* %0, null
  %13 = icmp slt i32 %1, -1
  %14 = or i1 %12, %13
  %15 = icmp slt i32 %3, 0
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11
  %18 = icmp sgt i32 %3, 0
  %19 = icmp eq i16* %2, null
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %22

21:                                               ; preds = %17, %11
  store i32 1, i32* %5, align 4
  br label %48

22:                                               ; preds = %17
  br i1 %19, label %36, label %23

23:                                               ; preds = %22
  %24 = icmp ult i16* %0, %2
  br i1 %24, label %29, label %25

25:                                               ; preds = %23
  %26 = sext i32 %3 to i64
  %27 = getelementptr inbounds i16, i16* %2, i64 %26
  %28 = icmp ugt i16* %27, %0
  br i1 %28, label %35, label %29

29:                                               ; preds = %23, %25
  %30 = icmp ult i16* %2, %0
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = sext i32 %1 to i64
  %33 = getelementptr inbounds i16, i16* %0, i64 %32
  %34 = icmp ugt i16* %33, %2
  br i1 %34, label %35, label %36

35:                                               ; preds = %31, %25
  store i32 1, i32* %5, align 4
  br label %48

36:                                               ; preds = %29, %22, %31
  %37 = icmp eq i32 %1, -1
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call i32 @u_strlen_69(i16* nonnull %0) #3
  br label %40

40:                                               ; preds = %38, %36
  %41 = phi i32 [ %39, %38 ], [ %1, %36 ]
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = tail call fastcc i32 @_ZL14doWriteReversePKDsiPDsitP10UErrorCode(i16* nonnull %0, i32 %41, i16* %2, i32 %3, i16 zeroext %4, i32* nonnull %5)
  br label %45

45:                                               ; preds = %40, %43
  %46 = phi i32 [ %44, %43 ], [ 0, %40 ]
  %47 = tail call i32 @u_terminateUChars_69(i16* %2, i32 %3, i32 %46, i32* nonnull %5) #3
  br label %48

48:                                               ; preds = %6, %8, %45, %35, %21
  %49 = phi i32 [ 0, %21 ], [ 0, %35 ], [ %47, %45 ], [ 0, %8 ], [ 0, %6 ]
  ret i32 %49
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @u_strlen_69(i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL14doWriteReversePKDsiPDsitP10UErrorCode(i16* nocapture readonly, i32, i16* nocapture, i32, i16 zeroext, i32* nocapture) unnamed_addr #0 {
  %7 = zext i16 %4 to i32
  %8 = and i32 %7, 11
  switch i32 %8, label %314 [
    i32 0, label %9
    i32 1, label %152
  ]

9:                                                ; preds = %6
  %10 = icmp slt i32 %3, %1
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  store i32 15, i32* %5, align 4
  br label %668

12:                                               ; preds = %9, %149
  %13 = phi i32 [ %34, %149 ], [ %1, %9 ]
  %14 = phi i16* [ %150, %149 ], [ %2, %9 ]
  %15 = add nsw i32 %13, -1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i16, i16* %0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = and i16 %18, -1024
  %20 = icmp eq i16 %19, -9216
  %21 = icmp sgt i32 %15, 0
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %32

23:                                               ; preds = %12
  %24 = add nsw i32 %13, -2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %0, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = and i16 %27, -1024
  %29 = icmp eq i16 %28, -10240
  %30 = select i1 %29, i32 %24, i32 %15
  %31 = sext i32 %30 to i64
  br label %32

32:                                               ; preds = %23, %12
  %33 = phi i64 [ %31, %23 ], [ %16, %12 ]
  %34 = phi i32 [ %30, %23 ], [ %15, %12 ]
  %35 = sext i32 %13 to i64
  %36 = add nsw i64 %33, 1
  %37 = icmp sgt i64 %36, %35
  %38 = select i1 %37, i64 %36, i64 %35
  %39 = sub nsw i64 %38, %33
  %40 = icmp ult i64 %39, 16
  br i1 %40, label %138, label %41

41:                                               ; preds = %32
  %42 = add nsw i64 %33, 1
  %43 = icmp sgt i64 %42, %35
  %44 = select i1 %43, i64 %42, i64 %35
  %45 = sub nsw i64 %44, %33
  %46 = getelementptr i16, i16* %14, i64 %45
  %47 = getelementptr i16, i16* %0, i64 %33
  %48 = getelementptr i16, i16* %0, i64 %44
  %49 = icmp ult i16* %14, %48
  %50 = icmp ult i16* %47, %46
  %51 = and i1 %49, %50
  br i1 %51, label %138, label %52

52:                                               ; preds = %41
  %53 = and i64 %39, -16
  %54 = add nsw i64 %33, %53
  %55 = getelementptr i16, i16* %14, i64 %53
  %56 = add nsw i64 %53, -16
  %57 = lshr exact i64 %56, 4
  %58 = add nuw nsw i64 %57, 1
  %59 = and i64 %58, 3
  %60 = icmp ult i64 %56, 48
  br i1 %60, label %116, label %61

61:                                               ; preds = %52
  %62 = sub nsw i64 %58, %59
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i64 [ 0, %61 ], [ %113, %63 ]
  %65 = phi i64 [ %62, %61 ], [ %114, %63 ]
  %66 = add i64 %33, %64
  %67 = getelementptr i16, i16* %14, i64 %64
  %68 = getelementptr inbounds i16, i16* %0, i64 %66
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !2
  %71 = getelementptr inbounds i16, i16* %68, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !2
  %74 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %74, align 2, !alias.scope !5, !noalias !2
  %75 = getelementptr i16, i16* %67, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %76, align 2, !alias.scope !5, !noalias !2
  %77 = or i64 %64, 16
  %78 = add i64 %33, %77
  %79 = getelementptr i16, i16* %14, i64 %77
  %80 = getelementptr inbounds i16, i16* %0, i64 %78
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !2
  %83 = getelementptr inbounds i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !2
  %86 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !5, !noalias !2
  %87 = getelementptr i16, i16* %79, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !5, !noalias !2
  %89 = or i64 %64, 32
  %90 = add i64 %33, %89
  %91 = getelementptr i16, i16* %14, i64 %89
  %92 = getelementptr inbounds i16, i16* %0, i64 %90
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !2
  %95 = getelementptr inbounds i16, i16* %92, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !2
  %98 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !5, !noalias !2
  %99 = getelementptr i16, i16* %91, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !5, !noalias !2
  %101 = or i64 %64, 48
  %102 = add i64 %33, %101
  %103 = getelementptr i16, i16* %14, i64 %101
  %104 = getelementptr inbounds i16, i16* %0, i64 %102
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !2
  %107 = getelementptr inbounds i16, i16* %104, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !2
  %110 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %110, align 2, !alias.scope !5, !noalias !2
  %111 = getelementptr i16, i16* %103, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 2, !alias.scope !5, !noalias !2
  %113 = add i64 %64, 64
  %114 = add i64 %65, -4
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %63, !llvm.loop !7

116:                                              ; preds = %63, %52
  %117 = phi i64 [ 0, %52 ], [ %113, %63 ]
  %118 = icmp eq i64 %59, 0
  br i1 %118, label %136, label %119

119:                                              ; preds = %116, %119
  %120 = phi i64 [ %133, %119 ], [ %117, %116 ]
  %121 = phi i64 [ %134, %119 ], [ %59, %116 ]
  %122 = add i64 %33, %120
  %123 = getelementptr i16, i16* %14, i64 %120
  %124 = getelementptr inbounds i16, i16* %0, i64 %122
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !2
  %127 = getelementptr inbounds i16, i16* %124, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !2
  %130 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %130, align 2, !alias.scope !5, !noalias !2
  %131 = getelementptr i16, i16* %123, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %132, align 2, !alias.scope !5, !noalias !2
  %133 = add i64 %120, 16
  %134 = add i64 %121, -1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %119, !llvm.loop !9

136:                                              ; preds = %119, %116
  %137 = icmp eq i64 %39, %53
  br i1 %137, label %149, label %138

138:                                              ; preds = %136, %41, %32
  %139 = phi i64 [ %33, %41 ], [ %33, %32 ], [ %54, %136 ]
  %140 = phi i16* [ %14, %41 ], [ %14, %32 ], [ %55, %136 ]
  br label %141

141:                                              ; preds = %138, %141
  %142 = phi i64 [ %144, %141 ], [ %139, %138 ]
  %143 = phi i16* [ %147, %141 ], [ %140, %138 ]
  %144 = add nsw i64 %142, 1
  %145 = getelementptr inbounds i16, i16* %0, i64 %142
  %146 = load i16, i16* %145, align 2
  %147 = getelementptr inbounds i16, i16* %143, i64 1
  store i16 %146, i16* %143, align 2
  %148 = icmp slt i64 %144, %35
  br i1 %148, label %141, label %149, !llvm.loop !11

149:                                              ; preds = %141, %136
  %150 = phi i16* [ %55, %136 ], [ %147, %141 ]
  %151 = icmp sgt i32 %34, 0
  br i1 %151, label %12, label %668

152:                                              ; preds = %6
  %153 = icmp slt i32 %3, %1
  br i1 %153, label %154, label %155

154:                                              ; preds = %152
  store i32 15, i32* %5, align 4
  br label %668

155:                                              ; preds = %152, %312
  %156 = phi i32 [ %196, %312 ], [ %1, %152 ]
  %157 = phi i16* [ %313, %312 ], [ %2, %152 ]
  br label %158

158:                                              ; preds = %185, %155
  %159 = phi i32 [ %156, %155 ], [ %187, %185 ]
  %160 = add nsw i32 %159, -1
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i16, i16* %0, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = and i32 %164, 64512
  %166 = icmp eq i32 %165, 56320
  %167 = icmp sgt i32 %160, 0
  %168 = and i1 %167, %166
  br i1 %168, label %169, label %181

169:                                              ; preds = %158
  %170 = add nsw i32 %159, -2
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i16, i16* %0, i64 %171
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = and i32 %174, 64512
  %176 = icmp eq i32 %175, 55296
  br i1 %176, label %177, label %185

177:                                              ; preds = %169
  %178 = shl nuw nsw i32 %174, 10
  %179 = add nuw nsw i32 %164, -56613888
  %180 = add nsw i32 %179, %178
  br label %181

181:                                              ; preds = %177, %158
  %182 = phi i32 [ %160, %158 ], [ %170, %177 ]
  %183 = phi i32 [ %164, %158 ], [ %180, %177 ]
  %184 = icmp sgt i32 %182, 0
  br i1 %184, label %185, label %194

185:                                              ; preds = %169, %181
  %186 = phi i32 [ %183, %181 ], [ %164, %169 ]
  %187 = phi i32 [ %182, %181 ], [ %160, %169 ]
  %188 = tail call signext i8 @u_charType_69(i32 %186) #3
  %189 = sext i8 %188 to i64
  %190 = and i64 %189, 4294967295
  %191 = shl i64 1, %190
  %192 = and i64 %191, 448
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %158

194:                                              ; preds = %185, %181
  %195 = phi i1 [ true, %185 ], [ false, %181 ]
  %196 = phi i32 [ %187, %185 ], [ %182, %181 ]
  %197 = sext i32 %196 to i64
  %198 = sext i32 %156 to i64
  %199 = add nsw i64 %197, 1
  %200 = icmp sgt i64 %199, %198
  %201 = select i1 %200, i64 %199, i64 %198
  %202 = sub nsw i64 %201, %197
  %203 = icmp ult i64 %202, 16
  br i1 %203, label %301, label %204

204:                                              ; preds = %194
  %205 = add nsw i64 %197, 1
  %206 = icmp sgt i64 %205, %198
  %207 = select i1 %206, i64 %205, i64 %198
  %208 = sub nsw i64 %207, %197
  %209 = getelementptr i16, i16* %157, i64 %208
  %210 = getelementptr i16, i16* %0, i64 %197
  %211 = getelementptr i16, i16* %0, i64 %207
  %212 = icmp ult i16* %157, %211
  %213 = icmp ult i16* %210, %209
  %214 = and i1 %212, %213
  br i1 %214, label %301, label %215

215:                                              ; preds = %204
  %216 = and i64 %202, -16
  %217 = add nsw i64 %216, %197
  %218 = getelementptr i16, i16* %157, i64 %216
  %219 = add nsw i64 %216, -16
  %220 = lshr exact i64 %219, 4
  %221 = add nuw nsw i64 %220, 1
  %222 = and i64 %221, 3
  %223 = icmp ult i64 %219, 48
  br i1 %223, label %279, label %224

224:                                              ; preds = %215
  %225 = sub nsw i64 %221, %222
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %276, %226 ]
  %228 = phi i64 [ %225, %224 ], [ %277, %226 ]
  %229 = add i64 %227, %197
  %230 = getelementptr i16, i16* %157, i64 %227
  %231 = getelementptr inbounds i16, i16* %0, i64 %229
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !12
  %234 = getelementptr inbounds i16, i16* %231, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !12
  %237 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %237, align 2, !alias.scope !15, !noalias !12
  %238 = getelementptr i16, i16* %230, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %239, align 2, !alias.scope !15, !noalias !12
  %240 = or i64 %227, 16
  %241 = add i64 %240, %197
  %242 = getelementptr i16, i16* %157, i64 %240
  %243 = getelementptr inbounds i16, i16* %0, i64 %241
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2, !alias.scope !12
  %246 = getelementptr inbounds i16, i16* %243, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2, !alias.scope !12
  %249 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2, !alias.scope !15, !noalias !12
  %250 = getelementptr i16, i16* %242, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2, !alias.scope !15, !noalias !12
  %252 = or i64 %227, 32
  %253 = add i64 %252, %197
  %254 = getelementptr i16, i16* %157, i64 %252
  %255 = getelementptr inbounds i16, i16* %0, i64 %253
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 2, !alias.scope !12
  %258 = getelementptr inbounds i16, i16* %255, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 2, !alias.scope !12
  %261 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %257, <8 x i16>* %261, align 2, !alias.scope !15, !noalias !12
  %262 = getelementptr i16, i16* %254, i64 8
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %263, align 2, !alias.scope !15, !noalias !12
  %264 = or i64 %227, 48
  %265 = add i64 %264, %197
  %266 = getelementptr i16, i16* %157, i64 %264
  %267 = getelementptr inbounds i16, i16* %0, i64 %265
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2, !alias.scope !12
  %270 = getelementptr inbounds i16, i16* %267, i64 8
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !12
  %273 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %273, align 2, !alias.scope !15, !noalias !12
  %274 = getelementptr i16, i16* %266, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %275, align 2, !alias.scope !15, !noalias !12
  %276 = add i64 %227, 64
  %277 = add i64 %228, -4
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %226, !llvm.loop !17

279:                                              ; preds = %226, %215
  %280 = phi i64 [ 0, %215 ], [ %276, %226 ]
  %281 = icmp eq i64 %222, 0
  br i1 %281, label %299, label %282

282:                                              ; preds = %279, %282
  %283 = phi i64 [ %296, %282 ], [ %280, %279 ]
  %284 = phi i64 [ %297, %282 ], [ %222, %279 ]
  %285 = add i64 %283, %197
  %286 = getelementptr i16, i16* %157, i64 %283
  %287 = getelementptr inbounds i16, i16* %0, i64 %285
  %288 = bitcast i16* %287 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 2, !alias.scope !12
  %290 = getelementptr inbounds i16, i16* %287, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !12
  %293 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %293, align 2, !alias.scope !15, !noalias !12
  %294 = getelementptr i16, i16* %286, i64 8
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %295, align 2, !alias.scope !15, !noalias !12
  %296 = add i64 %283, 16
  %297 = add i64 %284, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %282, !llvm.loop !18

299:                                              ; preds = %282, %279
  %300 = icmp eq i64 %202, %216
  br i1 %300, label %312, label %301

301:                                              ; preds = %299, %204, %194
  %302 = phi i64 [ %197, %204 ], [ %197, %194 ], [ %217, %299 ]
  %303 = phi i16* [ %157, %204 ], [ %157, %194 ], [ %218, %299 ]
  br label %304

304:                                              ; preds = %301, %304
  %305 = phi i64 [ %307, %304 ], [ %302, %301 ]
  %306 = phi i16* [ %310, %304 ], [ %303, %301 ]
  %307 = add nsw i64 %305, 1
  %308 = getelementptr inbounds i16, i16* %0, i64 %305
  %309 = load i16, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %306, i64 1
  store i16 %309, i16* %306, align 2
  %311 = icmp slt i64 %307, %198
  br i1 %311, label %304, label %312, !llvm.loop !19

312:                                              ; preds = %304, %299
  %313 = phi i16* [ %218, %299 ], [ %310, %304 ]
  br i1 %195, label %155, label %668

314:                                              ; preds = %6
  %315 = and i32 %7, 8
  %316 = icmp ne i32 %315, 0
  br i1 %316, label %317, label %403

317:                                              ; preds = %314
  %318 = icmp slt i32 %1, 1
  %319 = select i1 %318, i32 %1, i32 1
  %320 = sub i32 %1, %319
  %321 = zext i32 %320 to i64
  %322 = add nuw nsw i64 %321, 1
  %323 = icmp ult i64 %322, 8
  br i1 %323, label %373, label %324

324:                                              ; preds = %317
  %325 = and i64 %322, 8589934584
  %326 = getelementptr i16, i16* %0, i64 %325
  %327 = trunc i64 %325 to i32
  %328 = sub i32 %1, %327
  br label %329

329:                                              ; preds = %329, %324
  %330 = phi i64 [ 0, %324 ], [ %363, %329 ]
  %331 = phi <4 x i32> [ zeroinitializer, %324 ], [ %361, %329 ]
  %332 = phi <4 x i32> [ zeroinitializer, %324 ], [ %362, %329 ]
  %333 = getelementptr i16, i16* %0, i64 %330
  %334 = bitcast i16* %333 to <4 x i16>*
  %335 = load <4 x i16>, <4 x i16>* %334, align 2
  %336 = getelementptr i16, i16* %333, i64 4
  %337 = bitcast i16* %336 to <4 x i16>*
  %338 = load <4 x i16>, <4 x i16>* %337, align 2
  %339 = zext <4 x i16> %335 to <4 x i32>
  %340 = zext <4 x i16> %338 to <4 x i32>
  %341 = and <4 x i32> %339, <i32 65532, i32 65532, i32 65532, i32 65532>
  %342 = and <4 x i32> %340, <i32 65532, i32 65532, i32 65532, i32 65532>
  %343 = icmp eq <4 x i32> %341, <i32 8204, i32 8204, i32 8204, i32 8204>
  %344 = icmp eq <4 x i32> %342, <i32 8204, i32 8204, i32 8204, i32 8204>
  %345 = add nsw <4 x i32> %339, <i32 -8234, i32 -8234, i32 -8234, i32 -8234>
  %346 = add nsw <4 x i32> %340, <i32 -8234, i32 -8234, i32 -8234, i32 -8234>
  %347 = icmp ult <4 x i32> %345, <i32 5, i32 5, i32 5, i32 5>
  %348 = icmp ult <4 x i32> %346, <i32 5, i32 5, i32 5, i32 5>
  %349 = or <4 x i1> %343, %347
  %350 = or <4 x i1> %344, %348
  %351 = add nsw <4 x i32> %339, <i32 -8294, i32 -8294, i32 -8294, i32 -8294>
  %352 = add nsw <4 x i32> %340, <i32 -8294, i32 -8294, i32 -8294, i32 -8294>
  %353 = icmp ult <4 x i32> %351, <i32 4, i32 4, i32 4, i32 4>
  %354 = icmp ult <4 x i32> %352, <i32 4, i32 4, i32 4, i32 4>
  %355 = or <4 x i1> %353, %349
  %356 = or <4 x i1> %354, %350
  %357 = xor <4 x i1> %355, <i1 true, i1 true, i1 true, i1 true>
  %358 = xor <4 x i1> %356, <i1 true, i1 true, i1 true, i1 true>
  %359 = zext <4 x i1> %357 to <4 x i32>
  %360 = zext <4 x i1> %358 to <4 x i32>
  %361 = add nuw nsw <4 x i32> %331, %359
  %362 = add nuw nsw <4 x i32> %332, %360
  %363 = add i64 %330, 8
  %364 = icmp eq i64 %363, %325
  br i1 %364, label %365, label %329, !llvm.loop !20

365:                                              ; preds = %329
  %366 = add nuw <4 x i32> %362, %361
  %367 = shufflevector <4 x i32> %366, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %368 = add <4 x i32> %366, %367
  %369 = shufflevector <4 x i32> %368, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %370 = add <4 x i32> %368, %369
  %371 = extractelement <4 x i32> %370, i32 0
  %372 = icmp eq i64 %322, %325
  br i1 %372, label %397, label %373

373:                                              ; preds = %365, %317
  %374 = phi i16* [ %0, %317 ], [ %326, %365 ]
  %375 = phi i32 [ 0, %317 ], [ %371, %365 ]
  %376 = phi i32 [ %1, %317 ], [ %328, %365 ]
  br label %377

377:                                              ; preds = %373, %377
  %378 = phi i16* [ %381, %377 ], [ %374, %373 ]
  %379 = phi i32 [ %394, %377 ], [ %375, %373 ]
  %380 = phi i32 [ %395, %377 ], [ %376, %373 ]
  %381 = getelementptr inbounds i16, i16* %378, i64 1
  %382 = load i16, i16* %378, align 2
  %383 = zext i16 %382 to i32
  %384 = and i32 %383, 65532
  %385 = icmp eq i32 %384, 8204
  %386 = add nsw i32 %383, -8234
  %387 = icmp ult i32 %386, 5
  %388 = or i1 %385, %387
  %389 = add nsw i32 %383, -8294
  %390 = icmp ult i32 %389, 4
  %391 = or i1 %390, %388
  %392 = xor i1 %391, true
  %393 = zext i1 %392 to i32
  %394 = add nuw nsw i32 %379, %393
  %395 = add nsw i32 %380, -1
  %396 = icmp sgt i32 %395, 0
  br i1 %396, label %377, label %397, !llvm.loop !21

397:                                              ; preds = %377, %365
  %398 = phi i16* [ %326, %365 ], [ %381, %377 ]
  %399 = phi i32 [ %371, %365 ], [ %394, %377 ]
  %400 = sext i32 %1 to i64
  %401 = sub nsw i64 0, %400
  %402 = getelementptr inbounds i16, i16* %398, i64 %401
  br label %403

403:                                              ; preds = %314, %397
  %404 = phi i16* [ %402, %397 ], [ %0, %314 ]
  %405 = phi i32 [ %399, %397 ], [ %1, %314 ]
  %406 = icmp sgt i32 %405, %3
  br i1 %406, label %412, label %407

407:                                              ; preds = %403
  %408 = and i32 %7, 1
  %409 = icmp ne i32 %408, 0
  %410 = and i32 %7, 2
  %411 = icmp eq i32 %410, 0
  br label %413

412:                                              ; preds = %403
  store i32 15, i32* %5, align 4
  br label %668

413:                                              ; preds = %407, %665
  %414 = phi i32 [ %478, %665 ], [ %1, %407 ]
  %415 = phi i16* [ %666, %665 ], [ %2, %407 ]
  %416 = add nsw i32 %414, -1
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i16, i16* %404, i64 %417
  %419 = load i16, i16* %418, align 2
  %420 = zext i16 %419 to i32
  %421 = and i32 %420, 64512
  %422 = icmp eq i32 %421, 56320
  %423 = icmp sgt i32 %416, 0
  %424 = and i1 %423, %422
  br i1 %424, label %425, label %437

425:                                              ; preds = %413
  %426 = add nsw i32 %414, -2
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds i16, i16* %404, i64 %427
  %429 = load i16, i16* %428, align 2
  %430 = zext i16 %429 to i32
  %431 = and i32 %430, 64512
  %432 = icmp eq i32 %431, 55296
  br i1 %432, label %433, label %437

433:                                              ; preds = %425
  %434 = shl nuw nsw i32 %430, 10
  %435 = add nuw nsw i32 %420, -56613888
  %436 = add nsw i32 %435, %434
  br label %437

437:                                              ; preds = %425, %433, %413
  %438 = phi i32 [ %416, %413 ], [ %426, %433 ], [ %416, %425 ]
  %439 = phi i32 [ %420, %413 ], [ %436, %433 ], [ %420, %425 ]
  %440 = icmp sgt i32 %438, 0
  %441 = and i1 %409, %440
  br i1 %441, label %442, label %477

442:                                              ; preds = %437, %473
  %443 = phi i32 [ %475, %473 ], [ %439, %437 ]
  %444 = phi i32 [ %474, %473 ], [ %438, %437 ]
  %445 = tail call signext i8 @u_charType_69(i32 %443) #3
  %446 = sext i8 %445 to i64
  %447 = and i64 %446, 4294967295
  %448 = shl i64 1, %447
  %449 = and i64 %448, 448
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %477, label %451

451:                                              ; preds = %442
  %452 = add nsw i32 %444, -1
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i16, i16* %404, i64 %453
  %455 = load i16, i16* %454, align 2
  %456 = zext i16 %455 to i32
  %457 = and i32 %456, 64512
  %458 = icmp eq i32 %457, 56320
  %459 = icmp sgt i32 %452, 0
  %460 = and i1 %459, %458
  br i1 %460, label %461, label %473

461:                                              ; preds = %451
  %462 = add nsw i32 %444, -2
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i16, i16* %404, i64 %463
  %465 = load i16, i16* %464, align 2
  %466 = zext i16 %465 to i32
  %467 = and i32 %466, 64512
  %468 = icmp eq i32 %467, 55296
  br i1 %468, label %469, label %473

469:                                              ; preds = %461
  %470 = shl nuw nsw i32 %466, 10
  %471 = add nuw nsw i32 %456, -56613888
  %472 = add nsw i32 %471, %470
  br label %473

473:                                              ; preds = %461, %469, %451
  %474 = phi i32 [ %452, %451 ], [ %462, %469 ], [ %452, %461 ]
  %475 = phi i32 [ %456, %451 ], [ %472, %469 ], [ %456, %461 ]
  %476 = icmp sgt i32 %474, 0
  br i1 %476, label %442, label %477

477:                                              ; preds = %473, %442, %437
  %478 = phi i32 [ %438, %437 ], [ %474, %473 ], [ %444, %442 ]
  %479 = phi i32 [ %439, %437 ], [ %475, %473 ], [ %443, %442 ]
  br i1 %316, label %480, label %484

480:                                              ; preds = %477
  %481 = and i32 %479, -4
  %482 = icmp eq i32 %481, 8204
  br i1 %482, label %665, label %483

483:                                              ; preds = %480
  switch i32 %479, label %484 [
    i32 8297, label %665
    i32 8296, label %665
    i32 8295, label %665
    i32 8294, label %665
    i32 8238, label %665
    i32 8237, label %665
    i32 8236, label %665
    i32 8235, label %665
    i32 8234, label %665
  ]

484:                                              ; preds = %483, %477
  br i1 %411, label %503, label %485

485:                                              ; preds = %484
  %486 = tail call i32 @u_charMirror_69(i32 %479) #3
  %487 = icmp ult i32 %486, 65536
  br i1 %487, label %488, label %490

488:                                              ; preds = %485
  %489 = trunc i32 %486 to i16
  store i16 %489, i16* %415, align 2
  br label %498

490:                                              ; preds = %485
  %491 = lshr i32 %486, 10
  %492 = trunc i32 %491 to i16
  %493 = add i16 %492, -10304
  store i16 %493, i16* %415, align 2
  %494 = trunc i32 %486 to i16
  %495 = and i16 %494, 1023
  %496 = or i16 %495, -9216
  %497 = getelementptr inbounds i16, i16* %415, i64 1
  store i16 %496, i16* %497, align 2
  br label %498

498:                                              ; preds = %490, %488
  %499 = phi i32 [ 1, %488 ], [ 2, %490 ]
  %500 = zext i32 %499 to i64
  %501 = getelementptr inbounds i16, i16* %415, i64 %500
  %502 = add nsw i32 %499, %478
  br label %503

503:                                              ; preds = %484, %498
  %504 = phi i16* [ %501, %498 ], [ %415, %484 ]
  %505 = phi i32 [ %502, %498 ], [ %478, %484 ]
  %506 = icmp slt i32 %505, %414
  br i1 %506, label %507, label %665

507:                                              ; preds = %503
  %508 = sext i32 %505 to i64
  %509 = sext i32 %414 to i64
  %510 = sub nsw i64 %509, %508
  %511 = icmp ult i64 %510, 16
  br i1 %511, label %606, label %512

512:                                              ; preds = %507
  %513 = sub nsw i64 %509, %508
  %514 = getelementptr i16, i16* %504, i64 %513
  %515 = getelementptr i16, i16* %404, i64 %508
  %516 = getelementptr i16, i16* %404, i64 %509
  %517 = icmp ult i16* %504, %516
  %518 = icmp ult i16* %515, %514
  %519 = and i1 %517, %518
  br i1 %519, label %606, label %520

520:                                              ; preds = %512
  %521 = and i64 %510, -16
  %522 = add nsw i64 %521, %508
  %523 = getelementptr i16, i16* %504, i64 %521
  %524 = add nsw i64 %521, -16
  %525 = lshr exact i64 %524, 4
  %526 = add nuw nsw i64 %525, 1
  %527 = and i64 %526, 3
  %528 = icmp ult i64 %524, 48
  br i1 %528, label %584, label %529

529:                                              ; preds = %520
  %530 = sub nsw i64 %526, %527
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ 0, %529 ], [ %581, %531 ]
  %533 = phi i64 [ %530, %529 ], [ %582, %531 ]
  %534 = add i64 %532, %508
  %535 = getelementptr i16, i16* %504, i64 %532
  %536 = getelementptr inbounds i16, i16* %404, i64 %534
  %537 = bitcast i16* %536 to <8 x i16>*
  %538 = load <8 x i16>, <8 x i16>* %537, align 2, !alias.scope !23
  %539 = getelementptr inbounds i16, i16* %536, i64 8
  %540 = bitcast i16* %539 to <8 x i16>*
  %541 = load <8 x i16>, <8 x i16>* %540, align 2, !alias.scope !23
  %542 = bitcast i16* %535 to <8 x i16>*
  store <8 x i16> %538, <8 x i16>* %542, align 2, !alias.scope !26, !noalias !23
  %543 = getelementptr i16, i16* %535, i64 8
  %544 = bitcast i16* %543 to <8 x i16>*
  store <8 x i16> %541, <8 x i16>* %544, align 2, !alias.scope !26, !noalias !23
  %545 = or i64 %532, 16
  %546 = add i64 %545, %508
  %547 = getelementptr i16, i16* %504, i64 %545
  %548 = getelementptr inbounds i16, i16* %404, i64 %546
  %549 = bitcast i16* %548 to <8 x i16>*
  %550 = load <8 x i16>, <8 x i16>* %549, align 2, !alias.scope !23
  %551 = getelementptr inbounds i16, i16* %548, i64 8
  %552 = bitcast i16* %551 to <8 x i16>*
  %553 = load <8 x i16>, <8 x i16>* %552, align 2, !alias.scope !23
  %554 = bitcast i16* %547 to <8 x i16>*
  store <8 x i16> %550, <8 x i16>* %554, align 2, !alias.scope !26, !noalias !23
  %555 = getelementptr i16, i16* %547, i64 8
  %556 = bitcast i16* %555 to <8 x i16>*
  store <8 x i16> %553, <8 x i16>* %556, align 2, !alias.scope !26, !noalias !23
  %557 = or i64 %532, 32
  %558 = add i64 %557, %508
  %559 = getelementptr i16, i16* %504, i64 %557
  %560 = getelementptr inbounds i16, i16* %404, i64 %558
  %561 = bitcast i16* %560 to <8 x i16>*
  %562 = load <8 x i16>, <8 x i16>* %561, align 2, !alias.scope !23
  %563 = getelementptr inbounds i16, i16* %560, i64 8
  %564 = bitcast i16* %563 to <8 x i16>*
  %565 = load <8 x i16>, <8 x i16>* %564, align 2, !alias.scope !23
  %566 = bitcast i16* %559 to <8 x i16>*
  store <8 x i16> %562, <8 x i16>* %566, align 2, !alias.scope !26, !noalias !23
  %567 = getelementptr i16, i16* %559, i64 8
  %568 = bitcast i16* %567 to <8 x i16>*
  store <8 x i16> %565, <8 x i16>* %568, align 2, !alias.scope !26, !noalias !23
  %569 = or i64 %532, 48
  %570 = add i64 %569, %508
  %571 = getelementptr i16, i16* %504, i64 %569
  %572 = getelementptr inbounds i16, i16* %404, i64 %570
  %573 = bitcast i16* %572 to <8 x i16>*
  %574 = load <8 x i16>, <8 x i16>* %573, align 2, !alias.scope !23
  %575 = getelementptr inbounds i16, i16* %572, i64 8
  %576 = bitcast i16* %575 to <8 x i16>*
  %577 = load <8 x i16>, <8 x i16>* %576, align 2, !alias.scope !23
  %578 = bitcast i16* %571 to <8 x i16>*
  store <8 x i16> %574, <8 x i16>* %578, align 2, !alias.scope !26, !noalias !23
  %579 = getelementptr i16, i16* %571, i64 8
  %580 = bitcast i16* %579 to <8 x i16>*
  store <8 x i16> %577, <8 x i16>* %580, align 2, !alias.scope !26, !noalias !23
  %581 = add i64 %532, 64
  %582 = add i64 %533, -4
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %584, label %531, !llvm.loop !28

584:                                              ; preds = %531, %520
  %585 = phi i64 [ 0, %520 ], [ %581, %531 ]
  %586 = icmp eq i64 %527, 0
  br i1 %586, label %604, label %587

587:                                              ; preds = %584, %587
  %588 = phi i64 [ %601, %587 ], [ %585, %584 ]
  %589 = phi i64 [ %602, %587 ], [ %527, %584 ]
  %590 = add i64 %588, %508
  %591 = getelementptr i16, i16* %504, i64 %588
  %592 = getelementptr inbounds i16, i16* %404, i64 %590
  %593 = bitcast i16* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !23
  %595 = getelementptr inbounds i16, i16* %592, i64 8
  %596 = bitcast i16* %595 to <8 x i16>*
  %597 = load <8 x i16>, <8 x i16>* %596, align 2, !alias.scope !23
  %598 = bitcast i16* %591 to <8 x i16>*
  store <8 x i16> %594, <8 x i16>* %598, align 2, !alias.scope !26, !noalias !23
  %599 = getelementptr i16, i16* %591, i64 8
  %600 = bitcast i16* %599 to <8 x i16>*
  store <8 x i16> %597, <8 x i16>* %600, align 2, !alias.scope !26, !noalias !23
  %601 = add i64 %588, 16
  %602 = add i64 %589, -1
  %603 = icmp eq i64 %602, 0
  br i1 %603, label %604, label %587, !llvm.loop !29

604:                                              ; preds = %587, %584
  %605 = icmp eq i64 %510, %521
  br i1 %605, label %665, label %606

606:                                              ; preds = %604, %512, %507
  %607 = phi i64 [ %508, %512 ], [ %508, %507 ], [ %522, %604 ]
  %608 = phi i16* [ %504, %512 ], [ %504, %507 ], [ %523, %604 ]
  %609 = sub nsw i64 %509, %607
  %610 = xor i64 %607, -1
  %611 = add nsw i64 %610, %509
  %612 = and i64 %609, 7
  %613 = icmp eq i64 %612, 0
  br i1 %613, label %624, label %614

614:                                              ; preds = %606, %614
  %615 = phi i64 [ %618, %614 ], [ %607, %606 ]
  %616 = phi i16* [ %621, %614 ], [ %608, %606 ]
  %617 = phi i64 [ %622, %614 ], [ %612, %606 ]
  %618 = add nsw i64 %615, 1
  %619 = getelementptr inbounds i16, i16* %404, i64 %615
  %620 = load i16, i16* %619, align 2
  %621 = getelementptr inbounds i16, i16* %616, i64 1
  store i16 %620, i16* %616, align 2
  %622 = add i64 %617, -1
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %614, !llvm.loop !30

624:                                              ; preds = %614, %606
  %625 = phi i16* [ undef, %606 ], [ %621, %614 ]
  %626 = phi i64 [ %607, %606 ], [ %618, %614 ]
  %627 = phi i16* [ %608, %606 ], [ %621, %614 ]
  %628 = icmp ult i64 %611, 7
  br i1 %628, label %665, label %629

629:                                              ; preds = %624, %629
  %630 = phi i64 [ %660, %629 ], [ %626, %624 ]
  %631 = phi i16* [ %663, %629 ], [ %627, %624 ]
  %632 = add nsw i64 %630, 1
  %633 = getelementptr inbounds i16, i16* %404, i64 %630
  %634 = load i16, i16* %633, align 2
  %635 = getelementptr inbounds i16, i16* %631, i64 1
  store i16 %634, i16* %631, align 2
  %636 = add nsw i64 %630, 2
  %637 = getelementptr inbounds i16, i16* %404, i64 %632
  %638 = load i16, i16* %637, align 2
  %639 = getelementptr inbounds i16, i16* %631, i64 2
  store i16 %638, i16* %635, align 2
  %640 = add nsw i64 %630, 3
  %641 = getelementptr inbounds i16, i16* %404, i64 %636
  %642 = load i16, i16* %641, align 2
  %643 = getelementptr inbounds i16, i16* %631, i64 3
  store i16 %642, i16* %639, align 2
  %644 = add nsw i64 %630, 4
  %645 = getelementptr inbounds i16, i16* %404, i64 %640
  %646 = load i16, i16* %645, align 2
  %647 = getelementptr inbounds i16, i16* %631, i64 4
  store i16 %646, i16* %643, align 2
  %648 = add nsw i64 %630, 5
  %649 = getelementptr inbounds i16, i16* %404, i64 %644
  %650 = load i16, i16* %649, align 2
  %651 = getelementptr inbounds i16, i16* %631, i64 5
  store i16 %650, i16* %647, align 2
  %652 = add nsw i64 %630, 6
  %653 = getelementptr inbounds i16, i16* %404, i64 %648
  %654 = load i16, i16* %653, align 2
  %655 = getelementptr inbounds i16, i16* %631, i64 6
  store i16 %654, i16* %651, align 2
  %656 = add nsw i64 %630, 7
  %657 = getelementptr inbounds i16, i16* %404, i64 %652
  %658 = load i16, i16* %657, align 2
  %659 = getelementptr inbounds i16, i16* %631, i64 7
  store i16 %658, i16* %655, align 2
  %660 = add nsw i64 %630, 8
  %661 = getelementptr inbounds i16, i16* %404, i64 %656
  %662 = load i16, i16* %661, align 2
  %663 = getelementptr inbounds i16, i16* %631, i64 8
  store i16 %662, i16* %659, align 2
  %664 = icmp eq i64 %660, %509
  br i1 %664, label %665, label %629, !llvm.loop !31

665:                                              ; preds = %624, %629, %604, %503, %483, %483, %483, %483, %483, %483, %483, %483, %483, %480
  %666 = phi i16* [ %415, %483 ], [ %415, %480 ], [ %415, %483 ], [ %415, %483 ], [ %415, %483 ], [ %415, %483 ], [ %415, %483 ], [ %415, %483 ], [ %415, %483 ], [ %415, %483 ], [ %504, %503 ], [ %523, %604 ], [ %625, %624 ], [ %663, %629 ]
  %667 = icmp sgt i32 %478, 0
  br i1 %667, label %413, label %668

668:                                              ; preds = %312, %149, %665, %412, %154, %11
  %669 = phi i32 [ %405, %412 ], [ %1, %154 ], [ %1, %11 ], [ %405, %665 ], [ %1, %149 ], [ %1, %312 ]
  ret i32 %669
}

declare i32 @u_terminateUChars_69(i16*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ubidi_writeReordered_69(%struct.UBiDi*, i16*, i32, i16 zeroext, i32*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #3
  store i32 -1431655766, i32* %6, align 4
  %9 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #3
  store i32 -1431655766, i32* %7, align 4
  %10 = icmp eq i32* %4, null
  br i1 %10, label %394, label %11

11:                                               ; preds = %5
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %14, label %394

14:                                               ; preds = %11
  %15 = icmp eq %struct.UBiDi* %0, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 1
  %18 = load i16*, i16** %17, align 8
  %19 = icmp eq i16* %18, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = or i32 %22, %2
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = icmp sgt i32 %2, 0
  %27 = icmp eq i16* %1, null
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %30

29:                                               ; preds = %25, %20, %16, %14
  store i32 1, i32* %4, align 4
  br label %394

30:                                               ; preds = %25
  br i1 %27, label %46, label %31

31:                                               ; preds = %30
  %32 = icmp ult i16* %18, %1
  br i1 %32, label %37, label %33

33:                                               ; preds = %31
  %34 = sext i32 %2 to i64
  %35 = getelementptr inbounds i16, i16* %1, i64 %34
  %36 = icmp ult i16* %18, %35
  br i1 %36, label %45, label %37

37:                                               ; preds = %31, %33
  %38 = icmp ugt i16* %18, %1
  br i1 %38, label %46, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i16, i16* %18, i64 %42
  %44 = icmp ugt i16* %43, %1
  br i1 %44, label %45, label %46

45:                                               ; preds = %39, %33
  store i32 1, i32* %4, align 4
  br label %394

46:                                               ; preds = %37, %30, %39
  %47 = icmp eq i32 %22, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %46
  %49 = tail call i32 @u_terminateUChars_69(i16* %1, i32 %2, i32 0, i32* nonnull %4) #3
  br label %394

50:                                               ; preds = %46
  %51 = tail call i32 @ubidi_countRuns_69(%struct.UBiDi* nonnull %0, i32* nonnull %4) #3
  %52 = load i32, i32* %4, align 4
  %53 = icmp slt i32 %52, 1
  br i1 %53, label %54, label %394

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 23
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = and i16 %3, -13
  %60 = or i16 %59, 4
  %61 = select i1 %58, i16 %3, i16 %60
  %62 = and i32 %56, 2
  %63 = icmp eq i32 %62, 0
  %64 = or i16 %59, 8
  %65 = select i1 %63, i16 %61, i16 %64
  %66 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 22
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, -3
  %69 = icmp ult i32 %68, 4
  %70 = and i16 %65, -5
  %71 = select i1 %69, i16 %65, i16 %70
  %72 = zext i16 %71 to i32
  %73 = and i32 %72, 16
  %74 = icmp eq i32 %73, 0
  %75 = and i32 %72, 4
  %76 = icmp ne i32 %75, 0
  br i1 %74, label %77, label %262

77:                                               ; preds = %54
  br i1 %76, label %105, label %78

78:                                               ; preds = %77
  %79 = icmp sgt i32 %51, 0
  br i1 %79, label %80, label %390

80:                                               ; preds = %78
  %81 = and i16 %71, -3
  br label %82

82:                                               ; preds = %96, %80
  %83 = phi i32 [ 0, %80 ], [ %103, %96 ]
  %84 = phi i32 [ %2, %80 ], [ %102, %96 ]
  %85 = phi i16* [ %1, %80 ], [ %101, %96 ]
  %86 = call i32 @ubidi_getVisualRun_69(%struct.UBiDi* nonnull %0, i32 %83, i32* nonnull %6, i32* nonnull %7) #3
  %87 = icmp eq i32 %86, 0
  %88 = load i32, i32* %6, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i16, i16* %18, i64 %89
  %91 = load i32, i32* %7, align 4
  br i1 %87, label %92, label %94

92:                                               ; preds = %82
  %93 = call fastcc i32 @_ZL14doWriteForwardPKDsiPDsitP10UErrorCode(i16* %90, i32 %91, i16* %85, i32 %84, i16 zeroext %81, i32* nonnull %4)
  br label %96

94:                                               ; preds = %82
  %95 = call fastcc i32 @_ZL14doWriteReversePKDsiPDsitP10UErrorCode(i16* %90, i32 %91, i16* %85, i32 %84, i16 zeroext %71, i32* nonnull %4)
  br label %96

96:                                               ; preds = %94, %92
  %97 = phi i32 [ %95, %94 ], [ %93, %92 ]
  store i32 %97, i32* %7, align 4
  %98 = icmp eq i16* %85, null
  %99 = sext i32 %97 to i64
  %100 = getelementptr inbounds i16, i16* %85, i64 %99
  %101 = select i1 %98, i16* null, i16* %100
  %102 = sub nsw i32 %84, %97
  %103 = add nuw nsw i32 %83, 1
  %104 = icmp eq i32 %103, %51
  br i1 %104, label %390, label %82

105:                                              ; preds = %77
  %106 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 19
  %107 = load i8*, i8** %106, align 8
  %108 = icmp sgt i32 %51, 0
  br i1 %108, label %109, label %390

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 40
  %111 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 21
  %112 = and i16 %71, -3
  %113 = zext i32 %51 to i64
  br label %114

114:                                              ; preds = %257, %109
  %115 = phi i64 [ 0, %109 ], [ %260, %257 ]
  %116 = phi i32 [ %2, %109 ], [ %259, %257 ]
  %117 = phi i16* [ %1, %109 ], [ %258, %257 ]
  %118 = trunc i64 %115 to i32
  %119 = call i32 @ubidi_getVisualRun_69(%struct.UBiDi* nonnull %0, i32 %118, i32* nonnull %6, i32* nonnull %7) #3
  %120 = load i32, i32* %6, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i16, i16* %18, i64 %121
  %123 = load %struct.Run*, %struct.Run** %110, align 8
  %124 = getelementptr inbounds %struct.Run, %struct.Run* %123, i64 %115, i32 2
  %125 = load i32, i32* %124, align 4
  %126 = icmp sgt i32 %125, 0
  %127 = select i1 %126, i32 %125, i32 0
  %128 = icmp eq i32 %119, 0
  %129 = load i8, i8* %111, align 8
  %130 = icmp ne i8 %129, 0
  br i1 %128, label %131, label %190

131:                                              ; preds = %114
  br i1 %130, label %132, label %138

132:                                              ; preds = %131
  %133 = getelementptr inbounds i8, i8* %107, i64 %121
  %134 = load i8, i8* %133, align 1
  %135 = icmp ne i8 %134, 0
  %136 = zext i1 %135 to i32
  %137 = or i32 %127, %136
  br label %138

138:                                              ; preds = %132, %131
  %139 = phi i32 [ %127, %131 ], [ %137, %132 ]
  %140 = and i32 %139, 1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %138
  %143 = and i32 %139, 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %153, label %145

145:                                              ; preds = %138, %142
  %146 = phi i16 [ 8207, %142 ], [ 8206, %138 ]
  %147 = icmp sgt i32 %116, 0
  br i1 %147, label %148, label %150

148:                                              ; preds = %145
  %149 = getelementptr inbounds i16, i16* %117, i64 1
  store i16 %146, i16* %117, align 2
  br label %150

150:                                              ; preds = %148, %145
  %151 = phi i16* [ %149, %148 ], [ %117, %145 ]
  %152 = add nsw i32 %116, -1
  br label %153

153:                                              ; preds = %142, %150
  %154 = phi i16* [ %151, %150 ], [ %117, %142 ]
  %155 = phi i32 [ %152, %150 ], [ %116, %142 ]
  %156 = load i32, i32* %7, align 4
  %157 = call fastcc i32 @_ZL14doWriteForwardPKDsiPDsitP10UErrorCode(i16* %122, i32 %156, i16* %154, i32 %155, i16 zeroext %112, i32* nonnull %4)
  store i32 %157, i32* %7, align 4
  %158 = icmp eq i16* %154, null
  %159 = sext i32 %157 to i64
  %160 = getelementptr inbounds i16, i16* %154, i64 %159
  %161 = select i1 %158, i16* null, i16* %160
  %162 = sub nsw i32 %155, %157
  %163 = load i8, i8* %111, align 8
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %175, label %165

165:                                              ; preds = %153
  %166 = load i32, i32* %6, align 4
  %167 = add i32 %157, -1
  %168 = add i32 %167, %166
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %107, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  %173 = or i32 %139, 2
  %174 = select i1 %172, i32 %139, i32 %173
  br label %175

175:                                              ; preds = %165, %153
  %176 = phi i32 [ %139, %153 ], [ %174, %165 ]
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %175
  %180 = and i32 %176, 8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %257, label %182

182:                                              ; preds = %175, %179
  %183 = phi i16 [ 8207, %179 ], [ 8206, %175 ]
  %184 = icmp sgt i32 %162, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %182
  %186 = getelementptr inbounds i16, i16* %161, i64 1
  store i16 %183, i16* %161, align 2
  br label %187

187:                                              ; preds = %185, %182
  %188 = phi i16* [ %186, %185 ], [ %161, %182 ]
  %189 = add nsw i32 %162, -1
  br label %257

190:                                              ; preds = %114
  br i1 %130, label %191, label %204

191:                                              ; preds = %190
  %192 = load i32, i32* %7, align 4
  %193 = add i32 %120, -1
  %194 = add i32 %193, %192
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %107, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = shl i64 1, %198
  %200 = and i64 %199, 8194
  %201 = icmp eq i64 %200, 0
  %202 = or i32 %127, 4
  %203 = select i1 %201, i32 %202, i32 %127
  br label %204

204:                                              ; preds = %191, %190
  %205 = phi i32 [ %127, %190 ], [ %203, %191 ]
  %206 = and i32 %205, 1
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %211

208:                                              ; preds = %204
  %209 = and i32 %205, 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %219, label %211

211:                                              ; preds = %204, %208
  %212 = phi i16 [ 8207, %208 ], [ 8206, %204 ]
  %213 = icmp sgt i32 %116, 0
  br i1 %213, label %214, label %216

214:                                              ; preds = %211
  %215 = getelementptr inbounds i16, i16* %117, i64 1
  store i16 %212, i16* %117, align 2
  br label %216

216:                                              ; preds = %214, %211
  %217 = phi i16* [ %215, %214 ], [ %117, %211 ]
  %218 = add nsw i32 %116, -1
  br label %219

219:                                              ; preds = %208, %216
  %220 = phi i16* [ %217, %216 ], [ %117, %208 ]
  %221 = phi i32 [ %218, %216 ], [ %116, %208 ]
  %222 = load i32, i32* %7, align 4
  %223 = call fastcc i32 @_ZL14doWriteReversePKDsiPDsitP10UErrorCode(i16* %122, i32 %222, i16* %220, i32 %221, i16 zeroext %71, i32* nonnull %4)
  store i32 %223, i32* %7, align 4
  %224 = icmp eq i16* %220, null
  %225 = sext i32 %223 to i64
  %226 = getelementptr inbounds i16, i16* %220, i64 %225
  %227 = select i1 %224, i16* null, i16* %226
  %228 = sub nsw i32 %221, %223
  %229 = load i8, i8* %111, align 8
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %242, label %231

231:                                              ; preds = %219
  %232 = load i32, i32* %6, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %107, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i64
  %237 = shl i64 1, %236
  %238 = and i64 %237, 8194
  %239 = icmp eq i64 %238, 0
  %240 = or i32 %205, 8
  %241 = select i1 %239, i32 %240, i32 %205
  br label %242

242:                                              ; preds = %231, %219
  %243 = phi i32 [ %205, %219 ], [ %241, %231 ]
  %244 = and i32 %243, 2
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %249

246:                                              ; preds = %242
  %247 = and i32 %243, 8
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %257, label %249

249:                                              ; preds = %242, %246
  %250 = phi i16 [ 8207, %246 ], [ 8206, %242 ]
  %251 = icmp sgt i32 %228, 0
  br i1 %251, label %252, label %254

252:                                              ; preds = %249
  %253 = getelementptr inbounds i16, i16* %227, i64 1
  store i16 %250, i16* %227, align 2
  br label %254

254:                                              ; preds = %252, %249
  %255 = phi i16* [ %253, %252 ], [ %227, %249 ]
  %256 = add nsw i32 %228, -1
  br label %257

257:                                              ; preds = %246, %179, %187, %254
  %258 = phi i16* [ %188, %187 ], [ %255, %254 ], [ %161, %179 ], [ %227, %246 ]
  %259 = phi i32 [ %189, %187 ], [ %256, %254 ], [ %162, %179 ], [ %228, %246 ]
  %260 = add nuw nsw i64 %115, 1
  %261 = icmp eq i64 %260, %113
  br i1 %261, label %390, label %114

262:                                              ; preds = %54
  br i1 %76, label %290, label %263

263:                                              ; preds = %262
  %264 = icmp sgt i32 %51, 0
  br i1 %264, label %265, label %390

265:                                              ; preds = %263
  %266 = and i16 %71, -3
  br label %267

267:                                              ; preds = %265, %282
  %268 = phi i32 [ %51, %265 ], [ %271, %282 ]
  %269 = phi i32 [ %2, %265 ], [ %288, %282 ]
  %270 = phi i16* [ %1, %265 ], [ %287, %282 ]
  %271 = add nsw i32 %268, -1
  %272 = call i32 @ubidi_getVisualRun_69(%struct.UBiDi* nonnull %0, i32 %271, i32* nonnull %6, i32* nonnull %7) #3
  %273 = icmp eq i32 %272, 0
  %274 = load i32, i32* %6, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i16, i16* %18, i64 %275
  %277 = load i32, i32* %7, align 4
  br i1 %273, label %278, label %280

278:                                              ; preds = %267
  %279 = call fastcc i32 @_ZL14doWriteReversePKDsiPDsitP10UErrorCode(i16* %276, i32 %277, i16* %270, i32 %269, i16 zeroext %266, i32* nonnull %4)
  br label %282

280:                                              ; preds = %267
  %281 = call fastcc i32 @_ZL14doWriteForwardPKDsiPDsitP10UErrorCode(i16* %276, i32 %277, i16* %270, i32 %269, i16 zeroext %71, i32* nonnull %4)
  br label %282

282:                                              ; preds = %280, %278
  %283 = phi i32 [ %281, %280 ], [ %279, %278 ]
  store i32 %283, i32* %7, align 4
  %284 = icmp eq i16* %270, null
  %285 = sext i32 %283 to i64
  %286 = getelementptr inbounds i16, i16* %270, i64 %285
  %287 = select i1 %284, i16* null, i16* %286
  %288 = sub nsw i32 %269, %283
  %289 = icmp sgt i32 %271, 0
  br i1 %289, label %267, label %390

290:                                              ; preds = %262
  %291 = getelementptr inbounds %struct.UBiDi, %struct.UBiDi* %0, i64 0, i32 19
  %292 = load i8*, i8** %291, align 8
  %293 = icmp sgt i32 %51, 0
  br i1 %293, label %294, label %390

294:                                              ; preds = %290
  %295 = and i16 %71, -3
  br label %296

296:                                              ; preds = %294, %386
  %297 = phi i32 [ %51, %294 ], [ %300, %386 ]
  %298 = phi i32 [ %2, %294 ], [ %388, %386 ]
  %299 = phi i16* [ %1, %294 ], [ %387, %386 ]
  %300 = add nsw i32 %297, -1
  %301 = call i32 @ubidi_getVisualRun_69(%struct.UBiDi* nonnull %0, i32 %300, i32* nonnull %6, i32* nonnull %7) #3
  %302 = load i32, i32* %6, align 4
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i16, i16* %18, i64 %303
  %305 = icmp eq i32 %301, 0
  br i1 %305, label %306, label %345

306:                                              ; preds = %296
  %307 = load i32, i32* %7, align 4
  %308 = add i32 %302, -1
  %309 = add i32 %308, %307
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %292, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = icmp eq i8 %312, 0
  br i1 %313, label %323, label %314

314:                                              ; preds = %306
  %315 = icmp sgt i32 %298, 0
  br i1 %315, label %316, label %319

316:                                              ; preds = %314
  %317 = getelementptr inbounds i16, i16* %299, i64 1
  store i16 8206, i16* %299, align 2
  %318 = load i32, i32* %7, align 4
  br label %319

319:                                              ; preds = %316, %314
  %320 = phi i32 [ %318, %316 ], [ %307, %314 ]
  %321 = phi i16* [ %317, %316 ], [ %299, %314 ]
  %322 = add nsw i32 %298, -1
  br label %323

323:                                              ; preds = %306, %319
  %324 = phi i32 [ %320, %319 ], [ %307, %306 ]
  %325 = phi i16* [ %321, %319 ], [ %299, %306 ]
  %326 = phi i32 [ %322, %319 ], [ %298, %306 ]
  %327 = call fastcc i32 @_ZL14doWriteReversePKDsiPDsitP10UErrorCode(i16* %304, i32 %324, i16* %325, i32 %326, i16 zeroext %295, i32* nonnull %4)
  store i32 %327, i32* %7, align 4
  %328 = icmp eq i16* %325, null
  %329 = sext i32 %327 to i64
  %330 = getelementptr inbounds i16, i16* %325, i64 %329
  %331 = select i1 %328, i16* null, i16* %330
  %332 = sub nsw i32 %326, %327
  %333 = load i32, i32* %6, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %292, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = icmp eq i8 %336, 0
  br i1 %337, label %386, label %338

338:                                              ; preds = %323
  %339 = icmp sgt i32 %332, 0
  br i1 %339, label %340, label %342

340:                                              ; preds = %338
  %341 = getelementptr inbounds i16, i16* %331, i64 1
  store i16 8206, i16* %331, align 2
  br label %342

342:                                              ; preds = %340, %338
  %343 = phi i16* [ %341, %340 ], [ %331, %338 ]
  %344 = add nsw i32 %332, -1
  br label %386

345:                                              ; preds = %296
  %346 = getelementptr inbounds i8, i8* %292, i64 %303
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i64
  %349 = shl i64 1, %348
  %350 = and i64 %349, 8194
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %359

352:                                              ; preds = %345
  %353 = icmp sgt i32 %298, 0
  br i1 %353, label %354, label %356

354:                                              ; preds = %352
  %355 = getelementptr inbounds i16, i16* %299, i64 1
  store i16 8207, i16* %299, align 2
  br label %356

356:                                              ; preds = %354, %352
  %357 = phi i16* [ %355, %354 ], [ %299, %352 ]
  %358 = add nsw i32 %298, -1
  br label %359

359:                                              ; preds = %345, %356
  %360 = phi i16* [ %299, %345 ], [ %357, %356 ]
  %361 = phi i32 [ %298, %345 ], [ %358, %356 ]
  %362 = load i32, i32* %7, align 4
  %363 = call fastcc i32 @_ZL14doWriteForwardPKDsiPDsitP10UErrorCode(i16* %304, i32 %362, i16* %360, i32 %361, i16 zeroext %71, i32* nonnull %4)
  store i32 %363, i32* %7, align 4
  %364 = icmp eq i16* %360, null
  %365 = sext i32 %363 to i64
  %366 = getelementptr inbounds i16, i16* %360, i64 %365
  %367 = select i1 %364, i16* null, i16* %366
  %368 = sub nsw i32 %361, %363
  %369 = load i32, i32* %6, align 4
  %370 = add i32 %363, -1
  %371 = add i32 %370, %369
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds i8, i8* %292, i64 %372
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i64
  %376 = shl i64 1, %375
  %377 = and i64 %376, 8194
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %386

379:                                              ; preds = %359
  %380 = icmp sgt i32 %368, 0
  br i1 %380, label %381, label %383

381:                                              ; preds = %379
  %382 = getelementptr inbounds i16, i16* %367, i64 1
  store i16 8207, i16* %367, align 2
  br label %383

383:                                              ; preds = %381, %379
  %384 = phi i16* [ %382, %381 ], [ %367, %379 ]
  %385 = add nsw i32 %368, -1
  br label %386

386:                                              ; preds = %323, %359, %383, %342
  %387 = phi i16* [ %343, %342 ], [ %331, %323 ], [ %367, %359 ], [ %384, %383 ]
  %388 = phi i32 [ %344, %342 ], [ %332, %323 ], [ %368, %359 ], [ %385, %383 ]
  %389 = icmp sgt i32 %300, 0
  br i1 %389, label %296, label %390

390:                                              ; preds = %282, %386, %96, %257, %263, %290, %78, %105
  %391 = phi i32 [ %2, %105 ], [ %2, %78 ], [ %2, %290 ], [ %2, %263 ], [ %259, %257 ], [ %102, %96 ], [ %388, %386 ], [ %288, %282 ]
  %392 = sub nsw i32 %2, %391
  %393 = call i32 @u_terminateUChars_69(i16* %1, i32 %2, i32 %392, i32* nonnull %4) #3
  br label %394

394:                                              ; preds = %50, %5, %11, %390, %48, %45, %29
  %395 = phi i32 [ 0, %29 ], [ 0, %45 ], [ %49, %48 ], [ %393, %390 ], [ 0, %11 ], [ 0, %5 ], [ 0, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #3
  ret i32 %395
}

declare i32 @ubidi_countRuns_69(%struct.UBiDi*, i32*) local_unnamed_addr #2

declare i32 @ubidi_getVisualRun_69(%struct.UBiDi*, i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL14doWriteForwardPKDsiPDsitP10UErrorCode(i16* nocapture readonly, i32, i16* nocapture, i32, i16 zeroext, i32* nocapture) unnamed_addr #0 {
  %7 = and i16 %4, 10
  %8 = zext i16 %7 to i32
  switch i32 %8, label %283 [
    i32 0, label %9
    i32 2, label %126
    i32 8, label %178
  ]

9:                                                ; preds = %6
  %10 = icmp slt i32 %3, %1
  br i1 %10, label %116, label %11

11:                                               ; preds = %9
  %12 = icmp slt i32 %1, 1
  %13 = select i1 %12, i32 %1, i32 1
  %14 = sub i32 %1, %13
  %15 = zext i32 %14 to i64
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i64 %16, 16
  br i1 %17, label %18, label %22

18:                                               ; preds = %114, %22, %11
  %19 = phi i16* [ %2, %22 ], [ %2, %11 ], [ %35, %114 ]
  %20 = phi i16* [ %0, %22 ], [ %0, %11 ], [ %36, %114 ]
  %21 = phi i32 [ %1, %22 ], [ %1, %11 ], [ %38, %114 ]
  br label %117

22:                                               ; preds = %11
  %23 = icmp slt i32 %1, 1
  %24 = select i1 %23, i32 %1, i32 1
  %25 = sub i32 %1, %24
  %26 = zext i32 %25 to i64
  %27 = add nuw nsw i64 %26, 1
  %28 = getelementptr i16, i16* %2, i64 %27
  %29 = getelementptr i16, i16* %0, i64 %27
  %30 = icmp ugt i16* %29, %2
  %31 = icmp ugt i16* %28, %0
  %32 = and i1 %30, %31
  br i1 %32, label %18, label %33

33:                                               ; preds = %22
  %34 = and i64 %16, 8589934576
  %35 = getelementptr i16, i16* %2, i64 %34
  %36 = getelementptr i16, i16* %0, i64 %34
  %37 = trunc i64 %34 to i32
  %38 = sub i32 %1, %37
  %39 = add nsw i64 %34, -16
  %40 = lshr exact i64 %39, 4
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 3
  %43 = icmp ult i64 %39, 48
  br i1 %43, label %95, label %44

44:                                               ; preds = %33
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %92, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %93, %46 ]
  %49 = getelementptr i16, i16* %2, i64 %47
  %50 = getelementptr i16, i16* %0, i64 %47
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2, !alias.scope !32
  %53 = getelementptr i16, i16* %50, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !32
  %56 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %56, align 2, !alias.scope !35, !noalias !32
  %57 = getelementptr i16, i16* %49, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %58, align 2, !alias.scope !35, !noalias !32
  %59 = or i64 %47, 16
  %60 = getelementptr i16, i16* %2, i64 %59
  %61 = getelementptr i16, i16* %0, i64 %59
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !32
  %64 = getelementptr i16, i16* %61, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !32
  %67 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %67, align 2, !alias.scope !35, !noalias !32
  %68 = getelementptr i16, i16* %60, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %69, align 2, !alias.scope !35, !noalias !32
  %70 = or i64 %47, 32
  %71 = getelementptr i16, i16* %2, i64 %70
  %72 = getelementptr i16, i16* %0, i64 %70
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !32
  %75 = getelementptr i16, i16* %72, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !32
  %78 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %78, align 2, !alias.scope !35, !noalias !32
  %79 = getelementptr i16, i16* %71, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %80, align 2, !alias.scope !35, !noalias !32
  %81 = or i64 %47, 48
  %82 = getelementptr i16, i16* %2, i64 %81
  %83 = getelementptr i16, i16* %0, i64 %81
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !32
  %86 = getelementptr i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !32
  %89 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %89, align 2, !alias.scope !35, !noalias !32
  %90 = getelementptr i16, i16* %82, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2, !alias.scope !35, !noalias !32
  %92 = add i64 %47, 64
  %93 = add i64 %48, -4
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %46, !llvm.loop !37

95:                                               ; preds = %46, %33
  %96 = phi i64 [ 0, %33 ], [ %92, %46 ]
  %97 = icmp eq i64 %42, 0
  br i1 %97, label %114, label %98

98:                                               ; preds = %95, %98
  %99 = phi i64 [ %111, %98 ], [ %96, %95 ]
  %100 = phi i64 [ %112, %98 ], [ %42, %95 ]
  %101 = getelementptr i16, i16* %2, i64 %99
  %102 = getelementptr i16, i16* %0, i64 %99
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !32
  %105 = getelementptr i16, i16* %102, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !32
  %108 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !35, !noalias !32
  %109 = getelementptr i16, i16* %101, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !35, !noalias !32
  %111 = add i64 %99, 16
  %112 = add i64 %100, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %98, !llvm.loop !38

114:                                              ; preds = %98, %95
  %115 = icmp eq i64 %16, %34
  br i1 %115, label %425, label %18

116:                                              ; preds = %9
  store i32 15, i32* %5, align 4
  br label %425

117:                                              ; preds = %18, %117
  %118 = phi i16* [ %123, %117 ], [ %19, %18 ]
  %119 = phi i16* [ %121, %117 ], [ %20, %18 ]
  %120 = phi i32 [ %124, %117 ], [ %21, %18 ]
  %121 = getelementptr inbounds i16, i16* %119, i64 1
  %122 = load i16, i16* %119, align 2
  %123 = getelementptr inbounds i16, i16* %118, i64 1
  store i16 %122, i16* %118, align 2
  %124 = add nsw i32 %120, -1
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %117, label %425, !llvm.loop !39

126:                                              ; preds = %6
  %127 = icmp slt i32 %3, %1
  br i1 %127, label %128, label %129

128:                                              ; preds = %126
  store i32 15, i32* %5, align 4
  br label %425

129:                                              ; preds = %126, %170
  %130 = phi i32 [ %154, %170 ], [ 0, %126 ]
  %131 = phi i32 [ %174, %170 ], [ 0, %126 ]
  %132 = add nsw i32 %130, 1
  %133 = sext i32 %130 to i64
  %134 = getelementptr inbounds i16, i16* %0, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = and i32 %136, 64512
  %138 = icmp ne i32 %137, 55296
  %139 = icmp eq i32 %132, %1
  %140 = or i1 %139, %138
  br i1 %140, label %153, label %141

141:                                              ; preds = %129
  %142 = sext i32 %132 to i64
  %143 = getelementptr inbounds i16, i16* %0, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = and i32 %145, 64512
  %147 = icmp eq i32 %146, 56320
  br i1 %147, label %148, label %153

148:                                              ; preds = %141
  %149 = add nsw i32 %130, 2
  %150 = shl nuw nsw i32 %136, 10
  %151 = add nsw i32 %150, -56613888
  %152 = add nsw i32 %151, %145
  br label %153

153:                                              ; preds = %129, %141, %148
  %154 = phi i32 [ %132, %129 ], [ %149, %148 ], [ %132, %141 ]
  %155 = phi i32 [ %136, %129 ], [ %152, %148 ], [ %136, %141 ]
  %156 = tail call i32 @u_charMirror_69(i32 %155) #3
  %157 = icmp ult i32 %156, 65536
  br i1 %157, label %158, label %160

158:                                              ; preds = %153
  %159 = trunc i32 %156 to i16
  br label %170

160:                                              ; preds = %153
  %161 = lshr i32 %156, 10
  %162 = trunc i32 %161 to i16
  %163 = add i16 %162, -10304
  %164 = add nuw nsw i32 %131, 1
  %165 = zext i32 %131 to i64
  %166 = getelementptr inbounds i16, i16* %2, i64 %165
  store i16 %163, i16* %166, align 2
  %167 = trunc i32 %156 to i16
  %168 = and i16 %167, 1023
  %169 = or i16 %168, -9216
  br label %170

170:                                              ; preds = %158, %160
  %171 = phi i32 [ 1, %158 ], [ 2, %160 ]
  %172 = phi i32 [ %131, %158 ], [ %164, %160 ]
  %173 = phi i16 [ %159, %158 ], [ %169, %160 ]
  %174 = add nuw nsw i32 %131, %171
  %175 = sext i32 %172 to i64
  %176 = getelementptr inbounds i16, i16* %2, i64 %175
  store i16 %173, i16* %176, align 2
  %177 = icmp slt i32 %154, %1
  br i1 %177, label %129, label %425

178:                                              ; preds = %6, %275
  %179 = phi i16* [ %276, %275 ], [ %2, %6 ]
  %180 = phi i32 [ %278, %275 ], [ %1, %6 ]
  %181 = phi i16* [ %183, %275 ], [ %0, %6 ]
  %182 = phi i32 [ %277, %275 ], [ %3, %6 ]
  %183 = getelementptr inbounds i16, i16* %181, i64 1
  %184 = load i16, i16* %181, align 2
  %185 = and i16 %184, -4
  %186 = icmp eq i16 %185, 8204
  br i1 %186, label %275, label %187

187:                                              ; preds = %178
  switch i16 %184, label %188 [
    i16 8297, label %275
    i16 8296, label %275
    i16 8295, label %275
    i16 8294, label %275
    i16 8238, label %275
    i16 8237, label %275
    i16 8236, label %275
    i16 8235, label %275
    i16 8234, label %275
  ]

188:                                              ; preds = %187
  %189 = add nsw i32 %182, -1
  %190 = icmp slt i32 %182, 1
  br i1 %190, label %191, label %273

191:                                              ; preds = %188
  store i32 15, i32* %5, align 4
  %192 = add nsw i32 %180, -1
  %193 = icmp sgt i32 %192, 0
  br i1 %193, label %194, label %280

194:                                              ; preds = %191
  %195 = add i32 %180, -2
  %196 = zext i32 %195 to i64
  %197 = add nuw nsw i64 %196, 1
  %198 = icmp ult i64 %197, 8
  br i1 %198, label %249, label %199

199:                                              ; preds = %194
  %200 = and i64 %197, 8589934584
  %201 = trunc i64 %200 to i32
  %202 = sub i32 %192, %201
  %203 = getelementptr i16, i16* %183, i64 %200
  %204 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %189, i32 0
  br label %205

205:                                              ; preds = %205, %199
  %206 = phi i64 [ 0, %199 ], [ %239, %205 ]
  %207 = phi <4 x i32> [ %204, %199 ], [ %237, %205 ]
  %208 = phi <4 x i32> [ zeroinitializer, %199 ], [ %238, %205 ]
  %209 = getelementptr i16, i16* %183, i64 %206
  %210 = bitcast i16* %209 to <4 x i16>*
  %211 = load <4 x i16>, <4 x i16>* %210, align 2
  %212 = getelementptr i16, i16* %209, i64 4
  %213 = bitcast i16* %212 to <4 x i16>*
  %214 = load <4 x i16>, <4 x i16>* %213, align 2
  %215 = zext <4 x i16> %211 to <4 x i32>
  %216 = zext <4 x i16> %214 to <4 x i32>
  %217 = and <4 x i32> %215, <i32 65532, i32 65532, i32 65532, i32 65532>
  %218 = and <4 x i32> %216, <i32 65532, i32 65532, i32 65532, i32 65532>
  %219 = icmp eq <4 x i32> %217, <i32 8204, i32 8204, i32 8204, i32 8204>
  %220 = icmp eq <4 x i32> %218, <i32 8204, i32 8204, i32 8204, i32 8204>
  %221 = add nsw <4 x i32> %215, <i32 -8234, i32 -8234, i32 -8234, i32 -8234>
  %222 = add nsw <4 x i32> %216, <i32 -8234, i32 -8234, i32 -8234, i32 -8234>
  %223 = icmp ult <4 x i32> %221, <i32 5, i32 5, i32 5, i32 5>
  %224 = icmp ult <4 x i32> %222, <i32 5, i32 5, i32 5, i32 5>
  %225 = or <4 x i1> %219, %223
  %226 = or <4 x i1> %220, %224
  %227 = add nsw <4 x i32> %215, <i32 -8294, i32 -8294, i32 -8294, i32 -8294>
  %228 = add nsw <4 x i32> %216, <i32 -8294, i32 -8294, i32 -8294, i32 -8294>
  %229 = icmp ult <4 x i32> %227, <i32 4, i32 4, i32 4, i32 4>
  %230 = icmp ult <4 x i32> %228, <i32 4, i32 4, i32 4, i32 4>
  %231 = or <4 x i1> %229, %225
  %232 = or <4 x i1> %230, %226
  %233 = xor <4 x i1> %231, <i1 true, i1 true, i1 true, i1 true>
  %234 = xor <4 x i1> %232, <i1 true, i1 true, i1 true, i1 true>
  %235 = zext <4 x i1> %233 to <4 x i32>
  %236 = zext <4 x i1> %234 to <4 x i32>
  %237 = sub <4 x i32> %207, %235
  %238 = sub <4 x i32> %208, %236
  %239 = add i64 %206, 8
  %240 = icmp eq i64 %239, %200
  br i1 %240, label %241, label %205, !llvm.loop !40

241:                                              ; preds = %205
  %242 = add <4 x i32> %238, %237
  %243 = shufflevector <4 x i32> %242, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %244 = add <4 x i32> %242, %243
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %246 = add <4 x i32> %244, %245
  %247 = extractelement <4 x i32> %246, i32 0
  %248 = icmp eq i64 %197, %200
  br i1 %248, label %280, label %249

249:                                              ; preds = %241, %194
  %250 = phi i32 [ %192, %194 ], [ %202, %241 ]
  %251 = phi i32 [ %189, %194 ], [ %247, %241 ]
  %252 = phi i16* [ %183, %194 ], [ %203, %241 ]
  br label %253

253:                                              ; preds = %249, %253
  %254 = phi i32 [ %271, %253 ], [ %250, %249 ]
  %255 = phi i32 [ %270, %253 ], [ %251, %249 ]
  %256 = phi i16* [ %257, %253 ], [ %252, %249 ]
  %257 = getelementptr inbounds i16, i16* %256, i64 1
  %258 = load i16, i16* %256, align 2
  %259 = zext i16 %258 to i32
  %260 = and i32 %259, 65532
  %261 = icmp eq i32 %260, 8204
  %262 = add nsw i32 %259, -8234
  %263 = icmp ult i32 %262, 5
  %264 = or i1 %261, %263
  %265 = add nsw i32 %259, -8294
  %266 = icmp ult i32 %265, 4
  %267 = or i1 %266, %264
  %268 = xor i1 %267, true
  %269 = zext i1 %268 to i32
  %270 = sub i32 %255, %269
  %271 = add nsw i32 %254, -1
  %272 = icmp sgt i32 %271, 0
  br i1 %272, label %253, label %280, !llvm.loop !41

273:                                              ; preds = %188
  %274 = getelementptr inbounds i16, i16* %179, i64 1
  store i16 %184, i16* %179, align 2
  br label %275

275:                                              ; preds = %187, %187, %187, %187, %187, %187, %187, %187, %187, %178, %273
  %276 = phi i16* [ %179, %187 ], [ %274, %273 ], [ %179, %178 ], [ %179, %187 ], [ %179, %187 ], [ %179, %187 ], [ %179, %187 ], [ %179, %187 ], [ %179, %187 ], [ %179, %187 ], [ %179, %187 ]
  %277 = phi i32 [ %182, %187 ], [ %189, %273 ], [ %182, %178 ], [ %182, %187 ], [ %182, %187 ], [ %182, %187 ], [ %182, %187 ], [ %182, %187 ], [ %182, %187 ], [ %182, %187 ], [ %182, %187 ]
  %278 = add nsw i32 %180, -1
  %279 = icmp sgt i32 %278, 0
  br i1 %279, label %178, label %280

280:                                              ; preds = %275, %253, %241, %191
  %281 = phi i32 [ %189, %191 ], [ %247, %241 ], [ %270, %253 ], [ %277, %275 ]
  %282 = sub nsw i32 %3, %281
  br label %425

283:                                              ; preds = %6, %421
  %284 = phi i32 [ %309, %421 ], [ %1, %6 ]
  %285 = phi i16* [ %308, %421 ], [ %0, %6 ]
  %286 = phi i32 [ %422, %421 ], [ %3, %6 ]
  %287 = phi i32 [ %423, %421 ], [ 0, %6 ]
  %288 = load i16, i16* %285, align 2
  %289 = zext i16 %288 to i32
  %290 = and i32 %289, 64512
  %291 = icmp ne i32 %290, 55296
  %292 = icmp eq i32 %284, 1
  %293 = or i1 %292, %291
  br i1 %293, label %304, label %294

294:                                              ; preds = %283
  %295 = getelementptr inbounds i16, i16* %285, i64 1
  %296 = load i16, i16* %295, align 2
  %297 = zext i16 %296 to i32
  %298 = and i32 %297, 64512
  %299 = icmp eq i32 %298, 56320
  br i1 %299, label %300, label %304

300:                                              ; preds = %294
  %301 = shl nuw nsw i32 %289, 10
  %302 = add nsw i32 %301, -56613888
  %303 = add nsw i32 %302, %297
  br label %304

304:                                              ; preds = %283, %294, %300
  %305 = phi i32 [ 1, %283 ], [ 2, %300 ], [ 1, %294 ]
  %306 = phi i32 [ %289, %283 ], [ %303, %300 ], [ %289, %294 ]
  %307 = zext i32 %305 to i64
  %308 = getelementptr inbounds i16, i16* %285, i64 %307
  %309 = sub nsw i32 %284, %305
  %310 = and i32 %306, -4
  %311 = icmp eq i32 %310, 8204
  br i1 %311, label %421, label %312

312:                                              ; preds = %304
  switch i32 %306, label %313 [
    i32 8297, label %421
    i32 8296, label %421
    i32 8295, label %421
    i32 8294, label %421
    i32 8238, label %421
    i32 8237, label %421
    i32 8236, label %421
    i32 8235, label %421
    i32 8234, label %421
  ]

313:                                              ; preds = %312
  %314 = sub nsw i32 %286, %305
  %315 = icmp slt i32 %314, 0
  br i1 %315, label %316, label %400

316:                                              ; preds = %313
  store i32 15, i32* %5, align 4
  %317 = icmp sgt i32 %309, 0
  br i1 %317, label %318, label %397

318:                                              ; preds = %316
  %319 = add nsw i32 %309, -1
  %320 = zext i32 %319 to i64
  %321 = add nuw nsw i64 %320, 1
  %322 = icmp ult i64 %321, 8
  br i1 %322, label %373, label %323

323:                                              ; preds = %318
  %324 = and i64 %321, 8589934584
  %325 = getelementptr i16, i16* %308, i64 %324
  %326 = trunc i64 %324 to i32
  %327 = sub i32 %309, %326
  %328 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %314, i32 0
  br label %329

329:                                              ; preds = %329, %323
  %330 = phi i64 [ 0, %323 ], [ %363, %329 ]
  %331 = phi <4 x i32> [ %328, %323 ], [ %361, %329 ]
  %332 = phi <4 x i32> [ zeroinitializer, %323 ], [ %362, %329 ]
  %333 = getelementptr i16, i16* %308, i64 %330
  %334 = bitcast i16* %333 to <4 x i16>*
  %335 = load <4 x i16>, <4 x i16>* %334, align 2
  %336 = getelementptr i16, i16* %333, i64 4
  %337 = bitcast i16* %336 to <4 x i16>*
  %338 = load <4 x i16>, <4 x i16>* %337, align 2
  %339 = zext <4 x i16> %335 to <4 x i32>
  %340 = zext <4 x i16> %338 to <4 x i32>
  %341 = and <4 x i32> %339, <i32 65532, i32 65532, i32 65532, i32 65532>
  %342 = and <4 x i32> %340, <i32 65532, i32 65532, i32 65532, i32 65532>
  %343 = icmp eq <4 x i32> %341, <i32 8204, i32 8204, i32 8204, i32 8204>
  %344 = icmp eq <4 x i32> %342, <i32 8204, i32 8204, i32 8204, i32 8204>
  %345 = add nsw <4 x i32> %339, <i32 -8234, i32 -8234, i32 -8234, i32 -8234>
  %346 = add nsw <4 x i32> %340, <i32 -8234, i32 -8234, i32 -8234, i32 -8234>
  %347 = icmp ult <4 x i32> %345, <i32 5, i32 5, i32 5, i32 5>
  %348 = icmp ult <4 x i32> %346, <i32 5, i32 5, i32 5, i32 5>
  %349 = or <4 x i1> %343, %347
  %350 = or <4 x i1> %344, %348
  %351 = add nsw <4 x i32> %339, <i32 -8294, i32 -8294, i32 -8294, i32 -8294>
  %352 = add nsw <4 x i32> %340, <i32 -8294, i32 -8294, i32 -8294, i32 -8294>
  %353 = icmp ult <4 x i32> %351, <i32 4, i32 4, i32 4, i32 4>
  %354 = icmp ult <4 x i32> %352, <i32 4, i32 4, i32 4, i32 4>
  %355 = or <4 x i1> %353, %349
  %356 = or <4 x i1> %354, %350
  %357 = xor <4 x i1> %355, <i1 true, i1 true, i1 true, i1 true>
  %358 = xor <4 x i1> %356, <i1 true, i1 true, i1 true, i1 true>
  %359 = zext <4 x i1> %357 to <4 x i32>
  %360 = zext <4 x i1> %358 to <4 x i32>
  %361 = sub <4 x i32> %331, %359
  %362 = sub <4 x i32> %332, %360
  %363 = add i64 %330, 8
  %364 = icmp eq i64 %363, %324
  br i1 %364, label %365, label %329, !llvm.loop !42

365:                                              ; preds = %329
  %366 = add <4 x i32> %362, %361
  %367 = shufflevector <4 x i32> %366, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %368 = add <4 x i32> %366, %367
  %369 = shufflevector <4 x i32> %368, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %370 = add <4 x i32> %368, %369
  %371 = extractelement <4 x i32> %370, i32 0
  %372 = icmp eq i64 %321, %324
  br i1 %372, label %397, label %373

373:                                              ; preds = %365, %318
  %374 = phi i32 [ %314, %318 ], [ %371, %365 ]
  %375 = phi i16* [ %308, %318 ], [ %325, %365 ]
  %376 = phi i32 [ %309, %318 ], [ %327, %365 ]
  br label %377

377:                                              ; preds = %373, %377
  %378 = phi i32 [ %394, %377 ], [ %374, %373 ]
  %379 = phi i16* [ %381, %377 ], [ %375, %373 ]
  %380 = phi i32 [ %395, %377 ], [ %376, %373 ]
  %381 = getelementptr inbounds i16, i16* %379, i64 1
  %382 = load i16, i16* %379, align 2
  %383 = zext i16 %382 to i32
  %384 = and i32 %383, 65532
  %385 = icmp eq i32 %384, 8204
  %386 = add nsw i32 %383, -8234
  %387 = icmp ult i32 %386, 5
  %388 = or i1 %385, %387
  %389 = add nsw i32 %383, -8294
  %390 = icmp ult i32 %389, 4
  %391 = or i1 %390, %388
  %392 = xor i1 %391, true
  %393 = zext i1 %392 to i32
  %394 = sub i32 %378, %393
  %395 = add nsw i32 %380, -1
  %396 = icmp sgt i32 %395, 0
  br i1 %396, label %377, label %397, !llvm.loop !43

397:                                              ; preds = %377, %365, %316
  %398 = phi i32 [ %314, %316 ], [ %371, %365 ], [ %394, %377 ]
  %399 = sub nsw i32 %3, %398
  br label %425

400:                                              ; preds = %313
  %401 = tail call i32 @u_charMirror_69(i32 %306) #3
  %402 = icmp ult i32 %401, 65536
  br i1 %402, label %403, label %408

403:                                              ; preds = %400
  %404 = trunc i32 %401 to i16
  %405 = add nsw i32 %287, 1
  %406 = sext i32 %287 to i64
  %407 = getelementptr inbounds i16, i16* %2, i64 %406
  store i16 %404, i16* %407, align 2
  br label %421

408:                                              ; preds = %400
  %409 = lshr i32 %401, 10
  %410 = trunc i32 %409 to i16
  %411 = add i16 %410, -10304
  %412 = add nsw i32 %287, 1
  %413 = sext i32 %287 to i64
  %414 = getelementptr inbounds i16, i16* %2, i64 %413
  store i16 %411, i16* %414, align 2
  %415 = trunc i32 %401 to i16
  %416 = and i16 %415, 1023
  %417 = or i16 %416, -9216
  %418 = add nsw i32 %287, 2
  %419 = sext i32 %412 to i64
  %420 = getelementptr inbounds i16, i16* %2, i64 %419
  store i16 %417, i16* %420, align 2
  br label %421

421:                                              ; preds = %312, %312, %312, %312, %312, %312, %312, %312, %312, %304, %408, %403
  %422 = phi i32 [ %286, %312 ], [ %314, %403 ], [ %314, %408 ], [ %286, %304 ], [ %286, %312 ], [ %286, %312 ], [ %286, %312 ], [ %286, %312 ], [ %286, %312 ], [ %286, %312 ], [ %286, %312 ], [ %286, %312 ]
  %423 = phi i32 [ %287, %312 ], [ %405, %403 ], [ %418, %408 ], [ %287, %304 ], [ %287, %312 ], [ %287, %312 ], [ %287, %312 ], [ %287, %312 ], [ %287, %312 ], [ %287, %312 ], [ %287, %312 ], [ %287, %312 ]
  %424 = icmp sgt i32 %309, 0
  br i1 %424, label %283, label %425

425:                                              ; preds = %170, %117, %421, %114, %397, %128, %116, %280
  %426 = phi i32 [ %282, %280 ], [ %1, %116 ], [ %1, %128 ], [ %399, %397 ], [ %1, %114 ], [ %423, %421 ], [ %1, %117 ], [ %1, %170 ]
  ret i32 %426
}

declare signext i8 @u_charType_69(i32) local_unnamed_addr #2

declare i32 @u_charMirror_69(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !22, !8}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !10}
!31 = distinct !{!31, !8}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !10}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !22, !8}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !22, !8}
