; ModuleID = '../../third_party/blink/common/messaging/string_message_codec.cc'
source_filename = "../../third_party/blink/common/messaging/string_message_codec.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::basic_string.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.9 }
%union.anon.9 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.10 }
%struct.anon.10 = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19EncodeStringMessageERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::vector"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string.6", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #7
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext -1, %"class.std::__1::vector"* %0)
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext 10, %"class.std::__1::vector"* %0) #7
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %15 = zext i8 %8 to i64
  %16 = select i1 %9, i16* %11, i16* %14
  %17 = bitcast i16* %16 to i8*
  %18 = select i1 %9, i64 %13, i64 %15
  %19 = getelementptr inbounds i16, i16* %16, i64 %18
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %109, label %21

21:                                               ; preds = %2
  %22 = shl nsw i64 %18, 1
  %23 = add i64 %22, -2
  %24 = lshr exact i64 %23, 1
  %25 = add nuw i64 %24, 1
  %26 = icmp ult i64 %25, 8
  br i1 %26, label %94, label %27

27:                                               ; preds = %21
  %28 = and i64 %25, -8
  %29 = getelementptr i16, i16* %16, i64 %28
  %30 = add i64 %28, -8
  %31 = lshr exact i64 %30, 3
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %66, label %35

35:                                               ; preds = %27
  %36 = sub nuw nsw i64 %32, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %63, %37 ]
  %39 = phi <4 x i32> [ zeroinitializer, %35 ], [ %61, %37 ]
  %40 = phi <4 x i32> [ zeroinitializer, %35 ], [ %62, %37 ]
  %41 = phi i64 [ %36, %35 ], [ %64, %37 ]
  %42 = getelementptr i16, i16* %16, i64 %38
  %43 = bitcast i16* %42 to <4 x i16>*
  %44 = load <4 x i16>, <4 x i16>* %43, align 2
  %45 = getelementptr i16, i16* %42, i64 4
  %46 = bitcast i16* %45 to <4 x i16>*
  %47 = load <4 x i16>, <4 x i16>* %46, align 2
  %48 = zext <4 x i16> %44 to <4 x i32>
  %49 = zext <4 x i16> %47 to <4 x i32>
  %50 = or <4 x i32> %39, %48
  %51 = or <4 x i32> %40, %49
  %52 = or i64 %38, 8
  %53 = getelementptr i16, i16* %16, i64 %52
  %54 = bitcast i16* %53 to <4 x i16>*
  %55 = load <4 x i16>, <4 x i16>* %54, align 2
  %56 = getelementptr i16, i16* %53, i64 4
  %57 = bitcast i16* %56 to <4 x i16>*
  %58 = load <4 x i16>, <4 x i16>* %57, align 2
  %59 = zext <4 x i16> %55 to <4 x i32>
  %60 = zext <4 x i16> %58 to <4 x i32>
  %61 = or <4 x i32> %50, %59
  %62 = or <4 x i32> %51, %60
  %63 = add i64 %38, 16
  %64 = add i64 %41, -2
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %37, !llvm.loop !2

66:                                               ; preds = %37, %27
  %67 = phi <4 x i32> [ undef, %27 ], [ %61, %37 ]
  %68 = phi <4 x i32> [ undef, %27 ], [ %62, %37 ]
  %69 = phi i64 [ 0, %27 ], [ %63, %37 ]
  %70 = phi <4 x i32> [ zeroinitializer, %27 ], [ %61, %37 ]
  %71 = phi <4 x i32> [ zeroinitializer, %27 ], [ %62, %37 ]
  %72 = icmp eq i64 %33, 0
  br i1 %72, label %84, label %73

73:                                               ; preds = %66
  %74 = getelementptr i16, i16* %16, i64 %69
  %75 = getelementptr i16, i16* %74, i64 4
  %76 = bitcast i16* %75 to <4 x i16>*
  %77 = load <4 x i16>, <4 x i16>* %76, align 2
  %78 = zext <4 x i16> %77 to <4 x i32>
  %79 = or <4 x i32> %71, %78
  %80 = bitcast i16* %74 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = or <4 x i32> %70, %82
  br label %84

84:                                               ; preds = %66, %73
  %85 = phi <4 x i32> [ %67, %66 ], [ %83, %73 ]
  %86 = phi <4 x i32> [ %68, %66 ], [ %79, %73 ]
  %87 = or <4 x i32> %86, %85
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %89 = or <4 x i32> %87, %88
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %91 = or <4 x i32> %89, %90
  %92 = extractelement <4 x i32> %91, i32 0
  %93 = icmp eq i64 %25, %28
  br i1 %93, label %105, label %94

94:                                               ; preds = %84, %21
  %95 = phi i32 [ 0, %21 ], [ %92, %84 ]
  %96 = phi i16* [ %16, %21 ], [ %29, %84 ]
  br label %97

97:                                               ; preds = %94, %97
  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]
  %99 = phi i16* [ %103, %97 ], [ %96, %94 ]
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = or i32 %98, %101
  %103 = getelementptr inbounds i16, i16* %99, i64 1
  %104 = icmp eq i16* %103, %19
  br i1 %104, label %105, label %97, !llvm.loop !4

105:                                              ; preds = %97, %84
  %106 = phi i32 [ %92, %84 ], [ %102, %97 ]
  %107 = and i32 %106, 65280
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %309

109:                                              ; preds = %2, %105
  %110 = bitcast %"class.std::__1::basic_string.6"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %110) #7
  %111 = getelementptr inbounds %"class.std::__1::basic_string.6", %"class.std::__1::basic_string.6"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = getelementptr inbounds %"class.std::__1::basic_string.6", %"class.std::__1::basic_string.6"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %113 = getelementptr inbounds %"class.std::__1::basic_string.6", %"class.std::__1::basic_string.6"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %114 = shl nuw i64 %18, 1
  %115 = ashr exact i64 %114, 1
  %116 = icmp ugt i64 %115, -17
  %117 = bitcast %"class.std::__1::basic_string.6"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 -86, i64 24, i1 false)
  br i1 %116, label %118, label %120

118:                                              ; preds = %109
  %119 = bitcast %"class.std::__1::basic_string.6"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %119) #8
  unreachable

120:                                              ; preds = %109
  %121 = icmp ult i64 %115, 23
  br i1 %121, label %122, label %126

122:                                              ; preds = %120
  %123 = trunc i64 %115 to i8
  %124 = bitcast %"class.std::__1::basic_string.6"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %125 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %124, i64 0, i32 1, i32 0
  store i8 %123, i8* %125, align 1
  br label %131

126:                                              ; preds = %120
  %127 = add nsw i64 %115, 16
  %128 = and i64 %127, -16
  %129 = tail call i8* @_Znwm(i64 %128) #9
  store i8* %129, i8** %111, align 8
  %130 = or i64 %128, -9223372036854775808
  store i64 %130, i64* %113, align 8
  store i64 %115, i64* %112, align 8
  br label %131

131:                                              ; preds = %126, %122
  %132 = phi i8* [ %110, %122 ], [ %129, %126 ]
  %133 = icmp eq i64 %18, 0
  br i1 %133, label %274, label %134

134:                                              ; preds = %131
  %135 = shl nsw i64 %18, 1
  %136 = add i64 %135, -2
  %137 = lshr exact i64 %136, 1
  %138 = add nuw i64 %137, 1
  %139 = icmp ult i64 %138, 16
  br i1 %139, label %211, label %140

140:                                              ; preds = %134
  %141 = shl nsw i64 %18, 1
  %142 = add i64 %141, -2
  %143 = lshr exact i64 %142, 1
  %144 = add nuw i64 %143, 1
  %145 = getelementptr i8, i8* %132, i64 %144
  %146 = getelementptr i16, i16* %16, i64 %144
  %147 = bitcast i16* %146 to i8*
  %148 = icmp ult i8* %132, %147
  %149 = icmp ugt i8* %145, %17
  %150 = and i1 %148, %149
  br i1 %150, label %211, label %151

151:                                              ; preds = %140
  %152 = and i64 %138, -16
  %153 = getelementptr i8, i8* %132, i64 %152
  %154 = getelementptr i16, i16* %16, i64 %152
  %155 = add i64 %152, -16
  %156 = lshr exact i64 %155, 4
  %157 = add nuw nsw i64 %156, 1
  %158 = and i64 %157, 1
  %159 = icmp eq i64 %155, 0
  br i1 %159, label %193, label %160

160:                                              ; preds = %151
  %161 = sub nuw nsw i64 %157, %158
  br label %162

162:                                              ; preds = %162, %160
  %163 = phi i64 [ 0, %160 ], [ %190, %162 ]
  %164 = phi i64 [ %161, %160 ], [ %191, %162 ]
  %165 = getelementptr i8, i8* %132, i64 %163
  %166 = getelementptr i16, i16* %16, i64 %163
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2, !alias.scope !6
  %169 = getelementptr i16, i16* %166, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2, !alias.scope !6
  %172 = trunc <8 x i16> %168 to <8 x i8>
  %173 = trunc <8 x i16> %171 to <8 x i8>
  %174 = bitcast i8* %165 to <8 x i8>*
  store <8 x i8> %172, <8 x i8>* %174, align 1, !alias.scope !9, !noalias !6
  %175 = getelementptr i8, i8* %165, i64 8
  %176 = bitcast i8* %175 to <8 x i8>*
  store <8 x i8> %173, <8 x i8>* %176, align 1, !alias.scope !9, !noalias !6
  %177 = or i64 %163, 16
  %178 = getelementptr i8, i8* %132, i64 %177
  %179 = getelementptr i16, i16* %16, i64 %177
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2, !alias.scope !6
  %182 = getelementptr i16, i16* %179, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2, !alias.scope !6
  %185 = trunc <8 x i16> %181 to <8 x i8>
  %186 = trunc <8 x i16> %184 to <8 x i8>
  %187 = bitcast i8* %178 to <8 x i8>*
  store <8 x i8> %185, <8 x i8>* %187, align 1, !alias.scope !9, !noalias !6
  %188 = getelementptr i8, i8* %178, i64 8
  %189 = bitcast i8* %188 to <8 x i8>*
  store <8 x i8> %186, <8 x i8>* %189, align 1, !alias.scope !9, !noalias !6
  %190 = add i64 %163, 32
  %191 = add i64 %164, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %162, !llvm.loop !11

193:                                              ; preds = %162, %151
  %194 = phi i64 [ 0, %151 ], [ %190, %162 ]
  %195 = icmp eq i64 %158, 0
  br i1 %195, label %209, label %196

196:                                              ; preds = %193
  %197 = getelementptr i8, i8* %132, i64 %194
  %198 = getelementptr i16, i16* %16, i64 %194
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2, !alias.scope !6
  %201 = getelementptr i16, i16* %198, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !6
  %204 = trunc <8 x i16> %200 to <8 x i8>
  %205 = trunc <8 x i16> %203 to <8 x i8>
  %206 = bitcast i8* %197 to <8 x i8>*
  store <8 x i8> %204, <8 x i8>* %206, align 1, !alias.scope !9, !noalias !6
  %207 = getelementptr i8, i8* %197, i64 8
  %208 = bitcast i8* %207 to <8 x i8>*
  store <8 x i8> %205, <8 x i8>* %208, align 1, !alias.scope !9, !noalias !6
  br label %209

209:                                              ; preds = %193, %196
  %210 = icmp eq i64 %138, %152
  br i1 %210, label %274, label %211

211:                                              ; preds = %209, %140, %134
  %212 = phi i8* [ %132, %140 ], [ %132, %134 ], [ %153, %209 ]
  %213 = phi i16* [ %16, %140 ], [ %16, %134 ], [ %154, %209 ]
  %214 = ptrtoint i16* %213 to i64
  %215 = add i64 %18, -1
  %216 = getelementptr i16, i16* %16, i64 %215
  %217 = ptrtoint i16* %216 to i64
  %218 = sub i64 %217, %214
  %219 = lshr i64 %218, 1
  %220 = add nuw i64 %219, 1
  %221 = and i64 %220, 7
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %233, label %223

223:                                              ; preds = %211, %223
  %224 = phi i8* [ %230, %223 ], [ %212, %211 ]
  %225 = phi i16* [ %229, %223 ], [ %213, %211 ]
  %226 = phi i64 [ %231, %223 ], [ %221, %211 ]
  %227 = load i16, i16* %225, align 2
  %228 = trunc i16 %227 to i8
  store i8 %228, i8* %224, align 1
  %229 = getelementptr inbounds i16, i16* %225, i64 1
  %230 = getelementptr inbounds i8, i8* %224, i64 1
  %231 = add i64 %226, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %223, !llvm.loop !12

233:                                              ; preds = %223, %211
  %234 = phi i8* [ undef, %211 ], [ %230, %223 ]
  %235 = phi i8* [ %212, %211 ], [ %230, %223 ]
  %236 = phi i16* [ %213, %211 ], [ %229, %223 ]
  %237 = icmp ult i64 %218, 14
  br i1 %237, label %274, label %238

238:                                              ; preds = %233, %238
  %239 = phi i8* [ %272, %238 ], [ %235, %233 ]
  %240 = phi i16* [ %271, %238 ], [ %236, %233 ]
  %241 = load i16, i16* %240, align 2
  %242 = trunc i16 %241 to i8
  store i8 %242, i8* %239, align 1
  %243 = getelementptr inbounds i16, i16* %240, i64 1
  %244 = getelementptr inbounds i8, i8* %239, i64 1
  %245 = load i16, i16* %243, align 2
  %246 = trunc i16 %245 to i8
  store i8 %246, i8* %244, align 1
  %247 = getelementptr inbounds i16, i16* %240, i64 2
  %248 = getelementptr inbounds i8, i8* %239, i64 2
  %249 = load i16, i16* %247, align 2
  %250 = trunc i16 %249 to i8
  store i8 %250, i8* %248, align 1
  %251 = getelementptr inbounds i16, i16* %240, i64 3
  %252 = getelementptr inbounds i8, i8* %239, i64 3
  %253 = load i16, i16* %251, align 2
  %254 = trunc i16 %253 to i8
  store i8 %254, i8* %252, align 1
  %255 = getelementptr inbounds i16, i16* %240, i64 4
  %256 = getelementptr inbounds i8, i8* %239, i64 4
  %257 = load i16, i16* %255, align 2
  %258 = trunc i16 %257 to i8
  store i8 %258, i8* %256, align 1
  %259 = getelementptr inbounds i16, i16* %240, i64 5
  %260 = getelementptr inbounds i8, i8* %239, i64 5
  %261 = load i16, i16* %259, align 2
  %262 = trunc i16 %261 to i8
  store i8 %262, i8* %260, align 1
  %263 = getelementptr inbounds i16, i16* %240, i64 6
  %264 = getelementptr inbounds i8, i8* %239, i64 6
  %265 = load i16, i16* %263, align 2
  %266 = trunc i16 %265 to i8
  store i8 %266, i8* %264, align 1
  %267 = getelementptr inbounds i16, i16* %240, i64 7
  %268 = getelementptr inbounds i8, i8* %239, i64 7
  %269 = load i16, i16* %267, align 2
  %270 = trunc i16 %269 to i8
  store i8 %270, i8* %268, align 1
  %271 = getelementptr inbounds i16, i16* %240, i64 8
  %272 = getelementptr inbounds i8, i8* %239, i64 8
  %273 = icmp eq i16* %271, %19
  br i1 %273, label %274, label %238, !llvm.loop !14

274:                                              ; preds = %233, %238, %209, %131
  %275 = phi i8* [ %132, %131 ], [ %153, %209 ], [ %234, %233 ], [ %272, %238 ]
  store i8 0, i8* %275, align 1
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext 34, %"class.std::__1::vector"* %0)
  %276 = bitcast %"class.std::__1::basic_string.6"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %277 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %276, i64 0, i32 1, i32 0
  %278 = load i8, i8* %277, align 1
  %279 = icmp slt i8 %278, 0
  %280 = load i64, i64* %112, align 8
  %281 = zext i8 %278 to i64
  %282 = select i1 %279, i64 %280, i64 %281
  %283 = trunc i64 %282 to i32
  %284 = trunc i64 %282 to i8
  %285 = lshr i32 %283, 7
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %296, label %287

287:                                              ; preds = %274, %287
  %288 = phi i32 [ %292, %287 ], [ %285, %274 ]
  %289 = phi i8 [ %291, %287 ], [ %284, %274 ]
  %290 = or i8 %289, -128
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext %290, %"class.std::__1::vector"* %0) #7
  %291 = trunc i32 %288 to i8
  %292 = lshr i32 %288, 7
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %287

294:                                              ; preds = %287
  %295 = trunc i32 %288 to i8
  br label %296

296:                                              ; preds = %294, %274
  %297 = phi i8 [ %284, %274 ], [ %295, %294 ]
  %298 = and i8 %297, 127
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext %298, %"class.std::__1::vector"* %0) #7
  %299 = load i8*, i8** %111, align 8
  %300 = select i1 %279, i8* %299, i8* %110
  %301 = load i8*, i8** %4, align 8
  %302 = getelementptr inbounds i8, i8* %300, i64 %282
  %303 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %0, i8* %301, i8* %300, i8* %302) #7
  %304 = load i8, i8* %277, align 1
  %305 = icmp slt i8 %304, 0
  br i1 %305, label %306, label %308

306:                                              ; preds = %296
  %307 = load i8*, i8** %111, align 8
  call void @_ZdlPv(i8* %307) #9
  br label %308

308:                                              ; preds = %296, %306
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %110) #7
  br label %356

309:                                              ; preds = %105
  %310 = shl i64 %18, 1
  %311 = bitcast i8** %4 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = bitcast %"class.std::__1::vector"* %0 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = trunc i64 %310 to i32
  br label %316

316:                                              ; preds = %316, %309
  %317 = phi i32 [ %315, %309 ], [ %320, %316 ]
  %318 = phi i64 [ 0, %309 ], [ %319, %316 ]
  %319 = add nuw nsw i64 %318, 1
  %320 = lshr i32 %317, 7
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %316

322:                                              ; preds = %316
  %323 = add i64 %312, 1
  %324 = sub i64 %323, %314
  %325 = add i64 %324, %319
  %326 = and i64 %325, 1
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %329, label %328

328:                                              ; preds = %322
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext 0, %"class.std::__1::vector"* %0)
  br label %329

329:                                              ; preds = %322, %328
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext 99, %"class.std::__1::vector"* %0)
  %330 = trunc i64 %310 to i8
  %331 = lshr i64 %18, 6
  %332 = trunc i64 %331 to i32
  %333 = and i32 %332, 33554431
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %344, label %335

335:                                              ; preds = %329, %335
  %336 = phi i32 [ %340, %335 ], [ %333, %329 ]
  %337 = phi i8 [ %339, %335 ], [ %330, %329 ]
  %338 = or i8 %337, -128
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext %338, %"class.std::__1::vector"* %0) #7
  %339 = trunc i32 %336 to i8
  %340 = lshr i32 %336, 7
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %335

342:                                              ; preds = %335
  %343 = trunc i32 %336 to i8
  br label %344

344:                                              ; preds = %342, %329
  %345 = phi i8 [ %330, %329 ], [ %343, %342 ]
  %346 = and i8 %345, 127
  tail call fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext %346, %"class.std::__1::vector"* %0) #7
  %347 = load i8, i8* %7, align 1
  %348 = icmp slt i8 %347, 0
  %349 = load i16*, i16** %10, align 8
  %350 = select i1 %348, i16* %349, i16* %14
  %351 = bitcast i16* %350 to i8*
  %352 = load i8*, i8** %4, align 8
  %353 = getelementptr i16, i16* %350, i64 %18
  %354 = bitcast i16* %353 to i8*
  %355 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %0, i8* %352, i8* %351, i8* %354) #7
  br label %356

356:                                              ; preds = %308, %344
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_110WriteUint8EhPNSt3__16vectorIhNS1_9allocatorIhEEEE(i8 zeroext, %"class.std::__1::vector"*) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  %8 = ptrtoint i8* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i8 %0, i8* %4, align 1
  %10 = getelementptr inbounds i8, i8* %4, i64 1
  %11 = ptrtoint i8* %10 to i64
  %12 = bitcast i8** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %58

13:                                               ; preds = %2
  %14 = ptrtoint i8* %4 to i64
  %15 = bitcast i8** %3 to i64*
  %16 = bitcast %"class.std::__1::vector"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = add i64 %18, 1
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %22) #8
  unreachable

23:                                               ; preds = %13
  %24 = bitcast i8** %5 to i64*
  %25 = sub i64 %8, %17
  %26 = icmp ult i64 %25, 4611686018427387903
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = shl i64 %25, 1
  %29 = icmp ult i64 %28, %19
  %30 = select i1 %29, i64 %19, i64 %28
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %27, %23
  %33 = phi i64 [ %30, %27 ], [ 9223372036854775807, %23 ]
  %34 = tail call i8* @_Znwm(i64 %33) #9
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi i64 [ %33, %32 ], [ 0, %27 ]
  %37 = phi i8* [ %34, %32 ], [ null, %27 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 %18
  %39 = getelementptr inbounds i8, i8* %37, i64 %36
  %40 = ptrtoint i8* %39 to i64
  store i8 %0, i8* %38, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 1
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = load i64, i64* %15, align 8
  %46 = ptrtoint i8* %44 to i64
  %47 = sub i64 %45, %46
  %48 = sub i64 0, %47
  %49 = getelementptr inbounds i8, i8* %38, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = icmp sgt i64 %47, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %44, i64 %47, i1 false) #7
  %53 = load i8*, i8** %43, align 8
  br label %54

54:                                               ; preds = %52, %35
  %55 = phi i8* [ %44, %35 ], [ %53, %52 ]
  store i64 %50, i64* %16, align 8
  store i64 %42, i64* %15, align 8
  store i64 %40, i64* %24, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  tail call void @_ZdlPv(i8* nonnull %55) #9
  br label %58

58:                                               ; preds = %9, %54, %57
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19DecodeStringMessageEN4base4spanIKhLm18446744073709551615EEEPNSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEE(i64, i8*, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i8, i8* %1, i64 %0
  br label %5

5:                                                ; preds = %19, %3
  %6 = phi i8* [ %1, %3 ], [ %20, %19 ]
  %7 = icmp ult i8* %6, %4
  br i1 %7, label %8, label %837

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %6, i64 1
  %10 = load i8, i8* %6, align 1
  %11 = icmp eq i8 %10, -1
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %15
  %13 = phi i8* [ %16, %15 ], [ %9, %8 ]
  %14 = icmp ult i8* %13, %4
  br i1 %14, label %15, label %837

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  %17 = load i8, i8* %13, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %12, label %19

19:                                               ; preds = %15, %8
  %20 = phi i8* [ %9, %8 ], [ %16, %15 ]
  %21 = add i8 %10, 1
  %22 = icmp ult i8 %21, 2
  br i1 %22, label %5, label %23

23:                                               ; preds = %19
  switch i8 %10, label %837 [
    i8 34, label %24
    i8 99, label %172
  ]

24:                                               ; preds = %23, %29
  %25 = phi i8* [ %30, %29 ], [ %20, %23 ]
  %26 = phi i32 [ %35, %29 ], [ 0, %23 ]
  %27 = phi i32 [ %36, %29 ], [ 0, %23 ]
  %28 = icmp ult i8* %25, %4
  br i1 %28, label %29, label %837

29:                                               ; preds = %24
  %30 = getelementptr inbounds i8, i8* %25, i64 1
  %31 = load i8, i8* %25, align 1
  %32 = and i8 %31, 127
  %33 = zext i8 %32 to i32
  %34 = shl i32 %33, %27
  %35 = or i32 %34, %26
  %36 = add i32 %27, 7
  %37 = icmp slt i8 %31, 0
  br i1 %37, label %24, label %38

38:                                               ; preds = %29
  %39 = ptrtoint i8* %30 to i64
  %40 = zext i32 %35 to i64
  %41 = add nuw nsw i64 %40, 1
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %43, i64 0, i32 1, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = and i64 %49, 9223372036854775807
  %51 = add nsw i64 %50, -1
  br label %52

52:                                               ; preds = %47, %38
  %53 = phi i64 [ %51, %47 ], [ 10, %38 ]
  %54 = icmp ult i64 %53, %40
  br i1 %54, label %55, label %65

55:                                               ; preds = %52
  br i1 %46, label %56, label %59

56:                                               ; preds = %55
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  br label %61

59:                                               ; preds = %55
  %60 = zext i8 %45 to i64
  br label %61

61:                                               ; preds = %59, %56
  %62 = phi i64 [ %58, %56 ], [ %60, %59 ]
  %63 = sub nsw i64 %40, %53
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %2, i64 %53, i64 %63, i64 %62, i64 0, i64 %62, i64 0) #7
  %64 = load i8, i8* %44, align 1
  br label %65

65:                                               ; preds = %61, %52
  %66 = phi i8 [ %45, %52 ], [ %64, %61 ]
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i16*, i16** %69, align 8
  br label %73

71:                                               ; preds = %65
  %72 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  br label %73

73:                                               ; preds = %71, %68
  %74 = phi i16* [ %70, %68 ], [ %72, %71 ]
  %75 = bitcast i16* %74 to i8*
  %76 = icmp eq i32 %35, 0
  br i1 %76, label %164, label %77

77:                                               ; preds = %73
  %78 = add nuw nsw i64 %40, 1
  %79 = sub i64 %78, %39
  %80 = getelementptr i8, i8* %25, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = icmp ult i8* %80, inttoptr (i64 16 to i8*)
  br i1 %82, label %153, label %83

83:                                               ; preds = %77
  %84 = add nuw nsw i64 %40, 1
  %85 = sub i64 %84, %39
  %86 = getelementptr i8, i8* %25, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = getelementptr i16, i16* %74, i64 %87
  %89 = bitcast i16* %88 to i8*
  %90 = icmp ugt i8* %42, %75
  %91 = icmp ult i8* %30, %89
  %92 = and i1 %90, %91
  br i1 %92, label %153, label %93

93:                                               ; preds = %83
  %94 = and i64 %81, -16
  %95 = getelementptr i16, i16* %74, i64 %94
  %96 = getelementptr i8, i8* %30, i64 %94
  %97 = add i64 %94, -16
  %98 = lshr exact i64 %97, 4
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 1
  %101 = icmp eq i64 %97, 0
  br i1 %101, label %135, label %102

102:                                              ; preds = %93
  %103 = sub nuw nsw i64 %99, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %132, %104 ]
  %106 = phi i64 [ %103, %102 ], [ %133, %104 ]
  %107 = getelementptr i16, i16* %74, i64 %105
  %108 = getelementptr i8, i8* %30, i64 %105
  %109 = bitcast i8* %108 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1, !alias.scope !15
  %111 = getelementptr i8, i8* %108, i64 8
  %112 = bitcast i8* %111 to <8 x i8>*
  %113 = load <8 x i8>, <8 x i8>* %112, align 1, !alias.scope !15
  %114 = sext <8 x i8> %110 to <8 x i16>
  %115 = sext <8 x i8> %113 to <8 x i16>
  %116 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %116, align 2, !alias.scope !18, !noalias !15
  %117 = getelementptr i16, i16* %107, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !18, !noalias !15
  %119 = or i64 %105, 16
  %120 = getelementptr i16, i16* %74, i64 %119
  %121 = getelementptr i8, i8* %30, i64 %119
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !alias.scope !15
  %124 = getelementptr i8, i8* %121, i64 8
  %125 = bitcast i8* %124 to <8 x i8>*
  %126 = load <8 x i8>, <8 x i8>* %125, align 1, !alias.scope !15
  %127 = sext <8 x i8> %123 to <8 x i16>
  %128 = sext <8 x i8> %126 to <8 x i16>
  %129 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %129, align 2, !alias.scope !18, !noalias !15
  %130 = getelementptr i16, i16* %120, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %131, align 2, !alias.scope !18, !noalias !15
  %132 = add i64 %105, 32
  %133 = add i64 %106, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %104, !llvm.loop !20

135:                                              ; preds = %104, %93
  %136 = phi i64 [ 0, %93 ], [ %132, %104 ]
  %137 = icmp eq i64 %100, 0
  br i1 %137, label %151, label %138

138:                                              ; preds = %135
  %139 = getelementptr i16, i16* %74, i64 %136
  %140 = getelementptr i8, i8* %30, i64 %136
  %141 = bitcast i8* %140 to <8 x i8>*
  %142 = load <8 x i8>, <8 x i8>* %141, align 1, !alias.scope !15
  %143 = getelementptr i8, i8* %140, i64 8
  %144 = bitcast i8* %143 to <8 x i8>*
  %145 = load <8 x i8>, <8 x i8>* %144, align 1, !alias.scope !15
  %146 = sext <8 x i8> %142 to <8 x i16>
  %147 = sext <8 x i8> %145 to <8 x i16>
  %148 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 2, !alias.scope !18, !noalias !15
  %149 = getelementptr i16, i16* %139, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %150, align 2, !alias.scope !18, !noalias !15
  br label %151

151:                                              ; preds = %135, %138
  %152 = icmp eq i64 %94, %81
  br i1 %152, label %164, label %153

153:                                              ; preds = %151, %83, %77
  %154 = phi i16* [ %74, %83 ], [ %74, %77 ], [ %95, %151 ]
  %155 = phi i8* [ %30, %83 ], [ %30, %77 ], [ %96, %151 ]
  br label %156

156:                                              ; preds = %153, %156
  %157 = phi i16* [ %162, %156 ], [ %154, %153 ]
  %158 = phi i8* [ %161, %156 ], [ %155, %153 ]
  %159 = load i8, i8* %158, align 1
  %160 = sext i8 %159 to i16
  store i16 %160, i16* %157, align 2
  %161 = getelementptr inbounds i8, i8* %158, i64 1
  %162 = getelementptr inbounds i16, i16* %157, i64 1
  %163 = icmp eq i8* %161, %42
  br i1 %163, label %164, label %156, !llvm.loop !21

164:                                              ; preds = %156, %151, %73
  %165 = phi i16* [ %74, %73 ], [ %95, %151 ], [ %162, %156 ]
  store i16 0, i16* %165, align 2
  %166 = load i8, i8* %44, align 1
  %167 = icmp slt i8 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  %169 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %40, i64* %169, align 8
  br label %837

170:                                              ; preds = %164
  %171 = trunc i32 %35 to i8
  store i8 %171, i8* %44, align 1
  br label %837

172:                                              ; preds = %23, %177
  %173 = phi i8* [ %178, %177 ], [ %20, %23 ]
  %174 = phi i32 [ %183, %177 ], [ 0, %23 ]
  %175 = phi i32 [ %184, %177 ], [ 0, %23 ]
  %176 = icmp ult i8* %173, %4
  br i1 %176, label %177, label %837

177:                                              ; preds = %172
  %178 = getelementptr inbounds i8, i8* %173, i64 1
  %179 = load i8, i8* %173, align 1
  %180 = and i8 %179, 127
  %181 = zext i8 %180 to i32
  %182 = shl i32 %181, %175
  %183 = or i32 %182, %174
  %184 = add i32 %175, 7
  %185 = icmp slt i8 %179, 0
  br i1 %185, label %172, label %186

186:                                              ; preds = %177
  %187 = bitcast i8* %178 to i16*
  %188 = lshr i32 %183, 1
  %189 = zext i32 %188 to i64
  %190 = tail call i1 @llvm.is.constant.i64(i64 %189) #7
  %191 = icmp ult i32 %183, 22
  %192 = and i1 %191, %190
  %193 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %194 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %193, i64 0, i32 1, i32 1
  %195 = load i8, i8* %194, align 1
  %196 = icmp slt i8 %195, 0
  br i1 %192, label %197, label %506

197:                                              ; preds = %186
  br i1 %196, label %198, label %202

198:                                              ; preds = %197
  %199 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %189, i64* %199, align 8
  %200 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load i16*, i16** %200, align 8
  br label %205

202:                                              ; preds = %197
  %203 = trunc i32 %188 to i8
  store i8 %203, i8* %194, align 1
  %204 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  br label %205

205:                                              ; preds = %202, %198
  %206 = phi i16* [ %201, %198 ], [ %204, %202 ]
  %207 = bitcast i16* %206 to i8*
  %208 = icmp eq i32 %188, 0
  br i1 %208, label %504, label %209

209:                                              ; preds = %205
  %210 = icmp ult i16* %206, %187
  br i1 %210, label %211, label %357

211:                                              ; preds = %209
  %212 = icmp ult i32 %183, 32
  br i1 %212, label %304, label %213

213:                                              ; preds = %211
  %214 = getelementptr i16, i16* %206, i64 %189
  %215 = bitcast i16* %214 to i8*
  %216 = and i32 %183, -2
  %217 = zext i32 %216 to i64
  %218 = getelementptr i8, i8* %178, i64 %217
  %219 = icmp ugt i8* %218, %207
  %220 = icmp ult i8* %178, %215
  %221 = and i1 %219, %220
  br i1 %221, label %304, label %222

222:                                              ; preds = %213
  %223 = and i64 %189, 2147483632
  %224 = sub nsw i64 %189, %223
  %225 = getelementptr i16, i16* %187, i64 %223
  %226 = getelementptr i16, i16* %206, i64 %223
  %227 = add nsw i64 %223, -16
  %228 = lshr exact i64 %227, 4
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 3
  %231 = icmp ult i64 %227, 48
  br i1 %231, label %283, label %232

232:                                              ; preds = %222
  %233 = sub nsw i64 %229, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %280, %234 ]
  %236 = phi i64 [ %233, %232 ], [ %281, %234 ]
  %237 = getelementptr i16, i16* %187, i64 %235
  %238 = getelementptr i16, i16* %206, i64 %235
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !22
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !22
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !25, !noalias !22
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !25, !noalias !22
  %247 = or i64 %235, 16
  %248 = getelementptr i16, i16* %187, i64 %247
  %249 = getelementptr i16, i16* %206, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !22
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !22
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !25, !noalias !22
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !25, !noalias !22
  %258 = or i64 %235, 32
  %259 = getelementptr i16, i16* %187, i64 %258
  %260 = getelementptr i16, i16* %206, i64 %258
  %261 = bitcast i16* %259 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2, !alias.scope !22
  %263 = getelementptr i16, i16* %259, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  %265 = load <8 x i16>, <8 x i16>* %264, align 2, !alias.scope !22
  %266 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %266, align 2, !alias.scope !25, !noalias !22
  %267 = getelementptr i16, i16* %260, i64 8
  %268 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %268, align 2, !alias.scope !25, !noalias !22
  %269 = or i64 %235, 48
  %270 = getelementptr i16, i16* %187, i64 %269
  %271 = getelementptr i16, i16* %206, i64 %269
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !22
  %274 = getelementptr i16, i16* %270, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !22
  %277 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %277, align 2, !alias.scope !25, !noalias !22
  %278 = getelementptr i16, i16* %271, i64 8
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %279, align 2, !alias.scope !25, !noalias !22
  %280 = add i64 %235, 64
  %281 = add i64 %236, -4
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %234, !llvm.loop !27

283:                                              ; preds = %234, %222
  %284 = phi i64 [ 0, %222 ], [ %280, %234 ]
  %285 = icmp eq i64 %230, 0
  br i1 %285, label %302, label %286

286:                                              ; preds = %283, %286
  %287 = phi i64 [ %299, %286 ], [ %284, %283 ]
  %288 = phi i64 [ %300, %286 ], [ %230, %283 ]
  %289 = getelementptr i16, i16* %187, i64 %287
  %290 = getelementptr i16, i16* %206, i64 %287
  %291 = bitcast i16* %289 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !22
  %293 = getelementptr i16, i16* %289, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 2, !alias.scope !22
  %296 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %296, align 2, !alias.scope !25, !noalias !22
  %297 = getelementptr i16, i16* %290, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %298, align 2, !alias.scope !25, !noalias !22
  %299 = add i64 %287, 16
  %300 = add i64 %288, -1
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %286, !llvm.loop !28

302:                                              ; preds = %286, %283
  %303 = icmp eq i64 %223, %189
  br i1 %303, label %504, label %304

304:                                              ; preds = %302, %213, %211
  %305 = phi i64 [ %189, %213 ], [ %189, %211 ], [ %224, %302 ]
  %306 = phi i16* [ %187, %213 ], [ %187, %211 ], [ %225, %302 ]
  %307 = phi i16* [ %206, %213 ], [ %206, %211 ], [ %226, %302 ]
  %308 = add nsw i64 %305, -1
  %309 = and i64 %305, 7
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %322, label %311

311:                                              ; preds = %304, %311
  %312 = phi i64 [ %317, %311 ], [ %305, %304 ]
  %313 = phi i16* [ %319, %311 ], [ %306, %304 ]
  %314 = phi i16* [ %318, %311 ], [ %307, %304 ]
  %315 = phi i64 [ %320, %311 ], [ %309, %304 ]
  %316 = load i16, i16* %313, align 2
  store i16 %316, i16* %314, align 2
  %317 = add nsw i64 %312, -1
  %318 = getelementptr inbounds i16, i16* %314, i64 1
  %319 = getelementptr inbounds i16, i16* %313, i64 1
  %320 = add i64 %315, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %311, !llvm.loop !29

322:                                              ; preds = %311, %304
  %323 = phi i64 [ %305, %304 ], [ %317, %311 ]
  %324 = phi i16* [ %306, %304 ], [ %319, %311 ]
  %325 = phi i16* [ %307, %304 ], [ %318, %311 ]
  %326 = icmp ult i64 %308, 7
  br i1 %326, label %504, label %327

327:                                              ; preds = %322, %327
  %328 = phi i64 [ %353, %327 ], [ %323, %322 ]
  %329 = phi i16* [ %355, %327 ], [ %324, %322 ]
  %330 = phi i16* [ %354, %327 ], [ %325, %322 ]
  %331 = load i16, i16* %329, align 2
  store i16 %331, i16* %330, align 2
  %332 = getelementptr inbounds i16, i16* %330, i64 1
  %333 = getelementptr inbounds i16, i16* %329, i64 1
  %334 = load i16, i16* %333, align 2
  store i16 %334, i16* %332, align 2
  %335 = getelementptr inbounds i16, i16* %330, i64 2
  %336 = getelementptr inbounds i16, i16* %329, i64 2
  %337 = load i16, i16* %336, align 2
  store i16 %337, i16* %335, align 2
  %338 = getelementptr inbounds i16, i16* %330, i64 3
  %339 = getelementptr inbounds i16, i16* %329, i64 3
  %340 = load i16, i16* %339, align 2
  store i16 %340, i16* %338, align 2
  %341 = getelementptr inbounds i16, i16* %330, i64 4
  %342 = getelementptr inbounds i16, i16* %329, i64 4
  %343 = load i16, i16* %342, align 2
  store i16 %343, i16* %341, align 2
  %344 = getelementptr inbounds i16, i16* %330, i64 5
  %345 = getelementptr inbounds i16, i16* %329, i64 5
  %346 = load i16, i16* %345, align 2
  store i16 %346, i16* %344, align 2
  %347 = getelementptr inbounds i16, i16* %330, i64 6
  %348 = getelementptr inbounds i16, i16* %329, i64 6
  %349 = load i16, i16* %348, align 2
  store i16 %349, i16* %347, align 2
  %350 = getelementptr inbounds i16, i16* %330, i64 7
  %351 = getelementptr inbounds i16, i16* %329, i64 7
  %352 = load i16, i16* %351, align 2
  store i16 %352, i16* %350, align 2
  %353 = add nsw i64 %328, -8
  %354 = getelementptr inbounds i16, i16* %330, i64 8
  %355 = getelementptr inbounds i16, i16* %329, i64 8
  %356 = icmp eq i64 %353, 0
  br i1 %356, label %504, label %327, !llvm.loop !30

357:                                              ; preds = %209
  %358 = icmp ugt i16* %206, %187
  br i1 %358, label %359, label %504

359:                                              ; preds = %357
  %360 = getelementptr inbounds i16, i16* %187, i64 %189
  %361 = getelementptr inbounds i16, i16* %206, i64 %189
  %362 = icmp ult i32 %183, 32
  br i1 %362, label %451, label %363

363:                                              ; preds = %359
  %364 = bitcast i16* %361 to i8*
  %365 = and i32 %183, -2
  %366 = zext i32 %365 to i64
  %367 = getelementptr i8, i8* %178, i64 %366
  %368 = icmp ugt i8* %367, %207
  %369 = icmp ult i8* %178, %364
  %370 = and i1 %368, %369
  br i1 %370, label %451, label %371

371:                                              ; preds = %363
  %372 = and i64 %189, 2147483632
  %373 = sub nsw i64 %189, %372
  %374 = sub nsw i64 0, %372
  %375 = getelementptr i16, i16* %360, i64 %374
  %376 = sub nsw i64 0, %372
  %377 = getelementptr i16, i16* %361, i64 %376
  %378 = add nsw i64 %372, -16
  %379 = lshr exact i64 %378, 4
  %380 = add nuw nsw i64 %379, 1
  %381 = and i64 %380, 1
  %382 = icmp eq i64 %378, 0
  br i1 %382, label %429, label %383

383:                                              ; preds = %371
  %384 = sub nuw nsw i64 %380, %381
  %385 = getelementptr i16, i16* %360, i64 -1
  %386 = getelementptr i16, i16* %361, i64 -1
  %387 = getelementptr i16, i16* %360, i64 -1
  %388 = getelementptr i16, i16* %361, i64 -1
  br label %389

389:                                              ; preds = %389, %383
  %390 = phi i64 [ 0, %383 ], [ %424, %389 ]
  %391 = phi i64 [ %384, %383 ], [ %425, %389 ]
  %392 = sub i64 0, %390
  %393 = sub i64 0, %390
  %394 = getelementptr inbounds i16, i16* %386, i64 %393
  %395 = getelementptr inbounds i16, i16* %385, i64 %392
  %396 = getelementptr inbounds i16, i16* %395, i64 -7
  %397 = bitcast i16* %396 to <8 x i16>*
  %398 = load <8 x i16>, <8 x i16>* %397, align 2, !alias.scope !31
  %399 = getelementptr inbounds i16, i16* %395, i64 -8
  %400 = getelementptr inbounds i16, i16* %399, i64 -7
  %401 = bitcast i16* %400 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 2, !alias.scope !31
  %403 = getelementptr inbounds i16, i16* %394, i64 -7
  %404 = bitcast i16* %403 to <8 x i16>*
  store <8 x i16> %398, <8 x i16>* %404, align 2, !alias.scope !34, !noalias !31
  %405 = getelementptr inbounds i16, i16* %394, i64 -8
  %406 = getelementptr inbounds i16, i16* %405, i64 -7
  %407 = bitcast i16* %406 to <8 x i16>*
  store <8 x i16> %402, <8 x i16>* %407, align 2, !alias.scope !34, !noalias !31
  %408 = sub nuw nsw i64 -16, %390
  %409 = sub nuw nsw i64 -16, %390
  %410 = getelementptr inbounds i16, i16* %388, i64 %409
  %411 = getelementptr inbounds i16, i16* %387, i64 %408
  %412 = getelementptr inbounds i16, i16* %411, i64 -7
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 2, !alias.scope !31
  %415 = getelementptr inbounds i16, i16* %411, i64 -8
  %416 = getelementptr inbounds i16, i16* %415, i64 -7
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !31
  %419 = getelementptr inbounds i16, i16* %410, i64 -7
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %414, <8 x i16>* %420, align 2, !alias.scope !34, !noalias !31
  %421 = getelementptr inbounds i16, i16* %410, i64 -8
  %422 = getelementptr inbounds i16, i16* %421, i64 -7
  %423 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %423, align 2, !alias.scope !34, !noalias !31
  %424 = add i64 %390, 32
  %425 = add i64 %391, -2
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %427, label %389, !llvm.loop !36

427:                                              ; preds = %389
  %428 = sub nuw nsw i64 -32, %390
  br label %429

429:                                              ; preds = %427, %371
  %430 = phi i64 [ 0, %371 ], [ %428, %427 ]
  %431 = icmp eq i64 %381, 0
  br i1 %431, label %449, label %432

432:                                              ; preds = %429
  %433 = getelementptr i16, i16* %360, i64 -1
  %434 = getelementptr i16, i16* %361, i64 -1
  %435 = getelementptr inbounds i16, i16* %434, i64 %430
  %436 = getelementptr inbounds i16, i16* %433, i64 %430
  %437 = getelementptr inbounds i16, i16* %436, i64 -7
  %438 = bitcast i16* %437 to <8 x i16>*
  %439 = load <8 x i16>, <8 x i16>* %438, align 2, !alias.scope !31
  %440 = getelementptr inbounds i16, i16* %436, i64 -8
  %441 = getelementptr inbounds i16, i16* %440, i64 -7
  %442 = bitcast i16* %441 to <8 x i16>*
  %443 = load <8 x i16>, <8 x i16>* %442, align 2, !alias.scope !31
  %444 = getelementptr inbounds i16, i16* %435, i64 -7
  %445 = bitcast i16* %444 to <8 x i16>*
  store <8 x i16> %439, <8 x i16>* %445, align 2, !alias.scope !34, !noalias !31
  %446 = getelementptr inbounds i16, i16* %435, i64 -8
  %447 = getelementptr inbounds i16, i16* %446, i64 -7
  %448 = bitcast i16* %447 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %448, align 2, !alias.scope !34, !noalias !31
  br label %449

449:                                              ; preds = %429, %432
  %450 = icmp eq i64 %372, %189
  br i1 %450, label %504, label %451

451:                                              ; preds = %449, %363, %359
  %452 = phi i64 [ %189, %363 ], [ %189, %359 ], [ %373, %449 ]
  %453 = phi i16* [ %360, %363 ], [ %360, %359 ], [ %375, %449 ]
  %454 = phi i16* [ %361, %363 ], [ %361, %359 ], [ %377, %449 ]
  %455 = add nsw i64 %452, -1
  %456 = and i64 %452, 7
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %469, label %458

458:                                              ; preds = %451, %458
  %459 = phi i64 [ %466, %458 ], [ %452, %451 ]
  %460 = phi i16* [ %464, %458 ], [ %453, %451 ]
  %461 = phi i16* [ %463, %458 ], [ %454, %451 ]
  %462 = phi i64 [ %467, %458 ], [ %456, %451 ]
  %463 = getelementptr inbounds i16, i16* %461, i64 -1
  %464 = getelementptr inbounds i16, i16* %460, i64 -1
  %465 = load i16, i16* %464, align 2
  store i16 %465, i16* %463, align 2
  %466 = add nsw i64 %459, -1
  %467 = add i64 %462, -1
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %469, label %458, !llvm.loop !37

469:                                              ; preds = %458, %451
  %470 = phi i64 [ %452, %451 ], [ %466, %458 ]
  %471 = phi i16* [ %453, %451 ], [ %464, %458 ]
  %472 = phi i16* [ %454, %451 ], [ %463, %458 ]
  %473 = icmp ult i64 %455, 7
  br i1 %473, label %504, label %474

474:                                              ; preds = %469, %474
  %475 = phi i64 [ %502, %474 ], [ %470, %469 ]
  %476 = phi i16* [ %500, %474 ], [ %471, %469 ]
  %477 = phi i16* [ %499, %474 ], [ %472, %469 ]
  %478 = getelementptr inbounds i16, i16* %477, i64 -1
  %479 = getelementptr inbounds i16, i16* %476, i64 -1
  %480 = load i16, i16* %479, align 2
  store i16 %480, i16* %478, align 2
  %481 = getelementptr inbounds i16, i16* %477, i64 -2
  %482 = getelementptr inbounds i16, i16* %476, i64 -2
  %483 = load i16, i16* %482, align 2
  store i16 %483, i16* %481, align 2
  %484 = getelementptr inbounds i16, i16* %477, i64 -3
  %485 = getelementptr inbounds i16, i16* %476, i64 -3
  %486 = load i16, i16* %485, align 2
  store i16 %486, i16* %484, align 2
  %487 = getelementptr inbounds i16, i16* %477, i64 -4
  %488 = getelementptr inbounds i16, i16* %476, i64 -4
  %489 = load i16, i16* %488, align 2
  store i16 %489, i16* %487, align 2
  %490 = getelementptr inbounds i16, i16* %477, i64 -5
  %491 = getelementptr inbounds i16, i16* %476, i64 -5
  %492 = load i16, i16* %491, align 2
  store i16 %492, i16* %490, align 2
  %493 = getelementptr inbounds i16, i16* %477, i64 -6
  %494 = getelementptr inbounds i16, i16* %476, i64 -6
  %495 = load i16, i16* %494, align 2
  store i16 %495, i16* %493, align 2
  %496 = getelementptr inbounds i16, i16* %477, i64 -7
  %497 = getelementptr inbounds i16, i16* %476, i64 -7
  %498 = load i16, i16* %497, align 2
  store i16 %498, i16* %496, align 2
  %499 = getelementptr inbounds i16, i16* %477, i64 -8
  %500 = getelementptr inbounds i16, i16* %476, i64 -8
  %501 = load i16, i16* %500, align 2
  store i16 %501, i16* %499, align 2
  %502 = add nsw i64 %475, -8
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %474, !llvm.loop !38

504:                                              ; preds = %469, %474, %322, %327, %449, %302, %357, %205
  %505 = getelementptr inbounds i16, i16* %206, i64 %189
  store i16 0, i16* %505, align 2
  br label %837

506:                                              ; preds = %186
  br i1 %196, label %507, label %512

507:                                              ; preds = %506
  %508 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %509 = load i64, i64* %508, align 8
  %510 = and i64 %509, 9223372036854775807
  %511 = add nsw i64 %510, -1
  br label %512

512:                                              ; preds = %507, %506
  %513 = phi i64 [ %511, %507 ], [ 10, %506 ]
  %514 = icmp ult i64 %513, %189
  br i1 %514, label %828, label %515

515:                                              ; preds = %512
  br i1 %196, label %516, label %519

516:                                              ; preds = %515
  %517 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %518 = load i16*, i16** %517, align 8
  br label %521

519:                                              ; preds = %515
  %520 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  br label %521

521:                                              ; preds = %519, %516
  %522 = phi i16* [ %518, %516 ], [ %520, %519 ]
  %523 = bitcast i16* %522 to i8*
  %524 = icmp eq i32 %188, 0
  br i1 %524, label %820, label %525

525:                                              ; preds = %521
  %526 = icmp ult i16* %522, %187
  br i1 %526, label %527, label %673

527:                                              ; preds = %525
  %528 = icmp ult i32 %183, 32
  br i1 %528, label %620, label %529

529:                                              ; preds = %527
  %530 = getelementptr i16, i16* %522, i64 %189
  %531 = bitcast i16* %530 to i8*
  %532 = and i32 %183, -2
  %533 = zext i32 %532 to i64
  %534 = getelementptr i8, i8* %178, i64 %533
  %535 = icmp ugt i8* %534, %523
  %536 = icmp ult i8* %178, %531
  %537 = and i1 %535, %536
  br i1 %537, label %620, label %538

538:                                              ; preds = %529
  %539 = and i64 %189, 2147483632
  %540 = sub nsw i64 %189, %539
  %541 = getelementptr i16, i16* %187, i64 %539
  %542 = getelementptr i16, i16* %522, i64 %539
  %543 = add nsw i64 %539, -16
  %544 = lshr exact i64 %543, 4
  %545 = add nuw nsw i64 %544, 1
  %546 = and i64 %545, 3
  %547 = icmp ult i64 %543, 48
  br i1 %547, label %599, label %548

548:                                              ; preds = %538
  %549 = sub nsw i64 %545, %546
  br label %550

550:                                              ; preds = %550, %548
  %551 = phi i64 [ 0, %548 ], [ %596, %550 ]
  %552 = phi i64 [ %549, %548 ], [ %597, %550 ]
  %553 = getelementptr i16, i16* %187, i64 %551
  %554 = getelementptr i16, i16* %522, i64 %551
  %555 = bitcast i16* %553 to <8 x i16>*
  %556 = load <8 x i16>, <8 x i16>* %555, align 2, !alias.scope !39
  %557 = getelementptr i16, i16* %553, i64 8
  %558 = bitcast i16* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 2, !alias.scope !39
  %560 = bitcast i16* %554 to <8 x i16>*
  store <8 x i16> %556, <8 x i16>* %560, align 2, !alias.scope !42, !noalias !39
  %561 = getelementptr i16, i16* %554, i64 8
  %562 = bitcast i16* %561 to <8 x i16>*
  store <8 x i16> %559, <8 x i16>* %562, align 2, !alias.scope !42, !noalias !39
  %563 = or i64 %551, 16
  %564 = getelementptr i16, i16* %187, i64 %563
  %565 = getelementptr i16, i16* %522, i64 %563
  %566 = bitcast i16* %564 to <8 x i16>*
  %567 = load <8 x i16>, <8 x i16>* %566, align 2, !alias.scope !39
  %568 = getelementptr i16, i16* %564, i64 8
  %569 = bitcast i16* %568 to <8 x i16>*
  %570 = load <8 x i16>, <8 x i16>* %569, align 2, !alias.scope !39
  %571 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> %567, <8 x i16>* %571, align 2, !alias.scope !42, !noalias !39
  %572 = getelementptr i16, i16* %565, i64 8
  %573 = bitcast i16* %572 to <8 x i16>*
  store <8 x i16> %570, <8 x i16>* %573, align 2, !alias.scope !42, !noalias !39
  %574 = or i64 %551, 32
  %575 = getelementptr i16, i16* %187, i64 %574
  %576 = getelementptr i16, i16* %522, i64 %574
  %577 = bitcast i16* %575 to <8 x i16>*
  %578 = load <8 x i16>, <8 x i16>* %577, align 2, !alias.scope !39
  %579 = getelementptr i16, i16* %575, i64 8
  %580 = bitcast i16* %579 to <8 x i16>*
  %581 = load <8 x i16>, <8 x i16>* %580, align 2, !alias.scope !39
  %582 = bitcast i16* %576 to <8 x i16>*
  store <8 x i16> %578, <8 x i16>* %582, align 2, !alias.scope !42, !noalias !39
  %583 = getelementptr i16, i16* %576, i64 8
  %584 = bitcast i16* %583 to <8 x i16>*
  store <8 x i16> %581, <8 x i16>* %584, align 2, !alias.scope !42, !noalias !39
  %585 = or i64 %551, 48
  %586 = getelementptr i16, i16* %187, i64 %585
  %587 = getelementptr i16, i16* %522, i64 %585
  %588 = bitcast i16* %586 to <8 x i16>*
  %589 = load <8 x i16>, <8 x i16>* %588, align 2, !alias.scope !39
  %590 = getelementptr i16, i16* %586, i64 8
  %591 = bitcast i16* %590 to <8 x i16>*
  %592 = load <8 x i16>, <8 x i16>* %591, align 2, !alias.scope !39
  %593 = bitcast i16* %587 to <8 x i16>*
  store <8 x i16> %589, <8 x i16>* %593, align 2, !alias.scope !42, !noalias !39
  %594 = getelementptr i16, i16* %587, i64 8
  %595 = bitcast i16* %594 to <8 x i16>*
  store <8 x i16> %592, <8 x i16>* %595, align 2, !alias.scope !42, !noalias !39
  %596 = add i64 %551, 64
  %597 = add i64 %552, -4
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %599, label %550, !llvm.loop !44

599:                                              ; preds = %550, %538
  %600 = phi i64 [ 0, %538 ], [ %596, %550 ]
  %601 = icmp eq i64 %546, 0
  br i1 %601, label %618, label %602

602:                                              ; preds = %599, %602
  %603 = phi i64 [ %615, %602 ], [ %600, %599 ]
  %604 = phi i64 [ %616, %602 ], [ %546, %599 ]
  %605 = getelementptr i16, i16* %187, i64 %603
  %606 = getelementptr i16, i16* %522, i64 %603
  %607 = bitcast i16* %605 to <8 x i16>*
  %608 = load <8 x i16>, <8 x i16>* %607, align 2, !alias.scope !39
  %609 = getelementptr i16, i16* %605, i64 8
  %610 = bitcast i16* %609 to <8 x i16>*
  %611 = load <8 x i16>, <8 x i16>* %610, align 2, !alias.scope !39
  %612 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> %608, <8 x i16>* %612, align 2, !alias.scope !42, !noalias !39
  %613 = getelementptr i16, i16* %606, i64 8
  %614 = bitcast i16* %613 to <8 x i16>*
  store <8 x i16> %611, <8 x i16>* %614, align 2, !alias.scope !42, !noalias !39
  %615 = add i64 %603, 16
  %616 = add i64 %604, -1
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %618, label %602, !llvm.loop !45

618:                                              ; preds = %602, %599
  %619 = icmp eq i64 %539, %189
  br i1 %619, label %820, label %620

620:                                              ; preds = %618, %529, %527
  %621 = phi i64 [ %189, %529 ], [ %189, %527 ], [ %540, %618 ]
  %622 = phi i16* [ %187, %529 ], [ %187, %527 ], [ %541, %618 ]
  %623 = phi i16* [ %522, %529 ], [ %522, %527 ], [ %542, %618 ]
  %624 = add nsw i64 %621, -1
  %625 = and i64 %621, 7
  %626 = icmp eq i64 %625, 0
  br i1 %626, label %638, label %627

627:                                              ; preds = %620, %627
  %628 = phi i64 [ %633, %627 ], [ %621, %620 ]
  %629 = phi i16* [ %635, %627 ], [ %622, %620 ]
  %630 = phi i16* [ %634, %627 ], [ %623, %620 ]
  %631 = phi i64 [ %636, %627 ], [ %625, %620 ]
  %632 = load i16, i16* %629, align 2
  store i16 %632, i16* %630, align 2
  %633 = add nsw i64 %628, -1
  %634 = getelementptr inbounds i16, i16* %630, i64 1
  %635 = getelementptr inbounds i16, i16* %629, i64 1
  %636 = add i64 %631, -1
  %637 = icmp eq i64 %636, 0
  br i1 %637, label %638, label %627, !llvm.loop !46

638:                                              ; preds = %627, %620
  %639 = phi i64 [ %621, %620 ], [ %633, %627 ]
  %640 = phi i16* [ %622, %620 ], [ %635, %627 ]
  %641 = phi i16* [ %623, %620 ], [ %634, %627 ]
  %642 = icmp ult i64 %624, 7
  br i1 %642, label %820, label %643

643:                                              ; preds = %638, %643
  %644 = phi i64 [ %669, %643 ], [ %639, %638 ]
  %645 = phi i16* [ %671, %643 ], [ %640, %638 ]
  %646 = phi i16* [ %670, %643 ], [ %641, %638 ]
  %647 = load i16, i16* %645, align 2
  store i16 %647, i16* %646, align 2
  %648 = getelementptr inbounds i16, i16* %646, i64 1
  %649 = getelementptr inbounds i16, i16* %645, i64 1
  %650 = load i16, i16* %649, align 2
  store i16 %650, i16* %648, align 2
  %651 = getelementptr inbounds i16, i16* %646, i64 2
  %652 = getelementptr inbounds i16, i16* %645, i64 2
  %653 = load i16, i16* %652, align 2
  store i16 %653, i16* %651, align 2
  %654 = getelementptr inbounds i16, i16* %646, i64 3
  %655 = getelementptr inbounds i16, i16* %645, i64 3
  %656 = load i16, i16* %655, align 2
  store i16 %656, i16* %654, align 2
  %657 = getelementptr inbounds i16, i16* %646, i64 4
  %658 = getelementptr inbounds i16, i16* %645, i64 4
  %659 = load i16, i16* %658, align 2
  store i16 %659, i16* %657, align 2
  %660 = getelementptr inbounds i16, i16* %646, i64 5
  %661 = getelementptr inbounds i16, i16* %645, i64 5
  %662 = load i16, i16* %661, align 2
  store i16 %662, i16* %660, align 2
  %663 = getelementptr inbounds i16, i16* %646, i64 6
  %664 = getelementptr inbounds i16, i16* %645, i64 6
  %665 = load i16, i16* %664, align 2
  store i16 %665, i16* %663, align 2
  %666 = getelementptr inbounds i16, i16* %646, i64 7
  %667 = getelementptr inbounds i16, i16* %645, i64 7
  %668 = load i16, i16* %667, align 2
  store i16 %668, i16* %666, align 2
  %669 = add nsw i64 %644, -8
  %670 = getelementptr inbounds i16, i16* %646, i64 8
  %671 = getelementptr inbounds i16, i16* %645, i64 8
  %672 = icmp eq i64 %669, 0
  br i1 %672, label %820, label %643, !llvm.loop !47

673:                                              ; preds = %525
  %674 = icmp ugt i16* %522, %187
  br i1 %674, label %675, label %820

675:                                              ; preds = %673
  %676 = getelementptr inbounds i16, i16* %187, i64 %189
  %677 = getelementptr inbounds i16, i16* %522, i64 %189
  %678 = icmp ult i32 %183, 32
  br i1 %678, label %767, label %679

679:                                              ; preds = %675
  %680 = bitcast i16* %677 to i8*
  %681 = and i32 %183, -2
  %682 = zext i32 %681 to i64
  %683 = getelementptr i8, i8* %178, i64 %682
  %684 = icmp ugt i8* %683, %523
  %685 = icmp ult i8* %178, %680
  %686 = and i1 %684, %685
  br i1 %686, label %767, label %687

687:                                              ; preds = %679
  %688 = and i64 %189, 2147483632
  %689 = sub nsw i64 %189, %688
  %690 = sub nsw i64 0, %688
  %691 = getelementptr i16, i16* %676, i64 %690
  %692 = sub nsw i64 0, %688
  %693 = getelementptr i16, i16* %677, i64 %692
  %694 = add nsw i64 %688, -16
  %695 = lshr exact i64 %694, 4
  %696 = add nuw nsw i64 %695, 1
  %697 = and i64 %696, 1
  %698 = icmp eq i64 %694, 0
  br i1 %698, label %745, label %699

699:                                              ; preds = %687
  %700 = sub nuw nsw i64 %696, %697
  %701 = getelementptr i16, i16* %676, i64 -1
  %702 = getelementptr i16, i16* %677, i64 -1
  %703 = getelementptr i16, i16* %676, i64 -1
  %704 = getelementptr i16, i16* %677, i64 -1
  br label %705

705:                                              ; preds = %705, %699
  %706 = phi i64 [ 0, %699 ], [ %740, %705 ]
  %707 = phi i64 [ %700, %699 ], [ %741, %705 ]
  %708 = sub i64 0, %706
  %709 = sub i64 0, %706
  %710 = getelementptr inbounds i16, i16* %702, i64 %709
  %711 = getelementptr inbounds i16, i16* %701, i64 %708
  %712 = getelementptr inbounds i16, i16* %711, i64 -7
  %713 = bitcast i16* %712 to <8 x i16>*
  %714 = load <8 x i16>, <8 x i16>* %713, align 2, !alias.scope !48
  %715 = getelementptr inbounds i16, i16* %711, i64 -8
  %716 = getelementptr inbounds i16, i16* %715, i64 -7
  %717 = bitcast i16* %716 to <8 x i16>*
  %718 = load <8 x i16>, <8 x i16>* %717, align 2, !alias.scope !48
  %719 = getelementptr inbounds i16, i16* %710, i64 -7
  %720 = bitcast i16* %719 to <8 x i16>*
  store <8 x i16> %714, <8 x i16>* %720, align 2, !alias.scope !51, !noalias !48
  %721 = getelementptr inbounds i16, i16* %710, i64 -8
  %722 = getelementptr inbounds i16, i16* %721, i64 -7
  %723 = bitcast i16* %722 to <8 x i16>*
  store <8 x i16> %718, <8 x i16>* %723, align 2, !alias.scope !51, !noalias !48
  %724 = sub nuw nsw i64 -16, %706
  %725 = sub nuw nsw i64 -16, %706
  %726 = getelementptr inbounds i16, i16* %704, i64 %725
  %727 = getelementptr inbounds i16, i16* %703, i64 %724
  %728 = getelementptr inbounds i16, i16* %727, i64 -7
  %729 = bitcast i16* %728 to <8 x i16>*
  %730 = load <8 x i16>, <8 x i16>* %729, align 2, !alias.scope !48
  %731 = getelementptr inbounds i16, i16* %727, i64 -8
  %732 = getelementptr inbounds i16, i16* %731, i64 -7
  %733 = bitcast i16* %732 to <8 x i16>*
  %734 = load <8 x i16>, <8 x i16>* %733, align 2, !alias.scope !48
  %735 = getelementptr inbounds i16, i16* %726, i64 -7
  %736 = bitcast i16* %735 to <8 x i16>*
  store <8 x i16> %730, <8 x i16>* %736, align 2, !alias.scope !51, !noalias !48
  %737 = getelementptr inbounds i16, i16* %726, i64 -8
  %738 = getelementptr inbounds i16, i16* %737, i64 -7
  %739 = bitcast i16* %738 to <8 x i16>*
  store <8 x i16> %734, <8 x i16>* %739, align 2, !alias.scope !51, !noalias !48
  %740 = add i64 %706, 32
  %741 = add i64 %707, -2
  %742 = icmp eq i64 %741, 0
  br i1 %742, label %743, label %705, !llvm.loop !53

743:                                              ; preds = %705
  %744 = sub nuw nsw i64 -32, %706
  br label %745

745:                                              ; preds = %743, %687
  %746 = phi i64 [ 0, %687 ], [ %744, %743 ]
  %747 = icmp eq i64 %697, 0
  br i1 %747, label %765, label %748

748:                                              ; preds = %745
  %749 = getelementptr i16, i16* %676, i64 -1
  %750 = getelementptr i16, i16* %677, i64 -1
  %751 = getelementptr inbounds i16, i16* %750, i64 %746
  %752 = getelementptr inbounds i16, i16* %749, i64 %746
  %753 = getelementptr inbounds i16, i16* %752, i64 -7
  %754 = bitcast i16* %753 to <8 x i16>*
  %755 = load <8 x i16>, <8 x i16>* %754, align 2, !alias.scope !48
  %756 = getelementptr inbounds i16, i16* %752, i64 -8
  %757 = getelementptr inbounds i16, i16* %756, i64 -7
  %758 = bitcast i16* %757 to <8 x i16>*
  %759 = load <8 x i16>, <8 x i16>* %758, align 2, !alias.scope !48
  %760 = getelementptr inbounds i16, i16* %751, i64 -7
  %761 = bitcast i16* %760 to <8 x i16>*
  store <8 x i16> %755, <8 x i16>* %761, align 2, !alias.scope !51, !noalias !48
  %762 = getelementptr inbounds i16, i16* %751, i64 -8
  %763 = getelementptr inbounds i16, i16* %762, i64 -7
  %764 = bitcast i16* %763 to <8 x i16>*
  store <8 x i16> %759, <8 x i16>* %764, align 2, !alias.scope !51, !noalias !48
  br label %765

765:                                              ; preds = %745, %748
  %766 = icmp eq i64 %688, %189
  br i1 %766, label %820, label %767

767:                                              ; preds = %765, %679, %675
  %768 = phi i64 [ %189, %679 ], [ %189, %675 ], [ %689, %765 ]
  %769 = phi i16* [ %676, %679 ], [ %676, %675 ], [ %691, %765 ]
  %770 = phi i16* [ %677, %679 ], [ %677, %675 ], [ %693, %765 ]
  %771 = add nsw i64 %768, -1
  %772 = and i64 %768, 7
  %773 = icmp eq i64 %772, 0
  br i1 %773, label %785, label %774

774:                                              ; preds = %767, %774
  %775 = phi i64 [ %782, %774 ], [ %768, %767 ]
  %776 = phi i16* [ %780, %774 ], [ %769, %767 ]
  %777 = phi i16* [ %779, %774 ], [ %770, %767 ]
  %778 = phi i64 [ %783, %774 ], [ %772, %767 ]
  %779 = getelementptr inbounds i16, i16* %777, i64 -1
  %780 = getelementptr inbounds i16, i16* %776, i64 -1
  %781 = load i16, i16* %780, align 2
  store i16 %781, i16* %779, align 2
  %782 = add nsw i64 %775, -1
  %783 = add i64 %778, -1
  %784 = icmp eq i64 %783, 0
  br i1 %784, label %785, label %774, !llvm.loop !54

785:                                              ; preds = %774, %767
  %786 = phi i64 [ %768, %767 ], [ %782, %774 ]
  %787 = phi i16* [ %769, %767 ], [ %780, %774 ]
  %788 = phi i16* [ %770, %767 ], [ %779, %774 ]
  %789 = icmp ult i64 %771, 7
  br i1 %789, label %820, label %790

790:                                              ; preds = %785, %790
  %791 = phi i64 [ %818, %790 ], [ %786, %785 ]
  %792 = phi i16* [ %816, %790 ], [ %787, %785 ]
  %793 = phi i16* [ %815, %790 ], [ %788, %785 ]
  %794 = getelementptr inbounds i16, i16* %793, i64 -1
  %795 = getelementptr inbounds i16, i16* %792, i64 -1
  %796 = load i16, i16* %795, align 2
  store i16 %796, i16* %794, align 2
  %797 = getelementptr inbounds i16, i16* %793, i64 -2
  %798 = getelementptr inbounds i16, i16* %792, i64 -2
  %799 = load i16, i16* %798, align 2
  store i16 %799, i16* %797, align 2
  %800 = getelementptr inbounds i16, i16* %793, i64 -3
  %801 = getelementptr inbounds i16, i16* %792, i64 -3
  %802 = load i16, i16* %801, align 2
  store i16 %802, i16* %800, align 2
  %803 = getelementptr inbounds i16, i16* %793, i64 -4
  %804 = getelementptr inbounds i16, i16* %792, i64 -4
  %805 = load i16, i16* %804, align 2
  store i16 %805, i16* %803, align 2
  %806 = getelementptr inbounds i16, i16* %793, i64 -5
  %807 = getelementptr inbounds i16, i16* %792, i64 -5
  %808 = load i16, i16* %807, align 2
  store i16 %808, i16* %806, align 2
  %809 = getelementptr inbounds i16, i16* %793, i64 -6
  %810 = getelementptr inbounds i16, i16* %792, i64 -6
  %811 = load i16, i16* %810, align 2
  store i16 %811, i16* %809, align 2
  %812 = getelementptr inbounds i16, i16* %793, i64 -7
  %813 = getelementptr inbounds i16, i16* %792, i64 -7
  %814 = load i16, i16* %813, align 2
  store i16 %814, i16* %812, align 2
  %815 = getelementptr inbounds i16, i16* %793, i64 -8
  %816 = getelementptr inbounds i16, i16* %792, i64 -8
  %817 = load i16, i16* %816, align 2
  store i16 %817, i16* %815, align 2
  %818 = add nsw i64 %791, -8
  %819 = icmp eq i64 %818, 0
  br i1 %819, label %820, label %790, !llvm.loop !55

820:                                              ; preds = %785, %790, %638, %643, %765, %618, %673, %521
  %821 = getelementptr inbounds i16, i16* %522, i64 %189
  store i16 0, i16* %821, align 2
  %822 = load i8, i8* %194, align 1
  %823 = icmp slt i8 %822, 0
  br i1 %823, label %824, label %826

824:                                              ; preds = %820
  %825 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %189, i64* %825, align 8
  br label %837

826:                                              ; preds = %820
  %827 = trunc i32 %188 to i8
  store i8 %827, i8* %194, align 1
  br label %837

828:                                              ; preds = %512
  br i1 %196, label %829, label %832

829:                                              ; preds = %828
  %830 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %831 = load i64, i64* %830, align 8
  br label %834

832:                                              ; preds = %828
  %833 = zext i8 %195 to i64
  br label %834

834:                                              ; preds = %832, %829
  %835 = phi i64 [ %831, %829 ], [ %833, %832 ]
  %836 = sub nsw i64 %189, %513
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %2, i64 %513, i64 %836, i64 %835, i64 0, i64 %835, i64 %189, i16* %187) #7
  br label %837

837:                                              ; preds = %5, %12, %172, %24, %834, %826, %824, %504, %168, %170, %23
  %838 = phi i1 [ false, %23 ], [ true, %168 ], [ true, %170 ], [ true, %834 ], [ true, %826 ], [ true, %824 ], [ true, %504 ], [ false, %24 ], [ false, %172 ], [ false, %12 ], [ false, %5 ]
  ret i1 %838
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !56
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !56
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !59, !noalias !56
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !59, !noalias !56
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !56
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !56
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !59, !noalias !56
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !59, !noalias !56
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !56
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !56
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !59, !noalias !56
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !59, !noalias !56
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !56
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !56
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !59, !noalias !56
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !59, !noalias !56
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !61

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !56
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !56
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !59, !noalias !56
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !59, !noalias !56
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !62

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !63

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !64
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !64
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !67, !noalias !64
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !67, !noalias !64
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !64
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !64
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !67, !noalias !64
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !67, !noalias !64
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !64
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !64
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !67, !noalias !64
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !67, !noalias !64
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !64
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !64
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !67, !noalias !64
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !67, !noalias !64
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !69

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !64
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !64
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !67, !noalias !64
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !67, !noalias !64
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !70

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #7
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !71

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !72
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !72
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !75, !noalias !72
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !75, !noalias !72
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !72
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !72
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !75, !noalias !72
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !75, !noalias !72
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !72
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !72
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !75, !noalias !72
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !75, !noalias !72
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !72
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !72
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !75, !noalias !72
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !75, !noalias !72
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !77

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !72
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !72
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !75, !noalias !72
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !75, !noalias !72
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !78

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !79

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #8
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #9
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !80
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !80
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !83, !noalias !80
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !83, !noalias !80
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !80
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !80
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !83, !noalias !80
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !83, !noalias !80
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !80
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !80
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !83, !noalias !80
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !83, !noalias !80
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !80
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !80
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !83, !noalias !80
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !83, !noalias !80
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !85

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !80
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !80
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !83, !noalias !80
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !83, !noalias !80
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !86

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !87

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #7
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !88
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !88
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !91, !noalias !88
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !91, !noalias !88
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !88
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !88
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !91, !noalias !88
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !91, !noalias !88
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !88
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !88
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !91, !noalias !88
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !91, !noalias !88
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !88
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !88
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !91, !noalias !88
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !91, !noalias !88
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !93

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !88
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !88
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !91, !noalias !88
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !91, !noalias !88
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !94

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !95

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #9
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = sub i64 9223372036854775791, %1
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %11) #8
  unreachable

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  br label %22

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i16* [ %19, %17 ], [ %21, %20 ]
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ult i64 %1, 4611686018427387879
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = add i64 %2, %1
  %28 = shl i64 %1, 1
  %29 = icmp ult i64 %27, %28
  %30 = select i1 %29, i64 %28, i64 %27
  %31 = icmp ult i64 %30, 11
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = add i64 %30, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #8
  unreachable

37:                                               ; preds = %22, %26, %32
  %38 = phi i64 [ %34, %32 ], [ 9223372036854775791, %22 ], [ 11, %26 ]
  %39 = shl i64 %38, 1
  %40 = tail call i8* @_Znwm(i64 %39) #9
  %41 = bitcast i8* %40 to i16*
  %42 = icmp eq i64 %4, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %37
  %44 = icmp ult i64 %4, 16
  br i1 %44, label %135, label %45

45:                                               ; preds = %43
  %46 = shl i64 %4, 1
  %47 = getelementptr i8, i8* %40, i64 %46
  %48 = getelementptr i16, i16* %23, i64 %4
  %49 = bitcast i16* %48 to i8*
  %50 = icmp ult i8* %40, %49
  %51 = icmp ugt i8* %47, %24
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %45
  %54 = and i64 %4, -16
  %55 = sub i64 %4, %54
  %56 = getelementptr i16, i16* %23, i64 %54
  %57 = getelementptr i16, i16* %41, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %23, i64 %66
  %69 = getelementptr i16, i16* %41, i64 %66
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !96
  %72 = getelementptr i16, i16* %68, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !96
  %75 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !99, !noalias !96
  %76 = getelementptr i16, i16* %69, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !99, !noalias !96
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %23, i64 %78
  %80 = getelementptr i16, i16* %41, i64 %78
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !96
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !96
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !99, !noalias !96
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !99, !noalias !96
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %23, i64 %89
  %91 = getelementptr i16, i16* %41, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !96
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !96
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !99, !noalias !96
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !99, !noalias !96
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %23, i64 %100
  %102 = getelementptr i16, i16* %41, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !96
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !96
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !99, !noalias !96
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !99, !noalias !96
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !101

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %23, i64 %118
  %121 = getelementptr i16, i16* %41, i64 %118
  %122 = bitcast i16* %120 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !96
  %124 = getelementptr i16, i16* %120, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !96
  %127 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !99, !noalias !96
  %128 = getelementptr i16, i16* %121, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !99, !noalias !96
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !102

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %54, %4
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %45, %43
  %136 = phi i64 [ %4, %45 ], [ %4, %43 ], [ %55, %133 ]
  %137 = phi i16* [ %23, %45 ], [ %23, %43 ], [ %56, %133 ]
  %138 = phi i16* [ %41, %45 ], [ %41, %43 ], [ %57, %133 ]
  %139 = add i64 %136, -1
  %140 = and i64 %136, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i64 [ %148, %142 ], [ %136, %135 ]
  %144 = phi i16* [ %150, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %149, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %144, align 2
  store i16 %147, i16* %145, align 2
  %148 = add i64 %143, -1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !103

153:                                              ; preds = %142, %135
  %154 = phi i64 [ %136, %135 ], [ %148, %142 ]
  %155 = phi i16* [ %137, %135 ], [ %150, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %149, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %184, %158 ], [ %154, %153 ]
  %160 = phi i16* [ %186, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %185, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %160, align 2
  store i16 %162, i16* %161, align 2
  %163 = getelementptr inbounds i16, i16* %161, i64 1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %161, i64 2
  %167 = getelementptr inbounds i16, i16* %160, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %161, i64 3
  %170 = getelementptr inbounds i16, i16* %160, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %161, i64 4
  %173 = getelementptr inbounds i16, i16* %160, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %161, i64 5
  %176 = getelementptr inbounds i16, i16* %160, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %161, i64 6
  %179 = getelementptr inbounds i16, i16* %160, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %161, i64 7
  %182 = getelementptr inbounds i16, i16* %160, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %159, -8
  %185 = getelementptr inbounds i16, i16* %161, i64 8
  %186 = getelementptr inbounds i16, i16* %160, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !104

188:                                              ; preds = %153, %158, %133, %37
  %189 = sub i64 %3, %5
  %190 = sub i64 %189, %4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %347, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i16, i16* %41, i64 %4
  %194 = getelementptr inbounds i16, i16* %193, i64 %6
  %195 = getelementptr inbounds i16, i16* %23, i64 %4
  %196 = getelementptr inbounds i16, i16* %195, i64 %5
  %197 = icmp ult i64 %190, 16
  br i1 %197, label %294, label %198

198:                                              ; preds = %192
  %199 = bitcast i16* %196 to i8*
  %200 = add i64 %6, %4
  %201 = shl i64 %200, 1
  %202 = getelementptr i8, i8* %40, i64 %201
  %203 = add i64 %6, %3
  %204 = sub i64 %203, %5
  %205 = shl i64 %204, 1
  %206 = getelementptr i8, i8* %40, i64 %205
  %207 = getelementptr i16, i16* %23, i64 %3
  %208 = bitcast i16* %207 to i8*
  %209 = icmp ult i8* %202, %208
  %210 = icmp ugt i8* %206, %199
  %211 = and i1 %209, %210
  br i1 %211, label %294, label %212

212:                                              ; preds = %198
  %213 = and i64 %190, -16
  %214 = sub i64 %190, %213
  %215 = getelementptr i16, i16* %196, i64 %213
  %216 = getelementptr i16, i16* %194, i64 %213
  %217 = add i64 %213, -16
  %218 = lshr exact i64 %217, 4
  %219 = add nuw nsw i64 %218, 1
  %220 = and i64 %219, 3
  %221 = icmp ult i64 %217, 48
  br i1 %221, label %273, label %222

222:                                              ; preds = %212
  %223 = sub nsw i64 %219, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ 0, %222 ], [ %270, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %271, %224 ]
  %227 = getelementptr i16, i16* %196, i64 %225
  %228 = getelementptr i16, i16* %194, i64 %225
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !105
  %231 = getelementptr i16, i16* %227, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !105
  %234 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !108, !noalias !105
  %235 = getelementptr i16, i16* %228, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !108, !noalias !105
  %237 = or i64 %225, 16
  %238 = getelementptr i16, i16* %196, i64 %237
  %239 = getelementptr i16, i16* %194, i64 %237
  %240 = bitcast i16* %238 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !105
  %242 = getelementptr i16, i16* %238, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !105
  %245 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %245, align 2, !alias.scope !108, !noalias !105
  %246 = getelementptr i16, i16* %239, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %247, align 2, !alias.scope !108, !noalias !105
  %248 = or i64 %225, 32
  %249 = getelementptr i16, i16* %196, i64 %248
  %250 = getelementptr i16, i16* %194, i64 %248
  %251 = bitcast i16* %249 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !105
  %253 = getelementptr i16, i16* %249, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !105
  %256 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !108, !noalias !105
  %257 = getelementptr i16, i16* %250, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !108, !noalias !105
  %259 = or i64 %225, 48
  %260 = getelementptr i16, i16* %196, i64 %259
  %261 = getelementptr i16, i16* %194, i64 %259
  %262 = bitcast i16* %260 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !105
  %264 = getelementptr i16, i16* %260, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !105
  %267 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !108, !noalias !105
  %268 = getelementptr i16, i16* %261, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !108, !noalias !105
  %270 = add i64 %225, 64
  %271 = add i64 %226, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %224, !llvm.loop !110

273:                                              ; preds = %224, %212
  %274 = phi i64 [ 0, %212 ], [ %270, %224 ]
  %275 = icmp eq i64 %220, 0
  br i1 %275, label %292, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %289, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %290, %276 ], [ %220, %273 ]
  %279 = getelementptr i16, i16* %196, i64 %277
  %280 = getelementptr i16, i16* %194, i64 %277
  %281 = bitcast i16* %279 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !105
  %283 = getelementptr i16, i16* %279, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !105
  %286 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !108, !noalias !105
  %287 = getelementptr i16, i16* %280, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !108, !noalias !105
  %289 = add i64 %277, 16
  %290 = add i64 %278, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %276, !llvm.loop !111

292:                                              ; preds = %276, %273
  %293 = icmp eq i64 %190, %213
  br i1 %293, label %347, label %294

294:                                              ; preds = %292, %198, %192
  %295 = phi i64 [ %190, %198 ], [ %190, %192 ], [ %214, %292 ]
  %296 = phi i16* [ %196, %198 ], [ %196, %192 ], [ %215, %292 ]
  %297 = phi i16* [ %194, %198 ], [ %194, %192 ], [ %216, %292 ]
  %298 = add i64 %295, -1
  %299 = and i64 %295, 7
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294, %301
  %302 = phi i64 [ %307, %301 ], [ %295, %294 ]
  %303 = phi i16* [ %309, %301 ], [ %296, %294 ]
  %304 = phi i16* [ %308, %301 ], [ %297, %294 ]
  %305 = phi i64 [ %310, %301 ], [ %299, %294 ]
  %306 = load i16, i16* %303, align 2
  store i16 %306, i16* %304, align 2
  %307 = add i64 %302, -1
  %308 = getelementptr inbounds i16, i16* %304, i64 1
  %309 = getelementptr inbounds i16, i16* %303, i64 1
  %310 = add i64 %305, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %301, !llvm.loop !112

312:                                              ; preds = %301, %294
  %313 = phi i64 [ %295, %294 ], [ %307, %301 ]
  %314 = phi i16* [ %296, %294 ], [ %309, %301 ]
  %315 = phi i16* [ %297, %294 ], [ %308, %301 ]
  %316 = icmp ult i64 %298, 7
  br i1 %316, label %347, label %317

317:                                              ; preds = %312, %317
  %318 = phi i64 [ %343, %317 ], [ %313, %312 ]
  %319 = phi i16* [ %345, %317 ], [ %314, %312 ]
  %320 = phi i16* [ %344, %317 ], [ %315, %312 ]
  %321 = load i16, i16* %319, align 2
  store i16 %321, i16* %320, align 2
  %322 = getelementptr inbounds i16, i16* %320, i64 1
  %323 = getelementptr inbounds i16, i16* %319, i64 1
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %320, i64 2
  %326 = getelementptr inbounds i16, i16* %319, i64 2
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %320, i64 3
  %329 = getelementptr inbounds i16, i16* %319, i64 3
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = getelementptr inbounds i16, i16* %320, i64 4
  %332 = getelementptr inbounds i16, i16* %319, i64 4
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %320, i64 5
  %335 = getelementptr inbounds i16, i16* %319, i64 5
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %320, i64 6
  %338 = getelementptr inbounds i16, i16* %319, i64 6
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %320, i64 7
  %341 = getelementptr inbounds i16, i16* %319, i64 7
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = add i64 %318, -8
  %344 = getelementptr inbounds i16, i16* %320, i64 8
  %345 = getelementptr inbounds i16, i16* %319, i64 8
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %317, !llvm.loop !113

347:                                              ; preds = %312, %317, %292, %188
  %348 = icmp eq i64 %1, 10
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  tail call void @_ZdlPv(i8* %24) #9
  br label %350

350:                                              ; preds = %347, %349
  %351 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %40, i8** %351, align 8
  %352 = or i64 %38, -9223372036854775808
  %353 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %352, i64* %353, align 8
  ret void
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #8
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #8
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #9
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !114
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !114
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !117, !noalias !114
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !117, !noalias !114
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !114
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !114
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !117, !noalias !114
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !117, !noalias !114
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !114
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !114
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !117, !noalias !114
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !117, !noalias !114
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !114
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !114
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !117, !noalias !114
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !117, !noalias !114
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !119

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !114
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !114
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !117, !noalias !114
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !117, !noalias !114
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !120

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !121

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !122

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !123

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !124

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !125

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !126
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !126
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !129, !noalias !126
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !129, !noalias !126
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !126
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !126
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !129, !noalias !126
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !129, !noalias !126
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !126
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !126
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !129, !noalias !126
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !129, !noalias !126
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !126
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !126
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !129, !noalias !126
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !129, !noalias !126
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !131

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !126
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !126
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !129, !noalias !126
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !129, !noalias !126
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !132

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !133

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !134

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #9
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !3}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !13}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !3}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !13}
!38 = distinct !{!38, !3}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !13}
!46 = distinct !{!46, !13}
!47 = distinct !{!47, !3}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !3}
!54 = distinct !{!54, !13}
!55 = distinct !{!55, !3}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !13}
!63 = distinct !{!63, !3}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !3}
!70 = distinct !{!70, !13}
!71 = distinct !{!71, !3}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !3}
!78 = distinct !{!78, !13}
!79 = distinct !{!79, !3}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !3}
!86 = distinct !{!86, !13}
!87 = distinct !{!87, !3}
!88 = !{!89}
!89 = distinct !{!89, !90}
!90 = distinct !{!90, !"LVerDomain"}
!91 = !{!92}
!92 = distinct !{!92, !90}
!93 = distinct !{!93, !3}
!94 = distinct !{!94, !13}
!95 = distinct !{!95, !3}
!96 = !{!97}
!97 = distinct !{!97, !98}
!98 = distinct !{!98, !"LVerDomain"}
!99 = !{!100}
!100 = distinct !{!100, !98}
!101 = distinct !{!101, !3}
!102 = distinct !{!102, !13}
!103 = distinct !{!103, !13}
!104 = distinct !{!104, !3}
!105 = !{!106}
!106 = distinct !{!106, !107}
!107 = distinct !{!107, !"LVerDomain"}
!108 = !{!109}
!109 = distinct !{!109, !107}
!110 = distinct !{!110, !3}
!111 = distinct !{!111, !13}
!112 = distinct !{!112, !13}
!113 = distinct !{!113, !3}
!114 = !{!115}
!115 = distinct !{!115, !116}
!116 = distinct !{!116, !"LVerDomain"}
!117 = !{!118}
!118 = distinct !{!118, !116}
!119 = distinct !{!119, !3}
!120 = distinct !{!120, !13}
!121 = distinct !{!121, !13}
!122 = distinct !{!122, !3}
!123 = distinct !{!123, !3}
!124 = distinct !{!124, !13}
!125 = distinct !{!125, !5, !3}
!126 = !{!127}
!127 = distinct !{!127, !128}
!128 = distinct !{!128, !"LVerDomain"}
!129 = !{!130}
!130 = distinct !{!130, !128}
!131 = distinct !{!131, !3}
!132 = distinct !{!132, !13}
!133 = distinct !{!133, !13}
!134 = distinct !{!134, !3}
