; ModuleID = '../../base/metrics/bucket_ranges.cc'
source_filename = "../../base/metrics/bucket_ranges.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::BucketRanges" = type { %"class.std::__1::vector", i32, %"struct.std::__1::atomic" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN4base12BucketRangesC1Em = hidden unnamed_addr alias void (%"class.base::BucketRanges"*, i64), void (%"class.base::BucketRanges"*, i64)* @_ZN4base12BucketRangesC2Em
@_ZN4base12BucketRangesD1Ev = hidden unnamed_addr alias void (%"class.base::BucketRanges"*), void (%"class.base::BucketRanges"*)* @_ZN4base12BucketRangesD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12BucketRangesC2Em(%"class.base::BucketRanges"*, i64) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.base::BucketRanges"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #7
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 4611686018427387903
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = bitcast %"class.base::BucketRanges"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %8) #8
  unreachable

9:                                                ; preds = %5
  %10 = shl i64 %1, 2
  %11 = tail call i8* @_Znwm(i64 %10) #9
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast %"class.base::BucketRanges"* %0 to i8**
  store i8* %11, i8** %14, align 8
  %15 = getelementptr inbounds i32, i32* %12, i64 %1
  %16 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %15, i32** %16, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 0, i64 %10, i1 false)
  %17 = bitcast i32** %13 to i64*
  %18 = ptrtoint i32* %15 to i64
  store i64 %18, i64* %17, align 8
  br label %19

19:                                               ; preds = %2, %9
  %20 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 1
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12BucketRangesD2Ev(%"class.base::BucketRanges"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4base12BucketRanges17CalculateChecksumEv(%"class.base::BucketRanges"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast i32** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.base::BucketRanges"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = inttoptr i64 %6 to i8*
  %11 = lshr exact i64 %7, 2
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @_ZN4base5Crc32EjPKvm(i32 %12, i8* %10, i64 %7) #7
  br label %14

14:                                               ; preds = %1, %9
  %15 = phi i32 [ %13, %9 ], [ 0, %1 ]
  ret i32 %15
}

declare i32 @_ZN4base5Crc32EjPKvm(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base12BucketRanges16HasValidChecksumEv(%"class.base::BucketRanges"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast i32** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.base::BucketRanges"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = inttoptr i64 %6 to i8*
  %11 = lshr exact i64 %7, 2
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @_ZN4base5Crc32EjPKvm(i32 %12, i8* %10, i64 %7) #7
  br label %14

14:                                               ; preds = %1, %9
  %15 = phi i32 [ %13, %9 ], [ 0, %1 ]
  %16 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %15, %17
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12BucketRanges13ResetChecksumEv(%"class.base::BucketRanges"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast i32** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.base::BucketRanges"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = inttoptr i64 %6 to i8*
  %11 = lshr exact i64 %7, 2
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @_ZN4base5Crc32EjPKvm(i32 %12, i8* %10, i64 %7) #7
  br label %14

14:                                               ; preds = %1, %9
  %15 = phi i32 [ %13, %9 ], [ 0, %1 ]
  %16 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 1
  store i32 %15, i32* %16, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base12BucketRanges6EqualsEPKS0_(%"class.base::BucketRanges"* nocapture readonly, %"class.base::BucketRanges"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %38

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.base::BucketRanges"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %1, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.base::BucketRanges"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp eq i64 %15, %22
  %24 = inttoptr i64 %13 to i32*
  %25 = inttoptr i64 %20 to i32*
  br i1 %23, label %26, label %38

26:                                               ; preds = %8
  %27 = icmp eq i64 %14, 0
  br i1 %27, label %38, label %30

28:                                               ; preds = %30
  %29 = icmp ult i64 %37, %15
  br i1 %29, label %30, label %38

30:                                               ; preds = %26, %28
  %31 = phi i64 [ %37, %28 ], [ 0, %26 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %25, i64 %31
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %33, %35
  %37 = add nuw i64 %31, 1
  br i1 %36, label %28, label %38

38:                                               ; preds = %30, %28, %26, %2, %8
  %39 = phi i1 [ false, %8 ], [ false, %2 ], [ true, %26 ], [ false, %30 ], [ true, %28 ]
  ret i1 %39
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
