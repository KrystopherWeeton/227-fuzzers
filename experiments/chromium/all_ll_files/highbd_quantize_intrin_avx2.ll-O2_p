; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/highbd_quantize_intrin_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/highbd_quantize_intrin_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_quantize_b_avx2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = bitcast i16* %2 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = bitcast i16* %3 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = bitcast i16* %4 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = bitcast i16* %8 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 1
  %21 = bitcast i16* %5 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 1
  %23 = ashr <8 x i16> %14, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %24 = shufflevector <8 x i16> %14, <8 x i16> %23, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <8 x i16> %24 to <2 x i64>
  %26 = shufflevector <8 x i16> %14, <8 x i16> %23, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %27 = shufflevector <2 x i64> %25, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = bitcast <4 x i64> %27 to <8 x i32>
  %29 = bitcast <8 x i16> %26 to <4 x i32>
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = shufflevector <8 x i32> %28, <8 x i32> %30, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %32 = bitcast <8 x i32> %31 to <4 x i64>
  %33 = ashr <8 x i16> %16, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %34 = shufflevector <8 x i16> %16, <8 x i16> %33, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = bitcast <8 x i16> %34 to <2 x i64>
  %36 = shufflevector <8 x i16> %16, <8 x i16> %33, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = bitcast <4 x i64> %37 to <8 x i32>
  %39 = bitcast <8 x i16> %36 to <4 x i32>
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i32> %38, <8 x i32> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = ashr <8 x i16> %18, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %44 = shufflevector <8 x i16> %18, <8 x i16> %43, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = bitcast <8 x i16> %44 to <2 x i64>
  %46 = shufflevector <8 x i16> %18, <8 x i16> %43, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = bitcast <4 x i64> %47 to <8 x i32>
  %49 = bitcast <8 x i16> %46 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = shufflevector <8 x i32> %48, <8 x i32> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %52 = bitcast <8 x i32> %51 to <4 x i64>
  %53 = ashr <8 x i16> %20, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %54 = shufflevector <8 x i16> %20, <8 x i16> %53, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %54 to <2 x i64>
  %56 = shufflevector <8 x i16> %20, <8 x i16> %53, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = bitcast <8 x i16> %56 to <4 x i32>
  %60 = shufflevector <4 x i32> %59, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = shufflevector <8 x i32> %58, <8 x i32> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %62 = bitcast <8 x i32> %61 to <4 x i64>
  %63 = ashr <8 x i16> %22, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %64 = shufflevector <8 x i16> %22, <8 x i16> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = bitcast <8 x i16> %64 to <2 x i64>
  %66 = shufflevector <8 x i16> %22, <8 x i16> %63, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = bitcast <8 x i16> %66 to <4 x i32>
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = shufflevector <8 x i32> %68, <8 x i32> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = bitcast i32* %0 to <8 x i32>*
  %74 = load <8 x i32>, <8 x i32>* %73, align 1
  %75 = sub <8 x i32> zeroinitializer, %74
  %76 = icmp slt <8 x i32> %74, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i32> %75, <8 x i32> %74
  %78 = icmp sge <8 x i32> %77, %31
  %79 = sext <8 x i1> %78 to <8 x i32>
  %80 = bitcast <8 x i32> %79 to <32 x i8>
  %81 = icmp slt <32 x i8> %80, zeroinitializer
  %82 = bitcast <32 x i1> %81 to i32
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %141, label %84, !prof !2

84:                                               ; preds = %12
  %85 = add <8 x i32> %41, %77
  %86 = bitcast <8 x i32> %85 to <4 x i64>
  %87 = shl <4 x i64> %86, <i64 32, i64 32, i64 32, i64 32>
  %88 = ashr exact <4 x i64> %87, <i64 32, i64 32, i64 32, i64 32>
  %89 = shl <4 x i64> %52, <i64 32, i64 32, i64 32, i64 32>
  %90 = ashr exact <4 x i64> %89, <i64 32, i64 32, i64 32, i64 32>
  %91 = mul nsw <4 x i64> %88, %90
  %92 = ashr <4 x i64> %86, <i64 32, i64 32, i64 32, i64 32>
  %93 = ashr <4 x i64> %52, <i64 32, i64 32, i64 32, i64 32>
  %94 = mul nsw <4 x i64> %92, %93
  %95 = lshr <4 x i64> %91, <i64 16, i64 16, i64 16, i64 16>
  %96 = and <4 x i64> %95, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %97 = lshr <4 x i64> %94, <i64 16, i64 16, i64 16, i64 16>
  %98 = shl <4 x i64> %97, <i64 32, i64 32, i64 32, i64 32>
  %99 = or <4 x i64> %96, %98
  %100 = bitcast <4 x i64> %99 to <8 x i32>
  %101 = add <8 x i32> %85, %100
  %102 = bitcast <8 x i32> %101 to <4 x i64>
  %103 = shl <4 x i64> %102, <i64 32, i64 32, i64 32, i64 32>
  %104 = ashr exact <4 x i64> %103, <i64 32, i64 32, i64 32, i64 32>
  %105 = shl <4 x i64> %72, <i64 32, i64 32, i64 32, i64 32>
  %106 = ashr exact <4 x i64> %105, <i64 32, i64 32, i64 32, i64 32>
  %107 = mul nsw <4 x i64> %104, %106
  %108 = ashr <4 x i64> %102, <i64 32, i64 32, i64 32, i64 32>
  %109 = ashr <4 x i64> %72, <i64 32, i64 32, i64 32, i64 32>
  %110 = mul nsw <4 x i64> %108, %109
  %111 = lshr <4 x i64> %107, <i64 16, i64 16, i64 16, i64 16>
  %112 = and <4 x i64> %111, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %113 = lshr <4 x i64> %110, <i64 16, i64 16, i64 16, i64 16>
  %114 = shl <4 x i64> %113, <i64 32, i64 32, i64 32, i64 32>
  %115 = or <4 x i64> %112, %114
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = mul <8 x i32> %61, %116
  %118 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %116, <8 x i32> %74) #2
  %119 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %117, <8 x i32> %74) #2
  %120 = and <8 x i32> %118, %79
  %121 = and <8 x i32> %119, %79
  %122 = bitcast i32* %6 to <8 x i32>*
  store <8 x i32> %120, <8 x i32>* %122, align 1
  %123 = bitcast i32* %7 to <8 x i32>*
  store <8 x i32> %121, <8 x i32>* %123, align 1
  %124 = bitcast i16* %11 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 1
  %126 = shufflevector <8 x i16> %125, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %127 = bitcast <8 x i16> %126 to <2 x i64>
  %128 = shufflevector <8 x i16> %125, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %129 = shufflevector <2 x i64> %127, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %130 = bitcast <4 x i64> %129 to <8 x i32>
  %131 = bitcast <8 x i16> %128 to <4 x i32>
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = shufflevector <8 x i32> %130, <8 x i32> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %134 = icmp ne <8 x i32> %121, zeroinitializer
  %135 = sext <8 x i1> %134 to <8 x i32>
  %136 = sub <8 x i32> %133, %135
  %137 = and <8 x i32> %136, %135
  %138 = icmp sgt <8 x i32> %137, zeroinitializer
  %139 = select <8 x i1> %138, <8 x i32> %137, <8 x i32> zeroinitializer
  %140 = bitcast <8 x i32> %139 to <4 x i64>
  br label %144

141:                                              ; preds = %12
  %142 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %142, align 1
  %143 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %143, align 1
  br label %144

144:                                              ; preds = %84, %141
  %145 = phi <8 x i32> [ zeroinitializer, %141 ], [ %139, %84 ]
  %146 = phi <4 x i64> [ zeroinitializer, %141 ], [ %140, %84 ]
  %147 = shufflevector <4 x i64> %52, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %148 = shufflevector <4 x i64> %72, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %149 = add nsw i64 %1, -8
  %150 = icmp sgt i64 %149, 0
  br i1 %150, label %151, label %246

151:                                              ; preds = %144
  %152 = shufflevector <4 x i64> %62, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %153 = shufflevector <4 x i64> %42, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %154 = shufflevector <4 x i64> %32, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %155 = bitcast <4 x i64> %154 to <8 x i32>
  %156 = bitcast <4 x i64> %153 to <8 x i32>
  %157 = shl <4 x i64> %147, <i64 32, i64 32, i64 32, i64 32>
  %158 = ashr exact <4 x i64> %157, <i64 32, i64 32, i64 32, i64 32>
  %159 = ashr <4 x i64> %147, <i64 32, i64 32, i64 32, i64 32>
  %160 = shl <4 x i64> %148, <i64 32, i64 32, i64 32, i64 32>
  %161 = ashr exact <4 x i64> %160, <i64 32, i64 32, i64 32, i64 32>
  %162 = ashr <4 x i64> %148, <i64 32, i64 32, i64 32, i64 32>
  %163 = bitcast <4 x i64> %152 to <8 x i32>
  br label %164

164:                                              ; preds = %151, %241
  %165 = phi i32* [ %7, %151 ], [ %175, %241 ]
  %166 = phi i16* [ %11, %151 ], [ %174, %241 ]
  %167 = phi i32* [ %6, %151 ], [ %173, %241 ]
  %168 = phi i32* [ %0, %151 ], [ %172, %241 ]
  %169 = phi i64 [ %149, %151 ], [ %244, %241 ]
  %170 = phi <4 x i64> [ %146, %151 ], [ %243, %241 ]
  %171 = phi <8 x i32> [ %145, %151 ], [ %242, %241 ]
  %172 = getelementptr inbounds i32, i32* %168, i64 8
  %173 = getelementptr inbounds i32, i32* %167, i64 8
  %174 = getelementptr inbounds i16, i16* %166, i64 8
  %175 = getelementptr inbounds i32, i32* %165, i64 8
  %176 = bitcast i32* %172 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 1
  %178 = sub <8 x i32> zeroinitializer, %177
  %179 = icmp slt <8 x i32> %177, zeroinitializer
  %180 = select <8 x i1> %179, <8 x i32> %178, <8 x i32> %177
  %181 = icmp sge <8 x i32> %180, %155
  %182 = sext <8 x i1> %181 to <8 x i32>
  %183 = bitcast <8 x i32> %182 to <32 x i8>
  %184 = icmp slt <32 x i8> %183, zeroinitializer
  %185 = bitcast <32 x i1> %184 to i32
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %238, label %187, !prof !2

187:                                              ; preds = %164
  %188 = add <8 x i32> %180, %156
  %189 = bitcast <8 x i32> %188 to <4 x i64>
  %190 = shl <4 x i64> %189, <i64 32, i64 32, i64 32, i64 32>
  %191 = ashr exact <4 x i64> %190, <i64 32, i64 32, i64 32, i64 32>
  %192 = mul nsw <4 x i64> %191, %158
  %193 = ashr <4 x i64> %189, <i64 32, i64 32, i64 32, i64 32>
  %194 = mul nsw <4 x i64> %193, %159
  %195 = lshr <4 x i64> %192, <i64 16, i64 16, i64 16, i64 16>
  %196 = and <4 x i64> %195, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %197 = lshr <4 x i64> %194, <i64 16, i64 16, i64 16, i64 16>
  %198 = shl <4 x i64> %197, <i64 32, i64 32, i64 32, i64 32>
  %199 = or <4 x i64> %196, %198
  %200 = bitcast <4 x i64> %199 to <8 x i32>
  %201 = add <8 x i32> %188, %200
  %202 = bitcast <8 x i32> %201 to <4 x i64>
  %203 = shl <4 x i64> %202, <i64 32, i64 32, i64 32, i64 32>
  %204 = ashr exact <4 x i64> %203, <i64 32, i64 32, i64 32, i64 32>
  %205 = mul nsw <4 x i64> %204, %161
  %206 = ashr <4 x i64> %202, <i64 32, i64 32, i64 32, i64 32>
  %207 = mul nsw <4 x i64> %206, %162
  %208 = lshr <4 x i64> %205, <i64 16, i64 16, i64 16, i64 16>
  %209 = and <4 x i64> %208, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %210 = lshr <4 x i64> %207, <i64 16, i64 16, i64 16, i64 16>
  %211 = shl <4 x i64> %210, <i64 32, i64 32, i64 32, i64 32>
  %212 = or <4 x i64> %209, %211
  %213 = bitcast <4 x i64> %212 to <8 x i32>
  %214 = mul <8 x i32> %213, %163
  %215 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %213, <8 x i32> %177) #2
  %216 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %214, <8 x i32> %177) #2
  %217 = and <8 x i32> %215, %182
  %218 = and <8 x i32> %216, %182
  %219 = bitcast i32* %173 to <8 x i32>*
  store <8 x i32> %217, <8 x i32>* %219, align 1
  %220 = bitcast i32* %175 to <8 x i32>*
  store <8 x i32> %218, <8 x i32>* %220, align 1
  %221 = bitcast i16* %174 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 1
  %223 = shufflevector <8 x i16> %222, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %224 = bitcast <8 x i16> %223 to <2 x i64>
  %225 = shufflevector <8 x i16> %222, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %226 = shufflevector <2 x i64> %224, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %227 = bitcast <4 x i64> %226 to <8 x i32>
  %228 = bitcast <8 x i16> %225 to <4 x i32>
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %230 = shufflevector <8 x i32> %227, <8 x i32> %229, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %231 = icmp ne <8 x i32> %218, zeroinitializer
  %232 = sext <8 x i1> %231 to <8 x i32>
  %233 = sub <8 x i32> %230, %232
  %234 = and <8 x i32> %233, %232
  %235 = icmp sgt <8 x i32> %234, %171
  %236 = select <8 x i1> %235, <8 x i32> %234, <8 x i32> %171
  %237 = bitcast <8 x i32> %236 to <4 x i64>
  br label %241

238:                                              ; preds = %164
  %239 = bitcast i32* %173 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %239, align 1
  %240 = bitcast i32* %175 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %240, align 1
  br label %241

241:                                              ; preds = %187, %238
  %242 = phi <8 x i32> [ %171, %238 ], [ %236, %187 ]
  %243 = phi <4 x i64> [ %170, %238 ], [ %237, %187 ]
  %244 = add nsw i64 %169, -8
  %245 = icmp sgt i64 %244, 0
  br i1 %245, label %164, label %246

246:                                              ; preds = %241, %144
  %247 = phi <8 x i32> [ %145, %144 ], [ %242, %241 ]
  %248 = phi <4 x i64> [ %146, %144 ], [ %243, %241 ]
  %249 = shufflevector <8 x i32> %247, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 6, i32 7, i32 4, i32 4>
  %250 = bitcast <4 x i64> %248 to <16 x i16>
  %251 = bitcast <8 x i32> %249 to <16 x i16>
  %252 = icmp sgt <16 x i16> %250, %251
  %253 = select <16 x i1> %252, <16 x i16> %250, <16 x i16> %251
  %254 = shufflevector <16 x i16> %253, <16 x i16> undef, <16 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11, i32 8, i32 8, i32 12, i32 13, i32 14, i32 15>
  %255 = icmp sgt <16 x i16> %253, %254
  %256 = select <16 x i1> %255, <16 x i16> %253, <16 x i16> %254
  %257 = shufflevector <16 x i16> %256, <16 x i16> undef, <16 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7, i32 9, i32 8, i32 8, i32 8, i32 12, i32 13, i32 14, i32 15>
  %258 = icmp sgt <16 x i16> %256, %257
  %259 = select <16 x i1> %258, <16 x i16> %256, <16 x i16> %257
  %260 = bitcast <16 x i16> %259 to <4 x i64>
  %261 = shufflevector <4 x i64> %260, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %262 = bitcast <16 x i16> %259 to <8 x i32>
  %263 = shufflevector <8 x i32> %262, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %264 = bitcast <2 x i64> %261 to <8 x i16>
  %265 = bitcast <4 x i32> %263 to <8 x i16>
  %266 = icmp sgt <8 x i16> %264, %265
  %267 = select <8 x i1> %266, <8 x i16> %264, <8 x i16> %265
  %268 = extractelement <8 x i16> %267, i64 0
  store i16 %268, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32>, <8 x i32>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
