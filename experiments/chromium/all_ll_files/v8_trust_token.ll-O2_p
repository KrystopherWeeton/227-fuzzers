; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/v8_trust_token.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/v8_trust_token.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.83", i32, [4 x i8], %"class.std::__1::unique_ptr.219", %"class.std::__1::unique_ptr.219", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.229", %"class.std::__1::unique_ptr.235", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.253", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.260", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.116", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.162", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.199", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.119" = type { %"struct.std::__1::__atomic_base.120" }
%"struct.std::__1::__atomic_base.120" = type { %"struct.std::__1::__atomic_base.121" }
%"struct.std::__1::__atomic_base.121" = type { %"struct.std::__1::__cxx_atomic_impl.122" }
%"struct.std::__1::__cxx_atomic_impl.122" = type { %"struct.std::__1::__cxx_atomic_base_impl.123" }
%"struct.std::__1::__cxx_atomic_base_impl.123" = type { i64 }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::Worklist.151"* }
%"class.blink::Worklist.151" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist.158"* }
%"class.blink::Worklist.158" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::Worklist.165"* }
%"class.blink::Worklist.165" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::Worklist.172"* }
%"class.blink::Worklist.172" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.119" }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.179", %"class.std::__1::__compressed_pair.186", %"class.std::__1::__compressed_pair.191", %"class.std::__1::__compressed_pair.193", [4 x i8] }>
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181", %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { i64 }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { float }
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.202", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.211" }
%"class.WTF::Vector.211" = type { %"class.WTF::VectorBuffer.212" }
%"class.WTF::VectorBuffer.212" = type { %"class.WTF::VectorBufferBase.213" }
%"class.WTF::VectorBufferBase.213" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.227" }
%"class.WTF::VectorBuffer.227" = type { %"class.WTF::VectorBufferBase.228" }
%"class.WTF::VectorBufferBase.228" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.241" }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.137"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.144"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.151"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.158"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.291" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.259 }
%class.scoped_refptr.259 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.260" = type { %"struct.std::__1::__atomic_base.261" }
%"struct.std::__1::__atomic_base.261" = type { %"struct.std::__1::__cxx_atomic_impl.262" }
%"struct.std::__1::__cxx_atomic_impl.262" = type { %"struct.std::__1::__cxx_atomic_base_impl.263" }
%"struct.std::__1::__cxx_atomic_base_impl.263" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::TrustToken" = type { %"class.blink::IDLDictionaryBase", i8, i8, i8, %"class.WTF::Vector", %"class.WTF::String", i8, %"class.WTF::Vector", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.27", %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.77", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.264", %"class.std::__1::unique_ptr.269", %"class.blink::Persistent.275", %"class.blink::Persistent.279", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.9", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.19", i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.27" = type { %"class.WTF::HashTable.28" }
%"class.WTF::HashTable.28" = type <{ %"struct.WTF::KeyValuePair.31"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.31" = type opaque
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.40", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.35", i8* }
%"class.WTF::HashMap.35" = type { %"class.WTF::HashTable.36" }
%"class.WTF::HashTable.36" = type <{ %"struct.WTF::KeyValuePair.39"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.39" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.40" = type { %"class.v8::PersistentValueMapBase.41" }
%"class.v8::PersistentValueMapBase.41" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.42", i8* }
%"class.WTF::HashMap.42" = type { %"class.WTF::HashTable.43" }
%"class.WTF::HashTable.43" = type <{ %"struct.WTF::KeyValuePair.46"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.46" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.47" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.61", %"class.WTF::Vector.67", i8, i32 }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.WTF::Vector.53"* }
%"class.WTF::Vector.53" = type { %"class.WTF::VectorBuffer.54" }
%"class.WTF::VectorBuffer.54" = type { %"class.WTF::VectorBufferBase.55" }
%"class.WTF::VectorBufferBase.55" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.67" = type { %"class.WTF::VectorBuffer.68" }
%"class.WTF::VectorBuffer.68" = type { %"class.WTF::VectorBufferBase.55", [32 x i8] }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.298, %"class.blink::Member.317", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.298 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.299", i32, i32, %"class.blink::Persistent.301" }
%"class.WTF::RefCounted.299" = type { %"class.base::RefCounted.300" }
%"class.base::RefCounted.300" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.301" = type { %"class.blink::PersistentBase.302" }
%"class.blink::PersistentBase.302" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.307" }
%"class.WTF::HashMap.307" = type { %"class.WTF::HashTable.308" }
%"class.WTF::HashTable.308" = type <{ %"struct.WTF::KeyValuePair.310"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.310" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.314" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.311" }
%"class.blink::MemberBase.311" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.314" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.314" = type { %"class.v8::TracedReference.315" }
%"class.v8::TracedReference.315" = type { %"class.v8::BasicTracedReference.316" }
%"class.v8::BasicTracedReference.316" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.317" = type { %"class.blink::MemberBase.318" }
%"class.blink::MemberBase.318" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.264" = type { %"class.WTF::VectorBuffer.265" }
%"class.WTF::VectorBuffer.265" = type { %"class.WTF::VectorBufferBase.266" }
%"class.WTF::VectorBufferBase.266" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.269" = type { %"class.std::__1::__compressed_pair.270" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.275" = type { %"class.blink::PersistentBase.276" }
%"class.blink::PersistentBase.276" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.279" = type { %"class.blink::PersistentBase.280" }
%"class.blink::PersistentBase.280" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.285" }
%"class.WTF::Vector.285" = type { %"class.WTF::VectorBuffer.286" }
%"class.WTF::VectorBuffer.286" = type { %"class.WTF::VectorBufferBase.287" }
%"class.WTF::VectorBufferBase.287" = type { %"struct.std::__1::pair.288"*, i32, i32 }
%"struct.std::__1::pair.288" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.289" }
%"class.blink::MemberBase.289" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.319" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.v8::Boolean" = type { i8 }
%"class.blink::ScriptIterator" = type { %"class.v8::Isolate"*, %"class.v8::Local.1", %"class.v8::Local", %"class.v8::Local.7", %"class.v8::Local.7", i8, %"class.v8::MaybeLocal" }
%"class.v8::Local.1" = type { %"class.v8::Object"* }
%"class.v8::Local.7" = type { %"class.v8::String"* }
%"class.v8::MaybeLocal" = type { %"class.v8::Value"* }
%"class.v8::Array" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::ExecutionContext" = type opaque
%"class.v8::Int32" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.351 }
%union.anon.351 = type { %"class.blink::RuntimeCallTimerScope" }
%"class.blink::RuntimeCallTimerScope" = type { %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallTimer" }

$_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink8bindings28CreateIDLSequenceFromV8ArrayINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENSB_5LocalINSB_5ArrayEEERNS_14ExceptionStateE = comdat any

$_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE = comdat any

$_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_ = comdat any

$_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [34 x i8] c"Missing required member(s): type.\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@_ZZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateEE12kValidValues = internal constant [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.2 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"refresh\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"RefreshPolicy\00", align 1
@_ZZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateEE12kValidValues_0 = internal constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [5 x i8] c"omit\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"include\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"headers-only\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"SignRequestData\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"required member type is undefined.\00", align 1
@_ZZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateEE12kValidValues_1 = internal constant [3 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0)], align 16
@.str.10 = private unnamed_addr constant [14 x i8] c"token-request\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"send-redemption-record\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"token-redemption\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"OperationType\00", align 1
@_ZZN5blinkL23eternalV8TrustTokenKeysEPN2v87IsolateEE5kKeys = internal constant [7 x i8*] [i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0)], align 16
@.str.14 = private unnamed_addr constant [24 x i8] c"additionalSignedHeaders\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"additionalSigningData\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"includeTimestampHeader\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"issuers\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"refreshPolicy\00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"signRequestData\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 7, i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @_ZZN5blinkL23eternalV8TrustTokenKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.22 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.23 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.24 = private unnamed_addr constant [54 x i8] c"The provided value cannot be converted to a sequence.\00", align 1
@.str.25 = private unnamed_addr constant [53 x i8] c"The object must have a callable @@iterator property.\00", align 1
@.str.26 = private unnamed_addr constant [38 x i8] c"Array length exceeds supported limit.\00", align 1
@.str.27 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.28 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E = external local_unnamed_addr global i8, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::TrustToken"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.WTF::Vector", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.WTF::Vector", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.blink::V8StringResource", align 8
  %13 = alloca %"class.WTF::String", align 8
  %14 = alloca %"class.WTF::String", align 8
  %15 = alloca %"class.blink::V8StringResource", align 8
  %16 = alloca %"class.WTF::String", align 8
  %17 = alloca %"class.WTF::String", align 8
  %18 = icmp eq %"class.v8::Value"* %1, null
  br i1 %18, label %40, label %19

19:                                               ; preds = %4
  %20 = bitcast %"class.v8::Value"* %1 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 3
  %23 = icmp eq i64 %22, 1
  br i1 %23, label %24, label %41

24:                                               ; preds = %19
  %25 = add i64 %21, -1
  %26 = inttoptr i64 %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = and i64 %21, -4294967296
  %29 = zext i32 %27 to i64
  %30 = or i64 %28, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = icmp eq i16 %33, 67
  br i1 %34, label %35, label %41

35:                                               ; preds = %24
  %36 = add i64 %21, 23
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = ashr i32 %38, 1
  switch i32 %39, label %41 [
    i32 5, label %40
    i32 3, label %40
  ]

40:                                               ; preds = %35, %35, %4
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #8
  br label %1230

41:                                               ; preds = %35, %24, %19
  %42 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #8
  br i1 %42, label %44, label %43

43:                                               ; preds = %41
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %1230

44:                                               ; preds = %41
  %45 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %46 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %47 = add i64 %46, 8
  %48 = inttoptr i64 %47 to %"class.blink::V8PerIsolateData"**
  %49 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %48, align 8
  %50 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %49, i8* bitcast ([7 x i8*]* @_ZZN5blinkL23eternalV8TrustTokenKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.319"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.319"*)) #8
  %51 = extractvalue { i64, %"class.v8::Eternal"* } %50, 1
  %52 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %52) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #8
  %53 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #8
  %54 = bitcast %"class.v8::Eternal"* %51 to %"class.v8::Value"**
  %55 = load %"class.v8::Value"*, %"class.v8::Value"** %54, align 8
  %56 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %55) #8
  %57 = icmp eq %"class.v8::Value"* %56, null
  br i1 %57, label %58, label %64

58:                                               ; preds = %44
  %59 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %60 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %61 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %61, i64 5
  %63 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %62, align 8
  call void %63(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %59) #8
  br label %1229

64:                                               ; preds = %44
  %65 = bitcast %"class.v8::Value"* %56 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 3
  %68 = icmp eq i64 %67, 1
  br i1 %68, label %69, label %86

69:                                               ; preds = %64
  %70 = add i64 %66, -1
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = and i64 %66, -4294967296
  %74 = zext i32 %72 to i64
  %75 = or i64 %73, %74
  %76 = add i64 %75, 7
  %77 = inttoptr i64 %76 to i16*
  %78 = load i16, i16* %77, align 2
  %79 = icmp eq i16 %78, 67
  br i1 %79, label %80, label %86

80:                                               ; preds = %69
  %81 = add i64 %66, 23
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = and i32 %83, -2
  %85 = icmp eq i32 %84, 10
  br i1 %85, label %168, label %86

86:                                               ; preds = %69, %64, %80
  %87 = bitcast %"class.WTF::Vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #8
  %88 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %89 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 2
  %90 = bitcast %"class.WTF::Vector"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %90, i8 -86, i64 16, i1 false)
  call void @_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE(%"class.WTF::Vector"* nonnull sret %6, %"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %56, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %91 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %131

94:                                               ; preds = %86
  call void @_ZN5blink10TrustToken26setAdditionalSignedHeadersERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::TrustToken"* %2, %"class.WTF::Vector"* nonnull dereferenceable(16) %6) #8
  %95 = load %"class.WTF::String"*, %"class.WTF::String"** %88, align 8
  %96 = icmp eq %"class.WTF::String"* %95, null
  br i1 %96, label %130, label %97, !prof !2

97:                                               ; preds = %94
  %98 = bitcast %"class.WTF::String"* %95 to i8*
  %99 = load i32, i32* %89, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %128, label %101, !prof !3

101:                                              ; preds = %97
  %102 = zext i32 %99 to i64
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %95, i64 %102
  br label %104

104:                                              ; preds = %122, %101
  %105 = phi %"class.WTF::String"* [ %123, %122 ], [ %95, %101 ]
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %105, i64 0, i32 0, i32 0
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #8
  br label %122

122:                                              ; preds = %121, %118, %104
  %123 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %105, i64 1
  %124 = icmp eq %"class.WTF::String"* %123, %103
  br i1 %124, label %125, label %104

125:                                              ; preds = %122
  store i32 0, i32* %89, align 4
  %126 = bitcast %"class.WTF::Vector"* %6 to i8**
  %127 = load i8*, i8** %126, align 8
  br label %128

128:                                              ; preds = %125, %97
  %129 = phi i8* [ %127, %125 ], [ %98, %97 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %129) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %88, align 8
  br label %130

130:                                              ; preds = %94, %128
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #8
  br label %168

131:                                              ; preds = %86
  %132 = load %"class.WTF::String"*, %"class.WTF::String"** %88, align 8
  %133 = icmp eq %"class.WTF::String"* %132, null
  br i1 %133, label %167, label %134, !prof !2

134:                                              ; preds = %131
  %135 = bitcast %"class.WTF::String"* %132 to i8*
  %136 = load i32, i32* %89, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %165, label %138, !prof !3

138:                                              ; preds = %134
  %139 = zext i32 %136 to i64
  %140 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %132, i64 %139
  br label %141

141:                                              ; preds = %159, %138
  %142 = phi %"class.WTF::String"* [ %160, %159 ], [ %132, %138 ]
  %143 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %142, i64 0, i32 0, i32 0
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %159, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %155

153:                                              ; preds = %146
  %154 = add i32 %152, -1
  store i32 %154, i32* %151, align 4
  br label %155

155:                                              ; preds = %153, %146
  %156 = phi i32 [ %154, %153 ], [ %152, %146 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #8
  br label %159

159:                                              ; preds = %158, %155, %141
  %160 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %142, i64 1
  %161 = icmp eq %"class.WTF::String"* %160, %140
  br i1 %161, label %162, label %141

162:                                              ; preds = %159
  store i32 0, i32* %89, align 4
  %163 = bitcast %"class.WTF::Vector"* %6 to i8**
  %164 = load i8*, i8** %163, align 8
  br label %165

165:                                              ; preds = %162, %134
  %166 = phi i8* [ %164, %162 ], [ %135, %134 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %166) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %88, align 8
  br label %167

167:                                              ; preds = %131, %165
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #8
  br label %1229

168:                                              ; preds = %130, %80
  %169 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %51, i64 1, i32 0
  %170 = bitcast %"class.v8::Name"** %169 to %"class.v8::Value"**
  %171 = load %"class.v8::Value"*, %"class.v8::Value"** %170, align 8
  %172 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %171) #8
  %173 = icmp eq %"class.v8::Value"* %172, null
  br i1 %173, label %174, label %180

174:                                              ; preds = %168
  %175 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %176 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %177 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %176, align 8
  %178 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %177, i64 5
  %179 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %178, align 8
  call void %179(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %175) #8
  br label %1229

180:                                              ; preds = %168
  %181 = bitcast %"class.v8::Value"* %172 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = and i64 %182, 3
  %184 = icmp eq i64 %183, 1
  br i1 %184, label %185, label %202

185:                                              ; preds = %180
  %186 = add i64 %182, -1
  %187 = inttoptr i64 %186 to i32*
  %188 = load i32, i32* %187, align 4
  %189 = and i64 %182, -4294967296
  %190 = zext i32 %188 to i64
  %191 = or i64 %189, %190
  %192 = add i64 %191, 7
  %193 = inttoptr i64 %192 to i16*
  %194 = load i16, i16* %193, align 2
  %195 = icmp eq i16 %194, 67
  br i1 %195, label %196, label %202

196:                                              ; preds = %185
  %197 = add i64 %182, 23
  %198 = inttoptr i64 %197 to i32*
  %199 = load i32, i32* %198, align 4
  %200 = and i32 %199, -2
  %201 = icmp eq i32 %200, 10
  br i1 %201, label %342, label %202

202:                                              ; preds = %185, %180, %196
  %203 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %203) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %203, i8 -86, i64 152, i1 false)
  %204 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %172, %"class.v8::Value"** %204, align 8
  %205 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %205, align 8
  %206 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %206, align 8
  %207 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %208 = bitcast %"class.std::__1::unique_ptr"* %207 to i64*
  store i64 0, i64* %208, align 8
  %209 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %209, label %210, label %320

210:                                              ; preds = %202
  %211 = load %"class.v8::Value"*, %"class.v8::Value"** %204, align 8
  %212 = icmp eq %"class.v8::Value"* %211, null
  br i1 %212, label %213, label %237, !prof !3

213:                                              ; preds = %210
  %214 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %206, align 8
  %215 = icmp eq %"class.WTF::StringImpl"* %214, null
  br i1 %215, label %216, label %218

216:                                              ; preds = %213
  %217 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 5
  br label %262

218:                                              ; preds = %213
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %214, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %220 = load atomic i32, i32* %219 monotonic, align 4
  %221 = and i32 %220, 2
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %235

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %214, i64 0, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = zext i32 %225 to i33
  %227 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %226, i33 1) #8
  %228 = extractvalue { i33, i1 } %227, 1
  %229 = extractvalue { i33, i1 } %227, 0
  %230 = icmp slt i33 %229, 0
  %231 = or i1 %228, %230
  br i1 %231, label %232, label %233, !prof !3

232:                                              ; preds = %223
  call void @llvm.trap() #8
  unreachable

233:                                              ; preds = %223
  %234 = trunc i33 %229 to i32
  store i32 %234, i32* %224, align 4
  br label %235

235:                                              ; preds = %218, %233
  %236 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 5
  br label %243

237:                                              ; preds = %210
  %238 = bitcast %"class.v8::Value"* %211 to %"class.v8::String"*
  %239 = load i32, i32* %205, align 8
  %240 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %238, i32 %239) #8
  %241 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 5
  %242 = icmp eq %"class.WTF::StringImpl"* %240, null
  br i1 %242, label %262, label %243

243:                                              ; preds = %235, %237
  %244 = phi %"class.WTF::String"* [ %236, %235 ], [ %241, %237 ]
  %245 = phi %"class.WTF::StringImpl"* [ %214, %235 ], [ %240, %237 ]
  %246 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %245, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %247 = load atomic i32, i32* %246 monotonic, align 4
  %248 = and i32 %247, 2
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %262

250:                                              ; preds = %243
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %245, i64 0, i32 0
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i33
  %254 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %253, i33 1) #8
  %255 = extractvalue { i33, i1 } %254, 1
  %256 = extractvalue { i33, i1 } %254, 0
  %257 = icmp slt i33 %256, 0
  %258 = or i1 %255, %257
  br i1 %258, label %259, label %260, !prof !3

259:                                              ; preds = %250
  call void @llvm.trap() #8
  unreachable

260:                                              ; preds = %250
  %261 = trunc i33 %256 to i32
  store i32 %261, i32* %251, align 4
  br label %262

262:                                              ; preds = %216, %260, %243, %237
  %263 = phi i1 [ false, %260 ], [ false, %243 ], [ true, %237 ], [ true, %216 ]
  %264 = phi %"class.WTF::String"* [ %244, %260 ], [ %244, %243 ], [ %241, %237 ], [ %217, %216 ]
  %265 = phi %"class.WTF::StringImpl"* [ %245, %260 ], [ %245, %243 ], [ null, %237 ], [ null, %216 ]
  %266 = ptrtoint %"class.WTF::StringImpl"* %265 to i64
  %267 = bitcast %"class.WTF::String"* %264 to i64*
  %268 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %264, i64 0, i32 0, i32 0
  %269 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %268, align 8
  store i64 %266, i64* %267, align 8
  %270 = icmp eq %"class.WTF::StringImpl"* %269, null
  br i1 %270, label %284, label %271

271:                                              ; preds = %262
  %272 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = load atomic i32, i32* %272 monotonic, align 4
  %274 = and i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 0
  %277 = load i32, i32* %276, align 4
  br i1 %275, label %278, label %280

278:                                              ; preds = %271
  %279 = add i32 %277, -1
  store i32 %279, i32* %276, align 4
  br label %280

280:                                              ; preds = %278, %271
  %281 = phi i32 [ %279, %278 ], [ %277, %271 ]
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %284

283:                                              ; preds = %280
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %269) #8
  br label %284

284:                                              ; preds = %262, %280, %283
  br i1 %263, label %298, label %285

285:                                              ; preds = %284
  %286 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %265, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %287 = load atomic i32, i32* %286 monotonic, align 4
  %288 = and i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %265, i64 0, i32 0
  %291 = load i32, i32* %290, align 4
  br i1 %289, label %292, label %294

292:                                              ; preds = %285
  %293 = add i32 %291, -1
  store i32 %293, i32* %290, align 4
  br label %294

294:                                              ; preds = %292, %285
  %295 = phi i32 [ %293, %292 ], [ %291, %285 ]
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %298

297:                                              ; preds = %294
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %265) #8
  br label %298

298:                                              ; preds = %284, %294, %297
  %299 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  store i8* null, i8** %299, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %300) #8
  br label %303

303:                                              ; preds = %302, %298
  %304 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %206, align 8
  %305 = icmp eq %"class.WTF::StringImpl"* %304, null
  br i1 %305, label %319, label %306

306:                                              ; preds = %303
  %307 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %304, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %308 = load atomic i32, i32* %307 monotonic, align 4
  %309 = and i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %304, i64 0, i32 0
  %312 = load i32, i32* %311, align 4
  br i1 %310, label %313, label %315

313:                                              ; preds = %306
  %314 = add i32 %312, -1
  store i32 %314, i32* %311, align 4
  br label %315

315:                                              ; preds = %313, %306
  %316 = phi i32 [ %314, %313 ], [ %312, %306 ]
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %319

318:                                              ; preds = %315
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %304) #8
  br label %319

319:                                              ; preds = %303, %315, %318
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %203) #8
  br label %342

320:                                              ; preds = %202
  %321 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %322 = load i8*, i8** %321, align 8
  store i8* null, i8** %321, align 8
  %323 = icmp eq i8* %322, null
  br i1 %323, label %325, label %324

324:                                              ; preds = %320
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %322) #8
  br label %325

325:                                              ; preds = %324, %320
  %326 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %206, align 8
  %327 = icmp eq %"class.WTF::StringImpl"* %326, null
  br i1 %327, label %341, label %328

328:                                              ; preds = %325
  %329 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %326, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %330 = load atomic i32, i32* %329 monotonic, align 4
  %331 = and i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %326, i64 0, i32 0
  %334 = load i32, i32* %333, align 4
  br i1 %332, label %335, label %337

335:                                              ; preds = %328
  %336 = add i32 %334, -1
  store i32 %336, i32* %333, align 4
  br label %337

337:                                              ; preds = %335, %328
  %338 = phi i32 [ %336, %335 ], [ %334, %328 ]
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %341

340:                                              ; preds = %337
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %326) #8
  br label %341

341:                                              ; preds = %325, %337, %340
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %203) #8
  br label %1229

342:                                              ; preds = %319, %196
  %343 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %51, i64 2, i32 0
  %344 = bitcast %"class.v8::Name"** %343 to %"class.v8::Value"**
  %345 = load %"class.v8::Value"*, %"class.v8::Value"** %344, align 8
  %346 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %345) #8
  %347 = icmp eq %"class.v8::Value"* %346, null
  br i1 %347, label %348, label %354

348:                                              ; preds = %342
  %349 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %350 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %351 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %350, align 8
  %352 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %351, i64 5
  %353 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %352, align 8
  call void %353(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %349) #8
  br label %1229

354:                                              ; preds = %342
  %355 = bitcast %"class.v8::Value"* %346 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = and i64 %356, 3
  %358 = icmp eq i64 %357, 1
  br i1 %358, label %359, label %376

359:                                              ; preds = %354
  %360 = add i64 %356, -1
  %361 = inttoptr i64 %360 to i32*
  %362 = load i32, i32* %361, align 4
  %363 = and i64 %356, -4294967296
  %364 = zext i32 %362 to i64
  %365 = or i64 %363, %364
  %366 = add i64 %365, 7
  %367 = inttoptr i64 %366 to i16*
  %368 = load i16, i16* %367, align 2
  %369 = icmp eq i16 %368, 67
  br i1 %369, label %370, label %376

370:                                              ; preds = %359
  %371 = add i64 %356, 23
  %372 = inttoptr i64 %371 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = and i32 %373, -2
  %375 = icmp eq i32 %374, 10
  br i1 %375, label %392, label %376

376:                                              ; preds = %359, %354, %370
  %377 = call zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"* nonnull %346) #8
  br i1 %377, label %378, label %381, !prof !2

378:                                              ; preds = %376
  %379 = bitcast %"class.v8::Value"* %346 to %"class.v8::Boolean"*
  %380 = call zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"* nonnull %379) #8
  br label %383

381:                                              ; preds = %376
  %382 = call zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"* nonnull %346, %"class.v8::Isolate"* %0) #8
  br label %383

383:                                              ; preds = %378, %381
  %384 = phi i1 [ %380, %378 ], [ %382, %381 ]
  %385 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %386 = load i32, i32* %385, align 8
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %1229

388:                                              ; preds = %383
  %389 = zext i1 %384 to i8
  %390 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 6
  store i8 %389, i8* %390, align 8
  %391 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 2
  store i8 1, i8* %391, align 1
  br label %392

392:                                              ; preds = %388, %370
  %393 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %51, i64 3, i32 0
  %394 = bitcast %"class.v8::Name"** %393 to %"class.v8::Value"**
  %395 = load %"class.v8::Value"*, %"class.v8::Value"** %394, align 8
  %396 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %395) #8
  %397 = icmp eq %"class.v8::Value"* %396, null
  br i1 %397, label %398, label %404

398:                                              ; preds = %392
  %399 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %400 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %401 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %400, align 8
  %402 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %401, i64 5
  %403 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %402, align 8
  call void %403(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %399) #8
  br label %1229

404:                                              ; preds = %392
  %405 = bitcast %"class.v8::Value"* %396 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = and i64 %406, 3
  %408 = icmp eq i64 %407, 1
  br i1 %408, label %409, label %426

409:                                              ; preds = %404
  %410 = add i64 %406, -1
  %411 = inttoptr i64 %410 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = and i64 %406, -4294967296
  %414 = zext i32 %412 to i64
  %415 = or i64 %413, %414
  %416 = add i64 %415, 7
  %417 = inttoptr i64 %416 to i16*
  %418 = load i16, i16* %417, align 2
  %419 = icmp eq i16 %418, 67
  br i1 %419, label %420, label %426

420:                                              ; preds = %409
  %421 = add i64 %406, 23
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422, align 4
  %424 = and i32 %423, -2
  %425 = icmp eq i32 %424, 10
  br i1 %425, label %508, label %426

426:                                              ; preds = %409, %404, %420
  %427 = bitcast %"class.WTF::Vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %427) #8
  %428 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  %429 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 2
  %430 = bitcast %"class.WTF::Vector"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %430, i8 -86, i64 16, i1 false)
  call void @_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE(%"class.WTF::Vector"* nonnull sret %8, %"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %396, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %431 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %432 = load i32, i32* %431, align 8
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %471

434:                                              ; preds = %426
  call void @_ZN5blink10TrustToken10setIssuersERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::TrustToken"* %2, %"class.WTF::Vector"* nonnull dereferenceable(16) %8) #8
  %435 = load %"class.WTF::String"*, %"class.WTF::String"** %428, align 8
  %436 = icmp eq %"class.WTF::String"* %435, null
  br i1 %436, label %470, label %437, !prof !2

437:                                              ; preds = %434
  %438 = bitcast %"class.WTF::String"* %435 to i8*
  %439 = load i32, i32* %429, align 4
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %468, label %441, !prof !3

441:                                              ; preds = %437
  %442 = zext i32 %439 to i64
  %443 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %435, i64 %442
  br label %444

444:                                              ; preds = %462, %441
  %445 = phi %"class.WTF::String"* [ %463, %462 ], [ %435, %441 ]
  %446 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %445, i64 0, i32 0, i32 0
  %447 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %446, align 8
  %448 = icmp eq %"class.WTF::StringImpl"* %447, null
  br i1 %448, label %462, label %449

449:                                              ; preds = %444
  %450 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %447, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %451 = load atomic i32, i32* %450 monotonic, align 4
  %452 = and i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %447, i64 0, i32 0
  %455 = load i32, i32* %454, align 4
  br i1 %453, label %456, label %458

456:                                              ; preds = %449
  %457 = add i32 %455, -1
  store i32 %457, i32* %454, align 4
  br label %458

458:                                              ; preds = %456, %449
  %459 = phi i32 [ %457, %456 ], [ %455, %449 ]
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %462

461:                                              ; preds = %458
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %447) #8
  br label %462

462:                                              ; preds = %461, %458, %444
  %463 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %445, i64 1
  %464 = icmp eq %"class.WTF::String"* %463, %443
  br i1 %464, label %465, label %444

465:                                              ; preds = %462
  store i32 0, i32* %429, align 4
  %466 = bitcast %"class.WTF::Vector"* %8 to i8**
  %467 = load i8*, i8** %466, align 8
  br label %468

468:                                              ; preds = %465, %437
  %469 = phi i8* [ %467, %465 ], [ %438, %437 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %469) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %428, align 8
  br label %470

470:                                              ; preds = %434, %468
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %427) #8
  br label %508

471:                                              ; preds = %426
  %472 = load %"class.WTF::String"*, %"class.WTF::String"** %428, align 8
  %473 = icmp eq %"class.WTF::String"* %472, null
  br i1 %473, label %507, label %474, !prof !2

474:                                              ; preds = %471
  %475 = bitcast %"class.WTF::String"* %472 to i8*
  %476 = load i32, i32* %429, align 4
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %505, label %478, !prof !3

478:                                              ; preds = %474
  %479 = zext i32 %476 to i64
  %480 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %472, i64 %479
  br label %481

481:                                              ; preds = %499, %478
  %482 = phi %"class.WTF::String"* [ %500, %499 ], [ %472, %478 ]
  %483 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %482, i64 0, i32 0, i32 0
  %484 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %483, align 8
  %485 = icmp eq %"class.WTF::StringImpl"* %484, null
  br i1 %485, label %499, label %486

486:                                              ; preds = %481
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %488 = load atomic i32, i32* %487 monotonic, align 4
  %489 = and i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %492 = load i32, i32* %491, align 4
  br i1 %490, label %493, label %495

493:                                              ; preds = %486
  %494 = add i32 %492, -1
  store i32 %494, i32* %491, align 4
  br label %495

495:                                              ; preds = %493, %486
  %496 = phi i32 [ %494, %493 ], [ %492, %486 ]
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %498, label %499

498:                                              ; preds = %495
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %484) #8
  br label %499

499:                                              ; preds = %498, %495, %481
  %500 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %482, i64 1
  %501 = icmp eq %"class.WTF::String"* %500, %480
  br i1 %501, label %502, label %481

502:                                              ; preds = %499
  store i32 0, i32* %429, align 4
  %503 = bitcast %"class.WTF::Vector"* %8 to i8**
  %504 = load i8*, i8** %503, align 8
  br label %505

505:                                              ; preds = %502, %474
  %506 = phi i8* [ %504, %502 ], [ %475, %474 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %506) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %428, align 8
  br label %507

507:                                              ; preds = %471, %505
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %427) #8
  br label %1229

508:                                              ; preds = %470, %420
  %509 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %51, i64 4, i32 0
  %510 = bitcast %"class.v8::Name"** %509 to %"class.v8::Value"**
  %511 = load %"class.v8::Value"*, %"class.v8::Value"** %510, align 8
  %512 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %511) #8
  %513 = icmp eq %"class.v8::Value"* %512, null
  br i1 %513, label %514, label %520

514:                                              ; preds = %508
  %515 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %516 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %517 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %516, align 8
  %518 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %517, i64 5
  %519 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %518, align 8
  call void %519(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %515) #8
  br label %1229

520:                                              ; preds = %508
  %521 = bitcast %"class.v8::Value"* %512 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = and i64 %522, 3
  %524 = icmp eq i64 %523, 1
  br i1 %524, label %525, label %542

525:                                              ; preds = %520
  %526 = add i64 %522, -1
  %527 = inttoptr i64 %526 to i32*
  %528 = load i32, i32* %527, align 4
  %529 = and i64 %522, -4294967296
  %530 = zext i32 %528 to i64
  %531 = or i64 %529, %530
  %532 = add i64 %531, 7
  %533 = inttoptr i64 %532 to i16*
  %534 = load i16, i16* %533, align 2
  %535 = icmp eq i16 %534, 67
  br i1 %535, label %536, label %542

536:                                              ; preds = %525
  %537 = add i64 %522, 23
  %538 = inttoptr i64 %537 to i32*
  %539 = load i32, i32* %538, align 4
  %540 = and i32 %539, -2
  %541 = icmp eq i32 %540, 10
  br i1 %541, label %748, label %542

542:                                              ; preds = %525, %520, %536
  %543 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %543) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %543, i8 -86, i64 152, i1 false)
  %544 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %512, %"class.v8::Value"** %544, align 8
  %545 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %545, align 8
  %546 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %546, align 8
  %547 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %548 = bitcast %"class.std::__1::unique_ptr"* %547 to i64*
  store i64 0, i64* %548, align 8
  %549 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %549, label %550, label %726

550:                                              ; preds = %542
  %551 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %551) #8
  %552 = load %"class.v8::Value"*, %"class.v8::Value"** %544, align 8
  %553 = icmp eq %"class.v8::Value"* %552, null
  br i1 %553, label %558, label %554, !prof !3

554:                                              ; preds = %550
  %555 = bitcast %"class.v8::Value"* %552 to %"class.v8::String"*
  %556 = load i32, i32* %545, align 8
  %557 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %555, i32 %556) #8
  br label %578

558:                                              ; preds = %550
  %559 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  %560 = icmp eq %"class.WTF::StringImpl"* %559, null
  br i1 %560, label %578, label %561

561:                                              ; preds = %558
  %562 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %559, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %563 = load atomic i32, i32* %562 monotonic, align 4
  %564 = and i32 %563, 2
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %566, label %578

566:                                              ; preds = %561
  %567 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %559, i64 0, i32 0
  %568 = load i32, i32* %567, align 4
  %569 = zext i32 %568 to i33
  %570 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %569, i33 1) #8
  %571 = extractvalue { i33, i1 } %570, 1
  %572 = extractvalue { i33, i1 } %570, 0
  %573 = icmp slt i33 %572, 0
  %574 = or i1 %571, %573
  br i1 %574, label %575, label %576, !prof !3

575:                                              ; preds = %566
  call void @llvm.trap() #8
  unreachable

576:                                              ; preds = %566
  %577 = trunc i33 %572 to i32
  store i32 %577, i32* %567, align 4
  br label %578

578:                                              ; preds = %554, %558, %561, %576
  %579 = phi %"class.WTF::StringImpl"* [ %557, %554 ], [ null, %558 ], [ %559, %561 ], [ %559, %576 ]
  %580 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %579, %"class.WTF::StringImpl"** %580, align 8
  %581 = bitcast %"class.WTF::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %581) #8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i64 13) #8
  %582 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %10, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateEE12kValidValues, i64 0, i64 0), i64 2, %"class.WTF::String"* nonnull dereferenceable(8) %11, %"class.blink::ExceptionState"* dereferenceable(72) %3) #8
  %583 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %584 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %583, align 8
  %585 = icmp eq %"class.WTF::StringImpl"* %584, null
  br i1 %585, label %599, label %586

586:                                              ; preds = %578
  %587 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %588 = load atomic i32, i32* %587 monotonic, align 4
  %589 = and i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %592 = load i32, i32* %591, align 4
  br i1 %590, label %593, label %595

593:                                              ; preds = %586
  %594 = add i32 %592, -1
  store i32 %594, i32* %591, align 4
  br label %595

595:                                              ; preds = %593, %586
  %596 = phi i32 [ %594, %593 ], [ %592, %586 ]
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %598, label %599

598:                                              ; preds = %595
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %584) #8
  br label %599

599:                                              ; preds = %578, %595, %598
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %581) #8
  %600 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %580, align 8
  %601 = icmp eq %"class.WTF::StringImpl"* %600, null
  br i1 %601, label %615, label %602

602:                                              ; preds = %599
  %603 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %600, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %604 = load atomic i32, i32* %603 monotonic, align 4
  %605 = and i32 %604, 2
  %606 = icmp eq i32 %605, 0
  %607 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %600, i64 0, i32 0
  %608 = load i32, i32* %607, align 4
  br i1 %606, label %609, label %611

609:                                              ; preds = %602
  %610 = add i32 %608, -1
  store i32 %610, i32* %607, align 4
  br label %611

611:                                              ; preds = %609, %602
  %612 = phi i32 [ %610, %609 ], [ %608, %602 ]
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %614, label %615

614:                                              ; preds = %611
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %600) #8
  br label %615

615:                                              ; preds = %599, %611, %614
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %551) #8
  br i1 %582, label %616, label %726

616:                                              ; preds = %615
  %617 = load %"class.v8::Value"*, %"class.v8::Value"** %544, align 8
  %618 = icmp eq %"class.v8::Value"* %617, null
  br i1 %618, label %619, label %643, !prof !3

619:                                              ; preds = %616
  %620 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  %621 = icmp eq %"class.WTF::StringImpl"* %620, null
  br i1 %621, label %622, label %624

622:                                              ; preds = %619
  %623 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 8
  br label %668

624:                                              ; preds = %619
  %625 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %620, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %626 = load atomic i32, i32* %625 monotonic, align 4
  %627 = and i32 %626, 2
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %629, label %641

629:                                              ; preds = %624
  %630 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %620, i64 0, i32 0
  %631 = load i32, i32* %630, align 4
  %632 = zext i32 %631 to i33
  %633 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %632, i33 1) #8
  %634 = extractvalue { i33, i1 } %633, 1
  %635 = extractvalue { i33, i1 } %633, 0
  %636 = icmp slt i33 %635, 0
  %637 = or i1 %634, %636
  br i1 %637, label %638, label %639, !prof !3

638:                                              ; preds = %629
  call void @llvm.trap() #8
  unreachable

639:                                              ; preds = %629
  %640 = trunc i33 %635 to i32
  store i32 %640, i32* %630, align 4
  br label %641

641:                                              ; preds = %624, %639
  %642 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 8
  br label %649

643:                                              ; preds = %616
  %644 = bitcast %"class.v8::Value"* %617 to %"class.v8::String"*
  %645 = load i32, i32* %545, align 8
  %646 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %644, i32 %645) #8
  %647 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 8
  %648 = icmp eq %"class.WTF::StringImpl"* %646, null
  br i1 %648, label %668, label %649

649:                                              ; preds = %641, %643
  %650 = phi %"class.WTF::String"* [ %642, %641 ], [ %647, %643 ]
  %651 = phi %"class.WTF::StringImpl"* [ %620, %641 ], [ %646, %643 ]
  %652 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %651, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %653 = load atomic i32, i32* %652 monotonic, align 4
  %654 = and i32 %653, 2
  %655 = icmp eq i32 %654, 0
  br i1 %655, label %656, label %668

656:                                              ; preds = %649
  %657 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %651, i64 0, i32 0
  %658 = load i32, i32* %657, align 4
  %659 = zext i32 %658 to i33
  %660 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %659, i33 1) #8
  %661 = extractvalue { i33, i1 } %660, 1
  %662 = extractvalue { i33, i1 } %660, 0
  %663 = icmp slt i33 %662, 0
  %664 = or i1 %661, %663
  br i1 %664, label %665, label %666, !prof !3

665:                                              ; preds = %656
  call void @llvm.trap() #8
  unreachable

666:                                              ; preds = %656
  %667 = trunc i33 %662 to i32
  store i32 %667, i32* %657, align 4
  br label %668

668:                                              ; preds = %622, %666, %649, %643
  %669 = phi i1 [ false, %666 ], [ false, %649 ], [ true, %643 ], [ true, %622 ]
  %670 = phi %"class.WTF::String"* [ %650, %666 ], [ %650, %649 ], [ %647, %643 ], [ %623, %622 ]
  %671 = phi %"class.WTF::StringImpl"* [ %651, %666 ], [ %651, %649 ], [ null, %643 ], [ null, %622 ]
  %672 = ptrtoint %"class.WTF::StringImpl"* %671 to i64
  %673 = bitcast %"class.WTF::String"* %670 to i64*
  %674 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %670, i64 0, i32 0, i32 0
  %675 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %674, align 8
  store i64 %672, i64* %673, align 8
  %676 = icmp eq %"class.WTF::StringImpl"* %675, null
  br i1 %676, label %690, label %677

677:                                              ; preds = %668
  %678 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %675, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %679 = load atomic i32, i32* %678 monotonic, align 4
  %680 = and i32 %679, 2
  %681 = icmp eq i32 %680, 0
  %682 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %675, i64 0, i32 0
  %683 = load i32, i32* %682, align 4
  br i1 %681, label %684, label %686

684:                                              ; preds = %677
  %685 = add i32 %683, -1
  store i32 %685, i32* %682, align 4
  br label %686

686:                                              ; preds = %684, %677
  %687 = phi i32 [ %685, %684 ], [ %683, %677 ]
  %688 = icmp eq i32 %687, 0
  br i1 %688, label %689, label %690

689:                                              ; preds = %686
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %675) #8
  br label %690

690:                                              ; preds = %668, %686, %689
  br i1 %669, label %704, label %691

691:                                              ; preds = %690
  %692 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %671, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %693 = load atomic i32, i32* %692 monotonic, align 4
  %694 = and i32 %693, 2
  %695 = icmp eq i32 %694, 0
  %696 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %671, i64 0, i32 0
  %697 = load i32, i32* %696, align 4
  br i1 %695, label %698, label %700

698:                                              ; preds = %691
  %699 = add i32 %697, -1
  store i32 %699, i32* %696, align 4
  br label %700

700:                                              ; preds = %698, %691
  %701 = phi i32 [ %699, %698 ], [ %697, %691 ]
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %703, label %704

703:                                              ; preds = %700
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %671) #8
  br label %704

704:                                              ; preds = %690, %700, %703
  %705 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %706 = load i8*, i8** %705, align 8
  store i8* null, i8** %705, align 8
  %707 = icmp eq i8* %706, null
  br i1 %707, label %709, label %708

708:                                              ; preds = %704
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %706) #8
  br label %709

709:                                              ; preds = %708, %704
  %710 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  %711 = icmp eq %"class.WTF::StringImpl"* %710, null
  br i1 %711, label %725, label %712

712:                                              ; preds = %709
  %713 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %710, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %714 = load atomic i32, i32* %713 monotonic, align 4
  %715 = and i32 %714, 2
  %716 = icmp eq i32 %715, 0
  %717 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %710, i64 0, i32 0
  %718 = load i32, i32* %717, align 4
  br i1 %716, label %719, label %721

719:                                              ; preds = %712
  %720 = add i32 %718, -1
  store i32 %720, i32* %717, align 4
  br label %721

721:                                              ; preds = %719, %712
  %722 = phi i32 [ %720, %719 ], [ %718, %712 ]
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %724, label %725

724:                                              ; preds = %721
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %710) #8
  br label %725

725:                                              ; preds = %709, %721, %724
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %543) #8
  br label %748

726:                                              ; preds = %615, %542
  %727 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %728 = load i8*, i8** %727, align 8
  store i8* null, i8** %727, align 8
  %729 = icmp eq i8* %728, null
  br i1 %729, label %731, label %730

730:                                              ; preds = %726
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %728) #8
  br label %731

731:                                              ; preds = %730, %726
  %732 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  %733 = icmp eq %"class.WTF::StringImpl"* %732, null
  br i1 %733, label %747, label %734

734:                                              ; preds = %731
  %735 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %732, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %736 = load atomic i32, i32* %735 monotonic, align 4
  %737 = and i32 %736, 2
  %738 = icmp eq i32 %737, 0
  %739 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %732, i64 0, i32 0
  %740 = load i32, i32* %739, align 4
  br i1 %738, label %741, label %743

741:                                              ; preds = %734
  %742 = add i32 %740, -1
  store i32 %742, i32* %739, align 4
  br label %743

743:                                              ; preds = %741, %734
  %744 = phi i32 [ %742, %741 ], [ %740, %734 ]
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %746, label %747

746:                                              ; preds = %743
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %732) #8
  br label %747

747:                                              ; preds = %731, %743, %746
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %543) #8
  br label %1229

748:                                              ; preds = %725, %536
  %749 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %51, i64 5, i32 0
  %750 = bitcast %"class.v8::Name"** %749 to %"class.v8::Value"**
  %751 = load %"class.v8::Value"*, %"class.v8::Value"** %750, align 8
  %752 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %751) #8
  %753 = icmp eq %"class.v8::Value"* %752, null
  br i1 %753, label %754, label %760

754:                                              ; preds = %748
  %755 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %756 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %757 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %756, align 8
  %758 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %757, i64 5
  %759 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %758, align 8
  call void %759(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %755) #8
  br label %1229

760:                                              ; preds = %748
  %761 = bitcast %"class.v8::Value"* %752 to i64*
  %762 = load i64, i64* %761, align 8
  %763 = and i64 %762, 3
  %764 = icmp eq i64 %763, 1
  br i1 %764, label %765, label %782

765:                                              ; preds = %760
  %766 = add i64 %762, -1
  %767 = inttoptr i64 %766 to i32*
  %768 = load i32, i32* %767, align 4
  %769 = and i64 %762, -4294967296
  %770 = zext i32 %768 to i64
  %771 = or i64 %769, %770
  %772 = add i64 %771, 7
  %773 = inttoptr i64 %772 to i16*
  %774 = load i16, i16* %773, align 2
  %775 = icmp eq i16 %774, 67
  br i1 %775, label %776, label %782

776:                                              ; preds = %765
  %777 = add i64 %762, 23
  %778 = inttoptr i64 %777 to i32*
  %779 = load i32, i32* %778, align 4
  %780 = and i32 %779, -2
  %781 = icmp eq i32 %780, 10
  br i1 %781, label %988, label %782

782:                                              ; preds = %765, %760, %776
  %783 = bitcast %"class.blink::V8StringResource"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %783) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %783, i8 -86, i64 152, i1 false)
  %784 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %752, %"class.v8::Value"** %784, align 8
  %785 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 1
  store i32 0, i32* %785, align 8
  %786 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %786, align 8
  %787 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1
  %788 = bitcast %"class.std::__1::unique_ptr"* %787 to i64*
  store i64 0, i64* %788, align 8
  %789 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %12, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %789, label %790, label %966

790:                                              ; preds = %782
  %791 = bitcast %"class.WTF::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %791) #8
  %792 = load %"class.v8::Value"*, %"class.v8::Value"** %784, align 8
  %793 = icmp eq %"class.v8::Value"* %792, null
  br i1 %793, label %798, label %794, !prof !3

794:                                              ; preds = %790
  %795 = bitcast %"class.v8::Value"* %792 to %"class.v8::String"*
  %796 = load i32, i32* %785, align 8
  %797 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %795, i32 %796) #8
  br label %818

798:                                              ; preds = %790
  %799 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %786, align 8
  %800 = icmp eq %"class.WTF::StringImpl"* %799, null
  br i1 %800, label %818, label %801

801:                                              ; preds = %798
  %802 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %799, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %803 = load atomic i32, i32* %802 monotonic, align 4
  %804 = and i32 %803, 2
  %805 = icmp eq i32 %804, 0
  br i1 %805, label %806, label %818

806:                                              ; preds = %801
  %807 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %799, i64 0, i32 0
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i33
  %810 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %809, i33 1) #8
  %811 = extractvalue { i33, i1 } %810, 1
  %812 = extractvalue { i33, i1 } %810, 0
  %813 = icmp slt i33 %812, 0
  %814 = or i1 %811, %813
  br i1 %814, label %815, label %816, !prof !3

815:                                              ; preds = %806
  call void @llvm.trap() #8
  unreachable

816:                                              ; preds = %806
  %817 = trunc i33 %812 to i32
  store i32 %817, i32* %807, align 4
  br label %818

818:                                              ; preds = %794, %798, %801, %816
  %819 = phi %"class.WTF::StringImpl"* [ %797, %794 ], [ null, %798 ], [ %799, %801 ], [ %799, %816 ]
  %820 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %819, %"class.WTF::StringImpl"** %820, align 8
  %821 = bitcast %"class.WTF::String"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %821) #8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15) #8
  %822 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %13, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @_ZZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateEE12kValidValues_0, i64 0, i64 0), i64 3, %"class.WTF::String"* nonnull dereferenceable(8) %14, %"class.blink::ExceptionState"* dereferenceable(72) %3) #8
  %823 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %824 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %823, align 8
  %825 = icmp eq %"class.WTF::StringImpl"* %824, null
  br i1 %825, label %839, label %826

826:                                              ; preds = %818
  %827 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %824, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %828 = load atomic i32, i32* %827 monotonic, align 4
  %829 = and i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %824, i64 0, i32 0
  %832 = load i32, i32* %831, align 4
  br i1 %830, label %833, label %835

833:                                              ; preds = %826
  %834 = add i32 %832, -1
  store i32 %834, i32* %831, align 4
  br label %835

835:                                              ; preds = %833, %826
  %836 = phi i32 [ %834, %833 ], [ %832, %826 ]
  %837 = icmp eq i32 %836, 0
  br i1 %837, label %838, label %839

838:                                              ; preds = %835
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %824) #8
  br label %839

839:                                              ; preds = %818, %835, %838
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %821) #8
  %840 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %820, align 8
  %841 = icmp eq %"class.WTF::StringImpl"* %840, null
  br i1 %841, label %855, label %842

842:                                              ; preds = %839
  %843 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %840, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %844 = load atomic i32, i32* %843 monotonic, align 4
  %845 = and i32 %844, 2
  %846 = icmp eq i32 %845, 0
  %847 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %840, i64 0, i32 0
  %848 = load i32, i32* %847, align 4
  br i1 %846, label %849, label %851

849:                                              ; preds = %842
  %850 = add i32 %848, -1
  store i32 %850, i32* %847, align 4
  br label %851

851:                                              ; preds = %849, %842
  %852 = phi i32 [ %850, %849 ], [ %848, %842 ]
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %854, label %855

854:                                              ; preds = %851
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %840) #8
  br label %855

855:                                              ; preds = %839, %851, %854
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %791) #8
  br i1 %822, label %856, label %966

856:                                              ; preds = %855
  %857 = load %"class.v8::Value"*, %"class.v8::Value"** %784, align 8
  %858 = icmp eq %"class.v8::Value"* %857, null
  br i1 %858, label %859, label %883, !prof !3

859:                                              ; preds = %856
  %860 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %786, align 8
  %861 = icmp eq %"class.WTF::StringImpl"* %860, null
  br i1 %861, label %862, label %864

862:                                              ; preds = %859
  %863 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 9
  br label %908

864:                                              ; preds = %859
  %865 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %860, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %866 = load atomic i32, i32* %865 monotonic, align 4
  %867 = and i32 %866, 2
  %868 = icmp eq i32 %867, 0
  br i1 %868, label %869, label %881

869:                                              ; preds = %864
  %870 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %860, i64 0, i32 0
  %871 = load i32, i32* %870, align 4
  %872 = zext i32 %871 to i33
  %873 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %872, i33 1) #8
  %874 = extractvalue { i33, i1 } %873, 1
  %875 = extractvalue { i33, i1 } %873, 0
  %876 = icmp slt i33 %875, 0
  %877 = or i1 %874, %876
  br i1 %877, label %878, label %879, !prof !3

878:                                              ; preds = %869
  call void @llvm.trap() #8
  unreachable

879:                                              ; preds = %869
  %880 = trunc i33 %875 to i32
  store i32 %880, i32* %870, align 4
  br label %881

881:                                              ; preds = %864, %879
  %882 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 9
  br label %889

883:                                              ; preds = %856
  %884 = bitcast %"class.v8::Value"* %857 to %"class.v8::String"*
  %885 = load i32, i32* %785, align 8
  %886 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %884, i32 %885) #8
  %887 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 9
  %888 = icmp eq %"class.WTF::StringImpl"* %886, null
  br i1 %888, label %908, label %889

889:                                              ; preds = %881, %883
  %890 = phi %"class.WTF::String"* [ %882, %881 ], [ %887, %883 ]
  %891 = phi %"class.WTF::StringImpl"* [ %860, %881 ], [ %886, %883 ]
  %892 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %891, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %893 = load atomic i32, i32* %892 monotonic, align 4
  %894 = and i32 %893, 2
  %895 = icmp eq i32 %894, 0
  br i1 %895, label %896, label %908

896:                                              ; preds = %889
  %897 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %891, i64 0, i32 0
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i33
  %900 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %899, i33 1) #8
  %901 = extractvalue { i33, i1 } %900, 1
  %902 = extractvalue { i33, i1 } %900, 0
  %903 = icmp slt i33 %902, 0
  %904 = or i1 %901, %903
  br i1 %904, label %905, label %906, !prof !3

905:                                              ; preds = %896
  call void @llvm.trap() #8
  unreachable

906:                                              ; preds = %896
  %907 = trunc i33 %902 to i32
  store i32 %907, i32* %897, align 4
  br label %908

908:                                              ; preds = %862, %906, %889, %883
  %909 = phi i1 [ false, %906 ], [ false, %889 ], [ true, %883 ], [ true, %862 ]
  %910 = phi %"class.WTF::String"* [ %890, %906 ], [ %890, %889 ], [ %887, %883 ], [ %863, %862 ]
  %911 = phi %"class.WTF::StringImpl"* [ %891, %906 ], [ %891, %889 ], [ null, %883 ], [ null, %862 ]
  %912 = ptrtoint %"class.WTF::StringImpl"* %911 to i64
  %913 = bitcast %"class.WTF::String"* %910 to i64*
  %914 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %910, i64 0, i32 0, i32 0
  %915 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %914, align 8
  store i64 %912, i64* %913, align 8
  %916 = icmp eq %"class.WTF::StringImpl"* %915, null
  br i1 %916, label %930, label %917

917:                                              ; preds = %908
  %918 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %915, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %919 = load atomic i32, i32* %918 monotonic, align 4
  %920 = and i32 %919, 2
  %921 = icmp eq i32 %920, 0
  %922 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %915, i64 0, i32 0
  %923 = load i32, i32* %922, align 4
  br i1 %921, label %924, label %926

924:                                              ; preds = %917
  %925 = add i32 %923, -1
  store i32 %925, i32* %922, align 4
  br label %926

926:                                              ; preds = %924, %917
  %927 = phi i32 [ %925, %924 ], [ %923, %917 ]
  %928 = icmp eq i32 %927, 0
  br i1 %928, label %929, label %930

929:                                              ; preds = %926
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %915) #8
  br label %930

930:                                              ; preds = %908, %926, %929
  br i1 %909, label %944, label %931

931:                                              ; preds = %930
  %932 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %911, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %933 = load atomic i32, i32* %932 monotonic, align 4
  %934 = and i32 %933, 2
  %935 = icmp eq i32 %934, 0
  %936 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %911, i64 0, i32 0
  %937 = load i32, i32* %936, align 4
  br i1 %935, label %938, label %940

938:                                              ; preds = %931
  %939 = add i32 %937, -1
  store i32 %939, i32* %936, align 4
  br label %940

940:                                              ; preds = %938, %931
  %941 = phi i32 [ %939, %938 ], [ %937, %931 ]
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %943, label %944

943:                                              ; preds = %940
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %911) #8
  br label %944

944:                                              ; preds = %930, %940, %943
  %945 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %946 = load i8*, i8** %945, align 8
  store i8* null, i8** %945, align 8
  %947 = icmp eq i8* %946, null
  br i1 %947, label %949, label %948

948:                                              ; preds = %944
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %946) #8
  br label %949

949:                                              ; preds = %948, %944
  %950 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %786, align 8
  %951 = icmp eq %"class.WTF::StringImpl"* %950, null
  br i1 %951, label %965, label %952

952:                                              ; preds = %949
  %953 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %950, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %954 = load atomic i32, i32* %953 monotonic, align 4
  %955 = and i32 %954, 2
  %956 = icmp eq i32 %955, 0
  %957 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %950, i64 0, i32 0
  %958 = load i32, i32* %957, align 4
  br i1 %956, label %959, label %961

959:                                              ; preds = %952
  %960 = add i32 %958, -1
  store i32 %960, i32* %957, align 4
  br label %961

961:                                              ; preds = %959, %952
  %962 = phi i32 [ %960, %959 ], [ %958, %952 ]
  %963 = icmp eq i32 %962, 0
  br i1 %963, label %964, label %965

964:                                              ; preds = %961
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %950) #8
  br label %965

965:                                              ; preds = %949, %961, %964
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %783) #8
  br label %988

966:                                              ; preds = %855, %782
  %967 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %968 = load i8*, i8** %967, align 8
  store i8* null, i8** %967, align 8
  %969 = icmp eq i8* %968, null
  br i1 %969, label %971, label %970

970:                                              ; preds = %966
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %968) #8
  br label %971

971:                                              ; preds = %970, %966
  %972 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %786, align 8
  %973 = icmp eq %"class.WTF::StringImpl"* %972, null
  br i1 %973, label %987, label %974

974:                                              ; preds = %971
  %975 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %972, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %976 = load atomic i32, i32* %975 monotonic, align 4
  %977 = and i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %972, i64 0, i32 0
  %980 = load i32, i32* %979, align 4
  br i1 %978, label %981, label %983

981:                                              ; preds = %974
  %982 = add i32 %980, -1
  store i32 %982, i32* %979, align 4
  br label %983

983:                                              ; preds = %981, %974
  %984 = phi i32 [ %982, %981 ], [ %980, %974 ]
  %985 = icmp eq i32 %984, 0
  br i1 %985, label %986, label %987

986:                                              ; preds = %983
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %972) #8
  br label %987

987:                                              ; preds = %971, %983, %986
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %783) #8
  br label %1229

988:                                              ; preds = %965, %776
  %989 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %51, i64 6, i32 0
  %990 = bitcast %"class.v8::Name"** %989 to %"class.v8::Value"**
  %991 = load %"class.v8::Value"*, %"class.v8::Value"** %990, align 8
  %992 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %45, %"class.v8::Context"* %53, %"class.v8::Value"* %991) #8
  %993 = icmp eq %"class.v8::Value"* %992, null
  br i1 %993, label %994, label %1000

994:                                              ; preds = %988
  %995 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #8
  %996 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %997 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %996, align 8
  %998 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %997, i64 5
  %999 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %998, align 8
  call void %999(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %995) #8
  br label %1229

1000:                                             ; preds = %988
  %1001 = bitcast %"class.v8::Value"* %992 to i64*
  %1002 = load i64, i64* %1001, align 8
  %1003 = and i64 %1002, 3
  %1004 = icmp eq i64 %1003, 1
  br i1 %1004, label %1005, label %1023

1005:                                             ; preds = %1000
  %1006 = add i64 %1002, -1
  %1007 = inttoptr i64 %1006 to i32*
  %1008 = load i32, i32* %1007, align 4
  %1009 = and i64 %1002, -4294967296
  %1010 = zext i32 %1008 to i64
  %1011 = or i64 %1009, %1010
  %1012 = add i64 %1011, 7
  %1013 = inttoptr i64 %1012 to i16*
  %1014 = load i16, i16* %1013, align 2
  %1015 = icmp eq i16 %1014, 67
  br i1 %1015, label %1016, label %1023

1016:                                             ; preds = %1005
  %1017 = add i64 %1002, 23
  %1018 = inttoptr i64 %1017 to i32*
  %1019 = load i32, i32* %1018, align 4
  %1020 = and i32 %1019, -2
  %1021 = icmp eq i32 %1020, 10
  br i1 %1021, label %1022, label %1023

1022:                                             ; preds = %1016
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0)) #8
  br label %1229

1023:                                             ; preds = %1005, %1000, %1016
  %1024 = bitcast %"class.blink::V8StringResource"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1024) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1024, i8 -86, i64 152, i1 false)
  %1025 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %992, %"class.v8::Value"** %1025, align 8
  %1026 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 1
  store i32 0, i32* %1026, align 8
  %1027 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1027, align 8
  %1028 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1
  %1029 = bitcast %"class.std::__1::unique_ptr"* %1028 to i64*
  store i64 0, i64* %1029, align 8
  %1030 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1030, label %1031, label %1207

1031:                                             ; preds = %1023
  %1032 = bitcast %"class.WTF::String"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1032) #8
  %1033 = load %"class.v8::Value"*, %"class.v8::Value"** %1025, align 8
  %1034 = icmp eq %"class.v8::Value"* %1033, null
  br i1 %1034, label %1039, label %1035, !prof !3

1035:                                             ; preds = %1031
  %1036 = bitcast %"class.v8::Value"* %1033 to %"class.v8::String"*
  %1037 = load i32, i32* %1026, align 8
  %1038 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1036, i32 %1037) #8
  br label %1059

1039:                                             ; preds = %1031
  %1040 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1027, align 8
  %1041 = icmp eq %"class.WTF::StringImpl"* %1040, null
  br i1 %1041, label %1059, label %1042

1042:                                             ; preds = %1039
  %1043 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1040, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1044 = load atomic i32, i32* %1043 monotonic, align 4
  %1045 = and i32 %1044, 2
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1047, label %1059

1047:                                             ; preds = %1042
  %1048 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1040, i64 0, i32 0
  %1049 = load i32, i32* %1048, align 4
  %1050 = zext i32 %1049 to i33
  %1051 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1050, i33 1) #8
  %1052 = extractvalue { i33, i1 } %1051, 1
  %1053 = extractvalue { i33, i1 } %1051, 0
  %1054 = icmp slt i33 %1053, 0
  %1055 = or i1 %1052, %1054
  br i1 %1055, label %1056, label %1057, !prof !3

1056:                                             ; preds = %1047
  call void @llvm.trap() #8
  unreachable

1057:                                             ; preds = %1047
  %1058 = trunc i33 %1053 to i32
  store i32 %1058, i32* %1048, align 4
  br label %1059

1059:                                             ; preds = %1035, %1039, %1042, %1057
  %1060 = phi %"class.WTF::StringImpl"* [ %1038, %1035 ], [ null, %1039 ], [ %1040, %1042 ], [ %1040, %1057 ]
  %1061 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1060, %"class.WTF::StringImpl"** %1061, align 8
  %1062 = bitcast %"class.WTF::String"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1062) #8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %17, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i64 13) #8
  %1063 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %16, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @_ZZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateEE12kValidValues_1, i64 0, i64 0), i64 3, %"class.WTF::String"* nonnull dereferenceable(8) %17, %"class.blink::ExceptionState"* dereferenceable(72) %3) #8
  %1064 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  %1065 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1064, align 8
  %1066 = icmp eq %"class.WTF::StringImpl"* %1065, null
  br i1 %1066, label %1080, label %1067

1067:                                             ; preds = %1059
  %1068 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1065, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1069 = load atomic i32, i32* %1068 monotonic, align 4
  %1070 = and i32 %1069, 2
  %1071 = icmp eq i32 %1070, 0
  %1072 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1065, i64 0, i32 0
  %1073 = load i32, i32* %1072, align 4
  br i1 %1071, label %1074, label %1076

1074:                                             ; preds = %1067
  %1075 = add i32 %1073, -1
  store i32 %1075, i32* %1072, align 4
  br label %1076

1076:                                             ; preds = %1074, %1067
  %1077 = phi i32 [ %1075, %1074 ], [ %1073, %1067 ]
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %1080

1079:                                             ; preds = %1076
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1065) #8
  br label %1080

1080:                                             ; preds = %1059, %1076, %1079
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1062) #8
  %1081 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1061, align 8
  %1082 = icmp eq %"class.WTF::StringImpl"* %1081, null
  br i1 %1082, label %1096, label %1083

1083:                                             ; preds = %1080
  %1084 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1081, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1085 = load atomic i32, i32* %1084 monotonic, align 4
  %1086 = and i32 %1085, 2
  %1087 = icmp eq i32 %1086, 0
  %1088 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1081, i64 0, i32 0
  %1089 = load i32, i32* %1088, align 4
  br i1 %1087, label %1090, label %1092

1090:                                             ; preds = %1083
  %1091 = add i32 %1089, -1
  store i32 %1091, i32* %1088, align 4
  br label %1092

1092:                                             ; preds = %1090, %1083
  %1093 = phi i32 [ %1091, %1090 ], [ %1089, %1083 ]
  %1094 = icmp eq i32 %1093, 0
  br i1 %1094, label %1095, label %1096

1095:                                             ; preds = %1092
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1081) #8
  br label %1096

1096:                                             ; preds = %1080, %1092, %1095
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1032) #8
  br i1 %1063, label %1097, label %1207

1097:                                             ; preds = %1096
  %1098 = load %"class.v8::Value"*, %"class.v8::Value"** %1025, align 8
  %1099 = icmp eq %"class.v8::Value"* %1098, null
  br i1 %1099, label %1100, label %1124, !prof !3

1100:                                             ; preds = %1097
  %1101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1027, align 8
  %1102 = icmp eq %"class.WTF::StringImpl"* %1101, null
  br i1 %1102, label %1103, label %1105

1103:                                             ; preds = %1100
  %1104 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 10
  br label %1149

1105:                                             ; preds = %1100
  %1106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1107 = load atomic i32, i32* %1106 monotonic, align 4
  %1108 = and i32 %1107, 2
  %1109 = icmp eq i32 %1108, 0
  br i1 %1109, label %1110, label %1122

1110:                                             ; preds = %1105
  %1111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1101, i64 0, i32 0
  %1112 = load i32, i32* %1111, align 4
  %1113 = zext i32 %1112 to i33
  %1114 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1113, i33 1) #8
  %1115 = extractvalue { i33, i1 } %1114, 1
  %1116 = extractvalue { i33, i1 } %1114, 0
  %1117 = icmp slt i33 %1116, 0
  %1118 = or i1 %1115, %1117
  br i1 %1118, label %1119, label %1120, !prof !3

1119:                                             ; preds = %1110
  call void @llvm.trap() #8
  unreachable

1120:                                             ; preds = %1110
  %1121 = trunc i33 %1116 to i32
  store i32 %1121, i32* %1111, align 4
  br label %1122

1122:                                             ; preds = %1105, %1120
  %1123 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 10
  br label %1130

1124:                                             ; preds = %1097
  %1125 = bitcast %"class.v8::Value"* %1098 to %"class.v8::String"*
  %1126 = load i32, i32* %1026, align 8
  %1127 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1125, i32 %1126) #8
  %1128 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %2, i64 0, i32 10
  %1129 = icmp eq %"class.WTF::StringImpl"* %1127, null
  br i1 %1129, label %1149, label %1130

1130:                                             ; preds = %1122, %1124
  %1131 = phi %"class.WTF::String"* [ %1123, %1122 ], [ %1128, %1124 ]
  %1132 = phi %"class.WTF::StringImpl"* [ %1101, %1122 ], [ %1127, %1124 ]
  %1133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1134 = load atomic i32, i32* %1133 monotonic, align 4
  %1135 = and i32 %1134, 2
  %1136 = icmp eq i32 %1135, 0
  br i1 %1136, label %1137, label %1149

1137:                                             ; preds = %1130
  %1138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1132, i64 0, i32 0
  %1139 = load i32, i32* %1138, align 4
  %1140 = zext i32 %1139 to i33
  %1141 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1140, i33 1) #8
  %1142 = extractvalue { i33, i1 } %1141, 1
  %1143 = extractvalue { i33, i1 } %1141, 0
  %1144 = icmp slt i33 %1143, 0
  %1145 = or i1 %1142, %1144
  br i1 %1145, label %1146, label %1147, !prof !3

1146:                                             ; preds = %1137
  call void @llvm.trap() #8
  unreachable

1147:                                             ; preds = %1137
  %1148 = trunc i33 %1143 to i32
  store i32 %1148, i32* %1138, align 4
  br label %1149

1149:                                             ; preds = %1103, %1147, %1130, %1124
  %1150 = phi i1 [ false, %1147 ], [ false, %1130 ], [ true, %1124 ], [ true, %1103 ]
  %1151 = phi %"class.WTF::String"* [ %1131, %1147 ], [ %1131, %1130 ], [ %1128, %1124 ], [ %1104, %1103 ]
  %1152 = phi %"class.WTF::StringImpl"* [ %1132, %1147 ], [ %1132, %1130 ], [ null, %1124 ], [ null, %1103 ]
  %1153 = ptrtoint %"class.WTF::StringImpl"* %1152 to i64
  %1154 = bitcast %"class.WTF::String"* %1151 to i64*
  %1155 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1151, i64 0, i32 0, i32 0
  %1156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1155, align 8
  store i64 %1153, i64* %1154, align 8
  %1157 = icmp eq %"class.WTF::StringImpl"* %1156, null
  br i1 %1157, label %1171, label %1158

1158:                                             ; preds = %1149
  %1159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1156, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1160 = load atomic i32, i32* %1159 monotonic, align 4
  %1161 = and i32 %1160, 2
  %1162 = icmp eq i32 %1161, 0
  %1163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1156, i64 0, i32 0
  %1164 = load i32, i32* %1163, align 4
  br i1 %1162, label %1165, label %1167

1165:                                             ; preds = %1158
  %1166 = add i32 %1164, -1
  store i32 %1166, i32* %1163, align 4
  br label %1167

1167:                                             ; preds = %1165, %1158
  %1168 = phi i32 [ %1166, %1165 ], [ %1164, %1158 ]
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %1171

1170:                                             ; preds = %1167
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1156) #8
  br label %1171

1171:                                             ; preds = %1149, %1167, %1170
  br i1 %1150, label %1185, label %1172

1172:                                             ; preds = %1171
  %1173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1174 = load atomic i32, i32* %1173 monotonic, align 4
  %1175 = and i32 %1174, 2
  %1176 = icmp eq i32 %1175, 0
  %1177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1152, i64 0, i32 0
  %1178 = load i32, i32* %1177, align 4
  br i1 %1176, label %1179, label %1181

1179:                                             ; preds = %1172
  %1180 = add i32 %1178, -1
  store i32 %1180, i32* %1177, align 4
  br label %1181

1181:                                             ; preds = %1179, %1172
  %1182 = phi i32 [ %1180, %1179 ], [ %1178, %1172 ]
  %1183 = icmp eq i32 %1182, 0
  br i1 %1183, label %1184, label %1185

1184:                                             ; preds = %1181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1152) #8
  br label %1185

1185:                                             ; preds = %1171, %1181, %1184
  %1186 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1187 = load i8*, i8** %1186, align 8
  store i8* null, i8** %1186, align 8
  %1188 = icmp eq i8* %1187, null
  br i1 %1188, label %1190, label %1189

1189:                                             ; preds = %1185
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1187) #8
  br label %1190

1190:                                             ; preds = %1189, %1185
  %1191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1027, align 8
  %1192 = icmp eq %"class.WTF::StringImpl"* %1191, null
  br i1 %1192, label %1206, label %1193

1193:                                             ; preds = %1190
  %1194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1195 = load atomic i32, i32* %1194 monotonic, align 4
  %1196 = and i32 %1195, 2
  %1197 = icmp eq i32 %1196, 0
  %1198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1191, i64 0, i32 0
  %1199 = load i32, i32* %1198, align 4
  br i1 %1197, label %1200, label %1202

1200:                                             ; preds = %1193
  %1201 = add i32 %1199, -1
  store i32 %1201, i32* %1198, align 4
  br label %1202

1202:                                             ; preds = %1200, %1193
  %1203 = phi i32 [ %1201, %1200 ], [ %1199, %1193 ]
  %1204 = icmp eq i32 %1203, 0
  br i1 %1204, label %1205, label %1206

1205:                                             ; preds = %1202
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1191) #8
  br label %1206

1206:                                             ; preds = %1190, %1202, %1205
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1024) #8
  br label %1229

1207:                                             ; preds = %1096, %1023
  %1208 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1209 = load i8*, i8** %1208, align 8
  store i8* null, i8** %1208, align 8
  %1210 = icmp eq i8* %1209, null
  br i1 %1210, label %1212, label %1211

1211:                                             ; preds = %1207
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1209) #8
  br label %1212

1212:                                             ; preds = %1211, %1207
  %1213 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1027, align 8
  %1214 = icmp eq %"class.WTF::StringImpl"* %1213, null
  br i1 %1214, label %1228, label %1215

1215:                                             ; preds = %1212
  %1216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1213, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1217 = load atomic i32, i32* %1216 monotonic, align 4
  %1218 = and i32 %1217, 2
  %1219 = icmp eq i32 %1218, 0
  %1220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1213, i64 0, i32 0
  %1221 = load i32, i32* %1220, align 4
  br i1 %1219, label %1222, label %1224

1222:                                             ; preds = %1215
  %1223 = add i32 %1221, -1
  store i32 %1223, i32* %1220, align 4
  br label %1224

1224:                                             ; preds = %1222, %1215
  %1225 = phi i32 [ %1223, %1222 ], [ %1221, %1215 ]
  %1226 = icmp eq i32 %1225, 0
  br i1 %1226, label %1227, label %1228

1227:                                             ; preds = %1224
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1213) #8
  br label %1228

1228:                                             ; preds = %1212, %1224, %1227
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1024) #8
  br label %1229

1229:                                             ; preds = %383, %174, %341, %398, %507, %754, %987, %1228, %1206, %1022, %994, %747, %514, %348, %167, %58
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %52) #8
  br label %1230

1230:                                             ; preds = %1229, %40, %43
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #2

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17NativeValueTraitsINS_11IDLSequenceINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEEvE11NativeValueEPN2v87IsolateENS7_5LocalINS7_5ValueEEERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.blink::ScriptIterator", align 8
  %6 = tail call zeroext i1 @_ZNK2v85Value7IsArrayEv(%"class.v8::Value"* %2) #8
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = bitcast %"class.v8::Value"* %2 to %"class.v8::Array"*
  tail call void @_ZN5blink8bindings28CreateIDLSequenceFromV8ArrayINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENSB_5LocalINSB_5ArrayEEERNS_14ExceptionStateE(%"class.WTF::Vector"* sret %0, %"class.v8::Isolate"* %1, %"class.v8::Array"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br label %29

9:                                                ; preds = %4
  %10 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* %2) #8
  br i1 %10, label %13, label %11

11:                                               ; preds = %9
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.24, i64 0, i64 0)) #8
  %12 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #8
  br label %29

13:                                               ; preds = %9
  %14 = bitcast %"class.blink::ScriptIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 56, i1 false)
  %15 = bitcast %"class.v8::Value"* %2 to %"class.v8::Object"*
  call void @_ZN5blink14ScriptIterator12FromIterableEPN2v87IsolateENS1_5LocalINS1_6ObjectEEERNS_14ExceptionStateE(%"class.blink::ScriptIterator"* nonnull sret %5, %"class.v8::Isolate"* %1, %"class.v8::Object"* %15, %"class.blink::ExceptionState"* dereferenceable(72) %3) #8
  %16 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #8
  br label %28

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::ScriptIterator", %"class.blink::ScriptIterator"* %5, i64 0, i32 1, i32 0
  %23 = load %"class.v8::Object"*, %"class.v8::Object"** %22, align 8
  %24 = icmp eq %"class.v8::Object"* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.25, i64 0, i64 0)) #8
  %26 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #8
  br label %28

27:                                               ; preds = %21
  call void @_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE(%"class.WTF::Vector"* sret %0, %"class.v8::Isolate"* %1, %"class.blink::ScriptIterator"* nonnull byval(%"class.blink::ScriptIterator") align 8 %5, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br label %28

28:                                               ; preds = %27, %25, %19
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %14) #8
  br label %29

29:                                               ; preds = %28, %11, %7
  ret void
}

declare void @_ZN5blink10TrustToken26setAdditionalSignedHeadersERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::TrustToken"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #8
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #8
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #8
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #8
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #8
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #8
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #8
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #8
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

declare void @_ZN5blink10TrustToken10setIssuersERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::TrustToken"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8), i8**, i64, %"class.WTF::String"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink10TrustToken8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::TrustToken"*, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #8
  %5 = tail call zeroext i1 @_ZN5blink14toV8TrustTokenEPKNS_10TrustTokenEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::TrustToken"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* %1, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14toV8TrustTokenEPKNS_10TrustTokenEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::TrustToken"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %10 = add i64 %9, 8
  %11 = inttoptr i64 %10 to %"class.blink::V8PerIsolateData"**
  %12 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %11, align 8
  %13 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %12, i8* bitcast ([7 x i8*]* @_ZZN5blinkL23eternalV8TrustTokenKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.319"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.319"*)) #8
  %14 = extractvalue { i64, %"class.v8::Eternal"* } %13, 1
  %15 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #8
  %16 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 1
  %17 = load i8, i8* %16, align 8, !range !4
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %4
  %20 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 4
  %21 = tail call %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE(%"class.WTF::Vector"* dereferenceable(16) %20, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #8
  %22 = bitcast %"class.v8::Array"* %21 to %"class.v8::Value"*
  %23 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 0, i32 0
  %24 = load %"class.v8::Name"*, %"class.v8::Name"** %23, align 8
  %25 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %24, %"class.v8::Value"* %22) #8
  %26 = trunc i16 %25 to i8
  %27 = icmp ne i8 %26, 0
  %28 = icmp ugt i16 %25, 255
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %168

30:                                               ; preds = %4, %19
  %31 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 5, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %52, label %34

34:                                               ; preds = %30
  %35 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #8
  %36 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %36, align 8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 1
  %40 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %41 = bitcast i8** %40 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %39, %"class.WTF::StringImpl"** %41, align 8
  %42 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %38, i32* %42, align 8
  %43 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #8
  %44 = bitcast %"class.v8::String"* %43 to %"class.v8::Value"*
  %45 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 1, i32 0
  %46 = load %"class.v8::Name"*, %"class.v8::Name"** %45, align 8
  %47 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %46, %"class.v8::Value"* %44) #8
  %48 = trunc i16 %47 to i8
  %49 = icmp ne i8 %48, 0
  %50 = icmp ugt i16 %47, 255
  %51 = and i1 %50, %49
  br i1 %51, label %52, label %168

52:                                               ; preds = %30, %34
  %53 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 2
  %54 = load i8, i8* %53, align 1, !range !4
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %62, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 6
  %58 = load i8, i8* %57, align 8, !range !4
  %59 = icmp eq i8 %58, 0
  %60 = select i1 %59, i64 192, i64 184
  %61 = add i64 %60, %9
  br label %64

62:                                               ; preds = %52
  %63 = add i64 %9, 192
  br label %64

64:                                               ; preds = %56, %62
  %65 = phi i64 [ %61, %56 ], [ %63, %62 ]
  %66 = inttoptr i64 %65 to %"class.v8::Value"*
  %67 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 2, i32 0
  %68 = load %"class.v8::Name"*, %"class.v8::Name"** %67, align 8
  %69 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %68, %"class.v8::Value"* %66) #8
  %70 = trunc i16 %69 to i8
  %71 = icmp ne i8 %70, 0
  %72 = icmp ugt i16 %69, 255
  %73 = and i1 %72, %71
  br i1 %73, label %74, label %168

74:                                               ; preds = %64
  %75 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 3
  %76 = load i8, i8* %75, align 2, !range !4
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %89, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 7
  %80 = call %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE(%"class.WTF::Vector"* dereferenceable(16) %79, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #8
  %81 = bitcast %"class.v8::Array"* %80 to %"class.v8::Value"*
  %82 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 3, i32 0
  %83 = load %"class.v8::Name"*, %"class.v8::Name"** %82, align 8
  %84 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %83, %"class.v8::Value"* %81) #8
  %85 = trunc i16 %84 to i8
  %86 = icmp ne i8 %85, 0
  %87 = icmp ugt i16 %84, 255
  %88 = and i1 %87, %86
  br i1 %88, label %89, label %168

89:                                               ; preds = %74, %78
  %90 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 8, i32 0, i32 0
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %90, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %103, label %93

93:                                               ; preds = %89
  %94 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %94) #8
  %95 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %91, %"class.WTF::StringImpl"** %95, align 8
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1
  %99 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %100 = bitcast i8** %99 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %98, %"class.WTF::StringImpl"** %100, align 8
  %101 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %97, i32* %101, align 8
  %102 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %94) #8
  br label %107

103:                                              ; preds = %89
  %104 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 0, i32 4) #8
  %105 = icmp eq %"class.v8::String"* %104, null
  br i1 %105, label %106, label %107, !prof !3

106:                                              ; preds = %103
  call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %107

107:                                              ; preds = %106, %103, %93
  %108 = phi %"class.v8::String"* [ %102, %93 ], [ %104, %103 ], [ null, %106 ]
  %109 = bitcast %"class.v8::String"* %108 to %"class.v8::Value"*
  %110 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 4, i32 0
  %111 = load %"class.v8::Name"*, %"class.v8::Name"** %110, align 8
  %112 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %111, %"class.v8::Value"* %109) #8
  %113 = trunc i16 %112 to i8
  %114 = icmp ne i8 %113, 0
  %115 = icmp ugt i16 %112, 255
  %116 = and i1 %115, %114
  br i1 %116, label %117, label %168

117:                                              ; preds = %107
  %118 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 9, i32 0, i32 0
  %119 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %118, align 8
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %131, label %121

121:                                              ; preds = %117
  %122 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %122) #8
  %123 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %119, %"class.WTF::StringImpl"** %123, align 8
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 1
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 1
  %127 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %128 = bitcast i8** %127 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %126, %"class.WTF::StringImpl"** %128, align 8
  %129 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %125, i32* %129, align 8
  %130 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %122) #8
  br label %135

131:                                              ; preds = %117
  %132 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 0, i32 4) #8
  %133 = icmp eq %"class.v8::String"* %132, null
  br i1 %133, label %134, label %135, !prof !3

134:                                              ; preds = %131
  call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %135

135:                                              ; preds = %134, %131, %121
  %136 = phi %"class.v8::String"* [ %130, %121 ], [ %132, %131 ], [ null, %134 ]
  %137 = bitcast %"class.v8::String"* %136 to %"class.v8::Value"*
  %138 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 5, i32 0
  %139 = load %"class.v8::Name"*, %"class.v8::Name"** %138, align 8
  %140 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %139, %"class.v8::Value"* %137) #8
  %141 = trunc i16 %140 to i8
  %142 = icmp ne i8 %141, 0
  %143 = icmp ugt i16 %140, 255
  %144 = and i1 %143, %142
  br i1 %144, label %145, label %168

145:                                              ; preds = %135
  %146 = getelementptr inbounds %"class.blink::TrustToken", %"class.blink::TrustToken"* %0, i64 0, i32 10, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %148, label %167, label %149

149:                                              ; preds = %145
  %150 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #8
  %151 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %147, %"class.WTF::StringImpl"** %151, align 8
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 1
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 1
  %155 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %156 = bitcast i8** %155 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %154, %"class.WTF::StringImpl"** %156, align 8
  %157 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %153, i32* %157, align 8
  %158 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #8
  %159 = bitcast %"class.v8::String"* %158 to %"class.v8::Value"*
  %160 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %14, i64 6, i32 0
  %161 = load %"class.v8::Name"*, %"class.v8::Name"** %160, align 8
  %162 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %15, %"class.v8::Name"* %161, %"class.v8::Value"* %159) #8
  %163 = trunc i16 %162 to i8
  %164 = icmp ne i8 %163, 0
  %165 = icmp ugt i16 %162, 255
  %166 = and i1 %165, %164
  br i1 %166, label %167, label %168

167:                                              ; preds = %145, %149
  br label %168

168:                                              ; preds = %34, %78, %135, %149, %167, %107, %64, %19
  %169 = phi i1 [ false, %19 ], [ false, %34 ], [ false, %64 ], [ false, %78 ], [ false, %107 ], [ false, %135 ], [ true, %167 ], [ false, %149 ]
  ret i1 %169
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #8
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #8
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #8
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !3

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #8
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !3

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TrustToken"* @_ZN5blink17NativeValueTraitsINS_10TrustTokenEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 88) #8
  %5 = bitcast i8* %4 to %"class.blink::TrustToken"*
  tail call void @_ZN5blink10TrustTokenC1Ev(%"class.blink::TrustToken"* %5) #8
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink12V8TrustToken6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10TrustTokenERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::TrustToken"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::TrustToken"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.319"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"*, %"class.v8::Isolate"*) local_unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #2

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #2

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #2

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #2

declare void @_ZN5blink10TrustTokenC1Ev(%"class.blink::TrustToken"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #8
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #8
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #8
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #8
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i64 0, i64 0), i8* %40, i8* %41) #8
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #8
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.22, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #8
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #8
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #8
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value7IsArrayEv(%"class.v8::Value"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8bindings28CreateIDLSequenceFromV8ArrayINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENSB_5LocalINSB_5ArrayEEERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.v8::Array"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"class.v8::TryCatch", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = tail call i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"* %2) #8
  %9 = zext i32 %8 to i64
  %10 = icmp ugt i32 %8, 268173312
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  tail call void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.26, i64 0, i64 0)) #8
  %12 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #8
  br label %145

13:                                               ; preds = %4
  %14 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 16, i1 false) #8
  %18 = icmp eq i32 %8, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %13
  %20 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %9) #8
  %21 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %20, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %22 = ptrtoint i8* %21 to i64
  %23 = bitcast %"class.WTF::Vector"* %5 to i64*
  store atomic i64 %22, i64* %23 monotonic, align 8
  %24 = lshr i64 %20, 3
  %25 = trunc i64 %24 to i32
  store i32 %25, i32* %16, align 8
  br label %26

26:                                               ; preds = %13, %19
  %27 = phi i32 [ 0, %13 ], [ %25, %19 ]
  %28 = phi i64 [ 0, %13 ], [ %22, %19 ]
  %29 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %1) #8
  %30 = bitcast %"class.v8::TryCatch"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %30) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %6, %"class.v8::Isolate"* %1) #8
  %31 = call i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"* %2) #8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %26
  %34 = bitcast %"class.WTF::Vector"* %5 to i64*
  %35 = bitcast %"class.WTF::Vector"* %0 to i8*
  br label %99

36:                                               ; preds = %26
  %37 = bitcast %"class.v8::Array"* %2 to %"class.v8::Object"*
  %38 = bitcast %"class.WTF::String"* %7 to i8*
  %39 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %41 = bitcast %"class.WTF::Vector"* %0 to i8*
  br label %42

42:                                               ; preds = %36, %90
  %43 = phi i32 [ 0, %36 ], [ %91, %90 ]
  %44 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEEj(%"class.v8::Object"* %37, %"class.v8::Context"* %29, i32 %43) #8
  %45 = icmp eq %"class.v8::Value"* %44, null
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #8
  %48 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %49 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %49, i64 5
  %51 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %50, align 8
  call void %51(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %47) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 16, i1 false) #8
  br label %108

52:                                               ; preds = %42
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #8
  %53 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %1, %"class.v8::Value"* nonnull %44, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  store %"class.WTF::StringImpl"* %53, %"class.WTF::StringImpl"** %39, align 8
  %54 = load i32, i32* %40, align 8
  %55 = icmp eq i32 %54, 0
  %56 = ptrtoint %"class.WTF::StringImpl"* %53 to i64
  br i1 %55, label %58, label %57

57:                                               ; preds = %52
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 16, i1 false) #8
  br label %71

58:                                               ; preds = %52
  %59 = load i32, i32* %17, align 4
  %60 = load i32, i32* %16, align 8
  %61 = icmp eq i32 %59, %60
  br i1 %61, label %69, label %62, !prof !3

62:                                               ; preds = %58
  %63 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %64 = zext i32 %59 to i64
  %65 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %63, i64 %64
  %66 = bitcast %"class.WTF::String"* %65 to i64*
  store i64 %56, i64* %66, align 8
  %67 = load i32, i32* %17, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %17, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #8
  br label %90

69:                                               ; preds = %58
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"class.WTF::String"* nonnull dereferenceable(8) %7) #8
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  br label %71

71:                                               ; preds = %69, %57
  %72 = phi %"class.WTF::StringImpl"* [ %70, %69 ], [ %53, %57 ]
  %73 = phi i32 [ 0, %69 ], [ 1, %57 ]
  %74 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %74, label %88, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %75
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %75
  %85 = phi i32 [ %83, %82 ], [ %81, %75 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %72) #8
  br label %88

88:                                               ; preds = %87, %84, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #8
  %89 = icmp eq i32 %73, 0
  br i1 %89, label %90, label %108

90:                                               ; preds = %62, %88
  %91 = add nuw i32 %43, 1
  %92 = call i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"* %2) #8
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %42, label %94

94:                                               ; preds = %90
  %95 = bitcast %"class.WTF::Vector"* %5 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = load i32, i32* %16, align 8
  %98 = load i32, i32* %17, align 4
  br label %99

99:                                               ; preds = %33, %94
  %100 = phi i8* [ %35, %33 ], [ %41, %94 ]
  %101 = phi i64* [ %34, %33 ], [ %95, %94 ]
  %102 = phi i32 [ 0, %33 ], [ %98, %94 ]
  %103 = phi i32 [ %27, %33 ], [ %97, %94 ]
  %104 = phi i64 [ %28, %33 ], [ %96, %94 ]
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %106 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 16, i1 false) #8
  %107 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %101 monotonic, align 8
  store atomic i64 %104, i64* %107 monotonic, align 8
  store i32 %103, i32* %105, align 8
  store i32 0, i32* %16, align 8
  store i32 %102, i32* %106, align 4
  store i32 0, i32* %17, align 4
  br label %108

108:                                              ; preds = %88, %46, %99
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %30) #8
  %109 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %110 = icmp eq %"class.WTF::String"* %109, null
  br i1 %110, label %144, label %111, !prof !2

111:                                              ; preds = %108
  %112 = bitcast %"class.WTF::String"* %109 to i8*
  %113 = load i32, i32* %17, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %142, label %115, !prof !3

115:                                              ; preds = %111
  %116 = zext i32 %113 to i64
  %117 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %109, i64 %116
  br label %118

118:                                              ; preds = %136, %115
  %119 = phi %"class.WTF::String"* [ %137, %136 ], [ %109, %115 ]
  %120 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 0, i32 0, i32 0
  %121 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %120, align 8
  %122 = icmp eq %"class.WTF::StringImpl"* %121, null
  br i1 %122, label %136, label %123

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %121, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %121, i64 0, i32 0
  %129 = load i32, i32* %128, align 4
  br i1 %127, label %130, label %132

130:                                              ; preds = %123
  %131 = add i32 %129, -1
  store i32 %131, i32* %128, align 4
  br label %132

132:                                              ; preds = %130, %123
  %133 = phi i32 [ %131, %130 ], [ %129, %123 ]
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %132
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %121) #8
  br label %136

136:                                              ; preds = %135, %132, %118
  %137 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 1
  %138 = icmp eq %"class.WTF::String"* %137, %117
  br i1 %138, label %139, label %118

139:                                              ; preds = %136
  store i32 0, i32* %17, align 4
  %140 = bitcast %"class.WTF::Vector"* %5 to i8**
  %141 = load i8*, i8** %140, align 8
  br label %142

142:                                              ; preds = %139, %111
  %143 = phi i8* [ %141, %139 ], [ %112, %111 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %143) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %15, align 8
  br label %144

144:                                              ; preds = %108, %142
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %145

145:                                              ; preds = %144, %11
  ret void
}

declare void @_ZN5blink14ScriptIterator12FromIterableEPN2v87IsolateENS1_5LocalINS1_6ObjectEEERNS_14ExceptionStateE(%"class.blink::ScriptIterator"* sret, %"class.v8::Isolate"*, %"class.v8::Object"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.blink::ScriptIterator"* byval(%"class.blink::ScriptIterator") align 8, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %1) #8
  %8 = tail call %"class.blink::ExecutionContext"* @_ZN5blink18ToExecutionContextEN2v85LocalINS0_7ContextEEE(%"class.v8::Context"* %7) #8
  %9 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #8
  %13 = call zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"* nonnull %2, %"class.blink::ExecutionContext"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3, %"class.v8::Value"* null) #8
  br i1 %13, label %14, label %74

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.blink::ScriptIterator", %"class.blink::ScriptIterator"* %2, i64 0, i32 6, i32 0
  %16 = bitcast %"class.WTF::String"* %6 to i8*
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  br label %19

19:                                               ; preds = %14, %72
  %20 = load %"class.v8::Value"*, %"class.v8::Value"** %15, align 8
  %21 = icmp eq %"class.v8::Value"* %20, null
  br i1 %21, label %22, label %23, !prof !3

22:                                               ; preds = %19
  call void @_ZN2v82V812ToLocalEmptyEv() #8
  br label %23

23:                                               ; preds = %19, %22
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %24 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %1, %"class.v8::Value"* %20, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %17, align 8
  %25 = load i32, i32* %18, align 8
  %26 = icmp eq i32 %25, 0
  %27 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  br i1 %26, label %45, label %28

28:                                               ; preds = %23
  %29 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #8
  %30 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %30, label %44, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  br i1 %35, label %38, label %40

38:                                               ; preds = %31
  %39 = add i32 %37, -1
  store i32 %39, i32* %36, align 4
  br label %40

40:                                               ; preds = %38, %31
  %41 = phi i32 [ %39, %38 ], [ %37, %31 ]
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #8
  br label %44

44:                                               ; preds = %28, %40, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %89

45:                                               ; preds = %23
  %46 = load i32, i32* %12, align 4
  %47 = load i32, i32* %11, align 8
  %48 = icmp eq i32 %46, %47
  br i1 %48, label %56, label %49, !prof !3

49:                                               ; preds = %45
  %50 = load %"class.WTF::String"*, %"class.WTF::String"** %10, align 8
  %51 = zext i32 %46 to i64
  %52 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %50, i64 %51
  %53 = bitcast %"class.WTF::String"* %52 to i64*
  store i64 %27, i64* %53, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %54 = load i32, i32* %12, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %12, align 4
  br label %72

56:                                               ; preds = %45
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"class.WTF::String"* nonnull dereferenceable(8) %6) #8
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #8
  br label %72

72:                                               ; preds = %49, %56, %68, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  %73 = call zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"* nonnull %2, %"class.blink::ExecutionContext"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3, %"class.v8::Value"* null) #8
  br i1 %73, label %19, label %74

74:                                               ; preds = %72, %4
  %75 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 16, i1 false) #8
  br label %89

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %83 = bitcast %"class.WTF::Vector"* %5 to i64*
  %84 = bitcast %"class.WTF::Vector"* %0 to i64*
  store i64 0, i64* %84, align 8
  %85 = load i64, i64* %83, align 8
  %86 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %83 monotonic, align 8
  store atomic i64 %85, i64* %86 monotonic, align 8
  %87 = load i32, i32* %11, align 8
  store i32 %87, i32* %81, align 8
  store i32 0, i32* %11, align 8
  %88 = load i32, i32* %12, align 4
  store i32 %88, i32* %82, align 4
  store i32 0, i32* %12, align 4
  br label %89

89:                                               ; preds = %44, %80, %78
  %90 = load %"class.WTF::String"*, %"class.WTF::String"** %10, align 8
  %91 = icmp eq %"class.WTF::String"* %90, null
  br i1 %91, label %125, label %92, !prof !2

92:                                               ; preds = %89
  %93 = bitcast %"class.WTF::String"* %90 to i8*
  %94 = load i32, i32* %12, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %123, label %96, !prof !3

96:                                               ; preds = %92
  %97 = zext i32 %94 to i64
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %90, i64 %97
  br label %99

99:                                               ; preds = %117, %96
  %100 = phi %"class.WTF::String"* [ %118, %117 ], [ %90, %96 ]
  %101 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 0, i32 0, i32 0
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %101, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %117, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %104
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %104
  %114 = phi i32 [ %112, %111 ], [ %110, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %102) #8
  br label %117

117:                                              ; preds = %116, %113, %99
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 1
  %119 = icmp eq %"class.WTF::String"* %118, %98
  br i1 %119, label %120, label %99

120:                                              ; preds = %117
  store i32 0, i32* %12, align 4
  %121 = bitcast %"class.WTF::Vector"* %5 to i8**
  %122 = load i8*, i8** %121, align 8
  br label %123

123:                                              ; preds = %120, %92
  %124 = phi i8* [ %122, %120 ], [ %93, %92 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %124) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %10, align 8
  br label %125

125:                                              ; preds = %89, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  ret void
}

declare i32 @_ZNK2v85Array6LengthEv(%"class.v8::Array"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEEj(%"class.v8::Object"*, %"class.v8::Context"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::TryCatch", align 8
  %5 = alloca %"class.blink::V8StringResource", align 8
  %6 = bitcast %"class.blink::V8StringResource"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 152, i1 false)
  %7 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1, %"class.v8::Value"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 0, i64* %11, align 8
  %12 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* nonnull %5) #8
  br i1 %12, label %28, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.v8::TryCatch"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 48, i1 false) #8
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %4, %"class.v8::Isolate"* %0) #8
  %15 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %16 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #8
  %17 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %15, %"class.v8::Context"* %16) #8
  %18 = ptrtoint %"class.v8::String"* %17 to i64
  %19 = bitcast %"class.blink::V8StringResource"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = icmp eq %"class.v8::String"* %17, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %13
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #8
  br label %28

22:                                               ; preds = %13
  %23 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %4) #8
  %24 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %25 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %25, i64 5
  %27 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %26, align 8
  call void %27(%"class.blink::ExceptionState"* %2, %"class.v8::Value"* %23) #8
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #8
  br label %58

28:                                               ; preds = %3, %21
  %29 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %30 = icmp eq %"class.v8::Value"* %29, null
  br i1 %30, label %35, label %31, !prof !3

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::Value"* %29 to %"class.v8::String"*
  %33 = load i32, i32* %8, align 8
  %34 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %32, i32 %33) #8
  br label %55

35:                                               ; preds = %28
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #8
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  call void @llvm.trap() #8
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %31, %35, %38, %53
  %56 = phi %"class.WTF::StringImpl"* [ %34, %31 ], [ null, %35 ], [ %36, %38 ], [ %36, %53 ]
  %57 = call %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"* %56) #8
  br label %58

58:                                               ; preds = %55, %22
  %59 = phi %"class.WTF::StringImpl"* [ %57, %55 ], [ null, %22 ]
  %60 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %58
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %61) #8
  br label %64

64:                                               ; preds = %63, %58
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #8
  br label %80

80:                                               ; preds = %64, %76, %79
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #8
  ret %"class.WTF::StringImpl"* %59
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.28, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !2

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #8
  br i1 %22, label %23, label %80, !prof !2

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #8
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #8
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #8
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %35
  tail call void @llvm.trap() #8
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #8
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #8
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #2

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #2

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !2

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !2

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !2

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !2

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %106 = bitcast %"class.WTF::String"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.WTF::String"* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

declare %"class.blink::ExecutionContext"* @_ZN5blink18ToExecutionContextEN2v85LocalINS0_7ContextEEE(%"class.v8::Context"*) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"*, %"class.blink::ExecutionContext"*, %"class.blink::ExceptionState"* dereferenceable(72), %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS6_5ArrayEEERKT_NS7_INS6_6ObjectEEEPNS6_7IsolateE(%"class.WTF::Vector"* dereferenceable(16), %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #4 comdat {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.absl::optional", align 8
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #8
  %7 = bitcast %"class.absl::optional"* %5 to i64*
  store i64 -6148914691236517206, i64* %7, align 8
  store i8 0, i8* %6, align 8
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast %union.anon.351* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false) #8
  %10 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E, align 1, !range !4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %26, label %12, !prof !2

12:                                               ; preds = %3
  %13 = tail call %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"* %2) #8
  %14 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %13, i64 0, i32 3
  %15 = bitcast %"class.base::TickClock"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::RuntimeCallStats"* %13, %"class.blink::RuntimeCallStats"** %17, align 8
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 4
  %21 = bitcast i64* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #8
  %22 = bitcast %"class.base::TickClock"** %20 to i64*
  store i64 %16, i64* %22, align 8
  %23 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %13, i64 0, i32 2, i64 5
  %24 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %13, i64 0, i32 0
  %25 = load %"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallTimer"** %24, align 8
  call void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"* %18, %"class.blink::RuntimeCallCounter"* %23, %"class.blink::RuntimeCallTimer"* %25) #8
  store %"class.blink::RuntimeCallTimer"* %18, %"class.blink::RuntimeCallTimer"** %24, align 8
  store i8 1, i8* %6, align 8
  br label %26

26:                                               ; preds = %3, %12
  %27 = call %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"* %1) #8
  call void @_ZN2v87Context5EnterEv(%"class.v8::Context"* %27) #8
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, -1
  br i1 %30, label %32, label %31, !prof !2

31:                                               ; preds = %26
  call void @llvm.trap() #8
  unreachable

32:                                               ; preds = %26
  %33 = call %"class.v8::Array"* @_ZN2v85Array3NewEPNS_7IsolateEi(%"class.v8::Isolate"* %2, i32 %29) #8
  %34 = ptrtoint %"class.v8::Array"* %33 to i64
  call void @_ZN2v87Context4ExitEv(%"class.v8::Context"* %27) #8
  %35 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %2) #8
  %36 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::String"*, %"class.WTF::String"** %36, align 8
  %38 = load i32, i32* %28, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %37, i64 %39
  %41 = icmp eq i32 %38, 0
  br i1 %41, label %80, label %42

42:                                               ; preds = %32
  %43 = bitcast %"class.WTF::StringView"* %4 to i8*
  %44 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %46 = bitcast i8** %45 to %"class.WTF::StringImpl"**
  %47 = bitcast %"class.WTF::StringView"* %4 to i64*
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %49 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %50 = add i64 %49, 160
  %51 = bitcast %"class.v8::Array"* %33 to %"class.v8::Object"*
  br label %52

52:                                               ; preds = %42, %76
  %53 = phi i32 [ 0, %42 ], [ %77, %76 ]
  %54 = phi %"class.WTF::String"* [ %37, %42 ], [ %78, %76 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #8
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %52
  store i8* null, i8** %45, align 8
  %59 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %59, i64* %47, align 8
  br label %64

60:                                               ; preds = %52
  store %"class.WTF::StringImpl"* %56, %"class.WTF::StringImpl"** %44, align 8
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 1
  store %"class.WTF::StringImpl"* %63, %"class.WTF::StringImpl"** %46, align 8
  br label %64

64:                                               ; preds = %58, %60
  %65 = phi i32 [ %62, %60 ], [ 0, %58 ]
  store i32 %65, i32* %48, align 8
  %66 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #8
  %67 = ptrtoint %"class.v8::String"* %66 to i64
  %68 = icmp eq %"class.v8::String"* %66, null
  %69 = select i1 %68, i64 %50, i64 %67
  %70 = inttoptr i64 %69 to %"class.v8::Value"*
  %71 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEEjNS1_INS_5ValueEEE(%"class.v8::Object"* %51, %"class.v8::Context"* %35, i32 %53, %"class.v8::Value"* %70) #8
  %72 = trunc i16 %71 to i8
  %73 = icmp eq i8 %72, 0
  %74 = icmp ult i16 %71, 256
  %75 = or i1 %74, %73
  br i1 %75, label %80, label %76, !prof !6

76:                                               ; preds = %64
  %77 = add i32 %53, 1
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 1
  %79 = icmp eq %"class.WTF::String"* %78, %40
  br i1 %79, label %80, label %52

80:                                               ; preds = %76, %64, %32
  %81 = phi i64 [ %34, %32 ], [ 0, %64 ], [ %34, %76 ]
  %82 = load i8, i8* %6, align 8, !range !4
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %90, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %86 = load %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallStats"** %85, align 8
  %87 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %88 = call %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"* %87) #8
  %89 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %86, i64 0, i32 0
  store %"class.blink::RuntimeCallTimer"* %88, %"class.blink::RuntimeCallTimer"** %89, align 8
  store i8 0, i8* %6, align 8
  br label %90

90:                                               ; preds = %80, %84
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #8
  %91 = inttoptr i64 %81 to %"class.v8::Array"*
  ret %"class.v8::Array"* %91
}

declare %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #2

declare %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"*) local_unnamed_addr #2

declare %"class.v8::Array"* @_ZN2v85Array3NewEPNS_7IsolateEi(%"class.v8::Isolate"*, i32) local_unnamed_addr #2

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEEjNS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, i32, %"class.v8::Value"*) local_unnamed_addr #2

declare %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"*) local_unnamed_addr #2

declare void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*) local_unnamed_addr #2

declare void @_ZN2v87Context5EnterEv(%"class.v8::Context"*) local_unnamed_addr #2

declare void @_ZN2v87Context4ExitEv(%"class.v8::Context"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
!6 = !{!"branch_weights", i32 2002, i32 2000}
