; ModuleID = '../../base/memory/shared_memory_security_policy.cc'
source_filename = "../../base/memory/shared_memory_security_policy.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }

@_ZN4base12_GLOBAL__N_118total_mapped_size_E = internal global %"struct.std::__1::atomic" zeroinitializer, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base26SharedMemorySecurityPolicy28AcquireReservationForMappingEm(i64) local_unnamed_addr #0 align 2 {
  %2 = load atomic i64, i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4base12_GLOBAL__N_118total_mapped_size_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %3 = tail call i64 @_ZN4base11GetPageSizeEv() #4
  %4 = add i64 %0, -1
  %5 = add i64 %4, %3
  %6 = sub i64 0, %3
  %7 = and i64 %5, %6
  %8 = icmp ult i64 %7, %0
  br i1 %8, label %27, label %9

9:                                                ; preds = %1
  %10 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %2, i64 %7) #4
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = icmp ugt i64 %12, 34359738367
  %14 = or i1 %11, %13
  br i1 %14, label %27, label %15, !prof !2

15:                                               ; preds = %9, %20
  %16 = phi i64 [ %24, %20 ], [ %12, %9 ]
  %17 = phi i64 [ %21, %20 ], [ %2, %9 ]
  %18 = cmpxchg weak i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4base12_GLOBAL__N_118total_mapped_size_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %17, i64 %16 monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %27, label %20

20:                                               ; preds = %15
  %21 = extractvalue { i64, i1 } %18, 0
  %22 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %21, i64 %7) #4
  %23 = extractvalue { i64, i1 } %22, 1
  %24 = extractvalue { i64, i1 } %22, 0
  %25 = icmp ugt i64 %24, 34359738367
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %15, !prof !2

27:                                               ; preds = %20, %15, %9, %1
  %28 = phi i1 [ false, %1 ], [ false, %9 ], [ false, %20 ], [ true, %15 ]
  ret i1 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base26SharedMemorySecurityPolicy28ReleaseReservationForMappingEm(i64) local_unnamed_addr #0 align 2 {
  %2 = tail call i64 @_ZN4base11GetPageSizeEv() #4
  %3 = add i64 %0, -1
  %4 = add i64 %3, %2
  %5 = sub i64 0, %2
  %6 = and i64 %4, %5
  %7 = icmp ult i64 %6, %0
  br i1 %7, label %8, label %9, !prof !3

8:                                                ; preds = %1
  tail call void @llvm.trap() #4
  unreachable

9:                                                ; preds = %1
  %10 = atomicrmw sub i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4base12_GLOBAL__N_118total_mapped_size_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %6 monotonic
  ret void
}

declare i64 @_ZN4base11GetPageSizeEv() local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2002, i32 2000}
!3 = !{!"branch_weights", i32 1, i32 2000}
