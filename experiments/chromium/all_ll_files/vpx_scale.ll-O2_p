; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_scale/generic/vpx_scale.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_scale/generic/vpx_scale.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@switch.table.Scale2D = private unnamed_addr constant [4 x void (i8*, i32, i8*, i32)*] [void (i8*, i32, i8*, i32)* @vp8_horizontal_line_2_1_scale_c, void (i8*, i32, i8*, i32)* @vp8_horizontal_line_5_3_scale_c, void (i8*, i32, i8*, i32)* null, void (i8*, i32, i8*, i32)* @vp8_horizontal_line_5_4_scale_c], align 8
@switch.table.Scale2D.1 = private unnamed_addr constant [4 x i32] [i32 1, i32 1, i32 0, i32 1], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_scale_frame(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i8*, i8 zeroext, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = add i32 %4, -1
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = mul i32 %12, %5
  %14 = add i32 %10, %13
  %15 = udiv i32 %14, %4
  %16 = add i32 %6, -1
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %18, %7
  %20 = add i32 %16, %19
  %21 = udiv i32 %20, %6
  %22 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  tail call fastcc void @Scale2D(i8* %23, i32 %25, i32 %12, i32 %18, i8* %27, i32 %29, i32 %15, i32 %21, i8* %2, i8 zeroext %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8)
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp slt i32 %15, %31
  %33 = icmp sgt i32 %21, 0
  %34 = and i1 %32, %33
  br i1 %34, label %35, label %107

35:                                               ; preds = %9
  %36 = sext i32 %15 to i64
  %37 = add i32 %15, -2
  %38 = sub i32 1, %15
  %39 = load i8*, i8** %26, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 -1
  %41 = getelementptr inbounds i8, i8* %40, i64 %36
  %42 = sext i32 %37 to i64
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = add i32 %38, %31
  %46 = sext i32 %45 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %44, i64 %46, i1 false)
  %47 = icmp sgt i32 %21, 1
  br i1 %47, label %48, label %107

48:                                               ; preds = %35
  %49 = add i32 %21, -1
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %21, 2
  br i1 %51, label %89, label %52

52:                                               ; preds = %48
  %53 = sub i32 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i32 [ 1, %52 ], [ %86, %54 ]
  %56 = phi i32 [ %53, %52 ], [ %87, %54 ]
  %57 = load i32, i32* %30, align 8
  %58 = load i8*, i8** %26, align 8
  %59 = load i32, i32* %28, align 8
  %60 = mul nsw i32 %59, %55
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %58, i64 -1
  %63 = getelementptr inbounds i8, i8* %62, i64 %36
  %64 = getelementptr inbounds i8, i8* %63, i64 %61
  %65 = add i32 %37, %60
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %58, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = add i32 %38, %57
  %70 = sext i32 %69 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 %68, i64 %70, i1 false)
  %71 = add nuw nsw i32 %55, 1
  %72 = load i32, i32* %30, align 8
  %73 = load i8*, i8** %26, align 8
  %74 = load i32, i32* %28, align 8
  %75 = mul nsw i32 %74, %71
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %73, i64 -1
  %78 = getelementptr inbounds i8, i8* %77, i64 %36
  %79 = getelementptr inbounds i8, i8* %78, i64 %76
  %80 = add i32 %37, %75
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %73, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = add i32 %38, %72
  %85 = sext i32 %84 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %83, i64 %85, i1 false)
  %86 = add nuw nsw i32 %55, 2
  %87 = add i32 %56, -2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %54

89:                                               ; preds = %54, %48
  %90 = phi i32 [ 1, %48 ], [ %86, %54 ]
  %91 = icmp eq i32 %50, 0
  br i1 %91, label %107, label %92

92:                                               ; preds = %89
  %93 = load i32, i32* %30, align 8
  %94 = load i8*, i8** %26, align 8
  %95 = load i32, i32* %28, align 8
  %96 = mul nsw i32 %95, %90
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %94, i64 -1
  %99 = getelementptr inbounds i8, i8* %98, i64 %36
  %100 = getelementptr inbounds i8, i8* %99, i64 %97
  %101 = add i32 %37, %96
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %94, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = add i32 %38, %93
  %106 = sext i32 %105 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %104, i64 %106, i1 false)
  br label %107

107:                                              ; preds = %92, %89, %35, %9
  %108 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = icmp slt i32 %21, %109
  br i1 %110, label %111, label %130

111:                                              ; preds = %107
  %112 = add nsw i32 %21, -1
  %113 = add nsw i32 %21, -2
  br label %114

114:                                              ; preds = %111, %114
  %115 = phi i32 [ %112, %111 ], [ %127, %114 ]
  %116 = load i8*, i8** %26, align 8
  %117 = load i32, i32* %28, align 8
  %118 = mul nsw i32 %117, %115
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %116, i64 %119
  %121 = mul nsw i32 %117, %113
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %116, i64 %122
  %124 = load i32, i32* %30, align 8
  %125 = add nsw i32 %124, 1
  %126 = sext i32 %125 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 1 %123, i64 %126, i1 false)
  %127 = add nsw i32 %115, 1
  %128 = load i32, i32* %108, align 4
  %129 = icmp slt i32 %127, %128
  br i1 %129, label %114, label %130

130:                                              ; preds = %114, %107
  %131 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %138 = load i32, i32* %137, align 8
  %139 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %140 = load i8*, i8** %139, align 8
  %141 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %142 = load i32, i32* %141, align 4
  %143 = sdiv i32 %15, 2
  %144 = sdiv i32 %21, 2
  tail call fastcc void @Scale2D(i8* %132, i32 %134, i32 %136, i32 %138, i8* %140, i32 %142, i32 %143, i32 %144, i8* %2, i8 zeroext %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8)
  %145 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %146 = load i32, i32* %145, align 4
  %147 = icmp slt i32 %143, %146
  %148 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  %149 = load i32, i32* %148, align 8
  %150 = icmp sgt i32 %149, 0
  %151 = and i1 %147, %150
  br i1 %151, label %152, label %185

152:                                              ; preds = %130
  %153 = sext i32 %143 to i64
  %154 = add nsw i32 %143, -2
  %155 = sub nsw i32 1, %143
  %156 = load i8*, i8** %139, align 8
  %157 = getelementptr inbounds i8, i8* %156, i64 -1
  %158 = getelementptr inbounds i8, i8* %157, i64 %153
  %159 = sext i32 %154 to i64
  %160 = getelementptr inbounds i8, i8* %156, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = add i32 %155, %146
  %163 = sext i32 %162 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %158, i8 %161, i64 %163, i1 false)
  %164 = load i32, i32* %148, align 8
  %165 = icmp sgt i32 %164, 1
  br i1 %165, label %166, label %185

166:                                              ; preds = %152, %166
  %167 = phi i32 [ %182, %166 ], [ 1, %152 ]
  %168 = load i32, i32* %145, align 4
  %169 = load i8*, i8** %139, align 8
  %170 = load i32, i32* %141, align 4
  %171 = mul nsw i32 %170, %167
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %169, i64 -1
  %174 = getelementptr inbounds i8, i8* %173, i64 %153
  %175 = getelementptr inbounds i8, i8* %174, i64 %172
  %176 = add i32 %154, %171
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %169, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = add i32 %155, %168
  %181 = sext i32 %180 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 %179, i64 %181, i1 false)
  %182 = add nuw nsw i32 %167, 1
  %183 = load i32, i32* %148, align 8
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %166, label %185

185:                                              ; preds = %166, %152, %130
  %186 = phi i32 [ %149, %130 ], [ %164, %152 ], [ %183, %166 ]
  %187 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  %188 = icmp slt i32 %144, %186
  br i1 %188, label %189, label %212

189:                                              ; preds = %185
  %190 = load i32, i32* %108, align 4
  %191 = sdiv i32 %190, 2
  %192 = icmp sgt i32 %144, %191
  br i1 %192, label %212, label %193

193:                                              ; preds = %189
  %194 = add nsw i32 %144, -1
  %195 = add nsw i32 %144, -2
  br label %196

196:                                              ; preds = %193, %196
  %197 = phi i32 [ %194, %193 ], [ %208, %196 ]
  %198 = load i8*, i8** %139, align 8
  %199 = load i32, i32* %141, align 4
  %200 = mul nsw i32 %199, %197
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i8, i8* %198, i64 %201
  %203 = mul nsw i32 %199, %195
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %198, i64 %204
  %206 = load i32, i32* %145, align 4
  %207 = sext i32 %206 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %202, i8* align 1 %205, i64 %207, i1 false)
  %208 = add nsw i32 %197, 1
  %209 = load i32, i32* %108, align 4
  %210 = sdiv i32 %209, 2
  %211 = icmp slt i32 %208, %210
  br i1 %211, label %196, label %212

212:                                              ; preds = %196, %189, %185
  %213 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %214 = load i8*, i8** %213, align 8
  %215 = load i32, i32* %133, align 4
  %216 = load i32, i32* %135, align 4
  %217 = load i32, i32* %137, align 8
  %218 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %219 = load i8*, i8** %218, align 8
  %220 = load i32, i32* %141, align 4
  tail call fastcc void @Scale2D(i8* %214, i32 %215, i32 %216, i32 %217, i8* %219, i32 %220, i32 %143, i32 %144, i8* %2, i8 zeroext %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8)
  %221 = load i32, i32* %145, align 4
  %222 = icmp slt i32 %143, %221
  %223 = load i32, i32* %187, align 8
  %224 = icmp sgt i32 %223, 0
  %225 = and i1 %222, %224
  br i1 %225, label %226, label %259

226:                                              ; preds = %212
  %227 = sext i32 %143 to i64
  %228 = add nsw i32 %143, -2
  %229 = sub nsw i32 1, %143
  %230 = load i8*, i8** %218, align 8
  %231 = getelementptr inbounds i8, i8* %230, i64 -1
  %232 = getelementptr inbounds i8, i8* %231, i64 %227
  %233 = sext i32 %228 to i64
  %234 = getelementptr inbounds i8, i8* %230, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = add i32 %229, %221
  %237 = sext i32 %236 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %232, i8 %235, i64 %237, i1 false)
  %238 = load i32, i32* %187, align 8
  %239 = icmp sgt i32 %238, 1
  br i1 %239, label %240, label %259

240:                                              ; preds = %226, %240
  %241 = phi i32 [ %256, %240 ], [ 1, %226 ]
  %242 = load i32, i32* %145, align 4
  %243 = load i8*, i8** %218, align 8
  %244 = load i32, i32* %141, align 4
  %245 = mul nsw i32 %244, %241
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %243, i64 -1
  %248 = getelementptr inbounds i8, i8* %247, i64 %227
  %249 = getelementptr inbounds i8, i8* %248, i64 %246
  %250 = add i32 %228, %245
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %243, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = add i32 %229, %242
  %255 = sext i32 %254 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %249, i8 %253, i64 %255, i1 false)
  %256 = add nuw nsw i32 %241, 1
  %257 = load i32, i32* %187, align 8
  %258 = icmp slt i32 %256, %257
  br i1 %258, label %240, label %259

259:                                              ; preds = %240, %226, %212
  %260 = phi i32 [ %223, %212 ], [ %238, %226 ], [ %257, %240 ]
  %261 = icmp slt i32 %144, %260
  br i1 %261, label %262, label %285

262:                                              ; preds = %259
  %263 = load i32, i32* %108, align 4
  %264 = sdiv i32 %263, 2
  %265 = icmp sgt i32 %144, %264
  br i1 %265, label %285, label %266

266:                                              ; preds = %262
  %267 = add nsw i32 %144, -1
  %268 = add nsw i32 %144, -2
  br label %269

269:                                              ; preds = %266, %269
  %270 = phi i32 [ %267, %266 ], [ %281, %269 ]
  %271 = load i8*, i8** %218, align 8
  %272 = load i32, i32* %141, align 4
  %273 = mul nsw i32 %272, %270
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i8, i8* %271, i64 %274
  %276 = mul nsw i32 %272, %268
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %271, i64 %277
  %279 = load i32, i32* %145, align 4
  %280 = sext i32 %279 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %275, i8* align 1 %278, i64 %280, i1 false)
  %281 = add nsw i32 %270, 1
  %282 = load i32, i32* %108, align 4
  %283 = sdiv i32 %282, 2
  %284 = icmp slt i32 %281, %283
  br i1 %284, label %269, label %285

285:                                              ; preds = %269, %262, %259
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @Scale2D(i8*, i32, i32, i32, i8*, i32, i32, i32, i8*, i8 zeroext, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %16 = icmp slt i32 %1, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = add i32 %3, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  br label %22

22:                                               ; preds = %17, %15
  %23 = phi i8* [ %21, %17 ], [ %0, %15 ]
  %24 = mul i32 %11, 10
  %25 = udiv i32 %24, %10
  %26 = add i32 %25, -5
  %27 = icmp ult i32 %26, 4
  br i1 %27, label %28, label %35

28:                                               ; preds = %22
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds [4 x void (i8*, i32, i8*, i32)*], [4 x void (i8*, i32, i8*, i32)*]* @switch.table.Scale2D, i64 0, i64 %29
  %31 = load void (i8*, i32, i8*, i32)*, void (i8*, i32, i8*, i32)** %30, align 8
  %32 = sext i32 %26 to i64
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.Scale2D.1, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4
  br label %35

35:                                               ; preds = %22, %28
  %36 = phi void (i8*, i32, i8*, i32)* [ %31, %28 ], [ null, %22 ]
  %37 = phi i32 [ %34, %28 ], [ 0, %22 ]
  %38 = mul i32 %13, 10
  %39 = udiv i32 %38, %12
  switch i32 %39, label %110 [
    i32 8, label %45
    i32 6, label %40
    i32 5, label %41
  ]

40:                                               ; preds = %35
  br label %45

41:                                               ; preds = %35
  %42 = icmp eq i32 %14, 0
  %43 = select i1 %42, void (i8*, i32, i8*, i32, i32)* @vp8_vertical_band_2_1_scale_i_c, void (i8*, i32, i8*, i32, i32)* @vp8_vertical_band_2_1_scale_c
  %44 = zext i1 %42 to i32
  br label %45

45:                                               ; preds = %35, %41, %40
  %46 = phi i32 [ 1, %41 ], [ 3, %40 ], [ 4, %35 ]
  %47 = phi i32 [ 2, %41 ], [ 5, %40 ], [ 5, %35 ]
  %48 = phi void (i8*, i32, i8*, i32, i32)* [ %43, %41 ], [ @vp8_vertical_band_5_3_scale_c, %40 ], [ @vp8_vertical_band_5_4_scale_c, %35 ]
  %49 = phi i32 [ %44, %41 ], [ 0, %40 ], [ 0, %35 ]
  %50 = icmp eq i32 %37, 0
  br i1 %50, label %110, label %51

51:                                               ; preds = %45
  %52 = icmp eq i32 %3, %7
  br i1 %52, label %53, label %66

53:                                               ; preds = %51
  %54 = icmp sgt i32 %3, 0
  br i1 %54, label %55, label %208

55:                                               ; preds = %53
  %56 = sext i32 %1 to i64
  %57 = sext i32 %5 to i64
  br label %58

58:                                               ; preds = %58, %55
  %59 = phi i8* [ %0, %55 ], [ %62, %58 ]
  %60 = phi i32 [ 0, %55 ], [ %64, %58 ]
  %61 = phi i8* [ %4, %55 ], [ %63, %58 ]
  tail call void %36(i8* %59, i32 %2, i8* %61, i32 %6) #4, !callees !2
  %62 = getelementptr inbounds i8, i8* %59, i64 %56
  %63 = getelementptr inbounds i8, i8* %61, i64 %57
  %64 = add nuw nsw i32 %60, 1
  %65 = icmp eq i32 %64, %3
  br i1 %65, label %208, label %58

66:                                               ; preds = %51
  %67 = icmp ne i32 %49, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %66
  %69 = icmp ugt i8* %23, %0
  %70 = select i1 %69, i8* %23, i8* %0
  tail call void %36(i8* %70, i32 %2, i8* %8, i32 %6) #4, !callees !2
  br label %71

71:                                               ; preds = %68, %66
  %72 = phi i8* [ %70, %68 ], [ %0, %66 ]
  %73 = add i32 %7, -1
  %74 = add i32 %73, %46
  %75 = sdiv i32 %74, %46
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %77, label %208

77:                                               ; preds = %71
  %78 = sext i32 %5 to i64
  %79 = getelementptr inbounds i8, i8* %8, i64 %78
  %80 = mul nsw i32 %47, %5
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %8, i64 %81
  %83 = zext i32 %6 to i64
  %84 = zext i32 %47 to i64
  %85 = sext i32 %1 to i64
  %86 = mul nsw i64 %84, %85
  %87 = zext i32 %46 to i64
  %88 = mul nsw i64 %87, %78
  br label %89

89:                                               ; preds = %105, %77
  %90 = phi i8* [ %72, %77 ], [ %106, %105 ]
  %91 = phi i32 [ 0, %77 ], [ %108, %105 ]
  %92 = phi i8* [ %4, %77 ], [ %107, %105 ]
  br label %93

93:                                               ; preds = %93, %89
  %94 = phi i64 [ 0, %89 ], [ %99, %93 ]
  %95 = mul nsw i64 %94, %85
  %96 = getelementptr inbounds i8, i8* %90, i64 %95
  %97 = icmp ult i8* %96, %23
  %98 = select i1 %97, i8* %23, i8* %96
  %99 = add nuw nsw i64 %94, 1
  %100 = mul nsw i64 %99, %78
  %101 = getelementptr inbounds i8, i8* %8, i64 %100
  tail call void %36(i8* %98, i32 %2, i8* %101, i32 %6) #4, !callees !2
  %102 = icmp eq i64 %99, %84
  br i1 %102, label %103, label %93

103:                                              ; preds = %93
  tail call void %48(i8* %79, i32 %5, i8* %92, i32 %5, i32 %6) #4, !callees !3
  br i1 %67, label %104, label %105

104:                                              ; preds = %103
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %82, i64 %83, i1 false)
  br label %105

105:                                              ; preds = %104, %103
  %106 = getelementptr inbounds i8, i8* %90, i64 %86
  %107 = getelementptr inbounds i8, i8* %92, i64 %88
  %108 = add nuw nsw i32 %91, 1
  %109 = icmp eq i32 %108, %75
  br i1 %109, label %208, label %89

110:                                              ; preds = %35, %45
  %111 = icmp eq i32 %10, 2
  %112 = icmp eq i32 %11, 1
  %113 = and i1 %111, %112
  %114 = select i1 %113, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c
  %115 = icmp eq i32 %12, 2
  %116 = icmp eq i32 %13, 1
  %117 = and i1 %115, %116
  %118 = icmp eq i32 %14, 0
  %119 = select i1 %118, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_i, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps
  %120 = select i1 %117, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* %119, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c
  %121 = icmp eq i32 %3, %7
  br i1 %121, label %122, label %136

122:                                              ; preds = %110
  %123 = icmp sgt i32 %3, 0
  br i1 %123, label %124, label %208

124:                                              ; preds = %122
  %125 = add i32 %2, 1
  %126 = sext i32 %1 to i64
  %127 = sext i32 %5 to i64
  br label %128

128:                                              ; preds = %128, %124
  %129 = phi i8* [ %0, %124 ], [ %132, %128 ]
  %130 = phi i32 [ 0, %124 ], [ %134, %128 ]
  %131 = phi i8* [ %4, %124 ], [ %133, %128 ]
  tail call void %114(i8* %129, i32 1, i32 %10, i32 %125, i8* %131, i32 1, i32 %11, i32 %6) #4, !callees !4
  %132 = getelementptr inbounds i8, i8* %129, i64 %126
  %133 = getelementptr inbounds i8, i8* %131, i64 %127
  %134 = add nuw nsw i32 %130, 1
  %135 = icmp eq i32 %134, %3
  br i1 %135, label %208, label %128

136:                                              ; preds = %110
  %137 = icmp ugt i32 %7, %3
  %138 = zext i8 %9 to i32
  %139 = add nsw i32 %138, -1
  br i1 %137, label %140, label %143

140:                                              ; preds = %136
  %141 = mul i32 %139, %3
  %142 = udiv i32 %141, %7
  br label %146

143:                                              ; preds = %136
  %144 = mul i32 %139, %13
  %145 = udiv i32 %144, %12
  br label %146

146:                                              ; preds = %143, %140
  %147 = phi i32 [ %139, %140 ], [ %145, %143 ]
  %148 = phi i32 [ %142, %140 ], [ %139, %143 ]
  %149 = add i32 %2, 1
  tail call void %114(i8* %0, i32 1, i32 %10, i32 %149, i8* %8, i32 1, i32 %11, i32 %6) #4, !callees !4
  %150 = add i32 %7, -1
  %151 = add i32 %150, %147
  %152 = udiv i32 %151, %147
  %153 = icmp sgt i32 %152, 0
  br i1 %153, label %154, label %208

154:                                              ; preds = %146
  %155 = add i32 %148, 1
  %156 = icmp slt i32 %148, 1
  %157 = sext i32 %5 to i64
  %158 = icmp sgt i32 %6, 0
  %159 = mul nsw i32 %148, %5
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %8, i64 %160
  %162 = mul nsw i32 %148, %1
  %163 = sext i32 %162 to i64
  %164 = mul nsw i32 %147, %5
  %165 = sext i32 %164 to i64
  %166 = sext i32 %1 to i64
  %167 = sext i32 %3 to i64
  %168 = sext i32 %148 to i64
  %169 = sext i32 %152 to i64
  %170 = zext i32 %155 to i64
  %171 = zext i32 %6 to i64
  br label %172

172:                                              ; preds = %154, %203
  %173 = phi i64 [ 0, %154 ], [ %206, %203 ]
  %174 = phi i8* [ %0, %154 ], [ %204, %203 ]
  %175 = phi i8* [ %4, %154 ], [ %205, %203 ]
  br i1 %156, label %178, label %176

176:                                              ; preds = %172
  %177 = mul nsw i64 %173, %168
  br label %179

178:                                              ; preds = %194, %172
  br i1 %158, label %197, label %203

179:                                              ; preds = %194, %176
  %180 = phi i64 [ %195, %194 ], [ 1, %176 ]
  %181 = add nsw i64 %180, %177
  %182 = icmp slt i64 %181, %167
  br i1 %182, label %183, label %188

183:                                              ; preds = %179
  %184 = mul nsw i64 %180, %166
  %185 = getelementptr inbounds i8, i8* %174, i64 %184
  %186 = mul nsw i64 %180, %157
  %187 = getelementptr inbounds i8, i8* %8, i64 %186
  tail call void %114(i8* %185, i32 1, i32 %10, i32 %149, i8* %187, i32 1, i32 %11, i32 %6) #4, !callees !4
  br label %194

188:                                              ; preds = %179
  %189 = mul nsw i64 %180, %157
  %190 = getelementptr inbounds i8, i8* %8, i64 %189
  %191 = add nsw i64 %180, -1
  %192 = mul nsw i64 %191, %157
  %193 = getelementptr inbounds i8, i8* %8, i64 %192
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* align 1 %193, i64 %157, i1 false)
  br label %194

194:                                              ; preds = %183, %188
  %195 = add nuw nsw i64 %180, 1
  %196 = icmp eq i64 %195, %170
  br i1 %196, label %178, label %179

197:                                              ; preds = %178, %197
  %198 = phi i64 [ %201, %197 ], [ 0, %178 ]
  %199 = getelementptr inbounds i8, i8* %8, i64 %198
  %200 = getelementptr inbounds i8, i8* %175, i64 %198
  tail call void %120(i8* %199, i32 %5, i32 %12, i32 %155, i8* %200, i32 %5, i32 %13, i32 %147) #4, !callees !5
  %201 = add nuw nsw i64 %198, 1
  %202 = icmp eq i64 %201, %171
  br i1 %202, label %203, label %197

203:                                              ; preds = %197, %178
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %161, i64 %157, i1 false)
  %204 = getelementptr inbounds i8, i8* %174, i64 %163
  %205 = getelementptr inbounds i8, i8* %175, i64 %165
  %206 = add nuw nsw i64 %173, 1
  %207 = icmp slt i64 %206, %169
  br i1 %207, label %172, label %208

208:                                              ; preds = %105, %58, %203, %128, %71, %53, %146, %122
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @scale1d_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32, i32, i32) unnamed_addr #2 {
  %9 = lshr i32 %6, 1
  %10 = sext i32 %1 to i64
  %11 = mul i32 %7, %5
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %54, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %0, i64 %10
  %15 = load i8, i8* %14, align 1
  %16 = load i8, i8* %0, align 1
  br label %17

17:                                               ; preds = %13, %46
  %18 = phi i8 [ %50, %46 ], [ %15, %13 ]
  %19 = phi i8 [ %49, %46 ], [ %16, %13 ]
  %20 = phi i32 [ %48, %46 ], [ 0, %13 ]
  %21 = phi i32 [ %51, %46 ], [ %6, %13 ]
  %22 = phi i32 [ %52, %46 ], [ 0, %13 ]
  %23 = phi i8* [ %47, %46 ], [ %0, %13 ]
  %24 = zext i8 %19 to i32
  %25 = mul i32 %21, %24
  %26 = zext i8 %18 to i32
  %27 = mul i32 %20, %26
  %28 = add i32 %25, %9
  %29 = add i32 %28, %27
  %30 = udiv i32 %29, %6
  %31 = trunc i32 %30 to i8
  %32 = zext i32 %22 to i64
  %33 = getelementptr inbounds i8, i8* %4, i64 %32
  store i8 %31, i8* %33, align 1
  %34 = add i32 %20, %2
  %35 = icmp ugt i32 %34, %6
  br i1 %35, label %36, label %46

36:                                               ; preds = %17, %36
  %37 = phi i32 [ %39, %36 ], [ %34, %17 ]
  %38 = phi i8* [ %40, %36 ], [ %23, %17 ]
  %39 = sub i32 %37, %6
  %40 = getelementptr inbounds i8, i8* %38, i64 %10
  %41 = icmp ugt i32 %39, %6
  br i1 %41, label %36, label %42

42:                                               ; preds = %36
  %43 = load i8, i8* %40, align 1
  %44 = getelementptr inbounds i8, i8* %40, i64 %10
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %42, %17
  %47 = phi i8* [ %40, %42 ], [ %23, %17 ]
  %48 = phi i32 [ %39, %42 ], [ %34, %17 ]
  %49 = phi i8 [ %43, %42 ], [ %19, %17 ]
  %50 = phi i8 [ %45, %42 ], [ %18, %17 ]
  %51 = sub i32 %6, %48
  %52 = add i32 %22, %5
  %53 = icmp ult i32 %52, %11
  br i1 %53, label %17, label %54

54:                                               ; preds = %46, %8
  ret void
}

declare void @vp8_horizontal_line_5_4_scale_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @vp8_horizontal_line_5_3_scale_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @vp8_horizontal_line_2_1_scale_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @vp8_vertical_band_5_4_scale_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @vp8_vertical_band_5_3_scale_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @vp8_vertical_band_2_1_scale_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @vp8_vertical_band_2_1_scale_i_c(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @scale1d_2t1_ps(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32, i32, i32) unnamed_addr #2 {
  %9 = shl i32 %1, 1
  %10 = mul i32 %7, %5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %8, %12
  %13 = phi i32 [ %21, %12 ], [ 0, %8 ]
  %14 = phi i32 [ %20, %12 ], [ 0, %8 ]
  %15 = zext i32 %13 to i64
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i32 %14 to i64
  %19 = getelementptr inbounds i8, i8* %4, i64 %18
  store i8 %17, i8* %19, align 1
  %20 = add i32 %14, %5
  %21 = add i32 %13, %9
  %22 = icmp ult i32 %20, %10
  br i1 %22, label %12, label %23

23:                                               ; preds = %12, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @scale1d_2t1_i(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32, i32, i32) unnamed_addr #2 {
  %9 = shl nsw i32 %1, 1
  %10 = load i8, i8* %0, align 1
  store i8 %10, i8* %4, align 1
  %11 = mul i32 %7, %5
  %12 = icmp ugt i32 %11, %5
  br i1 %12, label %13, label %42

13:                                               ; preds = %8, %13
  %14 = phi i32 [ %40, %13 ], [ %9, %8 ]
  %15 = phi i32 [ %39, %13 ], [ %5, %8 ]
  %16 = sub i32 %14, %1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = zext i32 %14 to i64
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, 10
  %26 = add i32 %14, %1
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %30, %20
  %32 = mul nuw nsw i32 %31, 3
  %33 = add nuw nsw i32 %25, 8
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 4
  %36 = trunc i32 %35 to i8
  %37 = zext i32 %15 to i64
  %38 = getelementptr inbounds i8, i8* %4, i64 %37
  store i8 %36, i8* %38, align 1
  %39 = add i32 %15, %5
  %40 = add i32 %14, %9
  %41 = icmp ult i32 %39, %11
  br i1 %41, label %13, label %42

42:                                               ; preds = %13, %8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i32, i8*, i32)* @vp8_horizontal_line_2_1_scale_c, void (i8*, i32, i8*, i32)* @vp8_horizontal_line_5_3_scale_c, void (i8*, i32, i8*, i32)* @vp8_horizontal_line_5_4_scale_c}
!3 = !{void (i8*, i32, i8*, i32, i32)* @vp8_vertical_band_2_1_scale_c, void (i8*, i32, i8*, i32, i32)* @vp8_vertical_band_2_1_scale_i_c, void (i8*, i32, i8*, i32, i32)* @vp8_vertical_band_5_3_scale_c, void (i8*, i32, i8*, i32, i32)* @vp8_vertical_band_5_4_scale_c}
!4 = !{void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c}
!5 = !{void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_i, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_2t1_ps, void (i8*, i32, i32, i32, i8*, i32, i32, i32)* @scale1d_c}
