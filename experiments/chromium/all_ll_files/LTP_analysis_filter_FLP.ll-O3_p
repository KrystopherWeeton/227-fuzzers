; ModuleID = '../../third_party/opus/src/silk/float/LTP_analysis_filter_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/LTP_analysis_filter_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_LTP_analysis_filter_FLP(float* nocapture, float* nocapture readonly, float* nocapture readonly, i32* nocapture readonly, float* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %9 = alloca [5 x float], align 16
  %10 = bitcast [5 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %10) #2
  %11 = getelementptr inbounds [5 x float], [5 x float]* %9, i64 0, i64 0
  %12 = getelementptr inbounds [5 x float], [5 x float]* %9, i64 0, i64 1
  %13 = getelementptr inbounds [5 x float], [5 x float]* %9, i64 0, i64 2
  %14 = getelementptr inbounds [5 x float], [5 x float]* %9, i64 0, i64 3
  %15 = getelementptr inbounds [5 x float], [5 x float]* %9, i64 0, i64 4
  %16 = icmp sgt i32 %6, 0
  %17 = bitcast [5 x float]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 20, i1 false)
  br i1 %16, label %18, label %112

18:                                               ; preds = %8
  %19 = add i32 %7, %5
  %20 = icmp sgt i32 %19, 0
  %21 = sext i32 %5 to i64
  br i1 %20, label %28, label %22

22:                                               ; preds = %18
  %23 = zext i32 %6 to i64
  %24 = and i64 %23, 1
  %25 = icmp eq i32 %6, 1
  br i1 %25, label %106, label %26

26:                                               ; preds = %22
  %27 = sub nsw i64 %23, %24
  br label %88

28:                                               ; preds = %18
  %29 = sext i32 %19 to i64
  %30 = zext i32 %6 to i64
  %31 = zext i32 %19 to i64
  br label %32

32:                                               ; preds = %83, %28
  %33 = phi i64 [ 0, %28 ], [ %86, %83 ]
  %34 = phi float* [ %0, %28 ], [ %84, %83 ]
  %35 = phi float* [ %1, %28 ], [ %85, %83 ]
  %36 = mul i64 %33, 5
  %37 = and i64 %36, 4294967295
  %38 = getelementptr float, float* %2, i64 %37
  %39 = bitcast float* %38 to i8*
  %40 = getelementptr inbounds i32, i32* %3, i64 %33
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = sub nsw i64 0, %42
  %44 = getelementptr inbounds float, float* %4, i64 %33
  %45 = load float, float* %44, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 4 %39, i64 20, i1 false)
  %46 = getelementptr inbounds float, float* %35, i64 %43
  br label %47

47:                                               ; preds = %47, %32
  %48 = phi i64 [ 0, %32 ], [ %81, %47 ]
  %49 = phi float* [ %46, %32 ], [ %62, %47 ]
  %50 = getelementptr inbounds float, float* %35, i64 %48
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds float, float* %34, i64 %48
  %54 = bitcast float* %53 to i32*
  store i32 %52, i32* %54, align 4
  %55 = load float, float* %11, align 16
  %56 = getelementptr inbounds float, float* %49, i64 2
  %57 = load float, float* %56, align 4
  %58 = fmul float %55, %57
  %59 = bitcast i32 %52 to float
  %60 = fsub float %59, %58
  store float %60, float* %53, align 4
  %61 = load float, float* %12, align 4
  %62 = getelementptr inbounds float, float* %49, i64 1
  %63 = load float, float* %62, align 4
  %64 = fmul float %61, %63
  %65 = fsub float %60, %64
  store float %65, float* %53, align 4
  %66 = load float, float* %13, align 8
  %67 = load float, float* %49, align 4
  %68 = fmul float %66, %67
  %69 = fsub float %65, %68
  store float %69, float* %53, align 4
  %70 = load float, float* %14, align 4
  %71 = getelementptr inbounds float, float* %49, i64 -1
  %72 = load float, float* %71, align 4
  %73 = fmul float %70, %72
  %74 = fsub float %69, %73
  store float %74, float* %53, align 4
  %75 = load float, float* %15, align 16
  %76 = getelementptr inbounds float, float* %49, i64 -2
  %77 = load float, float* %76, align 4
  %78 = fmul float %75, %77
  %79 = fsub float %74, %78
  %80 = fmul float %45, %79
  store float %80, float* %53, align 4
  %81 = add nuw nsw i64 %48, 1
  %82 = icmp eq i64 %81, %31
  br i1 %82, label %83, label %47

83:                                               ; preds = %47
  %84 = getelementptr inbounds float, float* %34, i64 %29
  %85 = getelementptr inbounds float, float* %35, i64 %21
  %86 = add nuw nsw i64 %33, 1
  %87 = icmp eq i64 %86, %30
  br i1 %87, label %112, label %32

88:                                               ; preds = %88, %26
  %89 = phi i64 [ 0, %26 ], [ %100, %88 ]
  %90 = phi i64 [ %27, %26 ], [ %101, %88 ]
  %91 = mul i64 %89, 5
  %92 = and i64 %91, 4294967294
  %93 = getelementptr float, float* %2, i64 %92
  %94 = bitcast float* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 4 %94, i64 20, i1 false)
  %95 = or i64 %89, 1
  %96 = mul i64 %95, 5
  %97 = and i64 %96, 4294967295
  %98 = getelementptr float, float* %2, i64 %97
  %99 = bitcast float* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 4 %99, i64 20, i1 false)
  %100 = add nuw nsw i64 %89, 2
  %101 = add i64 %90, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %88

103:                                              ; preds = %88
  %104 = mul i64 %100, 5
  %105 = and i64 %104, 4294967294
  br label %106

106:                                              ; preds = %103, %22
  %107 = phi i64 [ 0, %22 ], [ %105, %103 ]
  %108 = icmp eq i64 %24, 0
  br i1 %108, label %112, label %109

109:                                              ; preds = %106
  %110 = getelementptr float, float* %2, i64 %107
  %111 = bitcast float* %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 4 %111, i64 20, i1 false)
  br label %112

112:                                              ; preds = %109, %106, %83, %8
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %10) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
