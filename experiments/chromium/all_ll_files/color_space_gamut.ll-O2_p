; ModuleID = '../../third_party/blink/renderer/platform/graphics/color_space_gamut.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/color_space_gamut.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%"struct.blink::ScreenInfo" = type { float, %"class.gfx::DisplayColorSpaces", i32, i32, i8, i32, %"class.gfx::Rect", %"class.gfx::Rect", i32, i16, i8, i8, i8, i64 }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.6, [8 x i8] }
%struct.anon.6 = type { i32, i8*, i8* }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%struct.anon = type { i32, %struct.skcms_TransferFunction }

@__const._ZN5blink21color_space_utilities18GetColorSpaceGamutEPK16skcms_ICCProfile.sc_rgb = private unnamed_addr constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } } { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i8 -86, [3 x i8] c"\AA\AA\AA", %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], [4 x i8] c"\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] } }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21color_space_utilities18GetColorSpaceGamutERKNS_10ScreenInfoE(%"struct.blink::ScreenInfo"* dereferenceable(552)) local_unnamed_addr #0 {
  %2 = alloca %"class.gfx::ColorSpace", align 4
  %3 = alloca %class.sk_sp, align 8
  %4 = alloca %struct.skcms_ICCProfile, align 8
  %5 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %5) #4
  %6 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 1
  call void @_ZNK3gfx18DisplayColorSpaces23GetScreenInfoColorSpaceEv(%"class.gfx::ColorSpace"* nonnull sret %2, %"class.gfx::DisplayColorSpaces"* %6) #4
  %7 = call zeroext i1 @_ZNK3gfx10ColorSpace7IsValidEv(%"class.gfx::ColorSpace"* nonnull %2) #4
  br i1 %7, label %8, label %28

8:                                                ; preds = %1
  %9 = call zeroext i1 @_ZNK3gfx10ColorSpace5IsHDREv(%"class.gfx::ColorSpace"* nonnull %2) #4
  br i1 %9, label %28, label %10

10:                                               ; preds = %8
  %11 = bitcast %class.sk_sp* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #4
  %12 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  store %class.SkColorSpace* inttoptr (i64 -6148914691236517206 to %class.SkColorSpace*), %class.SkColorSpace** %12, align 8
  call void @_ZNK3gfx10ColorSpace14ToSkColorSpaceEv(%class.sk_sp* nonnull sret %3, %"class.gfx::ColorSpace"* nonnull %2) #4
  %13 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8
  %14 = icmp eq %class.SkColorSpace* %13, null
  br i1 %14, label %26, label %15

15:                                               ; preds = %10
  %16 = bitcast %struct.skcms_ICCProfile* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %16) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN5blink21color_space_utilities18GetColorSpaceGamutEPK16skcms_ICCProfile.sc_rgb to i8*), i64 1008, i1 false)
  call void @_ZNK12SkColorSpace9toProfileEP16skcms_ICCProfile(%class.SkColorSpace* nonnull %13, %struct.skcms_ICCProfile* nonnull %4) #4
  %17 = call i32 @_ZN5blink21color_space_utilities18GetColorSpaceGamutEPK16skcms_ICCProfile(%struct.skcms_ICCProfile* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %16) #4
  %18 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8
  %19 = icmp eq %class.SkColorSpace* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = bitcast %class.SkColorSpace* %18 to i8*
  call void @_ZdlPv(i8* %25) #5
  br label %26

26:                                               ; preds = %10, %15, %20, %24
  %27 = phi i32 [ %17, %15 ], [ %17, %20 ], [ %17, %24 ], [ 0, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #4
  br label %28

28:                                               ; preds = %8, %1, %26
  %29 = phi i32 [ %27, %26 ], [ 0, %1 ], [ 8, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %5) #4
  ret i32 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK3gfx18DisplayColorSpaces23GetScreenInfoColorSpaceEv(%"class.gfx::ColorSpace"* sret, %"class.gfx::DisplayColorSpaces"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK3gfx10ColorSpace7IsValidEv(%"class.gfx::ColorSpace"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK3gfx10ColorSpace5IsHDREv(%"class.gfx::ColorSpace"*) local_unnamed_addr #2

declare void @_ZNK3gfx10ColorSpace14ToSkColorSpaceEv(%class.sk_sp* sret, %"class.gfx::ColorSpace"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNK12SkColorSpace9toProfileEP16skcms_ICCProfile(%class.SkColorSpace*, %struct.skcms_ICCProfile*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink21color_space_utilities18GetColorSpaceGamutEPK16skcms_ICCProfile(%struct.skcms_ICCProfile*) local_unnamed_addr #0 {
  %2 = alloca %struct.skcms_ICCProfile, align 8
  %3 = alloca [3 x [3 x i8]], align 1
  %4 = alloca [3 x [3 x float]], align 16
  %5 = icmp eq %struct.skcms_ICCProfile* %0, null
  br i1 %5, label %63, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.skcms_ICCProfile* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %7) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN5blink21color_space_utilities18GetColorSpaceGamutEPK16skcms_ICCProfile.sc_rgb to i8*), i64 1008, i1 false)
  %8 = tail call %struct.skcms_ICCProfile* @skcms_sRGB_profile() #4
  %9 = bitcast %struct.skcms_ICCProfile* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %9, i64 1008, i1 false)
  %10 = tail call %struct.skcms_TransferFunction* @skcms_Identity_TransferFunction() #4
  %11 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 5
  store i8 1, i8* %11, align 8
  %12 = bitcast %struct.skcms_TransferFunction* %10 to i8*
  %13 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 0
  %14 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %13, i64 0, i32 0, i32 0
  store i32 0, i32* %14, align 8
  %15 = bitcast %union.skcms_Curve* %13 to %struct.anon*
  %16 = getelementptr inbounds %struct.anon, %struct.anon* %15, i64 0, i32 1
  %17 = bitcast %struct.skcms_TransferFunction* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %12, i64 28, i1 false) #4
  %18 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 1
  %19 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %18, i64 0, i32 0, i32 0
  store i32 0, i32* %19, align 8
  %20 = bitcast %union.skcms_Curve* %18 to %struct.anon*
  %21 = getelementptr inbounds %struct.anon, %struct.anon* %20, i64 0, i32 1
  %22 = bitcast %struct.skcms_TransferFunction* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %12, i64 28, i1 false) #4
  %23 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 2
  %24 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %23, i64 0, i32 0, i32 0
  store i32 0, i32* %24, align 8
  %25 = bitcast %union.skcms_Curve* %23 to %struct.anon*
  %26 = getelementptr inbounds %struct.anon, %struct.anon* %25, i64 0, i32 1
  %27 = bitcast %struct.skcms_TransferFunction* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %12, i64 28, i1 false) #4
  %28 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %3, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %28) #4
  %29 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %3, i64 0, i64 1, i64 1
  %30 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %3, i64 0, i64 2, i64 2
  %31 = bitcast [3 x [3 x float]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %31) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -1, i64 36, i1 false)
  %32 = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %3, i64 0, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %32, i8 0, i64 7, i1 false)
  store i8 -1, i8* %28, align 1
  store i8 -1, i8* %29, align 1
  store i8 -1, i8* %30, align 1
  %33 = call zeroext i1 @skcms_Transform(i8* nonnull %28, i32 10, i32 1, %struct.skcms_ICCProfile* nonnull %0, i8* nonnull %31, i32 34, i32 1, %struct.skcms_ICCProfile* nonnull %2, i64 3) #4
  %34 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %4, i64 0, i64 0, i64 0
  %35 = load float, float* %34, align 16
  %36 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %4, i64 0, i64 1, i64 1
  %37 = load float, float* %36, align 4
  %38 = fmul float %35, %37
  %39 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %4, i64 0, i64 2, i64 2
  %40 = load float, float* %39, align 8
  %41 = fmul float %38, %40
  %42 = fpext float %41 to double
  %43 = fcmp olt double %42, 9.000000e-01
  br i1 %43, label %61, label %44

44:                                               ; preds = %6
  %45 = fcmp olt double %42, 0x3FEE666666666666
  br i1 %45, label %61, label %46

46:                                               ; preds = %44
  %47 = fcmp olt double %42, 1.100000e+00
  br i1 %47, label %61, label %48

48:                                               ; preds = %46
  %49 = fcmp olt double %42, 1.300000e+00
  br i1 %49, label %61, label %50

50:                                               ; preds = %48
  %51 = fcmp olt double %42, 1.425000e+00
  br i1 %51, label %61, label %52

52:                                               ; preds = %50
  %53 = fcmp olt float %41, 1.500000e+00
  br i1 %53, label %61, label %54

54:                                               ; preds = %52
  %55 = fcmp olt float %41, 2.000000e+00
  br i1 %55, label %61, label %56

56:                                               ; preds = %54
  %57 = fcmp olt double %42, 2.200000e+00
  br i1 %57, label %61, label %58

58:                                               ; preds = %56
  %59 = fcmp olt double %42, 2.700000e+00
  %60 = select i1 %59, i32 9, i32 10
  br label %61

61:                                               ; preds = %58, %56, %54, %52, %50, %48, %46, %44, %6
  %62 = phi i32 [ 1, %6 ], [ 2, %44 ], [ 3, %46 ], [ 4, %48 ], [ 5, %50 ], [ 6, %52 ], [ 7, %54 ], [ 8, %56 ], [ %60, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %31) #4
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %7) #4
  br label %63

63:                                               ; preds = %1, %61
  %64 = phi i32 [ %62, %61 ], [ 0, %1 ]
  ret i32 %64
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.skcms_ICCProfile* @skcms_sRGB_profile() local_unnamed_addr #2

declare %struct.skcms_TransferFunction* @skcms_Identity_TransferFunction() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @skcms_Transform(i8*, i32, i32, %struct.skcms_ICCProfile*, i8*, i32, i32, %struct.skcms_ICCProfile*, i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
