; ModuleID = '../../components/viz/common/quads/compositor_render_pass_draw_quad.cc'
source_filename = "../../components/viz/common/quads/compositor_render_pass_draw_quad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::CompositorRenderPassDrawQuad" = type { %"class.viz::RenderPassDrawQuadInternal.base", %"class.util::IdType.5" }
%"class.viz::RenderPassDrawQuadInternal.base" = type <{ %"class.viz::DrawQuad.base", %"class.gfx::RectF", %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::PointF", %"class.gfx::RectF", float, i8, i8 }>
%"class.viz::DrawQuad.base" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources" }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.0", float, i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { i64 }
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType"] }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.util::IdType.5" = type { %"class.base::StrongAlias.6" }
%"class.base::StrongAlias.6" = type { i64 }
%"class.viz::RenderPassDrawQuadInternal" = type <{ %"class.viz::DrawQuad.base", %"class.gfx::RectF", %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::PointF", %"class.gfx::RectF", float, i8, i8, [6 x i8] }>
%"class.viz::DrawQuad" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources", [4 x i8] }>
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }

@_ZTVN3viz28CompositorRenderPassDrawQuadE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::CompositorRenderPassDrawQuad"*)* @_ZN3viz28CompositorRenderPassDrawQuadD2Ev to i8*), i8* bitcast (void (%"class.viz::CompositorRenderPassDrawQuad"*)* @_ZN3viz28CompositorRenderPassDrawQuadD0Ev to i8*), i8* bitcast (void (%"class.viz::CompositorRenderPassDrawQuad"*, %"class.base::trace_event::TracedValue"*)* @_ZNK3viz28CompositorRenderPassDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE to i8*)] }, align 8
@.str = private unnamed_addr constant [15 x i8] c"render_pass_id\00", align 1

@_ZN3viz28CompositorRenderPassDrawQuadC1Ev = hidden unnamed_addr alias void (%"class.viz::CompositorRenderPassDrawQuad"*), void (%"class.viz::CompositorRenderPassDrawQuad"*)* @_ZN3viz28CompositorRenderPassDrawQuadC2Ev
@_ZN3viz28CompositorRenderPassDrawQuadC1ERKS0_ = hidden unnamed_addr alias void (%"class.viz::CompositorRenderPassDrawQuad"*, %"class.viz::CompositorRenderPassDrawQuad"*), void (%"class.viz::CompositorRenderPassDrawQuad"*, %"class.viz::CompositorRenderPassDrawQuad"*)* @_ZN3viz28CompositorRenderPassDrawQuadC2ERKS0_
@_ZN3viz28CompositorRenderPassDrawQuadD1Ev = hidden unnamed_addr alias void (%"class.viz::CompositorRenderPassDrawQuad"*), void (%"class.viz::CompositorRenderPassDrawQuad"*)* @_ZN3viz28CompositorRenderPassDrawQuadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz28CompositorRenderPassDrawQuadC2Ev(%"class.viz::CompositorRenderPassDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::RenderPassDrawQuadInternal"*
  tail call void @_ZN3viz26RenderPassDrawQuadInternalC2Ev(%"class.viz::RenderPassDrawQuadInternal"* %2) #6
  %3 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz28CompositorRenderPassDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 0, i64* %4, align 8
  ret void
}

declare void @_ZN3viz26RenderPassDrawQuadInternalC2Ev(%"class.viz::RenderPassDrawQuadInternal"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz28CompositorRenderPassDrawQuadC2ERKS0_(%"class.viz::CompositorRenderPassDrawQuad"*, %"class.viz::CompositorRenderPassDrawQuad"* dereferenceable(152)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::RenderPassDrawQuadInternal"*
  %4 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %1 to %"class.viz::RenderPassDrawQuadInternal"*
  tail call void @_ZN3viz26RenderPassDrawQuadInternalC2ERKS0_(%"class.viz::RenderPassDrawQuadInternal"* %3, %"class.viz::RenderPassDrawQuadInternal"* dereferenceable(144) %4) #6
  %5 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz28CompositorRenderPassDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %1, i64 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  ret void
}

declare void @_ZN3viz26RenderPassDrawQuadInternalC2ERKS0_(%"class.viz::RenderPassDrawQuadInternal"*, %"class.viz::RenderPassDrawQuadInternal"* dereferenceable(144)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @_ZN3viz26RenderPassDrawQuadInternalD2Ev(%"class.viz::RenderPassDrawQuadInternal"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz28CompositorRenderPassDrawQuadD2Ev(%"class.viz::CompositorRenderPassDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::RenderPassDrawQuadInternal"*
  tail call void @_ZN3viz26RenderPassDrawQuadInternalD2Ev(%"class.viz::RenderPassDrawQuadInternal"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz28CompositorRenderPassDrawQuadD0Ev(%"class.viz::CompositorRenderPassDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::RenderPassDrawQuadInternal"*
  tail call void @_ZN3viz26RenderPassDrawQuadInternalD2Ev(%"class.viz::RenderPassDrawQuadInternal"* %2) #6
  %3 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz28CompositorRenderPassDrawQuad6SetNewEPKNS_15SharedQuadStateERKN3gfx4RectES7_N4util6IdTypeINS_20CompositorRenderPassEmLm0ELm1EEENS9_INS_20ResourceIdTypeMarkerEjLj0ELj1EEERKNS4_5RectFERKNS4_4SizeERKNS4_9Vector2dFERKNS4_6PointFESG_bf(%"class.viz::CompositorRenderPassDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i64, i32, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.gfx::RectF"* nocapture readonly dereferenceable(16), i1 zeroext, float) local_unnamed_addr #0 align 2 {
  %14 = zext i1 %11 to i8
  %15 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %15, %"class.viz::SharedQuadState"* %1, i32 3, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext true) #6
  %16 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %4, i64* %16, align 8
  %17 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  store i32 %5, i32* %17, align 4
  %18 = icmp ne i32 %5, 0
  %19 = zext i1 %18 to i32
  %20 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  store i32 %19, i32* %20, align 8
  %21 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 1
  %22 = bitcast %"class.gfx::RectF"* %21 to i8*
  %23 = bitcast %"class.gfx::RectF"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %23, i64 16, i1 false) #6
  %24 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 2
  %25 = bitcast %"class.gfx::Size"* %7 to i64*
  %26 = bitcast %"class.gfx::Size"* %24 to i64*
  %27 = load i64, i64* %25, align 4
  store i64 %27, i64* %26, align 4
  %28 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %"class.gfx::Vector2dF"* %8 to i64*
  %30 = bitcast %"class.gfx::Vector2dF"* %28 to i64*
  %31 = load i64, i64* %29, align 4
  store i64 %31, i64* %30, align 4
  %32 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 4
  %33 = bitcast %"class.gfx::PointF"* %9 to i64*
  %34 = bitcast %"class.gfx::PointF"* %32 to i64*
  %35 = load i64, i64* %33, align 4
  store i64 %35, i64* %34, align 4
  %36 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 5
  %37 = bitcast %"class.gfx::RectF"* %36 to i8*
  %38 = bitcast %"class.gfx::RectF"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 16, i1 false) #6
  %39 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 7
  store i8 %14, i8* %39, align 8
  %40 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 6
  store float %12, float* %40, align 4
  %41 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 8
  store i8 1, i8* %41, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz28CompositorRenderPassDrawQuad6SetAllEPKNS_15SharedQuadStateERKN3gfx4RectES7_bN4util6IdTypeINS_20CompositorRenderPassEmLm0ELm1EEENS9_INS_20ResourceIdTypeMarkerEjLj0ELj1EEERKNS4_5RectFERKNS4_4SizeERKNS4_9Vector2dFERKNS4_6PointFESG_bfb(%"class.viz::CompositorRenderPassDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, i64, i32, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.gfx::RectF"* nocapture readonly dereferenceable(16), i1 zeroext, float, i1 zeroext) local_unnamed_addr #0 align 2 {
  %16 = zext i1 %12 to i8
  %17 = zext i1 %14 to i8
  %18 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %18, %"class.viz::SharedQuadState"* %1, i32 3, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext %4) #6
  %19 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %5, i64* %19, align 8
  %20 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 0, i32 7, i32 1, i64 0, i32 0, i32 0
  store i32 %6, i32* %20, align 4
  %21 = icmp ne i32 %6, 0
  %22 = zext i1 %21 to i32
  %23 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 1
  %25 = bitcast %"class.gfx::RectF"* %24 to i8*
  %26 = bitcast %"class.gfx::RectF"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %26, i64 16, i1 false)
  %27 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 2
  %28 = bitcast %"class.gfx::Size"* %8 to i64*
  %29 = bitcast %"class.gfx::Size"* %27 to i64*
  %30 = load i64, i64* %28, align 4
  store i64 %30, i64* %29, align 4
  %31 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 3
  %32 = bitcast %"class.gfx::Vector2dF"* %9 to i64*
  %33 = bitcast %"class.gfx::Vector2dF"* %31 to i64*
  %34 = load i64, i64* %32, align 4
  store i64 %34, i64* %33, align 4
  %35 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 4
  %36 = bitcast %"class.gfx::PointF"* %10 to i64*
  %37 = bitcast %"class.gfx::PointF"* %35 to i64*
  %38 = load i64, i64* %36, align 4
  store i64 %38, i64* %37, align 4
  %39 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 5
  %40 = bitcast %"class.gfx::RectF"* %39 to i8*
  %41 = bitcast %"class.gfx::RectF"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 16, i1 false)
  %42 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 7
  store i8 %16, i8* %42, align 8
  %43 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 6
  store float %13, float* %43, align 4
  %44 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 0, i32 8
  store i8 %17, i8* %44, align 1
  ret void
}

declare void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"*, %"class.viz::SharedQuadState"*, i32, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.viz::CompositorRenderPassDrawQuad"* @_ZN3viz28CompositorRenderPassDrawQuad12MaterialCastEPKNS_8DrawQuadE(%"class.viz::DrawQuad"* readnone) local_unnamed_addr #5 align 2 {
  %2 = bitcast %"class.viz::DrawQuad"* %0 to %"class.viz::CompositorRenderPassDrawQuad"*
  ret %"class.viz::CompositorRenderPassDrawQuad"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz28CompositorRenderPassDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE(%"class.viz::CompositorRenderPassDrawQuad"*, %"class.base::trace_event::TracedValue"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CompositorRenderPassDrawQuad", %"class.viz::CompositorRenderPassDrawQuad"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast i64* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_ZN3viz11TracedValue8SetIDRefEPKvPN4base11trace_event11TracedValueEPKc(i8* %5, %"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)) #6
  %6 = bitcast %"class.viz::CompositorRenderPassDrawQuad"* %0 to %"class.viz::RenderPassDrawQuadInternal"*
  tail call void @_ZNK3viz26RenderPassDrawQuadInternal11ExtendValueEPN4base11trace_event11TracedValueE(%"class.viz::RenderPassDrawQuadInternal"* %6, %"class.base::trace_event::TracedValue"* %1) #6
  ret void
}

declare void @_ZN3viz11TracedValue8SetIDRefEPKvPN4base11trace_event11TracedValueEPKc(i8*, %"class.base::trace_event::TracedValue"*, i8*) local_unnamed_addr #1

declare void @_ZNK3viz26RenderPassDrawQuadInternal11ExtendValueEPN4base11trace_event11TracedValueE(%"class.viz::RenderPassDrawQuadInternal"*, %"class.base::trace_event::TracedValue"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
