; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/pickcdef.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/pickcdef.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CdefSearchCtx = type { %struct.yv12_buffer_config*, %struct.CommonModeInfoParams*, [3 x %struct.macroblockd_plane], void (i16*, i32, i8*, i32, i32, i32, i32, i32)*, i64 (i8*, i32, i16*, %struct.cdef_list*, i32, i8, i32, i32, i32)*, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], i32, i32, [2 x [64 x i64]*], i32*, i32 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_mv = type { i32 }
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.AV1_COMP*, %struct.ThreadData*, i32, i32 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.14 }
%union.anon.14 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.10, %union.anon.12, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.10 = type { i64 }
%union.anon.12 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }

@priconv_lvl1 = internal unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 5, i32 7, i32 10, i32 13], align 16
@priconv_lvl2 = internal unnamed_addr constant [5 x i32] [i32 0, i32 2, i32 4, i32 8, i32 14], align 16
@secconv_lvl3 = internal unnamed_addr constant [2 x i32] [i32 0, i32 2], align 4
@priconv_lvl4 = internal unnamed_addr constant [2 x i32] [i32 0, i32 11], align 4
@nb_cdef_strengths = internal unnamed_addr constant [6 x i32] [i32 64, i32 32, i32 20, i32 10, i32 4, i32 64], align 16
@aom_mse_wxh_16bit = external local_unnamed_addr global i64 (i8*, i32, i16*, i32, i32, i32)*, align 8
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@mi_size_wide_log2 = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\01\02\02\02\03\03\03\04\04\04\05\05\00\02\01\03\02\04", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cdef_mse_calc_block(%struct.CdefSearchCtx* readonly, i32, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16384 x i16], align 32
  %6 = alloca [19008 x i16], align 32
  %7 = alloca [1024 x %struct.cdef_list], align 16
  %8 = alloca [16 x [16 x i32]], align 16
  %9 = alloca [16 x [16 x i32]], align 16
  %10 = alloca [3 x i8*], align 16
  %11 = alloca [3 x i32], align 4
  %12 = alloca i32, align 4
  %13 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 1
  %14 = load %struct.CommonModeInfoParams*, %struct.CommonModeInfoParams** %13, align 8
  %15 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 0
  %16 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %15, align 8
  %17 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 6
  %18 = load i32, i32* %17, align 4
  %19 = bitcast [16384 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %19) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %19, i8 -86, i64 32768, i1 false)
  %20 = bitcast [19008 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 38016, i8* nonnull %20) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %20, i8 -86, i64 38016, i1 false)
  %21 = getelementptr inbounds [1024 x %struct.cdef_list], [1024 x %struct.cdef_list]* %7, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %21) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 2048, i1 false)
  %22 = bitcast [16 x [16 x i32]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %22) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 0, i64 1024, i1 false)
  %23 = bitcast [16 x [16 x i32]]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false)
  %24 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 296
  %25 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %14, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = shl nsw i32 %2, 4
  %28 = sub nsw i32 %26, %27
  %29 = icmp slt i32 %28, 16
  %30 = select i1 %29, i32 %28, i32 16
  %31 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %14, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = shl nsw i32 %1, 4
  %34 = sub nsw i32 %32, %33
  %35 = icmp slt i32 %34, 16
  %36 = select i1 %35, i32 %34, i32 16
  %37 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %14, i64 0, i32 9
  %38 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %37, align 8
  %39 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %14, i64 0, i32 11
  %40 = load i32, i32* %39, align 4
  %41 = mul nsw i32 %40, %33
  %42 = add nsw i32 %41, %27
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %38, i64 %43
  %45 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %44, align 8
  %46 = bitcast [3 x i8*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #5
  %47 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 2
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %16, i64 0, i32 5, i32 0
  %49 = bitcast %struct.anon.9* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 8
  %51 = bitcast [3 x i8*]* %10 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %51, align 16
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %16, i64 0, i32 5, i32 0, i32 2
  %53 = bitcast i8** %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast i8** %47 to i64*
  store i64 %54, i64* %55, align 16
  %56 = bitcast [3 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %56) #5
  %57 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 0
  %58 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 1
  %59 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 2
  %60 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %16, i64 0, i32 4, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  store i32 %61, i32* %57, align 4
  %62 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %16, i64 0, i32 4, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %58, align 4
  store i32 %63, i32* %59, align 4
  %64 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %45, i64 0, i32 0
  %65 = load i8, i8* %64, align 8
  %66 = add i8 %65, -13
  %67 = icmp ult i8 %66, 3
  br i1 %67, label %68, label %80

68:                                               ; preds = %4
  %69 = and i8 %65, -2
  %70 = icmp eq i8 %69, 14
  br i1 %70, label %71, label %75

71:                                               ; preds = %68
  %72 = icmp slt i32 %28, 32
  %73 = select i1 %72, i32 %28, i32 32
  %74 = icmp eq i8 %65, 15
  br i1 %74, label %75, label %80

75:                                               ; preds = %71, %68
  %76 = phi i32 [ 2, %71 ], [ 1, %68 ]
  %77 = phi i32 [ %73, %71 ], [ %30, %68 ]
  %78 = icmp slt i32 %34, 32
  %79 = select i1 %78, i32 %34, i32 32
  br label %80

80:                                               ; preds = %71, %4, %75
  %81 = phi i32 [ %77, %75 ], [ %73, %71 ], [ %30, %4 ]
  %82 = phi i32 [ %79, %75 ], [ %36, %71 ], [ %36, %4 ]
  %83 = phi i32 [ %76, %75 ], [ 2, %71 ], [ 1, %4 ]
  %84 = phi i32 [ 2, %75 ], [ 1, %71 ], [ 1, %4 ]
  %85 = phi i8 [ %65, %75 ], [ 14, %71 ], [ 12, %4 ]
  %86 = getelementptr inbounds [1024 x %struct.cdef_list], [1024 x %struct.cdef_list]* %7, i64 0, i64 0
  %87 = call i32 @av1_cdef_compute_sb_list(%struct.CommonModeInfoParams* %14, i32 %33, i32 %27, %struct.cdef_list* nonnull %86, i8 zeroext %85) #5
  %88 = icmp ne i32 %1, 0
  %89 = zext i1 %88 to i32
  %90 = shl nuw nsw i32 %89, 1
  %91 = icmp ne i32 %2, 0
  %92 = zext i1 %91 to i32
  %93 = shl nuw nsw i32 %92, 3
  %94 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94) #5
  store i32 0, i32* %12, align 4
  %95 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 9
  %96 = load i32, i32* %95, align 8
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %80
  %99 = sext i32 %3 to i64
  br label %154

100:                                              ; preds = %80
  %101 = add nsw i32 %84, %1
  %102 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 15
  %103 = add nsw i32 %83, %2
  %104 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 16
  %105 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 3
  %106 = select i1 %88, i32 -288, i32 0
  %107 = sub nsw i32 %106, %93
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i16, i16* %24, i64 %108
  %110 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 5
  %111 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 8
  %112 = getelementptr inbounds [16384 x i16], [16384 x i16]* %5, i64 0, i64 0
  %113 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %8, i64 0, i64 0
  %114 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %9, i64 0, i64 0
  %115 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 7
  %116 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 4
  %117 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 17, i64 1
  %118 = sext i32 %3 to i64
  br label %119

119:                                              ; preds = %201, %100
  %120 = phi i64 [ 0, %100 ], [ %202, %201 ]
  br label %121

121:                                              ; preds = %121, %119
  %122 = phi i64 [ 0, %119 ], [ %152, %121 ]
  %123 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 %122
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %124, align 32
  %125 = getelementptr inbounds i16, i16* %123, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %126, align 16
  %127 = or i64 %122, 16
  %128 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 %127
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %129, align 32
  %130 = getelementptr inbounds i16, i16* %128, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %131, align 16
  %132 = add nuw nsw i64 %122, 32
  %133 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 %132
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %134, align 32
  %135 = getelementptr inbounds i16, i16* %133, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %136, align 16
  %137 = add nuw nsw i64 %122, 48
  %138 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 %137
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %139, align 32
  %140 = getelementptr inbounds i16, i16* %138, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %141, align 16
  %142 = add nuw nsw i64 %122, 64
  %143 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 %142
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %144, align 32
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %146, align 16
  %147 = add nuw nsw i64 %122, 80
  %148 = getelementptr inbounds [19008 x i16], [19008 x i16]* %6, i64 0, i64 %147
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %149, align 32
  %150 = getelementptr inbounds i16, i16* %148, i64 8
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> <i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000, i16 30000>, <8 x i16>* %151, align 16
  %152 = add nuw nsw i64 %122, 96
  %153 = icmp eq i64 %152, 19008
  br i1 %153, label %162, label %121, !llvm.loop !2

154:                                              ; preds = %201, %98
  %155 = phi i64 [ %99, %98 ], [ %118, %201 ]
  %156 = load i32, i32* %39, align 4
  %157 = mul nsw i32 %156, %33
  %158 = add nsw i32 %157, %27
  %159 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 18
  %160 = load i32*, i32** %159, align 8
  %161 = getelementptr inbounds i32, i32* %160, i64 %155
  store i32 %158, i32* %161, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %56) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 38016, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %19) #5
  ret void

162:                                              ; preds = %121
  %163 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 11, i64 %120
  %164 = load i32, i32* %163, align 4
  %165 = shl i32 %82, %164
  %166 = load i32, i32* %102, align 8
  %167 = icmp slt i32 %101, %166
  %168 = zext i1 %167 to i32
  %169 = shl nuw nsw i32 %168, 1
  %170 = add i32 %165, %90
  %171 = add i32 %170, %169
  %172 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 10, i64 %120
  %173 = load i32, i32* %172, align 4
  %174 = shl i32 %81, %173
  %175 = load i32, i32* %104, align 4
  %176 = icmp slt i32 %103, %175
  %177 = zext i1 %176 to i32
  %178 = shl nuw nsw i32 %177, 3
  %179 = add i32 %174, %93
  %180 = add i32 %179, %178
  %181 = shl i32 %33, %164
  %182 = shl i32 %27, %173
  %183 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 2, i64 %120, i32 3, i32 0
  %184 = load i8*, i8** %183, align 8
  %185 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 2, i64 %120, i32 3, i32 4
  %186 = load i32, i32* %185, align 8
  %187 = load void (i16*, i32, i8*, i32, i32, i32, i32, i32)*, void (i16*, i32, i8*, i32, i32, i32, i32, i32)** %105, align 8
  %188 = sub nsw i32 %181, %90
  %189 = sub nsw i32 %182, %93
  call void %187(i16* %109, i32 144, i8* %184, i32 %188, i32 %189, i32 %186, i32 %171, i32 %180) #5
  %190 = load i32, i32* %110, align 8
  %191 = icmp sgt i32 %190, 0
  br i1 %191, label %192, label %201

192:                                              ; preds = %162
  %193 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 12, i64 %120
  %194 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 13, i64 %120
  %195 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 %120
  %196 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 %120
  %197 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 14, i64 %120
  %198 = icmp ult i64 %120, 2
  %199 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %0, i64 0, i32 17, i64 %120
  %200 = trunc i64 %120 to i32
  br label %206

201:                                              ; preds = %260, %162
  %202 = add nuw nsw i64 %120, 1
  %203 = load i32, i32* %95, align 8
  %204 = sext i32 %203 to i64
  %205 = icmp slt i64 %202, %204
  br i1 %205, label %119, label %154

206:                                              ; preds = %192, %260
  %207 = phi i64 [ 0, %192 ], [ %261, %260 ]
  %208 = load i32, i32* %111, align 4
  %209 = icmp ugt i32 %208, 2
  %210 = select i1 %209, i32 1, i32 2
  %211 = trunc i64 %207 to i32
  %212 = lshr i32 %211, %210
  %213 = select i1 %209, i32 1, i32 3
  %214 = and i32 %213, %211
  switch i32 %208, label %237 [
    i32 4, label %230
    i32 1, label %215
    i32 2, label %219
    i32 3, label %223
  ]

215:                                              ; preds = %206
  %216 = zext i32 %212 to i64
  %217 = getelementptr inbounds [8 x i32], [8 x i32]* @priconv_lvl1, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  br label %237

219:                                              ; preds = %206
  %220 = zext i32 %212 to i64
  %221 = getelementptr inbounds [5 x i32], [5 x i32]* @priconv_lvl2, i64 0, i64 %220
  %222 = load i32, i32* %221, align 4
  br label %237

223:                                              ; preds = %206
  %224 = zext i32 %212 to i64
  %225 = getelementptr inbounds [5 x i32], [5 x i32]* @priconv_lvl2, i64 0, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %214 to i64
  %228 = getelementptr inbounds [2 x i32], [2 x i32]* @secconv_lvl3, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  br label %237

230:                                              ; preds = %206
  %231 = zext i32 %212 to i64
  %232 = getelementptr inbounds [2 x i32], [2 x i32]* @priconv_lvl4, i64 0, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = zext i32 %214 to i64
  %235 = getelementptr inbounds [2 x i32], [2 x i32]* @secconv_lvl3, i64 0, i64 %234
  %236 = load i32, i32* %235, align 4
  br label %237

237:                                              ; preds = %206, %215, %219, %223, %230
  %238 = phi i32 [ %212, %206 ], [ %226, %223 ], [ %222, %219 ], [ %218, %215 ], [ %233, %230 ]
  %239 = phi i32 [ %214, %206 ], [ %229, %223 ], [ %214, %219 ], [ %214, %215 ], [ %236, %230 ]
  %240 = load i32, i32* %193, align 4
  %241 = load i32, i32* %194, align 4
  %242 = icmp eq i32 %239, 3
  %243 = zext i1 %242 to i32
  %244 = add nsw i32 %239, %243
  %245 = load i32, i32* %115, align 8
  call void @av1_cdef_filter_fb(i8* null, i16* nonnull %112, i32 144, i16* %24, i32 %240, i32 %241, [16 x i32]* nonnull %113, i32* nonnull %12, [16 x i32]* nonnull %114, i32 %200, %struct.cdef_list* nonnull %86, i32 %87, i32 %238, i32 %244, i32 %245, i32 %18) #5
  %246 = load i64 (i8*, i32, i16*, %struct.cdef_list*, i32, i8, i32, i32, i32)*, i64 (i8*, i32, i16*, %struct.cdef_list*, i32, i8, i32, i32, i32)** %116, align 8
  %247 = load i8*, i8** %195, align 8
  %248 = load i32, i32* %196, align 4
  %249 = load i32, i32* %197, align 4
  %250 = trunc i32 %249 to i8
  %251 = call i64 %246(i8* %247, i32 %248, i16* nonnull %112, %struct.cdef_list* nonnull %86, i32 %87, i8 zeroext %250, i32 %18, i32 %181, i32 %182) #5
  br i1 %198, label %252, label %255

252:                                              ; preds = %237
  %253 = load [64 x i64]*, [64 x i64]** %199, align 8
  %254 = getelementptr inbounds [64 x i64], [64 x i64]* %253, i64 %118, i64 %207
  store i64 %251, i64* %254, align 8
  br label %260

255:                                              ; preds = %237
  %256 = load [64 x i64]*, [64 x i64]** %117, align 8
  %257 = getelementptr inbounds [64 x i64], [64 x i64]* %256, i64 %118, i64 %207
  %258 = load i64, i64* %257, align 8
  %259 = add i64 %258, %251
  store i64 %259, i64* %257, align 8
  br label %260

260:                                              ; preds = %255, %252
  %261 = add nuw nsw i64 %207, 1
  %262 = load i32, i32* %110, align 8
  %263 = sext i32 %262 to i64
  %264 = icmp slt i64 %261, %263
  br i1 %264, label %206, label %201
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @av1_cdef_compute_sb_list(%struct.CommonModeInfoParams*, i32, i32, %struct.cdef_list*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @av1_cdef_filter_fb(i8*, i16*, i32, i16*, i32, i32, [16 x i32]*, i32*, [16 x i32]*, i32, %struct.cdef_list*, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cdef_search(%struct.MultiThreadInfo*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.AV1Common*, %struct.macroblockd*, i32, i32) local_unnamed_addr #0 {
  %8 = alloca [64 x i64], align 16
  %9 = alloca [64 x [64 x i64]], align 16
  %10 = alloca [64 x [64 x i64]], align 16
  %11 = alloca %struct.CdefSearchCtx, align 8
  %12 = alloca [16 x i32], align 16
  %13 = bitcast [16 x i32]* %12 to i8*
  %14 = alloca [16 x i32], align 16
  %15 = bitcast [16 x i32]* %14 to i8*
  %16 = icmp eq i32 %5, 5
  br i1 %16, label %17, label %167

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 35
  %19 = load %struct.SequenceHeader*, %struct.SequenceHeader** %18, align 16
  %20 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %19, i64 0, i32 25
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 22, i32 0
  %23 = load i32, i32* %22, align 16
  %24 = tail call signext i16 @av1_ac_quant_QTX(i32 %23, i32 0, i32 %21) #5
  %25 = sext i16 %24 to i32
  %26 = add nsw i32 %21, -8
  %27 = ashr i32 %25, %26
  %28 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 10
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 7
  store i32 1, i32* %29, align 4
  %30 = load i32, i32* %22, align 16
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, 3
  %33 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 6
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 0, i32 0
  %35 = load i8, i8* %34, align 16
  %36 = and i8 %35, -3
  %37 = icmp eq i8 %36, 0
  %38 = mul nsw i32 %27, %27
  %39 = sitofp i32 %38 to float
  br i1 %37, label %75, label %40

40:                                               ; preds = %17
  %41 = fmul float %39, 0x3EC3CAC2E0000000
  %42 = sitofp i32 %27 to float
  %43 = fmul float %42, 0x3F7C1AD2E0000000
  %44 = fsub float %43, %41
  %45 = fadd float %44, 0x3F9BBFCDC0000000
  %46 = tail call float @llvm.round.f32(float %45) #5
  %47 = fptosi float %46 to i32
  %48 = icmp slt i32 %47, 15
  %49 = select i1 %48, i32 %47, i32 15
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = fmul float %39, 0x3EA3565B40000000
  %53 = fmul float %42, 0x3F56ED3C00000000
  %54 = fsub float %53, %52
  %55 = fadd float %54, 0x3FA39D74C0000000
  %56 = tail call float @llvm.round.f32(float %55) #5
  %57 = fptosi float %56 to i32
  %58 = icmp slt i32 %57, 3
  %59 = select i1 %58, i32 %57, i32 3
  %60 = icmp sgt i32 %59, 0
  %61 = select i1 %60, i32 %59, i32 0
  %62 = fmul float %39, 0x3EA7CE9E20000000
  %63 = fmul float %42, 0x3F6C5E3200000000
  %64 = fsub float %63, %62
  %65 = fadd float %64, 0x3F822AF420000000
  %66 = tail call float @llvm.round.f32(float %65) #5
  %67 = fptosi float %66 to i32
  %68 = icmp slt i32 %67, 15
  %69 = select i1 %68, i32 %67, i32 15
  %70 = icmp sgt i32 %69, 0
  %71 = select i1 %70, i32 %69, i32 0
  %72 = insertelement <2 x float> undef, float %42, i32 0
  %73 = insertelement <2 x float> %72, float %39, i32 1
  %74 = fmul <2 x float> %73, <float 0x3F327F21C0000000, float 0x3E90058960000000>
  br label %110

75:                                               ; preds = %17
  %76 = fmul float %39, 0x3ECC4BE2E0000000
  %77 = sitofp i32 %27 to float
  %78 = fmul float %77, 0x3F808750C0000000
  %79 = fadd float %78, %76
  %80 = fadd float %79, 0x3F9336B680000000
  %81 = tail call float @llvm.round.f32(float %80) #5
  %82 = fptosi float %81 to i32
  %83 = icmp slt i32 %82, 15
  %84 = select i1 %83, i32 %82, i32 15
  %85 = icmp sgt i32 %84, 0
  %86 = select i1 %85, i32 %84, i32 0
  %87 = fmul float %39, 0x3EC877A3A0000000
  %88 = fmul float %77, 0x3F66C5CB40000000
  %89 = fadd float %88, %87
  %90 = fadd float %89, 0x3F80431BE0000000
  %91 = tail call float @llvm.round.f32(float %90) #5
  %92 = fptosi float %91 to i32
  %93 = icmp slt i32 %92, 3
  %94 = select i1 %93, i32 %92, i32 3
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = fmul float %39, 0x3EEB6DC9C0000000
  %98 = fmul float %77, 0x3F8A675540000000
  %99 = fsub float %98, %97
  %100 = fadd float %99, 0xBF7EA76AC0000000
  %101 = tail call float @llvm.round.f32(float %100) #5
  %102 = fptosi float %101 to i32
  %103 = icmp slt i32 %102, 15
  %104 = select i1 %103, i32 %102, i32 15
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = insertelement <2 x float> undef, float %77, i32 0
  %108 = insertelement <2 x float> %107, float %39, i32 1
  %109 = fmul <2 x float> %108, <float 0x3F37474C40000000, float 0x3ECB63EAC0000000>
  br label %110

110:                                              ; preds = %75, %40
  %111 = phi float [ 0x3F62AF6FA0000000, %75 ], [ 0x3FAC8CFA20000000, %40 ]
  %112 = phi i32 [ %86, %75 ], [ %51, %40 ]
  %113 = phi i32 [ %96, %75 ], [ %61, %40 ]
  %114 = phi i32 [ %106, %75 ], [ %71, %40 ]
  %115 = phi <2 x float> [ %109, %75 ], [ %74, %40 ]
  %116 = extractelement <2 x float> %115, i32 0
  %117 = extractelement <2 x float> %115, i32 1
  %118 = fadd float %116, %117
  %119 = fadd float %118, %111
  %120 = tail call float @llvm.round.f32(float %119) #5
  %121 = fptosi float %120 to i32
  %122 = icmp slt i32 %121, 3
  %123 = select i1 %122, i32 %121, i32 3
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = shl nsw i32 %112, 2
  %127 = add nuw nsw i32 %126, %113
  %128 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 8, i64 0
  store i32 %127, i32* %128, align 8
  %129 = shl nsw i32 %114, 2
  %130 = add nuw nsw i32 %129, %125
  %131 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 9, i64 0
  store i32 %130, i32* %131, align 8
  %132 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 3
  %133 = load i32, i32* %132, align 4
  %134 = add nsw i32 %133, 15
  %135 = sdiv i32 %134, 16
  %136 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 4
  %137 = load i32, i32* %136, align 8
  %138 = icmp sgt i32 %133, 0
  br i1 %138, label %139, label %1209

139:                                              ; preds = %110
  %140 = add nsw i32 %137, 15
  %141 = sdiv i32 %140, 16
  %142 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 9
  %143 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %142, align 8
  %144 = icmp sgt i32 %137, 0
  %145 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 11
  %146 = sext i32 %141 to i64
  br label %147

147:                                              ; preds = %150, %139
  %148 = phi i32 [ 0, %139 ], [ %155, %150 ]
  %149 = phi %struct.MB_MODE_INFO** [ %143, %139 ], [ %154, %150 ]
  br i1 %144, label %157, label %150

150:                                              ; preds = %157, %147
  %151 = load i32, i32* %145, align 4
  %152 = shl nsw i32 %151, 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %149, i64 %153
  %155 = add nuw nsw i32 %148, 1
  %156 = icmp slt i32 %155, %135
  br i1 %156, label %147, label %1209

157:                                              ; preds = %147, %157
  %158 = phi i64 [ %165, %157 ], [ 0, %147 ]
  %159 = shl nsw i64 %158, 4
  %160 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %149, i64 %159
  %161 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %160, align 8
  %162 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %161, i64 0, i32 28
  %163 = load i16, i16* %162, align 1
  %164 = and i16 %163, -30721
  store i16 %164, i16* %162, align 1
  %165 = add nuw nsw i64 %158, 1
  %166 = icmp slt i64 %165, %146
  br i1 %166, label %157, label %150

167:                                              ; preds = %7
  %168 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 22, i32 0
  %169 = load i32, i32* %168, align 16
  %170 = ashr i32 %169, 6
  %171 = add nsw i32 %170, 3
  %172 = add i32 %5, -1
  %173 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 35
  %174 = load %struct.SequenceHeader*, %struct.SequenceHeader** %173, align 16
  %175 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %174, i64 0, i32 27
  %176 = load i8, i8* %175, align 1
  %177 = bitcast %struct.CdefSearchCtx* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 7976, i8* nonnull %177) #5
  %178 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 2, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %178, i8 -86, i64 7960, i1 false)
  %179 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21
  %180 = load i8, i8* %175, align 1
  %181 = icmp eq i8 %180, 0
  %182 = select i1 %181, i32 3, i32 1
  %183 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 1
  store %struct.CommonModeInfoParams* %179, %struct.CommonModeInfoParams** %183, align 8
  %184 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 0
  store %struct.yv12_buffer_config* %2, %struct.yv12_buffer_config** %184, align 8
  %185 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 3
  %186 = load i32, i32* %185, align 4
  %187 = add nsw i32 %186, 15
  %188 = sdiv i32 %187, 16
  %189 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 15
  store i32 %188, i32* %189, align 8
  %190 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 4
  %191 = load i32, i32* %190, align 8
  %192 = add nsw i32 %191, 15
  %193 = sdiv i32 %192, 16
  %194 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 16
  store i32 %193, i32* %194, align 4
  %195 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %174, i64 0, i32 25
  %196 = load i32, i32* %195, align 8
  %197 = add i32 %196, -8
  %198 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 6
  store i32 %197, i32* %198, align 4
  %199 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 7
  store i32 %171, i32* %199, align 8
  %200 = zext i32 %5 to i64
  %201 = getelementptr inbounds [6 x i32], [6 x i32]* @nb_cdef_strengths, i64 0, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 5
  store i32 %202, i32* %203, align 8
  %204 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 9
  store i32 %182, i32* %204, align 8
  %205 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 8
  store i32 %5, i32* %205, align 4
  %206 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 19
  store i32 0, i32* %206, align 8
  %207 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 0
  %208 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %174, i64 0, i32 7
  %209 = load i8, i8* %208, align 4
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %207, i8 zeroext %209, %struct.yv12_buffer_config* %1, i32 0, i32 0, i32 0, i32 %182) #5
  %210 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 0, i32 1
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 12, i64 0
  store i32 %211, i32* %212, align 4
  %213 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 0, i32 2
  %214 = load i32, i32* %213, align 8
  %215 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 13, i64 0
  store i32 %214, i32* %215, align 8
  %216 = icmp eq i32 %214, 0
  %217 = icmp ne i32 %211, 0
  %218 = select i1 %217, i32 0, i32 2
  %219 = select i1 %217, i32 1, i32 3
  %220 = select i1 %216, i32 %219, i32 %218
  %221 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 14, i64 0
  store i32 %220, i32* %221, align 4
  %222 = sub nsw i32 2, %211
  %223 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 10, i64 0
  store i32 %222, i32* %223, align 4
  %224 = sub nsw i32 2, %214
  %225 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 11, i64 0
  store i32 %224, i32* %225, align 8
  %226 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 2, i64 0, i32 0
  %227 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 16 %227, i64 2608, i1 false) #5
  br i1 %181, label %1226, label %228

228:                                              ; preds = %167, %1226
  %229 = icmp ult i32 %172, 4
  %230 = icmp eq i8 %176, 0
  %231 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 3
  store void (i16*, i32, i8*, i32, i32, i32, i32, i32)* @copy_sb16_16, void (i16*, i32, i8*, i32, i32, i32, i32, i32)** %231, align 8
  %232 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 4
  store i64 (i8*, i32, i16*, %struct.cdef_list*, i32, i8, i32, i32, i32)* @compute_cdef_dist, i64 (i8*, i32, i16*, %struct.cdef_list*, i32, i8, i32, i32, i32)** %232, align 8
  %233 = load i32, i32* %189, align 8
  %234 = load i32, i32* %194, align 4
  %235 = mul nsw i32 %234, %233
  %236 = sext i32 %235 to i64
  %237 = shl nsw i64 %236, 3
  %238 = tail call i8* @aom_malloc(i64 %237) #5
  %239 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 18
  %240 = bitcast i32** %239 to i8**
  store i8* %238, i8** %240, align 8
  store i32 0, i32* %206, align 8
  %241 = sext i32 %233 to i64
  %242 = shl nsw i64 %241, 9
  %243 = sext i32 %234 to i64
  %244 = mul i64 %242, %243
  %245 = tail call i8* @aom_malloc(i64 %244) #5
  %246 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 17
  %247 = bitcast [2 x [64 x i64]*]* %246 to i8**
  store i8* %245, i8** %247, align 8
  %248 = tail call i8* @aom_malloc(i64 %244) #5
  %249 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 17, i64 1
  %250 = bitcast [64 x i64]** %249 to i8**
  store i8* %248, i8** %250, align 8
  %251 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %0, i64 0, i32 0
  %252 = load i32, i32* %251, align 8
  %253 = icmp sgt i32 %252, 1
  br i1 %253, label %254, label %256

254:                                              ; preds = %228
  call void @av1_cdef_mse_calc_frame_mt(%struct.AV1Common* %3, %struct.MultiThreadInfo* %0, %struct.CdefSearchCtx* nonnull %11) #5
  %255 = load i32, i32* %206, align 8
  br label %349

256:                                              ; preds = %228
  %257 = icmp sgt i32 %233, 0
  br i1 %257, label %258, label %349

258:                                              ; preds = %256, %268
  %259 = phi i32 [ %269, %268 ], [ 0, %256 ]
  %260 = phi i32 [ %270, %268 ], [ %234, %256 ]
  %261 = phi i32 [ %271, %268 ], [ %234, %256 ]
  %262 = phi i32 [ %272, %268 ], [ 0, %256 ]
  %263 = icmp sgt i32 %261, 0
  br i1 %263, label %264, label %268

264:                                              ; preds = %258
  %265 = shl nsw i32 %262, 4
  %266 = and i32 %262, 1
  %267 = icmp eq i32 %266, 0
  br label %275

268:                                              ; preds = %343, %258
  %269 = phi i32 [ %259, %258 ], [ %344, %343 ]
  %270 = phi i32 [ %260, %258 ], [ %345, %343 ]
  %271 = phi i32 [ %261, %258 ], [ %345, %343 ]
  %272 = add nuw nsw i32 %262, 1
  %273 = load i32, i32* %189, align 8
  %274 = icmp slt i32 %272, %273
  br i1 %274, label %258, label %349

275:                                              ; preds = %343, %264
  %276 = phi i32 [ %259, %264 ], [ %344, %343 ]
  %277 = phi i32 [ %260, %264 ], [ %345, %343 ]
  %278 = phi i64 [ 0, %264 ], [ %346, %343 ]
  %279 = load %struct.CommonModeInfoParams*, %struct.CommonModeInfoParams** %183, align 8
  %280 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %279, i64 0, i32 9
  %281 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %280, align 8
  %282 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %279, i64 0, i32 11
  %283 = load i32, i32* %282, align 4
  %284 = mul nsw i32 %283, %265
  %285 = shl nsw i64 %278, 4
  %286 = trunc i64 %285 to i32
  %287 = add nsw i32 %284, %286
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %281, i64 %288
  %290 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %289, align 8
  %291 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %279, i64 0, i32 3
  %292 = load i32, i32* %291, align 4
  %293 = sub nsw i32 %292, %265
  %294 = icmp slt i32 %293, 16
  %295 = select i1 %294, i32 %293, i32 16
  %296 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %279, i64 0, i32 4
  %297 = load i32, i32* %296, align 8
  %298 = sub nsw i32 %297, %286
  %299 = icmp sgt i32 %293, 0
  br i1 %299, label %300, label %343

300:                                              ; preds = %275
  %301 = icmp slt i32 %298, 16
  %302 = select i1 %301, i32 %298, i32 16
  %303 = sext i32 %284 to i64
  %304 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %281, i64 %303
  %305 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %304, i64 %285
  %306 = icmp sgt i32 %298, 0
  %307 = sext i32 %283 to i64
  %308 = sext i32 %302 to i64
  br label %309

309:                                              ; preds = %322, %300
  %310 = phi i32 [ 0, %300 ], [ %323, %322 ]
  %311 = phi %struct.MB_MODE_INFO** [ %305, %300 ], [ %324, %322 ]
  br i1 %306, label %314, label %322

312:                                              ; preds = %314
  %313 = icmp slt i64 %321, %308
  br i1 %313, label %314, label %322

314:                                              ; preds = %309, %312
  %315 = phi i64 [ %321, %312 ], [ 0, %309 ]
  %316 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %311, i64 %315
  %317 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %316, align 8
  %318 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %317, i64 0, i32 23
  %319 = load i8, i8* %318, align 8
  %320 = icmp eq i8 %319, 0
  %321 = add nuw nsw i64 %315, 1
  br i1 %320, label %326, label %312

322:                                              ; preds = %312, %309
  %323 = add nuw nsw i32 %310, 1
  %324 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %311, i64 %307
  %325 = icmp slt i32 %323, %295
  br i1 %325, label %309, label %343

326:                                              ; preds = %314
  %327 = trunc i64 %278 to i32
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %335, label %330

330:                                              ; preds = %326
  %331 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 0
  %332 = load i8, i8* %331, align 8
  %333 = and i8 %332, -2
  %334 = icmp eq i8 %333, 14
  br i1 %334, label %343, label %335

335:                                              ; preds = %330, %326
  br i1 %267, label %339, label %336

336:                                              ; preds = %335
  %337 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 0
  %338 = load i8, i8* %337, align 8
  switch i8 %338, label %339 [
    i8 15, label %343
    i8 13, label %343
  ]

339:                                              ; preds = %336, %335
  call void @av1_cdef_mse_calc_block(%struct.CdefSearchCtx* nonnull %11, i32 %262, i32 %327, i32 %276) #5
  %340 = load i32, i32* %206, align 8
  %341 = add nsw i32 %340, 1
  store i32 %341, i32* %206, align 8
  %342 = load i32, i32* %194, align 4
  br label %343

343:                                              ; preds = %322, %339, %336, %336, %330, %275
  %344 = phi i32 [ %276, %275 ], [ %276, %330 ], [ %276, %336 ], [ %276, %336 ], [ %341, %339 ], [ %276, %322 ]
  %345 = phi i32 [ %277, %275 ], [ %277, %330 ], [ %277, %336 ], [ %277, %336 ], [ %342, %339 ], [ %277, %322 ]
  %346 = add nuw nsw i64 %278, 1
  %347 = sext i32 %345 to i64
  %348 = icmp slt i64 %346, %347
  br i1 %348, label %275, label %268

349:                                              ; preds = %268, %256, %254
  %350 = phi i32 [ 0, %256 ], [ %255, %254 ], [ %269, %268 ]
  %351 = getelementptr inbounds [2 x [64 x i64]*], [2 x [64 x i64]*]* %246, i64 0, i64 0
  %352 = load [64 x i64]*, [64 x i64]** %351, align 8
  %353 = load [64 x i64]*, [64 x i64]** %249, align 8
  %354 = bitcast [64 x i64]* %8 to i8*
  %355 = icmp sgt i32 %350, 0
  %356 = sext i32 %202 to i64
  %357 = zext i32 %350 to i64
  %358 = bitcast [64 x [64 x i64]]* %9 to i8*
  %359 = bitcast [64 x [64 x i64]]* %10 to i8*
  %360 = select i1 %230, i32 2, i32 1
  %361 = sext i32 %6 to i64
  %362 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 8, i64 0
  %363 = bitcast i32* %362 to i8*
  %364 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 9, i64 0
  %365 = bitcast i32* %364 to i8*
  br label %372

366:                                              ; preds = %1032
  %367 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 10
  store i32 %1034, i32* %367, align 8
  %368 = shl i32 1, %1034
  %369 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 7
  store i32 %368, i32* %369, align 4
  br i1 %355, label %370, label %1047

370:                                              ; preds = %366
  %371 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 21, i32 9
  br label %1037

372:                                              ; preds = %1032, %349
  %373 = phi i32 [ 0, %349 ], [ %1034, %1032 ]
  %374 = phi i32 [ 0, %349 ], [ %1035, %1032 ]
  %375 = phi i64 [ -1, %349 ], [ %1033, %1032 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 64, i1 false)
  %376 = shl i32 1, %374
  %377 = zext i32 %376 to i64
  br i1 %230, label %401, label %712

378:                                              ; preds = %510
  %379 = shl nsw i32 %376, 2
  %380 = add nsw i32 %376, -1
  %381 = icmp sgt i32 %380, 0
  %382 = zext i32 %380 to i64
  %383 = sext i32 %380 to i64
  %384 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %383
  %385 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %383
  %386 = and i64 %382, 4294967288
  %387 = add nsw i64 %386, -8
  %388 = lshr exact i64 %387, 3
  %389 = add nuw nsw i64 %388, 1
  %390 = icmp ult i32 %380, 8
  %391 = and i64 %382, 4294967288
  %392 = and i64 %389, 1
  %393 = icmp eq i64 %387, 0
  %394 = sub nuw nsw i64 %389, %392
  %395 = icmp eq i64 %392, 0
  %396 = icmp eq i64 %391, %382
  %397 = and i64 %382, 1
  %398 = icmp eq i32 %380, 1
  %399 = sub nsw i64 %382, %397
  %400 = icmp eq i64 %397, 0
  br label %515

401:                                              ; preds = %372, %510
  %402 = phi i64 [ %513, %510 ], [ 0, %372 ]
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %358) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %358, i8 0, i64 32768, i1 false) #5
  br i1 %355, label %403, label %486

403:                                              ; preds = %401
  %404 = and i64 %402, 1
  %405 = icmp eq i64 %402, 1
  %406 = sub nsw i64 %402, %404
  %407 = icmp eq i64 %404, 0
  br label %408

408:                                              ; preds = %483, %403
  %409 = phi i64 [ 0, %403 ], [ %484, %483 ]
  switch i64 %402, label %430 [
    i64 0, label %428
    i64 1, label %410
  ]

410:                                              ; preds = %430, %408
  %411 = phi i64 [ undef, %408 ], [ %460, %430 ]
  %412 = phi i64 [ 0, %408 ], [ %461, %430 ]
  %413 = phi i64 [ -9223372036854775808, %408 ], [ %460, %430 ]
  br i1 %407, label %428, label %414

414:                                              ; preds = %410
  %415 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %412
  %416 = load i32, i32* %415, align 4
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %409, i64 %417
  %419 = load i64, i64* %418, align 8
  %420 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %412
  %421 = load i32, i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %409, i64 %422
  %424 = load i64, i64* %423, align 8
  %425 = add i64 %424, %419
  %426 = icmp ult i64 %425, %413
  %427 = select i1 %426, i64 %425, i64 %413
  br label %428

428:                                              ; preds = %414, %410, %408
  %429 = phi i64 [ -9223372036854775808, %408 ], [ %411, %410 ], [ %427, %414 ]
  br label %464

430:                                              ; preds = %408, %430
  %431 = phi i64 [ %461, %430 ], [ 0, %408 ]
  %432 = phi i64 [ %460, %430 ], [ -9223372036854775808, %408 ]
  %433 = phi i64 [ %462, %430 ], [ %406, %408 ]
  %434 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %431
  %435 = load i32, i32* %434, align 8
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %409, i64 %436
  %438 = load i64, i64* %437, align 8
  %439 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %431
  %440 = load i32, i32* %439, align 8
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %409, i64 %441
  %443 = load i64, i64* %442, align 8
  %444 = add i64 %443, %438
  %445 = icmp ult i64 %444, %432
  %446 = select i1 %445, i64 %444, i64 %432
  %447 = or i64 %431, 1
  %448 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %409, i64 %450
  %452 = load i64, i64* %451, align 8
  %453 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %447
  %454 = load i32, i32* %453, align 4
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %409, i64 %455
  %457 = load i64, i64* %456, align 8
  %458 = add i64 %457, %452
  %459 = icmp ult i64 %458, %446
  %460 = select i1 %459, i64 %458, i64 %446
  %461 = add nuw nsw i64 %431, 2
  %462 = add i64 %433, -2
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %410, label %430

464:                                              ; preds = %480, %428
  %465 = phi i64 [ 0, %428 ], [ %481, %480 ]
  %466 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %409, i64 %465
  %467 = load i64, i64* %466, align 8
  br label %468

468:                                              ; preds = %468, %464
  %469 = phi i64 [ 0, %464 ], [ %478, %468 ]
  %470 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %409, i64 %469
  %471 = load i64, i64* %470, align 8
  %472 = add i64 %471, %467
  %473 = icmp ult i64 %472, %429
  %474 = select i1 %473, i64 %472, i64 %429
  %475 = getelementptr inbounds [64 x [64 x i64]], [64 x [64 x i64]]* %9, i64 0, i64 %465, i64 %469
  %476 = load i64, i64* %475, align 8
  %477 = add i64 %474, %476
  store i64 %477, i64* %475, align 8
  %478 = add nuw nsw i64 %469, 1
  %479 = icmp slt i64 %478, %356
  br i1 %479, label %468, label %480

480:                                              ; preds = %468
  %481 = add nuw nsw i64 %465, 1
  %482 = icmp slt i64 %481, %356
  br i1 %482, label %464, label %483

483:                                              ; preds = %480
  %484 = add nuw nsw i64 %409, 1
  %485 = icmp eq i64 %484, %357
  br i1 %485, label %486, label %408

486:                                              ; preds = %483, %401
  br label %487

487:                                              ; preds = %486, %507
  %488 = phi i64 [ %508, %507 ], [ 0, %486 ]
  %489 = phi i32 [ %504, %507 ], [ 0, %486 ]
  %490 = phi i32 [ %502, %507 ], [ 0, %486 ]
  %491 = phi i64 [ %501, %507 ], [ -9223372036854775808, %486 ]
  %492 = trunc i64 %488 to i32
  br label %493

493:                                              ; preds = %493, %487
  %494 = phi i64 [ 0, %487 ], [ %505, %493 ]
  %495 = phi i32 [ %489, %487 ], [ %504, %493 ]
  %496 = phi i32 [ %490, %487 ], [ %502, %493 ]
  %497 = phi i64 [ %491, %487 ], [ %501, %493 ]
  %498 = getelementptr inbounds [64 x [64 x i64]], [64 x [64 x i64]]* %9, i64 0, i64 %488, i64 %494
  %499 = load i64, i64* %498, align 8
  %500 = icmp ult i64 %499, %497
  %501 = select i1 %500, i64 %499, i64 %497
  %502 = select i1 %500, i32 %492, i32 %496
  %503 = trunc i64 %494 to i32
  %504 = select i1 %500, i32 %503, i32 %495
  %505 = add nuw nsw i64 %494, 1
  %506 = icmp slt i64 %505, %356
  br i1 %506, label %493, label %507

507:                                              ; preds = %493
  %508 = add nuw nsw i64 %488, 1
  %509 = icmp slt i64 %508, %356
  br i1 %509, label %487, label %510

510:                                              ; preds = %507
  %511 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %402
  store i32 %502, i32* %511, align 4
  %512 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %402
  store i32 %504, i32* %512, align 4
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %358) #5
  %513 = add nuw nsw i64 %402, 1
  %514 = icmp eq i64 %513, %377
  br i1 %514, label %378, label %401

515:                                              ; preds = %709, %378
  %516 = phi i32 [ 0, %378 ], [ %710, %709 ]
  br i1 %381, label %517, label %605

517:                                              ; preds = %515
  br i1 %390, label %593, label %518

518:                                              ; preds = %517
  br i1 %393, label %568, label %519

519:                                              ; preds = %518, %519
  %520 = phi i64 [ %565, %519 ], [ 0, %518 ]
  %521 = phi i64 [ %566, %519 ], [ %394, %518 ]
  %522 = or i64 %520, 1
  %523 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %522
  %524 = bitcast i32* %523 to <4 x i32>*
  %525 = load <4 x i32>, <4 x i32>* %524, align 4
  %526 = getelementptr inbounds i32, i32* %523, i64 4
  %527 = bitcast i32* %526 to <4 x i32>*
  %528 = load <4 x i32>, <4 x i32>* %527, align 4
  %529 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %520
  %530 = bitcast i32* %529 to <4 x i32>*
  store <4 x i32> %525, <4 x i32>* %530, align 16
  %531 = getelementptr inbounds i32, i32* %529, i64 4
  %532 = bitcast i32* %531 to <4 x i32>*
  store <4 x i32> %528, <4 x i32>* %532, align 16
  %533 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %522
  %534 = bitcast i32* %533 to <4 x i32>*
  %535 = load <4 x i32>, <4 x i32>* %534, align 4
  %536 = getelementptr inbounds i32, i32* %533, i64 4
  %537 = bitcast i32* %536 to <4 x i32>*
  %538 = load <4 x i32>, <4 x i32>* %537, align 4
  %539 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %520
  %540 = bitcast i32* %539 to <4 x i32>*
  store <4 x i32> %535, <4 x i32>* %540, align 16
  %541 = getelementptr inbounds i32, i32* %539, i64 4
  %542 = bitcast i32* %541 to <4 x i32>*
  store <4 x i32> %538, <4 x i32>* %542, align 16
  %543 = or i64 %520, 8
  %544 = or i64 %520, 9
  %545 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %544
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4
  %548 = getelementptr inbounds i32, i32* %545, i64 4
  %549 = bitcast i32* %548 to <4 x i32>*
  %550 = load <4 x i32>, <4 x i32>* %549, align 4
  %551 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %543
  %552 = bitcast i32* %551 to <4 x i32>*
  store <4 x i32> %547, <4 x i32>* %552, align 16
  %553 = getelementptr inbounds i32, i32* %551, i64 4
  %554 = bitcast i32* %553 to <4 x i32>*
  store <4 x i32> %550, <4 x i32>* %554, align 16
  %555 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %544
  %556 = bitcast i32* %555 to <4 x i32>*
  %557 = load <4 x i32>, <4 x i32>* %556, align 4
  %558 = getelementptr inbounds i32, i32* %555, i64 4
  %559 = bitcast i32* %558 to <4 x i32>*
  %560 = load <4 x i32>, <4 x i32>* %559, align 4
  %561 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %543
  %562 = bitcast i32* %561 to <4 x i32>*
  store <4 x i32> %557, <4 x i32>* %562, align 16
  %563 = getelementptr inbounds i32, i32* %561, i64 4
  %564 = bitcast i32* %563 to <4 x i32>*
  store <4 x i32> %560, <4 x i32>* %564, align 16
  %565 = add i64 %520, 16
  %566 = add i64 %521, -2
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %568, label %519, !llvm.loop !4

568:                                              ; preds = %519, %518
  %569 = phi i64 [ 0, %518 ], [ %565, %519 ]
  br i1 %395, label %592, label %570

570:                                              ; preds = %568
  %571 = or i64 %569, 1
  %572 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %571
  %573 = bitcast i32* %572 to <4 x i32>*
  %574 = load <4 x i32>, <4 x i32>* %573, align 4
  %575 = getelementptr inbounds i32, i32* %572, i64 4
  %576 = bitcast i32* %575 to <4 x i32>*
  %577 = load <4 x i32>, <4 x i32>* %576, align 4
  %578 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %569
  %579 = bitcast i32* %578 to <4 x i32>*
  store <4 x i32> %574, <4 x i32>* %579, align 16
  %580 = getelementptr inbounds i32, i32* %578, i64 4
  %581 = bitcast i32* %580 to <4 x i32>*
  store <4 x i32> %577, <4 x i32>* %581, align 16
  %582 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %571
  %583 = bitcast i32* %582 to <4 x i32>*
  %584 = load <4 x i32>, <4 x i32>* %583, align 4
  %585 = getelementptr inbounds i32, i32* %582, i64 4
  %586 = bitcast i32* %585 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 4
  %588 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %569
  %589 = bitcast i32* %588 to <4 x i32>*
  store <4 x i32> %584, <4 x i32>* %589, align 16
  %590 = getelementptr inbounds i32, i32* %588, i64 4
  %591 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> %587, <4 x i32>* %591, align 16
  br label %592

592:                                              ; preds = %568, %570
  br i1 %396, label %605, label %593

593:                                              ; preds = %592, %517
  %594 = phi i64 [ 0, %517 ], [ %391, %592 ]
  br label %595

595:                                              ; preds = %593, %595
  %596 = phi i64 [ %597, %595 ], [ %594, %593 ]
  %597 = add nuw nsw i64 %596, 1
  %598 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %597
  %599 = load i32, i32* %598, align 4
  %600 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %596
  store i32 %599, i32* %600, align 4
  %601 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %597
  %602 = load i32, i32* %601, align 4
  %603 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %596
  store i32 %602, i32* %603, align 4
  %604 = icmp eq i64 %597, %382
  br i1 %604, label %605, label %595, !llvm.loop !5

605:                                              ; preds = %595, %592, %515
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %359) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %359, i8 0, i64 32768, i1 false) #5
  br i1 %355, label %606, label %685

606:                                              ; preds = %605, %682
  %607 = phi i64 [ %683, %682 ], [ 0, %605 ]
  br i1 %381, label %608, label %627

608:                                              ; preds = %606
  br i1 %398, label %609, label %629

609:                                              ; preds = %629, %608
  %610 = phi i64 [ undef, %608 ], [ %659, %629 ]
  %611 = phi i64 [ 0, %608 ], [ %660, %629 ]
  %612 = phi i64 [ -9223372036854775808, %608 ], [ %659, %629 ]
  br i1 %400, label %627, label %613

613:                                              ; preds = %609
  %614 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %611
  %615 = load i32, i32* %614, align 4
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %607, i64 %616
  %618 = load i64, i64* %617, align 8
  %619 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %611
  %620 = load i32, i32* %619, align 4
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %607, i64 %621
  %623 = load i64, i64* %622, align 8
  %624 = add i64 %623, %618
  %625 = icmp ult i64 %624, %612
  %626 = select i1 %625, i64 %624, i64 %612
  br label %627

627:                                              ; preds = %613, %609, %606
  %628 = phi i64 [ -9223372036854775808, %606 ], [ %610, %609 ], [ %626, %613 ]
  br label %663

629:                                              ; preds = %608, %629
  %630 = phi i64 [ %660, %629 ], [ 0, %608 ]
  %631 = phi i64 [ %659, %629 ], [ -9223372036854775808, %608 ]
  %632 = phi i64 [ %661, %629 ], [ %399, %608 ]
  %633 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %630
  %634 = load i32, i32* %633, align 8
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %607, i64 %635
  %637 = load i64, i64* %636, align 8
  %638 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %630
  %639 = load i32, i32* %638, align 8
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %607, i64 %640
  %642 = load i64, i64* %641, align 8
  %643 = add i64 %642, %637
  %644 = icmp ult i64 %643, %631
  %645 = select i1 %644, i64 %643, i64 %631
  %646 = or i64 %630, 1
  %647 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %646
  %648 = load i32, i32* %647, align 4
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %607, i64 %649
  %651 = load i64, i64* %650, align 8
  %652 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i64 0, i64 %646
  %653 = load i32, i32* %652, align 4
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %607, i64 %654
  %656 = load i64, i64* %655, align 8
  %657 = add i64 %656, %651
  %658 = icmp ult i64 %657, %645
  %659 = select i1 %658, i64 %657, i64 %645
  %660 = add nuw nsw i64 %630, 2
  %661 = add i64 %632, -2
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %609, label %629

663:                                              ; preds = %679, %627
  %664 = phi i64 [ 0, %627 ], [ %680, %679 ]
  %665 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %607, i64 %664
  %666 = load i64, i64* %665, align 8
  br label %667

667:                                              ; preds = %667, %663
  %668 = phi i64 [ 0, %663 ], [ %677, %667 ]
  %669 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %607, i64 %668
  %670 = load i64, i64* %669, align 8
  %671 = add i64 %670, %666
  %672 = icmp ult i64 %671, %628
  %673 = select i1 %672, i64 %671, i64 %628
  %674 = getelementptr inbounds [64 x [64 x i64]], [64 x [64 x i64]]* %10, i64 0, i64 %664, i64 %668
  %675 = load i64, i64* %674, align 8
  %676 = add i64 %673, %675
  store i64 %676, i64* %674, align 8
  %677 = add nuw nsw i64 %668, 1
  %678 = icmp slt i64 %677, %356
  br i1 %678, label %667, label %679

679:                                              ; preds = %667
  %680 = add nuw nsw i64 %664, 1
  %681 = icmp slt i64 %680, %356
  br i1 %681, label %663, label %682

682:                                              ; preds = %679
  %683 = add nuw nsw i64 %607, 1
  %684 = icmp eq i64 %683, %357
  br i1 %684, label %685, label %606

685:                                              ; preds = %682, %605
  br label %686

686:                                              ; preds = %685, %706
  %687 = phi i64 [ %707, %706 ], [ 0, %685 ]
  %688 = phi i32 [ %703, %706 ], [ 0, %685 ]
  %689 = phi i32 [ %701, %706 ], [ 0, %685 ]
  %690 = phi i64 [ %700, %706 ], [ -9223372036854775808, %685 ]
  %691 = trunc i64 %687 to i32
  br label %692

692:                                              ; preds = %692, %686
  %693 = phi i64 [ 0, %686 ], [ %704, %692 ]
  %694 = phi i32 [ %688, %686 ], [ %703, %692 ]
  %695 = phi i32 [ %689, %686 ], [ %701, %692 ]
  %696 = phi i64 [ %690, %686 ], [ %700, %692 ]
  %697 = getelementptr inbounds [64 x [64 x i64]], [64 x [64 x i64]]* %10, i64 0, i64 %687, i64 %693
  %698 = load i64, i64* %697, align 8
  %699 = icmp ult i64 %698, %696
  %700 = select i1 %699, i64 %698, i64 %696
  %701 = select i1 %699, i32 %691, i32 %695
  %702 = trunc i64 %693 to i32
  %703 = select i1 %699, i32 %702, i32 %694
  %704 = add nuw nsw i64 %693, 1
  %705 = icmp slt i64 %704, %356
  br i1 %705, label %692, label %706

706:                                              ; preds = %692
  %707 = add nuw nsw i64 %687, 1
  %708 = icmp slt i64 %707, %356
  br i1 %708, label %686, label %709

709:                                              ; preds = %706
  store i32 %701, i32* %384, align 4
  store i32 %703, i32* %385, align 4
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %359) #5
  %710 = add nuw nsw i32 %516, 1
  %711 = icmp slt i32 %710, %379
  br i1 %711, label %515, label %1015

712:                                              ; preds = %372, %809
  %713 = phi i64 [ %811, %809 ], [ 0, %372 ]
  %714 = add nsw i64 %713, -1
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %354) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %354, i8 0, i64 512, i1 false) #5
  br i1 %355, label %715, label %796

715:                                              ; preds = %712
  %716 = icmp eq i64 %713, 0
  %717 = and i64 %713, 3
  %718 = icmp ult i64 %714, 3
  %719 = sub nsw i64 %713, %717
  %720 = icmp eq i64 %717, 0
  br label %721

721:                                              ; preds = %793, %715
  %722 = phi i64 [ 0, %715 ], [ %794, %793 ]
  br i1 %716, label %742, label %723

723:                                              ; preds = %721
  br i1 %718, label %724, label %744

724:                                              ; preds = %744, %723
  %725 = phi i64 [ undef, %723 ], [ %778, %744 ]
  %726 = phi i64 [ 0, %723 ], [ %779, %744 ]
  %727 = phi i64 [ -9223372036854775808, %723 ], [ %778, %744 ]
  br i1 %720, label %742, label %728

728:                                              ; preds = %724, %728
  %729 = phi i64 [ %739, %728 ], [ %726, %724 ]
  %730 = phi i64 [ %738, %728 ], [ %727, %724 ]
  %731 = phi i64 [ %740, %728 ], [ %717, %724 ]
  %732 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %729
  %733 = load i32, i32* %732, align 4
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %722, i64 %734
  %736 = load i64, i64* %735, align 8
  %737 = icmp ult i64 %736, %730
  %738 = select i1 %737, i64 %736, i64 %730
  %739 = add nuw nsw i64 %729, 1
  %740 = add i64 %731, -1
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %742, label %728, !llvm.loop !7

742:                                              ; preds = %724, %728, %721
  %743 = phi i64 [ -9223372036854775808, %721 ], [ %725, %724 ], [ %738, %728 ]
  br label %782

744:                                              ; preds = %723, %744
  %745 = phi i64 [ %779, %744 ], [ 0, %723 ]
  %746 = phi i64 [ %778, %744 ], [ -9223372036854775808, %723 ]
  %747 = phi i64 [ %780, %744 ], [ %719, %723 ]
  %748 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %745
  %749 = load i32, i32* %748, align 16
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %722, i64 %750
  %752 = load i64, i64* %751, align 8
  %753 = icmp ult i64 %752, %746
  %754 = select i1 %753, i64 %752, i64 %746
  %755 = or i64 %745, 1
  %756 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %755
  %757 = load i32, i32* %756, align 4
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %722, i64 %758
  %760 = load i64, i64* %759, align 8
  %761 = icmp ult i64 %760, %754
  %762 = select i1 %761, i64 %760, i64 %754
  %763 = or i64 %745, 2
  %764 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %763
  %765 = load i32, i32* %764, align 8
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %722, i64 %766
  %768 = load i64, i64* %767, align 8
  %769 = icmp ult i64 %768, %762
  %770 = select i1 %769, i64 %768, i64 %762
  %771 = or i64 %745, 3
  %772 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %771
  %773 = load i32, i32* %772, align 4
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %722, i64 %774
  %776 = load i64, i64* %775, align 8
  %777 = icmp ult i64 %776, %770
  %778 = select i1 %777, i64 %776, i64 %770
  %779 = add nuw nsw i64 %745, 4
  %780 = add i64 %747, -4
  %781 = icmp eq i64 %780, 0
  br i1 %781, label %724, label %744

782:                                              ; preds = %782, %742
  %783 = phi i64 [ 0, %742 ], [ %791, %782 ]
  %784 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %722, i64 %783
  %785 = load i64, i64* %784, align 8
  %786 = icmp ult i64 %785, %743
  %787 = select i1 %786, i64 %785, i64 %743
  %788 = getelementptr inbounds [64 x i64], [64 x i64]* %8, i64 0, i64 %783
  %789 = load i64, i64* %788, align 8
  %790 = add i64 %787, %789
  store i64 %790, i64* %788, align 8
  %791 = add nuw nsw i64 %783, 1
  %792 = icmp slt i64 %791, %356
  br i1 %792, label %782, label %793

793:                                              ; preds = %782
  %794 = add nuw nsw i64 %722, 1
  %795 = icmp eq i64 %794, %357
  br i1 %795, label %796, label %721

796:                                              ; preds = %793, %712
  br label %797

797:                                              ; preds = %796, %797
  %798 = phi i64 [ %807, %797 ], [ 0, %796 ]
  %799 = phi i32 [ %806, %797 ], [ 0, %796 ]
  %800 = phi i64 [ %804, %797 ], [ -9223372036854775808, %796 ]
  %801 = getelementptr inbounds [64 x i64], [64 x i64]* %8, i64 0, i64 %798
  %802 = load i64, i64* %801, align 8
  %803 = icmp ult i64 %802, %800
  %804 = select i1 %803, i64 %802, i64 %800
  %805 = trunc i64 %798 to i32
  %806 = select i1 %803, i32 %805, i32 %799
  %807 = add nuw nsw i64 %798, 1
  %808 = icmp slt i64 %807, %356
  br i1 %808, label %797, label %809

809:                                              ; preds = %797
  %810 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %713
  store i32 %806, i32* %810, align 4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %354) #5
  %811 = add nuw nsw i64 %713, 1
  %812 = icmp eq i64 %811, %377
  br i1 %812, label %813, label %712

813:                                              ; preds = %809
  br i1 %229, label %1015, label %814

814:                                              ; preds = %813
  %815 = shl nsw i32 %376, 2
  %816 = add nsw i32 %376, -1
  %817 = icmp sgt i32 %816, 0
  %818 = sext i32 %816 to i64
  %819 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %818
  %820 = zext i32 %816 to i64
  %821 = and i64 %820, 4294967288
  %822 = add nsw i64 %821, -8
  %823 = lshr exact i64 %822, 3
  %824 = add nuw nsw i64 %823, 1
  %825 = add nsw i64 %820, -1
  %826 = icmp ult i32 %816, 8
  %827 = and i64 %820, 4294967288
  %828 = and i64 %824, 3
  %829 = icmp ult i64 %822, 24
  %830 = sub nsw i64 %824, %828
  %831 = icmp eq i64 %828, 0
  %832 = icmp eq i64 %827, %820
  %833 = and i64 %820, 3
  %834 = icmp ult i64 %825, 3
  %835 = sub nsw i64 %820, %833
  %836 = icmp eq i64 %833, 0
  br label %837

837:                                              ; preds = %1012, %814
  %838 = phi i32 [ 0, %814 ], [ %1013, %1012 ]
  br i1 %817, label %839, label %923

839:                                              ; preds = %837
  br i1 %826, label %914, label %840

840:                                              ; preds = %839
  br i1 %829, label %894, label %841

841:                                              ; preds = %840, %841
  %842 = phi i64 [ %891, %841 ], [ 0, %840 ]
  %843 = phi i64 [ %892, %841 ], [ %830, %840 ]
  %844 = or i64 %842, 1
  %845 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %844
  %846 = bitcast i32* %845 to <4 x i32>*
  %847 = load <4 x i32>, <4 x i32>* %846, align 4
  %848 = getelementptr inbounds i32, i32* %845, i64 4
  %849 = bitcast i32* %848 to <4 x i32>*
  %850 = load <4 x i32>, <4 x i32>* %849, align 4
  %851 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %842
  %852 = bitcast i32* %851 to <4 x i32>*
  store <4 x i32> %847, <4 x i32>* %852, align 16
  %853 = getelementptr inbounds i32, i32* %851, i64 4
  %854 = bitcast i32* %853 to <4 x i32>*
  store <4 x i32> %850, <4 x i32>* %854, align 16
  %855 = or i64 %842, 8
  %856 = or i64 %842, 9
  %857 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %856
  %858 = bitcast i32* %857 to <4 x i32>*
  %859 = load <4 x i32>, <4 x i32>* %858, align 4
  %860 = getelementptr inbounds i32, i32* %857, i64 4
  %861 = bitcast i32* %860 to <4 x i32>*
  %862 = load <4 x i32>, <4 x i32>* %861, align 4
  %863 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %855
  %864 = bitcast i32* %863 to <4 x i32>*
  store <4 x i32> %859, <4 x i32>* %864, align 16
  %865 = getelementptr inbounds i32, i32* %863, i64 4
  %866 = bitcast i32* %865 to <4 x i32>*
  store <4 x i32> %862, <4 x i32>* %866, align 16
  %867 = or i64 %842, 16
  %868 = or i64 %842, 17
  %869 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %868
  %870 = bitcast i32* %869 to <4 x i32>*
  %871 = load <4 x i32>, <4 x i32>* %870, align 4
  %872 = getelementptr inbounds i32, i32* %869, i64 4
  %873 = bitcast i32* %872 to <4 x i32>*
  %874 = load <4 x i32>, <4 x i32>* %873, align 4
  %875 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %867
  %876 = bitcast i32* %875 to <4 x i32>*
  store <4 x i32> %871, <4 x i32>* %876, align 16
  %877 = getelementptr inbounds i32, i32* %875, i64 4
  %878 = bitcast i32* %877 to <4 x i32>*
  store <4 x i32> %874, <4 x i32>* %878, align 16
  %879 = or i64 %842, 24
  %880 = or i64 %842, 25
  %881 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %880
  %882 = bitcast i32* %881 to <4 x i32>*
  %883 = load <4 x i32>, <4 x i32>* %882, align 4
  %884 = getelementptr inbounds i32, i32* %881, i64 4
  %885 = bitcast i32* %884 to <4 x i32>*
  %886 = load <4 x i32>, <4 x i32>* %885, align 4
  %887 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %879
  %888 = bitcast i32* %887 to <4 x i32>*
  store <4 x i32> %883, <4 x i32>* %888, align 16
  %889 = getelementptr inbounds i32, i32* %887, i64 4
  %890 = bitcast i32* %889 to <4 x i32>*
  store <4 x i32> %886, <4 x i32>* %890, align 16
  %891 = add i64 %842, 32
  %892 = add i64 %843, -4
  %893 = icmp eq i64 %892, 0
  br i1 %893, label %894, label %841, !llvm.loop !9

894:                                              ; preds = %841, %840
  %895 = phi i64 [ 0, %840 ], [ %891, %841 ]
  br i1 %831, label %913, label %896

896:                                              ; preds = %894, %896
  %897 = phi i64 [ %910, %896 ], [ %895, %894 ]
  %898 = phi i64 [ %911, %896 ], [ %828, %894 ]
  %899 = or i64 %897, 1
  %900 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %899
  %901 = bitcast i32* %900 to <4 x i32>*
  %902 = load <4 x i32>, <4 x i32>* %901, align 4
  %903 = getelementptr inbounds i32, i32* %900, i64 4
  %904 = bitcast i32* %903 to <4 x i32>*
  %905 = load <4 x i32>, <4 x i32>* %904, align 4
  %906 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %897
  %907 = bitcast i32* %906 to <4 x i32>*
  store <4 x i32> %902, <4 x i32>* %907, align 16
  %908 = getelementptr inbounds i32, i32* %906, i64 4
  %909 = bitcast i32* %908 to <4 x i32>*
  store <4 x i32> %905, <4 x i32>* %909, align 16
  %910 = add i64 %897, 8
  %911 = add i64 %898, -1
  %912 = icmp eq i64 %911, 0
  br i1 %912, label %913, label %896, !llvm.loop !10

913:                                              ; preds = %896, %894
  br i1 %832, label %923, label %914

914:                                              ; preds = %913, %839
  %915 = phi i64 [ 0, %839 ], [ %827, %913 ]
  br label %916

916:                                              ; preds = %914, %916
  %917 = phi i64 [ %918, %916 ], [ %915, %914 ]
  %918 = add nuw nsw i64 %917, 1
  %919 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %918
  %920 = load i32, i32* %919, align 4
  %921 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %917
  store i32 %920, i32* %921, align 4
  %922 = icmp eq i64 %918, %820
  br i1 %922, label %923, label %916, !llvm.loop !11

923:                                              ; preds = %916, %913, %837
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %354) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %354, i8 0, i64 512, i1 false) #5
  br i1 %355, label %924, label %999

924:                                              ; preds = %923, %996
  %925 = phi i64 [ %997, %996 ], [ 0, %923 ]
  br i1 %817, label %926, label %945

926:                                              ; preds = %924
  br i1 %834, label %927, label %947

927:                                              ; preds = %947, %926
  %928 = phi i64 [ undef, %926 ], [ %981, %947 ]
  %929 = phi i64 [ 0, %926 ], [ %982, %947 ]
  %930 = phi i64 [ -9223372036854775808, %926 ], [ %981, %947 ]
  br i1 %836, label %945, label %931

931:                                              ; preds = %927, %931
  %932 = phi i64 [ %942, %931 ], [ %929, %927 ]
  %933 = phi i64 [ %941, %931 ], [ %930, %927 ]
  %934 = phi i64 [ %943, %931 ], [ %833, %927 ]
  %935 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %932
  %936 = load i32, i32* %935, align 4
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %925, i64 %937
  %939 = load i64, i64* %938, align 8
  %940 = icmp ult i64 %939, %933
  %941 = select i1 %940, i64 %939, i64 %933
  %942 = add nuw nsw i64 %932, 1
  %943 = add i64 %934, -1
  %944 = icmp eq i64 %943, 0
  br i1 %944, label %945, label %931, !llvm.loop !12

945:                                              ; preds = %927, %931, %924
  %946 = phi i64 [ -9223372036854775808, %924 ], [ %928, %927 ], [ %941, %931 ]
  br label %985

947:                                              ; preds = %926, %947
  %948 = phi i64 [ %982, %947 ], [ 0, %926 ]
  %949 = phi i64 [ %981, %947 ], [ -9223372036854775808, %926 ]
  %950 = phi i64 [ %983, %947 ], [ %835, %926 ]
  %951 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %948
  %952 = load i32, i32* %951, align 16
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %925, i64 %953
  %955 = load i64, i64* %954, align 8
  %956 = icmp ult i64 %955, %949
  %957 = select i1 %956, i64 %955, i64 %949
  %958 = or i64 %948, 1
  %959 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %958
  %960 = load i32, i32* %959, align 4
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %925, i64 %961
  %963 = load i64, i64* %962, align 8
  %964 = icmp ult i64 %963, %957
  %965 = select i1 %964, i64 %963, i64 %957
  %966 = or i64 %948, 2
  %967 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %966
  %968 = load i32, i32* %967, align 8
  %969 = sext i32 %968 to i64
  %970 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %925, i64 %969
  %971 = load i64, i64* %970, align 8
  %972 = icmp ult i64 %971, %965
  %973 = select i1 %972, i64 %971, i64 %965
  %974 = or i64 %948, 3
  %975 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 %974
  %976 = load i32, i32* %975, align 4
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %925, i64 %977
  %979 = load i64, i64* %978, align 8
  %980 = icmp ult i64 %979, %973
  %981 = select i1 %980, i64 %979, i64 %973
  %982 = add nuw nsw i64 %948, 4
  %983 = add i64 %950, -4
  %984 = icmp eq i64 %983, 0
  br i1 %984, label %927, label %947

985:                                              ; preds = %985, %945
  %986 = phi i64 [ 0, %945 ], [ %994, %985 ]
  %987 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %925, i64 %986
  %988 = load i64, i64* %987, align 8
  %989 = icmp ult i64 %988, %946
  %990 = select i1 %989, i64 %988, i64 %946
  %991 = getelementptr inbounds [64 x i64], [64 x i64]* %8, i64 0, i64 %986
  %992 = load i64, i64* %991, align 8
  %993 = add i64 %990, %992
  store i64 %993, i64* %991, align 8
  %994 = add nuw nsw i64 %986, 1
  %995 = icmp slt i64 %994, %356
  br i1 %995, label %985, label %996

996:                                              ; preds = %985
  %997 = add nuw nsw i64 %925, 1
  %998 = icmp eq i64 %997, %357
  br i1 %998, label %999, label %924

999:                                              ; preds = %996, %923
  br label %1000

1000:                                             ; preds = %999, %1000
  %1001 = phi i64 [ %1010, %1000 ], [ 0, %999 ]
  %1002 = phi i32 [ %1009, %1000 ], [ 0, %999 ]
  %1003 = phi i64 [ %1007, %1000 ], [ -9223372036854775808, %999 ]
  %1004 = getelementptr inbounds [64 x i64], [64 x i64]* %8, i64 0, i64 %1001
  %1005 = load i64, i64* %1004, align 8
  %1006 = icmp ult i64 %1005, %1003
  %1007 = select i1 %1006, i64 %1005, i64 %1003
  %1008 = trunc i64 %1001 to i32
  %1009 = select i1 %1006, i32 %1008, i32 %1002
  %1010 = add nuw nsw i64 %1001, 1
  %1011 = icmp slt i64 %1010, %356
  br i1 %1011, label %1000, label %1012

1012:                                             ; preds = %1000
  store i32 %1009, i32* %819, align 4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %354) #5
  %1013 = add nuw nsw i32 %838, 1
  %1014 = icmp slt i32 %1013, %815
  br i1 %1014, label %837, label %1015

1015:                                             ; preds = %1012, %709, %813
  %1016 = phi i64 [ %804, %813 ], [ %700, %709 ], [ %1007, %1012 ]
  %1017 = mul nsw i32 %374, %350
  %1018 = shl i32 6, %374
  %1019 = mul nsw i32 %1018, %360
  %1020 = add nsw i32 %1019, %1017
  %1021 = shl nsw i32 %1020, 9
  %1022 = sext i32 %1021 to i64
  %1023 = mul nsw i64 %1022, %361
  %1024 = ashr exact i64 %1023, 9
  %1025 = shl i64 %1016, 11
  %1026 = add i64 %1025, %1024
  %1027 = icmp ult i64 %1026, %375
  br i1 %1027, label %1028, label %1032

1028:                                             ; preds = %1015
  %1029 = sext i32 %376 to i64
  %1030 = shl nsw i64 %1029, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %363, i8* nonnull align 16 %13, i64 %1030, i1 false)
  br i1 %230, label %1031, label %1032

1031:                                             ; preds = %1028
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %365, i8* nonnull align 16 %15, i64 %1030, i1 false)
  br label %1032

1032:                                             ; preds = %1028, %1031, %1015
  %1033 = phi i64 [ %1026, %1031 ], [ %1026, %1028 ], [ %375, %1015 ]
  %1034 = phi i32 [ %374, %1031 ], [ %374, %1028 ], [ %373, %1015 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #5
  %1035 = add nuw nsw i32 %374, 1
  %1036 = icmp eq i32 %1035, 4
  br i1 %1036, label %366, label %372

1037:                                             ; preds = %1097, %370
  %1038 = phi i32 [ %368, %370 ], [ %1098, %1097 ]
  %1039 = phi i64 [ 0, %370 ], [ %1095, %1097 ]
  %1040 = icmp sgt i32 %1038, 0
  br i1 %1040, label %1041, label %1079

1041:                                             ; preds = %1037
  %1042 = sext i32 %1038 to i64
  %1043 = and i64 %1042, 1
  %1044 = icmp eq i32 %1038, 1
  br i1 %1044, label %1055, label %1045

1045:                                             ; preds = %1041
  %1046 = sub nsw i64 %1042, %1043
  br label %1099

1047:                                             ; preds = %1079, %366
  br i1 %229, label %1048, label %1204

1048:                                             ; preds = %1047
  %1049 = load i32, i32* %369, align 4
  %1050 = icmp sgt i32 %1049, 0
  br i1 %1050, label %1051, label %1204

1051:                                             ; preds = %1048
  %1052 = icmp ugt i32 %5, 2
  %1053 = select i1 %1052, i32 2, i32 4
  %1054 = sext i32 %1049 to i64
  br label %1128

1055:                                             ; preds = %1217, %1041
  %1056 = phi i32 [ undef, %1041 ], [ %1222, %1217 ]
  %1057 = phi i64 [ 0, %1041 ], [ %1223, %1217 ]
  %1058 = phi i32 [ 0, %1041 ], [ %1222, %1217 ]
  %1059 = phi i64 [ -1, %1041 ], [ %1220, %1217 ]
  %1060 = icmp eq i64 %1043, 0
  br i1 %1060, label %1079, label %1061

1061:                                             ; preds = %1055
  %1062 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 8, i64 %1057
  %1063 = load i32, i32* %1062, align 4
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %1039, i64 %1064
  %1066 = load i64, i64* %1065, align 8
  br i1 %230, label %1067, label %1074

1067:                                             ; preds = %1061
  %1068 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 9, i64 %1057
  %1069 = load i32, i32* %1068, align 4
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %1039, i64 %1070
  %1072 = load i64, i64* %1071, align 8
  %1073 = add i64 %1072, %1066
  br label %1074

1074:                                             ; preds = %1061, %1067
  %1075 = phi i64 [ %1073, %1067 ], [ %1066, %1061 ]
  %1076 = icmp ult i64 %1075, %1059
  %1077 = trunc i64 %1057 to i32
  %1078 = select i1 %1076, i32 %1077, i32 %1058
  br label %1079

1079:                                             ; preds = %1074, %1055, %1037
  %1080 = phi i32 [ 0, %1037 ], [ %1056, %1055 ], [ %1078, %1074 ]
  %1081 = trunc i32 %1080 to i16
  %1082 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %371, align 8
  %1083 = load i32*, i32** %239, align 8
  %1084 = getelementptr inbounds i32, i32* %1083, i64 %1039
  %1085 = load i32, i32* %1084, align 4
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1082, i64 %1086
  %1088 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1087, align 8
  %1089 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1088, i64 0, i32 28
  %1090 = load i16, i16* %1089, align 1
  %1091 = shl i16 %1081, 11
  %1092 = and i16 %1091, 30720
  %1093 = and i16 %1090, -30721
  %1094 = or i16 %1093, %1092
  store i16 %1094, i16* %1089, align 1
  %1095 = add nuw nsw i64 %1039, 1
  %1096 = icmp eq i64 %1095, %357
  br i1 %1096, label %1047, label %1097

1097:                                             ; preds = %1079
  %1098 = load i32, i32* %369, align 4
  br label %1037

1099:                                             ; preds = %1217, %1045
  %1100 = phi i64 [ 0, %1045 ], [ %1223, %1217 ]
  %1101 = phi i32 [ 0, %1045 ], [ %1222, %1217 ]
  %1102 = phi i64 [ -1, %1045 ], [ %1220, %1217 ]
  %1103 = phi i64 [ %1046, %1045 ], [ %1224, %1217 ]
  %1104 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 8, i64 %1100
  %1105 = load i32, i32* %1104, align 4
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %1039, i64 %1106
  %1108 = load i64, i64* %1107, align 8
  br i1 %230, label %1109, label %1116

1109:                                             ; preds = %1099
  %1110 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 9, i64 %1100
  %1111 = load i32, i32* %1110, align 4
  %1112 = sext i32 %1111 to i64
  %1113 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %1039, i64 %1112
  %1114 = load i64, i64* %1113, align 8
  %1115 = add i64 %1114, %1108
  br label %1116

1116:                                             ; preds = %1109, %1099
  %1117 = phi i64 [ %1115, %1109 ], [ %1108, %1099 ]
  %1118 = icmp ult i64 %1117, %1102
  %1119 = select i1 %1118, i64 %1117, i64 %1102
  %1120 = trunc i64 %1100 to i32
  %1121 = select i1 %1118, i32 %1120, i32 %1101
  %1122 = or i64 %1100, 1
  %1123 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 8, i64 %1122
  %1124 = load i32, i32* %1123, align 4
  %1125 = sext i32 %1124 to i64
  %1126 = getelementptr inbounds [64 x i64], [64 x i64]* %352, i64 %1039, i64 %1125
  %1127 = load i64, i64* %1126, align 8
  br i1 %230, label %1210, label %1217

1128:                                             ; preds = %1051, %1197
  %1129 = phi i64 [ 0, %1051 ], [ %1202, %1197 ]
  %1130 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 8, i64 %1129
  %1131 = load i32, i32* %1130, align 4
  %1132 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 9, i64 %1129
  %1133 = load i32, i32* %1132, align 4
  %1134 = sdiv i32 %1131, %1053
  %1135 = srem i32 %1131, %1053
  switch i32 %5, label %1192 [
    i32 4, label %1175
    i32 1, label %1136
    i32 2, label %1147
    i32 3, label %1158
  ]

1136:                                             ; preds = %1128
  %1137 = sext i32 %1134 to i64
  %1138 = getelementptr inbounds [8 x i32], [8 x i32]* @priconv_lvl1, i64 0, i64 %1137
  %1139 = load i32, i32* %1138, align 4
  %1140 = shl i32 %1139, 2
  %1141 = add nsw i32 %1140, %1135
  store i32 %1141, i32* %1130, align 4
  %1142 = sdiv i32 %1133, %1053
  %1143 = srem i32 %1133, %1053
  %1144 = sext i32 %1142 to i64
  %1145 = getelementptr inbounds [8 x i32], [8 x i32]* @priconv_lvl1, i64 0, i64 %1144
  %1146 = load i32, i32* %1145, align 4
  br label %1197

1147:                                             ; preds = %1128
  %1148 = sext i32 %1134 to i64
  %1149 = getelementptr inbounds [5 x i32], [5 x i32]* @priconv_lvl2, i64 0, i64 %1148
  %1150 = load i32, i32* %1149, align 4
  %1151 = shl i32 %1150, 2
  %1152 = add nsw i32 %1151, %1135
  store i32 %1152, i32* %1130, align 4
  %1153 = sdiv i32 %1133, %1053
  %1154 = srem i32 %1133, %1053
  %1155 = sext i32 %1153 to i64
  %1156 = getelementptr inbounds [5 x i32], [5 x i32]* @priconv_lvl2, i64 0, i64 %1155
  %1157 = load i32, i32* %1156, align 4
  br label %1197

1158:                                             ; preds = %1128
  %1159 = sext i32 %1134 to i64
  %1160 = getelementptr inbounds [5 x i32], [5 x i32]* @priconv_lvl2, i64 0, i64 %1159
  %1161 = load i32, i32* %1160, align 4
  %1162 = sext i32 %1135 to i64
  %1163 = getelementptr inbounds [2 x i32], [2 x i32]* @secconv_lvl3, i64 0, i64 %1162
  %1164 = load i32, i32* %1163, align 4
  %1165 = shl i32 %1161, 2
  %1166 = add nsw i32 %1165, %1164
  store i32 %1166, i32* %1130, align 4
  %1167 = sdiv i32 %1133, %1053
  %1168 = srem i32 %1133, %1053
  %1169 = sext i32 %1167 to i64
  %1170 = getelementptr inbounds [5 x i32], [5 x i32]* @priconv_lvl2, i64 0, i64 %1169
  %1171 = load i32, i32* %1170, align 4
  %1172 = sext i32 %1168 to i64
  %1173 = getelementptr inbounds [2 x i32], [2 x i32]* @secconv_lvl3, i64 0, i64 %1172
  %1174 = load i32, i32* %1173, align 4
  br label %1197

1175:                                             ; preds = %1128
  %1176 = sext i32 %1134 to i64
  %1177 = getelementptr inbounds [2 x i32], [2 x i32]* @priconv_lvl4, i64 0, i64 %1176
  %1178 = load i32, i32* %1177, align 4
  %1179 = sext i32 %1135 to i64
  %1180 = getelementptr inbounds [2 x i32], [2 x i32]* @secconv_lvl3, i64 0, i64 %1179
  %1181 = load i32, i32* %1180, align 4
  %1182 = shl i32 %1178, 2
  %1183 = add nsw i32 %1182, %1181
  store i32 %1183, i32* %1130, align 4
  %1184 = sdiv i32 %1133, %1053
  %1185 = srem i32 %1133, %1053
  %1186 = sext i32 %1184 to i64
  %1187 = getelementptr inbounds [2 x i32], [2 x i32]* @priconv_lvl4, i64 0, i64 %1186
  %1188 = load i32, i32* %1187, align 4
  %1189 = sext i32 %1185 to i64
  %1190 = getelementptr inbounds [2 x i32], [2 x i32]* @secconv_lvl3, i64 0, i64 %1189
  %1191 = load i32, i32* %1190, align 4
  br label %1197

1192:                                             ; preds = %1128
  %1193 = shl i32 %1134, 2
  %1194 = add nsw i32 %1193, %1135
  store i32 %1194, i32* %1130, align 4
  %1195 = sdiv i32 %1133, %1053
  %1196 = srem i32 %1133, %1053
  br label %1197

1197:                                             ; preds = %1192, %1136, %1147, %1158, %1175
  %1198 = phi i32 [ %1195, %1192 ], [ %1171, %1158 ], [ %1157, %1147 ], [ %1146, %1136 ], [ %1188, %1175 ]
  %1199 = phi i32 [ %1196, %1192 ], [ %1174, %1158 ], [ %1154, %1147 ], [ %1143, %1136 ], [ %1191, %1175 ]
  %1200 = shl i32 %1198, 2
  %1201 = add nsw i32 %1200, %1199
  store i32 %1201, i32* %1132, align 4
  %1202 = add nuw nsw i64 %1129, 1
  %1203 = icmp slt i64 %1202, %1054
  br i1 %1203, label %1128, label %1204

1204:                                             ; preds = %1197, %1048, %1047
  %1205 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 6
  store i32 %171, i32* %1205, align 8
  %1206 = load i8*, i8** %247, align 8
  call void @aom_free(i8* %1206) #5
  %1207 = load i8*, i8** %250, align 8
  call void @aom_free(i8* %1207) #5
  %1208 = load i8*, i8** %240, align 8
  call void @aom_free(i8* %1208) #5
  call void @llvm.lifetime.end.p0i8(i64 7976, i8* nonnull %177) #5
  br label %1209

1209:                                             ; preds = %150, %110, %1204
  ret void

1210:                                             ; preds = %1116
  %1211 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %3, i64 0, i32 31, i32 9, i64 %1122
  %1212 = load i32, i32* %1211, align 4
  %1213 = sext i32 %1212 to i64
  %1214 = getelementptr inbounds [64 x i64], [64 x i64]* %353, i64 %1039, i64 %1213
  %1215 = load i64, i64* %1214, align 8
  %1216 = add i64 %1215, %1127
  br label %1217

1217:                                             ; preds = %1210, %1116
  %1218 = phi i64 [ %1216, %1210 ], [ %1127, %1116 ]
  %1219 = icmp ult i64 %1218, %1119
  %1220 = select i1 %1219, i64 %1218, i64 %1119
  %1221 = trunc i64 %1122 to i32
  %1222 = select i1 %1219, i32 %1221, i32 %1121
  %1223 = add nuw nsw i64 %1100, 2
  %1224 = add i64 %1103, -2
  %1225 = icmp eq i64 %1224, 0
  br i1 %1225, label %1055, label %1099

1226:                                             ; preds = %167
  %1227 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 1, i32 1
  %1228 = load i32, i32* %1227, align 4
  %1229 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 12, i64 1
  store i32 %1228, i32* %1229, align 4
  %1230 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 1, i32 2
  %1231 = load i32, i32* %1230, align 8
  %1232 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 13, i64 1
  store i32 %1231, i32* %1232, align 4
  %1233 = icmp eq i32 %1231, 0
  %1234 = icmp ne i32 %1228, 0
  %1235 = select i1 %1234, i32 0, i32 2
  %1236 = select i1 %1234, i32 1, i32 3
  %1237 = select i1 %1233, i32 %1236, i32 %1235
  %1238 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 14, i64 1
  store i32 %1237, i32* %1238, align 4
  %1239 = sub nsw i32 2, %1228
  %1240 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 10, i64 1
  store i32 %1239, i32* %1240, align 4
  %1241 = sub nsw i32 2, %1231
  %1242 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 11, i64 1
  store i32 %1241, i32* %1242, align 4
  %1243 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 2, i64 1, i32 0
  %1244 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 1, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1243, i8* align 16 %1244, i64 2608, i1 false) #5
  %1245 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 2, i32 1
  %1246 = load i32, i32* %1245, align 4
  %1247 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 12, i64 2
  store i32 %1246, i32* %1247, align 4
  %1248 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 2, i32 2
  %1249 = load i32, i32* %1248, align 8
  %1250 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 13, i64 2
  store i32 %1249, i32* %1250, align 8
  %1251 = icmp eq i32 %1249, 0
  %1252 = icmp ne i32 %1246, 0
  %1253 = select i1 %1252, i32 0, i32 2
  %1254 = select i1 %1252, i32 1, i32 3
  %1255 = select i1 %1251, i32 %1254, i32 %1253
  %1256 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 14, i64 2
  store i32 %1255, i32* %1256, align 4
  %1257 = sub nsw i32 2, %1246
  %1258 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 10, i64 2
  store i32 %1257, i32* %1258, align 4
  %1259 = sub nsw i32 2, %1249
  %1260 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 11, i64 2
  store i32 %1259, i32* %1260, align 8
  %1261 = getelementptr inbounds %struct.CdefSearchCtx, %struct.CdefSearchCtx* %11, i64 0, i32 2, i64 2, i32 0
  %1262 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 4, i64 2, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1261, i8* align 16 %1262, i64 2608, i1 false) #5
  br label %228
}

declare void @av1_cdef_mse_calc_frame_mt(%struct.AV1Common*, %struct.MultiThreadInfo*, %struct.CdefSearchCtx*) local_unnamed_addr #2

declare signext i16 @av1_ac_quant_QTX(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #3

declare void @av1_setup_dst_planes(%struct.macroblockd_plane*, i8 zeroext, %struct.yv12_buffer_config*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @copy_sb16_16(i16* nocapture, i32, i8* nocapture readonly, i32, i32, i32, i32, i32) #4 {
  %9 = mul nsw i32 %5, %3
  %10 = add nsw i32 %9, %4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = icmp sgt i32 %6, 0
  br i1 %13, label %14, label %161

14:                                               ; preds = %8
  %15 = icmp sgt i32 %7, 0
  %16 = sext i32 %1 to i64
  %17 = sext i32 %5 to i64
  %18 = zext i32 %6 to i64
  %19 = zext i32 %7 to i64
  %20 = add nsw i64 %11, %19
  %21 = and i64 %19, 4294967280
  %22 = add nsw i64 %21, -16
  %23 = lshr exact i64 %22, 4
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i32 %7, 16
  %26 = and i64 %19, 4294967280
  %27 = and i64 %24, 1
  %28 = icmp eq i64 %22, 0
  %29 = sub nuw nsw i64 %24, %27
  %30 = icmp eq i64 %27, 0
  %31 = icmp eq i64 %26, %19
  %32 = and i64 %19, 3
  %33 = icmp eq i64 %32, 0
  br label %34

34:                                               ; preds = %158, %14
  %35 = phi i64 [ 0, %14 ], [ %159, %158 ]
  %36 = mul i64 %35, %16
  %37 = getelementptr i16, i16* %0, i64 %36
  %38 = bitcast i16* %37 to i8*
  %39 = add i64 %36, %19
  %40 = getelementptr i16, i16* %0, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul i64 %35, %17
  %43 = add i64 %42, %11
  %44 = getelementptr i8, i8* %2, i64 %43
  %45 = add i64 %20, %42
  %46 = getelementptr i8, i8* %2, i64 %45
  br i1 %15, label %47, label %158

47:                                               ; preds = %34
  %48 = mul nsw i64 %35, %17
  %49 = mul nsw i64 %35, %16
  br i1 %25, label %108, label %50

50:                                               ; preds = %47
  %51 = icmp ugt i8* %46, %38
  %52 = icmp ult i8* %44, %41
  %53 = and i1 %51, %52
  br i1 %53, label %108, label %54

54:                                               ; preds = %50
  br i1 %28, label %90, label %55

55:                                               ; preds = %54, %55
  %56 = phi i64 [ %87, %55 ], [ 0, %54 ]
  %57 = phi i64 [ %88, %55 ], [ %29, %54 ]
  %58 = add nsw i64 %56, %48
  %59 = getelementptr inbounds i8, i8* %12, i64 %58
  %60 = bitcast i8* %59 to <8 x i8>*
  %61 = load <8 x i8>, <8 x i8>* %60, align 1, !alias.scope !13
  %62 = getelementptr inbounds i8, i8* %59, i64 8
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !13
  %65 = zext <8 x i8> %61 to <8 x i16>
  %66 = zext <8 x i8> %64 to <8 x i16>
  %67 = add nsw i64 %56, %49
  %68 = getelementptr inbounds i16, i16* %0, i64 %67
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %69, align 2, !alias.scope !16, !noalias !13
  %70 = getelementptr inbounds i16, i16* %68, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %71, align 2, !alias.scope !16, !noalias !13
  %72 = or i64 %56, 16
  %73 = add nsw i64 %72, %48
  %74 = getelementptr inbounds i8, i8* %12, i64 %73
  %75 = bitcast i8* %74 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !13
  %77 = getelementptr inbounds i8, i8* %74, i64 8
  %78 = bitcast i8* %77 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1, !alias.scope !13
  %80 = zext <8 x i8> %76 to <8 x i16>
  %81 = zext <8 x i8> %79 to <8 x i16>
  %82 = add nsw i64 %72, %49
  %83 = getelementptr inbounds i16, i16* %0, i64 %82
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !16, !noalias !13
  %85 = getelementptr inbounds i16, i16* %83, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %86, align 2, !alias.scope !16, !noalias !13
  %87 = add i64 %56, 32
  %88 = add i64 %57, -2
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %55, !llvm.loop !18

90:                                               ; preds = %55, %54
  %91 = phi i64 [ 0, %54 ], [ %87, %55 ]
  br i1 %30, label %107, label %92

92:                                               ; preds = %90
  %93 = add nsw i64 %91, %48
  %94 = getelementptr inbounds i8, i8* %12, i64 %93
  %95 = bitcast i8* %94 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1, !alias.scope !13
  %97 = getelementptr inbounds i8, i8* %94, i64 8
  %98 = bitcast i8* %97 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1, !alias.scope !13
  %100 = zext <8 x i8> %96 to <8 x i16>
  %101 = zext <8 x i8> %99 to <8 x i16>
  %102 = add nsw i64 %91, %49
  %103 = getelementptr inbounds i16, i16* %0, i64 %102
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %104, align 2, !alias.scope !16, !noalias !13
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %106, align 2, !alias.scope !16, !noalias !13
  br label %107

107:                                              ; preds = %90, %92
  br i1 %31, label %158, label %108

108:                                              ; preds = %107, %50, %47
  %109 = phi i64 [ 0, %50 ], [ 0, %47 ], [ %26, %107 ]
  %110 = xor i64 %109, -1
  %111 = add nsw i64 %110, %19
  br i1 %33, label %124, label %112

112:                                              ; preds = %108, %112
  %113 = phi i64 [ %121, %112 ], [ %109, %108 ]
  %114 = phi i64 [ %122, %112 ], [ %32, %108 ]
  %115 = add nsw i64 %113, %48
  %116 = getelementptr inbounds i8, i8* %12, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i16
  %119 = add nsw i64 %113, %49
  %120 = getelementptr inbounds i16, i16* %0, i64 %119
  store i16 %118, i16* %120, align 2
  %121 = add nuw nsw i64 %113, 1
  %122 = add i64 %114, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %112, !llvm.loop !19

124:                                              ; preds = %112, %108
  %125 = phi i64 [ %109, %108 ], [ %121, %112 ]
  %126 = icmp ult i64 %111, 3
  br i1 %126, label %158, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %156, %127 ], [ %125, %124 ]
  %129 = add nsw i64 %128, %48
  %130 = getelementptr inbounds i8, i8* %12, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i16
  %133 = add nsw i64 %128, %49
  %134 = getelementptr inbounds i16, i16* %0, i64 %133
  store i16 %132, i16* %134, align 2
  %135 = add nuw nsw i64 %128, 1
  %136 = add nsw i64 %135, %48
  %137 = getelementptr inbounds i8, i8* %12, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  %140 = add nsw i64 %135, %49
  %141 = getelementptr inbounds i16, i16* %0, i64 %140
  store i16 %139, i16* %141, align 2
  %142 = add nuw nsw i64 %128, 2
  %143 = add nsw i64 %142, %48
  %144 = getelementptr inbounds i8, i8* %12, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = add nsw i64 %142, %49
  %148 = getelementptr inbounds i16, i16* %0, i64 %147
  store i16 %146, i16* %148, align 2
  %149 = add nuw nsw i64 %128, 3
  %150 = add nsw i64 %149, %48
  %151 = getelementptr inbounds i8, i8* %12, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  %154 = add nsw i64 %149, %49
  %155 = getelementptr inbounds i16, i16* %0, i64 %154
  store i16 %153, i16* %155, align 2
  %156 = add nuw nsw i64 %128, 4
  %157 = icmp eq i64 %156, %19
  br i1 %157, label %158, label %127, !llvm.loop !20

158:                                              ; preds = %124, %127, %107, %34
  %159 = add nuw nsw i64 %35, 1
  %160 = icmp eq i64 %159, %18
  br i1 %160, label %161, label %34

161:                                              ; preds = %158, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @compute_cdef_dist(i8*, i32, i16*, %struct.cdef_list* nocapture readonly, i32, i8 zeroext, i32, i32, i32) #0 {
  %10 = mul nsw i32 %7, %1
  %11 = add nsw i32 %10, %8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = zext i8 %5 to i64
  %15 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %14
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %14
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %23, 2
  %25 = icmp sgt i32 %4, 0
  br i1 %25, label %26, label %53

26:                                               ; preds = %9
  %27 = shl nuw nsw i32 %24, 1
  %28 = zext i32 %4 to i64
  br label %29

29:                                               ; preds = %29, %26
  %30 = phi i64 [ 0, %26 ], [ %51, %29 ]
  %31 = phi i64 [ 0, %26 ], [ %50, %29 ]
  %32 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %3, i64 %30, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %3, i64 %30, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = load i64 (i8*, i32, i16*, i32, i32, i32)*, i64 (i8*, i32, i16*, i32, i32, i32)** @aom_mse_wxh_16bit, align 8
  %39 = shl i32 %34, %24
  %40 = mul nsw i32 %39, %1
  %41 = shl i32 %37, %24
  %42 = add nsw i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %13, i64 %43
  %45 = trunc i64 %30 to i32
  %46 = shl i32 %45, %27
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %2, i64 %47
  %49 = tail call i64 %38(i8* %44, i32 %1, i16* %48, i32 %17, i32 %17, i32 %20) #5
  %50 = add i64 %49, %31
  %51 = add nuw nsw i64 %30, 1
  %52 = icmp eq i64 %51, %28
  br i1 %52, label %53, label %29

53:                                               ; preds = %29, %9
  %54 = phi i64 [ 0, %9 ], [ %50, %29 ]
  %55 = shl nsw i32 %6, 1
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %54, %56
  ret i64 %57
}

declare i8* @aom_malloc(i64) local_unnamed_addr #2

declare void @aom_free(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !6, !3}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !8}
!20 = distinct !{!20, !3}
