; ModuleID = '../../gpu/ipc/service/image_transport_surface_linux.cc'
source_filename = "../../gpu/ipc/service/image_transport_surface_linux.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gl::GLSurface" = type { i32 (...)**, %"class.base::RefCounted", %"class.base::SupportsWeakPtr" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::SupportsWeakPtr" = type { %"class.base::internal::WeakReferenceOwner" }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.7 }
%class.scoped_refptr.7 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.gl::GLSurfaceFormat" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.gpu::PassThroughImageTransportSurface" = type { %"class.gl::GLSurfaceAdapter", i8, i8, %"class.base::WeakPtr", i32, i8, i8, i64, %"class.base::WeakPtrFactory" }
%"class.gl::GLSurfaceAdapter" = type { %"class.gl::GLSurface", %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gl::GLSurface"* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gl::GLSurface"* @_ZN3gpu21ImageTransportSurface19CreateNativeSurfaceEN4base7WeakPtrINS_29ImageTransportSurfaceDelegateEEEjN2gl15GLSurfaceFormatE(%"class.base::WeakPtr"*, i32, %"class.gl::GLSurfaceFormat"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::WeakPtr", align 8
  %5 = tail call %"class.gl::GLSurface"* @_ZN2gl4init30CreateSurfacelessViewGLSurfaceEj(i32 %1) #4
  %6 = ptrtoint %"class.gl::GLSurface"* %5 to i64
  %7 = icmp eq %"class.gl::GLSurface"* %5, null
  br i1 %7, label %8, label %17

8:                                                ; preds = %3
  %9 = tail call %"class.gl::GLSurface"* @_ZN2gl4init19CreateViewGLSurfaceEj(i32 %1) #4
  %10 = ptrtoint %"class.gl::GLSurface"* %9 to i64
  %11 = tail call i32 @_ZN2gl19GetGLImplementationEv() #4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = tail call i32 @_ZN2gl19GetGLImplementationEv() #4
  %15 = icmp eq i32 %14, 9
  br i1 %15, label %16, label %17

16:                                               ; preds = %13, %8
  br label %17

17:                                               ; preds = %3, %13, %16
  %18 = phi i64 [ %6, %3 ], [ %10, %16 ], [ %10, %13 ]
  %19 = phi i1 [ false, %3 ], [ true, %16 ], [ false, %13 ]
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %46, label %21

21:                                               ; preds = %17
  %22 = inttoptr i64 %18 to %"class.gl::GLSurface"*
  %23 = tail call i8* @_Znwm(i64 88) #5
  %24 = bitcast i8* %23 to %"class.gpu::PassThroughImageTransportSurface"*
  %25 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %0, i64 0, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"* nonnull %25, %"class.base::internal::WeakReference"* dereferenceable(8) %26) #4
  %27 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %0, i64 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %27, align 8
  call void @_ZN3gpu32PassThroughImageTransportSurfaceC1EN4base7WeakPtrINS_29ImageTransportSurfaceDelegateEEEPN2gl9GLSurfaceEb(%"class.gpu::PassThroughImageTransportSurface"* nonnull %24, %"class.base::WeakPtr"* nonnull %4, %"class.gl::GLSurface"* nonnull %22, i1 zeroext %19) #4
  %30 = ptrtoint i8* %23 to i64
  %31 = getelementptr inbounds i8, i8* %23, i64 8
  %32 = bitcast i8* %31 to %"class.base::subtle::RefCountedBase"*
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %32) #4
  %33 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nonnull %33) #4
  %34 = getelementptr inbounds %"class.gl::GLSurface", %"class.gl::GLSurface"* %22, i64 0, i32 1
  %35 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %34, i64 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %35) #4
  %36 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %34, i64 0, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %46

39:                                               ; preds = %21
  %40 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %34, i64 -2
  %41 = bitcast %"class.base::RefCounted"* %40 to %"class.gl::GLSurface"*
  %42 = bitcast %"class.base::RefCounted"* %40 to void (%"class.gl::GLSurface"*)***
  %43 = load void (%"class.gl::GLSurface"*)**, void (%"class.gl::GLSurface"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.gl::GLSurface"*)*, void (%"class.gl::GLSurface"*)** %43, i64 62
  %45 = load void (%"class.gl::GLSurface"*)*, void (%"class.gl::GLSurface"*)** %44, align 8
  call void %45(%"class.gl::GLSurface"* nonnull %41) #4
  br label %46

46:                                               ; preds = %17, %21, %39
  %47 = phi i64 [ %30, %21 ], [ %30, %39 ], [ 0, %17 ]
  %48 = inttoptr i64 %47 to %"class.gl::GLSurface"*
  ret %"class.gl::GLSurface"* %48
}

declare %"class.gl::GLSurface"* @_ZN2gl4init30CreateSurfacelessViewGLSurfaceEj(i32) local_unnamed_addr #1

declare %"class.gl::GLSurface"* @_ZN2gl4init19CreateViewGLSurfaceEj(i32) local_unnamed_addr #1

declare i32 @_ZN2gl19GetGLImplementationEv() local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN3gpu32PassThroughImageTransportSurfaceC1EN4base7WeakPtrINS_29ImageTransportSurfaceDelegateEEEPN2gl9GLSurfaceEb(%"class.gpu::PassThroughImageTransportSurface"*, %"class.base::WeakPtr"*, %"class.gl::GLSurface"*, i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #3

declare void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
