; ModuleID = '../../third_party/openscreen/src/util/yet_another_bit_vector.cc'
source_filename = "../../third_party/openscreen/src/util/yet_another_bit_vector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.openscreen::YetAnotherBitVector" = type { i32, %union.anon }
%union.anon = type { i64 }

@_ZN10openscreen19YetAnotherBitVector11kAllBitsSetE = hidden local_unnamed_addr constant i64 -1, align 8
@_ZN10openscreen19YetAnotherBitVector10kNoBitsSetE = hidden local_unnamed_addr constant i64 0, align 8
@_ZN10openscreen19YetAnotherBitVector15kBitsPerIntegerE = hidden local_unnamed_addr constant i32 64, align 4

@_ZN10openscreen19YetAnotherBitVectorC1Ev = hidden unnamed_addr alias void (%"class.openscreen::YetAnotherBitVector"*), void (%"class.openscreen::YetAnotherBitVector"*)* @_ZN10openscreen19YetAnotherBitVectorC2Ev
@_ZN10openscreen19YetAnotherBitVectorC1EiNS0_4FillE = hidden unnamed_addr alias void (%"class.openscreen::YetAnotherBitVector"*, i32, i1), void (%"class.openscreen::YetAnotherBitVector"*, i32, i1)* @_ZN10openscreen19YetAnotherBitVectorC2EiNS0_4FillE
@_ZN10openscreen19YetAnotherBitVectorD1Ev = hidden unnamed_addr alias void (%"class.openscreen::YetAnotherBitVector"*), void (%"class.openscreen::YetAnotherBitVector"*)* @_ZN10openscreen19YetAnotherBitVectorD2Ev
@_ZN10openscreen19YetAnotherBitVectorC1EOS0_ = hidden unnamed_addr alias void (%"class.openscreen::YetAnotherBitVector"*, %"class.openscreen::YetAnotherBitVector"*), void (%"class.openscreen::YetAnotherBitVector"*, %"class.openscreen::YetAnotherBitVector"*)* @_ZN10openscreen19YetAnotherBitVectorC2EOS0_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10openscreen19YetAnotherBitVectorC2Ev(%"class.openscreen::YetAnotherBitVector"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVectorC2EiNS0_4FillE(%"class.openscreen::YetAnotherBitVector"* nocapture, i32, i1 zeroext) unnamed_addr #1 align 2 {
  tail call void @_ZN10openscreen19YetAnotherBitVector20InitializeForNewSizeEiNS0_4FillE(%"class.openscreen::YetAnotherBitVector"* %0, i32 %1, i1 zeroext %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector20InitializeForNewSizeEiNS0_4FillE(%"class.openscreen::YetAnotherBitVector"* nocapture, i32, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = icmp sgt i32 %1, 64
  br i1 %5, label %6, label %17

6:                                                ; preds = %3
  %7 = add nuw nsw i32 %1, 63
  %8 = sdiv i32 %7, 64
  %9 = sext i32 %8 to i64
  %10 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %9, i64 8)
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = select i1 %11, i64 -1, i64 %12
  %14 = tail call i8* @_Znam(i64 %13) #9
  %15 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %16 = bitcast %union.anon* %15 to i8**
  store i8* %14, i8** %16, align 8
  br label %17

17:                                               ; preds = %6, %3
  br i1 %2, label %18, label %49

18:                                               ; preds = %17
  br i1 %5, label %19, label %42

19:                                               ; preds = %18
  %20 = add nuw nsw i32 %1, 63
  %21 = sdiv i32 %20, 64
  %22 = add nsw i32 %21, -1
  %23 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %24 = bitcast %union.anon* %23 to i64**
  %25 = load i64*, i64** %24, align 8
  %26 = sext i32 %22 to i64
  %27 = getelementptr inbounds i64, i64* %25, i64 %26
  %28 = icmp sgt i32 %22, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %19
  %30 = bitcast i64* %25 to i8*
  %31 = shl nsw i64 %26, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 -1, i64 %31, i1 false) #10
  %32 = load i32, i32* %4, align 8
  br label %33

33:                                               ; preds = %29, %19
  %34 = phi i32 [ %32, %29 ], [ %1, %19 ]
  %35 = shl nsw i32 %22, 6
  %36 = sub nsw i32 %34, %35
  %37 = icmp sgt i32 %36, 63
  %38 = zext i32 %36 to i64
  %39 = shl nsw i64 -1, %38
  %40 = xor i64 %39, -1
  %41 = select i1 %37, i64 -1, i64 %40
  store i64 %41, i64* %27, align 8
  br label %65

42:                                               ; preds = %18
  %43 = icmp eq i32 %1, 64
  %44 = zext i32 %1 to i64
  %45 = shl nsw i64 -1, %44
  %46 = xor i64 %45, -1
  %47 = select i1 %43, i64 -1, i64 %46
  %48 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  store i64 %47, i64* %48, align 8
  br label %65

49:                                               ; preds = %17
  %50 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  br i1 %5, label %51, label %63

51:                                               ; preds = %49
  %52 = add nuw nsw i32 %1, 63
  %53 = sdiv i32 %52, 64
  %54 = sext i32 %53 to i64
  %55 = bitcast %union.anon* %50 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = shl nsw i64 %54, 3
  %58 = icmp slt i64 %54, 1
  %59 = select i1 %58, i64 %54, i64 1
  %60 = mul nsw i64 %59, -8
  %61 = add nsw i64 %57, 8
  %62 = add nsw i64 %61, %60
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 %62, i1 false) #10
  br label %65

63:                                               ; preds = %49
  %64 = getelementptr inbounds %union.anon, %union.anon* %50, i64 0, i32 0
  store i64 0, i64* %64, align 8
  br label %65

65:                                               ; preds = %63, %51, %42, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVectorD2Ev(%"class.openscreen::YetAnotherBitVector"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 64
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %7 = bitcast %union.anon* %6 to i64**
  %8 = load i64*, i64** %7, align 8
  %9 = icmp eq i64* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = bitcast i64* %8 to i8*
  tail call void @_ZdaPv(i8* %11) #9
  br label %12

12:                                               ; preds = %5, %10, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVectorC2EOS0_(%"class.openscreen::YetAnotherBitVector"* nocapture, %"class.openscreen::YetAnotherBitVector"* nocapture dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %1, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  store i32 0, i32* %4, align 8
  store i64 0, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.openscreen::YetAnotherBitVector"* @_ZN10openscreen19YetAnotherBitVectoraSEOS0_(%"class.openscreen::YetAnotherBitVector"* returned, %"class.openscreen::YetAnotherBitVector"* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.openscreen::YetAnotherBitVector"* %0, %1
  br i1 %3, label %21, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 64
  br i1 %7, label %8, label %15

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = icmp eq i64* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %8
  %14 = bitcast i64* %11 to i8*
  tail call void @_ZdaPv(i8* %14) #9
  br label %15

15:                                               ; preds = %8, %13, %4
  %16 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %1, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %5, align 8
  %18 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %1, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  %20 = load i64, i64* %18, align 8
  store i64 %20, i64* %19, align 8
  store i32 0, i32* %16, align 8
  store i64 0, i64* %18, align 8
  br label %21

21:                                               ; preds = %2, %15
  ret %"class.openscreen::YetAnotherBitVector"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK10openscreen19YetAnotherBitVector5IsSetEi(%"class.openscreen::YetAnotherBitVector"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 64
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = sdiv i32 %1, 64
  %8 = srem i32 %1, 64
  %9 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds i64, i64* %11, i64 %12
  br label %16

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  br label %16

16:                                               ; preds = %6, %14
  %17 = phi i32 [ %8, %6 ], [ %1, %14 ]
  %18 = phi i64* [ %13, %6 ], [ %15, %14 ]
  %19 = load i64, i64* %18, align 8
  %20 = zext i32 %17 to i64
  %21 = shl i64 1, %20
  %22 = and i64 %19, %21
  %23 = icmp ne i64 %22, 0
  ret i1 %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64* @_ZNK10openscreen19YetAnotherBitVector6SelectEPi(%"class.openscreen::YetAnotherBitVector"* readonly, i32* nocapture) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 64
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = load i32, i32* %1, align 4
  %8 = sdiv i32 %7, 64
  %9 = srem i32 %7, 64
  store i32 %9, i32* %1, align 4
  %10 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %11 = bitcast %union.anon* %10 to i64**
  %12 = load i64*, i64** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds i64, i64* %12, i64 %13
  br label %17

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  br label %17

17:                                               ; preds = %15, %6
  %18 = phi i64* [ %14, %6 ], [ %16, %15 ]
  ret i64* %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector3SetEi(%"class.openscreen::YetAnotherBitVector"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 64
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = sdiv i32 %1, 64
  %8 = srem i32 %1, 64
  %9 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds i64, i64* %11, i64 %12
  br label %16

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  br label %16

16:                                               ; preds = %6, %14
  %17 = phi i32 [ %8, %6 ], [ %1, %14 ]
  %18 = phi i64* [ %13, %6 ], [ %15, %14 ]
  %19 = zext i32 %17 to i64
  %20 = shl i64 1, %19
  %21 = load i64, i64* %18, align 8
  %22 = or i64 %21, %20
  store i64 %22, i64* %18, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector5ClearEi(%"class.openscreen::YetAnotherBitVector"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 64
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = sdiv i32 %1, 64
  %8 = srem i32 %1, 64
  %9 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds i64, i64* %11, i64 %12
  br label %16

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  br label %16

16:                                               ; preds = %6, %14
  %17 = phi i32 [ %8, %6 ], [ %1, %14 ]
  %18 = phi i64* [ %13, %6 ], [ %15, %14 ]
  %19 = zext i32 %17 to i64
  %20 = shl i64 1, %19
  %21 = xor i64 %20, -1
  %22 = load i64, i64* %18, align 8
  %23 = and i64 %22, %21
  store i64 %23, i64* %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector6ResizeEiNS0_4FillE(%"class.openscreen::YetAnotherBitVector"* nocapture, i32, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 64
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %9 = bitcast %union.anon* %8 to i64**
  %10 = load i64*, i64** %9, align 8
  %11 = icmp eq i64* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = bitcast i64* %10 to i8*
  tail call void @_ZdaPv(i8* %13) #9
  br label %14

14:                                               ; preds = %7, %12, %3
  tail call void @_ZN10openscreen19YetAnotherBitVector20InitializeForNewSizeEiNS0_4FillE(%"class.openscreen::YetAnotherBitVector"* %0, i32 %1, i1 zeroext %2)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector6SetAllEv(%"class.openscreen::YetAnotherBitVector"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 64
  br i1 %4, label %5, label %28

5:                                                ; preds = %1
  %6 = add nuw nsw i32 %3, 63
  %7 = sdiv i32 %6, 64
  %8 = add nsw i32 %7, -1
  %9 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to i64**
  %11 = load i64*, i64** %10, align 8
  %12 = sext i32 %8 to i64
  %13 = getelementptr inbounds i64, i64* %11, i64 %12
  %14 = icmp sgt i32 %8, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %5
  %16 = bitcast i64* %11 to i8*
  %17 = shl nsw i64 %12, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 -1, i64 %17, i1 false)
  %18 = load i32, i32* %2, align 8
  br label %19

19:                                               ; preds = %15, %5
  %20 = phi i32 [ %18, %15 ], [ %3, %5 ]
  %21 = shl nsw i32 %8, 6
  %22 = sub nsw i32 %20, %21
  %23 = icmp sgt i32 %22, 63
  %24 = zext i32 %22 to i64
  %25 = shl nsw i64 -1, %24
  %26 = xor i64 %25, -1
  %27 = select i1 %23, i64 -1, i64 %26
  store i64 %27, i64* %13, align 8
  br label %35

28:                                               ; preds = %1
  %29 = icmp eq i32 %3, 64
  %30 = zext i32 %3 to i64
  %31 = shl nsw i64 -1, %30
  %32 = xor i64 %31, -1
  %33 = select i1 %29, i64 -1, i64 %32
  %34 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  store i64 %33, i64* %34, align 8
  br label %35

35:                                               ; preds = %28, %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector8ClearAllEv(%"class.openscreen::YetAnotherBitVector"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 64
  %5 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  br i1 %4, label %6, label %18

6:                                                ; preds = %1
  %7 = add nuw nsw i32 %3, 63
  %8 = sdiv i32 %7, 64
  %9 = sext i32 %8 to i64
  %10 = bitcast %union.anon* %5 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = shl nsw i64 %9, 3
  %13 = icmp slt i64 %9, 1
  %14 = select i1 %13, i64 %9, i64 1
  %15 = shl nsw i64 %14, 3
  %16 = add nsw i64 %15, -8
  %17 = sub nsw i64 %12, %16
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %17, i1 false)
  br label %20

18:                                               ; preds = %1
  %19 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  store i64 0, i64* %19, align 8
  br label %20

20:                                               ; preds = %6, %18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10openscreen19YetAnotherBitVector10ShiftRightEi(%"class.openscreen::YetAnotherBitVector"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 64
  br i1 %5, label %6, label %119

6:                                                ; preds = %2
  %7 = add nuw nsw i32 %4, 63
  %8 = sdiv i32 %7, 64
  %9 = icmp sgt i32 %1, 63
  br i1 %9, label %10, label %94

10:                                               ; preds = %6
  %11 = lshr i32 %1, 6
  %12 = icmp sgt i32 %8, %11
  %13 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to i64**
  %15 = load i64*, i64** %14, align 8
  br i1 %12, label %16, label %45

16:                                               ; preds = %10
  %17 = lshr i32 %1, 6
  %18 = zext i32 %17 to i64
  %19 = zext i32 %11 to i64
  %20 = add nsw i32 %8, %17
  %21 = sub nsw i32 %20, %11
  %22 = zext i32 %21 to i64
  %23 = sub nsw i64 %22, %18
  %24 = xor i64 %18, -1
  %25 = add nsw i64 %24, %22
  %26 = and i64 %23, 3
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %16, %28
  %29 = phi i64 [ %36, %28 ], [ %18, %16 ]
  %30 = phi i64* [ %37, %28 ], [ %15, %16 ]
  %31 = phi i64 [ %38, %28 ], [ %26, %16 ]
  %32 = getelementptr inbounds i64, i64* %30, i64 %29
  %33 = load i64, i64* %32, align 8
  %34 = sub nuw nsw i64 %29, %19
  %35 = getelementptr inbounds i64, i64* %30, i64 %34
  store i64 %33, i64* %35, align 8
  %36 = add nuw nsw i64 %29, 1
  %37 = load i64*, i64** %14, align 8
  %38 = add i64 %31, -1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %28, !llvm.loop !2

40:                                               ; preds = %28, %16
  %41 = phi i64* [ undef, %16 ], [ %37, %28 ]
  %42 = phi i64 [ %18, %16 ], [ %36, %28 ]
  %43 = phi i64* [ %15, %16 ], [ %37, %28 ]
  %44 = icmp ult i64 %25, 3
  br i1 %44, label %45, label %63

45:                                               ; preds = %40, %63, %10
  %46 = phi i64* [ %15, %10 ], [ %41, %40 ], [ %89, %63 ]
  %47 = sub nsw i32 %8, %11
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i64, i64* %46, i64 %48
  %50 = sext i32 %8 to i64
  %51 = getelementptr inbounds i64, i64* %46, i64 %50
  %52 = ptrtoint i64* %51 to i64
  %53 = ptrtoint i64* %49 to i64
  %54 = sub i64 %52, %53
  %55 = icmp sgt i64 %54, 0
  br i1 %55, label %56, label %91

56:                                               ; preds = %45
  %57 = bitcast i64* %49 to i8*
  %58 = and i64 %54, -8
  %59 = icmp ult i64 %54, 8
  %60 = sext i1 %59 to i64
  %61 = shl nsw i64 %60, 3
  %62 = sub i64 %58, %61
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 %62, i1 false)
  br label %91

63:                                               ; preds = %40, %63
  %64 = phi i64 [ %88, %63 ], [ %42, %40 ]
  %65 = phi i64* [ %89, %63 ], [ %43, %40 ]
  %66 = getelementptr inbounds i64, i64* %65, i64 %64
  %67 = load i64, i64* %66, align 8
  %68 = sub nuw nsw i64 %64, %19
  %69 = getelementptr inbounds i64, i64* %65, i64 %68
  store i64 %67, i64* %69, align 8
  %70 = add nuw nsw i64 %64, 1
  %71 = load i64*, i64** %14, align 8
  %72 = getelementptr inbounds i64, i64* %71, i64 %70
  %73 = load i64, i64* %72, align 8
  %74 = sub nuw nsw i64 %70, %19
  %75 = getelementptr inbounds i64, i64* %71, i64 %74
  store i64 %73, i64* %75, align 8
  %76 = add nuw nsw i64 %64, 2
  %77 = load i64*, i64** %14, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 %76
  %79 = load i64, i64* %78, align 8
  %80 = sub nuw nsw i64 %76, %19
  %81 = getelementptr inbounds i64, i64* %77, i64 %80
  store i64 %79, i64* %81, align 8
  %82 = add nuw nsw i64 %64, 3
  %83 = load i64*, i64** %14, align 8
  %84 = getelementptr inbounds i64, i64* %83, i64 %82
  %85 = load i64, i64* %84, align 8
  %86 = sub nuw nsw i64 %82, %19
  %87 = getelementptr inbounds i64, i64* %83, i64 %86
  store i64 %85, i64* %87, align 8
  %88 = add nuw nsw i64 %64, 4
  %89 = load i64*, i64** %14, align 8
  %90 = icmp eq i64 %88, %22
  br i1 %90, label %45, label %63

91:                                               ; preds = %45, %56
  %92 = srem i32 %1, 64
  %93 = icmp sgt i32 %4, 0
  br i1 %93, label %94, label %127

94:                                               ; preds = %6, %91
  %95 = phi i32 [ %92, %91 ], [ %1, %6 ]
  %96 = zext i32 %95 to i64
  %97 = shl nsw i64 -1, %96
  %98 = xor i64 %97, -1
  %99 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %100 = bitcast %union.anon* %99 to i64**
  %101 = sub nsw i32 64, %95
  %102 = zext i32 %101 to i64
  %103 = sext i32 %8 to i64
  br label %104

104:                                              ; preds = %94, %104
  %105 = phi i64 [ %103, %94 ], [ %107, %104 ]
  %106 = phi i64 [ 0, %94 ], [ %111, %104 ]
  %107 = add nsw i64 %105, -1
  %108 = load i64*, i64** %100, align 8
  %109 = getelementptr inbounds i64, i64* %108, i64 %107
  %110 = load i64, i64* %109, align 8
  %111 = and i64 %110, %98
  %112 = lshr i64 %110, %96
  store i64 %112, i64* %109, align 8
  %113 = shl i64 %106, %102
  %114 = load i64*, i64** %100, align 8
  %115 = getelementptr inbounds i64, i64* %114, i64 %107
  %116 = load i64, i64* %115, align 8
  %117 = or i64 %116, %113
  store i64 %117, i64* %115, align 8
  %118 = icmp sgt i64 %107, 0
  br i1 %118, label %104, label %127

119:                                              ; preds = %2
  %120 = icmp slt i32 %1, 64
  %121 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  br i1 %120, label %122, label %126

122:                                              ; preds = %119
  %123 = load i64, i64* %121, align 8
  %124 = zext i32 %1 to i64
  %125 = lshr i64 %123, %124
  store i64 %125, i64* %121, align 8
  br label %127

126:                                              ; preds = %119
  store i64 0, i64* %121, align 8
  br label %127

127:                                              ; preds = %104, %91, %122, %126
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK10openscreen19YetAnotherBitVector12FindFirstSetEv(%"class.openscreen::YetAnotherBitVector"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 64
  br i1 %4, label %5, label %26

5:                                                ; preds = %1
  %6 = add nuw nsw i32 %3, 63
  %7 = sdiv i32 %6, 64
  %8 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %9 = bitcast %union.anon* %8 to i64**
  %10 = load i64*, i64** %9, align 8
  %11 = sext i32 %7 to i64
  br label %12

12:                                               ; preds = %5, %17
  %13 = phi i64 [ 0, %5 ], [ %18, %17 ]
  %14 = getelementptr inbounds i64, i64* %10, i64 %13
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = add nuw nsw i64 %13, 1
  %19 = icmp slt i64 %18, %11
  br i1 %19, label %12, label %33

20:                                               ; preds = %12
  %21 = trunc i64 %13 to i32
  %22 = shl nsw i32 %21, 6
  %23 = tail call i64 @llvm.cttz.i64(i64 %15, i1 true), !range !4
  %24 = trunc i64 %23 to i32
  %25 = or i32 %22, %24
  br label %33

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = tail call i64 @llvm.cttz.i64(i64 %28, i1 true), !range !4
  %32 = trunc i64 %31 to i32
  br label %33

33:                                               ; preds = %17, %26, %20, %30
  %34 = phi i32 [ %25, %20 ], [ %32, %30 ], [ %3, %26 ], [ %3, %17 ]
  ret i32 %34
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #6

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK10openscreen19YetAnotherBitVector12CountBitsSetEii(%"class.openscreen::YetAnotherBitVector"* nocapture readonly, i32, i32) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 64
  br i1 %6, label %7, label %138

7:                                                ; preds = %3
  %8 = sdiv i32 %1, 64
  %9 = srem i32 %1, 64
  %10 = add nsw i32 %2, -1
  %11 = sdiv i32 %10, 64
  %12 = icmp eq i32 %8, %11
  br i1 %12, label %13, label %32

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %15 = bitcast %union.anon* %14 to i64**
  %16 = load i64*, i64** %15, align 8
  %17 = sext i32 %8 to i64
  %18 = getelementptr inbounds i64, i64* %16, i64 %17
  %19 = load i64, i64* %18, align 8
  %20 = srem i32 %1, 64
  %21 = sub nsw i32 %2, %1
  %22 = icmp sgt i32 %21, 63
  %23 = zext i32 %21 to i64
  %24 = shl nsw i64 -1, %23
  %25 = xor i64 %24, -1
  %26 = select i1 %22, i64 -1, i64 %25
  %27 = zext i32 %20 to i64
  %28 = shl i64 %26, %27
  %29 = and i64 %19, %28
  %30 = tail call i64 @llvm.ctpop.i64(i64 %29), !range !4
  %31 = trunc i64 %30 to i32
  br label %152

32:                                               ; preds = %7
  %33 = icmp slt i32 %8, %11
  br i1 %33, label %34, label %152

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1
  %36 = bitcast %union.anon* %35 to i64**
  %37 = load i64*, i64** %36, align 8
  %38 = sext i32 %8 to i64
  %39 = getelementptr inbounds i64, i64* %37, i64 %38
  %40 = load i64, i64* %39, align 8
  %41 = zext i32 %9 to i64
  %42 = shl i64 -1, %41
  %43 = and i64 %40, %42
  %44 = tail call i64 @llvm.ctpop.i64(i64 %43), !range !4
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i64, i64* %39, i64 1
  %47 = sext i32 %11 to i64
  %48 = getelementptr inbounds i64, i64* %37, i64 %47
  %49 = icmp eq i64* %46, %48
  %50 = load i64, i64* %46, align 8
  br i1 %49, label %124, label %51

51:                                               ; preds = %34
  %52 = shl nsw i64 %47, 3
  %53 = add nsw i64 %52, -16
  %54 = shl nsw i64 %38, 3
  %55 = sub nsw i64 %53, %54
  %56 = lshr exact i64 %55, 3
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 7
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %51, %60
  %61 = phi i64 [ %69, %60 ], [ %50, %51 ]
  %62 = phi i64* [ %68, %60 ], [ %46, %51 ]
  %63 = phi i32 [ %67, %60 ], [ %45, %51 ]
  %64 = phi i64 [ %70, %60 ], [ %58, %51 ]
  %65 = tail call i64 @llvm.ctpop.i64(i64 %61), !range !4
  %66 = trunc i64 %65 to i32
  %67 = add nuw nsw i32 %63, %66
  %68 = getelementptr inbounds i64, i64* %62, i64 1
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %64, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %60, !llvm.loop !5

72:                                               ; preds = %60, %51
  %73 = phi i32 [ undef, %51 ], [ %67, %60 ]
  %74 = phi i64 [ undef, %51 ], [ %69, %60 ]
  %75 = phi i64 [ %50, %51 ], [ %69, %60 ]
  %76 = phi i64* [ %46, %51 ], [ %68, %60 ]
  %77 = phi i32 [ %45, %51 ], [ %67, %60 ]
  %78 = icmp ult i64 %55, 56
  br i1 %78, label %124, label %79

79:                                               ; preds = %72, %79
  %80 = phi i64 [ %123, %79 ], [ %75, %72 ]
  %81 = phi i64* [ %121, %79 ], [ %76, %72 ]
  %82 = phi i32 [ %120, %79 ], [ %77, %72 ]
  %83 = tail call i64 @llvm.ctpop.i64(i64 %80), !range !4
  %84 = trunc i64 %83 to i32
  %85 = add nuw nsw i32 %82, %84
  %86 = getelementptr inbounds i64, i64* %81, i64 1
  %87 = load i64, i64* %86, align 8
  %88 = tail call i64 @llvm.ctpop.i64(i64 %87), !range !4
  %89 = trunc i64 %88 to i32
  %90 = add nuw nsw i32 %85, %89
  %91 = getelementptr inbounds i64, i64* %81, i64 2
  %92 = load i64, i64* %91, align 8
  %93 = tail call i64 @llvm.ctpop.i64(i64 %92), !range !4
  %94 = trunc i64 %93 to i32
  %95 = add nuw nsw i32 %90, %94
  %96 = getelementptr inbounds i64, i64* %81, i64 3
  %97 = load i64, i64* %96, align 8
  %98 = tail call i64 @llvm.ctpop.i64(i64 %97), !range !4
  %99 = trunc i64 %98 to i32
  %100 = add nuw nsw i32 %95, %99
  %101 = getelementptr inbounds i64, i64* %81, i64 4
  %102 = load i64, i64* %101, align 8
  %103 = tail call i64 @llvm.ctpop.i64(i64 %102), !range !4
  %104 = trunc i64 %103 to i32
  %105 = add nuw nsw i32 %100, %104
  %106 = getelementptr inbounds i64, i64* %81, i64 5
  %107 = load i64, i64* %106, align 8
  %108 = tail call i64 @llvm.ctpop.i64(i64 %107), !range !4
  %109 = trunc i64 %108 to i32
  %110 = add nuw nsw i32 %105, %109
  %111 = getelementptr inbounds i64, i64* %81, i64 6
  %112 = load i64, i64* %111, align 8
  %113 = tail call i64 @llvm.ctpop.i64(i64 %112), !range !4
  %114 = trunc i64 %113 to i32
  %115 = add nuw nsw i32 %110, %114
  %116 = getelementptr inbounds i64, i64* %81, i64 7
  %117 = load i64, i64* %116, align 8
  %118 = tail call i64 @llvm.ctpop.i64(i64 %117), !range !4
  %119 = trunc i64 %118 to i32
  %120 = add nuw nsw i32 %115, %119
  %121 = getelementptr inbounds i64, i64* %81, i64 8
  %122 = icmp eq i64* %121, %48
  %123 = load i64, i64* %121, align 8
  br i1 %122, label %124, label %79

124:                                              ; preds = %72, %79, %34
  %125 = phi i32 [ %45, %34 ], [ %73, %72 ], [ %120, %79 ]
  %126 = phi i64 [ %50, %34 ], [ %74, %72 ], [ %123, %79 ]
  %127 = shl nsw i32 %11, 6
  %128 = sub nsw i32 %2, %127
  %129 = icmp sgt i32 %128, 63
  %130 = zext i32 %128 to i64
  %131 = shl nsw i64 -1, %130
  %132 = xor i64 %131, -1
  %133 = select i1 %129, i64 -1, i64 %132
  %134 = and i64 %126, %133
  %135 = tail call i64 @llvm.ctpop.i64(i64 %134), !range !4
  %136 = trunc i64 %135 to i32
  %137 = add nuw nsw i32 %125, %136
  br label %152

138:                                              ; preds = %3
  %139 = getelementptr inbounds %"class.openscreen::YetAnotherBitVector", %"class.openscreen::YetAnotherBitVector"* %0, i64 0, i32 1, i32 0
  %140 = load i64, i64* %139, align 8
  %141 = sub nsw i32 %2, %1
  %142 = icmp sgt i32 %141, 63
  %143 = zext i32 %141 to i64
  %144 = shl nsw i64 -1, %143
  %145 = xor i64 %144, -1
  %146 = select i1 %142, i64 -1, i64 %145
  %147 = zext i32 %1 to i64
  %148 = shl i64 %146, %147
  %149 = and i64 %140, %148
  %150 = tail call i64 @llvm.ctpop.i64(i64 %149), !range !4
  %151 = trunc i64 %150 to i32
  br label %152

152:                                              ; preds = %13, %124, %32, %138
  %153 = phi i32 [ %151, %138 ], [ %31, %13 ], [ %137, %124 ], [ 0, %32 ]
  ret i32 %153
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i64 0, i64 65}
!5 = distinct !{!5, !3}
