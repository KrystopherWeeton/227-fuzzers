; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/levinson_durbin.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/levinson_durbin.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcSpl_LevinsonDurbin(i32* nocapture readonly, i16* nocapture, i16* nocapture, i64) local_unnamed_addr #0 {
  %5 = alloca [21 x i16], align 16
  %6 = alloca [21 x i16], align 16
  %7 = alloca [21 x i16], align 16
  %8 = alloca [21 x i16], align 16
  %9 = alloca [21 x i16], align 16
  %10 = alloca [21 x i16], align 16
  %11 = bitcast [21 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 42, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 42, i1 false)
  %12 = bitcast [21 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 42, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 42, i1 false)
  %13 = bitcast [21 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 42, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 42, i1 false)
  %14 = bitcast [21 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 42, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 42, i1 false)
  %15 = bitcast [21 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 42, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 42, i1 false)
  %16 = bitcast [21 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 42, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 42, i1 false)
  %17 = load i32, i32* %0, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %4
  %20 = ashr i32 %17, 31
  %21 = xor i32 %20, %17
  %22 = tail call i32 @llvm.ctlz.i32(i32 %21, i1 false) #4, !range !2
  %23 = add nsw i32 %22, -1
  br label %24

24:                                               ; preds = %4, %19
  %25 = phi i32 [ %23, %19 ], [ 0, %4 ]
  %26 = shl i32 %17, %25
  %27 = lshr i32 %26, 16
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds [21 x i16], [21 x i16]* %5, i64 0, i64 0
  store i16 %28, i16* %29, align 16
  %30 = lshr i32 %26, 1
  %31 = trunc i32 %30 to i16
  %32 = and i16 %31, 32767
  %33 = getelementptr inbounds [21 x i16], [21 x i16]* %6, i64 0, i64 0
  store i16 %32, i16* %33, align 16
  %34 = icmp eq i64 %3, 0
  br i1 %34, label %49, label %35

35:                                               ; preds = %24, %35
  %36 = phi i64 [ %47, %35 ], [ 1, %24 ]
  %37 = getelementptr inbounds i32, i32* %0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = shl i32 %38, %25
  %40 = lshr i32 %39, 16
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds [21 x i16], [21 x i16]* %5, i64 0, i64 %36
  store i16 %41, i16* %42, align 2
  %43 = lshr i32 %39, 1
  %44 = trunc i32 %43 to i16
  %45 = and i16 %44, 32767
  %46 = getelementptr inbounds [21 x i16], [21 x i16]* %6, i64 0, i64 %36
  store i16 %45, i16* %46, align 2
  %47 = add i64 %36, 1
  %48 = icmp ugt i64 %47, %3
  br i1 %48, label %49, label %35

49:                                               ; preds = %35, %24
  %50 = getelementptr inbounds i32, i32* %0, i64 1
  %51 = load i32, i32* %50, align 4
  %52 = shl i32 %51, %25
  %53 = icmp slt i32 %52, 0
  %54 = sub nsw i32 0, %52
  %55 = select i1 %53, i32 %54, i32 %52
  %56 = getelementptr inbounds [21 x i16], [21 x i16]* %5, i64 0, i64 0
  %57 = load i16, i16* %56, align 16
  %58 = getelementptr inbounds [21 x i16], [21 x i16]* %6, i64 0, i64 0
  %59 = load i16, i16* %58, align 16
  %60 = tail call i32 @WebRtcSpl_DivW32HiLow(i32 %55, i16 signext %57, i16 signext %59) #4
  %61 = icmp sgt i32 %52, 0
  %62 = sub nsw i32 0, %60
  %63 = select i1 %61, i32 %62, i32 %60
  %64 = lshr i32 %63, 16
  %65 = trunc i32 %64 to i16
  %66 = ashr i32 %63, 16
  %67 = lshr i32 %63, 1
  %68 = and i32 %67, 32767
  store i16 %65, i16* %2, align 2
  %69 = lshr i32 %63, 4
  %70 = ashr i32 %63, 20
  %71 = trunc i32 %70 to i16
  %72 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 1
  store i16 %71, i16* %72, align 2
  %73 = shl nsw i32 %70, 16
  %74 = sub nsw i32 %69, %73
  %75 = lshr i32 %74, 1
  %76 = trunc i32 %75 to i16
  %77 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 1
  store i16 %76, i16* %77, align 2
  %78 = mul nsw i32 %68, %66
  %79 = ashr i32 %78, 14
  %80 = mul nsw i32 %66, %66
  %81 = add nsw i32 %79, %80
  %82 = shl nsw i32 %81, 1
  %83 = icmp slt i32 %82, 0
  %84 = sub nsw i32 0, %82
  %85 = select i1 %83, i32 %84, i32 %82
  %86 = xor i32 %85, 2147483647
  %87 = lshr i32 %86, 16
  %88 = lshr i32 %86, 1
  %89 = and i32 %88, 32767
  %90 = sext i16 %57 to i32
  %91 = mul nsw i32 %87, %90
  %92 = mul nsw i32 %89, %90
  %93 = ashr i32 %92, 15
  %94 = sext i16 %59 to i32
  %95 = mul nsw i32 %87, %94
  %96 = ashr i32 %95, 15
  %97 = add i32 %96, %91
  %98 = add i32 %97, %93
  %99 = shl i32 %98, 1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %49
  %102 = ashr i32 %99, 31
  %103 = xor i32 %102, %99
  %104 = tail call i32 @llvm.ctlz.i32(i32 %103, i1 false) #4, !range !2
  %105 = trunc i32 %104 to i16
  %106 = add nsw i16 %105, -1
  br label %107

107:                                              ; preds = %49, %101
  %108 = phi i16 [ %106, %101 ], [ 0, %49 ]
  %109 = icmp ult i64 %3, 2
  br i1 %109, label %403, label %110

110:                                              ; preds = %107
  %111 = sext i16 %108 to i32
  %112 = shl i32 %99, %111
  br label %113

113:                                              ; preds = %110, %398
  %114 = phi i64 [ 0, %110 ], [ %402, %398 ]
  %115 = phi i32 [ %112, %110 ], [ %387, %398 ]
  %116 = phi i16 [ %108, %110 ], [ %399, %398 ]
  %117 = phi i64 [ 2, %110 ], [ %400, %398 ]
  %118 = add i64 %114, 1
  %119 = add i64 %114, 1
  %120 = lshr i32 %115, 16
  %121 = trunc i32 %120 to i16
  %122 = icmp ult i64 %118, 4
  br i1 %122, label %169, label %123

123:                                              ; preds = %113
  %124 = and i64 %118, -4
  %125 = or i64 %124, 1
  br label %126

126:                                              ; preds = %126, %123
  %127 = phi i64 [ 0, %123 ], [ %160, %126 ]
  %128 = phi <4 x i32> [ zeroinitializer, %123 ], [ %159, %126 ]
  %129 = or i64 %127, 1
  %130 = getelementptr inbounds [21 x i16], [21 x i16]* %5, i64 0, i64 %129
  %131 = bitcast i16* %130 to <4 x i16>*
  %132 = load <4 x i16>, <4 x i16>* %131, align 2
  %133 = sext <4 x i16> %132 to <4 x i32>
  %134 = sub i64 %117, %129
  %135 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %134
  %136 = getelementptr inbounds i16, i16* %135, i64 -3
  %137 = bitcast i16* %136 to <4 x i16>*
  %138 = load <4 x i16>, <4 x i16>* %137, align 2
  %139 = shufflevector <4 x i16> %138, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %140 = sext <4 x i16> %139 to <4 x i32>
  %141 = mul nsw <4 x i32> %140, %133
  %142 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %134
  %143 = getelementptr inbounds i16, i16* %142, i64 -3
  %144 = bitcast i16* %143 to <4 x i16>*
  %145 = load <4 x i16>, <4 x i16>* %144, align 2
  %146 = shufflevector <4 x i16> %145, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %147 = sext <4 x i16> %146 to <4 x i32>
  %148 = mul nsw <4 x i32> %147, %133
  %149 = ashr <4 x i32> %148, <i32 15, i32 15, i32 15, i32 15>
  %150 = getelementptr inbounds [21 x i16], [21 x i16]* %6, i64 0, i64 %129
  %151 = bitcast i16* %150 to <4 x i16>*
  %152 = load <4 x i16>, <4 x i16>* %151, align 2
  %153 = sext <4 x i16> %152 to <4 x i32>
  %154 = mul nsw <4 x i32> %153, %140
  %155 = ashr <4 x i32> %154, <i32 15, i32 15, i32 15, i32 15>
  %156 = add nsw <4 x i32> %149, %141
  %157 = add nsw <4 x i32> %156, %155
  %158 = shl <4 x i32> %157, <i32 1, i32 1, i32 1, i32 1>
  %159 = add nsw <4 x i32> %158, %128
  %160 = add i64 %127, 4
  %161 = icmp eq i64 %160, %124
  br i1 %161, label %162, label %126, !llvm.loop !3

162:                                              ; preds = %126
  %163 = shufflevector <4 x i32> %159, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %164 = add <4 x i32> %159, %163
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %166 = add <4 x i32> %164, %165
  %167 = extractelement <4 x i32> %166, i32 0
  %168 = icmp eq i64 %118, %124
  br i1 %168, label %199, label %169

169:                                              ; preds = %162, %113
  %170 = phi i32 [ 0, %113 ], [ %167, %162 ]
  %171 = phi i64 [ 1, %113 ], [ %125, %162 ]
  br label %172

172:                                              ; preds = %169, %172
  %173 = phi i32 [ %196, %172 ], [ %170, %169 ]
  %174 = phi i64 [ %197, %172 ], [ %171, %169 ]
  %175 = getelementptr inbounds [21 x i16], [21 x i16]* %5, i64 0, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = sext i16 %176 to i32
  %178 = sub i64 %117, %174
  %179 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = sext i16 %180 to i32
  %182 = mul nsw i32 %181, %177
  %183 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %178
  %184 = load i16, i16* %183, align 2
  %185 = sext i16 %184 to i32
  %186 = mul nsw i32 %185, %177
  %187 = ashr i32 %186, 15
  %188 = getelementptr inbounds [21 x i16], [21 x i16]* %6, i64 0, i64 %174
  %189 = load i16, i16* %188, align 2
  %190 = sext i16 %189 to i32
  %191 = mul nsw i32 %190, %181
  %192 = ashr i32 %191, 15
  %193 = add nsw i32 %187, %182
  %194 = add nsw i32 %193, %192
  %195 = shl i32 %194, 1
  %196 = add nsw i32 %195, %173
  %197 = add nuw i64 %174, 1
  %198 = icmp eq i64 %197, %117
  br i1 %198, label %199, label %172, !llvm.loop !5

199:                                              ; preds = %172, %162
  %200 = phi i32 [ %167, %162 ], [ %196, %172 ]
  %201 = lshr i32 %115, 1
  %202 = trunc i32 %201 to i16
  %203 = and i16 %202, 32767
  %204 = shl nsw i32 %200, 4
  %205 = getelementptr inbounds [21 x i16], [21 x i16]* %5, i64 0, i64 %117
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = shl nuw i32 %207, 16
  %209 = getelementptr inbounds [21 x i16], [21 x i16]* %6, i64 0, i64 %117
  %210 = load i16, i16* %209, align 2
  %211 = sext i16 %210 to i32
  %212 = shl nsw i32 %211, 1
  %213 = add i32 %208, %204
  %214 = add i32 %213, %212
  %215 = icmp slt i32 %214, 0
  %216 = sub nsw i32 0, %214
  %217 = select i1 %215, i32 %216, i32 %214
  %218 = tail call i32 @WebRtcSpl_DivW32HiLow(i32 %217, i16 signext %121, i16 signext %203) #4
  %219 = icmp sgt i32 %214, 0
  %220 = sub nsw i32 0, %218
  %221 = select i1 %219, i32 %220, i32 %218
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %229, label %223

223:                                              ; preds = %199
  %224 = ashr i32 %221, 31
  %225 = xor i32 %224, %221
  %226 = tail call i32 @llvm.ctlz.i32(i32 %225, i1 false) #4, !range !2
  %227 = trunc i32 %226 to i16
  %228 = add nsw i16 %227, -1
  br label %229

229:                                              ; preds = %199, %223
  %230 = phi i16 [ %228, %223 ], [ 0, %199 ]
  %231 = icmp sle i16 %116, %230
  %232 = or i1 %222, %231
  %233 = sext i16 %116 to i32
  %234 = shl i32 %221, %233
  %235 = icmp sgt i32 %221, 0
  %236 = select i1 %235, i32 2147483647, i32 -2147483648
  %237 = select i1 %232, i32 %234, i32 %236
  %238 = lshr i32 %237, 16
  %239 = trunc i32 %238 to i16
  %240 = ashr i32 %237, 16
  %241 = add i64 %117, -1
  %242 = getelementptr inbounds i16, i16* %2, i64 %241
  store i16 %239, i16* %242, align 2
  %243 = icmp slt i32 %240, 0
  %244 = sub nsw i32 0, %240
  %245 = select i1 %243, i32 %244, i32 %240
  %246 = icmp sgt i32 %245, 32750
  br i1 %246, label %423, label %247

247:                                              ; preds = %229
  %248 = lshr i32 %237, 1
  %249 = and i32 %248, 32767
  %250 = icmp ult i64 %119, 8
  br i1 %250, label %307, label %251

251:                                              ; preds = %247
  %252 = and i64 %119, -8
  %253 = or i64 %252, 1
  %254 = insertelement <8 x i32> undef, i32 %240, i32 0
  %255 = shufflevector <8 x i32> %254, <8 x i32> undef, <8 x i32> zeroinitializer
  %256 = insertelement <8 x i32> undef, i32 %249, i32 0
  %257 = shufflevector <8 x i32> %256, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %258

258:                                              ; preds = %258, %251
  %259 = phi i64 [ 0, %251 ], [ %303, %258 ]
  %260 = or i64 %259, 1
  %261 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %260
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2
  %264 = zext <8 x i16> %263 to <8 x i32>
  %265 = shl nuw <8 x i32> %264, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %266 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %260
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2
  %269 = sext <8 x i16> %268 to <8 x i32>
  %270 = shl nsw <8 x i32> %269, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %271 = add nsw <8 x i32> %270, %265
  %272 = sub i64 %117, %260
  %273 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %272
  %274 = getelementptr inbounds i16, i16* %273, i64 -7
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2
  %277 = shufflevector <8 x i16> %276, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %278 = sext <8 x i16> %277 to <8 x i32>
  %279 = mul nsw <8 x i32> %255, %278
  %280 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %272
  %281 = getelementptr inbounds i16, i16* %280, i64 -7
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2
  %284 = shufflevector <8 x i16> %283, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %285 = sext <8 x i16> %284 to <8 x i32>
  %286 = mul nsw <8 x i32> %255, %285
  %287 = ashr <8 x i32> %286, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %288 = mul nsw <8 x i32> %257, %278
  %289 = ashr <8 x i32> %288, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %290 = add <8 x i32> %289, %279
  %291 = add <8 x i32> %290, %287
  %292 = shl nsw <8 x i32> %291, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %293 = add nsw <8 x i32> %271, %292
  %294 = lshr <8 x i32> %293, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %295 = trunc <8 x i32> %294 to <8 x i16>
  %296 = getelementptr inbounds [21 x i16], [21 x i16]* %9, i64 0, i64 %260
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %297, align 2
  %298 = lshr exact <8 x i32> %293, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %299 = trunc <8 x i32> %298 to <8 x i16>
  %300 = and <8 x i16> %299, <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>
  %301 = getelementptr inbounds [21 x i16], [21 x i16]* %10, i64 0, i64 %260
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %302, align 2
  %303 = add i64 %259, 8
  %304 = icmp eq i64 %303, %252
  br i1 %304, label %305, label %258, !llvm.loop !7

305:                                              ; preds = %258
  %306 = icmp eq i64 %119, %252
  br i1 %306, label %345, label %307

307:                                              ; preds = %305, %247
  %308 = phi i64 [ 1, %247 ], [ %253, %305 ]
  br label %309

309:                                              ; preds = %307, %309
  %310 = phi i64 [ %343, %309 ], [ %308, %307 ]
  %311 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %310
  %312 = load i16, i16* %311, align 2
  %313 = zext i16 %312 to i32
  %314 = shl nuw i32 %313, 16
  %315 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %310
  %316 = load i16, i16* %315, align 2
  %317 = sext i16 %316 to i32
  %318 = shl nsw i32 %317, 1
  %319 = add nsw i32 %318, %314
  %320 = sub i64 %117, %310
  %321 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %320
  %322 = load i16, i16* %321, align 2
  %323 = sext i16 %322 to i32
  %324 = mul nsw i32 %240, %323
  %325 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %320
  %326 = load i16, i16* %325, align 2
  %327 = sext i16 %326 to i32
  %328 = mul nsw i32 %240, %327
  %329 = ashr i32 %328, 15
  %330 = mul nsw i32 %249, %323
  %331 = ashr i32 %330, 15
  %332 = add i32 %331, %324
  %333 = add i32 %332, %329
  %334 = shl nsw i32 %333, 1
  %335 = add nsw i32 %319, %334
  %336 = lshr i32 %335, 16
  %337 = trunc i32 %336 to i16
  %338 = getelementptr inbounds [21 x i16], [21 x i16]* %9, i64 0, i64 %310
  store i16 %337, i16* %338, align 2
  %339 = lshr exact i32 %335, 1
  %340 = trunc i32 %339 to i16
  %341 = and i16 %340, 32767
  %342 = getelementptr inbounds [21 x i16], [21 x i16]* %10, i64 0, i64 %310
  store i16 %341, i16* %342, align 2
  %343 = add nuw i64 %310, 1
  %344 = icmp eq i64 %343, %117
  br i1 %344, label %345, label %309, !llvm.loop !8

345:                                              ; preds = %309, %305
  %346 = lshr i32 %237, 4
  %347 = ashr i32 %237, 20
  %348 = trunc i32 %347 to i16
  %349 = getelementptr inbounds [21 x i16], [21 x i16]* %9, i64 0, i64 %117
  store i16 %348, i16* %349, align 2
  %350 = shl nsw i32 %347, 16
  %351 = sub nsw i32 %346, %350
  %352 = lshr i32 %351, 1
  %353 = trunc i32 %352 to i16
  %354 = getelementptr inbounds [21 x i16], [21 x i16]* %10, i64 0, i64 %117
  store i16 %353, i16* %354, align 2
  %355 = mul nsw i32 %240, %249
  %356 = ashr i32 %355, 14
  %357 = mul nsw i32 %240, %240
  %358 = add nsw i32 %356, %357
  %359 = shl nsw i32 %358, 1
  %360 = icmp slt i32 %359, 0
  %361 = sub nsw i32 0, %359
  %362 = select i1 %360, i32 %361, i32 %359
  %363 = xor i32 %362, 2147483647
  %364 = lshr i32 %363, 16
  %365 = lshr i32 %363, 1
  %366 = and i32 %365, 32767
  %367 = ashr i32 %115, 16
  %368 = mul nsw i32 %364, %367
  %369 = mul nsw i32 %366, %367
  %370 = ashr i32 %369, 15
  %371 = zext i16 %203 to i32
  %372 = mul nuw nsw i32 %364, %371
  %373 = lshr i32 %372, 15
  %374 = add i32 %373, %368
  %375 = add i32 %374, %370
  %376 = shl i32 %375, 1
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %384, label %378

378:                                              ; preds = %345
  %379 = ashr i32 %376, 31
  %380 = xor i32 %379, %376
  %381 = tail call i32 @llvm.ctlz.i32(i32 %380, i1 false) #4, !range !2
  %382 = trunc i32 %381 to i16
  %383 = add nsw i16 %382, -1
  br label %384

384:                                              ; preds = %345, %378
  %385 = phi i16 [ %383, %378 ], [ 0, %345 ]
  %386 = sext i16 %385 to i32
  %387 = shl i32 %376, %386
  br label %388

388:                                              ; preds = %384, %388
  %389 = phi i64 [ 1, %384 ], [ %396, %388 ]
  %390 = getelementptr inbounds [21 x i16], [21 x i16]* %9, i64 0, i64 %389
  %391 = load i16, i16* %390, align 2
  %392 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %389
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds [21 x i16], [21 x i16]* %10, i64 0, i64 %389
  %394 = load i16, i16* %393, align 2
  %395 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %389
  store i16 %394, i16* %395, align 2
  %396 = add i64 %389, 1
  %397 = icmp ugt i64 %396, %117
  br i1 %397, label %398, label %388

398:                                              ; preds = %388
  %399 = add i16 %385, %116
  %400 = add nuw i64 %117, 1
  %401 = icmp eq i64 %117, %3
  %402 = add i64 %114, 1
  br i1 %401, label %403, label %113

403:                                              ; preds = %398, %107
  store i16 4096, i16* %1, align 2
  %404 = icmp eq i64 %3, 0
  br i1 %404, label %423, label %405

405:                                              ; preds = %403, %405
  %406 = phi i64 [ %421, %405 ], [ 1, %403 ]
  %407 = getelementptr inbounds [21 x i16], [21 x i16]* %7, i64 0, i64 %406
  %408 = load i16, i16* %407, align 2
  %409 = zext i16 %408 to i32
  %410 = shl nuw i32 %409, 16
  %411 = getelementptr inbounds [21 x i16], [21 x i16]* %8, i64 0, i64 %406
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = shl nsw i32 %413, 1
  %415 = add nsw i32 %414, %410
  %416 = shl i32 %415, 1
  %417 = add nsw i32 %416, 32768
  %418 = lshr i32 %417, 16
  %419 = trunc i32 %418 to i16
  %420 = getelementptr inbounds i16, i16* %1, i64 %406
  store i16 %419, i16* %420, align 2
  %421 = add i64 %406, 1
  %422 = icmp ugt i64 %421, %3
  br i1 %422, label %423, label %405

423:                                              ; preds = %229, %405, %403
  %424 = phi i16 [ 1, %403 ], [ 1, %405 ], [ 0, %229 ]
  call void @llvm.lifetime.end.p0i8(i64 42, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 42, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 42, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 42, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 42, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 42, i8* nonnull %11) #4
  ret i16 %424
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @WebRtcSpl_DivW32HiLow(i32, i16 signext, i16 signext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
