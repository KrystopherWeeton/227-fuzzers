; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/highbd_adaptive_quantize_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/highbd_adaptive_quantize_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_quantize_b_adaptive_avx2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = load i16, i16* %8, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, 325
  %16 = add nsw i32 %15, 64
  %17 = ashr i32 %16, 7
  %18 = load i16, i16* %2, align 2
  %19 = sext i16 %18 to i32
  %20 = shl nsw i32 %19, 5
  %21 = add nsw i32 %20, -1
  %22 = add nsw i32 %21, %17
  %23 = getelementptr inbounds i16, i16* %8, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = mul nsw i32 %25, 325
  %27 = add nsw i32 %26, 64
  %28 = ashr i32 %27, 7
  %29 = getelementptr inbounds i16, i16* %2, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = shl nsw i32 %31, 5
  %33 = add nsw i32 %32, -1
  %34 = add nsw i32 %33, %28
  %35 = insertelement <8 x i32> undef, i32 %34, i32 0
  %36 = shufflevector <8 x i32> %35, <8 x i32> undef, <8 x i32> zeroinitializer
  %37 = insertelement <8 x i32> %36, i32 %22, i32 0
  %38 = bitcast i16* %2 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 16
  %40 = sext <8 x i16> %39 to <8 x i32>
  %41 = add <8 x i32> %40, <i32 undef, i32 undef, i32 -1, i32 -1, i32 undef, i32 undef, i32 -1, i32 -1>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = bitcast i16* %3 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 16
  %45 = sext <8 x i16> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <4 x i64>
  %47 = bitcast i16* %4 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 16
  %49 = sext <8 x i16> %48 to <8 x i32>
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = bitcast i16* %8 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 16
  %53 = sext <8 x i16> %52 to <8 x i32>
  %54 = bitcast <8 x i32> %53 to <4 x i64>
  %55 = bitcast i16* %5 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 16
  %57 = sext <8 x i16> %56 to <8 x i32>
  %58 = bitcast <8 x i32> %57 to <4 x i64>
  %59 = bitcast i32* %0 to <8 x i32>*
  %60 = load <8 x i32>, <8 x i32>* %59, align 32
  %61 = sub <8 x i32> zeroinitializer, %60
  %62 = icmp slt <8 x i32> %60, zeroinitializer
  %63 = select <8 x i1> %62, <8 x i32> %61, <8 x i32> %60
  %64 = getelementptr inbounds i32, i32* %0, i64 8
  %65 = bitcast i32* %64 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 32
  %67 = sub <8 x i32> zeroinitializer, %66
  %68 = icmp slt <8 x i32> %66, zeroinitializer
  %69 = select <8 x i1> %68, <8 x i32> %67, <8 x i32> %66
  %70 = shl <8 x i32> %63, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %71 = icmp sgt <8 x i32> %70, %37
  %72 = sext <8 x i1> %71 to <8 x i32>
  %73 = shl <8 x i32> %69, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %74 = icmp sgt <8 x i32> %73, %36
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %72, <8 x i32> %75) #3
  %77 = bitcast <16 x i16> %76 to <4 x i64>
  %78 = shufflevector <4 x i64> %77, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %79 = bitcast <4 x i64> %78 to <32 x i8>
  %80 = icmp slt <32 x i8> %79, zeroinitializer
  %81 = bitcast <32 x i1> %80 to i32
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %12
  %84 = bitcast i16* %11 to <4 x i64>*
  %85 = load <4 x i64>, <4 x i64>* %84, align 1
  %86 = and <4 x i64> %85, %78
  %87 = bitcast <4 x i64> %86 to <16 x i16>
  br label %88

88:                                               ; preds = %12, %83
  %89 = phi i32 [ 0, %12 ], [ 1, %83 ]
  %90 = phi <16 x i16> [ zeroinitializer, %12 ], [ %87, %83 ]
  %91 = icmp sgt <16 x i16> %90, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> zeroinitializer
  %93 = icmp sge <8 x i32> %63, %40
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = shufflevector <4 x i64> %42, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %96 = bitcast <4 x i64> %95 to <8 x i32>
  %97 = icmp sgt <8 x i32> %69, %96
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %94, <8 x i32> %98) #3
  %100 = bitcast <16 x i16> %99 to <4 x i64>
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %102 = bitcast <4 x i64> %101 to <32 x i8>
  %103 = icmp slt <32 x i8> %102, zeroinitializer
  %104 = bitcast <32 x i1> %103 to i32
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %113

106:                                              ; preds = %88
  %107 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %107, i8 0, i64 64, i1 false)
  %108 = shufflevector <4 x i64> %46, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %109 = shufflevector <4 x i64> %50, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %110 = shufflevector <4 x i64> %58, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %111 = shufflevector <4 x i64> %54, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %112 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %112, i8 0, i64 64, i1 false)
  br label %203

113:                                              ; preds = %88
  %114 = bitcast i16* %11 to <4 x i64>*
  %115 = load <4 x i64>, <4 x i64>* %114, align 1
  %116 = and <4 x i64> %115, %101
  %117 = bitcast <4 x i64> %116 to <16 x i16>
  %118 = icmp sgt <16 x i16> %117, zeroinitializer
  %119 = select <16 x i1> %118, <16 x i16> %117, <16 x i16> zeroinitializer
  %120 = bitcast <16 x i16> %119 to <4 x i64>
  %121 = add <8 x i32> %63, %45
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = shl <4 x i64> %122, <i64 32, i64 32, i64 32, i64 32>
  %124 = ashr exact <4 x i64> %123, <i64 32, i64 32, i64 32, i64 32>
  %125 = shl <4 x i64> %50, <i64 32, i64 32, i64 32, i64 32>
  %126 = ashr exact <4 x i64> %125, <i64 32, i64 32, i64 32, i64 32>
  %127 = mul nsw <4 x i64> %124, %126
  %128 = ashr <4 x i64> %122, <i64 32, i64 32, i64 32, i64 32>
  %129 = ashr <4 x i64> %50, <i64 32, i64 32, i64 32, i64 32>
  %130 = mul nsw <4 x i64> %128, %129
  %131 = lshr <4 x i64> %127, <i64 16, i64 16, i64 16, i64 16>
  %132 = lshr <4 x i64> %130, <i64 16, i64 16, i64 16, i64 16>
  %133 = shl <4 x i64> %132, <i64 32, i64 32, i64 32, i64 32>
  %134 = bitcast <4 x i64> %131 to <8 x i32>
  %135 = bitcast <4 x i64> %133 to <8 x i32>
  %136 = shufflevector <8 x i32> %134, <8 x i32> %135, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %137 = add <8 x i32> %136, %121
  %138 = bitcast <8 x i32> %137 to <4 x i64>
  %139 = shl <4 x i64> %138, <i64 32, i64 32, i64 32, i64 32>
  %140 = ashr exact <4 x i64> %139, <i64 32, i64 32, i64 32, i64 32>
  %141 = shl <4 x i64> %58, <i64 32, i64 32, i64 32, i64 32>
  %142 = ashr exact <4 x i64> %141, <i64 32, i64 32, i64 32, i64 32>
  %143 = mul nsw <4 x i64> %140, %142
  %144 = ashr <4 x i64> %138, <i64 32, i64 32, i64 32, i64 32>
  %145 = ashr <4 x i64> %58, <i64 32, i64 32, i64 32, i64 32>
  %146 = mul nsw <4 x i64> %144, %145
  %147 = lshr <4 x i64> %143, <i64 16, i64 16, i64 16, i64 16>
  %148 = lshr <4 x i64> %146, <i64 16, i64 16, i64 16, i64 16>
  %149 = shl <4 x i64> %148, <i64 32, i64 32, i64 32, i64 32>
  %150 = bitcast <4 x i64> %147 to <8 x i32>
  %151 = bitcast <4 x i64> %149 to <8 x i32>
  %152 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %153 = shufflevector <4 x i64> %46, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %154 = shufflevector <4 x i64> %50, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %155 = shufflevector <4 x i64> %58, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %156 = bitcast <4 x i64> %153 to <8 x i32>
  %157 = add <8 x i32> %69, %156
  %158 = bitcast <8 x i32> %157 to <4 x i64>
  %159 = shl <4 x i64> %158, <i64 32, i64 32, i64 32, i64 32>
  %160 = ashr exact <4 x i64> %159, <i64 32, i64 32, i64 32, i64 32>
  %161 = shl <4 x i64> %154, <i64 32, i64 32, i64 32, i64 32>
  %162 = ashr exact <4 x i64> %161, <i64 32, i64 32, i64 32, i64 32>
  %163 = mul nsw <4 x i64> %160, %162
  %164 = ashr <4 x i64> %158, <i64 32, i64 32, i64 32, i64 32>
  %165 = ashr <4 x i64> %154, <i64 32, i64 32, i64 32, i64 32>
  %166 = mul nsw <4 x i64> %164, %165
  %167 = lshr <4 x i64> %163, <i64 16, i64 16, i64 16, i64 16>
  %168 = lshr <4 x i64> %166, <i64 16, i64 16, i64 16, i64 16>
  %169 = shl <4 x i64> %168, <i64 32, i64 32, i64 32, i64 32>
  %170 = bitcast <4 x i64> %167 to <8 x i32>
  %171 = bitcast <4 x i64> %169 to <8 x i32>
  %172 = shufflevector <8 x i32> %170, <8 x i32> %171, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %173 = add <8 x i32> %172, %157
  %174 = bitcast <8 x i32> %173 to <4 x i64>
  %175 = shl <4 x i64> %174, <i64 32, i64 32, i64 32, i64 32>
  %176 = ashr exact <4 x i64> %175, <i64 32, i64 32, i64 32, i64 32>
  %177 = shl <4 x i64> %155, <i64 32, i64 32, i64 32, i64 32>
  %178 = ashr exact <4 x i64> %177, <i64 32, i64 32, i64 32, i64 32>
  %179 = mul nsw <4 x i64> %176, %178
  %180 = ashr <4 x i64> %174, <i64 32, i64 32, i64 32, i64 32>
  %181 = ashr <4 x i64> %155, <i64 32, i64 32, i64 32, i64 32>
  %182 = mul nsw <4 x i64> %180, %181
  %183 = lshr <4 x i64> %179, <i64 16, i64 16, i64 16, i64 16>
  %184 = lshr <4 x i64> %182, <i64 16, i64 16, i64 16, i64 16>
  %185 = shl <4 x i64> %184, <i64 32, i64 32, i64 32, i64 32>
  %186 = bitcast <4 x i64> %183 to <8 x i32>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = shufflevector <8 x i32> %186, <8 x i32> %187, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %189 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %152, <8 x i32> %60) #3
  %190 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %188, <8 x i32> %66) #3
  %191 = and <8 x i32> %189, %94
  %192 = and <8 x i32> %190, %98
  %193 = bitcast i32* %6 to <8 x i32>*
  store <8 x i32> %191, <8 x i32>* %193, align 32
  %194 = getelementptr inbounds i32, i32* %6, i64 8
  %195 = bitcast i32* %194 to <8 x i32>*
  store <8 x i32> %192, <8 x i32>* %195, align 32
  %196 = mul <8 x i32> %191, %53
  %197 = shufflevector <4 x i64> %54, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %198 = bitcast <4 x i64> %197 to <8 x i32>
  %199 = mul <8 x i32> %192, %198
  %200 = bitcast i32* %7 to <8 x i32>*
  store <8 x i32> %196, <8 x i32>* %200, align 32
  %201 = getelementptr inbounds i32, i32* %7, i64 8
  %202 = bitcast i32* %201 to <8 x i32>*
  store <8 x i32> %199, <8 x i32>* %202, align 32
  br label %203

203:                                              ; preds = %113, %106
  %204 = phi <16 x i16> [ zeroinitializer, %106 ], [ %119, %113 ]
  %205 = phi <4 x i64> [ zeroinitializer, %106 ], [ %120, %113 ]
  %206 = phi i32 [ 0, %106 ], [ 1, %113 ]
  %207 = phi <4 x i64> [ %108, %106 ], [ %153, %113 ]
  %208 = phi <4 x i64> [ %109, %106 ], [ %154, %113 ]
  %209 = phi <4 x i64> [ %111, %106 ], [ %197, %113 ]
  %210 = phi <4 x i64> [ %110, %106 ], [ %155, %113 ]
  %211 = icmp sgt i64 %1, 16
  br i1 %211, label %212, label %376

212:                                              ; preds = %203
  %213 = bitcast <4 x i64> %207 to <8 x i32>
  %214 = shl <4 x i64> %208, <i64 32, i64 32, i64 32, i64 32>
  %215 = ashr exact <4 x i64> %214, <i64 32, i64 32, i64 32, i64 32>
  %216 = ashr <4 x i64> %208, <i64 32, i64 32, i64 32, i64 32>
  %217 = shl <4 x i64> %210, <i64 32, i64 32, i64 32, i64 32>
  %218 = ashr exact <4 x i64> %217, <i64 32, i64 32, i64 32, i64 32>
  %219 = ashr <4 x i64> %210, <i64 32, i64 32, i64 32, i64 32>
  %220 = bitcast <4 x i64> %209 to <8 x i32>
  br label %221

221:                                              ; preds = %212, %295
  %222 = phi i64 [ 16, %212 ], [ %370, %295 ]
  %223 = phi i32 [ 16, %212 ], [ %369, %295 ]
  %224 = phi i32 [ %89, %212 ], [ %267, %295 ]
  %225 = phi <16 x i16> [ %204, %212 ], [ %302, %295 ]
  %226 = phi <16 x i16> [ %92, %212 ], [ %270, %295 ]
  %227 = phi i32 [ %206, %212 ], [ 1, %295 ]
  %228 = sext i32 %223 to i64
  br label %229

229:                                              ; preds = %221, %282
  %230 = phi i64 [ %228, %221 ], [ %293, %282 ]
  %231 = phi i64 [ %222, %221 ], [ %293, %282 ]
  %232 = phi i32 [ %224, %221 ], [ %267, %282 ]
  %233 = phi <16 x i16> [ %225, %221 ], [ %284, %282 ]
  %234 = phi <16 x i16> [ %226, %221 ], [ %270, %282 ]
  %235 = getelementptr inbounds i32, i32* %0, i64 %231
  %236 = bitcast i32* %235 to <8 x i32>*
  %237 = load <8 x i32>, <8 x i32>* %236, align 32
  %238 = sub <8 x i32> zeroinitializer, %237
  %239 = icmp slt <8 x i32> %237, zeroinitializer
  %240 = select <8 x i1> %239, <8 x i32> %238, <8 x i32> %237
  %241 = getelementptr inbounds i32, i32* %235, i64 8
  %242 = bitcast i32* %241 to <8 x i32>*
  %243 = load <8 x i32>, <8 x i32>* %242, align 32
  %244 = sub <8 x i32> zeroinitializer, %243
  %245 = icmp slt <8 x i32> %243, zeroinitializer
  %246 = select <8 x i1> %245, <8 x i32> %244, <8 x i32> %243
  %247 = getelementptr inbounds i16, i16* %11, i64 %231
  %248 = shl <8 x i32> %240, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %249 = icmp sgt <8 x i32> %248, %36
  %250 = sext <8 x i1> %249 to <8 x i32>
  %251 = shl <8 x i32> %246, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %252 = icmp sgt <8 x i32> %251, %36
  %253 = sext <8 x i1> %252 to <8 x i32>
  %254 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %250, <8 x i32> %253) #3
  %255 = bitcast <16 x i16> %254 to <4 x i64>
  %256 = shufflevector <4 x i64> %255, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %257 = bitcast <4 x i64> %256 to <32 x i8>
  %258 = icmp slt <32 x i8> %257, zeroinitializer
  %259 = bitcast <32 x i1> %258 to i32
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %266, label %261

261:                                              ; preds = %229
  %262 = bitcast i16* %247 to <4 x i64>*
  %263 = load <4 x i64>, <4 x i64>* %262, align 1
  %264 = and <4 x i64> %263, %256
  %265 = bitcast <4 x i64> %264 to <16 x i16>
  br label %266

266:                                              ; preds = %229, %261
  %267 = phi i32 [ %232, %229 ], [ 1, %261 ]
  %268 = phi <16 x i16> [ zeroinitializer, %229 ], [ %265, %261 ]
  %269 = icmp sgt <16 x i16> %268, %234
  %270 = select <16 x i1> %269, <16 x i16> %268, <16 x i16> %234
  %271 = icmp sgt <8 x i32> %240, %96
  %272 = sext <8 x i1> %271 to <8 x i32>
  %273 = icmp sgt <8 x i32> %246, %96
  %274 = sext <8 x i1> %273 to <8 x i32>
  %275 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %272, <8 x i32> %274) #3
  %276 = bitcast <16 x i16> %275 to <4 x i64>
  %277 = shufflevector <4 x i64> %276, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %278 = bitcast <4 x i64> %277 to <32 x i8>
  %279 = icmp slt <32 x i8> %278, zeroinitializer
  %280 = bitcast <32 x i1> %279 to i32
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %295

282:                                              ; preds = %266
  %283 = icmp sgt <16 x i16> %233, zeroinitializer
  %284 = select <16 x i1> %283, <16 x i16> %233, <16 x i16> zeroinitializer
  %285 = getelementptr inbounds i32, i32* %6, i64 %231
  %286 = bitcast i32* %285 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %286, align 32
  %287 = getelementptr inbounds i32, i32* %285, i64 8
  %288 = bitcast i32* %287 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %288, align 32
  %289 = getelementptr inbounds i32, i32* %7, i64 %231
  %290 = bitcast i32* %289 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %290, align 32
  %291 = getelementptr inbounds i32, i32* %289, i64 8
  %292 = bitcast i32* %291 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %292, align 32
  %293 = add i64 %230, 16
  %294 = icmp slt i64 %293, %1
  br i1 %294, label %229, label %374

295:                                              ; preds = %266
  %296 = trunc i64 %230 to i32
  %297 = bitcast i16* %247 to <4 x i64>*
  %298 = load <4 x i64>, <4 x i64>* %297, align 1
  %299 = and <4 x i64> %298, %277
  %300 = bitcast <4 x i64> %299 to <16 x i16>
  %301 = icmp slt <16 x i16> %233, %300
  %302 = select <16 x i1> %301, <16 x i16> %300, <16 x i16> %233
  %303 = add <8 x i32> %240, %213
  %304 = bitcast <8 x i32> %303 to <4 x i64>
  %305 = shl <4 x i64> %304, <i64 32, i64 32, i64 32, i64 32>
  %306 = ashr exact <4 x i64> %305, <i64 32, i64 32, i64 32, i64 32>
  %307 = mul nsw <4 x i64> %306, %215
  %308 = ashr <4 x i64> %304, <i64 32, i64 32, i64 32, i64 32>
  %309 = mul nsw <4 x i64> %308, %216
  %310 = lshr <4 x i64> %307, <i64 16, i64 16, i64 16, i64 16>
  %311 = lshr <4 x i64> %309, <i64 16, i64 16, i64 16, i64 16>
  %312 = shl <4 x i64> %311, <i64 32, i64 32, i64 32, i64 32>
  %313 = bitcast <4 x i64> %310 to <8 x i32>
  %314 = bitcast <4 x i64> %312 to <8 x i32>
  %315 = shufflevector <8 x i32> %313, <8 x i32> %314, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %316 = add <8 x i32> %315, %303
  %317 = bitcast <8 x i32> %316 to <4 x i64>
  %318 = shl <4 x i64> %317, <i64 32, i64 32, i64 32, i64 32>
  %319 = ashr exact <4 x i64> %318, <i64 32, i64 32, i64 32, i64 32>
  %320 = mul nsw <4 x i64> %319, %218
  %321 = ashr <4 x i64> %317, <i64 32, i64 32, i64 32, i64 32>
  %322 = mul nsw <4 x i64> %321, %219
  %323 = lshr <4 x i64> %320, <i64 16, i64 16, i64 16, i64 16>
  %324 = lshr <4 x i64> %322, <i64 16, i64 16, i64 16, i64 16>
  %325 = shl <4 x i64> %324, <i64 32, i64 32, i64 32, i64 32>
  %326 = bitcast <4 x i64> %323 to <8 x i32>
  %327 = bitcast <4 x i64> %325 to <8 x i32>
  %328 = shufflevector <8 x i32> %326, <8 x i32> %327, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %329 = add <8 x i32> %246, %213
  %330 = bitcast <8 x i32> %329 to <4 x i64>
  %331 = shl <4 x i64> %330, <i64 32, i64 32, i64 32, i64 32>
  %332 = ashr exact <4 x i64> %331, <i64 32, i64 32, i64 32, i64 32>
  %333 = mul nsw <4 x i64> %332, %215
  %334 = ashr <4 x i64> %330, <i64 32, i64 32, i64 32, i64 32>
  %335 = mul nsw <4 x i64> %334, %216
  %336 = lshr <4 x i64> %333, <i64 16, i64 16, i64 16, i64 16>
  %337 = lshr <4 x i64> %335, <i64 16, i64 16, i64 16, i64 16>
  %338 = shl <4 x i64> %337, <i64 32, i64 32, i64 32, i64 32>
  %339 = bitcast <4 x i64> %336 to <8 x i32>
  %340 = bitcast <4 x i64> %338 to <8 x i32>
  %341 = shufflevector <8 x i32> %339, <8 x i32> %340, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %342 = add <8 x i32> %341, %329
  %343 = bitcast <8 x i32> %342 to <4 x i64>
  %344 = shl <4 x i64> %343, <i64 32, i64 32, i64 32, i64 32>
  %345 = ashr exact <4 x i64> %344, <i64 32, i64 32, i64 32, i64 32>
  %346 = mul nsw <4 x i64> %345, %218
  %347 = ashr <4 x i64> %343, <i64 32, i64 32, i64 32, i64 32>
  %348 = mul nsw <4 x i64> %347, %219
  %349 = lshr <4 x i64> %346, <i64 16, i64 16, i64 16, i64 16>
  %350 = lshr <4 x i64> %348, <i64 16, i64 16, i64 16, i64 16>
  %351 = shl <4 x i64> %350, <i64 32, i64 32, i64 32, i64 32>
  %352 = bitcast <4 x i64> %349 to <8 x i32>
  %353 = bitcast <4 x i64> %351 to <8 x i32>
  %354 = shufflevector <8 x i32> %352, <8 x i32> %353, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %355 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %328, <8 x i32> %237) #3
  %356 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %354, <8 x i32> %243) #3
  %357 = and <8 x i32> %355, %272
  %358 = and <8 x i32> %356, %274
  %359 = getelementptr inbounds i32, i32* %6, i64 %231
  %360 = bitcast i32* %359 to <8 x i32>*
  store <8 x i32> %357, <8 x i32>* %360, align 32
  %361 = getelementptr inbounds i32, i32* %359, i64 8
  %362 = bitcast i32* %361 to <8 x i32>*
  store <8 x i32> %358, <8 x i32>* %362, align 32
  %363 = mul <8 x i32> %357, %220
  %364 = mul <8 x i32> %358, %220
  %365 = getelementptr inbounds i32, i32* %7, i64 %231
  %366 = bitcast i32* %365 to <8 x i32>*
  store <8 x i32> %363, <8 x i32>* %366, align 32
  %367 = getelementptr inbounds i32, i32* %365, i64 8
  %368 = bitcast i32* %367 to <8 x i32>*
  store <8 x i32> %364, <8 x i32>* %368, align 32
  %369 = add nsw i32 %296, 16
  %370 = sext i32 %369 to i64
  %371 = icmp slt i64 %370, %1
  br i1 %371, label %221, label %372

372:                                              ; preds = %295
  %373 = bitcast <16 x i16> %302 to <4 x i64>
  br label %376

374:                                              ; preds = %282
  %375 = bitcast <16 x i16> %284 to <4 x i64>
  br label %376

376:                                              ; preds = %203, %372, %374
  %377 = phi i32 [ %227, %374 ], [ 1, %372 ], [ %206, %203 ]
  %378 = phi <16 x i16> [ %270, %374 ], [ %270, %372 ], [ %92, %203 ]
  %379 = phi <4 x i64> [ %375, %374 ], [ %373, %372 ], [ %205, %203 ]
  %380 = phi i32 [ %267, %374 ], [ %267, %372 ], [ %89, %203 ]
  %381 = bitcast <16 x i16> %378 to <4 x i64>
  %382 = icmp eq i32 %380, 0
  br i1 %382, label %408, label %383

383:                                              ; preds = %376
  %384 = shufflevector <4 x i64> %381, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %385 = shufflevector <4 x i64> %381, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %386 = bitcast <2 x i64> %384 to <8 x i16>
  %387 = bitcast <2 x i64> %385 to <8 x i16>
  %388 = icmp sgt <8 x i16> %386, %387
  %389 = select <8 x i1> %388, <8 x i16> %386, <8 x i16> %387
  %390 = bitcast <8 x i16> %389 to <2 x i64>
  %391 = shufflevector <2 x i64> %390, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %392 = bitcast <2 x i64> %391 to <8 x i16>
  %393 = icmp slt <8 x i16> %389, %392
  %394 = select <8 x i1> %393, <8 x i16> %392, <8 x i16> %389
  %395 = bitcast <8 x i16> %394 to <4 x i32>
  %396 = shufflevector <4 x i32> %395, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %397 = bitcast <4 x i32> %396 to <8 x i16>
  %398 = icmp slt <8 x i16> %394, %397
  %399 = select <8 x i1> %398, <8 x i16> %397, <8 x i16> %394
  %400 = bitcast <8 x i16> %399 to <4 x i32>
  %401 = lshr <4 x i32> %400, <i32 16, i32 16, i32 16, i32 16>
  %402 = bitcast <4 x i32> %401 to <8 x i16>
  %403 = icmp sgt <8 x i16> %399, %402
  %404 = select <8 x i1> %403, <8 x i16> %399, <8 x i16> %402
  %405 = extractelement <8 x i16> %404, i64 0
  %406 = zext i16 %405 to i32
  %407 = add nuw nsw i32 %406, 1
  br label %408

408:                                              ; preds = %376, %383
  %409 = phi i32 [ %407, %383 ], [ 0, %376 ]
  %410 = icmp eq i32 %377, 0
  br i1 %410, label %435, label %411

411:                                              ; preds = %408
  %412 = shufflevector <4 x i64> %379, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %413 = shufflevector <4 x i64> %379, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %414 = bitcast <2 x i64> %412 to <8 x i16>
  %415 = bitcast <2 x i64> %413 to <8 x i16>
  %416 = icmp sgt <8 x i16> %414, %415
  %417 = select <8 x i1> %416, <8 x i16> %414, <8 x i16> %415
  %418 = bitcast <8 x i16> %417 to <2 x i64>
  %419 = shufflevector <2 x i64> %418, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %420 = bitcast <2 x i64> %419 to <8 x i16>
  %421 = icmp slt <8 x i16> %417, %420
  %422 = select <8 x i1> %421, <8 x i16> %420, <8 x i16> %417
  %423 = bitcast <8 x i16> %422 to <4 x i32>
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %425 = bitcast <4 x i32> %424 to <8 x i16>
  %426 = icmp slt <8 x i16> %422, %425
  %427 = select <8 x i1> %426, <8 x i16> %425, <8 x i16> %422
  %428 = bitcast <8 x i16> %427 to <4 x i32>
  %429 = lshr <4 x i32> %428, <i32 16, i32 16, i32 16, i32 16>
  %430 = bitcast <4 x i32> %429 to <8 x i16>
  %431 = icmp sgt <8 x i16> %427, %430
  %432 = select <8 x i1> %431, <8 x i16> %427, <8 x i16> %430
  %433 = extractelement <8 x i16> %432, i64 0
  %434 = zext i16 %433 to i32
  br label %435

435:                                              ; preds = %408, %411
  %436 = phi i32 [ %434, %411 ], [ -1, %408 ]
  %437 = icmp slt i32 %436, %409
  br i1 %437, label %441, label %438

438:                                              ; preds = %435
  %439 = sext i32 %436 to i64
  %440 = sext i32 %409 to i64
  br label %443

441:                                              ; preds = %443, %435
  %442 = zext i32 %409 to i64
  br label %452

443:                                              ; preds = %438, %443
  %444 = phi i64 [ %439, %438 ], [ %450, %443 ]
  %445 = getelementptr inbounds i16, i16* %10, i64 %444
  %446 = load i16, i16* %445, align 2
  %447 = sext i16 %446 to i64
  %448 = getelementptr inbounds i32, i32* %6, i64 %447
  store i32 0, i32* %448, align 4
  %449 = getelementptr inbounds i32, i32* %7, i64 %447
  store i32 0, i32* %449, align 4
  %450 = add nsw i64 %444, -1
  %451 = icmp sgt i64 %444, %440
  br i1 %451, label %443, label %441

452:                                              ; preds = %441, %456
  %453 = phi i64 [ %442, %441 ], [ %454, %456 ]
  %454 = add nsw i64 %453, -1
  %455 = icmp sgt i64 %453, 0
  br i1 %455, label %456, label %466

456:                                              ; preds = %452
  %457 = getelementptr inbounds i16, i16* %10, i64 %454
  %458 = load i16, i16* %457, align 2
  %459 = sext i16 %458 to i64
  %460 = getelementptr inbounds i32, i32* %6, i64 %459
  %461 = load i32, i32* %460, align 4
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %452, label %463

463:                                              ; preds = %456
  %464 = trunc i64 %454 to i16
  %465 = add i16 %464, 1
  br label %466

466:                                              ; preds = %452, %463
  %467 = phi i16 [ %465, %463 ], [ 0, %452 ]
  store i16 %467, i16* %9, align 2
  %468 = icmp sgt i32 %409, 0
  br i1 %468, label %469, label %483

469:                                              ; preds = %466, %469
  %470 = phi i64 [ %480, %469 ], [ 0, %466 ]
  %471 = phi i32 [ %479, %469 ], [ -1, %466 ]
  %472 = getelementptr inbounds i16, i16* %10, i64 %470
  %473 = load i16, i16* %472, align 2
  %474 = sext i16 %473 to i64
  %475 = getelementptr inbounds i32, i32* %6, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = icmp eq i32 %476, 0
  %478 = trunc i64 %470 to i32
  %479 = select i1 %477, i32 %471, i32 %478
  %480 = add nuw nsw i64 %470, 1
  %481 = icmp ult i64 %480, %442
  %482 = and i1 %477, %481
  br i1 %482, label %469, label %483

483:                                              ; preds = %469, %466
  %484 = phi i32 [ -1, %466 ], [ %479, %469 ]
  %485 = zext i16 %467 to i32
  %486 = add nsw i32 %485, -1
  %487 = icmp ne i16 %467, 0
  %488 = icmp eq i32 %484, %486
  %489 = and i1 %487, %488
  br i1 %489, label %490, label %520

490:                                              ; preds = %483
  %491 = sext i32 %484 to i64
  %492 = getelementptr inbounds i16, i16* %10, i64 %491
  %493 = load i16, i16* %492, align 2
  %494 = sext i16 %493 to i64
  %495 = getelementptr inbounds i32, i32* %6, i64 %494
  %496 = load i32, i32* %495, align 4
  switch i32 %496, label %520 [
    i32 1, label %497
    i32 -1, label %497
  ]

497:                                              ; preds = %490, %490
  %498 = getelementptr inbounds i32, i32* %0, i64 %494
  %499 = load i32, i32* %498, align 4
  %500 = shl nsw i32 %499, 5
  %501 = ashr i32 %499, 31
  %502 = xor i32 %500, %501
  %503 = sub nsw i32 %502, %501
  %504 = icmp ne i16 %493, 0
  %505 = zext i1 %504 to i64
  %506 = getelementptr inbounds i16, i16* %8, i64 %505
  %507 = load i16, i16* %506, align 2
  %508 = sext i16 %507 to i32
  %509 = mul nsw i32 %508, 525
  %510 = add nsw i32 %509, 64
  %511 = ashr i32 %510, 7
  %512 = getelementptr inbounds i16, i16* %2, i64 %505
  %513 = load i16, i16* %512, align 2
  %514 = sext i16 %513 to i32
  %515 = shl nsw i32 %514, 5
  %516 = add nsw i32 %511, %515
  %517 = icmp slt i32 %503, %516
  br i1 %517, label %518, label %520

518:                                              ; preds = %497
  store i32 0, i32* %495, align 4
  %519 = getelementptr inbounds i32, i32* %7, i64 %494
  store i32 0, i32* %519, align 4
  store i16 0, i16* %9, align 2
  br label %520

520:                                              ; preds = %490, %518, %497, %483
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_quantize_b_32x32_adaptive_avx2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = alloca [2 x i32], align 4
  %14 = bitcast [2 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #3
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %17 = load i16, i16* %2, align 2
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %18, 1
  %20 = ashr i32 %19, 1
  store i32 %20, i32* %15, align 4
  %21 = getelementptr inbounds i16, i16* %2, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = add nsw i32 %23, 1
  %25 = ashr i32 %24, 1
  store i32 %25, i32* %16, align 4
  %26 = load i16, i16* %8, align 2
  %27 = sext i16 %26 to i32
  %28 = mul nsw i32 %27, 325
  %29 = add nsw i32 %28, 64
  %30 = ashr i32 %29, 7
  %31 = shl nsw i32 %20, 5
  %32 = add nsw i32 %31, -1
  %33 = add nsw i32 %32, %30
  %34 = getelementptr inbounds i16, i16* %8, i64 1
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = mul nsw i32 %36, 325
  %38 = add nsw i32 %37, 64
  %39 = ashr i32 %38, 7
  %40 = shl nsw i32 %25, 5
  %41 = add nsw i32 %40, -1
  %42 = add nsw i32 %41, %39
  %43 = insertelement <8 x i32> undef, i32 %42, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  %45 = insertelement <8 x i32> %44, i32 %33, i32 0
  %46 = bitcast i16* %2 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 16
  %48 = sext <8 x i16> %47 to <8 x i32>
  %49 = bitcast i16* %3 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 16
  %51 = sext <8 x i16> %50 to <8 x i32>
  %52 = bitcast i16* %4 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 16
  %54 = sext <8 x i16> %53 to <8 x i32>
  %55 = bitcast <8 x i32> %54 to <4 x i64>
  %56 = bitcast i16* %8 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 16
  %58 = sext <8 x i16> %57 to <8 x i32>
  %59 = bitcast <8 x i32> %58 to <4 x i64>
  %60 = bitcast i16* %5 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 16
  %62 = sext <8 x i16> %61 to <8 x i32>
  %63 = bitcast <8 x i32> %62 to <4 x i64>
  %64 = add nsw <8 x i32> %48, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %65 = add nsw <8 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = lshr <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %67 = lshr <8 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = add <8 x i32> %66, <i32 undef, i32 undef, i32 undef, i32 undef, i32 -1, i32 -1, i32 -1, i32 -1>
  %70 = bitcast <8 x i32> %69 to <4 x i64>
  %71 = bitcast i32* %0 to <8 x i32>*
  %72 = load <8 x i32>, <8 x i32>* %71, align 32
  %73 = sub <8 x i32> zeroinitializer, %72
  %74 = icmp slt <8 x i32> %72, zeroinitializer
  %75 = select <8 x i1> %74, <8 x i32> %73, <8 x i32> %72
  %76 = getelementptr inbounds i32, i32* %0, i64 8
  %77 = bitcast i32* %76 to <8 x i32>*
  %78 = load <8 x i32>, <8 x i32>* %77, align 32
  %79 = sub <8 x i32> zeroinitializer, %78
  %80 = icmp slt <8 x i32> %78, zeroinitializer
  %81 = select <8 x i1> %80, <8 x i32> %79, <8 x i32> %78
  %82 = shl <8 x i32> %75, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %83 = icmp sgt <8 x i32> %82, %45
  %84 = sext <8 x i1> %83 to <8 x i32>
  %85 = shl <8 x i32> %81, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %86 = icmp sgt <8 x i32> %85, %44
  %87 = sext <8 x i1> %86 to <8 x i32>
  %88 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %84, <8 x i32> %87) #3
  %89 = bitcast <16 x i16> %88 to <4 x i64>
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %91 = bitcast <4 x i64> %90 to <32 x i8>
  %92 = icmp slt <32 x i8> %91, zeroinitializer
  %93 = bitcast <32 x i1> %92 to i32
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %100, label %95

95:                                               ; preds = %12
  %96 = bitcast i16* %11 to <4 x i64>*
  %97 = load <4 x i64>, <4 x i64>* %96, align 1
  %98 = and <4 x i64> %97, %90
  %99 = bitcast <4 x i64> %98 to <16 x i16>
  br label %100

100:                                              ; preds = %12, %95
  %101 = phi i32 [ 0, %12 ], [ 1, %95 ]
  %102 = phi <16 x i16> [ zeroinitializer, %12 ], [ %99, %95 ]
  %103 = icmp sgt <16 x i16> %102, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> zeroinitializer
  %105 = icmp sge <8 x i32> %75, %66
  %106 = sext <8 x i1> %105 to <8 x i32>
  %107 = shufflevector <4 x i64> %70, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %108 = bitcast <4 x i64> %107 to <8 x i32>
  %109 = icmp sgt <8 x i32> %81, %108
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %106, <8 x i32> %110) #3
  %112 = bitcast <16 x i16> %111 to <4 x i64>
  %113 = shufflevector <4 x i64> %112, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %114 = bitcast <4 x i64> %113 to <32 x i8>
  %115 = icmp slt <32 x i8> %114, zeroinitializer
  %116 = bitcast <32 x i1> %115 to i32
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %125

118:                                              ; preds = %100
  %119 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %119, i8 0, i64 64, i1 false)
  %120 = shufflevector <4 x i64> %68, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %121 = shufflevector <4 x i64> %55, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %122 = shufflevector <4 x i64> %63, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %123 = shufflevector <4 x i64> %59, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %124 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %124, i8 0, i64 64, i1 false)
  br label %250

125:                                              ; preds = %100
  %126 = bitcast i16* %11 to <4 x i64>*
  %127 = load <4 x i64>, <4 x i64>* %126, align 1
  %128 = and <4 x i64> %127, %113
  %129 = bitcast <4 x i64> %128 to <16 x i16>
  %130 = icmp sgt <16 x i16> %129, zeroinitializer
  %131 = select <16 x i1> %130, <16 x i16> %129, <16 x i16> zeroinitializer
  %132 = bitcast <16 x i16> %131 to <4 x i64>
  %133 = add nuw <8 x i32> %75, %67
  %134 = bitcast <8 x i32> %133 to <4 x i64>
  %135 = shl <4 x i64> %134, <i64 32, i64 32, i64 32, i64 32>
  %136 = ashr exact <4 x i64> %135, <i64 32, i64 32, i64 32, i64 32>
  %137 = shl <4 x i64> %55, <i64 32, i64 32, i64 32, i64 32>
  %138 = ashr exact <4 x i64> %137, <i64 32, i64 32, i64 32, i64 32>
  %139 = mul nsw <4 x i64> %136, %138
  %140 = ashr <4 x i64> %134, <i64 32, i64 32, i64 32, i64 32>
  %141 = ashr <4 x i64> %55, <i64 32, i64 32, i64 32, i64 32>
  %142 = mul nsw <4 x i64> %140, %141
  %143 = lshr <4 x i64> %139, <i64 16, i64 16, i64 16, i64 16>
  %144 = lshr <4 x i64> %142, <i64 16, i64 16, i64 16, i64 16>
  %145 = shl <4 x i64> %144, <i64 32, i64 32, i64 32, i64 32>
  %146 = bitcast <4 x i64> %143 to <8 x i32>
  %147 = bitcast <4 x i64> %145 to <8 x i32>
  %148 = shufflevector <8 x i32> %146, <8 x i32> %147, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %149 = add <8 x i32> %148, %133
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = shl <4 x i64> %150, <i64 32, i64 32, i64 32, i64 32>
  %152 = ashr exact <4 x i64> %151, <i64 32, i64 32, i64 32, i64 32>
  %153 = shl <4 x i64> %63, <i64 32, i64 32, i64 32, i64 32>
  %154 = ashr exact <4 x i64> %153, <i64 32, i64 32, i64 32, i64 32>
  %155 = mul nsw <4 x i64> %152, %154
  %156 = ashr <4 x i64> %150, <i64 32, i64 32, i64 32, i64 32>
  %157 = ashr <4 x i64> %63, <i64 32, i64 32, i64 32, i64 32>
  %158 = mul nsw <4 x i64> %156, %157
  %159 = lshr <4 x i64> %155, <i64 15, i64 15, i64 15, i64 15>
  %160 = lshr <4 x i64> %158, <i64 15, i64 15, i64 15, i64 15>
  %161 = shl <4 x i64> %160, <i64 32, i64 32, i64 32, i64 32>
  %162 = bitcast <4 x i64> %159 to <8 x i32>
  %163 = bitcast <4 x i64> %161 to <8 x i32>
  %164 = shufflevector <8 x i32> %162, <8 x i32> %163, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %165 = shufflevector <4 x i64> %68, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %166 = shufflevector <4 x i64> %55, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %167 = shufflevector <4 x i64> %63, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %168 = bitcast <4 x i64> %165 to <8 x i32>
  %169 = add <8 x i32> %81, %168
  %170 = bitcast <8 x i32> %169 to <4 x i64>
  %171 = shl <4 x i64> %170, <i64 32, i64 32, i64 32, i64 32>
  %172 = ashr exact <4 x i64> %171, <i64 32, i64 32, i64 32, i64 32>
  %173 = shl <4 x i64> %166, <i64 32, i64 32, i64 32, i64 32>
  %174 = ashr exact <4 x i64> %173, <i64 32, i64 32, i64 32, i64 32>
  %175 = mul nsw <4 x i64> %172, %174
  %176 = ashr <4 x i64> %170, <i64 32, i64 32, i64 32, i64 32>
  %177 = ashr <4 x i64> %166, <i64 32, i64 32, i64 32, i64 32>
  %178 = mul nsw <4 x i64> %176, %177
  %179 = lshr <4 x i64> %175, <i64 16, i64 16, i64 16, i64 16>
  %180 = lshr <4 x i64> %178, <i64 16, i64 16, i64 16, i64 16>
  %181 = shl <4 x i64> %180, <i64 32, i64 32, i64 32, i64 32>
  %182 = bitcast <4 x i64> %179 to <8 x i32>
  %183 = bitcast <4 x i64> %181 to <8 x i32>
  %184 = shufflevector <8 x i32> %182, <8 x i32> %183, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %185 = add <8 x i32> %184, %169
  %186 = bitcast <8 x i32> %185 to <4 x i64>
  %187 = shl <4 x i64> %186, <i64 32, i64 32, i64 32, i64 32>
  %188 = ashr exact <4 x i64> %187, <i64 32, i64 32, i64 32, i64 32>
  %189 = shl <4 x i64> %167, <i64 32, i64 32, i64 32, i64 32>
  %190 = ashr exact <4 x i64> %189, <i64 32, i64 32, i64 32, i64 32>
  %191 = mul nsw <4 x i64> %188, %190
  %192 = ashr <4 x i64> %186, <i64 32, i64 32, i64 32, i64 32>
  %193 = ashr <4 x i64> %167, <i64 32, i64 32, i64 32, i64 32>
  %194 = mul nsw <4 x i64> %192, %193
  %195 = lshr <4 x i64> %191, <i64 15, i64 15, i64 15, i64 15>
  %196 = lshr <4 x i64> %194, <i64 15, i64 15, i64 15, i64 15>
  %197 = shl <4 x i64> %196, <i64 32, i64 32, i64 32, i64 32>
  %198 = bitcast <4 x i64> %195 to <8 x i32>
  %199 = bitcast <4 x i64> %197 to <8 x i32>
  %200 = shufflevector <8 x i32> %198, <8 x i32> %199, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %201 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %164, <8 x i32> %72) #3
  %202 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %200, <8 x i32> %78) #3
  %203 = and <8 x i32> %201, %106
  %204 = and <8 x i32> %202, %110
  %205 = bitcast i32* %6 to <8 x i32>*
  store <8 x i32> %203, <8 x i32>* %205, align 32
  %206 = getelementptr inbounds i32, i32* %6, i64 8
  %207 = bitcast i32* %206 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %207, align 32
  %208 = sub <8 x i32> zeroinitializer, %203
  %209 = icmp slt <8 x i32> %203, zeroinitializer
  %210 = select <8 x i1> %209, <8 x i32> %208, <8 x i32> %203
  %211 = bitcast <8 x i32> %210 to <4 x i64>
  %212 = shl <4 x i64> %211, <i64 32, i64 32, i64 32, i64 32>
  %213 = ashr exact <4 x i64> %212, <i64 32, i64 32, i64 32, i64 32>
  %214 = shl <4 x i64> %59, <i64 32, i64 32, i64 32, i64 32>
  %215 = ashr exact <4 x i64> %214, <i64 32, i64 32, i64 32, i64 32>
  %216 = mul nsw <4 x i64> %213, %215
  %217 = ashr <4 x i64> %211, <i64 32, i64 32, i64 32, i64 32>
  %218 = ashr <4 x i64> %59, <i64 32, i64 32, i64 32, i64 32>
  %219 = mul nsw <4 x i64> %217, %218
  %220 = lshr <4 x i64> %216, <i64 1, i64 1, i64 1, i64 1>
  %221 = lshr <4 x i64> %219, <i64 1, i64 1, i64 1, i64 1>
  %222 = shl <4 x i64> %221, <i64 32, i64 32, i64 32, i64 32>
  %223 = bitcast <4 x i64> %220 to <8 x i32>
  %224 = bitcast <4 x i64> %222 to <8 x i32>
  %225 = shufflevector <8 x i32> %223, <8 x i32> %224, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %226 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %225, <8 x i32> %203) #3
  %227 = shufflevector <4 x i64> %59, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %228 = sub <8 x i32> zeroinitializer, %204
  %229 = icmp slt <8 x i32> %204, zeroinitializer
  %230 = select <8 x i1> %229, <8 x i32> %228, <8 x i32> %204
  %231 = bitcast <8 x i32> %230 to <4 x i64>
  %232 = shl <4 x i64> %231, <i64 32, i64 32, i64 32, i64 32>
  %233 = ashr exact <4 x i64> %232, <i64 32, i64 32, i64 32, i64 32>
  %234 = shl <4 x i64> %227, <i64 32, i64 32, i64 32, i64 32>
  %235 = ashr exact <4 x i64> %234, <i64 32, i64 32, i64 32, i64 32>
  %236 = mul nsw <4 x i64> %233, %235
  %237 = ashr <4 x i64> %231, <i64 32, i64 32, i64 32, i64 32>
  %238 = ashr <4 x i64> %227, <i64 32, i64 32, i64 32, i64 32>
  %239 = mul nsw <4 x i64> %237, %238
  %240 = lshr <4 x i64> %236, <i64 1, i64 1, i64 1, i64 1>
  %241 = lshr <4 x i64> %239, <i64 1, i64 1, i64 1, i64 1>
  %242 = shl <4 x i64> %241, <i64 32, i64 32, i64 32, i64 32>
  %243 = bitcast <4 x i64> %240 to <8 x i32>
  %244 = bitcast <4 x i64> %242 to <8 x i32>
  %245 = shufflevector <8 x i32> %243, <8 x i32> %244, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %246 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %245, <8 x i32> %204) #3
  %247 = bitcast i32* %7 to <8 x i32>*
  store <8 x i32> %226, <8 x i32>* %247, align 32
  %248 = getelementptr inbounds i32, i32* %7, i64 8
  %249 = bitcast i32* %248 to <8 x i32>*
  store <8 x i32> %246, <8 x i32>* %249, align 32
  br label %250

250:                                              ; preds = %125, %118
  %251 = phi <16 x i16> [ zeroinitializer, %118 ], [ %131, %125 ]
  %252 = phi <4 x i64> [ zeroinitializer, %118 ], [ %132, %125 ]
  %253 = phi i32 [ 0, %118 ], [ 1, %125 ]
  %254 = phi <4 x i64> [ %120, %118 ], [ %165, %125 ]
  %255 = phi <4 x i64> [ %121, %118 ], [ %166, %125 ]
  %256 = phi <4 x i64> [ %122, %118 ], [ %167, %125 ]
  %257 = phi <4 x i64> [ %123, %118 ], [ %227, %125 ]
  %258 = icmp sgt i64 %1, 16
  br i1 %258, label %259, label %455

259:                                              ; preds = %250
  %260 = bitcast <4 x i64> %254 to <8 x i32>
  %261 = shl <4 x i64> %255, <i64 32, i64 32, i64 32, i64 32>
  %262 = ashr exact <4 x i64> %261, <i64 32, i64 32, i64 32, i64 32>
  %263 = ashr <4 x i64> %255, <i64 32, i64 32, i64 32, i64 32>
  %264 = shl <4 x i64> %256, <i64 32, i64 32, i64 32, i64 32>
  %265 = ashr exact <4 x i64> %264, <i64 32, i64 32, i64 32, i64 32>
  %266 = ashr <4 x i64> %256, <i64 32, i64 32, i64 32, i64 32>
  %267 = shl <4 x i64> %257, <i64 32, i64 32, i64 32, i64 32>
  %268 = ashr exact <4 x i64> %267, <i64 32, i64 32, i64 32, i64 32>
  %269 = ashr <4 x i64> %257, <i64 32, i64 32, i64 32, i64 32>
  br label %270

270:                                              ; preds = %259, %344
  %271 = phi i64 [ 16, %259 ], [ %449, %344 ]
  %272 = phi i32 [ 16, %259 ], [ %448, %344 ]
  %273 = phi <16 x i16> [ %251, %259 ], [ %351, %344 ]
  %274 = phi <16 x i16> [ %104, %259 ], [ %319, %344 ]
  %275 = phi i32 [ %101, %259 ], [ %316, %344 ]
  %276 = phi i32 [ %253, %259 ], [ 1, %344 ]
  %277 = sext i32 %272 to i64
  br label %278

278:                                              ; preds = %270, %331
  %279 = phi i64 [ %277, %270 ], [ %342, %331 ]
  %280 = phi i64 [ %271, %270 ], [ %342, %331 ]
  %281 = phi <16 x i16> [ %273, %270 ], [ %333, %331 ]
  %282 = phi <16 x i16> [ %274, %270 ], [ %319, %331 ]
  %283 = phi i32 [ %275, %270 ], [ %316, %331 ]
  %284 = getelementptr inbounds i32, i32* %0, i64 %280
  %285 = bitcast i32* %284 to <8 x i32>*
  %286 = load <8 x i32>, <8 x i32>* %285, align 32
  %287 = sub <8 x i32> zeroinitializer, %286
  %288 = icmp slt <8 x i32> %286, zeroinitializer
  %289 = select <8 x i1> %288, <8 x i32> %287, <8 x i32> %286
  %290 = getelementptr inbounds i32, i32* %284, i64 8
  %291 = bitcast i32* %290 to <8 x i32>*
  %292 = load <8 x i32>, <8 x i32>* %291, align 32
  %293 = sub <8 x i32> zeroinitializer, %292
  %294 = icmp slt <8 x i32> %292, zeroinitializer
  %295 = select <8 x i1> %294, <8 x i32> %293, <8 x i32> %292
  %296 = getelementptr inbounds i16, i16* %11, i64 %280
  %297 = shl <8 x i32> %289, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %298 = icmp sgt <8 x i32> %297, %44
  %299 = sext <8 x i1> %298 to <8 x i32>
  %300 = shl <8 x i32> %295, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %301 = icmp sgt <8 x i32> %300, %44
  %302 = sext <8 x i1> %301 to <8 x i32>
  %303 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %299, <8 x i32> %302) #3
  %304 = bitcast <16 x i16> %303 to <4 x i64>
  %305 = shufflevector <4 x i64> %304, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %306 = bitcast <4 x i64> %305 to <32 x i8>
  %307 = icmp slt <32 x i8> %306, zeroinitializer
  %308 = bitcast <32 x i1> %307 to i32
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %315, label %310

310:                                              ; preds = %278
  %311 = bitcast i16* %296 to <4 x i64>*
  %312 = load <4 x i64>, <4 x i64>* %311, align 1
  %313 = and <4 x i64> %312, %305
  %314 = bitcast <4 x i64> %313 to <16 x i16>
  br label %315

315:                                              ; preds = %278, %310
  %316 = phi i32 [ %283, %278 ], [ 1, %310 ]
  %317 = phi <16 x i16> [ zeroinitializer, %278 ], [ %314, %310 ]
  %318 = icmp sgt <16 x i16> %317, %282
  %319 = select <16 x i1> %318, <16 x i16> %317, <16 x i16> %282
  %320 = icmp sgt <8 x i32> %289, %108
  %321 = sext <8 x i1> %320 to <8 x i32>
  %322 = icmp sgt <8 x i32> %295, %108
  %323 = sext <8 x i1> %322 to <8 x i32>
  %324 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %321, <8 x i32> %323) #3
  %325 = bitcast <16 x i16> %324 to <4 x i64>
  %326 = shufflevector <4 x i64> %325, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %327 = bitcast <4 x i64> %326 to <32 x i8>
  %328 = icmp slt <32 x i8> %327, zeroinitializer
  %329 = bitcast <32 x i1> %328 to i32
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %344

331:                                              ; preds = %315
  %332 = icmp sgt <16 x i16> %281, zeroinitializer
  %333 = select <16 x i1> %332, <16 x i16> %281, <16 x i16> zeroinitializer
  %334 = getelementptr inbounds i32, i32* %6, i64 %280
  %335 = bitcast i32* %334 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %335, align 32
  %336 = getelementptr inbounds i32, i32* %334, i64 8
  %337 = bitcast i32* %336 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %337, align 32
  %338 = getelementptr inbounds i32, i32* %7, i64 %280
  %339 = bitcast i32* %338 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %339, align 32
  %340 = getelementptr inbounds i32, i32* %338, i64 8
  %341 = bitcast i32* %340 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %341, align 32
  %342 = add i64 %279, 16
  %343 = icmp slt i64 %342, %1
  br i1 %343, label %278, label %453

344:                                              ; preds = %315
  %345 = trunc i64 %279 to i32
  %346 = bitcast i16* %296 to <4 x i64>*
  %347 = load <4 x i64>, <4 x i64>* %346, align 1
  %348 = and <4 x i64> %347, %326
  %349 = bitcast <4 x i64> %348 to <16 x i16>
  %350 = icmp slt <16 x i16> %281, %349
  %351 = select <16 x i1> %350, <16 x i16> %349, <16 x i16> %281
  %352 = add <8 x i32> %289, %260
  %353 = bitcast <8 x i32> %352 to <4 x i64>
  %354 = shl <4 x i64> %353, <i64 32, i64 32, i64 32, i64 32>
  %355 = ashr exact <4 x i64> %354, <i64 32, i64 32, i64 32, i64 32>
  %356 = mul nsw <4 x i64> %355, %262
  %357 = ashr <4 x i64> %353, <i64 32, i64 32, i64 32, i64 32>
  %358 = mul nsw <4 x i64> %357, %263
  %359 = lshr <4 x i64> %356, <i64 16, i64 16, i64 16, i64 16>
  %360 = lshr <4 x i64> %358, <i64 16, i64 16, i64 16, i64 16>
  %361 = shl <4 x i64> %360, <i64 32, i64 32, i64 32, i64 32>
  %362 = bitcast <4 x i64> %359 to <8 x i32>
  %363 = bitcast <4 x i64> %361 to <8 x i32>
  %364 = shufflevector <8 x i32> %362, <8 x i32> %363, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %365 = add <8 x i32> %364, %352
  %366 = bitcast <8 x i32> %365 to <4 x i64>
  %367 = shl <4 x i64> %366, <i64 32, i64 32, i64 32, i64 32>
  %368 = ashr exact <4 x i64> %367, <i64 32, i64 32, i64 32, i64 32>
  %369 = mul nsw <4 x i64> %368, %265
  %370 = ashr <4 x i64> %366, <i64 32, i64 32, i64 32, i64 32>
  %371 = mul nsw <4 x i64> %370, %266
  %372 = lshr <4 x i64> %369, <i64 15, i64 15, i64 15, i64 15>
  %373 = lshr <4 x i64> %371, <i64 15, i64 15, i64 15, i64 15>
  %374 = shl <4 x i64> %373, <i64 32, i64 32, i64 32, i64 32>
  %375 = bitcast <4 x i64> %372 to <8 x i32>
  %376 = bitcast <4 x i64> %374 to <8 x i32>
  %377 = shufflevector <8 x i32> %375, <8 x i32> %376, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %378 = add <8 x i32> %295, %260
  %379 = bitcast <8 x i32> %378 to <4 x i64>
  %380 = shl <4 x i64> %379, <i64 32, i64 32, i64 32, i64 32>
  %381 = ashr exact <4 x i64> %380, <i64 32, i64 32, i64 32, i64 32>
  %382 = mul nsw <4 x i64> %381, %262
  %383 = ashr <4 x i64> %379, <i64 32, i64 32, i64 32, i64 32>
  %384 = mul nsw <4 x i64> %383, %263
  %385 = lshr <4 x i64> %382, <i64 16, i64 16, i64 16, i64 16>
  %386 = lshr <4 x i64> %384, <i64 16, i64 16, i64 16, i64 16>
  %387 = shl <4 x i64> %386, <i64 32, i64 32, i64 32, i64 32>
  %388 = bitcast <4 x i64> %385 to <8 x i32>
  %389 = bitcast <4 x i64> %387 to <8 x i32>
  %390 = shufflevector <8 x i32> %388, <8 x i32> %389, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %391 = add <8 x i32> %390, %378
  %392 = bitcast <8 x i32> %391 to <4 x i64>
  %393 = shl <4 x i64> %392, <i64 32, i64 32, i64 32, i64 32>
  %394 = ashr exact <4 x i64> %393, <i64 32, i64 32, i64 32, i64 32>
  %395 = mul nsw <4 x i64> %394, %265
  %396 = ashr <4 x i64> %392, <i64 32, i64 32, i64 32, i64 32>
  %397 = mul nsw <4 x i64> %396, %266
  %398 = lshr <4 x i64> %395, <i64 15, i64 15, i64 15, i64 15>
  %399 = lshr <4 x i64> %397, <i64 15, i64 15, i64 15, i64 15>
  %400 = shl <4 x i64> %399, <i64 32, i64 32, i64 32, i64 32>
  %401 = bitcast <4 x i64> %398 to <8 x i32>
  %402 = bitcast <4 x i64> %400 to <8 x i32>
  %403 = shufflevector <8 x i32> %401, <8 x i32> %402, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %404 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %377, <8 x i32> %286) #3
  %405 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %403, <8 x i32> %292) #3
  %406 = and <8 x i32> %404, %321
  %407 = and <8 x i32> %405, %323
  %408 = getelementptr inbounds i32, i32* %6, i64 %280
  %409 = bitcast i32* %408 to <8 x i32>*
  store <8 x i32> %406, <8 x i32>* %409, align 32
  %410 = getelementptr inbounds i32, i32* %408, i64 8
  %411 = bitcast i32* %410 to <8 x i32>*
  store <8 x i32> %407, <8 x i32>* %411, align 32
  %412 = sub <8 x i32> zeroinitializer, %406
  %413 = icmp slt <8 x i32> %406, zeroinitializer
  %414 = select <8 x i1> %413, <8 x i32> %412, <8 x i32> %406
  %415 = bitcast <8 x i32> %414 to <4 x i64>
  %416 = shl <4 x i64> %415, <i64 32, i64 32, i64 32, i64 32>
  %417 = ashr exact <4 x i64> %416, <i64 32, i64 32, i64 32, i64 32>
  %418 = mul nsw <4 x i64> %417, %268
  %419 = ashr <4 x i64> %415, <i64 32, i64 32, i64 32, i64 32>
  %420 = mul nsw <4 x i64> %419, %269
  %421 = lshr <4 x i64> %418, <i64 1, i64 1, i64 1, i64 1>
  %422 = lshr <4 x i64> %420, <i64 1, i64 1, i64 1, i64 1>
  %423 = shl <4 x i64> %422, <i64 32, i64 32, i64 32, i64 32>
  %424 = bitcast <4 x i64> %421 to <8 x i32>
  %425 = bitcast <4 x i64> %423 to <8 x i32>
  %426 = shufflevector <8 x i32> %424, <8 x i32> %425, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %427 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %426, <8 x i32> %406) #3
  %428 = sub <8 x i32> zeroinitializer, %407
  %429 = icmp slt <8 x i32> %407, zeroinitializer
  %430 = select <8 x i1> %429, <8 x i32> %428, <8 x i32> %407
  %431 = bitcast <8 x i32> %430 to <4 x i64>
  %432 = shl <4 x i64> %431, <i64 32, i64 32, i64 32, i64 32>
  %433 = ashr exact <4 x i64> %432, <i64 32, i64 32, i64 32, i64 32>
  %434 = mul nsw <4 x i64> %433, %268
  %435 = ashr <4 x i64> %431, <i64 32, i64 32, i64 32, i64 32>
  %436 = mul nsw <4 x i64> %435, %269
  %437 = lshr <4 x i64> %434, <i64 1, i64 1, i64 1, i64 1>
  %438 = lshr <4 x i64> %436, <i64 1, i64 1, i64 1, i64 1>
  %439 = shl <4 x i64> %438, <i64 32, i64 32, i64 32, i64 32>
  %440 = bitcast <4 x i64> %437 to <8 x i32>
  %441 = bitcast <4 x i64> %439 to <8 x i32>
  %442 = shufflevector <8 x i32> %440, <8 x i32> %441, <8 x i32> <i32 0, i32 9, i32 2, i32 11, i32 4, i32 13, i32 6, i32 15>
  %443 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %442, <8 x i32> %407) #3
  %444 = getelementptr inbounds i32, i32* %7, i64 %280
  %445 = bitcast i32* %444 to <8 x i32>*
  store <8 x i32> %427, <8 x i32>* %445, align 32
  %446 = getelementptr inbounds i32, i32* %444, i64 8
  %447 = bitcast i32* %446 to <8 x i32>*
  store <8 x i32> %443, <8 x i32>* %447, align 32
  %448 = add nsw i32 %345, 16
  %449 = sext i32 %448 to i64
  %450 = icmp slt i64 %449, %1
  br i1 %450, label %270, label %451

451:                                              ; preds = %344
  %452 = bitcast <16 x i16> %351 to <4 x i64>
  br label %455

453:                                              ; preds = %331
  %454 = bitcast <16 x i16> %333 to <4 x i64>
  br label %455

455:                                              ; preds = %250, %451, %453
  %456 = phi i32 [ %276, %453 ], [ 1, %451 ], [ %253, %250 ]
  %457 = phi i32 [ %316, %453 ], [ %316, %451 ], [ %101, %250 ]
  %458 = phi <16 x i16> [ %319, %453 ], [ %319, %451 ], [ %104, %250 ]
  %459 = phi <4 x i64> [ %454, %453 ], [ %452, %451 ], [ %252, %250 ]
  %460 = bitcast <16 x i16> %458 to <4 x i64>
  %461 = icmp eq i32 %457, 0
  br i1 %461, label %487, label %462

462:                                              ; preds = %455
  %463 = shufflevector <4 x i64> %460, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %464 = shufflevector <4 x i64> %460, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %465 = bitcast <2 x i64> %463 to <8 x i16>
  %466 = bitcast <2 x i64> %464 to <8 x i16>
  %467 = icmp sgt <8 x i16> %465, %466
  %468 = select <8 x i1> %467, <8 x i16> %465, <8 x i16> %466
  %469 = bitcast <8 x i16> %468 to <2 x i64>
  %470 = shufflevector <2 x i64> %469, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %471 = bitcast <2 x i64> %470 to <8 x i16>
  %472 = icmp slt <8 x i16> %468, %471
  %473 = select <8 x i1> %472, <8 x i16> %471, <8 x i16> %468
  %474 = bitcast <8 x i16> %473 to <4 x i32>
  %475 = shufflevector <4 x i32> %474, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %476 = bitcast <4 x i32> %475 to <8 x i16>
  %477 = icmp slt <8 x i16> %473, %476
  %478 = select <8 x i1> %477, <8 x i16> %476, <8 x i16> %473
  %479 = bitcast <8 x i16> %478 to <4 x i32>
  %480 = lshr <4 x i32> %479, <i32 16, i32 16, i32 16, i32 16>
  %481 = bitcast <4 x i32> %480 to <8 x i16>
  %482 = icmp sgt <8 x i16> %478, %481
  %483 = select <8 x i1> %482, <8 x i16> %478, <8 x i16> %481
  %484 = extractelement <8 x i16> %483, i64 0
  %485 = zext i16 %484 to i32
  %486 = add nuw nsw i32 %485, 1
  br label %487

487:                                              ; preds = %455, %462
  %488 = phi i32 [ %486, %462 ], [ 0, %455 ]
  %489 = icmp eq i32 %456, 0
  br i1 %489, label %514, label %490

490:                                              ; preds = %487
  %491 = shufflevector <4 x i64> %459, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %492 = shufflevector <4 x i64> %459, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %493 = bitcast <2 x i64> %491 to <8 x i16>
  %494 = bitcast <2 x i64> %492 to <8 x i16>
  %495 = icmp sgt <8 x i16> %493, %494
  %496 = select <8 x i1> %495, <8 x i16> %493, <8 x i16> %494
  %497 = bitcast <8 x i16> %496 to <2 x i64>
  %498 = shufflevector <2 x i64> %497, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %499 = bitcast <2 x i64> %498 to <8 x i16>
  %500 = icmp slt <8 x i16> %496, %499
  %501 = select <8 x i1> %500, <8 x i16> %499, <8 x i16> %496
  %502 = bitcast <8 x i16> %501 to <4 x i32>
  %503 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %504 = bitcast <4 x i32> %503 to <8 x i16>
  %505 = icmp slt <8 x i16> %501, %504
  %506 = select <8 x i1> %505, <8 x i16> %504, <8 x i16> %501
  %507 = bitcast <8 x i16> %506 to <4 x i32>
  %508 = lshr <4 x i32> %507, <i32 16, i32 16, i32 16, i32 16>
  %509 = bitcast <4 x i32> %508 to <8 x i16>
  %510 = icmp sgt <8 x i16> %506, %509
  %511 = select <8 x i1> %510, <8 x i16> %506, <8 x i16> %509
  %512 = extractelement <8 x i16> %511, i64 0
  %513 = zext i16 %512 to i32
  br label %514

514:                                              ; preds = %487, %490
  %515 = phi i32 [ %513, %490 ], [ -1, %487 ]
  %516 = icmp slt i32 %515, %488
  br i1 %516, label %520, label %517

517:                                              ; preds = %514
  %518 = sext i32 %515 to i64
  %519 = sext i32 %488 to i64
  br label %522

520:                                              ; preds = %522, %514
  %521 = zext i32 %488 to i64
  br label %531

522:                                              ; preds = %517, %522
  %523 = phi i64 [ %518, %517 ], [ %529, %522 ]
  %524 = getelementptr inbounds i16, i16* %10, i64 %523
  %525 = load i16, i16* %524, align 2
  %526 = sext i16 %525 to i64
  %527 = getelementptr inbounds i32, i32* %6, i64 %526
  store i32 0, i32* %527, align 4
  %528 = getelementptr inbounds i32, i32* %7, i64 %526
  store i32 0, i32* %528, align 4
  %529 = add nsw i64 %523, -1
  %530 = icmp sgt i64 %523, %519
  br i1 %530, label %522, label %520

531:                                              ; preds = %520, %535
  %532 = phi i64 [ %521, %520 ], [ %533, %535 ]
  %533 = add nsw i64 %532, -1
  %534 = icmp sgt i64 %532, 0
  br i1 %534, label %535, label %545

535:                                              ; preds = %531
  %536 = getelementptr inbounds i16, i16* %10, i64 %533
  %537 = load i16, i16* %536, align 2
  %538 = sext i16 %537 to i64
  %539 = getelementptr inbounds i32, i32* %6, i64 %538
  %540 = load i32, i32* %539, align 4
  %541 = icmp eq i32 %540, 0
  br i1 %541, label %531, label %542

542:                                              ; preds = %535
  %543 = trunc i64 %533 to i16
  %544 = add i16 %543, 1
  br label %545

545:                                              ; preds = %531, %542
  %546 = phi i16 [ %544, %542 ], [ 0, %531 ]
  store i16 %546, i16* %9, align 2
  %547 = icmp sgt i32 %488, 0
  br i1 %547, label %548, label %562

548:                                              ; preds = %545, %548
  %549 = phi i64 [ %559, %548 ], [ 0, %545 ]
  %550 = phi i32 [ %558, %548 ], [ -1, %545 ]
  %551 = getelementptr inbounds i16, i16* %10, i64 %549
  %552 = load i16, i16* %551, align 2
  %553 = sext i16 %552 to i64
  %554 = getelementptr inbounds i32, i32* %6, i64 %553
  %555 = load i32, i32* %554, align 4
  %556 = icmp eq i32 %555, 0
  %557 = trunc i64 %549 to i32
  %558 = select i1 %556, i32 %550, i32 %557
  %559 = add nuw nsw i64 %549, 1
  %560 = icmp ult i64 %559, %521
  %561 = and i1 %556, %560
  br i1 %561, label %548, label %562

562:                                              ; preds = %548, %545
  %563 = phi i32 [ -1, %545 ], [ %558, %548 ]
  %564 = zext i16 %546 to i32
  %565 = add nsw i32 %564, -1
  %566 = icmp ne i16 %546, 0
  %567 = icmp eq i32 %563, %565
  %568 = and i1 %566, %567
  br i1 %568, label %569, label %598

569:                                              ; preds = %562
  %570 = sext i32 %563 to i64
  %571 = getelementptr inbounds i16, i16* %10, i64 %570
  %572 = load i16, i16* %571, align 2
  %573 = sext i16 %572 to i64
  %574 = getelementptr inbounds i32, i32* %6, i64 %573
  %575 = load i32, i32* %574, align 4
  switch i32 %575, label %598 [
    i32 1, label %576
    i32 -1, label %576
  ]

576:                                              ; preds = %569, %569
  %577 = getelementptr inbounds i32, i32* %0, i64 %573
  %578 = load i32, i32* %577, align 4
  %579 = shl nsw i32 %578, 5
  %580 = ashr i32 %578, 31
  %581 = xor i32 %579, %580
  %582 = sub nsw i32 %581, %580
  %583 = icmp ne i16 %572, 0
  %584 = zext i1 %583 to i64
  %585 = getelementptr inbounds i16, i16* %8, i64 %584
  %586 = load i16, i16* %585, align 2
  %587 = sext i16 %586 to i32
  %588 = mul nsw i32 %587, 525
  %589 = add nsw i32 %588, 64
  %590 = ashr i32 %589, 7
  %591 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %584
  %592 = load i32, i32* %591, align 4
  %593 = shl i32 %592, 5
  %594 = add nsw i32 %590, %593
  %595 = icmp slt i32 %582, %594
  br i1 %595, label %596, label %598

596:                                              ; preds = %576
  store i32 0, i32* %574, align 4
  %597 = getelementptr inbounds i32, i32* %7, i64 %573
  store i32 0, i32* %597, align 4
  store i16 0, i16* %9, align 2
  br label %598

598:                                              ; preds = %569, %596, %576, %562
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #3
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32>, <8 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
