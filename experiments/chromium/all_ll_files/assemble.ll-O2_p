; ModuleID = '../../third_party/nasm/asm/assemble.c'
source_filename = "../../third_party/nasm/asm/assemble.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.lfmt = type { void (i8*)*, void ()*, void (%struct.out_data*)*, void (i32, i32, i8*)*, void (i32, i64)*, void (i32)*, void (i32, i8*, ...)*, void (i64)* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type { i32, i32, [5 x i64], [5 x i16], i8*, i32 }
%struct.src_location = type { i8*, i32 }
%struct.iflag_t = type { [4 x i32] }
%struct.last_debug_info = type { %struct.src_location, i32 }
%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.src_location_stack = type { %struct.src_location, %struct.src_location_stack*, %struct.src_location_stack*, i8* }
%struct.optimization = type { i32, i32 }
%struct.insn = type { i8*, [7 x i32], i32, i32, i32, i32, [5 x %struct.operand], %struct.extop*, i32, i32, i8, i8, i32, i32, i32, i32, [3 x i8], i32, i32, i8 }
%struct.operand = type { i64, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i16 }
%struct.extop = type { %struct.extop*, %union.anon, i64, i32, i32 }
%union.anon = type { %struct.anon.0 }
%struct.anon.0 = type { i64, i32, i32, i8 }
%struct.ea = type { i32, i32, i32, i32, i8, i8, i8, i8, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.anon.1 = type { i64 }

@.str = private unnamed_addr constant [35 x i8] c"`incbin': unable to open file `%s'\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"`incbin': unable to get length of file `%s'\00", align 1
@lfmt = external local_unnamed_addr global %struct.lfmt*, align 8
@.str.2 = private unnamed_addr constant [38 x i8] c"`incbin': unable to seek on file `%s'\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"`incbin': unexpected EOF while reading file `%s'\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"`incbin': error while reading file `%s'\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"never implemented\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"obsolete\00", align 1
@insns_flags = external local_unnamed_addr constant [275 x %struct.iflag_t], align 16
@cpu = external local_unnamed_addr global %struct.iflag_t, align 4
@.str.7 = private unnamed_addr constant [13 x i8] c"but valid on\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"and is a noop on\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"and invalid on\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"and removed from\00", align 1
@.str.11 = private unnamed_addr constant [33 x i8] c"instruction %s %s the target CPU\00", align 1
@.str.12 = private unnamed_addr constant [38 x i8] c"../../third_party/nasm/asm/assemble.c\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"data.inslen >= 0\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"data.insoffs == data.inslen\00", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c"operation size not specified\00", align 1
@.str.16 = private unnamed_addr constant [26 x i8] c"mismatch in operand sizes\00", align 1
@.str.17 = private unnamed_addr constant [40 x i8] c"broadcast not permitted on this operand\00", align 1
@.str.18 = private unnamed_addr constant [48 x i8] c"mismatch in the number of broadcasting elements\00", align 1
@.str.19 = private unnamed_addr constant [35 x i8] c"mask not permitted on this operand\00", align 1
@.str.20 = private unnamed_addr constant [43 x i8] c"unsupported mode decorator for instruction\00", align 1
@.str.21 = private unnamed_addr constant [34 x i8] c"no instruction for this cpu level\00", align 1
@.str.22 = private unnamed_addr constant [41 x i8] c"instruction not supported in %d-bit mode\00", align 1
@.str.23 = private unnamed_addr constant [39 x i8] c"specific encoding scheme not available\00", align 1
@.str.24 = private unnamed_addr constant [26 x i8] c"bnd prefix is not allowed\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"%s prefix is not allowed\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"repne\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"repnz\00", align 1
@.str.28 = private unnamed_addr constant [26 x i8] c"invalid register set size\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"register set not valid for operand\00", align 1
@.str.30 = private unnamed_addr constant [43 x i8] c"invalid combination of opcode and operands\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"integer supplied as %d-bit data\00", align 1
@zero_buffer = external constant [65536 x i8], align 16
@out.dbg = internal unnamed_addr global %struct.last_debug_info zeroinitializer, align 8
@.str.32 = private unnamed_addr constant [16 x i8] c"data->size <= 8\00", align 1
@ofmt = external local_unnamed_addr global %struct.ofmt*, align 8
@dfmt = external local_unnamed_addr global %struct.dfmt*, align 8
@.str.33 = private unnamed_addr constant [57 x i8] c"%u-bit signed relocation unsupported by output format %s\00", align 1
@.str.34 = private unnamed_addr constant [48 x i8] c"%u-bit %s relocation zero-extended from %u bits\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"segment\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"unsigned\00", align 1
@.str.37 = private unnamed_addr constant [45 x i8] c"attempt to assemble code in [ABSOLUTE] space\00", align 1
@.str.38 = private unnamed_addr constant [23 x i8] c"%s data exceeds bounds\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"byte\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"word\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"dword\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"qword\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"tword\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"oword\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"yword\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"zword\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@_src_bottom = external local_unnamed_addr global %struct.src_location_stack*, align 8
@.str.48 = private unnamed_addr constant [26 x i8] c"EQU not preceded by label\00", align 1
@.str.49 = private unnamed_addr constant [19 x i8] c"bad syntax for EQU\00", align 1
@.str.50 = private unnamed_addr constant [28 x i8] c"invalid operand size prefix\00", align 1
@.str.51 = private unnamed_addr constant [54 x i8] c"attempt to reserve non-constant quantity of BSS space\00", align 1
@.str.52 = private unnamed_addr constant [57 x i8] c"forward reference in RESx can have unpredictable results\00", align 1
@nasm_regvals = external local_unnamed_addr constant [0 x i32], align 4
@.str.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.54 = private unnamed_addr constant [72 x i8] c"internal instruction table corrupt: instruction code \5C%o (0x%02X) given\00", align 1
@.str.55 = private unnamed_addr constant [38 x i8] c"instruction cannot use high registers\00", align 1
@.str.56 = private unnamed_addr constant [44 x i8] c"cannot use high register in AVX instruction\00", align 1
@.str.57 = private unnamed_addr constant [36 x i8] c"invalid operands in non-64-bit mode\00", align 1
@.str.58 = private unnamed_addr constant [40 x i8] c"invalid high-16 register in non-AVX-512\00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"cannot use high register in rex instruction\00", align 1
@.str.60 = private unnamed_addr constant [28 x i8] c"instruction is not lockable\00", align 1
@globalbnd = external local_unnamed_addr global i32, align 4
@.str.61 = private unnamed_addr constant [40 x i8] c"invalid operand passed to op_rexflags()\00", align 1
@nasm_reg_flags = external local_unnamed_addr constant [0 x i64], align 8
@.str.62 = private unnamed_addr constant [35 x i8] c"invalid operand passed to regval()\00", align 1
@.str.63 = private unnamed_addr constant [36 x i8] c"invalid operand passed to regflag()\00", align 1
@.str.64 = private unnamed_addr constant [26 x i8] c"invalid effective address\00", align 1
@.str.65 = private unnamed_addr constant [44 x i8] c"broadcast not allowed with register operand\00", align 1
@.str.66 = private unnamed_addr constant [70 x i8] c"embedded rounding is available only with register-register operations\00", align 1
@globalrel = external local_unnamed_addr global i32, align 4
@.str.67 = private unnamed_addr constant [41 x i8] c"absolute address can not be RIP-relative\00", align 1
@.str.68 = private unnamed_addr constant [46 x i8] c"RIP-relative addressing is prohibited for MIB\00", align 1
@.str.69 = private unnamed_addr constant [46 x i8] c"displacement size ignored on absolute address\00", align 1
@.str.70 = private unnamed_addr constant [18 x i8] c"invalid %s prefix\00", align 1
@bad_hle_warn.warn = internal unnamed_addr constant [2 x [4 x i32]] [[4 x i32] [i32 2, i32 2, i32 0, i32 1], [4 x i32] [i32 2, i32 0, i32 0, i32 1]], align 16
@.str.71 = private unnamed_addr constant [39 x i8] c"%s with this instruction requires lock\00", align 1
@.str.72 = private unnamed_addr constant [33 x i8] c"%s invalid with this instruction\00", align 1
@.str.73 = private unnamed_addr constant [62 x i8] c"cs segment base generated, but will be ignored in 64-bit mode\00", align 1
@.str.74 = private unnamed_addr constant [62 x i8] c"ds segment base generated, but will be ignored in 64-bit mode\00", align 1
@.str.75 = private unnamed_addr constant [62 x i8] c"es segment base generated, but will be ignored in 64-bit mode\00", align 1
@.str.76 = private unnamed_addr constant [62 x i8] c"ss segment base generated, but will be ignored in 64-bit mode\00", align 1
@.str.77 = private unnamed_addr constant [43 x i8] c"segr6 and segr7 cannot be used as prefixes\00", align 1
@.str.78 = private unnamed_addr constant [50 x i8] c"16-bit addressing is not supported in 64-bit mode\00", align 1
@.str.79 = private unnamed_addr constant [51 x i8] c"64-bit addressing is only supported in 64-bit mode\00", align 1
@.str.80 = private unnamed_addr constant [27 x i8] c"invalid instruction prefix\00", align 1
@.str.81 = private unnamed_addr constant [27 x i8] c"short jump is out of range\00", align 1
@.str.82 = private unnamed_addr constant [43 x i8] c"value referenced by FAR is not relocatable\00", align 1
@.str.83 = private unnamed_addr constant [53 x i8] c"non-absolute expression not permitted as argument %d\00", align 1
@.str.84 = private unnamed_addr constant [28 x i8] c"is4 argument exceeds bounds\00", align 1
@.str.85 = private unnamed_addr constant [38 x i8] c"signed dword immediate exceeds bounds\00", align 1
@.str.86 = private unnamed_addr constant [24 x i8] c"%s value exceeds bounds\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"signed byte\00", align 1
@.str.88 = private unnamed_addr constant [13 x i8] c"signed dword\00", align 1
@.str.89 = private unnamed_addr constant [34 x i8] c"non-constant BSS size in pass two\00", align 1
@.str.90 = private unnamed_addr constant [34 x i8] c"segment reference must be 16 bits\00", align 1
@.str.91 = private unnamed_addr constant [40 x i8] c"invalid use of self-relative expression\00", align 1
@.str.92 = private unnamed_addr constant [38 x i8] c"segment references cannot be relative\00", align 1
@get_cond_opcode.ccode_opcodes = internal unnamed_addr constant [30 x i8] c"\07\03\02\06\02\04\0F\0D\0C\0E\06\02\03\07\03\05\0E\0C\0D\0F\01\0B\09\05\00\0A\0A\0B\08\04", align 16
@nasm_instructions = external local_unnamed_addr constant [0 x %struct.itemplate*], align 8
@optimizing = external local_unnamed_addr global %struct.optimization, align 4
@.str.94 = private unnamed_addr constant [54 x i8] c"jmp short does not init bnd regs - bnd prefix dropped\00", align 1
@.str.95 = private unnamed_addr constant [40 x i8] c"impossible combination of address sizes\00", align 1
@switch.table.calcsize = private unnamed_addr constant [17 x i64] [i64 -1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 2, i64 4, i64 8, i64 10, i64 16, i64 32, i64 64], align 8
@switch.table.insn_size = private unnamed_addr constant [17 x i64] [i64 -1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 2, i64 4, i64 8, i64 10, i64 16, i64 32, i64 64], align 8
@switch.table.process_ea = private unnamed_addr constant [8 x i32] [i32 0, i32 64, i32 0, i32 128, i32 0, i32 0, i32 0, i32 192], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @assemble(i32, i64, i32, %struct.insn*) local_unnamed_addr #0 {
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca %struct.ea, align 4
  %22 = alloca %struct.out_data, align 8
  %23 = alloca %struct.itemplate*, align 8
  %24 = bitcast %struct.out_data* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %24) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 96, i1 false)
  %25 = bitcast %struct.itemplate** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #10
  store %struct.itemplate* inttoptr (i64 -6148914691236517206 to %struct.itemplate*), %struct.itemplate** %23, align 8
  %26 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, -1
  br i1 %28, label %1121, label %29

29:                                               ; preds = %4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 96, i1 false)
  %30 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 0
  store i64 %1, i64* %30, align 8
  %31 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 1
  store i32 %0, i32* %31, align 8
  %32 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 8
  store %struct.itemplate* null, %struct.itemplate** %32, align 8
  %33 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 6
  store i32 %2, i32* %33, align 4
  %34 = icmp ult i32 %27, 8
  br i1 %34, label %35, label %38

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 7
  %37 = load %struct.extop*, %struct.extop** %36, align 8
  call fastcc void @out_eops(%struct.out_data* nonnull %22, %struct.extop* %37)
  br label %1118

38:                                               ; preds = %29
  %39 = icmp eq i32 %27, 16
  br i1 %39, label %40, label %164

40:                                               ; preds = %38
  %41 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 7
  %42 = load %struct.extop*, %struct.extop** %41, align 8
  %43 = getelementptr inbounds %struct.extop, %struct.extop* %42, i64 0, i32 1
  %44 = bitcast %union.anon* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 9
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = icmp eq i32 %47, 0
  br i1 %49, label %163, label %50

50:                                               ; preds = %40
  %51 = tail call %struct._IO_FILE* @nasm_open_read(i8* %45, i32 4) #10
  %52 = icmp eq %struct._IO_FILE* %51, null
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* %45) #10
  br label %163

54:                                               ; preds = %50
  %55 = tail call i64 @nasm_file_size(%struct._IO_FILE* nonnull %51) #10
  %56 = icmp eq i64 %55, -1
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %45) #10
  br label %161

58:                                               ; preds = %54
  %59 = load %struct.extop*, %struct.extop** %41, align 8
  %60 = getelementptr inbounds %struct.extop, %struct.extop* %59, i64 0, i32 0
  %61 = load %struct.extop*, %struct.extop** %60, align 8
  %62 = icmp eq %struct.extop* %61, null
  br i1 %62, label %77, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.extop, %struct.extop* %61, i64 0, i32 1, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = icmp sgt i64 %55, %65
  br i1 %66, label %67, label %77

67:                                               ; preds = %63
  %68 = sub nsw i64 %55, %65
  %69 = getelementptr inbounds %struct.extop, %struct.extop* %61, i64 0, i32 0
  %70 = load %struct.extop*, %struct.extop** %69, align 8
  %71 = icmp eq %struct.extop* %70, null
  br i1 %71, label %77, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.extop, %struct.extop* %70, i64 0, i32 1, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = icmp sgt i64 %68, %74
  %76 = select i1 %75, i64 %74, i64 %68
  br label %77

77:                                               ; preds = %72, %63, %67, %58
  %78 = phi i64 [ %65, %67 ], [ 0, %58 ], [ %65, %63 ], [ %65, %72 ]
  %79 = phi i64 [ %68, %67 ], [ %55, %58 ], [ 0, %63 ], [ %76, %72 ]
  %80 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %81 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %80, i64 0, i32 7
  %82 = load void (i64)*, void (i64)** %81, align 8
  tail call void %82(i64 %1) #10
  %83 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %84 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %83, i64 0, i32 4
  %85 = load void (i32, i64)*, void (i32, i64)** %84, align 8
  tail call void %85(i32 3, i64 %79) #10
  %86 = icmp eq i64 %79, 0
  br i1 %86, label %135, label %87

87:                                               ; preds = %77
  %88 = tail call i8* @nasm_map_file(%struct._IO_FILE* nonnull %51, i64 %78, i64 %79) #10
  %89 = icmp ne i8* %88, null
  br i1 %89, label %94, label %90

90:                                               ; preds = %87
  %91 = icmp slt i64 %79, 1048576
  %92 = select i1 %91, i64 %79, i64 1048576
  %93 = tail call noalias i8* @nasm_malloc(i64 %92) #11
  br label %94

94:                                               ; preds = %87, %90
  %95 = phi i8* [ null, %87 ], [ %93, %90 ]
  %96 = phi i64 [ 0, %87 ], [ %92, %90 ]
  %97 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 5
  %98 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 4
  %99 = icmp sgt i64 %79, 0
  %100 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 2
  %101 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 9
  %102 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 7
  br label %103

103:                                              ; preds = %94, %132
  %104 = phi i64 [ %48, %94 ], [ %106, %132 ]
  %105 = phi i64 [ 0, %94 ], [ %133, %132 ]
  %106 = add i64 %104, -1
  store i32 0, i32* %97, align 8
  store i32 0, i32* %98, align 4
  br i1 %89, label %107, label %108

107:                                              ; preds = %103
  store i32 0, i32* %100, align 4
  store i8* %88, i8** %101, align 8
  store i64 %79, i64* %102, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %132

108:                                              ; preds = %103
  %109 = icmp eq i64 %105, %79
  br i1 %109, label %110, label %111

110:                                              ; preds = %108
  store i32 0, i32* %100, align 4
  store i8* %95, i8** %101, align 8
  store i64 %79, i64* %102, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %132

111:                                              ; preds = %108
  %112 = call i32 @fseeko64(%struct._IO_FILE* nonnull %51, i64 %78, i32 0)
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %118, label %114

114:                                              ; preds = %111
  %115 = call i32 @ferror(%struct._IO_FILE* nonnull %51) #10
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  br i1 %99, label %119, label %132

118:                                              ; preds = %114, %111
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i8* %45) #10
  br label %135

119:                                              ; preds = %117, %129
  %120 = phi i64 [ %130, %129 ], [ %79, %117 ]
  %121 = icmp slt i64 %120, %96
  %122 = select i1 %121, i64 %120, i64 %96
  %123 = call i64 @fread(i8* %95, i64 1, i64 %122, %struct._IO_FILE* nonnull %51)
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %119
  %126 = call i32 @feof(%struct._IO_FILE* nonnull %51) #10
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %129, label %128

128:                                              ; preds = %125, %119
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i8* %45) #10
  br label %135

129:                                              ; preds = %125
  store i32 0, i32* %100, align 4
  store i8* %95, i8** %101, align 8
  store i64 %123, i64* %102, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  %130 = sub i64 %120, %123
  %131 = icmp sgt i64 %130, 0
  br i1 %131, label %119, label %132

132:                                              ; preds = %129, %117, %110, %107
  %133 = phi i64 [ %105, %107 ], [ %79, %110 ], [ %105, %117 ], [ %123, %129 ]
  %134 = icmp eq i64 %106, 0
  br i1 %134, label %135, label %103

135:                                              ; preds = %132, %128, %118, %77
  %136 = phi i8* [ null, %77 ], [ null, %118 ], [ null, %128 ], [ %88, %132 ]
  %137 = phi i8* [ null, %77 ], [ %95, %118 ], [ %95, %128 ], [ %95, %132 ]
  %138 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %139 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %138, i64 0, i32 5
  %140 = load void (i32)*, void (i32)** %139, align 8
  call void %140(i32 3) #10
  %141 = load i32, i32* %46, align 4
  %142 = icmp sgt i32 %141, 1
  br i1 %142, label %143, label %151

143:                                              ; preds = %135
  %144 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %145 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %144, i64 0, i32 4
  %146 = load void (i32, i64)*, void (i32, i64)** %145, align 8
  %147 = sext i32 %141 to i64
  call void %146(i32 4, i64 %147) #10
  %148 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %149 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %148, i64 0, i32 5
  %150 = load void (i32)*, void (i32)** %149, align 8
  call void %150(i32 4) #10
  br label %151

151:                                              ; preds = %143, %135
  %152 = call i32 @ferror(%struct._IO_FILE* nonnull %51) #10
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %155, label %154

154:                                              ; preds = %151
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0), i8* %45) #10
  br label %155

155:                                              ; preds = %151, %154
  %156 = icmp eq i8* %137, null
  br i1 %156, label %158, label %157

157:                                              ; preds = %155
  call void @nasm_free(i8* nonnull %137) #10
  br label %158

158:                                              ; preds = %155, %157
  %159 = icmp eq i8* %136, null
  br i1 %159, label %161, label %160

160:                                              ; preds = %158
  call void @nasm_unmap_file(i8* nonnull %136, i64 %79) #10
  br label %161

161:                                              ; preds = %57, %158, %160
  %162 = call i32 @fclose(%struct._IO_FILE* nonnull %51)
  br label %163

163:                                              ; preds = %40, %161, %53
  store i32 1, i32* %46, align 4
  br label %1118

164:                                              ; preds = %38
  tail call fastcc void @add_asp(%struct.insn* %3, i32 %2)
  %165 = call fastcc i32 @find_match(%struct.itemplate** nonnull %23, %struct.insn* %3, i32 %0, i64 %1, i32 %2)
  switch i32 %165, label %1115 [
    i32 16, label %166
    i32 1, label %1098
    i32 2, label %1099
    i32 3, label %1100
    i32 4, label %1101
    i32 5, label %1102
    i32 6, label %1103
    i32 7, label %1104
    i32 8, label %1105
    i32 10, label %1106
    i32 11, label %1107
    i32 12, label %1108
    i32 13, label %1113
    i32 14, label %1114
  ]

166:                                              ; preds = %164
  %167 = load %struct.itemplate*, %struct.itemplate** %23, align 8
  %168 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %167, i64 0, i32 5
  %169 = load i32, i32* %168, align 8
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %170, i32 0, i64 2
  %172 = load i32, i32* %171, align 8
  %173 = and i32 %172, 8388608
  %174 = icmp eq i32 %173, 0
  %175 = ptrtoint %struct.itemplate* %167 to i64
  br i1 %174, label %195, label %176, !prof !2

176:                                              ; preds = %166
  %177 = and i32 %172, 16777216
  %178 = icmp ne i32 %177, 0
  %179 = select i1 %178, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0)
  br i1 %178, label %187, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %170, i32 0, i64 3
  %182 = load i32, i32* %181, align 4
  %183 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  %184 = xor i32 %183, %182
  %185 = and i32 %184, 131071
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %192, label %187

187:                                              ; preds = %180, %176
  %188 = and i32 %172, 33554432
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %192

190:                                              ; preds = %187
  %191 = select i1 %178, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0)
  br label %192

192:                                              ; preds = %187, %180, %190
  %193 = phi i32 [ 1310720, %190 ], [ 1376256, %180 ], [ 1245184, %187 ]
  %194 = phi i8* [ %191, %190 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), %180 ], [ getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), %187 ]
  tail call void (i32, i8*, ...) @nasm_warn(i32 %193, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0), i8* %179, i8* %194) #10
  br label %195

195:                                              ; preds = %166, %192
  %196 = bitcast %struct.itemplate** %32 to i64*
  store i64 %175, i64* %196, align 8
  store i32 %2, i32* %33, align 4
  %197 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 5
  store i32 0, i32* %197, align 8
  %198 = tail call fastcc i64 @calcsize(i32 %2, %struct.insn* %3, %struct.itemplate* %167)
  %199 = trunc i64 %198 to i32
  %200 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 4
  store i32 %199, i32* %200, align 4
  %201 = icmp slt i32 %199, 0
  br i1 %201, label %202, label %203, !prof !3

202:                                              ; preds = %195
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i32 885, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0)) #12
  unreachable

203:                                              ; preds = %195
  %204 = shl i64 %198, 32
  %205 = ashr exact i64 %204, 32
  %206 = load i32, i32* %26, align 4
  %207 = add i32 %206, 1
  %208 = icmp ult i32 %207, 17
  br i1 %208, label %209, label %227

209:                                              ; preds = %203
  %210 = lshr i32 130561, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %227, label %213

213:                                              ; preds = %209
  %214 = sext i32 %207 to i64
  %215 = getelementptr inbounds [17 x i64], [17 x i64]* @switch.table.insn_size, i64 0, i64 %214
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 8
  %218 = load i64, i64* %217, align 8
  %219 = mul nsw i64 %218, %216
  %220 = icmp eq i64 %219, %205
  br i1 %220, label %221, label %227

221:                                              ; preds = %213
  %222 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 9
  %223 = load i32, i32* %222, align 4
  %224 = sext i32 %223 to i64
  %225 = mul nsw i64 %218, %224
  store i64 %225, i64* %217, align 8
  %226 = mul nsw i64 %205, %224
  store i32 1, i32* %222, align 4
  br label %227

227:                                              ; preds = %209, %203, %213, %221
  %228 = phi i64 [ %226, %221 ], [ %205, %213 ], [ %205, %203 ], [ %205, %209 ]
  %229 = trunc i64 %228 to i32
  store i32 %229, i32* %200, align 4
  %230 = bitcast i32* %19 to [4 x i8]*
  %231 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %231) #10
  %232 = getelementptr inbounds [4 x i8], [4 x i8]* %230, i64 0, i64 1
  %233 = getelementptr inbounds [4 x i8], [4 x i8]* %230, i64 0, i64 2
  %234 = getelementptr inbounds [4 x i8], [4 x i8]* %230, i64 0, i64 3
  store i32 -1431655766, i32* %19, align 4
  %235 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %167, i64 0, i32 4
  %236 = load i8*, i8** %235, align 8
  %237 = bitcast i8** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %238 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 11
  store i8 0, i8* %238, align 1
  %239 = call fastcc i32 @emit_prefix(%struct.out_data* nonnull %22, i32 %2, %struct.insn* %3) #10
  %240 = load i8, i8* %236, align 1
  %241 = icmp eq i8 %240, 0
  br i1 %241, label %1093, label %242

242:                                              ; preds = %227
  %243 = bitcast %struct.ea* %21 to i8*
  %244 = getelementptr inbounds %struct.ea, %struct.ea* %21, i64 0, i32 4
  %245 = getelementptr inbounds %struct.ea, %struct.ea* %21, i64 0, i32 1
  %246 = getelementptr inbounds %struct.ea, %struct.ea* %21, i64 0, i32 5
  %247 = ptrtoint i32* %19 to i64
  %248 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 2
  %249 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 9
  %250 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 7
  %251 = getelementptr inbounds %struct.ea, %struct.ea* %21, i64 0, i32 2
  %252 = getelementptr inbounds %struct.ea, %struct.ea* %21, i64 0, i32 8
  %253 = getelementptr inbounds %struct.ea, %struct.ea* %21, i64 0, i32 7
  %254 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 3
  %255 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 10
  %256 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 11
  %257 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 12
  %258 = getelementptr inbounds %struct.out_data, %struct.out_data* %22, i64 0, i32 13
  %259 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 5
  %260 = icmp eq i32 %2, 16
  %261 = select i1 %260, i8 3, i8 5
  %262 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 7
  %263 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 8
  %264 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 12
  %265 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 3
  %266 = icmp eq i32 %2, 32
  %267 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 1, i64 5
  %268 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 1, i64 4
  %269 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 14
  %270 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 1, i64 6
  %271 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 13
  %272 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 15
  %273 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 2
  %274 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 12
  %275 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 16, i64 2
  %276 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 16, i64 0
  %277 = select i1 %260, i64 2, i64 4
  %278 = bitcast i8** %249 to i32**
  br label %279

279:                                              ; preds = %1087, %242
  %280 = phi i8 [ %240, %242 ], [ %1091, %1087 ]
  %281 = phi i32 [ 1, %242 ], [ %1090, %1087 ]
  %282 = phi i8 [ 0, %242 ], [ %1089, %1087 ]
  %283 = phi i8* [ %236, %242 ], [ %1088, %1087 ]
  %284 = getelementptr inbounds i8, i8* %283, i64 1
  %285 = zext i8 %280 to i32
  %286 = and i32 %285, 3
  %287 = zext i8 %282 to i32
  %288 = shl nuw nsw i32 %287, 2
  %289 = and i32 %288, 4
  %290 = or i32 %289, %286
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291
  switch i8 %280, label %1086 [
    i8 1, label %293
    i8 2, label %293
    i8 3, label %293
    i8 4, label %293
    i8 5, label %312
    i8 6, label %312
    i8 7, label %312
    i8 8, label %313
    i8 9, label %313
    i8 10, label %313
    i8 11, label %313
    i8 12, label %1087
    i8 13, label %1087
    i8 14, label %1087
    i8 15, label %1087
    i8 16, label %344
    i8 17, label %344
    i8 18, label %344
    i8 19, label %344
    i8 20, label %366
    i8 21, label %366
    i8 22, label %366
    i8 23, label %366
    i8 24, label %388
    i8 25, label %388
    i8 26, label %388
    i8 27, label %388
    i8 28, label %407
    i8 29, label %407
    i8 30, label %407
    i8 31, label %407
    i8 32, label %436
    i8 33, label %436
    i8 34, label %436
    i8 35, label %436
    i8 36, label %455
    i8 37, label %455
    i8 38, label %455
    i8 39, label %455
    i8 40, label %482
    i8 41, label %482
    i8 42, label %482
    i8 43, label %482
    i8 44, label %518
    i8 45, label %518
    i8 46, label %518
    i8 47, label %518
    i8 48, label %537
    i8 49, label %537
    i8 50, label %537
    i8 51, label %537
    i8 52, label %556
    i8 53, label %556
    i8 54, label %556
    i8 55, label %556
    i8 56, label %585
    i8 57, label %585
    i8 58, label %585
    i8 59, label %585
    i8 60, label %604
    i8 61, label %604
    i8 62, label %604
    i8 63, label %604
    i8 122, label %626
    i8 123, label %664
    i8 124, label %672
    i8 125, label %672
    i8 126, label %672
    i8 127, label %672
    i8 -84, label %687
    i8 -83, label %687
    i8 -82, label %687
    i8 -81, label %687
    i8 -96, label %727
    i8 -95, label %727
    i8 -94, label %727
    i8 -93, label %727
    i8 -88, label %727
    i8 -80, label %776
    i8 -79, label %776
    i8 -78, label %776
    i8 -77, label %776
    i8 -72, label %776
    i8 -71, label %1087
    i8 -70, label %1087
    i8 -69, label %1087
    i8 -68, label %818
    i8 -67, label %818
    i8 -66, label %818
    i8 -65, label %818
    i8 -64, label %1087
    i8 -63, label %1087
    i8 -62, label %1087
    i8 -61, label %1087
    i8 -56, label %886
    i8 -55, label %891
    i8 -54, label %1087
    i8 -53, label %1087
    i8 -52, label %1087
    i8 -51, label %1087
    i8 -50, label %1087
    i8 -49, label %1087
    i8 -48, label %1087
    i8 -47, label %1087
    i8 -46, label %1087
    i8 -45, label %1087
    i8 -44, label %896
    i8 -43, label %1087
    i8 -42, label %1087
    i8 -40, label %899
    i8 -39, label %1087
    i8 -38, label %907
    i8 -37, label %907
    i8 -36, label %909
    i8 -35, label %1087
    i8 -34, label %1087
    i8 -33, label %1087
    i8 -32, label %918
    i8 -31, label %1087
    i8 -16, label %1087
    i8 -15, label %934
    i8 -12, label %1087
    i8 -11, label %1087
    i8 -10, label %935
    i8 -9, label %935
    i8 -8, label %1087
    i8 -7, label %1087
    i8 -6, label %1087
    i8 -5, label %937
    i8 -4, label %938
    i8 -3, label %939
    i8 -2, label %940
    i8 64, label %941
    i8 65, label %941
    i8 66, label %941
    i8 67, label %941
    i8 72, label %941
    i8 73, label %941
    i8 74, label %941
    i8 75, label %941
    i8 80, label %941
    i8 81, label %941
    i8 82, label %941
    i8 83, label %941
    i8 88, label %941
    i8 89, label %941
    i8 90, label %941
    i8 91, label %941
    i8 -128, label %941
    i8 -127, label %941
    i8 -126, label %941
    i8 -125, label %941
    i8 -124, label %941
    i8 -123, label %941
    i8 -122, label %941
    i8 -121, label %941
    i8 -120, label %941
    i8 -119, label %941
    i8 -118, label %941
    i8 -117, label %941
    i8 -116, label %941
    i8 -115, label %941
    i8 -114, label %941
    i8 -113, label %941
    i8 -112, label %941
    i8 -111, label %941
    i8 -110, label %941
    i8 -109, label %941
    i8 -108, label %941
    i8 -107, label %941
    i8 -106, label %941
    i8 -105, label %941
    i8 -104, label %941
    i8 -103, label %941
    i8 -102, label %941
    i8 -101, label %941
    i8 -100, label %941
    i8 -99, label %941
    i8 -98, label %941
    i8 -97, label %941
  ]

293:                                              ; preds = %279, %279, %279, %279
  %294 = load i32, i32* %33, align 4
  %295 = icmp eq i32 %294, 64
  br i1 %295, label %296, label %309

296:                                              ; preds = %293
  %297 = load i32, i32* %264, align 4
  %298 = and i32 %297, 79
  %299 = icmp ne i32 %298, 0
  %300 = and i32 %297, 1280
  %301 = icmp eq i32 %300, 0
  %302 = and i1 %299, %301
  br i1 %302, label %303, label %309

303:                                              ; preds = %296
  %304 = load i8, i8* %238, align 1, !range !4
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %306, label %309

306:                                              ; preds = %303
  %307 = trunc i32 %298 to i8
  %308 = or i8 %307, 64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18) #10
  store i8 %308, i8* %18, align 1
  store i32 0, i32* %248, align 4
  store i8* %18, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #10
  store i8 1, i8* %238, align 1
  br label %309

309:                                              ; preds = %306, %303, %296, %293
  %310 = zext i8 %280 to i64
  store i32 0, i32* %248, align 4
  store i8* %284, i8** %249, align 8
  store i64 %310, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  %311 = getelementptr inbounds i8, i8* %284, i64 %310
  br label %1087

312:                                              ; preds = %279, %279, %279
  br label %1087

313:                                              ; preds = %279, %279, %279, %279
  %314 = load i32, i32* %33, align 4
  %315 = icmp eq i32 %314, 64
  br i1 %315, label %316, label %329

316:                                              ; preds = %313
  %317 = load i32, i32* %264, align 4
  %318 = and i32 %317, 79
  %319 = icmp ne i32 %318, 0
  %320 = and i32 %317, 1280
  %321 = icmp eq i32 %320, 0
  %322 = and i1 %319, %321
  br i1 %322, label %323, label %329

323:                                              ; preds = %316
  %324 = load i8, i8* %238, align 1, !range !4
  %325 = icmp eq i8 %324, 0
  br i1 %325, label %326, label %329

326:                                              ; preds = %323
  %327 = trunc i32 %318 to i8
  %328 = or i8 %327, 64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %17) #10
  store i8 %328, i8* %17, align 1
  store i32 0, i32* %248, align 4
  store i8* %17, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17) #10
  store i8 1, i8* %238, align 1
  br label %329

329:                                              ; preds = %326, %323, %316, %313
  %330 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 2
  %331 = load i32, i32* %330, align 4
  %332 = add i32 %331, -1
  %333 = icmp ult i32 %332, 240
  br i1 %333, label %335, label %334

334:                                              ; preds = %329
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.62, i64 0, i64 0)) #12
  unreachable

335:                                              ; preds = %329
  %336 = load i8, i8* %284, align 1
  %337 = getelementptr inbounds i8, i8* %283, i64 2
  %338 = sext i32 %331 to i64
  %339 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %338
  %340 = load i32, i32* %339, align 4
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 7
  %343 = add i8 %342, %336
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #10
  store i8 %343, i8* %16, align 1
  store i32 0, i32* %248, align 4
  store i8* %16, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #10
  br label %1087

344:                                              ; preds = %279, %279, %279, %279
  %345 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %346 = load i32, i32* %345, align 8
  %347 = icmp eq i32 %346, -1
  %348 = and i32 %346, 1
  %349 = icmp eq i32 %348, 0
  %350 = or i1 %347, %349
  br i1 %350, label %353, label %351

351:                                              ; preds = %344
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.90, i64 0, i64 0)) #10
  %352 = load i32, i32* %345, align 8
  br label %359

353:                                              ; preds = %344
  %354 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %355 = load i32, i32* %354, align 8
  %356 = and i32 %355, 8
  %357 = icmp eq i32 %356, 0
  %358 = select i1 %357, i32 3, i32 4
  br label %359

359:                                              ; preds = %353, %351
  %360 = phi i32 [ %352, %351 ], [ %346, %353 ]
  %361 = phi i32 [ 5, %351 ], [ %358, %353 ]
  store i32 %361, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %362 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %255, align 8
  store i32 %360, i32* %256, align 8
  %364 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %365 = load i32, i32* %364, align 8
  store i32 %365, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

366:                                              ; preds = %279, %279, %279, %279
  %367 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %368 = load i32, i32* %367, align 8
  %369 = icmp eq i32 %368, -1
  %370 = and i32 %368, 1
  %371 = icmp eq i32 %370, 0
  %372 = or i1 %369, %371
  br i1 %372, label %375, label %373

373:                                              ; preds = %366
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.90, i64 0, i64 0)) #10
  %374 = load i32, i32* %367, align 8
  br label %381

375:                                              ; preds = %366
  %376 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %377 = load i32, i32* %376, align 8
  %378 = and i32 %377, 8
  %379 = icmp eq i32 %378, 0
  %380 = select i1 %379, i32 3, i32 4
  br label %381

381:                                              ; preds = %375, %373
  %382 = phi i32 [ %374, %373 ], [ %368, %375 ]
  %383 = phi i32 [ 5, %373 ], [ %380, %375 ]
  store i32 %383, i32* %248, align 4
  store i32 2, i32* %254, align 8
  %384 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %255, align 8
  store i32 %382, i32* %256, align 8
  %386 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %387 = load i32, i32* %386, align 8
  store i32 %387, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

388:                                              ; preds = %279, %279, %279, %279
  %389 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %390 = load i32, i32* %389, align 8
  %391 = icmp eq i32 %390, -1
  %392 = and i32 %390, 1
  %393 = icmp eq i32 %392, 0
  %394 = or i1 %391, %393
  br i1 %394, label %395, label %401

395:                                              ; preds = %388
  %396 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %397 = load i32, i32* %396, align 8
  %398 = and i32 %397, 8
  %399 = icmp eq i32 %398, 0
  %400 = select i1 %399, i32 3, i32 4
  br label %401

401:                                              ; preds = %395, %388
  %402 = phi i32 [ %400, %395 ], [ 5, %388 ]
  store i32 %402, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %403 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %255, align 8
  store i32 %390, i32* %256, align 8
  %405 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %406 = load i32, i32* %405, align 8
  store i32 %406, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 2, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

407:                                              ; preds = %279, %279, %279, %279
  %408 = getelementptr inbounds %struct.operand, %struct.operand* %292, i64 0, i32 0
  %409 = load i64, i64* %408, align 8
  %410 = and i64 %409, 25769803776
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %416, label %412

412:                                              ; preds = %407
  %413 = and i64 %409, 8589934592
  %414 = icmp eq i64 %413, 0
  %415 = select i1 %414, i64 4, i64 2
  br label %416

416:                                              ; preds = %412, %407
  %417 = phi i64 [ %415, %412 ], [ %277, %407 ]
  %418 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %419 = load i32, i32* %418, align 8
  %420 = icmp eq i32 %419, -1
  %421 = and i32 %419, 1
  %422 = icmp eq i32 %421, 0
  %423 = or i1 %420, %422
  br i1 %423, label %424, label %430

424:                                              ; preds = %416
  %425 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %426 = load i32, i32* %425, align 8
  %427 = and i32 %426, 8
  %428 = icmp eq i32 %427, 0
  %429 = select i1 %428, i32 3, i32 4
  br label %430

430:                                              ; preds = %424, %416
  %431 = phi i32 [ %429, %424 ], [ 5, %416 ]
  store i32 %431, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %432 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %433 = load i64, i64* %432, align 8
  store i64 %433, i64* %255, align 8
  store i32 %419, i32* %256, align 8
  %434 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %435 = load i32, i32* %434, align 8
  store i32 %435, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 %417, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

436:                                              ; preds = %279, %279, %279, %279
  %437 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %438 = load i32, i32* %437, align 8
  %439 = icmp eq i32 %438, -1
  %440 = and i32 %438, 1
  %441 = icmp eq i32 %440, 0
  %442 = or i1 %439, %441
  br i1 %442, label %443, label %449

443:                                              ; preds = %436
  %444 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %445 = load i32, i32* %444, align 8
  %446 = and i32 %445, 8
  %447 = icmp eq i32 %446, 0
  %448 = select i1 %447, i32 3, i32 4
  br label %449

449:                                              ; preds = %443, %436
  %450 = phi i32 [ %448, %443 ], [ 5, %436 ]
  store i32 %450, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %451 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %255, align 8
  store i32 %438, i32* %256, align 8
  %453 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %454 = load i32, i32* %453, align 8
  store i32 %454, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 4, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

455:                                              ; preds = %279, %279, %279, %279
  %456 = load i32, i32* %259, align 8
  %457 = ashr i32 %456, 3
  %458 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %459 = load i32, i32* %458, align 8
  %460 = icmp eq i32 %459, -1
  %461 = and i32 %459, 1
  %462 = icmp eq i32 %461, 0
  %463 = or i1 %460, %462
  br i1 %463, label %468, label %464

464:                                              ; preds = %455
  %465 = icmp slt i32 %456, 16
  br i1 %465, label %466, label %474

466:                                              ; preds = %464
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.90, i64 0, i64 0)) #10
  %467 = load i32, i32* %458, align 8
  br label %474

468:                                              ; preds = %455
  %469 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %470 = load i32, i32* %469, align 8
  %471 = and i32 %470, 8
  %472 = icmp eq i32 %471, 0
  %473 = select i1 %472, i32 3, i32 4
  br label %474

474:                                              ; preds = %468, %466, %464
  %475 = phi i32 [ %459, %468 ], [ %467, %466 ], [ %459, %464 ]
  %476 = phi i32 [ %473, %468 ], [ 5, %466 ], [ 5, %464 ]
  store i32 %476, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %477 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %478 = load i64, i64* %477, align 8
  store i64 %478, i64* %255, align 8
  store i32 %475, i32* %256, align 8
  %479 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %480 = load i32, i32* %479, align 8
  store i32 %480, i32* %257, align 4
  store i64 0, i64* %258, align 8
  %481 = sext i32 %457 to i64
  store i64 %481, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

482:                                              ; preds = %279, %279, %279, %279
  %483 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %484 = load i32, i32* %483, align 8
  %485 = load i32, i32* %31, align 8
  %486 = icmp eq i32 %484, %485
  br i1 %486, label %487, label %500

487:                                              ; preds = %482
  %488 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %489 = load i64, i64* %488, align 8
  %490 = load i64, i64* %30, align 8
  %491 = load i32, i32* %200, align 4
  %492 = load i32, i32* %197, align 8
  %493 = sub nsw i32 %491, %492
  %494 = sext i32 %493 to i64
  %495 = add i64 %489, 128
  %496 = sub i64 %495, %490
  %497 = sub i64 %496, %494
  %498 = icmp ugt i64 %497, 255
  br i1 %498, label %499, label %500

499:                                              ; preds = %487
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.81, i64 0, i64 0)) #10
  br label %500

500:                                              ; preds = %499, %487, %482
  %501 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %502 = load i32, i32* %501, align 8
  %503 = and i32 %502, 8
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %506, label %505

505:                                              ; preds = %500
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.91, i64 0, i64 0)) #10
  br label %506

506:                                              ; preds = %505, %500
  store i32 4, i32* %248, align 4
  store i32 1, i32* %254, align 8
  store i64 1, i64* %250, align 8
  %507 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %508 = load i64, i64* %507, align 8
  store i64 %508, i64* %255, align 8
  %509 = load i32, i32* %483, align 8
  store i32 %509, i32* %256, align 8
  %510 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %511 = load i32, i32* %510, align 8
  store i32 %511, i32* %257, align 4
  %512 = load i64, i64* %30, align 8
  %513 = load i32, i32* %200, align 4
  %514 = load i32, i32* %197, align 8
  %515 = sub nsw i32 %513, %514
  %516 = sext i32 %515 to i64
  %517 = add nsw i64 %512, %516
  store i64 %517, i64* %258, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

518:                                              ; preds = %279, %279, %279, %279
  %519 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %520 = load i32, i32* %519, align 8
  %521 = icmp eq i32 %520, -1
  %522 = and i32 %520, 1
  %523 = icmp eq i32 %522, 0
  %524 = or i1 %521, %523
  br i1 %524, label %525, label %531

525:                                              ; preds = %518
  %526 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %527 = load i32, i32* %526, align 8
  %528 = and i32 %527, 8
  %529 = icmp eq i32 %528, 0
  %530 = select i1 %529, i32 3, i32 4
  br label %531

531:                                              ; preds = %525, %518
  %532 = phi i32 [ %530, %525 ], [ 5, %518 ]
  store i32 %532, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %533 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %255, align 8
  store i32 %520, i32* %256, align 8
  %535 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %536 = load i32, i32* %535, align 8
  store i32 %536, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 8, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

537:                                              ; preds = %279, %279, %279, %279
  %538 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %539 = load i32, i32* %538, align 8
  %540 = and i32 %539, 8
  %541 = icmp eq i32 %540, 0
  br i1 %541, label %543, label %542

542:                                              ; preds = %537
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.91, i64 0, i64 0)) #10
  br label %543

543:                                              ; preds = %542, %537
  store i32 4, i32* %248, align 4
  store i32 1, i32* %254, align 8
  store i64 2, i64* %250, align 8
  %544 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %255, align 8
  %546 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %547 = load i32, i32* %546, align 8
  store i32 %547, i32* %256, align 8
  %548 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %549 = load i32, i32* %548, align 8
  store i32 %549, i32* %257, align 4
  %550 = load i64, i64* %30, align 8
  %551 = load i32, i32* %200, align 4
  %552 = load i32, i32* %197, align 8
  %553 = sub nsw i32 %551, %552
  %554 = sext i32 %553 to i64
  %555 = add nsw i64 %550, %554
  store i64 %555, i64* %258, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

556:                                              ; preds = %279, %279, %279, %279
  %557 = getelementptr inbounds %struct.operand, %struct.operand* %292, i64 0, i32 0
  %558 = load i64, i64* %557, align 8
  %559 = and i64 %558, 60129542144
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %565, label %561

561:                                              ; preds = %556
  %562 = and i64 %558, 8589934592
  %563 = icmp eq i64 %562, 0
  %564 = select i1 %563, i64 4, i64 2
  br label %565

565:                                              ; preds = %561, %556
  %566 = phi i64 [ %564, %561 ], [ %277, %556 ]
  %567 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %568 = load i32, i32* %567, align 8
  %569 = and i32 %568, 8
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %572, label %571

571:                                              ; preds = %565
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.91, i64 0, i64 0)) #10
  br label %572

572:                                              ; preds = %571, %565
  store i32 4, i32* %248, align 4
  store i32 1, i32* %254, align 8
  store i64 %566, i64* %250, align 8
  %573 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %574 = load i64, i64* %573, align 8
  store i64 %574, i64* %255, align 8
  %575 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %576 = load i32, i32* %575, align 8
  store i32 %576, i32* %256, align 8
  %577 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %578 = load i32, i32* %577, align 8
  store i32 %578, i32* %257, align 4
  %579 = load i64, i64* %30, align 8
  %580 = load i32, i32* %200, align 4
  %581 = load i32, i32* %197, align 8
  %582 = sub nsw i32 %580, %581
  %583 = sext i32 %582 to i64
  %584 = add nsw i64 %579, %583
  store i64 %584, i64* %258, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

585:                                              ; preds = %279, %279, %279, %279
  %586 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %587 = load i32, i32* %586, align 8
  %588 = and i32 %587, 8
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %591, label %590

590:                                              ; preds = %585
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.91, i64 0, i64 0)) #10
  br label %591

591:                                              ; preds = %590, %585
  store i32 4, i32* %248, align 4
  store i32 1, i32* %254, align 8
  store i64 4, i64* %250, align 8
  %592 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %255, align 8
  %594 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %595 = load i32, i32* %594, align 8
  store i32 %595, i32* %256, align 8
  %596 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %597 = load i32, i32* %596, align 8
  store i32 %597, i32* %257, align 4
  %598 = load i64, i64* %30, align 8
  %599 = load i32, i32* %200, align 4
  %600 = load i32, i32* %197, align 8
  %601 = sub nsw i32 %599, %600
  %602 = sext i32 %601 to i64
  %603 = add nsw i64 %598, %602
  store i64 %603, i64* %258, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

604:                                              ; preds = %279, %279, %279, %279
  %605 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %606 = load i32, i32* %605, align 8
  %607 = icmp eq i32 %606, -1
  br i1 %607, label %608, label %609

608:                                              ; preds = %604
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.82, i64 0, i64 0)) #10
  br label %609

609:                                              ; preds = %608, %604
  %610 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %611 = load i32, i32* %610, align 8
  %612 = and i32 %611, 8
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %615, label %614

614:                                              ; preds = %609
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.92, i64 0, i64 0)) #10
  br label %615

615:                                              ; preds = %614, %609
  store i32 5, i32* %248, align 4
  store i32 2, i32* %254, align 8
  store i64 2, i64* %250, align 8
  %616 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %255, align 8
  %618 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %619 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %618, i64 0, i32 16
  %620 = load i32 (i32)*, i32 (i32)** %619, align 8
  %621 = load i32, i32* %605, align 8
  %622 = or i32 %621, 1
  %623 = call i32 %620(i32 %622) #10
  store i32 %623, i32* %256, align 8
  %624 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %625 = load i32, i32* %624, align 8
  store i32 %625, i32* %257, align 4
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

626:                                              ; preds = %279
  %627 = load i32, i32* %270, align 8
  %628 = icmp eq i32 %627, 261
  %629 = select i1 %628, i32 7, i32 15
  %630 = getelementptr inbounds i8, i8* %283, i64 2
  %631 = load i8, i8* %284, align 1
  %632 = zext i8 %631 to i32
  %633 = lshr i32 %632, 3
  %634 = zext i32 %633 to i64
  %635 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %634
  %636 = and i32 %632, 7
  %637 = zext i32 %636 to i64
  %638 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %637, i32 7
  %639 = load i32, i32* %638, align 8
  %640 = icmp eq i32 %639, -1
  br i1 %640, label %641, label %650

641:                                              ; preds = %626
  %642 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %637, i32 9
  %643 = load i32, i32* %642, align 8
  %644 = icmp eq i32 %643, -1
  br i1 %644, label %645, label %650

645:                                              ; preds = %641
  %646 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %637, i32 11
  %647 = load i32, i32* %646, align 8
  %648 = and i32 %647, 8
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %651, label %650

650:                                              ; preds = %645, %641, %626
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.83, i64 0, i64 0), i32 %636) #10
  br label %659

651:                                              ; preds = %645
  %652 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %637, i32 8
  %653 = load i64, i64* %652, align 8
  %654 = xor i32 %629, -1
  %655 = sext i32 %654 to i64
  %656 = and i64 %653, %655
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %659, label %658

658:                                              ; preds = %651
  call void (i32, i8*, ...) @nasm_warn(i32 1179904, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.84, i64 0, i64 0)) #10
  br label %659

659:                                              ; preds = %658, %651, %650
  %660 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %637, i32 8
  %661 = load i64, i64* %660, align 8
  %662 = trunc i64 %661 to i32
  %663 = and i32 %629, %662
  br label %672

664:                                              ; preds = %279
  %665 = getelementptr inbounds i8, i8* %283, i64 2
  %666 = load i8, i8* %284, align 1
  %667 = zext i8 %666 to i32
  %668 = lshr i32 %667, 4
  %669 = zext i32 %668 to i64
  %670 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %669
  %671 = and i32 %667, 15
  br label %672

672:                                              ; preds = %664, %659, %279, %279, %279, %279
  %673 = phi %struct.operand* [ %670, %664 ], [ %635, %659 ], [ %292, %279 ], [ %292, %279 ], [ %292, %279 ], [ %292, %279 ]
  %674 = phi i8* [ %665, %664 ], [ %630, %659 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ]
  %675 = phi i32 [ %671, %664 ], [ %663, %659 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ]
  %676 = getelementptr inbounds %struct.operand, %struct.operand* %673, i64 0, i32 2
  %677 = load i32, i32* %676, align 4
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = shl i32 %680, 4
  %682 = lshr i32 %680, 1
  %683 = and i32 %682, 8
  %684 = or i32 %681, %675
  %685 = or i32 %684, %683
  %686 = trunc i32 %685 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #10
  store i8 %686, i8* %15, align 1
  store i32 0, i32* %248, align 4
  store i8* %15, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #10
  br label %1087

687:                                              ; preds = %279, %279, %279, %279
  %688 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %689 = load i32, i32* %688, align 8
  %690 = icmp eq i32 %689, -1
  br i1 %690, label %691, label %707

691:                                              ; preds = %687
  %692 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %693 = load i32, i32* %692, align 8
  %694 = icmp eq i32 %693, -1
  br i1 %694, label %695, label %713

695:                                              ; preds = %691
  %696 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %697 = load i32, i32* %696, align 8
  %698 = and i32 %697, 8
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %700, label %713

700:                                              ; preds = %695
  %701 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %702 = load i64, i64* %701, align 8
  %703 = add i64 %702, 2147483648
  %704 = icmp ugt i64 %703, 4294967295
  br i1 %704, label %705, label %713

705:                                              ; preds = %700
  call void (i32, i8*, ...) @nasm_warn(i32 1179904, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.85, i64 0, i64 0)) #10
  %706 = load i32, i32* %688, align 8
  br label %707

707:                                              ; preds = %705, %687
  %708 = phi i32 [ %689, %687 ], [ %706, %705 ]
  %709 = icmp eq i32 %708, -1
  %710 = and i32 %708, 1
  %711 = icmp eq i32 %710, 0
  %712 = or i1 %709, %711
  br i1 %712, label %713, label %720

713:                                              ; preds = %707, %700, %695, %691
  %714 = phi i32 [ %708, %707 ], [ -1, %700 ], [ -1, %695 ], [ -1, %691 ]
  %715 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %716 = load i32, i32* %715, align 8
  %717 = and i32 %716, 8
  %718 = icmp eq i32 %717, 0
  %719 = select i1 %718, i32 3, i32 4
  br label %720

720:                                              ; preds = %713, %707
  %721 = phi i32 [ %714, %713 ], [ %708, %707 ]
  %722 = phi i32 [ %719, %713 ], [ 5, %707 ]
  store i32 %722, i32* %248, align 4
  store i32 1, i32* %254, align 8
  %723 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %724 = load i64, i64* %723, align 8
  store i64 %724, i64* %255, align 8
  store i32 %721, i32* %256, align 8
  %725 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %726 = load i32, i32* %725, align 8
  store i32 %726, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 4, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

727:                                              ; preds = %279, %279, %279, %279, %279
  %728 = getelementptr inbounds i8, i8* %283, i64 4
  %729 = load i32, i32* %273, align 4
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %730
  %732 = load i32, i32* %731, align 4
  %733 = load i16, i16* %274, align 4
  %734 = and i32 %732, -2147483632
  %735 = icmp eq i32 %734, 16
  %736 = select i1 %735, i32 8, i32 0
  %737 = zext i16 %733 to i32
  %738 = shl nuw nsw i32 %737, 3
  %739 = and i32 %738, 128
  %740 = or i32 %739, %736
  %741 = and i16 %733, 15
  %742 = icmp eq i16 %741, 0
  br i1 %742, label %747, label %743

743:                                              ; preds = %727
  %744 = and i16 %733, 7
  %745 = zext i16 %744 to i32
  %746 = or i32 %740, %745
  br label %747

747:                                              ; preds = %743, %727
  %748 = phi i32 [ %746, %743 ], [ %740, %727 ]
  %749 = load i8, i8* %275, align 2
  %750 = trunc i32 %748 to i8
  %751 = and i8 %750, -121
  %752 = or i8 %751, %749
  %753 = xor i8 %752, 8
  store i8 %753, i8* %275, align 2
  store i8 98, i8* %231, align 4
  %754 = load i32, i32* %264, align 4
  %755 = shl i32 %754, 5
  %756 = load i8, i8* %276, align 4
  %757 = and i8 %756, 80
  %758 = zext i8 %757 to i32
  %759 = or i32 %755, %758
  %760 = load i32, i32* %269, align 4
  %761 = and i32 %760, 15
  %762 = or i32 %759, %761
  %763 = trunc i32 %762 to i8
  %764 = xor i8 %763, -16
  store i8 %764, i8* %232, align 1
  %765 = shl i32 %754, 4
  %766 = and i32 %765, 128
  %767 = load i32, i32* %271, align 8
  %768 = shl i32 %767, 3
  %769 = and i32 %768, 120
  %770 = or i32 %769, %766
  %771 = load i32, i32* %272, align 8
  %772 = and i32 %771, 3
  %773 = or i32 %770, %772
  %774 = trunc i32 %773 to i8
  %775 = xor i8 %774, 124
  store i8 %775, i8* %233, align 2
  store i8 %753, i8* %234, align 1
  store i32 0, i32* %248, align 4
  store i32* %19, i32** %278, align 8
  store i64 4, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

776:                                              ; preds = %279, %279, %279, %279, %279
  %777 = getelementptr inbounds i8, i8* %283, i64 3
  %778 = load i32, i32* %269, align 4
  %779 = icmp eq i32 %778, 1
  %780 = load i32, i32* %264, align 4
  %781 = and i32 %780, 11
  %782 = icmp eq i32 %781, 0
  %783 = and i1 %779, %782
  br i1 %783, label %784, label %787

784:                                              ; preds = %776
  %785 = load i32, i32* %270, align 8
  %786 = icmp eq i32 %785, 262
  br i1 %786, label %787, label %806

787:                                              ; preds = %784, %776
  %788 = icmp ugt i32 %778, 63
  %789 = select i1 %788, i8 -113, i8 -60
  store i8 %789, i8* %231, align 4
  %790 = and i32 %778, 31
  %791 = shl i32 %780, 5
  %792 = or i32 %791, %790
  %793 = trunc i32 %792 to i8
  %794 = xor i8 %793, -32
  store i8 %794, i8* %232, align 1
  %795 = shl i32 %780, 4
  %796 = and i32 %795, 128
  %797 = load i32, i32* %271, align 8
  %798 = shl i32 %797, 3
  %799 = and i32 %798, 120
  %800 = or i32 %799, %796
  %801 = load i32, i32* %272, align 8
  %802 = and i32 %801, 7
  %803 = or i32 %800, %802
  %804 = trunc i32 %803 to i8
  %805 = xor i8 %804, 120
  store i8 %805, i8* %233, align 2
  store i32 0, i32* %248, align 4
  store i32* %19, i32** %278, align 8
  store i64 3, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

806:                                              ; preds = %784
  store i8 -59, i8* %231, align 4
  %807 = shl i32 %780, 5
  %808 = and i32 %807, 128
  %809 = load i32, i32* %271, align 8
  %810 = shl i32 %809, 3
  %811 = and i32 %810, 120
  %812 = or i32 %811, %808
  %813 = load i32, i32* %272, align 8
  %814 = and i32 %813, 7
  %815 = or i32 %812, %814
  %816 = trunc i32 %815 to i8
  %817 = xor i8 %816, -8
  store i8 %817, i8* %232, align 1
  store i32 0, i32* %248, align 4
  store i32* %19, i32** %278, align 8
  store i64 2, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

818:                                              ; preds = %279, %279, %279, %279
  %819 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 7
  %820 = load i32, i32* %819, align 8
  %821 = icmp eq i32 %820, -1
  br i1 %821, label %822, label %868

822:                                              ; preds = %818
  %823 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %824 = load i32, i32* %823, align 8
  %825 = icmp eq i32 %824, -1
  br i1 %825, label %826, label %873

826:                                              ; preds = %822
  %827 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %828 = load i32, i32* %827, align 8
  %829 = and i32 %828, 8
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %831, label %873

831:                                              ; preds = %826
  %832 = load i32, i32* %264, align 4
  %833 = and i32 %832, 8
  %834 = icmp eq i32 %833, 0
  br i1 %834, label %835, label %839

835:                                              ; preds = %831
  %836 = load i32, i32* %268, align 8
  switch i32 %836, label %838 [
    i32 246, label %839
    i32 247, label %837
  ]

837:                                              ; preds = %835
  br label %839

838:                                              ; preds = %835
  br label %839

839:                                              ; preds = %838, %837, %835, %831
  %840 = phi i32 [ 32, %837 ], [ %2, %838 ], [ 64, %831 ], [ 16, %835 ]
  %841 = add nsw i32 %840, -1
  %842 = zext i32 %841 to i64
  %843 = shl i64 2, %842
  %844 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %845 = load i64, i64* %844, align 8
  %846 = add i64 %845, -128
  %847 = icmp ult i64 %846, -256
  br i1 %847, label %848, label %866

848:                                              ; preds = %839
  %849 = add i64 %843, -128
  %850 = icmp ult i64 %845, %849
  %851 = add i64 %843, -1
  %852 = icmp ugt i64 %845, %851
  %853 = or i1 %850, %852
  br i1 %853, label %854, label %866

854:                                              ; preds = %848
  %855 = getelementptr inbounds %struct.operand, %struct.operand* %292, i64 0, i32 0
  %856 = load i64, i64* %855, align 8
  %857 = and i64 %856, 4294967296
  %858 = icmp eq i64 %857, 0
  br i1 %858, label %859, label %864

859:                                              ; preds = %854
  %860 = icmp eq i32 %840, 16
  br i1 %860, label %864, label %861

861:                                              ; preds = %859
  %862 = icmp eq i32 %840, 32
  %863 = select i1 %862, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88, i64 0, i64 0)
  br label %864

864:                                              ; preds = %861, %859, %854
  %865 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i64 0, i64 0), %854 ], [ %863, %861 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0), %859 ]
  call void (i32, i8*, ...) @nasm_warn(i32 1179904, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.86, i64 0, i64 0), i8* %865) #10
  br label %866

866:                                              ; preds = %864, %848, %839
  %867 = trunc i64 %845 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #10
  store i8 %867, i8* %14, align 1
  store i32 0, i32* %248, align 4
  store i8* %14, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #10
  br label %1087

868:                                              ; preds = %818
  %869 = and i32 %820, 1
  %870 = icmp eq i32 %869, 0
  br i1 %870, label %873, label %871

871:                                              ; preds = %868
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.90, i64 0, i64 0)) #10
  %872 = load i32, i32* %819, align 8
  br label %879

873:                                              ; preds = %868, %826, %822
  %874 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 11
  %875 = load i32, i32* %874, align 8
  %876 = and i32 %875, 8
  %877 = icmp eq i32 %876, 0
  %878 = select i1 %877, i32 3, i32 4
  br label %879

879:                                              ; preds = %873, %871
  %880 = phi i32 [ %872, %871 ], [ %820, %873 ]
  %881 = phi i32 [ 5, %871 ], [ %878, %873 ]
  store i32 %881, i32* %248, align 4
  store i32 0, i32* %254, align 8
  %882 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 8
  %883 = load i64, i64* %882, align 8
  store i64 %883, i64* %255, align 8
  store i32 %880, i32* %256, align 8
  %884 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 9
  %885 = load i32, i32* %884, align 8
  store i32 %885, i32* %257, align 4
  store i64 0, i64* %258, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

886:                                              ; preds = %279
  br i1 %266, label %887, label %1087

887:                                              ; preds = %886
  %888 = load i32, i32* %267, align 4
  %889 = icmp eq i32 %888, 241
  br i1 %889, label %1087, label %890

890:                                              ; preds = %887
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #10
  store i8 103, i8* %13, align 1
  store i32 0, i32* %248, align 4
  store i8* %13, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #10
  br label %1087

891:                                              ; preds = %279
  br i1 %266, label %1087, label %892

892:                                              ; preds = %891
  %893 = load i32, i32* %267, align 4
  %894 = icmp eq i32 %893, 242
  br i1 %894, label %1087, label %895

895:                                              ; preds = %892
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #10
  store i8 103, i8* %12, align 1
  store i32 0, i32* %248, align 4
  store i8* %12, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #10
  br label %1087

896:                                              ; preds = %279
  %897 = load i32, i32* %264, align 4
  %898 = or i32 %897, 8
  store i32 %898, i32* %264, align 4
  br label %1087

899:                                              ; preds = %279
  %900 = getelementptr inbounds i8, i8* %283, i64 2
  %901 = load i8, i8* %284, align 1
  %902 = load i32, i32* %265, align 8
  %903 = sext i32 %902 to i64
  %904 = getelementptr inbounds [30 x i8], [30 x i8]* @get_cond_opcode.ccode_opcodes, i64 0, i64 %903
  %905 = load i8, i8* %904, align 1
  %906 = xor i8 %905, %901
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #10
  store i8 %906, i8* %11, align 1
  store i32 0, i32* %248, align 4
  store i8* %11, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #10
  br label %1087

907:                                              ; preds = %279, %279
  %908 = add nuw nsw i8 %280, 24
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #10
  store i8 %908, i8* %10, align 1
  store i32 0, i32* %248, align 4
  store i8* %10, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #10
  br label %1087

909:                                              ; preds = %279
  %910 = load i32, i32* %264, align 4
  %911 = and i32 %910, 4
  %912 = icmp eq i32 %911, 0
  br i1 %912, label %915, label %913

913:                                              ; preds = %909
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #10
  store i8 -16, i8* %9, align 1
  store i32 0, i32* %248, align 4
  store i8* %9, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #10
  %914 = load i32, i32* %264, align 4
  br label %915

915:                                              ; preds = %913, %909
  %916 = phi i32 [ %910, %909 ], [ %914, %913 ]
  %917 = and i32 %916, -37
  store i32 %917, i32* %264, align 4
  br label %1087

918:                                              ; preds = %279
  %919 = load i32, i32* %262, align 8
  %920 = icmp eq i32 %919, -1
  br i1 %920, label %922, label %921

921:                                              ; preds = %918
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.89, i64 0, i64 0)) #12
  unreachable

922:                                              ; preds = %918
  %923 = load i64, i64* %263, align 8
  %924 = load i32, i32* %26, align 4
  %925 = add i32 %924, 1
  %926 = icmp ult i32 %925, 17
  br i1 %926, label %927, label %931

927:                                              ; preds = %922
  %928 = sext i32 %925 to i64
  %929 = getelementptr inbounds [17 x i64], [17 x i64]* @switch.table.calcsize, i64 0, i64 %928
  %930 = load i64, i64* %929, align 8
  br label %931

931:                                              ; preds = %922, %927
  %932 = phi i64 [ %930, %927 ], [ 0, %922 ]
  %933 = mul nsw i64 %932, %923
  store i32 1, i32* %248, align 4
  store i64 %933, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1087

934:                                              ; preds = %279
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #10
  store i8 102, i8* %8, align 1
  store i32 0, i32* %248, align 4
  store i8* %8, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #10
  br label %1087

935:                                              ; preds = %279, %279
  %936 = add nsw i8 %280, 112
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #10
  store i8 %936, i8* %7, align 1
  store i32 0, i32* %248, align 4
  store i8* %7, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #10
  br label %1087

937:                                              ; preds = %279
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #10
  store i8 %261, i8* %6, align 1
  store i32 0, i32* %248, align 4
  store i8* %6, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #10
  br label %1087

938:                                              ; preds = %279
  br label %1087

939:                                              ; preds = %279
  br label %1087

940:                                              ; preds = %279
  br label %1087

941:                                              ; preds = %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279
  %942 = lshr i32 %285, 3
  %943 = and i32 %942, 3
  %944 = shl nuw nsw i32 %287, 1
  %945 = and i32 %944, 4
  %946 = or i32 %945, %943
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %243) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %243, i8 -86, i64 24, i1 false) #10
  %947 = zext i32 %946 to i64
  %948 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947
  %949 = icmp sgt i8 %280, -1
  br i1 %949, label %950, label %962

950:                                              ; preds = %941
  %951 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %291, i32 2
  %952 = load i32, i32* %951, align 4
  %953 = add i32 %952, -1
  %954 = icmp ult i32 %953, 240
  br i1 %954, label %956, label %955

955:                                              ; preds = %950
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.63, i64 0, i64 0)) #12
  unreachable

956:                                              ; preds = %950
  %957 = sext i32 %952 to i64
  %958 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %957
  %959 = load i64, i64* %958, align 8
  %960 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %957
  %961 = load i32, i32* %960, align 4
  br label %964

962:                                              ; preds = %941
  %963 = and i32 %285, 7
  br label %964

964:                                              ; preds = %962, %956
  %965 = phi i32 [ %961, %956 ], [ %963, %962 ]
  %966 = phi i64 [ %959, %956 ], [ 0, %962 ]
  %967 = call fastcc i32 @process_ea(%struct.operand* %948, %struct.ea* nonnull %21, i32 %2, i32 %965, i64 %966, %struct.insn* %3, i8** nonnull %20) #10
  %968 = icmp eq i32 %967, %281
  br i1 %968, label %971, label %969

969:                                              ; preds = %964
  %970 = load i8*, i8** %20, align 8
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i64 0, i64 0), i8* %970) #10
  br label %971

971:                                              ; preds = %969, %964
  %972 = load i8, i8* %244, align 4
  store i8 %972, i8* %231, align 4
  %973 = load i32, i32* %245, align 4
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %977, label %975

975:                                              ; preds = %971
  %976 = load i8, i8* %246, align 1
  store i8 %976, i8* %232, align 1
  br label %977

977:                                              ; preds = %975, %971
  %978 = phi i8* [ %233, %975 ], [ %232, %971 ]
  %979 = ptrtoint i8* %978 to i64
  %980 = sub i64 %979, %247
  store i32 0, i32* %248, align 4
  store i32* %19, i32** %278, align 8
  store i64 %980, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  %981 = load i32, i32* %251, align 4
  %982 = icmp eq i32 %981, 0
  br i1 %982, label %1085, label %983

983:                                              ; preds = %977
  %984 = load i8, i8* %252, align 4
  %985 = icmp eq i8 %984, 0
  br i1 %985, label %987, label %986

986:                                              ; preds = %983
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 %984, i8* %5, align 1
  store i32 0, i32* %248, align 4
  store i8* %5, i8** %249, align 8
  store i64 1, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  br label %1085

987:                                              ; preds = %983
  %988 = load i8, i8* %253, align 1
  %989 = icmp eq i8 %988, 0
  br i1 %989, label %1010, label %990

990:                                              ; preds = %987
  %991 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 11
  %992 = load i32, i32* %991, align 8
  %993 = and i32 %992, 8
  %994 = icmp eq i32 %993, 0
  br i1 %994, label %996, label %995

995:                                              ; preds = %990
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.91, i64 0, i64 0)) #10
  br label %996

996:                                              ; preds = %995, %990
  store i32 4, i32* %248, align 4
  store i32 1, i32* %254, align 8
  %997 = sext i32 %981 to i64
  store i64 %997, i64* %250, align 8
  %998 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 8
  %999 = load i64, i64* %998, align 8
  store i64 %999, i64* %255, align 8
  %1000 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 7
  %1001 = load i32, i32* %1000, align 8
  store i32 %1001, i32* %256, align 8
  %1002 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 9
  %1003 = load i32, i32* %1002, align 8
  store i32 %1003, i32* %257, align 4
  %1004 = load i64, i64* %30, align 8
  %1005 = load i32, i32* %200, align 4
  %1006 = load i32, i32* %197, align 8
  %1007 = sub nsw i32 %1005, %1006
  %1008 = sext i32 %1007 to i64
  %1009 = add nsw i64 %1004, %1008
  store i64 %1009, i64* %258, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1085

1010:                                             ; preds = %987
  %1011 = load i32, i32* %259, align 8
  %1012 = ashr i32 %1011, 3
  %1013 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 8
  %1014 = load i64, i64* %1013, align 8
  %1015 = icmp sgt i32 %1011, 63
  br i1 %1015, label %1037, label %1016

1016:                                             ; preds = %1010
  %1017 = and i32 %1011, -8
  %1018 = add nsw i32 %1017, -1
  %1019 = zext i32 %1018 to i64
  %1020 = shl i64 2, %1019
  %1021 = sub nsw i64 0, %1020
  %1022 = icmp slt i64 %1014, %1021
  %1023 = icmp sle i64 %1020, %1014
  %1024 = or i1 %1022, %1023
  br i1 %1024, label %1056, label %1025

1025:                                             ; preds = %1016
  %1026 = zext i32 %1011 to i64
  %1027 = shl i64 -1, %1026
  %1028 = xor i64 %1027, -1
  %1029 = and i64 %1014, %1028
  %1030 = add nsw i32 %1011, -1
  %1031 = zext i32 %1030 to i64
  %1032 = shl i64 1, %1031
  %1033 = and i64 %1029, %1032
  %1034 = icmp eq i64 %1033, 0
  %1035 = or i64 %1027, %1014
  %1036 = select i1 %1034, i64 %1029, i64 %1035
  br label %1037

1037:                                             ; preds = %1025, %1010
  %1038 = phi i64 [ %1036, %1025 ], [ %1014, %1010 ]
  %1039 = shl i32 %981, 3
  %1040 = icmp slt i32 %1039, 64
  br i1 %1040, label %1041, label %1053

1041:                                             ; preds = %1037
  %1042 = zext i32 %1039 to i64
  %1043 = shl i64 -1, %1042
  %1044 = xor i64 %1043, -1
  %1045 = and i64 %1014, %1044
  %1046 = add nsw i32 %1039, -1
  %1047 = zext i32 %1046 to i64
  %1048 = shl i64 1, %1047
  %1049 = and i64 %1045, %1048
  %1050 = icmp eq i64 %1049, 0
  %1051 = or i64 %1014, %1043
  %1052 = select i1 %1050, i64 %1045, i64 %1051
  br label %1053

1053:                                             ; preds = %1041, %1037
  %1054 = phi i64 [ %1052, %1041 ], [ %1014, %1037 ]
  %1055 = icmp eq i64 %1038, %1054
  br i1 %1055, label %1058, label %1056

1056:                                             ; preds = %1053, %1016
  call fastcc void @warn_overflow(i32 %981) #10
  %1057 = load i32, i32* %251, align 4
  br label %1058

1058:                                             ; preds = %1056, %1053
  %1059 = phi i32 [ %981, %1053 ], [ %1057, %1056 ]
  %1060 = icmp sgt i32 %1012, %1059
  %1061 = zext i1 %1060 to i32
  %1062 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 7
  %1063 = load i32, i32* %1062, align 8
  %1064 = icmp eq i32 %1063, -1
  %1065 = and i32 %1063, 1
  %1066 = icmp eq i32 %1065, 0
  %1067 = or i1 %1064, %1066
  br i1 %1067, label %1072, label %1068

1068:                                             ; preds = %1058
  %1069 = icmp slt i32 %1059, 2
  br i1 %1069, label %1070, label %1078

1070:                                             ; preds = %1068
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.90, i64 0, i64 0)) #10
  %1071 = load i32, i32* %1062, align 8
  br label %1078

1072:                                             ; preds = %1058
  %1073 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 11
  %1074 = load i32, i32* %1073, align 8
  %1075 = and i32 %1074, 8
  %1076 = icmp eq i32 %1075, 0
  %1077 = select i1 %1076, i32 3, i32 4
  br label %1078

1078:                                             ; preds = %1072, %1070, %1068
  %1079 = phi i32 [ %1063, %1072 ], [ %1071, %1070 ], [ %1063, %1068 ]
  %1080 = phi i32 [ %1077, %1072 ], [ 5, %1070 ], [ 5, %1068 ]
  store i32 %1080, i32* %248, align 4
  store i32 %1061, i32* %254, align 8
  %1081 = load i64, i64* %1013, align 8
  store i64 %1081, i64* %255, align 8
  store i32 %1079, i32* %256, align 8
  %1082 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 %947, i32 9
  %1083 = load i32, i32* %1082, align 8
  store i32 %1083, i32* %257, align 4
  store i64 0, i64* %258, align 8
  %1084 = sext i32 %1059 to i64
  store i64 %1084, i64* %250, align 8
  call fastcc void @out(%struct.out_data* nonnull %22) #10
  br label %1085

1085:                                             ; preds = %1078, %996, %986, %977
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %243) #10
  br label %1087

1086:                                             ; preds = %279
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.54, i64 0, i64 0), i32 %285, i32 %285) #12
  unreachable

1087:                                             ; preds = %1085, %940, %939, %938, %937, %935, %934, %931, %915, %907, %899, %896, %895, %892, %891, %890, %887, %886, %879, %866, %806, %787, %747, %720, %672, %615, %591, %572, %543, %531, %506, %474, %449, %430, %401, %381, %359, %335, %312, %309, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279, %279
  %1088 = phi i8* [ %284, %1085 ], [ %284, %940 ], [ %284, %939 ], [ %284, %938 ], [ %284, %937 ], [ %284, %935 ], [ %284, %934 ], [ %284, %931 ], [ %284, %915 ], [ %284, %907 ], [ %900, %899 ], [ %284, %896 ], [ %284, %892 ], [ %284, %895 ], [ %284, %891 ], [ %284, %887 ], [ %284, %890 ], [ %284, %886 ], [ %777, %787 ], [ %777, %806 ], [ %728, %747 ], [ %284, %720 ], [ %674, %672 ], [ %284, %615 ], [ %284, %591 ], [ %284, %572 ], [ %284, %543 ], [ %284, %531 ], [ %284, %506 ], [ %284, %474 ], [ %284, %449 ], [ %284, %430 ], [ %284, %401 ], [ %284, %381 ], [ %284, %359 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %284, %279 ], [ %337, %335 ], [ %284, %312 ], [ %311, %309 ], [ %284, %879 ], [ %284, %866 ]
  %1089 = phi i8 [ 0, %1085 ], [ 0, %940 ], [ 0, %939 ], [ 0, %938 ], [ 0, %937 ], [ 0, %935 ], [ 0, %934 ], [ 0, %931 ], [ 0, %915 ], [ 0, %907 ], [ 0, %899 ], [ 0, %896 ], [ 0, %892 ], [ 0, %895 ], [ 0, %891 ], [ 0, %887 ], [ 0, %890 ], [ 0, %886 ], [ 0, %787 ], [ 0, %806 ], [ 0, %747 ], [ 0, %720 ], [ 0, %672 ], [ 0, %615 ], [ 0, %591 ], [ 0, %572 ], [ 0, %543 ], [ 0, %531 ], [ 0, %506 ], [ 0, %474 ], [ 0, %449 ], [ 0, %430 ], [ 0, %401 ], [ 0, %381 ], [ 0, %359 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %279 ], [ 0, %335 ], [ %280, %312 ], [ 0, %309 ], [ 0, %879 ], [ 0, %866 ]
  %1090 = phi i32 [ %281, %1085 ], [ 4, %940 ], [ 3, %939 ], [ 2, %938 ], [ %281, %937 ], [ %281, %935 ], [ %281, %934 ], [ %281, %931 ], [ %281, %915 ], [ %281, %907 ], [ %281, %899 ], [ %281, %896 ], [ %281, %892 ], [ %281, %895 ], [ %281, %891 ], [ %281, %887 ], [ %281, %890 ], [ %281, %886 ], [ %281, %787 ], [ %281, %806 ], [ %281, %747 ], [ %281, %720 ], [ %281, %672 ], [ %281, %615 ], [ %281, %591 ], [ %281, %572 ], [ %281, %543 ], [ %281, %531 ], [ %281, %506 ], [ %281, %474 ], [ %281, %449 ], [ %281, %430 ], [ %281, %401 ], [ %281, %381 ], [ %281, %359 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %279 ], [ %281, %335 ], [ %281, %312 ], [ %281, %309 ], [ %281, %879 ], [ %281, %866 ]
  %1091 = load i8, i8* %1088, align 1
  %1092 = icmp eq i8 %1091, 0
  br i1 %1092, label %1093, label %279

1093:                                             ; preds = %1087, %227
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %231) #10
  %1094 = load i32, i32* %197, align 8
  %1095 = load i32, i32* %200, align 4
  %1096 = icmp eq i32 %1094, %1095
  br i1 %1096, label %1118, label %1097, !prof !2

1097:                                             ; preds = %1093
  call void @nasm_assert_failed(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i32 889, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0)) #12
  unreachable

1098:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0)) #10
  br label %1116

1099:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0)) #10
  br label %1116

1100:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17, i64 0, i64 0)) #10
  br label %1116

1101:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.18, i64 0, i64 0)) #10
  br label %1116

1102:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i64 0, i64 0)) #10
  br label %1116

1103:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.20, i64 0, i64 0)) #10
  br label %1116

1104:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.21, i64 0, i64 0)) #10
  br label %1116

1105:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.22, i64 0, i64 0), i32 %2) #10
  br label %1116

1106:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23, i64 0, i64 0)) #10
  br label %1116

1107:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.24, i64 0, i64 0)) #10
  br label %1116

1108:                                             ; preds = %164
  %1109 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 1, i64 1
  %1110 = load i32, i32* %1109, align 4
  %1111 = icmp eq i32 %1110, 252
  %1112 = select i1 %1111, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i64 0, i64 0)
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0), i8* %1112) #10
  br label %1116

1113:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.28, i64 0, i64 0)) #10
  br label %1116

1114:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29, i64 0, i64 0)) #10
  br label %1116

1115:                                             ; preds = %164
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.30, i64 0, i64 0)) #10
  br label %1116

1116:                                             ; preds = %1115, %1114, %1113, %1108, %1107, %1106, %1105, %1104, %1103, %1102, %1101, %1100, %1099, %1098
  %1117 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 9
  store i32 1, i32* %1117, align 4
  br label %1118

1118:                                             ; preds = %1093, %163, %1116, %35
  %1119 = load i64, i64* %30, align 8
  %1120 = sub nsw i64 %1119, %1
  br label %1121

1121:                                             ; preds = %4, %1118
  %1122 = phi i64 [ %1120, %1118 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %24) #10
  ret i64 %1122
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @out_eops(%struct.out_data*, %struct.extop* readonly) unnamed_addr #0 {
  %3 = icmp eq %struct.extop* %1, null
  br i1 %3, label %101, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 5
  %6 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 4
  %7 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 9
  %9 = bitcast i8** %8 to i64*
  %10 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 7
  %11 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 11
  %12 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %13 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 12
  %14 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 13
  %15 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 3
  br label %16

16:                                               ; preds = %4, %97
  %17 = phi %struct.extop* [ %1, %4 ], [ %99, %97 ]
  %18 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  switch i32 %21, label %97 [
    i32 6, label %91
    i32 1, label %22
    i32 5, label %32
    i32 3, label %66
    i32 2, label %66
    i32 4, label %66
  ]

22:                                               ; preds = %16
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %97, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to %struct.extop**
  br label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %19, %24 ], [ %29, %27 ]
  %29 = add i64 %28, -1
  %30 = load %struct.extop*, %struct.extop** %26, align 8
  tail call fastcc void @out_eops(%struct.out_data* %0, %struct.extop* %30)
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %97, label %27

32:                                               ; preds = %16
  %33 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 4
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %34, 8
  br i1 %35, label %43, label %36

36:                                               ; preds = %32
  %37 = icmp eq i64 %19, 0
  br i1 %37, label %97, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1, i32 0, i32 1
  %40 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1, i32 0, i32 0
  %41 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1, i32 0, i32 2
  %42 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1, i32 0, i32 3
  br label %45

43:                                               ; preds = %32
  %44 = shl i32 %34, 3
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i64 0, i64 0), i32 %44) #10
  br label %97

45:                                               ; preds = %38, %62
  %46 = phi i64 [ %19, %38 ], [ %47, %62 ]
  %47 = add i64 %46, -1
  store i32 0, i32* %5, align 8
  %48 = load i32, i32* %33, align 4
  %49 = sext i32 %48 to i64
  store i64 %49, i64* %10, align 8
  store i32 %48, i32* %6, align 4
  %50 = load i32, i32* %39, align 8
  store i32 %50, i32* %11, align 8
  %51 = load i64, i64* %40, align 8
  store i64 %51, i64* %12, align 8
  %52 = load i32, i32* %41, align 4
  store i32 %52, i32* %13, align 4
  store i64 0, i64* %14, align 8
  %53 = load i32, i32* %39, align 8
  %54 = icmp eq i32 %53, -1
  %55 = and i32 %53, 1
  %56 = icmp eq i32 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %62

58:                                               ; preds = %45
  %59 = load i8, i8* %42, align 8, !range !4
  %60 = icmp eq i8 %59, 0
  %61 = select i1 %60, i32 3, i32 4
  br label %62

62:                                               ; preds = %45, %58
  %63 = phi i32 [ %61, %58 ], [ 5, %45 ]
  %64 = phi i32 [ 0, %58 ], [ 2, %45 ]
  store i32 %63, i32* %7, align 4
  store i32 %64, i32* %15, align 8
  tail call fastcc void @out(%struct.out_data* %0)
  %65 = icmp eq i64 %47, 0
  br i1 %65, label %97, label %45

66:                                               ; preds = %16, %16, %16
  %67 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1, i32 0, i32 1
  %68 = bitcast i32* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 4
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = urem i64 %69, %72
  %74 = icmp eq i64 %73, 0
  %75 = sub i64 %72, %73
  %76 = select i1 %74, i64 0, i64 %75
  %77 = icmp eq i64 %19, 0
  br i1 %77, label %97, label %78

78:                                               ; preds = %66
  %79 = add i64 %76, %69
  %80 = trunc i64 %79 to i32
  %81 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 1, i32 0, i32 0
  %82 = icmp eq i64 %76, 0
  br label %83

83:                                               ; preds = %78, %89
  %84 = phi i64 [ %19, %78 ], [ %85, %89 ]
  %85 = add i64 %84, -1
  store i32 0, i32* %5, align 8
  store i32 %80, i32* %6, align 4
  %86 = load i64, i64* %81, align 8
  %87 = load i64, i64* %68, align 8
  store i32 0, i32* %7, align 4
  store i64 %86, i64* %9, align 8
  store i64 %87, i64* %10, align 8
  tail call fastcc void @out(%struct.out_data* %0) #10
  br i1 %82, label %89, label %88

88:                                               ; preds = %83
  store i32 0, i32* %7, align 4
  store i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), i8** %8, align 8
  store i64 %76, i64* %10, align 8
  tail call fastcc void @out(%struct.out_data* %0) #10
  br label %89

89:                                               ; preds = %83, %88
  %90 = icmp eq i64 %85, 0
  br i1 %90, label %97, label %83

91:                                               ; preds = %16
  store i32 0, i32* %5, align 8
  %92 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 4
  %93 = load i32, i32* %92, align 4
  %94 = trunc i64 %19 to i32
  %95 = mul i32 %93, %94
  store i32 %95, i32* %6, align 4
  %96 = sext i32 %95 to i64
  store i32 1, i32* %7, align 4
  store i64 %96, i64* %10, align 8
  tail call fastcc void @out(%struct.out_data* %0) #10
  br label %97

97:                                               ; preds = %89, %62, %27, %66, %36, %22, %43, %16, %91
  %98 = getelementptr inbounds %struct.extop, %struct.extop* %17, i64 0, i32 0
  %99 = load %struct.extop*, %struct.extop** %98, align 8
  %100 = icmp eq %struct.extop* %99, null
  br i1 %100, label %101, label %16

101:                                              ; preds = %97, %2
  ret void
}

declare %struct._IO_FILE* @nasm_open_read(i8*, i32) local_unnamed_addr #2

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #2

declare i64 @nasm_file_size(%struct._IO_FILE*) local_unnamed_addr #2

declare i8* @nasm_map_file(%struct._IO_FILE*, i64, i64) local_unnamed_addr #2

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_malloc(i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @fseeko64(%struct._IO_FILE* nocapture, i64, i32) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @feof(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @nasm_free(i8*) local_unnamed_addr #2

declare void @nasm_unmap_file(i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @add_asp(%struct.insn* nocapture, i32) unnamed_addr #0 {
  %3 = icmp eq i32 %1, 64
  %4 = select i1 %3, i32 96, i32 48
  %5 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 1, i64 5
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %16 [
    i32 241, label %7
    i32 242, label %9
    i32 243, label %10
    i32 244, label %12
  ]

7:                                                ; preds = %2
  %8 = and i32 %4, 16
  br label %16

9:                                                ; preds = %2
  br label %16

10:                                               ; preds = %2
  %11 = and i32 %4, 64
  br label %16

12:                                               ; preds = %2
  %13 = icmp eq i32 %1, 32
  %14 = select i1 %13, i32 16, i32 32
  %15 = and i32 %4, %14
  br label %16

16:                                               ; preds = %2, %12, %10, %9, %7
  %17 = phi i32 [ %4, %2 ], [ %15, %12 ], [ %11, %10 ], [ 32, %9 ], [ %8, %7 ]
  %18 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %99

21:                                               ; preds = %16
  %22 = icmp ne i32 %1, 64
  %23 = sext i32 %19 to i64
  br label %24

24:                                               ; preds = %21, %95
  %25 = phi i64 [ 0, %21 ], [ %97, %95 ]
  %26 = phi i32 [ %17, %21 ], [ %96, %95 ]
  %27 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %25, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, 12
  %30 = icmp eq i64 %29, 12
  br i1 %30, label %31, label %95

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %25, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, -1
  %35 = icmp ult i32 %34, 240
  br i1 %35, label %36, label %40

36:                                               ; preds = %31
  %37 = sext i32 %33 to i64
  %38 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %37
  %39 = load i64, i64* %38, align 8
  br label %40

40:                                               ; preds = %31, %36
  %41 = phi i64 [ %39, %36 ], [ 0, %31 ]
  %42 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %25, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, -1
  %45 = icmp ult i32 %44, 240
  br i1 %45, label %46, label %50

46:                                               ; preds = %40
  %47 = sext i32 %43 to i64
  %48 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %47
  %49 = load i64, i64* %48, align 8
  br label %50

50:                                               ; preds = %40, %46
  %51 = phi i64 [ %49, %46 ], [ 0, %40 ]
  %52 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %25, i32 4
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, i64 0, i64 %41
  %56 = or i64 %55, %51
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %68

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %25, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = icmp sgt i32 %60, 8
  %62 = and i1 %22, %61
  %63 = icmp eq i32 %60, 16
  %64 = and i1 %3, %63
  %65 = or i1 %62, %64
  %66 = select i1 %65, i32 %60, i32 -1
  %67 = and i32 %66, %26
  br label %95

68:                                               ; preds = %50
  %69 = xor i64 %51, -1
  %70 = and i64 %69, 8589934853
  %71 = icmp eq i64 %70, 0
  %72 = and i32 %26, 16
  %73 = select i1 %71, i32 %72, i32 %26
  %74 = and i64 %69, 17179869445
  %75 = icmp eq i64 %74, 0
  %76 = and i32 %73, 32
  %77 = select i1 %75, i32 %76, i32 %73
  %78 = and i64 %69, 34359738629
  %79 = icmp eq i64 %78, 0
  %80 = and i32 %77, 64
  %81 = select i1 %79, i32 %80, i32 %77
  %82 = xor i64 %55, -1
  %83 = and i64 %82, 8589934853
  %84 = icmp eq i64 %83, 0
  %85 = and i32 %81, 16
  %86 = select i1 %84, i32 %85, i32 %81
  %87 = and i64 %82, 17179869445
  %88 = icmp eq i64 %87, 0
  %89 = and i32 %86, 32
  %90 = select i1 %88, i32 %89, i32 %86
  %91 = and i64 %82, 34359738629
  %92 = icmp eq i64 %91, 0
  %93 = and i32 %90, 64
  %94 = select i1 %92, i32 %93, i32 %90
  br label %95

95:                                               ; preds = %68, %58, %24
  %96 = phi i32 [ %26, %24 ], [ %67, %58 ], [ %94, %68 ]
  %97 = add nuw nsw i64 %25, 1
  %98 = icmp slt i64 %97, %23
  br i1 %98, label %24, label %99

99:                                               ; preds = %95, %16
  %100 = phi i32 [ %17, %16 ], [ %96, %95 ]
  %101 = and i32 %100, %1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %105, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 5
  store i32 %1, i32* %104, align 8
  br label %116

105:                                              ; preds = %99
  %106 = icmp eq i32 %1, 32
  %107 = select i1 %106, i32 16, i32 32
  %108 = and i32 %100, %107
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %105
  %111 = select i1 %106, i32 241, i32 242
  store i32 %111, i32* %5, align 4
  %112 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 5
  store i32 %107, i32* %112, align 8
  br label %116

113:                                              ; preds = %105
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.95, i64 0, i64 0)) #10
  %114 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 5
  store i32 %1, i32* %114, align 8
  %115 = load i32, i32* %18, align 4
  br label %116

116:                                              ; preds = %110, %113, %103
  %117 = phi i32 [ %19, %110 ], [ %115, %113 ], [ %19, %103 ]
  %118 = phi i32 [ %107, %110 ], [ %1, %113 ], [ %1, %103 ]
  %119 = icmp eq i32 %118, 16
  %120 = select i1 %119, i32 16, i32 32
  %121 = icmp sgt i32 %117, 0
  br i1 %121, label %122, label %141

122:                                              ; preds = %116
  %123 = sext i32 %117 to i64
  br label %124

124:                                              ; preds = %122, %138
  %125 = phi i64 [ 0, %122 ], [ %139, %138 ]
  %126 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %125, i32 0
  %127 = load i64, i64* %126, align 8
  %128 = and i64 %127, 262156
  %129 = icmp eq i64 %128, 262156
  br i1 %129, label %130, label %138

130:                                              ; preds = %124
  %131 = getelementptr inbounds %struct.insn, %struct.insn* %0, i64 0, i32 6, i64 %125, i32 1
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, i32 %120, i32 %132
  %135 = icmp eq i32 %134, %118
  br i1 %135, label %138, label %136

136:                                              ; preds = %130
  %137 = and i64 %127, -262145
  store i64 %137, i64* %126, align 8
  br label %138

138:                                              ; preds = %130, %124, %136
  %139 = add nuw nsw i64 %125, 1
  %140 = icmp slt i64 %139, %123
  br i1 %140, label %124, label %141

141:                                              ; preds = %138, %116
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @find_match(%struct.itemplate** nocapture, %struct.insn*, i32, i64, i32) unnamed_addr #0 {
  %6 = alloca [5 x i64], align 16
  %7 = bitcast [5 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #10
  %8 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 19
  %9 = bitcast [5 x i64]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 40, i1 false)
  %10 = load i8, i8* %8, align 8
  %11 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %56

14:                                               ; preds = %5
  %15 = sext i8 %10 to i64
  %16 = and i64 %15, 4294967295
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %16, i32 12
  %19 = and i64 %17, 1
  %20 = icmp eq i32 %12, 1
  br i1 %20, label %40, label %21

21:                                               ; preds = %14
  %22 = sub nsw i64 %17, %19
  br label %23

23:                                               ; preds = %284, %21
  %24 = phi i64 [ 0, %21 ], [ %287, %284 ]
  %25 = phi i64 [ %22, %21 ], [ %288, %284 ]
  %26 = icmp eq i64 %24, %16
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = load i16, i16* %18, align 4
  %29 = and i16 %28, 768
  %30 = zext i16 %29 to i64
  br label %35

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %24, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 8791798054912
  br label %35

35:                                               ; preds = %27, %31
  %36 = phi i64 [ %30, %27 ], [ %34, %31 ]
  %37 = getelementptr inbounds [5 x i64], [5 x i64]* %6, i64 0, i64 %24
  store i64 %36, i64* %37, align 16
  %38 = or i64 %24, 1
  %39 = icmp eq i64 %38, %16
  br i1 %39, label %280, label %276

40:                                               ; preds = %284, %14
  %41 = phi i64 [ 0, %14 ], [ %287, %284 ]
  %42 = icmp eq i64 %19, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %40
  %44 = icmp eq i64 %41, %16
  br i1 %44, label %49, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %41, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 8791798054912
  br label %53

49:                                               ; preds = %43
  %50 = load i16, i16* %18, align 4
  %51 = and i16 %50, 768
  %52 = zext i16 %51 to i64
  br label %53

53:                                               ; preds = %49, %45
  %54 = phi i64 [ %52, %49 ], [ %48, %45 ]
  %55 = getelementptr inbounds [5 x i64], [5 x i64]* %6, i64 0, i64 %41
  store i64 %54, i64* %55, align 8
  br label %56

56:                                               ; preds = %53, %40, %5
  %57 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [0 x %struct.itemplate*], [0 x %struct.itemplate*]* @nasm_instructions, i64 0, i64 %59
  %61 = load %struct.itemplate*, %struct.itemplate** %60, align 8
  %62 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %273, label %65

65:                                               ; preds = %56
  %66 = sext i8 %10 to i64
  %67 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 0
  %68 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 11
  %69 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 7
  %70 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 8
  %71 = sub i64 128, %3
  %72 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 1
  %73 = and i64 %66, 4294967295
  br label %74

74:                                               ; preds = %65, %161
  %75 = phi i8 [ 0, %65 ], [ %157, %161 ]
  %76 = phi i32 [ 0, %65 ], [ %159, %161 ]
  %77 = phi %struct.itemplate* [ %61, %65 ], [ %162, %161 ]
  %78 = tail call fastcc i32 @matches(%struct.itemplate* %77, %struct.insn* %1, i32 %4)
  switch i32 %78, label %155 [
    i32 15, label %79
    i32 1, label %120
  ]

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %77, i64 0, i32 4
  %81 = load i8*, i8** %80, align 8
  %82 = load i8, i8* %81, align 1
  %83 = and i8 %82, -2
  %84 = icmp eq i8 %83, -8
  br i1 %84, label %85, label %155

85:                                               ; preds = %79
  %86 = load i64, i64* %67, align 8
  %87 = and i64 %86, 64
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %155

89:                                               ; preds = %85
  %90 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %155, label %92

92:                                               ; preds = %89
  %93 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 1), align 4
  %94 = and i32 %93, 1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %155

96:                                               ; preds = %92
  %97 = icmp slt i32 %90, 0
  %98 = icmp eq i8 %82, -7
  %99 = and i1 %98, %97
  br i1 %99, label %155, label %100

100:                                              ; preds = %96
  %101 = tail call fastcc i64 @calcsize(i32 %4, %struct.insn* %1, %struct.itemplate* %77) #10
  %102 = load i32, i32* %68, align 8
  %103 = and i32 %102, 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %119

105:                                              ; preds = %100
  %106 = load i32, i32* %69, align 8
  %107 = icmp eq i32 %106, %2
  br i1 %107, label %108, label %155

108:                                              ; preds = %105
  %109 = load i64, i64* %70, align 8
  %110 = sub i64 %71, %101
  %111 = add i64 %110, %109
  %112 = icmp ult i64 %111, 256
  %113 = and i1 %98, %112
  br i1 %113, label %114, label %118

114:                                              ; preds = %108
  %115 = load i32, i32* %72, align 4
  %116 = icmp eq i32 %115, 259
  br i1 %116, label %117, label %119

117:                                              ; preds = %114
  store i32 0, i32* %72, align 4
  tail call void (i32, i8*, ...) @nasm_warn(i32 65792, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.94, i64 0, i64 0)) #10
  br label %119

118:                                              ; preds = %108
  br i1 %112, label %119, label %155

119:                                              ; preds = %114, %117, %100, %118
  br label %155

120:                                              ; preds = %74
  %121 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %77, i64 0, i32 5
  %122 = load i32, i32* %121, align 8
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %123, i32 0, i64 0
  %125 = load i32, i32* %124, align 16
  %126 = and i32 %125, 1024
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %155

128:                                              ; preds = %120
  %129 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %77, i64 0, i32 1
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %132, label %155

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %77, i64 0, i32 3, i64 %73
  br label %134

134:                                              ; preds = %132, %145
  %135 = phi i64 [ 0, %132 ], [ %151, %145 ]
  %136 = icmp eq i64 %135, %73
  br i1 %136, label %137, label %141

137:                                              ; preds = %134
  %138 = load i16, i16* %133, align 2
  %139 = and i16 %138, 768
  %140 = zext i16 %139 to i64
  br label %145

141:                                              ; preds = %134
  %142 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %77, i64 0, i32 2, i64 %135
  %143 = load i64, i64* %142, align 8
  %144 = and i64 %143, 8791798054912
  br label %145

145:                                              ; preds = %137, %141
  %146 = phi i64 [ %73, %137 ], [ %135, %141 ]
  %147 = phi i64 [ %140, %137 ], [ %144, %141 ]
  %148 = getelementptr inbounds [5 x i64], [5 x i64]* %6, i64 0, i64 %146
  %149 = load i64, i64* %148, align 8
  %150 = or i64 %149, %147
  store i64 %150, i64* %148, align 8
  %151 = add nuw nsw i64 %135, 1
  %152 = load i32, i32* %129, align 4
  %153 = sext i32 %152 to i64
  %154 = icmp slt i64 %151, %153
  br i1 %154, label %134, label %155

155:                                              ; preds = %145, %128, %120, %105, %96, %89, %92, %79, %85, %119, %118, %74
  %156 = phi i32 [ 1, %120 ], [ %78, %74 ], [ 16, %119 ], [ 0, %118 ], [ 0, %85 ], [ 0, %79 ], [ 0, %92 ], [ 0, %89 ], [ 0, %96 ], [ 0, %105 ], [ 1, %128 ], [ 1, %145 ]
  %157 = phi i8 [ %75, %120 ], [ %75, %74 ], [ %75, %119 ], [ %75, %118 ], [ %75, %85 ], [ %75, %79 ], [ %75, %92 ], [ %75, %89 ], [ %75, %96 ], [ %75, %105 ], [ 1, %128 ], [ 1, %145 ]
  %158 = icmp ugt i32 %156, %76
  %159 = select i1 %158, i32 %156, i32 %76
  %160 = icmp eq i32 %159, 16
  br i1 %160, label %273, label %161

161:                                              ; preds = %155
  %162 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %77, i64 1
  %163 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %162, i64 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, -1
  br i1 %165, label %166, label %74

166:                                              ; preds = %161
  %167 = and i8 %157, 1
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %273, label %169

169:                                              ; preds = %166
  %170 = load i32, i32* %11, align 4
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %202

172:                                              ; preds = %169
  %173 = sext i8 %10 to i64
  %174 = and i64 %173, 4294967295
  %175 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %174, i32 12
  %176 = sext i32 %170 to i64
  br label %177

177:                                              ; preds = %172, %199
  %178 = phi i64 [ 0, %172 ], [ %200, %199 ]
  %179 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %178, i32 0
  %180 = load i64, i64* %179, align 8
  %181 = and i64 %180, 1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %199

183:                                              ; preds = %177
  %184 = getelementptr inbounds [5 x i64], [5 x i64]* %6, i64 0, i64 %178
  %185 = load i64, i64* %184, align 8
  %186 = tail call i64 @llvm.ctpop.i64(i64 %185), !range !5
  %187 = icmp ugt i64 %186, 1
  br i1 %187, label %273, label %188

188:                                              ; preds = %183
  %189 = icmp eq i64 %178, %174
  br i1 %189, label %190, label %196

190:                                              ; preds = %188
  %191 = load i16, i16* %175, align 4
  %192 = trunc i64 %185 to i16
  %193 = or i16 %191, %192
  store i16 %193, i16* %175, align 4
  %194 = icmp eq i64 %185, 256
  %195 = select i1 %194, i64 17179869184, i64 34359738368
  br label %196

196:                                              ; preds = %188, %190
  %197 = phi i64 [ %195, %190 ], [ %185, %188 ]
  %198 = or i64 %197, %180
  store i64 %198, i64* %179, align 8
  br label %199

199:                                              ; preds = %196, %177
  %200 = add nuw nsw i64 %178, 1
  %201 = icmp slt i64 %200, %176
  br i1 %201, label %177, label %202

202:                                              ; preds = %199, %169
  %203 = load i32, i32* %57, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [0 x %struct.itemplate*], [0 x %struct.itemplate*]* @nasm_instructions, i64 0, i64 %204
  %206 = load %struct.itemplate*, %struct.itemplate** %205, align 8
  %207 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %206, i64 0, i32 0
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %208, -1
  br i1 %209, label %273, label %210

210:                                              ; preds = %202
  %211 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 0
  %212 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 11
  %213 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 7
  %214 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 8
  %215 = sub i64 128, %3
  %216 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 1
  br label %217

217:                                              ; preds = %210, %268
  %218 = phi i32 [ %159, %210 ], [ %266, %268 ]
  %219 = phi %struct.itemplate* [ %206, %210 ], [ %269, %268 ]
  %220 = tail call fastcc i32 @matches(%struct.itemplate* %219, %struct.insn* %1, i32 %4)
  %221 = icmp eq i32 %220, 15
  br i1 %221, label %222, label %263

222:                                              ; preds = %217
  %223 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %219, i64 0, i32 4
  %224 = load i8*, i8** %223, align 8
  %225 = load i8, i8* %224, align 1
  %226 = and i8 %225, -2
  %227 = icmp eq i8 %226, -8
  br i1 %227, label %228, label %263

228:                                              ; preds = %222
  %229 = load i64, i64* %211, align 8
  %230 = and i64 %229, 64
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %263

232:                                              ; preds = %228
  %233 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %263, label %235

235:                                              ; preds = %232
  %236 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 1), align 4
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %263

239:                                              ; preds = %235
  %240 = icmp slt i32 %233, 0
  %241 = icmp eq i8 %225, -7
  %242 = and i1 %241, %240
  br i1 %242, label %263, label %243

243:                                              ; preds = %239
  %244 = tail call fastcc i64 @calcsize(i32 %4, %struct.insn* %1, %struct.itemplate* %219) #10
  %245 = load i32, i32* %212, align 8
  %246 = and i32 %245, 4
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %262

248:                                              ; preds = %243
  %249 = load i32, i32* %213, align 8
  %250 = icmp eq i32 %249, %2
  br i1 %250, label %251, label %263

251:                                              ; preds = %248
  %252 = load i64, i64* %214, align 8
  %253 = sub i64 %215, %244
  %254 = add i64 %253, %252
  %255 = icmp ult i64 %254, 256
  %256 = and i1 %241, %255
  br i1 %256, label %257, label %261

257:                                              ; preds = %251
  %258 = load i32, i32* %216, align 4
  %259 = icmp eq i32 %258, 259
  br i1 %259, label %260, label %262

260:                                              ; preds = %257
  store i32 0, i32* %216, align 4
  tail call void (i32, i8*, ...) @nasm_warn(i32 65792, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.94, i64 0, i64 0)) #10
  br label %262

261:                                              ; preds = %251
  br i1 %255, label %262, label %263

262:                                              ; preds = %257, %260, %243, %261
  br label %263

263:                                              ; preds = %248, %239, %232, %235, %222, %228, %262, %261, %217
  %264 = phi i32 [ %220, %217 ], [ 16, %262 ], [ 0, %261 ], [ 0, %228 ], [ 0, %222 ], [ 0, %235 ], [ 0, %232 ], [ 0, %239 ], [ 0, %248 ]
  %265 = icmp ugt i32 %264, %218
  %266 = select i1 %265, i32 %264, i32 %218
  %267 = icmp eq i32 %266, 16
  br i1 %267, label %273, label %268

268:                                              ; preds = %263
  %269 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %219, i64 1
  %270 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %269, i64 0, i32 0
  %271 = load i32, i32* %270, align 8
  %272 = icmp eq i32 %271, -1
  br i1 %272, label %273, label %217

273:                                              ; preds = %155, %183, %263, %268, %56, %202, %166
  %274 = phi %struct.itemplate* [ %162, %166 ], [ %206, %202 ], [ %61, %56 ], [ %219, %263 ], [ %269, %268 ], [ %162, %183 ], [ %77, %155 ]
  %275 = phi i32 [ %159, %166 ], [ %159, %202 ], [ 0, %56 ], [ 16, %263 ], [ %266, %268 ], [ %159, %183 ], [ 16, %155 ]
  store %struct.itemplate* %274, %struct.itemplate** %0, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #10
  ret i32 %275

276:                                              ; preds = %35
  %277 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %38, i32 0
  %278 = load i64, i64* %277, align 8
  %279 = and i64 %278, 8791798054912
  br label %284

280:                                              ; preds = %35
  %281 = load i16, i16* %18, align 4
  %282 = and i16 %281, 768
  %283 = zext i16 %282 to i64
  br label %284

284:                                              ; preds = %280, %276
  %285 = phi i64 [ %283, %280 ], [ %279, %276 ]
  %286 = getelementptr inbounds [5 x i64], [5 x i64]* %6, i64 0, i64 %38
  store i64 %285, i64* %286, align 8
  %287 = add nuw nsw i64 %24, 2
  %288 = add i64 %25, -2
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %40, label %23
}

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @calcsize(i32, %struct.insn*, %struct.itemplate* nocapture readonly) unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.ea, align 4
  %6 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %2, i64 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %9 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 12
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 16, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 3, i1 false)
  %11 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 248
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  store i32 8, i32* %9, align 4
  br label %15

15:                                               ; preds = %14, %3
  %16 = phi i32 [ 8, %14 ], [ 0, %3 ]
  %17 = load i8, i8* %7, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %434, label %19

19:                                               ; preds = %15
  %20 = bitcast %struct.ea* %5 to i8*
  %21 = getelementptr inbounds %struct.ea, %struct.ea* %5, i64 0, i32 6
  %22 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 19
  %23 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 16, i64 2
  %24 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 18
  %25 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 15
  %26 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 16, i64 1
  %27 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %2, i64 0, i32 5
  %28 = getelementptr inbounds %struct.ea, %struct.ea* %5, i64 0, i32 3
  %29 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 0
  %30 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 7
  %31 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 9
  %32 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 11
  %33 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 8
  %34 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 2
  %35 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 1
  %36 = icmp eq i32 %0, 64
  %37 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 5
  %38 = icmp eq i32 %0, 32
  %39 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 13
  %40 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 14
  %41 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 17
  %42 = icmp eq i32 %0, 16
  %43 = select i1 %42, i64 2, i64 4
  %44 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 5
  br label %45

45:                                               ; preds = %19, %422
  %46 = phi i8 [ %17, %19 ], [ %430, %422 ]
  %47 = phi i32 [ -1, %19 ], [ %429, %422 ]
  %48 = phi i8 [ 0, %19 ], [ %428, %422 ]
  %49 = phi i32 [ 1, %19 ], [ %427, %422 ]
  %50 = phi i8 [ 0, %19 ], [ %426, %422 ]
  %51 = phi i32 [ -1, %19 ], [ %425, %422 ]
  %52 = phi i64 [ 0, %19 ], [ %424, %422 ]
  %53 = phi i8* [ %7, %19 ], [ %423, %422 ]
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  %55 = zext i8 %46 to i32
  %56 = and i32 %55, 3
  %57 = zext i8 %50 to i32
  %58 = shl nuw nsw i32 %57, 2
  %59 = and i32 %58, 4
  %60 = or i32 %56, %59
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %61
  switch i8 %46, label %421 [
    i8 1, label %63
    i8 2, label %63
    i8 3, label %63
    i8 4, label %63
    i8 5, label %67
    i8 6, label %67
    i8 7, label %67
    i8 8, label %68
    i8 9, label %68
    i8 10, label %68
    i8 11, label %68
    i8 12, label %106
    i8 13, label %106
    i8 14, label %106
    i8 15, label %106
    i8 16, label %109
    i8 17, label %109
    i8 18, label %109
    i8 19, label %109
    i8 20, label %109
    i8 21, label %109
    i8 22, label %109
    i8 23, label %109
    i8 24, label %111
    i8 25, label %111
    i8 26, label %111
    i8 27, label %111
    i8 28, label %113
    i8 29, label %113
    i8 30, label %113
    i8 31, label %113
    i8 32, label %125
    i8 33, label %125
    i8 34, label %125
    i8 35, label %125
    i8 36, label %127
    i8 37, label %127
    i8 38, label %127
    i8 39, label %127
    i8 40, label %132
    i8 41, label %132
    i8 42, label %132
    i8 43, label %132
    i8 44, label %134
    i8 45, label %134
    i8 46, label %134
    i8 47, label %134
    i8 48, label %136
    i8 49, label %136
    i8 50, label %136
    i8 51, label %136
    i8 52, label %138
    i8 53, label %138
    i8 54, label %138
    i8 55, label %138
    i8 56, label %150
    i8 57, label %150
    i8 58, label %150
    i8 59, label %150
    i8 60, label %152
    i8 61, label %152
    i8 62, label %152
    i8 63, label %152
    i8 122, label %154
    i8 123, label %154
    i8 124, label %157
    i8 125, label %157
    i8 126, label %157
    i8 127, label %157
    i8 -96, label %159
    i8 -95, label %159
    i8 -94, label %159
    i8 -93, label %159
    i8 -88, label %186
    i8 -84, label %199
    i8 -83, label %199
    i8 -82, label %199
    i8 -81, label %199
    i8 -80, label %201
    i8 -79, label %201
    i8 -78, label %201
    i8 -77, label %201
    i8 -72, label %219
    i8 -71, label %228
    i8 -70, label %228
    i8 -69, label %228
    i8 -68, label %230
    i8 -67, label %230
    i8 -66, label %230
    i8 -65, label %230
    i8 -64, label %422
    i8 -63, label %422
    i8 -62, label %422
    i8 -61, label %422
    i8 -56, label %232
    i8 -55, label %240
    i8 -54, label %422
    i8 -53, label %248
    i8 -52, label %422
    i8 -51, label %422
    i8 -50, label %422
    i8 -49, label %422
    i8 -48, label %253
    i8 -47, label %257
    i8 -46, label %422
    i8 -45, label %261
    i8 -44, label %263
    i8 -43, label %266
    i8 -42, label %422
    i8 -40, label %269
    i8 -39, label %422
    i8 -38, label %272
    i8 -37, label %272
    i8 -36, label %274
    i8 -35, label %422
    i8 -34, label %277
    i8 -33, label %281
    i8 -32, label %285
    i8 -31, label %313
    i8 -16, label %422
    i8 -15, label %317
    i8 -12, label %422
    i8 -11, label %422
    i8 -10, label %319
    i8 -9, label %319
    i8 -8, label %422
    i8 -7, label %422
    i8 -5, label %321
    i8 -4, label %323
    i8 -3, label %324
    i8 -2, label %325
    i8 64, label %326
    i8 65, label %326
    i8 66, label %326
    i8 67, label %326
    i8 72, label %326
    i8 73, label %326
    i8 74, label %326
    i8 75, label %326
    i8 80, label %326
    i8 81, label %326
    i8 82, label %326
    i8 83, label %326
    i8 88, label %326
    i8 89, label %326
    i8 90, label %326
    i8 91, label %326
    i8 -128, label %326
    i8 -127, label %326
    i8 -126, label %326
    i8 -125, label %326
    i8 -124, label %326
    i8 -123, label %326
    i8 -122, label %326
    i8 -121, label %326
    i8 -120, label %326
    i8 -119, label %326
    i8 -118, label %326
    i8 -117, label %326
    i8 -116, label %326
    i8 -115, label %326
    i8 -114, label %326
    i8 -113, label %326
    i8 -112, label %326
    i8 -111, label %326
    i8 -110, label %326
    i8 -109, label %326
    i8 -108, label %326
    i8 -107, label %326
    i8 -106, label %326
    i8 -105, label %326
    i8 -104, label %326
    i8 -103, label %326
    i8 -102, label %326
    i8 -101, label %326
    i8 -100, label %326
    i8 -99, label %326
    i8 -98, label %326
    i8 -97, label %326
  ]

63:                                               ; preds = %45, %45, %45, %45
  %64 = zext i8 %46 to i64
  %65 = getelementptr inbounds i8, i8* %54, i64 %64
  %66 = add nsw i64 %52, %64
  br label %422

67:                                               ; preds = %45, %45, %45
  br label %422

68:                                               ; preds = %45, %45, %45, %45
  %69 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %61, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, -1
  %72 = icmp ult i32 %71, 240
  br i1 %72, label %74, label %73

73:                                               ; preds = %68
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.61, i64 0, i64 0)) #12
  unreachable

74:                                               ; preds = %68
  %75 = sext i32 %70 to i64
  %76 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %75
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %75
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, -2147483640
  %81 = icmp eq i32 %80, 8
  %82 = select i1 %81, i32 7, i32 0
  %83 = lshr i64 %77, 32
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 8
  %86 = or i32 %82, %85
  %87 = xor i64 %77, -1
  %88 = and i64 %87, 4301259013
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %74
  %91 = or i32 %86, 128
  br label %99

92:                                               ; preds = %74
  %93 = and i64 %87, 4294967557
  %94 = icmp eq i64 %93, 0
  %95 = icmp sgt i32 %79, 3
  %96 = and i1 %95, %94
  %97 = or i32 %86, 64
  %98 = select i1 %96, i32 %97, i32 %86
  br label %99

99:                                               ; preds = %90, %92
  %100 = phi i32 [ %91, %90 ], [ %98, %92 ]
  %101 = and i32 %100, 201
  %102 = load i32, i32* %9, align 4
  %103 = or i32 %102, %101
  store i32 %103, i32* %9, align 4
  %104 = getelementptr inbounds i8, i8* %53, i64 2
  %105 = add nsw i64 %52, 1
  br label %422

106:                                              ; preds = %45, %45, %45, %45
  %107 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %61, i32 2
  %108 = load i32, i32* %107, align 4
  br label %422

109:                                              ; preds = %45, %45, %45, %45, %45, %45, %45, %45
  %110 = add nsw i64 %52, 1
  br label %422

111:                                              ; preds = %45, %45, %45, %45
  %112 = add nsw i64 %52, 2
  br label %422

113:                                              ; preds = %45, %45, %45, %45
  %114 = getelementptr inbounds %struct.operand, %struct.operand* %62, i64 0, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = and i64 %115, 60129542144
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %123, label %118

118:                                              ; preds = %113
  %119 = and i64 %115, 8589934592
  %120 = icmp eq i64 %119, 0
  %121 = select i1 %120, i64 4, i64 2
  %122 = add nsw i64 %121, %52
  br label %422

123:                                              ; preds = %113
  %124 = add nsw i64 %52, %43
  br label %422

125:                                              ; preds = %45, %45, %45, %45
  %126 = add nsw i64 %52, 4
  br label %422

127:                                              ; preds = %45, %45, %45, %45
  %128 = load i32, i32* %44, align 8
  %129 = ashr i32 %128, 3
  %130 = sext i32 %129 to i64
  %131 = add nsw i64 %52, %130
  br label %422

132:                                              ; preds = %45, %45, %45, %45
  %133 = add nsw i64 %52, 1
  br label %422

134:                                              ; preds = %45, %45, %45, %45
  %135 = add nsw i64 %52, 8
  br label %422

136:                                              ; preds = %45, %45, %45, %45
  %137 = add nsw i64 %52, 2
  br label %422

138:                                              ; preds = %45, %45, %45, %45
  %139 = getelementptr inbounds %struct.operand, %struct.operand* %62, i64 0, i32 0
  %140 = load i64, i64* %139, align 8
  %141 = and i64 %140, 60129542144
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %148, label %143

143:                                              ; preds = %138
  %144 = and i64 %140, 8589934592
  %145 = icmp eq i64 %144, 0
  %146 = select i1 %145, i64 4, i64 2
  %147 = add nsw i64 %146, %52
  br label %422

148:                                              ; preds = %138
  %149 = add nsw i64 %52, %43
  br label %422

150:                                              ; preds = %45, %45, %45, %45
  %151 = add nsw i64 %52, 4
  br label %422

152:                                              ; preds = %45, %45, %45, %45
  %153 = add nsw i64 %52, 2
  br label %422

154:                                              ; preds = %45, %45
  %155 = getelementptr inbounds i8, i8* %53, i64 2
  %156 = add nsw i64 %52, 1
  br label %422

157:                                              ; preds = %45, %45, %45, %45
  %158 = add nsw i64 %52, 1
  br label %422

159:                                              ; preds = %45, %45, %45, %45
  %160 = load i32, i32* %9, align 4
  %161 = or i32 %160, 1024
  store i32 %161, i32* %9, align 4
  %162 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %61, i32 2
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, -1
  %165 = icmp ult i32 %164, 240
  br i1 %165, label %167, label %166

166:                                              ; preds = %159
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.62, i64 0, i64 0)) #12
  unreachable

167:                                              ; preds = %159
  %168 = sext i32 %163 to i64
  %169 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %168
  %170 = load i32, i32* %169, align 4
  store i32 %170, i32* %39, align 8
  %171 = and i32 %170, -2147483632
  %172 = icmp eq i32 %171, 16
  %173 = select i1 %172, i8 8, i8 0
  %174 = load i8, i8* %23, align 2
  %175 = or i8 %173, %174
  store i8 %175, i8* %23, align 2
  %176 = getelementptr inbounds i8, i8* %53, i64 2
  %177 = load i8, i8* %54, align 1
  %178 = zext i8 %177 to i32
  store i32 %178, i32* %40, align 4
  %179 = getelementptr inbounds i8, i8* %53, i64 3
  %180 = load i8, i8* %176, align 1
  %181 = zext i8 %180 to i32
  store i32 %181, i32* %25, align 8
  %182 = getelementptr inbounds i8, i8* %53, i64 4
  %183 = load i8, i8* %179, align 1
  %184 = zext i8 %183 to i32
  %185 = add nsw i32 %184, -192
  store i32 %185, i32* %41, align 8
  br label %422

186:                                              ; preds = %45
  %187 = load i32, i32* %9, align 4
  %188 = or i32 %187, 1024
  store i32 %188, i32* %9, align 4
  store i32 0, i32* %39, align 8
  %189 = getelementptr inbounds i8, i8* %53, i64 2
  %190 = load i8, i8* %54, align 1
  %191 = zext i8 %190 to i32
  store i32 %191, i32* %40, align 4
  %192 = getelementptr inbounds i8, i8* %53, i64 3
  %193 = load i8, i8* %189, align 1
  %194 = zext i8 %193 to i32
  store i32 %194, i32* %25, align 8
  %195 = getelementptr inbounds i8, i8* %53, i64 4
  %196 = load i8, i8* %192, align 1
  %197 = zext i8 %196 to i32
  %198 = add nsw i32 %197, -192
  store i32 %198, i32* %41, align 8
  br label %422

199:                                              ; preds = %45, %45, %45, %45
  %200 = add nsw i64 %52, 4
  br label %422

201:                                              ; preds = %45, %45, %45, %45
  %202 = load i32, i32* %9, align 4
  %203 = or i32 %202, 256
  store i32 %203, i32* %9, align 4
  %204 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %61, i32 2
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, -1
  %207 = icmp ult i32 %206, 240
  br i1 %207, label %209, label %208

208:                                              ; preds = %201
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.62, i64 0, i64 0)) #12
  unreachable

209:                                              ; preds = %201
  %210 = sext i32 %205 to i64
  %211 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %210
  %212 = load i32, i32* %211, align 4
  store i32 %212, i32* %39, align 8
  %213 = getelementptr inbounds i8, i8* %53, i64 2
  %214 = load i8, i8* %54, align 1
  %215 = zext i8 %214 to i32
  store i32 %215, i32* %40, align 4
  %216 = getelementptr inbounds i8, i8* %53, i64 3
  %217 = load i8, i8* %213, align 1
  %218 = zext i8 %217 to i32
  store i32 %218, i32* %25, align 8
  br label %422

219:                                              ; preds = %45
  %220 = load i32, i32* %9, align 4
  %221 = or i32 %220, 256
  store i32 %221, i32* %9, align 4
  store i32 0, i32* %39, align 8
  %222 = getelementptr inbounds i8, i8* %53, i64 2
  %223 = load i8, i8* %54, align 1
  %224 = zext i8 %223 to i32
  store i32 %224, i32* %40, align 4
  %225 = getelementptr inbounds i8, i8* %53, i64 3
  %226 = load i8, i8* %222, align 1
  %227 = zext i8 %226 to i32
  store i32 %227, i32* %25, align 8
  br label %422

228:                                              ; preds = %45, %45, %45
  %229 = trunc i32 %56 to i8
  br label %422

230:                                              ; preds = %45, %45, %45, %45
  %231 = add nsw i64 %52, 1
  br label %422

232:                                              ; preds = %45
  switch i32 %0, label %233 [
    i32 64, label %604
    i32 16, label %236
  ]

233:                                              ; preds = %232
  %234 = load i32, i32* %37, align 4
  %235 = icmp ne i32 %234, 241
  br label %236

236:                                              ; preds = %232, %233
  %237 = phi i1 [ %235, %233 ], [ false, %232 ]
  %238 = zext i1 %237 to i64
  %239 = add nsw i64 %52, %238
  br label %422

240:                                              ; preds = %45
  br i1 %38, label %244, label %241

241:                                              ; preds = %240
  %242 = load i32, i32* %37, align 4
  %243 = icmp ne i32 %242, 242
  br label %244

244:                                              ; preds = %240, %241
  %245 = phi i1 [ false, %240 ], [ %243, %241 ]
  %246 = zext i1 %245 to i64
  %247 = add nsw i64 %52, %246
  br label %422

248:                                              ; preds = %45
  br i1 %36, label %249, label %604

249:                                              ; preds = %248
  %250 = load i32, i32* %37, align 4
  %251 = add i32 %250, -241
  %252 = icmp ult i32 %251, 2
  br i1 %252, label %604, label %422

253:                                              ; preds = %45
  %254 = load i32, i32* %11, align 8
  switch i32 %254, label %255 [
    i32 246, label %422
    i32 0, label %256
  ]

255:                                              ; preds = %253
  call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.50, i64 0, i64 0)) #10
  br label %422

256:                                              ; preds = %253
  store i32 246, i32* %11, align 8
  br label %422

257:                                              ; preds = %45
  %258 = load i32, i32* %11, align 8
  switch i32 %258, label %259 [
    i32 247, label %422
    i32 0, label %260
  ]

259:                                              ; preds = %257
  call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.50, i64 0, i64 0)) #10
  br label %422

260:                                              ; preds = %257
  store i32 247, i32* %11, align 8
  br label %422

261:                                              ; preds = %45
  %262 = and i32 %51, -9
  br label %422

263:                                              ; preds = %45
  %264 = load i32, i32* %9, align 4
  %265 = or i32 %264, 8
  store i32 %265, i32* %9, align 4
  br label %422

266:                                              ; preds = %45
  %267 = load i32, i32* %9, align 4
  %268 = or i32 %267, 512
  store i32 %268, i32* %9, align 4
  br label %422

269:                                              ; preds = %45
  %270 = getelementptr inbounds i8, i8* %53, i64 2
  %271 = add nsw i64 %52, 1
  br label %422

272:                                              ; preds = %45, %45
  %273 = add nsw i64 %52, 1
  br label %422

274:                                              ; preds = %45
  %275 = load i32, i32* %9, align 4
  %276 = or i32 %275, 32
  store i32 %276, i32* %9, align 4
  br label %422

277:                                              ; preds = %45
  %278 = load i32, i32* %35, align 4
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %422

280:                                              ; preds = %277
  store i32 250, i32* %35, align 4
  br label %422

281:                                              ; preds = %45
  %282 = load i32, i32* %35, align 4
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %422

284:                                              ; preds = %281
  store i32 252, i32* %35, align 4
  br label %422

285:                                              ; preds = %45
  %286 = load i32, i32* %30, align 8
  %287 = icmp eq i32 %286, -1
  br i1 %287, label %288, label %295

288:                                              ; preds = %285
  %289 = load i32, i32* %31, align 8
  %290 = icmp eq i32 %289, -1
  br i1 %290, label %291, label %295

291:                                              ; preds = %288
  %292 = load i32, i32* %32, align 8
  %293 = and i32 %292, 8
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %296, label %295

295:                                              ; preds = %285, %288, %291
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.51, i64 0, i64 0)) #10
  br label %422

296:                                              ; preds = %291
  %297 = and i32 %292, 1
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %300, label %299

299:                                              ; preds = %296
  call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.52, i64 0, i64 0)) #10
  br label %422

300:                                              ; preds = %296
  %301 = load i64, i64* %33, align 8
  %302 = load i32, i32* %34, align 4
  %303 = add i32 %302, 1
  %304 = icmp ult i32 %303, 17
  br i1 %304, label %305, label %309

305:                                              ; preds = %300
  %306 = sext i32 %303 to i64
  %307 = getelementptr inbounds [17 x i64], [17 x i64]* @switch.table.calcsize, i64 0, i64 %306
  %308 = load i64, i64* %307, align 8
  br label %309

309:                                              ; preds = %300, %305
  %310 = phi i64 [ %308, %305 ], [ 0, %300 ]
  %311 = mul nsw i64 %310, %301
  %312 = add nsw i64 %311, %52
  br label %422

313:                                              ; preds = %45
  %314 = load i32, i32* %29, align 8
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %422

316:                                              ; preds = %313
  store i32 256, i32* %29, align 8
  br label %422

317:                                              ; preds = %45
  %318 = add nsw i64 %52, 1
  br label %422

319:                                              ; preds = %45, %45
  %320 = add nsw i64 %52, 1
  br label %422

321:                                              ; preds = %45
  %322 = add nsw i64 %52, 1
  br label %422

323:                                              ; preds = %45
  br label %422

324:                                              ; preds = %45
  br label %422

325:                                              ; preds = %45
  br label %422

326:                                              ; preds = %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45, %45
  %327 = lshr i32 %55, 3
  %328 = and i32 %327, 3
  %329 = shl nuw nsw i32 %57, 1
  %330 = and i32 %329, 4
  %331 = or i32 %328, %330
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 -86, i64 24, i1 false)
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332
  store i8 0, i8* %21, align 2
  %334 = icmp sgt i8 %46, -1
  br i1 %334, label %335, label %347

335:                                              ; preds = %326
  %336 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %61, i32 2
  %337 = load i32, i32* %336, align 4
  %338 = add i32 %337, -1
  %339 = icmp ult i32 %338, 240
  br i1 %339, label %341, label %340

340:                                              ; preds = %335
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.63, i64 0, i64 0)) #12
  unreachable

341:                                              ; preds = %335
  %342 = sext i32 %337 to i64
  %343 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %342
  %344 = load i64, i64* %343, align 8
  %345 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %342
  %346 = load i32, i32* %345, align 4
  br label %349

347:                                              ; preds = %326
  %348 = and i32 %55, 7
  br label %349

349:                                              ; preds = %347, %341
  %350 = phi i32 [ %346, %341 ], [ %348, %347 ]
  %351 = phi i64 [ %344, %341 ], [ 0, %347 ]
  %352 = load i8, i8* %22, align 8
  %353 = icmp slt i8 %352, 0
  %354 = sext i8 %352 to i64
  %355 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %354
  %356 = icmp eq %struct.operand* %355, null
  %357 = or i1 %353, %356
  br i1 %357, label %375, label %358

358:                                              ; preds = %349
  %359 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %354, i32 12
  %360 = load i16, i16* %359, align 4
  %361 = and i16 %360, 192
  %362 = icmp eq i16 %361, 0
  br i1 %362, label %375, label %363

363:                                              ; preds = %358
  %364 = load i8, i8* %23, align 2
  %365 = or i8 %364, 16
  store i8 %365, i8* %23, align 2
  %366 = and i16 %360, 64
  %367 = icmp eq i16 %366, 0
  br i1 %367, label %391, label %368

368:                                              ; preds = %363
  %369 = load i32, i32* %24, align 4
  %370 = trunc i32 %369 to i8
  %371 = shl i8 %370, 5
  %372 = add i8 %371, 96
  %373 = and i8 %372, 96
  %374 = or i8 %373, %365
  store i8 %374, i8* %23, align 2
  br label %391

375:                                              ; preds = %358, %349
  %376 = load i32, i32* %25, align 8
  %377 = load i8, i8* %23, align 2
  %378 = trunc i32 %376 to i8
  %379 = shl i8 %378, 3
  %380 = and i8 %379, 96
  %381 = or i8 %380, %377
  store i8 %381, i8* %23, align 2
  %382 = load i8, i8* %26, align 1
  %383 = and i8 %379, -128
  %384 = or i8 %382, %383
  store i8 %384, i8* %26, align 1
  %385 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332, i32 12
  %386 = load i16, i16* %385, align 4
  %387 = and i16 %386, 32
  %388 = icmp eq i16 %387, 0
  br i1 %388, label %391, label %389

389:                                              ; preds = %375
  %390 = or i8 %381, 16
  store i8 %390, i8* %23, align 2
  br label %391

391:                                              ; preds = %363, %375, %389, %368
  %392 = load i32, i32* %27, align 8
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %393, i32 0, i64 1
  %395 = load i32, i32* %394, align 4
  %396 = trunc i32 %395 to i8
  %397 = icmp slt i8 %396, 0
  br i1 %397, label %398, label %408

398:                                              ; preds = %391
  %399 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332, i32 10
  %400 = load i32, i32* %399, align 4
  %401 = or i32 %400, 64
  store i32 %401, i32* %399, align 4
  %402 = icmp eq i32 %47, -1
  br i1 %402, label %408, label %403

403:                                              ; preds = %398
  %404 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332, i32 3
  store i32 %47, i32* %404, align 8
  %405 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332, i32 4
  store i32 1, i32* %405, align 4
  %406 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332, i32 5
  store i32 %47, i32* %406, align 8
  %407 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %332, i32 6
  store i32 2, i32* %407, align 4
  br label %408

408:                                              ; preds = %398, %403, %391
  %409 = call fastcc i32 @process_ea(%struct.operand* %333, %struct.ea* nonnull %5, i32 %0, i32 %350, i64 %351, %struct.insn* %1, i8** nonnull %4)
  %410 = icmp eq i32 %409, %49
  br i1 %410, label %411, label %419

411:                                              ; preds = %408
  %412 = load i8, i8* %21, align 2
  %413 = zext i8 %412 to i32
  %414 = load i32, i32* %9, align 4
  %415 = or i32 %414, %413
  store i32 %415, i32* %9, align 4
  %416 = load i32, i32* %28, align 4
  %417 = sext i32 %416 to i64
  %418 = add nsw i64 %52, %417
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  br label %422

419:                                              ; preds = %408
  %420 = load i8*, i8** %4, align 8
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i64 0, i64 0), i8* %420) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  br label %604

421:                                              ; preds = %45
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.54, i64 0, i64 0), i32 %55, i32 %55) #12
  unreachable

422:                                              ; preds = %249, %411, %257, %260, %259, %253, %256, %255, %277, %281, %313, %45, %45, %45, %45, %316, %295, %309, %299, %284, %280, %45, %45, %45, %45, %45, %45, %45, %45, %143, %148, %118, %123, %325, %324, %323, %321, %319, %317, %45, %45, %274, %272, %45, %269, %45, %266, %263, %261, %45, %45, %244, %236, %230, %228, %219, %209, %199, %186, %167, %157, %154, %152, %150, %136, %134, %132, %127, %125, %111, %109, %106, %99, %67, %63
  %423 = phi i8* [ %54, %325 ], [ %54, %324 ], [ %54, %323 ], [ %54, %321 ], [ %54, %319 ], [ %54, %317 ], [ %54, %313 ], [ %54, %316 ], [ %54, %299 ], [ %54, %309 ], [ %54, %295 ], [ %54, %281 ], [ %54, %284 ], [ %54, %277 ], [ %54, %280 ], [ %54, %274 ], [ %54, %272 ], [ %270, %269 ], [ %54, %266 ], [ %54, %263 ], [ %54, %261 ], [ %54, %244 ], [ %54, %236 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %45 ], [ %54, %230 ], [ %54, %228 ], [ %225, %219 ], [ %216, %209 ], [ %54, %199 ], [ %195, %186 ], [ %182, %167 ], [ %54, %157 ], [ %155, %154 ], [ %54, %152 ], [ %54, %150 ], [ %54, %143 ], [ %54, %148 ], [ %54, %136 ], [ %54, %134 ], [ %54, %132 ], [ %54, %127 ], [ %54, %125 ], [ %54, %118 ], [ %54, %123 ], [ %54, %111 ], [ %54, %109 ], [ %54, %106 ], [ %104, %99 ], [ %54, %67 ], [ %65, %63 ], [ %54, %255 ], [ %54, %256 ], [ %54, %253 ], [ %54, %259 ], [ %54, %260 ], [ %54, %257 ], [ %54, %411 ], [ %54, %249 ]
  %424 = phi i64 [ %52, %325 ], [ %52, %324 ], [ %52, %323 ], [ %322, %321 ], [ %320, %319 ], [ %318, %317 ], [ %52, %313 ], [ %52, %316 ], [ %52, %299 ], [ %312, %309 ], [ %52, %295 ], [ %52, %281 ], [ %52, %284 ], [ %52, %277 ], [ %52, %280 ], [ %52, %274 ], [ %273, %272 ], [ %271, %269 ], [ %52, %266 ], [ %52, %263 ], [ %52, %261 ], [ %247, %244 ], [ %239, %236 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %52, %45 ], [ %231, %230 ], [ %52, %228 ], [ %52, %219 ], [ %52, %209 ], [ %200, %199 ], [ %52, %186 ], [ %52, %167 ], [ %158, %157 ], [ %156, %154 ], [ %153, %152 ], [ %151, %150 ], [ %147, %143 ], [ %149, %148 ], [ %137, %136 ], [ %135, %134 ], [ %133, %132 ], [ %131, %127 ], [ %126, %125 ], [ %122, %118 ], [ %124, %123 ], [ %112, %111 ], [ %110, %109 ], [ %52, %106 ], [ %105, %99 ], [ %52, %67 ], [ %66, %63 ], [ %52, %255 ], [ %52, %256 ], [ %52, %253 ], [ %52, %259 ], [ %52, %260 ], [ %52, %257 ], [ %418, %411 ], [ %52, %249 ]
  %425 = phi i32 [ %51, %325 ], [ %51, %324 ], [ %51, %323 ], [ %51, %321 ], [ %51, %319 ], [ %51, %317 ], [ %51, %313 ], [ %51, %316 ], [ %51, %299 ], [ %51, %309 ], [ %51, %295 ], [ %51, %281 ], [ %51, %284 ], [ %51, %277 ], [ %51, %280 ], [ %51, %274 ], [ %51, %272 ], [ %51, %269 ], [ %51, %266 ], [ %51, %263 ], [ %262, %261 ], [ %51, %244 ], [ %51, %236 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %45 ], [ %51, %230 ], [ %51, %228 ], [ %51, %219 ], [ %51, %209 ], [ %51, %199 ], [ %51, %186 ], [ %51, %167 ], [ %51, %157 ], [ %51, %154 ], [ %51, %152 ], [ %51, %150 ], [ %51, %143 ], [ %51, %148 ], [ %51, %136 ], [ %51, %134 ], [ %51, %132 ], [ %51, %127 ], [ %51, %125 ], [ %51, %118 ], [ %51, %123 ], [ %51, %111 ], [ %51, %109 ], [ %51, %106 ], [ %51, %99 ], [ %51, %67 ], [ %51, %63 ], [ %51, %255 ], [ %51, %256 ], [ %51, %253 ], [ %51, %259 ], [ %51, %260 ], [ %51, %257 ], [ %51, %411 ], [ %51, %249 ]
  %426 = phi i8 [ 0, %325 ], [ 0, %324 ], [ 0, %323 ], [ 0, %321 ], [ 0, %319 ], [ 0, %317 ], [ 0, %313 ], [ 0, %316 ], [ 0, %299 ], [ 0, %309 ], [ 0, %295 ], [ 0, %281 ], [ 0, %284 ], [ 0, %277 ], [ 0, %280 ], [ 0, %274 ], [ 0, %272 ], [ 0, %269 ], [ 0, %266 ], [ 0, %263 ], [ 0, %261 ], [ 0, %244 ], [ 0, %236 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %45 ], [ 0, %230 ], [ 0, %228 ], [ 0, %219 ], [ 0, %209 ], [ 0, %199 ], [ 0, %186 ], [ 0, %167 ], [ 0, %157 ], [ 0, %154 ], [ 0, %152 ], [ 0, %150 ], [ 0, %143 ], [ 0, %148 ], [ 0, %136 ], [ 0, %134 ], [ 0, %132 ], [ 0, %127 ], [ 0, %125 ], [ 0, %118 ], [ 0, %123 ], [ 0, %111 ], [ 0, %109 ], [ 0, %106 ], [ 0, %99 ], [ %46, %67 ], [ 0, %63 ], [ 0, %255 ], [ 0, %256 ], [ 0, %253 ], [ 0, %259 ], [ 0, %260 ], [ 0, %257 ], [ 0, %411 ], [ 0, %249 ]
  %427 = phi i32 [ 4, %325 ], [ 3, %324 ], [ 2, %323 ], [ %49, %321 ], [ %49, %319 ], [ %49, %317 ], [ %49, %313 ], [ %49, %316 ], [ %49, %299 ], [ %49, %309 ], [ %49, %295 ], [ %49, %281 ], [ %49, %284 ], [ %49, %277 ], [ %49, %280 ], [ %49, %274 ], [ %49, %272 ], [ %49, %269 ], [ %49, %266 ], [ %49, %263 ], [ %49, %261 ], [ %49, %244 ], [ %49, %236 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %45 ], [ %49, %230 ], [ %49, %228 ], [ %49, %219 ], [ %49, %209 ], [ %49, %199 ], [ %49, %186 ], [ %49, %167 ], [ %49, %157 ], [ %49, %154 ], [ %49, %152 ], [ %49, %150 ], [ %49, %143 ], [ %49, %148 ], [ %49, %136 ], [ %49, %134 ], [ %49, %132 ], [ %49, %127 ], [ %49, %125 ], [ %49, %118 ], [ %49, %123 ], [ %49, %111 ], [ %49, %109 ], [ %49, %106 ], [ %49, %99 ], [ %49, %67 ], [ %49, %63 ], [ %49, %255 ], [ %49, %256 ], [ %49, %253 ], [ %49, %259 ], [ %49, %260 ], [ %49, %257 ], [ %49, %411 ], [ %49, %249 ]
  %428 = phi i8 [ %48, %325 ], [ %48, %324 ], [ %48, %323 ], [ %48, %321 ], [ %48, %319 ], [ %48, %317 ], [ %48, %313 ], [ %48, %316 ], [ %48, %299 ], [ %48, %309 ], [ %48, %295 ], [ %48, %281 ], [ %48, %284 ], [ %48, %277 ], [ %48, %280 ], [ %48, %274 ], [ %48, %272 ], [ %48, %269 ], [ %48, %266 ], [ %48, %263 ], [ %48, %261 ], [ %48, %244 ], [ %48, %236 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %45 ], [ %48, %230 ], [ %229, %228 ], [ %48, %219 ], [ %48, %209 ], [ %48, %199 ], [ %48, %186 ], [ %48, %167 ], [ %48, %157 ], [ %48, %154 ], [ %48, %152 ], [ %48, %150 ], [ %48, %143 ], [ %48, %148 ], [ %48, %136 ], [ %48, %134 ], [ %48, %132 ], [ %48, %127 ], [ %48, %125 ], [ %48, %118 ], [ %48, %123 ], [ %48, %111 ], [ %48, %109 ], [ %48, %106 ], [ %48, %99 ], [ %48, %67 ], [ %48, %63 ], [ %48, %255 ], [ %48, %256 ], [ %48, %253 ], [ %48, %259 ], [ %48, %260 ], [ %48, %257 ], [ %48, %411 ], [ %48, %249 ]
  %429 = phi i32 [ %47, %325 ], [ %47, %324 ], [ %47, %323 ], [ %47, %321 ], [ %47, %319 ], [ %47, %317 ], [ %47, %313 ], [ %47, %316 ], [ %47, %299 ], [ %47, %309 ], [ %47, %295 ], [ %47, %281 ], [ %47, %284 ], [ %47, %277 ], [ %47, %280 ], [ %47, %274 ], [ %47, %272 ], [ %47, %269 ], [ %47, %266 ], [ %47, %263 ], [ %47, %261 ], [ %47, %244 ], [ %47, %236 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %45 ], [ %47, %230 ], [ %47, %228 ], [ %47, %219 ], [ %47, %209 ], [ %47, %199 ], [ %47, %186 ], [ %47, %167 ], [ %47, %157 ], [ %47, %154 ], [ %47, %152 ], [ %47, %150 ], [ %47, %143 ], [ %47, %148 ], [ %47, %136 ], [ %47, %134 ], [ %47, %132 ], [ %47, %127 ], [ %47, %125 ], [ %47, %118 ], [ %47, %123 ], [ %47, %111 ], [ %47, %109 ], [ %108, %106 ], [ %47, %99 ], [ %47, %67 ], [ %47, %63 ], [ %47, %255 ], [ %47, %256 ], [ %47, %253 ], [ %47, %259 ], [ %47, %260 ], [ %47, %257 ], [ %47, %411 ], [ %47, %249 ]
  %430 = load i8, i8* %423, align 1
  %431 = icmp eq i8 %430, 0
  br i1 %431, label %432, label %45

432:                                              ; preds = %422
  %433 = load i32, i32* %9, align 4
  br label %434

434:                                              ; preds = %432, %15
  %435 = phi i32 [ %16, %15 ], [ %433, %432 ]
  %436 = phi i64 [ 0, %15 ], [ %424, %432 ]
  %437 = phi i32 [ -1, %15 ], [ %425, %432 ]
  %438 = phi i8 [ 0, %15 ], [ %428, %432 ]
  %439 = and i32 %435, %437
  store i32 %439, i32* %9, align 4
  %440 = and i32 %439, 512
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %448, label %442

442:                                              ; preds = %434
  %443 = trunc i32 %439 to i8
  %444 = icmp slt i8 %443, 0
  br i1 %444, label %445, label %446

445:                                              ; preds = %442
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.55, i64 0, i64 0)) #10
  br label %604

446:                                              ; preds = %442
  %447 = and i32 %439, -65
  store i32 %447, i32* %9, align 4
  br label %448

448:                                              ; preds = %434, %446
  %449 = phi i32 [ %439, %434 ], [ %447, %446 ]
  %450 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 6
  %451 = load i32, i32* %450, align 8
  switch i32 %451, label %458 [
    i32 261, label %452
    i32 262, label %455
    i32 263, label %455
  ]

452:                                              ; preds = %448
  %453 = and i32 %449, 1024
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %604, label %458

455:                                              ; preds = %448, %448
  %456 = and i32 %449, 256
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %604, label %458

458:                                              ; preds = %452, %455, %448
  %459 = and i32 %449, 1280
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %514, label %461

461:                                              ; preds = %458
  %462 = trunc i32 %449 to i8
  %463 = icmp slt i8 %462, 0
  br i1 %463, label %464, label %465

464:                                              ; preds = %461
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.56, i64 0, i64 0)) #10
  br label %604

465:                                              ; preds = %461
  %466 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 15
  %467 = load i32, i32* %466, align 8
  %468 = and i32 %467, 48
  switch i32 %468, label %476 [
    i32 0, label %469
    i32 32, label %469
    i32 16, label %471
  ]

469:                                              ; preds = %465, %465
  %470 = and i32 %449, -9
  br label %473

471:                                              ; preds = %465
  %472 = or i32 %449, 8
  br label %473

473:                                              ; preds = %469, %471
  %474 = phi i32 [ %472, %471 ], [ %470, %469 ]
  %475 = phi i32 [ 7, %471 ], [ 15, %469 ]
  store i32 %474, i32* %9, align 4
  br label %476

476:                                              ; preds = %473, %465
  %477 = phi i32 [ %449, %465 ], [ %474, %473 ]
  %478 = phi i32 [ 15, %465 ], [ %475, %473 ]
  %479 = icmp eq i32 %0, 64
  br i1 %479, label %488, label %480

480:                                              ; preds = %476
  %481 = and i32 %477, %478
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %487

483:                                              ; preds = %480
  %484 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 13
  %485 = load i32, i32* %484, align 8
  %486 = icmp sgt i32 %485, 7
  br i1 %486, label %487, label %488

487:                                              ; preds = %480, %483
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i64 0, i64 0)) #10
  br label %604

488:                                              ; preds = %476, %483
  %489 = and i32 %477, 1024
  %490 = icmp eq i32 %489, 0
  br i1 %490, label %491, label %499

491:                                              ; preds = %488
  %492 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 13
  %493 = load i32, i32* %492, align 8
  %494 = icmp sgt i32 %493, 15
  br i1 %494, label %498, label %495

495:                                              ; preds = %491
  %496 = load i8, i8* %10, align 4
  %497 = icmp ugt i8 %496, 15
  br i1 %497, label %498, label %501

498:                                              ; preds = %495, %491
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.58, i64 0, i64 0)) #10
  br label %604

499:                                              ; preds = %488
  %500 = add nsw i64 %436, 4
  br label %542

501:                                              ; preds = %495
  %502 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 14
  %503 = load i32, i32* %502, align 4
  %504 = icmp ne i32 %503, 1
  %505 = and i32 %477, 11
  %506 = icmp ne i32 %505, 0
  %507 = or i1 %506, %504
  %508 = icmp eq i32 %451, 262
  %509 = or i1 %508, %507
  br i1 %509, label %510, label %512

510:                                              ; preds = %501
  %511 = add nsw i64 %436, 3
  br label %542

512:                                              ; preds = %501
  %513 = add nsw i64 %436, 2
  br label %542

514:                                              ; preds = %458
  %515 = and i32 %449, 79
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %542, label %517

517:                                              ; preds = %514
  %518 = trunc i32 %449 to i8
  %519 = icmp slt i8 %518, 0
  br i1 %519, label %520, label %521

520:                                              ; preds = %517
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i64 0, i64 0)) #10
  br label %604

521:                                              ; preds = %517
  %522 = icmp eq i32 %0, 64
  br i1 %522, label %523, label %525

523:                                              ; preds = %521
  %524 = add nsw i64 %436, 1
  br label %542

525:                                              ; preds = %521
  %526 = and i32 %449, 107
  %527 = icmp eq i32 %526, 32
  br i1 %527, label %528, label %541

528:                                              ; preds = %525
  %529 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  %530 = and i32 %529, 130048
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %541, label %532

532:                                              ; preds = %528
  %533 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 2
  %534 = load i32, i32* %533, align 4
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %538, label %536

536:                                              ; preds = %532
  %537 = call i8* @prefix_name(i32 %534) #13
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.70, i64 0, i64 0), i8* %537) #10
  br label %538

538:                                              ; preds = %536, %532
  %539 = add nsw i64 %436, 1
  %540 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 2
  br label %561

541:                                              ; preds = %528, %525
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i64 0, i64 0)) #10
  br label %604

542:                                              ; preds = %499, %512, %510, %514, %523
  %543 = phi i64 [ %524, %523 ], [ %436, %514 ], [ %513, %512 ], [ %511, %510 ], [ %500, %499 ]
  %544 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 2
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 245
  br i1 %546, label %547, label %561

547:                                              ; preds = %542
  %548 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %2, i64 0, i32 5
  %549 = load i32, i32* %548, align 8
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %550, i32 0, i64 1
  %552 = load i32, i32* %551, align 4
  %553 = and i32 %552, 8
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %560, label %555

555:                                              ; preds = %547
  %556 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 0
  %557 = load i64, i64* %556, align 8
  %558 = and i64 %557, 12
  %559 = icmp eq i64 %558, 12
  br i1 %559, label %561, label %560

560:                                              ; preds = %547, %555
  call void (i32, i8*, ...) @nasm_warn(i32 786688, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.60, i64 0, i64 0)) #10
  br label %561

561:                                              ; preds = %542, %538, %560, %555
  %562 = phi i32* [ %540, %538 ], [ %544, %542 ], [ %544, %560 ], [ %544, %555 ]
  %563 = phi i64 [ %539, %538 ], [ %543, %542 ], [ %543, %560 ], [ %543, %555 ]
  %564 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 1
  %565 = load i32, i32* %564, align 4
  %566 = add i32 %565, -257
  %567 = icmp ugt i32 %566, 1
  br i1 %567, label %585, label %568

568:                                              ; preds = %561
  %569 = zext i32 %566 to i64
  %570 = zext i8 %438 to i64
  %571 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* @bad_hle_warn.warn, i64 0, i64 %569, i64 %570
  %572 = load i32, i32* %571, align 4
  %573 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 0, i32 0
  %574 = load i64, i64* %573, align 8
  %575 = and i64 %574, 12
  %576 = icmp eq i64 %575, 12
  %577 = select i1 %576, i32 %572, i32 2
  switch i32 %577, label %585 [
    i32 2, label %583
    i32 1, label %578
  ]

578:                                              ; preds = %568
  %579 = load i32, i32* %562, align 8
  %580 = icmp eq i32 %579, 245
  br i1 %580, label %585, label %581

581:                                              ; preds = %578
  %582 = call i8* @prefix_name(i32 %565) #13
  call void (i32, i8*, ...) @nasm_warn(i32 524544, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.71, i64 0, i64 0), i8* %582) #10
  br label %585

583:                                              ; preds = %568
  %584 = call i8* @prefix_name(i32 %565) #13
  call void (i32, i8*, ...) @nasm_warn(i32 524544, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i8* %584) #10
  br label %585

585:                                              ; preds = %561, %568, %578, %581, %583
  %586 = load i32, i32* @globalbnd, align 4
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %600, label %588

588:                                              ; preds = %585
  %589 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %2, i64 0, i32 5
  %590 = load i32, i32* %589, align 8
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %591, i32 0, i64 1
  %593 = load i32, i32* %592, align 4
  %594 = and i32 %593, 256
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %600, label %596

596:                                              ; preds = %588
  %597 = load i32, i32* %564, align 4
  %598 = icmp eq i32 %597, 260
  br i1 %598, label %600, label %599

599:                                              ; preds = %596
  store i32 259, i32* %564, align 4
  br label %600

600:                                              ; preds = %596, %588, %585, %599
  %601 = call fastcc i32 @emit_prefix(%struct.out_data* null, i32 %0, %struct.insn* %1)
  %602 = sext i32 %601 to i64
  %603 = add nsw i64 %563, %602
  br label %604

604:                                              ; preds = %249, %248, %232, %464, %487, %498, %419, %455, %452, %600, %541, %520, %445
  %605 = phi i64 [ -1, %419 ], [ -1, %445 ], [ %603, %600 ], [ -1, %520 ], [ -1, %541 ], [ -1, %452 ], [ -1, %455 ], [ -1, %464 ], [ -1, %487 ], [ -1, %498 ], [ -1, %232 ], [ -1, %248 ], [ -1, %249 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  ret i64 %605
}

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i64 @insn_size(i32, i64, i32, %struct.insn*) local_unnamed_addr #0 {
  %5 = alloca %struct.itemplate*, align 8
  %6 = bitcast %struct.itemplate** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  store %struct.itemplate* inttoptr (i64 -6148914691236517206 to %struct.itemplate*), %struct.itemplate** %5, align 8
  %7 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %65 [
    i32 -1, label %172
    i32 66, label %9
  ]

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.48, i64 0, i64 0)) #10
  br label %172

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 4
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %64 [
    i32 1, label %17
    i32 2, label %31
  ]

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 2
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %64, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 9
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %64

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 7
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 8
  %30 = load i64, i64* %29, align 8
  tail call void @define_label(i8* nonnull %11, i32 %28, i64 %30, i1 zeroext false) #10
  br label %172

31:                                               ; preds = %14
  %32 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 34
  %35 = icmp eq i64 %34, 34
  br i1 %35, label %36, label %64

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 7
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %64

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 9
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %64

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 1, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, 2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %64, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 1, i32 7
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %53, label %64

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 1, i32 9
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %64

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 8
  %59 = load i64, i64* %58, align 8
  %60 = trunc i64 %59 to i32
  %61 = or i32 %60, 1073741824
  %62 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 1, i32 8
  %63 = load i64, i64* %62, align 8
  tail call void @define_label(i8* nonnull %11, i32 %61, i64 %63, i1 zeroext false) #10
  br label %172

64:                                               ; preds = %53, %49, %44, %40, %36, %31, %22, %17, %14
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.49, i64 0, i64 0)) #10
  br label %172

65:                                               ; preds = %4
  %66 = icmp ult i32 %8, 8
  br i1 %66, label %67, label %80

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 7
  %69 = load %struct.extop*, %struct.extop** %68, align 8
  %70 = tail call fastcc i64 @len_extops(%struct.extop* %69)
  %71 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 4
  %72 = load i32, i32* %71, align 4
  %73 = shl i32 %72, 8
  %74 = load %struct.extop*, %struct.extop** %68, align 8
  %75 = tail call fastcc i32 @eops_typeinfo(%struct.extop* %74) #10
  %76 = or i32 %75, %73
  %77 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %78 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %77, i64 0, i32 6
  %79 = load void (i32)*, void (i32)** %78, align 8
  tail call void %79(i32 %76) #10
  br label %172

80:                                               ; preds = %65
  %81 = icmp eq i32 %8, 16
  br i1 %81, label %82, label %115

82:                                               ; preds = %80
  %83 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 7
  %84 = load %struct.extop*, %struct.extop** %83, align 8
  %85 = getelementptr inbounds %struct.extop, %struct.extop* %84, i64 0, i32 1
  %86 = bitcast %union.anon* %85 to i8**
  %87 = load i8*, i8** %86, align 8
  %88 = tail call i64 @nasm_file_size_by_path(i8* %87) #10
  %89 = icmp eq i64 %88, -1
  br i1 %89, label %90, label %91

90:                                               ; preds = %82
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %87) #10
  br label %172

91:                                               ; preds = %82
  %92 = getelementptr inbounds %struct.extop, %struct.extop* %84, i64 0, i32 0
  %93 = load %struct.extop*, %struct.extop** %92, align 8
  %94 = icmp eq %struct.extop* %93, null
  br i1 %94, label %109, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.extop, %struct.extop* %93, i64 0, i32 1, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = icmp sgt i64 %88, %97
  br i1 %98, label %99, label %109

99:                                               ; preds = %95
  %100 = sub nsw i64 %88, %97
  %101 = getelementptr inbounds %struct.extop, %struct.extop* %93, i64 0, i32 0
  %102 = load %struct.extop*, %struct.extop** %101, align 8
  %103 = icmp eq %struct.extop* %102, null
  br i1 %103, label %109, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %struct.extop, %struct.extop* %102, i64 0, i32 1, i32 0, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = icmp sgt i64 %100, %106
  %108 = select i1 %107, i64 %106, i64 %100
  br label %109

109:                                              ; preds = %104, %95, %99, %91
  %110 = phi i64 [ %100, %99 ], [ %88, %91 ], [ 0, %95 ], [ %108, %104 ]
  %111 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 9
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %110, %113
  store i32 1, i32* %111, align 4
  br label %172

115:                                              ; preds = %80
  tail call fastcc void @add_asp(%struct.insn* %3, i32 %2)
  %116 = call fastcc i32 @find_match(%struct.itemplate** nonnull %5, %struct.insn* %3, i32 %0, i64 %1, i32 %2)
  %117 = icmp eq i32 %116, 16
  br i1 %117, label %118, label %172

118:                                              ; preds = %115
  %119 = load %struct.itemplate*, %struct.itemplate** %5, align 8
  %120 = tail call fastcc i64 @calcsize(i32 %2, %struct.insn* %3, %struct.itemplate* %119)
  %121 = load i32, i32* %7, align 4
  %122 = and i32 %121, -8
  %123 = icmp eq i32 %122, 8
  br i1 %123, label %124, label %146

124:                                              ; preds = %118
  %125 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 8
  %126 = load i64, i64* %125, align 8
  %127 = trunc i64 %126 to i32
  %128 = shl i32 %127, 8
  switch i32 %121, label %145 [
    i32 8, label %129
    i32 9, label %131
    i32 10, label %133
    i32 11, label %135
    i32 12, label %137
    i32 13, label %139
    i32 14, label %141
    i32 15, label %143
  ]

129:                                              ; preds = %124
  %130 = or i32 %128, 16
  br label %146

131:                                              ; preds = %124
  %132 = or i32 %128, 24
  br label %146

133:                                              ; preds = %124
  %134 = or i32 %128, 32
  br label %146

135:                                              ; preds = %124
  %136 = or i32 %128, 48
  br label %146

137:                                              ; preds = %124
  %138 = or i32 %128, 56
  br label %146

139:                                              ; preds = %124
  %140 = or i32 %128, 64
  br label %146

141:                                              ; preds = %124
  %142 = or i32 %128, 72
  br label %146

143:                                              ; preds = %124
  %144 = or i32 %128, 80
  br label %146

145:                                              ; preds = %124
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i32 1032) #12
  unreachable

146:                                              ; preds = %118, %129, %131, %133, %135, %137, %139, %141, %143
  %147 = phi i32 [ %144, %143 ], [ %142, %141 ], [ %140, %139 ], [ %138, %137 ], [ %136, %135 ], [ %134, %133 ], [ %132, %131 ], [ %130, %129 ], [ 8, %118 ]
  %148 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %149 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %148, i64 0, i32 6
  %150 = load void (i32)*, void (i32)** %149, align 8
  tail call void %150(i32 %147) #10
  %151 = load i32, i32* %7, align 4
  %152 = add i32 %151, 1
  %153 = icmp ult i32 %152, 17
  br i1 %153, label %154, label %172

154:                                              ; preds = %146
  %155 = lshr i32 130561, %152
  %156 = and i32 %155, 1
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %172, label %158

158:                                              ; preds = %154
  %159 = sext i32 %152 to i64
  %160 = getelementptr inbounds [17 x i64], [17 x i64]* @switch.table.insn_size, i64 0, i64 %159
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 6, i64 0, i32 8
  %163 = load i64, i64* %162, align 8
  %164 = mul nsw i64 %163, %161
  %165 = icmp eq i64 %164, %120
  br i1 %165, label %166, label %172

166:                                              ; preds = %158
  %167 = getelementptr inbounds %struct.insn, %struct.insn* %3, i64 0, i32 9
  %168 = load i32, i32* %167, align 4
  %169 = sext i32 %168 to i64
  %170 = mul nsw i64 %163, %169
  store i64 %170, i64* %162, align 8
  %171 = mul nsw i64 %120, %169
  store i32 1, i32* %167, align 4
  br label %172

172:                                              ; preds = %154, %146, %166, %158, %64, %57, %26, %13, %115, %90, %109, %4, %67
  %173 = phi i64 [ %70, %67 ], [ 0, %4 ], [ 0, %90 ], [ %114, %109 ], [ -1, %115 ], [ 0, %13 ], [ 0, %26 ], [ 0, %57 ], [ 0, %64 ], [ %171, %166 ], [ %120, %158 ], [ %120, %146 ], [ %120, %154 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret i64 %173
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @len_extops(%struct.extop* readonly) unnamed_addr #0 {
  %2 = icmp eq %struct.extop* %0, null
  br i1 %2, label %66, label %3

3:                                                ; preds = %1, %61
  %4 = phi i64 [ %62, %61 ], [ 0, %1 ]
  %5 = phi %struct.extop* [ %64, %61 ], [ %0, %1 ]
  %6 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %61 [
    i32 6, label %57
    i32 1, label %8
    i32 2, label %17
    i32 4, label %17
    i32 3, label %17
    i32 5, label %33
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to %struct.extop**
  %13 = load %struct.extop*, %struct.extop** %12, align 8
  %14 = tail call fastcc i64 @len_extops(%struct.extop* %13)
  %15 = mul i64 %14, %10
  %16 = add i64 %15, %4
  br label %61

17:                                               ; preds = %3, %3, %3
  %18 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 1, i32 0, i32 1
  %19 = bitcast i32* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %22 to i64
  %24 = urem i64 %20, %23
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %23, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %27, %20
  %31 = mul i64 %30, %29
  %32 = add i64 %31, %4
  br label %61

33:                                               ; preds = %3
  %34 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 1, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 4
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, 7
  br i1 %38, label %50, label %39

39:                                               ; preds = %33
  %40 = shl i32 %37, 3
  %41 = add nsw i32 %40, -1
  %42 = zext i32 %41 to i64
  %43 = shl i64 2, %42
  %44 = sub nsw i64 0, %43
  %45 = icmp slt i64 %35, %44
  %46 = icmp sle i64 %43, %35
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %39
  tail call fastcc void @warn_overflow(i32 %37) #10
  %49 = load i32, i32* %36, align 4
  br label %50

50:                                               ; preds = %33, %39, %48
  %51 = phi i32 [ %37, %33 ], [ %37, %39 ], [ %49, %48 ]
  %52 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = sext i32 %51 to i64
  %55 = mul i64 %53, %54
  %56 = add i64 %55, %4
  br label %61

57:                                               ; preds = %3
  %58 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, %4
  br label %61

61:                                               ; preds = %3, %57, %50, %17, %8
  %62 = phi i64 [ %4, %3 ], [ %56, %50 ], [ %32, %17 ], [ %16, %8 ], [ %60, %57 ]
  %63 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 0
  %64 = load %struct.extop*, %struct.extop** %63, align 8
  %65 = icmp eq %struct.extop* %64, null
  br i1 %65, label %66, label %3

66:                                               ; preds = %61, %1
  %67 = phi i64 [ 0, %1 ], [ %62, %61 ]
  ret i64 %67
}

declare i64 @nasm_file_size_by_path(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @out(%struct.out_data*) unnamed_addr #0 {
  %2 = alloca %union.anon.1, align 8
  %3 = bitcast %union.anon.1* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #10
  %4 = getelementptr inbounds %union.anon.1, %union.anon.1* %2, i64 0, i32 0
  store i64 -6148914691236517206, i64* %4, align 8
  %5 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %198, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  switch i32 %10, label %99 [
    i32 3, label %11
    i32 4, label %14
    i32 5, label %96
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %13 = load i64, i64* %12, align 8
  br label %22

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 13
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  br label %22

22:                                               ; preds = %14, %11
  %23 = phi i64 [ %19, %14 ], [ %13, %11 ]
  %24 = phi i32 [ %21, %14 ], [ -1, %11 ]
  %25 = icmp ugt i64 %6, 8
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %22
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i32 376, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i64 0, i64 0)) #12
  unreachable

27:                                               ; preds = %22
  %28 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %29 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %28, i64 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %30, 3
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %28, i64 0, i32 3
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %99

37:                                               ; preds = %27
  %38 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, %24
  br i1 %40, label %41, label %99

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 12
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %99

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 6
  %47 = load i32, i32* %46, align 4
  %48 = ashr i32 %47, 3
  %49 = sext i32 %48 to i64
  %50 = icmp ult i64 %6, %49
  %51 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 3
  br i1 %50, label %54, label %52

52:                                               ; preds = %45
  store i32 0, i32* %51, align 8
  %53 = trunc i64 %6 to i32
  br label %57

54:                                               ; preds = %45
  %55 = load i32, i32* %51, align 8
  %56 = trunc i64 %6 to i32
  switch i32 %55, label %84 [
    i32 0, label %57
    i32 1, label %69
    i32 2, label %80
  ]

57:                                               ; preds = %52, %54
  %58 = phi i32 [ %53, %52 ], [ %56, %54 ]
  %59 = icmp sgt i32 %58, 7
  br i1 %59, label %93, label %60

60:                                               ; preds = %57
  %61 = shl i64 %6, 3
  %62 = add nuw nsw i64 %61, 4294967295
  %63 = and i64 %62, 4294967295
  %64 = shl i64 2, %63
  %65 = sub nsw i64 0, %64
  %66 = icmp slt i64 %23, %65
  %67 = icmp sle i64 %64, %23
  %68 = or i1 %66, %67
  br i1 %68, label %91, label %93

69:                                               ; preds = %54
  %70 = icmp sgt i32 %56, 7
  br i1 %70, label %93, label %71

71:                                               ; preds = %69
  %72 = shl i64 %6, 3
  %73 = add nuw nsw i64 %72, 4294967295
  %74 = and i64 %73, 4294967295
  %75 = shl i64 1, %74
  %76 = sub nsw i64 0, %75
  %77 = icmp slt i64 %23, %76
  %78 = icmp sle i64 %75, %23
  %79 = or i1 %77, %78
  br i1 %79, label %91, label %93

80:                                               ; preds = %54
  %81 = icmp sgt i32 %56, 7
  br i1 %81, label %93, label %82

82:                                               ; preds = %80
  %83 = icmp slt i64 %23, 0
  br i1 %83, label %91, label %85

84:                                               ; preds = %54
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i32 318) #12
  unreachable

85:                                               ; preds = %82
  %86 = shl i64 %6, 3
  %87 = add nuw nsw i64 %86, 4294967295
  %88 = and i64 %87, 4294967295
  %89 = shl i64 2, %88
  %90 = icmp sgt i64 %89, %23
  br i1 %90, label %93, label %91

91:                                               ; preds = %85, %82, %71, %60
  %92 = phi i32 [ %56, %85 ], [ %56, %82 ], [ %56, %71 ], [ %58, %60 ]
  tail call fastcc void @warn_overflow(i32 %92) #10
  br label %93

93:                                               ; preds = %57, %60, %69, %71, %80, %85, %91
  store i64 %23, i64* %4, align 8
  %94 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 9
  %95 = bitcast i8** %94 to %union.anon.1**
  store %union.anon.1* %2, %union.anon.1** %95, align 8
  store i32 0, i32* %9, align 4
  br label %99

96:                                               ; preds = %8
  %97 = icmp ugt i64 %6, 8
  br i1 %97, label %98, label %99, !prof !3

98:                                               ; preds = %96
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i32 392, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i64 0, i64 0)) #12
  unreachable

99:                                               ; preds = %8, %96, %27, %37, %41, %93
  %100 = phi i64 [ 0, %93 ], [ %32, %41 ], [ %32, %37 ], [ %32, %27 ], [ 2, %96 ], [ 0, %8 ]
  %101 = phi i64 [ 0, %93 ], [ %6, %41 ], [ %6, %37 ], [ %6, %27 ], [ %6, %96 ], [ 0, %8 ]
  %102 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 14
  %103 = load %struct.src_location_stack*, %struct.src_location_stack** @_src_bottom, align 8
  %104 = bitcast %struct.src_location_stack* %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %103, i64 0, i32 0, i32 1
  %107 = load i32, i32* %106, align 8
  %108 = bitcast %struct.src_location* %102 to i8*
  %109 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 14, i32 0
  %110 = bitcast i8** %109 to i64*
  store i64 %105, i64* %110, align 8
  %111 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 14, i32 1
  store i32 %107, i32* %111, align 8
  %112 = icmp eq i64 %105, 0
  br i1 %112, label %133, label %113

113:                                              ; preds = %99
  %114 = inttoptr i64 %105 to i8*
  %115 = load i8*, i8** getelementptr inbounds (%struct.last_debug_info, %struct.last_debug_info* @out.dbg, i64 0, i32 0, i32 0), align 8
  %116 = load i32, i32* getelementptr inbounds (%struct.last_debug_info, %struct.last_debug_info* @out.dbg, i64 0, i32 0, i32 1), align 8
  %117 = icmp ne i8* %115, %114
  %118 = icmp ne i32 %107, %116
  %119 = or i1 %117, %118
  %120 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 1
  %121 = load i32, i32* %120, align 8
  %122 = load i32, i32* getelementptr inbounds (%struct.last_debug_info, %struct.last_debug_info* @out.dbg, i64 0, i32 1), align 8
  %123 = icmp ne i32 %121, %122
  %124 = or i1 %119, %123
  br i1 %124, label %125, label %133

125:                                              ; preds = %113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.last_debug_info* @out.dbg to i8*), i8* align 8 %108, i64 16, i1 false)
  %126 = load i32, i32* %120, align 8
  store i32 %126, i32* getelementptr inbounds (%struct.last_debug_info, %struct.last_debug_info* @out.dbg, i64 0, i32 1), align 8
  %127 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %128 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %127, i64 0, i32 3
  %129 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %128, align 8
  %130 = load i8*, i8** getelementptr inbounds (%struct.last_debug_info, %struct.last_debug_info* @out.dbg, i64 0, i32 0, i32 0), align 8
  %131 = load i32, i32* getelementptr inbounds (%struct.last_debug_info, %struct.last_debug_info* @out.dbg, i64 0, i32 0, i32 1), align 8
  %132 = load i32, i32* %120, align 8
  call void %129(i8* %130, i32 %131, i32 %132) #10
  br label %133

133:                                              ; preds = %99, %125, %113
  %134 = icmp ugt i64 %101, %100
  br i1 %134, label %135, label %158

135:                                              ; preds = %133
  %136 = load i32, i32* %9, align 4
  %137 = icmp eq i32 %136, 4
  br i1 %137, label %142, label %138

138:                                              ; preds = %135
  %139 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 3
  %140 = load i32, i32* %139, align 8
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %142, label %148

142:                                              ; preds = %138, %135
  %143 = trunc i64 %101 to i32
  %144 = shl i32 %143, 3
  %145 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %146 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %145, i64 0, i32 1
  %147 = load i8*, i8** %146, align 8
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.33, i64 0, i64 0), i32 %144, i8* %147) #10
  br label %155

148:                                              ; preds = %138
  %149 = trunc i64 %101 to i32
  %150 = shl i32 %149, 3
  %151 = icmp eq i32 %136, 5
  %152 = select i1 %151, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0)
  %153 = trunc i64 %100 to i32
  %154 = shl i32 %153, 3
  call void (i32, i8*, ...) @nasm_warn(i32 2162688, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.34, i64 0, i64 0), i32 %150, i8* %152, i32 %154) #10
  br label %155

155:                                              ; preds = %148, %142
  %156 = load i64, i64* %5, align 8
  %157 = sub i64 %156, %100
  store i64 %100, i64* %5, align 8
  br label %158

158:                                              ; preds = %155, %133
  %159 = phi i64 [ %157, %155 ], [ 0, %133 ]
  %160 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %161 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %160, i64 0, i32 2
  %162 = load void (%struct.out_data*)*, void (%struct.out_data*)** %161, align 8
  call void %162(%struct.out_data* %0) #10
  %163 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 1
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, -1
  br i1 %165, label %170, label %166, !prof !3

166:                                              ; preds = %158
  %167 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %168 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %167, i64 0, i32 10
  %169 = load void (%struct.out_data*)*, void (%struct.out_data*)** %168, align 8
  call void %169(%struct.out_data* %0) #10
  br label %174

170:                                              ; preds = %158
  %171 = load i32, i32* %9, align 4
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %174, label %173

173:                                              ; preds = %170
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.37, i64 0, i64 0)) #10
  br label %174

174:                                              ; preds = %170, %173, %166
  %175 = load i64, i64* %5, align 8
  %176 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 0
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, %175
  store i64 %178, i64* %176, align 8
  %179 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 5
  %180 = load i32, i32* %179, align 8
  %181 = trunc i64 %175 to i32
  %182 = add i32 %180, %181
  store i32 %182, i32* %179, align 8
  %183 = icmp eq i64 %159, 0
  br i1 %183, label %198, label %184

184:                                              ; preds = %174
  store i32 2, i32* %9, align 4
  store i64 %159, i64* %5, align 8
  %185 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %186 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %185, i64 0, i32 2
  %187 = load void (%struct.out_data*)*, void (%struct.out_data*)** %186, align 8
  call void %187(%struct.out_data* %0) #10
  %188 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %189 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %188, i64 0, i32 10
  %190 = load void (%struct.out_data*)*, void (%struct.out_data*)** %189, align 8
  call void %190(%struct.out_data* %0) #10
  %191 = load i64, i64* %176, align 8
  %192 = add i64 %191, %159
  store i64 %192, i64* %176, align 8
  %193 = load i32, i32* %179, align 8
  %194 = trunc i64 %159 to i32
  %195 = add i32 %193, %194
  store i32 %195, i32* %179, align 8
  %196 = load i64, i64* %5, align 8
  %197 = add i64 %196, %159
  store i64 %197, i64* %5, align 8
  br label %198

198:                                              ; preds = %184, %174, %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @warn_overflow(i32) unnamed_addr #0 {
  switch i32 %0, label %9 [
    i32 1, label %10
    i32 2, label %2
    i32 4, label %3
    i32 8, label %4
    i32 10, label %5
    i32 16, label %6
    i32 32, label %7
    i32 64, label %8
  ]

2:                                                ; preds = %1
  br label %10

3:                                                ; preds = %1
  br label %10

4:                                                ; preds = %1
  br label %10

5:                                                ; preds = %1
  br label %10

6:                                                ; preds = %1
  br label %10

7:                                                ; preds = %1
  br label %10

8:                                                ; preds = %1
  br label %10

9:                                                ; preds = %1
  br label %10

10:                                               ; preds = %1, %2, %3, %4, %5, %6, %7, %8, %9
  %11 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), %9 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i64 0, i64 0), %8 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i64 0, i64 0), %7 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), %5 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0), %4 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0), %3 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0), %2 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0), %1 ]
  tail call void (i32, i8*, ...) @nasm_warn(i32 1179904, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.38, i64 0, i64 0), i8* nonnull %11) #10
  ret void
}

declare void @define_label(i8*, i32, i64, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @eops_typeinfo(%struct.extop* readonly) unnamed_addr #7 {
  %2 = icmp eq %struct.extop* %0, null
  br i1 %2, label %53, label %3

3:                                                ; preds = %1, %48
  %4 = phi i32 [ %49, %48 ], [ 0, %1 ]
  %5 = phi %struct.extop* [ %51, %48 ], [ %0, %1 ]
  %6 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %31 [
    i32 0, label %48
    i32 1, label %8
    i32 3, label %14
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 1
  %10 = bitcast %union.anon* %9 to %struct.extop**
  %11 = load %struct.extop*, %struct.extop** %10, align 8
  %12 = tail call fastcc i32 @eops_typeinfo(%struct.extop* %11)
  %13 = or i32 %12, %4
  br label %48

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 4
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %48 [
    i32 1, label %17
    i32 2, label %19
    i32 4, label %21
    i32 8, label %23
    i32 10, label %25
    i32 16, label %27
    i32 32, label %29
  ]

17:                                               ; preds = %14
  %18 = or i32 %4, 16
  br label %48

19:                                               ; preds = %14
  %20 = or i32 %4, 24
  br label %48

21:                                               ; preds = %14
  %22 = or i32 %4, 40
  br label %48

23:                                               ; preds = %14
  %24 = or i32 %4, 48
  br label %48

25:                                               ; preds = %14
  %26 = or i32 %4, 56
  br label %48

27:                                               ; preds = %14
  %28 = or i32 %4, 72
  br label %48

29:                                               ; preds = %14
  %30 = or i32 %4, 80
  br label %48

31:                                               ; preds = %3
  %32 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 4
  %33 = load i32, i32* %32, align 4
  switch i32 %33, label %48 [
    i32 1, label %34
    i32 2, label %36
    i32 4, label %38
    i32 8, label %40
    i32 10, label %42
    i32 16, label %44
    i32 32, label %46
  ]

34:                                               ; preds = %31
  %35 = or i32 %4, 16
  br label %48

36:                                               ; preds = %31
  %37 = or i32 %4, 24
  br label %48

38:                                               ; preds = %31
  %39 = or i32 %4, 32
  br label %48

40:                                               ; preds = %31
  %41 = or i32 %4, 48
  br label %48

42:                                               ; preds = %31
  %43 = or i32 %4, 56
  br label %48

44:                                               ; preds = %31
  %45 = or i32 %4, 72
  br label %48

46:                                               ; preds = %31
  %47 = or i32 %4, 80
  br label %48

48:                                               ; preds = %34, %36, %38, %40, %42, %44, %46, %31, %17, %19, %21, %23, %25, %27, %29, %14, %8, %3
  %49 = phi i32 [ %4, %31 ], [ %47, %46 ], [ %45, %44 ], [ %43, %42 ], [ %41, %40 ], [ %39, %38 ], [ %37, %36 ], [ %35, %34 ], [ %4, %14 ], [ %30, %29 ], [ %28, %27 ], [ %26, %25 ], [ %24, %23 ], [ %22, %21 ], [ %20, %19 ], [ %18, %17 ], [ %13, %8 ], [ %4, %3 ]
  %50 = getelementptr inbounds %struct.extop, %struct.extop* %5, i64 0, i32 0
  %51 = load %struct.extop*, %struct.extop** %50, align 8
  %52 = icmp eq %struct.extop* %51, null
  br i1 %52, label %53, label %3

53:                                               ; preds = %48, %1
  %54 = phi i32 [ 0, %1 ], [ %49, %48 ]
  ret i32 %54
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @process_ea(%struct.operand*, %struct.ea*, i32, i32, i64, %struct.insn*, i8** nocapture) unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 11
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 4
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 5
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 10
  %16 = load i32, i32* %15, align 4
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.64, i64 0, i64 0), i8** %6, align 8
  %17 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 0
  store i32 1, i32* %17, align 4
  %18 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 8
  store i8 0, i8* %19, align 4
  %20 = and i32 %3, -2147483640
  %21 = icmp eq i32 %20, 8
  %22 = select i1 %21, i32 7, i32 0
  %23 = lshr i64 %4, 32
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 8
  %26 = or i32 %25, %22
  %27 = xor i64 %4, -1
  %28 = and i64 %27, 4301259013
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %7
  %31 = or i32 %26, 128
  br label %39

32:                                               ; preds = %7
  %33 = and i64 %27, 4294967557
  %34 = icmp eq i64 %33, 0
  %35 = icmp sgt i32 %3, 3
  %36 = and i1 %35, %34
  %37 = or i32 %26, 64
  %38 = select i1 %36, i32 %37, i32 %26
  br label %39

39:                                               ; preds = %30, %32
  %40 = phi i32 [ %31, %30 ], [ %38, %32 ]
  %41 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 6
  %42 = load i8, i8* %41, align 2
  %43 = trunc i32 %40 to i8
  %44 = and i8 %43, -52
  %45 = or i8 %44, %42
  store i8 %45, i8* %41, align 2
  %46 = and i32 %3, -2147483632
  %47 = icmp eq i32 %46, 16
  %48 = select i1 %47, i8 16, i8 0
  %49 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 16, i64 0
  %50 = load i8, i8* %49, align 4
  %51 = or i8 %50, %48
  store i8 %51, i8* %49, align 4
  %52 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = xor i64 %53, -1
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %126

57:                                               ; preds = %39
  %58 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = add i32 %59, -1
  %61 = icmp ult i32 %60, 240
  br i1 %61, label %62, label %832

62:                                               ; preds = %57
  %63 = sext i32 %59 to i64
  %64 = add nsw i64 %63, -1
  %65 = icmp ult i64 %64, 240
  br i1 %65, label %66, label %832

66:                                               ; preds = %62
  %67 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %63
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %68, 5
  %70 = icmp eq i64 %69, 5
  br i1 %70, label %71, label %832

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 12
  %73 = load i16, i16* %72, align 4
  %74 = and i16 %73, 32
  %75 = icmp eq i16 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %71
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.65, i64 0, i64 0), i8** %6, align 8
  br label %832

77:                                               ; preds = %71
  %78 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %63
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, -2147483640
  %81 = icmp eq i32 %80, 8
  %82 = select i1 %81, i32 7, i32 0
  %83 = lshr i64 %68, 32
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 8
  %86 = or i32 %82, %85
  %87 = xor i64 %68, -1
  %88 = and i64 %87, 4301259013
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %77
  %91 = or i32 %86, 128
  br label %99

92:                                               ; preds = %77
  %93 = and i64 %87, 4294967557
  %94 = icmp eq i64 %93, 0
  %95 = icmp sgt i32 %79, 3
  %96 = and i1 %95, %94
  %97 = or i32 %86, 64
  %98 = select i1 %96, i32 %97, i32 %86
  br label %99

99:                                               ; preds = %90, %92
  %100 = phi i32 [ %91, %90 ], [ %98, %92 ]
  %101 = load i8, i8* %41, align 2
  %102 = trunc i32 %100 to i8
  %103 = and i8 %102, -55
  %104 = or i8 %103, %101
  store i8 %104, i8* %41, align 2
  %105 = load i32, i32* %58, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, -2147483632
  %110 = icmp eq i32 %109, 16
  %111 = select i1 %110, i8 64, i8 0
  %112 = load i8, i8* %49, align 4
  %113 = or i8 %111, %112
  store i8 %113, i8* %49, align 4
  %114 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 0, i32* %114, align 4
  %115 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 0, i32* %115, align 4
  %116 = shl i32 %3, 3
  %117 = load i32, i32* %58, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = and i32 %120, 7
  %122 = or i32 %121, %116
  %123 = trunc i32 %122 to i8
  %124 = or i8 %123, -64
  %125 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %124, i8* %125, align 4
  br label %826

126:                                              ; preds = %39
  %127 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 12
  %128 = load i16, i16* %127, align 4
  %129 = and i16 %128, 192
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %132, label %131

131:                                              ; preds = %126
  store i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.66, i64 0, i64 0), i8** %6, align 8
  br label %832

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, -1
  %136 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 3
  %137 = load i32, i32* %136, align 8
  br i1 %135, label %141, label %138

138:                                              ; preds = %132
  %139 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 4
  %140 = load i32, i32* %139, align 4
  br label %226

141:                                              ; preds = %132
  %142 = icmp eq i32 %137, -1
  br i1 %142, label %147, label %143

143:                                              ; preds = %141
  %144 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 4
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %226

147:                                              ; preds = %143, %141
  %148 = icmp eq i32 %2, 64
  br i1 %148, label %149, label %187

149:                                              ; preds = %147
  %150 = and i64 %54, 2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %163

152:                                              ; preds = %149
  %153 = load i32, i32* %15, align 4
  %154 = and i32 %153, 16
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %163

156:                                              ; preds = %152
  %157 = and i32 %153, 8
  %158 = load i32, i32* @globalrel, align 4
  %159 = or i32 %158, %157
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %163, label %161

161:                                              ; preds = %156
  %162 = or i64 %53, 524300
  store i64 %162, i64* %52, align 8
  br label %163

163:                                              ; preds = %156, %152, %161, %149
  %164 = phi i64 [ %53, %156 ], [ %53, %152 ], [ %162, %161 ], [ %53, %149 ]
  %165 = and i64 %164, 524300
  %166 = icmp eq i64 %165, 524300
  br i1 %166, label %167, label %179

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 7
  %169 = load i32, i32* %168, align 8
  %170 = icmp eq i32 %169, -1
  br i1 %170, label %175, label %171

171:                                              ; preds = %167
  %172 = load i32, i32* %8, align 8
  %173 = and i32 %172, 8
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %179, label %175

175:                                              ; preds = %171, %167
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.67, i64 0, i64 0)) #10
  %176 = load i64, i64* %52, align 8
  %177 = and i64 %176, -524301
  %178 = or i64 %177, 12
  store i64 %178, i64* %52, align 8
  br label %179

179:                                              ; preds = %175, %163, %171
  %180 = phi i64 [ %178, %175 ], [ %164, %163 ], [ %164, %171 ]
  %181 = and i64 %180, 524300
  %182 = icmp ne i64 %181, 524300
  %183 = and i32 %16, 64
  %184 = icmp eq i32 %183, 0
  %185 = or i1 %184, %182
  br i1 %185, label %187, label %186

186:                                              ; preds = %179
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.68, i64 0, i64 0), i8** %6, align 8
  br label %832

187:                                              ; preds = %147, %179
  %188 = and i32 %16, 1
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %199

190:                                              ; preds = %187
  %191 = and i32 %16, 2
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %200, label %193

193:                                              ; preds = %190
  %194 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 1
  %195 = load i32, i32* %194, align 8
  %196 = icmp eq i32 %14, 16
  %197 = select i1 %196, i32 16, i32 32
  %198 = icmp eq i32 %195, %197
  br i1 %198, label %200, label %199

199:                                              ; preds = %193, %187
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.69, i64 0, i64 0)) #10
  br label %200

200:                                              ; preds = %193, %190, %199
  br i1 %148, label %201, label %214

201:                                              ; preds = %200
  %202 = load i64, i64* %52, align 8
  %203 = and i64 %202, 524300
  %204 = icmp eq i64 %203, 524300
  br i1 %204, label %214, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 1, i32* %206, align 4
  %207 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 5
  store i8 37, i8* %207, align 1
  %208 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 4, i32* %208, align 4
  %209 = trunc i32 %3 to i8
  %210 = shl i8 %209, 3
  %211 = and i8 %210, 56
  %212 = or i8 %211, 4
  %213 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %212, i8* %213, align 4
  store i8 0, i8* %18, align 1
  br label %826

214:                                              ; preds = %201, %200
  %215 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 0, i32* %215, align 4
  %216 = icmp ne i32 %14, 16
  %217 = select i1 %216, i32 4, i32 2
  %218 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 %217, i32* %218, align 4
  %219 = shl i32 %3, 3
  %220 = and i32 %219, 56
  %221 = select i1 %216, i32 5, i32 6
  %222 = or i32 %221, %220
  %223 = trunc i32 %222 to i8
  %224 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %223, i8* %224, align 4
  %225 = zext i1 %148 to i8
  store i8 %225, i8* %18, align 1
  br label %826

226:                                              ; preds = %138, %143
  %227 = phi i32 [ %140, %138 ], [ %145, %143 ]
  %228 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 7
  %229 = load i32, i32* %228, align 8
  %230 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 5
  %231 = load i32, i32* %230, align 8
  %232 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 6
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %227, 0
  %235 = select i1 %234, i32 -1, i32 %137
  %236 = add i32 %235, -1
  %237 = icmp ult i32 %236, 240
  br i1 %237, label %238, label %244

238:                                              ; preds = %226
  %239 = sext i32 %235 to i64
  %240 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %239
  %243 = load i64, i64* %242, align 8
  br label %244

244:                                              ; preds = %226, %238
  %245 = phi i32 [ %241, %238 ], [ -1, %226 ]
  %246 = phi i64 [ %243, %238 ], [ 0, %226 ]
  %247 = add i32 %134, -1
  %248 = icmp ult i32 %247, 240
  br i1 %248, label %249, label %255

249:                                              ; preds = %244
  %250 = sext i32 %134 to i64
  %251 = getelementptr inbounds [0 x i32], [0 x i32]* @nasm_regvals, i64 0, i64 %250
  %252 = load i32, i32* %251, align 4
  %253 = getelementptr inbounds [0 x i64], [0 x i64]* @nasm_reg_flags, i64 0, i64 %250
  %254 = load i64, i64* %253, align 8
  br label %255

255:                                              ; preds = %244, %249
  %256 = phi i32 [ %252, %249 ], [ -1, %244 ]
  %257 = phi i64 [ %254, %249 ], [ 0, %244 ]
  %258 = or i64 %257, %246
  %259 = and i64 %258, 28672
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %424, label %261

261:                                              ; preds = %255
  %262 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 8
  %263 = load i64, i64* %262, align 8
  %264 = trunc i64 %263 to i32
  %265 = icmp ne i32 %245, -1
  %266 = and i64 %257, 28672
  %267 = icmp eq i64 %266, 0
  %268 = and i1 %265, %267
  br i1 %268, label %271, label %269

269:                                              ; preds = %261
  %270 = icmp ult i32 %227, 2
  br i1 %270, label %271, label %832

271:                                              ; preds = %269, %261
  %272 = phi i32 [ %227, %261 ], [ 1, %269 ]
  %273 = phi i32 [ %245, %261 ], [ %256, %269 ]
  %274 = phi i32 [ %256, %261 ], [ %245, %269 ]
  %275 = phi i64 [ %246, %261 ], [ %257, %269 ]
  %276 = phi i64 [ %257, %261 ], [ %246, %269 ]
  %277 = icmp eq i32 %274, -1
  br i1 %277, label %290, label %278

278:                                              ; preds = %271
  %279 = xor i64 %276, -1
  %280 = and i64 %279, 261
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %832

282:                                              ; preds = %278
  %283 = and i64 %279, 34359738629
  %284 = icmp eq i64 %283, 0
  %285 = and i64 %279, 17179869445
  %286 = icmp eq i64 %285, 0
  %287 = or i1 %284, %286
  br i1 %287, label %288, label %832

288:                                              ; preds = %282
  %289 = and i64 %276, 51539607552
  br label %290

290:                                              ; preds = %271, %288
  %291 = phi i64 [ %289, %288 ], [ 51539607552, %271 ]
  %292 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 1
  %293 = load i32, i32* %292, align 8
  switch i32 %293, label %294 [
    i32 16, label %832
    i32 64, label %832
  ]

294:                                              ; preds = %290
  switch i32 %14, label %301 [
    i32 16, label %832
    i32 32, label %295
    i32 64, label %298
  ]

295:                                              ; preds = %294
  %296 = and i64 %291, 17179869184
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %832, label %301

298:                                              ; preds = %294
  %299 = and i64 %291, 34359738368
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %832, label %301

301:                                              ; preds = %295, %294, %298
  %302 = and i64 %275, 16384
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %308

304:                                              ; preds = %301
  %305 = and i64 %275, 8192
  %306 = icmp eq i64 %305, 0
  %307 = select i1 %306, i32 2, i32 3
  br label %308

308:                                              ; preds = %301, %304
  %309 = phi i32 [ %307, %304 ], [ 4, %301 ]
  store i32 %309, i32* %17, align 4
  %310 = and i32 %273, -2147483640
  %311 = icmp eq i32 %310, 8
  %312 = select i1 %311, i32 7, i32 0
  %313 = xor i64 %275, -1
  %314 = and i64 %313, 4301259013
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %318

316:                                              ; preds = %308
  %317 = or i32 %312, 128
  br label %325

318:                                              ; preds = %308
  %319 = and i64 %313, 4294967557
  %320 = icmp eq i64 %319, 0
  %321 = icmp sgt i32 %273, 3
  %322 = and i1 %321, %320
  %323 = or i32 %312, 64
  %324 = select i1 %322, i32 %323, i32 %312
  br label %325

325:                                              ; preds = %316, %318
  %326 = phi i32 [ %317, %316 ], [ %324, %318 ]
  %327 = load i8, i8* %41, align 2
  %328 = trunc i32 %326 to i8
  %329 = and i8 %328, 2
  %330 = or i8 %329, %327
  store i8 %330, i8* %41, align 2
  %331 = and i32 %274, -2147483640
  %332 = icmp eq i32 %331, 8
  %333 = select i1 %332, i32 7, i32 0
  %334 = xor i64 %276, -1
  %335 = and i64 %334, 4301259013
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %339

337:                                              ; preds = %325
  %338 = or i32 %333, 128
  br label %346

339:                                              ; preds = %325
  %340 = and i64 %334, 4294967557
  %341 = icmp eq i64 %340, 0
  %342 = icmp sgt i32 %274, 3
  %343 = and i1 %342, %341
  %344 = or i32 %333, 64
  %345 = select i1 %343, i32 %344, i32 %333
  br label %346

346:                                              ; preds = %337, %339
  %347 = phi i32 [ %338, %337 ], [ %345, %339 ]
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = or i8 %349, %330
  store i8 %350, i8* %41, align 2
  %351 = and i32 %273, -2147483632
  %352 = icmp eq i32 %351, 16
  %353 = select i1 %352, i8 8, i8 0
  %354 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 16, i64 2
  %355 = load i8, i8* %354, align 2
  %356 = or i8 %355, %353
  store i8 %356, i8* %354, align 2
  %357 = add i32 %272, -1
  %358 = icmp ult i32 %357, 8
  br i1 %358, label %359, label %832

359:                                              ; preds = %346
  %360 = trunc i32 %357 to i8
  %361 = lshr i8 -117, %360
  %362 = and i8 %361, 1
  %363 = icmp eq i8 %362, 0
  br i1 %363, label %832, label %364

364:                                              ; preds = %359
  %365 = sext i32 %357 to i64
  %366 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table.process_ea, i64 0, i64 %365
  %367 = load i32, i32* %366, align 4
  br i1 %277, label %403, label %368

368:                                              ; preds = %364
  %369 = and i32 %274, 7
  %370 = icmp ne i32 %369, 5
  %371 = icmp eq i32 %264, 0
  %372 = and i1 %371, %370
  %373 = icmp eq i32 %229, -1
  %374 = and i1 %373, %372
  %375 = and i1 %374, %12
  %376 = and i32 %16, 3
  %377 = icmp eq i32 %376, 0
  %378 = and i1 %377, %375
  br i1 %378, label %403, label %379

379:                                              ; preds = %368
  %380 = load i32, i32* %15, align 4
  %381 = and i32 %380, 2
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %383, label %402

383:                                              ; preds = %379
  %384 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 12
  %385 = load i32, i32* %384, align 4
  %386 = and i32 %385, 1024
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %393, label %388

388:                                              ; preds = %383
  %389 = xor i1 %373, true
  %390 = or i1 %11, %389
  br i1 %390, label %402, label %391

391:                                              ; preds = %388
  %392 = tail call zeroext i1 @is_disp8n(%struct.operand* %0, %struct.insn* %5, i8* %19) #10
  br i1 %392, label %403, label %402

393:                                              ; preds = %383
  %394 = and i32 %380, 1
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %403

396:                                              ; preds = %393
  %397 = add i32 %264, 128
  %398 = icmp ult i32 %397, 256
  %399 = and i1 %373, %398
  %400 = xor i1 %399, true
  %401 = or i1 %11, %400
  br i1 %401, label %402, label %403

402:                                              ; preds = %396, %388, %379, %391
  br label %403

403:                                              ; preds = %402, %364, %368, %396, %393, %391
  %404 = phi i32 [ 2, %402 ], [ 0, %364 ], [ 0, %368 ], [ 1, %396 ], [ 1, %393 ], [ 1, %391 ]
  %405 = phi i32 [ %369, %402 ], [ 5, %364 ], [ %369, %368 ], [ %369, %396 ], [ %369, %393 ], [ %369, %391 ]
  %406 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 1, i32* %406, align 4
  %407 = icmp eq i32 %404, 2
  %408 = or i1 %277, %407
  %409 = select i1 %408, i32 4, i32 %404
  %410 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 %409, i32* %410, align 4
  %411 = shl nuw nsw i32 %404, 6
  %412 = shl i32 %3, 3
  %413 = and i32 %412, 56
  %414 = or i32 %411, %413
  %415 = trunc i32 %414 to i8
  %416 = or i8 %415, 4
  %417 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %416, i8* %417, align 4
  %418 = shl i32 %273, 3
  %419 = and i32 %418, 56
  %420 = or i32 %367, %419
  %421 = or i32 %420, %405
  %422 = trunc i32 %421 to i8
  %423 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 5
  store i8 %422, i8* %423, align 1
  br label %826

424:                                              ; preds = %255
  %425 = and i64 %258, 51539607552
  %426 = icmp eq i64 %425, 0
  %427 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 8
  %428 = load i64, i64* %427, align 8
  %429 = trunc i64 %428 to i32
  br i1 %426, label %731, label %430

430:                                              ; preds = %424
  %431 = icmp ne i32 %245, -1
  br i1 %431, label %432, label %441

432:                                              ; preds = %430
  %433 = xor i64 %246, -1
  %434 = and i64 %433, 34359738629
  %435 = icmp eq i64 %434, 0
  %436 = and i64 %433, 17179869445
  %437 = icmp eq i64 %436, 0
  %438 = or i1 %435, %437
  br i1 %438, label %439, label %832

439:                                              ; preds = %432
  %440 = and i64 %246, 51539607552
  br label %441

441:                                              ; preds = %439, %430
  %442 = phi i64 [ %440, %439 ], [ 51539607552, %430 ]
  %443 = icmp ne i32 %256, -1
  br i1 %443, label %444, label %453

444:                                              ; preds = %441
  %445 = and i64 %257, 261
  %446 = icmp eq i64 %445, 261
  br i1 %446, label %447, label %832

447:                                              ; preds = %444
  %448 = xor i64 %442, 8791798054912
  %449 = and i64 %448, %257
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %451, label %832

451:                                              ; preds = %447
  %452 = and i64 %442, %257
  br label %453

453:                                              ; preds = %451, %441
  %454 = phi i64 [ %452, %451 ], [ %442, %441 ]
  %455 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 1
  %456 = load i32, i32* %455, align 8
  switch i32 %456, label %457 [
    i32 16, label %832
    i32 64, label %832
  ]

457:                                              ; preds = %453
  switch i32 %14, label %464 [
    i32 16, label %832
    i32 32, label %458
    i32 64, label %461
  ]

458:                                              ; preds = %457
  %459 = and i64 %454, 17179869184
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %832, label %464

461:                                              ; preds = %457
  %462 = and i64 %454, 34359738368
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %832, label %464

464:                                              ; preds = %458, %457, %461
  %465 = icmp eq i32 %227, 1
  br i1 %465, label %466, label %489

466:                                              ; preds = %464
  %467 = icmp ne i32 %256, %245
  %468 = and i1 %467, %443
  %469 = and i1 %431, %468
  br i1 %469, label %470, label %479

470:                                              ; preds = %466
  %471 = icmp eq i32 %231, %134
  %472 = icmp eq i32 %233, 2
  %473 = and i1 %471, %472
  br i1 %473, label %478, label %474

474:                                              ; preds = %470
  %475 = icmp eq i32 %231, %235
  %476 = icmp eq i32 %233, 1
  %477 = and i1 %475, %476
  br i1 %477, label %478, label %489

478:                                              ; preds = %474, %470
  br label %489

479:                                              ; preds = %466
  %480 = icmp eq i32 %256, -1
  br i1 %480, label %481, label %489

481:                                              ; preds = %479
  %482 = icmp eq i32 %231, %235
  %483 = icmp eq i32 %233, 2
  %484 = and i1 %482, %483
  %485 = select i1 %484, i32 %245, i32 -1
  %486 = select i1 %484, i32 -1, i32 %245
  %487 = select i1 %484, i64 %246, i64 0
  %488 = select i1 %484, i64 %257, i64 %246
  br label %489

489:                                              ; preds = %464, %474, %478, %481, %479
  %490 = phi i32 [ %245, %479 ], [ %485, %481 ], [ %245, %464 ], [ %245, %474 ], [ %256, %478 ]
  %491 = phi i32 [ %256, %479 ], [ %486, %481 ], [ %256, %464 ], [ %256, %474 ], [ %245, %478 ]
  %492 = phi i64 [ %246, %479 ], [ %487, %481 ], [ %246, %464 ], [ %246, %474 ], [ %257, %478 ]
  %493 = phi i64 [ %257, %479 ], [ %488, %481 ], [ %257, %464 ], [ %257, %474 ], [ %246, %478 ]
  %494 = and i32 %16, 64
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %520, label %496

496:                                              ; preds = %489
  %497 = icmp eq i32 %490, -1
  br i1 %497, label %498, label %507

498:                                              ; preds = %496
  %499 = icmp eq i32 %231, %134
  %500 = icmp eq i32 %233, 2
  %501 = and i1 %499, %500
  %502 = select i1 %501, i32 1, i32 %227
  %503 = select i1 %501, i32 %491, i32 -1
  %504 = select i1 %501, i32 -1, i32 %491
  %505 = select i1 %501, i64 %493, i64 %492
  %506 = select i1 %501, i64 0, i64 %493
  br label %507

507:                                              ; preds = %498, %496
  %508 = phi i32 [ %227, %496 ], [ %502, %498 ]
  %509 = phi i32 [ %490, %496 ], [ %503, %498 ]
  %510 = phi i32 [ %491, %496 ], [ %504, %498 ]
  %511 = phi i64 [ %492, %496 ], [ %505, %498 ]
  %512 = phi i64 [ %493, %496 ], [ %506, %498 ]
  %513 = icmp eq i32 %233, 3
  %514 = icmp eq i32 %510, -1
  %515 = and i1 %513, %514
  %516 = zext i1 %515 to i32
  %517 = sub i32 %508, %516
  %518 = select i1 %515, i32 %509, i32 %510
  %519 = select i1 %515, i64 %511, i64 %512
  br label %556

520:                                              ; preds = %489
  %521 = icmp eq i32 %227, 2
  %522 = icmp ne i32 %490, 4
  %523 = and i1 %521, %522
  br i1 %523, label %524, label %529

524:                                              ; preds = %520
  %525 = and i32 %16, 4
  %526 = icmp eq i32 %525, 0
  %527 = icmp eq i32 %233, 3
  %528 = or i1 %526, %527
  br i1 %528, label %530, label %536

529:                                              ; preds = %520
  switch i32 %227, label %536 [
    i32 9, label %530
    i32 5, label %530
    i32 3, label %530
  ]

530:                                              ; preds = %529, %529, %529, %524
  %531 = icmp eq i32 %491, -1
  %532 = zext i1 %531 to i32
  %533 = sub nuw nsw i32 %227, %532
  %534 = select i1 %531, i32 %490, i32 %491
  %535 = select i1 %531, i64 %492, i64 %493
  br label %536

536:                                              ; preds = %524, %530, %529
  %537 = phi i32 [ %227, %529 ], [ %533, %530 ], [ 2, %524 ]
  %538 = phi i32 [ %491, %529 ], [ %534, %530 ], [ %491, %524 ]
  %539 = phi i64 [ %493, %529 ], [ %535, %530 ], [ %493, %524 ]
  %540 = icmp eq i32 %490, -1
  br i1 %540, label %541, label %556

541:                                              ; preds = %536
  %542 = and i32 %538, 7
  %543 = icmp eq i32 %542, 4
  %544 = and i32 %16, 4
  %545 = icmp eq i32 %544, 0
  %546 = or i1 %545, %543
  br i1 %546, label %556, label %547

547:                                              ; preds = %541
  %548 = icmp eq i32 %231, %134
  %549 = icmp eq i32 %233, 2
  %550 = and i1 %548, %549
  %551 = select i1 %550, i32 1, i32 %537
  %552 = select i1 %550, i32 %538, i32 -1
  %553 = select i1 %550, i32 -1, i32 %538
  %554 = select i1 %550, i64 %539, i64 %492
  %555 = select i1 %550, i64 0, i64 %539
  br label %556

556:                                              ; preds = %547, %507, %541, %536
  %557 = phi i32 [ %537, %541 ], [ %537, %536 ], [ %517, %507 ], [ %551, %547 ]
  %558 = phi i32 [ -1, %541 ], [ %490, %536 ], [ %509, %507 ], [ %552, %547 ]
  %559 = phi i32 [ %538, %541 ], [ %538, %536 ], [ %518, %507 ], [ %553, %547 ]
  %560 = phi i64 [ %492, %541 ], [ %492, %536 ], [ %511, %507 ], [ %554, %547 ]
  %561 = phi i64 [ %539, %541 ], [ %539, %536 ], [ %519, %507 ], [ %555, %547 ]
  %562 = icmp eq i32 %557, 1
  %563 = icmp eq i32 %558, 4
  %564 = and i1 %562, %563
  %565 = select i1 %564, i32 %559, i32 %558
  %566 = select i1 %564, i32 4, i32 %559
  %567 = select i1 %564, i64 %561, i64 %560
  %568 = select i1 %564, i64 %560, i64 %561
  switch i32 %565, label %569 [
    i32 4, label %832
    i32 -1, label %570
  ]

569:                                              ; preds = %556
  switch i32 %557, label %832 [
    i32 8, label %570
    i32 4, label %570
    i32 2, label %570
    i32 1, label %570
  ]

570:                                              ; preds = %556, %569, %569, %569, %569
  %571 = and i32 %565, -2147483640
  %572 = icmp eq i32 %571, 8
  %573 = select i1 %572, i32 7, i32 0
  %574 = xor i64 %567, -1
  %575 = and i64 %574, 4301259013
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %577, label %579

577:                                              ; preds = %570
  %578 = or i32 %573, 128
  br label %586

579:                                              ; preds = %570
  %580 = and i64 %574, 4294967557
  %581 = icmp eq i64 %580, 0
  %582 = icmp sgt i32 %565, 3
  %583 = and i1 %582, %581
  %584 = or i32 %573, 64
  %585 = select i1 %583, i32 %584, i32 %573
  br label %586

586:                                              ; preds = %577, %579
  %587 = phi i32 [ %578, %577 ], [ %585, %579 ]
  %588 = load i8, i8* %41, align 2
  %589 = trunc i32 %587 to i8
  %590 = and i8 %589, 2
  %591 = or i8 %590, %588
  store i8 %591, i8* %41, align 2
  %592 = and i32 %566, -2147483640
  %593 = icmp eq i32 %592, 8
  %594 = select i1 %593, i32 7, i32 0
  %595 = xor i64 %568, -1
  %596 = and i64 %595, 4301259013
  %597 = icmp eq i64 %596, 0
  br i1 %597, label %598, label %600

598:                                              ; preds = %586
  %599 = or i32 %594, 128
  br label %607

600:                                              ; preds = %586
  %601 = and i64 %595, 4294967557
  %602 = icmp eq i64 %601, 0
  %603 = icmp sgt i32 %566, 3
  %604 = and i1 %603, %602
  %605 = or i32 %594, 64
  %606 = select i1 %604, i32 %605, i32 %594
  br label %607

607:                                              ; preds = %598, %600
  %608 = phi i32 [ %599, %598 ], [ %606, %600 ]
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = or i8 %610, %591
  store i8 %611, i8* %41, align 2
  %612 = icmp eq i32 %565, -1
  br i1 %612, label %613, label %667

613:                                              ; preds = %607
  %614 = and i32 %566, 7
  %615 = icmp eq i32 %614, 4
  br i1 %615, label %673, label %616

616:                                              ; preds = %613
  %617 = icmp eq i32 %566, -1
  br i1 %617, label %652, label %618

618:                                              ; preds = %616
  %619 = icmp ne i32 %614, 5
  %620 = icmp eq i32 %429, 0
  %621 = and i1 %620, %619
  %622 = icmp eq i32 %229, -1
  %623 = and i1 %622, %621
  %624 = and i1 %623, %12
  %625 = and i32 %16, 3
  %626 = icmp eq i32 %625, 0
  %627 = and i1 %626, %624
  br i1 %627, label %652, label %628

628:                                              ; preds = %618
  %629 = load i32, i32* %15, align 4
  %630 = and i32 %629, 2
  %631 = icmp eq i32 %630, 0
  br i1 %631, label %632, label %651

632:                                              ; preds = %628
  %633 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 12
  %634 = load i32, i32* %633, align 4
  %635 = and i32 %634, 1024
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %642, label %637

637:                                              ; preds = %632
  %638 = xor i1 %622, true
  %639 = or i1 %11, %638
  br i1 %639, label %651, label %640

640:                                              ; preds = %637
  %641 = tail call zeroext i1 @is_disp8n(%struct.operand* %0, %struct.insn* %5, i8* %19) #10
  br i1 %641, label %652, label %651

642:                                              ; preds = %632
  %643 = and i32 %629, 1
  %644 = icmp eq i32 %643, 0
  br i1 %644, label %645, label %652

645:                                              ; preds = %642
  %646 = add i32 %429, 128
  %647 = icmp ult i32 %646, 256
  %648 = and i1 %622, %647
  %649 = xor i1 %648, true
  %650 = or i1 %11, %649
  br i1 %650, label %651, label %652

651:                                              ; preds = %645, %637, %628, %640
  br label %652

652:                                              ; preds = %640, %642, %645, %618, %616, %651
  %653 = phi i32 [ 2, %651 ], [ 0, %616 ], [ 0, %618 ], [ 1, %645 ], [ 1, %642 ], [ 1, %640 ]
  %654 = phi i32 [ %614, %651 ], [ 5, %616 ], [ %614, %618 ], [ %614, %645 ], [ %614, %642 ], [ %614, %640 ]
  %655 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 0, i32* %655, align 4
  %656 = icmp eq i32 %653, 2
  %657 = or i1 %617, %656
  %658 = select i1 %657, i32 4, i32 %653
  %659 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 %658, i32* %659, align 4
  %660 = shl nuw nsw i32 %653, 6
  %661 = shl i32 %3, 3
  %662 = and i32 %661, 56
  %663 = or i32 %660, %662
  %664 = or i32 %663, %654
  %665 = trunc i32 %664 to i8
  %666 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %665, i8* %666, align 4
  br label %826

667:                                              ; preds = %607
  %668 = shl i32 %565, 3
  %669 = and i32 %668, 56
  switch i32 %557, label %832 [
    i32 1, label %673
    i32 2, label %670
    i32 4, label %671
    i32 8, label %672
  ]

670:                                              ; preds = %667
  br label %673

671:                                              ; preds = %667
  br label %673

672:                                              ; preds = %667
  br label %673

673:                                              ; preds = %613, %667, %672, %671, %670
  %674 = phi i32 [ %669, %672 ], [ %669, %671 ], [ %669, %670 ], [ %669, %667 ], [ 32, %613 ]
  %675 = phi i32 [ 192, %672 ], [ 128, %671 ], [ 64, %670 ], [ 0, %667 ], [ 0, %613 ]
  %676 = icmp eq i32 %566, -1
  br i1 %676, label %712, label %677

677:                                              ; preds = %673
  %678 = and i32 %566, 7
  %679 = icmp ne i32 %678, 5
  %680 = icmp eq i32 %429, 0
  %681 = and i1 %680, %679
  %682 = icmp eq i32 %229, -1
  %683 = and i1 %682, %681
  %684 = and i1 %683, %12
  %685 = and i32 %16, 3
  %686 = icmp eq i32 %685, 0
  %687 = and i1 %686, %684
  br i1 %687, label %712, label %688

688:                                              ; preds = %677
  %689 = load i32, i32* %15, align 4
  %690 = and i32 %689, 2
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %692, label %711

692:                                              ; preds = %688
  %693 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 12
  %694 = load i32, i32* %693, align 4
  %695 = and i32 %694, 1024
  %696 = icmp eq i32 %695, 0
  br i1 %696, label %702, label %697

697:                                              ; preds = %692
  %698 = xor i1 %682, true
  %699 = or i1 %11, %698
  br i1 %699, label %711, label %700

700:                                              ; preds = %697
  %701 = tail call zeroext i1 @is_disp8n(%struct.operand* %0, %struct.insn* %5, i8* %19) #10
  br i1 %701, label %712, label %711

702:                                              ; preds = %692
  %703 = and i32 %689, 1
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %705, label %712

705:                                              ; preds = %702
  %706 = add i32 %429, 128
  %707 = icmp ult i32 %706, 256
  %708 = and i1 %682, %707
  %709 = xor i1 %708, true
  %710 = or i1 %11, %709
  br i1 %710, label %711, label %712

711:                                              ; preds = %705, %697, %688, %700
  br label %712

712:                                              ; preds = %711, %673, %677, %705, %702, %700
  %713 = phi i32 [ 2, %711 ], [ 0, %673 ], [ 0, %677 ], [ 1, %705 ], [ 1, %702 ], [ 1, %700 ]
  %714 = phi i32 [ %678, %711 ], [ 5, %673 ], [ %678, %677 ], [ %678, %705 ], [ %678, %702 ], [ %678, %700 ]
  %715 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 1, i32* %715, align 4
  %716 = icmp eq i32 %713, 2
  %717 = or i1 %676, %716
  %718 = select i1 %717, i32 4, i32 %713
  %719 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 %718, i32* %719, align 4
  %720 = shl nuw nsw i32 %713, 6
  %721 = shl i32 %3, 3
  %722 = and i32 %721, 56
  %723 = or i32 %720, %722
  %724 = trunc i32 %723 to i8
  %725 = or i8 %724, 4
  %726 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %725, i8* %726, align 4
  %727 = or i32 %675, %674
  %728 = or i32 %727, %714
  %729 = trunc i32 %728 to i8
  %730 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 5
  store i8 %729, i8* %730, align 1
  br label %826

731:                                              ; preds = %424
  %732 = icmp eq i32 %14, 64
  br i1 %732, label %832, label %733

733:                                              ; preds = %731
  switch i32 %134, label %832 [
    i32 -1, label %734
    i32 124, label %734
    i32 34, label %734
    i32 12, label %734
    i32 10, label %734
  ]

734:                                              ; preds = %733, %733, %733, %733, %733
  %735 = icmp ne i32 %235, -1
  switch i32 %235, label %832 [
    i32 -1, label %736
    i32 124, label %736
    i32 34, label %736
    i32 12, label %736
    i32 10, label %736
  ]

736:                                              ; preds = %734, %734, %734, %734, %734
  %737 = getelementptr inbounds %struct.operand, %struct.operand* %0, i64 0, i32 1
  %738 = load i32, i32* %737, align 8
  switch i32 %738, label %739 [
    i32 32, label %832
    i32 64, label %832
  ]

739:                                              ; preds = %736
  %740 = icmp ne i32 %227, 1
  %741 = and i1 %740, %735
  br i1 %741, label %832, label %742

742:                                              ; preds = %739
  %743 = and i1 %135, %735
  %744 = select i1 %743, i32 -1, i32 %235
  %745 = select i1 %743, i32 %235, i32 %134
  %746 = icmp eq i32 %745, 124
  %747 = icmp eq i32 %745, 34
  %748 = or i1 %746, %747
  %749 = icmp ne i32 %744, -1
  %750 = and i1 %749, %748
  %751 = select i1 %750, i32 %745, i32 %744
  %752 = select i1 %750, i32 %744, i32 %745
  %753 = icmp eq i32 %752, %751
  br i1 %753, label %832, label %754

754:                                              ; preds = %742
  %755 = icmp ne i32 %751, -1
  %756 = icmp ne i32 %752, -1
  %757 = and i1 %755, %756
  br i1 %757, label %758, label %766

758:                                              ; preds = %754
  %759 = icmp eq i32 %751, 10
  %760 = icmp eq i32 %751, 12
  %761 = or i1 %759, %760
  %762 = icmp eq i32 %752, 124
  %763 = or i1 %762, %761
  %764 = icmp eq i32 %752, 34
  %765 = or i1 %764, %763
  br i1 %765, label %832, label %768

766:                                              ; preds = %754
  %767 = icmp eq i32 %752, -1
  br i1 %767, label %832, label %768

768:                                              ; preds = %758, %766
  br i1 %755, label %769, label %775

769:                                              ; preds = %768
  %770 = shl i32 %751, 8
  %771 = add nuw nsw i32 %770, %752
  switch i32 %771, label %832 [
    i32 31756, label %779
    i32 8716, label %772
    i32 31754, label %773
    i32 8714, label %774
  ]

772:                                              ; preds = %769
  br label %779

773:                                              ; preds = %769
  br label %779

774:                                              ; preds = %769
  br label %779

775:                                              ; preds = %768
  switch i32 %752, label %832 [
    i32 124, label %779
    i32 34, label %776
    i32 10, label %777
    i32 12, label %778
  ]

776:                                              ; preds = %775
  br label %779

777:                                              ; preds = %775
  br label %779

778:                                              ; preds = %775
  br label %779

779:                                              ; preds = %775, %769, %774, %773, %772, %778, %777, %776
  %780 = phi i32 [ 5, %776 ], [ 6, %777 ], [ 7, %778 ], [ 1, %772 ], [ 2, %773 ], [ 3, %774 ], [ 0, %769 ], [ 4, %775 ]
  %781 = shl i32 %429, 16
  %782 = icmp eq i32 %781, 0
  %783 = icmp eq i32 %229, -1
  %784 = and i1 %783, %782
  %785 = icmp ne i32 %780, 6
  %786 = and i1 %785, %12
  %787 = and i1 %784, %786
  %788 = and i32 %16, 3
  %789 = icmp eq i32 %788, 0
  %790 = and i1 %789, %787
  br i1 %790, label %815, label %791

791:                                              ; preds = %779
  %792 = load i32, i32* %15, align 4
  %793 = and i32 %792, 2
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %795, label %814

795:                                              ; preds = %791
  %796 = getelementptr inbounds %struct.insn, %struct.insn* %5, i64 0, i32 12
  %797 = load i32, i32* %796, align 4
  %798 = and i32 %797, 1024
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %805, label %800

800:                                              ; preds = %795
  %801 = xor i1 %783, true
  %802 = or i1 %11, %801
  br i1 %802, label %814, label %803

803:                                              ; preds = %800
  %804 = tail call zeroext i1 @is_disp8n(%struct.operand* %0, %struct.insn* %5, i8* %19) #10
  br i1 %804, label %815, label %814

805:                                              ; preds = %795
  %806 = and i32 %792, 1
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %808, label %815

808:                                              ; preds = %805
  %809 = add i32 %781, 8454143
  %810 = icmp ult i32 %809, 16842751
  %811 = and i1 %783, %810
  %812 = xor i1 %811, true
  %813 = or i1 %11, %812
  br i1 %813, label %814, label %815

814:                                              ; preds = %808, %800, %791, %803
  br label %815

815:                                              ; preds = %814, %779, %808, %805, %803
  %816 = phi i32 [ 2, %814 ], [ 0, %779 ], [ 1, %808 ], [ 1, %805 ], [ 1, %803 ]
  %817 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 1
  store i32 0, i32* %817, align 4
  %818 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 2
  store i32 %816, i32* %818, align 4
  %819 = shl nuw nsw i32 %816, 6
  %820 = shl i32 %3, 3
  %821 = and i32 %820, 56
  %822 = or i32 %780, %821
  %823 = or i32 %822, %819
  %824 = trunc i32 %823 to i8
  %825 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 4
  store i8 %824, i8* %825, align 4
  br label %826

826:                                              ; preds = %403, %652, %712, %815, %214, %205, %99
  %827 = phi i32 [ %409, %403 ], [ %658, %652 ], [ %718, %712 ], [ %816, %815 ], [ %217, %214 ], [ 4, %205 ], [ 0, %99 ]
  %828 = phi i32 [ 2, %403 ], [ 1, %652 ], [ 2, %712 ], [ 1, %815 ], [ 1, %214 ], [ 2, %205 ], [ 1, %99 ]
  %829 = add nuw nsw i32 %828, %827
  %830 = getelementptr inbounds %struct.ea, %struct.ea* %1, i64 0, i32 3
  store i32 %829, i32* %830, align 4
  %831 = load i32, i32* %17, align 4
  br label %833

832:                                              ; preds = %359, %346, %769, %775, %766, %758, %742, %739, %736, %736, %733, %734, %731, %667, %556, %569, %461, %458, %457, %453, %453, %447, %444, %432, %298, %295, %294, %290, %290, %282, %278, %269, %62, %66, %57, %186, %131, %76
  store i32 0, i32* %17, align 4
  br label %833

833:                                              ; preds = %832, %826
  %834 = phi i32 [ 0, %832 ], [ %831, %826 ]
  ret i32 %834
}

; Function Attrs: cold noreturn
declare void @nasm_panic(i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @emit_prefix(%struct.out_data*, i32, %struct.insn* nocapture readonly) unnamed_addr #0 {
  %4 = alloca i8, align 1
  %5 = icmp eq i32 %1, 16
  %6 = icmp eq i32 %1, 64
  %7 = icmp eq i32 %1, 32
  %8 = icmp eq %struct.out_data* %0, null
  %9 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 9
  %11 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 7
  br label %12

12:                                               ; preds = %46, %3
  %13 = phi i64 [ 0, %3 ], [ %48, %46 ]
  %14 = phi i32 [ 0, %3 ], [ %47, %46 ]
  %15 = getelementptr inbounds %struct.insn, %struct.insn* %2, i64 0, i32 1, i64 %13
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %40 [
    i32 256, label %41
    i32 245, label %17
    i32 252, label %18
    i32 253, label %18
    i32 257, label %18
    i32 259, label %18
    i32 251, label %19
    i32 254, label %19
    i32 250, label %19
    i32 258, label %19
    i32 31, label %20
    i32 53, label %22
    i32 61, label %24
    i32 64, label %26
    i32 65, label %27
    i32 128, label %28
    i32 122, label %30
    i32 123, label %30
    i32 241, label %31
    i32 242, label %33
    i32 243, label %34
    i32 244, label %36
    i32 246, label %37
    i32 247, label %38
    i32 248, label %46
    i32 249, label %39
    i32 261, label %46
    i32 262, label %46
    i32 263, label %46
    i32 260, label %46
    i32 0, label %46
  ]

17:                                               ; preds = %12
  br label %41

18:                                               ; preds = %12, %12, %12, %12
  br label %41

19:                                               ; preds = %12, %12, %12, %12
  br label %41

20:                                               ; preds = %12
  br i1 %6, label %21, label %41

21:                                               ; preds = %20
  call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.73, i64 0, i64 0)) #10
  br label %41

22:                                               ; preds = %12
  br i1 %6, label %23, label %41

23:                                               ; preds = %22
  call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.74, i64 0, i64 0)) #10
  br label %41

24:                                               ; preds = %12
  br i1 %6, label %25, label %41

25:                                               ; preds = %24
  call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.75, i64 0, i64 0)) #10
  br label %41

26:                                               ; preds = %12
  br label %41

27:                                               ; preds = %12
  br label %41

28:                                               ; preds = %12
  br i1 %6, label %29, label %41

29:                                               ; preds = %28
  call void (i32, i8*, ...) @nasm_warn(i32 2228480, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.76, i64 0, i64 0)) #10
  br label %41

30:                                               ; preds = %12, %12
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.77, i64 0, i64 0)) #10
  br label %46

31:                                               ; preds = %12
  switch i32 %1, label %41 [
    i32 64, label %32
    i32 16, label %46
  ]

32:                                               ; preds = %31
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.78, i64 0, i64 0)) #10
  br label %46

33:                                               ; preds = %12
  br i1 %7, label %46, label %41

34:                                               ; preds = %12
  br i1 %6, label %46, label %35

35:                                               ; preds = %34
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.79, i64 0, i64 0)) #10
  br label %46

36:                                               ; preds = %12
  br label %41

37:                                               ; preds = %12
  br i1 %5, label %46, label %41

38:                                               ; preds = %12
  br i1 %5, label %41, label %46

39:                                               ; preds = %12
  br label %41

40:                                               ; preds = %12
  call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.80, i64 0, i64 0)) #12
  unreachable

41:                                               ; preds = %38, %31, %12, %39, %36, %27, %26, %19, %18, %17, %21, %20, %23, %22, %25, %24, %29, %28, %33, %37
  %42 = phi i8 [ 102, %37 ], [ 103, %33 ], [ 54, %28 ], [ 54, %29 ], [ 38, %24 ], [ 38, %25 ], [ 62, %22 ], [ 62, %23 ], [ 46, %20 ], [ 46, %21 ], [ -16, %17 ], [ -14, %18 ], [ -13, %19 ], [ 100, %26 ], [ 101, %27 ], [ 103, %36 ], [ 102, %39 ], [ -101, %12 ], [ 103, %31 ], [ 102, %38 ]
  br i1 %8, label %44, label %43

43:                                               ; preds = %41
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4)
  store i8 %42, i8* %4, align 1
  store i32 0, i32* %9, align 4
  store i8* %4, i8** %10, align 8
  store i64 1, i64* %11, align 8
  call fastcc void @out(%struct.out_data* nonnull %0) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4)
  br label %44

44:                                               ; preds = %41, %43
  %45 = add nsw i32 %14, 1
  br label %46

46:                                               ; preds = %37, %33, %30, %12, %32, %35, %12, %12, %12, %12, %12, %34, %31, %38, %44
  %47 = phi i32 [ %45, %44 ], [ %14, %38 ], [ %14, %31 ], [ %14, %34 ], [ %14, %12 ], [ %14, %12 ], [ %14, %12 ], [ %14, %12 ], [ %14, %12 ], [ %14, %35 ], [ %14, %32 ], [ %14, %12 ], [ %14, %30 ], [ %14, %33 ], [ %14, %37 ]
  %48 = add nuw nsw i64 %13, 1
  %49 = icmp eq i64 %48, 7
  br i1 %49, label %50, label %12

50:                                               ; preds = %46
  ret i32 %47
}

declare zeroext i1 @is_disp8n(%struct.operand*, %struct.insn*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i8* @prefix_name(i32) local_unnamed_addr #8

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @matches(%struct.itemplate* readonly, %struct.insn* nocapture readonly, i32) unnamed_addr #7 {
  %4 = alloca [5 x i64], align 16
  %5 = bitcast [5 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #10
  %6 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 2
  %9 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 3
  %10 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 4
  %11 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 0
  %12 = bitcast [5 x i64]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 40, i1 false)
  %13 = load i32, i32* %11, align 8
  %14 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %360

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %360

23:                                               ; preds = %17
  %24 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 5
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %29, i32 0, i64 0
  %31 = load i32, i32* %30, align 16
  %32 = and i32 %31, 131072
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %360

34:                                               ; preds = %26, %23
  %35 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 6
  %36 = load i32, i32* %35, align 8
  switch i32 %36, label %53 [
    i32 261, label %37
    i32 262, label %45
    i32 263, label %45
  ]

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 5
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %40, i32 0, i64 2
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 134217728
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %360, label %53

45:                                               ; preds = %34, %34
  %46 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 5
  %47 = load i32, i32* %46, align 8
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %48, i32 0, i64 2
  %50 = load i32, i32* %49, align 8
  %51 = and i32 %50, 67108864
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %360, label %53

53:                                               ; preds = %37, %45, %34
  %54 = icmp sgt i32 %19, 0
  br i1 %54, label %55, label %70

55:                                               ; preds = %53
  %56 = zext i32 %19 to i64
  br label %59

57:                                               ; preds = %59
  %58 = icmp eq i64 %69, %56
  br i1 %58, label %70, label %59

59:                                               ; preds = %57, %55
  %60 = phi i64 [ 0, %55 ], [ %69, %57 ]
  %61 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %60, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 2, i64 %60
  %64 = load i64, i64* %63, align 8
  %65 = xor i64 %64, 48
  %66 = and i64 %62, 48
  %67 = and i64 %66, %65
  %68 = icmp eq i64 %67, 0
  %69 = add nuw nsw i64 %60, 1
  br i1 %68, label %57, label %360

70:                                               ; preds = %57, %53
  %71 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 5
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %73, i32 0, i64 0
  %75 = load i32, i32* %74, align 16
  %76 = and i32 %75, 3068
  switch i32 %76, label %88 [
    i32 4, label %89
    i32 8, label %77
    i32 16, label %78
    i32 32, label %79
    i32 64, label %80
    i32 128, label %81
    i32 256, label %82
    i32 2048, label %83
    i32 512, label %84
  ]

77:                                               ; preds = %70
  br label %89

78:                                               ; preds = %70
  br label %89

79:                                               ; preds = %70
  br label %89

80:                                               ; preds = %70
  br label %89

81:                                               ; preds = %70
  br label %89

82:                                               ; preds = %70
  br label %89

83:                                               ; preds = %70
  br label %89

84:                                               ; preds = %70
  switch i32 %2, label %87 [
    i32 16, label %89
    i32 32, label %85
    i32 64, label %86
  ]

85:                                               ; preds = %84
  br label %89

86:                                               ; preds = %84
  br label %89

87:                                               ; preds = %84
  br label %89

88:                                               ; preds = %70
  br label %89

89:                                               ; preds = %84, %70, %85, %86, %87, %88, %83, %82, %81, %80, %79, %78, %77
  %90 = phi i64 [ 0, %88 ], [ 0, %87 ], [ 34359738368, %86 ], [ 17179869184, %85 ], [ 8791798054912, %83 ], [ 549755813888, %82 ], [ 274877906944, %81 ], [ 137438953472, %80 ], [ 34359738368, %79 ], [ 17179869184, %78 ], [ 8589934592, %77 ], [ 4294967296, %70 ], [ 8589934592, %84 ]
  %91 = and i32 %75, 126976
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %89
  store i64 %90, i64* %6, align 16
  store i64 %90, i64* %7, align 8
  store i64 %90, i64* %8, align 16
  store i64 %90, i64* %9, align 8
  store i64 %90, i64* %10, align 16
  br label %99

94:                                               ; preds = %89
  %95 = lshr exact i32 %91, 12
  %96 = add nsw i32 %95, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 40, i1 false)
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %97
  store i64 %90, i64* %98, align 8
  br label %99

99:                                               ; preds = %93, %94
  br i1 %54, label %100, label %198

100:                                              ; preds = %99
  %101 = zext i32 %19 to i64
  br label %102

102:                                              ; preds = %191, %100
  %103 = phi i64 [ 0, %100 ], [ %193, %191 ]
  %104 = phi i8 [ 0, %100 ], [ %192, %191 ]
  %105 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %103, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %103, i32 12
  %108 = load i16, i16* %107, align 4
  %109 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 3, i64 %103
  %110 = load i16, i16* %109, align 2
  %111 = and i16 %108, 32
  %112 = icmp ne i16 %111, 0
  %113 = and i64 %106, 8791798054912
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %119

115:                                              ; preds = %102
  %116 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %103
  %117 = load i64, i64* %116, align 8
  %118 = or i64 %117, %106
  br label %119

119:                                              ; preds = %102, %115
  %120 = phi i64 [ %106, %102 ], [ %118, %115 ]
  %121 = and i64 %120, 8791798054912
  br i1 %112, label %126, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 2, i64 %103
  %124 = load i64, i64* %123, align 8
  %125 = and i64 %124, 8791798054912
  br label %146

126:                                              ; preds = %119
  %127 = and i16 %110, 768
  %128 = and i16 %110, 32
  %129 = icmp eq i16 %128, 0
  br i1 %129, label %360, label %130

130:                                              ; preds = %126
  %131 = icmp eq i16 %127, 0
  br i1 %131, label %146, label %132

132:                                              ; preds = %130
  %133 = icmp eq i16 %127, 256
  %134 = select i1 %133, i64 17179869184, i64 34359738368
  %135 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 2, i64 %103
  %136 = load i64, i64* %135, align 8
  %137 = lshr i64 %136, 32
  %138 = and i64 %137, 2047
  %139 = lshr i64 %138, 3
  %140 = select i1 %133, i64 2, i64 1
  %141 = mul nuw nsw i64 %139, %140
  %142 = icmp ugt i64 %138, 8
  %143 = zext i1 %142 to i64
  %144 = lshr i64 %141, %143
  %145 = trunc i64 %144 to i32
  br label %146

146:                                              ; preds = %132, %130, %122
  %147 = phi i32 [ 0, %122 ], [ 0, %130 ], [ %145, %132 ]
  %148 = phi i64 [ %125, %122 ], [ 0, %130 ], [ %134, %132 ]
  %149 = xor i16 %110, -1
  %150 = and i16 %108, %149
  %151 = zext i16 %150 to i64
  %152 = and i64 %151, 15
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %360

154:                                              ; preds = %146
  %155 = and i64 %151, 208
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %360

157:                                              ; preds = %154
  %158 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 2, i64 %103
  %159 = load i64, i64* %158, align 8
  %160 = and i64 %120, -281470681743361
  %161 = xor i64 %160, -281470681743361
  %162 = and i64 %161, %159
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %360

164:                                              ; preds = %157
  %165 = xor i64 %159, 272678883688448
  %166 = and i64 %120, 272678883688448
  %167 = and i64 %166, %165
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %173, label %169

169:                                              ; preds = %164
  %170 = and i64 %159, 272678883688448
  %171 = icmp eq i64 %170, 0
  %172 = select i1 %171, i32 14, i32 13
  br label %360

173:                                              ; preds = %164
  %174 = icmp eq i64 %148, 0
  br i1 %174, label %191, label %175

175:                                              ; preds = %173
  %176 = icmp eq i64 %148, %121
  br i1 %176, label %183, label %177

177:                                              ; preds = %175
  %178 = icmp eq i64 %121, 0
  br i1 %178, label %179, label %360

179:                                              ; preds = %177
  %180 = and i64 %120, 1
  %181 = icmp eq i64 %180, 0
  %182 = select i1 %181, i8 1, i8 %104
  br label %191

183:                                              ; preds = %175
  br i1 %112, label %184, label %191

184:                                              ; preds = %183
  %185 = and i32 %147, 255
  %186 = lshr i16 %108, 10
  %187 = and i16 %186, 3
  %188 = zext i16 %187 to i32
  %189 = shl i32 2, %188
  %190 = icmp eq i32 %189, %185
  br i1 %190, label %191, label %360

191:                                              ; preds = %179, %184, %173, %183
  %192 = phi i8 [ %104, %184 ], [ %104, %183 ], [ %104, %173 ], [ %182, %179 ]
  %193 = add nuw nsw i64 %103, 1
  %194 = icmp eq i64 %193, %101
  br i1 %194, label %195, label %102

195:                                              ; preds = %191
  %196 = and i8 %192, 1
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %360

198:                                              ; preds = %99, %195
  %199 = and i32 %75, 3
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %299, label %201

201:                                              ; preds = %198
  %202 = and i32 %75, 2
  %203 = icmp eq i32 %202, 0
  %204 = select i1 %203, i32 %19, i32 2
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %206, label %299

206:                                              ; preds = %201
  %207 = zext i32 %204 to i64
  br label %210

208:                                              ; preds = %210
  %209 = icmp eq i64 %216, %207
  br i1 %209, label %299, label %210

210:                                              ; preds = %208, %206
  %211 = phi i64 [ 0, %206 ], [ %216, %208 ]
  %212 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 2, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = and i64 %213, 8791798054912
  %215 = icmp eq i64 %214, 0
  %216 = add nuw nsw i64 %211, 1
  br i1 %215, label %208, label %217

217:                                              ; preds = %210
  %218 = icmp ult i32 %204, 4
  br i1 %218, label %292, label %219

219:                                              ; preds = %217
  %220 = and i64 %207, 4294967292
  %221 = insertelement <2 x i64> undef, i64 %214, i32 0
  %222 = shufflevector <2 x i64> %221, <2 x i64> undef, <2 x i32> zeroinitializer
  %223 = insertelement <2 x i64> undef, i64 %214, i32 0
  %224 = shufflevector <2 x i64> %223, <2 x i64> undef, <2 x i32> zeroinitializer
  %225 = add nsw i64 %220, -4
  %226 = lshr exact i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = and i64 %227, 7
  %229 = icmp ult i64 %225, 28
  br i1 %229, label %277, label %230

230:                                              ; preds = %219
  %231 = sub nsw i64 %227, %228
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi i64 [ 0, %230 ], [ %274, %232 ]
  %234 = phi i64 [ %231, %230 ], [ %275, %232 ]
  %235 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %233
  %236 = bitcast i64* %235 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %236, align 16
  %237 = getelementptr inbounds i64, i64* %235, i64 2
  %238 = bitcast i64* %237 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %238, align 16
  %239 = or i64 %233, 4
  %240 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %239
  %241 = bitcast i64* %240 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %241, align 16
  %242 = getelementptr inbounds i64, i64* %240, i64 2
  %243 = bitcast i64* %242 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %243, align 16
  %244 = or i64 %233, 8
  %245 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %244
  %246 = bitcast i64* %245 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %246, align 16
  %247 = getelementptr inbounds i64, i64* %245, i64 2
  %248 = bitcast i64* %247 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %248, align 16
  %249 = or i64 %233, 12
  %250 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %249
  %251 = bitcast i64* %250 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %251, align 16
  %252 = getelementptr inbounds i64, i64* %250, i64 2
  %253 = bitcast i64* %252 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %253, align 16
  %254 = or i64 %233, 16
  %255 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %254
  %256 = bitcast i64* %255 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %256, align 16
  %257 = getelementptr inbounds i64, i64* %255, i64 2
  %258 = bitcast i64* %257 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %258, align 16
  %259 = or i64 %233, 20
  %260 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %259
  %261 = bitcast i64* %260 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %261, align 16
  %262 = getelementptr inbounds i64, i64* %260, i64 2
  %263 = bitcast i64* %262 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %263, align 16
  %264 = or i64 %233, 24
  %265 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %264
  %266 = bitcast i64* %265 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %266, align 16
  %267 = getelementptr inbounds i64, i64* %265, i64 2
  %268 = bitcast i64* %267 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %268, align 16
  %269 = or i64 %233, 28
  %270 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %269
  %271 = bitcast i64* %270 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %271, align 16
  %272 = getelementptr inbounds i64, i64* %270, i64 2
  %273 = bitcast i64* %272 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %273, align 16
  %274 = add i64 %233, 32
  %275 = add i64 %234, -8
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %232, !llvm.loop !6

277:                                              ; preds = %232, %219
  %278 = phi i64 [ 0, %219 ], [ %274, %232 ]
  %279 = icmp eq i64 %228, 0
  br i1 %279, label %290, label %280

280:                                              ; preds = %277, %280
  %281 = phi i64 [ %287, %280 ], [ %278, %277 ]
  %282 = phi i64 [ %288, %280 ], [ %228, %277 ]
  %283 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %281
  %284 = bitcast i64* %283 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %284, align 16
  %285 = getelementptr inbounds i64, i64* %283, i64 2
  %286 = bitcast i64* %285 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %286, align 16
  %287 = add i64 %281, 4
  %288 = add i64 %282, -1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %290, label %280, !llvm.loop !8

290:                                              ; preds = %280, %277
  %291 = icmp eq i64 %220, %207
  br i1 %291, label %299, label %292

292:                                              ; preds = %290, %217
  %293 = phi i64 [ 0, %217 ], [ %220, %290 ]
  br label %294

294:                                              ; preds = %292, %294
  %295 = phi i64 [ %297, %294 ], [ %293, %292 ]
  %296 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %295
  store i64 %214, i64* %296, align 8
  %297 = add nuw nsw i64 %295, 1
  %298 = icmp eq i64 %297, %207
  br i1 %298, label %299, label %294, !llvm.loop !10

299:                                              ; preds = %208, %294, %290, %201, %198
  br i1 %54, label %300, label %320

300:                                              ; preds = %299
  %301 = zext i32 %19 to i64
  br label %302

302:                                              ; preds = %317, %300
  %303 = phi i64 [ 0, %300 ], [ %318, %317 ]
  %304 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 2, i64 %303
  %305 = load i64, i64* %304, align 8
  %306 = and i64 %305, 8791798054912
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %317

308:                                              ; preds = %302
  %309 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 6, i64 %303, i32 0
  %310 = load i64, i64* %309, align 8
  %311 = and i64 %310, 8791798054912
  %312 = getelementptr inbounds [5 x i64], [5 x i64]* %4, i64 0, i64 %303
  %313 = load i64, i64* %312, align 8
  %314 = xor i64 %313, -1
  %315 = and i64 %311, %314
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %360

317:                                              ; preds = %308, %302
  %318 = add nuw nsw i64 %303, 1
  %319 = icmp eq i64 %318, %301
  br i1 %319, label %320, label %302

320:                                              ; preds = %317, %299
  %321 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %73, i32 0, i64 3
  %322 = load i32, i32* %321, align 4
  %323 = and i32 %322, 131071
  %324 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  %325 = and i32 %324, 131071
  %326 = icmp ugt i32 %323, %325
  br i1 %326, label %360, label %327

327:                                              ; preds = %320
  %328 = icmp eq i32 %2, 64
  %329 = getelementptr inbounds [275 x %struct.iflag_t], [275 x %struct.iflag_t]* @insns_flags, i64 0, i64 %73, i32 0, i64 1
  %330 = load i32, i32* %329, align 4
  %331 = select i1 %328, i32 16, i32 32
  %332 = and i32 %330, %331
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %334, label %360

334:                                              ; preds = %327
  %335 = and i32 %330, 64
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %342, label %337

337:                                              ; preds = %334
  %338 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 1
  %339 = load i32, i32* %338, align 4
  %340 = add i32 %339, -257
  %341 = icmp ult i32 %340, 2
  br i1 %341, label %360, label %342

342:                                              ; preds = %337, %334
  %343 = getelementptr inbounds %struct.itemplate, %struct.itemplate* %0, i64 0, i32 4
  %344 = load i8*, i8** %343, align 8
  %345 = load i8, i8* %344, align 1
  %346 = and i8 %345, -2
  %347 = icmp eq i8 %346, -8
  br i1 %347, label %360, label %348

348:                                              ; preds = %342
  %349 = and i32 %330, 256
  %350 = icmp eq i32 %349, 0
  %351 = getelementptr inbounds %struct.insn, %struct.insn* %1, i64 0, i32 1, i64 1
  %352 = load i32, i32* %351, align 4
  br i1 %350, label %353, label %356

353:                                              ; preds = %348
  %354 = add i32 %352, -259
  %355 = icmp ult i32 %354, 2
  br i1 %355, label %360, label %359

356:                                              ; preds = %348
  %357 = and i32 %352, -2
  %358 = icmp eq i32 %357, 252
  br i1 %358, label %360, label %359

359:                                              ; preds = %356, %353
  br label %360

360:                                              ; preds = %59, %126, %184, %177, %157, %154, %146, %308, %356, %353, %337, %37, %327, %45, %26, %169, %342, %320, %195, %17, %3, %359
  %361 = phi i32 [ 16, %359 ], [ 0, %3 ], [ 0, %17 ], [ 0, %26 ], [ 10, %37 ], [ 10, %45 ], [ 1, %195 ], [ 7, %320 ], [ 8, %327 ], [ 15, %342 ], [ %172, %169 ], [ 9, %337 ], [ 11, %353 ], [ 12, %356 ], [ 2, %308 ], [ 5, %146 ], [ 6, %154 ], [ 0, %157 ], [ 0, %177 ], [ 4, %184 ], [ 3, %126 ], [ 0, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #10
  ret i32 %361
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { nounwind allocsize(0) }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{i64 0, i64 65}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.isvectorized", i32 1}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !11, !7}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
