; ModuleID = '../../third_party/opus/src/silk/float/LPC_inv_pred_gain_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/LPC_inv_pred_gain_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden float @silk_LPC_inverse_pred_gain_FLP(float* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = alloca [24 x float], align 16
  %4 = bitcast [24 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %4) #2
  %5 = getelementptr inbounds [24 x float], [24 x float]* %3, i64 0, i64 0
  %6 = bitcast float* %0 to i8*
  %7 = sext i32 %1 to i64
  %8 = shl nsw i64 %7, 2
  %9 = icmp ugt i64 %8, 95
  %10 = sub nsw i64 96, %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = getelementptr [24 x float], [24 x float]* %3, i64 0, i64 %7
  %13 = bitcast float* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 -1, i64 %11, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* align 4 %6, i64 %8, i1 false)
  %14 = add i32 %1, -1
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %63

16:                                               ; preds = %2
  %17 = sext i32 %14 to i64
  br label %22

18:                                               ; preds = %41, %35
  %19 = trunc i64 %23 to i32
  %20 = add nsw i64 %23, -1
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %22, label %63

22:                                               ; preds = %16, %18
  %23 = phi i64 [ %17, %16 ], [ %20, %18 ]
  %24 = phi double [ 1.000000e+00, %16 ], [ %32, %18 ]
  %25 = phi i32 [ %1, %16 ], [ %19, %18 ]
  %26 = getelementptr inbounds [24 x float], [24 x float]* %3, i64 0, i64 %23
  %27 = load float, float* %26, align 4
  %28 = fsub float -0.000000e+00, %27
  %29 = fpext float %28 to double
  %30 = fmul double %29, %29
  %31 = fsub double 1.000000e+00, %30
  %32 = fmul double %24, %31
  %33 = fmul double %32, 1.000000e+04
  %34 = fcmp olt double %33, 1.000000e+00
  br i1 %34, label %75, label %35

35:                                               ; preds = %22
  %36 = fdiv double 1.000000e+00, %31
  %37 = icmp sgt i32 %25, 1
  br i1 %37, label %38, label %18

38:                                               ; preds = %35
  %39 = lshr i32 %25, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %38, %41
  %42 = phi i64 [ 0, %38 ], [ %61, %41 ]
  %43 = getelementptr inbounds [24 x float], [24 x float]* %3, i64 0, i64 %42
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = xor i64 %42, 4294967295
  %47 = add i64 %23, %46
  %48 = shl i64 %47, 32
  %49 = ashr exact i64 %48, 32
  %50 = getelementptr inbounds [24 x float], [24 x float]* %3, i64 0, i64 %49
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = fmul double %29, %52
  %54 = fsub double %45, %53
  %55 = fmul double %36, %54
  %56 = fptrunc double %55 to float
  store float %56, float* %43, align 4
  %57 = fmul double %29, %45
  %58 = fsub double %52, %57
  %59 = fmul double %36, %58
  %60 = fptrunc double %59 to float
  store float %60, float* %50, align 4
  %61 = add nuw nsw i64 %42, 1
  %62 = icmp ult i64 %61, %40
  br i1 %62, label %41, label %18

63:                                               ; preds = %18, %2
  %64 = phi double [ 1.000000e+00, %2 ], [ %32, %18 ]
  %65 = load float, float* %5, align 16
  %66 = fsub float -0.000000e+00, %65
  %67 = fpext float %66 to double
  %68 = fmul double %67, %67
  %69 = fsub double 1.000000e+00, %68
  %70 = fmul double %64, %69
  %71 = fmul double %70, 1.000000e+04
  %72 = fcmp olt double %71, 1.000000e+00
  br i1 %72, label %75, label %73

73:                                               ; preds = %63
  %74 = fptrunc double %70 to float
  br label %75

75:                                               ; preds = %22, %63, %73
  %76 = phi float [ %74, %73 ], [ 0.000000e+00, %63 ], [ 0.000000e+00, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %4) #2
  ret float %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
