; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_fast_heuristics.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_fast_heuristics.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane.97", %"class.jxl::Plane.97", %"class.std::__1::vector.177", %"class.std::__1::vector.185", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.194", %"class.std::__1::vector.98", %"class.std::__1::vector.9", float, float, %"class.std::__1::unique_ptr.224" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.53", %"class.jxl::Plane", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.9", %"class.jxl::Plane", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.104], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.4" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.9", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.16", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.23", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.27" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { float* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.48" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.30, %"struct.jxl::DctQuantWeightParams", %union.anon.47 }>
%union.anon.30 = type { %"struct.std::__1::array.37", [4 x i8] }
%"struct.std::__1::array.37" = type { [3 x %"struct.std::__1::array.38"] }
%"struct.std::__1::array.38" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.29"] }
%"struct.std::__1::array.29" = type { [17 x float] }
%union.anon.47 = type { i8 }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.53" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.54", %"class.jxl::Plane.54", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.54" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.55", %"class.std::__1::vector.69", %"class.std::__1::vector.69" }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.57", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.59" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { i64*, i64*, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.76", %"class.std::__1::vector.90" }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.85" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.78", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.80" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.92" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.97"] }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.40"], %"class.std::__1::vector.9", %"class.std::__1::vector.98", i64, i64 }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { i32*, i32*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i32* }
%struct.anon.104 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.169", i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115", %"class.std::__1::vector.108", %"class.std::__1::vector.122", %"class.std::__1::vector.130", %"class.std::__1::vector.139", %"class.std::__1::vector.153", %"class.std::__1::vector.98", %"class.std::__1::vector.108", %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.98" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { i32*, i32*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { i32* }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.124", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.124" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.134" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.132", %"struct.std::__1::array.133", i32, i8, [3 x i8] }>
%"struct.std::__1::array.132" = type { [17 x i32] }
%"struct.std::__1::array.133" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.148" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i16*, i16*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i16* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.155", i32, %"class.std::__1::vector.9", %"class.std::__1::vector.156" }
%"struct.std::__1::array.155" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.158" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.98"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Plane.97"* }
%"class.jxl::Plane.97" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"*, %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::unique_ptr.179" = type opaque
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.std::__1::unique_ptr.179"* }
%"class.std::__1::vector.185" = type { %"class.std::__1::__vector_base.186" }
%"class.std::__1::__vector_base.186" = type { %"class.std::__1::unique_ptr.187"*, %"class.std::__1::unique_ptr.187"*, %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::unique_ptr.187" = type opaque
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.std::__1::unique_ptr.187"* }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane.97"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane.97"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair.193", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.9", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"struct.std::__1::pair.193" = type { float, float }
%"class.std::__1::vector.194" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.219" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.196", %"class.std::__1::vector.98", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::vector.196" = type { %"class.std::__1::__vector_base.197" }
%"class.std::__1::__vector_base.197" = type { %"class.std::__1::vector.198"*, %"class.std::__1::vector.198"*, %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::vector.198" = type opaque
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.std::__1::vector.198"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.204", i8, %"class.std::__1::vector.212", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.204" = type { %"class.std::__1::__vector_base.205" }
%"class.std::__1::__vector_base.205" = type { %"class.std::__1::vector.206"*, %"class.std::__1::vector.206"*, %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::vector.206" = type opaque
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.std::__1::vector.206"* }
%"class.std::__1::vector.212" = type { %"class.std::__1::__vector_base.213" }
%"class.std::__1::__vector_base.213" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.214" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { i8*, i8*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i32*, i32*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%"class.std::__1::unique_ptr.224" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"class.jxl::ModularFrameEncoder" = type opaque
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.230", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.231", %"struct.std::__1::array.231", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.232" }
%"struct.std::__1::array.230" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.231" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.232" = type { %"class.std::__1::__function::__policy_func.236" }
%"class.std::__1::__function::__policy_func.236" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.237", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.237" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.245", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.238" }
%"class.std::__1::vector.238" = type { %"class.std::__1::__vector_base.239" }
%"class.std::__1::__vector_base.239" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.240" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.241" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.std::__1::vector.245" = type { %"class.std::__1::__vector_base.246" }
%"class.std::__1::__vector_base.246" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.jxl::ImageBundle"* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.252" }
%"struct.std::__1::__atomic_base.252" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.jxl::FastEncoderHeuristics" = type { %"class.jxl::EncoderHeuristics" }
%"class.std::__1::vector.253" = type opaque
%"class.jxl::ThreadPool::RunCallState.272" = type { i32 (i64)*, %class.anon.261* }
%class.anon.261 = type { i64*, %"class.jxl::Plane.97"*, %"struct.jxl::PassesSharedState"*, float*, [18 x %"struct.std::__1::pair.260"]*, %class.anon.259*, float* }
%"struct.std::__1::pair.260" = type { i32, float }
%class.anon.259 = type { %"class.jxl::Plane.97"* }
%"class.jxl::ThreadPool::RunCallState.263" = type { i32 (i64)*, %class.anon.258* }
%class.anon.258 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"* }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { i64*, %"class.jxl::Image3"*, %"struct.jxl::PassesSharedState"* }
%"class.std::__1::unique_ptr.254" = type { %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256", %"struct.std::__1::__compressed_pair_elem.257" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"struct.jxl::RecursiveGaussian"* }
%"struct.jxl::RecursiveGaussian" = type { [12 x float], [12 x float], [12 x float], [12 x float], [12 x float], i64 }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"class.hwy::AlignedDeleter" }
%"class.hwy::AlignedDeleter" = type { void (i8*, i8*)*, i8* }
%"class.jxl::ThreadPool::RunCallState.283" = type { i32 (i64)*, %class.anon.276* }
%class.anon.276 = type { i64*, %"class.jxl::Plane.97"*, %"struct.jxl::PassesSharedState"*, float*, [18 x %"struct.std::__1::pair.260"]*, %class.anon.275*, float* }
%class.anon.275 = type { %"class.jxl::Plane.97"* }
%"class.jxl::ThreadPool::RunCallState.278" = type { i32 (i64)*, %class.anon.274* }
%class.anon.274 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"* }
%"class.jxl::ThreadPool::RunCallState.277" = type { i32 (i64)*, %class.anon.273* }
%class.anon.273 = type { i64*, %"class.jxl::Image3"*, %"struct.jxl::PassesSharedState"* }
%"class.jxl::ThreadPool::RunCallState.292" = type { i32 (i64)*, %class.anon.287* }
%class.anon.287 = type { i64*, %"class.jxl::Plane.97"*, %"struct.jxl::PassesSharedState"*, float*, [18 x %"struct.std::__1::pair.260"]*, %class.anon.286*, float* }
%class.anon.286 = type { %"class.jxl::Plane.97"* }
%"class.jxl::ThreadPool::RunCallState.289" = type { i32 (i64)*, %class.anon.285* }
%class.anon.285 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"* }
%"class.jxl::ThreadPool::RunCallState.288" = type { i32 (i64)*, %class.anon.284* }
%class.anon.284 = type { i64*, %"class.jxl::Image3"*, %"struct.jxl::PassesSharedState"* }
%"class.jxl::ThreadPool::RunCallState.299" = type { i32 (i64)*, %class.anon.296* }
%class.anon.296 = type { i64*, %"class.jxl::Plane.97"*, %"struct.jxl::PassesSharedState"*, float*, [18 x %"struct.std::__1::pair.260"]*, %class.anon.295*, float* }
%class.anon.295 = type { %"class.jxl::Plane.97"* }
%"class.jxl::ThreadPool::RunCallState.298" = type { i32 (i64)*, %class.anon.294* }
%class.anon.294 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"struct.jxl::FrameDimensions"* }
%"class.jxl::ThreadPool::RunCallState.297" = type { i32 (i64)*, %class.anon.293* }
%class.anon.293 = type { i64*, %"class.jxl::Image3"*, %"struct.jxl::PassesSharedState"* }
%"class.jxl::Image3.268" = type { [3 x %"class.jxl::Plane"] }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl17EncoderHeuristicsD2Ev = comdat any

$_ZN3jxl21FastEncoderHeuristicsD0Ev = comdat any

$_ZN3jxl17EncoderHeuristics23CustomFixedTreeLosslessERKNS_15FrameDimensionsEPNSt3__16vectorINS_20PropertyDecisionNodeENS4_9allocatorIS6_EEEE = comdat any

$_ZN3jxl17EncoderHeuristics22HandlesColorConversionERKNS_14CompressParamsERKNS_11ImageBundleE = comdat any

$_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE = comdat any

$_ZNK3jxl6AuxOut19DumpPlaneNormalizedIhEEvPKcRKNS_5PlaneIT_EE = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZNK3jxl6AuxOut9DumpImageIhEEvPKcRKNS_6Image3IT_EE = comdat any

$_ZN3jxl10CodecInOutC2Ev = comdat any

$_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE = comdat any

$_ZN3jxl14ConvertToFloatIhEENS_6Image3IfEERKNS1_IT_EE = comdat any

$_ZN3jxl10CodecInOutD2Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN3jxl11ImageBundleC2EOS0_ = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_ = comdat any

$_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_ = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl15AcStrategyImage3SetEmmNS_10AcStrategy4TypeE = comdat any

$_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

@_ZN3jxlL30HeuristicsHighwayDispatchTableE = internal unnamed_addr constant [12 x i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*] [i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3hwy13FunctionCacheIN3jxl6StatusEJPNS1_18PassesEncoderStateEPNS1_19ModularFrameEncoderEPKNS1_11ImageBundleEPNS1_6Image3IfEEPNS1_10ThreadPoolEPNS1_6AuxOutEEE13ChooseAndCallIXadL_ZNS1_L30HeuristicsHighwayDispatchTableEEEEES2_S4_S6_S9_SC_SE_SG_, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* null, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3jxl8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZTVN3jxl21FastEncoderHeuristicsE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::EncoderHeuristics"*)* @_ZN3jxl17EncoderHeuristicsD2Ev to i8*), i8* bitcast (void (%"class.jxl::FastEncoderHeuristics"*)* @_ZN3jxl21FastEncoderHeuristicsD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::FastEncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3jxl21FastEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE to i8*), i8* bitcast (i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.253"*)* @_ZN3jxl17EncoderHeuristics23CustomFixedTreeLosslessERKNS_15FrameDimensionsEPNSt3__16vectorINS_20PropertyDecisionNodeENS4_9allocatorIS6_EEEE to i8*), i8* bitcast (i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl17EncoderHeuristics22HandlesColorConversionERKNS_14CompressParamsERKNS_11ImageBundleE to i8*)] }, align 8
@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_fast_heuristics.cc\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"cparams.butteraugli_distance > 0\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"CfL\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"MaxPool\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"pooledhf44\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"summedhf44\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"QF+ACS+EPF\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"qf\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"epf\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"acs\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c".png\00", align 1
@__const._ZNK3jxl6AuxOut9DumpImageIhEEvPKcRKNS_6Image3IT_EE.io = private unnamed_addr constant { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.169", i64 }, %"class.std::__1::vector.245", i8, [7 x i8], i64 } { %"struct.jxl::SizeConstraints" { i32 -1431655766, i32 -1431655766, i64 -6148914691236517206 }, %"class.jxl::DecoderHints" { %"class.std::__1::vector.238" { %"class.std::__1::__vector_base.239" { %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*), %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*), %"class.std::__1::__compressed_pair.240" { %"struct.std::__1::__compressed_pair_elem.241" { %"struct.jxl::DecoderHints::KeyValue"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::DecoderHints::KeyValue"*) } } } } }, i32 -1431655766, float 0xFFFFFFFFE0000000, i64 -6148914691236517206, %"struct.jxl::Blobs" { %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" } { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }> <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::ToneMapping" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector" { %"class.std::__1::__vector_base" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"class.std::__1::__compressed_pair.4" { %"struct.std::__1::__compressed_pair_elem.5" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*) } } } }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::AnimationHeader" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }> }, { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.169", i64 } { %"class.std::__1::unique_ptr.105" { %"class.std::__1::__compressed_pair.106" { %"struct.std::__1::__compressed_pair_elem.107" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane.97"] [%"class.jxl::Plane.97" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.97" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.97" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.169" { %"class.std::__1::__vector_base.170" { %"class.jxl::Plane.97"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane.97"*), %"class.jxl::Plane.97"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane.97"*), %"class.std::__1::__compressed_pair.171" { %"struct.std::__1::__compressed_pair_elem.172" { %"class.jxl::Plane.97"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane.97"*) } } } }, i64 -6148914691236517206 }, %"class.std::__1::vector.245" { %"class.std::__1::__vector_base.246" { %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.std::__1::__compressed_pair.247" { %"struct.std::__1::__compressed_pair_elem.248" { %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*) } } } }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, align 8
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.19 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.20 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/codec_in_out.h\00", align 1
@.str.21 = private unnamed_addr constant [32 x i8] c"metadata.size.Set(xsize, ysize)\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane1)\00", align 1
@.str.23 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane2)\00", align 1
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@.str.24 = private unnamed_addr constant [51 x i8] c"../../third_party/libjxl/src/lib/jxl/ac_strategy.h\00", align 1
@.str.25 = private unnamed_addr constant [46 x i8] c"y + acs.covered_blocks_y() <= layers_.ysize()\00", align 1
@.str.26 = private unnamed_addr constant [46 x i8] c"x + acs.covered_blocks_x() <= layers_.xsize()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl21FastEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE(%"class.jxl::FastEncoderHeuristics"* nocapture readnone, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) unnamed_addr #0 align 2 {
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #8, !range !2
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*], [12 x i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*]* @_ZN3jxlL30HeuristicsHighwayDispatchTableE, i64 0, i64 %11
  %13 = load i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)** %12, align 8
  %14 = tail call i32 %13(%"struct.jxl::PassesEncoderState"* %1, %"class.jxl::ModularFrameEncoder"* %2, %"class.jxl::ImageBundle"* %3, %"class.jxl::Image3"* %4, %"class.jxl::ThreadPool"* %5, %"struct.jxl::AuxOut"* %6) #8
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17EncoderHeuristicsD2Ev(%"class.jxl::EncoderHeuristics"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl21FastEncoderHeuristicsD0Ev(%"class.jxl::FastEncoderHeuristics"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"class.jxl::FastEncoderHeuristics"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl17EncoderHeuristics23CustomFixedTreeLosslessERKNS_15FrameDimensionsEPNSt3__16vectorINS_20PropertyDecisionNodeENS4_9allocatorIS6_EEEE(%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"* dereferenceable(144), %"class.std::__1::vector.253"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl17EncoderHeuristics22HandlesColorConversionERKNS_14CompressParamsERKNS_11ImageBundleE(%"class.jxl::EncoderHeuristics"*, %"struct.jxl::CompressParams"* dereferenceable(360), %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3hwy13FunctionCacheIN3jxl6StatusEJPNS1_18PassesEncoderStateEPNS1_19ModularFrameEncoderEPKNS1_11ImageBundleEPNS1_6Image3IfEEPNS1_10ThreadPoolEPNS1_6AuxOutEEE13ChooseAndCallIXadL_ZNS1_L30HeuristicsHighwayDispatchTableEEEEES2_S4_S6_S9_SC_SE_SG_(%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) #0 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #8
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %8 = and i32 %7, 2225
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #8, !range !2
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [12 x i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*], [12 x i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*]* @_ZN3jxlL30HeuristicsHighwayDispatchTableE, i64 0, i64 %10
  %12 = load i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)*, i32 (%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)** %11, align 8
  %13 = tail call i32 %12(%"struct.jxl::PassesEncoderState"* %0, %"class.jxl::ModularFrameEncoder"* %1, %"class.jxl::ImageBundle"* %2, %"class.jxl::Image3"* %3, %"class.jxl::ThreadPool"* %4, %"struct.jxl::AuxOut"* %5) #8
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE(%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"* nocapture readnone, %"class.jxl::ImageBundle"* nocapture readnone, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) #2 {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.272", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.272", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState.263", align 8
  %12 = alloca %"class.jxl::ThreadPool::RunCallState.263", align 8
  %13 = alloca double, align 8
  %14 = alloca %"class.jxl::ThreadPool", align 8
  %15 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %16 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %17 = alloca double, align 8
  %18 = alloca %"class.jxl::ThreadPool", align 8
  %19 = alloca %"class.jxl::Image3", align 8
  %20 = alloca %"class.jxl::Image3", align 8
  %21 = alloca %"class.jxl::Plane.97", align 8
  %22 = alloca %"class.std::__1::unique_ptr.254", align 8
  %23 = alloca i64, align 8
  %24 = alloca %class.anon, align 8
  %25 = alloca %"class.jxl::Image3", align 8
  %26 = alloca %"class.jxl::Image3", align 8
  %27 = alloca %class.anon.258, align 8
  %28 = alloca %"class.std::__1::unique_ptr.254", align 8
  %29 = alloca %"class.jxl::Image3", align 8
  %30 = alloca %"class.jxl::Plane.97", align 8
  %31 = alloca %"class.jxl::Plane.97", align 8
  %32 = alloca %"class.jxl::Image3", align 8
  %33 = alloca %"class.jxl::Plane.97", align 8
  %34 = alloca %"class.jxl::Plane.97", align 8
  %35 = alloca float, align 4
  %36 = alloca %"class.jxl::Plane.97", align 8
  %37 = alloca %class.anon.259, align 8
  %38 = alloca [18 x %"struct.std::__1::pair.260"], align 16
  %39 = alloca float, align 4
  %40 = alloca %class.anon.261, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2
  %43 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 0
  %44 = load float, float* %43, align 8
  %45 = fcmp ogt float %44, 0.000000e+00
  br i1 %45, label %49, label %46

46:                                               ; preds = %6
  %47 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #8
  %48 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

49:                                               ; preds = %6
  %50 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 1, i32 26, i32 2
  %51 = load i8, i8* %50, align 1, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"* %3, float 0x3FEFB50D60000000, %"class.jxl::ThreadPool"* %4) #8
  br label %54

54:                                               ; preds = %49, %53
  %55 = bitcast %"class.jxl::Image3"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %19, %"class.jxl::Image3"* dereferenceable(96) %3, i64 16, i64 16) #8
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = icmp eq i32 %60, 0
  br i1 %62, label %188, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %68 = icmp eq i32 %57, 0
  %69 = shl nuw nsw i64 %58, 2
  %70 = icmp ult i32 %57, 64
  %71 = and i64 %58, 4294967232
  %72 = icmp eq i64 %71, %58
  %73 = and i64 %58, 3
  %74 = icmp eq i64 %73, 0
  br label %75

75:                                               ; preds = %158, %63
  %76 = phi i64 [ 0, %63 ], [ %159, %158 ]
  %77 = load i8*, i8** %64, align 8
  %78 = load i64, i64* %65, align 8
  %79 = mul i64 %78, %76
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  call void @llvm.assume(i1 %83) #8
  %84 = bitcast i8* %80 to float*
  %85 = load i8*, i8** %66, align 8
  %86 = load i64, i64* %67, align 8
  %87 = mul i64 %86, %76
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = ptrtoint i8* %88 to i64
  %90 = and i64 %89, 63
  %91 = icmp eq i64 %90, 0
  call void @llvm.assume(i1 %91) #8
  %92 = bitcast i8* %88 to float*
  br i1 %68, label %158, label %93

93:                                               ; preds = %75
  br i1 %70, label %94, label %112

94:                                               ; preds = %157, %112, %93
  %95 = phi i64 [ 0, %112 ], [ 0, %93 ], [ %71, %157 ]
  %96 = xor i64 %95, -1
  %97 = add nsw i64 %96, %58
  br i1 %74, label %109, label %98

98:                                               ; preds = %94, %98
  %99 = phi i64 [ %106, %98 ], [ %95, %94 ]
  %100 = phi i64 [ %107, %98 ], [ %73, %94 ]
  %101 = getelementptr inbounds float, float* %84, i64 %99
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds float, float* %92, i64 %99
  %104 = load float, float* %103, align 4
  %105 = fsub float %104, %102
  store float %105, float* %103, align 4
  %106 = add nuw nsw i64 %99, 1
  %107 = add i64 %100, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %98, !llvm.loop !4

109:                                              ; preds = %98, %94
  %110 = phi i64 [ %95, %94 ], [ %106, %98 ]
  %111 = icmp ult i64 %97, 3
  br i1 %111, label %158, label %161

112:                                              ; preds = %93
  %113 = getelementptr i8, i8* %85, i64 %69
  %114 = getelementptr i8, i8* %113, i64 %87
  %115 = getelementptr i8, i8* %77, i64 %69
  %116 = mul i64 %78, %76
  %117 = getelementptr i8, i8* %115, i64 %116
  %118 = icmp ult i8* %88, %117
  %119 = icmp ult i8* %80, %114
  %120 = and i1 %118, %119
  br i1 %120, label %94, label %121

121:                                              ; preds = %112, %121
  %122 = phi i64 [ %155, %121 ], [ 0, %112 ]
  %123 = getelementptr inbounds float, float* %84, i64 %122
  %124 = bitcast float* %123 to <16 x float>*
  %125 = load <16 x float>, <16 x float>* %124, align 64, !alias.scope !6
  %126 = getelementptr inbounds float, float* %123, i64 16
  %127 = bitcast float* %126 to <16 x float>*
  %128 = load <16 x float>, <16 x float>* %127, align 64, !alias.scope !6
  %129 = getelementptr inbounds float, float* %123, i64 32
  %130 = bitcast float* %129 to <16 x float>*
  %131 = load <16 x float>, <16 x float>* %130, align 64, !alias.scope !6
  %132 = getelementptr inbounds float, float* %123, i64 48
  %133 = bitcast float* %132 to <16 x float>*
  %134 = load <16 x float>, <16 x float>* %133, align 64, !alias.scope !6
  %135 = getelementptr inbounds float, float* %92, i64 %122
  %136 = bitcast float* %135 to <16 x float>*
  %137 = load <16 x float>, <16 x float>* %136, align 64, !alias.scope !9, !noalias !6
  %138 = getelementptr inbounds float, float* %135, i64 16
  %139 = bitcast float* %138 to <16 x float>*
  %140 = load <16 x float>, <16 x float>* %139, align 64, !alias.scope !9, !noalias !6
  %141 = getelementptr inbounds float, float* %135, i64 32
  %142 = bitcast float* %141 to <16 x float>*
  %143 = load <16 x float>, <16 x float>* %142, align 64, !alias.scope !9, !noalias !6
  %144 = getelementptr inbounds float, float* %135, i64 48
  %145 = bitcast float* %144 to <16 x float>*
  %146 = load <16 x float>, <16 x float>* %145, align 64, !alias.scope !9, !noalias !6
  %147 = fsub <16 x float> %137, %125
  %148 = fsub <16 x float> %140, %128
  %149 = fsub <16 x float> %143, %131
  %150 = fsub <16 x float> %146, %134
  %151 = bitcast float* %135 to <16 x float>*
  store <16 x float> %147, <16 x float>* %151, align 64, !alias.scope !9, !noalias !6
  %152 = bitcast float* %138 to <16 x float>*
  store <16 x float> %148, <16 x float>* %152, align 64, !alias.scope !9, !noalias !6
  %153 = bitcast float* %141 to <16 x float>*
  store <16 x float> %149, <16 x float>* %153, align 64, !alias.scope !9, !noalias !6
  %154 = bitcast float* %144 to <16 x float>*
  store <16 x float> %150, <16 x float>* %154, align 64, !alias.scope !9, !noalias !6
  %155 = add i64 %122, 64
  %156 = icmp eq i64 %155, %71
  br i1 %156, label %157, label %121, !llvm.loop !11

157:                                              ; preds = %121
  br i1 %72, label %158, label %94

158:                                              ; preds = %109, %161, %157, %75
  %159 = add nuw nsw i64 %76, 1
  %160 = icmp eq i64 %159, %61
  br i1 %160, label %188, label %75

161:                                              ; preds = %109, %161
  %162 = phi i64 [ %186, %161 ], [ %110, %109 ]
  %163 = getelementptr inbounds float, float* %84, i64 %162
  %164 = load float, float* %163, align 4
  %165 = getelementptr inbounds float, float* %92, i64 %162
  %166 = load float, float* %165, align 4
  %167 = fsub float %166, %164
  store float %167, float* %165, align 4
  %168 = add nuw nsw i64 %162, 1
  %169 = getelementptr inbounds float, float* %84, i64 %168
  %170 = load float, float* %169, align 4
  %171 = getelementptr inbounds float, float* %92, i64 %168
  %172 = load float, float* %171, align 4
  %173 = fsub float %172, %170
  store float %173, float* %171, align 4
  %174 = add nuw nsw i64 %162, 2
  %175 = getelementptr inbounds float, float* %84, i64 %174
  %176 = load float, float* %175, align 4
  %177 = getelementptr inbounds float, float* %92, i64 %174
  %178 = load float, float* %177, align 4
  %179 = fsub float %178, %176
  store float %179, float* %177, align 4
  %180 = add nuw nsw i64 %162, 3
  %181 = getelementptr inbounds float, float* %84, i64 %180
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds float, float* %92, i64 %180
  %184 = load float, float* %183, align 4
  %185 = fsub float %184, %182
  store float %185, float* %183, align 4
  %186 = add nuw nsw i64 %162, 4
  %187 = icmp eq i64 %186, %58
  br i1 %187, label %158, label %161, !llvm.loop !13

188:                                              ; preds = %158, %54
  %189 = bitcast %"class.jxl::Image3"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %189) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %189, i8 -86, i64 96, i1 false)
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = zext i32 %191 to i64
  %193 = add nuw nsw i64 %192, 64
  %194 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %197, i64 %193, i64 %196, i64 4) #8
  %198 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %198, i64 %193, i64 %196, i64 4) #8
  %199 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %199, i64 %193, i64 %196, i64 4) #8
  %200 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 1
  %201 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 4
  %202 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 0
  %203 = load i32, i32* %200, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %272, label %205

205:                                              ; preds = %188
  %206 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %209

207:                                              ; preds = %209
  %208 = icmp eq i32 %225, 0
  br i1 %208, label %272, label %228

209:                                              ; preds = %209, %205
  %210 = phi i64 [ 0, %205 ], [ %224, %209 ]
  %211 = load i64, i64* %201, align 8
  %212 = mul i64 %211, %210
  %213 = load i8*, i8** %206, align 8
  %214 = ptrtoint i8* %213 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #8
  %217 = getelementptr inbounds i8, i8* %213, i64 %212
  %218 = ptrtoint i8* %217 to i64
  %219 = and i64 %218, 63
  %220 = icmp eq i64 %219, 0
  call void @llvm.assume(i1 %220) #8
  %221 = load i32, i32* %202, align 8
  %222 = zext i32 %221 to i64
  %223 = shl nuw nsw i64 %222, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %217, i8 0, i64 %223, i1 false) #8
  %224 = add nuw nsw i64 %210, 1
  %225 = load i32, i32* %200, align 4
  %226 = zext i32 %225 to i64
  %227 = icmp ult i64 %224, %226
  br i1 %227, label %209, label %207

228:                                              ; preds = %207
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %245, %230 ]
  %232 = load i64, i64* %201, align 8
  %233 = mul i64 %232, %231
  %234 = load i8*, i8** %229, align 8
  %235 = ptrtoint i8* %234 to i64
  %236 = and i64 %235, 63
  %237 = icmp eq i64 %236, 0
  call void @llvm.assume(i1 %237) #8
  %238 = getelementptr inbounds i8, i8* %234, i64 %233
  %239 = ptrtoint i8* %238 to i64
  %240 = and i64 %239, 63
  %241 = icmp eq i64 %240, 0
  call void @llvm.assume(i1 %241) #8
  %242 = load i32, i32* %202, align 8
  %243 = zext i32 %242 to i64
  %244 = shl nuw nsw i64 %243, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %238, i8 0, i64 %244, i1 false) #8
  %245 = add nuw nsw i64 %231, 1
  %246 = load i32, i32* %200, align 4
  %247 = zext i32 %246 to i64
  %248 = icmp ult i64 %245, %247
  br i1 %248, label %230, label %249

249:                                              ; preds = %230
  %250 = icmp eq i32 %246, 0
  br i1 %250, label %272, label %251

251:                                              ; preds = %249
  %252 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %253

253:                                              ; preds = %253, %251
  %254 = phi i64 [ 0, %251 ], [ %268, %253 ]
  %255 = load i64, i64* %201, align 8
  %256 = mul i64 %255, %254
  %257 = load i8*, i8** %252, align 8
  %258 = ptrtoint i8* %257 to i64
  %259 = and i64 %258, 63
  %260 = icmp eq i64 %259, 0
  call void @llvm.assume(i1 %260) #8
  %261 = getelementptr inbounds i8, i8* %257, i64 %256
  %262 = ptrtoint i8* %261 to i64
  %263 = and i64 %262, 63
  %264 = icmp eq i64 %263, 0
  call void @llvm.assume(i1 %264) #8
  %265 = load i32, i32* %202, align 8
  %266 = zext i32 %265 to i64
  %267 = shl nuw nsw i64 %266, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %261, i8 0, i64 %267, i1 false) #8
  %268 = add nuw nsw i64 %254, 1
  %269 = load i32, i32* %200, align 4
  %270 = zext i32 %269 to i64
  %271 = icmp ult i64 %268, %270
  br i1 %271, label %253, label %272

272:                                              ; preds = %253, %188, %207, %249
  %273 = load i32, i32* %190, align 8
  %274 = zext i32 %273 to i64
  %275 = load i32, i32* %194, align 4
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 2
  %278 = load i32, i32* %277, align 8
  %279 = icmp ult i32 %278, %273
  br i1 %279, label %280, label %283

280:                                              ; preds = %298, %290, %272
  %281 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)) #8
  %282 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

283:                                              ; preds = %272
  %284 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 3
  %285 = load i32, i32* %284, align 4
  %286 = icmp ult i32 %285, %275
  br i1 %286, label %287, label %290

287:                                              ; preds = %304, %294, %283
  %288 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #8
  %289 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

290:                                              ; preds = %283
  store i32 %273, i32* %202, align 8
  store i32 %275, i32* %200, align 4
  %291 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 2
  %292 = load i32, i32* %291, align 8
  %293 = icmp ult i32 %292, %273
  br i1 %293, label %280, label %294

294:                                              ; preds = %290
  %295 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = icmp ult i32 %296, %275
  br i1 %297, label %287, label %298

298:                                              ; preds = %294
  %299 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %273, i32* %299, align 8
  %300 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %275, i32* %300, align 4
  %301 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 2
  %302 = load i32, i32* %301, align 8
  %303 = icmp ult i32 %302, %273
  br i1 %303, label %280, label %304

304:                                              ; preds = %298
  %305 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 3
  %306 = load i32, i32* %305, align 4
  %307 = icmp ult i32 %306, %275
  br i1 %307, label %287, label %308

308:                                              ; preds = %304
  %309 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %273, i32* %309, align 8
  %310 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %275, i32* %310, align 4
  %311 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %311) #8
  %312 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %313 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0
  %314 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %314, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %313, i64 %274, i64 %276, i64 4) #8
  %315 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %315) #8
  %316 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 0, i32 0
  %317 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 0
  %318 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 1
  %319 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %319, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %22, double 0x4026D49CB566E5F4) #8
  %320 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0
  %321 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %320, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* nonnull %321) #8
  %322 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %323 = load i32, i32* %322, align 8
  %324 = zext i32 %323 to i64
  %325 = load i32, i32* %194, align 4
  %326 = zext i32 %325 to i64
  %327 = icmp eq i32 %325, 0
  br i1 %327, label %563, label %439

328:                                              ; preds = %1552
  %329 = bitcast %"class.jxl::ThreadPool"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %329) #8
  %330 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 0
  %331 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %330, align 8
  %332 = bitcast i8** %331 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %18, %"class.jxl::ThreadPool"** %332, align 8
  %333 = icmp eq i32 %1563, 0
  br i1 %333, label %350, label %334

334:                                              ; preds = %328
  %335 = bitcast %"class.jxl::ThreadPool::RunCallState"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %335) #8
  %336 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %15, i64 0, i32 0
  %337 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %15, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %336, align 8
  store %class.anon* %24, %class.anon** %337, align 8
  %338 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %329, i8* nonnull %335, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_6E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_6E12CallDataFuncEPvjm", i32 0, i32 %1563) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %335) #8
  br label %350

339:                                              ; preds = %1552
  %340 = icmp eq i32 %1563, 0
  br i1 %340, label %352, label %341

341:                                              ; preds = %339
  %342 = bitcast %"class.jxl::ThreadPool::RunCallState"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %342) #8
  %343 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %16, i64 0, i32 0
  %344 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %16, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %343, align 8
  store %class.anon* %24, %class.anon** %344, align 8
  %345 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %346 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %345, align 8
  %347 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %348 = load i8*, i8** %347, align 8
  %349 = call i32 %346(i8* %348, i8* nonnull %342, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_6E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_6E12CallDataFuncEPvjm", i32 0, i32 %1563) #8
  br label %350

350:                                              ; preds = %328, %334, %341
  %351 = phi i8* [ %342, %341 ], [ %329, %334 ], [ %329, %328 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %351) #8
  br label %352

352:                                              ; preds = %350, %339
  %353 = load double, double* %17, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double %353) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1568) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1564) #8
  %354 = bitcast %"class.jxl::Image3"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %354) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %354, i8 -86, i64 96, i1 false)
  %355 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 6
  %356 = load i64, i64* %355, align 8
  %357 = lshr i64 %356, 2
  %358 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 7
  %359 = load i64, i64* %358, align 8
  %360 = lshr i64 %359, 2
  %361 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %361, i64 %357, i64 %360, i64 4) #8
  %362 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %362, i64 %357, i64 %360, i64 4) #8
  %363 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %363, i64 %357, i64 %360, i64 4) #8
  %364 = bitcast %"class.jxl::Image3"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %364) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %364, i8 -86, i64 96, i1 false)
  %365 = load i64, i64* %355, align 8
  %366 = lshr i64 %365, 2
  %367 = load i64, i64* %358, align 8
  %368 = lshr i64 %367, 2
  %369 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %369, i64 %366, i64 %368, i64 4) #8
  %370 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %370, i64 %366, i64 %368, i64 4) #8
  %371 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %371, i64 %366, i64 %368, i64 4) #8
  %372 = load i64, i64* %358, align 8
  %373 = lshr i64 %372, 2
  %374 = trunc i64 %373 to i32
  %375 = bitcast %class.anon.258* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %375) #8
  %376 = getelementptr inbounds %class.anon.258, %class.anon.258* %27, i64 0, i32 0
  store %"class.jxl::Image3"* %25, %"class.jxl::Image3"** %376, align 8
  %377 = getelementptr inbounds %class.anon.258, %class.anon.258* %27, i64 0, i32 1
  store %"class.jxl::Image3"* %26, %"class.jxl::Image3"** %377, align 8
  %378 = getelementptr inbounds %class.anon.258, %class.anon.258* %27, i64 0, i32 2
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %378, align 8
  %379 = getelementptr inbounds %class.anon.258, %class.anon.258* %27, i64 0, i32 3
  store %"struct.jxl::FrameDimensions"* %42, %"struct.jxl::FrameDimensions"** %379, align 8
  %380 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %380) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %13, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double* nonnull %13) #8
  br i1 %1569, label %381, label %392

381:                                              ; preds = %352
  %382 = bitcast %"class.jxl::ThreadPool"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %382) #8
  %383 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 0
  %384 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %383, align 8
  %385 = bitcast i8** %384 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %14, %"class.jxl::ThreadPool"** %385, align 8
  %386 = icmp eq i32 %374, 0
  br i1 %386, label %403, label %387

387:                                              ; preds = %381
  %388 = bitcast %"class.jxl::ThreadPool::RunCallState.263"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %388) #8
  %389 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.263", %"class.jxl::ThreadPool::RunCallState.263"* %11, i64 0, i32 0
  %390 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.263", %"class.jxl::ThreadPool::RunCallState.263"* %11, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %389, align 8
  store %class.anon.258* %27, %class.anon.258** %390, align 8
  %391 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %382, i8* nonnull %388, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_7E12CallDataFuncEPvjm", i32 0, i32 %374) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %388) #8
  br label %403

392:                                              ; preds = %352
  %393 = icmp eq i32 %374, 0
  br i1 %393, label %405, label %394

394:                                              ; preds = %392
  %395 = bitcast %"class.jxl::ThreadPool::RunCallState.263"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %395) #8
  %396 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.263", %"class.jxl::ThreadPool::RunCallState.263"* %12, i64 0, i32 0
  %397 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.263", %"class.jxl::ThreadPool::RunCallState.263"* %12, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %396, align 8
  store %class.anon.258* %27, %class.anon.258** %397, align 8
  %398 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %399 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %398, align 8
  %400 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %401 = load i8*, i8** %400, align 8
  %402 = call i32 %399(i8* %401, i8* nonnull %395, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_7E12CallDataFuncEPvjm", i32 0, i32 %374) #8
  br label %403

403:                                              ; preds = %381, %387, %394
  %404 = phi i8* [ %395, %394 ], [ %382, %387 ], [ %382, %381 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %404) #8
  br label %405

405:                                              ; preds = %403, %392
  %406 = load double, double* %13, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double %406) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %380) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %375) #8
  %407 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %407) #8
  %408 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 0, i32 0
  %409 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 0
  %410 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 1
  %411 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %411, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %28, double 0x4000ADFC98523461) #8
  %412 = bitcast %"class.jxl::Image3"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %412) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %412, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %29, %"class.jxl::Image3"* nonnull dereferenceable(96) %26, i64 16, i64 16) #8
  %413 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %413) #8
  %414 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 4
  %415 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %416 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 0
  %417 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %417, i8 -86, i64 32, i1 false)
  %418 = load i32, i32* %416, align 8
  %419 = zext i32 %418 to i64
  %420 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 1
  %421 = load i32, i32* %420, align 4
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %423, i64 %419, i64 %422, i64 4) #8
  %424 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %424) #8
  %425 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %426 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %426, i8 -86, i64 32, i1 false)
  %427 = load i32, i32* %416, align 8
  %428 = zext i32 %427 to i64
  %429 = load i32, i32* %420, align 4
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %431, i64 %428, i64 %430, i64 4) #8
  %432 = bitcast %"class.jxl::Image3"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %432) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %432, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %32, %"class.jxl::Image3"* nonnull dereferenceable(96) %25, i64 16, i64 16) #8
  %433 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 1
  %434 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 4
  %435 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %436 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %436, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %437 = load i32, i32* %433, align 4
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %577, label %572

439:                                              ; preds = %308
  %440 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %441 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 4
  %442 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %443 = icmp eq i32 %323, 0
  %444 = shl nuw nsw i64 %324, 2
  %445 = icmp ult i32 %323, 64
  %446 = and i64 %324, 4294967232
  %447 = icmp eq i64 %446, %324
  %448 = and i64 %324, 3
  %449 = icmp eq i64 %448, 0
  br label %450

450:                                              ; preds = %533, %439
  %451 = phi i64 [ 0, %439 ], [ %534, %533 ]
  %452 = load i8*, i8** %440, align 8
  %453 = load i64, i64* %441, align 8
  %454 = mul i64 %453, %451
  %455 = getelementptr inbounds i8, i8* %452, i64 %454
  %456 = ptrtoint i8* %455 to i64
  %457 = and i64 %456, 63
  %458 = icmp eq i64 %457, 0
  call void @llvm.assume(i1 %458) #8
  %459 = bitcast i8* %455 to float*
  %460 = load i8*, i8** %442, align 8
  %461 = load i64, i64* %201, align 8
  %462 = mul i64 %461, %451
  %463 = getelementptr inbounds i8, i8* %460, i64 %462
  %464 = ptrtoint i8* %463 to i64
  %465 = and i64 %464, 63
  %466 = icmp eq i64 %465, 0
  call void @llvm.assume(i1 %466) #8
  %467 = bitcast i8* %463 to float*
  br i1 %443, label %533, label %468

468:                                              ; preds = %450
  br i1 %445, label %469, label %487

469:                                              ; preds = %532, %487, %468
  %470 = phi i64 [ 0, %487 ], [ 0, %468 ], [ %446, %532 ]
  %471 = xor i64 %470, -1
  %472 = add nsw i64 %471, %324
  br i1 %449, label %484, label %473

473:                                              ; preds = %469, %473
  %474 = phi i64 [ %481, %473 ], [ %470, %469 ]
  %475 = phi i64 [ %482, %473 ], [ %448, %469 ]
  %476 = getelementptr inbounds float, float* %459, i64 %474
  %477 = load float, float* %476, align 4
  %478 = getelementptr inbounds float, float* %467, i64 %474
  %479 = load float, float* %478, align 4
  %480 = fsub float %479, %477
  store float %480, float* %478, align 4
  %481 = add nuw nsw i64 %474, 1
  %482 = add i64 %475, -1
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %473, !llvm.loop !14

484:                                              ; preds = %473, %469
  %485 = phi i64 [ %470, %469 ], [ %481, %473 ]
  %486 = icmp ult i64 %472, 3
  br i1 %486, label %533, label %536

487:                                              ; preds = %468
  %488 = getelementptr i8, i8* %460, i64 %444
  %489 = getelementptr i8, i8* %488, i64 %462
  %490 = getelementptr i8, i8* %452, i64 %444
  %491 = mul i64 %453, %451
  %492 = getelementptr i8, i8* %490, i64 %491
  %493 = icmp ult i8* %463, %492
  %494 = icmp ult i8* %455, %489
  %495 = and i1 %493, %494
  br i1 %495, label %469, label %496

496:                                              ; preds = %487, %496
  %497 = phi i64 [ %530, %496 ], [ 0, %487 ]
  %498 = getelementptr inbounds float, float* %459, i64 %497
  %499 = bitcast float* %498 to <16 x float>*
  %500 = load <16 x float>, <16 x float>* %499, align 64, !alias.scope !15
  %501 = getelementptr inbounds float, float* %498, i64 16
  %502 = bitcast float* %501 to <16 x float>*
  %503 = load <16 x float>, <16 x float>* %502, align 64, !alias.scope !15
  %504 = getelementptr inbounds float, float* %498, i64 32
  %505 = bitcast float* %504 to <16 x float>*
  %506 = load <16 x float>, <16 x float>* %505, align 64, !alias.scope !15
  %507 = getelementptr inbounds float, float* %498, i64 48
  %508 = bitcast float* %507 to <16 x float>*
  %509 = load <16 x float>, <16 x float>* %508, align 64, !alias.scope !15
  %510 = getelementptr inbounds float, float* %467, i64 %497
  %511 = bitcast float* %510 to <16 x float>*
  %512 = load <16 x float>, <16 x float>* %511, align 64, !alias.scope !18, !noalias !15
  %513 = getelementptr inbounds float, float* %510, i64 16
  %514 = bitcast float* %513 to <16 x float>*
  %515 = load <16 x float>, <16 x float>* %514, align 64, !alias.scope !18, !noalias !15
  %516 = getelementptr inbounds float, float* %510, i64 32
  %517 = bitcast float* %516 to <16 x float>*
  %518 = load <16 x float>, <16 x float>* %517, align 64, !alias.scope !18, !noalias !15
  %519 = getelementptr inbounds float, float* %510, i64 48
  %520 = bitcast float* %519 to <16 x float>*
  %521 = load <16 x float>, <16 x float>* %520, align 64, !alias.scope !18, !noalias !15
  %522 = fsub <16 x float> %512, %500
  %523 = fsub <16 x float> %515, %503
  %524 = fsub <16 x float> %518, %506
  %525 = fsub <16 x float> %521, %509
  %526 = bitcast float* %510 to <16 x float>*
  store <16 x float> %522, <16 x float>* %526, align 64, !alias.scope !18, !noalias !15
  %527 = bitcast float* %513 to <16 x float>*
  store <16 x float> %523, <16 x float>* %527, align 64, !alias.scope !18, !noalias !15
  %528 = bitcast float* %516 to <16 x float>*
  store <16 x float> %524, <16 x float>* %528, align 64, !alias.scope !18, !noalias !15
  %529 = bitcast float* %519 to <16 x float>*
  store <16 x float> %525, <16 x float>* %529, align 64, !alias.scope !18, !noalias !15
  %530 = add i64 %497, 64
  %531 = icmp eq i64 %530, %446
  br i1 %531, label %532, label %496, !llvm.loop !20

532:                                              ; preds = %496
  br i1 %447, label %533, label %469

533:                                              ; preds = %484, %536, %532, %450
  %534 = add nuw nsw i64 %451, 1
  %535 = icmp eq i64 %534, %326
  br i1 %535, label %563, label %450

536:                                              ; preds = %484, %536
  %537 = phi i64 [ %561, %536 ], [ %485, %484 ]
  %538 = getelementptr inbounds float, float* %459, i64 %537
  %539 = load float, float* %538, align 4
  %540 = getelementptr inbounds float, float* %467, i64 %537
  %541 = load float, float* %540, align 4
  %542 = fsub float %541, %539
  store float %542, float* %540, align 4
  %543 = add nuw nsw i64 %537, 1
  %544 = getelementptr inbounds float, float* %459, i64 %543
  %545 = load float, float* %544, align 4
  %546 = getelementptr inbounds float, float* %467, i64 %543
  %547 = load float, float* %546, align 4
  %548 = fsub float %547, %545
  store float %548, float* %546, align 4
  %549 = add nuw nsw i64 %537, 2
  %550 = getelementptr inbounds float, float* %459, i64 %549
  %551 = load float, float* %550, align 4
  %552 = getelementptr inbounds float, float* %467, i64 %549
  %553 = load float, float* %552, align 4
  %554 = fsub float %553, %551
  store float %554, float* %552, align 4
  %555 = add nuw nsw i64 %537, 3
  %556 = getelementptr inbounds float, float* %459, i64 %555
  %557 = load float, float* %556, align 4
  %558 = getelementptr inbounds float, float* %467, i64 %555
  %559 = load float, float* %558, align 4
  %560 = fsub float %559, %557
  store float %560, float* %558, align 4
  %561 = add nuw nsw i64 %537, 4
  %562 = icmp eq i64 %561, %324
  br i1 %562, label %533, label %536, !llvm.loop !21

563:                                              ; preds = %533, %308
  %564 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1
  %565 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %564, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %565) #8
  %566 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %564, i64 0, i32 0, i32 0
  %567 = load i32, i32* %566, align 8
  %568 = zext i32 %567 to i64
  %569 = load i32, i32* %59, align 4
  %570 = zext i32 %569 to i64
  %571 = icmp eq i32 %569, 0
  br i1 %571, label %1417, label %1292

572:                                              ; preds = %405
  %573 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %574 = load i8*, i8** %415, align 8
  %575 = load i64, i64* %414, align 8
  %576 = load i32, i32* %435, align 8
  br label %581

577:                                              ; preds = %608, %405
  %578 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %578, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %579 = load i32, i32* %433, align 4
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %1228, label %1175

581:                                              ; preds = %572, %608
  %582 = phi i32 [ %437, %572 ], [ %609, %608 ]
  %583 = phi i32 [ %576, %572 ], [ %610, %608 ]
  %584 = phi i64 [ 0, %572 ], [ %611, %608 ]
  %585 = load i64, i64* %434, align 8
  %586 = mul i64 %585, %584
  %587 = load i8*, i8** %573, align 8
  %588 = ptrtoint i8* %587 to i64
  %589 = and i64 %588, 63
  %590 = icmp eq i64 %589, 0
  call void @llvm.assume(i1 %590) #8
  %591 = getelementptr inbounds i8, i8* %587, i64 %586
  %592 = ptrtoint i8* %591 to i64
  %593 = and i64 %592, 63
  %594 = icmp eq i64 %593, 0
  call void @llvm.assume(i1 %594) #8
  %595 = bitcast i8* %591 to float*
  %596 = add nuw nsw i64 %584, 16
  %597 = mul i64 %575, %596
  %598 = getelementptr inbounds i8, i8* %574, i64 %597
  %599 = ptrtoint i8* %598 to i64
  %600 = and i64 %599, 63
  %601 = icmp eq i64 %600, 0
  call void @llvm.assume(i1 %601) #8
  %602 = icmp eq i32 %583, 0
  br i1 %602, label %608, label %603

603:                                              ; preds = %581
  %604 = getelementptr inbounds i8, i8* %598, i64 64
  %605 = bitcast i8* %604 to float*
  br label %614

606:                                              ; preds = %614
  %607 = load i32, i32* %433, align 4
  br label %608

608:                                              ; preds = %606, %581
  %609 = phi i32 [ %582, %581 ], [ %607, %606 ]
  %610 = phi i32 [ 0, %581 ], [ %626, %606 ]
  %611 = add nuw nsw i64 %584, 1
  %612 = zext i32 %609 to i64
  %613 = icmp ult i64 %611, %612
  br i1 %613, label %581, label %577

614:                                              ; preds = %603, %614
  %615 = phi i64 [ 0, %603 ], [ %625, %614 ]
  %616 = getelementptr inbounds float, float* %605, i64 %615
  %617 = bitcast float* %616 to <16 x float>*
  %618 = load <16 x float>, <16 x float>* %617, align 64, !alias.scope !22, !noalias !25
  %619 = getelementptr inbounds float, float* %595, i64 %615
  %620 = bitcast float* %619 to <16 x float>*
  %621 = load <16 x float>, <16 x float>* %620, align 64, !alias.scope !27, !noalias !30
  %622 = fmul <16 x float> %621, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %623 = fcmp ogt <16 x float> %618, %622
  %624 = select <16 x i1> %623, <16 x float> %618, <16 x float> %622
  store <16 x float> %624, <16 x float>* %620, align 64, !alias.scope !32
  %625 = add nuw nsw i64 %615, 16
  %626 = load i32, i32* %435, align 8
  %627 = zext i32 %626 to i64
  %628 = icmp ult i64 %625, %627
  br i1 %628, label %614, label %606

629:                                              ; preds = %1164
  %630 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 4
  %631 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %632 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %633 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %634 = load i8*, i8** %1168, align 8
  %635 = load i64, i64* %630, align 8
  %636 = load i32, i32* %1288, align 8
  br label %713

637:                                              ; preds = %1285
  %638 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %639 = load i8*, i8** %415, align 8
  %640 = load i64, i64* %414, align 8
  %641 = load i32, i32* %1288, align 8
  br label %646

642:                                              ; preds = %673, %1285
  %643 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %643, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %644 = load i32, i32* %1286, align 4
  %645 = icmp eq i32 %644, 0
  br i1 %645, label %1103, label %1050

646:                                              ; preds = %637, %673
  %647 = phi i32 [ %1290, %637 ], [ %674, %673 ]
  %648 = phi i32 [ %641, %637 ], [ %675, %673 ]
  %649 = phi i64 [ 0, %637 ], [ %676, %673 ]
  %650 = load i64, i64* %1287, align 8
  %651 = mul i64 %650, %649
  %652 = load i8*, i8** %638, align 8
  %653 = ptrtoint i8* %652 to i64
  %654 = and i64 %653, 63
  %655 = icmp eq i64 %654, 0
  call void @llvm.assume(i1 %655) #8
  %656 = getelementptr inbounds i8, i8* %652, i64 %651
  %657 = ptrtoint i8* %656 to i64
  %658 = and i64 %657, 63
  %659 = icmp eq i64 %658, 0
  call void @llvm.assume(i1 %659) #8
  %660 = bitcast i8* %656 to float*
  %661 = add nuw nsw i64 %649, 16
  %662 = mul i64 %640, %661
  %663 = getelementptr inbounds i8, i8* %639, i64 %662
  %664 = ptrtoint i8* %663 to i64
  %665 = and i64 %664, 63
  %666 = icmp eq i64 %665, 0
  call void @llvm.assume(i1 %666) #8
  %667 = icmp eq i32 %648, 0
  br i1 %667, label %673, label %668

668:                                              ; preds = %646
  %669 = getelementptr inbounds i8, i8* %663, i64 64
  %670 = bitcast i8* %669 to float*
  br label %679

671:                                              ; preds = %679
  %672 = load i32, i32* %1286, align 4
  br label %673

673:                                              ; preds = %671, %646
  %674 = phi i32 [ %647, %646 ], [ %672, %671 ]
  %675 = phi i32 [ 0, %646 ], [ %691, %671 ]
  %676 = add nuw nsw i64 %649, 1
  %677 = zext i32 %674 to i64
  %678 = icmp ult i64 %676, %677
  br i1 %678, label %646, label %642

679:                                              ; preds = %668, %679
  %680 = phi i64 [ 0, %668 ], [ %690, %679 ]
  %681 = getelementptr inbounds float, float* %670, i64 %680
  %682 = bitcast float* %681 to <16 x float>*
  %683 = load <16 x float>, <16 x float>* %682, align 64, !alias.scope !35, !noalias !38
  %684 = getelementptr inbounds float, float* %660, i64 %680
  %685 = bitcast float* %684 to <16 x float>*
  %686 = load <16 x float>, <16 x float>* %685, align 64, !alias.scope !40, !noalias !43
  %687 = fmul <16 x float> %686, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %688 = fcmp ogt <16 x float> %683, %687
  %689 = select <16 x i1> %688, <16 x float> %683, <16 x float> %687
  store <16 x float> %689, <16 x float>* %685, align 64, !alias.scope !45
  %690 = add nuw nsw i64 %680, 16
  %691 = load i32, i32* %1288, align 8
  %692 = zext i32 %691 to i64
  %693 = icmp ult i64 %690, %692
  br i1 %693, label %679, label %671

694:                                              ; preds = %755, %1164
  %695 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %695) #8
  %696 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %697 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %697, i8 -86, i64 32, i1 false)
  %698 = load i32, i32* %435, align 8
  %699 = zext i32 %698 to i64
  %700 = load i32, i32* %433, align 4
  %701 = zext i32 %700 to i64
  %702 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %702, i64 %699, i64 %701, i64 4) #8
  %703 = load i32, i32* %433, align 4
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %781, label %705

705:                                              ; preds = %694
  %706 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 4
  %707 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %708 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %709 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %710 = load i8*, i8** %696, align 8
  %711 = load i64, i64* %706, align 8
  %712 = load i32, i32* %435, align 8
  br label %982

713:                                              ; preds = %629, %755
  %714 = phi i32 [ %1173, %629 ], [ %756, %755 ]
  %715 = phi i32 [ %636, %629 ], [ %757, %755 ]
  %716 = phi i64 [ 0, %629 ], [ %758, %755 ]
  %717 = load i64, i64* %1287, align 8
  %718 = mul i64 %717, %716
  %719 = load i8*, i8** %631, align 8
  %720 = ptrtoint i8* %719 to i64
  %721 = and i64 %720, 63
  %722 = icmp eq i64 %721, 0
  call void @llvm.assume(i1 %722) #8
  %723 = getelementptr inbounds i8, i8* %719, i64 %718
  %724 = ptrtoint i8* %723 to i64
  %725 = and i64 %724, 63
  %726 = icmp eq i64 %725, 0
  call void @llvm.assume(i1 %726) #8
  %727 = bitcast i8* %723 to float*
  %728 = load i8*, i8** %632, align 8
  %729 = ptrtoint i8* %728 to i64
  %730 = and i64 %729, 63
  %731 = icmp eq i64 %730, 0
  call void @llvm.assume(i1 %731) #8
  %732 = getelementptr inbounds i8, i8* %728, i64 %718
  %733 = ptrtoint i8* %732 to i64
  %734 = and i64 %733, 63
  %735 = icmp eq i64 %734, 0
  call void @llvm.assume(i1 %735) #8
  %736 = bitcast i8* %732 to float*
  %737 = load i8*, i8** %633, align 8
  %738 = ptrtoint i8* %737 to i64
  %739 = and i64 %738, 63
  %740 = icmp eq i64 %739, 0
  call void @llvm.assume(i1 %740) #8
  %741 = getelementptr inbounds i8, i8* %737, i64 %718
  %742 = ptrtoint i8* %741 to i64
  %743 = and i64 %742, 63
  %744 = icmp eq i64 %743, 0
  call void @llvm.assume(i1 %744) #8
  %745 = bitcast i8* %741 to float*
  %746 = mul i64 %635, %716
  %747 = getelementptr inbounds i8, i8* %634, i64 %746
  %748 = ptrtoint i8* %747 to i64
  %749 = and i64 %748, 63
  %750 = icmp eq i64 %749, 0
  call void @llvm.assume(i1 %750) #8
  %751 = bitcast i8* %747 to float*
  %752 = icmp eq i32 %715, 0
  br i1 %752, label %755, label %761

753:                                              ; preds = %761
  %754 = load i32, i32* %1286, align 4
  br label %755

755:                                              ; preds = %753, %713
  %756 = phi i32 [ %754, %753 ], [ %714, %713 ]
  %757 = phi i32 [ %778, %753 ], [ 0, %713 ]
  %758 = add nuw nsw i64 %716, 1
  %759 = zext i32 %756 to i64
  %760 = icmp ult i64 %758, %759
  br i1 %760, label %713, label %694

761:                                              ; preds = %713, %761
  %762 = phi i64 [ %777, %761 ], [ 0, %713 ]
  %763 = getelementptr inbounds float, float* %727, i64 %762
  %764 = bitcast float* %763 to <16 x float>*
  %765 = load <16 x float>, <16 x float>* %764, align 64, !alias.scope !48, !noalias !51
  %766 = fmul <16 x float> %765, <float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000>
  %767 = getelementptr inbounds float, float* %736, i64 %762
  %768 = bitcast float* %767 to <16 x float>*
  %769 = load <16 x float>, <16 x float>* %768, align 64, !alias.scope !53, !noalias !56
  %770 = call <16 x float> @llvm.fma.v16f32(<16 x float> %769, <16 x float> <float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000>, <16 x float> %766) #8
  %771 = getelementptr inbounds float, float* %745, i64 %762
  %772 = bitcast float* %771 to <16 x float>*
  %773 = load <16 x float>, <16 x float>* %772, align 64, !alias.scope !58, !noalias !61
  %774 = call <16 x float> @llvm.fma.v16f32(<16 x float> %773, <16 x float> <float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000>, <16 x float> %770) #8
  %775 = getelementptr inbounds float, float* %751, i64 %762
  %776 = bitcast float* %775 to <16 x float>*
  store <16 x float> %774, <16 x float>* %776, align 64, !alias.scope !63
  %777 = add nuw nsw i64 %762, 16
  %778 = load i32, i32* %1288, align 8
  %779 = zext i32 %778 to i64
  %780 = icmp ult i64 %777, %779
  br i1 %780, label %761, label %753

781:                                              ; preds = %1024, %694
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %33)
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %34)
  %782 = load float, float* %43, align 8
  %783 = call float @_ZN3jxl14InitialQuantDCEf(float %782) #8
  %784 = fmul float %783, 0x3FEC36E6E0000000
  %785 = bitcast float* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %785) #8
  %786 = load float, float* %43, align 8
  %787 = fdiv float 0x400421F180000000, %786
  store float %787, float* %35, align 4
  %788 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %788) #8
  %789 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %790 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %790, i8 -86, i64 32, i1 false)
  %791 = load i64, i64* %1554, align 8
  %792 = load i64, i64* %1558, align 8
  %793 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %793, i64 %791, i64 %792, i64 4) #8
  %794 = bitcast %class.anon.259* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %794) #8
  %795 = getelementptr inbounds %class.anon.259, %class.anon.259* %37, i64 0, i32 0
  store %"class.jxl::Plane.97"* %34, %"class.jxl::Plane.97"** %795, align 8
  %796 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %796) #8
  %797 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to <16 x i32>*
  store <16 x i32> <i32 2, i32 1069547520, i32 3, i32 1068708659, i32 12, i32 1067030938, i32 13, i32 1067030938, i32 14, i32 1066611507, i32 15, i32 1066611507, i32 16, i32 1066611507, i32 17, i32 1066611507>, <16 x i32>* %797, align 16
  %798 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 8, i32 0
  %799 = bitcast i32* %798 to <16 x i32>*
  store <16 x i32> <i32 0, i32 1065353216, i32 6, i32 1061997773, i32 7, i32 1061997773, i32 4, i32 1045220557, i32 11, i32 1045220557, i32 10, i32 1045220557, i32 5, i32 1045220557, i32 20, i32 1036831949>, <16 x i32>* %799, align 16
  %800 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 16, i32 0
  %801 = bitcast i32* %800 to <4 x i32>*
  store <4 x i32> <i32 19, i32 1036831949, i32 18, i32 1025758986>, <4 x i32>* %801, align 16
  %802 = bitcast float* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %802) #8
  store float 0xFFFFFFFFE0000000, float* %39, align 4
  %803 = load float, float* %43, align 8
  %804 = call float @sqrtf(float %803) #26
  %805 = call float @llvm.fabs.f32(float %804)
  %806 = fcmp oeq float %803, 0xFFF0000000000000
  %807 = fmul float %805, 5.000000e-01
  %808 = fadd float %807, 0x3E45798EE0000000
  %809 = select i1 %806, float 0x7FF0000000000000, float %808
  store float %809, float* %39, align 4
  %810 = load i64, i64* %23, align 8
  %811 = mul i64 %810, %1561
  %812 = trunc i64 %811 to i32
  %813 = bitcast %class.anon.261* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %813) #8
  %814 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 0
  store i64* %23, i64** %814, align 8
  %815 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 1
  store %"class.jxl::Plane.97"* %36, %"class.jxl::Plane.97"** %815, align 8
  %816 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %816, align 8
  %817 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 3
  store float* %35, float** %817, align 8
  %818 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 4
  store [18 x %"struct.std::__1::pair.260"]* %38, [18 x %"struct.std::__1::pair.260"]** %818, align 8
  %819 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 5
  store %class.anon.259* %37, %class.anon.259** %819, align 8
  %820 = getelementptr inbounds %class.anon.261, %class.anon.261* %40, i64 0, i32 6
  store float* %39, float** %820, align 8
  %821 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %821) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %9) #8
  br i1 %1569, label %822, label %833

822:                                              ; preds = %781
  %823 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %823) #8
  %824 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %825 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %824, align 8
  %826 = bitcast i8** %825 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %826, align 8
  %827 = icmp eq i32 %812, 0
  br i1 %827, label %844, label %828

828:                                              ; preds = %822
  %829 = bitcast %"class.jxl::ThreadPool::RunCallState.272"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %829) #8
  %830 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.272", %"class.jxl::ThreadPool::RunCallState.272"* %7, i64 0, i32 0
  %831 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.272", %"class.jxl::ThreadPool::RunCallState.272"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %830, align 8
  store %class.anon.261* %40, %class.anon.261** %831, align 8
  %832 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %823, i8* nonnull %829, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_8E12CallDataFuncEPvjm", i32 0, i32 %812) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %829) #8
  br label %844

833:                                              ; preds = %781
  %834 = icmp eq i32 %812, 0
  br i1 %834, label %846, label %835

835:                                              ; preds = %833
  %836 = bitcast %"class.jxl::ThreadPool::RunCallState.272"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %836) #8
  %837 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.272", %"class.jxl::ThreadPool::RunCallState.272"* %8, i64 0, i32 0
  %838 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.272", %"class.jxl::ThreadPool::RunCallState.272"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %837, align 8
  store %class.anon.261* %40, %class.anon.261** %838, align 8
  %839 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %840 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %839, align 8
  %841 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %842 = load i8*, i8** %841, align 8
  %843 = call i32 %840(i8* %842, i8* nonnull %836, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_8E12CallDataFuncEPvjm", i32 0, i32 %812) #8
  br label %844

844:                                              ; preds = %822, %828, %835
  %845 = phi i8* [ %836, %835 ], [ %823, %828 ], [ %823, %822 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %845) #8
  br label %846

846:                                              ; preds = %844, %833
  %847 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %847) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %821) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %813) #8
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36)
  %848 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 7
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIhEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), %"class.jxl::Plane"* dereferenceable(32) %848)
  %849 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 3
  %850 = load i64, i64* %355, align 8
  %851 = load i64, i64* %358, align 8
  call void @_ZN3jxl14DumpAcStrategyERKNS_15AcStrategyImageEmmPKcPNS_6AuxOutE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %849, i64 %850, i64 %851, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), %"struct.jxl::AuxOut"* %5) #8
  %852 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 5
  %853 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 6
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %852, float %784, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36, %"class.jxl::Plane.53"* %853) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %802) #8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %796) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %794) #8
  %854 = load i8*, i8** %789, align 8
  store i8* null, i8** %789, align 8
  %855 = icmp eq i8* %854, null
  br i1 %855, label %857, label %856

856:                                              ; preds = %846
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %854) #8
  br label %857

857:                                              ; preds = %846, %856
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %788) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %785) #8
  %858 = load i8*, i8** %696, align 8
  store i8* null, i8** %696, align 8
  %859 = icmp eq i8* %858, null
  br i1 %859, label %861, label %860

860:                                              ; preds = %857
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %858) #8
  br label %861

861:                                              ; preds = %857, %860
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %695) #8
  %862 = load i8*, i8** %1168, align 8
  store i8* null, i8** %1168, align 8
  %863 = icmp eq i8* %862, null
  br i1 %863, label %865, label %864

864:                                              ; preds = %861
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %862) #8
  br label %865

865:                                              ; preds = %861, %864
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1167) #8
  %866 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %867 = load i8*, i8** %866, align 8
  store i8* null, i8** %866, align 8
  %868 = icmp eq i8* %867, null
  br i1 %868, label %870, label %869

869:                                              ; preds = %865
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %867) #8
  br label %870

870:                                              ; preds = %869, %865
  %871 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %872 = load i8*, i8** %871, align 8
  store i8* null, i8** %871, align 8
  %873 = icmp eq i8* %872, null
  br i1 %873, label %875, label %874

874:                                              ; preds = %870
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %872) #8
  br label %875

875:                                              ; preds = %874, %870
  %876 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %877 = load i8*, i8** %876, align 8
  store i8* null, i8** %876, align 8
  %878 = icmp eq i8* %877, null
  br i1 %878, label %880, label %879

879:                                              ; preds = %875
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %877) #8
  br label %880

880:                                              ; preds = %875, %879
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %432) #8
  %881 = load i8*, i8** %425, align 8
  store i8* null, i8** %425, align 8
  %882 = icmp eq i8* %881, null
  br i1 %882, label %884, label %883

883:                                              ; preds = %880
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %881) #8
  br label %884

884:                                              ; preds = %880, %883
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %424) #8
  %885 = load i8*, i8** %415, align 8
  store i8* null, i8** %415, align 8
  %886 = icmp eq i8* %885, null
  br i1 %886, label %888, label %887

887:                                              ; preds = %884
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %885) #8
  br label %888

888:                                              ; preds = %884, %887
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %413) #8
  %889 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %890 = load i8*, i8** %889, align 8
  store i8* null, i8** %889, align 8
  %891 = icmp eq i8* %890, null
  br i1 %891, label %893, label %892

892:                                              ; preds = %888
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %890) #8
  br label %893

893:                                              ; preds = %892, %888
  %894 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %895 = load i8*, i8** %894, align 8
  store i8* null, i8** %894, align 8
  %896 = icmp eq i8* %895, null
  br i1 %896, label %898, label %897

897:                                              ; preds = %893
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %895) #8
  br label %898

898:                                              ; preds = %897, %893
  %899 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %900 = load i8*, i8** %899, align 8
  store i8* null, i8** %899, align 8
  %901 = icmp eq i8* %900, null
  br i1 %901, label %903, label %902

902:                                              ; preds = %898
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %900) #8
  br label %903

903:                                              ; preds = %898, %902
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %412) #8
  %904 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %408, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %408, align 8
  %905 = icmp eq %"struct.jxl::RecursiveGaussian"* %904, null
  br i1 %905, label %910, label %906

906:                                              ; preds = %903
  %907 = bitcast %"struct.jxl::RecursiveGaussian"* %904 to i8*
  %908 = load void (i8*, i8*)*, void (i8*, i8*)** %409, align 8
  %909 = load i8*, i8** %410, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %907, void (i8*, i8*)* %908, i8* %909, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %910

910:                                              ; preds = %903, %906
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %407) #8
  %911 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %912 = load i8*, i8** %911, align 8
  store i8* null, i8** %911, align 8
  %913 = icmp eq i8* %912, null
  br i1 %913, label %915, label %914

914:                                              ; preds = %910
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %912) #8
  br label %915

915:                                              ; preds = %914, %910
  %916 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %917 = load i8*, i8** %916, align 8
  store i8* null, i8** %916, align 8
  %918 = icmp eq i8* %917, null
  br i1 %918, label %920, label %919

919:                                              ; preds = %915
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %917) #8
  br label %920

920:                                              ; preds = %919, %915
  %921 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %922 = load i8*, i8** %921, align 8
  store i8* null, i8** %921, align 8
  %923 = icmp eq i8* %922, null
  br i1 %923, label %925, label %924

924:                                              ; preds = %920
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %922) #8
  br label %925

925:                                              ; preds = %920, %924
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %364) #8
  %926 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %927 = load i8*, i8** %926, align 8
  store i8* null, i8** %926, align 8
  %928 = icmp eq i8* %927, null
  br i1 %928, label %930, label %929

929:                                              ; preds = %925
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %927) #8
  br label %930

930:                                              ; preds = %929, %925
  %931 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %932 = load i8*, i8** %931, align 8
  store i8* null, i8** %931, align 8
  %933 = icmp eq i8* %932, null
  br i1 %933, label %935, label %934

934:                                              ; preds = %930
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %932) #8
  br label %935

935:                                              ; preds = %934, %930
  %936 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %937 = load i8*, i8** %936, align 8
  store i8* null, i8** %936, align 8
  %938 = icmp eq i8* %937, null
  br i1 %938, label %940, label %939

939:                                              ; preds = %935
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %937) #8
  br label %940

940:                                              ; preds = %935, %939
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %354) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1553) #8
  %941 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %316, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %316, align 8
  %942 = icmp eq %"struct.jxl::RecursiveGaussian"* %941, null
  br i1 %942, label %947, label %943

943:                                              ; preds = %940
  %944 = bitcast %"struct.jxl::RecursiveGaussian"* %941 to i8*
  %945 = load void (i8*, i8*)*, void (i8*, i8*)** %317, align 8
  %946 = load i8*, i8** %318, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %944, void (i8*, i8*)* %945, i8* %946, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %947

947:                                              ; preds = %940, %943
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %315) #8
  %948 = load i8*, i8** %312, align 8
  store i8* null, i8** %312, align 8
  %949 = icmp eq i8* %948, null
  br i1 %949, label %951, label %950

950:                                              ; preds = %947
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %948) #8
  br label %951

951:                                              ; preds = %947, %950
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %311) #8
  %952 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %953 = load i8*, i8** %952, align 8
  store i8* null, i8** %952, align 8
  %954 = icmp eq i8* %953, null
  br i1 %954, label %956, label %955

955:                                              ; preds = %951
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %953) #8
  br label %956

956:                                              ; preds = %955, %951
  %957 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %958 = load i8*, i8** %957, align 8
  store i8* null, i8** %957, align 8
  %959 = icmp eq i8* %958, null
  br i1 %959, label %961, label %960

960:                                              ; preds = %956
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %958) #8
  br label %961

961:                                              ; preds = %960, %956
  %962 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %963 = load i8*, i8** %962, align 8
  store i8* null, i8** %962, align 8
  %964 = icmp eq i8* %963, null
  br i1 %964, label %966, label %965

965:                                              ; preds = %961
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %963) #8
  br label %966

966:                                              ; preds = %961, %965
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %189) #8
  %967 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %968 = load i8*, i8** %967, align 8
  store i8* null, i8** %967, align 8
  %969 = icmp eq i8* %968, null
  br i1 %969, label %971, label %970

970:                                              ; preds = %966
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %968) #8
  br label %971

971:                                              ; preds = %970, %966
  %972 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %973 = load i8*, i8** %972, align 8
  store i8* null, i8** %972, align 8
  %974 = icmp eq i8* %973, null
  br i1 %974, label %976, label %975

975:                                              ; preds = %971
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %973) #8
  br label %976

976:                                              ; preds = %975, %971
  %977 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %978 = load i8*, i8** %977, align 8
  store i8* null, i8** %977, align 8
  %979 = icmp eq i8* %978, null
  br i1 %979, label %981, label %980

980:                                              ; preds = %976
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %978) #8
  br label %981

981:                                              ; preds = %976, %980
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #8
  ret i32 0

982:                                              ; preds = %705, %1024
  %983 = phi i32 [ %703, %705 ], [ %1025, %1024 ]
  %984 = phi i32 [ %712, %705 ], [ %1026, %1024 ]
  %985 = phi i64 [ 0, %705 ], [ %1027, %1024 ]
  %986 = load i64, i64* %434, align 8
  %987 = mul i64 %986, %985
  %988 = load i8*, i8** %707, align 8
  %989 = ptrtoint i8* %988 to i64
  %990 = and i64 %989, 63
  %991 = icmp eq i64 %990, 0
  call void @llvm.assume(i1 %991) #8
  %992 = getelementptr inbounds i8, i8* %988, i64 %987
  %993 = ptrtoint i8* %992 to i64
  %994 = and i64 %993, 63
  %995 = icmp eq i64 %994, 0
  call void @llvm.assume(i1 %995) #8
  %996 = bitcast i8* %992 to float*
  %997 = load i8*, i8** %708, align 8
  %998 = ptrtoint i8* %997 to i64
  %999 = and i64 %998, 63
  %1000 = icmp eq i64 %999, 0
  call void @llvm.assume(i1 %1000) #8
  %1001 = getelementptr inbounds i8, i8* %997, i64 %987
  %1002 = ptrtoint i8* %1001 to i64
  %1003 = and i64 %1002, 63
  %1004 = icmp eq i64 %1003, 0
  call void @llvm.assume(i1 %1004) #8
  %1005 = bitcast i8* %1001 to float*
  %1006 = load i8*, i8** %709, align 8
  %1007 = ptrtoint i8* %1006 to i64
  %1008 = and i64 %1007, 63
  %1009 = icmp eq i64 %1008, 0
  call void @llvm.assume(i1 %1009) #8
  %1010 = getelementptr inbounds i8, i8* %1006, i64 %987
  %1011 = ptrtoint i8* %1010 to i64
  %1012 = and i64 %1011, 63
  %1013 = icmp eq i64 %1012, 0
  call void @llvm.assume(i1 %1013) #8
  %1014 = bitcast i8* %1010 to float*
  %1015 = mul i64 %711, %985
  %1016 = getelementptr inbounds i8, i8* %710, i64 %1015
  %1017 = ptrtoint i8* %1016 to i64
  %1018 = and i64 %1017, 63
  %1019 = icmp eq i64 %1018, 0
  call void @llvm.assume(i1 %1019) #8
  %1020 = bitcast i8* %1016 to float*
  %1021 = icmp eq i32 %984, 0
  br i1 %1021, label %1024, label %1030

1022:                                             ; preds = %1030
  %1023 = load i32, i32* %433, align 4
  br label %1024

1024:                                             ; preds = %1022, %982
  %1025 = phi i32 [ %1023, %1022 ], [ %983, %982 ]
  %1026 = phi i32 [ %1047, %1022 ], [ 0, %982 ]
  %1027 = add nuw nsw i64 %985, 1
  %1028 = zext i32 %1025 to i64
  %1029 = icmp ult i64 %1027, %1028
  br i1 %1029, label %982, label %781

1030:                                             ; preds = %982, %1030
  %1031 = phi i64 [ %1046, %1030 ], [ 0, %982 ]
  %1032 = getelementptr inbounds float, float* %996, i64 %1031
  %1033 = bitcast float* %1032 to <16 x float>*
  %1034 = load <16 x float>, <16 x float>* %1033, align 64, !alias.scope !66, !noalias !69
  %1035 = fmul <16 x float> %1034, <float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000>
  %1036 = getelementptr inbounds float, float* %1005, i64 %1031
  %1037 = bitcast float* %1036 to <16 x float>*
  %1038 = load <16 x float>, <16 x float>* %1037, align 64, !alias.scope !71, !noalias !74
  %1039 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1038, <16 x float> <float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000>, <16 x float> %1035) #8
  %1040 = getelementptr inbounds float, float* %1014, i64 %1031
  %1041 = bitcast float* %1040 to <16 x float>*
  %1042 = load <16 x float>, <16 x float>* %1041, align 64, !alias.scope !76, !noalias !79
  %1043 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1042, <16 x float> <float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000>, <16 x float> %1039) #8
  %1044 = getelementptr inbounds float, float* %1020, i64 %1031
  %1045 = bitcast float* %1044 to <16 x float>*
  store <16 x float> %1043, <16 x float>* %1045, align 64, !alias.scope !81
  %1046 = add nuw nsw i64 %1031, 16
  %1047 = load i32, i32* %435, align 8
  %1048 = zext i32 %1047 to i64
  %1049 = icmp ult i64 %1046, %1048
  br i1 %1049, label %1030, label %1022

1050:                                             ; preds = %642
  %1051 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1052 = load i8*, i8** %415, align 8
  %1053 = load i64, i64* %414, align 8
  %1054 = load i32, i32* %1288, align 8
  br label %1055

1055:                                             ; preds = %1097, %1050
  %1056 = phi i32 [ %644, %1050 ], [ %1098, %1097 ]
  %1057 = phi i32 [ %1054, %1050 ], [ %1099, %1097 ]
  %1058 = phi i64 [ 0, %1050 ], [ %1100, %1097 ]
  %1059 = load i64, i64* %1287, align 8
  %1060 = mul i64 %1059, %1058
  %1061 = load i8*, i8** %1051, align 8
  %1062 = ptrtoint i8* %1061 to i64
  %1063 = and i64 %1062, 63
  %1064 = icmp eq i64 %1063, 0
  call void @llvm.assume(i1 %1064) #8
  %1065 = getelementptr inbounds i8, i8* %1061, i64 %1060
  %1066 = ptrtoint i8* %1065 to i64
  %1067 = and i64 %1066, 63
  %1068 = icmp eq i64 %1067, 0
  call void @llvm.assume(i1 %1068) #8
  %1069 = bitcast i8* %1065 to float*
  %1070 = add nuw nsw i64 %1058, 16
  %1071 = mul i64 %1053, %1070
  %1072 = getelementptr inbounds i8, i8* %1052, i64 %1071
  %1073 = ptrtoint i8* %1072 to i64
  %1074 = and i64 %1073, 63
  %1075 = icmp eq i64 %1074, 0
  call void @llvm.assume(i1 %1075) #8
  %1076 = icmp eq i32 %1057, 0
  br i1 %1076, label %1097, label %1077

1077:                                             ; preds = %1055
  %1078 = getelementptr inbounds i8, i8* %1072, i64 64
  %1079 = bitcast i8* %1078 to float*
  br label %1080

1080:                                             ; preds = %1080, %1077
  %1081 = phi i64 [ 0, %1077 ], [ %1091, %1080 ]
  %1082 = getelementptr inbounds float, float* %1079, i64 %1081
  %1083 = bitcast float* %1082 to <16 x float>*
  %1084 = load <16 x float>, <16 x float>* %1083, align 64, !alias.scope !35, !noalias !38
  %1085 = getelementptr inbounds float, float* %1069, i64 %1081
  %1086 = bitcast float* %1085 to <16 x float>*
  %1087 = load <16 x float>, <16 x float>* %1086, align 64, !alias.scope !40, !noalias !43
  %1088 = fmul <16 x float> %1087, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1089 = fcmp ogt <16 x float> %1084, %1088
  %1090 = select <16 x i1> %1089, <16 x float> %1084, <16 x float> %1088
  store <16 x float> %1090, <16 x float>* %1086, align 64, !alias.scope !45
  %1091 = add nuw nsw i64 %1081, 16
  %1092 = load i32, i32* %1288, align 8
  %1093 = zext i32 %1092 to i64
  %1094 = icmp ult i64 %1091, %1093
  br i1 %1094, label %1080, label %1095

1095:                                             ; preds = %1080
  %1096 = load i32, i32* %1286, align 4
  br label %1097

1097:                                             ; preds = %1095, %1055
  %1098 = phi i32 [ %1056, %1055 ], [ %1096, %1095 ]
  %1099 = phi i32 [ 0, %1055 ], [ %1092, %1095 ]
  %1100 = add nuw nsw i64 %1058, 1
  %1101 = zext i32 %1098 to i64
  %1102 = icmp ult i64 %1100, %1101
  br i1 %1102, label %1055, label %1103

1103:                                             ; preds = %1097, %642
  %1104 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1104, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1105 = load i32, i32* %1286, align 4
  %1106 = icmp eq i32 %1105, 0
  br i1 %1106, label %1107, label %1109

1107:                                             ; preds = %1103
  %1108 = load i32, i32* %1288, align 8
  br label %1164

1109:                                             ; preds = %1103
  %1110 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1111 = load i8*, i8** %415, align 8
  %1112 = load i64, i64* %414, align 8
  %1113 = load i32, i32* %1288, align 8
  br label %1114

1114:                                             ; preds = %1157, %1109
  %1115 = phi i32 [ %1113, %1109 ], [ %1158, %1157 ]
  %1116 = phi i32 [ %1105, %1109 ], [ %1159, %1157 ]
  %1117 = phi i32 [ %1113, %1109 ], [ %1160, %1157 ]
  %1118 = phi i64 [ 0, %1109 ], [ %1161, %1157 ]
  %1119 = load i64, i64* %1287, align 8
  %1120 = mul i64 %1119, %1118
  %1121 = load i8*, i8** %1110, align 8
  %1122 = ptrtoint i8* %1121 to i64
  %1123 = and i64 %1122, 63
  %1124 = icmp eq i64 %1123, 0
  call void @llvm.assume(i1 %1124) #8
  %1125 = getelementptr inbounds i8, i8* %1121, i64 %1120
  %1126 = ptrtoint i8* %1125 to i64
  %1127 = and i64 %1126, 63
  %1128 = icmp eq i64 %1127, 0
  call void @llvm.assume(i1 %1128) #8
  %1129 = bitcast i8* %1125 to float*
  %1130 = add nuw nsw i64 %1118, 16
  %1131 = mul i64 %1112, %1130
  %1132 = getelementptr inbounds i8, i8* %1111, i64 %1131
  %1133 = ptrtoint i8* %1132 to i64
  %1134 = and i64 %1133, 63
  %1135 = icmp eq i64 %1134, 0
  call void @llvm.assume(i1 %1135) #8
  %1136 = icmp eq i32 %1117, 0
  br i1 %1136, label %1157, label %1137

1137:                                             ; preds = %1114
  %1138 = getelementptr inbounds i8, i8* %1132, i64 64
  %1139 = bitcast i8* %1138 to float*
  br label %1140

1140:                                             ; preds = %1140, %1137
  %1141 = phi i64 [ 0, %1137 ], [ %1151, %1140 ]
  %1142 = getelementptr inbounds float, float* %1139, i64 %1141
  %1143 = bitcast float* %1142 to <16 x float>*
  %1144 = load <16 x float>, <16 x float>* %1143, align 64, !alias.scope !35, !noalias !38
  %1145 = getelementptr inbounds float, float* %1129, i64 %1141
  %1146 = bitcast float* %1145 to <16 x float>*
  %1147 = load <16 x float>, <16 x float>* %1146, align 64, !alias.scope !40, !noalias !43
  %1148 = fmul <16 x float> %1147, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1149 = fcmp ogt <16 x float> %1144, %1148
  %1150 = select <16 x i1> %1149, <16 x float> %1144, <16 x float> %1148
  store <16 x float> %1150, <16 x float>* %1146, align 64, !alias.scope !45
  %1151 = add nuw nsw i64 %1141, 16
  %1152 = load i32, i32* %1288, align 8
  %1153 = zext i32 %1152 to i64
  %1154 = icmp ult i64 %1151, %1153
  br i1 %1154, label %1140, label %1155

1155:                                             ; preds = %1140
  %1156 = load i32, i32* %1286, align 4
  br label %1157

1157:                                             ; preds = %1155, %1114
  %1158 = phi i32 [ %1115, %1114 ], [ %1152, %1155 ]
  %1159 = phi i32 [ %1116, %1114 ], [ %1156, %1155 ]
  %1160 = phi i32 [ 0, %1114 ], [ %1152, %1155 ]
  %1161 = add nuw nsw i64 %1118, 1
  %1162 = zext i32 %1159 to i64
  %1163 = icmp ult i64 %1161, %1162
  br i1 %1163, label %1114, label %1164

1164:                                             ; preds = %1157, %1107
  %1165 = phi i32 [ 0, %1107 ], [ %1159, %1157 ]
  %1166 = phi i32 [ %1108, %1107 ], [ %1158, %1157 ]
  %1167 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1167) #8
  %1168 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1169 = zext i32 %1166 to i64
  %1170 = zext i32 %1165 to i64
  %1171 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0
  %1172 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1172, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1171, i64 %1169, i64 %1170, i64 4) #8
  %1173 = load i32, i32* %1286, align 4
  %1174 = icmp eq i32 %1173, 0
  br i1 %1174, label %694, label %629

1175:                                             ; preds = %577
  %1176 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1177 = load i8*, i8** %415, align 8
  %1178 = load i64, i64* %414, align 8
  %1179 = load i32, i32* %435, align 8
  br label %1180

1180:                                             ; preds = %1222, %1175
  %1181 = phi i32 [ %579, %1175 ], [ %1223, %1222 ]
  %1182 = phi i32 [ %1179, %1175 ], [ %1224, %1222 ]
  %1183 = phi i64 [ 0, %1175 ], [ %1225, %1222 ]
  %1184 = load i64, i64* %434, align 8
  %1185 = mul i64 %1184, %1183
  %1186 = load i8*, i8** %1176, align 8
  %1187 = ptrtoint i8* %1186 to i64
  %1188 = and i64 %1187, 63
  %1189 = icmp eq i64 %1188, 0
  call void @llvm.assume(i1 %1189) #8
  %1190 = getelementptr inbounds i8, i8* %1186, i64 %1185
  %1191 = ptrtoint i8* %1190 to i64
  %1192 = and i64 %1191, 63
  %1193 = icmp eq i64 %1192, 0
  call void @llvm.assume(i1 %1193) #8
  %1194 = bitcast i8* %1190 to float*
  %1195 = add nuw nsw i64 %1183, 16
  %1196 = mul i64 %1178, %1195
  %1197 = getelementptr inbounds i8, i8* %1177, i64 %1196
  %1198 = ptrtoint i8* %1197 to i64
  %1199 = and i64 %1198, 63
  %1200 = icmp eq i64 %1199, 0
  call void @llvm.assume(i1 %1200) #8
  %1201 = icmp eq i32 %1182, 0
  br i1 %1201, label %1222, label %1202

1202:                                             ; preds = %1180
  %1203 = getelementptr inbounds i8, i8* %1197, i64 64
  %1204 = bitcast i8* %1203 to float*
  br label %1205

1205:                                             ; preds = %1205, %1202
  %1206 = phi i64 [ 0, %1202 ], [ %1216, %1205 ]
  %1207 = getelementptr inbounds float, float* %1204, i64 %1206
  %1208 = bitcast float* %1207 to <16 x float>*
  %1209 = load <16 x float>, <16 x float>* %1208, align 64, !alias.scope !22, !noalias !25
  %1210 = getelementptr inbounds float, float* %1194, i64 %1206
  %1211 = bitcast float* %1210 to <16 x float>*
  %1212 = load <16 x float>, <16 x float>* %1211, align 64, !alias.scope !27, !noalias !30
  %1213 = fmul <16 x float> %1212, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1214 = fcmp ogt <16 x float> %1209, %1213
  %1215 = select <16 x i1> %1214, <16 x float> %1209, <16 x float> %1213
  store <16 x float> %1215, <16 x float>* %1211, align 64, !alias.scope !32
  %1216 = add nuw nsw i64 %1206, 16
  %1217 = load i32, i32* %435, align 8
  %1218 = zext i32 %1217 to i64
  %1219 = icmp ult i64 %1216, %1218
  br i1 %1219, label %1205, label %1220

1220:                                             ; preds = %1205
  %1221 = load i32, i32* %433, align 4
  br label %1222

1222:                                             ; preds = %1220, %1180
  %1223 = phi i32 [ %1181, %1180 ], [ %1221, %1220 ]
  %1224 = phi i32 [ 0, %1180 ], [ %1217, %1220 ]
  %1225 = add nuw nsw i64 %1183, 1
  %1226 = zext i32 %1223 to i64
  %1227 = icmp ult i64 %1225, %1226
  br i1 %1227, label %1180, label %1228

1228:                                             ; preds = %1222, %577
  %1229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1229, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1230 = load i32, i32* %433, align 4
  %1231 = icmp eq i32 %1230, 0
  br i1 %1231, label %1285, label %1232

1232:                                             ; preds = %1228
  %1233 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1234 = load i8*, i8** %415, align 8
  %1235 = load i64, i64* %414, align 8
  %1236 = load i32, i32* %435, align 8
  br label %1237

1237:                                             ; preds = %1279, %1232
  %1238 = phi i32 [ %1230, %1232 ], [ %1280, %1279 ]
  %1239 = phi i32 [ %1236, %1232 ], [ %1281, %1279 ]
  %1240 = phi i64 [ 0, %1232 ], [ %1282, %1279 ]
  %1241 = load i64, i64* %434, align 8
  %1242 = mul i64 %1241, %1240
  %1243 = load i8*, i8** %1233, align 8
  %1244 = ptrtoint i8* %1243 to i64
  %1245 = and i64 %1244, 63
  %1246 = icmp eq i64 %1245, 0
  call void @llvm.assume(i1 %1246) #8
  %1247 = getelementptr inbounds i8, i8* %1243, i64 %1242
  %1248 = ptrtoint i8* %1247 to i64
  %1249 = and i64 %1248, 63
  %1250 = icmp eq i64 %1249, 0
  call void @llvm.assume(i1 %1250) #8
  %1251 = bitcast i8* %1247 to float*
  %1252 = add nuw nsw i64 %1240, 16
  %1253 = mul i64 %1235, %1252
  %1254 = getelementptr inbounds i8, i8* %1234, i64 %1253
  %1255 = ptrtoint i8* %1254 to i64
  %1256 = and i64 %1255, 63
  %1257 = icmp eq i64 %1256, 0
  call void @llvm.assume(i1 %1257) #8
  %1258 = icmp eq i32 %1239, 0
  br i1 %1258, label %1279, label %1259

1259:                                             ; preds = %1237
  %1260 = getelementptr inbounds i8, i8* %1254, i64 64
  %1261 = bitcast i8* %1260 to float*
  br label %1262

1262:                                             ; preds = %1262, %1259
  %1263 = phi i64 [ 0, %1259 ], [ %1273, %1262 ]
  %1264 = getelementptr inbounds float, float* %1261, i64 %1263
  %1265 = bitcast float* %1264 to <16 x float>*
  %1266 = load <16 x float>, <16 x float>* %1265, align 64, !alias.scope !22, !noalias !25
  %1267 = getelementptr inbounds float, float* %1251, i64 %1263
  %1268 = bitcast float* %1267 to <16 x float>*
  %1269 = load <16 x float>, <16 x float>* %1268, align 64, !alias.scope !27, !noalias !30
  %1270 = fmul <16 x float> %1269, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1271 = fcmp ogt <16 x float> %1266, %1270
  %1272 = select <16 x i1> %1271, <16 x float> %1266, <16 x float> %1270
  store <16 x float> %1272, <16 x float>* %1268, align 64, !alias.scope !32
  %1273 = add nuw nsw i64 %1263, 16
  %1274 = load i32, i32* %435, align 8
  %1275 = zext i32 %1274 to i64
  %1276 = icmp ult i64 %1273, %1275
  br i1 %1276, label %1262, label %1277

1277:                                             ; preds = %1262
  %1278 = load i32, i32* %433, align 4
  br label %1279

1279:                                             ; preds = %1277, %1237
  %1280 = phi i32 [ %1238, %1237 ], [ %1278, %1277 ]
  %1281 = phi i32 [ 0, %1237 ], [ %1274, %1277 ]
  %1282 = add nuw nsw i64 %1240, 1
  %1283 = zext i32 %1280 to i64
  %1284 = icmp ult i64 %1282, %1283
  br i1 %1284, label %1237, label %1285

1285:                                             ; preds = %1279, %1228
  %1286 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 1
  %1287 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 4
  %1288 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 0
  %1289 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %1289, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1290 = load i32, i32* %1286, align 4
  %1291 = icmp eq i32 %1290, 0
  br i1 %1291, label %642, label %637

1292:                                             ; preds = %563
  %1293 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1294 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %1295 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1296 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 4
  %1297 = icmp eq i32 %567, 0
  %1298 = shl nuw nsw i64 %568, 2
  %1299 = icmp ult i32 %567, 64
  %1300 = and i64 %568, 4294967232
  %1301 = icmp eq i64 %1300, %568
  %1302 = and i64 %568, 3
  %1303 = icmp eq i64 %1302, 0
  br label %1304

1304:                                             ; preds = %1414, %1292
  %1305 = phi i64 [ 0, %1292 ], [ %1415, %1414 ]
  %1306 = load i8*, i8** %1293, align 8
  %1307 = load i64, i64* %1294, align 8
  %1308 = mul i64 %1307, %1305
  %1309 = getelementptr inbounds i8, i8* %1306, i64 %1308
  %1310 = ptrtoint i8* %1309 to i64
  %1311 = and i64 %1310, 63
  %1312 = icmp eq i64 %1311, 0
  call void @llvm.assume(i1 %1312) #8
  %1313 = bitcast i8* %1309 to float*
  %1314 = load i8*, i8** %1295, align 8
  %1315 = load i64, i64* %1296, align 8
  %1316 = mul i64 %1315, %1305
  %1317 = getelementptr inbounds i8, i8* %1314, i64 %1316
  %1318 = ptrtoint i8* %1317 to i64
  %1319 = and i64 %1318, 63
  %1320 = icmp eq i64 %1319, 0
  call void @llvm.assume(i1 %1320) #8
  %1321 = bitcast i8* %1317 to float*
  br i1 %1297, label %1414, label %1322

1322:                                             ; preds = %1304
  br i1 %1299, label %1369, label %1323

1323:                                             ; preds = %1322
  %1324 = getelementptr i8, i8* %1314, i64 %1298
  %1325 = getelementptr i8, i8* %1324, i64 %1316
  %1326 = getelementptr i8, i8* %1306, i64 %1298
  %1327 = mul i64 %1307, %1305
  %1328 = getelementptr i8, i8* %1326, i64 %1327
  %1329 = icmp ult i8* %1317, %1328
  %1330 = icmp ult i8* %1309, %1325
  %1331 = and i1 %1329, %1330
  br i1 %1331, label %1369, label %1332

1332:                                             ; preds = %1323, %1332
  %1333 = phi i64 [ %1366, %1332 ], [ 0, %1323 ]
  %1334 = getelementptr inbounds float, float* %1313, i64 %1333
  %1335 = bitcast float* %1334 to <16 x float>*
  %1336 = load <16 x float>, <16 x float>* %1335, align 64, !alias.scope !84
  %1337 = getelementptr inbounds float, float* %1334, i64 16
  %1338 = bitcast float* %1337 to <16 x float>*
  %1339 = load <16 x float>, <16 x float>* %1338, align 64, !alias.scope !84
  %1340 = getelementptr inbounds float, float* %1334, i64 32
  %1341 = bitcast float* %1340 to <16 x float>*
  %1342 = load <16 x float>, <16 x float>* %1341, align 64, !alias.scope !84
  %1343 = getelementptr inbounds float, float* %1334, i64 48
  %1344 = bitcast float* %1343 to <16 x float>*
  %1345 = load <16 x float>, <16 x float>* %1344, align 64, !alias.scope !84
  %1346 = getelementptr inbounds float, float* %1321, i64 %1333
  %1347 = bitcast float* %1346 to <16 x float>*
  %1348 = load <16 x float>, <16 x float>* %1347, align 64, !alias.scope !87, !noalias !84
  %1349 = getelementptr inbounds float, float* %1346, i64 16
  %1350 = bitcast float* %1349 to <16 x float>*
  %1351 = load <16 x float>, <16 x float>* %1350, align 64, !alias.scope !87, !noalias !84
  %1352 = getelementptr inbounds float, float* %1346, i64 32
  %1353 = bitcast float* %1352 to <16 x float>*
  %1354 = load <16 x float>, <16 x float>* %1353, align 64, !alias.scope !87, !noalias !84
  %1355 = getelementptr inbounds float, float* %1346, i64 48
  %1356 = bitcast float* %1355 to <16 x float>*
  %1357 = load <16 x float>, <16 x float>* %1356, align 64, !alias.scope !87, !noalias !84
  %1358 = fsub <16 x float> %1348, %1336
  %1359 = fsub <16 x float> %1351, %1339
  %1360 = fsub <16 x float> %1354, %1342
  %1361 = fsub <16 x float> %1357, %1345
  %1362 = bitcast float* %1346 to <16 x float>*
  store <16 x float> %1358, <16 x float>* %1362, align 64, !alias.scope !87, !noalias !84
  %1363 = bitcast float* %1349 to <16 x float>*
  store <16 x float> %1359, <16 x float>* %1363, align 64, !alias.scope !87, !noalias !84
  %1364 = bitcast float* %1352 to <16 x float>*
  store <16 x float> %1360, <16 x float>* %1364, align 64, !alias.scope !87, !noalias !84
  %1365 = bitcast float* %1355 to <16 x float>*
  store <16 x float> %1361, <16 x float>* %1365, align 64, !alias.scope !87, !noalias !84
  %1366 = add i64 %1333, 64
  %1367 = icmp eq i64 %1366, %1300
  br i1 %1367, label %1368, label %1332, !llvm.loop !89

1368:                                             ; preds = %1332
  br i1 %1301, label %1414, label %1369

1369:                                             ; preds = %1368, %1323, %1322
  %1370 = phi i64 [ 0, %1323 ], [ 0, %1322 ], [ %1300, %1368 ]
  %1371 = xor i64 %1370, -1
  %1372 = add nsw i64 %1371, %568
  br i1 %1303, label %1384, label %1373

1373:                                             ; preds = %1369, %1373
  %1374 = phi i64 [ %1381, %1373 ], [ %1370, %1369 ]
  %1375 = phi i64 [ %1382, %1373 ], [ %1302, %1369 ]
  %1376 = getelementptr inbounds float, float* %1313, i64 %1374
  %1377 = load float, float* %1376, align 4
  %1378 = getelementptr inbounds float, float* %1321, i64 %1374
  %1379 = load float, float* %1378, align 4
  %1380 = fsub float %1379, %1377
  store float %1380, float* %1378, align 4
  %1381 = add nuw nsw i64 %1374, 1
  %1382 = add i64 %1375, -1
  %1383 = icmp eq i64 %1382, 0
  br i1 %1383, label %1384, label %1373, !llvm.loop !90

1384:                                             ; preds = %1373, %1369
  %1385 = phi i64 [ %1370, %1369 ], [ %1381, %1373 ]
  %1386 = icmp ult i64 %1372, 3
  br i1 %1386, label %1414, label %1387

1387:                                             ; preds = %1384, %1387
  %1388 = phi i64 [ %1412, %1387 ], [ %1385, %1384 ]
  %1389 = getelementptr inbounds float, float* %1313, i64 %1388
  %1390 = load float, float* %1389, align 4
  %1391 = getelementptr inbounds float, float* %1321, i64 %1388
  %1392 = load float, float* %1391, align 4
  %1393 = fsub float %1392, %1390
  store float %1393, float* %1391, align 4
  %1394 = add nuw nsw i64 %1388, 1
  %1395 = getelementptr inbounds float, float* %1313, i64 %1394
  %1396 = load float, float* %1395, align 4
  %1397 = getelementptr inbounds float, float* %1321, i64 %1394
  %1398 = load float, float* %1397, align 4
  %1399 = fsub float %1398, %1396
  store float %1399, float* %1397, align 4
  %1400 = add nuw nsw i64 %1388, 2
  %1401 = getelementptr inbounds float, float* %1313, i64 %1400
  %1402 = load float, float* %1401, align 4
  %1403 = getelementptr inbounds float, float* %1321, i64 %1400
  %1404 = load float, float* %1403, align 4
  %1405 = fsub float %1404, %1402
  store float %1405, float* %1403, align 4
  %1406 = add nuw nsw i64 %1388, 3
  %1407 = getelementptr inbounds float, float* %1313, i64 %1406
  %1408 = load float, float* %1407, align 4
  %1409 = getelementptr inbounds float, float* %1321, i64 %1406
  %1410 = load float, float* %1409, align 4
  %1411 = fsub float %1410, %1408
  store float %1411, float* %1409, align 4
  %1412 = add nuw nsw i64 %1388, 4
  %1413 = icmp eq i64 %1412, %568
  br i1 %1413, label %1414, label %1387, !llvm.loop !91

1414:                                             ; preds = %1384, %1387, %1368, %1304
  %1415 = add nuw nsw i64 %1305, 1
  %1416 = icmp eq i64 %1415, %570
  br i1 %1416, label %1417, label %1304

1417:                                             ; preds = %1414, %563
  %1418 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2
  %1419 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %1418, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %1419) #8
  %1420 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1418, i64 0, i32 0, i32 0
  %1421 = load i32, i32* %1420, align 8
  %1422 = zext i32 %1421 to i64
  %1423 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 1
  %1424 = load i32, i32* %1423, align 4
  %1425 = zext i32 %1424 to i64
  %1426 = icmp eq i32 %1424, 0
  br i1 %1426, label %1552, label %1427

1427:                                             ; preds = %1417
  %1428 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1429 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %1430 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1431 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 4
  %1432 = icmp eq i32 %1421, 0
  %1433 = shl nuw nsw i64 %1422, 2
  %1434 = icmp ult i32 %1421, 64
  %1435 = and i64 %1422, 4294967232
  %1436 = icmp eq i64 %1435, %1422
  %1437 = and i64 %1422, 3
  %1438 = icmp eq i64 %1437, 0
  br label %1439

1439:                                             ; preds = %1549, %1427
  %1440 = phi i64 [ 0, %1427 ], [ %1550, %1549 ]
  %1441 = load i8*, i8** %1428, align 8
  %1442 = load i64, i64* %1429, align 8
  %1443 = mul i64 %1442, %1440
  %1444 = getelementptr inbounds i8, i8* %1441, i64 %1443
  %1445 = ptrtoint i8* %1444 to i64
  %1446 = and i64 %1445, 63
  %1447 = icmp eq i64 %1446, 0
  call void @llvm.assume(i1 %1447) #8
  %1448 = bitcast i8* %1444 to float*
  %1449 = load i8*, i8** %1430, align 8
  %1450 = load i64, i64* %1431, align 8
  %1451 = mul i64 %1450, %1440
  %1452 = getelementptr inbounds i8, i8* %1449, i64 %1451
  %1453 = ptrtoint i8* %1452 to i64
  %1454 = and i64 %1453, 63
  %1455 = icmp eq i64 %1454, 0
  call void @llvm.assume(i1 %1455) #8
  %1456 = bitcast i8* %1452 to float*
  br i1 %1432, label %1549, label %1457

1457:                                             ; preds = %1439
  br i1 %1434, label %1504, label %1458

1458:                                             ; preds = %1457
  %1459 = getelementptr i8, i8* %1449, i64 %1433
  %1460 = getelementptr i8, i8* %1459, i64 %1451
  %1461 = getelementptr i8, i8* %1441, i64 %1433
  %1462 = mul i64 %1442, %1440
  %1463 = getelementptr i8, i8* %1461, i64 %1462
  %1464 = icmp ult i8* %1452, %1463
  %1465 = icmp ult i8* %1444, %1460
  %1466 = and i1 %1464, %1465
  br i1 %1466, label %1504, label %1467

1467:                                             ; preds = %1458, %1467
  %1468 = phi i64 [ %1501, %1467 ], [ 0, %1458 ]
  %1469 = getelementptr inbounds float, float* %1448, i64 %1468
  %1470 = bitcast float* %1469 to <16 x float>*
  %1471 = load <16 x float>, <16 x float>* %1470, align 64, !alias.scope !92
  %1472 = getelementptr inbounds float, float* %1469, i64 16
  %1473 = bitcast float* %1472 to <16 x float>*
  %1474 = load <16 x float>, <16 x float>* %1473, align 64, !alias.scope !92
  %1475 = getelementptr inbounds float, float* %1469, i64 32
  %1476 = bitcast float* %1475 to <16 x float>*
  %1477 = load <16 x float>, <16 x float>* %1476, align 64, !alias.scope !92
  %1478 = getelementptr inbounds float, float* %1469, i64 48
  %1479 = bitcast float* %1478 to <16 x float>*
  %1480 = load <16 x float>, <16 x float>* %1479, align 64, !alias.scope !92
  %1481 = getelementptr inbounds float, float* %1456, i64 %1468
  %1482 = bitcast float* %1481 to <16 x float>*
  %1483 = load <16 x float>, <16 x float>* %1482, align 64, !alias.scope !95, !noalias !92
  %1484 = getelementptr inbounds float, float* %1481, i64 16
  %1485 = bitcast float* %1484 to <16 x float>*
  %1486 = load <16 x float>, <16 x float>* %1485, align 64, !alias.scope !95, !noalias !92
  %1487 = getelementptr inbounds float, float* %1481, i64 32
  %1488 = bitcast float* %1487 to <16 x float>*
  %1489 = load <16 x float>, <16 x float>* %1488, align 64, !alias.scope !95, !noalias !92
  %1490 = getelementptr inbounds float, float* %1481, i64 48
  %1491 = bitcast float* %1490 to <16 x float>*
  %1492 = load <16 x float>, <16 x float>* %1491, align 64, !alias.scope !95, !noalias !92
  %1493 = fsub <16 x float> %1483, %1471
  %1494 = fsub <16 x float> %1486, %1474
  %1495 = fsub <16 x float> %1489, %1477
  %1496 = fsub <16 x float> %1492, %1480
  %1497 = bitcast float* %1481 to <16 x float>*
  store <16 x float> %1493, <16 x float>* %1497, align 64, !alias.scope !95, !noalias !92
  %1498 = bitcast float* %1484 to <16 x float>*
  store <16 x float> %1494, <16 x float>* %1498, align 64, !alias.scope !95, !noalias !92
  %1499 = bitcast float* %1487 to <16 x float>*
  store <16 x float> %1495, <16 x float>* %1499, align 64, !alias.scope !95, !noalias !92
  %1500 = bitcast float* %1490 to <16 x float>*
  store <16 x float> %1496, <16 x float>* %1500, align 64, !alias.scope !95, !noalias !92
  %1501 = add i64 %1468, 64
  %1502 = icmp eq i64 %1501, %1435
  br i1 %1502, label %1503, label %1467, !llvm.loop !97

1503:                                             ; preds = %1467
  br i1 %1436, label %1549, label %1504

1504:                                             ; preds = %1503, %1458, %1457
  %1505 = phi i64 [ 0, %1458 ], [ 0, %1457 ], [ %1435, %1503 ]
  %1506 = xor i64 %1505, -1
  %1507 = add nsw i64 %1506, %1422
  br i1 %1438, label %1519, label %1508

1508:                                             ; preds = %1504, %1508
  %1509 = phi i64 [ %1516, %1508 ], [ %1505, %1504 ]
  %1510 = phi i64 [ %1517, %1508 ], [ %1437, %1504 ]
  %1511 = getelementptr inbounds float, float* %1448, i64 %1509
  %1512 = load float, float* %1511, align 4
  %1513 = getelementptr inbounds float, float* %1456, i64 %1509
  %1514 = load float, float* %1513, align 4
  %1515 = fsub float %1514, %1512
  store float %1515, float* %1513, align 4
  %1516 = add nuw nsw i64 %1509, 1
  %1517 = add i64 %1510, -1
  %1518 = icmp eq i64 %1517, 0
  br i1 %1518, label %1519, label %1508, !llvm.loop !98

1519:                                             ; preds = %1508, %1504
  %1520 = phi i64 [ %1505, %1504 ], [ %1516, %1508 ]
  %1521 = icmp ult i64 %1507, 3
  br i1 %1521, label %1549, label %1522

1522:                                             ; preds = %1519, %1522
  %1523 = phi i64 [ %1547, %1522 ], [ %1520, %1519 ]
  %1524 = getelementptr inbounds float, float* %1448, i64 %1523
  %1525 = load float, float* %1524, align 4
  %1526 = getelementptr inbounds float, float* %1456, i64 %1523
  %1527 = load float, float* %1526, align 4
  %1528 = fsub float %1527, %1525
  store float %1528, float* %1526, align 4
  %1529 = add nuw nsw i64 %1523, 1
  %1530 = getelementptr inbounds float, float* %1448, i64 %1529
  %1531 = load float, float* %1530, align 4
  %1532 = getelementptr inbounds float, float* %1456, i64 %1529
  %1533 = load float, float* %1532, align 4
  %1534 = fsub float %1533, %1531
  store float %1534, float* %1532, align 4
  %1535 = add nuw nsw i64 %1523, 2
  %1536 = getelementptr inbounds float, float* %1448, i64 %1535
  %1537 = load float, float* %1536, align 4
  %1538 = getelementptr inbounds float, float* %1456, i64 %1535
  %1539 = load float, float* %1538, align 4
  %1540 = fsub float %1539, %1537
  store float %1540, float* %1538, align 4
  %1541 = add nuw nsw i64 %1523, 3
  %1542 = getelementptr inbounds float, float* %1448, i64 %1541
  %1543 = load float, float* %1542, align 4
  %1544 = getelementptr inbounds float, float* %1456, i64 %1541
  %1545 = load float, float* %1544, align 4
  %1546 = fsub float %1545, %1543
  store float %1546, float* %1544, align 4
  %1547 = add nuw nsw i64 %1523, 4
  %1548 = icmp eq i64 %1547, %1422
  br i1 %1548, label %1549, label %1522, !llvm.loop !99

1549:                                             ; preds = %1519, %1522, %1503, %1439
  %1550 = add nuw nsw i64 %1440, 1
  %1551 = icmp eq i64 %1550, %1425
  br i1 %1551, label %1552, label %1439

1552:                                             ; preds = %1549, %1417
  %1553 = bitcast i64* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1553) #8
  %1554 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 8
  %1555 = load i64, i64* %1554, align 8
  %1556 = add i64 %1555, 7
  %1557 = lshr i64 %1556, 3
  store i64 %1557, i64* %23, align 8
  %1558 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 9
  %1559 = load i64, i64* %1558, align 8
  %1560 = add i64 %1559, 7
  %1561 = lshr i64 %1560, 3
  %1562 = mul i64 %1561, %1557
  %1563 = trunc i64 %1562 to i32
  %1564 = bitcast %class.anon* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1564) #8
  %1565 = getelementptr inbounds %class.anon, %class.anon* %24, i64 0, i32 0
  store i64* %23, i64** %1565, align 8
  %1566 = getelementptr inbounds %class.anon, %class.anon* %24, i64 0, i32 1
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %1566, align 8
  %1567 = getelementptr inbounds %class.anon, %class.anon* %24, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %1567, align 8
  %1568 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1568) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %17, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double* nonnull %17) #8
  %1569 = icmp eq %"class.jxl::ThreadPool"* %4, null
  br i1 %1569, label %328, label %339
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE(%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"* nocapture readnone, %"class.jxl::ImageBundle"* nocapture readnone, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) #3 {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.283", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.283", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState.278", align 8
  %12 = alloca %"class.jxl::ThreadPool::RunCallState.278", align 8
  %13 = alloca double, align 8
  %14 = alloca %"class.jxl::ThreadPool", align 8
  %15 = alloca %"class.jxl::ThreadPool::RunCallState.277", align 8
  %16 = alloca %"class.jxl::ThreadPool::RunCallState.277", align 8
  %17 = alloca double, align 8
  %18 = alloca %"class.jxl::ThreadPool", align 8
  %19 = alloca %"class.jxl::Image3", align 8
  %20 = alloca %"class.jxl::Image3", align 8
  %21 = alloca %"class.jxl::Plane.97", align 8
  %22 = alloca %"class.std::__1::unique_ptr.254", align 8
  %23 = alloca i64, align 8
  %24 = alloca %class.anon.273, align 8
  %25 = alloca %"class.jxl::Image3", align 8
  %26 = alloca %"class.jxl::Image3", align 8
  %27 = alloca %class.anon.274, align 8
  %28 = alloca %"class.std::__1::unique_ptr.254", align 8
  %29 = alloca %"class.jxl::Image3", align 8
  %30 = alloca %"class.jxl::Plane.97", align 8
  %31 = alloca %"class.jxl::Plane.97", align 8
  %32 = alloca %"class.jxl::Image3", align 8
  %33 = alloca %"class.jxl::Plane.97", align 8
  %34 = alloca %"class.jxl::Plane.97", align 8
  %35 = alloca float, align 4
  %36 = alloca %"class.jxl::Plane.97", align 8
  %37 = alloca %class.anon.275, align 8
  %38 = alloca [18 x %"struct.std::__1::pair.260"], align 16
  %39 = alloca float, align 4
  %40 = alloca %class.anon.276, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2
  %43 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 0
  %44 = load float, float* %43, align 8
  %45 = fcmp ogt float %44, 0.000000e+00
  br i1 %45, label %49, label %46

46:                                               ; preds = %6
  %47 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #8
  %48 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

49:                                               ; preds = %6
  %50 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 1, i32 26, i32 2
  %51 = load i8, i8* %50, align 1, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"* %3, float 0x3FEFB50D60000000, %"class.jxl::ThreadPool"* %4) #8
  br label %54

54:                                               ; preds = %49, %53
  %55 = bitcast %"class.jxl::Image3"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %19, %"class.jxl::Image3"* dereferenceable(96) %3, i64 16, i64 16) #8
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = icmp eq i32 %60, 0
  br i1 %62, label %188, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %68 = icmp eq i32 %57, 0
  %69 = shl nuw nsw i64 %58, 2
  %70 = icmp ult i32 %57, 32
  %71 = and i64 %58, 4294967264
  %72 = icmp eq i64 %71, %58
  %73 = and i64 %58, 3
  %74 = icmp eq i64 %73, 0
  br label %75

75:                                               ; preds = %158, %63
  %76 = phi i64 [ 0, %63 ], [ %159, %158 ]
  %77 = load i8*, i8** %64, align 8
  %78 = load i64, i64* %65, align 8
  %79 = mul i64 %78, %76
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  call void @llvm.assume(i1 %83) #8
  %84 = bitcast i8* %80 to float*
  %85 = load i8*, i8** %66, align 8
  %86 = load i64, i64* %67, align 8
  %87 = mul i64 %86, %76
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = ptrtoint i8* %88 to i64
  %90 = and i64 %89, 63
  %91 = icmp eq i64 %90, 0
  call void @llvm.assume(i1 %91) #8
  %92 = bitcast i8* %88 to float*
  br i1 %68, label %158, label %93

93:                                               ; preds = %75
  br i1 %70, label %94, label %112

94:                                               ; preds = %157, %112, %93
  %95 = phi i64 [ 0, %112 ], [ 0, %93 ], [ %71, %157 ]
  %96 = xor i64 %95, -1
  %97 = add nsw i64 %96, %58
  br i1 %74, label %109, label %98

98:                                               ; preds = %94, %98
  %99 = phi i64 [ %106, %98 ], [ %95, %94 ]
  %100 = phi i64 [ %107, %98 ], [ %73, %94 ]
  %101 = getelementptr inbounds float, float* %84, i64 %99
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds float, float* %92, i64 %99
  %104 = load float, float* %103, align 4
  %105 = fsub float %104, %102
  store float %105, float* %103, align 4
  %106 = add nuw nsw i64 %99, 1
  %107 = add i64 %100, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %98, !llvm.loop !100

109:                                              ; preds = %98, %94
  %110 = phi i64 [ %95, %94 ], [ %106, %98 ]
  %111 = icmp ult i64 %97, 3
  br i1 %111, label %158, label %161

112:                                              ; preds = %93
  %113 = getelementptr i8, i8* %85, i64 %69
  %114 = getelementptr i8, i8* %113, i64 %87
  %115 = getelementptr i8, i8* %77, i64 %69
  %116 = mul i64 %78, %76
  %117 = getelementptr i8, i8* %115, i64 %116
  %118 = icmp ult i8* %88, %117
  %119 = icmp ult i8* %80, %114
  %120 = and i1 %118, %119
  br i1 %120, label %94, label %121

121:                                              ; preds = %112, %121
  %122 = phi i64 [ %155, %121 ], [ 0, %112 ]
  %123 = getelementptr inbounds float, float* %84, i64 %122
  %124 = bitcast float* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 64, !alias.scope !101
  %126 = getelementptr inbounds float, float* %123, i64 8
  %127 = bitcast float* %126 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 32, !alias.scope !101
  %129 = getelementptr inbounds float, float* %123, i64 16
  %130 = bitcast float* %129 to <8 x float>*
  %131 = load <8 x float>, <8 x float>* %130, align 64, !alias.scope !101
  %132 = getelementptr inbounds float, float* %123, i64 24
  %133 = bitcast float* %132 to <8 x float>*
  %134 = load <8 x float>, <8 x float>* %133, align 32, !alias.scope !101
  %135 = getelementptr inbounds float, float* %92, i64 %122
  %136 = bitcast float* %135 to <8 x float>*
  %137 = load <8 x float>, <8 x float>* %136, align 64, !alias.scope !104, !noalias !101
  %138 = getelementptr inbounds float, float* %135, i64 8
  %139 = bitcast float* %138 to <8 x float>*
  %140 = load <8 x float>, <8 x float>* %139, align 32, !alias.scope !104, !noalias !101
  %141 = getelementptr inbounds float, float* %135, i64 16
  %142 = bitcast float* %141 to <8 x float>*
  %143 = load <8 x float>, <8 x float>* %142, align 64, !alias.scope !104, !noalias !101
  %144 = getelementptr inbounds float, float* %135, i64 24
  %145 = bitcast float* %144 to <8 x float>*
  %146 = load <8 x float>, <8 x float>* %145, align 32, !alias.scope !104, !noalias !101
  %147 = fsub <8 x float> %137, %125
  %148 = fsub <8 x float> %140, %128
  %149 = fsub <8 x float> %143, %131
  %150 = fsub <8 x float> %146, %134
  %151 = bitcast float* %135 to <8 x float>*
  store <8 x float> %147, <8 x float>* %151, align 64, !alias.scope !104, !noalias !101
  %152 = bitcast float* %138 to <8 x float>*
  store <8 x float> %148, <8 x float>* %152, align 32, !alias.scope !104, !noalias !101
  %153 = bitcast float* %141 to <8 x float>*
  store <8 x float> %149, <8 x float>* %153, align 64, !alias.scope !104, !noalias !101
  %154 = bitcast float* %144 to <8 x float>*
  store <8 x float> %150, <8 x float>* %154, align 32, !alias.scope !104, !noalias !101
  %155 = add i64 %122, 32
  %156 = icmp eq i64 %155, %71
  br i1 %156, label %157, label %121, !llvm.loop !106

157:                                              ; preds = %121
  br i1 %72, label %158, label %94

158:                                              ; preds = %109, %161, %157, %75
  %159 = add nuw nsw i64 %76, 1
  %160 = icmp eq i64 %159, %61
  br i1 %160, label %188, label %75

161:                                              ; preds = %109, %161
  %162 = phi i64 [ %186, %161 ], [ %110, %109 ]
  %163 = getelementptr inbounds float, float* %84, i64 %162
  %164 = load float, float* %163, align 4
  %165 = getelementptr inbounds float, float* %92, i64 %162
  %166 = load float, float* %165, align 4
  %167 = fsub float %166, %164
  store float %167, float* %165, align 4
  %168 = add nuw nsw i64 %162, 1
  %169 = getelementptr inbounds float, float* %84, i64 %168
  %170 = load float, float* %169, align 4
  %171 = getelementptr inbounds float, float* %92, i64 %168
  %172 = load float, float* %171, align 4
  %173 = fsub float %172, %170
  store float %173, float* %171, align 4
  %174 = add nuw nsw i64 %162, 2
  %175 = getelementptr inbounds float, float* %84, i64 %174
  %176 = load float, float* %175, align 4
  %177 = getelementptr inbounds float, float* %92, i64 %174
  %178 = load float, float* %177, align 4
  %179 = fsub float %178, %176
  store float %179, float* %177, align 4
  %180 = add nuw nsw i64 %162, 3
  %181 = getelementptr inbounds float, float* %84, i64 %180
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds float, float* %92, i64 %180
  %184 = load float, float* %183, align 4
  %185 = fsub float %184, %182
  store float %185, float* %183, align 4
  %186 = add nuw nsw i64 %162, 4
  %187 = icmp eq i64 %186, %58
  br i1 %187, label %158, label %161, !llvm.loop !107

188:                                              ; preds = %158, %54
  %189 = bitcast %"class.jxl::Image3"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %189) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %189, i8 -86, i64 96, i1 false)
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = zext i32 %191 to i64
  %193 = add nuw nsw i64 %192, 64
  %194 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %197, i64 %193, i64 %196, i64 4) #8
  %198 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %198, i64 %193, i64 %196, i64 4) #8
  %199 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %199, i64 %193, i64 %196, i64 4) #8
  %200 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 1
  %201 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 4
  %202 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 0
  %203 = load i32, i32* %200, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %272, label %205

205:                                              ; preds = %188
  %206 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %209

207:                                              ; preds = %209
  %208 = icmp eq i32 %225, 0
  br i1 %208, label %272, label %228

209:                                              ; preds = %209, %205
  %210 = phi i64 [ 0, %205 ], [ %224, %209 ]
  %211 = load i64, i64* %201, align 8
  %212 = mul i64 %211, %210
  %213 = load i8*, i8** %206, align 8
  %214 = ptrtoint i8* %213 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #8
  %217 = getelementptr inbounds i8, i8* %213, i64 %212
  %218 = ptrtoint i8* %217 to i64
  %219 = and i64 %218, 63
  %220 = icmp eq i64 %219, 0
  call void @llvm.assume(i1 %220) #8
  %221 = load i32, i32* %202, align 8
  %222 = zext i32 %221 to i64
  %223 = shl nuw nsw i64 %222, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %217, i8 0, i64 %223, i1 false) #8
  %224 = add nuw nsw i64 %210, 1
  %225 = load i32, i32* %200, align 4
  %226 = zext i32 %225 to i64
  %227 = icmp ult i64 %224, %226
  br i1 %227, label %209, label %207

228:                                              ; preds = %207
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %245, %230 ]
  %232 = load i64, i64* %201, align 8
  %233 = mul i64 %232, %231
  %234 = load i8*, i8** %229, align 8
  %235 = ptrtoint i8* %234 to i64
  %236 = and i64 %235, 63
  %237 = icmp eq i64 %236, 0
  call void @llvm.assume(i1 %237) #8
  %238 = getelementptr inbounds i8, i8* %234, i64 %233
  %239 = ptrtoint i8* %238 to i64
  %240 = and i64 %239, 63
  %241 = icmp eq i64 %240, 0
  call void @llvm.assume(i1 %241) #8
  %242 = load i32, i32* %202, align 8
  %243 = zext i32 %242 to i64
  %244 = shl nuw nsw i64 %243, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %238, i8 0, i64 %244, i1 false) #8
  %245 = add nuw nsw i64 %231, 1
  %246 = load i32, i32* %200, align 4
  %247 = zext i32 %246 to i64
  %248 = icmp ult i64 %245, %247
  br i1 %248, label %230, label %249

249:                                              ; preds = %230
  %250 = icmp eq i32 %246, 0
  br i1 %250, label %272, label %251

251:                                              ; preds = %249
  %252 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %253

253:                                              ; preds = %253, %251
  %254 = phi i64 [ 0, %251 ], [ %268, %253 ]
  %255 = load i64, i64* %201, align 8
  %256 = mul i64 %255, %254
  %257 = load i8*, i8** %252, align 8
  %258 = ptrtoint i8* %257 to i64
  %259 = and i64 %258, 63
  %260 = icmp eq i64 %259, 0
  call void @llvm.assume(i1 %260) #8
  %261 = getelementptr inbounds i8, i8* %257, i64 %256
  %262 = ptrtoint i8* %261 to i64
  %263 = and i64 %262, 63
  %264 = icmp eq i64 %263, 0
  call void @llvm.assume(i1 %264) #8
  %265 = load i32, i32* %202, align 8
  %266 = zext i32 %265 to i64
  %267 = shl nuw nsw i64 %266, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %261, i8 0, i64 %267, i1 false) #8
  %268 = add nuw nsw i64 %254, 1
  %269 = load i32, i32* %200, align 4
  %270 = zext i32 %269 to i64
  %271 = icmp ult i64 %268, %270
  br i1 %271, label %253, label %272

272:                                              ; preds = %253, %188, %207, %249
  %273 = load i32, i32* %190, align 8
  %274 = zext i32 %273 to i64
  %275 = load i32, i32* %194, align 4
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 2
  %278 = load i32, i32* %277, align 8
  %279 = icmp ult i32 %278, %273
  br i1 %279, label %280, label %283

280:                                              ; preds = %298, %290, %272
  %281 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)) #8
  %282 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

283:                                              ; preds = %272
  %284 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 3
  %285 = load i32, i32* %284, align 4
  %286 = icmp ult i32 %285, %275
  br i1 %286, label %287, label %290

287:                                              ; preds = %304, %294, %283
  %288 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #8
  %289 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

290:                                              ; preds = %283
  store i32 %273, i32* %202, align 8
  store i32 %275, i32* %200, align 4
  %291 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 2
  %292 = load i32, i32* %291, align 8
  %293 = icmp ult i32 %292, %273
  br i1 %293, label %280, label %294

294:                                              ; preds = %290
  %295 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = icmp ult i32 %296, %275
  br i1 %297, label %287, label %298

298:                                              ; preds = %294
  %299 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %273, i32* %299, align 8
  %300 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %275, i32* %300, align 4
  %301 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 2
  %302 = load i32, i32* %301, align 8
  %303 = icmp ult i32 %302, %273
  br i1 %303, label %280, label %304

304:                                              ; preds = %298
  %305 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 3
  %306 = load i32, i32* %305, align 4
  %307 = icmp ult i32 %306, %275
  br i1 %307, label %287, label %308

308:                                              ; preds = %304
  %309 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %273, i32* %309, align 8
  %310 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %275, i32* %310, align 4
  %311 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %311) #8
  %312 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %313 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0
  %314 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %314, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %313, i64 %274, i64 %276, i64 4) #8
  %315 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %315) #8
  %316 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 0, i32 0
  %317 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 0
  %318 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 1
  %319 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %319, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %22, double 0x4026D49CB566E5F4) #8
  %320 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0
  %321 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %320, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* nonnull %321) #8
  %322 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %323 = load i32, i32* %322, align 8
  %324 = zext i32 %323 to i64
  %325 = load i32, i32* %194, align 4
  %326 = zext i32 %325 to i64
  %327 = icmp eq i32 %325, 0
  br i1 %327, label %563, label %439

328:                                              ; preds = %1556
  %329 = bitcast %"class.jxl::ThreadPool"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %329) #8
  %330 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 0
  %331 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %330, align 8
  %332 = bitcast i8** %331 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %18, %"class.jxl::ThreadPool"** %332, align 8
  %333 = icmp eq i32 %1567, 0
  br i1 %333, label %350, label %334

334:                                              ; preds = %328
  %335 = bitcast %"class.jxl::ThreadPool::RunCallState.277"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %335) #8
  %336 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.277", %"class.jxl::ThreadPool::RunCallState.277"* %15, i64 0, i32 0
  %337 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.277", %"class.jxl::ThreadPool::RunCallState.277"* %15, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %336, align 8
  store %class.anon.273* %24, %class.anon.273** %337, align 8
  %338 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %329, i8* nonnull %335, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %1567) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %335) #8
  br label %350

339:                                              ; preds = %1556
  %340 = icmp eq i32 %1567, 0
  br i1 %340, label %352, label %341

341:                                              ; preds = %339
  %342 = bitcast %"class.jxl::ThreadPool::RunCallState.277"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %342) #8
  %343 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.277", %"class.jxl::ThreadPool::RunCallState.277"* %16, i64 0, i32 0
  %344 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.277", %"class.jxl::ThreadPool::RunCallState.277"* %16, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %343, align 8
  store %class.anon.273* %24, %class.anon.273** %344, align 8
  %345 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %346 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %345, align 8
  %347 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %348 = load i8*, i8** %347, align 8
  %349 = call i32 %346(i8* %348, i8* nonnull %342, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %1567) #8
  br label %350

350:                                              ; preds = %328, %334, %341
  %351 = phi i8* [ %342, %341 ], [ %329, %334 ], [ %329, %328 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %351) #8
  br label %352

352:                                              ; preds = %350, %339
  %353 = load double, double* %17, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double %353) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1572) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1568) #8
  %354 = bitcast %"class.jxl::Image3"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %354) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %354, i8 -86, i64 96, i1 false)
  %355 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 6
  %356 = load i64, i64* %355, align 8
  %357 = lshr i64 %356, 2
  %358 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 7
  %359 = load i64, i64* %358, align 8
  %360 = lshr i64 %359, 2
  %361 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %361, i64 %357, i64 %360, i64 4) #8
  %362 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %362, i64 %357, i64 %360, i64 4) #8
  %363 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %363, i64 %357, i64 %360, i64 4) #8
  %364 = bitcast %"class.jxl::Image3"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %364) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %364, i8 -86, i64 96, i1 false)
  %365 = load i64, i64* %355, align 8
  %366 = lshr i64 %365, 2
  %367 = load i64, i64* %358, align 8
  %368 = lshr i64 %367, 2
  %369 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %369, i64 %366, i64 %368, i64 4) #8
  %370 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %370, i64 %366, i64 %368, i64 4) #8
  %371 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %371, i64 %366, i64 %368, i64 4) #8
  %372 = load i64, i64* %358, align 8
  %373 = lshr i64 %372, 2
  %374 = trunc i64 %373 to i32
  %375 = bitcast %class.anon.274* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %375) #8
  %376 = getelementptr inbounds %class.anon.274, %class.anon.274* %27, i64 0, i32 0
  store %"class.jxl::Image3"* %25, %"class.jxl::Image3"** %376, align 8
  %377 = getelementptr inbounds %class.anon.274, %class.anon.274* %27, i64 0, i32 1
  store %"class.jxl::Image3"* %26, %"class.jxl::Image3"** %377, align 8
  %378 = getelementptr inbounds %class.anon.274, %class.anon.274* %27, i64 0, i32 2
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %378, align 8
  %379 = getelementptr inbounds %class.anon.274, %class.anon.274* %27, i64 0, i32 3
  store %"struct.jxl::FrameDimensions"* %42, %"struct.jxl::FrameDimensions"** %379, align 8
  %380 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %380) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %13, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double* nonnull %13) #8
  br i1 %1573, label %381, label %392

381:                                              ; preds = %352
  %382 = bitcast %"class.jxl::ThreadPool"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %382) #8
  %383 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 0
  %384 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %383, align 8
  %385 = bitcast i8** %384 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %14, %"class.jxl::ThreadPool"** %385, align 8
  %386 = icmp eq i32 %374, 0
  br i1 %386, label %403, label %387

387:                                              ; preds = %381
  %388 = bitcast %"class.jxl::ThreadPool::RunCallState.278"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %388) #8
  %389 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.278", %"class.jxl::ThreadPool::RunCallState.278"* %11, i64 0, i32 0
  %390 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.278", %"class.jxl::ThreadPool::RunCallState.278"* %11, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %389, align 8
  store %class.anon.274* %27, %class.anon.274** %390, align 8
  %391 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %382, i8* nonnull %388, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_4E12CallDataFuncEPvjm", i32 0, i32 %374) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %388) #8
  br label %403

392:                                              ; preds = %352
  %393 = icmp eq i32 %374, 0
  br i1 %393, label %405, label %394

394:                                              ; preds = %392
  %395 = bitcast %"class.jxl::ThreadPool::RunCallState.278"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %395) #8
  %396 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.278", %"class.jxl::ThreadPool::RunCallState.278"* %12, i64 0, i32 0
  %397 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.278", %"class.jxl::ThreadPool::RunCallState.278"* %12, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %396, align 8
  store %class.anon.274* %27, %class.anon.274** %397, align 8
  %398 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %399 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %398, align 8
  %400 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %401 = load i8*, i8** %400, align 8
  %402 = call i32 %399(i8* %401, i8* nonnull %395, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_4E12CallDataFuncEPvjm", i32 0, i32 %374) #8
  br label %403

403:                                              ; preds = %381, %387, %394
  %404 = phi i8* [ %395, %394 ], [ %382, %387 ], [ %382, %381 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %404) #8
  br label %405

405:                                              ; preds = %403, %392
  %406 = load double, double* %13, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double %406) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %380) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %375) #8
  %407 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %407) #8
  %408 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 0, i32 0
  %409 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 0
  %410 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 1
  %411 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %411, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %28, double 0x4000ADFC98523461) #8
  %412 = bitcast %"class.jxl::Image3"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %412) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %412, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %29, %"class.jxl::Image3"* nonnull dereferenceable(96) %26, i64 16, i64 16) #8
  %413 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %413) #8
  %414 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 4
  %415 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %416 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 0
  %417 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %417, i8 -86, i64 32, i1 false)
  %418 = load i32, i32* %416, align 8
  %419 = zext i32 %418 to i64
  %420 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 1
  %421 = load i32, i32* %420, align 4
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %423, i64 %419, i64 %422, i64 4) #8
  %424 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %424) #8
  %425 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %426 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %426, i8 -86, i64 32, i1 false)
  %427 = load i32, i32* %416, align 8
  %428 = zext i32 %427 to i64
  %429 = load i32, i32* %420, align 4
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %431, i64 %428, i64 %430, i64 4) #8
  %432 = bitcast %"class.jxl::Image3"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %432) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %432, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %32, %"class.jxl::Image3"* nonnull dereferenceable(96) %25, i64 16, i64 16) #8
  %433 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 1
  %434 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 4
  %435 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %436 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %436, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %437 = load i32, i32* %433, align 4
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %575, label %572

439:                                              ; preds = %308
  %440 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %441 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 4
  %442 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %443 = icmp eq i32 %323, 0
  %444 = shl nuw nsw i64 %324, 2
  %445 = icmp ult i32 %323, 32
  %446 = and i64 %324, 4294967264
  %447 = icmp eq i64 %446, %324
  %448 = and i64 %324, 3
  %449 = icmp eq i64 %448, 0
  br label %450

450:                                              ; preds = %533, %439
  %451 = phi i64 [ 0, %439 ], [ %534, %533 ]
  %452 = load i8*, i8** %440, align 8
  %453 = load i64, i64* %441, align 8
  %454 = mul i64 %453, %451
  %455 = getelementptr inbounds i8, i8* %452, i64 %454
  %456 = ptrtoint i8* %455 to i64
  %457 = and i64 %456, 63
  %458 = icmp eq i64 %457, 0
  call void @llvm.assume(i1 %458) #8
  %459 = bitcast i8* %455 to float*
  %460 = load i8*, i8** %442, align 8
  %461 = load i64, i64* %201, align 8
  %462 = mul i64 %461, %451
  %463 = getelementptr inbounds i8, i8* %460, i64 %462
  %464 = ptrtoint i8* %463 to i64
  %465 = and i64 %464, 63
  %466 = icmp eq i64 %465, 0
  call void @llvm.assume(i1 %466) #8
  %467 = bitcast i8* %463 to float*
  br i1 %443, label %533, label %468

468:                                              ; preds = %450
  br i1 %445, label %469, label %487

469:                                              ; preds = %532, %487, %468
  %470 = phi i64 [ 0, %487 ], [ 0, %468 ], [ %446, %532 ]
  %471 = xor i64 %470, -1
  %472 = add nsw i64 %471, %324
  br i1 %449, label %484, label %473

473:                                              ; preds = %469, %473
  %474 = phi i64 [ %481, %473 ], [ %470, %469 ]
  %475 = phi i64 [ %482, %473 ], [ %448, %469 ]
  %476 = getelementptr inbounds float, float* %459, i64 %474
  %477 = load float, float* %476, align 4
  %478 = getelementptr inbounds float, float* %467, i64 %474
  %479 = load float, float* %478, align 4
  %480 = fsub float %479, %477
  store float %480, float* %478, align 4
  %481 = add nuw nsw i64 %474, 1
  %482 = add i64 %475, -1
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %473, !llvm.loop !108

484:                                              ; preds = %473, %469
  %485 = phi i64 [ %470, %469 ], [ %481, %473 ]
  %486 = icmp ult i64 %472, 3
  br i1 %486, label %533, label %536

487:                                              ; preds = %468
  %488 = getelementptr i8, i8* %460, i64 %444
  %489 = getelementptr i8, i8* %488, i64 %462
  %490 = getelementptr i8, i8* %452, i64 %444
  %491 = mul i64 %453, %451
  %492 = getelementptr i8, i8* %490, i64 %491
  %493 = icmp ult i8* %463, %492
  %494 = icmp ult i8* %455, %489
  %495 = and i1 %493, %494
  br i1 %495, label %469, label %496

496:                                              ; preds = %487, %496
  %497 = phi i64 [ %530, %496 ], [ 0, %487 ]
  %498 = getelementptr inbounds float, float* %459, i64 %497
  %499 = bitcast float* %498 to <8 x float>*
  %500 = load <8 x float>, <8 x float>* %499, align 64, !alias.scope !109
  %501 = getelementptr inbounds float, float* %498, i64 8
  %502 = bitcast float* %501 to <8 x float>*
  %503 = load <8 x float>, <8 x float>* %502, align 32, !alias.scope !109
  %504 = getelementptr inbounds float, float* %498, i64 16
  %505 = bitcast float* %504 to <8 x float>*
  %506 = load <8 x float>, <8 x float>* %505, align 64, !alias.scope !109
  %507 = getelementptr inbounds float, float* %498, i64 24
  %508 = bitcast float* %507 to <8 x float>*
  %509 = load <8 x float>, <8 x float>* %508, align 32, !alias.scope !109
  %510 = getelementptr inbounds float, float* %467, i64 %497
  %511 = bitcast float* %510 to <8 x float>*
  %512 = load <8 x float>, <8 x float>* %511, align 64, !alias.scope !112, !noalias !109
  %513 = getelementptr inbounds float, float* %510, i64 8
  %514 = bitcast float* %513 to <8 x float>*
  %515 = load <8 x float>, <8 x float>* %514, align 32, !alias.scope !112, !noalias !109
  %516 = getelementptr inbounds float, float* %510, i64 16
  %517 = bitcast float* %516 to <8 x float>*
  %518 = load <8 x float>, <8 x float>* %517, align 64, !alias.scope !112, !noalias !109
  %519 = getelementptr inbounds float, float* %510, i64 24
  %520 = bitcast float* %519 to <8 x float>*
  %521 = load <8 x float>, <8 x float>* %520, align 32, !alias.scope !112, !noalias !109
  %522 = fsub <8 x float> %512, %500
  %523 = fsub <8 x float> %515, %503
  %524 = fsub <8 x float> %518, %506
  %525 = fsub <8 x float> %521, %509
  %526 = bitcast float* %510 to <8 x float>*
  store <8 x float> %522, <8 x float>* %526, align 64, !alias.scope !112, !noalias !109
  %527 = bitcast float* %513 to <8 x float>*
  store <8 x float> %523, <8 x float>* %527, align 32, !alias.scope !112, !noalias !109
  %528 = bitcast float* %516 to <8 x float>*
  store <8 x float> %524, <8 x float>* %528, align 64, !alias.scope !112, !noalias !109
  %529 = bitcast float* %519 to <8 x float>*
  store <8 x float> %525, <8 x float>* %529, align 32, !alias.scope !112, !noalias !109
  %530 = add i64 %497, 32
  %531 = icmp eq i64 %530, %446
  br i1 %531, label %532, label %496, !llvm.loop !114

532:                                              ; preds = %496
  br i1 %447, label %533, label %469

533:                                              ; preds = %484, %536, %532, %450
  %534 = add nuw nsw i64 %451, 1
  %535 = icmp eq i64 %534, %326
  br i1 %535, label %563, label %450

536:                                              ; preds = %484, %536
  %537 = phi i64 [ %561, %536 ], [ %485, %484 ]
  %538 = getelementptr inbounds float, float* %459, i64 %537
  %539 = load float, float* %538, align 4
  %540 = getelementptr inbounds float, float* %467, i64 %537
  %541 = load float, float* %540, align 4
  %542 = fsub float %541, %539
  store float %542, float* %540, align 4
  %543 = add nuw nsw i64 %537, 1
  %544 = getelementptr inbounds float, float* %459, i64 %543
  %545 = load float, float* %544, align 4
  %546 = getelementptr inbounds float, float* %467, i64 %543
  %547 = load float, float* %546, align 4
  %548 = fsub float %547, %545
  store float %548, float* %546, align 4
  %549 = add nuw nsw i64 %537, 2
  %550 = getelementptr inbounds float, float* %459, i64 %549
  %551 = load float, float* %550, align 4
  %552 = getelementptr inbounds float, float* %467, i64 %549
  %553 = load float, float* %552, align 4
  %554 = fsub float %553, %551
  store float %554, float* %552, align 4
  %555 = add nuw nsw i64 %537, 3
  %556 = getelementptr inbounds float, float* %459, i64 %555
  %557 = load float, float* %556, align 4
  %558 = getelementptr inbounds float, float* %467, i64 %555
  %559 = load float, float* %558, align 4
  %560 = fsub float %559, %557
  store float %560, float* %558, align 4
  %561 = add nuw nsw i64 %537, 4
  %562 = icmp eq i64 %561, %324
  br i1 %562, label %533, label %536, !llvm.loop !115

563:                                              ; preds = %533, %308
  %564 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1
  %565 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %564, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %565) #8
  %566 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %564, i64 0, i32 0, i32 0
  %567 = load i32, i32* %566, align 8
  %568 = zext i32 %567 to i64
  %569 = load i32, i32* %59, align 4
  %570 = zext i32 %569 to i64
  %571 = icmp eq i32 %569, 0
  br i1 %571, label %1421, label %1296

572:                                              ; preds = %405
  %573 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %574 = load i32, i32* %435, align 8
  br label %579

575:                                              ; preds = %608, %405
  %576 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %576, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %577 = load i32, i32* %433, align 4
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %1232, label %1179

579:                                              ; preds = %572, %608
  %580 = phi i32 [ %437, %572 ], [ %609, %608 ]
  %581 = phi i32 [ %574, %572 ], [ %610, %608 ]
  %582 = phi i64 [ 0, %572 ], [ %611, %608 ]
  %583 = load i64, i64* %434, align 8
  %584 = mul i64 %583, %582
  %585 = load i8*, i8** %573, align 8
  %586 = ptrtoint i8* %585 to i64
  %587 = and i64 %586, 63
  %588 = icmp eq i64 %587, 0
  call void @llvm.assume(i1 %588) #8
  %589 = getelementptr inbounds i8, i8* %585, i64 %584
  %590 = ptrtoint i8* %589 to i64
  %591 = and i64 %590, 63
  %592 = icmp eq i64 %591, 0
  call void @llvm.assume(i1 %592) #8
  %593 = bitcast i8* %589 to float*
  %594 = add nuw nsw i64 %582, 16
  %595 = load i8*, i8** %415, align 8
  %596 = load i64, i64* %414, align 8
  %597 = mul i64 %596, %594
  %598 = getelementptr inbounds i8, i8* %595, i64 %597
  %599 = ptrtoint i8* %598 to i64
  %600 = and i64 %599, 63
  %601 = icmp eq i64 %600, 0
  call void @llvm.assume(i1 %601) #8
  %602 = icmp eq i32 %581, 0
  br i1 %602, label %608, label %603

603:                                              ; preds = %579
  %604 = getelementptr inbounds i8, i8* %598, i64 64
  %605 = bitcast i8* %604 to float*
  br label %614

606:                                              ; preds = %614
  %607 = load i32, i32* %433, align 4
  br label %608

608:                                              ; preds = %606, %579
  %609 = phi i32 [ %607, %606 ], [ %580, %579 ]
  %610 = phi i32 [ %626, %606 ], [ 0, %579 ]
  %611 = add nuw nsw i64 %582, 1
  %612 = zext i32 %609 to i64
  %613 = icmp ult i64 %611, %612
  br i1 %613, label %579, label %575

614:                                              ; preds = %603, %614
  %615 = phi i64 [ 0, %603 ], [ %625, %614 ]
  %616 = getelementptr inbounds float, float* %605, i64 %615
  %617 = bitcast float* %616 to <8 x float>*
  %618 = load <8 x float>, <8 x float>* %617, align 32, !alias.scope !116, !noalias !119
  %619 = getelementptr inbounds float, float* %593, i64 %615
  %620 = bitcast float* %619 to <8 x float>*
  %621 = load <8 x float>, <8 x float>* %620, align 32, !alias.scope !121, !noalias !124
  %622 = fmul <8 x float> %621, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %623 = fcmp ogt <8 x float> %618, %622
  %624 = select <8 x i1> %623, <8 x float> %618, <8 x float> %622
  store <8 x float> %624, <8 x float>* %620, align 32, !alias.scope !126
  %625 = add nuw nsw i64 %615, 8
  %626 = load i32, i32* %435, align 8
  %627 = zext i32 %626 to i64
  %628 = icmp ult i64 %625, %627
  br i1 %628, label %614, label %606

629:                                              ; preds = %1167
  %630 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %631 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %632 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %633 = load i32, i32* %1292, align 8
  br label %708

634:                                              ; preds = %1289
  %635 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %636 = load i32, i32* %1292, align 8
  br label %641

637:                                              ; preds = %670, %1289
  %638 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %638, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %639 = load i32, i32* %1290, align 4
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %1106, label %1053

641:                                              ; preds = %634, %670
  %642 = phi i32 [ %1294, %634 ], [ %671, %670 ]
  %643 = phi i32 [ %636, %634 ], [ %672, %670 ]
  %644 = phi i64 [ 0, %634 ], [ %673, %670 ]
  %645 = load i64, i64* %1291, align 8
  %646 = mul i64 %645, %644
  %647 = load i8*, i8** %635, align 8
  %648 = ptrtoint i8* %647 to i64
  %649 = and i64 %648, 63
  %650 = icmp eq i64 %649, 0
  call void @llvm.assume(i1 %650) #8
  %651 = getelementptr inbounds i8, i8* %647, i64 %646
  %652 = ptrtoint i8* %651 to i64
  %653 = and i64 %652, 63
  %654 = icmp eq i64 %653, 0
  call void @llvm.assume(i1 %654) #8
  %655 = bitcast i8* %651 to float*
  %656 = add nuw nsw i64 %644, 16
  %657 = load i8*, i8** %415, align 8
  %658 = load i64, i64* %414, align 8
  %659 = mul i64 %658, %656
  %660 = getelementptr inbounds i8, i8* %657, i64 %659
  %661 = ptrtoint i8* %660 to i64
  %662 = and i64 %661, 63
  %663 = icmp eq i64 %662, 0
  call void @llvm.assume(i1 %663) #8
  %664 = icmp eq i32 %643, 0
  br i1 %664, label %670, label %665

665:                                              ; preds = %641
  %666 = getelementptr inbounds i8, i8* %660, i64 64
  %667 = bitcast i8* %666 to float*
  br label %676

668:                                              ; preds = %676
  %669 = load i32, i32* %1290, align 4
  br label %670

670:                                              ; preds = %668, %641
  %671 = phi i32 [ %669, %668 ], [ %642, %641 ]
  %672 = phi i32 [ %688, %668 ], [ 0, %641 ]
  %673 = add nuw nsw i64 %644, 1
  %674 = zext i32 %671 to i64
  %675 = icmp ult i64 %673, %674
  br i1 %675, label %641, label %637

676:                                              ; preds = %665, %676
  %677 = phi i64 [ 0, %665 ], [ %687, %676 ]
  %678 = getelementptr inbounds float, float* %667, i64 %677
  %679 = bitcast float* %678 to <8 x float>*
  %680 = load <8 x float>, <8 x float>* %679, align 32, !alias.scope !129, !noalias !132
  %681 = getelementptr inbounds float, float* %655, i64 %677
  %682 = bitcast float* %681 to <8 x float>*
  %683 = load <8 x float>, <8 x float>* %682, align 32, !alias.scope !134, !noalias !137
  %684 = fmul <8 x float> %683, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %685 = fcmp ogt <8 x float> %680, %684
  %686 = select <8 x i1> %685, <8 x float> %680, <8 x float> %684
  store <8 x float> %686, <8 x float>* %682, align 32, !alias.scope !139
  %687 = add nuw nsw i64 %677, 8
  %688 = load i32, i32* %1292, align 8
  %689 = zext i32 %688 to i64
  %690 = icmp ult i64 %687, %689
  br i1 %690, label %676, label %668

691:                                              ; preds = %752, %1167
  %692 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %692) #8
  %693 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 4
  %694 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %695 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %695, i8 -86, i64 32, i1 false)
  %696 = load i32, i32* %435, align 8
  %697 = zext i32 %696 to i64
  %698 = load i32, i32* %433, align 4
  %699 = zext i32 %698 to i64
  %700 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %700, i64 %697, i64 %699, i64 4) #8
  %701 = load i32, i32* %433, align 4
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %778, label %703

703:                                              ; preds = %691
  %704 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %705 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %706 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %707 = load i32, i32* %435, align 8
  br label %983

708:                                              ; preds = %629, %752
  %709 = phi i32 [ %1177, %629 ], [ %753, %752 ]
  %710 = phi i32 [ %633, %629 ], [ %754, %752 ]
  %711 = phi i64 [ 0, %629 ], [ %755, %752 ]
  %712 = load i64, i64* %1291, align 8
  %713 = mul i64 %712, %711
  %714 = load i8*, i8** %630, align 8
  %715 = ptrtoint i8* %714 to i64
  %716 = and i64 %715, 63
  %717 = icmp eq i64 %716, 0
  call void @llvm.assume(i1 %717) #8
  %718 = getelementptr inbounds i8, i8* %714, i64 %713
  %719 = ptrtoint i8* %718 to i64
  %720 = and i64 %719, 63
  %721 = icmp eq i64 %720, 0
  call void @llvm.assume(i1 %721) #8
  %722 = bitcast i8* %718 to float*
  %723 = load i8*, i8** %631, align 8
  %724 = ptrtoint i8* %723 to i64
  %725 = and i64 %724, 63
  %726 = icmp eq i64 %725, 0
  call void @llvm.assume(i1 %726) #8
  %727 = getelementptr inbounds i8, i8* %723, i64 %713
  %728 = ptrtoint i8* %727 to i64
  %729 = and i64 %728, 63
  %730 = icmp eq i64 %729, 0
  call void @llvm.assume(i1 %730) #8
  %731 = bitcast i8* %727 to float*
  %732 = load i8*, i8** %632, align 8
  %733 = ptrtoint i8* %732 to i64
  %734 = and i64 %733, 63
  %735 = icmp eq i64 %734, 0
  call void @llvm.assume(i1 %735) #8
  %736 = getelementptr inbounds i8, i8* %732, i64 %713
  %737 = ptrtoint i8* %736 to i64
  %738 = and i64 %737, 63
  %739 = icmp eq i64 %738, 0
  call void @llvm.assume(i1 %739) #8
  %740 = bitcast i8* %736 to float*
  %741 = load i8*, i8** %1172, align 8
  %742 = load i64, i64* %1171, align 8
  %743 = mul i64 %742, %711
  %744 = getelementptr inbounds i8, i8* %741, i64 %743
  %745 = ptrtoint i8* %744 to i64
  %746 = and i64 %745, 63
  %747 = icmp eq i64 %746, 0
  call void @llvm.assume(i1 %747) #8
  %748 = bitcast i8* %744 to float*
  %749 = icmp eq i32 %710, 0
  br i1 %749, label %752, label %758

750:                                              ; preds = %758
  %751 = load i32, i32* %1290, align 4
  br label %752

752:                                              ; preds = %750, %708
  %753 = phi i32 [ %751, %750 ], [ %709, %708 ]
  %754 = phi i32 [ %775, %750 ], [ 0, %708 ]
  %755 = add nuw nsw i64 %711, 1
  %756 = zext i32 %753 to i64
  %757 = icmp ult i64 %755, %756
  br i1 %757, label %708, label %691

758:                                              ; preds = %708, %758
  %759 = phi i64 [ %774, %758 ], [ 0, %708 ]
  %760 = getelementptr inbounds float, float* %722, i64 %759
  %761 = bitcast float* %760 to <8 x float>*
  %762 = load <8 x float>, <8 x float>* %761, align 32, !alias.scope !142, !noalias !145
  %763 = fmul <8 x float> %762, <float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000>
  %764 = getelementptr inbounds float, float* %731, i64 %759
  %765 = bitcast float* %764 to <8 x float>*
  %766 = load <8 x float>, <8 x float>* %765, align 32, !alias.scope !147, !noalias !150
  %767 = call <8 x float> @llvm.fma.v8f32(<8 x float> %766, <8 x float> <float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000>, <8 x float> %763) #8
  %768 = getelementptr inbounds float, float* %740, i64 %759
  %769 = bitcast float* %768 to <8 x float>*
  %770 = load <8 x float>, <8 x float>* %769, align 32, !alias.scope !152, !noalias !155
  %771 = call <8 x float> @llvm.fma.v8f32(<8 x float> %770, <8 x float> <float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000>, <8 x float> %767) #8
  %772 = getelementptr inbounds float, float* %748, i64 %759
  %773 = bitcast float* %772 to <8 x float>*
  store <8 x float> %771, <8 x float>* %773, align 32, !alias.scope !157
  %774 = add nuw nsw i64 %759, 8
  %775 = load i32, i32* %1292, align 8
  %776 = zext i32 %775 to i64
  %777 = icmp ult i64 %774, %776
  br i1 %777, label %758, label %750

778:                                              ; preds = %1027, %691
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %33)
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %34)
  %779 = load float, float* %43, align 8
  %780 = call float @_ZN3jxl14InitialQuantDCEf(float %779) #8
  %781 = fmul float %780, 0x3FEC36E6E0000000
  %782 = bitcast float* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %782) #8
  %783 = load float, float* %43, align 8
  %784 = fdiv float 0x400421F180000000, %783
  store float %784, float* %35, align 4
  %785 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %785) #8
  %786 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %787 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %787, i8 -86, i64 32, i1 false)
  %788 = load i64, i64* %1558, align 8
  %789 = load i64, i64* %1562, align 8
  %790 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %790, i64 %788, i64 %789, i64 4) #8
  %791 = bitcast %class.anon.275* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %791) #8
  %792 = getelementptr inbounds %class.anon.275, %class.anon.275* %37, i64 0, i32 0
  store %"class.jxl::Plane.97"* %34, %"class.jxl::Plane.97"** %792, align 8
  %793 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %793) #8
  %794 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to <8 x i32>*
  store <8 x i32> <i32 2, i32 1069547520, i32 3, i32 1068708659, i32 12, i32 1067030938, i32 13, i32 1067030938>, <8 x i32>* %794, align 16
  %795 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 4, i32 0
  %796 = bitcast i32* %795 to <8 x i32>*
  store <8 x i32> <i32 14, i32 1066611507, i32 15, i32 1066611507, i32 16, i32 1066611507, i32 17, i32 1066611507>, <8 x i32>* %796, align 16
  %797 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 8, i32 0
  %798 = bitcast i32* %797 to <8 x i32>*
  store <8 x i32> <i32 0, i32 1065353216, i32 6, i32 1061997773, i32 7, i32 1061997773, i32 4, i32 1045220557>, <8 x i32>* %798, align 16
  %799 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 12, i32 0
  %800 = bitcast i32* %799 to <8 x i32>*
  store <8 x i32> <i32 11, i32 1045220557, i32 10, i32 1045220557, i32 5, i32 1045220557, i32 20, i32 1036831949>, <8 x i32>* %800, align 16
  %801 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 16, i32 0
  %802 = bitcast i32* %801 to <4 x i32>*
  store <4 x i32> <i32 19, i32 1036831949, i32 18, i32 1025758986>, <4 x i32>* %802, align 16
  %803 = bitcast float* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %803) #8
  store float 0xFFFFFFFFE0000000, float* %39, align 4
  %804 = load float, float* %43, align 8
  %805 = call float @sqrtf(float %804) #26
  %806 = call float @llvm.fabs.f32(float %805)
  %807 = fcmp oeq float %804, 0xFFF0000000000000
  %808 = fmul float %806, 5.000000e-01
  %809 = fadd float %808, 0x3E45798EE0000000
  %810 = select i1 %807, float 0x7FF0000000000000, float %809
  store float %810, float* %39, align 4
  %811 = load i64, i64* %23, align 8
  %812 = mul i64 %811, %1565
  %813 = trunc i64 %812 to i32
  %814 = bitcast %class.anon.276* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %814) #8
  %815 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 0
  store i64* %23, i64** %815, align 8
  %816 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 1
  store %"class.jxl::Plane.97"* %36, %"class.jxl::Plane.97"** %816, align 8
  %817 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %817, align 8
  %818 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 3
  store float* %35, float** %818, align 8
  %819 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 4
  store [18 x %"struct.std::__1::pair.260"]* %38, [18 x %"struct.std::__1::pair.260"]** %819, align 8
  %820 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 5
  store %class.anon.275* %37, %class.anon.275** %820, align 8
  %821 = getelementptr inbounds %class.anon.276, %class.anon.276* %40, i64 0, i32 6
  store float* %39, float** %821, align 8
  %822 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %822) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %9) #8
  br i1 %1573, label %823, label %834

823:                                              ; preds = %778
  %824 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %824) #8
  %825 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %826 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %825, align 8
  %827 = bitcast i8** %826 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %827, align 8
  %828 = icmp eq i32 %813, 0
  br i1 %828, label %845, label %829

829:                                              ; preds = %823
  %830 = bitcast %"class.jxl::ThreadPool::RunCallState.283"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %830) #8
  %831 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.283", %"class.jxl::ThreadPool::RunCallState.283"* %7, i64 0, i32 0
  %832 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.283", %"class.jxl::ThreadPool::RunCallState.283"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %831, align 8
  store %class.anon.276* %40, %class.anon.276** %832, align 8
  %833 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %824, i8* nonnull %830, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_5E12CallDataFuncEPvjm", i32 0, i32 %813) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %830) #8
  br label %845

834:                                              ; preds = %778
  %835 = icmp eq i32 %813, 0
  br i1 %835, label %847, label %836

836:                                              ; preds = %834
  %837 = bitcast %"class.jxl::ThreadPool::RunCallState.283"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %837) #8
  %838 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.283", %"class.jxl::ThreadPool::RunCallState.283"* %8, i64 0, i32 0
  %839 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.283", %"class.jxl::ThreadPool::RunCallState.283"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %838, align 8
  store %class.anon.276* %40, %class.anon.276** %839, align 8
  %840 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %841 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %840, align 8
  %842 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %843 = load i8*, i8** %842, align 8
  %844 = call i32 %841(i8* %843, i8* nonnull %837, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_5E12CallDataFuncEPvjm", i32 0, i32 %813) #8
  br label %845

845:                                              ; preds = %823, %829, %836
  %846 = phi i8* [ %837, %836 ], [ %824, %829 ], [ %824, %823 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %846) #8
  br label %847

847:                                              ; preds = %845, %834
  %848 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %848) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %822) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %814) #8
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36)
  %849 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 7
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIhEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), %"class.jxl::Plane"* dereferenceable(32) %849)
  %850 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 3
  %851 = load i64, i64* %355, align 8
  %852 = load i64, i64* %358, align 8
  call void @_ZN3jxl14DumpAcStrategyERKNS_15AcStrategyImageEmmPKcPNS_6AuxOutE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %850, i64 %851, i64 %852, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), %"struct.jxl::AuxOut"* %5) #8
  %853 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 5
  %854 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 6
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %853, float %781, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36, %"class.jxl::Plane.53"* %854) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %803) #8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %793) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %791) #8
  %855 = load i8*, i8** %786, align 8
  store i8* null, i8** %786, align 8
  %856 = icmp eq i8* %855, null
  br i1 %856, label %858, label %857

857:                                              ; preds = %847
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %855) #8
  br label %858

858:                                              ; preds = %847, %857
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %785) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %782) #8
  %859 = load i8*, i8** %694, align 8
  store i8* null, i8** %694, align 8
  %860 = icmp eq i8* %859, null
  br i1 %860, label %862, label %861

861:                                              ; preds = %858
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %859) #8
  br label %862

862:                                              ; preds = %858, %861
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %692) #8
  %863 = load i8*, i8** %1172, align 8
  store i8* null, i8** %1172, align 8
  %864 = icmp eq i8* %863, null
  br i1 %864, label %866, label %865

865:                                              ; preds = %862
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %863) #8
  br label %866

866:                                              ; preds = %862, %865
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1170) #8
  %867 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %868 = load i8*, i8** %867, align 8
  store i8* null, i8** %867, align 8
  %869 = icmp eq i8* %868, null
  br i1 %869, label %871, label %870

870:                                              ; preds = %866
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %868) #8
  br label %871

871:                                              ; preds = %870, %866
  %872 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %873 = load i8*, i8** %872, align 8
  store i8* null, i8** %872, align 8
  %874 = icmp eq i8* %873, null
  br i1 %874, label %876, label %875

875:                                              ; preds = %871
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %873) #8
  br label %876

876:                                              ; preds = %875, %871
  %877 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %878 = load i8*, i8** %877, align 8
  store i8* null, i8** %877, align 8
  %879 = icmp eq i8* %878, null
  br i1 %879, label %881, label %880

880:                                              ; preds = %876
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %878) #8
  br label %881

881:                                              ; preds = %876, %880
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %432) #8
  %882 = load i8*, i8** %425, align 8
  store i8* null, i8** %425, align 8
  %883 = icmp eq i8* %882, null
  br i1 %883, label %885, label %884

884:                                              ; preds = %881
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %882) #8
  br label %885

885:                                              ; preds = %881, %884
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %424) #8
  %886 = load i8*, i8** %415, align 8
  store i8* null, i8** %415, align 8
  %887 = icmp eq i8* %886, null
  br i1 %887, label %889, label %888

888:                                              ; preds = %885
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %886) #8
  br label %889

889:                                              ; preds = %885, %888
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %413) #8
  %890 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %891 = load i8*, i8** %890, align 8
  store i8* null, i8** %890, align 8
  %892 = icmp eq i8* %891, null
  br i1 %892, label %894, label %893

893:                                              ; preds = %889
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %891) #8
  br label %894

894:                                              ; preds = %893, %889
  %895 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %896 = load i8*, i8** %895, align 8
  store i8* null, i8** %895, align 8
  %897 = icmp eq i8* %896, null
  br i1 %897, label %899, label %898

898:                                              ; preds = %894
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %896) #8
  br label %899

899:                                              ; preds = %898, %894
  %900 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %901 = load i8*, i8** %900, align 8
  store i8* null, i8** %900, align 8
  %902 = icmp eq i8* %901, null
  br i1 %902, label %904, label %903

903:                                              ; preds = %899
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %901) #8
  br label %904

904:                                              ; preds = %899, %903
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %412) #8
  %905 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %408, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %408, align 8
  %906 = icmp eq %"struct.jxl::RecursiveGaussian"* %905, null
  br i1 %906, label %911, label %907

907:                                              ; preds = %904
  %908 = bitcast %"struct.jxl::RecursiveGaussian"* %905 to i8*
  %909 = load void (i8*, i8*)*, void (i8*, i8*)** %409, align 8
  %910 = load i8*, i8** %410, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %908, void (i8*, i8*)* %909, i8* %910, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %911

911:                                              ; preds = %904, %907
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %407) #8
  %912 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %913 = load i8*, i8** %912, align 8
  store i8* null, i8** %912, align 8
  %914 = icmp eq i8* %913, null
  br i1 %914, label %916, label %915

915:                                              ; preds = %911
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %913) #8
  br label %916

916:                                              ; preds = %915, %911
  %917 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %918 = load i8*, i8** %917, align 8
  store i8* null, i8** %917, align 8
  %919 = icmp eq i8* %918, null
  br i1 %919, label %921, label %920

920:                                              ; preds = %916
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %918) #8
  br label %921

921:                                              ; preds = %920, %916
  %922 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %923 = load i8*, i8** %922, align 8
  store i8* null, i8** %922, align 8
  %924 = icmp eq i8* %923, null
  br i1 %924, label %926, label %925

925:                                              ; preds = %921
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %923) #8
  br label %926

926:                                              ; preds = %921, %925
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %364) #8
  %927 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %928 = load i8*, i8** %927, align 8
  store i8* null, i8** %927, align 8
  %929 = icmp eq i8* %928, null
  br i1 %929, label %931, label %930

930:                                              ; preds = %926
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %928) #8
  br label %931

931:                                              ; preds = %930, %926
  %932 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %933 = load i8*, i8** %932, align 8
  store i8* null, i8** %932, align 8
  %934 = icmp eq i8* %933, null
  br i1 %934, label %936, label %935

935:                                              ; preds = %931
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %933) #8
  br label %936

936:                                              ; preds = %935, %931
  %937 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %938 = load i8*, i8** %937, align 8
  store i8* null, i8** %937, align 8
  %939 = icmp eq i8* %938, null
  br i1 %939, label %941, label %940

940:                                              ; preds = %936
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %938) #8
  br label %941

941:                                              ; preds = %936, %940
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %354) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1557) #8
  %942 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %316, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %316, align 8
  %943 = icmp eq %"struct.jxl::RecursiveGaussian"* %942, null
  br i1 %943, label %948, label %944

944:                                              ; preds = %941
  %945 = bitcast %"struct.jxl::RecursiveGaussian"* %942 to i8*
  %946 = load void (i8*, i8*)*, void (i8*, i8*)** %317, align 8
  %947 = load i8*, i8** %318, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %945, void (i8*, i8*)* %946, i8* %947, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %948

948:                                              ; preds = %941, %944
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %315) #8
  %949 = load i8*, i8** %312, align 8
  store i8* null, i8** %312, align 8
  %950 = icmp eq i8* %949, null
  br i1 %950, label %952, label %951

951:                                              ; preds = %948
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %949) #8
  br label %952

952:                                              ; preds = %948, %951
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %311) #8
  %953 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %954 = load i8*, i8** %953, align 8
  store i8* null, i8** %953, align 8
  %955 = icmp eq i8* %954, null
  br i1 %955, label %957, label %956

956:                                              ; preds = %952
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %954) #8
  br label %957

957:                                              ; preds = %956, %952
  %958 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %959 = load i8*, i8** %958, align 8
  store i8* null, i8** %958, align 8
  %960 = icmp eq i8* %959, null
  br i1 %960, label %962, label %961

961:                                              ; preds = %957
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %959) #8
  br label %962

962:                                              ; preds = %961, %957
  %963 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %964 = load i8*, i8** %963, align 8
  store i8* null, i8** %963, align 8
  %965 = icmp eq i8* %964, null
  br i1 %965, label %967, label %966

966:                                              ; preds = %962
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %964) #8
  br label %967

967:                                              ; preds = %962, %966
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %189) #8
  %968 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %969 = load i8*, i8** %968, align 8
  store i8* null, i8** %968, align 8
  %970 = icmp eq i8* %969, null
  br i1 %970, label %972, label %971

971:                                              ; preds = %967
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %969) #8
  br label %972

972:                                              ; preds = %971, %967
  %973 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %974 = load i8*, i8** %973, align 8
  store i8* null, i8** %973, align 8
  %975 = icmp eq i8* %974, null
  br i1 %975, label %977, label %976

976:                                              ; preds = %972
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %974) #8
  br label %977

977:                                              ; preds = %976, %972
  %978 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %979 = load i8*, i8** %978, align 8
  store i8* null, i8** %978, align 8
  %980 = icmp eq i8* %979, null
  br i1 %980, label %982, label %981

981:                                              ; preds = %977
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %979) #8
  br label %982

982:                                              ; preds = %977, %981
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #8
  ret i32 0

983:                                              ; preds = %703, %1027
  %984 = phi i32 [ %701, %703 ], [ %1028, %1027 ]
  %985 = phi i32 [ %707, %703 ], [ %1029, %1027 ]
  %986 = phi i64 [ 0, %703 ], [ %1030, %1027 ]
  %987 = load i64, i64* %434, align 8
  %988 = mul i64 %987, %986
  %989 = load i8*, i8** %704, align 8
  %990 = ptrtoint i8* %989 to i64
  %991 = and i64 %990, 63
  %992 = icmp eq i64 %991, 0
  call void @llvm.assume(i1 %992) #8
  %993 = getelementptr inbounds i8, i8* %989, i64 %988
  %994 = ptrtoint i8* %993 to i64
  %995 = and i64 %994, 63
  %996 = icmp eq i64 %995, 0
  call void @llvm.assume(i1 %996) #8
  %997 = bitcast i8* %993 to float*
  %998 = load i8*, i8** %705, align 8
  %999 = ptrtoint i8* %998 to i64
  %1000 = and i64 %999, 63
  %1001 = icmp eq i64 %1000, 0
  call void @llvm.assume(i1 %1001) #8
  %1002 = getelementptr inbounds i8, i8* %998, i64 %988
  %1003 = ptrtoint i8* %1002 to i64
  %1004 = and i64 %1003, 63
  %1005 = icmp eq i64 %1004, 0
  call void @llvm.assume(i1 %1005) #8
  %1006 = bitcast i8* %1002 to float*
  %1007 = load i8*, i8** %706, align 8
  %1008 = ptrtoint i8* %1007 to i64
  %1009 = and i64 %1008, 63
  %1010 = icmp eq i64 %1009, 0
  call void @llvm.assume(i1 %1010) #8
  %1011 = getelementptr inbounds i8, i8* %1007, i64 %988
  %1012 = ptrtoint i8* %1011 to i64
  %1013 = and i64 %1012, 63
  %1014 = icmp eq i64 %1013, 0
  call void @llvm.assume(i1 %1014) #8
  %1015 = bitcast i8* %1011 to float*
  %1016 = load i8*, i8** %694, align 8
  %1017 = load i64, i64* %693, align 8
  %1018 = mul i64 %1017, %986
  %1019 = getelementptr inbounds i8, i8* %1016, i64 %1018
  %1020 = ptrtoint i8* %1019 to i64
  %1021 = and i64 %1020, 63
  %1022 = icmp eq i64 %1021, 0
  call void @llvm.assume(i1 %1022) #8
  %1023 = bitcast i8* %1019 to float*
  %1024 = icmp eq i32 %985, 0
  br i1 %1024, label %1027, label %1033

1025:                                             ; preds = %1033
  %1026 = load i32, i32* %433, align 4
  br label %1027

1027:                                             ; preds = %1025, %983
  %1028 = phi i32 [ %1026, %1025 ], [ %984, %983 ]
  %1029 = phi i32 [ %1050, %1025 ], [ 0, %983 ]
  %1030 = add nuw nsw i64 %986, 1
  %1031 = zext i32 %1028 to i64
  %1032 = icmp ult i64 %1030, %1031
  br i1 %1032, label %983, label %778

1033:                                             ; preds = %983, %1033
  %1034 = phi i64 [ %1049, %1033 ], [ 0, %983 ]
  %1035 = getelementptr inbounds float, float* %997, i64 %1034
  %1036 = bitcast float* %1035 to <8 x float>*
  %1037 = load <8 x float>, <8 x float>* %1036, align 32, !alias.scope !160, !noalias !163
  %1038 = fmul <8 x float> %1037, <float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000>
  %1039 = getelementptr inbounds float, float* %1006, i64 %1034
  %1040 = bitcast float* %1039 to <8 x float>*
  %1041 = load <8 x float>, <8 x float>* %1040, align 32, !alias.scope !165, !noalias !168
  %1042 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1041, <8 x float> <float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000>, <8 x float> %1038) #8
  %1043 = getelementptr inbounds float, float* %1015, i64 %1034
  %1044 = bitcast float* %1043 to <8 x float>*
  %1045 = load <8 x float>, <8 x float>* %1044, align 32, !alias.scope !170, !noalias !173
  %1046 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1045, <8 x float> <float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000>, <8 x float> %1042) #8
  %1047 = getelementptr inbounds float, float* %1023, i64 %1034
  %1048 = bitcast float* %1047 to <8 x float>*
  store <8 x float> %1046, <8 x float>* %1048, align 32, !alias.scope !175
  %1049 = add nuw nsw i64 %1034, 8
  %1050 = load i32, i32* %435, align 8
  %1051 = zext i32 %1050 to i64
  %1052 = icmp ult i64 %1049, %1051
  br i1 %1052, label %1033, label %1025

1053:                                             ; preds = %637
  %1054 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1055 = load i32, i32* %1292, align 8
  br label %1056

1056:                                             ; preds = %1100, %1053
  %1057 = phi i32 [ %639, %1053 ], [ %1101, %1100 ]
  %1058 = phi i32 [ %1055, %1053 ], [ %1102, %1100 ]
  %1059 = phi i64 [ 0, %1053 ], [ %1103, %1100 ]
  %1060 = load i64, i64* %1291, align 8
  %1061 = mul i64 %1060, %1059
  %1062 = load i8*, i8** %1054, align 8
  %1063 = ptrtoint i8* %1062 to i64
  %1064 = and i64 %1063, 63
  %1065 = icmp eq i64 %1064, 0
  call void @llvm.assume(i1 %1065) #8
  %1066 = getelementptr inbounds i8, i8* %1062, i64 %1061
  %1067 = ptrtoint i8* %1066 to i64
  %1068 = and i64 %1067, 63
  %1069 = icmp eq i64 %1068, 0
  call void @llvm.assume(i1 %1069) #8
  %1070 = bitcast i8* %1066 to float*
  %1071 = add nuw nsw i64 %1059, 16
  %1072 = load i8*, i8** %415, align 8
  %1073 = load i64, i64* %414, align 8
  %1074 = mul i64 %1073, %1071
  %1075 = getelementptr inbounds i8, i8* %1072, i64 %1074
  %1076 = ptrtoint i8* %1075 to i64
  %1077 = and i64 %1076, 63
  %1078 = icmp eq i64 %1077, 0
  call void @llvm.assume(i1 %1078) #8
  %1079 = icmp eq i32 %1058, 0
  br i1 %1079, label %1100, label %1080

1080:                                             ; preds = %1056
  %1081 = getelementptr inbounds i8, i8* %1075, i64 64
  %1082 = bitcast i8* %1081 to float*
  br label %1083

1083:                                             ; preds = %1083, %1080
  %1084 = phi i64 [ 0, %1080 ], [ %1094, %1083 ]
  %1085 = getelementptr inbounds float, float* %1082, i64 %1084
  %1086 = bitcast float* %1085 to <8 x float>*
  %1087 = load <8 x float>, <8 x float>* %1086, align 32, !alias.scope !129, !noalias !132
  %1088 = getelementptr inbounds float, float* %1070, i64 %1084
  %1089 = bitcast float* %1088 to <8 x float>*
  %1090 = load <8 x float>, <8 x float>* %1089, align 32, !alias.scope !134, !noalias !137
  %1091 = fmul <8 x float> %1090, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1092 = fcmp ogt <8 x float> %1087, %1091
  %1093 = select <8 x i1> %1092, <8 x float> %1087, <8 x float> %1091
  store <8 x float> %1093, <8 x float>* %1089, align 32, !alias.scope !139
  %1094 = add nuw nsw i64 %1084, 8
  %1095 = load i32, i32* %1292, align 8
  %1096 = zext i32 %1095 to i64
  %1097 = icmp ult i64 %1094, %1096
  br i1 %1097, label %1083, label %1098

1098:                                             ; preds = %1083
  %1099 = load i32, i32* %1290, align 4
  br label %1100

1100:                                             ; preds = %1098, %1056
  %1101 = phi i32 [ %1099, %1098 ], [ %1057, %1056 ]
  %1102 = phi i32 [ %1095, %1098 ], [ 0, %1056 ]
  %1103 = add nuw nsw i64 %1059, 1
  %1104 = zext i32 %1101 to i64
  %1105 = icmp ult i64 %1103, %1104
  br i1 %1105, label %1056, label %1106

1106:                                             ; preds = %1100, %637
  %1107 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1107, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1108 = load i32, i32* %1290, align 4
  %1109 = icmp eq i32 %1108, 0
  br i1 %1109, label %1110, label %1112

1110:                                             ; preds = %1106
  %1111 = load i32, i32* %1292, align 8
  br label %1167

1112:                                             ; preds = %1106
  %1113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1114 = load i32, i32* %1292, align 8
  br label %1115

1115:                                             ; preds = %1160, %1112
  %1116 = phi i32 [ %1114, %1112 ], [ %1161, %1160 ]
  %1117 = phi i32 [ %1108, %1112 ], [ %1162, %1160 ]
  %1118 = phi i32 [ %1114, %1112 ], [ %1163, %1160 ]
  %1119 = phi i64 [ 0, %1112 ], [ %1164, %1160 ]
  %1120 = load i64, i64* %1291, align 8
  %1121 = mul i64 %1120, %1119
  %1122 = load i8*, i8** %1113, align 8
  %1123 = ptrtoint i8* %1122 to i64
  %1124 = and i64 %1123, 63
  %1125 = icmp eq i64 %1124, 0
  call void @llvm.assume(i1 %1125) #8
  %1126 = getelementptr inbounds i8, i8* %1122, i64 %1121
  %1127 = ptrtoint i8* %1126 to i64
  %1128 = and i64 %1127, 63
  %1129 = icmp eq i64 %1128, 0
  call void @llvm.assume(i1 %1129) #8
  %1130 = bitcast i8* %1126 to float*
  %1131 = add nuw nsw i64 %1119, 16
  %1132 = load i8*, i8** %415, align 8
  %1133 = load i64, i64* %414, align 8
  %1134 = mul i64 %1133, %1131
  %1135 = getelementptr inbounds i8, i8* %1132, i64 %1134
  %1136 = ptrtoint i8* %1135 to i64
  %1137 = and i64 %1136, 63
  %1138 = icmp eq i64 %1137, 0
  call void @llvm.assume(i1 %1138) #8
  %1139 = icmp eq i32 %1118, 0
  br i1 %1139, label %1160, label %1140

1140:                                             ; preds = %1115
  %1141 = getelementptr inbounds i8, i8* %1135, i64 64
  %1142 = bitcast i8* %1141 to float*
  br label %1143

1143:                                             ; preds = %1143, %1140
  %1144 = phi i64 [ 0, %1140 ], [ %1154, %1143 ]
  %1145 = getelementptr inbounds float, float* %1142, i64 %1144
  %1146 = bitcast float* %1145 to <8 x float>*
  %1147 = load <8 x float>, <8 x float>* %1146, align 32, !alias.scope !129, !noalias !132
  %1148 = getelementptr inbounds float, float* %1130, i64 %1144
  %1149 = bitcast float* %1148 to <8 x float>*
  %1150 = load <8 x float>, <8 x float>* %1149, align 32, !alias.scope !134, !noalias !137
  %1151 = fmul <8 x float> %1150, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1152 = fcmp ogt <8 x float> %1147, %1151
  %1153 = select <8 x i1> %1152, <8 x float> %1147, <8 x float> %1151
  store <8 x float> %1153, <8 x float>* %1149, align 32, !alias.scope !139
  %1154 = add nuw nsw i64 %1144, 8
  %1155 = load i32, i32* %1292, align 8
  %1156 = zext i32 %1155 to i64
  %1157 = icmp ult i64 %1154, %1156
  br i1 %1157, label %1143, label %1158

1158:                                             ; preds = %1143
  %1159 = load i32, i32* %1290, align 4
  br label %1160

1160:                                             ; preds = %1158, %1115
  %1161 = phi i32 [ %1155, %1158 ], [ %1116, %1115 ]
  %1162 = phi i32 [ %1159, %1158 ], [ %1117, %1115 ]
  %1163 = phi i32 [ %1155, %1158 ], [ 0, %1115 ]
  %1164 = add nuw nsw i64 %1119, 1
  %1165 = zext i32 %1162 to i64
  %1166 = icmp ult i64 %1164, %1165
  br i1 %1166, label %1115, label %1167

1167:                                             ; preds = %1160, %1110
  %1168 = phi i32 [ 0, %1110 ], [ %1162, %1160 ]
  %1169 = phi i32 [ %1111, %1110 ], [ %1161, %1160 ]
  %1170 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1170) #8
  %1171 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 4
  %1172 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1173 = zext i32 %1169 to i64
  %1174 = zext i32 %1168 to i64
  %1175 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0
  %1176 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1176, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1175, i64 %1173, i64 %1174, i64 4) #8
  %1177 = load i32, i32* %1290, align 4
  %1178 = icmp eq i32 %1177, 0
  br i1 %1178, label %691, label %629

1179:                                             ; preds = %575
  %1180 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1181 = load i32, i32* %435, align 8
  br label %1182

1182:                                             ; preds = %1226, %1179
  %1183 = phi i32 [ %577, %1179 ], [ %1227, %1226 ]
  %1184 = phi i32 [ %1181, %1179 ], [ %1228, %1226 ]
  %1185 = phi i64 [ 0, %1179 ], [ %1229, %1226 ]
  %1186 = load i64, i64* %434, align 8
  %1187 = mul i64 %1186, %1185
  %1188 = load i8*, i8** %1180, align 8
  %1189 = ptrtoint i8* %1188 to i64
  %1190 = and i64 %1189, 63
  %1191 = icmp eq i64 %1190, 0
  call void @llvm.assume(i1 %1191) #8
  %1192 = getelementptr inbounds i8, i8* %1188, i64 %1187
  %1193 = ptrtoint i8* %1192 to i64
  %1194 = and i64 %1193, 63
  %1195 = icmp eq i64 %1194, 0
  call void @llvm.assume(i1 %1195) #8
  %1196 = bitcast i8* %1192 to float*
  %1197 = add nuw nsw i64 %1185, 16
  %1198 = load i8*, i8** %415, align 8
  %1199 = load i64, i64* %414, align 8
  %1200 = mul i64 %1199, %1197
  %1201 = getelementptr inbounds i8, i8* %1198, i64 %1200
  %1202 = ptrtoint i8* %1201 to i64
  %1203 = and i64 %1202, 63
  %1204 = icmp eq i64 %1203, 0
  call void @llvm.assume(i1 %1204) #8
  %1205 = icmp eq i32 %1184, 0
  br i1 %1205, label %1226, label %1206

1206:                                             ; preds = %1182
  %1207 = getelementptr inbounds i8, i8* %1201, i64 64
  %1208 = bitcast i8* %1207 to float*
  br label %1209

1209:                                             ; preds = %1209, %1206
  %1210 = phi i64 [ 0, %1206 ], [ %1220, %1209 ]
  %1211 = getelementptr inbounds float, float* %1208, i64 %1210
  %1212 = bitcast float* %1211 to <8 x float>*
  %1213 = load <8 x float>, <8 x float>* %1212, align 32, !alias.scope !116, !noalias !119
  %1214 = getelementptr inbounds float, float* %1196, i64 %1210
  %1215 = bitcast float* %1214 to <8 x float>*
  %1216 = load <8 x float>, <8 x float>* %1215, align 32, !alias.scope !121, !noalias !124
  %1217 = fmul <8 x float> %1216, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1218 = fcmp ogt <8 x float> %1213, %1217
  %1219 = select <8 x i1> %1218, <8 x float> %1213, <8 x float> %1217
  store <8 x float> %1219, <8 x float>* %1215, align 32, !alias.scope !126
  %1220 = add nuw nsw i64 %1210, 8
  %1221 = load i32, i32* %435, align 8
  %1222 = zext i32 %1221 to i64
  %1223 = icmp ult i64 %1220, %1222
  br i1 %1223, label %1209, label %1224

1224:                                             ; preds = %1209
  %1225 = load i32, i32* %433, align 4
  br label %1226

1226:                                             ; preds = %1224, %1182
  %1227 = phi i32 [ %1225, %1224 ], [ %1183, %1182 ]
  %1228 = phi i32 [ %1221, %1224 ], [ 0, %1182 ]
  %1229 = add nuw nsw i64 %1185, 1
  %1230 = zext i32 %1227 to i64
  %1231 = icmp ult i64 %1229, %1230
  br i1 %1231, label %1182, label %1232

1232:                                             ; preds = %1226, %575
  %1233 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1233, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1234 = load i32, i32* %433, align 4
  %1235 = icmp eq i32 %1234, 0
  br i1 %1235, label %1289, label %1236

1236:                                             ; preds = %1232
  %1237 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1238 = load i32, i32* %435, align 8
  br label %1239

1239:                                             ; preds = %1283, %1236
  %1240 = phi i32 [ %1234, %1236 ], [ %1284, %1283 ]
  %1241 = phi i32 [ %1238, %1236 ], [ %1285, %1283 ]
  %1242 = phi i64 [ 0, %1236 ], [ %1286, %1283 ]
  %1243 = load i64, i64* %434, align 8
  %1244 = mul i64 %1243, %1242
  %1245 = load i8*, i8** %1237, align 8
  %1246 = ptrtoint i8* %1245 to i64
  %1247 = and i64 %1246, 63
  %1248 = icmp eq i64 %1247, 0
  call void @llvm.assume(i1 %1248) #8
  %1249 = getelementptr inbounds i8, i8* %1245, i64 %1244
  %1250 = ptrtoint i8* %1249 to i64
  %1251 = and i64 %1250, 63
  %1252 = icmp eq i64 %1251, 0
  call void @llvm.assume(i1 %1252) #8
  %1253 = bitcast i8* %1249 to float*
  %1254 = add nuw nsw i64 %1242, 16
  %1255 = load i8*, i8** %415, align 8
  %1256 = load i64, i64* %414, align 8
  %1257 = mul i64 %1256, %1254
  %1258 = getelementptr inbounds i8, i8* %1255, i64 %1257
  %1259 = ptrtoint i8* %1258 to i64
  %1260 = and i64 %1259, 63
  %1261 = icmp eq i64 %1260, 0
  call void @llvm.assume(i1 %1261) #8
  %1262 = icmp eq i32 %1241, 0
  br i1 %1262, label %1283, label %1263

1263:                                             ; preds = %1239
  %1264 = getelementptr inbounds i8, i8* %1258, i64 64
  %1265 = bitcast i8* %1264 to float*
  br label %1266

1266:                                             ; preds = %1266, %1263
  %1267 = phi i64 [ 0, %1263 ], [ %1277, %1266 ]
  %1268 = getelementptr inbounds float, float* %1265, i64 %1267
  %1269 = bitcast float* %1268 to <8 x float>*
  %1270 = load <8 x float>, <8 x float>* %1269, align 32, !alias.scope !116, !noalias !119
  %1271 = getelementptr inbounds float, float* %1253, i64 %1267
  %1272 = bitcast float* %1271 to <8 x float>*
  %1273 = load <8 x float>, <8 x float>* %1272, align 32, !alias.scope !121, !noalias !124
  %1274 = fmul <8 x float> %1273, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1275 = fcmp ogt <8 x float> %1270, %1274
  %1276 = select <8 x i1> %1275, <8 x float> %1270, <8 x float> %1274
  store <8 x float> %1276, <8 x float>* %1272, align 32, !alias.scope !126
  %1277 = add nuw nsw i64 %1267, 8
  %1278 = load i32, i32* %435, align 8
  %1279 = zext i32 %1278 to i64
  %1280 = icmp ult i64 %1277, %1279
  br i1 %1280, label %1266, label %1281

1281:                                             ; preds = %1266
  %1282 = load i32, i32* %433, align 4
  br label %1283

1283:                                             ; preds = %1281, %1239
  %1284 = phi i32 [ %1282, %1281 ], [ %1240, %1239 ]
  %1285 = phi i32 [ %1278, %1281 ], [ 0, %1239 ]
  %1286 = add nuw nsw i64 %1242, 1
  %1287 = zext i32 %1284 to i64
  %1288 = icmp ult i64 %1286, %1287
  br i1 %1288, label %1239, label %1289

1289:                                             ; preds = %1283, %1232
  %1290 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 1
  %1291 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 4
  %1292 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 0
  %1293 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %1293, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1294 = load i32, i32* %1290, align 4
  %1295 = icmp eq i32 %1294, 0
  br i1 %1295, label %637, label %634

1296:                                             ; preds = %563
  %1297 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1298 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %1299 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1300 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 4
  %1301 = icmp eq i32 %567, 0
  %1302 = shl nuw nsw i64 %568, 2
  %1303 = icmp ult i32 %567, 32
  %1304 = and i64 %568, 4294967264
  %1305 = icmp eq i64 %1304, %568
  %1306 = and i64 %568, 3
  %1307 = icmp eq i64 %1306, 0
  br label %1308

1308:                                             ; preds = %1418, %1296
  %1309 = phi i64 [ 0, %1296 ], [ %1419, %1418 ]
  %1310 = load i8*, i8** %1297, align 8
  %1311 = load i64, i64* %1298, align 8
  %1312 = mul i64 %1311, %1309
  %1313 = getelementptr inbounds i8, i8* %1310, i64 %1312
  %1314 = ptrtoint i8* %1313 to i64
  %1315 = and i64 %1314, 63
  %1316 = icmp eq i64 %1315, 0
  call void @llvm.assume(i1 %1316) #8
  %1317 = bitcast i8* %1313 to float*
  %1318 = load i8*, i8** %1299, align 8
  %1319 = load i64, i64* %1300, align 8
  %1320 = mul i64 %1319, %1309
  %1321 = getelementptr inbounds i8, i8* %1318, i64 %1320
  %1322 = ptrtoint i8* %1321 to i64
  %1323 = and i64 %1322, 63
  %1324 = icmp eq i64 %1323, 0
  call void @llvm.assume(i1 %1324) #8
  %1325 = bitcast i8* %1321 to float*
  br i1 %1301, label %1418, label %1326

1326:                                             ; preds = %1308
  br i1 %1303, label %1373, label %1327

1327:                                             ; preds = %1326
  %1328 = getelementptr i8, i8* %1318, i64 %1302
  %1329 = getelementptr i8, i8* %1328, i64 %1320
  %1330 = getelementptr i8, i8* %1310, i64 %1302
  %1331 = mul i64 %1311, %1309
  %1332 = getelementptr i8, i8* %1330, i64 %1331
  %1333 = icmp ult i8* %1321, %1332
  %1334 = icmp ult i8* %1313, %1329
  %1335 = and i1 %1333, %1334
  br i1 %1335, label %1373, label %1336

1336:                                             ; preds = %1327, %1336
  %1337 = phi i64 [ %1370, %1336 ], [ 0, %1327 ]
  %1338 = getelementptr inbounds float, float* %1317, i64 %1337
  %1339 = bitcast float* %1338 to <8 x float>*
  %1340 = load <8 x float>, <8 x float>* %1339, align 64, !alias.scope !178
  %1341 = getelementptr inbounds float, float* %1338, i64 8
  %1342 = bitcast float* %1341 to <8 x float>*
  %1343 = load <8 x float>, <8 x float>* %1342, align 32, !alias.scope !178
  %1344 = getelementptr inbounds float, float* %1338, i64 16
  %1345 = bitcast float* %1344 to <8 x float>*
  %1346 = load <8 x float>, <8 x float>* %1345, align 64, !alias.scope !178
  %1347 = getelementptr inbounds float, float* %1338, i64 24
  %1348 = bitcast float* %1347 to <8 x float>*
  %1349 = load <8 x float>, <8 x float>* %1348, align 32, !alias.scope !178
  %1350 = getelementptr inbounds float, float* %1325, i64 %1337
  %1351 = bitcast float* %1350 to <8 x float>*
  %1352 = load <8 x float>, <8 x float>* %1351, align 64, !alias.scope !181, !noalias !178
  %1353 = getelementptr inbounds float, float* %1350, i64 8
  %1354 = bitcast float* %1353 to <8 x float>*
  %1355 = load <8 x float>, <8 x float>* %1354, align 32, !alias.scope !181, !noalias !178
  %1356 = getelementptr inbounds float, float* %1350, i64 16
  %1357 = bitcast float* %1356 to <8 x float>*
  %1358 = load <8 x float>, <8 x float>* %1357, align 64, !alias.scope !181, !noalias !178
  %1359 = getelementptr inbounds float, float* %1350, i64 24
  %1360 = bitcast float* %1359 to <8 x float>*
  %1361 = load <8 x float>, <8 x float>* %1360, align 32, !alias.scope !181, !noalias !178
  %1362 = fsub <8 x float> %1352, %1340
  %1363 = fsub <8 x float> %1355, %1343
  %1364 = fsub <8 x float> %1358, %1346
  %1365 = fsub <8 x float> %1361, %1349
  %1366 = bitcast float* %1350 to <8 x float>*
  store <8 x float> %1362, <8 x float>* %1366, align 64, !alias.scope !181, !noalias !178
  %1367 = bitcast float* %1353 to <8 x float>*
  store <8 x float> %1363, <8 x float>* %1367, align 32, !alias.scope !181, !noalias !178
  %1368 = bitcast float* %1356 to <8 x float>*
  store <8 x float> %1364, <8 x float>* %1368, align 64, !alias.scope !181, !noalias !178
  %1369 = bitcast float* %1359 to <8 x float>*
  store <8 x float> %1365, <8 x float>* %1369, align 32, !alias.scope !181, !noalias !178
  %1370 = add i64 %1337, 32
  %1371 = icmp eq i64 %1370, %1304
  br i1 %1371, label %1372, label %1336, !llvm.loop !183

1372:                                             ; preds = %1336
  br i1 %1305, label %1418, label %1373

1373:                                             ; preds = %1372, %1327, %1326
  %1374 = phi i64 [ 0, %1327 ], [ 0, %1326 ], [ %1304, %1372 ]
  %1375 = xor i64 %1374, -1
  %1376 = add nsw i64 %1375, %568
  br i1 %1307, label %1388, label %1377

1377:                                             ; preds = %1373, %1377
  %1378 = phi i64 [ %1385, %1377 ], [ %1374, %1373 ]
  %1379 = phi i64 [ %1386, %1377 ], [ %1306, %1373 ]
  %1380 = getelementptr inbounds float, float* %1317, i64 %1378
  %1381 = load float, float* %1380, align 4
  %1382 = getelementptr inbounds float, float* %1325, i64 %1378
  %1383 = load float, float* %1382, align 4
  %1384 = fsub float %1383, %1381
  store float %1384, float* %1382, align 4
  %1385 = add nuw nsw i64 %1378, 1
  %1386 = add i64 %1379, -1
  %1387 = icmp eq i64 %1386, 0
  br i1 %1387, label %1388, label %1377, !llvm.loop !184

1388:                                             ; preds = %1377, %1373
  %1389 = phi i64 [ %1374, %1373 ], [ %1385, %1377 ]
  %1390 = icmp ult i64 %1376, 3
  br i1 %1390, label %1418, label %1391

1391:                                             ; preds = %1388, %1391
  %1392 = phi i64 [ %1416, %1391 ], [ %1389, %1388 ]
  %1393 = getelementptr inbounds float, float* %1317, i64 %1392
  %1394 = load float, float* %1393, align 4
  %1395 = getelementptr inbounds float, float* %1325, i64 %1392
  %1396 = load float, float* %1395, align 4
  %1397 = fsub float %1396, %1394
  store float %1397, float* %1395, align 4
  %1398 = add nuw nsw i64 %1392, 1
  %1399 = getelementptr inbounds float, float* %1317, i64 %1398
  %1400 = load float, float* %1399, align 4
  %1401 = getelementptr inbounds float, float* %1325, i64 %1398
  %1402 = load float, float* %1401, align 4
  %1403 = fsub float %1402, %1400
  store float %1403, float* %1401, align 4
  %1404 = add nuw nsw i64 %1392, 2
  %1405 = getelementptr inbounds float, float* %1317, i64 %1404
  %1406 = load float, float* %1405, align 4
  %1407 = getelementptr inbounds float, float* %1325, i64 %1404
  %1408 = load float, float* %1407, align 4
  %1409 = fsub float %1408, %1406
  store float %1409, float* %1407, align 4
  %1410 = add nuw nsw i64 %1392, 3
  %1411 = getelementptr inbounds float, float* %1317, i64 %1410
  %1412 = load float, float* %1411, align 4
  %1413 = getelementptr inbounds float, float* %1325, i64 %1410
  %1414 = load float, float* %1413, align 4
  %1415 = fsub float %1414, %1412
  store float %1415, float* %1413, align 4
  %1416 = add nuw nsw i64 %1392, 4
  %1417 = icmp eq i64 %1416, %568
  br i1 %1417, label %1418, label %1391, !llvm.loop !185

1418:                                             ; preds = %1388, %1391, %1372, %1308
  %1419 = add nuw nsw i64 %1309, 1
  %1420 = icmp eq i64 %1419, %570
  br i1 %1420, label %1421, label %1308

1421:                                             ; preds = %1418, %563
  %1422 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2
  %1423 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %1422, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %1423) #8
  %1424 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1422, i64 0, i32 0, i32 0
  %1425 = load i32, i32* %1424, align 8
  %1426 = zext i32 %1425 to i64
  %1427 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 1
  %1428 = load i32, i32* %1427, align 4
  %1429 = zext i32 %1428 to i64
  %1430 = icmp eq i32 %1428, 0
  br i1 %1430, label %1556, label %1431

1431:                                             ; preds = %1421
  %1432 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1433 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %1434 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1435 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 4
  %1436 = icmp eq i32 %1425, 0
  %1437 = shl nuw nsw i64 %1426, 2
  %1438 = icmp ult i32 %1425, 32
  %1439 = and i64 %1426, 4294967264
  %1440 = icmp eq i64 %1439, %1426
  %1441 = and i64 %1426, 3
  %1442 = icmp eq i64 %1441, 0
  br label %1443

1443:                                             ; preds = %1553, %1431
  %1444 = phi i64 [ 0, %1431 ], [ %1554, %1553 ]
  %1445 = load i8*, i8** %1432, align 8
  %1446 = load i64, i64* %1433, align 8
  %1447 = mul i64 %1446, %1444
  %1448 = getelementptr inbounds i8, i8* %1445, i64 %1447
  %1449 = ptrtoint i8* %1448 to i64
  %1450 = and i64 %1449, 63
  %1451 = icmp eq i64 %1450, 0
  call void @llvm.assume(i1 %1451) #8
  %1452 = bitcast i8* %1448 to float*
  %1453 = load i8*, i8** %1434, align 8
  %1454 = load i64, i64* %1435, align 8
  %1455 = mul i64 %1454, %1444
  %1456 = getelementptr inbounds i8, i8* %1453, i64 %1455
  %1457 = ptrtoint i8* %1456 to i64
  %1458 = and i64 %1457, 63
  %1459 = icmp eq i64 %1458, 0
  call void @llvm.assume(i1 %1459) #8
  %1460 = bitcast i8* %1456 to float*
  br i1 %1436, label %1553, label %1461

1461:                                             ; preds = %1443
  br i1 %1438, label %1508, label %1462

1462:                                             ; preds = %1461
  %1463 = getelementptr i8, i8* %1453, i64 %1437
  %1464 = getelementptr i8, i8* %1463, i64 %1455
  %1465 = getelementptr i8, i8* %1445, i64 %1437
  %1466 = mul i64 %1446, %1444
  %1467 = getelementptr i8, i8* %1465, i64 %1466
  %1468 = icmp ult i8* %1456, %1467
  %1469 = icmp ult i8* %1448, %1464
  %1470 = and i1 %1468, %1469
  br i1 %1470, label %1508, label %1471

1471:                                             ; preds = %1462, %1471
  %1472 = phi i64 [ %1505, %1471 ], [ 0, %1462 ]
  %1473 = getelementptr inbounds float, float* %1452, i64 %1472
  %1474 = bitcast float* %1473 to <8 x float>*
  %1475 = load <8 x float>, <8 x float>* %1474, align 64, !alias.scope !186
  %1476 = getelementptr inbounds float, float* %1473, i64 8
  %1477 = bitcast float* %1476 to <8 x float>*
  %1478 = load <8 x float>, <8 x float>* %1477, align 32, !alias.scope !186
  %1479 = getelementptr inbounds float, float* %1473, i64 16
  %1480 = bitcast float* %1479 to <8 x float>*
  %1481 = load <8 x float>, <8 x float>* %1480, align 64, !alias.scope !186
  %1482 = getelementptr inbounds float, float* %1473, i64 24
  %1483 = bitcast float* %1482 to <8 x float>*
  %1484 = load <8 x float>, <8 x float>* %1483, align 32, !alias.scope !186
  %1485 = getelementptr inbounds float, float* %1460, i64 %1472
  %1486 = bitcast float* %1485 to <8 x float>*
  %1487 = load <8 x float>, <8 x float>* %1486, align 64, !alias.scope !189, !noalias !186
  %1488 = getelementptr inbounds float, float* %1485, i64 8
  %1489 = bitcast float* %1488 to <8 x float>*
  %1490 = load <8 x float>, <8 x float>* %1489, align 32, !alias.scope !189, !noalias !186
  %1491 = getelementptr inbounds float, float* %1485, i64 16
  %1492 = bitcast float* %1491 to <8 x float>*
  %1493 = load <8 x float>, <8 x float>* %1492, align 64, !alias.scope !189, !noalias !186
  %1494 = getelementptr inbounds float, float* %1485, i64 24
  %1495 = bitcast float* %1494 to <8 x float>*
  %1496 = load <8 x float>, <8 x float>* %1495, align 32, !alias.scope !189, !noalias !186
  %1497 = fsub <8 x float> %1487, %1475
  %1498 = fsub <8 x float> %1490, %1478
  %1499 = fsub <8 x float> %1493, %1481
  %1500 = fsub <8 x float> %1496, %1484
  %1501 = bitcast float* %1485 to <8 x float>*
  store <8 x float> %1497, <8 x float>* %1501, align 64, !alias.scope !189, !noalias !186
  %1502 = bitcast float* %1488 to <8 x float>*
  store <8 x float> %1498, <8 x float>* %1502, align 32, !alias.scope !189, !noalias !186
  %1503 = bitcast float* %1491 to <8 x float>*
  store <8 x float> %1499, <8 x float>* %1503, align 64, !alias.scope !189, !noalias !186
  %1504 = bitcast float* %1494 to <8 x float>*
  store <8 x float> %1500, <8 x float>* %1504, align 32, !alias.scope !189, !noalias !186
  %1505 = add i64 %1472, 32
  %1506 = icmp eq i64 %1505, %1439
  br i1 %1506, label %1507, label %1471, !llvm.loop !191

1507:                                             ; preds = %1471
  br i1 %1440, label %1553, label %1508

1508:                                             ; preds = %1507, %1462, %1461
  %1509 = phi i64 [ 0, %1462 ], [ 0, %1461 ], [ %1439, %1507 ]
  %1510 = xor i64 %1509, -1
  %1511 = add nsw i64 %1510, %1426
  br i1 %1442, label %1523, label %1512

1512:                                             ; preds = %1508, %1512
  %1513 = phi i64 [ %1520, %1512 ], [ %1509, %1508 ]
  %1514 = phi i64 [ %1521, %1512 ], [ %1441, %1508 ]
  %1515 = getelementptr inbounds float, float* %1452, i64 %1513
  %1516 = load float, float* %1515, align 4
  %1517 = getelementptr inbounds float, float* %1460, i64 %1513
  %1518 = load float, float* %1517, align 4
  %1519 = fsub float %1518, %1516
  store float %1519, float* %1517, align 4
  %1520 = add nuw nsw i64 %1513, 1
  %1521 = add i64 %1514, -1
  %1522 = icmp eq i64 %1521, 0
  br i1 %1522, label %1523, label %1512, !llvm.loop !192

1523:                                             ; preds = %1512, %1508
  %1524 = phi i64 [ %1509, %1508 ], [ %1520, %1512 ]
  %1525 = icmp ult i64 %1511, 3
  br i1 %1525, label %1553, label %1526

1526:                                             ; preds = %1523, %1526
  %1527 = phi i64 [ %1551, %1526 ], [ %1524, %1523 ]
  %1528 = getelementptr inbounds float, float* %1452, i64 %1527
  %1529 = load float, float* %1528, align 4
  %1530 = getelementptr inbounds float, float* %1460, i64 %1527
  %1531 = load float, float* %1530, align 4
  %1532 = fsub float %1531, %1529
  store float %1532, float* %1530, align 4
  %1533 = add nuw nsw i64 %1527, 1
  %1534 = getelementptr inbounds float, float* %1452, i64 %1533
  %1535 = load float, float* %1534, align 4
  %1536 = getelementptr inbounds float, float* %1460, i64 %1533
  %1537 = load float, float* %1536, align 4
  %1538 = fsub float %1537, %1535
  store float %1538, float* %1536, align 4
  %1539 = add nuw nsw i64 %1527, 2
  %1540 = getelementptr inbounds float, float* %1452, i64 %1539
  %1541 = load float, float* %1540, align 4
  %1542 = getelementptr inbounds float, float* %1460, i64 %1539
  %1543 = load float, float* %1542, align 4
  %1544 = fsub float %1543, %1541
  store float %1544, float* %1542, align 4
  %1545 = add nuw nsw i64 %1527, 3
  %1546 = getelementptr inbounds float, float* %1452, i64 %1545
  %1547 = load float, float* %1546, align 4
  %1548 = getelementptr inbounds float, float* %1460, i64 %1545
  %1549 = load float, float* %1548, align 4
  %1550 = fsub float %1549, %1547
  store float %1550, float* %1548, align 4
  %1551 = add nuw nsw i64 %1527, 4
  %1552 = icmp eq i64 %1551, %1426
  br i1 %1552, label %1553, label %1526, !llvm.loop !193

1553:                                             ; preds = %1523, %1526, %1507, %1443
  %1554 = add nuw nsw i64 %1444, 1
  %1555 = icmp eq i64 %1554, %1429
  br i1 %1555, label %1556, label %1443

1556:                                             ; preds = %1553, %1421
  %1557 = bitcast i64* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1557) #8
  %1558 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 8
  %1559 = load i64, i64* %1558, align 8
  %1560 = add i64 %1559, 7
  %1561 = lshr i64 %1560, 3
  store i64 %1561, i64* %23, align 8
  %1562 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 9
  %1563 = load i64, i64* %1562, align 8
  %1564 = add i64 %1563, 7
  %1565 = lshr i64 %1564, 3
  %1566 = mul i64 %1565, %1561
  %1567 = trunc i64 %1566 to i32
  %1568 = bitcast %class.anon.273* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1568) #8
  %1569 = getelementptr inbounds %class.anon.273, %class.anon.273* %24, i64 0, i32 0
  store i64* %23, i64** %1569, align 8
  %1570 = getelementptr inbounds %class.anon.273, %class.anon.273* %24, i64 0, i32 1
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %1570, align 8
  %1571 = getelementptr inbounds %class.anon.273, %class.anon.273* %24, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %1571, align 8
  %1572 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1572) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %17, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double* nonnull %17) #8
  %1573 = icmp eq %"class.jxl::ThreadPool"* %4, null
  br i1 %1573, label %328, label %339
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE(%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"* nocapture readnone, %"class.jxl::ImageBundle"* nocapture readnone, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) #4 {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.292", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.292", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState.289", align 8
  %12 = alloca %"class.jxl::ThreadPool::RunCallState.289", align 8
  %13 = alloca double, align 8
  %14 = alloca %"class.jxl::ThreadPool", align 8
  %15 = alloca %"class.jxl::ThreadPool::RunCallState.288", align 8
  %16 = alloca %"class.jxl::ThreadPool::RunCallState.288", align 8
  %17 = alloca double, align 8
  %18 = alloca %"class.jxl::ThreadPool", align 8
  %19 = alloca %"class.jxl::Image3", align 8
  %20 = alloca %"class.jxl::Image3", align 8
  %21 = alloca %"class.jxl::Plane.97", align 8
  %22 = alloca %"class.std::__1::unique_ptr.254", align 8
  %23 = alloca i64, align 8
  %24 = alloca %class.anon.284, align 8
  %25 = alloca %"class.jxl::Image3", align 8
  %26 = alloca %"class.jxl::Image3", align 8
  %27 = alloca %class.anon.285, align 8
  %28 = alloca %"class.std::__1::unique_ptr.254", align 8
  %29 = alloca %"class.jxl::Image3", align 8
  %30 = alloca %"class.jxl::Plane.97", align 8
  %31 = alloca %"class.jxl::Plane.97", align 8
  %32 = alloca %"class.jxl::Image3", align 8
  %33 = alloca %"class.jxl::Plane.97", align 8
  %34 = alloca %"class.jxl::Plane.97", align 8
  %35 = alloca float, align 4
  %36 = alloca %"class.jxl::Plane.97", align 8
  %37 = alloca %class.anon.286, align 8
  %38 = alloca [18 x %"struct.std::__1::pair.260"], align 16
  %39 = alloca float, align 4
  %40 = alloca %class.anon.287, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2
  %43 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 0
  %44 = load float, float* %43, align 8
  %45 = fcmp ogt float %44, 0.000000e+00
  br i1 %45, label %49, label %46

46:                                               ; preds = %6
  %47 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #8
  %48 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

49:                                               ; preds = %6
  %50 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 1, i32 26, i32 2
  %51 = load i8, i8* %50, align 1, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"* %3, float 0x3FEFB50D60000000, %"class.jxl::ThreadPool"* %4) #8
  br label %54

54:                                               ; preds = %49, %53
  %55 = bitcast %"class.jxl::Image3"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %19, %"class.jxl::Image3"* dereferenceable(96) %3, i64 16, i64 16) #8
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = icmp eq i32 %60, 0
  br i1 %62, label %219, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %68 = icmp eq i32 %57, 0
  %69 = shl nuw nsw i64 %58, 2
  %70 = and i64 %58, 4294967288
  %71 = add nsw i64 %70, -8
  %72 = lshr exact i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i32 %57, 8
  %75 = and i64 %58, 4294967288
  %76 = and i64 %73, 1
  %77 = icmp eq i64 %71, 0
  %78 = sub nuw nsw i64 %73, %76
  %79 = icmp eq i64 %76, 0
  %80 = icmp eq i64 %75, %58
  %81 = and i64 %58, 3
  %82 = icmp eq i64 %81, 0
  br label %83

83:                                               ; preds = %189, %63
  %84 = phi i64 [ 0, %63 ], [ %190, %189 ]
  %85 = load i8*, i8** %64, align 8
  %86 = load i64, i64* %65, align 8
  %87 = mul i64 %86, %84
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = ptrtoint i8* %88 to i64
  %90 = and i64 %89, 63
  %91 = icmp eq i64 %90, 0
  call void @llvm.assume(i1 %91) #8
  %92 = bitcast i8* %88 to float*
  %93 = load i8*, i8** %66, align 8
  %94 = load i64, i64* %67, align 8
  %95 = mul i64 %94, %84
  %96 = getelementptr inbounds i8, i8* %93, i64 %95
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  call void @llvm.assume(i1 %99) #8
  %100 = bitcast i8* %96 to float*
  br i1 %68, label %189, label %101

101:                                              ; preds = %83
  br i1 %74, label %102, label %120

102:                                              ; preds = %188, %120, %101
  %103 = phi i64 [ 0, %120 ], [ 0, %101 ], [ %75, %188 ]
  %104 = xor i64 %103, -1
  %105 = add nsw i64 %104, %58
  br i1 %82, label %117, label %106

106:                                              ; preds = %102, %106
  %107 = phi i64 [ %114, %106 ], [ %103, %102 ]
  %108 = phi i64 [ %115, %106 ], [ %81, %102 ]
  %109 = getelementptr inbounds float, float* %92, i64 %107
  %110 = load float, float* %109, align 4
  %111 = getelementptr inbounds float, float* %100, i64 %107
  %112 = load float, float* %111, align 4
  %113 = fsub float %112, %110
  store float %113, float* %111, align 4
  %114 = add nuw nsw i64 %107, 1
  %115 = add i64 %108, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %106, !llvm.loop !194

117:                                              ; preds = %106, %102
  %118 = phi i64 [ %103, %102 ], [ %114, %106 ]
  %119 = icmp ult i64 %105, 3
  br i1 %119, label %189, label %192

120:                                              ; preds = %101
  %121 = getelementptr i8, i8* %93, i64 %69
  %122 = getelementptr i8, i8* %121, i64 %95
  %123 = getelementptr i8, i8* %85, i64 %69
  %124 = mul i64 %86, %84
  %125 = getelementptr i8, i8* %123, i64 %124
  %126 = icmp ult i8* %96, %125
  %127 = icmp ult i8* %88, %122
  %128 = and i1 %126, %127
  br i1 %128, label %102, label %129

129:                                              ; preds = %120
  br i1 %77, label %169, label %130

130:                                              ; preds = %129, %130
  %131 = phi i64 [ %166, %130 ], [ 0, %129 ]
  %132 = phi i64 [ %167, %130 ], [ %78, %129 ]
  %133 = getelementptr inbounds float, float* %92, i64 %131
  %134 = bitcast float* %133 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 64, !alias.scope !195
  %136 = getelementptr inbounds float, float* %133, i64 4
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 16, !alias.scope !195
  %139 = getelementptr inbounds float, float* %100, i64 %131
  %140 = bitcast float* %139 to <4 x float>*
  %141 = load <4 x float>, <4 x float>* %140, align 64, !alias.scope !198, !noalias !195
  %142 = getelementptr inbounds float, float* %139, i64 4
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 16, !alias.scope !198, !noalias !195
  %145 = fsub <4 x float> %141, %135
  %146 = fsub <4 x float> %144, %138
  %147 = bitcast float* %139 to <4 x float>*
  store <4 x float> %145, <4 x float>* %147, align 64, !alias.scope !198, !noalias !195
  %148 = bitcast float* %142 to <4 x float>*
  store <4 x float> %146, <4 x float>* %148, align 16, !alias.scope !198, !noalias !195
  %149 = or i64 %131, 8
  %150 = getelementptr inbounds float, float* %92, i64 %149
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 32, !alias.scope !195
  %153 = getelementptr inbounds float, float* %150, i64 4
  %154 = bitcast float* %153 to <4 x float>*
  %155 = load <4 x float>, <4 x float>* %154, align 16, !alias.scope !195
  %156 = getelementptr inbounds float, float* %100, i64 %149
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 32, !alias.scope !198, !noalias !195
  %159 = getelementptr inbounds float, float* %156, i64 4
  %160 = bitcast float* %159 to <4 x float>*
  %161 = load <4 x float>, <4 x float>* %160, align 16, !alias.scope !198, !noalias !195
  %162 = fsub <4 x float> %158, %152
  %163 = fsub <4 x float> %161, %155
  %164 = bitcast float* %156 to <4 x float>*
  store <4 x float> %162, <4 x float>* %164, align 32, !alias.scope !198, !noalias !195
  %165 = bitcast float* %159 to <4 x float>*
  store <4 x float> %163, <4 x float>* %165, align 16, !alias.scope !198, !noalias !195
  %166 = add i64 %131, 16
  %167 = add i64 %132, -2
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %130, !llvm.loop !200

169:                                              ; preds = %130, %129
  %170 = phi i64 [ 0, %129 ], [ %166, %130 ]
  br i1 %79, label %188, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds float, float* %92, i64 %170
  %173 = bitcast float* %172 to <4 x float>*
  %174 = load <4 x float>, <4 x float>* %173, align 32, !alias.scope !195
  %175 = getelementptr inbounds float, float* %172, i64 4
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 16, !alias.scope !195
  %178 = getelementptr inbounds float, float* %100, i64 %170
  %179 = bitcast float* %178 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 32, !alias.scope !198, !noalias !195
  %181 = getelementptr inbounds float, float* %178, i64 4
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 16, !alias.scope !198, !noalias !195
  %184 = fsub <4 x float> %180, %174
  %185 = fsub <4 x float> %183, %177
  %186 = bitcast float* %178 to <4 x float>*
  store <4 x float> %184, <4 x float>* %186, align 32, !alias.scope !198, !noalias !195
  %187 = bitcast float* %181 to <4 x float>*
  store <4 x float> %185, <4 x float>* %187, align 16, !alias.scope !198, !noalias !195
  br label %188

188:                                              ; preds = %169, %171
  br i1 %80, label %189, label %102

189:                                              ; preds = %117, %192, %188, %83
  %190 = add nuw nsw i64 %84, 1
  %191 = icmp eq i64 %190, %61
  br i1 %191, label %219, label %83

192:                                              ; preds = %117, %192
  %193 = phi i64 [ %217, %192 ], [ %118, %117 ]
  %194 = getelementptr inbounds float, float* %92, i64 %193
  %195 = load float, float* %194, align 4
  %196 = getelementptr inbounds float, float* %100, i64 %193
  %197 = load float, float* %196, align 4
  %198 = fsub float %197, %195
  store float %198, float* %196, align 4
  %199 = add nuw nsw i64 %193, 1
  %200 = getelementptr inbounds float, float* %92, i64 %199
  %201 = load float, float* %200, align 4
  %202 = getelementptr inbounds float, float* %100, i64 %199
  %203 = load float, float* %202, align 4
  %204 = fsub float %203, %201
  store float %204, float* %202, align 4
  %205 = add nuw nsw i64 %193, 2
  %206 = getelementptr inbounds float, float* %92, i64 %205
  %207 = load float, float* %206, align 4
  %208 = getelementptr inbounds float, float* %100, i64 %205
  %209 = load float, float* %208, align 4
  %210 = fsub float %209, %207
  store float %210, float* %208, align 4
  %211 = add nuw nsw i64 %193, 3
  %212 = getelementptr inbounds float, float* %92, i64 %211
  %213 = load float, float* %212, align 4
  %214 = getelementptr inbounds float, float* %100, i64 %211
  %215 = load float, float* %214, align 4
  %216 = fsub float %215, %213
  store float %216, float* %214, align 4
  %217 = add nuw nsw i64 %193, 4
  %218 = icmp eq i64 %217, %58
  br i1 %218, label %189, label %192, !llvm.loop !201

219:                                              ; preds = %189, %54
  %220 = bitcast %"class.jxl::Image3"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %220) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 -86, i64 96, i1 false)
  %221 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %222 = load i32, i32* %221, align 8
  %223 = zext i32 %222 to i64
  %224 = add nuw nsw i64 %223, 64
  %225 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 1
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %228, i64 %224, i64 %227, i64 4) #8
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %229, i64 %224, i64 %227, i64 4) #8
  %230 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %230, i64 %224, i64 %227, i64 4) #8
  %231 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 1
  %232 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 4
  %233 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 0
  %234 = load i32, i32* %231, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %303, label %236

236:                                              ; preds = %219
  %237 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %240

238:                                              ; preds = %240
  %239 = icmp eq i32 %256, 0
  br i1 %239, label %303, label %259

240:                                              ; preds = %240, %236
  %241 = phi i64 [ 0, %236 ], [ %255, %240 ]
  %242 = load i64, i64* %232, align 8
  %243 = mul i64 %242, %241
  %244 = load i8*, i8** %237, align 8
  %245 = ptrtoint i8* %244 to i64
  %246 = and i64 %245, 63
  %247 = icmp eq i64 %246, 0
  call void @llvm.assume(i1 %247) #8
  %248 = getelementptr inbounds i8, i8* %244, i64 %243
  %249 = ptrtoint i8* %248 to i64
  %250 = and i64 %249, 63
  %251 = icmp eq i64 %250, 0
  call void @llvm.assume(i1 %251) #8
  %252 = load i32, i32* %233, align 8
  %253 = zext i32 %252 to i64
  %254 = shl nuw nsw i64 %253, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %248, i8 0, i64 %254, i1 false) #8
  %255 = add nuw nsw i64 %241, 1
  %256 = load i32, i32* %231, align 4
  %257 = zext i32 %256 to i64
  %258 = icmp ult i64 %255, %257
  br i1 %258, label %240, label %238

259:                                              ; preds = %238
  %260 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %261

261:                                              ; preds = %261, %259
  %262 = phi i64 [ 0, %259 ], [ %276, %261 ]
  %263 = load i64, i64* %232, align 8
  %264 = mul i64 %263, %262
  %265 = load i8*, i8** %260, align 8
  %266 = ptrtoint i8* %265 to i64
  %267 = and i64 %266, 63
  %268 = icmp eq i64 %267, 0
  call void @llvm.assume(i1 %268) #8
  %269 = getelementptr inbounds i8, i8* %265, i64 %264
  %270 = ptrtoint i8* %269 to i64
  %271 = and i64 %270, 63
  %272 = icmp eq i64 %271, 0
  call void @llvm.assume(i1 %272) #8
  %273 = load i32, i32* %233, align 8
  %274 = zext i32 %273 to i64
  %275 = shl nuw nsw i64 %274, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %269, i8 0, i64 %275, i1 false) #8
  %276 = add nuw nsw i64 %262, 1
  %277 = load i32, i32* %231, align 4
  %278 = zext i32 %277 to i64
  %279 = icmp ult i64 %276, %278
  br i1 %279, label %261, label %280

280:                                              ; preds = %261
  %281 = icmp eq i32 %277, 0
  br i1 %281, label %303, label %282

282:                                              ; preds = %280
  %283 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %284

284:                                              ; preds = %284, %282
  %285 = phi i64 [ 0, %282 ], [ %299, %284 ]
  %286 = load i64, i64* %232, align 8
  %287 = mul i64 %286, %285
  %288 = load i8*, i8** %283, align 8
  %289 = ptrtoint i8* %288 to i64
  %290 = and i64 %289, 63
  %291 = icmp eq i64 %290, 0
  call void @llvm.assume(i1 %291) #8
  %292 = getelementptr inbounds i8, i8* %288, i64 %287
  %293 = ptrtoint i8* %292 to i64
  %294 = and i64 %293, 63
  %295 = icmp eq i64 %294, 0
  call void @llvm.assume(i1 %295) #8
  %296 = load i32, i32* %233, align 8
  %297 = zext i32 %296 to i64
  %298 = shl nuw nsw i64 %297, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %292, i8 0, i64 %298, i1 false) #8
  %299 = add nuw nsw i64 %285, 1
  %300 = load i32, i32* %231, align 4
  %301 = zext i32 %300 to i64
  %302 = icmp ult i64 %299, %301
  br i1 %302, label %284, label %303

303:                                              ; preds = %284, %219, %238, %280
  %304 = load i32, i32* %221, align 8
  %305 = zext i32 %304 to i64
  %306 = load i32, i32* %225, align 4
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 2
  %309 = load i32, i32* %308, align 8
  %310 = icmp ult i32 %309, %304
  br i1 %310, label %311, label %314

311:                                              ; preds = %329, %321, %303
  %312 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)) #8
  %313 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

314:                                              ; preds = %303
  %315 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 3
  %316 = load i32, i32* %315, align 4
  %317 = icmp ult i32 %316, %306
  br i1 %317, label %318, label %321

318:                                              ; preds = %335, %325, %314
  %319 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #8
  %320 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

321:                                              ; preds = %314
  store i32 %304, i32* %233, align 8
  store i32 %306, i32* %231, align 4
  %322 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 2
  %323 = load i32, i32* %322, align 8
  %324 = icmp ult i32 %323, %304
  br i1 %324, label %311, label %325

325:                                              ; preds = %321
  %326 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 3
  %327 = load i32, i32* %326, align 4
  %328 = icmp ult i32 %327, %306
  br i1 %328, label %318, label %329

329:                                              ; preds = %325
  %330 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %304, i32* %330, align 8
  %331 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %306, i32* %331, align 4
  %332 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 2
  %333 = load i32, i32* %332, align 8
  %334 = icmp ult i32 %333, %304
  br i1 %334, label %311, label %335

335:                                              ; preds = %329
  %336 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 3
  %337 = load i32, i32* %336, align 4
  %338 = icmp ult i32 %337, %306
  br i1 %338, label %318, label %339

339:                                              ; preds = %335
  %340 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %304, i32* %340, align 8
  %341 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %306, i32* %341, align 4
  %342 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %342) #8
  %343 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0
  %345 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %345, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %344, i64 %305, i64 %307, i64 4) #8
  %346 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %346) #8
  %347 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 0, i32 0
  %348 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 0
  %349 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 1
  %350 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %350, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %22, double 0x4026D49CB566E5F4) #8
  %351 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0
  %352 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %351, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* nonnull %352) #8
  %353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %354 = load i32, i32* %353, align 8
  %355 = zext i32 %354 to i64
  %356 = load i32, i32* %225, align 4
  %357 = zext i32 %356 to i64
  %358 = icmp eq i32 %356, 0
  br i1 %358, label %625, label %470

359:                                              ; preds = %1692
  %360 = bitcast %"class.jxl::ThreadPool"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %360) #8
  %361 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 0
  %362 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %361, align 8
  %363 = bitcast i8** %362 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %18, %"class.jxl::ThreadPool"** %363, align 8
  %364 = icmp eq i32 %1703, 0
  br i1 %364, label %381, label %365

365:                                              ; preds = %359
  %366 = bitcast %"class.jxl::ThreadPool::RunCallState.288"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %366) #8
  %367 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.288", %"class.jxl::ThreadPool::RunCallState.288"* %15, i64 0, i32 0
  %368 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.288", %"class.jxl::ThreadPool::RunCallState.288"* %15, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %367, align 8
  store %class.anon.284* %24, %class.anon.284** %368, align 8
  %369 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %360, i8* nonnull %366, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %1703) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %366) #8
  br label %381

370:                                              ; preds = %1692
  %371 = icmp eq i32 %1703, 0
  br i1 %371, label %383, label %372

372:                                              ; preds = %370
  %373 = bitcast %"class.jxl::ThreadPool::RunCallState.288"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %373) #8
  %374 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.288", %"class.jxl::ThreadPool::RunCallState.288"* %16, i64 0, i32 0
  %375 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.288", %"class.jxl::ThreadPool::RunCallState.288"* %16, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %374, align 8
  store %class.anon.284* %24, %class.anon.284** %375, align 8
  %376 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %377 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %376, align 8
  %378 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %379 = load i8*, i8** %378, align 8
  %380 = call i32 %377(i8* %379, i8* nonnull %373, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %1703) #8
  br label %381

381:                                              ; preds = %359, %365, %372
  %382 = phi i8* [ %373, %372 ], [ %360, %365 ], [ %360, %359 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %382) #8
  br label %383

383:                                              ; preds = %381, %370
  %384 = load double, double* %17, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double %384) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1708) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1704) #8
  %385 = bitcast %"class.jxl::Image3"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %385) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %385, i8 -86, i64 96, i1 false)
  %386 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 6
  %387 = load i64, i64* %386, align 8
  %388 = lshr i64 %387, 2
  %389 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 7
  %390 = load i64, i64* %389, align 8
  %391 = lshr i64 %390, 2
  %392 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %392, i64 %388, i64 %391, i64 4) #8
  %393 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %393, i64 %388, i64 %391, i64 4) #8
  %394 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %394, i64 %388, i64 %391, i64 4) #8
  %395 = bitcast %"class.jxl::Image3"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %395) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %395, i8 -86, i64 96, i1 false)
  %396 = load i64, i64* %386, align 8
  %397 = lshr i64 %396, 2
  %398 = load i64, i64* %389, align 8
  %399 = lshr i64 %398, 2
  %400 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %400, i64 %397, i64 %399, i64 4) #8
  %401 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %401, i64 %397, i64 %399, i64 4) #8
  %402 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %402, i64 %397, i64 %399, i64 4) #8
  %403 = load i64, i64* %389, align 8
  %404 = lshr i64 %403, 2
  %405 = trunc i64 %404 to i32
  %406 = bitcast %class.anon.285* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %406) #8
  %407 = getelementptr inbounds %class.anon.285, %class.anon.285* %27, i64 0, i32 0
  store %"class.jxl::Image3"* %25, %"class.jxl::Image3"** %407, align 8
  %408 = getelementptr inbounds %class.anon.285, %class.anon.285* %27, i64 0, i32 1
  store %"class.jxl::Image3"* %26, %"class.jxl::Image3"** %408, align 8
  %409 = getelementptr inbounds %class.anon.285, %class.anon.285* %27, i64 0, i32 2
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %409, align 8
  %410 = getelementptr inbounds %class.anon.285, %class.anon.285* %27, i64 0, i32 3
  store %"struct.jxl::FrameDimensions"* %42, %"struct.jxl::FrameDimensions"** %410, align 8
  %411 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %411) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %13, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double* nonnull %13) #8
  br i1 %1709, label %412, label %423

412:                                              ; preds = %383
  %413 = bitcast %"class.jxl::ThreadPool"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %413) #8
  %414 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 0
  %415 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %414, align 8
  %416 = bitcast i8** %415 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %14, %"class.jxl::ThreadPool"** %416, align 8
  %417 = icmp eq i32 %405, 0
  br i1 %417, label %434, label %418

418:                                              ; preds = %412
  %419 = bitcast %"class.jxl::ThreadPool::RunCallState.289"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %419) #8
  %420 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.289", %"class.jxl::ThreadPool::RunCallState.289"* %11, i64 0, i32 0
  %421 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.289", %"class.jxl::ThreadPool::RunCallState.289"* %11, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %420, align 8
  store %class.anon.285* %27, %class.anon.285** %421, align 8
  %422 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %413, i8* nonnull %419, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %405) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %419) #8
  br label %434

423:                                              ; preds = %383
  %424 = icmp eq i32 %405, 0
  br i1 %424, label %436, label %425

425:                                              ; preds = %423
  %426 = bitcast %"class.jxl::ThreadPool::RunCallState.289"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %426) #8
  %427 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.289", %"class.jxl::ThreadPool::RunCallState.289"* %12, i64 0, i32 0
  %428 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.289", %"class.jxl::ThreadPool::RunCallState.289"* %12, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %427, align 8
  store %class.anon.285* %27, %class.anon.285** %428, align 8
  %429 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %430 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %429, align 8
  %431 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %432 = load i8*, i8** %431, align 8
  %433 = call i32 %430(i8* %432, i8* nonnull %426, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %405) #8
  br label %434

434:                                              ; preds = %412, %418, %425
  %435 = phi i8* [ %426, %425 ], [ %413, %418 ], [ %413, %412 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %435) #8
  br label %436

436:                                              ; preds = %434, %423
  %437 = load double, double* %13, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double %437) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %411) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %406) #8
  %438 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %438) #8
  %439 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 0, i32 0
  %440 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 0
  %441 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 1
  %442 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %442, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %28, double 0x4000ADFC98523461) #8
  %443 = bitcast %"class.jxl::Image3"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %443) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %443, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %29, %"class.jxl::Image3"* nonnull dereferenceable(96) %26, i64 16, i64 16) #8
  %444 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %444) #8
  %445 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 4
  %446 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %447 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 0
  %448 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %448, i8 -86, i64 32, i1 false)
  %449 = load i32, i32* %447, align 8
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 1
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %454, i64 %450, i64 %453, i64 4) #8
  %455 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %455) #8
  %456 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %457 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %457, i8 -86, i64 32, i1 false)
  %458 = load i32, i32* %447, align 8
  %459 = zext i32 %458 to i64
  %460 = load i32, i32* %451, align 4
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %462, i64 %459, i64 %461, i64 4) #8
  %463 = bitcast %"class.jxl::Image3"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %463) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %463, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %32, %"class.jxl::Image3"* nonnull dereferenceable(96) %25, i64 16, i64 16) #8
  %464 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 1
  %465 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 4
  %466 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %467 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %467, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %468 = load i32, i32* %464, align 4
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %637, label %634

470:                                              ; preds = %339
  %471 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %472 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 4
  %473 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %474 = icmp eq i32 %354, 0
  %475 = shl nuw nsw i64 %355, 2
  %476 = and i64 %355, 4294967288
  %477 = add nsw i64 %476, -8
  %478 = lshr exact i64 %477, 3
  %479 = add nuw nsw i64 %478, 1
  %480 = icmp ult i32 %354, 8
  %481 = and i64 %355, 4294967288
  %482 = and i64 %479, 1
  %483 = icmp eq i64 %477, 0
  %484 = sub nuw nsw i64 %479, %482
  %485 = icmp eq i64 %482, 0
  %486 = icmp eq i64 %481, %355
  %487 = and i64 %355, 3
  %488 = icmp eq i64 %487, 0
  br label %489

489:                                              ; preds = %595, %470
  %490 = phi i64 [ 0, %470 ], [ %596, %595 ]
  %491 = load i8*, i8** %471, align 8
  %492 = load i64, i64* %472, align 8
  %493 = mul i64 %492, %490
  %494 = getelementptr inbounds i8, i8* %491, i64 %493
  %495 = ptrtoint i8* %494 to i64
  %496 = and i64 %495, 63
  %497 = icmp eq i64 %496, 0
  call void @llvm.assume(i1 %497) #8
  %498 = bitcast i8* %494 to float*
  %499 = load i8*, i8** %473, align 8
  %500 = load i64, i64* %232, align 8
  %501 = mul i64 %500, %490
  %502 = getelementptr inbounds i8, i8* %499, i64 %501
  %503 = ptrtoint i8* %502 to i64
  %504 = and i64 %503, 63
  %505 = icmp eq i64 %504, 0
  call void @llvm.assume(i1 %505) #8
  %506 = bitcast i8* %502 to float*
  br i1 %474, label %595, label %507

507:                                              ; preds = %489
  br i1 %480, label %508, label %526

508:                                              ; preds = %594, %526, %507
  %509 = phi i64 [ 0, %526 ], [ 0, %507 ], [ %481, %594 ]
  %510 = xor i64 %509, -1
  %511 = add nsw i64 %510, %355
  br i1 %488, label %523, label %512

512:                                              ; preds = %508, %512
  %513 = phi i64 [ %520, %512 ], [ %509, %508 ]
  %514 = phi i64 [ %521, %512 ], [ %487, %508 ]
  %515 = getelementptr inbounds float, float* %498, i64 %513
  %516 = load float, float* %515, align 4
  %517 = getelementptr inbounds float, float* %506, i64 %513
  %518 = load float, float* %517, align 4
  %519 = fsub float %518, %516
  store float %519, float* %517, align 4
  %520 = add nuw nsw i64 %513, 1
  %521 = add i64 %514, -1
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %523, label %512, !llvm.loop !202

523:                                              ; preds = %512, %508
  %524 = phi i64 [ %509, %508 ], [ %520, %512 ]
  %525 = icmp ult i64 %511, 3
  br i1 %525, label %595, label %598

526:                                              ; preds = %507
  %527 = getelementptr i8, i8* %499, i64 %475
  %528 = getelementptr i8, i8* %527, i64 %501
  %529 = getelementptr i8, i8* %491, i64 %475
  %530 = mul i64 %492, %490
  %531 = getelementptr i8, i8* %529, i64 %530
  %532 = icmp ult i8* %502, %531
  %533 = icmp ult i8* %494, %528
  %534 = and i1 %532, %533
  br i1 %534, label %508, label %535

535:                                              ; preds = %526
  br i1 %483, label %575, label %536

536:                                              ; preds = %535, %536
  %537 = phi i64 [ %572, %536 ], [ 0, %535 ]
  %538 = phi i64 [ %573, %536 ], [ %484, %535 ]
  %539 = getelementptr inbounds float, float* %498, i64 %537
  %540 = bitcast float* %539 to <4 x float>*
  %541 = load <4 x float>, <4 x float>* %540, align 64, !alias.scope !203
  %542 = getelementptr inbounds float, float* %539, i64 4
  %543 = bitcast float* %542 to <4 x float>*
  %544 = load <4 x float>, <4 x float>* %543, align 16, !alias.scope !203
  %545 = getelementptr inbounds float, float* %506, i64 %537
  %546 = bitcast float* %545 to <4 x float>*
  %547 = load <4 x float>, <4 x float>* %546, align 64, !alias.scope !206, !noalias !203
  %548 = getelementptr inbounds float, float* %545, i64 4
  %549 = bitcast float* %548 to <4 x float>*
  %550 = load <4 x float>, <4 x float>* %549, align 16, !alias.scope !206, !noalias !203
  %551 = fsub <4 x float> %547, %541
  %552 = fsub <4 x float> %550, %544
  %553 = bitcast float* %545 to <4 x float>*
  store <4 x float> %551, <4 x float>* %553, align 64, !alias.scope !206, !noalias !203
  %554 = bitcast float* %548 to <4 x float>*
  store <4 x float> %552, <4 x float>* %554, align 16, !alias.scope !206, !noalias !203
  %555 = or i64 %537, 8
  %556 = getelementptr inbounds float, float* %498, i64 %555
  %557 = bitcast float* %556 to <4 x float>*
  %558 = load <4 x float>, <4 x float>* %557, align 32, !alias.scope !203
  %559 = getelementptr inbounds float, float* %556, i64 4
  %560 = bitcast float* %559 to <4 x float>*
  %561 = load <4 x float>, <4 x float>* %560, align 16, !alias.scope !203
  %562 = getelementptr inbounds float, float* %506, i64 %555
  %563 = bitcast float* %562 to <4 x float>*
  %564 = load <4 x float>, <4 x float>* %563, align 32, !alias.scope !206, !noalias !203
  %565 = getelementptr inbounds float, float* %562, i64 4
  %566 = bitcast float* %565 to <4 x float>*
  %567 = load <4 x float>, <4 x float>* %566, align 16, !alias.scope !206, !noalias !203
  %568 = fsub <4 x float> %564, %558
  %569 = fsub <4 x float> %567, %561
  %570 = bitcast float* %562 to <4 x float>*
  store <4 x float> %568, <4 x float>* %570, align 32, !alias.scope !206, !noalias !203
  %571 = bitcast float* %565 to <4 x float>*
  store <4 x float> %569, <4 x float>* %571, align 16, !alias.scope !206, !noalias !203
  %572 = add i64 %537, 16
  %573 = add i64 %538, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %536, !llvm.loop !208

575:                                              ; preds = %536, %535
  %576 = phi i64 [ 0, %535 ], [ %572, %536 ]
  br i1 %485, label %594, label %577

577:                                              ; preds = %575
  %578 = getelementptr inbounds float, float* %498, i64 %576
  %579 = bitcast float* %578 to <4 x float>*
  %580 = load <4 x float>, <4 x float>* %579, align 32, !alias.scope !203
  %581 = getelementptr inbounds float, float* %578, i64 4
  %582 = bitcast float* %581 to <4 x float>*
  %583 = load <4 x float>, <4 x float>* %582, align 16, !alias.scope !203
  %584 = getelementptr inbounds float, float* %506, i64 %576
  %585 = bitcast float* %584 to <4 x float>*
  %586 = load <4 x float>, <4 x float>* %585, align 32, !alias.scope !206, !noalias !203
  %587 = getelementptr inbounds float, float* %584, i64 4
  %588 = bitcast float* %587 to <4 x float>*
  %589 = load <4 x float>, <4 x float>* %588, align 16, !alias.scope !206, !noalias !203
  %590 = fsub <4 x float> %586, %580
  %591 = fsub <4 x float> %589, %583
  %592 = bitcast float* %584 to <4 x float>*
  store <4 x float> %590, <4 x float>* %592, align 32, !alias.scope !206, !noalias !203
  %593 = bitcast float* %587 to <4 x float>*
  store <4 x float> %591, <4 x float>* %593, align 16, !alias.scope !206, !noalias !203
  br label %594

594:                                              ; preds = %575, %577
  br i1 %486, label %595, label %508

595:                                              ; preds = %523, %598, %594, %489
  %596 = add nuw nsw i64 %490, 1
  %597 = icmp eq i64 %596, %357
  br i1 %597, label %625, label %489

598:                                              ; preds = %523, %598
  %599 = phi i64 [ %623, %598 ], [ %524, %523 ]
  %600 = getelementptr inbounds float, float* %498, i64 %599
  %601 = load float, float* %600, align 4
  %602 = getelementptr inbounds float, float* %506, i64 %599
  %603 = load float, float* %602, align 4
  %604 = fsub float %603, %601
  store float %604, float* %602, align 4
  %605 = add nuw nsw i64 %599, 1
  %606 = getelementptr inbounds float, float* %498, i64 %605
  %607 = load float, float* %606, align 4
  %608 = getelementptr inbounds float, float* %506, i64 %605
  %609 = load float, float* %608, align 4
  %610 = fsub float %609, %607
  store float %610, float* %608, align 4
  %611 = add nuw nsw i64 %599, 2
  %612 = getelementptr inbounds float, float* %498, i64 %611
  %613 = load float, float* %612, align 4
  %614 = getelementptr inbounds float, float* %506, i64 %611
  %615 = load float, float* %614, align 4
  %616 = fsub float %615, %613
  store float %616, float* %614, align 4
  %617 = add nuw nsw i64 %599, 3
  %618 = getelementptr inbounds float, float* %498, i64 %617
  %619 = load float, float* %618, align 4
  %620 = getelementptr inbounds float, float* %506, i64 %617
  %621 = load float, float* %620, align 4
  %622 = fsub float %621, %619
  store float %622, float* %620, align 4
  %623 = add nuw nsw i64 %599, 4
  %624 = icmp eq i64 %623, %355
  br i1 %624, label %595, label %598, !llvm.loop !209

625:                                              ; preds = %595, %339
  %626 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1
  %627 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %626, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %627) #8
  %628 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %626, i64 0, i32 0, i32 0
  %629 = load i32, i32* %628, align 8
  %630 = zext i32 %629 to i64
  %631 = load i32, i32* %59, align 4
  %632 = zext i32 %631 to i64
  %633 = icmp eq i32 %631, 0
  br i1 %633, label %1526, label %1370

634:                                              ; preds = %436
  %635 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %636 = load i32, i32* %466, align 8
  br label %641

637:                                              ; preds = %670, %436
  %638 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %638, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %639 = load i32, i32* %464, align 4
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %1306, label %1253

641:                                              ; preds = %634, %670
  %642 = phi i32 [ %468, %634 ], [ %671, %670 ]
  %643 = phi i32 [ %636, %634 ], [ %672, %670 ]
  %644 = phi i64 [ 0, %634 ], [ %673, %670 ]
  %645 = load i64, i64* %465, align 8
  %646 = mul i64 %645, %644
  %647 = load i8*, i8** %635, align 8
  %648 = ptrtoint i8* %647 to i64
  %649 = and i64 %648, 63
  %650 = icmp eq i64 %649, 0
  call void @llvm.assume(i1 %650) #8
  %651 = getelementptr inbounds i8, i8* %647, i64 %646
  %652 = ptrtoint i8* %651 to i64
  %653 = and i64 %652, 63
  %654 = icmp eq i64 %653, 0
  call void @llvm.assume(i1 %654) #8
  %655 = bitcast i8* %651 to float*
  %656 = add nuw nsw i64 %644, 16
  %657 = load i8*, i8** %446, align 8
  %658 = load i64, i64* %445, align 8
  %659 = mul i64 %658, %656
  %660 = getelementptr inbounds i8, i8* %657, i64 %659
  %661 = ptrtoint i8* %660 to i64
  %662 = and i64 %661, 63
  %663 = icmp eq i64 %662, 0
  call void @llvm.assume(i1 %663) #8
  %664 = icmp eq i32 %643, 0
  br i1 %664, label %670, label %665

665:                                              ; preds = %641
  %666 = getelementptr inbounds i8, i8* %660, i64 64
  %667 = bitcast i8* %666 to float*
  br label %676

668:                                              ; preds = %676
  %669 = load i32, i32* %464, align 4
  br label %670

670:                                              ; preds = %668, %641
  %671 = phi i32 [ %669, %668 ], [ %642, %641 ]
  %672 = phi i32 [ %688, %668 ], [ 0, %641 ]
  %673 = add nuw nsw i64 %644, 1
  %674 = zext i32 %671 to i64
  %675 = icmp ult i64 %673, %674
  br i1 %675, label %641, label %637

676:                                              ; preds = %665, %676
  %677 = phi i64 [ 0, %665 ], [ %687, %676 ]
  %678 = getelementptr inbounds float, float* %667, i64 %677
  %679 = bitcast float* %678 to <4 x float>*
  %680 = load <4 x float>, <4 x float>* %679, align 16, !alias.scope !210
  %681 = getelementptr inbounds float, float* %655, i64 %677
  %682 = bitcast float* %681 to <4 x float>*
  %683 = load <4 x float>, <4 x float>* %682, align 16, !alias.scope !213
  %684 = fmul <4 x float> %683, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %685 = fcmp olt <4 x float> %684, %680
  %686 = select <4 x i1> %685, <4 x float> %680, <4 x float> %684
  store <4 x float> %686, <4 x float>* %682, align 16, !alias.scope !216
  %687 = add nuw nsw i64 %677, 4
  %688 = load i32, i32* %466, align 8
  %689 = zext i32 %688 to i64
  %690 = icmp ult i64 %687, %689
  br i1 %690, label %676, label %668

691:                                              ; preds = %1241
  %692 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %693 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %694 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %695 = load i32, i32* %1366, align 8
  br label %770

696:                                              ; preds = %1363
  %697 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %698 = load i32, i32* %1366, align 8
  br label %703

699:                                              ; preds = %732, %1363
  %700 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %700, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %701 = load i32, i32* %1364, align 4
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %1180, label %1127

703:                                              ; preds = %696, %732
  %704 = phi i32 [ %1368, %696 ], [ %733, %732 ]
  %705 = phi i32 [ %698, %696 ], [ %734, %732 ]
  %706 = phi i64 [ 0, %696 ], [ %735, %732 ]
  %707 = load i64, i64* %1365, align 8
  %708 = mul i64 %707, %706
  %709 = load i8*, i8** %697, align 8
  %710 = ptrtoint i8* %709 to i64
  %711 = and i64 %710, 63
  %712 = icmp eq i64 %711, 0
  call void @llvm.assume(i1 %712) #8
  %713 = getelementptr inbounds i8, i8* %709, i64 %708
  %714 = ptrtoint i8* %713 to i64
  %715 = and i64 %714, 63
  %716 = icmp eq i64 %715, 0
  call void @llvm.assume(i1 %716) #8
  %717 = bitcast i8* %713 to float*
  %718 = add nuw nsw i64 %706, 16
  %719 = load i8*, i8** %446, align 8
  %720 = load i64, i64* %445, align 8
  %721 = mul i64 %720, %718
  %722 = getelementptr inbounds i8, i8* %719, i64 %721
  %723 = ptrtoint i8* %722 to i64
  %724 = and i64 %723, 63
  %725 = icmp eq i64 %724, 0
  call void @llvm.assume(i1 %725) #8
  %726 = icmp eq i32 %705, 0
  br i1 %726, label %732, label %727

727:                                              ; preds = %703
  %728 = getelementptr inbounds i8, i8* %722, i64 64
  %729 = bitcast i8* %728 to float*
  br label %738

730:                                              ; preds = %738
  %731 = load i32, i32* %1364, align 4
  br label %732

732:                                              ; preds = %730, %703
  %733 = phi i32 [ %731, %730 ], [ %704, %703 ]
  %734 = phi i32 [ %750, %730 ], [ 0, %703 ]
  %735 = add nuw nsw i64 %706, 1
  %736 = zext i32 %733 to i64
  %737 = icmp ult i64 %735, %736
  br i1 %737, label %703, label %699

738:                                              ; preds = %727, %738
  %739 = phi i64 [ 0, %727 ], [ %749, %738 ]
  %740 = getelementptr inbounds float, float* %729, i64 %739
  %741 = bitcast float* %740 to <4 x float>*
  %742 = load <4 x float>, <4 x float>* %741, align 16, !alias.scope !219
  %743 = getelementptr inbounds float, float* %717, i64 %739
  %744 = bitcast float* %743 to <4 x float>*
  %745 = load <4 x float>, <4 x float>* %744, align 16, !alias.scope !222
  %746 = fmul <4 x float> %745, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %747 = fcmp olt <4 x float> %746, %742
  %748 = select <4 x i1> %747, <4 x float> %742, <4 x float> %746
  store <4 x float> %748, <4 x float>* %744, align 16, !alias.scope !225
  %749 = add nuw nsw i64 %739, 4
  %750 = load i32, i32* %1366, align 8
  %751 = zext i32 %750 to i64
  %752 = icmp ult i64 %749, %751
  br i1 %752, label %738, label %730

753:                                              ; preds = %814, %1241
  %754 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %754) #8
  %755 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 4
  %756 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %757 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %757, i8 -86, i64 32, i1 false)
  %758 = load i32, i32* %466, align 8
  %759 = zext i32 %758 to i64
  %760 = load i32, i32* %464, align 4
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %762, i64 %759, i64 %761, i64 4) #8
  %763 = load i32, i32* %464, align 4
  %764 = icmp eq i32 %763, 0
  br i1 %764, label %842, label %765

765:                                              ; preds = %753
  %766 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %767 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %768 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %769 = load i32, i32* %466, align 8
  br label %1055

770:                                              ; preds = %691, %814
  %771 = phi i32 [ %1251, %691 ], [ %815, %814 ]
  %772 = phi i32 [ %695, %691 ], [ %816, %814 ]
  %773 = phi i64 [ 0, %691 ], [ %817, %814 ]
  %774 = load i64, i64* %1365, align 8
  %775 = mul i64 %774, %773
  %776 = load i8*, i8** %692, align 8
  %777 = ptrtoint i8* %776 to i64
  %778 = and i64 %777, 63
  %779 = icmp eq i64 %778, 0
  call void @llvm.assume(i1 %779) #8
  %780 = getelementptr inbounds i8, i8* %776, i64 %775
  %781 = ptrtoint i8* %780 to i64
  %782 = and i64 %781, 63
  %783 = icmp eq i64 %782, 0
  call void @llvm.assume(i1 %783) #8
  %784 = bitcast i8* %780 to float*
  %785 = load i8*, i8** %693, align 8
  %786 = ptrtoint i8* %785 to i64
  %787 = and i64 %786, 63
  %788 = icmp eq i64 %787, 0
  call void @llvm.assume(i1 %788) #8
  %789 = getelementptr inbounds i8, i8* %785, i64 %775
  %790 = ptrtoint i8* %789 to i64
  %791 = and i64 %790, 63
  %792 = icmp eq i64 %791, 0
  call void @llvm.assume(i1 %792) #8
  %793 = bitcast i8* %789 to float*
  %794 = load i8*, i8** %694, align 8
  %795 = ptrtoint i8* %794 to i64
  %796 = and i64 %795, 63
  %797 = icmp eq i64 %796, 0
  call void @llvm.assume(i1 %797) #8
  %798 = getelementptr inbounds i8, i8* %794, i64 %775
  %799 = ptrtoint i8* %798 to i64
  %800 = and i64 %799, 63
  %801 = icmp eq i64 %800, 0
  call void @llvm.assume(i1 %801) #8
  %802 = bitcast i8* %798 to float*
  %803 = load i8*, i8** %1246, align 8
  %804 = load i64, i64* %1245, align 8
  %805 = mul i64 %804, %773
  %806 = getelementptr inbounds i8, i8* %803, i64 %805
  %807 = ptrtoint i8* %806 to i64
  %808 = and i64 %807, 63
  %809 = icmp eq i64 %808, 0
  call void @llvm.assume(i1 %809) #8
  %810 = bitcast i8* %806 to float*
  %811 = icmp eq i32 %772, 0
  br i1 %811, label %814, label %820

812:                                              ; preds = %820
  %813 = load i32, i32* %1364, align 4
  br label %814

814:                                              ; preds = %812, %770
  %815 = phi i32 [ %813, %812 ], [ %771, %770 ]
  %816 = phi i32 [ %839, %812 ], [ 0, %770 ]
  %817 = add nuw nsw i64 %773, 1
  %818 = zext i32 %815 to i64
  %819 = icmp ult i64 %817, %818
  br i1 %819, label %770, label %753

820:                                              ; preds = %770, %820
  %821 = phi i64 [ %838, %820 ], [ 0, %770 ]
  %822 = getelementptr inbounds float, float* %784, i64 %821
  %823 = bitcast float* %822 to <4 x float>*
  %824 = load <4 x float>, <4 x float>* %823, align 16, !alias.scope !228
  %825 = fmul <4 x float> %824, <float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000>
  %826 = getelementptr inbounds float, float* %793, i64 %821
  %827 = bitcast float* %826 to <4 x float>*
  %828 = load <4 x float>, <4 x float>* %827, align 16, !alias.scope !231
  %829 = fmul <4 x float> %828, <float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000>
  %830 = fadd <4 x float> %825, %829
  %831 = getelementptr inbounds float, float* %802, i64 %821
  %832 = bitcast float* %831 to <4 x float>*
  %833 = load <4 x float>, <4 x float>* %832, align 16, !alias.scope !234
  %834 = fmul <4 x float> %833, <float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000>
  %835 = fadd <4 x float> %834, %830
  %836 = getelementptr inbounds float, float* %810, i64 %821
  %837 = bitcast float* %836 to <4 x float>*
  store <4 x float> %835, <4 x float>* %837, align 16, !alias.scope !237
  %838 = add nuw nsw i64 %821, 4
  %839 = load i32, i32* %1366, align 8
  %840 = zext i32 %839 to i64
  %841 = icmp ult i64 %838, %840
  br i1 %841, label %820, label %812

842:                                              ; preds = %1099, %753
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %33)
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %34)
  %843 = load float, float* %43, align 8
  %844 = call float @_ZN3jxl14InitialQuantDCEf(float %843) #8
  %845 = fmul float %844, 0x3FEC36E6E0000000
  %846 = bitcast float* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %846) #8
  %847 = load float, float* %43, align 8
  %848 = fdiv float 0x400421F180000000, %847
  store float %848, float* %35, align 4
  %849 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %849) #8
  %850 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %851 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %851, i8 -86, i64 32, i1 false)
  %852 = load i64, i64* %1694, align 8
  %853 = load i64, i64* %1698, align 8
  %854 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %854, i64 %852, i64 %853, i64 4) #8
  %855 = bitcast %class.anon.286* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %855) #8
  %856 = getelementptr inbounds %class.anon.286, %class.anon.286* %37, i64 0, i32 0
  store %"class.jxl::Plane.97"* %34, %"class.jxl::Plane.97"** %856, align 8
  %857 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %857) #8
  %858 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1069547520, i32 3, i32 1068708659>, <4 x i32>* %858, align 16
  %859 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 2, i32 0
  %860 = bitcast i32* %859 to <4 x i32>*
  store <4 x i32> <i32 12, i32 1067030938, i32 13, i32 1067030938>, <4 x i32>* %860, align 16
  %861 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 4, i32 0
  %862 = bitcast i32* %861 to <4 x i32>*
  store <4 x i32> <i32 14, i32 1066611507, i32 15, i32 1066611507>, <4 x i32>* %862, align 16
  %863 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 6, i32 0
  %864 = bitcast i32* %863 to <4 x i32>*
  store <4 x i32> <i32 16, i32 1066611507, i32 17, i32 1066611507>, <4 x i32>* %864, align 16
  %865 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 8, i32 0
  %866 = bitcast i32* %865 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1065353216, i32 6, i32 1061997773>, <4 x i32>* %866, align 16
  %867 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 10, i32 0
  %868 = bitcast i32* %867 to <4 x i32>*
  store <4 x i32> <i32 7, i32 1061997773, i32 4, i32 1045220557>, <4 x i32>* %868, align 16
  %869 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 12, i32 0
  %870 = bitcast i32* %869 to <4 x i32>*
  store <4 x i32> <i32 11, i32 1045220557, i32 10, i32 1045220557>, <4 x i32>* %870, align 16
  %871 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 14, i32 0
  %872 = bitcast i32* %871 to <4 x i32>*
  store <4 x i32> <i32 5, i32 1045220557, i32 20, i32 1036831949>, <4 x i32>* %872, align 16
  %873 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 16, i32 0
  %874 = bitcast i32* %873 to <4 x i32>*
  store <4 x i32> <i32 19, i32 1036831949, i32 18, i32 1025758986>, <4 x i32>* %874, align 16
  %875 = bitcast float* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %875) #8
  store float 0xFFFFFFFFE0000000, float* %39, align 4
  %876 = load float, float* %43, align 8
  %877 = call float @sqrtf(float %876) #26
  %878 = call float @llvm.fabs.f32(float %877)
  %879 = fcmp oeq float %876, 0xFFF0000000000000
  %880 = fmul float %878, 5.000000e-01
  %881 = fadd float %880, 0x3E45798EE0000000
  %882 = select i1 %879, float 0x7FF0000000000000, float %881
  store float %882, float* %39, align 4
  %883 = load i64, i64* %23, align 8
  %884 = mul i64 %883, %1701
  %885 = trunc i64 %884 to i32
  %886 = bitcast %class.anon.287* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %886) #8
  %887 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 0
  store i64* %23, i64** %887, align 8
  %888 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 1
  store %"class.jxl::Plane.97"* %36, %"class.jxl::Plane.97"** %888, align 8
  %889 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %889, align 8
  %890 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 3
  store float* %35, float** %890, align 8
  %891 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 4
  store [18 x %"struct.std::__1::pair.260"]* %38, [18 x %"struct.std::__1::pair.260"]** %891, align 8
  %892 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 5
  store %class.anon.286* %37, %class.anon.286** %892, align 8
  %893 = getelementptr inbounds %class.anon.287, %class.anon.287* %40, i64 0, i32 6
  store float* %39, float** %893, align 8
  %894 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %894) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %9) #8
  br i1 %1709, label %895, label %906

895:                                              ; preds = %842
  %896 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %896) #8
  %897 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %898 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %897, align 8
  %899 = bitcast i8** %898 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %899, align 8
  %900 = icmp eq i32 %885, 0
  br i1 %900, label %917, label %901

901:                                              ; preds = %895
  %902 = bitcast %"class.jxl::ThreadPool::RunCallState.292"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %902) #8
  %903 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.292", %"class.jxl::ThreadPool::RunCallState.292"* %7, i64 0, i32 0
  %904 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.292", %"class.jxl::ThreadPool::RunCallState.292"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %903, align 8
  store %class.anon.287* %40, %class.anon.287** %904, align 8
  %905 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %896, i8* nonnull %902, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %885) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %902) #8
  br label %917

906:                                              ; preds = %842
  %907 = icmp eq i32 %885, 0
  br i1 %907, label %919, label %908

908:                                              ; preds = %906
  %909 = bitcast %"class.jxl::ThreadPool::RunCallState.292"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %909) #8
  %910 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.292", %"class.jxl::ThreadPool::RunCallState.292"* %8, i64 0, i32 0
  %911 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.292", %"class.jxl::ThreadPool::RunCallState.292"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %910, align 8
  store %class.anon.287* %40, %class.anon.287** %911, align 8
  %912 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %913 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %912, align 8
  %914 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %915 = load i8*, i8** %914, align 8
  %916 = call i32 %913(i8* %915, i8* nonnull %909, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %885) #8
  br label %917

917:                                              ; preds = %895, %901, %908
  %918 = phi i8* [ %909, %908 ], [ %896, %901 ], [ %896, %895 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %918) #8
  br label %919

919:                                              ; preds = %917, %906
  %920 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %920) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %894) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %886) #8
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36)
  %921 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 7
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIhEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), %"class.jxl::Plane"* dereferenceable(32) %921)
  %922 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 3
  %923 = load i64, i64* %386, align 8
  %924 = load i64, i64* %389, align 8
  call void @_ZN3jxl14DumpAcStrategyERKNS_15AcStrategyImageEmmPKcPNS_6AuxOutE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %922, i64 %923, i64 %924, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), %"struct.jxl::AuxOut"* %5) #8
  %925 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 5
  %926 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 6
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %925, float %845, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36, %"class.jxl::Plane.53"* %926) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %875) #8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %857) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %855) #8
  %927 = load i8*, i8** %850, align 8
  store i8* null, i8** %850, align 8
  %928 = icmp eq i8* %927, null
  br i1 %928, label %930, label %929

929:                                              ; preds = %919
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %927) #8
  br label %930

930:                                              ; preds = %919, %929
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %849) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %846) #8
  %931 = load i8*, i8** %756, align 8
  store i8* null, i8** %756, align 8
  %932 = icmp eq i8* %931, null
  br i1 %932, label %934, label %933

933:                                              ; preds = %930
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %931) #8
  br label %934

934:                                              ; preds = %930, %933
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %754) #8
  %935 = load i8*, i8** %1246, align 8
  store i8* null, i8** %1246, align 8
  %936 = icmp eq i8* %935, null
  br i1 %936, label %938, label %937

937:                                              ; preds = %934
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %935) #8
  br label %938

938:                                              ; preds = %934, %937
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1244) #8
  %939 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %940 = load i8*, i8** %939, align 8
  store i8* null, i8** %939, align 8
  %941 = icmp eq i8* %940, null
  br i1 %941, label %943, label %942

942:                                              ; preds = %938
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %940) #8
  br label %943

943:                                              ; preds = %942, %938
  %944 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %945 = load i8*, i8** %944, align 8
  store i8* null, i8** %944, align 8
  %946 = icmp eq i8* %945, null
  br i1 %946, label %948, label %947

947:                                              ; preds = %943
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %945) #8
  br label %948

948:                                              ; preds = %947, %943
  %949 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %950 = load i8*, i8** %949, align 8
  store i8* null, i8** %949, align 8
  %951 = icmp eq i8* %950, null
  br i1 %951, label %953, label %952

952:                                              ; preds = %948
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %950) #8
  br label %953

953:                                              ; preds = %948, %952
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %463) #8
  %954 = load i8*, i8** %456, align 8
  store i8* null, i8** %456, align 8
  %955 = icmp eq i8* %954, null
  br i1 %955, label %957, label %956

956:                                              ; preds = %953
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %954) #8
  br label %957

957:                                              ; preds = %953, %956
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %455) #8
  %958 = load i8*, i8** %446, align 8
  store i8* null, i8** %446, align 8
  %959 = icmp eq i8* %958, null
  br i1 %959, label %961, label %960

960:                                              ; preds = %957
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %958) #8
  br label %961

961:                                              ; preds = %957, %960
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %444) #8
  %962 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %963 = load i8*, i8** %962, align 8
  store i8* null, i8** %962, align 8
  %964 = icmp eq i8* %963, null
  br i1 %964, label %966, label %965

965:                                              ; preds = %961
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %963) #8
  br label %966

966:                                              ; preds = %965, %961
  %967 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %968 = load i8*, i8** %967, align 8
  store i8* null, i8** %967, align 8
  %969 = icmp eq i8* %968, null
  br i1 %969, label %971, label %970

970:                                              ; preds = %966
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %968) #8
  br label %971

971:                                              ; preds = %970, %966
  %972 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %973 = load i8*, i8** %972, align 8
  store i8* null, i8** %972, align 8
  %974 = icmp eq i8* %973, null
  br i1 %974, label %976, label %975

975:                                              ; preds = %971
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %973) #8
  br label %976

976:                                              ; preds = %971, %975
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %443) #8
  %977 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %439, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %439, align 8
  %978 = icmp eq %"struct.jxl::RecursiveGaussian"* %977, null
  br i1 %978, label %983, label %979

979:                                              ; preds = %976
  %980 = bitcast %"struct.jxl::RecursiveGaussian"* %977 to i8*
  %981 = load void (i8*, i8*)*, void (i8*, i8*)** %440, align 8
  %982 = load i8*, i8** %441, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %980, void (i8*, i8*)* %981, i8* %982, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %983

983:                                              ; preds = %976, %979
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %438) #8
  %984 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %985 = load i8*, i8** %984, align 8
  store i8* null, i8** %984, align 8
  %986 = icmp eq i8* %985, null
  br i1 %986, label %988, label %987

987:                                              ; preds = %983
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %985) #8
  br label %988

988:                                              ; preds = %987, %983
  %989 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %990 = load i8*, i8** %989, align 8
  store i8* null, i8** %989, align 8
  %991 = icmp eq i8* %990, null
  br i1 %991, label %993, label %992

992:                                              ; preds = %988
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %990) #8
  br label %993

993:                                              ; preds = %992, %988
  %994 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %995 = load i8*, i8** %994, align 8
  store i8* null, i8** %994, align 8
  %996 = icmp eq i8* %995, null
  br i1 %996, label %998, label %997

997:                                              ; preds = %993
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %995) #8
  br label %998

998:                                              ; preds = %993, %997
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %395) #8
  %999 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1000 = load i8*, i8** %999, align 8
  store i8* null, i8** %999, align 8
  %1001 = icmp eq i8* %1000, null
  br i1 %1001, label %1003, label %1002

1002:                                             ; preds = %998
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1000) #8
  br label %1003

1003:                                             ; preds = %1002, %998
  %1004 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1005 = load i8*, i8** %1004, align 8
  store i8* null, i8** %1004, align 8
  %1006 = icmp eq i8* %1005, null
  br i1 %1006, label %1008, label %1007

1007:                                             ; preds = %1003
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1005) #8
  br label %1008

1008:                                             ; preds = %1007, %1003
  %1009 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1010 = load i8*, i8** %1009, align 8
  store i8* null, i8** %1009, align 8
  %1011 = icmp eq i8* %1010, null
  br i1 %1011, label %1013, label %1012

1012:                                             ; preds = %1008
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1010) #8
  br label %1013

1013:                                             ; preds = %1008, %1012
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %385) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1693) #8
  %1014 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %347, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %347, align 8
  %1015 = icmp eq %"struct.jxl::RecursiveGaussian"* %1014, null
  br i1 %1015, label %1020, label %1016

1016:                                             ; preds = %1013
  %1017 = bitcast %"struct.jxl::RecursiveGaussian"* %1014 to i8*
  %1018 = load void (i8*, i8*)*, void (i8*, i8*)** %348, align 8
  %1019 = load i8*, i8** %349, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %1017, void (i8*, i8*)* %1018, i8* %1019, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %1020

1020:                                             ; preds = %1013, %1016
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %346) #8
  %1021 = load i8*, i8** %343, align 8
  store i8* null, i8** %343, align 8
  %1022 = icmp eq i8* %1021, null
  br i1 %1022, label %1024, label %1023

1023:                                             ; preds = %1020
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1021) #8
  br label %1024

1024:                                             ; preds = %1020, %1023
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %342) #8
  %1025 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1026 = load i8*, i8** %1025, align 8
  store i8* null, i8** %1025, align 8
  %1027 = icmp eq i8* %1026, null
  br i1 %1027, label %1029, label %1028

1028:                                             ; preds = %1024
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1026) #8
  br label %1029

1029:                                             ; preds = %1028, %1024
  %1030 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1031 = load i8*, i8** %1030, align 8
  store i8* null, i8** %1030, align 8
  %1032 = icmp eq i8* %1031, null
  br i1 %1032, label %1034, label %1033

1033:                                             ; preds = %1029
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1031) #8
  br label %1034

1034:                                             ; preds = %1033, %1029
  %1035 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1036 = load i8*, i8** %1035, align 8
  store i8* null, i8** %1035, align 8
  %1037 = icmp eq i8* %1036, null
  br i1 %1037, label %1039, label %1038

1038:                                             ; preds = %1034
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1036) #8
  br label %1039

1039:                                             ; preds = %1034, %1038
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %220) #8
  %1040 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1041 = load i8*, i8** %1040, align 8
  store i8* null, i8** %1040, align 8
  %1042 = icmp eq i8* %1041, null
  br i1 %1042, label %1044, label %1043

1043:                                             ; preds = %1039
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1041) #8
  br label %1044

1044:                                             ; preds = %1043, %1039
  %1045 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1046 = load i8*, i8** %1045, align 8
  store i8* null, i8** %1045, align 8
  %1047 = icmp eq i8* %1046, null
  br i1 %1047, label %1049, label %1048

1048:                                             ; preds = %1044
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1046) #8
  br label %1049

1049:                                             ; preds = %1048, %1044
  %1050 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1051 = load i8*, i8** %1050, align 8
  store i8* null, i8** %1050, align 8
  %1052 = icmp eq i8* %1051, null
  br i1 %1052, label %1054, label %1053

1053:                                             ; preds = %1049
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1051) #8
  br label %1054

1054:                                             ; preds = %1049, %1053
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #8
  ret i32 0

1055:                                             ; preds = %765, %1099
  %1056 = phi i32 [ %763, %765 ], [ %1100, %1099 ]
  %1057 = phi i32 [ %769, %765 ], [ %1101, %1099 ]
  %1058 = phi i64 [ 0, %765 ], [ %1102, %1099 ]
  %1059 = load i64, i64* %465, align 8
  %1060 = mul i64 %1059, %1058
  %1061 = load i8*, i8** %766, align 8
  %1062 = ptrtoint i8* %1061 to i64
  %1063 = and i64 %1062, 63
  %1064 = icmp eq i64 %1063, 0
  call void @llvm.assume(i1 %1064) #8
  %1065 = getelementptr inbounds i8, i8* %1061, i64 %1060
  %1066 = ptrtoint i8* %1065 to i64
  %1067 = and i64 %1066, 63
  %1068 = icmp eq i64 %1067, 0
  call void @llvm.assume(i1 %1068) #8
  %1069 = bitcast i8* %1065 to float*
  %1070 = load i8*, i8** %767, align 8
  %1071 = ptrtoint i8* %1070 to i64
  %1072 = and i64 %1071, 63
  %1073 = icmp eq i64 %1072, 0
  call void @llvm.assume(i1 %1073) #8
  %1074 = getelementptr inbounds i8, i8* %1070, i64 %1060
  %1075 = ptrtoint i8* %1074 to i64
  %1076 = and i64 %1075, 63
  %1077 = icmp eq i64 %1076, 0
  call void @llvm.assume(i1 %1077) #8
  %1078 = bitcast i8* %1074 to float*
  %1079 = load i8*, i8** %768, align 8
  %1080 = ptrtoint i8* %1079 to i64
  %1081 = and i64 %1080, 63
  %1082 = icmp eq i64 %1081, 0
  call void @llvm.assume(i1 %1082) #8
  %1083 = getelementptr inbounds i8, i8* %1079, i64 %1060
  %1084 = ptrtoint i8* %1083 to i64
  %1085 = and i64 %1084, 63
  %1086 = icmp eq i64 %1085, 0
  call void @llvm.assume(i1 %1086) #8
  %1087 = bitcast i8* %1083 to float*
  %1088 = load i8*, i8** %756, align 8
  %1089 = load i64, i64* %755, align 8
  %1090 = mul i64 %1089, %1058
  %1091 = getelementptr inbounds i8, i8* %1088, i64 %1090
  %1092 = ptrtoint i8* %1091 to i64
  %1093 = and i64 %1092, 63
  %1094 = icmp eq i64 %1093, 0
  call void @llvm.assume(i1 %1094) #8
  %1095 = bitcast i8* %1091 to float*
  %1096 = icmp eq i32 %1057, 0
  br i1 %1096, label %1099, label %1105

1097:                                             ; preds = %1105
  %1098 = load i32, i32* %464, align 4
  br label %1099

1099:                                             ; preds = %1097, %1055
  %1100 = phi i32 [ %1098, %1097 ], [ %1056, %1055 ]
  %1101 = phi i32 [ %1124, %1097 ], [ 0, %1055 ]
  %1102 = add nuw nsw i64 %1058, 1
  %1103 = zext i32 %1100 to i64
  %1104 = icmp ult i64 %1102, %1103
  br i1 %1104, label %1055, label %842

1105:                                             ; preds = %1055, %1105
  %1106 = phi i64 [ %1123, %1105 ], [ 0, %1055 ]
  %1107 = getelementptr inbounds float, float* %1069, i64 %1106
  %1108 = bitcast float* %1107 to <4 x float>*
  %1109 = load <4 x float>, <4 x float>* %1108, align 16, !alias.scope !240
  %1110 = fmul <4 x float> %1109, <float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000, float 0x401FDB9360000000>
  %1111 = getelementptr inbounds float, float* %1078, i64 %1106
  %1112 = bitcast float* %1111 to <4 x float>*
  %1113 = load <4 x float>, <4 x float>* %1112, align 16, !alias.scope !243
  %1114 = fmul <4 x float> %1113, <float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000, float 0x3FE23D70A0000000>
  %1115 = fadd <4 x float> %1110, %1114
  %1116 = getelementptr inbounds float, float* %1087, i64 %1106
  %1117 = bitcast float* %1116 to <4 x float>*
  %1118 = load <4 x float>, <4 x float>* %1117, align 16, !alias.scope !246
  %1119 = fmul <4 x float> %1118, <float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000, float 0x3FC9F13CE0000000>
  %1120 = fadd <4 x float> %1119, %1115
  %1121 = getelementptr inbounds float, float* %1095, i64 %1106
  %1122 = bitcast float* %1121 to <4 x float>*
  store <4 x float> %1120, <4 x float>* %1122, align 16, !alias.scope !249
  %1123 = add nuw nsw i64 %1106, 4
  %1124 = load i32, i32* %466, align 8
  %1125 = zext i32 %1124 to i64
  %1126 = icmp ult i64 %1123, %1125
  br i1 %1126, label %1105, label %1097

1127:                                             ; preds = %699
  %1128 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1129 = load i32, i32* %1366, align 8
  br label %1130

1130:                                             ; preds = %1174, %1127
  %1131 = phi i32 [ %701, %1127 ], [ %1175, %1174 ]
  %1132 = phi i32 [ %1129, %1127 ], [ %1176, %1174 ]
  %1133 = phi i64 [ 0, %1127 ], [ %1177, %1174 ]
  %1134 = load i64, i64* %1365, align 8
  %1135 = mul i64 %1134, %1133
  %1136 = load i8*, i8** %1128, align 8
  %1137 = ptrtoint i8* %1136 to i64
  %1138 = and i64 %1137, 63
  %1139 = icmp eq i64 %1138, 0
  call void @llvm.assume(i1 %1139) #8
  %1140 = getelementptr inbounds i8, i8* %1136, i64 %1135
  %1141 = ptrtoint i8* %1140 to i64
  %1142 = and i64 %1141, 63
  %1143 = icmp eq i64 %1142, 0
  call void @llvm.assume(i1 %1143) #8
  %1144 = bitcast i8* %1140 to float*
  %1145 = add nuw nsw i64 %1133, 16
  %1146 = load i8*, i8** %446, align 8
  %1147 = load i64, i64* %445, align 8
  %1148 = mul i64 %1147, %1145
  %1149 = getelementptr inbounds i8, i8* %1146, i64 %1148
  %1150 = ptrtoint i8* %1149 to i64
  %1151 = and i64 %1150, 63
  %1152 = icmp eq i64 %1151, 0
  call void @llvm.assume(i1 %1152) #8
  %1153 = icmp eq i32 %1132, 0
  br i1 %1153, label %1174, label %1154

1154:                                             ; preds = %1130
  %1155 = getelementptr inbounds i8, i8* %1149, i64 64
  %1156 = bitcast i8* %1155 to float*
  br label %1157

1157:                                             ; preds = %1157, %1154
  %1158 = phi i64 [ 0, %1154 ], [ %1168, %1157 ]
  %1159 = getelementptr inbounds float, float* %1156, i64 %1158
  %1160 = bitcast float* %1159 to <4 x float>*
  %1161 = load <4 x float>, <4 x float>* %1160, align 16, !alias.scope !219
  %1162 = getelementptr inbounds float, float* %1144, i64 %1158
  %1163 = bitcast float* %1162 to <4 x float>*
  %1164 = load <4 x float>, <4 x float>* %1163, align 16, !alias.scope !222
  %1165 = fmul <4 x float> %1164, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1166 = fcmp olt <4 x float> %1165, %1161
  %1167 = select <4 x i1> %1166, <4 x float> %1161, <4 x float> %1165
  store <4 x float> %1167, <4 x float>* %1163, align 16, !alias.scope !225
  %1168 = add nuw nsw i64 %1158, 4
  %1169 = load i32, i32* %1366, align 8
  %1170 = zext i32 %1169 to i64
  %1171 = icmp ult i64 %1168, %1170
  br i1 %1171, label %1157, label %1172

1172:                                             ; preds = %1157
  %1173 = load i32, i32* %1364, align 4
  br label %1174

1174:                                             ; preds = %1172, %1130
  %1175 = phi i32 [ %1173, %1172 ], [ %1131, %1130 ]
  %1176 = phi i32 [ %1169, %1172 ], [ 0, %1130 ]
  %1177 = add nuw nsw i64 %1133, 1
  %1178 = zext i32 %1175 to i64
  %1179 = icmp ult i64 %1177, %1178
  br i1 %1179, label %1130, label %1180

1180:                                             ; preds = %1174, %699
  %1181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1181, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1182 = load i32, i32* %1364, align 4
  %1183 = icmp eq i32 %1182, 0
  br i1 %1183, label %1184, label %1186

1184:                                             ; preds = %1180
  %1185 = load i32, i32* %1366, align 8
  br label %1241

1186:                                             ; preds = %1180
  %1187 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1188 = load i32, i32* %1366, align 8
  br label %1189

1189:                                             ; preds = %1234, %1186
  %1190 = phi i32 [ %1188, %1186 ], [ %1235, %1234 ]
  %1191 = phi i32 [ %1182, %1186 ], [ %1236, %1234 ]
  %1192 = phi i32 [ %1188, %1186 ], [ %1237, %1234 ]
  %1193 = phi i64 [ 0, %1186 ], [ %1238, %1234 ]
  %1194 = load i64, i64* %1365, align 8
  %1195 = mul i64 %1194, %1193
  %1196 = load i8*, i8** %1187, align 8
  %1197 = ptrtoint i8* %1196 to i64
  %1198 = and i64 %1197, 63
  %1199 = icmp eq i64 %1198, 0
  call void @llvm.assume(i1 %1199) #8
  %1200 = getelementptr inbounds i8, i8* %1196, i64 %1195
  %1201 = ptrtoint i8* %1200 to i64
  %1202 = and i64 %1201, 63
  %1203 = icmp eq i64 %1202, 0
  call void @llvm.assume(i1 %1203) #8
  %1204 = bitcast i8* %1200 to float*
  %1205 = add nuw nsw i64 %1193, 16
  %1206 = load i8*, i8** %446, align 8
  %1207 = load i64, i64* %445, align 8
  %1208 = mul i64 %1207, %1205
  %1209 = getelementptr inbounds i8, i8* %1206, i64 %1208
  %1210 = ptrtoint i8* %1209 to i64
  %1211 = and i64 %1210, 63
  %1212 = icmp eq i64 %1211, 0
  call void @llvm.assume(i1 %1212) #8
  %1213 = icmp eq i32 %1192, 0
  br i1 %1213, label %1234, label %1214

1214:                                             ; preds = %1189
  %1215 = getelementptr inbounds i8, i8* %1209, i64 64
  %1216 = bitcast i8* %1215 to float*
  br label %1217

1217:                                             ; preds = %1217, %1214
  %1218 = phi i64 [ 0, %1214 ], [ %1228, %1217 ]
  %1219 = getelementptr inbounds float, float* %1216, i64 %1218
  %1220 = bitcast float* %1219 to <4 x float>*
  %1221 = load <4 x float>, <4 x float>* %1220, align 16, !alias.scope !219
  %1222 = getelementptr inbounds float, float* %1204, i64 %1218
  %1223 = bitcast float* %1222 to <4 x float>*
  %1224 = load <4 x float>, <4 x float>* %1223, align 16, !alias.scope !222
  %1225 = fmul <4 x float> %1224, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1226 = fcmp olt <4 x float> %1225, %1221
  %1227 = select <4 x i1> %1226, <4 x float> %1221, <4 x float> %1225
  store <4 x float> %1227, <4 x float>* %1223, align 16, !alias.scope !225
  %1228 = add nuw nsw i64 %1218, 4
  %1229 = load i32, i32* %1366, align 8
  %1230 = zext i32 %1229 to i64
  %1231 = icmp ult i64 %1228, %1230
  br i1 %1231, label %1217, label %1232

1232:                                             ; preds = %1217
  %1233 = load i32, i32* %1364, align 4
  br label %1234

1234:                                             ; preds = %1232, %1189
  %1235 = phi i32 [ %1229, %1232 ], [ %1190, %1189 ]
  %1236 = phi i32 [ %1233, %1232 ], [ %1191, %1189 ]
  %1237 = phi i32 [ %1229, %1232 ], [ 0, %1189 ]
  %1238 = add nuw nsw i64 %1193, 1
  %1239 = zext i32 %1236 to i64
  %1240 = icmp ult i64 %1238, %1239
  br i1 %1240, label %1189, label %1241

1241:                                             ; preds = %1234, %1184
  %1242 = phi i32 [ 0, %1184 ], [ %1236, %1234 ]
  %1243 = phi i32 [ %1185, %1184 ], [ %1235, %1234 ]
  %1244 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1244) #8
  %1245 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 4
  %1246 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1247 = zext i32 %1243 to i64
  %1248 = zext i32 %1242 to i64
  %1249 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0
  %1250 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1250, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1249, i64 %1247, i64 %1248, i64 4) #8
  %1251 = load i32, i32* %1364, align 4
  %1252 = icmp eq i32 %1251, 0
  br i1 %1252, label %753, label %691

1253:                                             ; preds = %637
  %1254 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1255 = load i32, i32* %466, align 8
  br label %1256

1256:                                             ; preds = %1300, %1253
  %1257 = phi i32 [ %639, %1253 ], [ %1301, %1300 ]
  %1258 = phi i32 [ %1255, %1253 ], [ %1302, %1300 ]
  %1259 = phi i64 [ 0, %1253 ], [ %1303, %1300 ]
  %1260 = load i64, i64* %465, align 8
  %1261 = mul i64 %1260, %1259
  %1262 = load i8*, i8** %1254, align 8
  %1263 = ptrtoint i8* %1262 to i64
  %1264 = and i64 %1263, 63
  %1265 = icmp eq i64 %1264, 0
  call void @llvm.assume(i1 %1265) #8
  %1266 = getelementptr inbounds i8, i8* %1262, i64 %1261
  %1267 = ptrtoint i8* %1266 to i64
  %1268 = and i64 %1267, 63
  %1269 = icmp eq i64 %1268, 0
  call void @llvm.assume(i1 %1269) #8
  %1270 = bitcast i8* %1266 to float*
  %1271 = add nuw nsw i64 %1259, 16
  %1272 = load i8*, i8** %446, align 8
  %1273 = load i64, i64* %445, align 8
  %1274 = mul i64 %1273, %1271
  %1275 = getelementptr inbounds i8, i8* %1272, i64 %1274
  %1276 = ptrtoint i8* %1275 to i64
  %1277 = and i64 %1276, 63
  %1278 = icmp eq i64 %1277, 0
  call void @llvm.assume(i1 %1278) #8
  %1279 = icmp eq i32 %1258, 0
  br i1 %1279, label %1300, label %1280

1280:                                             ; preds = %1256
  %1281 = getelementptr inbounds i8, i8* %1275, i64 64
  %1282 = bitcast i8* %1281 to float*
  br label %1283

1283:                                             ; preds = %1283, %1280
  %1284 = phi i64 [ 0, %1280 ], [ %1294, %1283 ]
  %1285 = getelementptr inbounds float, float* %1282, i64 %1284
  %1286 = bitcast float* %1285 to <4 x float>*
  %1287 = load <4 x float>, <4 x float>* %1286, align 16, !alias.scope !210
  %1288 = getelementptr inbounds float, float* %1270, i64 %1284
  %1289 = bitcast float* %1288 to <4 x float>*
  %1290 = load <4 x float>, <4 x float>* %1289, align 16, !alias.scope !213
  %1291 = fmul <4 x float> %1290, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1292 = fcmp olt <4 x float> %1291, %1287
  %1293 = select <4 x i1> %1292, <4 x float> %1287, <4 x float> %1291
  store <4 x float> %1293, <4 x float>* %1289, align 16, !alias.scope !216
  %1294 = add nuw nsw i64 %1284, 4
  %1295 = load i32, i32* %466, align 8
  %1296 = zext i32 %1295 to i64
  %1297 = icmp ult i64 %1294, %1296
  br i1 %1297, label %1283, label %1298

1298:                                             ; preds = %1283
  %1299 = load i32, i32* %464, align 4
  br label %1300

1300:                                             ; preds = %1298, %1256
  %1301 = phi i32 [ %1299, %1298 ], [ %1257, %1256 ]
  %1302 = phi i32 [ %1295, %1298 ], [ 0, %1256 ]
  %1303 = add nuw nsw i64 %1259, 1
  %1304 = zext i32 %1301 to i64
  %1305 = icmp ult i64 %1303, %1304
  br i1 %1305, label %1256, label %1306

1306:                                             ; preds = %1300, %637
  %1307 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1307, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1308 = load i32, i32* %464, align 4
  %1309 = icmp eq i32 %1308, 0
  br i1 %1309, label %1363, label %1310

1310:                                             ; preds = %1306
  %1311 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1312 = load i32, i32* %466, align 8
  br label %1313

1313:                                             ; preds = %1357, %1310
  %1314 = phi i32 [ %1308, %1310 ], [ %1358, %1357 ]
  %1315 = phi i32 [ %1312, %1310 ], [ %1359, %1357 ]
  %1316 = phi i64 [ 0, %1310 ], [ %1360, %1357 ]
  %1317 = load i64, i64* %465, align 8
  %1318 = mul i64 %1317, %1316
  %1319 = load i8*, i8** %1311, align 8
  %1320 = ptrtoint i8* %1319 to i64
  %1321 = and i64 %1320, 63
  %1322 = icmp eq i64 %1321, 0
  call void @llvm.assume(i1 %1322) #8
  %1323 = getelementptr inbounds i8, i8* %1319, i64 %1318
  %1324 = ptrtoint i8* %1323 to i64
  %1325 = and i64 %1324, 63
  %1326 = icmp eq i64 %1325, 0
  call void @llvm.assume(i1 %1326) #8
  %1327 = bitcast i8* %1323 to float*
  %1328 = add nuw nsw i64 %1316, 16
  %1329 = load i8*, i8** %446, align 8
  %1330 = load i64, i64* %445, align 8
  %1331 = mul i64 %1330, %1328
  %1332 = getelementptr inbounds i8, i8* %1329, i64 %1331
  %1333 = ptrtoint i8* %1332 to i64
  %1334 = and i64 %1333, 63
  %1335 = icmp eq i64 %1334, 0
  call void @llvm.assume(i1 %1335) #8
  %1336 = icmp eq i32 %1315, 0
  br i1 %1336, label %1357, label %1337

1337:                                             ; preds = %1313
  %1338 = getelementptr inbounds i8, i8* %1332, i64 64
  %1339 = bitcast i8* %1338 to float*
  br label %1340

1340:                                             ; preds = %1340, %1337
  %1341 = phi i64 [ 0, %1337 ], [ %1351, %1340 ]
  %1342 = getelementptr inbounds float, float* %1339, i64 %1341
  %1343 = bitcast float* %1342 to <4 x float>*
  %1344 = load <4 x float>, <4 x float>* %1343, align 16, !alias.scope !210
  %1345 = getelementptr inbounds float, float* %1327, i64 %1341
  %1346 = bitcast float* %1345 to <4 x float>*
  %1347 = load <4 x float>, <4 x float>* %1346, align 16, !alias.scope !213
  %1348 = fmul <4 x float> %1347, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1349 = fcmp olt <4 x float> %1348, %1344
  %1350 = select <4 x i1> %1349, <4 x float> %1344, <4 x float> %1348
  store <4 x float> %1350, <4 x float>* %1346, align 16, !alias.scope !216
  %1351 = add nuw nsw i64 %1341, 4
  %1352 = load i32, i32* %466, align 8
  %1353 = zext i32 %1352 to i64
  %1354 = icmp ult i64 %1351, %1353
  br i1 %1354, label %1340, label %1355

1355:                                             ; preds = %1340
  %1356 = load i32, i32* %464, align 4
  br label %1357

1357:                                             ; preds = %1355, %1313
  %1358 = phi i32 [ %1356, %1355 ], [ %1314, %1313 ]
  %1359 = phi i32 [ %1352, %1355 ], [ 0, %1313 ]
  %1360 = add nuw nsw i64 %1316, 1
  %1361 = zext i32 %1358 to i64
  %1362 = icmp ult i64 %1360, %1361
  br i1 %1362, label %1313, label %1363

1363:                                             ; preds = %1357, %1306
  %1364 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 1
  %1365 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 4
  %1366 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 0
  %1367 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %1367, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1368 = load i32, i32* %1364, align 4
  %1369 = icmp eq i32 %1368, 0
  br i1 %1369, label %699, label %696

1370:                                             ; preds = %625
  %1371 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1372 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %1373 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1374 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 4
  %1375 = icmp eq i32 %629, 0
  %1376 = shl nuw nsw i64 %630, 2
  %1377 = and i64 %630, 4294967288
  %1378 = add nsw i64 %1377, -8
  %1379 = lshr exact i64 %1378, 3
  %1380 = add nuw nsw i64 %1379, 1
  %1381 = icmp ult i32 %629, 8
  %1382 = and i64 %630, 4294967288
  %1383 = and i64 %1380, 1
  %1384 = icmp eq i64 %1378, 0
  %1385 = sub nuw nsw i64 %1380, %1383
  %1386 = icmp eq i64 %1383, 0
  %1387 = icmp eq i64 %1382, %630
  %1388 = and i64 %630, 3
  %1389 = icmp eq i64 %1388, 0
  br label %1390

1390:                                             ; preds = %1523, %1370
  %1391 = phi i64 [ 0, %1370 ], [ %1524, %1523 ]
  %1392 = load i8*, i8** %1371, align 8
  %1393 = load i64, i64* %1372, align 8
  %1394 = mul i64 %1393, %1391
  %1395 = getelementptr inbounds i8, i8* %1392, i64 %1394
  %1396 = ptrtoint i8* %1395 to i64
  %1397 = and i64 %1396, 63
  %1398 = icmp eq i64 %1397, 0
  call void @llvm.assume(i1 %1398) #8
  %1399 = bitcast i8* %1395 to float*
  %1400 = load i8*, i8** %1373, align 8
  %1401 = load i64, i64* %1374, align 8
  %1402 = mul i64 %1401, %1391
  %1403 = getelementptr inbounds i8, i8* %1400, i64 %1402
  %1404 = ptrtoint i8* %1403 to i64
  %1405 = and i64 %1404, 63
  %1406 = icmp eq i64 %1405, 0
  call void @llvm.assume(i1 %1406) #8
  %1407 = bitcast i8* %1403 to float*
  br i1 %1375, label %1523, label %1408

1408:                                             ; preds = %1390
  br i1 %1381, label %1478, label %1409

1409:                                             ; preds = %1408
  %1410 = getelementptr i8, i8* %1400, i64 %1376
  %1411 = getelementptr i8, i8* %1410, i64 %1402
  %1412 = getelementptr i8, i8* %1392, i64 %1376
  %1413 = mul i64 %1393, %1391
  %1414 = getelementptr i8, i8* %1412, i64 %1413
  %1415 = icmp ult i8* %1403, %1414
  %1416 = icmp ult i8* %1395, %1411
  %1417 = and i1 %1415, %1416
  br i1 %1417, label %1478, label %1418

1418:                                             ; preds = %1409
  br i1 %1384, label %1458, label %1419

1419:                                             ; preds = %1418, %1419
  %1420 = phi i64 [ %1455, %1419 ], [ 0, %1418 ]
  %1421 = phi i64 [ %1456, %1419 ], [ %1385, %1418 ]
  %1422 = getelementptr inbounds float, float* %1399, i64 %1420
  %1423 = bitcast float* %1422 to <4 x float>*
  %1424 = load <4 x float>, <4 x float>* %1423, align 64, !alias.scope !252
  %1425 = getelementptr inbounds float, float* %1422, i64 4
  %1426 = bitcast float* %1425 to <4 x float>*
  %1427 = load <4 x float>, <4 x float>* %1426, align 16, !alias.scope !252
  %1428 = getelementptr inbounds float, float* %1407, i64 %1420
  %1429 = bitcast float* %1428 to <4 x float>*
  %1430 = load <4 x float>, <4 x float>* %1429, align 64, !alias.scope !255, !noalias !252
  %1431 = getelementptr inbounds float, float* %1428, i64 4
  %1432 = bitcast float* %1431 to <4 x float>*
  %1433 = load <4 x float>, <4 x float>* %1432, align 16, !alias.scope !255, !noalias !252
  %1434 = fsub <4 x float> %1430, %1424
  %1435 = fsub <4 x float> %1433, %1427
  %1436 = bitcast float* %1428 to <4 x float>*
  store <4 x float> %1434, <4 x float>* %1436, align 64, !alias.scope !255, !noalias !252
  %1437 = bitcast float* %1431 to <4 x float>*
  store <4 x float> %1435, <4 x float>* %1437, align 16, !alias.scope !255, !noalias !252
  %1438 = or i64 %1420, 8
  %1439 = getelementptr inbounds float, float* %1399, i64 %1438
  %1440 = bitcast float* %1439 to <4 x float>*
  %1441 = load <4 x float>, <4 x float>* %1440, align 32, !alias.scope !252
  %1442 = getelementptr inbounds float, float* %1439, i64 4
  %1443 = bitcast float* %1442 to <4 x float>*
  %1444 = load <4 x float>, <4 x float>* %1443, align 16, !alias.scope !252
  %1445 = getelementptr inbounds float, float* %1407, i64 %1438
  %1446 = bitcast float* %1445 to <4 x float>*
  %1447 = load <4 x float>, <4 x float>* %1446, align 32, !alias.scope !255, !noalias !252
  %1448 = getelementptr inbounds float, float* %1445, i64 4
  %1449 = bitcast float* %1448 to <4 x float>*
  %1450 = load <4 x float>, <4 x float>* %1449, align 16, !alias.scope !255, !noalias !252
  %1451 = fsub <4 x float> %1447, %1441
  %1452 = fsub <4 x float> %1450, %1444
  %1453 = bitcast float* %1445 to <4 x float>*
  store <4 x float> %1451, <4 x float>* %1453, align 32, !alias.scope !255, !noalias !252
  %1454 = bitcast float* %1448 to <4 x float>*
  store <4 x float> %1452, <4 x float>* %1454, align 16, !alias.scope !255, !noalias !252
  %1455 = add i64 %1420, 16
  %1456 = add i64 %1421, -2
  %1457 = icmp eq i64 %1456, 0
  br i1 %1457, label %1458, label %1419, !llvm.loop !257

1458:                                             ; preds = %1419, %1418
  %1459 = phi i64 [ 0, %1418 ], [ %1455, %1419 ]
  br i1 %1386, label %1477, label %1460

1460:                                             ; preds = %1458
  %1461 = getelementptr inbounds float, float* %1399, i64 %1459
  %1462 = bitcast float* %1461 to <4 x float>*
  %1463 = load <4 x float>, <4 x float>* %1462, align 32, !alias.scope !252
  %1464 = getelementptr inbounds float, float* %1461, i64 4
  %1465 = bitcast float* %1464 to <4 x float>*
  %1466 = load <4 x float>, <4 x float>* %1465, align 16, !alias.scope !252
  %1467 = getelementptr inbounds float, float* %1407, i64 %1459
  %1468 = bitcast float* %1467 to <4 x float>*
  %1469 = load <4 x float>, <4 x float>* %1468, align 32, !alias.scope !255, !noalias !252
  %1470 = getelementptr inbounds float, float* %1467, i64 4
  %1471 = bitcast float* %1470 to <4 x float>*
  %1472 = load <4 x float>, <4 x float>* %1471, align 16, !alias.scope !255, !noalias !252
  %1473 = fsub <4 x float> %1469, %1463
  %1474 = fsub <4 x float> %1472, %1466
  %1475 = bitcast float* %1467 to <4 x float>*
  store <4 x float> %1473, <4 x float>* %1475, align 32, !alias.scope !255, !noalias !252
  %1476 = bitcast float* %1470 to <4 x float>*
  store <4 x float> %1474, <4 x float>* %1476, align 16, !alias.scope !255, !noalias !252
  br label %1477

1477:                                             ; preds = %1458, %1460
  br i1 %1387, label %1523, label %1478

1478:                                             ; preds = %1477, %1409, %1408
  %1479 = phi i64 [ 0, %1409 ], [ 0, %1408 ], [ %1382, %1477 ]
  %1480 = xor i64 %1479, -1
  %1481 = add nsw i64 %1480, %630
  br i1 %1389, label %1493, label %1482

1482:                                             ; preds = %1478, %1482
  %1483 = phi i64 [ %1490, %1482 ], [ %1479, %1478 ]
  %1484 = phi i64 [ %1491, %1482 ], [ %1388, %1478 ]
  %1485 = getelementptr inbounds float, float* %1399, i64 %1483
  %1486 = load float, float* %1485, align 4
  %1487 = getelementptr inbounds float, float* %1407, i64 %1483
  %1488 = load float, float* %1487, align 4
  %1489 = fsub float %1488, %1486
  store float %1489, float* %1487, align 4
  %1490 = add nuw nsw i64 %1483, 1
  %1491 = add i64 %1484, -1
  %1492 = icmp eq i64 %1491, 0
  br i1 %1492, label %1493, label %1482, !llvm.loop !258

1493:                                             ; preds = %1482, %1478
  %1494 = phi i64 [ %1479, %1478 ], [ %1490, %1482 ]
  %1495 = icmp ult i64 %1481, 3
  br i1 %1495, label %1523, label %1496

1496:                                             ; preds = %1493, %1496
  %1497 = phi i64 [ %1521, %1496 ], [ %1494, %1493 ]
  %1498 = getelementptr inbounds float, float* %1399, i64 %1497
  %1499 = load float, float* %1498, align 4
  %1500 = getelementptr inbounds float, float* %1407, i64 %1497
  %1501 = load float, float* %1500, align 4
  %1502 = fsub float %1501, %1499
  store float %1502, float* %1500, align 4
  %1503 = add nuw nsw i64 %1497, 1
  %1504 = getelementptr inbounds float, float* %1399, i64 %1503
  %1505 = load float, float* %1504, align 4
  %1506 = getelementptr inbounds float, float* %1407, i64 %1503
  %1507 = load float, float* %1506, align 4
  %1508 = fsub float %1507, %1505
  store float %1508, float* %1506, align 4
  %1509 = add nuw nsw i64 %1497, 2
  %1510 = getelementptr inbounds float, float* %1399, i64 %1509
  %1511 = load float, float* %1510, align 4
  %1512 = getelementptr inbounds float, float* %1407, i64 %1509
  %1513 = load float, float* %1512, align 4
  %1514 = fsub float %1513, %1511
  store float %1514, float* %1512, align 4
  %1515 = add nuw nsw i64 %1497, 3
  %1516 = getelementptr inbounds float, float* %1399, i64 %1515
  %1517 = load float, float* %1516, align 4
  %1518 = getelementptr inbounds float, float* %1407, i64 %1515
  %1519 = load float, float* %1518, align 4
  %1520 = fsub float %1519, %1517
  store float %1520, float* %1518, align 4
  %1521 = add nuw nsw i64 %1497, 4
  %1522 = icmp eq i64 %1521, %630
  br i1 %1522, label %1523, label %1496, !llvm.loop !259

1523:                                             ; preds = %1493, %1496, %1477, %1390
  %1524 = add nuw nsw i64 %1391, 1
  %1525 = icmp eq i64 %1524, %632
  br i1 %1525, label %1526, label %1390

1526:                                             ; preds = %1523, %625
  %1527 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2
  %1528 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %1527, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %1528) #8
  %1529 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1527, i64 0, i32 0, i32 0
  %1530 = load i32, i32* %1529, align 8
  %1531 = zext i32 %1530 to i64
  %1532 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 1
  %1533 = load i32, i32* %1532, align 4
  %1534 = zext i32 %1533 to i64
  %1535 = icmp eq i32 %1533, 0
  br i1 %1535, label %1692, label %1536

1536:                                             ; preds = %1526
  %1537 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1538 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %1539 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1540 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 4
  %1541 = icmp eq i32 %1530, 0
  %1542 = shl nuw nsw i64 %1531, 2
  %1543 = and i64 %1531, 4294967288
  %1544 = add nsw i64 %1543, -8
  %1545 = lshr exact i64 %1544, 3
  %1546 = add nuw nsw i64 %1545, 1
  %1547 = icmp ult i32 %1530, 8
  %1548 = and i64 %1531, 4294967288
  %1549 = and i64 %1546, 1
  %1550 = icmp eq i64 %1544, 0
  %1551 = sub nuw nsw i64 %1546, %1549
  %1552 = icmp eq i64 %1549, 0
  %1553 = icmp eq i64 %1548, %1531
  %1554 = and i64 %1531, 3
  %1555 = icmp eq i64 %1554, 0
  br label %1556

1556:                                             ; preds = %1689, %1536
  %1557 = phi i64 [ 0, %1536 ], [ %1690, %1689 ]
  %1558 = load i8*, i8** %1537, align 8
  %1559 = load i64, i64* %1538, align 8
  %1560 = mul i64 %1559, %1557
  %1561 = getelementptr inbounds i8, i8* %1558, i64 %1560
  %1562 = ptrtoint i8* %1561 to i64
  %1563 = and i64 %1562, 63
  %1564 = icmp eq i64 %1563, 0
  call void @llvm.assume(i1 %1564) #8
  %1565 = bitcast i8* %1561 to float*
  %1566 = load i8*, i8** %1539, align 8
  %1567 = load i64, i64* %1540, align 8
  %1568 = mul i64 %1567, %1557
  %1569 = getelementptr inbounds i8, i8* %1566, i64 %1568
  %1570 = ptrtoint i8* %1569 to i64
  %1571 = and i64 %1570, 63
  %1572 = icmp eq i64 %1571, 0
  call void @llvm.assume(i1 %1572) #8
  %1573 = bitcast i8* %1569 to float*
  br i1 %1541, label %1689, label %1574

1574:                                             ; preds = %1556
  br i1 %1547, label %1644, label %1575

1575:                                             ; preds = %1574
  %1576 = getelementptr i8, i8* %1566, i64 %1542
  %1577 = getelementptr i8, i8* %1576, i64 %1568
  %1578 = getelementptr i8, i8* %1558, i64 %1542
  %1579 = mul i64 %1559, %1557
  %1580 = getelementptr i8, i8* %1578, i64 %1579
  %1581 = icmp ult i8* %1569, %1580
  %1582 = icmp ult i8* %1561, %1577
  %1583 = and i1 %1581, %1582
  br i1 %1583, label %1644, label %1584

1584:                                             ; preds = %1575
  br i1 %1550, label %1624, label %1585

1585:                                             ; preds = %1584, %1585
  %1586 = phi i64 [ %1621, %1585 ], [ 0, %1584 ]
  %1587 = phi i64 [ %1622, %1585 ], [ %1551, %1584 ]
  %1588 = getelementptr inbounds float, float* %1565, i64 %1586
  %1589 = bitcast float* %1588 to <4 x float>*
  %1590 = load <4 x float>, <4 x float>* %1589, align 64, !alias.scope !260
  %1591 = getelementptr inbounds float, float* %1588, i64 4
  %1592 = bitcast float* %1591 to <4 x float>*
  %1593 = load <4 x float>, <4 x float>* %1592, align 16, !alias.scope !260
  %1594 = getelementptr inbounds float, float* %1573, i64 %1586
  %1595 = bitcast float* %1594 to <4 x float>*
  %1596 = load <4 x float>, <4 x float>* %1595, align 64, !alias.scope !263, !noalias !260
  %1597 = getelementptr inbounds float, float* %1594, i64 4
  %1598 = bitcast float* %1597 to <4 x float>*
  %1599 = load <4 x float>, <4 x float>* %1598, align 16, !alias.scope !263, !noalias !260
  %1600 = fsub <4 x float> %1596, %1590
  %1601 = fsub <4 x float> %1599, %1593
  %1602 = bitcast float* %1594 to <4 x float>*
  store <4 x float> %1600, <4 x float>* %1602, align 64, !alias.scope !263, !noalias !260
  %1603 = bitcast float* %1597 to <4 x float>*
  store <4 x float> %1601, <4 x float>* %1603, align 16, !alias.scope !263, !noalias !260
  %1604 = or i64 %1586, 8
  %1605 = getelementptr inbounds float, float* %1565, i64 %1604
  %1606 = bitcast float* %1605 to <4 x float>*
  %1607 = load <4 x float>, <4 x float>* %1606, align 32, !alias.scope !260
  %1608 = getelementptr inbounds float, float* %1605, i64 4
  %1609 = bitcast float* %1608 to <4 x float>*
  %1610 = load <4 x float>, <4 x float>* %1609, align 16, !alias.scope !260
  %1611 = getelementptr inbounds float, float* %1573, i64 %1604
  %1612 = bitcast float* %1611 to <4 x float>*
  %1613 = load <4 x float>, <4 x float>* %1612, align 32, !alias.scope !263, !noalias !260
  %1614 = getelementptr inbounds float, float* %1611, i64 4
  %1615 = bitcast float* %1614 to <4 x float>*
  %1616 = load <4 x float>, <4 x float>* %1615, align 16, !alias.scope !263, !noalias !260
  %1617 = fsub <4 x float> %1613, %1607
  %1618 = fsub <4 x float> %1616, %1610
  %1619 = bitcast float* %1611 to <4 x float>*
  store <4 x float> %1617, <4 x float>* %1619, align 32, !alias.scope !263, !noalias !260
  %1620 = bitcast float* %1614 to <4 x float>*
  store <4 x float> %1618, <4 x float>* %1620, align 16, !alias.scope !263, !noalias !260
  %1621 = add i64 %1586, 16
  %1622 = add i64 %1587, -2
  %1623 = icmp eq i64 %1622, 0
  br i1 %1623, label %1624, label %1585, !llvm.loop !265

1624:                                             ; preds = %1585, %1584
  %1625 = phi i64 [ 0, %1584 ], [ %1621, %1585 ]
  br i1 %1552, label %1643, label %1626

1626:                                             ; preds = %1624
  %1627 = getelementptr inbounds float, float* %1565, i64 %1625
  %1628 = bitcast float* %1627 to <4 x float>*
  %1629 = load <4 x float>, <4 x float>* %1628, align 32, !alias.scope !260
  %1630 = getelementptr inbounds float, float* %1627, i64 4
  %1631 = bitcast float* %1630 to <4 x float>*
  %1632 = load <4 x float>, <4 x float>* %1631, align 16, !alias.scope !260
  %1633 = getelementptr inbounds float, float* %1573, i64 %1625
  %1634 = bitcast float* %1633 to <4 x float>*
  %1635 = load <4 x float>, <4 x float>* %1634, align 32, !alias.scope !263, !noalias !260
  %1636 = getelementptr inbounds float, float* %1633, i64 4
  %1637 = bitcast float* %1636 to <4 x float>*
  %1638 = load <4 x float>, <4 x float>* %1637, align 16, !alias.scope !263, !noalias !260
  %1639 = fsub <4 x float> %1635, %1629
  %1640 = fsub <4 x float> %1638, %1632
  %1641 = bitcast float* %1633 to <4 x float>*
  store <4 x float> %1639, <4 x float>* %1641, align 32, !alias.scope !263, !noalias !260
  %1642 = bitcast float* %1636 to <4 x float>*
  store <4 x float> %1640, <4 x float>* %1642, align 16, !alias.scope !263, !noalias !260
  br label %1643

1643:                                             ; preds = %1624, %1626
  br i1 %1553, label %1689, label %1644

1644:                                             ; preds = %1643, %1575, %1574
  %1645 = phi i64 [ 0, %1575 ], [ 0, %1574 ], [ %1548, %1643 ]
  %1646 = xor i64 %1645, -1
  %1647 = add nsw i64 %1646, %1531
  br i1 %1555, label %1659, label %1648

1648:                                             ; preds = %1644, %1648
  %1649 = phi i64 [ %1656, %1648 ], [ %1645, %1644 ]
  %1650 = phi i64 [ %1657, %1648 ], [ %1554, %1644 ]
  %1651 = getelementptr inbounds float, float* %1565, i64 %1649
  %1652 = load float, float* %1651, align 4
  %1653 = getelementptr inbounds float, float* %1573, i64 %1649
  %1654 = load float, float* %1653, align 4
  %1655 = fsub float %1654, %1652
  store float %1655, float* %1653, align 4
  %1656 = add nuw nsw i64 %1649, 1
  %1657 = add i64 %1650, -1
  %1658 = icmp eq i64 %1657, 0
  br i1 %1658, label %1659, label %1648, !llvm.loop !266

1659:                                             ; preds = %1648, %1644
  %1660 = phi i64 [ %1645, %1644 ], [ %1656, %1648 ]
  %1661 = icmp ult i64 %1647, 3
  br i1 %1661, label %1689, label %1662

1662:                                             ; preds = %1659, %1662
  %1663 = phi i64 [ %1687, %1662 ], [ %1660, %1659 ]
  %1664 = getelementptr inbounds float, float* %1565, i64 %1663
  %1665 = load float, float* %1664, align 4
  %1666 = getelementptr inbounds float, float* %1573, i64 %1663
  %1667 = load float, float* %1666, align 4
  %1668 = fsub float %1667, %1665
  store float %1668, float* %1666, align 4
  %1669 = add nuw nsw i64 %1663, 1
  %1670 = getelementptr inbounds float, float* %1565, i64 %1669
  %1671 = load float, float* %1670, align 4
  %1672 = getelementptr inbounds float, float* %1573, i64 %1669
  %1673 = load float, float* %1672, align 4
  %1674 = fsub float %1673, %1671
  store float %1674, float* %1672, align 4
  %1675 = add nuw nsw i64 %1663, 2
  %1676 = getelementptr inbounds float, float* %1565, i64 %1675
  %1677 = load float, float* %1676, align 4
  %1678 = getelementptr inbounds float, float* %1573, i64 %1675
  %1679 = load float, float* %1678, align 4
  %1680 = fsub float %1679, %1677
  store float %1680, float* %1678, align 4
  %1681 = add nuw nsw i64 %1663, 3
  %1682 = getelementptr inbounds float, float* %1565, i64 %1681
  %1683 = load float, float* %1682, align 4
  %1684 = getelementptr inbounds float, float* %1573, i64 %1681
  %1685 = load float, float* %1684, align 4
  %1686 = fsub float %1685, %1683
  store float %1686, float* %1684, align 4
  %1687 = add nuw nsw i64 %1663, 4
  %1688 = icmp eq i64 %1687, %1531
  br i1 %1688, label %1689, label %1662, !llvm.loop !267

1689:                                             ; preds = %1659, %1662, %1643, %1556
  %1690 = add nuw nsw i64 %1557, 1
  %1691 = icmp eq i64 %1690, %1534
  br i1 %1691, label %1692, label %1556

1692:                                             ; preds = %1689, %1526
  %1693 = bitcast i64* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1693) #8
  %1694 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 8
  %1695 = load i64, i64* %1694, align 8
  %1696 = add i64 %1695, 7
  %1697 = lshr i64 %1696, 3
  store i64 %1697, i64* %23, align 8
  %1698 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 9
  %1699 = load i64, i64* %1698, align 8
  %1700 = add i64 %1699, 7
  %1701 = lshr i64 %1700, 3
  %1702 = mul i64 %1701, %1697
  %1703 = trunc i64 %1702 to i32
  %1704 = bitcast %class.anon.284* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1704) #8
  %1705 = getelementptr inbounds %class.anon.284, %class.anon.284* %24, i64 0, i32 0
  store i64* %23, i64** %1705, align 8
  %1706 = getelementptr inbounds %class.anon.284, %class.anon.284* %24, i64 0, i32 1
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %1706, align 8
  %1707 = getelementptr inbounds %class.anon.284, %class.anon.284* %24, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %1707, align 8
  %1708 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1708) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %17, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double* nonnull %17) #8
  %1709 = icmp eq %"class.jxl::ThreadPool"* %4, null
  br i1 %1709, label %359, label %370
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE(%"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"* nocapture readnone, %"class.jxl::ImageBundle"* nocapture readnone, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) #0 {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.299", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.299", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState.298", align 8
  %12 = alloca %"class.jxl::ThreadPool::RunCallState.298", align 8
  %13 = alloca double, align 8
  %14 = alloca %"class.jxl::ThreadPool", align 8
  %15 = alloca %"class.jxl::ThreadPool::RunCallState.297", align 8
  %16 = alloca %"class.jxl::ThreadPool::RunCallState.297", align 8
  %17 = alloca double, align 8
  %18 = alloca %"class.jxl::ThreadPool", align 8
  %19 = alloca %"class.jxl::Image3", align 8
  %20 = alloca %"class.jxl::Image3", align 8
  %21 = alloca %"class.jxl::Plane.97", align 8
  %22 = alloca %"class.std::__1::unique_ptr.254", align 8
  %23 = alloca i64, align 8
  %24 = alloca %class.anon.293, align 8
  %25 = alloca %"class.jxl::Image3", align 8
  %26 = alloca %"class.jxl::Image3", align 8
  %27 = alloca %class.anon.294, align 8
  %28 = alloca %"class.std::__1::unique_ptr.254", align 8
  %29 = alloca %"class.jxl::Image3", align 8
  %30 = alloca %"class.jxl::Plane.97", align 8
  %31 = alloca %"class.jxl::Plane.97", align 8
  %32 = alloca %"class.jxl::Image3", align 8
  %33 = alloca %"class.jxl::Plane.97", align 8
  %34 = alloca %"class.jxl::Plane.97", align 8
  %35 = alloca float, align 4
  %36 = alloca %"class.jxl::Plane.97", align 8
  %37 = alloca %class.anon.295, align 8
  %38 = alloca [18 x %"struct.std::__1::pair.260"], align 16
  %39 = alloca float, align 4
  %40 = alloca %class.anon.296, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2
  %43 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 0
  %44 = load float, float* %43, align 8
  %45 = fcmp ogt float %44, 0.000000e+00
  br i1 %45, label %49, label %46

46:                                               ; preds = %6
  %47 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #8
  %48 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

49:                                               ; preds = %6
  %50 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 1, i32 26, i32 2
  %51 = load i8, i8* %50, align 1, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"* %3, float 0x3FEFB50D60000000, %"class.jxl::ThreadPool"* %4) #8
  br label %54

54:                                               ; preds = %49, %53
  %55 = bitcast %"class.jxl::Image3"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %19, %"class.jxl::Image3"* dereferenceable(96) %3, i64 16, i64 16) #8
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = icmp eq i32 %60, 0
  br i1 %62, label %219, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %68 = icmp eq i32 %57, 0
  %69 = shl nuw nsw i64 %58, 2
  %70 = and i64 %58, 4294967288
  %71 = add nsw i64 %70, -8
  %72 = lshr exact i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i32 %57, 8
  %75 = and i64 %58, 4294967288
  %76 = and i64 %73, 1
  %77 = icmp eq i64 %71, 0
  %78 = sub nuw nsw i64 %73, %76
  %79 = icmp eq i64 %76, 0
  %80 = icmp eq i64 %75, %58
  %81 = and i64 %58, 3
  %82 = icmp eq i64 %81, 0
  br label %83

83:                                               ; preds = %189, %63
  %84 = phi i64 [ 0, %63 ], [ %190, %189 ]
  %85 = load i8*, i8** %64, align 8
  %86 = load i64, i64* %65, align 8
  %87 = mul i64 %86, %84
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = ptrtoint i8* %88 to i64
  %90 = and i64 %89, 63
  %91 = icmp eq i64 %90, 0
  call void @llvm.assume(i1 %91) #8
  %92 = bitcast i8* %88 to float*
  %93 = load i8*, i8** %66, align 8
  %94 = load i64, i64* %67, align 8
  %95 = mul i64 %94, %84
  %96 = getelementptr inbounds i8, i8* %93, i64 %95
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  call void @llvm.assume(i1 %99) #8
  %100 = bitcast i8* %96 to float*
  br i1 %68, label %189, label %101

101:                                              ; preds = %83
  br i1 %74, label %102, label %120

102:                                              ; preds = %188, %120, %101
  %103 = phi i64 [ 0, %120 ], [ 0, %101 ], [ %75, %188 ]
  %104 = xor i64 %103, -1
  %105 = add nsw i64 %104, %58
  br i1 %82, label %117, label %106

106:                                              ; preds = %102, %106
  %107 = phi i64 [ %114, %106 ], [ %103, %102 ]
  %108 = phi i64 [ %115, %106 ], [ %81, %102 ]
  %109 = getelementptr inbounds float, float* %92, i64 %107
  %110 = load float, float* %109, align 4
  %111 = getelementptr inbounds float, float* %100, i64 %107
  %112 = load float, float* %111, align 4
  %113 = fsub float %112, %110
  store float %113, float* %111, align 4
  %114 = add nuw nsw i64 %107, 1
  %115 = add i64 %108, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %106, !llvm.loop !268

117:                                              ; preds = %106, %102
  %118 = phi i64 [ %103, %102 ], [ %114, %106 ]
  %119 = icmp ult i64 %105, 3
  br i1 %119, label %189, label %192

120:                                              ; preds = %101
  %121 = getelementptr i8, i8* %93, i64 %69
  %122 = getelementptr i8, i8* %121, i64 %95
  %123 = getelementptr i8, i8* %85, i64 %69
  %124 = mul i64 %86, %84
  %125 = getelementptr i8, i8* %123, i64 %124
  %126 = icmp ult i8* %96, %125
  %127 = icmp ult i8* %88, %122
  %128 = and i1 %126, %127
  br i1 %128, label %102, label %129

129:                                              ; preds = %120
  br i1 %77, label %169, label %130

130:                                              ; preds = %129, %130
  %131 = phi i64 [ %166, %130 ], [ 0, %129 ]
  %132 = phi i64 [ %167, %130 ], [ %78, %129 ]
  %133 = getelementptr inbounds float, float* %92, i64 %131
  %134 = bitcast float* %133 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 64, !alias.scope !269
  %136 = getelementptr inbounds float, float* %133, i64 4
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 16, !alias.scope !269
  %139 = getelementptr inbounds float, float* %100, i64 %131
  %140 = bitcast float* %139 to <4 x float>*
  %141 = load <4 x float>, <4 x float>* %140, align 64, !alias.scope !272, !noalias !269
  %142 = getelementptr inbounds float, float* %139, i64 4
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 16, !alias.scope !272, !noalias !269
  %145 = fsub <4 x float> %141, %135
  %146 = fsub <4 x float> %144, %138
  %147 = bitcast float* %139 to <4 x float>*
  store <4 x float> %145, <4 x float>* %147, align 64, !alias.scope !272, !noalias !269
  %148 = bitcast float* %142 to <4 x float>*
  store <4 x float> %146, <4 x float>* %148, align 16, !alias.scope !272, !noalias !269
  %149 = or i64 %131, 8
  %150 = getelementptr inbounds float, float* %92, i64 %149
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 32, !alias.scope !269
  %153 = getelementptr inbounds float, float* %150, i64 4
  %154 = bitcast float* %153 to <4 x float>*
  %155 = load <4 x float>, <4 x float>* %154, align 16, !alias.scope !269
  %156 = getelementptr inbounds float, float* %100, i64 %149
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 32, !alias.scope !272, !noalias !269
  %159 = getelementptr inbounds float, float* %156, i64 4
  %160 = bitcast float* %159 to <4 x float>*
  %161 = load <4 x float>, <4 x float>* %160, align 16, !alias.scope !272, !noalias !269
  %162 = fsub <4 x float> %158, %152
  %163 = fsub <4 x float> %161, %155
  %164 = bitcast float* %156 to <4 x float>*
  store <4 x float> %162, <4 x float>* %164, align 32, !alias.scope !272, !noalias !269
  %165 = bitcast float* %159 to <4 x float>*
  store <4 x float> %163, <4 x float>* %165, align 16, !alias.scope !272, !noalias !269
  %166 = add i64 %131, 16
  %167 = add i64 %132, -2
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %130, !llvm.loop !274

169:                                              ; preds = %130, %129
  %170 = phi i64 [ 0, %129 ], [ %166, %130 ]
  br i1 %79, label %188, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds float, float* %92, i64 %170
  %173 = bitcast float* %172 to <4 x float>*
  %174 = load <4 x float>, <4 x float>* %173, align 32, !alias.scope !269
  %175 = getelementptr inbounds float, float* %172, i64 4
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 16, !alias.scope !269
  %178 = getelementptr inbounds float, float* %100, i64 %170
  %179 = bitcast float* %178 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 32, !alias.scope !272, !noalias !269
  %181 = getelementptr inbounds float, float* %178, i64 4
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 16, !alias.scope !272, !noalias !269
  %184 = fsub <4 x float> %180, %174
  %185 = fsub <4 x float> %183, %177
  %186 = bitcast float* %178 to <4 x float>*
  store <4 x float> %184, <4 x float>* %186, align 32, !alias.scope !272, !noalias !269
  %187 = bitcast float* %181 to <4 x float>*
  store <4 x float> %185, <4 x float>* %187, align 16, !alias.scope !272, !noalias !269
  br label %188

188:                                              ; preds = %169, %171
  br i1 %80, label %189, label %102

189:                                              ; preds = %117, %192, %188, %83
  %190 = add nuw nsw i64 %84, 1
  %191 = icmp eq i64 %190, %61
  br i1 %191, label %219, label %83

192:                                              ; preds = %117, %192
  %193 = phi i64 [ %217, %192 ], [ %118, %117 ]
  %194 = getelementptr inbounds float, float* %92, i64 %193
  %195 = load float, float* %194, align 4
  %196 = getelementptr inbounds float, float* %100, i64 %193
  %197 = load float, float* %196, align 4
  %198 = fsub float %197, %195
  store float %198, float* %196, align 4
  %199 = add nuw nsw i64 %193, 1
  %200 = getelementptr inbounds float, float* %92, i64 %199
  %201 = load float, float* %200, align 4
  %202 = getelementptr inbounds float, float* %100, i64 %199
  %203 = load float, float* %202, align 4
  %204 = fsub float %203, %201
  store float %204, float* %202, align 4
  %205 = add nuw nsw i64 %193, 2
  %206 = getelementptr inbounds float, float* %92, i64 %205
  %207 = load float, float* %206, align 4
  %208 = getelementptr inbounds float, float* %100, i64 %205
  %209 = load float, float* %208, align 4
  %210 = fsub float %209, %207
  store float %210, float* %208, align 4
  %211 = add nuw nsw i64 %193, 3
  %212 = getelementptr inbounds float, float* %92, i64 %211
  %213 = load float, float* %212, align 4
  %214 = getelementptr inbounds float, float* %100, i64 %211
  %215 = load float, float* %214, align 4
  %216 = fsub float %215, %213
  store float %216, float* %214, align 4
  %217 = add nuw nsw i64 %193, 4
  %218 = icmp eq i64 %217, %58
  br i1 %218, label %189, label %192, !llvm.loop !275

219:                                              ; preds = %189, %54
  %220 = bitcast %"class.jxl::Image3"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %220) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 -86, i64 96, i1 false)
  %221 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %222 = load i32, i32* %221, align 8
  %223 = zext i32 %222 to i64
  %224 = add nuw nsw i64 %223, 64
  %225 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 1
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %228, i64 %224, i64 %227, i64 4) #8
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %229, i64 %224, i64 %227, i64 4) #8
  %230 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %230, i64 %224, i64 %227, i64 4) #8
  %231 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 1
  %232 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 4
  %233 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 0
  %234 = load i32, i32* %231, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %303, label %236

236:                                              ; preds = %219
  %237 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %240

238:                                              ; preds = %240
  %239 = icmp eq i32 %256, 0
  br i1 %239, label %303, label %259

240:                                              ; preds = %240, %236
  %241 = phi i64 [ 0, %236 ], [ %255, %240 ]
  %242 = load i64, i64* %232, align 8
  %243 = mul i64 %242, %241
  %244 = load i8*, i8** %237, align 8
  %245 = ptrtoint i8* %244 to i64
  %246 = and i64 %245, 63
  %247 = icmp eq i64 %246, 0
  call void @llvm.assume(i1 %247) #8
  %248 = getelementptr inbounds i8, i8* %244, i64 %243
  %249 = ptrtoint i8* %248 to i64
  %250 = and i64 %249, 63
  %251 = icmp eq i64 %250, 0
  call void @llvm.assume(i1 %251) #8
  %252 = load i32, i32* %233, align 8
  %253 = zext i32 %252 to i64
  %254 = shl nuw nsw i64 %253, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %248, i8 0, i64 %254, i1 false) #8
  %255 = add nuw nsw i64 %241, 1
  %256 = load i32, i32* %231, align 4
  %257 = zext i32 %256 to i64
  %258 = icmp ult i64 %255, %257
  br i1 %258, label %240, label %238

259:                                              ; preds = %238
  %260 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %261

261:                                              ; preds = %261, %259
  %262 = phi i64 [ 0, %259 ], [ %276, %261 ]
  %263 = load i64, i64* %232, align 8
  %264 = mul i64 %263, %262
  %265 = load i8*, i8** %260, align 8
  %266 = ptrtoint i8* %265 to i64
  %267 = and i64 %266, 63
  %268 = icmp eq i64 %267, 0
  call void @llvm.assume(i1 %268) #8
  %269 = getelementptr inbounds i8, i8* %265, i64 %264
  %270 = ptrtoint i8* %269 to i64
  %271 = and i64 %270, 63
  %272 = icmp eq i64 %271, 0
  call void @llvm.assume(i1 %272) #8
  %273 = load i32, i32* %233, align 8
  %274 = zext i32 %273 to i64
  %275 = shl nuw nsw i64 %274, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %269, i8 0, i64 %275, i1 false) #8
  %276 = add nuw nsw i64 %262, 1
  %277 = load i32, i32* %231, align 4
  %278 = zext i32 %277 to i64
  %279 = icmp ult i64 %276, %278
  br i1 %279, label %261, label %280

280:                                              ; preds = %261
  %281 = icmp eq i32 %277, 0
  br i1 %281, label %303, label %282

282:                                              ; preds = %280
  %283 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %284

284:                                              ; preds = %284, %282
  %285 = phi i64 [ 0, %282 ], [ %299, %284 ]
  %286 = load i64, i64* %232, align 8
  %287 = mul i64 %286, %285
  %288 = load i8*, i8** %283, align 8
  %289 = ptrtoint i8* %288 to i64
  %290 = and i64 %289, 63
  %291 = icmp eq i64 %290, 0
  call void @llvm.assume(i1 %291) #8
  %292 = getelementptr inbounds i8, i8* %288, i64 %287
  %293 = ptrtoint i8* %292 to i64
  %294 = and i64 %293, 63
  %295 = icmp eq i64 %294, 0
  call void @llvm.assume(i1 %295) #8
  %296 = load i32, i32* %233, align 8
  %297 = zext i32 %296 to i64
  %298 = shl nuw nsw i64 %297, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %292, i8 0, i64 %298, i1 false) #8
  %299 = add nuw nsw i64 %285, 1
  %300 = load i32, i32* %231, align 4
  %301 = zext i32 %300 to i64
  %302 = icmp ult i64 %299, %301
  br i1 %302, label %284, label %303

303:                                              ; preds = %284, %219, %238, %280
  %304 = load i32, i32* %221, align 8
  %305 = zext i32 %304 to i64
  %306 = load i32, i32* %225, align 4
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 2
  %309 = load i32, i32* %308, align 8
  %310 = icmp ult i32 %309, %304
  br i1 %310, label %311, label %314

311:                                              ; preds = %329, %321, %303
  %312 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)) #8
  %313 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

314:                                              ; preds = %303
  %315 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 3
  %316 = load i32, i32* %315, align 4
  %317 = icmp ult i32 %316, %306
  br i1 %317, label %318, label %321

318:                                              ; preds = %335, %325, %314
  %319 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #8
  %320 = call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

321:                                              ; preds = %314
  store i32 %304, i32* %233, align 8
  store i32 %306, i32* %231, align 4
  %322 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 2
  %323 = load i32, i32* %322, align 8
  %324 = icmp ult i32 %323, %304
  br i1 %324, label %311, label %325

325:                                              ; preds = %321
  %326 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 3
  %327 = load i32, i32* %326, align 4
  %328 = icmp ult i32 %327, %306
  br i1 %328, label %318, label %329

329:                                              ; preds = %325
  %330 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %304, i32* %330, align 8
  %331 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %306, i32* %331, align 4
  %332 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 2
  %333 = load i32, i32* %332, align 8
  %334 = icmp ult i32 %333, %304
  br i1 %334, label %311, label %335

335:                                              ; preds = %329
  %336 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 3
  %337 = load i32, i32* %336, align 4
  %338 = icmp ult i32 %337, %306
  br i1 %338, label %318, label %339

339:                                              ; preds = %335
  %340 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %304, i32* %340, align 8
  %341 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %306, i32* %341, align 4
  %342 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %342) #8
  %343 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %21, i64 0, i32 0
  %345 = bitcast %"class.jxl::Plane.97"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %345, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %344, i64 %305, i64 %307, i64 4) #8
  %346 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %346) #8
  %347 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 0, i32 0
  %348 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 0
  %349 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %22, i64 0, i32 0, i32 1, i32 0, i32 1
  %350 = bitcast %"class.std::__1::unique_ptr.254"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %350, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %22, double 0x4026D49CB566E5F4) #8
  %351 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0
  %352 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %351, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* nonnull %352) #8
  %353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 0
  %354 = load i32, i32* %353, align 8
  %355 = zext i32 %354 to i64
  %356 = load i32, i32* %225, align 4
  %357 = zext i32 %356 to i64
  %358 = icmp eq i32 %356, 0
  br i1 %358, label %625, label %470

359:                                              ; preds = %1672
  %360 = bitcast %"class.jxl::ThreadPool"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %360) #8
  %361 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 0
  %362 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %18, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %361, align 8
  %363 = bitcast i8** %362 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %18, %"class.jxl::ThreadPool"** %363, align 8
  %364 = icmp eq i32 %1683, 0
  br i1 %364, label %381, label %365

365:                                              ; preds = %359
  %366 = bitcast %"class.jxl::ThreadPool::RunCallState.297"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %366) #8
  %367 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %15, i64 0, i32 0
  %368 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %15, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %367, align 8
  store %class.anon.293* %24, %class.anon.293** %368, align 8
  %369 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %360, i8* nonnull %366, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_9E12CallDataFuncEPvjm", i32 0, i32 %1683) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %366) #8
  br label %381

370:                                              ; preds = %1672
  %371 = icmp eq i32 %1683, 0
  br i1 %371, label %383, label %372

372:                                              ; preds = %370
  %373 = bitcast %"class.jxl::ThreadPool::RunCallState.297"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %373) #8
  %374 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %16, i64 0, i32 0
  %375 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %16, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %374, align 8
  store %class.anon.293* %24, %class.anon.293** %375, align 8
  %376 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %377 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %376, align 8
  %378 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %379 = load i8*, i8** %378, align 8
  %380 = call i32 %377(i8* %379, i8* nonnull %373, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_9E12CallDataFuncEPvjm", i32 0, i32 %1683) #8
  br label %381

381:                                              ; preds = %359, %365, %372
  %382 = phi i8* [ %373, %372 ], [ %360, %365 ], [ %360, %359 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %382) #8
  br label %383

383:                                              ; preds = %381, %370
  %384 = load double, double* %17, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double %384) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1688) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1684) #8
  %385 = bitcast %"class.jxl::Image3"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %385) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %385, i8 -86, i64 96, i1 false)
  %386 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 6
  %387 = load i64, i64* %386, align 8
  %388 = lshr i64 %387, 2
  %389 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 7
  %390 = load i64, i64* %389, align 8
  %391 = lshr i64 %390, 2
  %392 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %392, i64 %388, i64 %391, i64 4) #8
  %393 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %393, i64 %388, i64 %391, i64 4) #8
  %394 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %394, i64 %388, i64 %391, i64 4) #8
  %395 = bitcast %"class.jxl::Image3"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %395) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %395, i8 -86, i64 96, i1 false)
  %396 = load i64, i64* %386, align 8
  %397 = lshr i64 %396, 2
  %398 = load i64, i64* %389, align 8
  %399 = lshr i64 %398, 2
  %400 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %400, i64 %397, i64 %399, i64 4) #8
  %401 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %401, i64 %397, i64 %399, i64 4) #8
  %402 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %402, i64 %397, i64 %399, i64 4) #8
  %403 = load i64, i64* %389, align 8
  %404 = lshr i64 %403, 2
  %405 = trunc i64 %404 to i32
  %406 = bitcast %class.anon.294* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %406) #8
  %407 = getelementptr inbounds %class.anon.294, %class.anon.294* %27, i64 0, i32 0
  store %"class.jxl::Image3"* %25, %"class.jxl::Image3"** %407, align 8
  %408 = getelementptr inbounds %class.anon.294, %class.anon.294* %27, i64 0, i32 1
  store %"class.jxl::Image3"* %26, %"class.jxl::Image3"** %408, align 8
  %409 = getelementptr inbounds %class.anon.294, %class.anon.294* %27, i64 0, i32 2
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %409, align 8
  %410 = getelementptr inbounds %class.anon.294, %class.anon.294* %27, i64 0, i32 3
  store %"struct.jxl::FrameDimensions"* %42, %"struct.jxl::FrameDimensions"** %410, align 8
  %411 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %411) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %13, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double* nonnull %13) #8
  br i1 %1689, label %412, label %423

412:                                              ; preds = %383
  %413 = bitcast %"class.jxl::ThreadPool"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %413) #8
  %414 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 0
  %415 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %14, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %414, align 8
  %416 = bitcast i8** %415 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %14, %"class.jxl::ThreadPool"** %416, align 8
  %417 = icmp eq i32 %405, 0
  br i1 %417, label %434, label %418

418:                                              ; preds = %412
  %419 = bitcast %"class.jxl::ThreadPool::RunCallState.298"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %419) #8
  %420 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %11, i64 0, i32 0
  %421 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %11, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %420, align 8
  store %class.anon.294* %27, %class.anon.294** %421, align 8
  %422 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %413, i8* nonnull %419, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_10E12CallDataFuncEPvjm", i32 0, i32 %405) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %419) #8
  br label %434

423:                                              ; preds = %383
  %424 = icmp eq i32 %405, 0
  br i1 %424, label %436, label %425

425:                                              ; preds = %423
  %426 = bitcast %"class.jxl::ThreadPool::RunCallState.298"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %426) #8
  %427 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %12, i64 0, i32 0
  %428 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %12, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %427, align 8
  store %class.anon.294* %27, %class.anon.294** %428, align 8
  %429 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %430 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %429, align 8
  %431 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %432 = load i8*, i8** %431, align 8
  %433 = call i32 %430(i8* %432, i8* nonnull %426, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_10E12CallDataFuncEPvjm", i32 0, i32 %405) #8
  br label %434

434:                                              ; preds = %412, %418, %425
  %435 = phi i8* [ %426, %425 ], [ %413, %418 ], [ %413, %412 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %435) #8
  br label %436

436:                                              ; preds = %434, %423
  %437 = load double, double* %13, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), double %437) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %411) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %406) #8
  %438 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %438) #8
  %439 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 0, i32 0
  %440 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 0
  %441 = getelementptr inbounds %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.254"* %28, i64 0, i32 0, i32 1, i32 0, i32 1
  %442 = bitcast %"class.std::__1::unique_ptr.254"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %442, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* nonnull sret %28, double 0x4000ADFC98523461) #8
  %443 = bitcast %"class.jxl::Image3"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %443) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %443, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %29, %"class.jxl::Image3"* nonnull dereferenceable(96) %26, i64 16, i64 16) #8
  %444 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %444) #8
  %445 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 4
  %446 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %447 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 0
  %448 = bitcast %"class.jxl::Plane.97"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %448, i8 -86, i64 32, i1 false)
  %449 = load i32, i32* %447, align 8
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 1
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %30, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %454, i64 %450, i64 %453, i64 4) #8
  %455 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %455) #8
  %456 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %457 = bitcast %"class.jxl::Plane.97"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %457, i8 -86, i64 32, i1 false)
  %458 = load i32, i32* %447, align 8
  %459 = zext i32 %458 to i64
  %460 = load i32, i32* %451, align 4
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %31, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %462, i64 %459, i64 %461, i64 4) #8
  %463 = bitcast %"class.jxl::Image3"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %463) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %463, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* nonnull sret %32, %"class.jxl::Image3"* nonnull dereferenceable(96) %25, i64 16, i64 16) #8
  %464 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 1
  %465 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 4
  %466 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %467 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %467, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %468 = load i32, i32* %464, align 4
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %637, label %634

470:                                              ; preds = %339
  %471 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %472 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 4
  %473 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %474 = icmp eq i32 %354, 0
  %475 = shl nuw nsw i64 %355, 2
  %476 = and i64 %355, 4294967288
  %477 = add nsw i64 %476, -8
  %478 = lshr exact i64 %477, 3
  %479 = add nuw nsw i64 %478, 1
  %480 = icmp ult i32 %354, 8
  %481 = and i64 %355, 4294967288
  %482 = and i64 %479, 1
  %483 = icmp eq i64 %477, 0
  %484 = sub nuw nsw i64 %479, %482
  %485 = icmp eq i64 %482, 0
  %486 = icmp eq i64 %481, %355
  %487 = and i64 %355, 3
  %488 = icmp eq i64 %487, 0
  br label %489

489:                                              ; preds = %595, %470
  %490 = phi i64 [ 0, %470 ], [ %596, %595 ]
  %491 = load i8*, i8** %471, align 8
  %492 = load i64, i64* %472, align 8
  %493 = mul i64 %492, %490
  %494 = getelementptr inbounds i8, i8* %491, i64 %493
  %495 = ptrtoint i8* %494 to i64
  %496 = and i64 %495, 63
  %497 = icmp eq i64 %496, 0
  call void @llvm.assume(i1 %497) #8
  %498 = bitcast i8* %494 to float*
  %499 = load i8*, i8** %473, align 8
  %500 = load i64, i64* %232, align 8
  %501 = mul i64 %500, %490
  %502 = getelementptr inbounds i8, i8* %499, i64 %501
  %503 = ptrtoint i8* %502 to i64
  %504 = and i64 %503, 63
  %505 = icmp eq i64 %504, 0
  call void @llvm.assume(i1 %505) #8
  %506 = bitcast i8* %502 to float*
  br i1 %474, label %595, label %507

507:                                              ; preds = %489
  br i1 %480, label %508, label %526

508:                                              ; preds = %594, %526, %507
  %509 = phi i64 [ 0, %526 ], [ 0, %507 ], [ %481, %594 ]
  %510 = xor i64 %509, -1
  %511 = add nsw i64 %510, %355
  br i1 %488, label %523, label %512

512:                                              ; preds = %508, %512
  %513 = phi i64 [ %520, %512 ], [ %509, %508 ]
  %514 = phi i64 [ %521, %512 ], [ %487, %508 ]
  %515 = getelementptr inbounds float, float* %498, i64 %513
  %516 = load float, float* %515, align 4
  %517 = getelementptr inbounds float, float* %506, i64 %513
  %518 = load float, float* %517, align 4
  %519 = fsub float %518, %516
  store float %519, float* %517, align 4
  %520 = add nuw nsw i64 %513, 1
  %521 = add i64 %514, -1
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %523, label %512, !llvm.loop !276

523:                                              ; preds = %512, %508
  %524 = phi i64 [ %509, %508 ], [ %520, %512 ]
  %525 = icmp ult i64 %511, 3
  br i1 %525, label %595, label %598

526:                                              ; preds = %507
  %527 = getelementptr i8, i8* %499, i64 %475
  %528 = getelementptr i8, i8* %527, i64 %501
  %529 = getelementptr i8, i8* %491, i64 %475
  %530 = mul i64 %492, %490
  %531 = getelementptr i8, i8* %529, i64 %530
  %532 = icmp ult i8* %502, %531
  %533 = icmp ult i8* %494, %528
  %534 = and i1 %532, %533
  br i1 %534, label %508, label %535

535:                                              ; preds = %526
  br i1 %483, label %575, label %536

536:                                              ; preds = %535, %536
  %537 = phi i64 [ %572, %536 ], [ 0, %535 ]
  %538 = phi i64 [ %573, %536 ], [ %484, %535 ]
  %539 = getelementptr inbounds float, float* %498, i64 %537
  %540 = bitcast float* %539 to <4 x float>*
  %541 = load <4 x float>, <4 x float>* %540, align 64, !alias.scope !277
  %542 = getelementptr inbounds float, float* %539, i64 4
  %543 = bitcast float* %542 to <4 x float>*
  %544 = load <4 x float>, <4 x float>* %543, align 16, !alias.scope !277
  %545 = getelementptr inbounds float, float* %506, i64 %537
  %546 = bitcast float* %545 to <4 x float>*
  %547 = load <4 x float>, <4 x float>* %546, align 64, !alias.scope !280, !noalias !277
  %548 = getelementptr inbounds float, float* %545, i64 4
  %549 = bitcast float* %548 to <4 x float>*
  %550 = load <4 x float>, <4 x float>* %549, align 16, !alias.scope !280, !noalias !277
  %551 = fsub <4 x float> %547, %541
  %552 = fsub <4 x float> %550, %544
  %553 = bitcast float* %545 to <4 x float>*
  store <4 x float> %551, <4 x float>* %553, align 64, !alias.scope !280, !noalias !277
  %554 = bitcast float* %548 to <4 x float>*
  store <4 x float> %552, <4 x float>* %554, align 16, !alias.scope !280, !noalias !277
  %555 = or i64 %537, 8
  %556 = getelementptr inbounds float, float* %498, i64 %555
  %557 = bitcast float* %556 to <4 x float>*
  %558 = load <4 x float>, <4 x float>* %557, align 32, !alias.scope !277
  %559 = getelementptr inbounds float, float* %556, i64 4
  %560 = bitcast float* %559 to <4 x float>*
  %561 = load <4 x float>, <4 x float>* %560, align 16, !alias.scope !277
  %562 = getelementptr inbounds float, float* %506, i64 %555
  %563 = bitcast float* %562 to <4 x float>*
  %564 = load <4 x float>, <4 x float>* %563, align 32, !alias.scope !280, !noalias !277
  %565 = getelementptr inbounds float, float* %562, i64 4
  %566 = bitcast float* %565 to <4 x float>*
  %567 = load <4 x float>, <4 x float>* %566, align 16, !alias.scope !280, !noalias !277
  %568 = fsub <4 x float> %564, %558
  %569 = fsub <4 x float> %567, %561
  %570 = bitcast float* %562 to <4 x float>*
  store <4 x float> %568, <4 x float>* %570, align 32, !alias.scope !280, !noalias !277
  %571 = bitcast float* %565 to <4 x float>*
  store <4 x float> %569, <4 x float>* %571, align 16, !alias.scope !280, !noalias !277
  %572 = add i64 %537, 16
  %573 = add i64 %538, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %536, !llvm.loop !282

575:                                              ; preds = %536, %535
  %576 = phi i64 [ 0, %535 ], [ %572, %536 ]
  br i1 %485, label %594, label %577

577:                                              ; preds = %575
  %578 = getelementptr inbounds float, float* %498, i64 %576
  %579 = bitcast float* %578 to <4 x float>*
  %580 = load <4 x float>, <4 x float>* %579, align 32, !alias.scope !277
  %581 = getelementptr inbounds float, float* %578, i64 4
  %582 = bitcast float* %581 to <4 x float>*
  %583 = load <4 x float>, <4 x float>* %582, align 16, !alias.scope !277
  %584 = getelementptr inbounds float, float* %506, i64 %576
  %585 = bitcast float* %584 to <4 x float>*
  %586 = load <4 x float>, <4 x float>* %585, align 32, !alias.scope !280, !noalias !277
  %587 = getelementptr inbounds float, float* %584, i64 4
  %588 = bitcast float* %587 to <4 x float>*
  %589 = load <4 x float>, <4 x float>* %588, align 16, !alias.scope !280, !noalias !277
  %590 = fsub <4 x float> %586, %580
  %591 = fsub <4 x float> %589, %583
  %592 = bitcast float* %584 to <4 x float>*
  store <4 x float> %590, <4 x float>* %592, align 32, !alias.scope !280, !noalias !277
  %593 = bitcast float* %587 to <4 x float>*
  store <4 x float> %591, <4 x float>* %593, align 16, !alias.scope !280, !noalias !277
  br label %594

594:                                              ; preds = %575, %577
  br i1 %486, label %595, label %508

595:                                              ; preds = %523, %598, %594, %489
  %596 = add nuw nsw i64 %490, 1
  %597 = icmp eq i64 %596, %357
  br i1 %597, label %625, label %489

598:                                              ; preds = %523, %598
  %599 = phi i64 [ %623, %598 ], [ %524, %523 ]
  %600 = getelementptr inbounds float, float* %498, i64 %599
  %601 = load float, float* %600, align 4
  %602 = getelementptr inbounds float, float* %506, i64 %599
  %603 = load float, float* %602, align 4
  %604 = fsub float %603, %601
  store float %604, float* %602, align 4
  %605 = add nuw nsw i64 %599, 1
  %606 = getelementptr inbounds float, float* %498, i64 %605
  %607 = load float, float* %606, align 4
  %608 = getelementptr inbounds float, float* %506, i64 %605
  %609 = load float, float* %608, align 4
  %610 = fsub float %609, %607
  store float %610, float* %608, align 4
  %611 = add nuw nsw i64 %599, 2
  %612 = getelementptr inbounds float, float* %498, i64 %611
  %613 = load float, float* %612, align 4
  %614 = getelementptr inbounds float, float* %506, i64 %611
  %615 = load float, float* %614, align 4
  %616 = fsub float %615, %613
  store float %616, float* %614, align 4
  %617 = add nuw nsw i64 %599, 3
  %618 = getelementptr inbounds float, float* %498, i64 %617
  %619 = load float, float* %618, align 4
  %620 = getelementptr inbounds float, float* %506, i64 %617
  %621 = load float, float* %620, align 4
  %622 = fsub float %621, %619
  store float %622, float* %620, align 4
  %623 = add nuw nsw i64 %599, 4
  %624 = icmp eq i64 %623, %355
  br i1 %624, label %595, label %598, !llvm.loop !283

625:                                              ; preds = %595, %339
  %626 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1
  %627 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %626, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %627) #8
  %628 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %626, i64 0, i32 0, i32 0
  %629 = load i32, i32* %628, align 8
  %630 = zext i32 %629 to i64
  %631 = load i32, i32* %59, align 4
  %632 = zext i32 %631 to i64
  %633 = icmp eq i32 %631, 0
  br i1 %633, label %1506, label %1350

634:                                              ; preds = %436
  %635 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %636 = load i32, i32* %466, align 8
  br label %641

637:                                              ; preds = %670, %436
  %638 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %638, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %639 = load i32, i32* %464, align 4
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %1288, label %1237

641:                                              ; preds = %634, %670
  %642 = phi i32 [ %468, %634 ], [ %671, %670 ]
  %643 = phi i32 [ %636, %634 ], [ %672, %670 ]
  %644 = phi i64 [ 0, %634 ], [ %673, %670 ]
  %645 = load i64, i64* %465, align 8
  %646 = mul i64 %645, %644
  %647 = load i8*, i8** %635, align 8
  %648 = ptrtoint i8* %647 to i64
  %649 = and i64 %648, 63
  %650 = icmp eq i64 %649, 0
  call void @llvm.assume(i1 %650) #8
  %651 = getelementptr inbounds i8, i8* %647, i64 %646
  %652 = ptrtoint i8* %651 to i64
  %653 = and i64 %652, 63
  %654 = icmp eq i64 %653, 0
  call void @llvm.assume(i1 %654) #8
  %655 = bitcast i8* %651 to float*
  %656 = add nuw nsw i64 %644, 16
  %657 = load i8*, i8** %446, align 8
  %658 = load i64, i64* %445, align 8
  %659 = mul i64 %658, %656
  %660 = getelementptr inbounds i8, i8* %657, i64 %659
  %661 = ptrtoint i8* %660 to i64
  %662 = and i64 %661, 63
  %663 = icmp eq i64 %662, 0
  call void @llvm.assume(i1 %663) #8
  %664 = icmp eq i32 %643, 0
  br i1 %664, label %670, label %665

665:                                              ; preds = %641
  %666 = getelementptr inbounds i8, i8* %660, i64 64
  %667 = bitcast i8* %666 to float*
  br label %676

668:                                              ; preds = %676
  %669 = load i32, i32* %464, align 4
  br label %670

670:                                              ; preds = %668, %641
  %671 = phi i32 [ %669, %668 ], [ %642, %641 ]
  %672 = phi i32 [ %686, %668 ], [ 0, %641 ]
  %673 = add nuw nsw i64 %644, 1
  %674 = zext i32 %671 to i64
  %675 = icmp ult i64 %673, %674
  br i1 %675, label %641, label %637

676:                                              ; preds = %665, %676
  %677 = phi i64 [ 0, %665 ], [ %685, %676 ]
  %678 = getelementptr inbounds float, float* %667, i64 %677
  %679 = load float, float* %678, align 4, !alias.scope !284
  %680 = getelementptr inbounds float, float* %655, i64 %677
  %681 = load float, float* %680, align 4, !alias.scope !287
  %682 = fmul float %681, 5.000000e-01
  %683 = fcmp ogt float %679, %682
  %684 = select i1 %683, float %679, float %682
  store float %684, float* %680, align 4, !alias.scope !290
  %685 = add nuw nsw i64 %677, 1
  %686 = load i32, i32* %466, align 8
  %687 = zext i32 %686 to i64
  %688 = icmp ult i64 %685, %687
  br i1 %688, label %676, label %668

689:                                              ; preds = %1225
  %690 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %691 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %692 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %693 = load i32, i32* %1346, align 8
  br label %766

694:                                              ; preds = %1343
  %695 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %696 = load i32, i32* %1346, align 8
  br label %701

697:                                              ; preds = %730, %1343
  %698 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %698, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %699 = load i32, i32* %1344, align 4
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %1166, label %1115

701:                                              ; preds = %694, %730
  %702 = phi i32 [ %1348, %694 ], [ %731, %730 ]
  %703 = phi i32 [ %696, %694 ], [ %732, %730 ]
  %704 = phi i64 [ 0, %694 ], [ %733, %730 ]
  %705 = load i64, i64* %1345, align 8
  %706 = mul i64 %705, %704
  %707 = load i8*, i8** %695, align 8
  %708 = ptrtoint i8* %707 to i64
  %709 = and i64 %708, 63
  %710 = icmp eq i64 %709, 0
  call void @llvm.assume(i1 %710) #8
  %711 = getelementptr inbounds i8, i8* %707, i64 %706
  %712 = ptrtoint i8* %711 to i64
  %713 = and i64 %712, 63
  %714 = icmp eq i64 %713, 0
  call void @llvm.assume(i1 %714) #8
  %715 = bitcast i8* %711 to float*
  %716 = add nuw nsw i64 %704, 16
  %717 = load i8*, i8** %446, align 8
  %718 = load i64, i64* %445, align 8
  %719 = mul i64 %718, %716
  %720 = getelementptr inbounds i8, i8* %717, i64 %719
  %721 = ptrtoint i8* %720 to i64
  %722 = and i64 %721, 63
  %723 = icmp eq i64 %722, 0
  call void @llvm.assume(i1 %723) #8
  %724 = icmp eq i32 %703, 0
  br i1 %724, label %730, label %725

725:                                              ; preds = %701
  %726 = getelementptr inbounds i8, i8* %720, i64 64
  %727 = bitcast i8* %726 to float*
  br label %736

728:                                              ; preds = %736
  %729 = load i32, i32* %1344, align 4
  br label %730

730:                                              ; preds = %728, %701
  %731 = phi i32 [ %729, %728 ], [ %702, %701 ]
  %732 = phi i32 [ %746, %728 ], [ 0, %701 ]
  %733 = add nuw nsw i64 %704, 1
  %734 = zext i32 %731 to i64
  %735 = icmp ult i64 %733, %734
  br i1 %735, label %701, label %697

736:                                              ; preds = %725, %736
  %737 = phi i64 [ 0, %725 ], [ %745, %736 ]
  %738 = getelementptr inbounds float, float* %727, i64 %737
  %739 = load float, float* %738, align 4, !alias.scope !293
  %740 = getelementptr inbounds float, float* %715, i64 %737
  %741 = load float, float* %740, align 4, !alias.scope !296
  %742 = fmul float %741, 5.000000e-01
  %743 = fcmp ogt float %739, %742
  %744 = select i1 %743, float %739, float %742
  store float %744, float* %740, align 4, !alias.scope !299
  %745 = add nuw nsw i64 %737, 1
  %746 = load i32, i32* %1346, align 8
  %747 = zext i32 %746 to i64
  %748 = icmp ult i64 %745, %747
  br i1 %748, label %736, label %728

749:                                              ; preds = %810, %1225
  %750 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #8
  %751 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 4
  %752 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %753 = bitcast %"class.jxl::Plane.97"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %753, i8 -86, i64 32, i1 false)
  %754 = load i32, i32* %466, align 8
  %755 = zext i32 %754 to i64
  %756 = load i32, i32* %464, align 4
  %757 = zext i32 %756 to i64
  %758 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %34, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %758, i64 %755, i64 %757, i64 4) #8
  %759 = load i32, i32* %464, align 4
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %834, label %761

761:                                              ; preds = %749
  %762 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %763 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %764 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %765 = load i32, i32* %466, align 8
  br label %1047

766:                                              ; preds = %689, %810
  %767 = phi i32 [ %1235, %689 ], [ %811, %810 ]
  %768 = phi i32 [ %693, %689 ], [ %812, %810 ]
  %769 = phi i64 [ 0, %689 ], [ %813, %810 ]
  %770 = load i64, i64* %1345, align 8
  %771 = mul i64 %770, %769
  %772 = load i8*, i8** %690, align 8
  %773 = ptrtoint i8* %772 to i64
  %774 = and i64 %773, 63
  %775 = icmp eq i64 %774, 0
  call void @llvm.assume(i1 %775) #8
  %776 = getelementptr inbounds i8, i8* %772, i64 %771
  %777 = ptrtoint i8* %776 to i64
  %778 = and i64 %777, 63
  %779 = icmp eq i64 %778, 0
  call void @llvm.assume(i1 %779) #8
  %780 = bitcast i8* %776 to float*
  %781 = load i8*, i8** %691, align 8
  %782 = ptrtoint i8* %781 to i64
  %783 = and i64 %782, 63
  %784 = icmp eq i64 %783, 0
  call void @llvm.assume(i1 %784) #8
  %785 = getelementptr inbounds i8, i8* %781, i64 %771
  %786 = ptrtoint i8* %785 to i64
  %787 = and i64 %786, 63
  %788 = icmp eq i64 %787, 0
  call void @llvm.assume(i1 %788) #8
  %789 = bitcast i8* %785 to float*
  %790 = load i8*, i8** %692, align 8
  %791 = ptrtoint i8* %790 to i64
  %792 = and i64 %791, 63
  %793 = icmp eq i64 %792, 0
  call void @llvm.assume(i1 %793) #8
  %794 = getelementptr inbounds i8, i8* %790, i64 %771
  %795 = ptrtoint i8* %794 to i64
  %796 = and i64 %795, 63
  %797 = icmp eq i64 %796, 0
  call void @llvm.assume(i1 %797) #8
  %798 = bitcast i8* %794 to float*
  %799 = load i8*, i8** %1230, align 8
  %800 = load i64, i64* %1229, align 8
  %801 = mul i64 %800, %769
  %802 = getelementptr inbounds i8, i8* %799, i64 %801
  %803 = ptrtoint i8* %802 to i64
  %804 = and i64 %803, 63
  %805 = icmp eq i64 %804, 0
  call void @llvm.assume(i1 %805) #8
  %806 = bitcast i8* %802 to float*
  %807 = icmp eq i32 %768, 0
  br i1 %807, label %810, label %816

808:                                              ; preds = %816
  %809 = load i32, i32* %1344, align 4
  br label %810

810:                                              ; preds = %808, %766
  %811 = phi i32 [ %809, %808 ], [ %767, %766 ]
  %812 = phi i32 [ %831, %808 ], [ 0, %766 ]
  %813 = add nuw nsw i64 %769, 1
  %814 = zext i32 %811 to i64
  %815 = icmp ult i64 %813, %814
  br i1 %815, label %766, label %749

816:                                              ; preds = %766, %816
  %817 = phi i64 [ %830, %816 ], [ 0, %766 ]
  %818 = getelementptr inbounds float, float* %780, i64 %817
  %819 = load float, float* %818, align 4, !alias.scope !302
  %820 = fmul float %819, 0x401FDB9360000000
  %821 = getelementptr inbounds float, float* %789, i64 %817
  %822 = load float, float* %821, align 4, !alias.scope !305
  %823 = fmul float %822, 0x3FE23D70A0000000
  %824 = fadd float %820, %823
  %825 = getelementptr inbounds float, float* %798, i64 %817
  %826 = load float, float* %825, align 4, !alias.scope !308
  %827 = fmul float %826, 0x3FC9F13CE0000000
  %828 = fadd float %827, %824
  %829 = getelementptr inbounds float, float* %806, i64 %817
  store float %828, float* %829, align 4, !alias.scope !311
  %830 = add nuw nsw i64 %817, 1
  %831 = load i32, i32* %1346, align 8
  %832 = zext i32 %831 to i64
  %833 = icmp ult i64 %830, %832
  br i1 %833, label %816, label %808

834:                                              ; preds = %1091, %749
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %33)
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %34)
  %835 = load float, float* %43, align 8
  %836 = call float @_ZN3jxl14InitialQuantDCEf(float %835) #8
  %837 = fmul float %836, 0x3FEC36E6E0000000
  %838 = bitcast float* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %838) #8
  %839 = load float, float* %43, align 8
  %840 = fdiv float 0x400421F180000000, %839
  store float %840, float* %35, align 4
  %841 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %841) #8
  %842 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %843 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %843, i8 -86, i64 32, i1 false)
  %844 = load i64, i64* %1674, align 8
  %845 = load i64, i64* %1678, align 8
  %846 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %846, i64 %844, i64 %845, i64 4) #8
  %847 = bitcast %class.anon.295* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %847) #8
  %848 = getelementptr inbounds %class.anon.295, %class.anon.295* %37, i64 0, i32 0
  store %"class.jxl::Plane.97"* %34, %"class.jxl::Plane.97"** %848, align 8
  %849 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %849) #8
  %850 = bitcast [18 x %"struct.std::__1::pair.260"]* %38 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1069547520, i32 3, i32 1068708659>, <4 x i32>* %850, align 16
  %851 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 2, i32 0
  %852 = bitcast i32* %851 to <4 x i32>*
  store <4 x i32> <i32 12, i32 1067030938, i32 13, i32 1067030938>, <4 x i32>* %852, align 16
  %853 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 4, i32 0
  %854 = bitcast i32* %853 to <4 x i32>*
  store <4 x i32> <i32 14, i32 1066611507, i32 15, i32 1066611507>, <4 x i32>* %854, align 16
  %855 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 6, i32 0
  %856 = bitcast i32* %855 to <4 x i32>*
  store <4 x i32> <i32 16, i32 1066611507, i32 17, i32 1066611507>, <4 x i32>* %856, align 16
  %857 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 8, i32 0
  %858 = bitcast i32* %857 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1065353216, i32 6, i32 1061997773>, <4 x i32>* %858, align 16
  %859 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 10, i32 0
  %860 = bitcast i32* %859 to <4 x i32>*
  store <4 x i32> <i32 7, i32 1061997773, i32 4, i32 1045220557>, <4 x i32>* %860, align 16
  %861 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 12, i32 0
  %862 = bitcast i32* %861 to <4 x i32>*
  store <4 x i32> <i32 11, i32 1045220557, i32 10, i32 1045220557>, <4 x i32>* %862, align 16
  %863 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 14, i32 0
  %864 = bitcast i32* %863 to <4 x i32>*
  store <4 x i32> <i32 5, i32 1045220557, i32 20, i32 1036831949>, <4 x i32>* %864, align 16
  %865 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %38, i64 0, i64 16, i32 0
  %866 = bitcast i32* %865 to <4 x i32>*
  store <4 x i32> <i32 19, i32 1036831949, i32 18, i32 1025758986>, <4 x i32>* %866, align 16
  %867 = bitcast float* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %867) #8
  store float 0xFFFFFFFFE0000000, float* %39, align 4
  %868 = load float, float* %43, align 8
  %869 = call float @sqrtf(float %868) #26
  %870 = call float @llvm.fabs.f32(float %869)
  %871 = fcmp oeq float %868, 0xFFF0000000000000
  %872 = fmul float %870, 5.000000e-01
  %873 = fadd float %872, 0x3E45798EE0000000
  %874 = select i1 %871, float 0x7FF0000000000000, float %873
  store float %874, float* %39, align 4
  %875 = load i64, i64* %23, align 8
  %876 = mul i64 %875, %1681
  %877 = trunc i64 %876 to i32
  %878 = bitcast %class.anon.296* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %878) #8
  %879 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 0
  store i64* %23, i64** %879, align 8
  %880 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 1
  store %"class.jxl::Plane.97"* %36, %"class.jxl::Plane.97"** %880, align 8
  %881 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %881, align 8
  %882 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 3
  store float* %35, float** %882, align 8
  %883 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 4
  store [18 x %"struct.std::__1::pair.260"]* %38, [18 x %"struct.std::__1::pair.260"]** %883, align 8
  %884 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 5
  store %class.anon.295* %37, %class.anon.295** %884, align 8
  %885 = getelementptr inbounds %class.anon.296, %class.anon.296* %40, i64 0, i32 6
  store float* %39, float** %885, align 8
  %886 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %886) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double* nonnull %9) #8
  br i1 %1689, label %887, label %898

887:                                              ; preds = %834
  %888 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %888) #8
  %889 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %890 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %889, align 8
  %891 = bitcast i8** %890 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %891, align 8
  %892 = icmp eq i32 %877, 0
  br i1 %892, label %909, label %893

893:                                              ; preds = %887
  %894 = bitcast %"class.jxl::ThreadPool::RunCallState.299"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %894) #8
  %895 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.299", %"class.jxl::ThreadPool::RunCallState.299"* %7, i64 0, i32 0
  %896 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.299", %"class.jxl::ThreadPool::RunCallState.299"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %895, align 8
  store %class.anon.296* %40, %class.anon.296** %896, align 8
  %897 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %888, i8* nonnull %894, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_11E12CallDataFuncEPvjm", i32 0, i32 %877) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %894) #8
  br label %909

898:                                              ; preds = %834
  %899 = icmp eq i32 %877, 0
  br i1 %899, label %911, label %900

900:                                              ; preds = %898
  %901 = bitcast %"class.jxl::ThreadPool::RunCallState.299"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %901) #8
  %902 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.299", %"class.jxl::ThreadPool::RunCallState.299"* %8, i64 0, i32 0
  %903 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.299", %"class.jxl::ThreadPool::RunCallState.299"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %902, align 8
  store %class.anon.296* %40, %class.anon.296** %903, align 8
  %904 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 0
  %905 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %904, align 8
  %906 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %4, i64 0, i32 1
  %907 = load i8*, i8** %906, align 8
  %908 = call i32 %905(i8* %907, i8* nonnull %901, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_11E12CallDataFuncEPvjm", i32 0, i32 %877) #8
  br label %909

909:                                              ; preds = %887, %893, %900
  %910 = phi i8* [ %901, %900 ], [ %888, %893 ], [ %888, %887 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %910) #8
  br label %911

911:                                              ; preds = %909, %898
  %912 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), double %912) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %886) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %878) #8
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36)
  %913 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 7
  call void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIhEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), %"class.jxl::Plane"* dereferenceable(32) %913)
  %914 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 3
  %915 = load i64, i64* %386, align 8
  %916 = load i64, i64* %389, align 8
  call void @_ZN3jxl14DumpAcStrategyERKNS_15AcStrategyImageEmmPKcPNS_6AuxOutE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %914, i64 %915, i64 %916, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), %"struct.jxl::AuxOut"* %5) #8
  %917 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 5
  %918 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 6
  call void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"* %917, float %837, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %36, %"class.jxl::Plane.53"* %918) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %867) #8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %849) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %847) #8
  %919 = load i8*, i8** %842, align 8
  store i8* null, i8** %842, align 8
  %920 = icmp eq i8* %919, null
  br i1 %920, label %922, label %921

921:                                              ; preds = %911
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %919) #8
  br label %922

922:                                              ; preds = %911, %921
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %841) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %838) #8
  %923 = load i8*, i8** %752, align 8
  store i8* null, i8** %752, align 8
  %924 = icmp eq i8* %923, null
  br i1 %924, label %926, label %925

925:                                              ; preds = %922
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %923) #8
  br label %926

926:                                              ; preds = %922, %925
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %750) #8
  %927 = load i8*, i8** %1230, align 8
  store i8* null, i8** %1230, align 8
  %928 = icmp eq i8* %927, null
  br i1 %928, label %930, label %929

929:                                              ; preds = %926
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %927) #8
  br label %930

930:                                              ; preds = %926, %929
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1228) #8
  %931 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %932 = load i8*, i8** %931, align 8
  store i8* null, i8** %931, align 8
  %933 = icmp eq i8* %932, null
  br i1 %933, label %935, label %934

934:                                              ; preds = %930
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %932) #8
  br label %935

935:                                              ; preds = %934, %930
  %936 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %937 = load i8*, i8** %936, align 8
  store i8* null, i8** %936, align 8
  %938 = icmp eq i8* %937, null
  br i1 %938, label %940, label %939

939:                                              ; preds = %935
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %937) #8
  br label %940

940:                                              ; preds = %939, %935
  %941 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %942 = load i8*, i8** %941, align 8
  store i8* null, i8** %941, align 8
  %943 = icmp eq i8* %942, null
  br i1 %943, label %945, label %944

944:                                              ; preds = %940
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %942) #8
  br label %945

945:                                              ; preds = %940, %944
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %463) #8
  %946 = load i8*, i8** %456, align 8
  store i8* null, i8** %456, align 8
  %947 = icmp eq i8* %946, null
  br i1 %947, label %949, label %948

948:                                              ; preds = %945
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %946) #8
  br label %949

949:                                              ; preds = %945, %948
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %455) #8
  %950 = load i8*, i8** %446, align 8
  store i8* null, i8** %446, align 8
  %951 = icmp eq i8* %950, null
  br i1 %951, label %953, label %952

952:                                              ; preds = %949
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %950) #8
  br label %953

953:                                              ; preds = %949, %952
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %444) #8
  %954 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %955 = load i8*, i8** %954, align 8
  store i8* null, i8** %954, align 8
  %956 = icmp eq i8* %955, null
  br i1 %956, label %958, label %957

957:                                              ; preds = %953
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %955) #8
  br label %958

958:                                              ; preds = %957, %953
  %959 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %960 = load i8*, i8** %959, align 8
  store i8* null, i8** %959, align 8
  %961 = icmp eq i8* %960, null
  br i1 %961, label %963, label %962

962:                                              ; preds = %958
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %960) #8
  br label %963

963:                                              ; preds = %962, %958
  %964 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %965 = load i8*, i8** %964, align 8
  store i8* null, i8** %964, align 8
  %966 = icmp eq i8* %965, null
  br i1 %966, label %968, label %967

967:                                              ; preds = %963
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %965) #8
  br label %968

968:                                              ; preds = %963, %967
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %443) #8
  %969 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %439, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %439, align 8
  %970 = icmp eq %"struct.jxl::RecursiveGaussian"* %969, null
  br i1 %970, label %975, label %971

971:                                              ; preds = %968
  %972 = bitcast %"struct.jxl::RecursiveGaussian"* %969 to i8*
  %973 = load void (i8*, i8*)*, void (i8*, i8*)** %440, align 8
  %974 = load i8*, i8** %441, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %972, void (i8*, i8*)* %973, i8* %974, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %975

975:                                              ; preds = %968, %971
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %438) #8
  %976 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %977 = load i8*, i8** %976, align 8
  store i8* null, i8** %976, align 8
  %978 = icmp eq i8* %977, null
  br i1 %978, label %980, label %979

979:                                              ; preds = %975
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %977) #8
  br label %980

980:                                              ; preds = %979, %975
  %981 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %982 = load i8*, i8** %981, align 8
  store i8* null, i8** %981, align 8
  %983 = icmp eq i8* %982, null
  br i1 %983, label %985, label %984

984:                                              ; preds = %980
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %982) #8
  br label %985

985:                                              ; preds = %984, %980
  %986 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %987 = load i8*, i8** %986, align 8
  store i8* null, i8** %986, align 8
  %988 = icmp eq i8* %987, null
  br i1 %988, label %990, label %989

989:                                              ; preds = %985
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %987) #8
  br label %990

990:                                              ; preds = %985, %989
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %395) #8
  %991 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %992 = load i8*, i8** %991, align 8
  store i8* null, i8** %991, align 8
  %993 = icmp eq i8* %992, null
  br i1 %993, label %995, label %994

994:                                              ; preds = %990
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %992) #8
  br label %995

995:                                              ; preds = %994, %990
  %996 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %997 = load i8*, i8** %996, align 8
  store i8* null, i8** %996, align 8
  %998 = icmp eq i8* %997, null
  br i1 %998, label %1000, label %999

999:                                              ; preds = %995
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %997) #8
  br label %1000

1000:                                             ; preds = %999, %995
  %1001 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1002 = load i8*, i8** %1001, align 8
  store i8* null, i8** %1001, align 8
  %1003 = icmp eq i8* %1002, null
  br i1 %1003, label %1005, label %1004

1004:                                             ; preds = %1000
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1002) #8
  br label %1005

1005:                                             ; preds = %1000, %1004
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %385) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1673) #8
  %1006 = load %"struct.jxl::RecursiveGaussian"*, %"struct.jxl::RecursiveGaussian"** %347, align 8
  store %"struct.jxl::RecursiveGaussian"* null, %"struct.jxl::RecursiveGaussian"** %347, align 8
  %1007 = icmp eq %"struct.jxl::RecursiveGaussian"* %1006, null
  br i1 %1007, label %1012, label %1008

1008:                                             ; preds = %1005
  %1009 = bitcast %"struct.jxl::RecursiveGaussian"* %1006 to i8*
  %1010 = load void (i8*, i8*)*, void (i8*, i8*)** %348, align 8
  %1011 = load i8*, i8** %349, align 8
  call void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8* nonnull %1009, void (i8*, i8*)* %1010, i8* %1011, void (i8*, i64)* nonnull @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm) #8
  br label %1012

1012:                                             ; preds = %1005, %1008
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %346) #8
  %1013 = load i8*, i8** %343, align 8
  store i8* null, i8** %343, align 8
  %1014 = icmp eq i8* %1013, null
  br i1 %1014, label %1016, label %1015

1015:                                             ; preds = %1012
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1013) #8
  br label %1016

1016:                                             ; preds = %1012, %1015
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %342) #8
  %1017 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1018 = load i8*, i8** %1017, align 8
  store i8* null, i8** %1017, align 8
  %1019 = icmp eq i8* %1018, null
  br i1 %1019, label %1021, label %1020

1020:                                             ; preds = %1016
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1018) #8
  br label %1021

1021:                                             ; preds = %1020, %1016
  %1022 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1023 = load i8*, i8** %1022, align 8
  store i8* null, i8** %1022, align 8
  %1024 = icmp eq i8* %1023, null
  br i1 %1024, label %1026, label %1025

1025:                                             ; preds = %1021
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1023) #8
  br label %1026

1026:                                             ; preds = %1025, %1021
  %1027 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1028 = load i8*, i8** %1027, align 8
  store i8* null, i8** %1027, align 8
  %1029 = icmp eq i8* %1028, null
  br i1 %1029, label %1031, label %1030

1030:                                             ; preds = %1026
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1028) #8
  br label %1031

1031:                                             ; preds = %1026, %1030
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %220) #8
  %1032 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1033 = load i8*, i8** %1032, align 8
  store i8* null, i8** %1032, align 8
  %1034 = icmp eq i8* %1033, null
  br i1 %1034, label %1036, label %1035

1035:                                             ; preds = %1031
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1033) #8
  br label %1036

1036:                                             ; preds = %1035, %1031
  %1037 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1038 = load i8*, i8** %1037, align 8
  store i8* null, i8** %1037, align 8
  %1039 = icmp eq i8* %1038, null
  br i1 %1039, label %1041, label %1040

1040:                                             ; preds = %1036
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1038) #8
  br label %1041

1041:                                             ; preds = %1040, %1036
  %1042 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1043 = load i8*, i8** %1042, align 8
  store i8* null, i8** %1042, align 8
  %1044 = icmp eq i8* %1043, null
  br i1 %1044, label %1046, label %1045

1045:                                             ; preds = %1041
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1043) #8
  br label %1046

1046:                                             ; preds = %1041, %1045
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #8
  ret i32 0

1047:                                             ; preds = %761, %1091
  %1048 = phi i32 [ %759, %761 ], [ %1092, %1091 ]
  %1049 = phi i32 [ %765, %761 ], [ %1093, %1091 ]
  %1050 = phi i64 [ 0, %761 ], [ %1094, %1091 ]
  %1051 = load i64, i64* %465, align 8
  %1052 = mul i64 %1051, %1050
  %1053 = load i8*, i8** %762, align 8
  %1054 = ptrtoint i8* %1053 to i64
  %1055 = and i64 %1054, 63
  %1056 = icmp eq i64 %1055, 0
  call void @llvm.assume(i1 %1056) #8
  %1057 = getelementptr inbounds i8, i8* %1053, i64 %1052
  %1058 = ptrtoint i8* %1057 to i64
  %1059 = and i64 %1058, 63
  %1060 = icmp eq i64 %1059, 0
  call void @llvm.assume(i1 %1060) #8
  %1061 = bitcast i8* %1057 to float*
  %1062 = load i8*, i8** %763, align 8
  %1063 = ptrtoint i8* %1062 to i64
  %1064 = and i64 %1063, 63
  %1065 = icmp eq i64 %1064, 0
  call void @llvm.assume(i1 %1065) #8
  %1066 = getelementptr inbounds i8, i8* %1062, i64 %1052
  %1067 = ptrtoint i8* %1066 to i64
  %1068 = and i64 %1067, 63
  %1069 = icmp eq i64 %1068, 0
  call void @llvm.assume(i1 %1069) #8
  %1070 = bitcast i8* %1066 to float*
  %1071 = load i8*, i8** %764, align 8
  %1072 = ptrtoint i8* %1071 to i64
  %1073 = and i64 %1072, 63
  %1074 = icmp eq i64 %1073, 0
  call void @llvm.assume(i1 %1074) #8
  %1075 = getelementptr inbounds i8, i8* %1071, i64 %1052
  %1076 = ptrtoint i8* %1075 to i64
  %1077 = and i64 %1076, 63
  %1078 = icmp eq i64 %1077, 0
  call void @llvm.assume(i1 %1078) #8
  %1079 = bitcast i8* %1075 to float*
  %1080 = load i8*, i8** %752, align 8
  %1081 = load i64, i64* %751, align 8
  %1082 = mul i64 %1081, %1050
  %1083 = getelementptr inbounds i8, i8* %1080, i64 %1082
  %1084 = ptrtoint i8* %1083 to i64
  %1085 = and i64 %1084, 63
  %1086 = icmp eq i64 %1085, 0
  call void @llvm.assume(i1 %1086) #8
  %1087 = bitcast i8* %1083 to float*
  %1088 = icmp eq i32 %1049, 0
  br i1 %1088, label %1091, label %1097

1089:                                             ; preds = %1097
  %1090 = load i32, i32* %464, align 4
  br label %1091

1091:                                             ; preds = %1089, %1047
  %1092 = phi i32 [ %1090, %1089 ], [ %1048, %1047 ]
  %1093 = phi i32 [ %1112, %1089 ], [ 0, %1047 ]
  %1094 = add nuw nsw i64 %1050, 1
  %1095 = zext i32 %1092 to i64
  %1096 = icmp ult i64 %1094, %1095
  br i1 %1096, label %1047, label %834

1097:                                             ; preds = %1047, %1097
  %1098 = phi i64 [ %1111, %1097 ], [ 0, %1047 ]
  %1099 = getelementptr inbounds float, float* %1061, i64 %1098
  %1100 = load float, float* %1099, align 4, !alias.scope !314
  %1101 = fmul float %1100, 0x401FDB9360000000
  %1102 = getelementptr inbounds float, float* %1070, i64 %1098
  %1103 = load float, float* %1102, align 4, !alias.scope !317
  %1104 = fmul float %1103, 0x3FE23D70A0000000
  %1105 = fadd float %1101, %1104
  %1106 = getelementptr inbounds float, float* %1079, i64 %1098
  %1107 = load float, float* %1106, align 4, !alias.scope !320
  %1108 = fmul float %1107, 0x3FC9F13CE0000000
  %1109 = fadd float %1108, %1105
  %1110 = getelementptr inbounds float, float* %1087, i64 %1098
  store float %1109, float* %1110, align 4, !alias.scope !323
  %1111 = add nuw nsw i64 %1098, 1
  %1112 = load i32, i32* %466, align 8
  %1113 = zext i32 %1112 to i64
  %1114 = icmp ult i64 %1111, %1113
  br i1 %1114, label %1097, label %1089

1115:                                             ; preds = %697
  %1116 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1117 = load i32, i32* %1346, align 8
  br label %1118

1118:                                             ; preds = %1160, %1115
  %1119 = phi i32 [ %699, %1115 ], [ %1161, %1160 ]
  %1120 = phi i32 [ %1117, %1115 ], [ %1162, %1160 ]
  %1121 = phi i64 [ 0, %1115 ], [ %1163, %1160 ]
  %1122 = load i64, i64* %1345, align 8
  %1123 = mul i64 %1122, %1121
  %1124 = load i8*, i8** %1116, align 8
  %1125 = ptrtoint i8* %1124 to i64
  %1126 = and i64 %1125, 63
  %1127 = icmp eq i64 %1126, 0
  call void @llvm.assume(i1 %1127) #8
  %1128 = getelementptr inbounds i8, i8* %1124, i64 %1123
  %1129 = ptrtoint i8* %1128 to i64
  %1130 = and i64 %1129, 63
  %1131 = icmp eq i64 %1130, 0
  call void @llvm.assume(i1 %1131) #8
  %1132 = bitcast i8* %1128 to float*
  %1133 = add nuw nsw i64 %1121, 16
  %1134 = load i8*, i8** %446, align 8
  %1135 = load i64, i64* %445, align 8
  %1136 = mul i64 %1135, %1133
  %1137 = getelementptr inbounds i8, i8* %1134, i64 %1136
  %1138 = ptrtoint i8* %1137 to i64
  %1139 = and i64 %1138, 63
  %1140 = icmp eq i64 %1139, 0
  call void @llvm.assume(i1 %1140) #8
  %1141 = icmp eq i32 %1120, 0
  br i1 %1141, label %1160, label %1142

1142:                                             ; preds = %1118
  %1143 = getelementptr inbounds i8, i8* %1137, i64 64
  %1144 = bitcast i8* %1143 to float*
  br label %1145

1145:                                             ; preds = %1145, %1142
  %1146 = phi i64 [ 0, %1142 ], [ %1154, %1145 ]
  %1147 = getelementptr inbounds float, float* %1144, i64 %1146
  %1148 = load float, float* %1147, align 4, !alias.scope !293
  %1149 = getelementptr inbounds float, float* %1132, i64 %1146
  %1150 = load float, float* %1149, align 4, !alias.scope !296
  %1151 = fmul float %1150, 5.000000e-01
  %1152 = fcmp ogt float %1148, %1151
  %1153 = select i1 %1152, float %1148, float %1151
  store float %1153, float* %1149, align 4, !alias.scope !299
  %1154 = add nuw nsw i64 %1146, 1
  %1155 = load i32, i32* %1346, align 8
  %1156 = zext i32 %1155 to i64
  %1157 = icmp ult i64 %1154, %1156
  br i1 %1157, label %1145, label %1158

1158:                                             ; preds = %1145
  %1159 = load i32, i32* %1344, align 4
  br label %1160

1160:                                             ; preds = %1158, %1118
  %1161 = phi i32 [ %1159, %1158 ], [ %1119, %1118 ]
  %1162 = phi i32 [ %1155, %1158 ], [ 0, %1118 ]
  %1163 = add nuw nsw i64 %1121, 1
  %1164 = zext i32 %1161 to i64
  %1165 = icmp ult i64 %1163, %1164
  br i1 %1165, label %1118, label %1166

1166:                                             ; preds = %1160, %697
  %1167 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1167, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1168 = load i32, i32* %1344, align 4
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %1172

1170:                                             ; preds = %1166
  %1171 = load i32, i32* %1346, align 8
  br label %1225

1172:                                             ; preds = %1166
  %1173 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1174 = load i32, i32* %1346, align 8
  br label %1175

1175:                                             ; preds = %1218, %1172
  %1176 = phi i32 [ %1174, %1172 ], [ %1219, %1218 ]
  %1177 = phi i32 [ %1168, %1172 ], [ %1220, %1218 ]
  %1178 = phi i32 [ %1174, %1172 ], [ %1221, %1218 ]
  %1179 = phi i64 [ 0, %1172 ], [ %1222, %1218 ]
  %1180 = load i64, i64* %1345, align 8
  %1181 = mul i64 %1180, %1179
  %1182 = load i8*, i8** %1173, align 8
  %1183 = ptrtoint i8* %1182 to i64
  %1184 = and i64 %1183, 63
  %1185 = icmp eq i64 %1184, 0
  call void @llvm.assume(i1 %1185) #8
  %1186 = getelementptr inbounds i8, i8* %1182, i64 %1181
  %1187 = ptrtoint i8* %1186 to i64
  %1188 = and i64 %1187, 63
  %1189 = icmp eq i64 %1188, 0
  call void @llvm.assume(i1 %1189) #8
  %1190 = bitcast i8* %1186 to float*
  %1191 = add nuw nsw i64 %1179, 16
  %1192 = load i8*, i8** %446, align 8
  %1193 = load i64, i64* %445, align 8
  %1194 = mul i64 %1193, %1191
  %1195 = getelementptr inbounds i8, i8* %1192, i64 %1194
  %1196 = ptrtoint i8* %1195 to i64
  %1197 = and i64 %1196, 63
  %1198 = icmp eq i64 %1197, 0
  call void @llvm.assume(i1 %1198) #8
  %1199 = icmp eq i32 %1178, 0
  br i1 %1199, label %1218, label %1200

1200:                                             ; preds = %1175
  %1201 = getelementptr inbounds i8, i8* %1195, i64 64
  %1202 = bitcast i8* %1201 to float*
  br label %1203

1203:                                             ; preds = %1203, %1200
  %1204 = phi i64 [ 0, %1200 ], [ %1212, %1203 ]
  %1205 = getelementptr inbounds float, float* %1202, i64 %1204
  %1206 = load float, float* %1205, align 4, !alias.scope !293
  %1207 = getelementptr inbounds float, float* %1190, i64 %1204
  %1208 = load float, float* %1207, align 4, !alias.scope !296
  %1209 = fmul float %1208, 5.000000e-01
  %1210 = fcmp ogt float %1206, %1209
  %1211 = select i1 %1210, float %1206, float %1209
  store float %1211, float* %1207, align 4, !alias.scope !299
  %1212 = add nuw nsw i64 %1204, 1
  %1213 = load i32, i32* %1346, align 8
  %1214 = zext i32 %1213 to i64
  %1215 = icmp ult i64 %1212, %1214
  br i1 %1215, label %1203, label %1216

1216:                                             ; preds = %1203
  %1217 = load i32, i32* %1344, align 4
  br label %1218

1218:                                             ; preds = %1216, %1175
  %1219 = phi i32 [ %1213, %1216 ], [ %1176, %1175 ]
  %1220 = phi i32 [ %1217, %1216 ], [ %1177, %1175 ]
  %1221 = phi i32 [ %1213, %1216 ], [ 0, %1175 ]
  %1222 = add nuw nsw i64 %1179, 1
  %1223 = zext i32 %1220 to i64
  %1224 = icmp ult i64 %1222, %1223
  br i1 %1224, label %1175, label %1225

1225:                                             ; preds = %1218, %1170
  %1226 = phi i32 [ 0, %1170 ], [ %1220, %1218 ]
  %1227 = phi i32 [ %1171, %1170 ], [ %1219, %1218 ]
  %1228 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1228) #8
  %1229 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 4
  %1230 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1231 = zext i32 %1227 to i64
  %1232 = zext i32 %1226 to i64
  %1233 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %33, i64 0, i32 0
  %1234 = bitcast %"class.jxl::Plane.97"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1234, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1233, i64 %1231, i64 %1232, i64 4) #8
  %1235 = load i32, i32* %1344, align 4
  %1236 = icmp eq i32 %1235, 0
  br i1 %1236, label %749, label %689

1237:                                             ; preds = %637
  %1238 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1239 = load i32, i32* %466, align 8
  br label %1240

1240:                                             ; preds = %1282, %1237
  %1241 = phi i32 [ %639, %1237 ], [ %1283, %1282 ]
  %1242 = phi i32 [ %1239, %1237 ], [ %1284, %1282 ]
  %1243 = phi i64 [ 0, %1237 ], [ %1285, %1282 ]
  %1244 = load i64, i64* %465, align 8
  %1245 = mul i64 %1244, %1243
  %1246 = load i8*, i8** %1238, align 8
  %1247 = ptrtoint i8* %1246 to i64
  %1248 = and i64 %1247, 63
  %1249 = icmp eq i64 %1248, 0
  call void @llvm.assume(i1 %1249) #8
  %1250 = getelementptr inbounds i8, i8* %1246, i64 %1245
  %1251 = ptrtoint i8* %1250 to i64
  %1252 = and i64 %1251, 63
  %1253 = icmp eq i64 %1252, 0
  call void @llvm.assume(i1 %1253) #8
  %1254 = bitcast i8* %1250 to float*
  %1255 = add nuw nsw i64 %1243, 16
  %1256 = load i8*, i8** %446, align 8
  %1257 = load i64, i64* %445, align 8
  %1258 = mul i64 %1257, %1255
  %1259 = getelementptr inbounds i8, i8* %1256, i64 %1258
  %1260 = ptrtoint i8* %1259 to i64
  %1261 = and i64 %1260, 63
  %1262 = icmp eq i64 %1261, 0
  call void @llvm.assume(i1 %1262) #8
  %1263 = icmp eq i32 %1242, 0
  br i1 %1263, label %1282, label %1264

1264:                                             ; preds = %1240
  %1265 = getelementptr inbounds i8, i8* %1259, i64 64
  %1266 = bitcast i8* %1265 to float*
  br label %1267

1267:                                             ; preds = %1267, %1264
  %1268 = phi i64 [ 0, %1264 ], [ %1276, %1267 ]
  %1269 = getelementptr inbounds float, float* %1266, i64 %1268
  %1270 = load float, float* %1269, align 4, !alias.scope !284
  %1271 = getelementptr inbounds float, float* %1254, i64 %1268
  %1272 = load float, float* %1271, align 4, !alias.scope !287
  %1273 = fmul float %1272, 5.000000e-01
  %1274 = fcmp ogt float %1270, %1273
  %1275 = select i1 %1274, float %1270, float %1273
  store float %1275, float* %1271, align 4, !alias.scope !290
  %1276 = add nuw nsw i64 %1268, 1
  %1277 = load i32, i32* %466, align 8
  %1278 = zext i32 %1277 to i64
  %1279 = icmp ult i64 %1276, %1278
  br i1 %1279, label %1267, label %1280

1280:                                             ; preds = %1267
  %1281 = load i32, i32* %464, align 4
  br label %1282

1282:                                             ; preds = %1280, %1240
  %1283 = phi i32 [ %1281, %1280 ], [ %1241, %1240 ]
  %1284 = phi i32 [ %1277, %1280 ], [ 0, %1240 ]
  %1285 = add nuw nsw i64 %1243, 1
  %1286 = zext i32 %1283 to i64
  %1287 = icmp ult i64 %1285, %1286
  br i1 %1287, label %1240, label %1288

1288:                                             ; preds = %1282, %637
  %1289 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %29, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* dereferenceable(32) %1289, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1290 = load i32, i32* %464, align 4
  %1291 = icmp eq i32 %1290, 0
  br i1 %1291, label %1343, label %1292

1292:                                             ; preds = %1288
  %1293 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1294 = load i32, i32* %466, align 8
  br label %1295

1295:                                             ; preds = %1337, %1292
  %1296 = phi i32 [ %1290, %1292 ], [ %1338, %1337 ]
  %1297 = phi i32 [ %1294, %1292 ], [ %1339, %1337 ]
  %1298 = phi i64 [ 0, %1292 ], [ %1340, %1337 ]
  %1299 = load i64, i64* %465, align 8
  %1300 = mul i64 %1299, %1298
  %1301 = load i8*, i8** %1293, align 8
  %1302 = ptrtoint i8* %1301 to i64
  %1303 = and i64 %1302, 63
  %1304 = icmp eq i64 %1303, 0
  call void @llvm.assume(i1 %1304) #8
  %1305 = getelementptr inbounds i8, i8* %1301, i64 %1300
  %1306 = ptrtoint i8* %1305 to i64
  %1307 = and i64 %1306, 63
  %1308 = icmp eq i64 %1307, 0
  call void @llvm.assume(i1 %1308) #8
  %1309 = bitcast i8* %1305 to float*
  %1310 = add nuw nsw i64 %1298, 16
  %1311 = load i8*, i8** %446, align 8
  %1312 = load i64, i64* %445, align 8
  %1313 = mul i64 %1312, %1310
  %1314 = getelementptr inbounds i8, i8* %1311, i64 %1313
  %1315 = ptrtoint i8* %1314 to i64
  %1316 = and i64 %1315, 63
  %1317 = icmp eq i64 %1316, 0
  call void @llvm.assume(i1 %1317) #8
  %1318 = icmp eq i32 %1297, 0
  br i1 %1318, label %1337, label %1319

1319:                                             ; preds = %1295
  %1320 = getelementptr inbounds i8, i8* %1314, i64 64
  %1321 = bitcast i8* %1320 to float*
  br label %1322

1322:                                             ; preds = %1322, %1319
  %1323 = phi i64 [ 0, %1319 ], [ %1331, %1322 ]
  %1324 = getelementptr inbounds float, float* %1321, i64 %1323
  %1325 = load float, float* %1324, align 4, !alias.scope !284
  %1326 = getelementptr inbounds float, float* %1309, i64 %1323
  %1327 = load float, float* %1326, align 4, !alias.scope !287
  %1328 = fmul float %1327, 5.000000e-01
  %1329 = fcmp ogt float %1325, %1328
  %1330 = select i1 %1329, float %1325, float %1328
  store float %1330, float* %1326, align 4, !alias.scope !290
  %1331 = add nuw nsw i64 %1323, 1
  %1332 = load i32, i32* %466, align 8
  %1333 = zext i32 %1332 to i64
  %1334 = icmp ult i64 %1331, %1333
  br i1 %1334, label %1322, label %1335

1335:                                             ; preds = %1322
  %1336 = load i32, i32* %464, align 4
  br label %1337

1337:                                             ; preds = %1335, %1295
  %1338 = phi i32 [ %1336, %1335 ], [ %1296, %1295 ]
  %1339 = phi i32 [ %1332, %1335 ], [ 0, %1295 ]
  %1340 = add nuw nsw i64 %1298, 1
  %1341 = zext i32 %1338 to i64
  %1342 = icmp ult i64 %1340, %1341
  br i1 %1342, label %1295, label %1343

1343:                                             ; preds = %1337, %1288
  %1344 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 1
  %1345 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 4
  %1346 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %25, i64 0, i32 0, i64 0, i32 0, i32 0
  %1347 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %32, i64 0, i32 0, i64 0
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %28, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %1347, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %31, %"class.jxl::Plane.97"* nonnull %30) #8
  %1348 = load i32, i32* %1344, align 4
  %1349 = icmp eq i32 %1348, 0
  br i1 %1349, label %697, label %694

1350:                                             ; preds = %625
  %1351 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1352 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 4
  %1353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1354 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 4
  %1355 = icmp eq i32 %629, 0
  %1356 = shl nuw nsw i64 %630, 2
  %1357 = and i64 %630, 4294967288
  %1358 = add nsw i64 %1357, -8
  %1359 = lshr exact i64 %1358, 3
  %1360 = add nuw nsw i64 %1359, 1
  %1361 = icmp ult i32 %629, 8
  %1362 = and i64 %630, 4294967288
  %1363 = and i64 %1360, 1
  %1364 = icmp eq i64 %1358, 0
  %1365 = sub nuw nsw i64 %1360, %1363
  %1366 = icmp eq i64 %1363, 0
  %1367 = icmp eq i64 %1362, %630
  %1368 = and i64 %630, 3
  %1369 = icmp eq i64 %1368, 0
  br label %1370

1370:                                             ; preds = %1503, %1350
  %1371 = phi i64 [ 0, %1350 ], [ %1504, %1503 ]
  %1372 = load i8*, i8** %1351, align 8
  %1373 = load i64, i64* %1352, align 8
  %1374 = mul i64 %1373, %1371
  %1375 = getelementptr inbounds i8, i8* %1372, i64 %1374
  %1376 = ptrtoint i8* %1375 to i64
  %1377 = and i64 %1376, 63
  %1378 = icmp eq i64 %1377, 0
  call void @llvm.assume(i1 %1378) #8
  %1379 = bitcast i8* %1375 to float*
  %1380 = load i8*, i8** %1353, align 8
  %1381 = load i64, i64* %1354, align 8
  %1382 = mul i64 %1381, %1371
  %1383 = getelementptr inbounds i8, i8* %1380, i64 %1382
  %1384 = ptrtoint i8* %1383 to i64
  %1385 = and i64 %1384, 63
  %1386 = icmp eq i64 %1385, 0
  call void @llvm.assume(i1 %1386) #8
  %1387 = bitcast i8* %1383 to float*
  br i1 %1355, label %1503, label %1388

1388:                                             ; preds = %1370
  br i1 %1361, label %1458, label %1389

1389:                                             ; preds = %1388
  %1390 = getelementptr i8, i8* %1380, i64 %1356
  %1391 = getelementptr i8, i8* %1390, i64 %1382
  %1392 = getelementptr i8, i8* %1372, i64 %1356
  %1393 = mul i64 %1373, %1371
  %1394 = getelementptr i8, i8* %1392, i64 %1393
  %1395 = icmp ult i8* %1383, %1394
  %1396 = icmp ult i8* %1375, %1391
  %1397 = and i1 %1395, %1396
  br i1 %1397, label %1458, label %1398

1398:                                             ; preds = %1389
  br i1 %1364, label %1438, label %1399

1399:                                             ; preds = %1398, %1399
  %1400 = phi i64 [ %1435, %1399 ], [ 0, %1398 ]
  %1401 = phi i64 [ %1436, %1399 ], [ %1365, %1398 ]
  %1402 = getelementptr inbounds float, float* %1379, i64 %1400
  %1403 = bitcast float* %1402 to <4 x float>*
  %1404 = load <4 x float>, <4 x float>* %1403, align 64, !alias.scope !326
  %1405 = getelementptr inbounds float, float* %1402, i64 4
  %1406 = bitcast float* %1405 to <4 x float>*
  %1407 = load <4 x float>, <4 x float>* %1406, align 16, !alias.scope !326
  %1408 = getelementptr inbounds float, float* %1387, i64 %1400
  %1409 = bitcast float* %1408 to <4 x float>*
  %1410 = load <4 x float>, <4 x float>* %1409, align 64, !alias.scope !329, !noalias !326
  %1411 = getelementptr inbounds float, float* %1408, i64 4
  %1412 = bitcast float* %1411 to <4 x float>*
  %1413 = load <4 x float>, <4 x float>* %1412, align 16, !alias.scope !329, !noalias !326
  %1414 = fsub <4 x float> %1410, %1404
  %1415 = fsub <4 x float> %1413, %1407
  %1416 = bitcast float* %1408 to <4 x float>*
  store <4 x float> %1414, <4 x float>* %1416, align 64, !alias.scope !329, !noalias !326
  %1417 = bitcast float* %1411 to <4 x float>*
  store <4 x float> %1415, <4 x float>* %1417, align 16, !alias.scope !329, !noalias !326
  %1418 = or i64 %1400, 8
  %1419 = getelementptr inbounds float, float* %1379, i64 %1418
  %1420 = bitcast float* %1419 to <4 x float>*
  %1421 = load <4 x float>, <4 x float>* %1420, align 32, !alias.scope !326
  %1422 = getelementptr inbounds float, float* %1419, i64 4
  %1423 = bitcast float* %1422 to <4 x float>*
  %1424 = load <4 x float>, <4 x float>* %1423, align 16, !alias.scope !326
  %1425 = getelementptr inbounds float, float* %1387, i64 %1418
  %1426 = bitcast float* %1425 to <4 x float>*
  %1427 = load <4 x float>, <4 x float>* %1426, align 32, !alias.scope !329, !noalias !326
  %1428 = getelementptr inbounds float, float* %1425, i64 4
  %1429 = bitcast float* %1428 to <4 x float>*
  %1430 = load <4 x float>, <4 x float>* %1429, align 16, !alias.scope !329, !noalias !326
  %1431 = fsub <4 x float> %1427, %1421
  %1432 = fsub <4 x float> %1430, %1424
  %1433 = bitcast float* %1425 to <4 x float>*
  store <4 x float> %1431, <4 x float>* %1433, align 32, !alias.scope !329, !noalias !326
  %1434 = bitcast float* %1428 to <4 x float>*
  store <4 x float> %1432, <4 x float>* %1434, align 16, !alias.scope !329, !noalias !326
  %1435 = add i64 %1400, 16
  %1436 = add i64 %1401, -2
  %1437 = icmp eq i64 %1436, 0
  br i1 %1437, label %1438, label %1399, !llvm.loop !331

1438:                                             ; preds = %1399, %1398
  %1439 = phi i64 [ 0, %1398 ], [ %1435, %1399 ]
  br i1 %1366, label %1457, label %1440

1440:                                             ; preds = %1438
  %1441 = getelementptr inbounds float, float* %1379, i64 %1439
  %1442 = bitcast float* %1441 to <4 x float>*
  %1443 = load <4 x float>, <4 x float>* %1442, align 32, !alias.scope !326
  %1444 = getelementptr inbounds float, float* %1441, i64 4
  %1445 = bitcast float* %1444 to <4 x float>*
  %1446 = load <4 x float>, <4 x float>* %1445, align 16, !alias.scope !326
  %1447 = getelementptr inbounds float, float* %1387, i64 %1439
  %1448 = bitcast float* %1447 to <4 x float>*
  %1449 = load <4 x float>, <4 x float>* %1448, align 32, !alias.scope !329, !noalias !326
  %1450 = getelementptr inbounds float, float* %1447, i64 4
  %1451 = bitcast float* %1450 to <4 x float>*
  %1452 = load <4 x float>, <4 x float>* %1451, align 16, !alias.scope !329, !noalias !326
  %1453 = fsub <4 x float> %1449, %1443
  %1454 = fsub <4 x float> %1452, %1446
  %1455 = bitcast float* %1447 to <4 x float>*
  store <4 x float> %1453, <4 x float>* %1455, align 32, !alias.scope !329, !noalias !326
  %1456 = bitcast float* %1450 to <4 x float>*
  store <4 x float> %1454, <4 x float>* %1456, align 16, !alias.scope !329, !noalias !326
  br label %1457

1457:                                             ; preds = %1438, %1440
  br i1 %1367, label %1503, label %1458

1458:                                             ; preds = %1457, %1389, %1388
  %1459 = phi i64 [ 0, %1389 ], [ 0, %1388 ], [ %1362, %1457 ]
  %1460 = xor i64 %1459, -1
  %1461 = add nsw i64 %1460, %630
  br i1 %1369, label %1473, label %1462

1462:                                             ; preds = %1458, %1462
  %1463 = phi i64 [ %1470, %1462 ], [ %1459, %1458 ]
  %1464 = phi i64 [ %1471, %1462 ], [ %1368, %1458 ]
  %1465 = getelementptr inbounds float, float* %1379, i64 %1463
  %1466 = load float, float* %1465, align 4
  %1467 = getelementptr inbounds float, float* %1387, i64 %1463
  %1468 = load float, float* %1467, align 4
  %1469 = fsub float %1468, %1466
  store float %1469, float* %1467, align 4
  %1470 = add nuw nsw i64 %1463, 1
  %1471 = add i64 %1464, -1
  %1472 = icmp eq i64 %1471, 0
  br i1 %1472, label %1473, label %1462, !llvm.loop !332

1473:                                             ; preds = %1462, %1458
  %1474 = phi i64 [ %1459, %1458 ], [ %1470, %1462 ]
  %1475 = icmp ult i64 %1461, 3
  br i1 %1475, label %1503, label %1476

1476:                                             ; preds = %1473, %1476
  %1477 = phi i64 [ %1501, %1476 ], [ %1474, %1473 ]
  %1478 = getelementptr inbounds float, float* %1379, i64 %1477
  %1479 = load float, float* %1478, align 4
  %1480 = getelementptr inbounds float, float* %1387, i64 %1477
  %1481 = load float, float* %1480, align 4
  %1482 = fsub float %1481, %1479
  store float %1482, float* %1480, align 4
  %1483 = add nuw nsw i64 %1477, 1
  %1484 = getelementptr inbounds float, float* %1379, i64 %1483
  %1485 = load float, float* %1484, align 4
  %1486 = getelementptr inbounds float, float* %1387, i64 %1483
  %1487 = load float, float* %1486, align 4
  %1488 = fsub float %1487, %1485
  store float %1488, float* %1486, align 4
  %1489 = add nuw nsw i64 %1477, 2
  %1490 = getelementptr inbounds float, float* %1379, i64 %1489
  %1491 = load float, float* %1490, align 4
  %1492 = getelementptr inbounds float, float* %1387, i64 %1489
  %1493 = load float, float* %1492, align 4
  %1494 = fsub float %1493, %1491
  store float %1494, float* %1492, align 4
  %1495 = add nuw nsw i64 %1477, 3
  %1496 = getelementptr inbounds float, float* %1379, i64 %1495
  %1497 = load float, float* %1496, align 4
  %1498 = getelementptr inbounds float, float* %1387, i64 %1495
  %1499 = load float, float* %1498, align 4
  %1500 = fsub float %1499, %1497
  store float %1500, float* %1498, align 4
  %1501 = add nuw nsw i64 %1477, 4
  %1502 = icmp eq i64 %1501, %630
  br i1 %1502, label %1503, label %1476, !llvm.loop !333

1503:                                             ; preds = %1473, %1476, %1457, %1370
  %1504 = add nuw nsw i64 %1371, 1
  %1505 = icmp eq i64 %1504, %632
  br i1 %1505, label %1506, label %1370

1506:                                             ; preds = %1503, %625
  %1507 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2
  %1508 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2
  call void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* nonnull dereferenceable(24) %22, %"class.jxl::Plane.97"* dereferenceable(32) %1507, %"class.jxl::ThreadPool"* %4, %"class.jxl::Plane.97"* nonnull %21, %"class.jxl::Plane.97"* %1508) #8
  %1509 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1507, i64 0, i32 0, i32 0
  %1510 = load i32, i32* %1509, align 8
  %1511 = zext i32 %1510 to i64
  %1512 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 1
  %1513 = load i32, i32* %1512, align 4
  %1514 = zext i32 %1513 to i64
  %1515 = icmp eq i32 %1513, 0
  br i1 %1515, label %1672, label %1516

1516:                                             ; preds = %1506
  %1517 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1518 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 4
  %1519 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1520 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 4
  %1521 = icmp eq i32 %1510, 0
  %1522 = shl nuw nsw i64 %1511, 2
  %1523 = and i64 %1511, 4294967288
  %1524 = add nsw i64 %1523, -8
  %1525 = lshr exact i64 %1524, 3
  %1526 = add nuw nsw i64 %1525, 1
  %1527 = icmp ult i32 %1510, 8
  %1528 = and i64 %1511, 4294967288
  %1529 = and i64 %1526, 1
  %1530 = icmp eq i64 %1524, 0
  %1531 = sub nuw nsw i64 %1526, %1529
  %1532 = icmp eq i64 %1529, 0
  %1533 = icmp eq i64 %1528, %1511
  %1534 = and i64 %1511, 3
  %1535 = icmp eq i64 %1534, 0
  br label %1536

1536:                                             ; preds = %1669, %1516
  %1537 = phi i64 [ 0, %1516 ], [ %1670, %1669 ]
  %1538 = load i8*, i8** %1517, align 8
  %1539 = load i64, i64* %1518, align 8
  %1540 = mul i64 %1539, %1537
  %1541 = getelementptr inbounds i8, i8* %1538, i64 %1540
  %1542 = ptrtoint i8* %1541 to i64
  %1543 = and i64 %1542, 63
  %1544 = icmp eq i64 %1543, 0
  call void @llvm.assume(i1 %1544) #8
  %1545 = bitcast i8* %1541 to float*
  %1546 = load i8*, i8** %1519, align 8
  %1547 = load i64, i64* %1520, align 8
  %1548 = mul i64 %1547, %1537
  %1549 = getelementptr inbounds i8, i8* %1546, i64 %1548
  %1550 = ptrtoint i8* %1549 to i64
  %1551 = and i64 %1550, 63
  %1552 = icmp eq i64 %1551, 0
  call void @llvm.assume(i1 %1552) #8
  %1553 = bitcast i8* %1549 to float*
  br i1 %1521, label %1669, label %1554

1554:                                             ; preds = %1536
  br i1 %1527, label %1624, label %1555

1555:                                             ; preds = %1554
  %1556 = getelementptr i8, i8* %1546, i64 %1522
  %1557 = getelementptr i8, i8* %1556, i64 %1548
  %1558 = getelementptr i8, i8* %1538, i64 %1522
  %1559 = mul i64 %1539, %1537
  %1560 = getelementptr i8, i8* %1558, i64 %1559
  %1561 = icmp ult i8* %1549, %1560
  %1562 = icmp ult i8* %1541, %1557
  %1563 = and i1 %1561, %1562
  br i1 %1563, label %1624, label %1564

1564:                                             ; preds = %1555
  br i1 %1530, label %1604, label %1565

1565:                                             ; preds = %1564, %1565
  %1566 = phi i64 [ %1601, %1565 ], [ 0, %1564 ]
  %1567 = phi i64 [ %1602, %1565 ], [ %1531, %1564 ]
  %1568 = getelementptr inbounds float, float* %1545, i64 %1566
  %1569 = bitcast float* %1568 to <4 x float>*
  %1570 = load <4 x float>, <4 x float>* %1569, align 64, !alias.scope !334
  %1571 = getelementptr inbounds float, float* %1568, i64 4
  %1572 = bitcast float* %1571 to <4 x float>*
  %1573 = load <4 x float>, <4 x float>* %1572, align 16, !alias.scope !334
  %1574 = getelementptr inbounds float, float* %1553, i64 %1566
  %1575 = bitcast float* %1574 to <4 x float>*
  %1576 = load <4 x float>, <4 x float>* %1575, align 64, !alias.scope !337, !noalias !334
  %1577 = getelementptr inbounds float, float* %1574, i64 4
  %1578 = bitcast float* %1577 to <4 x float>*
  %1579 = load <4 x float>, <4 x float>* %1578, align 16, !alias.scope !337, !noalias !334
  %1580 = fsub <4 x float> %1576, %1570
  %1581 = fsub <4 x float> %1579, %1573
  %1582 = bitcast float* %1574 to <4 x float>*
  store <4 x float> %1580, <4 x float>* %1582, align 64, !alias.scope !337, !noalias !334
  %1583 = bitcast float* %1577 to <4 x float>*
  store <4 x float> %1581, <4 x float>* %1583, align 16, !alias.scope !337, !noalias !334
  %1584 = or i64 %1566, 8
  %1585 = getelementptr inbounds float, float* %1545, i64 %1584
  %1586 = bitcast float* %1585 to <4 x float>*
  %1587 = load <4 x float>, <4 x float>* %1586, align 32, !alias.scope !334
  %1588 = getelementptr inbounds float, float* %1585, i64 4
  %1589 = bitcast float* %1588 to <4 x float>*
  %1590 = load <4 x float>, <4 x float>* %1589, align 16, !alias.scope !334
  %1591 = getelementptr inbounds float, float* %1553, i64 %1584
  %1592 = bitcast float* %1591 to <4 x float>*
  %1593 = load <4 x float>, <4 x float>* %1592, align 32, !alias.scope !337, !noalias !334
  %1594 = getelementptr inbounds float, float* %1591, i64 4
  %1595 = bitcast float* %1594 to <4 x float>*
  %1596 = load <4 x float>, <4 x float>* %1595, align 16, !alias.scope !337, !noalias !334
  %1597 = fsub <4 x float> %1593, %1587
  %1598 = fsub <4 x float> %1596, %1590
  %1599 = bitcast float* %1591 to <4 x float>*
  store <4 x float> %1597, <4 x float>* %1599, align 32, !alias.scope !337, !noalias !334
  %1600 = bitcast float* %1594 to <4 x float>*
  store <4 x float> %1598, <4 x float>* %1600, align 16, !alias.scope !337, !noalias !334
  %1601 = add i64 %1566, 16
  %1602 = add i64 %1567, -2
  %1603 = icmp eq i64 %1602, 0
  br i1 %1603, label %1604, label %1565, !llvm.loop !339

1604:                                             ; preds = %1565, %1564
  %1605 = phi i64 [ 0, %1564 ], [ %1601, %1565 ]
  br i1 %1532, label %1623, label %1606

1606:                                             ; preds = %1604
  %1607 = getelementptr inbounds float, float* %1545, i64 %1605
  %1608 = bitcast float* %1607 to <4 x float>*
  %1609 = load <4 x float>, <4 x float>* %1608, align 32, !alias.scope !334
  %1610 = getelementptr inbounds float, float* %1607, i64 4
  %1611 = bitcast float* %1610 to <4 x float>*
  %1612 = load <4 x float>, <4 x float>* %1611, align 16, !alias.scope !334
  %1613 = getelementptr inbounds float, float* %1553, i64 %1605
  %1614 = bitcast float* %1613 to <4 x float>*
  %1615 = load <4 x float>, <4 x float>* %1614, align 32, !alias.scope !337, !noalias !334
  %1616 = getelementptr inbounds float, float* %1613, i64 4
  %1617 = bitcast float* %1616 to <4 x float>*
  %1618 = load <4 x float>, <4 x float>* %1617, align 16, !alias.scope !337, !noalias !334
  %1619 = fsub <4 x float> %1615, %1609
  %1620 = fsub <4 x float> %1618, %1612
  %1621 = bitcast float* %1613 to <4 x float>*
  store <4 x float> %1619, <4 x float>* %1621, align 32, !alias.scope !337, !noalias !334
  %1622 = bitcast float* %1616 to <4 x float>*
  store <4 x float> %1620, <4 x float>* %1622, align 16, !alias.scope !337, !noalias !334
  br label %1623

1623:                                             ; preds = %1604, %1606
  br i1 %1533, label %1669, label %1624

1624:                                             ; preds = %1623, %1555, %1554
  %1625 = phi i64 [ 0, %1555 ], [ 0, %1554 ], [ %1528, %1623 ]
  %1626 = xor i64 %1625, -1
  %1627 = add nsw i64 %1626, %1511
  br i1 %1535, label %1639, label %1628

1628:                                             ; preds = %1624, %1628
  %1629 = phi i64 [ %1636, %1628 ], [ %1625, %1624 ]
  %1630 = phi i64 [ %1637, %1628 ], [ %1534, %1624 ]
  %1631 = getelementptr inbounds float, float* %1545, i64 %1629
  %1632 = load float, float* %1631, align 4
  %1633 = getelementptr inbounds float, float* %1553, i64 %1629
  %1634 = load float, float* %1633, align 4
  %1635 = fsub float %1634, %1632
  store float %1635, float* %1633, align 4
  %1636 = add nuw nsw i64 %1629, 1
  %1637 = add i64 %1630, -1
  %1638 = icmp eq i64 %1637, 0
  br i1 %1638, label %1639, label %1628, !llvm.loop !340

1639:                                             ; preds = %1628, %1624
  %1640 = phi i64 [ %1625, %1624 ], [ %1636, %1628 ]
  %1641 = icmp ult i64 %1627, 3
  br i1 %1641, label %1669, label %1642

1642:                                             ; preds = %1639, %1642
  %1643 = phi i64 [ %1667, %1642 ], [ %1640, %1639 ]
  %1644 = getelementptr inbounds float, float* %1545, i64 %1643
  %1645 = load float, float* %1644, align 4
  %1646 = getelementptr inbounds float, float* %1553, i64 %1643
  %1647 = load float, float* %1646, align 4
  %1648 = fsub float %1647, %1645
  store float %1648, float* %1646, align 4
  %1649 = add nuw nsw i64 %1643, 1
  %1650 = getelementptr inbounds float, float* %1545, i64 %1649
  %1651 = load float, float* %1650, align 4
  %1652 = getelementptr inbounds float, float* %1553, i64 %1649
  %1653 = load float, float* %1652, align 4
  %1654 = fsub float %1653, %1651
  store float %1654, float* %1652, align 4
  %1655 = add nuw nsw i64 %1643, 2
  %1656 = getelementptr inbounds float, float* %1545, i64 %1655
  %1657 = load float, float* %1656, align 4
  %1658 = getelementptr inbounds float, float* %1553, i64 %1655
  %1659 = load float, float* %1658, align 4
  %1660 = fsub float %1659, %1657
  store float %1660, float* %1658, align 4
  %1661 = add nuw nsw i64 %1643, 3
  %1662 = getelementptr inbounds float, float* %1545, i64 %1661
  %1663 = load float, float* %1662, align 4
  %1664 = getelementptr inbounds float, float* %1553, i64 %1661
  %1665 = load float, float* %1664, align 4
  %1666 = fsub float %1665, %1663
  store float %1666, float* %1664, align 4
  %1667 = add nuw nsw i64 %1643, 4
  %1668 = icmp eq i64 %1667, %1511
  br i1 %1668, label %1669, label %1642, !llvm.loop !341

1669:                                             ; preds = %1639, %1642, %1623, %1536
  %1670 = add nuw nsw i64 %1537, 1
  %1671 = icmp eq i64 %1670, %1514
  br i1 %1671, label %1672, label %1536

1672:                                             ; preds = %1669, %1506
  %1673 = bitcast i64* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1673) #8
  %1674 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 8
  %1675 = load i64, i64* %1674, align 8
  %1676 = add i64 %1675, 7
  %1677 = lshr i64 %1676, 3
  store i64 %1677, i64* %23, align 8
  %1678 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0, i32 2, i32 9
  %1679 = load i64, i64* %1678, align 8
  %1680 = add i64 %1679, 7
  %1681 = lshr i64 %1680, 3
  %1682 = mul i64 %1681, %1677
  %1683 = trunc i64 %1682 to i32
  %1684 = bitcast %class.anon.293* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1684) #8
  %1685 = getelementptr inbounds %class.anon.293, %class.anon.293* %24, i64 0, i32 0
  store i64* %23, i64** %1685, align 8
  %1686 = getelementptr inbounds %class.anon.293, %class.anon.293* %24, i64 0, i32 1
  store %"class.jxl::Image3"* %20, %"class.jxl::Image3"** %1686, align 8
  %1687 = getelementptr inbounds %class.anon.293, %class.anon.293* %24, i64 0, i32 2
  store %"struct.jxl::PassesSharedState"* %41, %"struct.jxl::PassesSharedState"** %1687, align 8
  %1688 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1688) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %17, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), double* nonnull %17) #8
  %1689 = icmp eq %"class.jxl::ThreadPool"* %4, null
  br i1 %1689, label %359, label %370
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #7

declare void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"*, float, %"class.jxl::ThreadPool"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

declare void @_ZN3jxl14PadImageMirrorERKNS_6Image3IfEEmm(%"class.jxl::Image3"* sret, %"class.jxl::Image3"* dereferenceable(96), i64, i64) local_unnamed_addr #5

declare void @_ZN3jxl23CreateRecursiveGaussianEd(%"class.std::__1::unique_ptr.254"* sret, double) local_unnamed_addr #5

declare void @_ZN3jxl12FastGaussianERKNSt3__110unique_ptrINS_17RecursiveGaussianEN3hwy14AlignedDeleterEEERKNS_5PlaneIfEEPNS_10ThreadPoolEPS9_SE_(%"class.std::__1::unique_ptr.254"* dereferenceable(24), %"class.jxl::Plane.97"* dereferenceable(32), %"class.jxl::ThreadPool"*, %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIfEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.268", align 8
  %5 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4, !noalias !342
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  br label %102

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8, !noalias !342
  %15 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 4
  %16 = load i64, i64* %15, align 8, !noalias !342
  %17 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 8, !noalias !342
  %19 = icmp eq i32 %18, 0
  %20 = zext i32 %18 to i64
  %21 = zext i32 %6 to i64
  %22 = add nsw i64 %20, -1
  %23 = and i64 %20, 3
  %24 = icmp ult i64 %22, 3
  %25 = sub nsw i64 %20, %23
  %26 = icmp eq i64 %23, 0
  br label %27

27:                                               ; preds = %60, %12
  %28 = phi float [ 0x47EFFFFFE0000000, %12 ], [ %61, %60 ]
  %29 = phi float [ 0xC7EFFFFFE0000000, %12 ], [ %62, %60 ]
  %30 = phi float [ 0xC7EFFFFFE0000000, %12 ], [ %63, %60 ]
  %31 = phi float [ 0x47EFFFFFE0000000, %12 ], [ %64, %60 ]
  %32 = phi i64 [ 0, %12 ], [ %65, %60 ]
  %33 = mul i64 %32, %16
  %34 = getelementptr inbounds i8, i8* %14, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #8, !noalias !342
  %38 = bitcast i8* %34 to float*
  br i1 %19, label %60, label %39

39:                                               ; preds = %27
  br i1 %24, label %40, label %67

40:                                               ; preds = %67, %39
  %41 = phi float [ undef, %39 ], [ %96, %67 ]
  %42 = phi float [ undef, %39 ], [ %98, %67 ]
  %43 = phi float [ %30, %39 ], [ %98, %67 ]
  %44 = phi float [ %31, %39 ], [ %96, %67 ]
  %45 = phi i64 [ 0, %39 ], [ %99, %67 ]
  br i1 %26, label %60, label %46

46:                                               ; preds = %40, %46
  %47 = phi float [ %56, %46 ], [ %43, %40 ]
  %48 = phi float [ %54, %46 ], [ %44, %40 ]
  %49 = phi i64 [ %57, %46 ], [ %45, %40 ]
  %50 = phi i64 [ %58, %46 ], [ %23, %40 ]
  %51 = getelementptr inbounds float, float* %38, i64 %49
  %52 = load float, float* %51, align 4, !noalias !342
  %53 = fcmp olt float %52, %48
  %54 = select i1 %53, float %52, float %48
  %55 = fcmp olt float %47, %52
  %56 = select i1 %55, float %52, float %47
  %57 = add nuw nsw i64 %49, 1
  %58 = add i64 %50, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %46, !llvm.loop !346

60:                                               ; preds = %40, %46, %27
  %61 = phi float [ %28, %27 ], [ %41, %40 ], [ %54, %46 ]
  %62 = phi float [ %29, %27 ], [ %42, %40 ], [ %56, %46 ]
  %63 = phi float [ %30, %27 ], [ %42, %40 ], [ %56, %46 ]
  %64 = phi float [ %31, %27 ], [ %41, %40 ], [ %54, %46 ]
  %65 = add nuw nsw i64 %32, 1
  %66 = icmp eq i64 %65, %21
  br i1 %66, label %102, label %27

67:                                               ; preds = %39, %67
  %68 = phi float [ %98, %67 ], [ %30, %39 ]
  %69 = phi float [ %96, %67 ], [ %31, %39 ]
  %70 = phi i64 [ %99, %67 ], [ 0, %39 ]
  %71 = phi i64 [ %100, %67 ], [ %25, %39 ]
  %72 = getelementptr inbounds float, float* %38, i64 %70
  %73 = load float, float* %72, align 16, !noalias !342
  %74 = fcmp olt float %73, %69
  %75 = select i1 %74, float %73, float %69
  %76 = fcmp olt float %68, %73
  %77 = select i1 %76, float %73, float %68
  %78 = or i64 %70, 1
  %79 = getelementptr inbounds float, float* %38, i64 %78
  %80 = load float, float* %79, align 4, !noalias !342
  %81 = fcmp olt float %80, %75
  %82 = select i1 %81, float %80, float %75
  %83 = fcmp olt float %77, %80
  %84 = select i1 %83, float %80, float %77
  %85 = or i64 %70, 2
  %86 = getelementptr inbounds float, float* %38, i64 %85
  %87 = load float, float* %86, align 8, !noalias !342
  %88 = fcmp olt float %87, %82
  %89 = select i1 %88, float %87, float %82
  %90 = fcmp olt float %84, %87
  %91 = select i1 %90, float %87, float %84
  %92 = or i64 %70, 3
  %93 = getelementptr inbounds float, float* %38, i64 %92
  %94 = load float, float* %93, align 4, !noalias !342
  %95 = fcmp olt float %94, %89
  %96 = select i1 %95, float %94, float %89
  %97 = fcmp olt float %91, %94
  %98 = select i1 %97, float %94, float %91
  %99 = add nuw nsw i64 %70, 4
  %100 = add i64 %71, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %40, label %67

102:                                              ; preds = %60, %8
  %103 = phi i64 [ 0, %8 ], [ %21, %60 ]
  %104 = phi i64 [ %11, %8 ], [ %20, %60 ]
  %105 = phi float [ 0x47EFFFFFE0000000, %8 ], [ %61, %60 ]
  %106 = phi float [ 0xC7EFFFFFE0000000, %8 ], [ %62, %60 ]
  %107 = bitcast %"class.jxl::Image3.268"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %107) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 -86, i64 96, i1 false)
  %108 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %109, i64 %104, i64 %103, i64 1) #8
  %110 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %110, i64 %104, i64 %103, i64 1) #8
  %111 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %111, i64 %104, i64 %103, i64 1) #8
  %112 = fcmp oeq float %105, %106
  %113 = fsub float %106, %105
  %114 = fdiv float 2.550000e+02, %113
  %115 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 4
  %117 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0, i32 4
  %118 = select i1 %112, float 0.000000e+00, float %114
  %119 = load i32, i32* %5, align 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %275, label %133

121:                                              ; preds = %275
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %277) #8
  br label %122

122:                                              ; preds = %121, %275
  %123 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  store i8* null, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %127, label %126

126:                                              ; preds = %122
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %124) #8
  br label %127

127:                                              ; preds = %126, %122
  %128 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %129 = load i8*, i8** %128, align 8
  store i8* null, i8** %128, align 8
  %130 = icmp eq i8* %129, null
  br i1 %130, label %132, label %131

131:                                              ; preds = %127
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %129) #8
  br label %132

132:                                              ; preds = %127, %131
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %107) #8
  ret void

133:                                              ; preds = %102
  %134 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %135 = load i32, i32* %108, align 8
  br label %138

136:                                              ; preds = %163
  %137 = icmp eq i32 %164, 0
  br i1 %137, label %275, label %181

138:                                              ; preds = %133, %163
  %139 = phi i32 [ %119, %133 ], [ %164, %163 ]
  %140 = phi i32 [ %135, %133 ], [ %165, %163 ]
  %141 = phi i64 [ 0, %133 ], [ %166, %163 ]
  %142 = load i8*, i8** %115, align 8
  %143 = load i64, i64* %116, align 8
  %144 = mul i64 %143, %141
  %145 = getelementptr inbounds i8, i8* %142, i64 %144
  %146 = ptrtoint i8* %145 to i64
  %147 = and i64 %146, 63
  %148 = icmp eq i64 %147, 0
  call void @llvm.assume(i1 %148) #8
  %149 = bitcast i8* %145 to float*
  %150 = load i64, i64* %117, align 8
  %151 = mul i64 %150, %141
  %152 = load i8*, i8** %134, align 8
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  call void @llvm.assume(i1 %155) #8
  %156 = getelementptr inbounds i8, i8* %152, i64 %151
  %157 = ptrtoint i8* %156 to i64
  %158 = and i64 %157, 63
  %159 = icmp eq i64 %158, 0
  call void @llvm.assume(i1 %159) #8
  %160 = icmp eq i32 %140, 0
  br i1 %160, label %163, label %169

161:                                              ; preds = %169
  %162 = load i32, i32* %5, align 4
  br label %163

163:                                              ; preds = %161, %138
  %164 = phi i32 [ %162, %161 ], [ %139, %138 ]
  %165 = phi i32 [ %178, %161 ], [ 0, %138 ]
  %166 = add nuw nsw i64 %141, 1
  %167 = zext i32 %164 to i64
  %168 = icmp ult i64 %166, %167
  br i1 %168, label %138, label %136

169:                                              ; preds = %138, %169
  %170 = phi i64 [ %177, %169 ], [ 0, %138 ]
  %171 = getelementptr inbounds float, float* %149, i64 %170
  %172 = load float, float* %171, align 4
  %173 = fsub float %172, %105
  %174 = fmul float %118, %173
  %175 = fptoui float %174 to i8
  %176 = getelementptr inbounds i8, i8* %156, i64 %170
  store i8 %175, i8* %176, align 1
  %177 = add nuw nsw i64 %170, 1
  %178 = load i32, i32* %108, align 8
  %179 = zext i32 %178 to i64
  %180 = icmp ult i64 %177, %179
  br i1 %180, label %169, label %161

181:                                              ; preds = %136
  %182 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %183 = load i32, i32* %108, align 8
  br label %184

184:                                              ; preds = %221, %181
  %185 = phi i32 [ %164, %181 ], [ %222, %221 ]
  %186 = phi i32 [ %183, %181 ], [ %223, %221 ]
  %187 = phi i64 [ 0, %181 ], [ %224, %221 ]
  %188 = load i8*, i8** %115, align 8
  %189 = load i64, i64* %116, align 8
  %190 = mul i64 %189, %187
  %191 = getelementptr inbounds i8, i8* %188, i64 %190
  %192 = ptrtoint i8* %191 to i64
  %193 = and i64 %192, 63
  %194 = icmp eq i64 %193, 0
  call void @llvm.assume(i1 %194) #8
  %195 = bitcast i8* %191 to float*
  %196 = load i64, i64* %117, align 8
  %197 = mul i64 %196, %187
  %198 = load i8*, i8** %182, align 8
  %199 = ptrtoint i8* %198 to i64
  %200 = and i64 %199, 63
  %201 = icmp eq i64 %200, 0
  call void @llvm.assume(i1 %201) #8
  %202 = getelementptr inbounds i8, i8* %198, i64 %197
  %203 = ptrtoint i8* %202 to i64
  %204 = and i64 %203, 63
  %205 = icmp eq i64 %204, 0
  call void @llvm.assume(i1 %205) #8
  %206 = icmp eq i32 %186, 0
  br i1 %206, label %221, label %207

207:                                              ; preds = %184, %207
  %208 = phi i64 [ %215, %207 ], [ 0, %184 ]
  %209 = getelementptr inbounds float, float* %195, i64 %208
  %210 = load float, float* %209, align 4
  %211 = fsub float %210, %105
  %212 = fmul float %118, %211
  %213 = fptoui float %212 to i8
  %214 = getelementptr inbounds i8, i8* %202, i64 %208
  store i8 %213, i8* %214, align 1
  %215 = add nuw nsw i64 %208, 1
  %216 = load i32, i32* %108, align 8
  %217 = zext i32 %216 to i64
  %218 = icmp ult i64 %215, %217
  br i1 %218, label %207, label %219

219:                                              ; preds = %207
  %220 = load i32, i32* %5, align 4
  br label %221

221:                                              ; preds = %219, %184
  %222 = phi i32 [ %220, %219 ], [ %185, %184 ]
  %223 = phi i32 [ %216, %219 ], [ 0, %184 ]
  %224 = add nuw nsw i64 %187, 1
  %225 = zext i32 %222 to i64
  %226 = icmp ult i64 %224, %225
  br i1 %226, label %184, label %227

227:                                              ; preds = %221
  %228 = icmp eq i32 %222, 0
  br i1 %228, label %275, label %229

229:                                              ; preds = %227
  %230 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %231 = load i32, i32* %108, align 8
  br label %232

232:                                              ; preds = %269, %229
  %233 = phi i32 [ %222, %229 ], [ %270, %269 ]
  %234 = phi i32 [ %231, %229 ], [ %271, %269 ]
  %235 = phi i64 [ 0, %229 ], [ %272, %269 ]
  %236 = load i8*, i8** %115, align 8
  %237 = load i64, i64* %116, align 8
  %238 = mul i64 %237, %235
  %239 = getelementptr inbounds i8, i8* %236, i64 %238
  %240 = ptrtoint i8* %239 to i64
  %241 = and i64 %240, 63
  %242 = icmp eq i64 %241, 0
  call void @llvm.assume(i1 %242) #8
  %243 = bitcast i8* %239 to float*
  %244 = load i64, i64* %117, align 8
  %245 = mul i64 %244, %235
  %246 = load i8*, i8** %230, align 8
  %247 = ptrtoint i8* %246 to i64
  %248 = and i64 %247, 63
  %249 = icmp eq i64 %248, 0
  call void @llvm.assume(i1 %249) #8
  %250 = getelementptr inbounds i8, i8* %246, i64 %245
  %251 = ptrtoint i8* %250 to i64
  %252 = and i64 %251, 63
  %253 = icmp eq i64 %252, 0
  call void @llvm.assume(i1 %253) #8
  %254 = icmp eq i32 %234, 0
  br i1 %254, label %269, label %255

255:                                              ; preds = %232, %255
  %256 = phi i64 [ %263, %255 ], [ 0, %232 ]
  %257 = getelementptr inbounds float, float* %243, i64 %256
  %258 = load float, float* %257, align 4
  %259 = fsub float %258, %105
  %260 = fmul float %118, %259
  %261 = fptoui float %260 to i8
  %262 = getelementptr inbounds i8, i8* %250, i64 %256
  store i8 %261, i8* %262, align 1
  %263 = add nuw nsw i64 %256, 1
  %264 = load i32, i32* %108, align 8
  %265 = zext i32 %264 to i64
  %266 = icmp ult i64 %263, %265
  br i1 %266, label %255, label %267

267:                                              ; preds = %255
  %268 = load i32, i32* %5, align 4
  br label %269

269:                                              ; preds = %267, %232
  %270 = phi i32 [ %268, %267 ], [ %233, %232 ]
  %271 = phi i32 [ %264, %267 ], [ 0, %232 ]
  %272 = add nuw nsw i64 %235, 1
  %273 = zext i32 %270 to i64
  %274 = icmp ult i64 %272, %273
  br i1 %274, label %232, label %275

275:                                              ; preds = %269, %102, %136, %227
  call void @_ZNK3jxl6AuxOut9DumpImageIhEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* %0, i8* %1, %"class.jxl::Image3.268"* nonnull dereferenceable(96) %4)
  %276 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %277 = load i8*, i8** %276, align 8
  store i8* null, i8** %276, align 8
  %278 = icmp eq i8* %277, null
  br i1 %278, label %122, label %121
}

declare float @_ZN3jxl14InitialQuantDCEf(float) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl6AuxOut19DumpPlaneNormalizedIhEEvPKcRKNS_5PlaneIT_EE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.268", align 8
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4, !noalias !347
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  br label %172

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8, !noalias !347
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %16 = load i64, i64* %15, align 8, !noalias !347
  %17 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 8, !noalias !347
  %19 = icmp eq i32 %18, 0
  %20 = zext i32 %18 to i64
  %21 = zext i32 %6 to i64
  %22 = and i64 %20, 4294967264
  %23 = add nsw i64 %22, -32
  %24 = lshr exact i64 %23, 5
  %25 = add nuw nsw i64 %24, 1
  %26 = icmp ult i32 %18, 32
  %27 = and i64 %20, 4294967264
  %28 = and i64 %25, 1
  %29 = icmp eq i64 %23, 0
  %30 = sub nuw nsw i64 %25, %28
  %31 = icmp eq i64 %28, 0
  %32 = icmp eq i64 %27, %20
  br label %33

33:                                               ; preds = %153, %12
  %34 = phi i8 [ -1, %12 ], [ %154, %153 ]
  %35 = phi i8 [ 0, %12 ], [ %155, %153 ]
  %36 = phi i8 [ 0, %12 ], [ %156, %153 ]
  %37 = phi i8 [ -1, %12 ], [ %157, %153 ]
  %38 = phi i64 [ 0, %12 ], [ %158, %153 ]
  %39 = mul i64 %38, %16
  %40 = getelementptr inbounds i8, i8* %14, i64 %39
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #8, !noalias !347
  br i1 %19, label %153, label %44

44:                                               ; preds = %33
  br i1 %26, label %45, label %49

45:                                               ; preds = %118, %44
  %46 = phi i8 [ %36, %44 ], [ %152, %118 ]
  %47 = phi i8 [ %37, %44 ], [ %137, %118 ]
  %48 = phi i64 [ 0, %44 ], [ %27, %118 ]
  br label %160

49:                                               ; preds = %44
  %50 = insertelement <16 x i8> undef, i8 %36, i32 0
  %51 = shufflevector <16 x i8> %50, <16 x i8> undef, <16 x i32> zeroinitializer
  %52 = insertelement <16 x i8> undef, i8 %37, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %29, label %93, label %54

54:                                               ; preds = %49, %54
  %55 = phi i64 [ %90, %54 ], [ 0, %49 ]
  %56 = phi <16 x i8> [ %88, %54 ], [ %51, %49 ]
  %57 = phi <16 x i8> [ %89, %54 ], [ %51, %49 ]
  %58 = phi <16 x i8> [ %84, %54 ], [ %53, %49 ]
  %59 = phi <16 x i8> [ %85, %54 ], [ %53, %49 ]
  %60 = phi i64 [ %91, %54 ], [ %30, %49 ]
  %61 = getelementptr inbounds i8, i8* %40, i64 %55
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 64, !noalias !347
  %64 = getelementptr inbounds i8, i8* %61, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 16, !noalias !347
  %67 = icmp ult <16 x i8> %63, %58
  %68 = icmp ult <16 x i8> %66, %59
  %69 = select <16 x i1> %67, <16 x i8> %63, <16 x i8> %58
  %70 = select <16 x i1> %68, <16 x i8> %66, <16 x i8> %59
  %71 = icmp ult <16 x i8> %56, %63
  %72 = icmp ult <16 x i8> %57, %66
  %73 = select <16 x i1> %71, <16 x i8> %63, <16 x i8> %56
  %74 = select <16 x i1> %72, <16 x i8> %66, <16 x i8> %57
  %75 = or i64 %55, 32
  %76 = getelementptr inbounds i8, i8* %40, i64 %75
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 32, !noalias !347
  %79 = getelementptr inbounds i8, i8* %76, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 16, !noalias !347
  %82 = icmp ult <16 x i8> %78, %69
  %83 = icmp ult <16 x i8> %81, %70
  %84 = select <16 x i1> %82, <16 x i8> %78, <16 x i8> %69
  %85 = select <16 x i1> %83, <16 x i8> %81, <16 x i8> %70
  %86 = icmp ult <16 x i8> %73, %78
  %87 = icmp ult <16 x i8> %74, %81
  %88 = select <16 x i1> %86, <16 x i8> %78, <16 x i8> %73
  %89 = select <16 x i1> %87, <16 x i8> %81, <16 x i8> %74
  %90 = add i64 %55, 64
  %91 = add i64 %60, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %54, !llvm.loop !351

93:                                               ; preds = %54, %49
  %94 = phi <16 x i8> [ undef, %49 ], [ %84, %54 ]
  %95 = phi <16 x i8> [ undef, %49 ], [ %85, %54 ]
  %96 = phi <16 x i8> [ undef, %49 ], [ %88, %54 ]
  %97 = phi <16 x i8> [ undef, %49 ], [ %89, %54 ]
  %98 = phi i64 [ 0, %49 ], [ %90, %54 ]
  %99 = phi <16 x i8> [ %51, %49 ], [ %88, %54 ]
  %100 = phi <16 x i8> [ %51, %49 ], [ %89, %54 ]
  %101 = phi <16 x i8> [ %53, %49 ], [ %84, %54 ]
  %102 = phi <16 x i8> [ %53, %49 ], [ %85, %54 ]
  br i1 %31, label %118, label %103

103:                                              ; preds = %93
  %104 = getelementptr inbounds i8, i8* %40, i64 %98
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 32, !noalias !347
  %107 = getelementptr inbounds i8, i8* %104, i64 16
  %108 = bitcast i8* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 16, !noalias !347
  %110 = icmp ult <16 x i8> %100, %109
  %111 = select <16 x i1> %110, <16 x i8> %109, <16 x i8> %100
  %112 = icmp ult <16 x i8> %99, %106
  %113 = select <16 x i1> %112, <16 x i8> %106, <16 x i8> %99
  %114 = icmp ult <16 x i8> %109, %102
  %115 = select <16 x i1> %114, <16 x i8> %109, <16 x i8> %102
  %116 = icmp ult <16 x i8> %106, %101
  %117 = select <16 x i1> %116, <16 x i8> %106, <16 x i8> %101
  br label %118

118:                                              ; preds = %93, %103
  %119 = phi <16 x i8> [ %94, %93 ], [ %117, %103 ]
  %120 = phi <16 x i8> [ %95, %93 ], [ %115, %103 ]
  %121 = phi <16 x i8> [ %96, %93 ], [ %113, %103 ]
  %122 = phi <16 x i8> [ %97, %93 ], [ %111, %103 ]
  %123 = icmp ult <16 x i8> %119, %120
  %124 = select <16 x i1> %123, <16 x i8> %119, <16 x i8> %120
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = icmp ult <16 x i8> %124, %125
  %127 = select <16 x i1> %126, <16 x i8> %124, <16 x i8> %125
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = icmp ult <16 x i8> %127, %128
  %130 = select <16 x i1> %129, <16 x i8> %127, <16 x i8> %128
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = icmp ult <16 x i8> %130, %131
  %133 = select <16 x i1> %132, <16 x i8> %130, <16 x i8> %131
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = icmp ult <16 x i8> %133, %134
  %136 = select <16 x i1> %135, <16 x i8> %133, <16 x i8> %134
  %137 = extractelement <16 x i8> %136, i32 0
  %138 = icmp ugt <16 x i8> %121, %122
  %139 = select <16 x i1> %138, <16 x i8> %121, <16 x i8> %122
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = icmp ugt <16 x i8> %139, %140
  %142 = select <16 x i1> %141, <16 x i8> %139, <16 x i8> %140
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = icmp ugt <16 x i8> %142, %143
  %145 = select <16 x i1> %144, <16 x i8> %142, <16 x i8> %143
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = icmp ugt <16 x i8> %145, %146
  %148 = select <16 x i1> %147, <16 x i8> %145, <16 x i8> %146
  %149 = shufflevector <16 x i8> %148, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = icmp ugt <16 x i8> %148, %149
  %151 = select <16 x i1> %150, <16 x i8> %148, <16 x i8> %149
  %152 = extractelement <16 x i8> %151, i32 0
  br i1 %32, label %153, label %45

153:                                              ; preds = %160, %118, %33
  %154 = phi i8 [ %34, %33 ], [ %137, %118 ], [ %167, %160 ]
  %155 = phi i8 [ %35, %33 ], [ %152, %118 ], [ %169, %160 ]
  %156 = phi i8 [ %36, %33 ], [ %152, %118 ], [ %169, %160 ]
  %157 = phi i8 [ %37, %33 ], [ %137, %118 ], [ %167, %160 ]
  %158 = add nuw nsw i64 %38, 1
  %159 = icmp eq i64 %158, %21
  br i1 %159, label %172, label %33

160:                                              ; preds = %45, %160
  %161 = phi i8 [ %169, %160 ], [ %46, %45 ]
  %162 = phi i8 [ %167, %160 ], [ %47, %45 ]
  %163 = phi i64 [ %170, %160 ], [ %48, %45 ]
  %164 = getelementptr inbounds i8, i8* %40, i64 %163
  %165 = load i8, i8* %164, align 1, !noalias !347
  %166 = icmp ult i8 %165, %162
  %167 = select i1 %166, i8 %165, i8 %162
  %168 = icmp ult i8 %161, %165
  %169 = select i1 %168, i8 %165, i8 %161
  %170 = add nuw nsw i64 %163, 1
  %171 = icmp eq i64 %170, %20
  br i1 %171, label %153, label %160, !llvm.loop !352

172:                                              ; preds = %153, %8
  %173 = phi i64 [ 0, %8 ], [ %21, %153 ]
  %174 = phi i64 [ %11, %8 ], [ %20, %153 ]
  %175 = phi i8 [ -1, %8 ], [ %154, %153 ]
  %176 = phi i8 [ 0, %8 ], [ %155, %153 ]
  %177 = bitcast %"class.jxl::Image3.268"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %177) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 -86, i64 96, i1 false)
  %178 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %179 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %179, i64 %174, i64 %173, i64 1) #8
  %180 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %180, i64 %174, i64 %173, i64 1) #8
  %181 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %181, i64 %174, i64 %173, i64 1) #8
  %182 = icmp eq i8 %176, %175
  %183 = zext i8 %176 to i32
  %184 = zext i8 %175 to i32
  %185 = sub nsw i32 %183, %184
  %186 = sitofp i32 %185 to float
  %187 = fdiv float 2.550000e+02, %186
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %189 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %190 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0, i32 4
  %191 = select i1 %182, float 0.000000e+00, float %187
  %192 = load i32, i32* %5, align 4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %351, label %206

194:                                              ; preds = %351
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %353) #8
  br label %195

195:                                              ; preds = %194, %351
  %196 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %197 = load i8*, i8** %196, align 8
  store i8* null, i8** %196, align 8
  %198 = icmp eq i8* %197, null
  br i1 %198, label %200, label %199

199:                                              ; preds = %195
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %197) #8
  br label %200

200:                                              ; preds = %199, %195
  %201 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %202 = load i8*, i8** %201, align 8
  store i8* null, i8** %201, align 8
  %203 = icmp eq i8* %202, null
  br i1 %203, label %205, label %204

204:                                              ; preds = %200
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %202) #8
  br label %205

205:                                              ; preds = %200, %204
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %177) #8
  ret void

206:                                              ; preds = %172
  %207 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %208 = load i32, i32* %178, align 8
  br label %211

209:                                              ; preds = %235
  %210 = icmp eq i32 %236, 0
  br i1 %210, label %351, label %255

211:                                              ; preds = %206, %235
  %212 = phi i32 [ %192, %206 ], [ %236, %235 ]
  %213 = phi i32 [ %208, %206 ], [ %237, %235 ]
  %214 = phi i64 [ 0, %206 ], [ %238, %235 ]
  %215 = load i8*, i8** %188, align 8
  %216 = load i64, i64* %189, align 8
  %217 = mul i64 %216, %214
  %218 = getelementptr inbounds i8, i8* %215, i64 %217
  %219 = ptrtoint i8* %218 to i64
  %220 = and i64 %219, 63
  %221 = icmp eq i64 %220, 0
  call void @llvm.assume(i1 %221) #8
  %222 = load i64, i64* %190, align 8
  %223 = mul i64 %222, %214
  %224 = load i8*, i8** %207, align 8
  %225 = ptrtoint i8* %224 to i64
  %226 = and i64 %225, 63
  %227 = icmp eq i64 %226, 0
  call void @llvm.assume(i1 %227) #8
  %228 = getelementptr inbounds i8, i8* %224, i64 %223
  %229 = ptrtoint i8* %228 to i64
  %230 = and i64 %229, 63
  %231 = icmp eq i64 %230, 0
  call void @llvm.assume(i1 %231) #8
  %232 = icmp eq i32 %213, 0
  br i1 %232, label %235, label %241

233:                                              ; preds = %241
  %234 = load i32, i32* %5, align 4
  br label %235

235:                                              ; preds = %233, %211
  %236 = phi i32 [ %234, %233 ], [ %212, %211 ]
  %237 = phi i32 [ %252, %233 ], [ 0, %211 ]
  %238 = add nuw nsw i64 %214, 1
  %239 = zext i32 %236 to i64
  %240 = icmp ult i64 %238, %239
  br i1 %240, label %211, label %209

241:                                              ; preds = %211, %241
  %242 = phi i64 [ %251, %241 ], [ 0, %211 ]
  %243 = getelementptr inbounds i8, i8* %218, i64 %242
  %244 = load i8, i8* %243, align 1
  %245 = zext i8 %244 to i32
  %246 = sub nsw i32 %245, %184
  %247 = sitofp i32 %246 to float
  %248 = fmul float %191, %247
  %249 = fptoui float %248 to i8
  %250 = getelementptr inbounds i8, i8* %228, i64 %242
  store i8 %249, i8* %250, align 1
  %251 = add nuw nsw i64 %242, 1
  %252 = load i32, i32* %178, align 8
  %253 = zext i32 %252 to i64
  %254 = icmp ult i64 %251, %253
  br i1 %254, label %241, label %233

255:                                              ; preds = %209
  %256 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %257 = load i32, i32* %178, align 8
  br label %258

258:                                              ; preds = %296, %255
  %259 = phi i32 [ %236, %255 ], [ %297, %296 ]
  %260 = phi i32 [ %257, %255 ], [ %298, %296 ]
  %261 = phi i64 [ 0, %255 ], [ %299, %296 ]
  %262 = load i8*, i8** %188, align 8
  %263 = load i64, i64* %189, align 8
  %264 = mul i64 %263, %261
  %265 = getelementptr inbounds i8, i8* %262, i64 %264
  %266 = ptrtoint i8* %265 to i64
  %267 = and i64 %266, 63
  %268 = icmp eq i64 %267, 0
  call void @llvm.assume(i1 %268) #8
  %269 = load i64, i64* %190, align 8
  %270 = mul i64 %269, %261
  %271 = load i8*, i8** %256, align 8
  %272 = ptrtoint i8* %271 to i64
  %273 = and i64 %272, 63
  %274 = icmp eq i64 %273, 0
  call void @llvm.assume(i1 %274) #8
  %275 = getelementptr inbounds i8, i8* %271, i64 %270
  %276 = ptrtoint i8* %275 to i64
  %277 = and i64 %276, 63
  %278 = icmp eq i64 %277, 0
  call void @llvm.assume(i1 %278) #8
  %279 = icmp eq i32 %260, 0
  br i1 %279, label %296, label %280

280:                                              ; preds = %258, %280
  %281 = phi i64 [ %290, %280 ], [ 0, %258 ]
  %282 = getelementptr inbounds i8, i8* %265, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i32
  %285 = sub nsw i32 %284, %184
  %286 = sitofp i32 %285 to float
  %287 = fmul float %191, %286
  %288 = fptoui float %287 to i8
  %289 = getelementptr inbounds i8, i8* %275, i64 %281
  store i8 %288, i8* %289, align 1
  %290 = add nuw nsw i64 %281, 1
  %291 = load i32, i32* %178, align 8
  %292 = zext i32 %291 to i64
  %293 = icmp ult i64 %290, %292
  br i1 %293, label %280, label %294

294:                                              ; preds = %280
  %295 = load i32, i32* %5, align 4
  br label %296

296:                                              ; preds = %294, %258
  %297 = phi i32 [ %295, %294 ], [ %259, %258 ]
  %298 = phi i32 [ %291, %294 ], [ 0, %258 ]
  %299 = add nuw nsw i64 %261, 1
  %300 = zext i32 %297 to i64
  %301 = icmp ult i64 %299, %300
  br i1 %301, label %258, label %302

302:                                              ; preds = %296
  %303 = icmp eq i32 %297, 0
  br i1 %303, label %351, label %304

304:                                              ; preds = %302
  %305 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %306 = load i32, i32* %178, align 8
  br label %307

307:                                              ; preds = %345, %304
  %308 = phi i32 [ %297, %304 ], [ %346, %345 ]
  %309 = phi i32 [ %306, %304 ], [ %347, %345 ]
  %310 = phi i64 [ 0, %304 ], [ %348, %345 ]
  %311 = load i8*, i8** %188, align 8
  %312 = load i64, i64* %189, align 8
  %313 = mul i64 %312, %310
  %314 = getelementptr inbounds i8, i8* %311, i64 %313
  %315 = ptrtoint i8* %314 to i64
  %316 = and i64 %315, 63
  %317 = icmp eq i64 %316, 0
  call void @llvm.assume(i1 %317) #8
  %318 = load i64, i64* %190, align 8
  %319 = mul i64 %318, %310
  %320 = load i8*, i8** %305, align 8
  %321 = ptrtoint i8* %320 to i64
  %322 = and i64 %321, 63
  %323 = icmp eq i64 %322, 0
  call void @llvm.assume(i1 %323) #8
  %324 = getelementptr inbounds i8, i8* %320, i64 %319
  %325 = ptrtoint i8* %324 to i64
  %326 = and i64 %325, 63
  %327 = icmp eq i64 %326, 0
  call void @llvm.assume(i1 %327) #8
  %328 = icmp eq i32 %309, 0
  br i1 %328, label %345, label %329

329:                                              ; preds = %307, %329
  %330 = phi i64 [ %339, %329 ], [ 0, %307 ]
  %331 = getelementptr inbounds i8, i8* %314, i64 %330
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = sub nsw i32 %333, %184
  %335 = sitofp i32 %334 to float
  %336 = fmul float %191, %335
  %337 = fptoui float %336 to i8
  %338 = getelementptr inbounds i8, i8* %324, i64 %330
  store i8 %337, i8* %338, align 1
  %339 = add nuw nsw i64 %330, 1
  %340 = load i32, i32* %178, align 8
  %341 = zext i32 %340 to i64
  %342 = icmp ult i64 %339, %341
  br i1 %342, label %329, label %343

343:                                              ; preds = %329
  %344 = load i32, i32* %5, align 4
  br label %345

345:                                              ; preds = %343, %307
  %346 = phi i32 [ %344, %343 ], [ %308, %307 ]
  %347 = phi i32 [ %340, %343 ], [ 0, %307 ]
  %348 = add nuw nsw i64 %310, 1
  %349 = zext i32 %346 to i64
  %350 = icmp ult i64 %348, %349
  br i1 %350, label %307, label %351

351:                                              ; preds = %345, %172, %209, %302
  call void @_ZNK3jxl6AuxOut9DumpImageIhEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"* %0, i8* %1, %"class.jxl::Image3.268"* nonnull dereferenceable(96) %4)
  %352 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %353 = load i8*, i8** %352, align 8
  store i8* null, i8** %352, align 8
  %354 = icmp eq i8* %353, null
  br i1 %354, label %195, label %194
}

declare void @_ZN3jxl14DumpAcStrategyERKNS_15AcStrategyImageEmmPKcPNS_6AuxOutE(%"class.jxl::AcStrategyImage"* dereferenceable(48), i64, i64, i8*, %"struct.jxl::AuxOut"*) local_unnamed_addr #5

declare void @_ZN3jxl9Quantizer13SetQuantFieldEfRKNS_5PlaneIfEEPNS1_IiEE(%"class.jxl::Quantizer"*, float, %"class.jxl::Plane.97"* dereferenceable(32), %"class.jxl::Plane.53"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @llvm.assume(i1) #8

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #5

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #5

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #5

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_6E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_6E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_6clEmm"(%class.anon* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_6clEmm"(%class.anon* nocapture readonly, i64) unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %4, align 8
  %6 = urem i64 %1, %5
  %7 = udiv i64 %1, %5
  %8 = shl i64 %6, 6
  %9 = add i64 %8, 64
  %10 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 1
  %11 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = icmp ugt i64 %9, %14
  %16 = select i1 %15, i64 %14, i64 %9
  %17 = shl i64 %7, 6
  %18 = add i64 %17, 64
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i64 %18, %21
  %23 = select i1 %22, i64 %21, i64 %18
  %24 = icmp ult i64 %17, %23
  %25 = icmp ult i64 %8, %16
  %26 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 2
  br i1 %24, label %27, label %40

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #8
  br label %91

40:                                               ; preds = %106, %2
  %41 = phi <16 x float> [ zeroinitializer, %2 ], [ %107, %106 ]
  %42 = phi <16 x float> [ zeroinitializer, %2 ], [ %108, %106 ]
  %43 = bitcast <16 x float> %41 to <8 x double>
  %44 = shufflevector <8 x double> %43, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %45 = bitcast <4 x double> %44 to <8 x float>
  %46 = shufflevector <8 x double> %43, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %47 = bitcast <4 x double> %46 to <8 x float>
  %48 = fadd <8 x float> %45, %47
  %49 = shufflevector <8 x float> %48, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %50 = shufflevector <8 x float> %48, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %51 = fadd <4 x float> %49, %50
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %53 = fadd <4 x float> %51, %52
  %54 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %55 = fadd <4 x float> %53, %54
  %56 = extractelement <4 x float> %55, i32 0
  %57 = fsub float -0.000000e+00, %56
  %58 = bitcast <16 x float> %42 to <8 x double>
  %59 = shufflevector <8 x double> %58, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = bitcast <4 x double> %59 to <8 x float>
  %61 = shufflevector <8 x double> %58, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %62 = bitcast <4 x double> %61 to <8 x float>
  %63 = fadd <8 x float> %60, %62
  %64 = shufflevector <8 x float> %63, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %65 = shufflevector <8 x float> %63, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %66 = fadd <4 x float> %64, %65
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %68 = fadd <4 x float> %66, %67
  %69 = shufflevector <4 x float> %68, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %70 = fadd <4 x float> %68, %69
  %71 = extractelement <4 x float> %70, i32 0
  %72 = fadd float %71, 0x3E112E0BE0000000
  %73 = fdiv float %57, %72
  %74 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %26, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %74, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %74, i64 0, i32 8, i32 0, i32 0, i32 4
  %78 = load i64, i64* %77, align 8
  %79 = mul i64 %78, %7
  %80 = getelementptr inbounds i8, i8* %76, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = and i64 %81, 63
  %83 = icmp eq i64 %82, 0
  tail call void @llvm.assume(i1 %83) #8
  %84 = getelementptr inbounds i8, i8* %80, i64 %6
  %85 = tail call float @llvm.round.f32(float %73)
  %86 = fcmp olt float %85, 1.270000e+02
  %87 = select i1 %86, float %85, float 1.270000e+02
  %88 = fcmp ogt float %87, -1.280000e+02
  %89 = select i1 %88, float %87, float -1.280000e+02
  %90 = fptosi float %89 to i8
  store i8 %90, i8* %84, align 1
  br i1 %24, label %127, label %177

91:                                               ; preds = %27, %106
  %92 = phi i64 [ %17, %27 ], [ %109, %106 ]
  %93 = phi <16 x float> [ zeroinitializer, %27 ], [ %108, %106 ]
  %94 = phi <16 x float> [ zeroinitializer, %27 ], [ %107, %106 ]
  %95 = mul i64 %29, %92
  %96 = getelementptr inbounds i8, i8* %31, i64 %95
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  tail call void @llvm.assume(i1 %99) #8
  %100 = bitcast i8* %96 to float*
  %101 = getelementptr inbounds i8, i8* %36, i64 %95
  %102 = ptrtoint i8* %101 to i64
  %103 = and i64 %102, 63
  %104 = icmp eq i64 %103, 0
  tail call void @llvm.assume(i1 %104) #8
  %105 = bitcast i8* %101 to float*
  br i1 %25, label %111, label %106

106:                                              ; preds = %111, %91
  %107 = phi <16 x float> [ %94, %91 ], [ %124, %111 ]
  %108 = phi <16 x float> [ %93, %91 ], [ %123, %111 ]
  %109 = add nuw i64 %92, 1
  %110 = icmp ult i64 %109, %23
  br i1 %110, label %91, label %40

111:                                              ; preds = %91, %111
  %112 = phi i64 [ %125, %111 ], [ %8, %91 ]
  %113 = phi <16 x float> [ %123, %111 ], [ %93, %91 ]
  %114 = phi <16 x float> [ %124, %111 ], [ %94, %91 ]
  %115 = getelementptr inbounds float, float* %100, i64 %112
  %116 = bitcast float* %115 to <16 x float>*
  %117 = load <16 x float>, <16 x float>* %116, align 64, !alias.scope !354, !noalias !357
  %118 = fmul <16 x float> %117, <float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000>
  %119 = getelementptr inbounds float, float* %105, i64 %112
  %120 = bitcast float* %119 to <16 x float>*
  %121 = load <16 x float>, <16 x float>* %120, align 64, !alias.scope !359, !noalias !362
  %122 = fsub <16 x float> zeroinitializer, %121
  %123 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %118, <16 x float> %118, <16 x float> %113) #8
  %124 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %118, <16 x float> %122, <16 x float> %114) #8
  %125 = add i64 %112, 16
  %126 = icmp ult i64 %125, %16
  br i1 %126, label %111, label %106

127:                                              ; preds = %40
  %128 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %129 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %128, i64 0, i32 0, i64 0, i32 0, i32 4
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %128, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #8
  %136 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %128, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  %138 = ptrtoint i8* %137 to i64
  %139 = and i64 %138, 63
  %140 = icmp eq i64 %139, 0
  tail call void @llvm.assume(i1 %140) #8
  br label %141

141:                                              ; preds = %172, %127
  %142 = phi i64 [ %17, %127 ], [ %175, %172 ]
  %143 = phi <16 x float> [ zeroinitializer, %127 ], [ %174, %172 ]
  %144 = phi <16 x float> [ zeroinitializer, %127 ], [ %173, %172 ]
  %145 = mul i64 %130, %142
  %146 = getelementptr inbounds i8, i8* %132, i64 %145
  %147 = ptrtoint i8* %146 to i64
  %148 = and i64 %147, 63
  %149 = icmp eq i64 %148, 0
  tail call void @llvm.assume(i1 %149) #8
  %150 = bitcast i8* %146 to float*
  %151 = getelementptr inbounds i8, i8* %137, i64 %145
  %152 = ptrtoint i8* %151 to i64
  %153 = and i64 %152, 63
  %154 = icmp eq i64 %153, 0
  tail call void @llvm.assume(i1 %154) #8
  %155 = bitcast i8* %151 to float*
  br i1 %25, label %156, label %172

156:                                              ; preds = %141, %156
  %157 = phi i64 [ %170, %156 ], [ %8, %141 ]
  %158 = phi <16 x float> [ %168, %156 ], [ %143, %141 ]
  %159 = phi <16 x float> [ %169, %156 ], [ %144, %141 ]
  %160 = getelementptr inbounds float, float* %150, i64 %157
  %161 = bitcast float* %160 to <16 x float>*
  %162 = load <16 x float>, <16 x float>* %161, align 64, !alias.scope !354, !noalias !357
  %163 = fmul <16 x float> %162, <float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000>
  %164 = getelementptr inbounds float, float* %155, i64 %157
  %165 = bitcast float* %164 to <16 x float>*
  %166 = load <16 x float>, <16 x float>* %165, align 64, !alias.scope !359, !noalias !362
  %167 = fsub <16 x float> zeroinitializer, %166
  %168 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %163, <16 x float> %163, <16 x float> %158) #8
  %169 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %163, <16 x float> %167, <16 x float> %159) #8
  %170 = add i64 %157, 16
  %171 = icmp ult i64 %170, %16
  br i1 %171, label %156, label %172

172:                                              ; preds = %156, %141
  %173 = phi <16 x float> [ %144, %141 ], [ %169, %156 ]
  %174 = phi <16 x float> [ %143, %141 ], [ %168, %156 ]
  %175 = add nuw i64 %142, 1
  %176 = icmp ult i64 %175, %23
  br i1 %176, label %141, label %177

177:                                              ; preds = %172, %40
  %178 = phi <16 x float> [ zeroinitializer, %40 ], [ %173, %172 ]
  %179 = phi <16 x float> [ zeroinitializer, %40 ], [ %174, %172 ]
  %180 = bitcast <16 x float> %178 to <8 x double>
  %181 = shufflevector <8 x double> %180, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %182 = bitcast <4 x double> %181 to <8 x float>
  %183 = shufflevector <8 x double> %180, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %184 = bitcast <4 x double> %183 to <8 x float>
  %185 = fadd <8 x float> %182, %184
  %186 = shufflevector <8 x float> %185, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %187 = shufflevector <8 x float> %185, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %188 = fadd <4 x float> %186, %187
  %189 = shufflevector <4 x float> %188, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %190 = fadd <4 x float> %188, %189
  %191 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %192 = fadd <4 x float> %190, %191
  %193 = extractelement <4 x float> %192, i32 0
  %194 = fsub float -0.000000e+00, %193
  %195 = bitcast <16 x float> %179 to <8 x double>
  %196 = shufflevector <8 x double> %195, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %197 = bitcast <4 x double> %196 to <8 x float>
  %198 = shufflevector <8 x double> %195, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %199 = bitcast <4 x double> %198 to <8 x float>
  %200 = fadd <8 x float> %197, %199
  %201 = shufflevector <8 x float> %200, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %202 = shufflevector <8 x float> %200, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %203 = fadd <4 x float> %201, %202
  %204 = shufflevector <4 x float> %203, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %205 = fadd <4 x float> %203, %204
  %206 = shufflevector <4 x float> %205, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %207 = fadd <4 x float> %205, %206
  %208 = extractelement <4 x float> %207, i32 0
  %209 = fadd float %208, 0x3E112E0BE0000000
  %210 = fdiv float %194, %209
  %211 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %26, align 8
  %212 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %211, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %211, i64 0, i32 8, i32 1, i32 0, i32 4
  %215 = load i64, i64* %214, align 8
  %216 = mul i64 %215, %7
  %217 = getelementptr inbounds i8, i8* %213, i64 %216
  %218 = ptrtoint i8* %217 to i64
  %219 = and i64 %218, 63
  %220 = icmp eq i64 %219, 0
  tail call void @llvm.assume(i1 %220) #8
  %221 = getelementptr inbounds i8, i8* %217, i64 %6
  %222 = tail call float @llvm.round.f32(float %210)
  %223 = fcmp olt float %222, 1.270000e+02
  %224 = select i1 %223, float %222, float 1.270000e+02
  %225 = fcmp ogt float %224, -1.280000e+02
  %226 = select i1 %225, float %224, float -1.280000e+02
  %227 = fptosi float %226 to i8
  store i8 %227, i8* %221, align 1
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #10

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_7E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_7E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.258**
  %6 = load %class.anon.258*, %class.anon.258** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_7clEmm"(%class.anon.258* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_7clEmm"(%class.anon.258* nocapture readonly, i64) unnamed_addr #11 align 2 {
  %3 = getelementptr inbounds %class.anon.258, %class.anon.258* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.anon.258, %class.anon.258* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.anon.258, %class.anon.258* %0, i64 0, i32 2
  %6 = shl i64 %1, 2
  %7 = add i64 %6, 16
  %8 = getelementptr inbounds %class.anon.258, %class.anon.258* %0, i64 0, i32 3
  %9 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %8, align 8
  %10 = add i64 %6, 17
  %11 = add i64 %6, 18
  %12 = add i64 %6, 19
  br label %14

13:                                               ; preds = %138
  ret void

14:                                               ; preds = %138, %2
  %15 = phi %"struct.jxl::FrameDimensions"* [ %9, %2 ], [ %139, %138 ]
  %16 = phi i64 [ 0, %2 ], [ %140, %138 ]
  %17 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %3, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %1
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #8
  %26 = getelementptr inbounds i8, i8* %22, i64 %20
  %27 = ptrtoint i8* %26 to i64
  %28 = and i64 %27, 63
  %29 = icmp eq i64 %28, 0
  tail call void @llvm.assume(i1 %29) #8
  %30 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %30, i64 0, i32 0, i64 0, i32 0, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = mul i64 %32, %1
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %30, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #8
  %39 = getelementptr inbounds i8, i8* %35, i64 %33
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #8
  %43 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %43, i64 0, i32 0, i64 0, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %43, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #8
  %51 = mul i64 %45, %7
  %52 = getelementptr inbounds i8, i8* %47, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 60
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #8
  %56 = mul i64 %45, %10
  %57 = getelementptr inbounds i8, i8* %47, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = mul i64 %45, %11
  %62 = getelementptr inbounds i8, i8* %47, i64 %61
  %63 = ptrtoint i8* %62 to i64
  %64 = and i64 %63, 62
  %65 = icmp eq i64 %64, 0
  tail call void @llvm.assume(i1 %65) #8
  %66 = mul i64 %45, %12
  %67 = getelementptr inbounds i8, i8* %47, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #8
  %71 = bitcast i8* %26 to float*
  %72 = bitcast i8* %39 to float*
  %73 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %15, i64 0, i32 6
  %74 = load i64, i64* %73, align 8
  %75 = icmp ugt i64 %74, 3
  br i1 %75, label %76, label %138

76:                                               ; preds = %14
  %77 = getelementptr inbounds i8, i8* %52, i64 64
  %78 = bitcast i8* %77 to float*
  %79 = getelementptr inbounds i8, i8* %57, i64 64
  %80 = bitcast i8* %79 to float*
  %81 = getelementptr inbounds i8, i8* %62, i64 64
  %82 = bitcast i8* %81 to float*
  %83 = getelementptr inbounds i8, i8* %67, i64 64
  %84 = bitcast i8* %83 to float*
  br label %85

85:                                               ; preds = %76, %85
  %86 = phi i64 [ %132, %85 ], [ 0, %76 ]
  %87 = shl i64 %86, 2
  %88 = getelementptr inbounds float, float* %78, i64 %87
  %89 = bitcast float* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 16, !alias.scope !364
  %91 = and <4 x i32> %90, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %92 = bitcast <4 x i32> %91 to <4 x float>
  %93 = fadd <4 x float> %92, zeroinitializer
  %94 = fcmp olt <4 x float> %92, zeroinitializer
  %95 = select <4 x i1> %94, <4 x float> zeroinitializer, <4 x float> %92
  %96 = getelementptr inbounds float, float* %80, i64 %87
  %97 = bitcast float* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 16, !alias.scope !364
  %99 = and <4 x i32> %98, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %100 = bitcast <4 x i32> %99 to <4 x float>
  %101 = fadd <4 x float> %93, %100
  %102 = fcmp ogt <4 x float> %95, %100
  %103 = select <4 x i1> %102, <4 x float> %95, <4 x float> %100
  %104 = getelementptr inbounds float, float* %82, i64 %87
  %105 = bitcast float* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 16, !alias.scope !364
  %107 = and <4 x i32> %106, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = fadd <4 x float> %101, %108
  %110 = fcmp ogt <4 x float> %103, %108
  %111 = select <4 x i1> %110, <4 x float> %103, <4 x float> %108
  %112 = getelementptr inbounds float, float* %84, i64 %87
  %113 = bitcast float* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 16, !alias.scope !364
  %115 = and <4 x i32> %114, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %116 = bitcast <4 x i32> %115 to <4 x float>
  %117 = fadd <4 x float> %109, %116
  %118 = fcmp ogt <4 x float> %111, %116
  %119 = select <4 x i1> %118, <4 x float> %111, <4 x float> %116
  %120 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %121 = fadd <4 x float> %117, %120
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %123 = fadd <4 x float> %121, %122
  %124 = extractelement <4 x float> %123, i32 0
  %125 = getelementptr inbounds float, float* %72, i64 %86
  store float %124, float* %125, align 4
  %126 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %127 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %119, <4 x float> %126) #8
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %129 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %128, <4 x float> %127) #8
  %130 = extractelement <4 x float> %129, i32 0
  %131 = getelementptr inbounds float, float* %71, i64 %86
  store float %130, float* %131, align 4
  %132 = add nuw nsw i64 %86, 1
  %133 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %8, align 8
  %134 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %133, i64 0, i32 6
  %135 = load i64, i64* %134, align 8
  %136 = lshr i64 %135, 2
  %137 = icmp ult i64 %132, %136
  br i1 %137, label %85, label %138

138:                                              ; preds = %85, %14
  %139 = phi %"struct.jxl::FrameDimensions"* [ %15, %14 ], [ %133, %85 ]
  %140 = add nuw nsw i64 %16, 1
  %141 = icmp eq i64 %140, 3
  br i1 %141, label %13, label %14
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #12

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl6AuxOut9DumpImageIhEEvPKcRKNS_6Image3IT_EE(%"struct.jxl::AuxOut"*, i8*, %"class.jxl::Image3.268"* dereferenceable(96)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_ostringstream", align 8
  %5 = alloca %"class.jxl::CodecInOut", align 8
  %6 = alloca %"class.jxl::Image3", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 2
  %9 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %9, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !3
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %178

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  br label %24

22:                                               ; preds = %13
  %23 = zext i8 %17 to i64
  br label %24

24:                                               ; preds = %19, %22
  %25 = phi i64 [ %21, %19 ], [ %23, %22 ]
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %178, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %28) #8
  %29 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %30 = bitcast %"class.std::__1::basic_stringbuf"* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 256, i1 false)
  %31 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1
  %34 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %33, i64 0, i32 0
  %35 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %36 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i64*
  store i64 %35, i64* %36, align 8
  %37 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %38 = bitcast %"class.std::__1::basic_ostringstream"* %4 to i8**
  %39 = inttoptr i64 %35 to i8*
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds i8, i8* %28, i64 %42
  %44 = bitcast i8* %43 to i64*
  store i64 %37, i64* %44, align 8
  %45 = load i8*, i8** %38, align 8
  %46 = getelementptr i8, i8* %45, i64 -24
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i8, i8* %28, i64 %48
  %50 = bitcast i8* %49 to %"class.std::__1::ios_base"*
  %51 = bitcast %"class.std::__1::basic_stringbuf"* %33 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %50, i8* %51) #8
  %52 = getelementptr inbounds i8, i8* %49, i64 136
  %53 = bitcast i8* %52 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %53, align 8
  %54 = getelementptr inbounds i8, i8* %49, i64 144
  %55 = bitcast i8* %54 to i32*
  store i32 -1, i32* %55, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %32, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %31, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %34) #8
  %56 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %33, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 1
  %58 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 1, i32 3
  %59 = bitcast %"class.std::__1::basic_string"* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 32, i1 false) #8
  store i32 16, i32* %58, align 8
  %60 = bitcast %"class.std::__1::basic_ostringstream"* %4 to %"class.std::__1::basic_ostream"*
  %61 = load i8, i8* %16, align 1
  %62 = icmp slt i8 %61, 0
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %68 = zext i8 %61 to i64
  %69 = select i1 %62, i8* %64, i8* %67
  %70 = select i1 %62, i64 %66, i64 %68
  %71 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %60, i8* %69, i64 %70) #8
  %72 = call i64 @strlen(i8* %1) #8
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %71, i8* %1, i64 %72) #8
  %74 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i64 0, i64 0), i64 4) #8
  %75 = bitcast %"class.jxl::CodecInOut"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3416, i8* nonnull %75) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 bitcast ({ %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", { <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::CustomTransformData" }, { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.169", i64 }, %"class.std::__1::vector.245", i8, [7 x i8], i64 }* @__const._ZNK3jxl6AuxOut9DumpImageIhEEvPKcRKNS_6Image3IT_EE.io to i8*), i64 3416, i1 false)
  call void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"* nonnull %5)
  %76 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 3
  store i32 16, i32* %76, align 4
  %77 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 4
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 3, i32 1
  store i8 0, i8* %78, align 8
  %79 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext false) #8
  %80 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7
  %81 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 1
  %82 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 12, i1 false) #8
  %83 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 4, i32 1
  %84 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 4, i32 1
  %85 = bitcast i32* %83 to i8*
  %86 = bitcast i32* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 16, i1 false) #8
  %87 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 5
  %88 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 5
  %89 = bitcast i32* %87 to i8*
  %90 = bitcast i32* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 6, i1 false) #8
  %91 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8
  %92 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 8, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = icmp ult i64 %95, %93
  br i1 %96, label %97, label %98

97:                                               ; preds = %27
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %91, i64 %93) #8
  br label %98

98:                                               ; preds = %97, %27
  %99 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8* %100, null
  %102 = select i1 %101, i64 0, i64 %93
  %103 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %91, i64 0, i32 0
  store i64 %102, i64* %103, align 8
  br i1 %101, label %107, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %100, i8* align 1 %106, i64 %102, i1 false) #8
  br label %107

107:                                              ; preds = %98, %104
  %108 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 9
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 9
  store i32 %109, i32* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 10, i32 1
  %112 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 10, i32 1
  %113 = bitcast i32* %112 to i64*
  %114 = bitcast i32* %111 to i64*
  %115 = load i64, i64* %113, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 11, i32 1
  %117 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 11, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 12, i32 1
  %122 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 12, i32 1
  %123 = bitcast i32* %122 to i64*
  %124 = bitcast i32* %121 to i64*
  %125 = load i64, i64* %123, align 8
  store i64 %125, i64* %124, align 8
  %126 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %5, i64 0, i32 6, i32 0, i32 7, i32 13, i32 1
  %127 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %79, i64 0, i32 13, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = bitcast %"class.jxl::Image3"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %131) #8
  call void @_ZN3jxl14ConvertToFloatIhEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* nonnull sret %6, %"class.jxl::Image3.268"* dereferenceable(96) %2)
  call void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"* nonnull %5, %"class.jxl::Image3"* nonnull dereferenceable(96) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %80)
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  store i8* null, i8** %132, align 8
  %134 = icmp eq i8* %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %107
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %133) #8
  br label %136

136:                                              ; preds = %135, %107
  %137 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  store i8* null, i8** %137, align 8
  %139 = icmp eq i8* %138, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %136
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %138) #8
  br label %141

141:                                              ; preds = %140, %136
  %142 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %6, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  store i8* null, i8** %142, align 8
  %144 = icmp eq i8* %143, null
  br i1 %144, label %146, label %145

145:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %143) #8
  br label %146

146:                                              ; preds = %141, %145
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %131) #8
  %147 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %147) #8
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.std::__1::basic_stringbuf"* %33) #8
  %148 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 1, i32 0
  %149 = load i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)*, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %148, align 8
  %150 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %0, i64 0, i32 18, i32 0, i32 0
  %151 = call i32 %149(%"union.std::__1::__function::__policy_storage"* %150, %"class.jxl::CodecInOut"* nonnull dereferenceable(3416) %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #8
  %152 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %146
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  call void @_ZdlPv(i8* %158) #24
  br label %159

159:                                              ; preds = %146, %156
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %147) #8
  call void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 3416, i8* nonnull %75) #8
  %160 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %160, i64* %36, align 8
  %161 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %162 = inttoptr i64 %160 to i8*
  %163 = getelementptr i8, i8* %162, i64 -24
  %164 = bitcast i8* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds i8, i8* %28, i64 %165
  %167 = bitcast i8* %166 to i64*
  store i64 %161, i64* %167, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %168 = bitcast %"class.std::__1::basic_string"* %57 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %169 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %168, i64 0, i32 1, i32 0
  %170 = load i8, i8* %169, align 1
  %171 = icmp slt i8 %170, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %159
  %173 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load i8*, i8** %173, align 8
  call void @_ZdlPv(i8* %174) #24
  br label %175

175:                                              ; preds = %159, %172
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %34) #8
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %60, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #8
  %176 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %4, i64 0, i32 2
  %177 = bitcast %"class.std::__1::basic_ios.base"* %176 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %177) #8
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %28) #8
  br label %178

178:                                              ; preds = %24, %3, %175
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOutC2Ev(%"class.jxl::CodecInOut"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %3 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 0
  store i32 -1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 0, i32 2
  store i64 4294967295, i64* %5, align 8
  %6 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0
  %8 = bitcast %"class.jxl::DecoderHints"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 136, i1 false)
  tail call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* %7) #8
  %9 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  tail call void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"* %9) #8
  %10 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 2
  tail call void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"* %10) #8
  %11 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  %12 = bitcast %"class.jxl::ImageBundle"* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 1
  store i32 1, i32* %13, align 8
  %14 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %14) #8
  %15 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 4, i32 0
  %16 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 8
  %17 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #8
  %18 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 9
  %19 = bitcast i32* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 14, i1 false) #8
  store %"struct.jxl::ImageMetadata"* %7, %"struct.jxl::ImageMetadata"** %18, align 8
  %20 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #8
  %22 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #8
  %23 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12
  %24 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %25 = bitcast %"class.std::__1::vector.169"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 57, i1 false)
  tail call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.245"* %24, i64 1)
  %26 = bitcast %"struct.jxl::ImageMetadata"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #8
  store %"struct.jxl::ImageMetadata"* %7, %"struct.jxl::ImageMetadata"** %2, align 8
  %27 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %28 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %27, align 8
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %30 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %29, align 8
  %31 = icmp ult %"class.jxl::ImageBundle"* %28, %30
  br i1 %31, label %32, label %51

32:                                               ; preds = %1
  %33 = ptrtoint %"struct.jxl::ImageMetadata"* %7 to i64
  %34 = bitcast %"class.jxl::ImageBundle"* %28 to i64*
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 1
  store i32 1, i32* %35, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %36) #8
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 8
  %39 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #8
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 9
  %41 = bitcast i32* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 14, i1 false) #8
  %42 = bitcast %"struct.jxl::ImageMetadata"** %40 to i64*
  store i64 %33, i64* %42, align 8
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 10
  %44 = bitcast %"class.jxl::Image3"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 96, i1 false) #8
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %45) #8
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 0, i32 12
  %47 = bitcast %"class.std::__1::vector.169"* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 32, i1 false) #8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %28, i64 1
  %49 = ptrtoint %"class.jxl::ImageBundle"* %48 to i64
  %50 = bitcast %"class.jxl::ImageBundle"** %27 to i64*
  store i64 %49, i64* %50, align 8
  br label %52

51:                                               ; preds = %1
  call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.245"* %24, %"struct.jxl::ImageMetadata"** nonnull dereferenceable(8) %2) #8
  br label %52

52:                                               ; preds = %32, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #8
  ret void
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOut12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::CodecInOut"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %5 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %6 = bitcast %"class.jxl::ImageBundle"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.245"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  %11 = inttoptr i64 %9 to %"class.jxl::ImageBundle"*
  br i1 %10, label %23, label %12

12:                                               ; preds = %3
  %13 = sub i64 %7, %9
  %14 = sdiv exact i64 %13, 368
  br label %15

15:                                               ; preds = %20, %12
  %16 = phi i64 [ 0, %12 ], [ %21, %20 ]
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %16, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = add nuw i64 %16, 1
  %22 = icmp ult i64 %21, %14
  br i1 %22, label %15, label %23

23:                                               ; preds = %15, %20, %3
  %24 = phi i64 [ 0, %3 ], [ %16, %20 ], [ %16, %15 ]
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 %24
  tail call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %25, %"class.jxl::Image3"* dereferenceable(96) %1, %"struct.jxl::ColorEncoding"* dereferenceable(152) %2) #8
  tail call void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"* %0) #8
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %8, align 8
  %28 = icmp eq i64 %26, %27
  %29 = inttoptr i64 %27 to %"class.jxl::ImageBundle"*
  br i1 %28, label %41, label %30

30:                                               ; preds = %23
  %31 = sub i64 %26, %27
  %32 = sdiv exact i64 %31, 368
  br label %33

33:                                               ; preds = %38, %30
  %34 = phi i64 [ 0, %30 ], [ %39, %38 ]
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %34, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = add nuw i64 %34, 1
  %40 = icmp ult i64 %39, %32
  br i1 %40, label %33, label %41

41:                                               ; preds = %33, %38, %23
  %42 = phi i64 [ 0, %23 ], [ %34, %38 ], [ %34, %33 ]
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 0, i32 0, i32 0, i32 0
  %44 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %43, align 8
  %45 = icmp eq %"struct.jxl::jpeg::JPEGData"* %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %48 to i64
  br label %65

50:                                               ; preds = %41
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 10, i32 0, i64 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = zext i32 %52 to i64
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %55, label %65

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 0
  %57 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %56, align 8
  %58 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %42, i32 12, i32 0, i32 1
  %59 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %58, align 8
  %60 = icmp eq %"class.jxl::Plane.97"* %57, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %57, i64 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %46, %50, %55, %61
  %66 = phi i64 [ %49, %46 ], [ %64, %61 ], [ 0, %55 ], [ %53, %50 ]
  br i1 %28, label %78, label %67

67:                                               ; preds = %65
  %68 = sub i64 %26, %27
  %69 = sdiv exact i64 %68, 368
  br label %70

70:                                               ; preds = %75, %67
  %71 = phi i64 [ 0, %67 ], [ %76, %75 ]
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %71, i32 5
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = add nuw i64 %71, 1
  %77 = icmp ult i64 %76, %69
  br i1 %77, label %70, label %78

78:                                               ; preds = %70, %75, %65
  %79 = phi i64 [ 0, %65 ], [ %71, %75 ], [ %71, %70 ]
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 0, i32 0, i32 0, i32 0
  %81 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %80, align 8
  %82 = icmp eq %"struct.jxl::jpeg::JPEGData"* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %81, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  br label %102

87:                                               ; preds = %78
  %88 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 10, i32 0, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %92, label %102

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 0
  %94 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %29, i64 %79, i32 12, i32 0, i32 1
  %96 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %95, align 8
  %97 = icmp eq %"class.jxl::Plane.97"* %94, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %94, i64 0, i32 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  br label %102

102:                                              ; preds = %83, %87, %92, %98
  %103 = phi i64 [ %86, %83 ], [ %101, %98 ], [ 0, %92 ], [ %90, %87 ]
  %104 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 1
  %105 = tail call i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"* %104, i64 %66, i64 %103) #8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %110, label %107

107:                                              ; preds = %102
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.20, i64 0, i64 0), i32 158, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.21, i64 0, i64 0)) #8
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

110:                                              ; preds = %102
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl14ConvertToFloatIhEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* noalias sret, %"class.jxl::Image3.268"* dereferenceable(96)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.jxl::Plane.97", align 8
  %4 = alloca %"class.jxl::Plane.97", align 8
  %5 = alloca %"class.jxl::Plane.97", align 8
  %6 = bitcast %"class.jxl::Plane.97"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %3, i64 0, i32 0, i32 4
  %8 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false) #8, !alias.scope !367
  %10 = load i32, i32* %9, align 8, !noalias !367
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4, !noalias !367
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %15, i64 %11, i64 %14, i64 4) #8
  %16 = load i32, i32* %12, align 4, !noalias !367
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %61, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %21 = load i32, i32* %9, align 8, !noalias !367
  br label %22

22:                                               ; preds = %44, %18
  %23 = phi i32 [ %16, %18 ], [ %45, %44 ]
  %24 = phi i32 [ %21, %18 ], [ %46, %44 ]
  %25 = phi i64 [ 0, %18 ], [ %47, %44 ]
  %26 = load i8*, i8** %19, align 8, !noalias !367
  %27 = load i64, i64* %20, align 8, !noalias !367
  %28 = mul i64 %27, %25
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 63
  %32 = icmp eq i64 %31, 0
  call void @llvm.assume(i1 %32) #8
  %33 = load i8*, i8** %8, align 8, !alias.scope !367
  %34 = load i64, i64* %7, align 8, !alias.scope !367
  %35 = mul i64 %34, %25
  %36 = getelementptr inbounds i8, i8* %33, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  call void @llvm.assume(i1 %39) #8
  %40 = bitcast i8* %36 to float*
  %41 = icmp eq i32 %24, 0
  br i1 %41, label %44, label %50

42:                                               ; preds = %50
  %43 = load i32, i32* %12, align 4, !noalias !367
  br label %44

44:                                               ; preds = %42, %22
  %45 = phi i32 [ %43, %42 ], [ %23, %22 ]
  %46 = phi i32 [ %58, %42 ], [ 0, %22 ]
  %47 = add nuw nsw i64 %25, 1
  %48 = zext i32 %45 to i64
  %49 = icmp ult i64 %47, %48
  br i1 %49, label %22, label %61

50:                                               ; preds = %22, %50
  %51 = phi i64 [ %57, %50 ], [ 0, %22 ]
  %52 = getelementptr inbounds i8, i8* %29, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = uitofp i8 %53 to float
  %55 = fmul float %54, 0x3F70101020000000
  %56 = getelementptr inbounds float, float* %40, i64 %51
  store float %55, float* %56, align 4
  %57 = add nuw nsw i64 %51, 1
  %58 = load i32, i32* %9, align 8, !noalias !367
  %59 = zext i32 %58 to i64
  %60 = icmp ult i64 %57, %59
  br i1 %60, label %50, label %42

61:                                               ; preds = %44, %2
  %62 = bitcast %"class.jxl::Plane.97"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %62) #8
  %63 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %4, i64 0, i32 0, i32 4
  %64 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 -86, i64 32, i1 false) #8, !alias.scope !370
  %66 = load i32, i32* %65, align 8, !noalias !370
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 1, i32 0, i32 1
  %69 = load i32, i32* %68, align 4, !noalias !370
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %4, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %71, i64 %67, i64 %70, i64 4) #8
  %72 = load i32, i32* %68, align 4, !noalias !370
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %117, label %74

74:                                               ; preds = %61
  %75 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %77 = load i32, i32* %65, align 8, !noalias !370
  br label %78

78:                                               ; preds = %100, %74
  %79 = phi i32 [ %72, %74 ], [ %101, %100 ]
  %80 = phi i32 [ %77, %74 ], [ %102, %100 ]
  %81 = phi i64 [ 0, %74 ], [ %103, %100 ]
  %82 = load i8*, i8** %75, align 8, !noalias !370
  %83 = load i64, i64* %76, align 8, !noalias !370
  %84 = mul i64 %83, %81
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, 63
  %88 = icmp eq i64 %87, 0
  call void @llvm.assume(i1 %88) #8
  %89 = load i8*, i8** %64, align 8, !alias.scope !370
  %90 = load i64, i64* %63, align 8, !alias.scope !370
  %91 = mul i64 %90, %81
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  %93 = ptrtoint i8* %92 to i64
  %94 = and i64 %93, 63
  %95 = icmp eq i64 %94, 0
  call void @llvm.assume(i1 %95) #8
  %96 = bitcast i8* %92 to float*
  %97 = icmp eq i32 %80, 0
  br i1 %97, label %100, label %106

98:                                               ; preds = %106
  %99 = load i32, i32* %68, align 4, !noalias !370
  br label %100

100:                                              ; preds = %98, %78
  %101 = phi i32 [ %99, %98 ], [ %79, %78 ]
  %102 = phi i32 [ %114, %98 ], [ 0, %78 ]
  %103 = add nuw nsw i64 %81, 1
  %104 = zext i32 %101 to i64
  %105 = icmp ult i64 %103, %104
  br i1 %105, label %78, label %117

106:                                              ; preds = %78, %106
  %107 = phi i64 [ %113, %106 ], [ 0, %78 ]
  %108 = getelementptr inbounds i8, i8* %85, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = uitofp i8 %109 to float
  %111 = fmul float %110, 0x3F70101020000000
  %112 = getelementptr inbounds float, float* %96, i64 %107
  store float %111, float* %112, align 4
  %113 = add nuw nsw i64 %107, 1
  %114 = load i32, i32* %65, align 8, !noalias !370
  %115 = zext i32 %114 to i64
  %116 = icmp ult i64 %113, %115
  br i1 %116, label %106, label %98

117:                                              ; preds = %100, %61
  %118 = bitcast %"class.jxl::Plane.97"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %118) #8
  %119 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %5, i64 0, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 -86, i64 32, i1 false) #8, !alias.scope !373
  %122 = load i32, i32* %121, align 8, !noalias !373
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 2, i32 0, i32 1
  %125 = load i32, i32* %124, align 4, !noalias !373
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %5, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %127, i64 %123, i64 %126, i64 4) #8
  %128 = load i32, i32* %124, align 4, !noalias !373
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %173, label %130

130:                                              ; preds = %117
  %131 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = getelementptr inbounds %"class.jxl::Image3.268", %"class.jxl::Image3.268"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %133 = load i32, i32* %121, align 8, !noalias !373
  br label %134

134:                                              ; preds = %156, %130
  %135 = phi i32 [ %128, %130 ], [ %157, %156 ]
  %136 = phi i32 [ %133, %130 ], [ %158, %156 ]
  %137 = phi i64 [ 0, %130 ], [ %159, %156 ]
  %138 = load i8*, i8** %131, align 8, !noalias !373
  %139 = load i64, i64* %132, align 8, !noalias !373
  %140 = mul i64 %139, %137
  %141 = getelementptr inbounds i8, i8* %138, i64 %140
  %142 = ptrtoint i8* %141 to i64
  %143 = and i64 %142, 63
  %144 = icmp eq i64 %143, 0
  call void @llvm.assume(i1 %144) #8
  %145 = load i8*, i8** %120, align 8, !alias.scope !373
  %146 = load i64, i64* %119, align 8, !alias.scope !373
  %147 = mul i64 %146, %137
  %148 = getelementptr inbounds i8, i8* %145, i64 %147
  %149 = ptrtoint i8* %148 to i64
  %150 = and i64 %149, 63
  %151 = icmp eq i64 %150, 0
  call void @llvm.assume(i1 %151) #8
  %152 = bitcast i8* %148 to float*
  %153 = icmp eq i32 %136, 0
  br i1 %153, label %156, label %162

154:                                              ; preds = %162
  %155 = load i32, i32* %124, align 4, !noalias !373
  br label %156

156:                                              ; preds = %154, %134
  %157 = phi i32 [ %155, %154 ], [ %135, %134 ]
  %158 = phi i32 [ %170, %154 ], [ 0, %134 ]
  %159 = add nuw nsw i64 %137, 1
  %160 = zext i32 %157 to i64
  %161 = icmp ult i64 %159, %160
  br i1 %161, label %134, label %173

162:                                              ; preds = %134, %162
  %163 = phi i64 [ %169, %162 ], [ 0, %134 ]
  %164 = getelementptr inbounds i8, i8* %141, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = uitofp i8 %165 to float
  %167 = fmul float %166, 0x3F70101020000000
  %168 = getelementptr inbounds float, float* %152, i64 %163
  store float %167, float* %168, align 4
  %169 = add nuw nsw i64 %163, 1
  %170 = load i32, i32* %121, align 8, !noalias !373
  %171 = zext i32 %170 to i64
  %172 = icmp ult i64 %169, %171
  br i1 %172, label %162, label %154

173:                                              ; preds = %156, %117
  call void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"* %0, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %3, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %4, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %5)
  %174 = load i8*, i8** %120, align 8
  store i8* null, i8** %120, align 8
  %175 = icmp eq i8* %174, null
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %174) #8
  br label %177

177:                                              ; preds = %173, %176
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %118) #8
  %178 = load i8*, i8** %64, align 8
  store i8* null, i8** %64, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %177
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %178) #8
  br label %181

181:                                              ; preds = %177, %180
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #8
  %182 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %183 = icmp eq i8* %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %181
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %182) #8
  br label %185

185:                                              ; preds = %181, %184
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10CodecInOutD2Ev(%"class.jxl::CodecInOut"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8
  %3 = getelementptr inbounds %"class.std::__1::vector.245", %"class.std::__1::vector.245"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %5 = icmp eq %"class.jxl::ImageBundle"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::ImageBundle"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %9 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %8, align 8
  %10 = icmp eq %"class.jxl::ImageBundle"* %9, %4
  br i1 %10, label %18, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"class.jxl::ImageBundle"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %12, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %13) #8
  %14 = icmp eq %"class.jxl::ImageBundle"* %13, %4
  br i1 %14, label %15, label %11

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.245"* %2 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %6
  %19 = phi i8* [ %17, %15 ], [ %7, %6 ]
  store %"class.jxl::ImageBundle"* %4, %"class.jxl::ImageBundle"** %8, align 8
  tail call void @_ZdlPv(i8* %19) #24
  br label %20

20:                                               ; preds = %1, %18
  %21 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %21) #8
  %22 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 17
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %23, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %20
  %28 = bitcast %"struct.jxl::ExtraChannelInfo"* %25 to i8*
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 17, i32 0, i32 1
  %30 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %29, align 8
  %31 = icmp eq %"struct.jxl::ExtraChannelInfo"* %30, %25
  br i1 %31, label %42, label %32

32:                                               ; preds = %27, %32
  %33 = phi %"struct.jxl::ExtraChannelInfo"* [ %34, %32 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 -1
  %35 = bitcast %"struct.jxl::ExtraChannelInfo"* %34 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %36 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %35, align 8
  %37 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %36, align 8
  tail call void %37(%"struct.jxl::ExtraChannelInfo"* %34) #8
  %38 = icmp eq %"struct.jxl::ExtraChannelInfo"* %34, %25
  br i1 %38, label %39, label %32

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector"* %23 to i8**
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %39, %27
  %43 = phi i8* [ %41, %39 ], [ %28, %27 ]
  store %"struct.jxl::ExtraChannelInfo"* %25, %"struct.jxl::ExtraChannelInfo"** %29, align 8
  tail call void @_ZdlPv(i8* %43) #24
  br label %44

44:                                               ; preds = %42, %20
  %45 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %45, align 8
  %46 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  store i8* null, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %44
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %47) #8
  br label %50

50:                                               ; preds = %44, %49
  %51 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 3, i32 2, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8* null, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %52) #8
  br label %55

55:                                               ; preds = %54, %50
  %56 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 2, i32 2, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  store i8* null, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %55
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %57) #8
  br label %60

60:                                               ; preds = %59, %55
  %61 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 1, i32 2, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  store i8* null, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %62) #8
  br label %65

65:                                               ; preds = %64, %60
  %66 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #8
  br label %70

70:                                               ; preds = %65, %69
  %71 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1
  %72 = getelementptr inbounds %"class.jxl::DecoderHints", %"class.jxl::DecoderHints"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = load %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"** %72, align 8
  %74 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %73, null
  br i1 %74, label %106, label %75

75:                                               ; preds = %70
  %76 = bitcast %"struct.jxl::DecoderHints::KeyValue"* %73 to i8*
  %77 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %78 = load %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"** %77, align 8
  %79 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %78, %73
  br i1 %79, label %104, label %80

80:                                               ; preds = %75, %99
  %81 = phi %"struct.jxl::DecoderHints::KeyValue"* [ %82, %99 ], [ %78, %75 ]
  %82 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %81, i64 -1
  %83 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %81, i64 -1, i32 1
  %84 = bitcast %"class.std::__1::basic_string"* %83 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %85 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %84, i64 0, i32 1, i32 0
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %80
  %89 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  tail call void @_ZdlPv(i8* %90) #24
  br label %91

91:                                               ; preds = %88, %80
  %92 = bitcast %"struct.jxl::DecoderHints::KeyValue"* %82 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"struct.jxl::DecoderHints::KeyValue", %"struct.jxl::DecoderHints::KeyValue"* %82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  tail call void @_ZdlPv(i8* %98) #24
  br label %99

99:                                               ; preds = %96, %91
  %100 = icmp eq %"struct.jxl::DecoderHints::KeyValue"* %82, %73
  br i1 %100, label %101, label %80

101:                                              ; preds = %99
  %102 = bitcast %"class.jxl::DecoderHints"* %71 to i8**
  %103 = load i8*, i8** %102, align 8
  br label %104

104:                                              ; preds = %101, %75
  %105 = phi i8* [ %103, %101 ], [ %76, %75 ]
  store %"struct.jxl::DecoderHints::KeyValue"* %73, %"struct.jxl::DecoderHints::KeyValue"** %77, align 8
  tail call void @_ZdlPv(i8* %105) #24
  br label %106

106:                                              ; preds = %70, %104
  ret void
}

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #5

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #8
  %7 = load i8, i8* %6, align 8, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #8
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #8
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #8
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #8
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #8
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #24
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #8
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #8
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #24
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #8
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #8
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #13

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #14

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #15

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #13

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #16

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.245"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.245", %"class.std::__1::vector.245"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.245"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::ImageBundle"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.245", %"class.std::__1::vector.245"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::ImageBundle"** %13 to i64*
  %15 = icmp ugt i64 %1, 50127021939428129
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #25
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 368
  %21 = mul i64 %1, 368
  %22 = tail call i8* @_Znwm(i64 %21) #24
  %23 = bitcast i8* %22 to %"class.jxl::ImageBundle"*
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::ImageBundle"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::ImageBundle"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::ImageBundle"*
  %29 = icmp eq %"class.jxl::ImageBundle"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.jxl::ImageBundle"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.jxl::ImageBundle"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %31, i64 -1
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %32, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %33, %"class.jxl::ImageBundle"* dereferenceable(368) %34) #8
  %35 = icmp eq %"class.jxl::ImageBundle"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.jxl::ImageBundle"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.jxl::ImageBundle"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.jxl::ImageBundle"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.jxl::ImageBundle"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.jxl::ImageBundle"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.jxl::ImageBundle"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %48, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %49) #8
  %50 = icmp eq %"class.jxl::ImageBundle"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #24
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #5

declare void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"*) unnamed_addr #5

declare void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #5

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #5

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %13 = bitcast [3 x i32]* %11 to i8*
  %14 = bitcast [3 x i32]* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 14, i1 false) #8
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %17 = bitcast %"struct.jxl::FrameOrigin"* %15 to i8*
  %18 = bitcast %"struct.jxl::FrameOrigin"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 14, i1 false)
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %21 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #8
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %25 = bitcast %"struct.jxl::ImageMetadata"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"struct.jxl::ImageMetadata"** %23 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %30 = bitcast %"class.jxl::Image3"* %28 to i8*
  %31 = bitcast %"class.jxl::Image3"* %29 to i8*
  %32 = getelementptr %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #8
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %2
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #8
  br label %43

43:                                               ; preds = %42, %2
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %46 = bitcast %"class.jxl::Plane.97"* %45 to i8*
  %47 = bitcast %"class.jxl::Plane.97"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #8
  br label %58

58:                                               ; preds = %57, %43
  %59 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %61 = bitcast %"class.jxl::Plane.97"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane.97"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #8
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #8
  br label %73

73:                                               ; preds = %58, %72
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #8
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #8
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %83 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %84 = bitcast i32* %82 to i8*
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 6, i1 false) #8
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %87 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %88 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %86, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast %"class.jxl::PaddedBytes"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #8
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %106 = bitcast i32* %105 to i64*
  %107 = bitcast i32* %104 to i64*
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %112 = bitcast i32* %111 to i64*
  %113 = bitcast i32* %110 to i64*
  %114 = load i64, i64* %112, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %129 = bitcast %"class.std::__1::vector.169"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #8
  %130 = bitcast %"class.std::__1::vector.169"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.169"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %134 = bitcast %"class.jxl::Plane.97"** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %137 = bitcast %"class.jxl::Plane.97"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane.97"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"class.jxl::Plane.97"** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.169"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #8
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  %145 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %144, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #17

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane.97"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane.97"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane.97"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane.97"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #8
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane.97"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.169"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane.97"* %4, %"class.jxl::Plane.97"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #24
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #8
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #8
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #8
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #8
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #24
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #8
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.245"*, %"struct.jxl::ImageMetadata"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.245", %"class.std::__1::vector.245"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.245"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 50127021939428129
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.245"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #25
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.245", %"class.std::__1::vector.245"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::ImageBundle"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 368
  %20 = icmp ult i64 %19, 25063510969714064
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 50127021939428129, %14 ]
  %28 = mul i64 %27, 368
  %29 = tail call i8* @_Znwm(i64 %28) #24
  %30 = bitcast i8* %29 to %"class.jxl::ImageBundle"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::ImageBundle"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::ImageBundle"* %35 to i64
  %37 = bitcast %"struct.jxl::ImageMetadata"** %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.jxl::ImageBundle"* %34 to i64*
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 1
  store i32 1, i32* %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %41) #8
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 4, i32 0
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 8
  %44 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #8
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 9
  %46 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 14, i1 false) #8
  %47 = bitcast %"struct.jxl::ImageMetadata"** %45 to i64*
  store i64 %38, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 10
  %49 = bitcast %"class.jxl::Image3"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 96, i1 false) #8
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %50) #8
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 12
  %52 = bitcast %"class.std::__1::vector.169"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 32, i1 false) #8
  %53 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 1
  %54 = ptrtoint %"class.jxl::ImageBundle"* %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.245", %"class.std::__1::vector.245"* %0, i64 0, i32 0, i32 0
  %56 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %55, align 8
  %57 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %58 = icmp eq %"class.jxl::ImageBundle"* %57, %56
  br i1 %58, label %59, label %61

59:                                               ; preds = %31
  %60 = ptrtoint %"class.jxl::ImageBundle"* %56 to i64
  br label %70

61:                                               ; preds = %31, %61
  %62 = phi %"class.jxl::ImageBundle"* [ %64, %61 ], [ %34, %31 ]
  %63 = phi %"class.jxl::ImageBundle"* [ %65, %61 ], [ %57, %31 ]
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %62, i64 -1
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %63, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %64, %"class.jxl::ImageBundle"* dereferenceable(368) %65) #8
  %66 = icmp eq %"class.jxl::ImageBundle"* %65, %56
  br i1 %66, label %67, label %61

67:                                               ; preds = %61
  %68 = load i64, i64* %6, align 8
  %69 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  br label %70

70:                                               ; preds = %59, %67
  %71 = phi %"class.jxl::ImageBundle"* [ %56, %59 ], [ %69, %67 ]
  %72 = phi %"class.jxl::ImageBundle"* [ %34, %59 ], [ %64, %67 ]
  %73 = phi i64 [ %60, %59 ], [ %68, %67 ]
  %74 = ptrtoint %"class.jxl::ImageBundle"* %72 to i64
  store i64 %74, i64* %6, align 8
  store i64 %54, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %75 = inttoptr i64 %73 to %"class.jxl::ImageBundle"*
  %76 = icmp eq %"class.jxl::ImageBundle"* %71, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %70, %77
  %78 = phi %"class.jxl::ImageBundle"* [ %79, %77 ], [ %71, %70 ]
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %78, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %79) #8
  %80 = icmp eq %"class.jxl::ImageBundle"* %79, %75
  br i1 %80, label %81, label %77

81:                                               ; preds = %77, %70
  %82 = icmp eq i64 %73, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = inttoptr i64 %73 to i8*
  tail call void @_ZdlPv(i8* %84) #24
  br label %85

85:                                               ; preds = %81, %83
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #5

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #5

declare void @_ZN3jxl18SetIntensityTargetEPNS_10CodecInOutE(%"class.jxl::CodecInOut"*) local_unnamed_addr #5

declare i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"*, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"*, %"class.jxl::Plane.97"* dereferenceable(32), %"class.jxl::Plane.97"* dereferenceable(32), %"class.jxl::Plane.97"* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.jxl::Image3"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 96, i1 false)
  %6 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %4, %11
  %18 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 343, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0)) #8
  %19 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %3, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %7, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %3, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %13, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %20, %24
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0)) #8
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

31:                                               ; preds = %24
  %32 = bitcast %"class.jxl::Plane.97"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %32, i64 24, i1 false) #8
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #8
  br label %43

43:                                               ; preds = %31, %42
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1
  %45 = bitcast %"class.jxl::Plane.97"* %44 to i8*
  %46 = bitcast %"class.jxl::Plane.97"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5
  %48 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %2, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i8* null, i8** %49, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %47, i64 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = bitcast %"class.std::__1::unique_ptr"* %47 to i64*
  store i64 %51, i64* %54, align 8
  %55 = icmp eq i8* %53, null
  br i1 %55, label %57, label %56

56:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %53) #8
  br label %57

57:                                               ; preds = %43, %56
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2
  %59 = bitcast %"class.jxl::Plane.97"* %58 to i8*
  %60 = bitcast %"class.jxl::Plane.97"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #8
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %3, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %57
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #8
  br label %71

71:                                               ; preds = %57, %70
  ret void
}

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #13

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #13

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_8E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_8E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.261**
  %6 = load %class.anon.261*, %class.anon.261** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_8clEmm"(%class.anon.261* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX312_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_8clEmm"(%class.anon.261* nocapture readonly, i64) unnamed_addr #18 align 2 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = urem i64 %1, %6
  %8 = udiv i64 %1, %6
  %9 = shl i64 %7, 3
  %10 = and i64 %9, 2305843009213693944
  %11 = add nuw nsw i64 %10, 8
  %12 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 1
  %13 = bitcast %"class.jxl::Plane.97"** %12 to %"struct.jxl::PlaneBase"**
  %14 = load %"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"** %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = icmp ugt i64 %11, %17
  %19 = select i1 %18, i64 %17, i64 %11
  %20 = shl i64 %8, 3
  %21 = and i64 %20, 2305843009213693944
  %22 = add nuw nsw i64 %21, 8
  %23 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = icmp ugt i64 %22, %25
  %27 = select i1 %26, i64 %25, i64 %22
  %28 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 2
  %31 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 2
  %32 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %32, i64 0, i32 7, i32 0, i32 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 64, i1 false)
  %36 = icmp ult i64 %21, %27
  br i1 %36, label %37, label %47

37:                                               ; preds = %2
  %38 = bitcast %"struct.jxl::PlaneBase"* %14 to %"class.jxl::Plane.97"*
  %39 = icmp ult i64 %10, %19
  %40 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 3
  %41 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 4
  %42 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 5
  %43 = getelementptr inbounds %class.anon.261, %class.anon.261* %0, i64 0, i32 6
  %44 = shl i64 %7, 4
  %45 = and i64 %44, 4611686018427387888
  %46 = xor i64 %45, -1
  br label %48

47:                                               ; preds = %75, %2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #8
  ret void

48:                                               ; preds = %78, %37
  %49 = phi i64 [ %29, %37 ], [ %84, %78 ]
  %50 = phi %"class.jxl::Plane.97"* [ %38, %37 ], [ %82, %78 ]
  %51 = phi i64 [ %34, %37 ], [ %81, %78 ]
  %52 = phi %"struct.jxl::PassesSharedState"* [ %32, %37 ], [ %79, %78 ]
  %53 = phi i64 [ %21, %37 ], [ %76, %78 ]
  %54 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %52, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = mul i64 %51, %53
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %50, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = mul i64 %49, %53
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #8
  %68 = bitcast i8* %64 to float*
  br i1 %39, label %69, label %75

69:                                               ; preds = %48
  %70 = sub i64 %53, %20
  %71 = shl i64 %70, 3
  %72 = sub i64 %71, %10
  %73 = shl i64 %53, 1
  %74 = add nuw i64 %53, 1
  br label %85

75:                                               ; preds = %322, %48
  %76 = add nuw i64 %53, 1
  %77 = icmp ult i64 %76, %27
  br i1 %77, label %78, label %47

78:                                               ; preds = %75
  %79 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %80 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %79, i64 0, i32 7, i32 0, i32 4
  %81 = load i64, i64* %80, align 8
  %82 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %12, align 8
  %83 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %82, i64 0, i32 0, i32 4
  %84 = load i64, i64* %83, align 8
  br label %48

85:                                               ; preds = %69, %322
  %86 = phi i64 [ 0, %69 ], [ %325, %322 ]
  %87 = phi i64 [ %10, %69 ], [ %323, %322 ]
  %88 = mul i64 %86, -2
  %89 = add i64 %72, %87
  %90 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1, !range !3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %322

93:                                               ; preds = %85
  %94 = load float*, float** %40, align 8
  %95 = load float, float* %94, align 4
  %96 = load [18 x %"struct.std::__1::pair.260"]*, [18 x %"struct.std::__1::pair.260"]** %41, align 8
  %97 = shl i64 %87, 1
  %98 = add i64 %88, %46
  br label %114

99:                                               ; preds = %263
  %100 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %101 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %100, i64 0, i32 3
  tail call void @_ZN3jxl15AcStrategyImage3SetEmmNS_10AcStrategy4TypeE(%"class.jxl::AcStrategyImage"* %101, i64 %87, i64 %53, i32 %264)
  %102 = zext i32 %264 to i64
  %103 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = add i64 %53, %105
  %107 = icmp ult i64 %53, %106
  br i1 %107, label %108, label %322

108:                                              ; preds = %99
  %109 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %102
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = add i64 %87, %111
  %113 = icmp ult i64 %87, %112
  br label %291

114:                                              ; preds = %263, %93
  %115 = phi i64 [ 0, %93 ], [ %267, %263 ]
  %116 = phi float [ %95, %93 ], [ %266, %263 ]
  %117 = phi i64 [ 1, %93 ], [ %265, %263 ]
  %118 = phi i32 [ 0, %93 ], [ %264, %263 ]
  %119 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %96, i64 0, i64 %115, i32 0
  %120 = load i32, i32* %119, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = add i64 %53, %124
  %126 = icmp ugt i64 %125, %27
  br i1 %126, label %263, label %127

127:                                              ; preds = %114
  %128 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %121
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = add i64 %87, %130
  %132 = icmp ugt i64 %131, %19
  br i1 %132, label %263, label %133

133:                                              ; preds = %127
  %134 = icmp ult i64 %53, %125
  br i1 %134, label %135, label %159

135:                                              ; preds = %133
  %136 = icmp ult i64 %87, %131
  br label %137

137:                                              ; preds = %155, %135
  %138 = phi i64 [ %53, %135 ], [ %157, %155 ]
  %139 = phi i8 [ 1, %135 ], [ %156, %155 ]
  %140 = sub i64 %138, %20
  %141 = shl i64 %140, 3
  %142 = sub i64 %141, %10
  br i1 %136, label %148, label %155

143:                                              ; preds = %155
  %144 = and i8 %156, 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %263, label %159

146:                                              ; preds = %148
  %147 = icmp eq i64 %154, %131
  br i1 %147, label %155, label %148

148:                                              ; preds = %137, %146
  %149 = phi i64 [ %154, %146 ], [ %87, %137 ]
  %150 = add i64 %142, %149
  %151 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1, !range !3
  %153 = icmp eq i8 %152, 0
  %154 = add i64 %149, 1
  br i1 %153, label %146, label %155

155:                                              ; preds = %148, %146, %137
  %156 = phi i8 [ %139, %137 ], [ 0, %148 ], [ %139, %146 ]
  %157 = add nuw i64 %138, 1
  %158 = icmp eq i64 %157, %125
  br i1 %158, label %143, label %137

159:                                              ; preds = %133, %143
  %160 = shl i64 %125, 1
  %161 = icmp ult i64 %73, %160
  br i1 %161, label %162, label %246

162:                                              ; preds = %159
  %163 = load %class.anon.259*, %class.anon.259** %42, align 8
  %164 = getelementptr inbounds %class.anon.259, %class.anon.259* %163, i64 0, i32 0
  %165 = shl i64 %131, 1
  %166 = icmp ult i64 %97, %165
  %167 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %164, align 8
  %168 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %167, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  %170 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %167, i64 0, i32 0, i32 4
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %88, %165
  %173 = add i64 %98, %165
  %174 = and i64 %172, 2
  %175 = icmp eq i64 %174, 0
  %176 = icmp ult i64 %173, 3
  br label %177

177:                                              ; preds = %208, %162
  %178 = phi float [ 1.000000e+10, %162 ], [ %209, %208 ]
  %179 = phi float [ 0.000000e+00, %162 ], [ %210, %208 ]
  %180 = phi i64 [ %73, %162 ], [ %211, %208 ]
  %181 = mul i64 %171, %180
  %182 = getelementptr inbounds i8, i8* %169, i64 %181
  %183 = ptrtoint i8* %182 to i64
  %184 = and i64 %183, 63
  %185 = icmp eq i64 %184, 0
  tail call void @llvm.assume(i1 %185) #8
  %186 = bitcast i8* %182 to float*
  br i1 %166, label %187, label %208

187:                                              ; preds = %177
  br i1 %175, label %202, label %188

188:                                              ; preds = %187, %188
  %189 = phi float [ %196, %188 ], [ %178, %187 ]
  %190 = phi float [ %198, %188 ], [ %179, %187 ]
  %191 = phi i64 [ %199, %188 ], [ %97, %187 ]
  %192 = phi i64 [ %200, %188 ], [ %174, %187 ]
  %193 = getelementptr inbounds float, float* %186, i64 %191
  %194 = load float, float* %193, align 4
  %195 = fcmp olt float %194, %189
  %196 = select i1 %195, float %194, float %189
  %197 = fcmp olt float %190, %194
  %198 = select i1 %197, float %194, float %190
  %199 = add nuw i64 %191, 1
  %200 = add i64 %192, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %188, !llvm.loop !376

202:                                              ; preds = %188, %187
  %203 = phi float [ %178, %187 ], [ %196, %188 ]
  %204 = phi float [ %179, %187 ], [ %198, %188 ]
  %205 = phi i64 [ %97, %187 ], [ %199, %188 ]
  %206 = phi float [ undef, %187 ], [ %196, %188 ]
  %207 = phi float [ undef, %187 ], [ %198, %188 ]
  br i1 %176, label %208, label %213

208:                                              ; preds = %202, %213, %177
  %209 = phi float [ %178, %177 ], [ %206, %202 ], [ %241, %213 ]
  %210 = phi float [ %179, %177 ], [ %207, %202 ], [ %243, %213 ]
  %211 = add nuw i64 %180, 1
  %212 = icmp ult i64 %211, %160
  br i1 %212, label %177, label %246

213:                                              ; preds = %202, %213
  %214 = phi float [ %241, %213 ], [ %203, %202 ]
  %215 = phi float [ %243, %213 ], [ %204, %202 ]
  %216 = phi i64 [ %244, %213 ], [ %205, %202 ]
  %217 = getelementptr inbounds float, float* %186, i64 %216
  %218 = load float, float* %217, align 4
  %219 = fcmp olt float %218, %214
  %220 = select i1 %219, float %218, float %214
  %221 = fcmp olt float %215, %218
  %222 = select i1 %221, float %218, float %215
  %223 = add nuw i64 %216, 1
  %224 = getelementptr inbounds float, float* %186, i64 %223
  %225 = load float, float* %224, align 4
  %226 = fcmp olt float %225, %220
  %227 = select i1 %226, float %225, float %220
  %228 = fcmp olt float %222, %225
  %229 = select i1 %228, float %225, float %222
  %230 = add nuw i64 %216, 2
  %231 = getelementptr inbounds float, float* %186, i64 %230
  %232 = load float, float* %231, align 4
  %233 = fcmp olt float %232, %227
  %234 = select i1 %233, float %232, float %227
  %235 = fcmp olt float %229, %232
  %236 = select i1 %235, float %232, float %229
  %237 = add nuw i64 %216, 3
  %238 = getelementptr inbounds float, float* %186, i64 %237
  %239 = load float, float* %238, align 4
  %240 = fcmp olt float %239, %234
  %241 = select i1 %240, float %239, float %234
  %242 = fcmp olt float %236, %239
  %243 = select i1 %242, float %239, float %236
  %244 = add nuw i64 %216, 4
  %245 = icmp ult i64 %244, %165
  br i1 %245, label %213, label %208

246:                                              ; preds = %208, %159
  %247 = phi float [ 1.000000e+10, %159 ], [ %209, %208 ]
  %248 = phi float [ 0.000000e+00, %159 ], [ %210, %208 ]
  %249 = fsub float %248, %247
  %250 = load float*, float** %43, align 8
  %251 = load float, float* %250, align 4
  %252 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %96, i64 0, i64 %115, i32 1
  %253 = load float, float* %252, align 4
  %254 = fmul float %251, %253
  %255 = fcmp ogt float %249, %254
  br i1 %255, label %263, label %256

256:                                              ; preds = %246
  %257 = mul nuw nsw i64 %130, %124
  %258 = icmp ult i64 %257, %117
  br i1 %258, label %263, label %259

259:                                              ; preds = %256
  %260 = fmul float %247, 0x4004CF2460000000
  %261 = fadd float %260, 0x400F734AA0000000
  %262 = fdiv float %95, %261
  br label %263

263:                                              ; preds = %246, %256, %259, %143, %127, %114
  %264 = phi i32 [ %118, %114 ], [ %118, %127 ], [ %118, %143 ], [ %118, %246 ], [ %120, %259 ], [ %118, %256 ]
  %265 = phi i64 [ %117, %114 ], [ %117, %127 ], [ %117, %143 ], [ %117, %246 ], [ %257, %259 ], [ %117, %256 ]
  %266 = phi float [ %116, %114 ], [ %116, %127 ], [ %116, %143 ], [ %116, %246 ], [ %262, %259 ], [ %116, %256 ]
  %267 = add nuw nsw i64 %115, 1
  %268 = icmp eq i64 %267, 18
  br i1 %268, label %99, label %114

269:                                              ; preds = %299
  br i1 %107, label %270, label %322

270:                                              ; preds = %269
  %271 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %102
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i64
  %274 = add i64 %87, %273
  %275 = icmp ult i64 %87, %274
  %276 = and i64 %105, 1
  %277 = icmp eq i64 %276, 0
  %278 = xor i1 %275, true
  %279 = or i1 %277, %278
  %280 = select i1 %277, i64 %53, i64 %74
  br i1 %279, label %286, label %281

281:                                              ; preds = %270, %281
  %282 = phi i64 [ %284, %281 ], [ %87, %270 ]
  %283 = getelementptr inbounds i8, i8* %57, i64 %282
  store i8 4, i8* %283, align 1
  %284 = add nuw i64 %282, 1
  %285 = icmp ult i64 %284, %274
  br i1 %285, label %281, label %286, !llvm.loop !377

286:                                              ; preds = %270, %281
  %287 = phi i64 [ %280, %270 ], [ %74, %281 ]
  %288 = lshr i64 258703, %102
  %289 = and i64 %288, 1
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %310, label %322

291:                                              ; preds = %108, %299
  %292 = phi i64 [ %53, %108 ], [ %300, %299 ]
  br i1 %113, label %293, label %299

293:                                              ; preds = %291
  %294 = sub i64 %292, %20
  %295 = shl i64 %294, 3
  %296 = sub i64 %295, %10
  %297 = sub nuw i64 %292, %53
  %298 = mul i64 %297, %30
  br label %302

299:                                              ; preds = %302, %291
  %300 = add nuw i64 %292, 1
  %301 = icmp ult i64 %300, %106
  br i1 %301, label %291, label %269

302:                                              ; preds = %293, %302
  %303 = phi i64 [ %87, %293 ], [ %308, %302 ]
  %304 = add i64 %296, %303
  %305 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %304
  store i8 1, i8* %305, align 1
  %306 = add i64 %303, %298
  %307 = getelementptr inbounds float, float* %68, i64 %306
  store float %266, float* %307, align 4
  %308 = add nuw i64 %303, 1
  %309 = icmp ult i64 %308, %112
  br i1 %309, label %302, label %299, !llvm.loop !378

310:                                              ; preds = %286, %336
  %311 = phi i64 [ %337, %336 ], [ %287, %286 ]
  br i1 %275, label %312, label %336

312:                                              ; preds = %310
  %313 = sub nuw i64 %311, %53
  %314 = mul i64 %313, %34
  br label %316

315:                                              ; preds = %316
  br i1 %275, label %326, label %336

316:                                              ; preds = %312, %316
  %317 = phi i64 [ %87, %312 ], [ %320, %316 ]
  %318 = add i64 %317, %314
  %319 = getelementptr inbounds i8, i8* %57, i64 %318
  store i8 4, i8* %319, align 1
  %320 = add nuw i64 %317, 1
  %321 = icmp ult i64 %320, %274
  br i1 %321, label %316, label %315, !llvm.loop !377

322:                                              ; preds = %286, %336, %99, %269, %85
  %323 = add nuw i64 %87, 1
  %324 = icmp ult i64 %323, %19
  %325 = add i64 %86, 1
  br i1 %324, label %85, label %75

326:                                              ; preds = %315
  %327 = add nuw i64 %311, 1
  %328 = sub nuw i64 %327, %53
  %329 = mul i64 %328, %34
  br label %330

330:                                              ; preds = %330, %326
  %331 = phi i64 [ %87, %326 ], [ %334, %330 ]
  %332 = add i64 %331, %329
  %333 = getelementptr inbounds i8, i8* %57, i64 %332
  store i8 4, i8* %333, align 1
  %334 = add nuw i64 %331, 1
  %335 = icmp ult i64 %334, %274
  br i1 %335, label %330, label %336, !llvm.loop !377

336:                                              ; preds = %310, %330, %315
  %337 = add nuw i64 %311, 2
  %338 = icmp ult i64 %337, %106
  br i1 %338, label %310, label %322
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15AcStrategyImage3SetEmmNS_10AcStrategy4TypeE(%"class.jxl::AcStrategyImage"*, i64, i64, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = zext i32 %3 to i64
  %6 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = add i64 %8, %2
  %10 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = icmp ugt i64 %9, %12
  br i1 %13, label %14, label %17

14:                                               ; preds = %4
  %15 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.24, i64 0, i64 0), i32 245, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.25, i64 0, i64 0)) #8
  %16 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

17:                                               ; preds = %4
  %18 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %5
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %0, i64 0, i32 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = zext i32 %23 to i64
  %25 = icmp ugt i64 %21, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %17
  %27 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.24, i64 0, i64 0), i32 246, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.26, i64 0, i64 0)) #8
  %28 = tail call zeroext i1 @_ZN3jxl5AbortEv() #25
  unreachable

29:                                               ; preds = %17
  %30 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %0, i64 0, i32 2
  %31 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %0, i64 0, i32 1
  %32 = shl i32 %3, 1
  br label %33

33:                                               ; preds = %51, %29
  %34 = phi i64 [ 0, %29 ], [ %52, %51 ]
  %35 = add i64 %34, %2
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ 0, %33 ], [ %49, %36 ]
  %38 = load i64, i64* %30, align 8
  %39 = mul i64 %38, %35
  %40 = add i64 %37, %1
  %41 = add i64 %40, %39
  %42 = load i8*, i8** %31, align 8
  %43 = or i64 %37, %34
  %44 = icmp eq i64 %43, 0
  %45 = zext i1 %44 to i32
  %46 = or i32 %32, %45
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, i8* %42, i64 %41
  store i8 %47, i8* %48, align 1
  %49 = add nuw nsw i64 %37, 1
  %50 = icmp ult i64 %49, %20
  br i1 %50, label %36, label %51

51:                                               ; preds = %36
  %52 = add nuw nsw i64 %34, 1
  %53 = icmp ult i64 %52, %8
  br i1 %53, label %33, label %54

54:                                               ; preds = %51
  ret void
}

declare void @_ZN3hwy14AlignedDeleter18DeleteAlignedArrayEPvPFvS1_S1_ES1_PFvS1_mE(i8*, void (i8*, i8*)*, i8*, void (i8*, i64)*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hwy14AlignedDeleter17TypedArrayDeleterIN3jxl17RecursiveGaussianEEEvPvm(i8*, i64) #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.273**
  %6 = load %class.anon.273*, %class.anon.273** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_3clEmm"(%class.anon.273* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_3clEmm"(%class.anon.273* nocapture readonly, i64) unnamed_addr #19 align 2 {
  %3 = getelementptr inbounds %class.anon.273, %class.anon.273* %0, i64 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %4, align 8
  %6 = urem i64 %1, %5
  %7 = udiv i64 %1, %5
  %8 = shl i64 %6, 6
  %9 = add i64 %8, 64
  %10 = getelementptr inbounds %class.anon.273, %class.anon.273* %0, i64 0, i32 1
  %11 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = icmp ugt i64 %9, %14
  %16 = select i1 %15, i64 %14, i64 %9
  %17 = shl i64 %7, 6
  %18 = add i64 %17, 64
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i64 %18, %21
  %23 = select i1 %22, i64 %21, i64 %18
  %24 = icmp ult i64 %17, %23
  %25 = icmp ult i64 %8, %16
  %26 = getelementptr inbounds %class.anon.273, %class.anon.273* %0, i64 0, i32 2
  br i1 %24, label %27, label %40

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #8
  br label %77

40:                                               ; preds = %92, %2
  %41 = phi <8 x float> [ zeroinitializer, %2 ], [ %93, %92 ]
  %42 = phi <8 x float> [ zeroinitializer, %2 ], [ %94, %92 ]
  %43 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %44 = fadd <8 x float> %41, %43
  %45 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %46 = fadd <8 x float> %44, %45
  %47 = shufflevector <8 x float> %46, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = fadd <8 x float> %46, %47
  %49 = extractelement <8 x float> %48, i32 0
  %50 = fsub float -0.000000e+00, %49
  %51 = shufflevector <8 x float> %42, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %52 = fadd <8 x float> %42, %51
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %54 = fadd <8 x float> %52, %53
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = fadd <8 x float> %54, %55
  %57 = extractelement <8 x float> %56, i32 0
  %58 = fadd float %57, 0x3E112E0BE0000000
  %59 = fdiv float %50, %58
  %60 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %26, align 8
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %60, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %60, i64 0, i32 8, i32 0, i32 0, i32 4
  %64 = load i64, i64* %63, align 8
  %65 = mul i64 %64, %7
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #8
  %70 = getelementptr inbounds i8, i8* %66, i64 %6
  %71 = tail call float @llvm.round.f32(float %59)
  %72 = fcmp olt float %71, 1.270000e+02
  %73 = select i1 %72, float %71, float 1.270000e+02
  %74 = fcmp ogt float %73, -1.280000e+02
  %75 = select i1 %74, float %73, float -1.280000e+02
  %76 = fptosi float %75 to i8
  store i8 %76, i8* %70, align 1
  br i1 %24, label %113, label %163

77:                                               ; preds = %27, %92
  %78 = phi i64 [ %17, %27 ], [ %95, %92 ]
  %79 = phi <8 x float> [ zeroinitializer, %27 ], [ %94, %92 ]
  %80 = phi <8 x float> [ zeroinitializer, %27 ], [ %93, %92 ]
  %81 = mul i64 %29, %78
  %82 = getelementptr inbounds i8, i8* %31, i64 %81
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #8
  %86 = bitcast i8* %82 to float*
  %87 = getelementptr inbounds i8, i8* %36, i64 %81
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #8
  %91 = bitcast i8* %87 to float*
  br i1 %25, label %97, label %92

92:                                               ; preds = %97, %77
  %93 = phi <8 x float> [ %80, %77 ], [ %110, %97 ]
  %94 = phi <8 x float> [ %79, %77 ], [ %109, %97 ]
  %95 = add nuw i64 %78, 1
  %96 = icmp ult i64 %95, %23
  br i1 %96, label %77, label %40

97:                                               ; preds = %77, %97
  %98 = phi i64 [ %111, %97 ], [ %8, %77 ]
  %99 = phi <8 x float> [ %109, %97 ], [ %79, %77 ]
  %100 = phi <8 x float> [ %110, %97 ], [ %80, %77 ]
  %101 = getelementptr inbounds float, float* %86, i64 %98
  %102 = bitcast float* %101 to <8 x float>*
  %103 = load <8 x float>, <8 x float>* %102, align 32, !alias.scope !379, !noalias !382
  %104 = fmul <8 x float> %103, <float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000>
  %105 = getelementptr inbounds float, float* %91, i64 %98
  %106 = bitcast float* %105 to <8 x float>*
  %107 = load <8 x float>, <8 x float>* %106, align 32, !alias.scope !384, !noalias !387
  %108 = fsub <8 x float> zeroinitializer, %107
  %109 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %104, <8 x float> %104, <8 x float> %99) #8
  %110 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %104, <8 x float> %108, <8 x float> %100) #8
  %111 = add i64 %98, 8
  %112 = icmp ult i64 %111, %16
  br i1 %112, label %97, label %92

113:                                              ; preds = %40
  %114 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %115 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %114, i64 0, i32 0, i64 0, i32 0, i32 4
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %114, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = ptrtoint i8* %118 to i64
  %120 = and i64 %119, 63
  %121 = icmp eq i64 %120, 0
  tail call void @llvm.assume(i1 %121) #8
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %114, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = ptrtoint i8* %123 to i64
  %125 = and i64 %124, 63
  %126 = icmp eq i64 %125, 0
  tail call void @llvm.assume(i1 %126) #8
  br label %127

127:                                              ; preds = %158, %113
  %128 = phi i64 [ %17, %113 ], [ %161, %158 ]
  %129 = phi <8 x float> [ zeroinitializer, %113 ], [ %160, %158 ]
  %130 = phi <8 x float> [ zeroinitializer, %113 ], [ %159, %158 ]
  %131 = mul i64 %116, %128
  %132 = getelementptr inbounds i8, i8* %118, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #8
  %136 = bitcast i8* %132 to float*
  %137 = getelementptr inbounds i8, i8* %123, i64 %131
  %138 = ptrtoint i8* %137 to i64
  %139 = and i64 %138, 63
  %140 = icmp eq i64 %139, 0
  tail call void @llvm.assume(i1 %140) #8
  %141 = bitcast i8* %137 to float*
  br i1 %25, label %142, label %158

142:                                              ; preds = %127, %142
  %143 = phi i64 [ %156, %142 ], [ %8, %127 ]
  %144 = phi <8 x float> [ %154, %142 ], [ %129, %127 ]
  %145 = phi <8 x float> [ %155, %142 ], [ %130, %127 ]
  %146 = getelementptr inbounds float, float* %136, i64 %143
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 32, !alias.scope !379, !noalias !382
  %149 = fmul <8 x float> %148, <float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000>
  %150 = getelementptr inbounds float, float* %141, i64 %143
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 32, !alias.scope !384, !noalias !387
  %153 = fsub <8 x float> zeroinitializer, %152
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %149, <8 x float> %144) #8
  %155 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %153, <8 x float> %145) #8
  %156 = add i64 %143, 8
  %157 = icmp ult i64 %156, %16
  br i1 %157, label %142, label %158

158:                                              ; preds = %142, %127
  %159 = phi <8 x float> [ %130, %127 ], [ %155, %142 ]
  %160 = phi <8 x float> [ %129, %127 ], [ %154, %142 ]
  %161 = add nuw i64 %128, 1
  %162 = icmp ult i64 %161, %23
  br i1 %162, label %127, label %163

163:                                              ; preds = %158, %40
  %164 = phi <8 x float> [ zeroinitializer, %40 ], [ %159, %158 ]
  %165 = phi <8 x float> [ zeroinitializer, %40 ], [ %160, %158 ]
  %166 = shufflevector <8 x float> %164, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %167 = fadd <8 x float> %164, %166
  %168 = shufflevector <8 x float> %167, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %169 = fadd <8 x float> %167, %168
  %170 = shufflevector <8 x float> %169, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = fadd <8 x float> %169, %170
  %172 = extractelement <8 x float> %171, i32 0
  %173 = fsub float -0.000000e+00, %172
  %174 = shufflevector <8 x float> %165, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %175 = fadd <8 x float> %165, %174
  %176 = shufflevector <8 x float> %175, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %177 = fadd <8 x float> %175, %176
  %178 = shufflevector <8 x float> %177, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = fadd <8 x float> %177, %178
  %180 = extractelement <8 x float> %179, i32 0
  %181 = fadd float %180, 0x3E112E0BE0000000
  %182 = fdiv float %173, %181
  %183 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %26, align 8
  %184 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %183, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %185 = load i8*, i8** %184, align 8
  %186 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %183, i64 0, i32 8, i32 1, i32 0, i32 4
  %187 = load i64, i64* %186, align 8
  %188 = mul i64 %187, %7
  %189 = getelementptr inbounds i8, i8* %185, i64 %188
  %190 = ptrtoint i8* %189 to i64
  %191 = and i64 %190, 63
  %192 = icmp eq i64 %191, 0
  tail call void @llvm.assume(i1 %192) #8
  %193 = getelementptr inbounds i8, i8* %189, i64 %6
  %194 = tail call float @llvm.round.f32(float %182)
  %195 = fcmp olt float %194, 1.270000e+02
  %196 = select i1 %195, float %194, float 1.270000e+02
  %197 = fcmp ogt float %196, -1.280000e+02
  %198 = select i1 %197, float %196, float -1.280000e+02
  %199 = fptosi float %198 to i8
  store i8 %199, i8* %193, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_4E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_4E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.274**
  %6 = load %class.anon.274*, %class.anon.274** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_4clEmm"(%class.anon.274* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_4clEmm"(%class.anon.274* nocapture readonly, i64) unnamed_addr #20 align 2 {
  %3 = getelementptr inbounds %class.anon.274, %class.anon.274* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.anon.274, %class.anon.274* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.anon.274, %class.anon.274* %0, i64 0, i32 2
  %6 = shl i64 %1, 2
  %7 = add i64 %6, 16
  %8 = getelementptr inbounds %class.anon.274, %class.anon.274* %0, i64 0, i32 3
  %9 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %8, align 8
  %10 = add i64 %6, 17
  %11 = add i64 %6, 18
  %12 = add i64 %6, 19
  br label %14

13:                                               ; preds = %138
  ret void

14:                                               ; preds = %138, %2
  %15 = phi %"struct.jxl::FrameDimensions"* [ %9, %2 ], [ %139, %138 ]
  %16 = phi i64 [ 0, %2 ], [ %140, %138 ]
  %17 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %3, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %1
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #8
  %26 = getelementptr inbounds i8, i8* %22, i64 %20
  %27 = ptrtoint i8* %26 to i64
  %28 = and i64 %27, 63
  %29 = icmp eq i64 %28, 0
  tail call void @llvm.assume(i1 %29) #8
  %30 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %30, i64 0, i32 0, i64 0, i32 0, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = mul i64 %32, %1
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %30, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #8
  %39 = getelementptr inbounds i8, i8* %35, i64 %33
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #8
  %43 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %43, i64 0, i32 0, i64 0, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %43, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #8
  %51 = mul i64 %45, %7
  %52 = getelementptr inbounds i8, i8* %47, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 60
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #8
  %56 = mul i64 %45, %10
  %57 = getelementptr inbounds i8, i8* %47, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = mul i64 %45, %11
  %62 = getelementptr inbounds i8, i8* %47, i64 %61
  %63 = ptrtoint i8* %62 to i64
  %64 = and i64 %63, 62
  %65 = icmp eq i64 %64, 0
  tail call void @llvm.assume(i1 %65) #8
  %66 = mul i64 %45, %12
  %67 = getelementptr inbounds i8, i8* %47, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #8
  %71 = bitcast i8* %26 to float*
  %72 = bitcast i8* %39 to float*
  %73 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %15, i64 0, i32 6
  %74 = load i64, i64* %73, align 8
  %75 = icmp ugt i64 %74, 3
  br i1 %75, label %76, label %138

76:                                               ; preds = %14
  %77 = getelementptr inbounds i8, i8* %52, i64 64
  %78 = bitcast i8* %77 to float*
  %79 = getelementptr inbounds i8, i8* %57, i64 64
  %80 = bitcast i8* %79 to float*
  %81 = getelementptr inbounds i8, i8* %62, i64 64
  %82 = bitcast i8* %81 to float*
  %83 = getelementptr inbounds i8, i8* %67, i64 64
  %84 = bitcast i8* %83 to float*
  br label %85

85:                                               ; preds = %76, %85
  %86 = phi i64 [ %132, %85 ], [ 0, %76 ]
  %87 = shl i64 %86, 2
  %88 = getelementptr inbounds float, float* %78, i64 %87
  %89 = bitcast float* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 16, !alias.scope !389
  %91 = and <4 x i32> %90, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %92 = bitcast <4 x i32> %91 to <4 x float>
  %93 = fadd <4 x float> %92, zeroinitializer
  %94 = fcmp olt <4 x float> %92, zeroinitializer
  %95 = select <4 x i1> %94, <4 x float> zeroinitializer, <4 x float> %92
  %96 = getelementptr inbounds float, float* %80, i64 %87
  %97 = bitcast float* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 16, !alias.scope !389
  %99 = and <4 x i32> %98, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %100 = bitcast <4 x i32> %99 to <4 x float>
  %101 = fadd <4 x float> %93, %100
  %102 = fcmp ogt <4 x float> %95, %100
  %103 = select <4 x i1> %102, <4 x float> %95, <4 x float> %100
  %104 = getelementptr inbounds float, float* %82, i64 %87
  %105 = bitcast float* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 16, !alias.scope !389
  %107 = and <4 x i32> %106, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = fadd <4 x float> %101, %108
  %110 = fcmp ogt <4 x float> %103, %108
  %111 = select <4 x i1> %110, <4 x float> %103, <4 x float> %108
  %112 = getelementptr inbounds float, float* %84, i64 %87
  %113 = bitcast float* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 16, !alias.scope !389
  %115 = and <4 x i32> %114, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %116 = bitcast <4 x i32> %115 to <4 x float>
  %117 = fadd <4 x float> %109, %116
  %118 = fcmp ogt <4 x float> %111, %116
  %119 = select <4 x i1> %118, <4 x float> %111, <4 x float> %116
  %120 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %121 = fadd <4 x float> %117, %120
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %123 = fadd <4 x float> %121, %122
  %124 = extractelement <4 x float> %123, i32 0
  %125 = getelementptr inbounds float, float* %72, i64 %86
  store float %124, float* %125, align 4
  %126 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %127 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %119, <4 x float> %126) #8
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %129 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %128, <4 x float> %127) #8
  %130 = extractelement <4 x float> %129, i32 0
  %131 = getelementptr inbounds float, float* %71, i64 %86
  store float %130, float* %131, align 4
  %132 = add nuw nsw i64 %86, 1
  %133 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %8, align 8
  %134 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %133, i64 0, i32 6
  %135 = load i64, i64* %134, align 8
  %136 = lshr i64 %135, 2
  %137 = icmp ult i64 %132, %136
  br i1 %137, label %85, label %138

138:                                              ; preds = %85, %14
  %139 = phi %"struct.jxl::FrameDimensions"* [ %15, %14 ], [ %133, %85 ]
  %140 = add nuw nsw i64 %16, 1
  %141 = icmp eq i64 %140, 3
  br i1 %141, label %13, label %14
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #10

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_5E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_5E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.276**
  %6 = load %class.anon.276*, %class.anon.276** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_5clEmm"(%class.anon.276* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX212_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_5clEmm"(%class.anon.276* nocapture readonly, i64) unnamed_addr #21 align 2 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = urem i64 %1, %6
  %8 = udiv i64 %1, %6
  %9 = shl i64 %7, 3
  %10 = and i64 %9, 2305843009213693944
  %11 = add nuw nsw i64 %10, 8
  %12 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 1
  %13 = bitcast %"class.jxl::Plane.97"** %12 to %"struct.jxl::PlaneBase"**
  %14 = load %"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"** %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = icmp ugt i64 %11, %17
  %19 = select i1 %18, i64 %17, i64 %11
  %20 = shl i64 %8, 3
  %21 = and i64 %20, 2305843009213693944
  %22 = add nuw nsw i64 %21, 8
  %23 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = icmp ugt i64 %22, %25
  %27 = select i1 %26, i64 %25, i64 %22
  %28 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 2
  %31 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 2
  %32 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %32, i64 0, i32 7, i32 0, i32 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 64, i1 false)
  %36 = icmp ult i64 %21, %27
  br i1 %36, label %37, label %47

37:                                               ; preds = %2
  %38 = bitcast %"struct.jxl::PlaneBase"* %14 to %"class.jxl::Plane.97"*
  %39 = icmp ult i64 %10, %19
  %40 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 3
  %41 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 4
  %42 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 5
  %43 = getelementptr inbounds %class.anon.276, %class.anon.276* %0, i64 0, i32 6
  %44 = shl i64 %7, 4
  %45 = and i64 %44, 4611686018427387888
  %46 = xor i64 %45, -1
  br label %48

47:                                               ; preds = %75, %2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #8
  ret void

48:                                               ; preds = %78, %37
  %49 = phi i64 [ %29, %37 ], [ %84, %78 ]
  %50 = phi %"class.jxl::Plane.97"* [ %38, %37 ], [ %82, %78 ]
  %51 = phi i64 [ %34, %37 ], [ %81, %78 ]
  %52 = phi %"struct.jxl::PassesSharedState"* [ %32, %37 ], [ %79, %78 ]
  %53 = phi i64 [ %21, %37 ], [ %76, %78 ]
  %54 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %52, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = mul i64 %51, %53
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %50, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = mul i64 %49, %53
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #8
  %68 = bitcast i8* %64 to float*
  br i1 %39, label %69, label %75

69:                                               ; preds = %48
  %70 = sub i64 %53, %20
  %71 = shl i64 %70, 3
  %72 = sub i64 %71, %10
  %73 = shl i64 %53, 1
  %74 = add nuw i64 %53, 1
  br label %85

75:                                               ; preds = %387, %48
  %76 = add nuw i64 %53, 1
  %77 = icmp ult i64 %76, %27
  br i1 %77, label %78, label %47

78:                                               ; preds = %75
  %79 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %80 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %79, i64 0, i32 7, i32 0, i32 4
  %81 = load i64, i64* %80, align 8
  %82 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %12, align 8
  %83 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %82, i64 0, i32 0, i32 4
  %84 = load i64, i64* %83, align 8
  br label %48

85:                                               ; preds = %69, %387
  %86 = phi i64 [ 0, %69 ], [ %390, %387 ]
  %87 = phi i64 [ %10, %69 ], [ %388, %387 ]
  %88 = mul i64 %86, -2
  %89 = add i64 %72, %87
  %90 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1, !range !3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %387

93:                                               ; preds = %85
  %94 = load float*, float** %40, align 8
  %95 = load float, float* %94, align 4
  %96 = load [18 x %"struct.std::__1::pair.260"]*, [18 x %"struct.std::__1::pair.260"]** %41, align 8
  %97 = shl i64 %87, 1
  %98 = add i64 %88, %46
  br label %132

99:                                               ; preds = %281
  %100 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %101 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %100, i64 0, i32 3
  tail call void @_ZN3jxl15AcStrategyImage3SetEmmNS_10AcStrategy4TypeE(%"class.jxl::AcStrategyImage"* %101, i64 %87, i64 %53, i32 %282)
  %102 = zext i32 %282 to i64
  %103 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = add i64 %53, %105
  %107 = icmp ult i64 %53, %106
  br i1 %107, label %108, label %387

108:                                              ; preds = %99
  %109 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %102
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = add i64 %87, %111
  %113 = icmp ult i64 %87, %112
  %114 = and i64 %111, 240
  %115 = add nsw i64 %114, -16
  %116 = lshr exact i64 %115, 4
  %117 = add nuw nsw i64 %116, 1
  %118 = lshr i64 6291455, %102
  %119 = and i64 %118, 1
  %120 = icmp eq i64 %119, 0
  %121 = and i64 %111, 240
  %122 = add i64 %87, %121
  %123 = insertelement <8 x float> undef, float %284, i32 0
  %124 = shufflevector <8 x float> %123, <8 x float> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x float> undef, float %284, i32 0
  %126 = shufflevector <8 x float> %125, <8 x float> undef, <8 x i32> zeroinitializer
  %127 = and i64 %117, 1
  %128 = icmp eq i64 %115, 0
  %129 = sub nuw nsw i64 %117, %127
  %130 = icmp eq i64 %127, 0
  %131 = icmp eq i64 %121, %111
  br label %309

132:                                              ; preds = %281, %93
  %133 = phi i64 [ 0, %93 ], [ %285, %281 ]
  %134 = phi float [ %95, %93 ], [ %284, %281 ]
  %135 = phi i64 [ 1, %93 ], [ %283, %281 ]
  %136 = phi i32 [ 0, %93 ], [ %282, %281 ]
  %137 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %96, i64 0, i64 %133, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i64
  %143 = add i64 %53, %142
  %144 = icmp ugt i64 %143, %27
  br i1 %144, label %281, label %145

145:                                              ; preds = %132
  %146 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %139
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = add i64 %87, %148
  %150 = icmp ugt i64 %149, %19
  br i1 %150, label %281, label %151

151:                                              ; preds = %145
  %152 = icmp ult i64 %53, %143
  br i1 %152, label %153, label %177

153:                                              ; preds = %151
  %154 = icmp ult i64 %87, %149
  br label %155

155:                                              ; preds = %173, %153
  %156 = phi i64 [ %53, %153 ], [ %175, %173 ]
  %157 = phi i8 [ 1, %153 ], [ %174, %173 ]
  %158 = sub i64 %156, %20
  %159 = shl i64 %158, 3
  %160 = sub i64 %159, %10
  br i1 %154, label %166, label %173

161:                                              ; preds = %173
  %162 = and i8 %174, 1
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %281, label %177

164:                                              ; preds = %166
  %165 = icmp eq i64 %172, %149
  br i1 %165, label %173, label %166

166:                                              ; preds = %155, %164
  %167 = phi i64 [ %172, %164 ], [ %87, %155 ]
  %168 = add i64 %160, %167
  %169 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %168
  %170 = load i8, i8* %169, align 1, !range !3
  %171 = icmp eq i8 %170, 0
  %172 = add i64 %167, 1
  br i1 %171, label %164, label %173

173:                                              ; preds = %166, %164, %155
  %174 = phi i8 [ %157, %155 ], [ 0, %166 ], [ %157, %164 ]
  %175 = add nuw i64 %156, 1
  %176 = icmp eq i64 %175, %143
  br i1 %176, label %161, label %155

177:                                              ; preds = %151, %161
  %178 = shl i64 %143, 1
  %179 = icmp ult i64 %73, %178
  br i1 %179, label %180, label %264

180:                                              ; preds = %177
  %181 = load %class.anon.275*, %class.anon.275** %42, align 8
  %182 = getelementptr inbounds %class.anon.275, %class.anon.275* %181, i64 0, i32 0
  %183 = shl i64 %149, 1
  %184 = icmp ult i64 %97, %183
  %185 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %182, align 8
  %186 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %185, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %185, i64 0, i32 0, i32 4
  %189 = load i64, i64* %188, align 8
  %190 = add i64 %88, %183
  %191 = add i64 %98, %183
  %192 = and i64 %190, 2
  %193 = icmp eq i64 %192, 0
  %194 = icmp ult i64 %191, 3
  br label %195

195:                                              ; preds = %226, %180
  %196 = phi float [ 1.000000e+10, %180 ], [ %227, %226 ]
  %197 = phi float [ 0.000000e+00, %180 ], [ %228, %226 ]
  %198 = phi i64 [ %73, %180 ], [ %229, %226 ]
  %199 = mul i64 %189, %198
  %200 = getelementptr inbounds i8, i8* %187, i64 %199
  %201 = ptrtoint i8* %200 to i64
  %202 = and i64 %201, 63
  %203 = icmp eq i64 %202, 0
  tail call void @llvm.assume(i1 %203) #8
  %204 = bitcast i8* %200 to float*
  br i1 %184, label %205, label %226

205:                                              ; preds = %195
  br i1 %193, label %220, label %206

206:                                              ; preds = %205, %206
  %207 = phi float [ %214, %206 ], [ %196, %205 ]
  %208 = phi float [ %216, %206 ], [ %197, %205 ]
  %209 = phi i64 [ %217, %206 ], [ %97, %205 ]
  %210 = phi i64 [ %218, %206 ], [ %192, %205 ]
  %211 = getelementptr inbounds float, float* %204, i64 %209
  %212 = load float, float* %211, align 4
  %213 = fcmp olt float %212, %207
  %214 = select i1 %213, float %212, float %207
  %215 = fcmp olt float %208, %212
  %216 = select i1 %215, float %212, float %208
  %217 = add nuw i64 %209, 1
  %218 = add i64 %210, -1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %206, !llvm.loop !392

220:                                              ; preds = %206, %205
  %221 = phi float [ %196, %205 ], [ %214, %206 ]
  %222 = phi float [ %197, %205 ], [ %216, %206 ]
  %223 = phi i64 [ %97, %205 ], [ %217, %206 ]
  %224 = phi float [ undef, %205 ], [ %214, %206 ]
  %225 = phi float [ undef, %205 ], [ %216, %206 ]
  br i1 %194, label %226, label %231

226:                                              ; preds = %220, %231, %195
  %227 = phi float [ %196, %195 ], [ %224, %220 ], [ %259, %231 ]
  %228 = phi float [ %197, %195 ], [ %225, %220 ], [ %261, %231 ]
  %229 = add nuw i64 %198, 1
  %230 = icmp ult i64 %229, %178
  br i1 %230, label %195, label %264

231:                                              ; preds = %220, %231
  %232 = phi float [ %259, %231 ], [ %221, %220 ]
  %233 = phi float [ %261, %231 ], [ %222, %220 ]
  %234 = phi i64 [ %262, %231 ], [ %223, %220 ]
  %235 = getelementptr inbounds float, float* %204, i64 %234
  %236 = load float, float* %235, align 4
  %237 = fcmp olt float %236, %232
  %238 = select i1 %237, float %236, float %232
  %239 = fcmp olt float %233, %236
  %240 = select i1 %239, float %236, float %233
  %241 = add nuw i64 %234, 1
  %242 = getelementptr inbounds float, float* %204, i64 %241
  %243 = load float, float* %242, align 4
  %244 = fcmp olt float %243, %238
  %245 = select i1 %244, float %243, float %238
  %246 = fcmp olt float %240, %243
  %247 = select i1 %246, float %243, float %240
  %248 = add nuw i64 %234, 2
  %249 = getelementptr inbounds float, float* %204, i64 %248
  %250 = load float, float* %249, align 4
  %251 = fcmp olt float %250, %245
  %252 = select i1 %251, float %250, float %245
  %253 = fcmp olt float %247, %250
  %254 = select i1 %253, float %250, float %247
  %255 = add nuw i64 %234, 3
  %256 = getelementptr inbounds float, float* %204, i64 %255
  %257 = load float, float* %256, align 4
  %258 = fcmp olt float %257, %252
  %259 = select i1 %258, float %257, float %252
  %260 = fcmp olt float %254, %257
  %261 = select i1 %260, float %257, float %254
  %262 = add nuw i64 %234, 4
  %263 = icmp ult i64 %262, %183
  br i1 %263, label %231, label %226

264:                                              ; preds = %226, %177
  %265 = phi float [ 1.000000e+10, %177 ], [ %227, %226 ]
  %266 = phi float [ 0.000000e+00, %177 ], [ %228, %226 ]
  %267 = fsub float %266, %265
  %268 = load float*, float** %43, align 8
  %269 = load float, float* %268, align 4
  %270 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %96, i64 0, i64 %133, i32 1
  %271 = load float, float* %270, align 4
  %272 = fmul float %269, %271
  %273 = fcmp ogt float %267, %272
  br i1 %273, label %281, label %274

274:                                              ; preds = %264
  %275 = mul nuw nsw i64 %148, %142
  %276 = icmp ult i64 %275, %135
  br i1 %276, label %281, label %277

277:                                              ; preds = %274
  %278 = fmul float %265, 0x4004CF2460000000
  %279 = fadd float %278, 0x400F734AA0000000
  %280 = fdiv float %95, %279
  br label %281

281:                                              ; preds = %264, %274, %277, %161, %145, %132
  %282 = phi i32 [ %136, %132 ], [ %136, %145 ], [ %136, %161 ], [ %136, %264 ], [ %138, %277 ], [ %136, %274 ]
  %283 = phi i64 [ %135, %132 ], [ %135, %145 ], [ %135, %161 ], [ %135, %264 ], [ %275, %277 ], [ %135, %274 ]
  %284 = phi float [ %134, %132 ], [ %134, %145 ], [ %134, %161 ], [ %134, %264 ], [ %280, %277 ], [ %134, %274 ]
  %285 = add nuw nsw i64 %133, 1
  %286 = icmp eq i64 %285, 18
  br i1 %286, label %99, label %132

287:                                              ; preds = %364
  br i1 %107, label %288, label %387

288:                                              ; preds = %287
  %289 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %102
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i64
  %292 = add i64 %87, %291
  %293 = icmp ult i64 %87, %292
  %294 = and i64 %105, 1
  %295 = icmp eq i64 %294, 0
  %296 = xor i1 %293, true
  %297 = or i1 %295, %296
  %298 = select i1 %295, i64 %53, i64 %74
  br i1 %297, label %304, label %299

299:                                              ; preds = %288, %299
  %300 = phi i64 [ %302, %299 ], [ %87, %288 ]
  %301 = getelementptr inbounds i8, i8* %57, i64 %300
  store i8 4, i8* %301, align 1
  %302 = add nuw i64 %300, 1
  %303 = icmp ult i64 %302, %292
  br i1 %303, label %299, label %304, !llvm.loop !393

304:                                              ; preds = %288, %299
  %305 = phi i64 [ %298, %288 ], [ %74, %299 ]
  %306 = lshr i64 258703, %102
  %307 = and i64 %306, 1
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %375, label %387

309:                                              ; preds = %108, %364
  %310 = phi i64 [ %53, %108 ], [ %365, %364 ]
  br i1 %113, label %311, label %364

311:                                              ; preds = %309
  %312 = sub i64 %310, %20
  %313 = shl i64 %312, 3
  %314 = sub i64 %313, %10
  %315 = sub nuw i64 %310, %53
  %316 = mul i64 %315, %30
  br i1 %120, label %317, label %362

317:                                              ; preds = %311
  br i1 %128, label %347, label %318

318:                                              ; preds = %317, %318
  %319 = phi i64 [ %344, %318 ], [ 0, %317 ]
  %320 = phi i64 [ %345, %318 ], [ %129, %317 ]
  %321 = add i64 %87, %319
  %322 = add i64 %314, %321
  %323 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %322
  %324 = bitcast i8* %323 to <8 x i8>*
  store <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <8 x i8>* %324, align 1
  %325 = getelementptr inbounds i8, i8* %323, i64 8
  %326 = bitcast i8* %325 to <8 x i8>*
  store <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <8 x i8>* %326, align 1
  %327 = add i64 %321, %316
  %328 = getelementptr inbounds float, float* %68, i64 %327
  %329 = bitcast float* %328 to <8 x float>*
  store <8 x float> %124, <8 x float>* %329, align 4
  %330 = getelementptr inbounds float, float* %328, i64 8
  %331 = bitcast float* %330 to <8 x float>*
  store <8 x float> %126, <8 x float>* %331, align 4
  %332 = or i64 %319, 16
  %333 = add i64 %87, %332
  %334 = add i64 %314, %333
  %335 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %334
  %336 = bitcast i8* %335 to <8 x i8>*
  store <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <8 x i8>* %336, align 1
  %337 = getelementptr inbounds i8, i8* %335, i64 8
  %338 = bitcast i8* %337 to <8 x i8>*
  store <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <8 x i8>* %338, align 1
  %339 = add i64 %333, %316
  %340 = getelementptr inbounds float, float* %68, i64 %339
  %341 = bitcast float* %340 to <8 x float>*
  store <8 x float> %124, <8 x float>* %341, align 4
  %342 = getelementptr inbounds float, float* %340, i64 8
  %343 = bitcast float* %342 to <8 x float>*
  store <8 x float> %126, <8 x float>* %343, align 4
  %344 = add i64 %319, 32
  %345 = add i64 %320, -2
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %318, !llvm.loop !394

347:                                              ; preds = %318, %317
  %348 = phi i64 [ 0, %317 ], [ %344, %318 ]
  br i1 %130, label %361, label %349

349:                                              ; preds = %347
  %350 = add i64 %87, %348
  %351 = add i64 %314, %350
  %352 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %351
  %353 = bitcast i8* %352 to <8 x i8>*
  store <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <8 x i8>* %353, align 1
  %354 = getelementptr inbounds i8, i8* %352, i64 8
  %355 = bitcast i8* %354 to <8 x i8>*
  store <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <8 x i8>* %355, align 1
  %356 = add i64 %350, %316
  %357 = getelementptr inbounds float, float* %68, i64 %356
  %358 = bitcast float* %357 to <8 x float>*
  store <8 x float> %124, <8 x float>* %358, align 4
  %359 = getelementptr inbounds float, float* %357, i64 8
  %360 = bitcast float* %359 to <8 x float>*
  store <8 x float> %126, <8 x float>* %360, align 4
  br label %361

361:                                              ; preds = %347, %349
  br i1 %131, label %364, label %362

362:                                              ; preds = %311, %361
  %363 = phi i64 [ %87, %311 ], [ %122, %361 ]
  br label %367

364:                                              ; preds = %367, %361, %309
  %365 = add nuw i64 %310, 1
  %366 = icmp ult i64 %365, %106
  br i1 %366, label %309, label %287

367:                                              ; preds = %362, %367
  %368 = phi i64 [ %373, %367 ], [ %363, %362 ]
  %369 = add i64 %314, %368
  %370 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %369
  store i8 1, i8* %370, align 1
  %371 = add i64 %368, %316
  %372 = getelementptr inbounds float, float* %68, i64 %371
  store float %284, float* %372, align 4
  %373 = add nuw i64 %368, 1
  %374 = icmp ult i64 %373, %112
  br i1 %374, label %367, label %364, !llvm.loop !395

375:                                              ; preds = %304, %401
  %376 = phi i64 [ %402, %401 ], [ %305, %304 ]
  br i1 %293, label %377, label %401

377:                                              ; preds = %375
  %378 = sub nuw i64 %376, %53
  %379 = mul i64 %378, %34
  br label %381

380:                                              ; preds = %381
  br i1 %293, label %391, label %401

381:                                              ; preds = %377, %381
  %382 = phi i64 [ %87, %377 ], [ %385, %381 ]
  %383 = add i64 %382, %379
  %384 = getelementptr inbounds i8, i8* %57, i64 %383
  store i8 4, i8* %384, align 1
  %385 = add nuw i64 %382, 1
  %386 = icmp ult i64 %385, %292
  br i1 %386, label %381, label %380, !llvm.loop !393

387:                                              ; preds = %304, %401, %99, %287, %85
  %388 = add nuw i64 %87, 1
  %389 = icmp ult i64 %388, %19
  %390 = add i64 %86, 1
  br i1 %389, label %85, label %75

391:                                              ; preds = %380
  %392 = add nuw i64 %376, 1
  %393 = sub nuw i64 %392, %53
  %394 = mul i64 %393, %34
  br label %395

395:                                              ; preds = %395, %391
  %396 = phi i64 [ %87, %391 ], [ %399, %395 ]
  %397 = add i64 %396, %394
  %398 = getelementptr inbounds i8, i8* %57, i64 %397
  store i8 4, i8* %398, align 1
  %399 = add nuw i64 %396, 1
  %400 = icmp ult i64 %399, %292
  br i1 %400, label %395, label %401, !llvm.loop !393

401:                                              ; preds = %375, %395, %380
  %402 = add nuw i64 %376, 2
  %403 = icmp ult i64 %402, %106
  br i1 %403, label %375, label %387
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.284**
  %6 = load %class.anon.284*, %class.anon.284** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_0clEmm"(%class.anon.284* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_0clEmm"(%class.anon.284* nocapture readonly, i64) unnamed_addr #22 align 2 {
  %3 = getelementptr inbounds %class.anon.284, %class.anon.284* %0, i64 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %4, align 8
  %6 = urem i64 %1, %5
  %7 = udiv i64 %1, %5
  %8 = shl i64 %6, 6
  %9 = add i64 %8, 64
  %10 = getelementptr inbounds %class.anon.284, %class.anon.284* %0, i64 0, i32 1
  %11 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = icmp ugt i64 %9, %14
  %16 = select i1 %15, i64 %14, i64 %9
  %17 = shl i64 %7, 6
  %18 = add i64 %17, 64
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i64 %18, %21
  %23 = select i1 %22, i64 %21, i64 %18
  %24 = icmp ult i64 %17, %23
  %25 = icmp ult i64 %8, %16
  %26 = getelementptr inbounds %class.anon.284, %class.anon.284* %0, i64 0, i32 2
  br i1 %24, label %27, label %40

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #8
  br label %73

40:                                               ; preds = %88, %2
  %41 = phi <4 x float> [ zeroinitializer, %2 ], [ %89, %88 ]
  %42 = phi <4 x float> [ zeroinitializer, %2 ], [ %90, %88 ]
  %43 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %44 = fadd <4 x float> %41, %43
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %46 = fadd <4 x float> %44, %45
  %47 = extractelement <4 x float> %46, i32 0
  %48 = fsub float -0.000000e+00, %47
  %49 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %50 = fadd <4 x float> %42, %49
  %51 = shufflevector <4 x float> %50, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %52 = fadd <4 x float> %50, %51
  %53 = extractelement <4 x float> %52, i32 0
  %54 = fadd float %53, 0x3E112E0BE0000000
  %55 = fdiv float %48, %54
  %56 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %26, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %56, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %56, i64 0, i32 8, i32 0, i32 0, i32 4
  %60 = load i64, i64* %59, align 8
  %61 = mul i64 %60, %7
  %62 = getelementptr inbounds i8, i8* %58, i64 %61
  %63 = ptrtoint i8* %62 to i64
  %64 = and i64 %63, 63
  %65 = icmp eq i64 %64, 0
  tail call void @llvm.assume(i1 %65) #8
  %66 = getelementptr inbounds i8, i8* %62, i64 %6
  %67 = tail call float @llvm.round.f32(float %55)
  %68 = fcmp olt float %67, 1.270000e+02
  %69 = select i1 %68, float %67, float 1.270000e+02
  %70 = fcmp ogt float %69, -1.280000e+02
  %71 = select i1 %70, float %69, float -1.280000e+02
  %72 = fptosi float %71 to i8
  store i8 %72, i8* %66, align 1
  br i1 %24, label %111, label %163

73:                                               ; preds = %27, %88
  %74 = phi <4 x float> [ zeroinitializer, %27 ], [ %90, %88 ]
  %75 = phi <4 x float> [ zeroinitializer, %27 ], [ %89, %88 ]
  %76 = phi i64 [ %17, %27 ], [ %91, %88 ]
  %77 = mul i64 %29, %76
  %78 = getelementptr inbounds i8, i8* %31, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = and i64 %79, 63
  %81 = icmp eq i64 %80, 0
  tail call void @llvm.assume(i1 %81) #8
  %82 = bitcast i8* %78 to float*
  %83 = getelementptr inbounds i8, i8* %36, i64 %77
  %84 = ptrtoint i8* %83 to i64
  %85 = and i64 %84, 63
  %86 = icmp eq i64 %85, 0
  tail call void @llvm.assume(i1 %86) #8
  %87 = bitcast i8* %83 to float*
  br i1 %25, label %93, label %88

88:                                               ; preds = %93, %73
  %89 = phi <4 x float> [ %75, %73 ], [ %108, %93 ]
  %90 = phi <4 x float> [ %74, %73 ], [ %106, %93 ]
  %91 = add nuw i64 %76, 1
  %92 = icmp ult i64 %91, %23
  br i1 %92, label %73, label %40

93:                                               ; preds = %73, %93
  %94 = phi <4 x float> [ %106, %93 ], [ %74, %73 ]
  %95 = phi <4 x float> [ %108, %93 ], [ %75, %73 ]
  %96 = phi i64 [ %109, %93 ], [ %8, %73 ]
  %97 = getelementptr inbounds float, float* %82, i64 %96
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 16, !alias.scope !396
  %100 = fmul <4 x float> %99, <float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000>
  %101 = getelementptr inbounds float, float* %87, i64 %96
  %102 = bitcast float* %101 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 16, !alias.scope !399
  %104 = fsub <4 x float> zeroinitializer, %103
  %105 = fmul <4 x float> %100, %100
  %106 = fadd <4 x float> %94, %105
  %107 = fmul <4 x float> %100, %104
  %108 = fadd <4 x float> %95, %107
  %109 = add i64 %96, 4
  %110 = icmp ult i64 %109, %16
  br i1 %110, label %93, label %88

111:                                              ; preds = %40
  %112 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %112, i64 0, i32 0, i64 0, i32 0, i32 4
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %112, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  %117 = ptrtoint i8* %116 to i64
  %118 = and i64 %117, 63
  %119 = icmp eq i64 %118, 0
  tail call void @llvm.assume(i1 %119) #8
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %112, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = ptrtoint i8* %121 to i64
  %123 = and i64 %122, 63
  %124 = icmp eq i64 %123, 0
  tail call void @llvm.assume(i1 %124) #8
  br label %125

125:                                              ; preds = %158, %111
  %126 = phi <4 x float> [ zeroinitializer, %111 ], [ %160, %158 ]
  %127 = phi <4 x float> [ zeroinitializer, %111 ], [ %159, %158 ]
  %128 = phi i64 [ %17, %111 ], [ %161, %158 ]
  %129 = mul i64 %114, %128
  %130 = getelementptr inbounds i8, i8* %116, i64 %129
  %131 = ptrtoint i8* %130 to i64
  %132 = and i64 %131, 63
  %133 = icmp eq i64 %132, 0
  tail call void @llvm.assume(i1 %133) #8
  %134 = bitcast i8* %130 to float*
  %135 = getelementptr inbounds i8, i8* %121, i64 %129
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  tail call void @llvm.assume(i1 %138) #8
  %139 = bitcast i8* %135 to float*
  br i1 %25, label %140, label %158

140:                                              ; preds = %125, %140
  %141 = phi <4 x float> [ %153, %140 ], [ %126, %125 ]
  %142 = phi <4 x float> [ %155, %140 ], [ %127, %125 ]
  %143 = phi i64 [ %156, %140 ], [ %8, %125 ]
  %144 = getelementptr inbounds float, float* %134, i64 %143
  %145 = bitcast float* %144 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 16, !alias.scope !396
  %147 = fmul <4 x float> %146, <float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000, float 0x3F88618620000000>
  %148 = getelementptr inbounds float, float* %139, i64 %143
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 16, !alias.scope !399
  %151 = fsub <4 x float> zeroinitializer, %150
  %152 = fmul <4 x float> %147, %147
  %153 = fadd <4 x float> %141, %152
  %154 = fmul <4 x float> %147, %151
  %155 = fadd <4 x float> %142, %154
  %156 = add i64 %143, 4
  %157 = icmp ult i64 %156, %16
  br i1 %157, label %140, label %158

158:                                              ; preds = %140, %125
  %159 = phi <4 x float> [ %127, %125 ], [ %155, %140 ]
  %160 = phi <4 x float> [ %126, %125 ], [ %153, %140 ]
  %161 = add nuw i64 %128, 1
  %162 = icmp ult i64 %161, %23
  br i1 %162, label %125, label %163

163:                                              ; preds = %158, %40
  %164 = phi <4 x float> [ zeroinitializer, %40 ], [ %159, %158 ]
  %165 = phi <4 x float> [ zeroinitializer, %40 ], [ %160, %158 ]
  %166 = shufflevector <4 x float> %164, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %167 = fadd <4 x float> %164, %166
  %168 = shufflevector <4 x float> %167, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %169 = fadd <4 x float> %167, %168
  %170 = extractelement <4 x float> %169, i32 0
  %171 = fsub float -0.000000e+00, %170
  %172 = shufflevector <4 x float> %165, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %173 = fadd <4 x float> %165, %172
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %175 = fadd <4 x float> %173, %174
  %176 = extractelement <4 x float> %175, i32 0
  %177 = fadd float %176, 0x3E112E0BE0000000
  %178 = fdiv float %171, %177
  %179 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %26, align 8
  %180 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %179, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %179, i64 0, i32 8, i32 1, i32 0, i32 4
  %183 = load i64, i64* %182, align 8
  %184 = mul i64 %183, %7
  %185 = getelementptr inbounds i8, i8* %181, i64 %184
  %186 = ptrtoint i8* %185 to i64
  %187 = and i64 %186, 63
  %188 = icmp eq i64 %187, 0
  tail call void @llvm.assume(i1 %188) #8
  %189 = getelementptr inbounds i8, i8* %185, i64 %6
  %190 = tail call float @llvm.round.f32(float %178)
  %191 = fcmp olt float %190, 1.270000e+02
  %192 = select i1 %191, float %190, float 1.270000e+02
  %193 = fcmp ogt float %192, -1.280000e+02
  %194 = select i1 %193, float %192, float -1.280000e+02
  %195 = fptosi float %194 to i8
  store i8 %195, i8* %189, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.285**
  %6 = load %class.anon.285*, %class.anon.285** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_1clEmm"(%class.anon.285* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_1clEmm"(%class.anon.285* nocapture readonly, i64) unnamed_addr #22 align 2 {
  %3 = getelementptr inbounds %class.anon.285, %class.anon.285* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.anon.285, %class.anon.285* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.anon.285, %class.anon.285* %0, i64 0, i32 2
  %6 = shl i64 %1, 2
  %7 = add i64 %6, 16
  %8 = getelementptr inbounds %class.anon.285, %class.anon.285* %0, i64 0, i32 3
  %9 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %8, align 8
  %10 = add i64 %6, 17
  %11 = add i64 %6, 18
  %12 = add i64 %6, 19
  br label %14

13:                                               ; preds = %138
  ret void

14:                                               ; preds = %138, %2
  %15 = phi %"struct.jxl::FrameDimensions"* [ %9, %2 ], [ %139, %138 ]
  %16 = phi i64 [ 0, %2 ], [ %140, %138 ]
  %17 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %3, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 0, i32 0, i64 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %1
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #8
  %26 = getelementptr inbounds i8, i8* %22, i64 %20
  %27 = ptrtoint i8* %26 to i64
  %28 = and i64 %27, 63
  %29 = icmp eq i64 %28, 0
  tail call void @llvm.assume(i1 %29) #8
  %30 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %30, i64 0, i32 0, i64 0, i32 0, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = mul i64 %32, %1
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %30, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #8
  %39 = getelementptr inbounds i8, i8* %35, i64 %33
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #8
  %43 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %43, i64 0, i32 0, i64 0, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %43, i64 0, i32 0, i64 %16, i32 0, i32 5, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #8
  %51 = mul i64 %45, %7
  %52 = getelementptr inbounds i8, i8* %47, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 60
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #8
  %56 = mul i64 %45, %10
  %57 = getelementptr inbounds i8, i8* %47, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = mul i64 %45, %11
  %62 = getelementptr inbounds i8, i8* %47, i64 %61
  %63 = ptrtoint i8* %62 to i64
  %64 = and i64 %63, 62
  %65 = icmp eq i64 %64, 0
  tail call void @llvm.assume(i1 %65) #8
  %66 = mul i64 %45, %12
  %67 = getelementptr inbounds i8, i8* %47, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #8
  %71 = bitcast i8* %26 to float*
  %72 = bitcast i8* %39 to float*
  %73 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %15, i64 0, i32 6
  %74 = load i64, i64* %73, align 8
  %75 = icmp ugt i64 %74, 3
  br i1 %75, label %76, label %138

76:                                               ; preds = %14
  %77 = getelementptr inbounds i8, i8* %52, i64 64
  %78 = bitcast i8* %77 to float*
  %79 = getelementptr inbounds i8, i8* %57, i64 64
  %80 = bitcast i8* %79 to float*
  %81 = getelementptr inbounds i8, i8* %62, i64 64
  %82 = bitcast i8* %81 to float*
  %83 = getelementptr inbounds i8, i8* %67, i64 64
  %84 = bitcast i8* %83 to float*
  br label %85

85:                                               ; preds = %76, %85
  %86 = phi i64 [ %132, %85 ], [ 0, %76 ]
  %87 = shl i64 %86, 2
  %88 = getelementptr inbounds float, float* %78, i64 %87
  %89 = bitcast float* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 16, !alias.scope !402
  %91 = and <4 x i32> %90, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %92 = bitcast <4 x i32> %91 to <4 x float>
  %93 = fadd <4 x float> %92, zeroinitializer
  %94 = fcmp olt <4 x float> %92, zeroinitializer
  %95 = select <4 x i1> %94, <4 x float> zeroinitializer, <4 x float> %92
  %96 = getelementptr inbounds float, float* %80, i64 %87
  %97 = bitcast float* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 16, !alias.scope !402
  %99 = and <4 x i32> %98, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %100 = bitcast <4 x i32> %99 to <4 x float>
  %101 = fadd <4 x float> %93, %100
  %102 = fcmp ogt <4 x float> %95, %100
  %103 = select <4 x i1> %102, <4 x float> %95, <4 x float> %100
  %104 = getelementptr inbounds float, float* %82, i64 %87
  %105 = bitcast float* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 16, !alias.scope !402
  %107 = and <4 x i32> %106, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = fadd <4 x float> %101, %108
  %110 = fcmp ogt <4 x float> %103, %108
  %111 = select <4 x i1> %110, <4 x float> %103, <4 x float> %108
  %112 = getelementptr inbounds float, float* %84, i64 %87
  %113 = bitcast float* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 16, !alias.scope !402
  %115 = and <4 x i32> %114, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %116 = bitcast <4 x i32> %115 to <4 x float>
  %117 = fadd <4 x float> %109, %116
  %118 = fcmp ogt <4 x float> %111, %116
  %119 = select <4 x i1> %118, <4 x float> %111, <4 x float> %116
  %120 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %121 = fadd <4 x float> %117, %120
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %123 = fadd <4 x float> %121, %122
  %124 = extractelement <4 x float> %123, i32 0
  %125 = getelementptr inbounds float, float* %72, i64 %86
  store float %124, float* %125, align 4
  %126 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %127 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %119, <4 x float> %126) #8
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %129 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %128, <4 x float> %127) #8
  %130 = extractelement <4 x float> %129, i32 0
  %131 = getelementptr inbounds float, float* %71, i64 %86
  store float %130, float* %131, align 4
  %132 = add nuw nsw i64 %86, 1
  %133 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %8, align 8
  %134 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %133, i64 0, i32 6
  %135 = load i64, i64* %134, align 8
  %136 = lshr i64 %135, 2
  %137 = icmp ult i64 %132, %136
  br i1 %137, label %85, label %138

138:                                              ; preds = %85, %14
  %139 = phi %"struct.jxl::FrameDimensions"* [ %15, %14 ], [ %133, %85 ]
  %140 = add nuw nsw i64 %16, 1
  %141 = icmp eq i64 %140, 3
  br i1 %141, label %13, label %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.287**
  %6 = load %class.anon.287*, %class.anon.287** %5, align 8
  %7 = zext i32 %1 to i64
  tail call fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_2clEmm"(%class.anon.287* %6, i64 %7)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE412_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutEENK3$_2clEmm"(%class.anon.287* nocapture readonly, i64) unnamed_addr #23 align 2 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = urem i64 %1, %6
  %8 = udiv i64 %1, %6
  %9 = shl i64 %7, 3
  %10 = and i64 %9, 2305843009213693944
  %11 = add nuw nsw i64 %10, 8
  %12 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 1
  %13 = bitcast %"class.jxl::Plane.97"** %12 to %"struct.jxl::PlaneBase"**
  %14 = load %"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"** %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = icmp ugt i64 %11, %17
  %19 = select i1 %18, i64 %17, i64 %11
  %20 = shl i64 %8, 3
  %21 = and i64 %20, 2305843009213693944
  %22 = add nuw nsw i64 %21, 8
  %23 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = icmp ugt i64 %22, %25
  %27 = select i1 %26, i64 %25, i64 %22
  %28 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %14, i64 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 2
  %31 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 2
  %32 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %32, i64 0, i32 7, i32 0, i32 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 64, i1 false)
  %36 = icmp ult i64 %21, %27
  br i1 %36, label %37, label %47

37:                                               ; preds = %2
  %38 = bitcast %"struct.jxl::PlaneBase"* %14 to %"class.jxl::Plane.97"*
  %39 = icmp ult i64 %10, %19
  %40 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 3
  %41 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 4
  %42 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 5
  %43 = getelementptr inbounds %class.anon.287, %class.anon.287* %0, i64 0, i32 6
  %44 = shl i64 %7, 4
  %45 = and i64 %44, 4611686018427387888
  %46 = xor i64 %45, -1
  br label %48

47:                                               ; preds = %74, %2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #8
  ret void

48:                                               ; preds = %77, %37
  %49 = phi i64 [ %29, %37 ], [ %83, %77 ]
  %50 = phi %"class.jxl::Plane.97"* [ %38, %37 ], [ %81, %77 ]
  %51 = phi i64 [ %34, %37 ], [ %80, %77 ]
  %52 = phi %"struct.jxl::PassesSharedState"* [ %32, %37 ], [ %78, %77 ]
  %53 = phi i64 [ %21, %37 ], [ %75, %77 ]
  %54 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %52, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = mul i64 %51, %53
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %50, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = mul i64 %49, %53
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #8
  %68 = bitcast i8* %64 to float*
  br i1 %39, label %69, label %74

69:                                               ; preds = %48
  %70 = sub i64 %53, %20
  %71 = shl i64 %70, 3
  %72 = sub i64 %71, %10
  %73 = shl i64 %53, 1
  br label %84

74:                                               ; preds = %437, %48
  %75 = add nuw i64 %53, 1
  %76 = icmp ult i64 %75, %27
  br i1 %76, label %77, label %47

77:                                               ; preds = %74
  %78 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %79 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %78, i64 0, i32 7, i32 0, i32 4
  %80 = load i64, i64* %79, align 8
  %81 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %12, align 8
  %82 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %81, i64 0, i32 0, i32 4
  %83 = load i64, i64* %82, align 8
  br label %48

84:                                               ; preds = %69, %437
  %85 = phi i64 [ 0, %69 ], [ %440, %437 ]
  %86 = phi i64 [ %10, %69 ], [ %438, %437 ]
  %87 = mul i64 %85, -2
  %88 = add i64 %72, %86
  %89 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1, !range !3
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %437

92:                                               ; preds = %84
  %93 = load float*, float** %40, align 8
  %94 = load float, float* %93, align 4
  %95 = load [18 x %"struct.std::__1::pair.260"]*, [18 x %"struct.std::__1::pair.260"]** %41, align 8
  %96 = shl i64 %86, 1
  %97 = add i64 %87, %46
  br label %131

98:                                               ; preds = %280
  %99 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %99, i64 0, i32 3
  tail call void @_ZN3jxl15AcStrategyImage3SetEmmNS_10AcStrategy4TypeE(%"class.jxl::AcStrategyImage"* %100, i64 %86, i64 %53, i32 %281)
  %101 = zext i32 %281 to i64
  %102 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = add i64 %53, %104
  %106 = icmp ult i64 %53, %105
  br i1 %106, label %107, label %437

107:                                              ; preds = %98
  %108 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %101
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = add i64 %86, %110
  %112 = icmp ult i64 %86, %111
  %113 = and i64 %110, 248
  %114 = add nsw i64 %113, -8
  %115 = lshr exact i64 %114, 3
  %116 = add nuw nsw i64 %115, 1
  %117 = lshr i64 786431, %101
  %118 = and i64 %117, 1
  %119 = icmp eq i64 %118, 0
  %120 = and i64 %110, 248
  %121 = add i64 %86, %120
  %122 = insertelement <4 x float> undef, float %283, i32 0
  %123 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> zeroinitializer
  %124 = insertelement <4 x float> undef, float %283, i32 0
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <4 x i32> zeroinitializer
  %126 = and i64 %116, 1
  %127 = icmp eq i64 %114, 0
  %128 = sub nuw nsw i64 %116, %126
  %129 = icmp eq i64 %126, 0
  %130 = icmp eq i64 %120, %110
  br label %306

131:                                              ; preds = %280, %92
  %132 = phi i64 [ 0, %92 ], [ %284, %280 ]
  %133 = phi float [ %94, %92 ], [ %283, %280 ]
  %134 = phi i64 [ 1, %92 ], [ %282, %280 ]
  %135 = phi i32 [ 0, %92 ], [ %281, %280 ]
  %136 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %95, i64 0, i64 %132, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = add i64 %53, %141
  %143 = icmp ugt i64 %142, %27
  br i1 %143, label %280, label %144

144:                                              ; preds = %131
  %145 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %138
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = add i64 %86, %147
  %149 = icmp ugt i64 %148, %19
  br i1 %149, label %280, label %150

150:                                              ; preds = %144
  %151 = icmp ult i64 %53, %142
  br i1 %151, label %152, label %176

152:                                              ; preds = %150
  %153 = icmp ult i64 %86, %148
  br label %154

154:                                              ; preds = %172, %152
  %155 = phi i64 [ %53, %152 ], [ %174, %172 ]
  %156 = phi i8 [ 1, %152 ], [ %173, %172 ]
  %157 = sub i64 %155, %20
  %158 = shl i64 %157, 3
  %159 = sub i64 %158, %10
  br i1 %153, label %165, label %172

160:                                              ; preds = %172
  %161 = and i8 %173, 1
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %280, label %176

163:                                              ; preds = %165
  %164 = icmp eq i64 %171, %148
  br i1 %164, label %172, label %165

165:                                              ; preds = %154, %163
  %166 = phi i64 [ %171, %163 ], [ %86, %154 ]
  %167 = add i64 %159, %166
  %168 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %167
  %169 = load i8, i8* %168, align 1, !range !3
  %170 = icmp eq i8 %169, 0
  %171 = add i64 %166, 1
  br i1 %170, label %163, label %172

172:                                              ; preds = %165, %163, %154
  %173 = phi i8 [ %156, %154 ], [ 0, %165 ], [ %156, %163 ]
  %174 = add nuw i64 %155, 1
  %175 = icmp eq i64 %174, %142
  br i1 %175, label %160, label %154

176:                                              ; preds = %150, %160
  %177 = shl i64 %142, 1
  %178 = icmp ult i64 %73, %177
  br i1 %178, label %179, label %263

179:                                              ; preds = %176
  %180 = load %class.anon.286*, %class.anon.286** %42, align 8
  %181 = getelementptr inbounds %class.anon.286, %class.anon.286* %180, i64 0, i32 0
  %182 = shl i64 %148, 1
  %183 = icmp ult i64 %96, %182
  %184 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %181, align 8
  %185 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %184, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %184, i64 0, i32 0, i32 4
  %188 = load i64, i64* %187, align 8
  %189 = add i64 %87, %182
  %190 = add i64 %97, %182
  %191 = and i64 %189, 2
  %192 = icmp eq i64 %191, 0
  %193 = icmp ult i64 %190, 3
  br label %194

194:                                              ; preds = %225, %179
  %195 = phi float [ 1.000000e+10, %179 ], [ %226, %225 ]
  %196 = phi float [ 0.000000e+00, %179 ], [ %227, %225 ]
  %197 = phi i64 [ %73, %179 ], [ %228, %225 ]
  %198 = mul i64 %188, %197
  %199 = getelementptr inbounds i8, i8* %186, i64 %198
  %200 = ptrtoint i8* %199 to i64
  %201 = and i64 %200, 63
  %202 = icmp eq i64 %201, 0
  tail call void @llvm.assume(i1 %202) #8
  %203 = bitcast i8* %199 to float*
  br i1 %183, label %204, label %225

204:                                              ; preds = %194
  br i1 %192, label %219, label %205

205:                                              ; preds = %204, %205
  %206 = phi float [ %213, %205 ], [ %195, %204 ]
  %207 = phi float [ %215, %205 ], [ %196, %204 ]
  %208 = phi i64 [ %216, %205 ], [ %96, %204 ]
  %209 = phi i64 [ %217, %205 ], [ %191, %204 ]
  %210 = getelementptr inbounds float, float* %203, i64 %208
  %211 = load float, float* %210, align 4
  %212 = fcmp olt float %211, %206
  %213 = select i1 %212, float %211, float %206
  %214 = fcmp olt float %207, %211
  %215 = select i1 %214, float %211, float %207
  %216 = add nuw i64 %208, 1
  %217 = add i64 %209, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %205, !llvm.loop !405

219:                                              ; preds = %205, %204
  %220 = phi float [ %195, %204 ], [ %213, %205 ]
  %221 = phi float [ %196, %204 ], [ %215, %205 ]
  %222 = phi i64 [ %96, %204 ], [ %216, %205 ]
  %223 = phi float [ undef, %204 ], [ %213, %205 ]
  %224 = phi float [ undef, %204 ], [ %215, %205 ]
  br i1 %193, label %225, label %230

225:                                              ; preds = %219, %230, %194
  %226 = phi float [ %195, %194 ], [ %223, %219 ], [ %258, %230 ]
  %227 = phi float [ %196, %194 ], [ %224, %219 ], [ %260, %230 ]
  %228 = add nuw i64 %197, 1
  %229 = icmp ult i64 %228, %177
  br i1 %229, label %194, label %263

230:                                              ; preds = %219, %230
  %231 = phi float [ %258, %230 ], [ %220, %219 ]
  %232 = phi float [ %260, %230 ], [ %221, %219 ]
  %233 = phi i64 [ %261, %230 ], [ %222, %219 ]
  %234 = getelementptr inbounds float, float* %203, i64 %233
  %235 = load float, float* %234, align 4
  %236 = fcmp olt float %235, %231
  %237 = select i1 %236, float %235, float %231
  %238 = fcmp olt float %232, %235
  %239 = select i1 %238, float %235, float %232
  %240 = add nuw i64 %233, 1
  %241 = getelementptr inbounds float, float* %203, i64 %240
  %242 = load float, float* %241, align 4
  %243 = fcmp olt float %242, %237
  %244 = select i1 %243, float %242, float %237
  %245 = fcmp olt float %239, %242
  %246 = select i1 %245, float %242, float %239
  %247 = add nuw i64 %233, 2
  %248 = getelementptr inbounds float, float* %203, i64 %247
  %249 = load float, float* %248, align 4
  %250 = fcmp olt float %249, %244
  %251 = select i1 %250, float %249, float %244
  %252 = fcmp olt float %246, %249
  %253 = select i1 %252, float %249, float %246
  %254 = add nuw i64 %233, 3
  %255 = getelementptr inbounds float, float* %203, i64 %254
  %256 = load float, float* %255, align 4
  %257 = fcmp olt float %256, %251
  %258 = select i1 %257, float %256, float %251
  %259 = fcmp olt float %253, %256
  %260 = select i1 %259, float %256, float %253
  %261 = add nuw i64 %233, 4
  %262 = icmp ult i64 %261, %182
  br i1 %262, label %230, label %225

263:                                              ; preds = %225, %176
  %264 = phi float [ 1.000000e+10, %176 ], [ %226, %225 ]
  %265 = phi float [ 0.000000e+00, %176 ], [ %227, %225 ]
  %266 = fsub float %265, %264
  %267 = load float*, float** %43, align 8
  %268 = load float, float* %267, align 4
  %269 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %95, i64 0, i64 %132, i32 1
  %270 = load float, float* %269, align 4
  %271 = fmul float %268, %270
  %272 = fcmp ogt float %266, %271
  br i1 %272, label %280, label %273

273:                                              ; preds = %263
  %274 = mul nuw nsw i64 %147, %141
  %275 = icmp ult i64 %274, %134
  br i1 %275, label %280, label %276

276:                                              ; preds = %273
  %277 = fmul float %264, 0x4004CF2460000000
  %278 = fadd float %277, 0x400F734AA0000000
  %279 = fdiv float %94, %278
  br label %280

280:                                              ; preds = %263, %273, %276, %160, %144, %131
  %281 = phi i32 [ %135, %131 ], [ %135, %144 ], [ %135, %160 ], [ %135, %263 ], [ %137, %276 ], [ %135, %273 ]
  %282 = phi i64 [ %134, %131 ], [ %134, %144 ], [ %134, %160 ], [ %134, %263 ], [ %274, %276 ], [ %134, %273 ]
  %283 = phi float [ %133, %131 ], [ %133, %144 ], [ %133, %160 ], [ %133, %263 ], [ %279, %276 ], [ %133, %273 ]
  %284 = add nuw nsw i64 %132, 1
  %285 = icmp eq i64 %284, 18
  br i1 %285, label %98, label %131

286:                                              ; preds = %361
  br i1 %106, label %287, label %437

287:                                              ; preds = %286
  %288 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %101
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i64
  %291 = add i64 %86, %290
  %292 = icmp ult i64 %86, %291
  %293 = and i64 %290, 224
  %294 = add nsw i64 %293, -32
  %295 = lshr exact i64 %294, 5
  %296 = add nuw nsw i64 %295, 1
  %297 = or i64 %101, 2
  %298 = icmp eq i64 %297, 26
  %299 = and i64 %290, 224
  %300 = add i64 %86, %299
  %301 = and i64 %296, 3
  %302 = icmp ult i64 %294, 96
  %303 = sub nsw i64 %296, %301
  %304 = icmp eq i64 %301, 0
  %305 = icmp eq i64 %299, %290
  br label %372

306:                                              ; preds = %107, %361
  %307 = phi i64 [ %53, %107 ], [ %362, %361 ]
  br i1 %112, label %308, label %361

308:                                              ; preds = %306
  %309 = sub i64 %307, %20
  %310 = shl i64 %309, 3
  %311 = sub i64 %310, %10
  %312 = sub nuw i64 %307, %53
  %313 = mul i64 %312, %30
  br i1 %119, label %314, label %359

314:                                              ; preds = %308
  br i1 %127, label %344, label %315

315:                                              ; preds = %314, %315
  %316 = phi i64 [ %341, %315 ], [ 0, %314 ]
  %317 = phi i64 [ %342, %315 ], [ %128, %314 ]
  %318 = add i64 %86, %316
  %319 = add i64 %311, %318
  %320 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %319
  %321 = bitcast i8* %320 to <4 x i8>*
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %321, align 1
  %322 = getelementptr inbounds i8, i8* %320, i64 4
  %323 = bitcast i8* %322 to <4 x i8>*
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %323, align 1
  %324 = add i64 %318, %313
  %325 = getelementptr inbounds float, float* %68, i64 %324
  %326 = bitcast float* %325 to <4 x float>*
  store <4 x float> %123, <4 x float>* %326, align 4
  %327 = getelementptr inbounds float, float* %325, i64 4
  %328 = bitcast float* %327 to <4 x float>*
  store <4 x float> %125, <4 x float>* %328, align 4
  %329 = or i64 %316, 8
  %330 = add i64 %86, %329
  %331 = add i64 %311, %330
  %332 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %331
  %333 = bitcast i8* %332 to <4 x i8>*
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %333, align 1
  %334 = getelementptr inbounds i8, i8* %332, i64 4
  %335 = bitcast i8* %334 to <4 x i8>*
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %335, align 1
  %336 = add i64 %330, %313
  %337 = getelementptr inbounds float, float* %68, i64 %336
  %338 = bitcast float* %337 to <4 x float>*
  store <4 x float> %123, <4 x float>* %338, align 4
  %339 = getelementptr inbounds float, float* %337, i64 4
  %340 = bitcast float* %339 to <4 x float>*
  store <4 x float> %125, <4 x float>* %340, align 4
  %341 = add i64 %316, 16
  %342 = add i64 %317, -2
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %344, label %315, !llvm.loop !406

344:                                              ; preds = %315, %314
  %345 = phi i64 [ 0, %314 ], [ %341, %315 ]
  br i1 %129, label %358, label %346

346:                                              ; preds = %344
  %347 = add i64 %86, %345
  %348 = add i64 %311, %347
  %349 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %348
  %350 = bitcast i8* %349 to <4 x i8>*
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %350, align 1
  %351 = getelementptr inbounds i8, i8* %349, i64 4
  %352 = bitcast i8* %351 to <4 x i8>*
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %352, align 1
  %353 = add i64 %347, %313
  %354 = getelementptr inbounds float, float* %68, i64 %353
  %355 = bitcast float* %354 to <4 x float>*
  store <4 x float> %123, <4 x float>* %355, align 4
  %356 = getelementptr inbounds float, float* %354, i64 4
  %357 = bitcast float* %356 to <4 x float>*
  store <4 x float> %125, <4 x float>* %357, align 4
  br label %358

358:                                              ; preds = %344, %346
  br i1 %130, label %361, label %359

359:                                              ; preds = %308, %358
  %360 = phi i64 [ %86, %308 ], [ %121, %358 ]
  br label %364

361:                                              ; preds = %364, %358, %306
  %362 = add nuw i64 %307, 1
  %363 = icmp ult i64 %362, %105
  br i1 %363, label %306, label %286

364:                                              ; preds = %359, %364
  %365 = phi i64 [ %370, %364 ], [ %360, %359 ]
  %366 = add i64 %311, %365
  %367 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %366
  store i8 1, i8* %367, align 1
  %368 = add i64 %365, %313
  %369 = getelementptr inbounds float, float* %68, i64 %368
  store float %283, float* %369, align 4
  %370 = add nuw i64 %365, 1
  %371 = icmp ult i64 %370, %111
  br i1 %371, label %364, label %361, !llvm.loop !407

372:                                              ; preds = %287, %428
  %373 = phi i64 [ %53, %287 ], [ %429, %428 ]
  br i1 %292, label %374, label %428

374:                                              ; preds = %372
  %375 = sub nuw i64 %373, %53
  %376 = mul i64 %375, %34
  br i1 %298, label %377, label %426

377:                                              ; preds = %374
  br i1 %302, label %411, label %378

378:                                              ; preds = %377, %378
  %379 = phi i64 [ %408, %378 ], [ 0, %377 ]
  %380 = phi i64 [ %409, %378 ], [ %303, %377 ]
  %381 = add i64 %86, %379
  %382 = add i64 %381, %376
  %383 = getelementptr inbounds i8, i8* %57, i64 %382
  %384 = bitcast i8* %383 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %384, align 1
  %385 = getelementptr inbounds i8, i8* %383, i64 16
  %386 = bitcast i8* %385 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %386, align 1
  %387 = or i64 %379, 32
  %388 = add i64 %86, %387
  %389 = add i64 %388, %376
  %390 = getelementptr inbounds i8, i8* %57, i64 %389
  %391 = bitcast i8* %390 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %391, align 1
  %392 = getelementptr inbounds i8, i8* %390, i64 16
  %393 = bitcast i8* %392 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %393, align 1
  %394 = or i64 %379, 64
  %395 = add i64 %86, %394
  %396 = add i64 %395, %376
  %397 = getelementptr inbounds i8, i8* %57, i64 %396
  %398 = bitcast i8* %397 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %398, align 1
  %399 = getelementptr inbounds i8, i8* %397, i64 16
  %400 = bitcast i8* %399 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %400, align 1
  %401 = or i64 %379, 96
  %402 = add i64 %86, %401
  %403 = add i64 %402, %376
  %404 = getelementptr inbounds i8, i8* %57, i64 %403
  %405 = bitcast i8* %404 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %405, align 1
  %406 = getelementptr inbounds i8, i8* %404, i64 16
  %407 = bitcast i8* %406 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %407, align 1
  %408 = add i64 %379, 128
  %409 = add i64 %380, -4
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %411, label %378, !llvm.loop !408

411:                                              ; preds = %378, %377
  %412 = phi i64 [ 0, %377 ], [ %408, %378 ]
  br i1 %304, label %425, label %413

413:                                              ; preds = %411, %413
  %414 = phi i64 [ %422, %413 ], [ %412, %411 ]
  %415 = phi i64 [ %423, %413 ], [ %301, %411 ]
  %416 = add i64 %86, %414
  %417 = add i64 %416, %376
  %418 = getelementptr inbounds i8, i8* %57, i64 %417
  %419 = bitcast i8* %418 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %419, align 1
  %420 = getelementptr inbounds i8, i8* %418, i64 16
  %421 = bitcast i8* %420 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %421, align 1
  %422 = add i64 %414, 32
  %423 = add i64 %415, -1
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %425, label %413, !llvm.loop !409

425:                                              ; preds = %413, %411
  br i1 %305, label %428, label %426

426:                                              ; preds = %374, %425
  %427 = phi i64 [ %86, %374 ], [ %300, %425 ]
  br label %431

428:                                              ; preds = %431, %425, %372
  %429 = add nuw i64 %373, 1
  %430 = icmp ult i64 %429, %105
  br i1 %430, label %372, label %437

431:                                              ; preds = %426, %431
  %432 = phi i64 [ %435, %431 ], [ %427, %426 ]
  %433 = add i64 %432, %376
  %434 = getelementptr inbounds i8, i8* %57, i64 %433
  store i8 4, i8* %434, align 1
  %435 = add nuw i64 %432, 1
  %436 = icmp ult i64 %435, %291
  br i1 %436, label %431, label %428, !llvm.loop !410

437:                                              ; preds = %428, %98, %286, %84
  %438 = add nuw i64 %86, 1
  %439 = icmp ult i64 %438, %19
  %440 = add i64 %85, 1
  br i1 %439, label %84, label %74
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_9E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_9E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.293**
  %6 = load %class.anon.293*, %class.anon.293** %5, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.293, %class.anon.293* %6, i64 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %9, align 8
  %11 = urem i64 %7, %10
  %12 = udiv i64 %7, %10
  %13 = shl nuw nsw i64 %11, 6
  %14 = add nuw nsw i64 %13, 64
  %15 = getelementptr inbounds %class.anon.293, %class.anon.293* %6, i64 0, i32 1
  %16 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %15, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %16, i64 0, i32 0, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = icmp ugt i64 %14, %19
  %21 = select i1 %20, i64 %19, i64 %14
  %22 = shl nuw nsw i64 %12, 6
  %23 = add nuw nsw i64 %22, 64
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %16, i64 0, i32 0, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = icmp ugt i64 %23, %26
  %28 = select i1 %27, i64 %26, i64 %23
  %29 = icmp ult i64 %22, %28
  %30 = icmp ult i64 %13, %21
  %31 = getelementptr inbounds %class.anon.293, %class.anon.293* %6, i64 0, i32 2
  br i1 %29, label %32, label %54

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %16, i64 0, i32 0, i64 0, i32 0, i32 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %16, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #8
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %16, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = ptrtoint i8* %41 to i64
  %43 = and i64 %42, 63
  %44 = icmp eq i64 %43, 0
  tail call void @llvm.assume(i1 %44) #8
  %45 = mul i64 %10, %12
  %46 = shl i64 %45, 6
  %47 = shl nuw nsw i64 %7, 6
  %48 = add i64 %21, %46
  %49 = and i64 %21, 1
  %50 = icmp eq i64 %49, 0
  %51 = or i64 %13, 1
  %52 = or i64 %47, 1
  %53 = icmp eq i64 %48, %52
  br label %78

54:                                               ; preds = %110, %3
  %55 = phi <2 x float> [ zeroinitializer, %3 ], [ %111, %110 ]
  %56 = extractelement <2 x float> %55, i32 0
  %57 = fsub float -0.000000e+00, %56
  %58 = extractelement <2 x float> %55, i32 1
  %59 = fadd float %58, 0x3E112E0BE0000000
  %60 = fdiv float %57, %59
  %61 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %62 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %61, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %61, i64 0, i32 8, i32 0, i32 0, i32 4
  %65 = load i64, i64* %64, align 8
  %66 = mul i64 %65, %12
  %67 = getelementptr inbounds i8, i8* %63, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #8
  %71 = getelementptr inbounds i8, i8* %67, i64 %11
  %72 = tail call float @llvm.round.f32(float %60) #8
  %73 = fcmp olt float %72, 1.270000e+02
  %74 = select i1 %73, float %72, float 1.270000e+02
  %75 = fcmp ogt float %74, -1.280000e+02
  %76 = select i1 %75, float %74, float -1.280000e+02
  %77 = fptosi float %76 to i8
  store i8 %77, i8* %71, align 1
  br i1 %29, label %144, label %193

78:                                               ; preds = %110, %32
  %79 = phi i64 [ %22, %32 ], [ %112, %110 ]
  %80 = phi <2 x float> [ zeroinitializer, %32 ], [ %111, %110 ]
  %81 = mul i64 %79, %34
  %82 = getelementptr inbounds i8, i8* %36, i64 %81
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #8
  %86 = bitcast i8* %82 to float*
  %87 = getelementptr inbounds i8, i8* %41, i64 %81
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #8
  %91 = bitcast i8* %87 to float*
  br i1 %30, label %92, label %110

92:                                               ; preds = %78
  br i1 %50, label %106, label %93

93:                                               ; preds = %92
  %94 = getelementptr inbounds float, float* %86, i64 %13
  %95 = load float, float* %94, align 64, !alias.scope !411
  %96 = fmul float %95, 0x3F88618620000000
  %97 = getelementptr inbounds float, float* %91, i64 %13
  %98 = load float, float* %97, align 64, !alias.scope !414
  %99 = fsub float 0.000000e+00, %98
  %100 = insertelement <2 x float> undef, float %96, i32 0
  %101 = shufflevector <2 x float> %100, <2 x float> undef, <2 x i32> zeroinitializer
  %102 = insertelement <2 x float> undef, float %99, i32 0
  %103 = insertelement <2 x float> %102, float %96, i32 1
  %104 = fmul <2 x float> %101, %103
  %105 = fadd <2 x float> %80, %104
  br label %106

106:                                              ; preds = %93, %92
  %107 = phi i64 [ %51, %93 ], [ %13, %92 ]
  %108 = phi <2 x float> [ %105, %93 ], [ %80, %92 ]
  %109 = phi <2 x float> [ %105, %93 ], [ undef, %92 ]
  br i1 %53, label %110, label %114

110:                                              ; preds = %106, %114, %78
  %111 = phi <2 x float> [ %80, %78 ], [ %109, %106 ], [ %141, %114 ]
  %112 = add nuw i64 %79, 1
  %113 = icmp ult i64 %112, %28
  br i1 %113, label %78, label %54

114:                                              ; preds = %106, %114
  %115 = phi i64 [ %142, %114 ], [ %107, %106 ]
  %116 = phi <2 x float> [ %141, %114 ], [ %108, %106 ]
  %117 = getelementptr inbounds float, float* %86, i64 %115
  %118 = load float, float* %117, align 4, !alias.scope !411
  %119 = fmul float %118, 0x3F88618620000000
  %120 = getelementptr inbounds float, float* %91, i64 %115
  %121 = load float, float* %120, align 4, !alias.scope !414
  %122 = fsub float 0.000000e+00, %121
  %123 = insertelement <2 x float> undef, float %119, i32 0
  %124 = shufflevector <2 x float> %123, <2 x float> undef, <2 x i32> zeroinitializer
  %125 = insertelement <2 x float> undef, float %122, i32 0
  %126 = insertelement <2 x float> %125, float %119, i32 1
  %127 = fmul <2 x float> %124, %126
  %128 = fadd <2 x float> %116, %127
  %129 = add nuw i64 %115, 1
  %130 = getelementptr inbounds float, float* %86, i64 %129
  %131 = load float, float* %130, align 4, !alias.scope !411
  %132 = fmul float %131, 0x3F88618620000000
  %133 = getelementptr inbounds float, float* %91, i64 %129
  %134 = load float, float* %133, align 4, !alias.scope !414
  %135 = fsub float 0.000000e+00, %134
  %136 = insertelement <2 x float> undef, float %132, i32 0
  %137 = shufflevector <2 x float> %136, <2 x float> undef, <2 x i32> zeroinitializer
  %138 = insertelement <2 x float> undef, float %135, i32 0
  %139 = insertelement <2 x float> %138, float %132, i32 1
  %140 = fmul <2 x float> %137, %139
  %141 = fadd <2 x float> %128, %140
  %142 = add nuw i64 %115, 2
  %143 = icmp ult i64 %142, %21
  br i1 %143, label %114, label %110

144:                                              ; preds = %54
  %145 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %15, align 8
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %145, i64 0, i32 0, i64 0, i32 0, i32 4
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %145, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = ptrtoint i8* %149 to i64
  %151 = and i64 %150, 63
  %152 = icmp eq i64 %151, 0
  tail call void @llvm.assume(i1 %152) #8
  %153 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %145, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = ptrtoint i8* %154 to i64
  %156 = and i64 %155, 63
  %157 = icmp eq i64 %156, 0
  tail call void @llvm.assume(i1 %157) #8
  br label %158

158:                                              ; preds = %189, %144
  %159 = phi i64 [ %22, %144 ], [ %191, %189 ]
  %160 = phi <2 x float> [ zeroinitializer, %144 ], [ %190, %189 ]
  %161 = mul i64 %159, %147
  %162 = getelementptr inbounds i8, i8* %149, i64 %161
  %163 = ptrtoint i8* %162 to i64
  %164 = and i64 %163, 63
  %165 = icmp eq i64 %164, 0
  tail call void @llvm.assume(i1 %165) #8
  %166 = bitcast i8* %162 to float*
  %167 = getelementptr inbounds i8, i8* %154, i64 %161
  %168 = ptrtoint i8* %167 to i64
  %169 = and i64 %168, 63
  %170 = icmp eq i64 %169, 0
  tail call void @llvm.assume(i1 %170) #8
  %171 = bitcast i8* %167 to float*
  br i1 %30, label %172, label %189

172:                                              ; preds = %158, %172
  %173 = phi i64 [ %187, %172 ], [ %13, %158 ]
  %174 = phi <2 x float> [ %186, %172 ], [ %160, %158 ]
  %175 = getelementptr inbounds float, float* %166, i64 %173
  %176 = load float, float* %175, align 4, !alias.scope !411
  %177 = fmul float %176, 0x3F88618620000000
  %178 = getelementptr inbounds float, float* %171, i64 %173
  %179 = load float, float* %178, align 4, !alias.scope !414
  %180 = fsub float 0.000000e+00, %179
  %181 = insertelement <2 x float> undef, float %177, i32 0
  %182 = shufflevector <2 x float> %181, <2 x float> undef, <2 x i32> zeroinitializer
  %183 = insertelement <2 x float> undef, float %180, i32 0
  %184 = insertelement <2 x float> %183, float %177, i32 1
  %185 = fmul <2 x float> %182, %184
  %186 = fadd <2 x float> %174, %185
  %187 = add nuw i64 %173, 1
  %188 = icmp ult i64 %187, %21
  br i1 %188, label %172, label %189

189:                                              ; preds = %172, %158
  %190 = phi <2 x float> [ %160, %158 ], [ %186, %172 ]
  %191 = add nuw i64 %159, 1
  %192 = icmp ult i64 %191, %28
  br i1 %192, label %158, label %193

193:                                              ; preds = %189, %54
  %194 = phi <2 x float> [ zeroinitializer, %54 ], [ %190, %189 ]
  %195 = extractelement <2 x float> %194, i32 0
  %196 = fsub float -0.000000e+00, %195
  %197 = extractelement <2 x float> %194, i32 1
  %198 = fadd float %197, 0x3E112E0BE0000000
  %199 = fdiv float %196, %198
  %200 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %31, align 8
  %201 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %200, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %202 = load i8*, i8** %201, align 8
  %203 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %200, i64 0, i32 8, i32 1, i32 0, i32 4
  %204 = load i64, i64* %203, align 8
  %205 = mul i64 %204, %12
  %206 = getelementptr inbounds i8, i8* %202, i64 %205
  %207 = ptrtoint i8* %206 to i64
  %208 = and i64 %207, 63
  %209 = icmp eq i64 %208, 0
  tail call void @llvm.assume(i1 %209) #8
  %210 = getelementptr inbounds i8, i8* %206, i64 %11
  %211 = tail call float @llvm.round.f32(float %199) #8
  %212 = fcmp olt float %211, 1.270000e+02
  %213 = select i1 %212, float %211, float 1.270000e+02
  %214 = fcmp ogt float %213, -1.280000e+02
  %215 = select i1 %214, float %213, float -1.280000e+02
  %216 = fptosi float %215 to i8
  store i8 %216, i8* %210, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_10E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_10E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.294**
  %6 = load %class.anon.294*, %class.anon.294** %5, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.294, %class.anon.294* %6, i64 0, i32 0
  %9 = getelementptr inbounds %class.anon.294, %class.anon.294* %6, i64 0, i32 1
  %10 = getelementptr inbounds %class.anon.294, %class.anon.294* %6, i64 0, i32 2
  %11 = shl nuw nsw i64 %7, 2
  %12 = add nuw nsw i64 %11, 16
  %13 = getelementptr inbounds %class.anon.294, %class.anon.294* %6, i64 0, i32 3
  %14 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %13, align 8
  %15 = add nuw nsw i64 %11, 17
  %16 = add nuw nsw i64 %11, 18
  %17 = add nuw nsw i64 %11, 19
  br label %18

18:                                               ; preds = %193, %3
  %19 = phi %"struct.jxl::FrameDimensions"* [ %14, %3 ], [ %194, %193 ]
  %20 = phi i64 [ 0, %3 ], [ %195, %193 ]
  %21 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %22 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %21, i64 0, i32 0, i64 0, i32 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = mul i64 %23, %7
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %21, i64 0, i32 0, i64 %20, i32 0, i32 5, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = ptrtoint i8* %26 to i64
  %28 = and i64 %27, 63
  %29 = icmp eq i64 %28, 0
  tail call void @llvm.assume(i1 %29) #8
  %30 = getelementptr inbounds i8, i8* %26, i64 %24
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #8
  %34 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 4
  %36 = load i64, i64* %35, align 8
  %37 = mul i64 %36, %7
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 %20, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #8
  %43 = getelementptr inbounds i8, i8* %39, i64 %37
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #8
  %47 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 0, i32 0, i64 0, i32 0, i32 4
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 0, i32 0, i64 %20, i32 0, i32 5, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #8
  %55 = mul i64 %49, %12
  %56 = getelementptr inbounds i8, i8* %51, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 60
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #8
  %60 = mul i64 %49, %15
  %61 = getelementptr inbounds i8, i8* %51, i64 %60
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #8
  %65 = mul i64 %49, %16
  %66 = getelementptr inbounds i8, i8* %51, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 62
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #8
  %70 = mul i64 %49, %17
  %71 = getelementptr inbounds i8, i8* %51, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #8
  %75 = bitcast i8* %30 to float*
  %76 = bitcast i8* %43 to float*
  %77 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %19, i64 0, i32 6
  %78 = load i64, i64* %77, align 8
  %79 = icmp ugt i64 %78, 3
  br i1 %79, label %80, label %193

80:                                               ; preds = %18
  %81 = getelementptr inbounds i8, i8* %61, i64 64
  %82 = bitcast i8* %81 to float*
  %83 = getelementptr inbounds i8, i8* %66, i64 64
  %84 = bitcast i8* %83 to float*
  %85 = getelementptr inbounds i8, i8* %71, i64 64
  %86 = bitcast i8* %85 to float*
  %87 = getelementptr inbounds i8, i8* %56, i64 64
  %88 = bitcast i8* %87 to float*
  br label %89

89:                                               ; preds = %89, %80
  %90 = phi i64 [ 0, %80 ], [ %187, %89 ]
  %91 = shl i64 %90, 2
  %92 = getelementptr inbounds float, float* %88, i64 %91
  %93 = bitcast float* %92 to <2 x float>*
  %94 = load <2 x float>, <2 x float>* %93, align 4, !alias.scope !417
  %95 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %94)
  %96 = extractelement <2 x float> %95, i32 0
  %97 = extractelement <2 x float> %95, i32 1
  %98 = fadd float %96, %97
  %99 = fcmp ogt float %96, %97
  %100 = select i1 %99, float %96, float %97
  %101 = getelementptr inbounds float, float* %92, i64 2
  %102 = load float, float* %101, align 4, !alias.scope !417
  %103 = tail call float @llvm.fabs.f32(float %102) #8
  %104 = fadd float %98, %103
  %105 = fcmp ogt float %100, %103
  %106 = select i1 %105, float %100, float %103
  %107 = getelementptr inbounds float, float* %92, i64 3
  %108 = load float, float* %107, align 4, !alias.scope !417
  %109 = tail call float @llvm.fabs.f32(float %108) #8
  %110 = fadd float %104, %109
  %111 = fcmp ogt float %106, %109
  %112 = select i1 %111, float %106, float %109
  %113 = getelementptr inbounds float, float* %82, i64 %91
  %114 = load float, float* %113, align 16, !alias.scope !417
  %115 = tail call float @llvm.fabs.f32(float %114) #8
  %116 = fadd float %110, %115
  %117 = fcmp ogt float %112, %115
  %118 = select i1 %117, float %112, float %115
  %119 = getelementptr inbounds float, float* %113, i64 1
  %120 = load float, float* %119, align 4, !alias.scope !417
  %121 = tail call float @llvm.fabs.f32(float %120) #8
  %122 = fadd float %116, %121
  %123 = fcmp ogt float %118, %121
  %124 = select i1 %123, float %118, float %121
  %125 = getelementptr inbounds float, float* %113, i64 2
  %126 = load float, float* %125, align 8, !alias.scope !417
  %127 = tail call float @llvm.fabs.f32(float %126) #8
  %128 = fadd float %122, %127
  %129 = fcmp ogt float %124, %127
  %130 = select i1 %129, float %124, float %127
  %131 = getelementptr inbounds float, float* %113, i64 3
  %132 = load float, float* %131, align 4, !alias.scope !417
  %133 = tail call float @llvm.fabs.f32(float %132) #8
  %134 = fadd float %128, %133
  %135 = fcmp ogt float %130, %133
  %136 = select i1 %135, float %130, float %133
  %137 = getelementptr inbounds float, float* %84, i64 %91
  %138 = load float, float* %137, align 4, !alias.scope !417
  %139 = tail call float @llvm.fabs.f32(float %138) #8
  %140 = fadd float %134, %139
  %141 = fcmp ogt float %136, %139
  %142 = select i1 %141, float %136, float %139
  %143 = getelementptr inbounds float, float* %137, i64 1
  %144 = load float, float* %143, align 4, !alias.scope !417
  %145 = tail call float @llvm.fabs.f32(float %144) #8
  %146 = fadd float %140, %145
  %147 = fcmp ogt float %142, %145
  %148 = select i1 %147, float %142, float %145
  %149 = getelementptr inbounds float, float* %137, i64 2
  %150 = load float, float* %149, align 4, !alias.scope !417
  %151 = tail call float @llvm.fabs.f32(float %150) #8
  %152 = fadd float %146, %151
  %153 = fcmp ogt float %148, %151
  %154 = select i1 %153, float %148, float %151
  %155 = getelementptr inbounds float, float* %137, i64 3
  %156 = load float, float* %155, align 4, !alias.scope !417
  %157 = tail call float @llvm.fabs.f32(float %156) #8
  %158 = fadd float %152, %157
  %159 = fcmp ogt float %154, %157
  %160 = select i1 %159, float %154, float %157
  %161 = getelementptr inbounds float, float* %86, i64 %91
  %162 = load float, float* %161, align 16, !alias.scope !417
  %163 = tail call float @llvm.fabs.f32(float %162) #8
  %164 = fadd float %158, %163
  %165 = fcmp ogt float %160, %163
  %166 = select i1 %165, float %160, float %163
  %167 = getelementptr inbounds float, float* %161, i64 1
  %168 = load float, float* %167, align 4, !alias.scope !417
  %169 = tail call float @llvm.fabs.f32(float %168) #8
  %170 = fadd float %164, %169
  %171 = fcmp ogt float %166, %169
  %172 = select i1 %171, float %166, float %169
  %173 = getelementptr inbounds float, float* %161, i64 2
  %174 = load float, float* %173, align 8, !alias.scope !417
  %175 = tail call float @llvm.fabs.f32(float %174) #8
  %176 = fadd float %170, %175
  %177 = fcmp ogt float %172, %175
  %178 = select i1 %177, float %172, float %175
  %179 = getelementptr inbounds float, float* %161, i64 3
  %180 = load float, float* %179, align 4, !alias.scope !417
  %181 = tail call float @llvm.fabs.f32(float %180) #8
  %182 = fadd float %176, %181
  %183 = fcmp ogt float %178, %181
  %184 = select i1 %183, float %178, float %181
  %185 = getelementptr inbounds float, float* %76, i64 %90
  store float %182, float* %185, align 4
  %186 = getelementptr inbounds float, float* %75, i64 %90
  store float %184, float* %186, align 4
  %187 = add nuw nsw i64 %90, 1
  %188 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %13, align 8
  %189 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %188, i64 0, i32 6
  %190 = load i64, i64* %189, align 8
  %191 = lshr i64 %190, 2
  %192 = icmp ult i64 %187, %191
  br i1 %192, label %89, label %193

193:                                              ; preds = %89, %18
  %194 = phi %"struct.jxl::FrameDimensions"* [ %19, %18 ], [ %188, %89 ]
  %195 = add nuw nsw i64 %20, 1
  %196 = icmp eq i64 %195, 3
  br i1 %196, label %197, label %18

197:                                              ; preds = %193
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #10

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_11E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR12_GLOBAL__N_110HeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE4$_11E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.296**
  %7 = load %class.anon.296*, %class.anon.296** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 0
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = urem i64 %8, %11
  %13 = udiv i64 %8, %11
  %14 = shl nuw nsw i64 %12, 3
  %15 = add nuw nsw i64 %14, 8
  %16 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 1
  %17 = bitcast %"class.jxl::Plane.97"** %16 to %"struct.jxl::PlaneBase"**
  %18 = load %"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"** %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i64 %15, %21
  %23 = select i1 %22, i64 %21, i64 %15
  %24 = shl nuw nsw i64 %13, 3
  %25 = add nuw nsw i64 %24, 8
  %26 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %18, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ugt i64 %25, %28
  %30 = select i1 %29, i64 %28, i64 %25
  %31 = getelementptr inbounds %"struct.jxl::PlaneBase", %"struct.jxl::PlaneBase"* %18, i64 0, i32 4
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 2
  %34 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 2
  %35 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %34, align 8
  %36 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 7, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %38) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 0, i64 64, i1 false) #8
  %39 = icmp ult i64 %24, %30
  br i1 %39, label %40, label %447

40:                                               ; preds = %3
  %41 = bitcast %"struct.jxl::PlaneBase"* %18 to %"class.jxl::Plane.97"*
  %42 = icmp ult i64 %14, %23
  %43 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 3
  %44 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 4
  %45 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 5
  %46 = getelementptr inbounds %class.anon.296, %class.anon.296* %7, i64 0, i32 6
  %47 = mul i64 %11, %13
  %48 = shl i64 %47, 4
  %49 = shl nuw nsw i64 %8, 4
  %50 = xor i64 %49, -1
  %51 = add i64 %48, %50
  br label %52

52:                                               ; preds = %83, %40
  %53 = phi i64 [ %90, %83 ], [ 0, %40 ]
  %54 = phi i64 [ %89, %83 ], [ %32, %40 ]
  %55 = phi %"class.jxl::Plane.97"* [ %87, %83 ], [ %41, %40 ]
  %56 = phi i64 [ %86, %83 ], [ %37, %40 ]
  %57 = phi %"struct.jxl::PassesSharedState"* [ %84, %83 ], [ %35, %40 ]
  %58 = phi i64 [ %81, %83 ], [ %24, %40 ]
  %59 = shl i64 %53, 3
  %60 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %57, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = mul i64 %58, %56
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #8
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = mul i64 %58, %54
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #8
  %74 = bitcast i8* %70 to float*
  br i1 %42, label %75, label %80

75:                                               ; preds = %52
  %76 = sub nuw i64 %58, %24
  %77 = shl i64 %76, 3
  %78 = sub i64 %77, %14
  %79 = shl i64 %58, 1
  br label %91

80:                                               ; preds = %443, %52
  %81 = add nuw i64 %58, 1
  %82 = icmp ult i64 %81, %30
  br i1 %82, label %83, label %447

83:                                               ; preds = %80
  %84 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %34, align 8
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %84, i64 0, i32 7, i32 0, i32 4
  %86 = load i64, i64* %85, align 8
  %87 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %16, align 8
  %88 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %87, i64 0, i32 0, i32 4
  %89 = load i64, i64* %88, align 8
  %90 = add nuw i64 %53, 1
  br label %52

91:                                               ; preds = %443, %75
  %92 = phi i64 [ %446, %443 ], [ 0, %75 ]
  %93 = phi i64 [ %444, %443 ], [ %14, %75 ]
  %94 = mul i64 %92, -2
  %95 = add i64 %59, %92
  %96 = add i64 %78, %93
  %97 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1, !range !3
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %443

100:                                              ; preds = %91
  %101 = load float*, float** %43, align 8
  %102 = load float, float* %101, align 4
  %103 = load [18 x %"struct.std::__1::pair.260"]*, [18 x %"struct.std::__1::pair.260"]** %44, align 8
  %104 = shl i64 %93, 1
  %105 = add i64 %51, %94
  br label %139

106:                                              ; preds = %288
  %107 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %34, align 8
  %108 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %107, i64 0, i32 3
  tail call void @_ZN3jxl15AcStrategyImage3SetEmmNS_10AcStrategy4TypeE(%"class.jxl::AcStrategyImage"* %108, i64 %93, i64 %58, i32 %289) #8
  %109 = zext i32 %289 to i64
  %110 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = add i64 %58, %112
  %114 = icmp ult i64 %58, %113
  br i1 %114, label %115, label %443

115:                                              ; preds = %106
  %116 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %109
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = add i64 %93, %118
  %120 = icmp ult i64 %93, %119
  %121 = and i64 %118, 248
  %122 = add nsw i64 %121, -8
  %123 = lshr exact i64 %122, 3
  %124 = add nuw nsw i64 %123, 1
  %125 = lshr i64 786431, %109
  %126 = and i64 %125, 1
  %127 = icmp eq i64 %126, 0
  %128 = and i64 %118, 248
  %129 = add i64 %93, %128
  %130 = insertelement <4 x float> undef, float %291, i32 0
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> zeroinitializer
  %132 = insertelement <4 x float> undef, float %291, i32 0
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> zeroinitializer
  %134 = and i64 %124, 3
  %135 = icmp ult i64 %122, 24
  %136 = sub nsw i64 %124, %134
  %137 = icmp eq i64 %134, 0
  %138 = icmp eq i64 %128, %118
  br label %294

139:                                              ; preds = %288, %100
  %140 = phi i64 [ 0, %100 ], [ %292, %288 ]
  %141 = phi float [ %102, %100 ], [ %291, %288 ]
  %142 = phi i64 [ 1, %100 ], [ %290, %288 ]
  %143 = phi i32 [ 0, %100 ], [ %289, %288 ]
  %144 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %103, i64 0, i64 %140, i32 0
  %145 = load i32, i32* %144, align 4
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = add i64 %58, %149
  %151 = icmp ugt i64 %150, %30
  br i1 %151, label %288, label %152

152:                                              ; preds = %139
  %153 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %146
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  %156 = add i64 %93, %155
  %157 = icmp ugt i64 %156, %23
  br i1 %157, label %288, label %158

158:                                              ; preds = %152
  %159 = icmp ult i64 %58, %150
  br i1 %159, label %160, label %184

160:                                              ; preds = %158
  %161 = icmp ult i64 %93, %156
  br label %162

162:                                              ; preds = %180, %160
  %163 = phi i64 [ %58, %160 ], [ %182, %180 ]
  %164 = phi i8 [ 1, %160 ], [ %181, %180 ]
  %165 = sub i64 %163, %24
  %166 = shl i64 %165, 3
  %167 = sub i64 %166, %14
  br i1 %161, label %173, label %180

168:                                              ; preds = %180
  %169 = and i8 %181, 1
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %288, label %184

171:                                              ; preds = %173
  %172 = icmp eq i64 %179, %156
  br i1 %172, label %180, label %173

173:                                              ; preds = %162, %171
  %174 = phi i64 [ %179, %171 ], [ %93, %162 ]
  %175 = add i64 %167, %174
  %176 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1, !range !3
  %178 = icmp eq i8 %177, 0
  %179 = add i64 %174, 1
  br i1 %178, label %171, label %180

180:                                              ; preds = %173, %171, %162
  %181 = phi i8 [ %164, %162 ], [ %164, %171 ], [ 0, %173 ]
  %182 = add nuw i64 %163, 1
  %183 = icmp eq i64 %182, %150
  br i1 %183, label %168, label %162

184:                                              ; preds = %168, %158
  %185 = shl i64 %150, 1
  %186 = icmp ult i64 %79, %185
  br i1 %186, label %187, label %271

187:                                              ; preds = %184
  %188 = load %class.anon.295*, %class.anon.295** %45, align 8
  %189 = getelementptr inbounds %class.anon.295, %class.anon.295* %188, i64 0, i32 0
  %190 = shl i64 %156, 1
  %191 = icmp ult i64 %104, %190
  %192 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %189, align 8
  %193 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %192, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %192, i64 0, i32 0, i32 4
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %94, %190
  %198 = add i64 %105, %190
  %199 = and i64 %197, 2
  %200 = icmp eq i64 %199, 0
  %201 = icmp ult i64 %198, 3
  br label %202

202:                                              ; preds = %233, %187
  %203 = phi float [ 1.000000e+10, %187 ], [ %234, %233 ]
  %204 = phi float [ 0.000000e+00, %187 ], [ %235, %233 ]
  %205 = phi i64 [ %79, %187 ], [ %236, %233 ]
  %206 = mul i64 %205, %196
  %207 = getelementptr inbounds i8, i8* %194, i64 %206
  %208 = ptrtoint i8* %207 to i64
  %209 = and i64 %208, 63
  %210 = icmp eq i64 %209, 0
  tail call void @llvm.assume(i1 %210) #8
  %211 = bitcast i8* %207 to float*
  br i1 %191, label %212, label %233

212:                                              ; preds = %202
  br i1 %200, label %227, label %213

213:                                              ; preds = %212, %213
  %214 = phi float [ %221, %213 ], [ %203, %212 ]
  %215 = phi float [ %223, %213 ], [ %204, %212 ]
  %216 = phi i64 [ %224, %213 ], [ %104, %212 ]
  %217 = phi i64 [ %225, %213 ], [ %199, %212 ]
  %218 = getelementptr inbounds float, float* %211, i64 %216
  %219 = load float, float* %218, align 4
  %220 = fcmp olt float %219, %214
  %221 = select i1 %220, float %219, float %214
  %222 = fcmp olt float %215, %219
  %223 = select i1 %222, float %219, float %215
  %224 = add nuw i64 %216, 1
  %225 = add i64 %217, -1
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %213, !llvm.loop !420

227:                                              ; preds = %213, %212
  %228 = phi float [ %203, %212 ], [ %221, %213 ]
  %229 = phi float [ %204, %212 ], [ %223, %213 ]
  %230 = phi i64 [ %104, %212 ], [ %224, %213 ]
  %231 = phi float [ undef, %212 ], [ %221, %213 ]
  %232 = phi float [ undef, %212 ], [ %223, %213 ]
  br i1 %201, label %233, label %238

233:                                              ; preds = %227, %238, %202
  %234 = phi float [ %203, %202 ], [ %231, %227 ], [ %266, %238 ]
  %235 = phi float [ %204, %202 ], [ %232, %227 ], [ %268, %238 ]
  %236 = add nuw i64 %205, 1
  %237 = icmp ult i64 %236, %185
  br i1 %237, label %202, label %271

238:                                              ; preds = %227, %238
  %239 = phi float [ %266, %238 ], [ %228, %227 ]
  %240 = phi float [ %268, %238 ], [ %229, %227 ]
  %241 = phi i64 [ %269, %238 ], [ %230, %227 ]
  %242 = getelementptr inbounds float, float* %211, i64 %241
  %243 = load float, float* %242, align 4
  %244 = fcmp olt float %243, %239
  %245 = select i1 %244, float %243, float %239
  %246 = fcmp olt float %240, %243
  %247 = select i1 %246, float %243, float %240
  %248 = add nuw i64 %241, 1
  %249 = getelementptr inbounds float, float* %211, i64 %248
  %250 = load float, float* %249, align 4
  %251 = fcmp olt float %250, %245
  %252 = select i1 %251, float %250, float %245
  %253 = fcmp olt float %247, %250
  %254 = select i1 %253, float %250, float %247
  %255 = add nuw i64 %241, 2
  %256 = getelementptr inbounds float, float* %211, i64 %255
  %257 = load float, float* %256, align 4
  %258 = fcmp olt float %257, %252
  %259 = select i1 %258, float %257, float %252
  %260 = fcmp olt float %254, %257
  %261 = select i1 %260, float %257, float %254
  %262 = add nuw i64 %241, 3
  %263 = getelementptr inbounds float, float* %211, i64 %262
  %264 = load float, float* %263, align 4
  %265 = fcmp olt float %264, %259
  %266 = select i1 %265, float %264, float %259
  %267 = fcmp olt float %261, %264
  %268 = select i1 %267, float %264, float %261
  %269 = add nuw i64 %241, 4
  %270 = icmp ult i64 %269, %190
  br i1 %270, label %238, label %233

271:                                              ; preds = %233, %184
  %272 = phi float [ 1.000000e+10, %184 ], [ %234, %233 ]
  %273 = phi float [ 0.000000e+00, %184 ], [ %235, %233 ]
  %274 = fsub float %273, %272
  %275 = load float*, float** %46, align 8
  %276 = load float, float* %275, align 4
  %277 = getelementptr inbounds [18 x %"struct.std::__1::pair.260"], [18 x %"struct.std::__1::pair.260"]* %103, i64 0, i64 %140, i32 1
  %278 = load float, float* %277, align 4
  %279 = fmul float %276, %278
  %280 = fcmp ogt float %274, %279
  br i1 %280, label %288, label %281

281:                                              ; preds = %271
  %282 = mul nuw nsw i64 %155, %149
  %283 = icmp ult i64 %282, %142
  br i1 %283, label %288, label %284

284:                                              ; preds = %281
  %285 = fmul float %272, 0x4004CF2460000000
  %286 = fadd float %285, 0x400F734AA0000000
  %287 = fdiv float %102, %286
  br label %288

288:                                              ; preds = %284, %281, %271, %168, %152, %139
  %289 = phi i32 [ %143, %139 ], [ %143, %152 ], [ %143, %168 ], [ %143, %271 ], [ %145, %284 ], [ %143, %281 ]
  %290 = phi i64 [ %142, %139 ], [ %142, %152 ], [ %142, %168 ], [ %142, %271 ], [ %282, %284 ], [ %142, %281 ]
  %291 = phi float [ %141, %139 ], [ %141, %152 ], [ %141, %168 ], [ %141, %271 ], [ %287, %284 ], [ %141, %281 ]
  %292 = add nuw nsw i64 %140, 1
  %293 = icmp eq i64 %292, 18
  br i1 %293, label %106, label %139

294:                                              ; preds = %354, %115
  %295 = phi i64 [ %356, %354 ], [ 0, %115 ]
  %296 = phi i64 [ %355, %354 ], [ %58, %115 ]
  br i1 %120, label %297, label %354

297:                                              ; preds = %294
  %298 = shl i64 %295, 3
  %299 = add i64 %95, %298
  %300 = getelementptr [64 x i8], [64 x i8]* %4, i64 0, i64 %299
  %301 = sub nuw i64 %296, %58
  %302 = mul i64 %301, %33
  call void @llvm.memset.p0i8.i64(i8* align 1 %300, i8 1, i64 %118, i1 false)
  br i1 %127, label %303, label %352

303:                                              ; preds = %297
  br i1 %135, label %337, label %304

304:                                              ; preds = %303, %304
  %305 = phi i64 [ %334, %304 ], [ 0, %303 ]
  %306 = phi i64 [ %335, %304 ], [ %136, %303 ]
  %307 = add i64 %93, %305
  %308 = add i64 %307, %302
  %309 = getelementptr inbounds float, float* %74, i64 %308
  %310 = bitcast float* %309 to <4 x float>*
  store <4 x float> %131, <4 x float>* %310, align 4
  %311 = getelementptr inbounds float, float* %309, i64 4
  %312 = bitcast float* %311 to <4 x float>*
  store <4 x float> %133, <4 x float>* %312, align 4
  %313 = or i64 %305, 8
  %314 = add i64 %93, %313
  %315 = add i64 %314, %302
  %316 = getelementptr inbounds float, float* %74, i64 %315
  %317 = bitcast float* %316 to <4 x float>*
  store <4 x float> %131, <4 x float>* %317, align 4
  %318 = getelementptr inbounds float, float* %316, i64 4
  %319 = bitcast float* %318 to <4 x float>*
  store <4 x float> %133, <4 x float>* %319, align 4
  %320 = or i64 %305, 16
  %321 = add i64 %93, %320
  %322 = add i64 %321, %302
  %323 = getelementptr inbounds float, float* %74, i64 %322
  %324 = bitcast float* %323 to <4 x float>*
  store <4 x float> %131, <4 x float>* %324, align 4
  %325 = getelementptr inbounds float, float* %323, i64 4
  %326 = bitcast float* %325 to <4 x float>*
  store <4 x float> %133, <4 x float>* %326, align 4
  %327 = or i64 %305, 24
  %328 = add i64 %93, %327
  %329 = add i64 %328, %302
  %330 = getelementptr inbounds float, float* %74, i64 %329
  %331 = bitcast float* %330 to <4 x float>*
  store <4 x float> %131, <4 x float>* %331, align 4
  %332 = getelementptr inbounds float, float* %330, i64 4
  %333 = bitcast float* %332 to <4 x float>*
  store <4 x float> %133, <4 x float>* %333, align 4
  %334 = add i64 %305, 32
  %335 = add i64 %306, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %304, !llvm.loop !421

337:                                              ; preds = %304, %303
  %338 = phi i64 [ 0, %303 ], [ %334, %304 ]
  br i1 %137, label %351, label %339

339:                                              ; preds = %337, %339
  %340 = phi i64 [ %348, %339 ], [ %338, %337 ]
  %341 = phi i64 [ %349, %339 ], [ %134, %337 ]
  %342 = add i64 %93, %340
  %343 = add i64 %342, %302
  %344 = getelementptr inbounds float, float* %74, i64 %343
  %345 = bitcast float* %344 to <4 x float>*
  store <4 x float> %131, <4 x float>* %345, align 4
  %346 = getelementptr inbounds float, float* %344, i64 4
  %347 = bitcast float* %346 to <4 x float>*
  store <4 x float> %133, <4 x float>* %347, align 4
  %348 = add i64 %340, 8
  %349 = add i64 %341, -1
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %339, !llvm.loop !422

351:                                              ; preds = %339, %337
  br i1 %138, label %354, label %352

352:                                              ; preds = %297, %351
  %353 = phi i64 [ %93, %297 ], [ %129, %351 ]
  br label %372

354:                                              ; preds = %372, %351, %294
  %355 = add nuw i64 %296, 1
  %356 = add i64 %295, 1
  %357 = icmp eq i64 %356, %112
  br i1 %357, label %358, label %294

358:                                              ; preds = %354
  %359 = and i64 %118, 224
  %360 = add nsw i64 %359, -32
  %361 = lshr exact i64 %360, 5
  %362 = add nuw nsw i64 %361, 1
  %363 = or i64 %109, 2
  %364 = icmp eq i64 %363, 26
  %365 = and i64 %118, 224
  %366 = add i64 %93, %365
  %367 = and i64 %362, 3
  %368 = icmp ult i64 %360, 96
  %369 = sub nsw i64 %362, %367
  %370 = icmp eq i64 %367, 0
  %371 = icmp eq i64 %365, %118
  br label %378

372:                                              ; preds = %352, %372
  %373 = phi i64 [ %376, %372 ], [ %353, %352 ]
  %374 = add i64 %373, %302
  %375 = getelementptr inbounds float, float* %74, i64 %374
  store float %291, float* %375, align 4
  %376 = add nuw i64 %373, 1
  %377 = icmp eq i64 %376, %119
  br i1 %377, label %354, label %372, !llvm.loop !423

378:                                              ; preds = %358, %434
  %379 = phi i64 [ %435, %434 ], [ %58, %358 ]
  br i1 %120, label %380, label %434

380:                                              ; preds = %378
  %381 = sub nuw i64 %379, %58
  %382 = mul i64 %381, %37
  br i1 %364, label %383, label %432

383:                                              ; preds = %380
  br i1 %368, label %417, label %384

384:                                              ; preds = %383, %384
  %385 = phi i64 [ %414, %384 ], [ 0, %383 ]
  %386 = phi i64 [ %415, %384 ], [ %369, %383 ]
  %387 = add i64 %93, %385
  %388 = add i64 %387, %382
  %389 = getelementptr inbounds i8, i8* %63, i64 %388
  %390 = bitcast i8* %389 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %390, align 1
  %391 = getelementptr inbounds i8, i8* %389, i64 16
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %392, align 1
  %393 = or i64 %385, 32
  %394 = add i64 %93, %393
  %395 = add i64 %394, %382
  %396 = getelementptr inbounds i8, i8* %63, i64 %395
  %397 = bitcast i8* %396 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %397, align 1
  %398 = getelementptr inbounds i8, i8* %396, i64 16
  %399 = bitcast i8* %398 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %399, align 1
  %400 = or i64 %385, 64
  %401 = add i64 %93, %400
  %402 = add i64 %401, %382
  %403 = getelementptr inbounds i8, i8* %63, i64 %402
  %404 = bitcast i8* %403 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %404, align 1
  %405 = getelementptr inbounds i8, i8* %403, i64 16
  %406 = bitcast i8* %405 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %406, align 1
  %407 = or i64 %385, 96
  %408 = add i64 %93, %407
  %409 = add i64 %408, %382
  %410 = getelementptr inbounds i8, i8* %63, i64 %409
  %411 = bitcast i8* %410 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %411, align 1
  %412 = getelementptr inbounds i8, i8* %410, i64 16
  %413 = bitcast i8* %412 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %413, align 1
  %414 = add i64 %385, 128
  %415 = add i64 %386, -4
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %384, !llvm.loop !424

417:                                              ; preds = %384, %383
  %418 = phi i64 [ 0, %383 ], [ %414, %384 ]
  br i1 %370, label %431, label %419

419:                                              ; preds = %417, %419
  %420 = phi i64 [ %428, %419 ], [ %418, %417 ]
  %421 = phi i64 [ %429, %419 ], [ %367, %417 ]
  %422 = add i64 %93, %420
  %423 = add i64 %422, %382
  %424 = getelementptr inbounds i8, i8* %63, i64 %423
  %425 = bitcast i8* %424 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %425, align 1
  %426 = getelementptr inbounds i8, i8* %424, i64 16
  %427 = bitcast i8* %426 to <16 x i8>*
  store <16 x i8> <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>, <16 x i8>* %427, align 1
  %428 = add i64 %420, 32
  %429 = add i64 %421, -1
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %419, !llvm.loop !425

431:                                              ; preds = %419, %417
  br i1 %371, label %434, label %432

432:                                              ; preds = %380, %431
  %433 = phi i64 [ %93, %380 ], [ %366, %431 ]
  br label %437

434:                                              ; preds = %437, %431, %378
  %435 = add nuw i64 %379, 1
  %436 = icmp eq i64 %435, %113
  br i1 %436, label %443, label %378

437:                                              ; preds = %432, %437
  %438 = phi i64 [ %441, %437 ], [ %433, %432 ]
  %439 = add i64 %438, %382
  %440 = getelementptr inbounds i8, i8* %63, i64 %439
  store i8 4, i8* %440, align 1
  %441 = add nuw i64 %438, 1
  %442 = icmp eq i64 %441, %119
  br i1 %442, label %434, label %437, !llvm.loop !426

443:                                              ; preds = %434, %106, %91
  %444 = add nuw i64 %93, 1
  %445 = icmp ult i64 %444, %23
  %446 = add i64 %92, 1
  br i1 %445, label %91, label %80

447:                                              ; preds = %80, %3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %38) #8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #10

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #22 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #23 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #24 = { builtin nounwind }
attributes #25 = { noreturn nounwind }
attributes #26 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i8 0, i8 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !12}
!14 = distinct !{!14, !5}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !12}
!21 = distinct !{!21, !12}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!24 = distinct !{!24, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!25 = !{!26}
!26 = distinct !{!26, !24, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!29 = distinct !{!29, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!30 = !{!31}
!31 = distinct !{!31, !29, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!34 = distinct !{!34, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!37 = distinct !{!37, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!38 = !{!39}
!39 = distinct !{!39, !37, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!42 = distinct !{!42, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!43 = !{!44}
!44 = distinct !{!44, !42, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!47 = distinct !{!47, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!50 = distinct !{!50, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!51 = !{!52}
!52 = distinct !{!52, !50, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!55 = distinct !{!55, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!56 = !{!57}
!57 = distinct !{!57, !55, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!60 = distinct !{!60, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!61 = !{!62}
!62 = distinct !{!62, !60, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!65 = distinct !{!65, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!68 = distinct !{!68, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!69 = !{!70}
!70 = distinct !{!70, !68, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!73 = distinct !{!73, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!74 = !{!75}
!75 = distinct !{!75, !73, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!78 = distinct !{!78, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!79 = !{!80}
!80 = distinct !{!80, !78, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!83 = distinct !{!83, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !12}
!90 = distinct !{!90, !5}
!91 = distinct !{!91, !12}
!92 = !{!93}
!93 = distinct !{!93, !94}
!94 = distinct !{!94, !"LVerDomain"}
!95 = !{!96}
!96 = distinct !{!96, !94}
!97 = distinct !{!97, !12}
!98 = distinct !{!98, !5}
!99 = distinct !{!99, !12}
!100 = distinct !{!100, !5}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !12}
!107 = distinct !{!107, !12}
!108 = distinct !{!108, !5}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !12}
!115 = distinct !{!115, !12}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!118 = distinct !{!118, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!119 = !{!120}
!120 = distinct !{!120, !118, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!123 = distinct !{!123, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!124 = !{!125}
!125 = distinct !{!125, !123, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!126 = !{!127}
!127 = distinct !{!127, !128, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!128 = distinct !{!128, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!129 = !{!130}
!130 = distinct !{!130, !131, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!131 = distinct !{!131, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!132 = !{!133}
!133 = distinct !{!133, !131, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!136 = distinct !{!136, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!137 = !{!138}
!138 = distinct !{!138, !136, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!141 = distinct !{!141, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!144 = distinct !{!144, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!145 = !{!146}
!146 = distinct !{!146, !144, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!147 = !{!148}
!148 = distinct !{!148, !149, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!149 = distinct !{!149, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!150 = !{!151}
!151 = distinct !{!151, !149, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!154 = distinct !{!154, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!155 = !{!156}
!156 = distinct !{!156, !154, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!159 = distinct !{!159, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!160 = !{!161}
!161 = distinct !{!161, !162, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!162 = distinct !{!162, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!163 = !{!164}
!164 = distinct !{!164, !162, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!167 = distinct !{!167, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!168 = !{!169}
!169 = distinct !{!169, !167, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!172 = distinct !{!172, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!173 = !{!174}
!174 = distinct !{!174, !172, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!175 = !{!176}
!176 = distinct !{!176, !177, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!177 = distinct !{!177, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!178 = !{!179}
!179 = distinct !{!179, !180}
!180 = distinct !{!180, !"LVerDomain"}
!181 = !{!182}
!182 = distinct !{!182, !180}
!183 = distinct !{!183, !12}
!184 = distinct !{!184, !5}
!185 = distinct !{!185, !12}
!186 = !{!187}
!187 = distinct !{!187, !188}
!188 = distinct !{!188, !"LVerDomain"}
!189 = !{!190}
!190 = distinct !{!190, !188}
!191 = distinct !{!191, !12}
!192 = distinct !{!192, !5}
!193 = distinct !{!193, !12}
!194 = distinct !{!194, !5}
!195 = !{!196}
!196 = distinct !{!196, !197}
!197 = distinct !{!197, !"LVerDomain"}
!198 = !{!199}
!199 = distinct !{!199, !197}
!200 = distinct !{!200, !12}
!201 = distinct !{!201, !12}
!202 = distinct !{!202, !5}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !12}
!209 = distinct !{!209, !12}
!210 = !{!211}
!211 = distinct !{!211, !212, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!212 = distinct !{!212, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!213 = !{!214}
!214 = distinct !{!214, !215, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!215 = distinct !{!215, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!216 = !{!217}
!217 = distinct !{!217, !218, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!218 = distinct !{!218, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!219 = !{!220}
!220 = distinct !{!220, !221, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!221 = distinct !{!221, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!222 = !{!223}
!223 = distinct !{!223, !224, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!224 = distinct !{!224, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!225 = !{!226}
!226 = distinct !{!226, !227, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!227 = distinct !{!227, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!228 = !{!229}
!229 = distinct !{!229, !230, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!230 = distinct !{!230, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!231 = !{!232}
!232 = distinct !{!232, !233, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!233 = distinct !{!233, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!234 = !{!235}
!235 = distinct !{!235, !236, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!236 = distinct !{!236, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!237 = !{!238}
!238 = distinct !{!238, !239, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!239 = distinct !{!239, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!240 = !{!241}
!241 = distinct !{!241, !242, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!242 = distinct !{!242, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!243 = !{!244}
!244 = distinct !{!244, !245, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!245 = distinct !{!245, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!246 = !{!247}
!247 = distinct !{!247, !248, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!248 = distinct !{!248, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!249 = !{!250}
!250 = distinct !{!250, !251, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!251 = distinct !{!251, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!252 = !{!253}
!253 = distinct !{!253, !254}
!254 = distinct !{!254, !"LVerDomain"}
!255 = !{!256}
!256 = distinct !{!256, !254}
!257 = distinct !{!257, !12}
!258 = distinct !{!258, !5}
!259 = distinct !{!259, !12}
!260 = !{!261}
!261 = distinct !{!261, !262}
!262 = distinct !{!262, !"LVerDomain"}
!263 = !{!264}
!264 = distinct !{!264, !262}
!265 = distinct !{!265, !12}
!266 = distinct !{!266, !5}
!267 = distinct !{!267, !12}
!268 = distinct !{!268, !5}
!269 = !{!270}
!270 = distinct !{!270, !271}
!271 = distinct !{!271, !"LVerDomain"}
!272 = !{!273}
!273 = distinct !{!273, !271}
!274 = distinct !{!274, !12}
!275 = distinct !{!275, !12}
!276 = distinct !{!276, !5}
!277 = !{!278}
!278 = distinct !{!278, !279}
!279 = distinct !{!279, !"LVerDomain"}
!280 = !{!281}
!281 = distinct !{!281, !279}
!282 = distinct !{!282, !12}
!283 = distinct !{!283, !12}
!284 = !{!285}
!285 = distinct !{!285, !286, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!286 = distinct !{!286, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!287 = !{!288}
!288 = distinct !{!288, !289, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!289 = distinct !{!289, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!290 = !{!291}
!291 = distinct !{!291, !292, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!292 = distinct !{!292, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!293 = !{!294}
!294 = distinct !{!294, !295, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!295 = distinct !{!295, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!298 = distinct !{!298, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!301 = distinct !{!301, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!304 = distinct !{!304, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!305 = !{!306}
!306 = distinct !{!306, !307, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!307 = distinct !{!307, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!308 = !{!309}
!309 = distinct !{!309, !310, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!310 = distinct !{!310, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!311 = !{!312}
!312 = distinct !{!312, !313, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!313 = distinct !{!313, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!314 = !{!315}
!315 = distinct !{!315, !316, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!316 = distinct !{!316, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!317 = !{!318}
!318 = distinct !{!318, !319, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!319 = distinct !{!319, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!320 = !{!321}
!321 = distinct !{!321, !322, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!322 = distinct !{!322, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!323 = !{!324}
!324 = distinct !{!324, !325, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!325 = distinct !{!325, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!326 = !{!327}
!327 = distinct !{!327, !328}
!328 = distinct !{!328, !"LVerDomain"}
!329 = !{!330}
!330 = distinct !{!330, !328}
!331 = distinct !{!331, !12}
!332 = distinct !{!332, !5}
!333 = distinct !{!333, !12}
!334 = !{!335}
!335 = distinct !{!335, !336}
!336 = distinct !{!336, !"LVerDomain"}
!337 = !{!338}
!338 = distinct !{!338, !336}
!339 = distinct !{!339, !12}
!340 = distinct !{!340, !5}
!341 = distinct !{!341, !12}
!342 = !{!343, !345}
!343 = distinct !{!343, !344, !"_ZN3jxl11ImageMinMaxIfEEvRKNS_5PlaneIT_EEPS2_S6_: argument 0"}
!344 = distinct !{!344, !"_ZN3jxl11ImageMinMaxIfEEvRKNS_5PlaneIT_EEPS2_S6_"}
!345 = distinct !{!345, !344, !"_ZN3jxl11ImageMinMaxIfEEvRKNS_5PlaneIT_EEPS2_S6_: argument 1"}
!346 = distinct !{!346, !5}
!347 = !{!348, !350}
!348 = distinct !{!348, !349, !"_ZN3jxl11ImageMinMaxIhEEvRKNS_5PlaneIT_EEPS2_S6_: argument 0"}
!349 = distinct !{!349, !"_ZN3jxl11ImageMinMaxIhEEvRKNS_5PlaneIT_EEPS2_S6_"}
!350 = distinct !{!350, !349, !"_ZN3jxl11ImageMinMaxIhEEvRKNS_5PlaneIT_EEPS2_S6_: argument 1"}
!351 = distinct !{!351, !12}
!352 = distinct !{!352, !353, !12}
!353 = !{!"llvm.loop.unroll.runtime.disable"}
!354 = !{!355}
!355 = distinct !{!355, !356, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!356 = distinct !{!356, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!357 = !{!358}
!358 = distinct !{!358, !356, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!359 = !{!360}
!360 = distinct !{!360, !361, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!361 = distinct !{!361, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!362 = !{!363}
!363 = distinct !{!363, !361, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!364 = !{!365}
!365 = distinct !{!365, !366, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!366 = distinct !{!366, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf"}
!367 = !{!368}
!368 = distinct !{!368, !369, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!369 = distinct !{!369, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE"}
!370 = !{!371}
!371 = distinct !{!371, !372, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!372 = distinct !{!372, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE"}
!373 = !{!374}
!374 = distinct !{!374, !375, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!375 = distinct !{!375, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE"}
!376 = distinct !{!376, !5}
!377 = distinct !{!377, !353, !12}
!378 = distinct !{!378, !353, !12}
!379 = !{!380}
!380 = distinct !{!380, !381, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!381 = distinct !{!381, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!382 = !{!383}
!383 = distinct !{!383, !381, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!384 = !{!385}
!385 = distinct !{!385, !386, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!386 = distinct !{!386, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!387 = !{!388}
!388 = distinct !{!388, !386, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!389 = !{!390}
!390 = distinct !{!390, !391, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!391 = distinct !{!391, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf"}
!392 = distinct !{!392, !5}
!393 = distinct !{!393, !353, !12}
!394 = distinct !{!394, !12}
!395 = distinct !{!395, !353, !12}
!396 = !{!397}
!397 = distinct !{!397, !398, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!398 = distinct !{!398, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!399 = !{!400}
!400 = distinct !{!400, !401, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!401 = distinct !{!401, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!402 = !{!403}
!403 = distinct !{!403, !404, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!404 = distinct !{!404, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!405 = distinct !{!405, !5}
!406 = distinct !{!406, !12}
!407 = distinct !{!407, !353, !12}
!408 = distinct !{!408, !12}
!409 = distinct !{!409, !5}
!410 = distinct !{!410, !353, !12}
!411 = !{!412}
!412 = distinct !{!412, !413, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!413 = distinct !{!413, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!414 = !{!415}
!415 = distinct !{!415, !416, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!416 = distinct !{!416, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!417 = !{!418}
!418 = distinct !{!418, !419, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!419 = distinct !{!419, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!420 = distinct !{!420, !5}
!421 = distinct !{!421, !12}
!422 = distinct !{!422, !5}
!423 = distinct !{!423, !353, !12}
!424 = distinct !{!424, !12}
!425 = distinct !{!425, !5}
!426 = distinct !{!426, !353, !12}
