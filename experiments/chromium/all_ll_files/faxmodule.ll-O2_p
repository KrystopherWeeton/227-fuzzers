; ModuleID = '../../third_party/pdfium/core/fxcodec/fax/faxmodule.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/fax/faxmodule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::ScanlineDecoder" = type { i32 (...)**, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.fxcodec::(anonymous namespace)::FaxDecoder" = type { %"class.fxcodec::ScanlineDecoder", i32, i32, i8, i8, i8, %"class.pdfium::span", %"class.std::__1::vector", %"class.std::__1::vector" }

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

@_ZN7fxcodec12_GLOBAL__N_114FaxWhiteRunInsE = internal unnamed_addr constant [325 x i8] cd\C0\01e\00\02g\80\02h@\02\10\98\C0\05\99\00\06\9A@\06\9B\C0\06\CC\C0\02\CD\00\03\D2@\03\D3\80\03\D4\C0\03\D5\00\04\D6@\04\D7\80\04\D8\C0\04\D9\00\05\DA@\05\DB\80\05\00\03\08\00\07\0C@\07\0D\80\07\0A\12\C0\07\13\00\08\14@\08\15\80\08\16\C0\08\17\00\09\1C@\09\1D\80\09\1E\C0\09\1F\00\0A\FF", align 16
@_ZN7fxcodec12_GLOBAL__N_114FaxBlackRunInsE = internal unnamed_addr constant [326 x i8] c"\00\02\02\03\00\03\02\00\02\02\01\00\03\04\00\02\02\06\00\03\05\00\01\03\07\00\02\04\09\00\05\08\00\03\04\0A\00\05\0B\00\07\0C\00\02\04\0D\00\07\0E\00\01\18\0F\00\05\08\12\00\0F@\00\17\10\00\18\11\007\00\00\0A\08\00\07\0C@\07\0D\80\07\17\18\00\18\19\00(\17\007\16\00g\13\00h\14\00l\15\006\12\C0\07\13\00\08\14@\08\15\80\08\16\C0\08\17\00\09\1C@\09\1D\80\09\1E\C0\09\1F\00\0A$4\00'7\00(8\00+;\00,<\003@\014\80\015\C0\0175\0086\00R2\00S3\00T,\00U-\00V.\00W/\00X9\00Y:\00Z=\00[\00\01d0\00e1\00f>\00g?\00h\1E\00i\1F\00j \00k!\00l(\00m)\00\C8\80\00\C9\C0\00\CA\1A\00\CB\1B\00\CC\1C\00\CD\1D\00\D2\22\00\D3#\00\D4$\00\D5%\00\D6&\00\D7'\00\DA*\00\DB+\00\14J\80\02K\C0\02L\00\03M@\03R\00\05S@\05T\80\05U\C0\05Z\00\06[@\06d\80\06e\C0\06l\00\02m@\02r\80\03s\C0\03t\00\04u@\04v\80\04w\C0\04\FF", align 16
@_ZZN7fxcodec12_GLOBAL__N_17FindBitEPKhiibE12skip_block_0 = internal constant [8 x i8] zeroinitializer, align 1
@_ZZN7fxcodec12_GLOBAL__N_17FindBitEPKhiibE12skip_block_1 = internal constant [8 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF", align 1
@_ZN7fxcodec12_GLOBAL__N_110OneLeadPosE = internal unnamed_addr constant <{ [128 x i8], [128 x i8] }> <{ [128 x i8] c"\08\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", [128 x i8] zeroinitializer }>, align 16
@_ZTVN7fxcodec12_GLOBAL__N_110FaxDecoderE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::FaxDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_110FaxDecoderD2Ev to i8*), i8* bitcast (void (%"class.fxcodec::(anonymous namespace)::FaxDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_110FaxDecoderD0Ev to i8*), i8* bitcast (i32 (%"class.fxcodec::(anonymous namespace)::FaxDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_110FaxDecoder12GetSrcOffsetEv to i8*), i8* bitcast (i1 (%"class.fxcodec::(anonymous namespace)::FaxDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_110FaxDecoder8v_RewindEv to i8*), i8* bitcast (i8* (%"class.fxcodec::(anonymous namespace)::FaxDecoder"*)* @_ZN7fxcodec12_GLOBAL__N_110FaxDecoder13v_GetNextLineEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::ScanlineDecoder"* @_ZN7fxcodec9FaxModule13CreateDecoderEN6pdfium4spanIKhEEiiibbbii(%"class.pdfium::span"* nocapture readonly, i32, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i32, i32) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.pdfium::span", align 8
  %11 = zext i1 %4 to i8
  %12 = zext i1 %5 to i8
  %13 = zext i1 %6 to i8
  %14 = icmp eq i32 %7, 0
  %15 = select i1 %14, i32 %1, i32 %7
  %16 = icmp eq i32 %8, 0
  %17 = select i1 %16, i32 %2, i32 %8
  %18 = icmp slt i32 %15, 1
  %19 = icmp slt i32 %17, 1
  %20 = or i1 %18, %19
  br i1 %20, label %85, label %21

21:                                               ; preds = %9
  %22 = icmp sgt i32 %15, 65535
  %23 = icmp sgt i32 %17, 65535
  %24 = or i1 %22, %23
  br i1 %24, label %85, label %25

25:                                               ; preds = %21
  %26 = bitcast %"class.pdfium::span"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26)
  %27 = tail call i8* @_Znwm(i64 128) #10
  %28 = bitcast %"class.pdfium::span"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 8 %28, i64 16, i1 false) #11
  %29 = tail call i64 @_ZN7fxcodec16CalculatePitch32Eii(i32 1, i32 %15) #11
  %30 = trunc i64 %29 to i8
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %25
  tail call void @llvm.trap() #11
  unreachable

33:                                               ; preds = %25
  %34 = lshr i64 %29, 32
  %35 = trunc i64 %34 to i32
  %36 = bitcast i8* %27 to %"class.fxcodec::ScanlineDecoder"*
  tail call void @_ZN7fxcodec15ScanlineDecoderC2Eiiiiiij(%"class.fxcodec::ScanlineDecoder"* nonnull %36, i32 %15, i32 %17, i32 %15, i32 %17, i32 1, i32 1, i32 %35) #11
  %37 = bitcast i8* %27 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_110FaxDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %37, align 8
  %38 = getelementptr inbounds i8, i8* %27, i64 48
  %39 = bitcast i8* %38 to i32*
  store i32 %3, i32* %39, align 8
  %40 = getelementptr inbounds i8, i8* %27, i64 52
  %41 = bitcast i8* %40 to i32*
  store i32 0, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %27, i64 56
  store i8 %12, i8* %42, align 8
  %43 = getelementptr inbounds i8, i8* %27, i64 57
  store i8 %11, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %27, i64 58
  store i8 %13, i8* %44, align 2
  %45 = getelementptr inbounds i8, i8* %27, i64 64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* nonnull align 8 %26, i64 16, i1 false) #11
  %46 = getelementptr inbounds i8, i8* %27, i64 80
  %47 = getelementptr inbounds i8, i8* %27, i64 32
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = zext i32 %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #11
  %51 = icmp eq i32 %49, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %33
  %53 = getelementptr inbounds i8, i8* %27, i64 104
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #11
  br label %84

54:                                               ; preds = %33
  %55 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %50, i64 1) #11
  %56 = getelementptr inbounds i8, i8* %27, i64 88
  %57 = bitcast i8* %46 to i8**
  store i8* %55, i8** %57, align 8
  %58 = getelementptr inbounds i8, i8* %55, i64 %50
  %59 = getelementptr inbounds i8, i8* %27, i64 96
  %60 = bitcast i8* %59 to i8**
  store i8* %58, i8** %60, align 8
  %61 = bitcast i8* %56 to i64*
  %62 = ptrtoint i8* %55 to i64
  %63 = sub i64 %50, %62
  %64 = getelementptr i8, i8* %55, i64 %63
  %65 = ptrtoint i8* %64 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 0, i64 %65, i1 false) #11
  %66 = ptrtoint i8* %58 to i64
  store i64 %66, i64* %61, align 8
  %67 = load i32, i32* %48, align 8
  %68 = getelementptr inbounds i8, i8* %27, i64 104
  %69 = zext i32 %67 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false) #11
  %70 = icmp eq i32 %67, 0
  br i1 %70, label %84, label %71

71:                                               ; preds = %54
  %72 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %69, i64 1) #11
  %73 = getelementptr inbounds i8, i8* %27, i64 112
  %74 = bitcast i8* %68 to i8**
  store i8* %72, i8** %74, align 8
  %75 = getelementptr inbounds i8, i8* %72, i64 %69
  %76 = getelementptr inbounds i8, i8* %27, i64 120
  %77 = bitcast i8* %76 to i8**
  store i8* %75, i8** %77, align 8
  %78 = bitcast i8* %73 to i64*
  %79 = ptrtoint i8* %72 to i64
  %80 = sub i64 %69, %79
  %81 = getelementptr i8, i8* %72, i64 %80
  %82 = ptrtoint i8* %81 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 0, i64 %82, i1 false) #11
  %83 = ptrtoint i8* %75 to i64
  store i64 %83, i64* %78, align 8
  br label %84

84:                                               ; preds = %71, %54, %52
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26)
  br label %85

85:                                               ; preds = %21, %9, %84
  %86 = phi %"class.fxcodec::ScanlineDecoder"* [ %36, %84 ], [ null, %9 ], [ null, %21 ]
  ret %"class.fxcodec::ScanlineDecoder"* %86
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7fxcodec9FaxModule11FaxG4DecodeEPKhjiiiiPh(i8* nocapture readonly, i32, i32, i32, i32, i32, i8* nocapture) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.pdfium::span", align 8
  %11 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #11
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = sext i32 %5 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #11
  %16 = icmp eq i32 %5, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %7
  %18 = icmp slt i32 %5, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %20) #12
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %15, i64 1) #11
  store i8* %22, i8** %12, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %15
  store i8* %23, i8** %14, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -1, i64 %15, i1 false)
  %24 = bitcast i8** %13 to i64*
  %25 = ptrtoint i8* %23 to i64
  store i64 %25, i64* %24, align 8
  br label %26

26:                                               ; preds = %7, %21
  %27 = phi i64 [ 0, %7 ], [ %25, %21 ]
  %28 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #11
  store i32 %2, i32* %9, align 4
  %29 = icmp sgt i32 %4, 0
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = shl i32 %1, 3
  %32 = bitcast %"class.std::__1::vector"* %8 to i64*
  %33 = bitcast i8** %13 to i64*
  %34 = bitcast %"class.pdfium::span"* %10 to i64*
  %35 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %10, i64 0, i32 1
  %36 = zext i32 %4 to i64
  br label %47

37:                                               ; preds = %47
  %38 = load i32, i32* %9, align 4
  br label %39

39:                                               ; preds = %37, %26
  %40 = phi i32 [ %38, %37 ], [ %2, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #11
  %41 = load i8*, i8** %12, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %39
  %44 = ptrtoint i8* %41 to i64
  %45 = bitcast i8** %13 to i64*
  store i64 %44, i64* %45, align 8
  call void @_Z7FX_FreePv(i8* nonnull %41) #11
  br label %46

46:                                               ; preds = %39, %43
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #11
  ret i32 %40

47:                                               ; preds = %57, %30
  %48 = phi i64 [ %27, %30 ], [ %58, %57 ]
  %49 = phi i64 [ 0, %30 ], [ %55, %57 ]
  %50 = mul nsw i64 %49, %15
  %51 = getelementptr inbounds i8, i8* %6, i64 %50
  call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 -1, i64 %15, i1 false)
  %52 = load i64, i64* %32, align 8
  %53 = sub i64 %48, %52
  store i64 %52, i64* %34, align 8
  store i64 %53, i64* %35, align 8
  call fastcc void @_ZN7fxcodec12_GLOBAL__N_111FaxG4GetRowEPKhiPiPhN6pdfium4spanIS1_EEi(i8* %0, i32 %31, i32* nonnull %9, i8* %51, %"class.pdfium::span"* nonnull %10, i32 %3)
  %54 = load i8*, i8** %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %51, i64 %15, i1 false)
  %55 = add nuw nsw i64 %49, 1
  %56 = icmp eq i64 %55, %36
  br i1 %56, label %37, label %57

57:                                               ; preds = %47
  %58 = load i64, i64* %33, align 8
  br label %47
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7fxcodec12_GLOBAL__N_111FaxG4GetRowEPKhiPiPhN6pdfium4spanIS1_EEi(i8* nocapture readonly, i32, i32*, i8* nocapture, %"class.pdfium::span"* nocapture readonly, i32) unnamed_addr #0 {
  %7 = load i32, i32* %2, align 4
  %8 = icmp slt i32 %7, %1
  br i1 %8, label %9, label %868

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  br label %12

12:                                               ; preds = %9, %863
  %13 = phi i32 [ %7, %9 ], [ %866, %863 ]
  %14 = phi i32 [ -1, %9 ], [ %865, %863 ]
  %15 = phi i8 [ 1, %9 ], [ %864, %863 ]
  %16 = load i8*, i8** %10, align 8
  %17 = and i8 %15, 1
  %18 = icmp ne i8 %17, 0
  %19 = icmp slt i32 %14, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %12
  %21 = load i64, i64* %11, align 8
  %22 = lshr i32 %14, 3
  %23 = zext i32 %22 to i64
  %24 = icmp ugt i64 %21, %23
  br i1 %24, label %26, label %25, !prof !3

25:                                               ; preds = %20
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !5
  unreachable

26:                                               ; preds = %20
  %27 = getelementptr inbounds i8, i8* %16, i64 %23
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %14, 7
  %31 = xor i32 %30, 7
  %32 = shl i32 1, %31
  %33 = and i32 %32, %29
  %34 = icmp ne i32 %33, 0
  br label %35

35:                                               ; preds = %12, %26
  %36 = phi i1 [ %34, %26 ], [ true, %12 ]
  %37 = add nsw i32 %14, 1
  %38 = xor i1 %36, true
  %39 = tail call fastcc i32 @_ZN7fxcodec12_GLOBAL__N_17FindBitEPKhiib(i8* %16, i32 %5, i32 %37, i1 zeroext %38) #11
  %40 = icmp slt i32 %39, %5
  br i1 %40, label %41, label %53

41:                                               ; preds = %35
  %42 = xor i1 %18, %36
  br i1 %42, label %43, label %46

43:                                               ; preds = %41
  %44 = add nsw i32 %39, 1
  %45 = tail call fastcc i32 @_ZN7fxcodec12_GLOBAL__N_17FindBitEPKhiib(i8* %16, i32 %5, i32 %44, i1 zeroext %36) #11
  br label %46

46:                                               ; preds = %43, %41
  %47 = phi i32 [ %45, %43 ], [ %39, %41 ]
  %48 = phi i1 [ %38, %43 ], [ %36, %41 ]
  %49 = icmp slt i32 %47, %5
  br i1 %49, label %50, label %53

50:                                               ; preds = %46
  %51 = add nsw i32 %47, 1
  %52 = tail call fastcc i32 @_ZN7fxcodec12_GLOBAL__N_17FindBitEPKhiib(i8* %16, i32 %5, i32 %51, i1 zeroext %48) #11
  br label %53

53:                                               ; preds = %46, %35, %50
  %54 = phi i32 [ %52, %50 ], [ %5, %35 ], [ %5, %46 ]
  %55 = phi i32 [ %47, %50 ], [ %5, %35 ], [ %5, %46 ]
  %56 = add nsw i32 %13, 1
  store i32 %56, i32* %2, align 4
  %57 = sdiv i32 %13, 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = srem i32 %13, 8
  %63 = sub nsw i32 7, %62
  %64 = shl i32 1, %63
  %65 = and i32 %64, %61
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %723

67:                                               ; preds = %53
  %68 = icmp slt i32 %56, %1
  br i1 %68, label %69, label %868

69:                                               ; preds = %67
  %70 = add nsw i32 %13, 2
  store i32 %70, i32* %2, align 4
  %71 = icmp slt i32 %70, %1
  br i1 %71, label %72, label %868

72:                                               ; preds = %69
  %73 = srem i32 %56, 8
  %74 = sub nsw i32 7, %73
  %75 = shl i32 1, %74
  %76 = sdiv i32 %56, 8
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = and i32 %75, %80
  %82 = icmp eq i32 %81, 0
  %83 = add nsw i32 %13, 3
  store i32 %83, i32* %2, align 4
  %84 = sdiv i32 %70, 8
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = srem i32 %70, 8
  %90 = sub nsw i32 7, %89
  %91 = shl i32 1, %90
  %92 = and i32 %91, %88
  %93 = icmp ne i32 %92, 0
  br i1 %82, label %96, label %94

94:                                               ; preds = %72
  %95 = select i1 %93, i32 1, i32 -1
  br label %723

96:                                               ; preds = %72
  br i1 %93, label %97, label %514

97:                                               ; preds = %96
  %98 = select i1 %18, i8* getelementptr inbounds ([325 x i8], [325 x i8]* @_ZN7fxcodec12_GLOBAL__N_114FaxWhiteRunInsE, i64 0, i64 0), i8* getelementptr inbounds ([326 x i8], [326 x i8]* @_ZN7fxcodec12_GLOBAL__N_114FaxBlackRunInsE, i64 0, i64 0)
  %99 = load i8, i8* %98, align 16
  %100 = icmp eq i8 %99, -1
  br label %101

101:                                              ; preds = %97, %153
  %102 = phi i32 [ %133, %153 ], [ %83, %97 ]
  %103 = phi i32 [ %167, %153 ], [ 0, %97 ]
  br i1 %100, label %150, label %113

104:                                              ; preds = %147
  %105 = trunc i64 %148 to i32
  br label %106

106:                                              ; preds = %119, %104
  %107 = phi i32 [ %116, %119 ], [ %105, %104 ]
  %108 = add nsw i32 %107, 1
  %109 = sext i32 %107 to i64
  %110 = getelementptr inbounds i8, i8* %98, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, -1
  br i1 %112, label %150, label %113

113:                                              ; preds = %101, %106
  %114 = phi i32 [ %133, %106 ], [ %102, %101 ]
  %115 = phi i8 [ %111, %106 ], [ %99, %101 ]
  %116 = phi i32 [ %108, %106 ], [ 1, %101 ]
  %117 = phi i32 [ %132, %106 ], [ 0, %101 ]
  %118 = icmp slt i32 %114, %1
  br i1 %118, label %119, label %150

119:                                              ; preds = %113
  %120 = shl i32 %117, 1
  %121 = sdiv i32 %114, 8
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = srem i32 %114, 8
  %127 = sub nsw i32 7, %126
  %128 = shl i32 1, %127
  %129 = and i32 %128, %125
  %130 = icmp ne i32 %129, 0
  %131 = zext i1 %130 to i32
  %132 = or i32 %120, %131
  %133 = add nsw i32 %114, 1
  store i32 %133, i32* %2, align 4
  %134 = icmp eq i8 %115, 0
  br i1 %134, label %106, label %135

135:                                              ; preds = %119
  %136 = zext i8 %115 to i32
  %137 = mul nuw nsw i32 %136, 3
  %138 = add nsw i32 %137, %116
  %139 = sext i32 %116 to i64
  %140 = sext i32 %138 to i64
  br label %141

141:                                              ; preds = %147, %135
  %142 = phi i64 [ %139, %135 ], [ %148, %147 ]
  %143 = getelementptr inbounds i8, i8* %98, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp eq i32 %132, %145
  br i1 %146, label %153, label %147

147:                                              ; preds = %141
  %148 = add nsw i64 %142, 3
  %149 = icmp slt i64 %148, %140
  br i1 %149, label %141, label %104

150:                                              ; preds = %101, %106, %113
  %151 = phi i32 [ %103, %113 ], [ %103, %106 ], [ 0, %101 ]
  %152 = add nsw i32 %151, -1
  br label %169

153:                                              ; preds = %141
  %154 = shl i64 %142, 32
  %155 = add i64 %154, 4294967296
  %156 = ashr exact i64 %155, 32
  %157 = getelementptr inbounds i8, i8* %98, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add i64 %154, 8589934592
  %161 = ashr exact i64 %160, 32
  %162 = getelementptr inbounds i8, i8* %98, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = shl nuw nsw i32 %164, 8
  %166 = or i32 %165, %159
  %167 = add nuw nsw i32 %166, %103
  %168 = icmp ult i32 %166, 64
  br i1 %168, label %169, label %101

169:                                              ; preds = %153, %150
  %170 = phi i32 [ %152, %150 ], [ %167, %153 ]
  %171 = lshr i32 %14, 31
  %172 = add nsw i32 %170, %171
  %173 = icmp slt i32 %172, 0
  br i1 %173, label %868, label %174

174:                                              ; preds = %169
  %175 = add nsw i32 %172, %14
  br i1 %18, label %306, label %176

176:                                              ; preds = %174
  %177 = icmp sgt i32 %14, 0
  %178 = select i1 %177, i32 %14, i32 0
  %179 = icmp sgt i32 %175, 0
  %180 = select i1 %179, i32 %175, i32 0
  %181 = icmp sgt i32 %180, %5
  %182 = select i1 %181, i32 %5, i32 %180
  %183 = icmp slt i32 %178, %182
  br i1 %183, label %184, label %306

184:                                              ; preds = %176
  %185 = lshr i32 %178, 3
  %186 = add nsw i32 %182, -1
  %187 = sdiv i32 %186, 8
  %188 = srem i32 %186, 8
  %189 = icmp eq i32 %187, %185
  %190 = and i32 %178, 7
  br i1 %189, label %200, label %191

191:                                              ; preds = %184
  %192 = zext i32 %185 to i64
  %193 = getelementptr inbounds i8, i8* %3, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = xor i32 %190, 7
  %196 = shl i32 1, %195
  %197 = trunc i32 %196 to i8
  %198 = sub i8 %194, %197
  %199 = icmp eq i32 %190, 7
  br i1 %199, label %212, label %1045

200:                                              ; preds = %184
  %201 = srem i32 %186, 8
  %202 = icmp sgt i32 %190, %201
  br i1 %202, label %306, label %203

203:                                              ; preds = %200
  %204 = zext i32 %185 to i64
  %205 = getelementptr inbounds i8, i8* %3, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = xor i32 %190, 7
  %208 = shl i32 1, %207
  %209 = trunc i32 %208 to i8
  %210 = sub i8 %206, %209
  %211 = icmp slt i32 %190, %201
  br i1 %211, label %1086, label %304

212:                                              ; preds = %1063, %1051, %191, %1081, %1075, %1069, %1057, %1045
  %213 = phi i8 [ %198, %191 ], [ %1049, %1045 ], [ %1055, %1051 ], [ %1061, %1057 ], [ %1067, %1063 ], [ %1073, %1069 ], [ %1079, %1075 ], [ %1085, %1081 ]
  store i8 %213, i8* %193, align 1
  %214 = icmp slt i32 %188, 0
  br i1 %214, label %287, label %215

215:                                              ; preds = %212
  %216 = sext i32 %187 to i64
  %217 = getelementptr inbounds i8, i8* %3, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = add nsw i32 %188, 1
  %220 = icmp ult i32 %219, 16
  br i1 %220, label %221, label %224

221:                                              ; preds = %273, %215
  %222 = phi i8 [ %218, %215 ], [ %283, %273 ]
  %223 = phi i32 [ 0, %215 ], [ %225, %273 ]
  br label %290

224:                                              ; preds = %215
  %225 = and i32 %219, -16
  %226 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %218, i32 0
  %227 = add nsw i32 %225, -16
  %228 = lshr exact i32 %227, 4
  %229 = add nuw nsw i32 %228, 1
  %230 = and i32 %229, 3
  %231 = icmp ult i32 %227, 48
  br i1 %231, label %257, label %232

232:                                              ; preds = %224
  %233 = sub nsw i32 %229, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi <16 x i8> [ %226, %232 ], [ %253, %234 ]
  %236 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %232 ], [ %254, %234 ]
  %237 = phi i32 [ %233, %232 ], [ %255, %234 ]
  %238 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %236
  %239 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %238
  %240 = trunc <16 x i32> %239 to <16 x i8>
  %241 = sub <16 x i8> %235, %240
  %242 = sub <16 x i32> <i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9>, %236
  %243 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %242
  %244 = trunc <16 x i32> %243 to <16 x i8>
  %245 = sub <16 x i8> %241, %244
  %246 = sub <16 x i32> <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>, %236
  %247 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %246
  %248 = trunc <16 x i32> %247 to <16 x i8>
  %249 = sub <16 x i8> %245, %248
  %250 = sub <16 x i32> <i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41>, %236
  %251 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %250
  %252 = trunc <16 x i32> %251 to <16 x i8>
  %253 = sub <16 x i8> %249, %252
  %254 = add <16 x i32> %236, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %255 = add i32 %237, -4
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %234, !llvm.loop !6

257:                                              ; preds = %234, %224
  %258 = phi <16 x i8> [ undef, %224 ], [ %253, %234 ]
  %259 = phi <16 x i8> [ %226, %224 ], [ %253, %234 ]
  %260 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %224 ], [ %254, %234 ]
  %261 = icmp eq i32 %230, 0
  br i1 %261, label %273, label %262

262:                                              ; preds = %257, %262
  %263 = phi <16 x i8> [ %269, %262 ], [ %259, %257 ]
  %264 = phi <16 x i32> [ %270, %262 ], [ %260, %257 ]
  %265 = phi i32 [ %271, %262 ], [ %230, %257 ]
  %266 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %264
  %267 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %266
  %268 = trunc <16 x i32> %267 to <16 x i8>
  %269 = sub <16 x i8> %263, %268
  %270 = add <16 x i32> %264, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %271 = add i32 %265, -1
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %262, !llvm.loop !8

273:                                              ; preds = %262, %257
  %274 = phi <16 x i8> [ %258, %257 ], [ %269, %262 ]
  %275 = shufflevector <16 x i8> %274, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %276 = add <16 x i8> %274, %275
  %277 = shufflevector <16 x i8> %276, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %278 = add <16 x i8> %276, %277
  %279 = shufflevector <16 x i8> %278, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %280 = add <16 x i8> %278, %279
  %281 = shufflevector <16 x i8> %280, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %282 = add <16 x i8> %280, %281
  %283 = extractelement <16 x i8> %282, i32 0
  %284 = icmp eq i32 %219, %225
  br i1 %284, label %285, label %221

285:                                              ; preds = %290, %273
  %286 = phi i8 [ %283, %273 ], [ %296, %290 ]
  store i8 %286, i8* %217, align 1
  br label %287

287:                                              ; preds = %285, %212
  %288 = add nuw nsw i32 %185, 1
  %289 = icmp sgt i32 %187, %288
  br i1 %289, label %299, label %306

290:                                              ; preds = %221, %290
  %291 = phi i8 [ %296, %290 ], [ %222, %221 ]
  %292 = phi i32 [ %297, %290 ], [ %223, %221 ]
  %293 = sub nuw nsw i32 7, %292
  %294 = shl i32 1, %293
  %295 = trunc i32 %294 to i8
  %296 = sub i8 %291, %295
  %297 = add nuw nsw i32 %292, 1
  %298 = icmp eq i32 %292, %188
  br i1 %298, label %285, label %290, !llvm.loop !10

299:                                              ; preds = %287
  %300 = getelementptr inbounds i8, i8* %193, i64 1
  %301 = xor i32 %185, -1
  %302 = add nsw i32 %187, %301
  %303 = sext i32 %302 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %300, i8 0, i64 %303, i1 false) #11
  br label %306

304:                                              ; preds = %1128, %1121, %1114, %1107, %1100, %1093, %1086, %203
  %305 = phi i8 [ %210, %203 ], [ %1091, %1086 ], [ %1098, %1093 ], [ %1105, %1100 ], [ %1112, %1107 ], [ %1119, %1114 ], [ %1126, %1121 ], [ %1132, %1128 ]
  store i8 %305, i8* %205, align 1
  br label %306

306:                                              ; preds = %304, %299, %287, %200, %176, %174
  %307 = select i1 %18, i8* getelementptr inbounds ([326 x i8], [326 x i8]* @_ZN7fxcodec12_GLOBAL__N_114FaxBlackRunInsE, i64 0, i64 0), i8* getelementptr inbounds ([325 x i8], [325 x i8]* @_ZN7fxcodec12_GLOBAL__N_114FaxWhiteRunInsE, i64 0, i64 0)
  %308 = load i8, i8* %307, align 16
  %309 = icmp eq i8 %308, -1
  br label %310

310:                                              ; preds = %360, %306
  %311 = phi i32 [ 0, %306 ], [ %374, %360 ]
  br i1 %309, label %868, label %312

312:                                              ; preds = %310
  %313 = load i32, i32* %2, align 4
  br label %323

314:                                              ; preds = %357
  %315 = trunc i64 %358 to i32
  br label %316

316:                                              ; preds = %329, %314
  %317 = phi i32 [ %326, %329 ], [ %315, %314 ]
  %318 = add nsw i32 %317, 1
  %319 = sext i32 %317 to i64
  %320 = getelementptr inbounds i8, i8* %307, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = icmp eq i8 %321, -1
  br i1 %322, label %376, label %323

323:                                              ; preds = %316, %312
  %324 = phi i32 [ %343, %316 ], [ %313, %312 ]
  %325 = phi i8 [ %321, %316 ], [ %308, %312 ]
  %326 = phi i32 [ %318, %316 ], [ 1, %312 ]
  %327 = phi i32 [ %342, %316 ], [ 0, %312 ]
  %328 = icmp slt i32 %324, %1
  br i1 %328, label %329, label %376

329:                                              ; preds = %323
  %330 = shl i32 %327, 1
  %331 = sdiv i32 %324, 8
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %0, i64 %332
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = srem i32 %324, 8
  %337 = sub nsw i32 7, %336
  %338 = shl i32 1, %337
  %339 = and i32 %338, %335
  %340 = icmp ne i32 %339, 0
  %341 = zext i1 %340 to i32
  %342 = or i32 %330, %341
  %343 = add nsw i32 %324, 1
  store i32 %343, i32* %2, align 4
  %344 = icmp eq i8 %325, 0
  br i1 %344, label %316, label %345

345:                                              ; preds = %329
  %346 = zext i8 %325 to i32
  %347 = mul nuw nsw i32 %346, 3
  %348 = add nsw i32 %347, %326
  %349 = sext i32 %326 to i64
  %350 = sext i32 %348 to i64
  br label %351

351:                                              ; preds = %357, %345
  %352 = phi i64 [ %349, %345 ], [ %358, %357 ]
  %353 = getelementptr inbounds i8, i8* %307, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = icmp eq i32 %342, %355
  br i1 %356, label %360, label %357

357:                                              ; preds = %351
  %358 = add nsw i64 %352, 3
  %359 = icmp slt i64 %358, %350
  br i1 %359, label %351, label %314

360:                                              ; preds = %351
  %361 = shl i64 %352, 32
  %362 = add i64 %361, 4294967296
  %363 = ashr exact i64 %362, 32
  %364 = getelementptr inbounds i8, i8* %307, i64 %363
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = add i64 %361, 8589934592
  %368 = ashr exact i64 %367, 32
  %369 = getelementptr inbounds i8, i8* %307, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = shl nuw nsw i32 %371, 8
  %373 = or i32 %372, %366
  %374 = add nuw nsw i32 %373, %311
  %375 = icmp ult i32 %373, 64
  br i1 %375, label %379, label %310

376:                                              ; preds = %323, %316
  %377 = add nsw i32 %311, -1
  %378 = icmp eq i32 %311, 0
  br i1 %378, label %868, label %379

379:                                              ; preds = %360, %376
  %380 = phi i32 [ %377, %376 ], [ %374, %360 ]
  %381 = add nsw i32 %380, %175
  br i1 %18, label %382, label %512

382:                                              ; preds = %379
  %383 = icmp sgt i32 %175, 0
  %384 = select i1 %383, i32 %175, i32 0
  %385 = icmp sgt i32 %381, 0
  %386 = select i1 %385, i32 %381, i32 0
  %387 = icmp sgt i32 %386, %5
  %388 = select i1 %387, i32 %5, i32 %386
  %389 = icmp slt i32 %384, %388
  br i1 %389, label %390, label %512

390:                                              ; preds = %382
  %391 = lshr i32 %384, 3
  %392 = add nsw i32 %388, -1
  %393 = sdiv i32 %392, 8
  %394 = srem i32 %392, 8
  %395 = icmp eq i32 %393, %391
  %396 = and i32 %384, 7
  br i1 %395, label %406, label %397

397:                                              ; preds = %390
  %398 = zext i32 %391 to i64
  %399 = getelementptr inbounds i8, i8* %3, i64 %398
  %400 = load i8, i8* %399, align 1
  %401 = xor i32 %396, 7
  %402 = shl i32 1, %401
  %403 = trunc i32 %402 to i8
  %404 = sub i8 %400, %403
  %405 = icmp eq i32 %396, 7
  br i1 %405, label %418, label %1133

406:                                              ; preds = %390
  %407 = srem i32 %392, 8
  %408 = icmp sgt i32 %396, %407
  br i1 %408, label %512, label %409

409:                                              ; preds = %406
  %410 = zext i32 %391 to i64
  %411 = getelementptr inbounds i8, i8* %3, i64 %410
  %412 = load i8, i8* %411, align 1
  %413 = xor i32 %396, 7
  %414 = shl i32 1, %413
  %415 = trunc i32 %414 to i8
  %416 = sub i8 %412, %415
  %417 = icmp slt i32 %396, %407
  br i1 %417, label %1174, label %510

418:                                              ; preds = %1151, %1139, %397, %1169, %1163, %1157, %1145, %1133
  %419 = phi i8 [ %404, %397 ], [ %1137, %1133 ], [ %1143, %1139 ], [ %1149, %1145 ], [ %1155, %1151 ], [ %1161, %1157 ], [ %1167, %1163 ], [ %1173, %1169 ]
  store i8 %419, i8* %399, align 1
  %420 = icmp slt i32 %394, 0
  br i1 %420, label %493, label %421

421:                                              ; preds = %418
  %422 = sext i32 %393 to i64
  %423 = getelementptr inbounds i8, i8* %3, i64 %422
  %424 = load i8, i8* %423, align 1
  %425 = add nsw i32 %394, 1
  %426 = icmp ult i32 %425, 16
  br i1 %426, label %427, label %430

427:                                              ; preds = %479, %421
  %428 = phi i8 [ %424, %421 ], [ %489, %479 ]
  %429 = phi i32 [ 0, %421 ], [ %431, %479 ]
  br label %496

430:                                              ; preds = %421
  %431 = and i32 %425, -16
  %432 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %424, i32 0
  %433 = add nsw i32 %431, -16
  %434 = lshr exact i32 %433, 4
  %435 = add nuw nsw i32 %434, 1
  %436 = and i32 %435, 3
  %437 = icmp ult i32 %433, 48
  br i1 %437, label %463, label %438

438:                                              ; preds = %430
  %439 = sub nsw i32 %435, %436
  br label %440

440:                                              ; preds = %440, %438
  %441 = phi <16 x i8> [ %432, %438 ], [ %459, %440 ]
  %442 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %438 ], [ %460, %440 ]
  %443 = phi i32 [ %439, %438 ], [ %461, %440 ]
  %444 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %442
  %445 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %444
  %446 = trunc <16 x i32> %445 to <16 x i8>
  %447 = sub <16 x i8> %441, %446
  %448 = sub <16 x i32> <i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9>, %442
  %449 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %448
  %450 = trunc <16 x i32> %449 to <16 x i8>
  %451 = sub <16 x i8> %447, %450
  %452 = sub <16 x i32> <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>, %442
  %453 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %452
  %454 = trunc <16 x i32> %453 to <16 x i8>
  %455 = sub <16 x i8> %451, %454
  %456 = sub <16 x i32> <i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41>, %442
  %457 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %456
  %458 = trunc <16 x i32> %457 to <16 x i8>
  %459 = sub <16 x i8> %455, %458
  %460 = add <16 x i32> %442, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %461 = add i32 %443, -4
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %463, label %440, !llvm.loop !12

463:                                              ; preds = %440, %430
  %464 = phi <16 x i8> [ undef, %430 ], [ %459, %440 ]
  %465 = phi <16 x i8> [ %432, %430 ], [ %459, %440 ]
  %466 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %430 ], [ %460, %440 ]
  %467 = icmp eq i32 %436, 0
  br i1 %467, label %479, label %468

468:                                              ; preds = %463, %468
  %469 = phi <16 x i8> [ %475, %468 ], [ %465, %463 ]
  %470 = phi <16 x i32> [ %476, %468 ], [ %466, %463 ]
  %471 = phi i32 [ %477, %468 ], [ %436, %463 ]
  %472 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %470
  %473 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %472
  %474 = trunc <16 x i32> %473 to <16 x i8>
  %475 = sub <16 x i8> %469, %474
  %476 = add <16 x i32> %470, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %477 = add i32 %471, -1
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %468, !llvm.loop !13

479:                                              ; preds = %468, %463
  %480 = phi <16 x i8> [ %464, %463 ], [ %475, %468 ]
  %481 = shufflevector <16 x i8> %480, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %482 = add <16 x i8> %480, %481
  %483 = shufflevector <16 x i8> %482, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %484 = add <16 x i8> %482, %483
  %485 = shufflevector <16 x i8> %484, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %486 = add <16 x i8> %484, %485
  %487 = shufflevector <16 x i8> %486, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %488 = add <16 x i8> %486, %487
  %489 = extractelement <16 x i8> %488, i32 0
  %490 = icmp eq i32 %425, %431
  br i1 %490, label %491, label %427

491:                                              ; preds = %496, %479
  %492 = phi i8 [ %489, %479 ], [ %502, %496 ]
  store i8 %492, i8* %423, align 1
  br label %493

493:                                              ; preds = %491, %418
  %494 = add nuw nsw i32 %391, 1
  %495 = icmp sgt i32 %393, %494
  br i1 %495, label %505, label %512

496:                                              ; preds = %427, %496
  %497 = phi i8 [ %502, %496 ], [ %428, %427 ]
  %498 = phi i32 [ %503, %496 ], [ %429, %427 ]
  %499 = sub nuw nsw i32 7, %498
  %500 = shl i32 1, %499
  %501 = trunc i32 %500 to i8
  %502 = sub i8 %497, %501
  %503 = add nuw nsw i32 %498, 1
  %504 = icmp eq i32 %498, %394
  br i1 %504, label %491, label %496, !llvm.loop !14

505:                                              ; preds = %493
  %506 = getelementptr inbounds i8, i8* %399, i64 1
  %507 = xor i32 %391, -1
  %508 = add nsw i32 %393, %507
  %509 = sext i32 %508 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %506, i8 0, i64 %509, i1 false) #11
  br label %512

510:                                              ; preds = %1216, %1209, %1202, %1195, %1188, %1181, %1174, %409
  %511 = phi i8 [ %416, %409 ], [ %1179, %1174 ], [ %1186, %1181 ], [ %1193, %1188 ], [ %1200, %1195 ], [ %1207, %1202 ], [ %1214, %1209 ], [ %1220, %1216 ]
  store i8 %511, i8* %411, align 1
  br label %512

512:                                              ; preds = %510, %505, %493, %406, %382, %379
  %513 = icmp slt i32 %381, %5
  br i1 %513, label %863, label %868

514:                                              ; preds = %96
  %515 = icmp slt i32 %83, %1
  br i1 %515, label %516, label %868

516:                                              ; preds = %514
  %517 = add nsw i32 %13, 4
  store i32 %517, i32* %2, align 4
  %518 = sdiv i32 %83, 8
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds i8, i8* %0, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = srem i32 %83, 8
  %524 = sub nsw i32 7, %523
  %525 = shl i32 1, %524
  %526 = and i32 %525, %522
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %661, label %528

528:                                              ; preds = %516
  br i1 %18, label %659, label %529

529:                                              ; preds = %528
  %530 = icmp sgt i32 %14, 0
  %531 = select i1 %530, i32 %14, i32 0
  %532 = icmp sgt i32 %54, 0
  %533 = select i1 %532, i32 %54, i32 0
  %534 = icmp sgt i32 %533, %5
  %535 = select i1 %534, i32 %5, i32 %533
  %536 = icmp slt i32 %531, %535
  br i1 %536, label %537, label %659

537:                                              ; preds = %529
  %538 = lshr i32 %531, 3
  %539 = add nsw i32 %535, -1
  %540 = sdiv i32 %539, 8
  %541 = srem i32 %539, 8
  %542 = icmp eq i32 %540, %538
  %543 = and i32 %531, 7
  br i1 %542, label %553, label %544

544:                                              ; preds = %537
  %545 = zext i32 %538 to i64
  %546 = getelementptr inbounds i8, i8* %3, i64 %545
  %547 = load i8, i8* %546, align 1
  %548 = xor i32 %543, 7
  %549 = shl i32 1, %548
  %550 = trunc i32 %549 to i8
  %551 = sub i8 %547, %550
  %552 = icmp eq i32 %543, 7
  br i1 %552, label %565, label %869

553:                                              ; preds = %537
  %554 = srem i32 %539, 8
  %555 = icmp sgt i32 %543, %554
  br i1 %555, label %659, label %556

556:                                              ; preds = %553
  %557 = zext i32 %538 to i64
  %558 = getelementptr inbounds i8, i8* %3, i64 %557
  %559 = load i8, i8* %558, align 1
  %560 = xor i32 %543, 7
  %561 = shl i32 1, %560
  %562 = trunc i32 %561 to i8
  %563 = sub i8 %559, %562
  %564 = icmp slt i32 %543, %554
  br i1 %564, label %910, label %657

565:                                              ; preds = %887, %875, %544, %905, %899, %893, %881, %869
  %566 = phi i8 [ %551, %544 ], [ %873, %869 ], [ %879, %875 ], [ %885, %881 ], [ %891, %887 ], [ %897, %893 ], [ %903, %899 ], [ %909, %905 ]
  store i8 %566, i8* %546, align 1
  %567 = icmp slt i32 %541, 0
  br i1 %567, label %640, label %568

568:                                              ; preds = %565
  %569 = sext i32 %540 to i64
  %570 = getelementptr inbounds i8, i8* %3, i64 %569
  %571 = load i8, i8* %570, align 1
  %572 = add nsw i32 %541, 1
  %573 = icmp ult i32 %572, 16
  br i1 %573, label %574, label %577

574:                                              ; preds = %626, %568
  %575 = phi i8 [ %571, %568 ], [ %636, %626 ]
  %576 = phi i32 [ 0, %568 ], [ %578, %626 ]
  br label %643

577:                                              ; preds = %568
  %578 = and i32 %572, -16
  %579 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %571, i32 0
  %580 = add nsw i32 %578, -16
  %581 = lshr exact i32 %580, 4
  %582 = add nuw nsw i32 %581, 1
  %583 = and i32 %582, 3
  %584 = icmp ult i32 %580, 48
  br i1 %584, label %610, label %585

585:                                              ; preds = %577
  %586 = sub nsw i32 %582, %583
  br label %587

587:                                              ; preds = %587, %585
  %588 = phi <16 x i8> [ %579, %585 ], [ %606, %587 ]
  %589 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %585 ], [ %607, %587 ]
  %590 = phi i32 [ %586, %585 ], [ %608, %587 ]
  %591 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %589
  %592 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %591
  %593 = trunc <16 x i32> %592 to <16 x i8>
  %594 = sub <16 x i8> %588, %593
  %595 = sub <16 x i32> <i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9>, %589
  %596 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %595
  %597 = trunc <16 x i32> %596 to <16 x i8>
  %598 = sub <16 x i8> %594, %597
  %599 = sub <16 x i32> <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>, %589
  %600 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %599
  %601 = trunc <16 x i32> %600 to <16 x i8>
  %602 = sub <16 x i8> %598, %601
  %603 = sub <16 x i32> <i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41>, %589
  %604 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %603
  %605 = trunc <16 x i32> %604 to <16 x i8>
  %606 = sub <16 x i8> %602, %605
  %607 = add <16 x i32> %589, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %608 = add i32 %590, -4
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %610, label %587, !llvm.loop !15

610:                                              ; preds = %587, %577
  %611 = phi <16 x i8> [ undef, %577 ], [ %606, %587 ]
  %612 = phi <16 x i8> [ %579, %577 ], [ %606, %587 ]
  %613 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %577 ], [ %607, %587 ]
  %614 = icmp eq i32 %583, 0
  br i1 %614, label %626, label %615

615:                                              ; preds = %610, %615
  %616 = phi <16 x i8> [ %622, %615 ], [ %612, %610 ]
  %617 = phi <16 x i32> [ %623, %615 ], [ %613, %610 ]
  %618 = phi i32 [ %624, %615 ], [ %583, %610 ]
  %619 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %617
  %620 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %619
  %621 = trunc <16 x i32> %620 to <16 x i8>
  %622 = sub <16 x i8> %616, %621
  %623 = add <16 x i32> %617, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %624 = add i32 %618, -1
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %626, label %615, !llvm.loop !16

626:                                              ; preds = %615, %610
  %627 = phi <16 x i8> [ %611, %610 ], [ %622, %615 ]
  %628 = shufflevector <16 x i8> %627, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %629 = add <16 x i8> %627, %628
  %630 = shufflevector <16 x i8> %629, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %631 = add <16 x i8> %629, %630
  %632 = shufflevector <16 x i8> %631, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %633 = add <16 x i8> %631, %632
  %634 = shufflevector <16 x i8> %633, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %635 = add <16 x i8> %633, %634
  %636 = extractelement <16 x i8> %635, i32 0
  %637 = icmp eq i32 %572, %578
  br i1 %637, label %638, label %574

638:                                              ; preds = %643, %626
  %639 = phi i8 [ %636, %626 ], [ %649, %643 ]
  store i8 %639, i8* %570, align 1
  br label %640

640:                                              ; preds = %638, %565
  %641 = add nuw nsw i32 %538, 1
  %642 = icmp sgt i32 %540, %641
  br i1 %642, label %652, label %659

643:                                              ; preds = %574, %643
  %644 = phi i8 [ %649, %643 ], [ %575, %574 ]
  %645 = phi i32 [ %650, %643 ], [ %576, %574 ]
  %646 = sub nuw nsw i32 7, %645
  %647 = shl i32 1, %646
  %648 = trunc i32 %647 to i8
  %649 = sub i8 %644, %648
  %650 = add nuw nsw i32 %645, 1
  %651 = icmp eq i32 %645, %541
  br i1 %651, label %638, label %643, !llvm.loop !17

652:                                              ; preds = %640
  %653 = getelementptr inbounds i8, i8* %546, i64 1
  %654 = xor i32 %538, -1
  %655 = add nsw i32 %540, %654
  %656 = sext i32 %655 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %653, i8 0, i64 %656, i1 false) #11
  br label %659

657:                                              ; preds = %952, %945, %938, %931, %924, %917, %910, %556
  %658 = phi i8 [ %563, %556 ], [ %915, %910 ], [ %922, %917 ], [ %929, %924 ], [ %936, %931 ], [ %943, %938 ], [ %950, %945 ], [ %956, %952 ]
  store i8 %658, i8* %558, align 1
  br label %659

659:                                              ; preds = %657, %652, %640, %553, %529, %528
  %660 = icmp slt i32 %54, %5
  br i1 %660, label %863, label %868

661:                                              ; preds = %516
  %662 = icmp slt i32 %517, %1
  br i1 %662, label %663, label %868

663:                                              ; preds = %661
  %664 = add nsw i32 %13, 5
  store i32 %664, i32* %2, align 4
  %665 = icmp slt i32 %664, %1
  br i1 %665, label %666, label %868

666:                                              ; preds = %663
  %667 = srem i32 %517, 8
  %668 = sub nsw i32 7, %667
  %669 = shl i32 1, %668
  %670 = sdiv i32 %517, 8
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i8, i8* %0, i64 %671
  %673 = load i8, i8* %672, align 1
  %674 = zext i8 %673 to i32
  %675 = and i32 %669, %674
  %676 = icmp eq i32 %675, 0
  %677 = add nsw i32 %13, 6
  store i32 %677, i32* %2, align 4
  %678 = sdiv i32 %664, 8
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds i8, i8* %0, i64 %679
  %681 = load i8, i8* %680, align 1
  %682 = zext i8 %681 to i32
  %683 = srem i32 %664, 8
  %684 = sub nsw i32 7, %683
  %685 = shl i32 1, %684
  %686 = and i32 %685, %682
  %687 = icmp ne i32 %686, 0
  br i1 %676, label %690, label %688

688:                                              ; preds = %666
  %689 = select i1 %687, i32 2, i32 -2
  br label %723

690:                                              ; preds = %666
  %691 = icmp sge i32 %677, %1
  br i1 %687, label %692, label %706

692:                                              ; preds = %690
  br i1 %691, label %868, label %693

693:                                              ; preds = %692
  %694 = add nsw i32 %13, 7
  store i32 %694, i32* %2, align 4
  %695 = sdiv i32 %677, 8
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds i8, i8* %0, i64 %696
  %698 = load i8, i8* %697, align 1
  %699 = zext i8 %698 to i32
  %700 = srem i32 %677, 8
  %701 = sub nsw i32 7, %700
  %702 = shl i32 1, %701
  %703 = and i32 %702, %699
  %704 = icmp eq i32 %703, 0
  %705 = select i1 %704, i32 -3, i32 3
  br label %723

706:                                              ; preds = %690
  br i1 %691, label %868, label %707

707:                                              ; preds = %706
  %708 = add nsw i32 %13, 7
  store i32 %708, i32* %2, align 4
  %709 = sdiv i32 %677, 8
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds i8, i8* %0, i64 %710
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i32
  %714 = srem i32 %677, 8
  %715 = sub nsw i32 7, %714
  %716 = shl i32 1, %715
  %717 = and i32 %716, %713
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %721, label %719

719:                                              ; preds = %707
  %720 = add nsw i32 %13, 10
  store i32 %720, i32* %2, align 4
  br label %863

721:                                              ; preds = %707
  %722 = add nsw i32 %13, 12
  store i32 %722, i32* %2, align 4
  br label %868

723:                                              ; preds = %53, %688, %693, %94
  %724 = phi i32 [ 0, %53 ], [ %95, %94 ], [ %689, %688 ], [ %705, %693 ]
  %725 = add nsw i32 %724, %55
  br i1 %18, label %856, label %726

726:                                              ; preds = %723
  %727 = icmp sgt i32 %14, 0
  %728 = select i1 %727, i32 %14, i32 0
  %729 = icmp sgt i32 %725, 0
  %730 = select i1 %729, i32 %725, i32 0
  %731 = icmp sgt i32 %730, %5
  %732 = select i1 %731, i32 %5, i32 %730
  %733 = icmp slt i32 %728, %732
  br i1 %733, label %734, label %856

734:                                              ; preds = %726
  %735 = lshr i32 %728, 3
  %736 = add nsw i32 %732, -1
  %737 = sdiv i32 %736, 8
  %738 = srem i32 %736, 8
  %739 = icmp eq i32 %737, %735
  %740 = and i32 %728, 7
  br i1 %739, label %750, label %741

741:                                              ; preds = %734
  %742 = zext i32 %735 to i64
  %743 = getelementptr inbounds i8, i8* %3, i64 %742
  %744 = load i8, i8* %743, align 1
  %745 = xor i32 %740, 7
  %746 = shl i32 1, %745
  %747 = trunc i32 %746 to i8
  %748 = sub i8 %744, %747
  %749 = icmp eq i32 %740, 7
  br i1 %749, label %762, label %957

750:                                              ; preds = %734
  %751 = srem i32 %736, 8
  %752 = icmp sgt i32 %740, %751
  br i1 %752, label %856, label %753

753:                                              ; preds = %750
  %754 = zext i32 %735 to i64
  %755 = getelementptr inbounds i8, i8* %3, i64 %754
  %756 = load i8, i8* %755, align 1
  %757 = xor i32 %740, 7
  %758 = shl i32 1, %757
  %759 = trunc i32 %758 to i8
  %760 = sub i8 %756, %759
  %761 = icmp slt i32 %740, %751
  br i1 %761, label %998, label %854

762:                                              ; preds = %975, %963, %741, %993, %987, %981, %969, %957
  %763 = phi i8 [ %748, %741 ], [ %961, %957 ], [ %967, %963 ], [ %973, %969 ], [ %979, %975 ], [ %985, %981 ], [ %991, %987 ], [ %997, %993 ]
  store i8 %763, i8* %743, align 1
  %764 = icmp slt i32 %738, 0
  br i1 %764, label %837, label %765

765:                                              ; preds = %762
  %766 = sext i32 %737 to i64
  %767 = getelementptr inbounds i8, i8* %3, i64 %766
  %768 = load i8, i8* %767, align 1
  %769 = add nsw i32 %738, 1
  %770 = icmp ult i32 %769, 16
  br i1 %770, label %771, label %774

771:                                              ; preds = %823, %765
  %772 = phi i8 [ %768, %765 ], [ %833, %823 ]
  %773 = phi i32 [ 0, %765 ], [ %775, %823 ]
  br label %840

774:                                              ; preds = %765
  %775 = and i32 %769, -16
  %776 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %768, i32 0
  %777 = add nsw i32 %775, -16
  %778 = lshr exact i32 %777, 4
  %779 = add nuw nsw i32 %778, 1
  %780 = and i32 %779, 3
  %781 = icmp ult i32 %777, 48
  br i1 %781, label %807, label %782

782:                                              ; preds = %774
  %783 = sub nsw i32 %779, %780
  br label %784

784:                                              ; preds = %784, %782
  %785 = phi <16 x i8> [ %776, %782 ], [ %803, %784 ]
  %786 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %782 ], [ %804, %784 ]
  %787 = phi i32 [ %783, %782 ], [ %805, %784 ]
  %788 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %786
  %789 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %788
  %790 = trunc <16 x i32> %789 to <16 x i8>
  %791 = sub <16 x i8> %785, %790
  %792 = sub <16 x i32> <i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9>, %786
  %793 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %792
  %794 = trunc <16 x i32> %793 to <16 x i8>
  %795 = sub <16 x i8> %791, %794
  %796 = sub <16 x i32> <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>, %786
  %797 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %796
  %798 = trunc <16 x i32> %797 to <16 x i8>
  %799 = sub <16 x i8> %795, %798
  %800 = sub <16 x i32> <i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41>, %786
  %801 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %800
  %802 = trunc <16 x i32> %801 to <16 x i8>
  %803 = sub <16 x i8> %799, %802
  %804 = add <16 x i32> %786, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %805 = add i32 %787, -4
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %807, label %784, !llvm.loop !18

807:                                              ; preds = %784, %774
  %808 = phi <16 x i8> [ undef, %774 ], [ %803, %784 ]
  %809 = phi <16 x i8> [ %776, %774 ], [ %803, %784 ]
  %810 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %774 ], [ %804, %784 ]
  %811 = icmp eq i32 %780, 0
  br i1 %811, label %823, label %812

812:                                              ; preds = %807, %812
  %813 = phi <16 x i8> [ %819, %812 ], [ %809, %807 ]
  %814 = phi <16 x i32> [ %820, %812 ], [ %810, %807 ]
  %815 = phi i32 [ %821, %812 ], [ %780, %807 ]
  %816 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %814
  %817 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %816
  %818 = trunc <16 x i32> %817 to <16 x i8>
  %819 = sub <16 x i8> %813, %818
  %820 = add <16 x i32> %814, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %821 = add i32 %815, -1
  %822 = icmp eq i32 %821, 0
  br i1 %822, label %823, label %812, !llvm.loop !19

823:                                              ; preds = %812, %807
  %824 = phi <16 x i8> [ %808, %807 ], [ %819, %812 ]
  %825 = shufflevector <16 x i8> %824, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %826 = add <16 x i8> %824, %825
  %827 = shufflevector <16 x i8> %826, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %828 = add <16 x i8> %826, %827
  %829 = shufflevector <16 x i8> %828, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %830 = add <16 x i8> %828, %829
  %831 = shufflevector <16 x i8> %830, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %832 = add <16 x i8> %830, %831
  %833 = extractelement <16 x i8> %832, i32 0
  %834 = icmp eq i32 %769, %775
  br i1 %834, label %835, label %771

835:                                              ; preds = %840, %823
  %836 = phi i8 [ %833, %823 ], [ %846, %840 ]
  store i8 %836, i8* %767, align 1
  br label %837

837:                                              ; preds = %835, %762
  %838 = add nuw nsw i32 %735, 1
  %839 = icmp sgt i32 %737, %838
  br i1 %839, label %849, label %856

840:                                              ; preds = %771, %840
  %841 = phi i8 [ %846, %840 ], [ %772, %771 ]
  %842 = phi i32 [ %847, %840 ], [ %773, %771 ]
  %843 = sub nuw nsw i32 7, %842
  %844 = shl i32 1, %843
  %845 = trunc i32 %844 to i8
  %846 = sub i8 %841, %845
  %847 = add nuw nsw i32 %842, 1
  %848 = icmp eq i32 %842, %738
  br i1 %848, label %835, label %840, !llvm.loop !20

849:                                              ; preds = %837
  %850 = getelementptr inbounds i8, i8* %743, i64 1
  %851 = xor i32 %735, -1
  %852 = add nsw i32 %737, %851
  %853 = sext i32 %852 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %850, i8 0, i64 %853, i1 false) #11
  br label %856

854:                                              ; preds = %1040, %1033, %1026, %1019, %1012, %1005, %998, %753
  %855 = phi i8 [ %760, %753 ], [ %1003, %998 ], [ %1010, %1005 ], [ %1017, %1012 ], [ %1024, %1019 ], [ %1031, %1026 ], [ %1038, %1033 ], [ %1044, %1040 ]
  store i8 %855, i8* %755, align 1
  br label %856

856:                                              ; preds = %854, %849, %837, %750, %726, %723
  %857 = icmp slt i32 %725, %5
  %858 = icmp slt i32 %14, %725
  %859 = and i1 %857, %858
  br i1 %859, label %860, label %868

860:                                              ; preds = %856
  %861 = xor i1 %18, true
  %862 = zext i1 %861 to i8
  br label %863

863:                                              ; preds = %512, %659, %719, %860
  %864 = phi i8 [ %862, %860 ], [ %15, %719 ], [ %15, %659 ], [ %15, %512 ]
  %865 = phi i32 [ %725, %860 ], [ %14, %719 ], [ %54, %659 ], [ %381, %512 ]
  %866 = load i32, i32* %2, align 4
  %867 = icmp slt i32 %866, %1
  br i1 %867, label %12, label %868

868:                                              ; preds = %863, %67, %856, %661, %659, %514, %512, %376, %169, %69, %706, %692, %663, %310, %6, %721
  ret void

869:                                              ; preds = %544
  %870 = sub nsw i32 6, %543
  %871 = shl i32 1, %870
  %872 = trunc i32 %871 to i8
  %873 = sub i8 %551, %872
  %874 = icmp ult i32 %543, 6
  br i1 %874, label %875, label %565

875:                                              ; preds = %869
  %876 = sub nsw i32 5, %543
  %877 = shl i32 1, %876
  %878 = trunc i32 %877 to i8
  %879 = sub i8 %873, %878
  %880 = icmp eq i32 %543, 5
  br i1 %880, label %565, label %881

881:                                              ; preds = %875
  %882 = sub nsw i32 4, %543
  %883 = shl i32 1, %882
  %884 = trunc i32 %883 to i8
  %885 = sub i8 %879, %884
  %886 = icmp ult i32 %543, 4
  br i1 %886, label %887, label %565

887:                                              ; preds = %881
  %888 = sub nsw i32 3, %543
  %889 = shl i32 1, %888
  %890 = trunc i32 %889 to i8
  %891 = sub i8 %885, %890
  %892 = icmp eq i32 %543, 3
  br i1 %892, label %565, label %893

893:                                              ; preds = %887
  %894 = sub nsw i32 2, %543
  %895 = shl i32 1, %894
  %896 = trunc i32 %895 to i8
  %897 = sub i8 %891, %896
  %898 = icmp ult i32 %543, 2
  br i1 %898, label %899, label %565

899:                                              ; preds = %893
  %900 = sub nsw i32 1, %543
  %901 = shl i32 1, %900
  %902 = trunc i32 %901 to i8
  %903 = sub i8 %897, %902
  %904 = icmp eq i32 %543, 0
  br i1 %904, label %905, label %565

905:                                              ; preds = %899
  %906 = sub nsw i32 0, %543
  %907 = shl i32 1, %906
  %908 = trunc i32 %907 to i8
  %909 = sub i8 %903, %908
  br label %565

910:                                              ; preds = %556
  %911 = add nuw nsw i32 %543, 1
  %912 = sub nsw i32 6, %543
  %913 = shl i32 1, %912
  %914 = trunc i32 %913 to i8
  %915 = sub i8 %563, %914
  %916 = icmp slt i32 %911, %554
  br i1 %916, label %917, label %657

917:                                              ; preds = %910
  %918 = add nuw nsw i32 %543, 2
  %919 = sub nsw i32 5, %543
  %920 = shl i32 1, %919
  %921 = trunc i32 %920 to i8
  %922 = sub i8 %915, %921
  %923 = icmp slt i32 %918, %554
  br i1 %923, label %924, label %657

924:                                              ; preds = %917
  %925 = add nuw nsw i32 %543, 3
  %926 = sub nsw i32 4, %543
  %927 = shl i32 1, %926
  %928 = trunc i32 %927 to i8
  %929 = sub i8 %922, %928
  %930 = icmp slt i32 %925, %554
  br i1 %930, label %931, label %657

931:                                              ; preds = %924
  %932 = add nuw nsw i32 %543, 4
  %933 = sub nsw i32 3, %543
  %934 = shl i32 1, %933
  %935 = trunc i32 %934 to i8
  %936 = sub i8 %929, %935
  %937 = icmp slt i32 %932, %554
  br i1 %937, label %938, label %657

938:                                              ; preds = %931
  %939 = add nuw nsw i32 %543, 5
  %940 = sub nsw i32 2, %543
  %941 = shl i32 1, %940
  %942 = trunc i32 %941 to i8
  %943 = sub i8 %936, %942
  %944 = icmp slt i32 %939, %554
  br i1 %944, label %945, label %657

945:                                              ; preds = %938
  %946 = add nuw nsw i32 %543, 6
  %947 = sub nsw i32 1, %543
  %948 = shl i32 1, %947
  %949 = trunc i32 %948 to i8
  %950 = sub i8 %943, %949
  %951 = icmp slt i32 %946, %554
  br i1 %951, label %952, label %657

952:                                              ; preds = %945
  %953 = sub nsw i32 0, %543
  %954 = shl i32 1, %953
  %955 = trunc i32 %954 to i8
  %956 = sub i8 %950, %955
  br label %657

957:                                              ; preds = %741
  %958 = sub nsw i32 6, %740
  %959 = shl i32 1, %958
  %960 = trunc i32 %959 to i8
  %961 = sub i8 %748, %960
  %962 = icmp ult i32 %740, 6
  br i1 %962, label %963, label %762

963:                                              ; preds = %957
  %964 = sub nsw i32 5, %740
  %965 = shl i32 1, %964
  %966 = trunc i32 %965 to i8
  %967 = sub i8 %961, %966
  %968 = icmp eq i32 %740, 5
  br i1 %968, label %762, label %969

969:                                              ; preds = %963
  %970 = sub nsw i32 4, %740
  %971 = shl i32 1, %970
  %972 = trunc i32 %971 to i8
  %973 = sub i8 %967, %972
  %974 = icmp ult i32 %740, 4
  br i1 %974, label %975, label %762

975:                                              ; preds = %969
  %976 = sub nsw i32 3, %740
  %977 = shl i32 1, %976
  %978 = trunc i32 %977 to i8
  %979 = sub i8 %973, %978
  %980 = icmp eq i32 %740, 3
  br i1 %980, label %762, label %981

981:                                              ; preds = %975
  %982 = sub nsw i32 2, %740
  %983 = shl i32 1, %982
  %984 = trunc i32 %983 to i8
  %985 = sub i8 %979, %984
  %986 = icmp ult i32 %740, 2
  br i1 %986, label %987, label %762

987:                                              ; preds = %981
  %988 = sub nsw i32 1, %740
  %989 = shl i32 1, %988
  %990 = trunc i32 %989 to i8
  %991 = sub i8 %985, %990
  %992 = icmp eq i32 %740, 0
  br i1 %992, label %993, label %762

993:                                              ; preds = %987
  %994 = sub nsw i32 0, %740
  %995 = shl i32 1, %994
  %996 = trunc i32 %995 to i8
  %997 = sub i8 %991, %996
  br label %762

998:                                              ; preds = %753
  %999 = add nuw nsw i32 %740, 1
  %1000 = sub nsw i32 6, %740
  %1001 = shl i32 1, %1000
  %1002 = trunc i32 %1001 to i8
  %1003 = sub i8 %760, %1002
  %1004 = icmp slt i32 %999, %751
  br i1 %1004, label %1005, label %854

1005:                                             ; preds = %998
  %1006 = add nuw nsw i32 %740, 2
  %1007 = sub nsw i32 5, %740
  %1008 = shl i32 1, %1007
  %1009 = trunc i32 %1008 to i8
  %1010 = sub i8 %1003, %1009
  %1011 = icmp slt i32 %1006, %751
  br i1 %1011, label %1012, label %854

1012:                                             ; preds = %1005
  %1013 = add nuw nsw i32 %740, 3
  %1014 = sub nsw i32 4, %740
  %1015 = shl i32 1, %1014
  %1016 = trunc i32 %1015 to i8
  %1017 = sub i8 %1010, %1016
  %1018 = icmp slt i32 %1013, %751
  br i1 %1018, label %1019, label %854

1019:                                             ; preds = %1012
  %1020 = add nuw nsw i32 %740, 4
  %1021 = sub nsw i32 3, %740
  %1022 = shl i32 1, %1021
  %1023 = trunc i32 %1022 to i8
  %1024 = sub i8 %1017, %1023
  %1025 = icmp slt i32 %1020, %751
  br i1 %1025, label %1026, label %854

1026:                                             ; preds = %1019
  %1027 = add nuw nsw i32 %740, 5
  %1028 = sub nsw i32 2, %740
  %1029 = shl i32 1, %1028
  %1030 = trunc i32 %1029 to i8
  %1031 = sub i8 %1024, %1030
  %1032 = icmp slt i32 %1027, %751
  br i1 %1032, label %1033, label %854

1033:                                             ; preds = %1026
  %1034 = add nuw nsw i32 %740, 6
  %1035 = sub nsw i32 1, %740
  %1036 = shl i32 1, %1035
  %1037 = trunc i32 %1036 to i8
  %1038 = sub i8 %1031, %1037
  %1039 = icmp slt i32 %1034, %751
  br i1 %1039, label %1040, label %854

1040:                                             ; preds = %1033
  %1041 = sub nsw i32 0, %740
  %1042 = shl i32 1, %1041
  %1043 = trunc i32 %1042 to i8
  %1044 = sub i8 %1038, %1043
  br label %854

1045:                                             ; preds = %191
  %1046 = sub nsw i32 6, %190
  %1047 = shl i32 1, %1046
  %1048 = trunc i32 %1047 to i8
  %1049 = sub i8 %198, %1048
  %1050 = icmp ult i32 %190, 6
  br i1 %1050, label %1051, label %212

1051:                                             ; preds = %1045
  %1052 = sub nsw i32 5, %190
  %1053 = shl i32 1, %1052
  %1054 = trunc i32 %1053 to i8
  %1055 = sub i8 %1049, %1054
  %1056 = icmp eq i32 %190, 5
  br i1 %1056, label %212, label %1057

1057:                                             ; preds = %1051
  %1058 = sub nsw i32 4, %190
  %1059 = shl i32 1, %1058
  %1060 = trunc i32 %1059 to i8
  %1061 = sub i8 %1055, %1060
  %1062 = icmp ult i32 %190, 4
  br i1 %1062, label %1063, label %212

1063:                                             ; preds = %1057
  %1064 = sub nsw i32 3, %190
  %1065 = shl i32 1, %1064
  %1066 = trunc i32 %1065 to i8
  %1067 = sub i8 %1061, %1066
  %1068 = icmp eq i32 %190, 3
  br i1 %1068, label %212, label %1069

1069:                                             ; preds = %1063
  %1070 = sub nsw i32 2, %190
  %1071 = shl i32 1, %1070
  %1072 = trunc i32 %1071 to i8
  %1073 = sub i8 %1067, %1072
  %1074 = icmp ult i32 %190, 2
  br i1 %1074, label %1075, label %212

1075:                                             ; preds = %1069
  %1076 = sub nsw i32 1, %190
  %1077 = shl i32 1, %1076
  %1078 = trunc i32 %1077 to i8
  %1079 = sub i8 %1073, %1078
  %1080 = icmp eq i32 %190, 0
  br i1 %1080, label %1081, label %212

1081:                                             ; preds = %1075
  %1082 = sub nsw i32 0, %190
  %1083 = shl i32 1, %1082
  %1084 = trunc i32 %1083 to i8
  %1085 = sub i8 %1079, %1084
  br label %212

1086:                                             ; preds = %203
  %1087 = add nuw nsw i32 %190, 1
  %1088 = sub nsw i32 6, %190
  %1089 = shl i32 1, %1088
  %1090 = trunc i32 %1089 to i8
  %1091 = sub i8 %210, %1090
  %1092 = icmp slt i32 %1087, %201
  br i1 %1092, label %1093, label %304

1093:                                             ; preds = %1086
  %1094 = add nuw nsw i32 %190, 2
  %1095 = sub nsw i32 5, %190
  %1096 = shl i32 1, %1095
  %1097 = trunc i32 %1096 to i8
  %1098 = sub i8 %1091, %1097
  %1099 = icmp slt i32 %1094, %201
  br i1 %1099, label %1100, label %304

1100:                                             ; preds = %1093
  %1101 = add nuw nsw i32 %190, 3
  %1102 = sub nsw i32 4, %190
  %1103 = shl i32 1, %1102
  %1104 = trunc i32 %1103 to i8
  %1105 = sub i8 %1098, %1104
  %1106 = icmp slt i32 %1101, %201
  br i1 %1106, label %1107, label %304

1107:                                             ; preds = %1100
  %1108 = add nuw nsw i32 %190, 4
  %1109 = sub nsw i32 3, %190
  %1110 = shl i32 1, %1109
  %1111 = trunc i32 %1110 to i8
  %1112 = sub i8 %1105, %1111
  %1113 = icmp slt i32 %1108, %201
  br i1 %1113, label %1114, label %304

1114:                                             ; preds = %1107
  %1115 = add nuw nsw i32 %190, 5
  %1116 = sub nsw i32 2, %190
  %1117 = shl i32 1, %1116
  %1118 = trunc i32 %1117 to i8
  %1119 = sub i8 %1112, %1118
  %1120 = icmp slt i32 %1115, %201
  br i1 %1120, label %1121, label %304

1121:                                             ; preds = %1114
  %1122 = add nuw nsw i32 %190, 6
  %1123 = sub nsw i32 1, %190
  %1124 = shl i32 1, %1123
  %1125 = trunc i32 %1124 to i8
  %1126 = sub i8 %1119, %1125
  %1127 = icmp slt i32 %1122, %201
  br i1 %1127, label %1128, label %304

1128:                                             ; preds = %1121
  %1129 = sub nsw i32 0, %190
  %1130 = shl i32 1, %1129
  %1131 = trunc i32 %1130 to i8
  %1132 = sub i8 %1126, %1131
  br label %304

1133:                                             ; preds = %397
  %1134 = sub nsw i32 6, %396
  %1135 = shl i32 1, %1134
  %1136 = trunc i32 %1135 to i8
  %1137 = sub i8 %404, %1136
  %1138 = icmp ult i32 %396, 6
  br i1 %1138, label %1139, label %418

1139:                                             ; preds = %1133
  %1140 = sub nsw i32 5, %396
  %1141 = shl i32 1, %1140
  %1142 = trunc i32 %1141 to i8
  %1143 = sub i8 %1137, %1142
  %1144 = icmp eq i32 %396, 5
  br i1 %1144, label %418, label %1145

1145:                                             ; preds = %1139
  %1146 = sub nsw i32 4, %396
  %1147 = shl i32 1, %1146
  %1148 = trunc i32 %1147 to i8
  %1149 = sub i8 %1143, %1148
  %1150 = icmp ult i32 %396, 4
  br i1 %1150, label %1151, label %418

1151:                                             ; preds = %1145
  %1152 = sub nsw i32 3, %396
  %1153 = shl i32 1, %1152
  %1154 = trunc i32 %1153 to i8
  %1155 = sub i8 %1149, %1154
  %1156 = icmp eq i32 %396, 3
  br i1 %1156, label %418, label %1157

1157:                                             ; preds = %1151
  %1158 = sub nsw i32 2, %396
  %1159 = shl i32 1, %1158
  %1160 = trunc i32 %1159 to i8
  %1161 = sub i8 %1155, %1160
  %1162 = icmp ult i32 %396, 2
  br i1 %1162, label %1163, label %418

1163:                                             ; preds = %1157
  %1164 = sub nsw i32 1, %396
  %1165 = shl i32 1, %1164
  %1166 = trunc i32 %1165 to i8
  %1167 = sub i8 %1161, %1166
  %1168 = icmp eq i32 %396, 0
  br i1 %1168, label %1169, label %418

1169:                                             ; preds = %1163
  %1170 = sub nsw i32 0, %396
  %1171 = shl i32 1, %1170
  %1172 = trunc i32 %1171 to i8
  %1173 = sub i8 %1167, %1172
  br label %418

1174:                                             ; preds = %409
  %1175 = add nuw nsw i32 %396, 1
  %1176 = sub nsw i32 6, %396
  %1177 = shl i32 1, %1176
  %1178 = trunc i32 %1177 to i8
  %1179 = sub i8 %416, %1178
  %1180 = icmp slt i32 %1175, %407
  br i1 %1180, label %1181, label %510

1181:                                             ; preds = %1174
  %1182 = add nuw nsw i32 %396, 2
  %1183 = sub nsw i32 5, %396
  %1184 = shl i32 1, %1183
  %1185 = trunc i32 %1184 to i8
  %1186 = sub i8 %1179, %1185
  %1187 = icmp slt i32 %1182, %407
  br i1 %1187, label %1188, label %510

1188:                                             ; preds = %1181
  %1189 = add nuw nsw i32 %396, 3
  %1190 = sub nsw i32 4, %396
  %1191 = shl i32 1, %1190
  %1192 = trunc i32 %1191 to i8
  %1193 = sub i8 %1186, %1192
  %1194 = icmp slt i32 %1189, %407
  br i1 %1194, label %1195, label %510

1195:                                             ; preds = %1188
  %1196 = add nuw nsw i32 %396, 4
  %1197 = sub nsw i32 3, %396
  %1198 = shl i32 1, %1197
  %1199 = trunc i32 %1198 to i8
  %1200 = sub i8 %1193, %1199
  %1201 = icmp slt i32 %1196, %407
  br i1 %1201, label %1202, label %510

1202:                                             ; preds = %1195
  %1203 = add nuw nsw i32 %396, 5
  %1204 = sub nsw i32 2, %396
  %1205 = shl i32 1, %1204
  %1206 = trunc i32 %1205 to i8
  %1207 = sub i8 %1200, %1206
  %1208 = icmp slt i32 %1203, %407
  br i1 %1208, label %1209, label %510

1209:                                             ; preds = %1202
  %1210 = add nuw nsw i32 %396, 6
  %1211 = sub nsw i32 1, %396
  %1212 = shl i32 1, %1211
  %1213 = trunc i32 %1212 to i8
  %1214 = sub i8 %1207, %1213
  %1215 = icmp slt i32 %1210, %407
  br i1 %1215, label %1216, label %510

1216:                                             ; preds = %1209
  %1217 = sub nsw i32 0, %396
  %1218 = shl i32 1, %1217
  %1219 = trunc i32 %1218 to i8
  %1220 = sub i8 %1214, %1219
  br label %510
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @_ZN7fxcodec12_GLOBAL__N_17FindBitEPKhiib(i8* nocapture readonly, i32, i32, i1 zeroext) unnamed_addr #2 {
  %5 = icmp slt i32 %2, %1
  br i1 %5, label %6, label %81

6:                                                ; preds = %4
  %7 = xor i1 %3, true
  %8 = sext i1 %7 to i8
  %9 = srem i32 %2, 8
  %10 = sdiv i32 %2, 8
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %6
  %13 = sext i32 %10 to i64
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = xor i8 %15, %8
  %17 = lshr i32 255, %9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %16, %18
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  %22 = add nsw i32 %2, 7
  br label %30

23:                                               ; preds = %12
  %24 = shl nsw i32 %10, 3
  %25 = zext i8 %19 to i64
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN7fxcodec12_GLOBAL__N_110OneLeadPosE to [256 x i8]*), i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nsw i32 %24, %28
  br label %81

30:                                               ; preds = %21, %6
  %31 = phi i32 [ %2, %6 ], [ %22, %21 ]
  %32 = add nsw i32 %1, 7
  %33 = sdiv i32 %32, 8
  %34 = sdiv i32 %31, 8
  %35 = icmp sgt i32 %32, 63
  br i1 %35, label %36, label %56

36:                                               ; preds = %30
  %37 = add nsw i32 %33, -8
  %38 = icmp slt i32 %34, %37
  br i1 %38, label %39, label %56

39:                                               ; preds = %36
  %40 = select i1 %3, [8 x i8]* @_ZZN7fxcodec12_GLOBAL__N_17FindBitEPKhiibE12skip_block_0, [8 x i8]* @_ZZN7fxcodec12_GLOBAL__N_17FindBitEPKhiibE12skip_block_1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %40, i64 0, i64 0
  %42 = sext i32 %34 to i64
  %43 = sext i32 %37 to i64
  br label %44

44:                                               ; preds = %39, %50
  %45 = phi i64 [ %42, %39 ], [ %51, %50 ]
  %46 = phi i32 [ %34, %39 ], [ %52, %50 ]
  %47 = getelementptr inbounds i8, i8* %0, i64 %45
  %48 = tail call i32 @bcmp(i8* %47, i8* nonnull %41, i64 8)
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %44
  %51 = add nsw i64 %45, 8
  %52 = add nsw i32 %46, 8
  %53 = icmp slt i64 %51, %43
  br i1 %53, label %44, label %56

54:                                               ; preds = %44
  %55 = trunc i64 %45 to i32
  br label %56

56:                                               ; preds = %50, %54, %36, %30
  %57 = phi i32 [ %34, %36 ], [ %34, %30 ], [ %55, %54 ], [ %52, %50 ]
  %58 = icmp slt i32 %57, %33
  br i1 %58, label %59, label %81

59:                                               ; preds = %56
  %60 = sext i32 %57 to i64
  %61 = sext i32 %33 to i64
  br label %62

62:                                               ; preds = %78, %59
  %63 = phi i64 [ %60, %59 ], [ %79, %78 ]
  %64 = getelementptr inbounds i8, i8* %0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = xor i8 %65, %8
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %78, label %68

68:                                               ; preds = %62
  %69 = trunc i64 %63 to i32
  %70 = shl nsw i32 %69, 3
  %71 = zext i8 %66 to i64
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN7fxcodec12_GLOBAL__N_110OneLeadPosE to [256 x i8]*), i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = add nsw i32 %70, %74
  %76 = icmp sgt i32 %75, %1
  %77 = select i1 %76, i32 %1, i32 %75
  br label %81

78:                                               ; preds = %62
  %79 = add nsw i64 %63, 1
  %80 = icmp eq i64 %79, %61
  br i1 %80, label %81, label %62

81:                                               ; preds = %78, %56, %68, %23, %4
  %82 = phi i32 [ %1, %4 ], [ %29, %23 ], [ %77, %68 ], [ %1, %56 ], [ %1, %78 ]
  ret i32 %82
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare i64 @_ZN7fxcodec16CalculatePitch32Eii(i32, i32) local_unnamed_addr #3

declare void @_ZN7fxcodec15ScanlineDecoderC2Eiiiiiij(%"class.fxcodec::ScanlineDecoder"*, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_110FaxDecoderD2Ev(%"class.fxcodec::(anonymous namespace)::FaxDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_110FaxDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #11
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 7, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 7, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %12) #11
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %19) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7fxcodec12_GLOBAL__N_110FaxDecoderD0Ev(%"class.fxcodec::(anonymous namespace)::FaxDecoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7fxcodec12_GLOBAL__N_110FaxDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #11
  br label %10

10:                                               ; preds = %6, %1
  %11 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 7, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 7, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %12) #11
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0
  tail call void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"* %19) #11
  %20 = bitcast %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @_ZN7fxcodec12_GLOBAL__N_110FaxDecoder12GetSrcOffsetEv(%"class.fxcodec::(anonymous namespace)::FaxDecoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = add nsw i32 %3, 7
  %5 = sdiv i32 %4, 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 6, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  %10 = select i1 %9, i64 %8, i64 %6
  %11 = trunc i64 %10 to i32
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN7fxcodec12_GLOBAL__N_110FaxDecoder8v_RewindEv(%"class.fxcodec::(anonymous namespace)::FaxDecoder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = ptrtoint i8* %3 to i64
  %8 = sub i64 %6, %7
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 -1, i64 %8, i1 false)
  %9 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 2
  store i32 0, i32* %9, align 4
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @_ZN7fxcodec12_GLOBAL__N_110FaxDecoder13v_GetNextLineEv(%"class.fxcodec::(anonymous namespace)::FaxDecoder"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.pdfium::span", align 8
  %3 = alloca %"class.pdfium::span", align 8
  %4 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 6, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = shl i32 %6, 3
  %8 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 6, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  br label %12

12:                                               ; preds = %15, %1
  %13 = phi i32 [ %16, %15 ], [ %11, %1 ]
  %14 = icmp slt i32 %13, %7
  br i1 %14, label %15, label %31

15:                                               ; preds = %12
  %16 = add nsw i32 %13, 1
  store i32 %16, i32* %10, align 4
  %17 = sdiv i32 %13, 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %9, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = srem i32 %13, 8
  %23 = sub nsw i32 7, %22
  %24 = shl i32 1, %23
  %25 = and i32 %24, %21
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %12, label %27

27:                                               ; preds = %15
  %28 = sub nsw i32 %16, %11
  %29 = icmp slt i32 %28, 12
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  store i32 %11, i32* %10, align 4
  br label %31

31:                                               ; preds = %12, %27, %30
  %32 = phi i32 [ %16, %27 ], [ %11, %30 ], [ %13, %12 ]
  %33 = icmp slt i32 %32, %7
  br i1 %33, label %34, label %190

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 7
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %35, i64 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 7, i32 0, i32 1
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector"* %35 to i64*
  %42 = ptrtoint i8* %37 to i64
  %43 = sub i64 %40, %42
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -1, i64 %43, i1 false)
  %44 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %63

47:                                               ; preds = %34
  %48 = load i8*, i8** %8, align 8
  %49 = load i8*, i8** %36, align 8
  %50 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8
  %51 = bitcast %"class.std::__1::vector"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 1
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %55, %52
  %57 = bitcast %"class.pdfium::span"* %2 to i64*
  store i64 %52, i64* %57, align 8
  %58 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %2, i64 0, i32 1
  store i64 %56, i64* %58, align 8
  %59 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  call fastcc void @_ZN7fxcodec12_GLOBAL__N_111FaxG4GetRowEPKhiPiPhN6pdfium4spanIS1_EEi(i8* %48, i32 %7, i32* %10, i8* %49, %"class.pdfium::span"* nonnull %2, i32 %60)
  %61 = load i8*, i8** %36, align 8
  %62 = load i8*, i8** %38, align 8
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %50, i8* %61, i8* %62) #11
  br label %103

63:                                               ; preds = %34
  %64 = icmp eq i32 %45, 0
  %65 = load i8*, i8** %8, align 8
  br i1 %64, label %66, label %70

66:                                               ; preds = %63
  %67 = load i8*, i8** %36, align 8
  %68 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0, i32 1
  %69 = load i32, i32* %68, align 8
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_112FaxGet1DLineEPKhiPiPhi(i8* %65, i32 %7, i32* %10, i8* %67, i32 %69)
  br label %103

70:                                               ; preds = %63
  %71 = load i32, i32* %10, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %10, align 4
  %73 = sdiv i32 %71, 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %65, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = srem i32 %71, 8
  %79 = sub nsw i32 7, %78
  %80 = shl i32 1, %79
  %81 = and i32 %80, %77
  %82 = icmp eq i32 %81, 0
  %83 = load i8*, i8** %36, align 8
  br i1 %82, label %87, label %84

84:                                               ; preds = %70
  %85 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0, i32 1
  %86 = load i32, i32* %85, align 8
  tail call fastcc void @_ZN7fxcodec12_GLOBAL__N_112FaxGet1DLineEPKhiPiPhi(i8* %65, i32 %7, i32* %10, i8* %83, i32 %86)
  br label %99

87:                                               ; preds = %70
  %88 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8
  %89 = bitcast %"class.std::__1::vector"* %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8, i32 0, i32 1
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %93, %90
  %95 = bitcast %"class.pdfium::span"* %3 to i64*
  store i64 %90, i64* %95, align 8
  %96 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 0, i32 1
  %98 = load i32, i32* %97, align 8
  call fastcc void @_ZN7fxcodec12_GLOBAL__N_111FaxG4GetRowEPKhiPiPhN6pdfium4spanIS1_EEi(i8* %65, i32 %7, i32* %10, i8* %83, %"class.pdfium::span"* nonnull %3, i32 %98)
  br label %99

99:                                               ; preds = %87, %84
  %100 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 8
  %101 = load i8*, i8** %36, align 8
  %102 = load i8*, i8** %38, align 8
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %100, i8* %101, i8* %102) #11
  br label %103

103:                                              ; preds = %66, %99, %47
  %104 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 4
  %105 = load i8, i8* %104, align 1, !range !21
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %129, label %107

107:                                              ; preds = %103
  %108 = load i8*, i8** %8, align 8
  %109 = load i32, i32* %10, align 4
  br label %110

110:                                              ; preds = %113, %107
  %111 = phi i32 [ %114, %113 ], [ %109, %107 ]
  %112 = icmp slt i32 %111, %7
  br i1 %112, label %113, label %129

113:                                              ; preds = %110
  %114 = add nsw i32 %111, 1
  store i32 %114, i32* %10, align 4
  %115 = sdiv i32 %111, 8
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %108, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = srem i32 %111, 8
  %121 = sub nsw i32 7, %120
  %122 = shl i32 1, %121
  %123 = and i32 %122, %119
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %110, label %125

125:                                              ; preds = %113
  %126 = sub nsw i32 %114, %109
  %127 = icmp slt i32 %126, 12
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  store i32 %109, i32* %10, align 4
  br label %129

129:                                              ; preds = %110, %128, %125, %103
  %130 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 3
  %131 = load i8, i8* %130, align 8, !range !21
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %163, label %133

133:                                              ; preds = %129
  %134 = load i32, i32* %10, align 4
  %135 = icmp slt i32 %134, %7
  br i1 %135, label %136, label %163

136:                                              ; preds = %133
  %137 = add nsw i32 %134, 7
  %138 = and i32 %137, -8
  %139 = icmp slt i32 %134, %138
  br i1 %139, label %140, label %162

140:                                              ; preds = %136
  %141 = load i64, i64* %4, align 8
  br label %142

142:                                              ; preds = %140, %158
  %143 = phi i32 [ %159, %158 ], [ %134, %140 ]
  %144 = sdiv i32 %143, 8
  %145 = srem i32 %143, 8
  %146 = sext i32 %144 to i64
  %147 = icmp ugt i64 %141, %146
  br i1 %147, label %149, label %148, !prof !3

148:                                              ; preds = %142
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !5
  unreachable

149:                                              ; preds = %142
  %150 = load i8*, i8** %8, align 8
  %151 = getelementptr inbounds i8, i8* %150, i64 %146
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = sub nsw i32 7, %145
  %155 = shl i32 1, %154
  %156 = and i32 %155, %153
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %161

158:                                              ; preds = %149
  %159 = add nsw i32 %143, 1
  %160 = icmp slt i32 %159, %138
  br i1 %160, label %142, label %162

161:                                              ; preds = %149
  store i8 0, i8* %130, align 8
  br label %163

162:                                              ; preds = %158, %136
  store i32 %138, i32* %10, align 4
  br label %163

163:                                              ; preds = %161, %162, %129, %133
  %164 = getelementptr inbounds %"class.fxcodec::(anonymous namespace)::FaxDecoder", %"class.fxcodec::(anonymous namespace)::FaxDecoder"* %0, i64 0, i32 5
  %165 = load i8, i8* %164, align 2, !range !21
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %163
  %168 = load i8*, i8** %36, align 8
  br label %190

169:                                              ; preds = %163
  %170 = bitcast %"class.std::__1::vector"* %35 to i32**
  %171 = load i32*, i32** %170, align 8
  %172 = load i64, i64* %39, align 8
  %173 = ptrtoint i32* %171 to i64
  %174 = sub i64 %172, %173
  %175 = icmp ugt i64 %174, 3
  %176 = bitcast i32* %171 to i8*
  br i1 %175, label %177, label %190

177:                                              ; preds = %169, %177
  %178 = phi i64 [ %182, %177 ], [ 0, %169 ]
  %179 = getelementptr inbounds i32, i32* %171, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = xor i32 %180, -1
  store i32 %181, i32* %179, align 4
  %182 = add nuw nsw i64 %178, 1
  %183 = load i64, i64* %39, align 8
  %184 = load i64, i64* %41, align 8
  %185 = sub i64 %183, %184
  %186 = lshr i64 %185, 2
  %187 = icmp ult i64 %182, %186
  br i1 %187, label %177, label %188

188:                                              ; preds = %177
  %189 = inttoptr i64 %184 to i8*
  br label %190

190:                                              ; preds = %169, %188, %167, %31
  %191 = phi i8* [ null, %31 ], [ %168, %167 ], [ %189, %188 ], [ %176, %169 ]
  ret i8* %191
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7fxcodec15ScanlineDecoderD2Ev(%"class.fxcodec::ScanlineDecoder"*) unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7fxcodec12_GLOBAL__N_112FaxGet1DLineEPKhiPiPhi(i8* nocapture readonly, i32, i32* nocapture, i8* nocapture, i32) unnamed_addr #0 {
  %6 = load i32, i32* %2, align 4
  %7 = icmp slt i32 %6, %1
  br i1 %7, label %13, label %235

8:                                                ; preds = %233
  %9 = xor i1 %17, true
  %10 = zext i1 %9 to i8
  %11 = load i32, i32* %2, align 4
  %12 = icmp slt i32 %11, %1
  br i1 %12, label %13, label %235

13:                                               ; preds = %5, %8
  %14 = phi i32 [ %11, %8 ], [ %6, %5 ]
  %15 = phi i32 [ %104, %8 ], [ 0, %5 ]
  %16 = phi i8 [ %10, %8 ], [ 1, %5 ]
  %17 = icmp ne i8 %16, 0
  %18 = select i1 %17, i8* getelementptr inbounds ([325 x i8], [325 x i8]* @_ZN7fxcodec12_GLOBAL__N_114FaxWhiteRunInsE, i64 0, i64 0), i8* getelementptr inbounds ([326 x i8], [326 x i8]* @_ZN7fxcodec12_GLOBAL__N_114FaxBlackRunInsE, i64 0, i64 0)
  %19 = load i8, i8* %18, align 16
  %20 = icmp eq i8 %19, -1
  br i1 %20, label %39, label %21

21:                                               ; preds = %13, %87
  %22 = phi i32 [ %55, %87 ], [ %14, %13 ]
  %23 = phi i32 [ %101, %87 ], [ 0, %13 ]
  br label %33

24:                                               ; preds = %69
  %25 = trunc i64 %70 to i32
  br label %26

26:                                               ; preds = %41, %24
  %27 = phi i32 [ %36, %41 ], [ %25, %24 ]
  %28 = add nsw i32 %27, 1
  %29 = sext i32 %27 to i64
  %30 = getelementptr inbounds i8, i8* %18, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, -1
  br i1 %32, label %39, label %33

33:                                               ; preds = %26, %21
  %34 = phi i32 [ %55, %26 ], [ %22, %21 ]
  %35 = phi i8 [ %31, %26 ], [ %19, %21 ]
  %36 = phi i32 [ %28, %26 ], [ 1, %21 ]
  %37 = phi i32 [ %54, %26 ], [ 0, %21 ]
  %38 = icmp slt i32 %34, %1
  br i1 %38, label %41, label %39

39:                                               ; preds = %13, %26, %33
  %40 = phi i32 [ %34, %33 ], [ %55, %26 ], [ %14, %13 ]
  br label %72

41:                                               ; preds = %33
  %42 = shl i32 %37, 1
  %43 = sdiv i32 %34, 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = srem i32 %34, 8
  %49 = sub nsw i32 7, %48
  %50 = shl i32 1, %49
  %51 = and i32 %50, %47
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i32
  %54 = or i32 %42, %53
  %55 = add nsw i32 %34, 1
  store i32 %55, i32* %2, align 4
  %56 = icmp eq i8 %35, 0
  br i1 %56, label %26, label %57

57:                                               ; preds = %41
  %58 = zext i8 %35 to i32
  %59 = mul nuw nsw i32 %58, 3
  %60 = add nsw i32 %59, %36
  %61 = sext i32 %36 to i64
  %62 = sext i32 %60 to i64
  br label %63

63:                                               ; preds = %69, %57
  %64 = phi i64 [ %61, %57 ], [ %70, %69 ]
  %65 = getelementptr inbounds i8, i8* %18, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = icmp eq i32 %54, %67
  br i1 %68, label %87, label %69

69:                                               ; preds = %63
  %70 = add nsw i64 %64, 3
  %71 = icmp slt i64 %70, %62
  br i1 %71, label %63, label %24

72:                                               ; preds = %39, %75
  %73 = phi i32 [ %76, %75 ], [ %40, %39 ]
  %74 = icmp slt i32 %73, %1
  br i1 %74, label %75, label %235

75:                                               ; preds = %72
  %76 = add nsw i32 %73, 1
  store i32 %76, i32* %2, align 4
  %77 = sdiv i32 %73, 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = srem i32 %73, 8
  %83 = sub nsw i32 7, %82
  %84 = shl i32 1, %83
  %85 = and i32 %84, %81
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %72, label %235

87:                                               ; preds = %63
  %88 = shl i64 %64, 32
  %89 = add i64 %88, 4294967296
  %90 = ashr exact i64 %89, 32
  %91 = getelementptr inbounds i8, i8* %18, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add i64 %88, 8589934592
  %95 = ashr exact i64 %94, 32
  %96 = getelementptr inbounds i8, i8* %18, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = shl nuw nsw i32 %98, 8
  %100 = or i32 %99, %93
  %101 = add nuw nsw i32 %100, %23
  %102 = icmp ult i32 %100, 64
  br i1 %102, label %103, label %21

103:                                              ; preds = %87
  %104 = add nuw nsw i32 %101, %15
  br i1 %17, label %233, label %105

105:                                              ; preds = %103
  %106 = icmp sgt i32 %104, 0
  %107 = select i1 %106, i32 %104, i32 0
  %108 = icmp sgt i32 %107, %4
  %109 = select i1 %108, i32 %4, i32 %107
  %110 = icmp slt i32 %15, %109
  br i1 %110, label %111, label %233

111:                                              ; preds = %105
  %112 = lshr i32 %15, 3
  %113 = add nsw i32 %109, -1
  %114 = sdiv i32 %113, 8
  %115 = srem i32 %113, 8
  %116 = icmp eq i32 %114, %112
  %117 = and i32 %15, 7
  br i1 %116, label %127, label %118

118:                                              ; preds = %111
  %119 = zext i32 %112 to i64
  %120 = getelementptr inbounds i8, i8* %3, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = xor i32 %117, 7
  %123 = shl i32 1, %122
  %124 = trunc i32 %123 to i8
  %125 = sub i8 %121, %124
  %126 = icmp eq i32 %117, 7
  br i1 %126, label %139, label %236

127:                                              ; preds = %111
  %128 = srem i32 %113, 8
  %129 = icmp sgt i32 %117, %128
  br i1 %129, label %233, label %130

130:                                              ; preds = %127
  %131 = zext i32 %112 to i64
  %132 = getelementptr inbounds i8, i8* %3, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = xor i32 %117, 7
  %135 = shl i32 1, %134
  %136 = trunc i32 %135 to i8
  %137 = sub i8 %133, %136
  %138 = icmp slt i32 %117, %128
  br i1 %138, label %277, label %231

139:                                              ; preds = %272, %266, %260, %254, %248, %242, %236, %118
  %140 = phi i8 [ %125, %118 ], [ %240, %236 ], [ %246, %242 ], [ %252, %248 ], [ %258, %254 ], [ %264, %260 ], [ %270, %266 ], [ %276, %272 ]
  store i8 %140, i8* %120, align 1
  %141 = icmp slt i32 %115, 0
  br i1 %141, label %214, label %142

142:                                              ; preds = %139
  %143 = sext i32 %114 to i64
  %144 = getelementptr inbounds i8, i8* %3, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = add nsw i32 %115, 1
  %147 = icmp ult i32 %146, 16
  br i1 %147, label %148, label %151

148:                                              ; preds = %200, %142
  %149 = phi i8 [ %145, %142 ], [ %210, %200 ]
  %150 = phi i32 [ 0, %142 ], [ %152, %200 ]
  br label %217

151:                                              ; preds = %142
  %152 = and i32 %146, -16
  %153 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %145, i32 0
  %154 = add nsw i32 %152, -16
  %155 = lshr exact i32 %154, 4
  %156 = add nuw nsw i32 %155, 1
  %157 = and i32 %156, 3
  %158 = icmp ult i32 %154, 48
  br i1 %158, label %184, label %159

159:                                              ; preds = %151
  %160 = sub nsw i32 %156, %157
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi <16 x i8> [ %153, %159 ], [ %180, %161 ]
  %163 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %159 ], [ %181, %161 ]
  %164 = phi i32 [ %160, %159 ], [ %182, %161 ]
  %165 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %163
  %166 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %165
  %167 = trunc <16 x i32> %166 to <16 x i8>
  %168 = sub <16 x i8> %162, %167
  %169 = sub <16 x i32> <i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9>, %163
  %170 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %169
  %171 = trunc <16 x i32> %170 to <16 x i8>
  %172 = sub <16 x i8> %168, %171
  %173 = sub <16 x i32> <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>, %163
  %174 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %173
  %175 = trunc <16 x i32> %174 to <16 x i8>
  %176 = sub <16 x i8> %172, %175
  %177 = sub <16 x i32> <i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41, i32 -41>, %163
  %178 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %177
  %179 = trunc <16 x i32> %178 to <16 x i8>
  %180 = sub <16 x i8> %176, %179
  %181 = add <16 x i32> %163, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add i32 %164, -4
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %161, !llvm.loop !22

184:                                              ; preds = %161, %151
  %185 = phi <16 x i8> [ undef, %151 ], [ %180, %161 ]
  %186 = phi <16 x i8> [ %153, %151 ], [ %180, %161 ]
  %187 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %151 ], [ %181, %161 ]
  %188 = icmp eq i32 %157, 0
  br i1 %188, label %200, label %189

189:                                              ; preds = %184, %189
  %190 = phi <16 x i8> [ %196, %189 ], [ %186, %184 ]
  %191 = phi <16 x i32> [ %197, %189 ], [ %187, %184 ]
  %192 = phi i32 [ %198, %189 ], [ %157, %184 ]
  %193 = sub nuw nsw <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %191
  %194 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %193
  %195 = trunc <16 x i32> %194 to <16 x i8>
  %196 = sub <16 x i8> %190, %195
  %197 = add <16 x i32> %191, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %198 = add i32 %192, -1
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %189, !llvm.loop !23

200:                                              ; preds = %189, %184
  %201 = phi <16 x i8> [ %185, %184 ], [ %196, %189 ]
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = add <16 x i8> %201, %202
  %204 = shufflevector <16 x i8> %203, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = add <16 x i8> %203, %204
  %206 = shufflevector <16 x i8> %205, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = add <16 x i8> %205, %206
  %208 = shufflevector <16 x i8> %207, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = add <16 x i8> %207, %208
  %210 = extractelement <16 x i8> %209, i32 0
  %211 = icmp eq i32 %146, %152
  br i1 %211, label %212, label %148

212:                                              ; preds = %217, %200
  %213 = phi i8 [ %210, %200 ], [ %223, %217 ]
  store i8 %213, i8* %144, align 1
  br label %214

214:                                              ; preds = %212, %139
  %215 = add nuw nsw i32 %112, 1
  %216 = icmp sgt i32 %114, %215
  br i1 %216, label %226, label %233

217:                                              ; preds = %148, %217
  %218 = phi i8 [ %223, %217 ], [ %149, %148 ]
  %219 = phi i32 [ %224, %217 ], [ %150, %148 ]
  %220 = sub nuw nsw i32 7, %219
  %221 = shl i32 1, %220
  %222 = trunc i32 %221 to i8
  %223 = sub i8 %218, %222
  %224 = add nuw nsw i32 %219, 1
  %225 = icmp eq i32 %219, %115
  br i1 %225, label %212, label %217, !llvm.loop !24

226:                                              ; preds = %214
  %227 = getelementptr inbounds i8, i8* %120, i64 1
  %228 = xor i32 %112, -1
  %229 = add nsw i32 %114, %228
  %230 = sext i32 %229 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %227, i8 0, i64 %230, i1 false) #11
  br label %233

231:                                              ; preds = %319, %312, %305, %298, %291, %284, %277, %130
  %232 = phi i8 [ %137, %130 ], [ %282, %277 ], [ %289, %284 ], [ %296, %291 ], [ %303, %298 ], [ %310, %305 ], [ %317, %312 ], [ %323, %319 ]
  store i8 %232, i8* %132, align 1
  br label %233

233:                                              ; preds = %103, %231, %226, %214, %127, %105
  %234 = icmp slt i32 %104, %4
  br i1 %234, label %8, label %235

235:                                              ; preds = %8, %233, %75, %72, %5
  ret void

236:                                              ; preds = %118
  %237 = sub nsw i32 6, %117
  %238 = shl i32 1, %237
  %239 = trunc i32 %238 to i8
  %240 = sub i8 %125, %239
  %241 = icmp eq i32 %117, 6
  br i1 %241, label %139, label %242

242:                                              ; preds = %236
  %243 = sub nsw i32 5, %117
  %244 = shl i32 1, %243
  %245 = trunc i32 %244 to i8
  %246 = sub i8 %240, %245
  %247 = icmp eq i32 %117, 5
  br i1 %247, label %139, label %248

248:                                              ; preds = %242
  %249 = sub nsw i32 4, %117
  %250 = shl i32 1, %249
  %251 = trunc i32 %250 to i8
  %252 = sub i8 %246, %251
  %253 = icmp eq i32 %117, 4
  br i1 %253, label %139, label %254

254:                                              ; preds = %248
  %255 = sub nsw i32 3, %117
  %256 = shl i32 1, %255
  %257 = trunc i32 %256 to i8
  %258 = sub i8 %252, %257
  %259 = icmp eq i32 %117, 3
  br i1 %259, label %139, label %260

260:                                              ; preds = %254
  %261 = sub nsw i32 2, %117
  %262 = shl i32 1, %261
  %263 = trunc i32 %262 to i8
  %264 = sub i8 %258, %263
  %265 = icmp eq i32 %117, 2
  br i1 %265, label %139, label %266

266:                                              ; preds = %260
  %267 = sub nsw i32 1, %117
  %268 = shl i32 1, %267
  %269 = trunc i32 %268 to i8
  %270 = sub i8 %264, %269
  %271 = icmp eq i32 %117, 1
  br i1 %271, label %139, label %272

272:                                              ; preds = %266
  %273 = sub nsw i32 0, %117
  %274 = shl i32 1, %273
  %275 = trunc i32 %274 to i8
  %276 = sub i8 %270, %275
  br label %139

277:                                              ; preds = %130
  %278 = add nuw nsw i32 %117, 1
  %279 = sub nsw i32 6, %117
  %280 = shl i32 1, %279
  %281 = trunc i32 %280 to i8
  %282 = sub i8 %137, %281
  %283 = icmp slt i32 %278, %128
  br i1 %283, label %284, label %231

284:                                              ; preds = %277
  %285 = add nuw nsw i32 %117, 2
  %286 = sub nsw i32 5, %117
  %287 = shl i32 1, %286
  %288 = trunc i32 %287 to i8
  %289 = sub i8 %282, %288
  %290 = icmp slt i32 %285, %128
  br i1 %290, label %291, label %231

291:                                              ; preds = %284
  %292 = add nuw nsw i32 %117, 3
  %293 = sub nsw i32 4, %117
  %294 = shl i32 1, %293
  %295 = trunc i32 %294 to i8
  %296 = sub i8 %289, %295
  %297 = icmp slt i32 %292, %128
  br i1 %297, label %298, label %231

298:                                              ; preds = %291
  %299 = add nuw nsw i32 %117, 4
  %300 = sub nsw i32 3, %117
  %301 = shl i32 1, %300
  %302 = trunc i32 %301 to i8
  %303 = sub i8 %296, %302
  %304 = icmp slt i32 %299, %128
  br i1 %304, label %305, label %231

305:                                              ; preds = %298
  %306 = add nuw nsw i32 %117, 5
  %307 = sub nsw i32 2, %117
  %308 = shl i32 1, %307
  %309 = trunc i32 %308 to i8
  %310 = sub i8 %303, %309
  %311 = icmp slt i32 %306, %128
  br i1 %311, label %312, label %231

312:                                              ; preds = %305
  %313 = add nuw nsw i32 %117, 6
  %314 = sub nsw i32 1, %117
  %315 = shl i32 1, %314
  %316 = trunc i32 %315 to i8
  %317 = sub i8 %310, %316
  %318 = icmp slt i32 %313, %128
  br i1 %318, label %319, label %231

319:                                              ; preds = %312
  %320 = sub nsw i32 0, %117
  %321 = shl i32 1, %320
  %322 = trunc i32 %321 to i8
  %323 = sub i8 %317, %322
  br label %231
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %5, %4
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %145, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #11
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %143

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = icmp eq i8* %22, %2
  br i1 %30, label %141, label %31

31:                                               ; preds = %28
  %32 = inttoptr i64 %29 to i8*
  %33 = sub i64 %11, %4
  %34 = sub i64 %33, %18
  %35 = getelementptr i8, i8* %2, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = icmp ult i8* %35, inttoptr (i64 32 to i8*)
  br i1 %37, label %128, label %38

38:                                               ; preds = %31
  %39 = sub i64 %11, %4
  %40 = sub i64 %39, %18
  %41 = getelementptr i8, i8* %2, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr i8, i8* %32, i64 %42
  %44 = icmp ult i8* %32, %2
  %45 = icmp ult i8* %21, %43
  %46 = and i1 %44, %45
  br i1 %46, label %128, label %47

47:                                               ; preds = %38
  %48 = and i64 %36, -32
  %49 = getelementptr i8, i8* %32, i64 %48
  %50 = getelementptr i8, i8* %21, i64 %48
  %51 = add i64 %48, -32
  %52 = lshr exact i64 %51, 5
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 3
  %55 = icmp ult i64 %51, 96
  br i1 %55, label %107, label %56

56:                                               ; preds = %47
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %104, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %105, %58 ]
  %61 = getelementptr i8, i8* %32, i64 %59
  %62 = getelementptr i8, i8* %21, i64 %59
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !25
  %65 = getelementptr i8, i8* %62, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !25
  %68 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %68, align 1, !alias.scope !28, !noalias !25
  %69 = getelementptr i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !28, !noalias !25
  %71 = or i64 %59, 32
  %72 = getelementptr i8, i8* %32, i64 %71
  %73 = getelementptr i8, i8* %21, i64 %71
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !25
  %76 = getelementptr i8, i8* %73, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !25
  %79 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %79, align 1, !alias.scope !28, !noalias !25
  %80 = getelementptr i8, i8* %72, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %81, align 1, !alias.scope !28, !noalias !25
  %82 = or i64 %59, 64
  %83 = getelementptr i8, i8* %32, i64 %82
  %84 = getelementptr i8, i8* %21, i64 %82
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !25
  %87 = getelementptr i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !25
  %90 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %90, align 1, !alias.scope !28, !noalias !25
  %91 = getelementptr i8, i8* %83, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !28, !noalias !25
  %93 = or i64 %59, 96
  %94 = getelementptr i8, i8* %32, i64 %93
  %95 = getelementptr i8, i8* %21, i64 %93
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !25
  %98 = getelementptr i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !25
  %101 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %101, align 1, !alias.scope !28, !noalias !25
  %102 = getelementptr i8, i8* %94, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %103, align 1, !alias.scope !28, !noalias !25
  %104 = add i64 %59, 128
  %105 = add i64 %60, -4
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %58, !llvm.loop !30

107:                                              ; preds = %58, %47
  %108 = phi i64 [ 0, %47 ], [ %104, %58 ]
  %109 = icmp eq i64 %54, 0
  br i1 %109, label %126, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %123, %110 ], [ %108, %107 ]
  %112 = phi i64 [ %124, %110 ], [ %54, %107 ]
  %113 = getelementptr i8, i8* %32, i64 %111
  %114 = getelementptr i8, i8* %21, i64 %111
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1, !alias.scope !25
  %117 = getelementptr i8, i8* %114, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !alias.scope !25
  %120 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %120, align 1, !alias.scope !28, !noalias !25
  %121 = getelementptr i8, i8* %113, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %122, align 1, !alias.scope !28, !noalias !25
  %123 = add i64 %111, 32
  %124 = add i64 %112, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %110, !llvm.loop !31

126:                                              ; preds = %110, %107
  %127 = icmp eq i64 %48, %36
  br i1 %127, label %138, label %128

128:                                              ; preds = %126, %38, %31
  %129 = phi i8* [ %32, %38 ], [ %32, %31 ], [ %49, %126 ]
  %130 = phi i8* [ %21, %38 ], [ %21, %31 ], [ %50, %126 ]
  br label %131

131:                                              ; preds = %128, %131
  %132 = phi i8* [ %136, %131 ], [ %129, %128 ]
  %133 = phi i8* [ %135, %131 ], [ %130, %128 ]
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %132, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = getelementptr inbounds i8, i8* %132, i64 1
  %137 = icmp eq i8* %135, %2
  br i1 %137, label %138, label %131, !llvm.loop !32

138:                                              ; preds = %131, %126
  %139 = phi i8* [ %49, %126 ], [ %136, %131 ]
  %140 = ptrtoint i8* %139 to i64
  br label %141

141:                                              ; preds = %28, %138
  %142 = phi i64 [ %29, %28 ], [ %140, %138 ]
  store i64 %142, i64* %17, align 8
  br label %275

143:                                              ; preds = %27
  %144 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %144, i8** %16, align 8
  br label %275

145:                                              ; preds = %3
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %147 = icmp eq i64 %11, 0
  br i1 %147, label %152, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %150 = bitcast i8** %149 to i64*
  store i64 %11, i64* %150, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %14) #11
  %151 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %151, i8 0, i64 24, i1 false) #11
  br label %152

152:                                              ; preds = %145, %148
  %153 = phi i64 [ %9, %145 ], [ 0, %148 ]
  %154 = icmp slt i64 %6, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  %156 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %156) #12
  unreachable

157:                                              ; preds = %152
  %158 = icmp ult i64 %153, 4611686018427387903
  br i1 %158, label %159, label %163

159:                                              ; preds = %157
  %160 = shl i64 %153, 1
  %161 = icmp ult i64 %160, %6
  %162 = select i1 %161, i64 %6, i64 %160
  br label %163

163:                                              ; preds = %159, %157
  %164 = phi i64 [ %162, %159 ], [ 9223372036854775807, %157 ]
  %165 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %164, i64 1) #11
  %166 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  store i8* %165, i8** %166, align 8
  store i8* %165, i8** %146, align 8
  %167 = getelementptr inbounds i8, i8* %165, i64 %164
  store i8* %167, i8** %7, align 8
  %168 = bitcast i8** %166 to i64*
  %169 = icmp eq i8* %1, %2
  br i1 %169, label %272, label %170

170:                                              ; preds = %163
  %171 = ptrtoint i8* %2 to i64
  %172 = sub i64 %171, %4
  %173 = icmp ult i64 %172, 32
  br i1 %173, label %262, label %174

174:                                              ; preds = %170
  %175 = ptrtoint i8* %2 to i64
  %176 = sub i64 %175, %4
  %177 = getelementptr i8, i8* %165, i64 %176
  %178 = icmp ult i8* %165, %2
  %179 = icmp ugt i8* %177, %1
  %180 = and i1 %178, %179
  br i1 %180, label %262, label %181

181:                                              ; preds = %174
  %182 = and i64 %172, -32
  %183 = getelementptr i8, i8* %165, i64 %182
  %184 = getelementptr i8, i8* %1, i64 %182
  %185 = add i64 %182, -32
  %186 = lshr exact i64 %185, 5
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 3
  %189 = icmp ult i64 %185, 96
  br i1 %189, label %241, label %190

190:                                              ; preds = %181
  %191 = sub nsw i64 %187, %188
  br label %192

192:                                              ; preds = %192, %190
  %193 = phi i64 [ 0, %190 ], [ %238, %192 ]
  %194 = phi i64 [ %191, %190 ], [ %239, %192 ]
  %195 = getelementptr i8, i8* %165, i64 %193
  %196 = getelementptr i8, i8* %1, i64 %193
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !33
  %199 = getelementptr i8, i8* %196, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !33
  %202 = bitcast i8* %195 to <16 x i8>*
  store <16 x i8> %198, <16 x i8>* %202, align 1, !alias.scope !36, !noalias !33
  %203 = getelementptr i8, i8* %195, i64 16
  %204 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %201, <16 x i8>* %204, align 1, !alias.scope !36, !noalias !33
  %205 = or i64 %193, 32
  %206 = getelementptr i8, i8* %165, i64 %205
  %207 = getelementptr i8, i8* %1, i64 %205
  %208 = bitcast i8* %207 to <16 x i8>*
  %209 = load <16 x i8>, <16 x i8>* %208, align 1, !alias.scope !33
  %210 = getelementptr i8, i8* %207, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 1, !alias.scope !33
  %213 = bitcast i8* %206 to <16 x i8>*
  store <16 x i8> %209, <16 x i8>* %213, align 1, !alias.scope !36, !noalias !33
  %214 = getelementptr i8, i8* %206, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %212, <16 x i8>* %215, align 1, !alias.scope !36, !noalias !33
  %216 = or i64 %193, 64
  %217 = getelementptr i8, i8* %165, i64 %216
  %218 = getelementptr i8, i8* %1, i64 %216
  %219 = bitcast i8* %218 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1, !alias.scope !33
  %221 = getelementptr i8, i8* %218, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !33
  %224 = bitcast i8* %217 to <16 x i8>*
  store <16 x i8> %220, <16 x i8>* %224, align 1, !alias.scope !36, !noalias !33
  %225 = getelementptr i8, i8* %217, i64 16
  %226 = bitcast i8* %225 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %226, align 1, !alias.scope !36, !noalias !33
  %227 = or i64 %193, 96
  %228 = getelementptr i8, i8* %165, i64 %227
  %229 = getelementptr i8, i8* %1, i64 %227
  %230 = bitcast i8* %229 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 1, !alias.scope !33
  %232 = getelementptr i8, i8* %229, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !33
  %235 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !36, !noalias !33
  %236 = getelementptr i8, i8* %228, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %237, align 1, !alias.scope !36, !noalias !33
  %238 = add i64 %193, 128
  %239 = add i64 %194, -4
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %192, !llvm.loop !38

241:                                              ; preds = %192, %181
  %242 = phi i64 [ 0, %181 ], [ %238, %192 ]
  %243 = icmp eq i64 %188, 0
  br i1 %243, label %260, label %244

244:                                              ; preds = %241, %244
  %245 = phi i64 [ %257, %244 ], [ %242, %241 ]
  %246 = phi i64 [ %258, %244 ], [ %188, %241 ]
  %247 = getelementptr i8, i8* %165, i64 %245
  %248 = getelementptr i8, i8* %1, i64 %245
  %249 = bitcast i8* %248 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !33
  %251 = getelementptr i8, i8* %248, i64 16
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !33
  %254 = bitcast i8* %247 to <16 x i8>*
  store <16 x i8> %250, <16 x i8>* %254, align 1, !alias.scope !36, !noalias !33
  %255 = getelementptr i8, i8* %247, i64 16
  %256 = bitcast i8* %255 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %256, align 1, !alias.scope !36, !noalias !33
  %257 = add i64 %245, 32
  %258 = add i64 %246, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %244, !llvm.loop !39

260:                                              ; preds = %244, %241
  %261 = icmp eq i64 %172, %182
  br i1 %261, label %272, label %262

262:                                              ; preds = %260, %174, %170
  %263 = phi i8* [ %165, %174 ], [ %165, %170 ], [ %183, %260 ]
  %264 = phi i8* [ %1, %174 ], [ %1, %170 ], [ %184, %260 ]
  br label %265

265:                                              ; preds = %262, %265
  %266 = phi i8* [ %270, %265 ], [ %263, %262 ]
  %267 = phi i8* [ %269, %265 ], [ %264, %262 ]
  %268 = load i8, i8* %267, align 1
  store i8 %268, i8* %266, align 1
  %269 = getelementptr inbounds i8, i8* %267, i64 1
  %270 = getelementptr inbounds i8, i8* %266, i64 1
  %271 = icmp eq i8* %269, %2
  br i1 %271, label %272, label %265, !llvm.loop !40

272:                                              ; preds = %265, %260, %163
  %273 = phi i8* [ %165, %163 ], [ %183, %260 ], [ %270, %265 ]
  %274 = ptrtoint i8* %273 to i64
  store i64 %274, i64* %168, align 8
  br label %275

275:                                              ; preds = %141, %143, %272
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i32 -2144180118}
!5 = !{i32 -2144180097}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.isvectorized", i32 1}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !11, !7}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !9}
!14 = distinct !{!14, !11, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !11, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !11, !7}
!21 = !{i8 0, i8 2}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !9}
!24 = distinct !{!24, !11, !7}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !7}
!31 = distinct !{!31, !9}
!32 = distinct !{!32, !7}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !7}
!39 = distinct !{!39, !9}
!40 = distinct !{!40, !7}
