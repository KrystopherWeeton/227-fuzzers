; ModuleID = '../../third_party/angle/src/compiler/translator/tree_util/SpecializationConstant.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_util/SpecializationConstant.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.37" }
%"struct.std::__1::array.37" = type { [8 x %"struct.std::__1::array.38"] }
%"struct.std::__1::array.38" = type { [2 x float] }
%"class.angle::PackedEnumMap.39" = type { %"struct.std::__1::array.40" }
%"struct.std::__1::array.40" = type { [8 x %"struct.std::__1::array.41"] }
%"struct.std::__1::array.41" = type { [4 x float] }
%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.17"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.17" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::SpecConst" = type <{ i32 (...)**, %"class.sh::TSymbolTable"*, i64, %"class.angle::BitSetT", [4 x i8] }>
%"class.angle::BitSetT" = type { i32 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector", %"class.std::__1::vector.1", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr.3"*, %"class.std::__1::unique_ptr.3"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr.3" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr.3"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.21, i32 }
%union.anon.21 = type { i32 }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string.22", %"class.std::__1::vector.30" }
%"class.std::__1::basic_string.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.25 }
%union.anon.25 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { i32*, i32*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i32* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string.22", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.26 }
%struct.anon.26 = type { i8 }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.51", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.53" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TVector.42" = type { %"class.std::__1::vector.43" }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.sh::TIntermNode"** }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.42", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.50"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.50" = type opaque
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh13TInfoSinkBaselsIjEERS0_RKT_ = comdat any

@_ZTVN2sh9SpecConstE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::SpecConst"*)* @_ZN2sh9SpecConstD2Ev to i8*), i8* bitcast (void (%"class.sh::SpecConst"*)* @_ZN2sh9SpecConstD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [20 x i8] c"layout(constant_id=\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c") const bool \00", align 1
@_ZN2sh12_GLOBAL__N_136kLineRasterEmulationSpecConstVarNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i32 0, i32 0), i64 24 }, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c" = false;\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c") const uint \00", align 1
@_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i64 20 }, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c" = 0;\0A\0A\00", align 1
@_ZN2sh12_GLOBAL__N_130kDrawableWidthSpecConstVarNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), i64 18 }, align 8
@_ZN2sh12_GLOBAL__N_131kDrawableHeightSpecConstVarNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i32 0, i32 0), i64 19 }, align 8
@_ZN2sh12_GLOBAL__N_121kRotatedFlipXYForDFdxE = internal constant %"class.angle::PackedEnumMap" { %"struct.std::__1::array.37" { [8 x %"struct.std::__1::array.38"] [%"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -0.000000e+00, float -1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float -0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -0.000000e+00, float -1.000000e+00] }] } }, align 4
@_ZN2sh12_GLOBAL__N_121kRotatedFlipXYForDFdyE = internal constant %"class.angle::PackedEnumMap" { %"struct.std::__1::array.37" { [8 x %"struct.std::__1::array.38"] [%"struct.std::__1::array.38" { [2 x float] [float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -1.000000e+00, float -0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 0.000000e+00, float -1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -1.000000e+00, float -0.000000e+00] }] } }, align 4
@_ZN2sh12_GLOBAL__N_121kFragRotationMatricesE = internal constant %"class.angle::PackedEnumMap.39" { %"struct.std::__1::array.40" { [8 x %"struct.std::__1::array.41"] [%"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00] }] } }, align 4
@_ZN2sh12_GLOBAL__N_131kHalfRenderAreaRotationMatricesE = internal constant %"class.angle::PackedEnumMap.39" { %"struct.std::__1::array.40" { [8 x %"struct.std::__1::array.41"] [%"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.41" { [4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }] } }, align 4
@_ZZN2sh9SpecConst29getFragRotationMultiplyFlipXYEvE27kFragRotationMultiplyFlipXY = internal constant %"class.angle::PackedEnumMap" { %"struct.std::__1::array.37" { [8 x %"struct.std::__1::array.38"] [%"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -1.000000e+00, float -1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float -1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.38" { [2 x float] [float -1.000000e+00, float -1.000000e+00] }] } }, align 8
@.str.5 = private unnamed_addr constant [25 x i8] c"ANGLELineRasterEmulation\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"ANGLESurfaceRotation\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"ANGLEDrawableWidth\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"ANGLEDrawableHeight\00", align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00F\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 5, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00E\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 4, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00B\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 1, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@.str.12 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8

@_ZN2sh9SpecConstC1EPNS_12TSymbolTableEmj = hidden unnamed_addr alias void (%"class.sh::SpecConst"*, %"class.sh::TSymbolTable"*, i64, i32), void (%"class.sh::SpecConst"*, %"class.sh::TSymbolTable"*, i64, i32)* @_ZN2sh9SpecConstC2EPNS_12TSymbolTableEmj
@_ZN2sh9SpecConstD1Ev = hidden unnamed_addr alias void (%"class.sh::SpecConst"*), void (%"class.sh::SpecConst"*)* @_ZN2sh9SpecConstD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh9SpecConstC2EPNS_12TSymbolTableEmj(%"class.sh::SpecConst"* nocapture, %"class.sh::TSymbolTable"*, i64, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2sh9SpecConstE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  store %"class.sh::TSymbolTable"* %1, %"class.sh::TSymbolTable"** %6, align 8
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  store i32 0, i32* %8, align 4
  switch i32 %3, label %9 [
    i32 37305, label %13
    i32 35632, label %13
  ]

9:                                                ; preds = %4
  %10 = and i64 %2, 22517998136852480
  %11 = icmp eq i64 %10, 22517998136852480
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i32 4, i32* %8, align 4
  br label %13

13:                                               ; preds = %9, %4, %4, %12
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2sh9SpecConstD2Ev(%"class.sh::SpecConst"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh9SpecConstD0Ev(%"class.sh::SpecConst"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.sh::SpecConst"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh9SpecConst18outputLayoutStringERNS_13TInfoSinkBaseE(%"class.sh::SpecConst"* nocapture readonly, %"class.sh::TInfoSinkBase"* dereferenceable(48)) local_unnamed_addr #2 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  %13 = tail call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #11
  %14 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #11
  store i32 0, i32* %3, align 4
  %15 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIjEERS0_RKT_(%"class.sh::TInfoSinkBase"* %1, i32* nonnull dereferenceable(4) %3)
  %16 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %15, i64 0, i32 0
  %17 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)) #11
  %18 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsERKNS_15ImmutableStringE(%"class.sh::TInfoSinkBase"* %15, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_136kLineRasterEmulationSpecConstVarNameE) #11
  %19 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %18, i64 0, i32 0
  %20 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #11
  %21 = load i32, i32* %7, align 4
  br label %22

22:                                               ; preds = %2, %11
  %23 = phi i32 [ %8, %2 ], [ %21, %11 ]
  %24 = and i32 %23, 6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  %28 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %27, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #11
  %29 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #11
  store i32 1, i32* %4, align 4
  %30 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIjEERS0_RKT_(%"class.sh::TInfoSinkBase"* %1, i32* nonnull dereferenceable(4) %4)
  %31 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %30, i64 0, i32 0
  %32 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %31, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0)) #11
  %33 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsERKNS_15ImmutableStringE(%"class.sh::TInfoSinkBase"* %30, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE) #11
  %34 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %33, i64 0, i32 0
  %35 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #11
  %36 = load i32, i32* %7, align 4
  br label %37

37:                                               ; preds = %22, %26
  %38 = phi i32 [ %23, %22 ], [ %36, %26 ]
  %39 = and i32 %38, 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %59, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  %43 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %42, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #11
  %44 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #11
  store i32 2, i32* %5, align 4
  %45 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIjEERS0_RKT_(%"class.sh::TInfoSinkBase"* %1, i32* nonnull dereferenceable(4) %5)
  %46 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %45, i64 0, i32 0
  %47 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %46, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0)) #11
  %48 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsERKNS_15ImmutableStringE(%"class.sh::TInfoSinkBase"* %45, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_130kDrawableWidthSpecConstVarNameE) #11
  %49 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %48, i64 0, i32 0
  %50 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #11
  %51 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %42, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #11
  %52 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  store i32 3, i32* %6, align 4
  %53 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIjEERS0_RKT_(%"class.sh::TInfoSinkBase"* %1, i32* nonnull dereferenceable(4) %6)
  %54 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %53, i64 0, i32 0
  %55 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0)) #11
  %56 = call dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsERKNS_15ImmutableStringE(%"class.sh::TInfoSinkBase"* %53, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_131kDrawableHeightSpecConstVarNameE) #11
  %57 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %56, i64 0, i32 0
  %58 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"* %57, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %59

59:                                               ; preds = %37, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsIjEERS0_RKT_(%"class.sh::TInfoSinkBase"*, i32* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.std::__1::locale", align 8
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::locale", align 8
  %6 = alloca %"class.std::__1::basic_ostringstream", align 8
  %7 = alloca %"class.std::__1::basic_string.22", align 8
  %8 = bitcast %"class.std::__1::basic_ostringstream"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %8) #11
  %9 = bitcast %"class.std::__1::locale"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 1
  %11 = bitcast %"class.std::__1::basic_stringbuf"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 -86, i64 256, i1 false) #11, !alias.scope !2
  %12 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 2, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %12, align 8, !alias.scope !2
  %14 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %10, i64 0, i32 0
  %15 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8, !noalias !2
  %16 = bitcast %"class.std::__1::basic_ostringstream"* %6 to i64*
  store i64 %15, i64* %16, align 8, !alias.scope !2
  %17 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8, !noalias !2
  %18 = bitcast %"class.std::__1::basic_ostringstream"* %6 to i8**
  %19 = inttoptr i64 %15 to i8*
  %20 = getelementptr i8, i8* %19, i64 -24
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8, !noalias !2
  %23 = getelementptr inbounds i8, i8* %8, i64 %22
  %24 = bitcast i8* %23 to i64*
  store i64 %17, i64* %24, align 8, !alias.scope !2
  %25 = load i8*, i8** %18, align 8, !alias.scope !2
  %26 = getelementptr i8, i8* %25, i64 -24
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8, !noalias !2
  %29 = getelementptr inbounds i8, i8* %8, i64 %28
  %30 = bitcast i8* %29 to %"class.std::__1::ios_base"*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %30, i8* %11) #11
  %31 = getelementptr inbounds i8, i8* %29, i64 136
  %32 = bitcast i8* %31 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %32, align 8, !alias.scope !2
  %33 = getelementptr inbounds i8, i8* %29, i64 144
  %34 = bitcast i8* %33 to i32*
  store i32 -1, i32* %34, align 8, !alias.scope !2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %13, align 8, !alias.scope !2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %12, align 8, !alias.scope !2
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %14) #11
  %35 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %10, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8, !alias.scope !2
  %36 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 1, i32 1
  %37 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 1, i32 3
  %38 = bitcast %"class.std::__1::basic_string.22"* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 32, i1 false) #11, !alias.scope !2
  store i32 16, i32* %37, align 8, !alias.scope !2
  %39 = load i8*, i8** %18, align 8, !alias.scope !2
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds i8, i8* %8, i64 %42
  %44 = call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #11
  %45 = bitcast %"class.std::__1::locale"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45)
  %46 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46)
  %47 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %5, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %47, align 8, !alias.scope !5
  %48 = bitcast i8* %43 to %"class.std::__1::ios_base"*
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %5, %"class.std::__1::ios_base"* %48) #11
  call void @_ZNSt3__18ios_base5imbueERKNS_6localeE(%"class.std::__1::locale"* nonnull sret %3, %"class.std::__1::ios_base"* %48, %"class.std::__1::locale"* dereferenceable(8) %44) #11
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %3) #11
  %49 = getelementptr inbounds i8, i8* %43, i64 40
  %50 = bitcast i8* %49 to %"class.std::__1::basic_streambuf"**
  %51 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %50, align 8, !noalias !5
  %52 = icmp eq %"class.std::__1::basic_streambuf"* %51, null
  br i1 %52, label %61, label %53

53:                                               ; preds = %2
  %54 = bitcast %"class.std::__1::basic_streambuf"* %51 to void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)***
  %55 = load void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)**, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*** %54, align 8, !noalias !8
  %56 = getelementptr inbounds void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)** %55, i64 2
  %57 = load void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)** %56, align 8, !noalias !8
  call void %57(%"class.std::__1::basic_streambuf"* nonnull %51, %"class.std::__1::locale"* dereferenceable(8) %44) #11, !noalias !8
  %58 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %4, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %58, align 8, !alias.scope !8, !noalias !5
  %59 = getelementptr inbounds %"class.std::__1::basic_streambuf", %"class.std::__1::basic_streambuf"* %51, i64 0, i32 1
  call void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale"* dereferenceable(8) %59) #11
  %60 = call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16localeaSERKS0_(%"class.std::__1::locale"* %59, %"class.std::__1::locale"* dereferenceable(8) %44) #11
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #11
  br label %61

61:                                               ; preds = %2, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46)
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %62 = bitcast %"class.std::__1::basic_ostringstream"* %6 to %"class.std::__1::basic_ostream"*
  %63 = load i32, i32* %1, align 4
  %64 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* nonnull %62, i32 %63) #11
  %65 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %0, i64 0, i32 0
  %66 = bitcast %"class.std::__1::basic_string.22"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #11
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string.22"* nonnull sret %7, %"class.std::__1::basic_stringbuf"* %10) #11
  %67 = bitcast %"class.std::__1::basic_string.22"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %67, i64 0, i32 1, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  %71 = getelementptr inbounds %"class.std::__1::basic_string.22", %"class.std::__1::basic_string.22"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %"class.std::__1::basic_string.22", %"class.std::__1::basic_string.22"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = zext i8 %69 to i64
  %76 = select i1 %70, i8* %72, i8* %66
  %77 = select i1 %70, i64 %74, i64 %75
  %78 = call dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string.22"* %65, i8* %76, i64 %77) #11
  %79 = load i8, i8* %68, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %61
  %82 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %82) #10
  br label %83

83:                                               ; preds = %61, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #11
  %84 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %84, i64* %16, align 8
  %85 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %86 = inttoptr i64 %84 to i8*
  %87 = getelementptr i8, i8* %86, i64 -24
  %88 = bitcast i8* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds i8, i8* %8, i64 %89
  %91 = bitcast i8* %90 to i64*
  store i64 %85, i64* %91, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %92 = bitcast %"class.std::__1::basic_string.22"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %83
  %97 = getelementptr inbounds %"class.std::__1::basic_string.22", %"class.std::__1::basic_string.22"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  call void @_ZdlPv(i8* %98) #10
  br label %99

99:                                               ; preds = %83, %96
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %14) #11
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %62, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #11
  %100 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %6, i64 0, i32 2
  %101 = bitcast %"class.std::__1::basic_ios.base"* %100 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %101) #11
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %8) #11
  ret %"class.sh::TInfoSinkBase"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare dereferenceable(48) %"class.sh::TInfoSinkBase"* @_ZN2sh13TInfoSinkBaselsERKNS_15ImmutableStringE(%"class.sh::TInfoSinkBase"*, %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst22getLineRasterEmulationEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 140737488355328
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %8 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 40) #11
  %9 = bitcast i8* %8 to %"class.sh::TVariable"*
  %10 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %11 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %10, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %9, %"class.sh::TSymbolTable"* %11, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_136kLineRasterEmulationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE5ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %12 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %13, 1
  store i32 %14, i32* %12, align 4
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %9) #11
  br label %18

18:                                               ; preds = %1, %6
  %19 = phi %"class.sh::TIntermSymbol"* [ %17, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermSymbol"* %19
}

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #5

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst15getFlipRotationEv(%"class.sh::SpecConst"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 40) #11
  %4 = bitcast i8* %3 to %"class.sh::TVariable"*
  %5 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %6 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %5, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %4, %"class.sh::TSymbolTable"* %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %8 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 32) #11
  %9 = bitcast i8* %8 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %9, %"class.sh::TVariable"* %4) #11
  ret %"class.sh::TIntermSymbol"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierXForDFdxEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 6
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull dereferenceable(64) @_ZN2sh12_GLOBAL__N_121kRotatedFlipXYForDFdxE, i32 0, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nocapture readonly dereferenceable(64), i32, float, %"class.sh::TIntermSymbol"*) unnamed_addr #2 {
  %5 = alloca %"class.sh::TVector.42", align 8
  %6 = alloca [8 x %"class.sh::TIntermNode"*], align 8
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %8 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 184) #11
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %9, %"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*)) #11
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %9, i32 8) #11
  %10 = bitcast %"class.sh::TVector.42"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #11
  %11 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %5, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %5, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast [8 x %"class.sh::TIntermNode"*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #11
  %15 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 0
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 0, i32 0, i64 %16
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, %2
  %20 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %19) #11
  %21 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %20, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %21, %"class.sh::TIntermNode"** %15, align 8
  %22 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 1
  %23 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 1, i32 0, i64 %16
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %2
  %26 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %25) #11
  %27 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %26, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %27, %"class.sh::TIntermNode"** %22, align 8
  %28 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 2
  %29 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 2, i32 0, i64 %16
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, %2
  %32 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %31) #11
  %33 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %32, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %33, %"class.sh::TIntermNode"** %28, align 8
  %34 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 3
  %35 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 3, i32 0, i64 %16
  %36 = load float, float* %35, align 4
  %37 = fmul float %36, %2
  %38 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %37) #11
  %39 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %38, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %39, %"class.sh::TIntermNode"** %34, align 8
  %40 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 4
  %41 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 4, i32 0, i64 %16
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, %2
  %44 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %43) #11
  %45 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %44, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %45, %"class.sh::TIntermNode"** %40, align 8
  %46 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 5
  %47 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 5, i32 0, i64 %16
  %48 = load float, float* %47, align 4
  %49 = fmul float %48, %2
  %50 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %49) #11
  %51 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %50, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %51, %"class.sh::TIntermNode"** %46, align 8
  %52 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 6
  %53 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 6, i32 0, i64 %16
  %54 = load float, float* %53, align 4
  %55 = fmul float %54, %2
  %56 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %55) #11
  %57 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %56, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %57, %"class.sh::TIntermNode"** %52, align 8
  %58 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 7
  %59 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 7, i32 0, i64 %16
  %60 = load float, float* %59, align 4
  %61 = fmul float %60, %2
  %62 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %61) #11
  %63 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %62, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %63, %"class.sh::TIntermNode"** %58, align 8
  %64 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %65 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %64, i64 64) #11
  %66 = bitcast %"class.sh::TVector.42"* %5 to i8**
  store i8* %65, i8** %66, align 8
  %67 = getelementptr inbounds i8, i8* %65, i64 64
  %68 = bitcast %"class.sh::TIntermNode"*** %13 to i8**
  store i8* %67, i8** %68, align 8
  %69 = bitcast i8* %65 to i64*
  %70 = ptrtoint %"class.sh::TIntermConstantUnion"* %20 to i64
  store i64 %70, i64* %69, align 8
  %71 = getelementptr inbounds i8, i8* %65, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = ptrtoint %"class.sh::TIntermConstantUnion"* %26 to i64
  store i64 %73, i64* %72, align 8
  %74 = getelementptr inbounds i8, i8* %65, i64 16
  %75 = bitcast i8* %74 to i64*
  %76 = ptrtoint %"class.sh::TIntermConstantUnion"* %32 to i64
  store i64 %76, i64* %75, align 8
  %77 = getelementptr inbounds i8, i8* %65, i64 24
  %78 = bitcast i8* %77 to i64*
  %79 = ptrtoint %"class.sh::TIntermConstantUnion"* %38 to i64
  store i64 %79, i64* %78, align 8
  %80 = getelementptr inbounds i8, i8* %65, i64 32
  %81 = bitcast i8* %80 to i64*
  %82 = ptrtoint %"class.sh::TIntermConstantUnion"* %44 to i64
  store i64 %82, i64* %81, align 8
  %83 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 5
  %84 = getelementptr inbounds i8, i8* %65, i64 40
  %85 = bitcast %"class.sh::TIntermNode"** %83 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 8
  %87 = bitcast i8* %84 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %87, align 8
  %88 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %6, i64 0, i64 7
  %89 = getelementptr inbounds i8, i8* %65, i64 56
  %90 = bitcast i8* %89 to i64*
  %91 = bitcast %"class.sh::TIntermNode"** %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds i8, i8* %65, i64 64
  %94 = bitcast %"class.sh::TIntermNode"*** %12 to i64*
  %95 = ptrtoint i8* %93 to i64
  store i64 %95, i64* %94, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #11
  %96 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %9, %"class.sh::TVector.42"* nonnull %5) #11
  %97 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %96, i64 0, i32 0, i32 0, i32 0
  %98 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %99 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %98, i64 240) #11
  %100 = bitcast i8* %99 to %"class.sh::TIntermBinary"*
  %101 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %3, i64 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %100, i8 zeroext 44, %"class.sh::TIntermTyped"* %97, %"class.sh::TIntermTyped"* %101) #11
  %102 = bitcast i8* %99 to %"class.sh::TIntermTyped"*
  %103 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %11, align 8
  %104 = icmp eq %"class.sh::TIntermNode"** %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %4
  %106 = ptrtoint %"class.sh::TIntermNode"** %103 to i64
  store i64 %106, i64* %94, align 8
  br label %107

107:                                              ; preds = %4, %105
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #11
  ret %"class.sh::TIntermTyped"* %102
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierYForDFdxEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 6
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull dereferenceable(64) @_ZN2sh12_GLOBAL__N_121kRotatedFlipXYForDFdxE, i32 1, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierXForDFdyEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 6
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull dereferenceable(64) @_ZN2sh12_GLOBAL__N_121kRotatedFlipXYForDFdyE, i32 0, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getMultiplierYForDFdyEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 6
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull dereferenceable(64) @_ZN2sh12_GLOBAL__N_121kRotatedFlipXYForDFdyE, i32 1, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst21getFragRotationMatrixEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 4
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_128GenerateMat2x2ArrayWithIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEEPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap.39"* nonnull dereferenceable(128) @_ZN2sh12_GLOBAL__N_121kFragRotationMatricesE, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_128GenerateMat2x2ArrayWithIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEEPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap.39"* nocapture readonly dereferenceable(128), %"class.sh::TIntermSymbol"*) unnamed_addr #2 {
  %3 = alloca %"class.sh::TVector.42", align 8
  %4 = alloca [8 x %"class.sh::TIntermNode"*], align 8
  %5 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %6 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %5, i64 184) #11
  %7 = bitcast i8* %6 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %7, i32 1, i8 zeroext 2, i8 zeroext 2) #11
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 184) #11
  %10 = bitcast i8* %9 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %7) #11
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %10, i32 8) #11
  %11 = bitcast %"class.sh::TVector.42"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #11
  %12 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %3, i64 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %3, i64 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast [8 x %"class.sh::TIntermNode"*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #11
  %16 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 0
  %17 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 0)
  %18 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %18, %"class.sh::TIntermNode"** %16, align 8
  %19 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 1
  %20 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 1)
  %21 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %20, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %21, %"class.sh::TIntermNode"** %19, align 8
  %22 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 2
  %23 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 2)
  %24 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %24, %"class.sh::TIntermNode"** %22, align 8
  %25 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 3
  %26 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 3)
  %27 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %27, %"class.sh::TIntermNode"** %25, align 8
  %28 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 4
  %29 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 4)
  %30 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %29, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %30, %"class.sh::TIntermNode"** %28, align 8
  %31 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 5
  %32 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 5)
  %33 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %32, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %33, %"class.sh::TIntermNode"** %31, align 8
  %34 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 6
  %35 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 6)
  %36 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %35, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %36, %"class.sh::TIntermNode"** %34, align 8
  %37 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 7
  %38 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* dereferenceable(128) %0, i32 7)
  %39 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %38, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %39, %"class.sh::TIntermNode"** %37, align 8
  %40 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %41 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %40, i64 64) #11
  %42 = bitcast %"class.sh::TVector.42"* %3 to i8**
  store i8* %41, i8** %42, align 8
  %43 = getelementptr inbounds i8, i8* %41, i64 64
  %44 = bitcast %"class.sh::TIntermNode"*** %14 to i8**
  store i8* %43, i8** %44, align 8
  %45 = bitcast i8* %41 to i64*
  %46 = ptrtoint %"class.sh::TIntermAggregate"* %17 to i64
  store i64 %46, i64* %45, align 8
  %47 = getelementptr inbounds i8, i8* %41, i64 8
  %48 = bitcast i8* %47 to i64*
  %49 = ptrtoint %"class.sh::TIntermAggregate"* %20 to i64
  store i64 %49, i64* %48, align 8
  %50 = getelementptr inbounds i8, i8* %41, i64 16
  %51 = bitcast i8* %50 to i64*
  %52 = ptrtoint %"class.sh::TIntermAggregate"* %23 to i64
  store i64 %52, i64* %51, align 8
  %53 = getelementptr inbounds i8, i8* %41, i64 24
  %54 = bitcast i8* %53 to i64*
  %55 = ptrtoint %"class.sh::TIntermAggregate"* %26 to i64
  store i64 %55, i64* %54, align 8
  %56 = getelementptr inbounds i8, i8* %41, i64 32
  %57 = bitcast i8* %56 to i64*
  %58 = ptrtoint %"class.sh::TIntermAggregate"* %29 to i64
  store i64 %58, i64* %57, align 8
  %59 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 5
  %60 = getelementptr inbounds i8, i8* %41, i64 40
  %61 = bitcast %"class.sh::TIntermNode"** %59 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 8
  %63 = bitcast i8* %60 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %63, align 8
  %64 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %4, i64 0, i64 7
  %65 = getelementptr inbounds i8, i8* %41, i64 56
  %66 = bitcast i8* %65 to i64*
  %67 = bitcast %"class.sh::TIntermNode"** %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds i8, i8* %41, i64 64
  %70 = bitcast %"class.sh::TIntermNode"*** %13 to i64*
  %71 = ptrtoint i8* %69 to i64
  store i64 %71, i64* %70, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #11
  %72 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %10, %"class.sh::TVector.42"* nonnull %3) #11
  %73 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %75 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %74, i64 240) #11
  %76 = bitcast i8* %75 to %"class.sh::TIntermBinary"*
  %77 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %76, i8 zeroext 44, %"class.sh::TIntermTyped"* %73, %"class.sh::TIntermTyped"* %77) #11
  %78 = bitcast i8* %75 to %"class.sh::TIntermTyped"*
  %79 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %80 = icmp eq %"class.sh::TIntermNode"** %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %2
  %82 = ptrtoint %"class.sh::TIntermNode"** %79 to i64
  store i64 %82, i64* %70, align 8
  br label %83

83:                                               ; preds = %2, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #11
  ret %"class.sh::TIntermTyped"* %78
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst31getHalfRenderAreaRotationMatrixEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 4
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_128GenerateMat2x2ArrayWithIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEEPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap.39"* nonnull dereferenceable(128) @_ZN2sh12_GLOBAL__N_131kHalfRenderAreaRotationMatricesE, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst9getFlipXYEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 2
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_124CreateVec2ArrayWithIndexEN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 @_ZZN2sh9SpecConst29getFragRotationMultiplyFlipXYEvE27kFragRotationMultiplyFlipXY, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_124CreateVec2ArrayWithIndexEN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nocapture readonly byval(%"class.angle::PackedEnumMap") align 8, float, %"class.sh::TIntermSymbol"*) unnamed_addr #2 {
  %4 = alloca %"class.sh::TVector.42", align 8
  %5 = alloca [8 x %"class.sh::TIntermNode"*], align 8
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 184) #11
  %8 = bitcast i8* %7 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %8, i32 1, i8 zeroext 2, i8 zeroext 1) #11
  %9 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %10 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %9, i64 184) #11
  %11 = bitcast i8* %10 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %11, %"class.sh::TType"* dereferenceable(184) %8) #11
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %11, i32 8) #11
  %12 = bitcast %"class.sh::TVector.42"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #11
  %13 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %4, i64 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %4, i64 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast [8 x %"class.sh::TIntermNode"*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16) #11
  %17 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 0
  %18 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 0)
  %19 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %19, %"class.sh::TIntermNode"** %17, align 8
  %20 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 1
  %21 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 1)
  %22 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %22, %"class.sh::TIntermNode"** %20, align 8
  %23 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 2
  %24 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 2)
  %25 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %24, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %25, %"class.sh::TIntermNode"** %23, align 8
  %26 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 3
  %27 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 3)
  %28 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %27, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %28, %"class.sh::TIntermNode"** %26, align 8
  %29 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 4
  %30 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 4)
  %31 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %31, %"class.sh::TIntermNode"** %29, align 8
  %32 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 5
  %33 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 5)
  %34 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %33, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %34, %"class.sh::TIntermNode"** %32, align 8
  %35 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 6
  %36 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 6)
  %37 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %36, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %37, %"class.sh::TIntermNode"** %35, align 8
  %38 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 7
  %39 = tail call fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 %0, float %1, i32 7)
  %40 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %39, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.sh::TIntermNode"* %40, %"class.sh::TIntermNode"** %38, align 8
  %41 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %42 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %41, i64 64) #11
  %43 = bitcast %"class.sh::TVector.42"* %4 to i8**
  store i8* %42, i8** %43, align 8
  %44 = getelementptr inbounds i8, i8* %42, i64 64
  %45 = bitcast %"class.sh::TIntermNode"*** %15 to i8**
  store i8* %44, i8** %45, align 8
  %46 = bitcast i8* %42 to i64*
  %47 = ptrtoint %"class.sh::TIntermAggregate"* %18 to i64
  store i64 %47, i64* %46, align 8
  %48 = getelementptr inbounds i8, i8* %42, i64 8
  %49 = bitcast i8* %48 to i64*
  %50 = ptrtoint %"class.sh::TIntermAggregate"* %21 to i64
  store i64 %50, i64* %49, align 8
  %51 = getelementptr inbounds i8, i8* %42, i64 16
  %52 = bitcast i8* %51 to i64*
  %53 = ptrtoint %"class.sh::TIntermAggregate"* %24 to i64
  store i64 %53, i64* %52, align 8
  %54 = getelementptr inbounds i8, i8* %42, i64 24
  %55 = bitcast i8* %54 to i64*
  %56 = ptrtoint %"class.sh::TIntermAggregate"* %27 to i64
  store i64 %56, i64* %55, align 8
  %57 = getelementptr inbounds i8, i8* %42, i64 32
  %58 = bitcast i8* %57 to i64*
  %59 = ptrtoint %"class.sh::TIntermAggregate"* %30 to i64
  store i64 %59, i64* %58, align 8
  %60 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 5
  %61 = getelementptr inbounds i8, i8* %42, i64 40
  %62 = bitcast %"class.sh::TIntermNode"** %60 to <2 x i64>*
  %63 = load <2 x i64>, <2 x i64>* %62, align 8
  %64 = bitcast i8* %61 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %64, align 8
  %65 = getelementptr inbounds [8 x %"class.sh::TIntermNode"*], [8 x %"class.sh::TIntermNode"*]* %5, i64 0, i64 7
  %66 = getelementptr inbounds i8, i8* %42, i64 56
  %67 = bitcast i8* %66 to i64*
  %68 = bitcast %"class.sh::TIntermNode"** %65 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %67, align 8
  %70 = getelementptr inbounds i8, i8* %42, i64 64
  %71 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %72 = ptrtoint i8* %70 to i64
  store i64 %72, i64* %71, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16) #11
  %73 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %11, %"class.sh::TVector.42"* nonnull %4) #11
  %74 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %73, i64 0, i32 0, i32 0, i32 0
  %75 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %76 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %75, i64 240) #11
  %77 = bitcast i8* %76 to %"class.sh::TIntermBinary"*
  %78 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %2, i64 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %77, i8 zeroext 44, %"class.sh::TIntermTyped"* %74, %"class.sh::TIntermTyped"* %78) #11
  %79 = bitcast i8* %76 to %"class.sh::TIntermTyped"*
  %80 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %81 = icmp eq %"class.sh::TIntermNode"** %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %3
  %83 = ptrtoint %"class.sh::TIntermNode"** %80 to i64
  store i64 %83, i64* %71, align 8
  br label %84

84:                                               ; preds = %3, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #11
  ret %"class.sh::TIntermTyped"* %79
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst12getNegFlipXYEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 2
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_124CreateVec2ArrayWithIndexEN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 @_ZZN2sh9SpecConst29getFragRotationMultiplyFlipXYEvE27kFragRotationMultiplyFlipXY, float -1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst8getFlipYEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 2
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull dereferenceable(64) @_ZZN2sh9SpecConst29getFragRotationMultiplyFlipXYEvE27kFragRotationMultiplyFlipXY, i32 1, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst11getNegFlipYEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 2
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_133CreateFloatArrayWithRotationIndexERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEifPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull dereferenceable(64) @_ZZN2sh9SpecConst29getFragRotationMultiplyFlipXYEvE27kFragRotationMultiplyFlipXY, i32 1, float -1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst29getFragRotationMultiplyFlipXYEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 18014398509481984
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 6
  store i32 %9, i32* %7, align 4
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 40) #11
  %12 = bitcast i8* %11 to %"class.sh::TVariable"*
  %13 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %14 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %13, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %12, %"class.sh::TSymbolTable"* %14, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_132kSurfaceRotationSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE4ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 32) #11
  %17 = bitcast i8* %16 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %17, %"class.sh::TVariable"* %12) #11
  %18 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_124CreateVec2ArrayWithIndexEN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfPNS_13TIntermSymbolE(%"class.angle::PackedEnumMap"* nonnull byval(%"class.angle::PackedEnumMap") align 8 @_ZZN2sh9SpecConst29getFragRotationMultiplyFlipXYEvE27kFragRotationMultiplyFlipXY, float 1.000000e+00, %"class.sh::TIntermSymbol"* %17)
  br label %19

19:                                               ; preds = %1, %6
  %20 = phi %"class.sh::TIntermTyped"* [ %18, %6 ], [ null, %1 ]
  ret %"class.sh::TIntermTyped"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst16getDrawableWidthEv(%"class.sh::SpecConst"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 40) #11
  %4 = bitcast i8* %3 to %"class.sh::TVariable"*
  %5 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %6 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %5, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %4, %"class.sh::TSymbolTable"* %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_130kDrawableWidthSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %8 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 32) #11
  %9 = bitcast i8* %8 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %9, %"class.sh::TVariable"* %4) #11
  ret %"class.sh::TIntermSymbol"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh9SpecConst17getDrawableHeightEv(%"class.sh::SpecConst"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 40) #11
  %4 = bitcast i8* %3 to %"class.sh::TVariable"*
  %5 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %6 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %5, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %4, %"class.sh::TSymbolTable"* %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_131kDrawableHeightSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %8 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 32) #11
  %9 = bitcast i8* %8 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %9, %"class.sh::TVariable"* %4) #11
  ret %"class.sh::TIntermSymbol"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZN2sh9SpecConst17getHalfRenderAreaEv(%"class.sh::SpecConst"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.sh::TVector.42", align 8
  %3 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 18014398509481984
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %454, label %7

7:                                                ; preds = %1
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 184) #11
  %10 = bitcast i8* %9 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %10, i32 1, i8 zeroext 2, i8 zeroext 1) #11
  %11 = bitcast %"class.sh::TVector.42"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #11
  %12 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %2, i64 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #11
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 40) #11
  %17 = bitcast i8* %16 to %"class.sh::TVariable"*
  %18 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 1
  %19 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %18, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %17, %"class.sh::TSymbolTable"* %19, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_130kDrawableWidthSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %20 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %21 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %20, i64 32) #11
  %22 = bitcast i8* %21 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %22, %"class.sh::TVariable"* %17) #11
  %23 = ptrtoint i8* %21 to i64
  %24 = bitcast %"class.sh::TIntermNode"*** %13 to i64*
  %25 = bitcast %"class.sh::TVector.42"* %2 to i64*
  %26 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %27 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %28 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %27, i64 8) #11
  %29 = bitcast i8* %28 to %"class.sh::TIntermNode"**
  %30 = getelementptr inbounds i8, i8* %28, i64 8
  %31 = ptrtoint i8* %30 to i64
  %32 = bitcast i8* %28 to i64*
  store i64 %23, i64* %32, align 8
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %36 = bitcast %"class.sh::TIntermNode"** %35 to i8*
  %37 = icmp eq %"class.sh::TIntermNode"** %35, %33
  br i1 %37, label %211, label %38

38:                                               ; preds = %7
  %39 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  %40 = ptrtoint %"class.sh::TIntermNode"** %39 to i64
  %41 = sub i64 %40, %34
  %42 = lshr i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = icmp ult i64 %43, 4
  br i1 %44, label %141, label %45

45:                                               ; preds = %38
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  %47 = ptrtoint %"class.sh::TIntermNode"** %46 to i64
  %48 = sub i64 %47, %34
  %49 = lshr i64 %48, 3
  %50 = and i64 %48, -8
  %51 = xor i64 %50, -8
  %52 = getelementptr i8, i8* %28, i64 %51
  %53 = xor i64 %49, -1
  %54 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 %53
  %55 = bitcast %"class.sh::TIntermNode"** %54 to i8*
  %56 = icmp ult i8* %52, %36
  %57 = icmp ugt i8* %28, %55
  %58 = and i1 %56, %57
  br i1 %58, label %141, label %59

59:                                               ; preds = %45
  %60 = and i64 %43, 4611686018427387900
  %61 = sub nsw i64 0, %60
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %61
  %63 = sub nsw i64 0, %60
  %64 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 %63
  %65 = add nsw i64 %60, -4
  %66 = lshr exact i64 %65, 2
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 1
  %69 = icmp eq i64 %65, 0
  br i1 %69, label %116, label %70

70:                                               ; preds = %59
  %71 = sub nuw nsw i64 %67, %68
  %72 = getelementptr i8, i8* %28, i64 -8
  %73 = bitcast i8* %72 to %"class.sh::TIntermNode"**
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  %75 = getelementptr i8, i8* %28, i64 -8
  %76 = bitcast i8* %75 to %"class.sh::TIntermNode"**
  %77 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  br label %78

78:                                               ; preds = %78, %70
  %79 = phi i64 [ 0, %70 ], [ %113, %78 ]
  %80 = phi i64 [ %71, %70 ], [ %114, %78 ]
  %81 = sub i64 0, %79
  %82 = sub i64 0, %79
  %83 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 %81
  %84 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 %82
  %85 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %84, i64 -1
  %86 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  %87 = load <2 x i64>, <2 x i64>* %86, align 8, !alias.scope !11
  %88 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %84, i64 -2
  %89 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 -1
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !11
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %83, i64 -1
  %93 = bitcast %"class.sh::TIntermNode"** %92 to <2 x i64>*
  store <2 x i64> %87, <2 x i64>* %93, align 8, !alias.scope !14, !noalias !11
  %94 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %83, i64 -2
  %95 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 -1
  %96 = bitcast %"class.sh::TIntermNode"** %95 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %96, align 8, !alias.scope !14, !noalias !11
  %97 = sub nuw nsw i64 -4, %79
  %98 = sub nuw nsw i64 -4, %79
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %76, i64 %97
  %100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %77, i64 %98
  %101 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !11
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -2
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -1
  %106 = bitcast %"class.sh::TIntermNode"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !11
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %109, align 8, !alias.scope !14, !noalias !11
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -2
  %111 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -1
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %112, align 8, !alias.scope !14, !noalias !11
  %113 = add i64 %79, 8
  %114 = add i64 %80, -2
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %78, !llvm.loop !16

116:                                              ; preds = %78, %59
  %117 = phi i64 [ 0, %59 ], [ %113, %78 ]
  %118 = icmp eq i64 %68, 0
  br i1 %118, label %139, label %119

119:                                              ; preds = %116
  %120 = sub i64 0, %117
  %121 = getelementptr i8, i8* %28, i64 -8
  %122 = bitcast i8* %121 to %"class.sh::TIntermNode"**
  %123 = sub i64 0, %117
  %124 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 %120
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 %123
  %127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !11
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 8, !alias.scope !11
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -1
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %135, align 8, !alias.scope !14, !noalias !11
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -2
  %137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -1
  %138 = bitcast %"class.sh::TIntermNode"** %137 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %138, align 8, !alias.scope !14, !noalias !11
  br label %139

139:                                              ; preds = %116, %119
  %140 = icmp eq i64 %43, %60
  br i1 %140, label %211, label %141

141:                                              ; preds = %139, %45, %38
  %142 = phi %"class.sh::TIntermNode"** [ %29, %45 ], [ %29, %38 ], [ %62, %139 ]
  %143 = phi %"class.sh::TIntermNode"** [ %35, %45 ], [ %35, %38 ], [ %64, %139 ]
  %144 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -1
  %145 = ptrtoint %"class.sh::TIntermNode"** %144 to i64
  %146 = sub i64 %145, %34
  %147 = lshr i64 %146, 3
  %148 = add nuw nsw i64 %147, 1
  %149 = and i64 %148, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %162, label %151

151:                                              ; preds = %141, %151
  %152 = phi %"class.sh::TIntermNode"** [ %155, %151 ], [ %142, %141 ]
  %153 = phi %"class.sh::TIntermNode"** [ %156, %151 ], [ %143, %141 ]
  %154 = phi i64 [ %160, %151 ], [ %149, %141 ]
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 -1
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 -1
  %157 = bitcast %"class.sh::TIntermNode"** %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast %"class.sh::TIntermNode"** %155 to i64*
  store i64 %158, i64* %159, align 8
  %160 = add i64 %154, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %151, !llvm.loop !18

162:                                              ; preds = %151, %141
  %163 = phi %"class.sh::TIntermNode"** [ undef, %141 ], [ %155, %151 ]
  %164 = phi %"class.sh::TIntermNode"** [ %142, %141 ], [ %155, %151 ]
  %165 = phi %"class.sh::TIntermNode"** [ %143, %141 ], [ %156, %151 ]
  %166 = icmp ult i64 %146, 56
  br i1 %166, label %211, label %167

167:                                              ; preds = %162, %167
  %168 = phi %"class.sh::TIntermNode"** [ %205, %167 ], [ %164, %162 ]
  %169 = phi %"class.sh::TIntermNode"** [ %206, %167 ], [ %165, %162 ]
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -1
  %172 = bitcast %"class.sh::TIntermNode"** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.sh::TIntermNode"** %170 to i64*
  store i64 %173, i64* %174, align 8
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -2
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -2
  %177 = bitcast %"class.sh::TIntermNode"** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.sh::TIntermNode"** %175 to i64*
  store i64 %178, i64* %179, align 8
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -3
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -3
  %182 = bitcast %"class.sh::TIntermNode"** %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = bitcast %"class.sh::TIntermNode"** %180 to i64*
  store i64 %183, i64* %184, align 8
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -4
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -4
  %187 = bitcast %"class.sh::TIntermNode"** %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  store i64 %188, i64* %189, align 8
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -5
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -5
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -6
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -6
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -7
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -7
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -8
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -8
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = icmp eq %"class.sh::TIntermNode"** %206, %33
  br i1 %210, label %211, label %167, !llvm.loop !20

211:                                              ; preds = %162, %167, %139, %7
  %212 = phi %"class.sh::TIntermNode"** [ %29, %7 ], [ %62, %139 ], [ %163, %162 ], [ %205, %167 ]
  %213 = ptrtoint %"class.sh::TIntermNode"** %212 to i64
  store i64 %213, i64* %25, align 8
  store i64 %31, i64* %24, align 8
  store i64 %31, i64* %26, align 8
  %214 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %215 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %214, i64 40) #11
  %216 = bitcast i8* %215 to %"class.sh::TVariable"*
  %217 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %18, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %216, %"class.sh::TSymbolTable"* %217, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_131kDrawableHeightSpecConstVarNameE, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE1ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*), i8 zeroext 2, i8 zeroext 0) #11
  %218 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %219 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %218, i64 32) #11
  %220 = bitcast i8* %219 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %220, %"class.sh::TVariable"* %216) #11
  %221 = ptrtoint i8* %219 to i64
  %222 = ptrtoint i8* %30 to i64
  %223 = bitcast %"class.sh::TIntermNode"*** %13 to i64*
  %224 = bitcast %"class.sh::TVector.42"* %2 to i64*
  %225 = sub i64 %222, %213
  %226 = ashr exact i64 %225, 3
  %227 = add nsw i64 %226, 1
  %228 = icmp ugt i64 %227, 2305843009213693951
  br i1 %228, label %229, label %231

229:                                              ; preds = %211
  %230 = bitcast %"class.sh::TVector.42"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %230) #12
  unreachable

231:                                              ; preds = %211
  %232 = ptrtoint i8* %30 to i64
  %233 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %234 = sub i64 %232, %213
  %235 = ashr exact i64 %234, 3
  %236 = icmp ult i64 %235, 1152921504606846975
  br i1 %236, label %237, label %242

237:                                              ; preds = %231
  %238 = ashr exact i64 %234, 2
  %239 = icmp ult i64 %238, %227
  %240 = select i1 %239, i64 %227, i64 %238
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %248, label %242

242:                                              ; preds = %237, %231
  %243 = phi i64 [ %240, %237 ], [ 2305843009213693951, %231 ]
  %244 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %245 = shl i64 %243, 3
  %246 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %244, i64 %245) #11
  %247 = bitcast i8* %246 to %"class.sh::TIntermNode"**
  br label %248

248:                                              ; preds = %242, %237
  %249 = phi i64 [ %243, %242 ], [ 0, %237 ]
  %250 = phi %"class.sh::TIntermNode"** [ %247, %242 ], [ null, %237 ]
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 %226
  %252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 %249
  %253 = ptrtoint %"class.sh::TIntermNode"** %252 to i64
  %254 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  store i64 %221, i64* %254, align 8
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %251, i64 1
  %256 = ptrtoint %"class.sh::TIntermNode"** %255 to i64
  %257 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %258 = ptrtoint %"class.sh::TIntermNode"** %257 to i64
  %259 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %260 = icmp eq %"class.sh::TIntermNode"** %259, %257
  br i1 %260, label %430, label %261

261:                                              ; preds = %248
  %262 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %263 = ptrtoint %"class.sh::TIntermNode"** %262 to i64
  %264 = sub i64 %263, %258
  %265 = lshr i64 %264, 3
  %266 = add nuw nsw i64 %265, 1
  %267 = icmp ult i64 %266, 4
  br i1 %267, label %360, label %268

268:                                              ; preds = %261
  %269 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %270 = ptrtoint %"class.sh::TIntermNode"** %269 to i64
  %271 = sub i64 %270, %258
  %272 = lshr i64 %271, 3
  %273 = xor i64 %272, -1
  %274 = add nsw i64 %226, %273
  %275 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 %274
  %276 = xor i64 %272, -1
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 %276
  %278 = icmp ult %"class.sh::TIntermNode"** %275, %259
  %279 = icmp ult %"class.sh::TIntermNode"** %277, %251
  %280 = and i1 %278, %279
  br i1 %280, label %360, label %281

281:                                              ; preds = %268
  %282 = and i64 %266, 4611686018427387900
  %283 = sub nsw i64 0, %282
  %284 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %251, i64 %283
  %285 = sub nsw i64 0, %282
  %286 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 %285
  %287 = add nsw i64 %282, -4
  %288 = lshr exact i64 %287, 2
  %289 = add nuw nsw i64 %288, 1
  %290 = and i64 %289, 1
  %291 = icmp eq i64 %287, 0
  br i1 %291, label %338, label %292

292:                                              ; preds = %281
  %293 = sub nuw nsw i64 %289, %290
  %294 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %251, i64 -1
  %295 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %251, i64 -1
  %297 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  br label %298

298:                                              ; preds = %298, %292
  %299 = phi i64 [ 0, %292 ], [ %333, %298 ]
  %300 = phi i64 [ %293, %292 ], [ %334, %298 ]
  %301 = sub i64 0, %299
  %302 = sub i64 0, %299
  %303 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %294, i64 %301
  %304 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, i64 %302
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %306 = bitcast %"class.sh::TIntermNode"** %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 8, !alias.scope !21
  %308 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -2
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 -1
  %310 = bitcast %"class.sh::TIntermNode"** %309 to <2 x i64>*
  %311 = load <2 x i64>, <2 x i64>* %310, align 8, !alias.scope !21
  %312 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -1
  %313 = bitcast %"class.sh::TIntermNode"** %312 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %313, align 8, !alias.scope !24, !noalias !21
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -2
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = bitcast %"class.sh::TIntermNode"** %315 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %316, align 8, !alias.scope !24, !noalias !21
  %317 = sub nuw nsw i64 -4, %299
  %318 = sub nuw nsw i64 -4, %299
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 %317
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %297, i64 %318
  %321 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %320, i64 -1
  %322 = bitcast %"class.sh::TIntermNode"** %321 to <2 x i64>*
  %323 = load <2 x i64>, <2 x i64>* %322, align 8, !alias.scope !21
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %320, i64 -2
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to <2 x i64>*
  %327 = load <2 x i64>, <2 x i64>* %326, align 8, !alias.scope !21
  %328 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 -1
  %329 = bitcast %"class.sh::TIntermNode"** %328 to <2 x i64>*
  store <2 x i64> %323, <2 x i64>* %329, align 8, !alias.scope !24, !noalias !21
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 -2
  %331 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %332 = bitcast %"class.sh::TIntermNode"** %331 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %332, align 8, !alias.scope !24, !noalias !21
  %333 = add i64 %299, 8
  %334 = add i64 %300, -2
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %298, !llvm.loop !26

336:                                              ; preds = %298
  %337 = sub nuw nsw i64 -8, %299
  br label %338

338:                                              ; preds = %336, %281
  %339 = phi i64 [ 0, %281 ], [ %337, %336 ]
  %340 = icmp eq i64 %290, 0
  br i1 %340, label %358, label %341

341:                                              ; preds = %338
  %342 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %251, i64 -1
  %343 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %342, i64 %339
  %345 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %343, i64 %339
  %346 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 -1
  %347 = bitcast %"class.sh::TIntermNode"** %346 to <2 x i64>*
  %348 = load <2 x i64>, <2 x i64>* %347, align 8, !alias.scope !21
  %349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 -2
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 -1
  %351 = bitcast %"class.sh::TIntermNode"** %350 to <2 x i64>*
  %352 = load <2 x i64>, <2 x i64>* %351, align 8, !alias.scope !21
  %353 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  %354 = bitcast %"class.sh::TIntermNode"** %353 to <2 x i64>*
  store <2 x i64> %348, <2 x i64>* %354, align 8, !alias.scope !24, !noalias !21
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -2
  %356 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %355, i64 -1
  %357 = bitcast %"class.sh::TIntermNode"** %356 to <2 x i64>*
  store <2 x i64> %352, <2 x i64>* %357, align 8, !alias.scope !24, !noalias !21
  br label %358

358:                                              ; preds = %338, %341
  %359 = icmp eq i64 %266, %282
  br i1 %359, label %430, label %360

360:                                              ; preds = %358, %268, %261
  %361 = phi %"class.sh::TIntermNode"** [ %251, %268 ], [ %251, %261 ], [ %284, %358 ]
  %362 = phi %"class.sh::TIntermNode"** [ %259, %268 ], [ %259, %261 ], [ %286, %358 ]
  %363 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %362, i64 -1
  %364 = ptrtoint %"class.sh::TIntermNode"** %363 to i64
  %365 = sub i64 %364, %258
  %366 = lshr i64 %365, 3
  %367 = add nuw nsw i64 %366, 1
  %368 = and i64 %367, 7
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %381, label %370

370:                                              ; preds = %360, %370
  %371 = phi %"class.sh::TIntermNode"** [ %374, %370 ], [ %361, %360 ]
  %372 = phi %"class.sh::TIntermNode"** [ %375, %370 ], [ %362, %360 ]
  %373 = phi i64 [ %379, %370 ], [ %368, %360 ]
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %371, i64 -1
  %375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %372, i64 -1
  %376 = bitcast %"class.sh::TIntermNode"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.sh::TIntermNode"** %374 to i64*
  store i64 %377, i64* %378, align 8
  %379 = add i64 %373, -1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %370, !llvm.loop !27

381:                                              ; preds = %370, %360
  %382 = phi %"class.sh::TIntermNode"** [ undef, %360 ], [ %374, %370 ]
  %383 = phi %"class.sh::TIntermNode"** [ %361, %360 ], [ %374, %370 ]
  %384 = phi %"class.sh::TIntermNode"** [ %362, %360 ], [ %375, %370 ]
  %385 = icmp ult i64 %365, 56
  br i1 %385, label %430, label %386

386:                                              ; preds = %381, %386
  %387 = phi %"class.sh::TIntermNode"** [ %424, %386 ], [ %383, %381 ]
  %388 = phi %"class.sh::TIntermNode"** [ %425, %386 ], [ %384, %381 ]
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -1
  %390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -1
  %391 = bitcast %"class.sh::TIntermNode"** %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = bitcast %"class.sh::TIntermNode"** %389 to i64*
  store i64 %392, i64* %393, align 8
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -2
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -2
  %396 = bitcast %"class.sh::TIntermNode"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -3
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -3
  %401 = bitcast %"class.sh::TIntermNode"** %400 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.sh::TIntermNode"** %399 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -4
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -4
  %406 = bitcast %"class.sh::TIntermNode"** %405 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.sh::TIntermNode"** %404 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -5
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -5
  %411 = bitcast %"class.sh::TIntermNode"** %410 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.sh::TIntermNode"** %409 to i64*
  store i64 %412, i64* %413, align 8
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -6
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -6
  %416 = bitcast %"class.sh::TIntermNode"** %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.sh::TIntermNode"** %414 to i64*
  store i64 %417, i64* %418, align 8
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -7
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -7
  %421 = bitcast %"class.sh::TIntermNode"** %420 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast %"class.sh::TIntermNode"** %419 to i64*
  store i64 %422, i64* %423, align 8
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 -8
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -8
  %426 = bitcast %"class.sh::TIntermNode"** %425 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = bitcast %"class.sh::TIntermNode"** %424 to i64*
  store i64 %427, i64* %428, align 8
  %429 = icmp eq %"class.sh::TIntermNode"** %425, %257
  br i1 %429, label %430, label %386, !llvm.loop !28

430:                                              ; preds = %381, %386, %358, %248
  %431 = phi %"class.sh::TIntermNode"** [ %251, %248 ], [ %284, %358 ], [ %382, %381 ], [ %424, %386 ]
  %432 = ptrtoint %"class.sh::TIntermNode"** %431 to i64
  store i64 %432, i64* %224, align 8
  store i64 %256, i64* %223, align 8
  store i64 %253, i64* %233, align 8
  %433 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %10, %"class.sh::TVector.42"* nonnull %2) #11
  %434 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %435 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %434, i64 240) #11
  %436 = bitcast i8* %435 to %"class.sh::TIntermBinary"*
  %437 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %433, i64 0, i32 0, i32 0, i32 0
  %438 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float 5.000000e-01) #11
  %439 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %438, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %436, i8 zeroext 31, %"class.sh::TIntermTyped"* %437, %"class.sh::TIntermTyped"* %439) #11
  %440 = getelementptr inbounds %"class.sh::SpecConst", %"class.sh::SpecConst"* %0, i64 0, i32 3, i32 0
  %441 = load i32, i32* %440, align 4
  %442 = or i32 %441, 8
  store i32 %442, i32* %440, align 4
  %443 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %444 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %443, i64 240) #11
  %445 = bitcast i8* %444 to %"class.sh::TIntermBinary"*
  %446 = call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst31getHalfRenderAreaRotationMatrixEv(%"class.sh::SpecConst"* %0)
  %447 = bitcast i8* %435 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %445, i8 zeroext 33, %"class.sh::TIntermTyped"* %446, %"class.sh::TIntermTyped"* %447) #11
  %448 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %449 = icmp eq %"class.sh::TIntermNode"** %448, null
  br i1 %449, label %453, label %450

450:                                              ; preds = %430
  %451 = ptrtoint %"class.sh::TIntermNode"** %448 to i64
  %452 = bitcast %"class.sh::TIntermNode"*** %13 to i64*
  store i64 %451, i64* %452, align 8
  br label %453

453:                                              ; preds = %430, %450
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #11
  br label %454

454:                                              ; preds = %1, %453
  %455 = phi %"class.sh::TIntermBinary"* [ %445, %453 ], [ null, %1 ]
  ret %"class.sh::TIntermBinary"* %455
}

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"*, i32, i8 zeroext, i8 zeroext) unnamed_addr #5

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.42"*) local_unnamed_addr #5

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float) local_unnamed_addr #5

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #5

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2sh9SpecConst15IsSpecConstNameERKNS_15ImmutableStringE(%"class.sh::ImmutableString"* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  switch i64 %3, label %33 [
    i64 24, label %4
    i64 20, label %11
    i64 18, label %18
    i64 19, label %26
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = select i1 %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* %6
  %9 = tail call i32 @bcmp(i8* %8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i64 24) #11
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %33, label %25

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %0, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  %15 = select i1 %14, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* %13
  %16 = tail call i32 @bcmp(i8* %15, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i64 20) #11
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %33, label %25

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  %22 = select i1 %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* %20
  %23 = tail call i32 @bcmp(i8* %22, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i64 18) #11
  %24 = icmp eq i32 %23, 0
  ret i1 %24

25:                                               ; preds = %4, %11
  br label %33

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %0, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  %30 = select i1 %29, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* %28
  %31 = tail call i32 @bcmp(i8* %30, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i64 19) #11
  %32 = icmp eq i32 %31, 0
  br label %33

33:                                               ; preds = %1, %26, %25, %11, %4
  %34 = phi i1 [ true, %11 ], [ true, %4 ], [ %32, %26 ], [ false, %25 ], [ false, %1 ]
  ret i1 %34
}

declare dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.22"*, i8*) local_unnamed_addr #5

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #5

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #5

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #5

declare void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"*, i32) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_112CreateMat2x2ERKN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm4EEELm8EEES4_(%"class.angle::PackedEnumMap.39"* nocapture readonly dereferenceable(128), i32) unnamed_addr #2 {
  %3 = alloca %"class.sh::TVector.42", align 8
  %4 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %5 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %4, i64 184) #11
  %6 = bitcast i8* %5 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %6, i32 1, i8 zeroext 2, i8 zeroext 2) #11
  %7 = bitcast %"class.sh::TVector.42"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %3, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %3, i64 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #11
  %11 = zext i32 %1 to i64
  %12 = getelementptr inbounds %"class.angle::PackedEnumMap.39", %"class.angle::PackedEnumMap.39"* %0, i64 0, i32 0, i32 0, i64 %11, i32 0, i64 0
  %13 = load float, float* %12, align 4
  %14 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %13) #11
  %15 = ptrtoint %"class.sh::TIntermConstantUnion"* %14 to i64
  %16 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %17 = bitcast %"class.sh::TVector.42"* %3 to i64*
  %18 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %19 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %20 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %19, i64 8) #11
  %21 = bitcast i8* %20 to %"class.sh::TIntermNode"**
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  %23 = ptrtoint i8* %22 to i64
  %24 = bitcast i8* %20 to i64*
  store i64 %15, i64* %24, align 8
  %25 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %26 = ptrtoint %"class.sh::TIntermNode"** %25 to i64
  %27 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %28 = bitcast %"class.sh::TIntermNode"** %27 to i8*
  %29 = icmp eq %"class.sh::TIntermNode"** %27, %25
  br i1 %29, label %203, label %30

30:                                               ; preds = %2
  %31 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 -1
  %32 = ptrtoint %"class.sh::TIntermNode"** %31 to i64
  %33 = sub i64 %32, %26
  %34 = lshr i64 %33, 3
  %35 = add nuw nsw i64 %34, 1
  %36 = icmp ult i64 %35, 4
  br i1 %36, label %133, label %37

37:                                               ; preds = %30
  %38 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 -1
  %39 = ptrtoint %"class.sh::TIntermNode"** %38 to i64
  %40 = sub i64 %39, %26
  %41 = lshr i64 %40, 3
  %42 = and i64 %40, -8
  %43 = xor i64 %42, -8
  %44 = getelementptr i8, i8* %20, i64 %43
  %45 = xor i64 %41, -1
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 %45
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = icmp ult i8* %44, %28
  %49 = icmp ugt i8* %20, %47
  %50 = and i1 %48, %49
  br i1 %50, label %133, label %51

51:                                               ; preds = %37
  %52 = and i64 %35, 4611686018427387900
  %53 = sub nsw i64 0, %52
  %54 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %21, i64 %53
  %55 = sub nsw i64 0, %52
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 %55
  %57 = add nsw i64 %52, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 1
  %61 = icmp eq i64 %57, 0
  br i1 %61, label %108, label %62

62:                                               ; preds = %51
  %63 = sub nuw nsw i64 %59, %60
  %64 = getelementptr i8, i8* %20, i64 -8
  %65 = bitcast i8* %64 to %"class.sh::TIntermNode"**
  %66 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 -1
  %67 = getelementptr i8, i8* %20, i64 -8
  %68 = bitcast i8* %67 to %"class.sh::TIntermNode"**
  %69 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 -1
  br label %70

70:                                               ; preds = %70, %62
  %71 = phi i64 [ 0, %62 ], [ %105, %70 ]
  %72 = phi i64 [ %63, %62 ], [ %106, %70 ]
  %73 = sub i64 0, %71
  %74 = sub i64 0, %71
  %75 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %65, i64 %73
  %76 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 %74
  %77 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %76, i64 -1
  %78 = bitcast %"class.sh::TIntermNode"** %77 to <2 x i64>*
  %79 = load <2 x i64>, <2 x i64>* %78, align 8, !alias.scope !29
  %80 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %76, i64 -2
  %81 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %80, i64 -1
  %82 = bitcast %"class.sh::TIntermNode"** %81 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 8, !alias.scope !29
  %84 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  %85 = bitcast %"class.sh::TIntermNode"** %84 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %85, align 8, !alias.scope !32, !noalias !29
  %86 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -2
  %87 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 -1
  %88 = bitcast %"class.sh::TIntermNode"** %87 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %88, align 8, !alias.scope !32, !noalias !29
  %89 = sub nuw nsw i64 -4, %71
  %90 = sub nuw nsw i64 -4, %71
  %91 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 %89
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %69, i64 %90
  %93 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !29
  %96 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -2
  %97 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 -1
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !29
  %100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 -1
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %101, align 8, !alias.scope !32, !noalias !29
  %102 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 -2
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %102, i64 -1
  %104 = bitcast %"class.sh::TIntermNode"** %103 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %104, align 8, !alias.scope !32, !noalias !29
  %105 = add i64 %71, 8
  %106 = add i64 %72, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %70, !llvm.loop !34

108:                                              ; preds = %70, %51
  %109 = phi i64 [ 0, %51 ], [ %105, %70 ]
  %110 = icmp eq i64 %60, 0
  br i1 %110, label %131, label %111

111:                                              ; preds = %108
  %112 = sub i64 0, %109
  %113 = getelementptr i8, i8* %20, i64 -8
  %114 = bitcast i8* %113 to %"class.sh::TIntermNode"**
  %115 = sub i64 0, %109
  %116 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 -1
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 %112
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 %115
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %120 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 8, !alias.scope !29
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -2
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -1
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !29
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %127, align 8, !alias.scope !32, !noalias !29
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -2
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %130 = bitcast %"class.sh::TIntermNode"** %129 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %130, align 8, !alias.scope !32, !noalias !29
  br label %131

131:                                              ; preds = %108, %111
  %132 = icmp eq i64 %35, %52
  br i1 %132, label %203, label %133

133:                                              ; preds = %131, %37, %30
  %134 = phi %"class.sh::TIntermNode"** [ %21, %37 ], [ %21, %30 ], [ %54, %131 ]
  %135 = phi %"class.sh::TIntermNode"** [ %27, %37 ], [ %27, %30 ], [ %56, %131 ]
  %136 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  %138 = sub i64 %137, %26
  %139 = lshr i64 %138, 3
  %140 = add nuw nsw i64 %139, 1
  %141 = and i64 %140, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %133, %143
  %144 = phi %"class.sh::TIntermNode"** [ %147, %143 ], [ %134, %133 ]
  %145 = phi %"class.sh::TIntermNode"** [ %148, %143 ], [ %135, %133 ]
  %146 = phi i64 [ %152, %143 ], [ %141, %133 ]
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -1
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %149 = bitcast %"class.sh::TIntermNode"** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  store i64 %150, i64* %151, align 8
  %152 = add i64 %146, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !35

154:                                              ; preds = %143, %133
  %155 = phi %"class.sh::TIntermNode"** [ undef, %133 ], [ %147, %143 ]
  %156 = phi %"class.sh::TIntermNode"** [ %134, %133 ], [ %147, %143 ]
  %157 = phi %"class.sh::TIntermNode"** [ %135, %133 ], [ %148, %143 ]
  %158 = icmp ult i64 %138, 56
  br i1 %158, label %203, label %159

159:                                              ; preds = %154, %159
  %160 = phi %"class.sh::TIntermNode"** [ %197, %159 ], [ %156, %154 ]
  %161 = phi %"class.sh::TIntermNode"** [ %198, %159 ], [ %157, %154 ]
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -1
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %164 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = bitcast %"class.sh::TIntermNode"** %162 to i64*
  store i64 %165, i64* %166, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -2
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -2
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  store i64 %170, i64* %171, align 8
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -3
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -3
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  store i64 %175, i64* %176, align 8
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -4
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -4
  %179 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = bitcast %"class.sh::TIntermNode"** %177 to i64*
  store i64 %180, i64* %181, align 8
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -5
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -5
  %184 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  store i64 %185, i64* %186, align 8
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -6
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -6
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  store i64 %190, i64* %191, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -7
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -7
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  store i64 %195, i64* %196, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -8
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -8
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  store i64 %200, i64* %201, align 8
  %202 = icmp eq %"class.sh::TIntermNode"** %198, %25
  br i1 %202, label %203, label %159, !llvm.loop !36

203:                                              ; preds = %154, %159, %131, %2
  %204 = phi %"class.sh::TIntermNode"** [ %21, %2 ], [ %54, %131 ], [ %155, %154 ], [ %197, %159 ]
  %205 = ptrtoint %"class.sh::TIntermNode"** %204 to i64
  store i64 %205, i64* %17, align 8
  store i64 %23, i64* %16, align 8
  store i64 %23, i64* %18, align 8
  %206 = getelementptr inbounds %"class.angle::PackedEnumMap.39", %"class.angle::PackedEnumMap.39"* %0, i64 0, i32 0, i32 0, i64 %11, i32 0, i64 1
  %207 = load float, float* %206, align 4
  %208 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %207) #11
  %209 = ptrtoint %"class.sh::TIntermConstantUnion"* %208 to i64
  %210 = ptrtoint i8* %22 to i64
  %211 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %212 = bitcast %"class.sh::TVector.42"* %3 to i64*
  %213 = sub i64 %210, %205
  %214 = ashr exact i64 %213, 3
  %215 = add nsw i64 %214, 1
  %216 = icmp ugt i64 %215, 2305843009213693951
  br i1 %216, label %217, label %219

217:                                              ; preds = %203
  %218 = bitcast %"class.sh::TVector.42"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %218) #12
  unreachable

219:                                              ; preds = %203
  %220 = ptrtoint i8* %22 to i64
  %221 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %222 = sub i64 %220, %205
  %223 = ashr exact i64 %222, 3
  %224 = icmp ult i64 %223, 1152921504606846975
  br i1 %224, label %225, label %230

225:                                              ; preds = %219
  %226 = ashr exact i64 %222, 2
  %227 = icmp ult i64 %226, %215
  %228 = select i1 %227, i64 %215, i64 %226
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %236, label %230

230:                                              ; preds = %225, %219
  %231 = phi i64 [ %228, %225 ], [ 2305843009213693951, %219 ]
  %232 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %233 = shl i64 %231, 3
  %234 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %232, i64 %233) #11
  %235 = bitcast i8* %234 to %"class.sh::TIntermNode"**
  br label %236

236:                                              ; preds = %230, %225
  %237 = phi i64 [ %231, %230 ], [ 0, %225 ]
  %238 = phi %"class.sh::TIntermNode"** [ %235, %230 ], [ null, %225 ]
  %239 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %238, i64 %214
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %238, i64 %237
  %241 = ptrtoint %"class.sh::TIntermNode"** %240 to i64
  %242 = bitcast %"class.sh::TIntermNode"** %239 to i64*
  store i64 %209, i64* %242, align 8
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 1
  %244 = ptrtoint %"class.sh::TIntermNode"** %243 to i64
  %245 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %246 = ptrtoint %"class.sh::TIntermNode"** %245 to i64
  %247 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %248 = icmp eq %"class.sh::TIntermNode"** %247, %245
  br i1 %248, label %418, label %249

249:                                              ; preds = %236
  %250 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -1
  %251 = ptrtoint %"class.sh::TIntermNode"** %250 to i64
  %252 = sub i64 %251, %246
  %253 = lshr i64 %252, 3
  %254 = add nuw nsw i64 %253, 1
  %255 = icmp ult i64 %254, 4
  br i1 %255, label %348, label %256

256:                                              ; preds = %249
  %257 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -1
  %258 = ptrtoint %"class.sh::TIntermNode"** %257 to i64
  %259 = sub i64 %258, %246
  %260 = lshr i64 %259, 3
  %261 = xor i64 %260, -1
  %262 = add nsw i64 %214, %261
  %263 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %238, i64 %262
  %264 = xor i64 %260, -1
  %265 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 %264
  %266 = icmp ult %"class.sh::TIntermNode"** %263, %247
  %267 = icmp ult %"class.sh::TIntermNode"** %265, %239
  %268 = and i1 %266, %267
  br i1 %268, label %348, label %269

269:                                              ; preds = %256
  %270 = and i64 %254, 4611686018427387900
  %271 = sub nsw i64 0, %270
  %272 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 %271
  %273 = sub nsw i64 0, %270
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 %273
  %275 = add nsw i64 %270, -4
  %276 = lshr exact i64 %275, 2
  %277 = add nuw nsw i64 %276, 1
  %278 = and i64 %277, 1
  %279 = icmp eq i64 %275, 0
  br i1 %279, label %324, label %280

280:                                              ; preds = %269
  %281 = sub nuw nsw i64 %277, %278
  %282 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %283 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -1
  %284 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -1
  br label %286

286:                                              ; preds = %286, %280
  %287 = phi i64 [ 0, %280 ], [ %321, %286 ]
  %288 = phi i64 [ %281, %280 ], [ %322, %286 ]
  %289 = sub i64 0, %287
  %290 = sub i64 0, %287
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %282, i64 %289
  %292 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %283, i64 %290
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %292, i64 -1
  %294 = bitcast %"class.sh::TIntermNode"** %293 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 8, !alias.scope !37
  %296 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %292, i64 -2
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -1
  %298 = bitcast %"class.sh::TIntermNode"** %297 to <2 x i64>*
  %299 = load <2 x i64>, <2 x i64>* %298, align 8, !alias.scope !37
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %291, i64 -1
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %301, align 8, !alias.scope !40, !noalias !37
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %291, i64 -2
  %303 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -1
  %304 = bitcast %"class.sh::TIntermNode"** %303 to <2 x i64>*
  store <2 x i64> %299, <2 x i64>* %304, align 8, !alias.scope !40, !noalias !37
  %305 = sub nuw nsw i64 -4, %287
  %306 = sub nuw nsw i64 -4, %287
  %307 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %284, i64 %305
  %308 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %285, i64 %306
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 -1
  %310 = bitcast %"class.sh::TIntermNode"** %309 to <2 x i64>*
  %311 = load <2 x i64>, <2 x i64>* %310, align 8, !alias.scope !37
  %312 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %308, i64 -2
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %312, i64 -1
  %314 = bitcast %"class.sh::TIntermNode"** %313 to <2 x i64>*
  %315 = load <2 x i64>, <2 x i64>* %314, align 8, !alias.scope !37
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 -1
  %317 = bitcast %"class.sh::TIntermNode"** %316 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %317, align 8, !alias.scope !40, !noalias !37
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 -2
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 -1
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  store <2 x i64> %315, <2 x i64>* %320, align 8, !alias.scope !40, !noalias !37
  %321 = add i64 %287, 8
  %322 = add i64 %288, -2
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %286, !llvm.loop !42

324:                                              ; preds = %286, %269
  %325 = phi i64 [ 0, %269 ], [ %321, %286 ]
  %326 = icmp eq i64 %278, 0
  br i1 %326, label %346, label %327

327:                                              ; preds = %324
  %328 = sub i64 0, %325
  %329 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %330 = sub i64 0, %325
  %331 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 -1
  %332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 %328
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 %330
  %334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %333, i64 -1
  %335 = bitcast %"class.sh::TIntermNode"** %334 to <2 x i64>*
  %336 = load <2 x i64>, <2 x i64>* %335, align 8, !alias.scope !37
  %337 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %333, i64 -2
  %338 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %337, i64 -1
  %339 = bitcast %"class.sh::TIntermNode"** %338 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %339, align 8, !alias.scope !37
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -1
  %342 = bitcast %"class.sh::TIntermNode"** %341 to <2 x i64>*
  store <2 x i64> %336, <2 x i64>* %342, align 8, !alias.scope !40, !noalias !37
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -2
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %343, i64 -1
  %345 = bitcast %"class.sh::TIntermNode"** %344 to <2 x i64>*
  store <2 x i64> %340, <2 x i64>* %345, align 8, !alias.scope !40, !noalias !37
  br label %346

346:                                              ; preds = %324, %327
  %347 = icmp eq i64 %254, %270
  br i1 %347, label %418, label %348

348:                                              ; preds = %346, %256, %249
  %349 = phi %"class.sh::TIntermNode"** [ %239, %256 ], [ %239, %249 ], [ %272, %346 ]
  %350 = phi %"class.sh::TIntermNode"** [ %247, %256 ], [ %247, %249 ], [ %274, %346 ]
  %351 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %350, i64 -1
  %352 = ptrtoint %"class.sh::TIntermNode"** %351 to i64
  %353 = sub i64 %352, %246
  %354 = lshr i64 %353, 3
  %355 = add nuw nsw i64 %354, 1
  %356 = and i64 %355, 7
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %369, label %358

358:                                              ; preds = %348, %358
  %359 = phi %"class.sh::TIntermNode"** [ %362, %358 ], [ %349, %348 ]
  %360 = phi %"class.sh::TIntermNode"** [ %363, %358 ], [ %350, %348 ]
  %361 = phi i64 [ %367, %358 ], [ %356, %348 ]
  %362 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %359, i64 -1
  %363 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 -1
  %364 = bitcast %"class.sh::TIntermNode"** %363 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = bitcast %"class.sh::TIntermNode"** %362 to i64*
  store i64 %365, i64* %366, align 8
  %367 = add i64 %361, -1
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %358, !llvm.loop !43

369:                                              ; preds = %358, %348
  %370 = phi %"class.sh::TIntermNode"** [ undef, %348 ], [ %362, %358 ]
  %371 = phi %"class.sh::TIntermNode"** [ %349, %348 ], [ %362, %358 ]
  %372 = phi %"class.sh::TIntermNode"** [ %350, %348 ], [ %363, %358 ]
  %373 = icmp ult i64 %353, 56
  br i1 %373, label %418, label %374

374:                                              ; preds = %369, %374
  %375 = phi %"class.sh::TIntermNode"** [ %412, %374 ], [ %371, %369 ]
  %376 = phi %"class.sh::TIntermNode"** [ %413, %374 ], [ %372, %369 ]
  %377 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -1
  %378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -1
  %379 = bitcast %"class.sh::TIntermNode"** %378 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = bitcast %"class.sh::TIntermNode"** %377 to i64*
  store i64 %380, i64* %381, align 8
  %382 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -2
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -2
  %384 = bitcast %"class.sh::TIntermNode"** %383 to i64*
  %385 = load i64, i64* %384, align 8
  %386 = bitcast %"class.sh::TIntermNode"** %382 to i64*
  store i64 %385, i64* %386, align 8
  %387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -3
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -3
  %389 = bitcast %"class.sh::TIntermNode"** %388 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = bitcast %"class.sh::TIntermNode"** %387 to i64*
  store i64 %390, i64* %391, align 8
  %392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -4
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -4
  %394 = bitcast %"class.sh::TIntermNode"** %393 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = bitcast %"class.sh::TIntermNode"** %392 to i64*
  store i64 %395, i64* %396, align 8
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -5
  %398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -5
  %399 = bitcast %"class.sh::TIntermNode"** %398 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = bitcast %"class.sh::TIntermNode"** %397 to i64*
  store i64 %400, i64* %401, align 8
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -6
  %403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -6
  %404 = bitcast %"class.sh::TIntermNode"** %403 to i64*
  %405 = load i64, i64* %404, align 8
  %406 = bitcast %"class.sh::TIntermNode"** %402 to i64*
  store i64 %405, i64* %406, align 8
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -7
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -7
  %409 = bitcast %"class.sh::TIntermNode"** %408 to i64*
  %410 = load i64, i64* %409, align 8
  %411 = bitcast %"class.sh::TIntermNode"** %407 to i64*
  store i64 %410, i64* %411, align 8
  %412 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -8
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -8
  %414 = bitcast %"class.sh::TIntermNode"** %413 to i64*
  %415 = load i64, i64* %414, align 8
  %416 = bitcast %"class.sh::TIntermNode"** %412 to i64*
  store i64 %415, i64* %416, align 8
  %417 = icmp eq %"class.sh::TIntermNode"** %413, %245
  br i1 %417, label %418, label %374, !llvm.loop !44

418:                                              ; preds = %369, %374, %346, %236
  %419 = phi %"class.sh::TIntermNode"** [ %239, %236 ], [ %272, %346 ], [ %370, %369 ], [ %412, %374 ]
  %420 = ptrtoint %"class.sh::TIntermNode"** %419 to i64
  store i64 %420, i64* %212, align 8
  store i64 %244, i64* %211, align 8
  store i64 %241, i64* %221, align 8
  %421 = getelementptr inbounds %"class.angle::PackedEnumMap.39", %"class.angle::PackedEnumMap.39"* %0, i64 0, i32 0, i32 0, i64 %11, i32 0, i64 2
  %422 = load float, float* %421, align 4
  %423 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %422) #11
  %424 = ptrtoint %"class.sh::TIntermConstantUnion"* %423 to i64
  %425 = icmp ult %"class.sh::TIntermNode"** %243, %240
  br i1 %425, label %426, label %433

426:                                              ; preds = %418
  %427 = bitcast %"class.sh::TIntermNode"** %243 to i64*
  store i64 %424, i64* %427, align 8
  %428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %243, i64 1
  %429 = ptrtoint %"class.sh::TIntermNode"** %428 to i64
  %430 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %429, i64* %430, align 8
  %431 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %432 = ptrtoint %"class.sh::TIntermNode"** %431 to i64
  br label %645

433:                                              ; preds = %418
  %434 = ptrtoint %"class.sh::TIntermNode"** %243 to i64
  %435 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %436 = bitcast %"class.sh::TVector.42"* %3 to i64*
  %437 = load i64, i64* %436, align 8
  %438 = sub i64 %434, %437
  %439 = ashr exact i64 %438, 3
  %440 = add nsw i64 %439, 1
  %441 = icmp ugt i64 %440, 2305843009213693951
  br i1 %441, label %442, label %444

442:                                              ; preds = %433
  %443 = bitcast %"class.sh::TVector.42"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %443) #12
  unreachable

444:                                              ; preds = %433
  %445 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %446 = sub i64 %241, %437
  %447 = ashr exact i64 %446, 3
  %448 = icmp ult i64 %447, 1152921504606846975
  br i1 %448, label %449, label %454

449:                                              ; preds = %444
  %450 = ashr exact i64 %446, 2
  %451 = icmp ult i64 %450, %440
  %452 = select i1 %451, i64 %440, i64 %450
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %460, label %454

454:                                              ; preds = %449, %444
  %455 = phi i64 [ %452, %449 ], [ 2305843009213693951, %444 ]
  %456 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %457 = shl i64 %455, 3
  %458 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %456, i64 %457) #11
  %459 = bitcast i8* %458 to %"class.sh::TIntermNode"**
  br label %460

460:                                              ; preds = %454, %449
  %461 = phi i64 [ %455, %454 ], [ 0, %449 ]
  %462 = phi %"class.sh::TIntermNode"** [ %459, %454 ], [ null, %449 ]
  %463 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 %439
  %464 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 %461
  %465 = ptrtoint %"class.sh::TIntermNode"** %464 to i64
  %466 = bitcast %"class.sh::TIntermNode"** %463 to i64*
  store i64 %424, i64* %466, align 8
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 1
  %468 = ptrtoint %"class.sh::TIntermNode"** %467 to i64
  %469 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %470 = ptrtoint %"class.sh::TIntermNode"** %469 to i64
  %471 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %472 = icmp eq %"class.sh::TIntermNode"** %471, %469
  br i1 %472, label %642, label %473

473:                                              ; preds = %460
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 -1
  %475 = ptrtoint %"class.sh::TIntermNode"** %474 to i64
  %476 = sub i64 %475, %470
  %477 = lshr i64 %476, 3
  %478 = add nuw nsw i64 %477, 1
  %479 = icmp ult i64 %478, 4
  br i1 %479, label %572, label %480

480:                                              ; preds = %473
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 -1
  %482 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  %483 = sub i64 %482, %470
  %484 = lshr i64 %483, 3
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %439, %485
  %487 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 %486
  %488 = xor i64 %484, -1
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 %488
  %490 = icmp ult %"class.sh::TIntermNode"** %487, %471
  %491 = icmp ult %"class.sh::TIntermNode"** %489, %463
  %492 = and i1 %490, %491
  br i1 %492, label %572, label %493

493:                                              ; preds = %480
  %494 = and i64 %478, 4611686018427387900
  %495 = sub nsw i64 0, %494
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 %495
  %497 = sub nsw i64 0, %494
  %498 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 %497
  %499 = add nsw i64 %494, -4
  %500 = lshr exact i64 %499, 2
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 1
  %503 = icmp eq i64 %499, 0
  br i1 %503, label %548, label %504

504:                                              ; preds = %493
  %505 = sub nuw nsw i64 %501, %502
  %506 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 -1
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 -1
  %508 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 -1
  br label %510

510:                                              ; preds = %510, %504
  %511 = phi i64 [ 0, %504 ], [ %545, %510 ]
  %512 = phi i64 [ %505, %504 ], [ %546, %510 ]
  %513 = sub i64 0, %511
  %514 = sub i64 0, %511
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 %513
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 %514
  %517 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -1
  %518 = bitcast %"class.sh::TIntermNode"** %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 8, !alias.scope !45
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -2
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = bitcast %"class.sh::TIntermNode"** %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 8, !alias.scope !45
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -1
  %525 = bitcast %"class.sh::TIntermNode"** %524 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %525, align 8, !alias.scope !48, !noalias !45
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -2
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 -1
  %528 = bitcast %"class.sh::TIntermNode"** %527 to <2 x i64>*
  store <2 x i64> %523, <2 x i64>* %528, align 8, !alias.scope !48, !noalias !45
  %529 = sub nuw nsw i64 -4, %511
  %530 = sub nuw nsw i64 -4, %511
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 %529
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %509, i64 %530
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 8, !alias.scope !45
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -2
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !45
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %541, align 8, !alias.scope !48, !noalias !45
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -2
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 -1
  %544 = bitcast %"class.sh::TIntermNode"** %543 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %544, align 8, !alias.scope !48, !noalias !45
  %545 = add i64 %511, 8
  %546 = add i64 %512, -2
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %510, !llvm.loop !50

548:                                              ; preds = %510, %493
  %549 = phi i64 [ 0, %493 ], [ %545, %510 ]
  %550 = icmp eq i64 %502, 0
  br i1 %550, label %570, label %551

551:                                              ; preds = %548
  %552 = sub i64 0, %549
  %553 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 -1
  %554 = sub i64 0, %549
  %555 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 -1
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %552
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %559 = bitcast %"class.sh::TIntermNode"** %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8, !alias.scope !45
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, i64 -1
  %563 = bitcast %"class.sh::TIntermNode"** %562 to <2 x i64>*
  %564 = load <2 x i64>, <2 x i64>* %563, align 8, !alias.scope !45
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %566 = bitcast %"class.sh::TIntermNode"** %565 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %566, align 8, !alias.scope !48, !noalias !45
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -2
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 -1
  %569 = bitcast %"class.sh::TIntermNode"** %568 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %569, align 8, !alias.scope !48, !noalias !45
  br label %570

570:                                              ; preds = %548, %551
  %571 = icmp eq i64 %478, %494
  br i1 %571, label %642, label %572

572:                                              ; preds = %570, %480, %473
  %573 = phi %"class.sh::TIntermNode"** [ %463, %480 ], [ %463, %473 ], [ %496, %570 ]
  %574 = phi %"class.sh::TIntermNode"** [ %471, %480 ], [ %471, %473 ], [ %498, %570 ]
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  %577 = sub i64 %576, %470
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %572, %582
  %583 = phi %"class.sh::TIntermNode"** [ %586, %582 ], [ %573, %572 ]
  %584 = phi %"class.sh::TIntermNode"** [ %587, %582 ], [ %574, %572 ]
  %585 = phi i64 [ %591, %582 ], [ %580, %572 ]
  %586 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %583, i64 -1
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %588 = bitcast %"class.sh::TIntermNode"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"class.sh::TIntermNode"** %586 to i64*
  store i64 %589, i64* %590, align 8
  %591 = add i64 %585, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %582, !llvm.loop !51

593:                                              ; preds = %582, %572
  %594 = phi %"class.sh::TIntermNode"** [ undef, %572 ], [ %586, %582 ]
  %595 = phi %"class.sh::TIntermNode"** [ %573, %572 ], [ %586, %582 ]
  %596 = phi %"class.sh::TIntermNode"** [ %574, %572 ], [ %587, %582 ]
  %597 = icmp ult i64 %577, 56
  br i1 %597, label %642, label %598

598:                                              ; preds = %593, %598
  %599 = phi %"class.sh::TIntermNode"** [ %636, %598 ], [ %595, %593 ]
  %600 = phi %"class.sh::TIntermNode"** [ %637, %598 ], [ %596, %593 ]
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %601 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -2
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -3
  %612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -3
  %613 = bitcast %"class.sh::TIntermNode"** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.sh::TIntermNode"** %611 to i64*
  store i64 %614, i64* %615, align 8
  %616 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -4
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -4
  %618 = bitcast %"class.sh::TIntermNode"** %617 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = bitcast %"class.sh::TIntermNode"** %616 to i64*
  store i64 %619, i64* %620, align 8
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -5
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -5
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -6
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -6
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -7
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -7
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -8
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -8
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = icmp eq %"class.sh::TIntermNode"** %637, %469
  br i1 %641, label %642, label %598, !llvm.loop !52

642:                                              ; preds = %593, %598, %570, %460
  %643 = phi %"class.sh::TIntermNode"** [ %463, %460 ], [ %496, %570 ], [ %594, %593 ], [ %636, %598 ]
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  store i64 %644, i64* %436, align 8
  store i64 %468, i64* %435, align 8
  store i64 %465, i64* %445, align 8
  br label %645

645:                                              ; preds = %426, %642
  %646 = phi i64 [ %432, %426 ], [ %465, %642 ]
  %647 = phi %"class.sh::TIntermNode"** [ %431, %426 ], [ %464, %642 ]
  %648 = phi %"class.sh::TIntermNode"** [ %428, %426 ], [ %467, %642 ]
  %649 = getelementptr inbounds %"class.angle::PackedEnumMap.39", %"class.angle::PackedEnumMap.39"* %0, i64 0, i32 0, i32 0, i64 %11, i32 0, i64 3
  %650 = load float, float* %649, align 4
  %651 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %650) #11
  %652 = ptrtoint %"class.sh::TIntermConstantUnion"* %651 to i64
  %653 = icmp ult %"class.sh::TIntermNode"** %648, %647
  br i1 %653, label %654, label %659

654:                                              ; preds = %645
  %655 = bitcast %"class.sh::TIntermNode"** %648 to i64*
  store i64 %652, i64* %655, align 8
  %656 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 1
  %657 = ptrtoint %"class.sh::TIntermNode"** %656 to i64
  %658 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %657, i64* %658, align 8
  br label %871

659:                                              ; preds = %645
  %660 = ptrtoint %"class.sh::TIntermNode"** %648 to i64
  %661 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %662 = bitcast %"class.sh::TVector.42"* %3 to i64*
  %663 = load i64, i64* %662, align 8
  %664 = sub i64 %660, %663
  %665 = ashr exact i64 %664, 3
  %666 = add nsw i64 %665, 1
  %667 = icmp ugt i64 %666, 2305843009213693951
  br i1 %667, label %668, label %670

668:                                              ; preds = %659
  %669 = bitcast %"class.sh::TVector.42"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %669) #12
  unreachable

670:                                              ; preds = %659
  %671 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %672 = sub i64 %646, %663
  %673 = ashr exact i64 %672, 3
  %674 = icmp ult i64 %673, 1152921504606846975
  br i1 %674, label %675, label %680

675:                                              ; preds = %670
  %676 = ashr exact i64 %672, 2
  %677 = icmp ult i64 %676, %666
  %678 = select i1 %677, i64 %666, i64 %676
  %679 = icmp eq i64 %678, 0
  br i1 %679, label %686, label %680

680:                                              ; preds = %675, %670
  %681 = phi i64 [ %678, %675 ], [ 2305843009213693951, %670 ]
  %682 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %683 = shl i64 %681, 3
  %684 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %682, i64 %683) #11
  %685 = bitcast i8* %684 to %"class.sh::TIntermNode"**
  br label %686

686:                                              ; preds = %680, %675
  %687 = phi i64 [ %681, %680 ], [ 0, %675 ]
  %688 = phi %"class.sh::TIntermNode"** [ %685, %680 ], [ null, %675 ]
  %689 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 %665
  %690 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 %687
  %691 = ptrtoint %"class.sh::TIntermNode"** %690 to i64
  %692 = bitcast %"class.sh::TIntermNode"** %689 to i64*
  store i64 %652, i64* %692, align 8
  %693 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 1
  %694 = ptrtoint %"class.sh::TIntermNode"** %693 to i64
  %695 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %696 = ptrtoint %"class.sh::TIntermNode"** %695 to i64
  %697 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %698 = icmp eq %"class.sh::TIntermNode"** %697, %695
  br i1 %698, label %868, label %699

699:                                              ; preds = %686
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 -1
  %701 = ptrtoint %"class.sh::TIntermNode"** %700 to i64
  %702 = sub i64 %701, %696
  %703 = lshr i64 %702, 3
  %704 = add nuw nsw i64 %703, 1
  %705 = icmp ult i64 %704, 4
  br i1 %705, label %798, label %706

706:                                              ; preds = %699
  %707 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 -1
  %708 = ptrtoint %"class.sh::TIntermNode"** %707 to i64
  %709 = sub i64 %708, %696
  %710 = lshr i64 %709, 3
  %711 = xor i64 %710, -1
  %712 = add nsw i64 %665, %711
  %713 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 %712
  %714 = xor i64 %710, -1
  %715 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 %714
  %716 = icmp ult %"class.sh::TIntermNode"** %713, %697
  %717 = icmp ult %"class.sh::TIntermNode"** %715, %689
  %718 = and i1 %716, %717
  br i1 %718, label %798, label %719

719:                                              ; preds = %706
  %720 = and i64 %704, 4611686018427387900
  %721 = sub nsw i64 0, %720
  %722 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 %721
  %723 = sub nsw i64 0, %720
  %724 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 %723
  %725 = add nsw i64 %720, -4
  %726 = lshr exact i64 %725, 2
  %727 = add nuw nsw i64 %726, 1
  %728 = and i64 %727, 1
  %729 = icmp eq i64 %725, 0
  br i1 %729, label %776, label %730

730:                                              ; preds = %719
  %731 = sub nuw nsw i64 %727, %728
  %732 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 -1
  %733 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 -1
  %734 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 -1
  %735 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 -1
  br label %736

736:                                              ; preds = %736, %730
  %737 = phi i64 [ 0, %730 ], [ %771, %736 ]
  %738 = phi i64 [ %731, %730 ], [ %772, %736 ]
  %739 = sub i64 0, %737
  %740 = sub i64 0, %737
  %741 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %732, i64 %739
  %742 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %733, i64 %740
  %743 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -1
  %744 = bitcast %"class.sh::TIntermNode"** %743 to <2 x i64>*
  %745 = load <2 x i64>, <2 x i64>* %744, align 8, !alias.scope !53
  %746 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %742, i64 -2
  %747 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %746, i64 -1
  %748 = bitcast %"class.sh::TIntermNode"** %747 to <2 x i64>*
  %749 = load <2 x i64>, <2 x i64>* %748, align 8, !alias.scope !53
  %750 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 -1
  %751 = bitcast %"class.sh::TIntermNode"** %750 to <2 x i64>*
  store <2 x i64> %745, <2 x i64>* %751, align 8, !alias.scope !56, !noalias !53
  %752 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 -2
  %753 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %752, i64 -1
  %754 = bitcast %"class.sh::TIntermNode"** %753 to <2 x i64>*
  store <2 x i64> %749, <2 x i64>* %754, align 8, !alias.scope !56, !noalias !53
  %755 = sub nuw nsw i64 -4, %737
  %756 = sub nuw nsw i64 -4, %737
  %757 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %734, i64 %755
  %758 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %735, i64 %756
  %759 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %758, i64 -1
  %760 = bitcast %"class.sh::TIntermNode"** %759 to <2 x i64>*
  %761 = load <2 x i64>, <2 x i64>* %760, align 8, !alias.scope !53
  %762 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %758, i64 -2
  %763 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %762, i64 -1
  %764 = bitcast %"class.sh::TIntermNode"** %763 to <2 x i64>*
  %765 = load <2 x i64>, <2 x i64>* %764, align 8, !alias.scope !53
  %766 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -1
  %767 = bitcast %"class.sh::TIntermNode"** %766 to <2 x i64>*
  store <2 x i64> %761, <2 x i64>* %767, align 8, !alias.scope !56, !noalias !53
  %768 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %757, i64 -2
  %769 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %768, i64 -1
  %770 = bitcast %"class.sh::TIntermNode"** %769 to <2 x i64>*
  store <2 x i64> %765, <2 x i64>* %770, align 8, !alias.scope !56, !noalias !53
  %771 = add i64 %737, 8
  %772 = add i64 %738, -2
  %773 = icmp eq i64 %772, 0
  br i1 %773, label %774, label %736, !llvm.loop !58

774:                                              ; preds = %736
  %775 = sub nuw nsw i64 -8, %737
  br label %776

776:                                              ; preds = %774, %719
  %777 = phi i64 [ 0, %719 ], [ %775, %774 ]
  %778 = icmp eq i64 %728, 0
  br i1 %778, label %796, label %779

779:                                              ; preds = %776
  %780 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 -1
  %781 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %697, i64 -1
  %782 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %780, i64 %777
  %783 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %781, i64 %777
  %784 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %783, i64 -1
  %785 = bitcast %"class.sh::TIntermNode"** %784 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 8, !alias.scope !53
  %787 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %783, i64 -2
  %788 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %787, i64 -1
  %789 = bitcast %"class.sh::TIntermNode"** %788 to <2 x i64>*
  %790 = load <2 x i64>, <2 x i64>* %789, align 8, !alias.scope !53
  %791 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %782, i64 -1
  %792 = bitcast %"class.sh::TIntermNode"** %791 to <2 x i64>*
  store <2 x i64> %786, <2 x i64>* %792, align 8, !alias.scope !56, !noalias !53
  %793 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %782, i64 -2
  %794 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %793, i64 -1
  %795 = bitcast %"class.sh::TIntermNode"** %794 to <2 x i64>*
  store <2 x i64> %790, <2 x i64>* %795, align 8, !alias.scope !56, !noalias !53
  br label %796

796:                                              ; preds = %776, %779
  %797 = icmp eq i64 %704, %720
  br i1 %797, label %868, label %798

798:                                              ; preds = %796, %706, %699
  %799 = phi %"class.sh::TIntermNode"** [ %689, %706 ], [ %689, %699 ], [ %722, %796 ]
  %800 = phi %"class.sh::TIntermNode"** [ %697, %706 ], [ %697, %699 ], [ %724, %796 ]
  %801 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %800, i64 -1
  %802 = ptrtoint %"class.sh::TIntermNode"** %801 to i64
  %803 = sub i64 %802, %696
  %804 = lshr i64 %803, 3
  %805 = add nuw nsw i64 %804, 1
  %806 = and i64 %805, 7
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %819, label %808

808:                                              ; preds = %798, %808
  %809 = phi %"class.sh::TIntermNode"** [ %812, %808 ], [ %799, %798 ]
  %810 = phi %"class.sh::TIntermNode"** [ %813, %808 ], [ %800, %798 ]
  %811 = phi i64 [ %817, %808 ], [ %806, %798 ]
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %809, i64 -1
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %810, i64 -1
  %814 = bitcast %"class.sh::TIntermNode"** %813 to i64*
  %815 = load i64, i64* %814, align 8
  %816 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  store i64 %815, i64* %816, align 8
  %817 = add i64 %811, -1
  %818 = icmp eq i64 %817, 0
  br i1 %818, label %819, label %808, !llvm.loop !59

819:                                              ; preds = %808, %798
  %820 = phi %"class.sh::TIntermNode"** [ undef, %798 ], [ %812, %808 ]
  %821 = phi %"class.sh::TIntermNode"** [ %799, %798 ], [ %812, %808 ]
  %822 = phi %"class.sh::TIntermNode"** [ %800, %798 ], [ %813, %808 ]
  %823 = icmp ult i64 %803, 56
  br i1 %823, label %868, label %824

824:                                              ; preds = %819, %824
  %825 = phi %"class.sh::TIntermNode"** [ %862, %824 ], [ %821, %819 ]
  %826 = phi %"class.sh::TIntermNode"** [ %863, %824 ], [ %822, %819 ]
  %827 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -1
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -1
  %829 = bitcast %"class.sh::TIntermNode"** %828 to i64*
  %830 = load i64, i64* %829, align 8
  %831 = bitcast %"class.sh::TIntermNode"** %827 to i64*
  store i64 %830, i64* %831, align 8
  %832 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -2
  %833 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -2
  %834 = bitcast %"class.sh::TIntermNode"** %833 to i64*
  %835 = load i64, i64* %834, align 8
  %836 = bitcast %"class.sh::TIntermNode"** %832 to i64*
  store i64 %835, i64* %836, align 8
  %837 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -3
  %838 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -3
  %839 = bitcast %"class.sh::TIntermNode"** %838 to i64*
  %840 = load i64, i64* %839, align 8
  %841 = bitcast %"class.sh::TIntermNode"** %837 to i64*
  store i64 %840, i64* %841, align 8
  %842 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -4
  %843 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -4
  %844 = bitcast %"class.sh::TIntermNode"** %843 to i64*
  %845 = load i64, i64* %844, align 8
  %846 = bitcast %"class.sh::TIntermNode"** %842 to i64*
  store i64 %845, i64* %846, align 8
  %847 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -5
  %848 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -5
  %849 = bitcast %"class.sh::TIntermNode"** %848 to i64*
  %850 = load i64, i64* %849, align 8
  %851 = bitcast %"class.sh::TIntermNode"** %847 to i64*
  store i64 %850, i64* %851, align 8
  %852 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -6
  %853 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -6
  %854 = bitcast %"class.sh::TIntermNode"** %853 to i64*
  %855 = load i64, i64* %854, align 8
  %856 = bitcast %"class.sh::TIntermNode"** %852 to i64*
  store i64 %855, i64* %856, align 8
  %857 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -7
  %858 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -7
  %859 = bitcast %"class.sh::TIntermNode"** %858 to i64*
  %860 = load i64, i64* %859, align 8
  %861 = bitcast %"class.sh::TIntermNode"** %857 to i64*
  store i64 %860, i64* %861, align 8
  %862 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %825, i64 -8
  %863 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %826, i64 -8
  %864 = bitcast %"class.sh::TIntermNode"** %863 to i64*
  %865 = load i64, i64* %864, align 8
  %866 = bitcast %"class.sh::TIntermNode"** %862 to i64*
  store i64 %865, i64* %866, align 8
  %867 = icmp eq %"class.sh::TIntermNode"** %863, %695
  br i1 %867, label %868, label %824, !llvm.loop !60

868:                                              ; preds = %819, %824, %796, %686
  %869 = phi %"class.sh::TIntermNode"** [ %689, %686 ], [ %722, %796 ], [ %820, %819 ], [ %862, %824 ]
  %870 = ptrtoint %"class.sh::TIntermNode"** %869 to i64
  store i64 %870, i64* %662, align 8
  store i64 %694, i64* %661, align 8
  store i64 %691, i64* %671, align 8
  br label %871

871:                                              ; preds = %654, %868
  %872 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %6, %"class.sh::TVector.42"* nonnull %3) #11
  %873 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %874 = icmp eq %"class.sh::TIntermNode"** %873, null
  br i1 %874, label %878, label %875

875:                                              ; preds = %871
  %876 = ptrtoint %"class.sh::TIntermNode"** %873 to i64
  %877 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %876, i64* %877, align 8
  br label %878

878:                                              ; preds = %871, %875
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #11
  ret %"class.sh::TIntermAggregate"* %872
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermAggregate"* @_ZN2sh12_GLOBAL__N_110CreateVec2EN5angle13PackedEnumMapINS_2vk15SurfaceRotationENSt3__15arrayIfLm2EEELm8EEEfS4_(%"class.angle::PackedEnumMap"* nocapture readonly byval(%"class.angle::PackedEnumMap") align 8, float, i32) unnamed_addr #2 {
  %4 = alloca %"class.sh::TVector.42", align 8
  %5 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %6 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %5, i64 184) #11
  %7 = bitcast i8* %6 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %7, i32 1, i8 zeroext 2, i8 zeroext 1) #11
  %8 = bitcast %"class.sh::TVector.42"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %4, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %4, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TVector.42", %"class.sh::TVector.42"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #11
  %12 = zext i32 %2 to i64
  %13 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 %12, i32 0, i64 0
  %14 = load float, float* %13, align 8
  %15 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %14) #11
  %16 = ptrtoint %"class.sh::TIntermConstantUnion"* %15 to i64
  %17 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %18 = bitcast %"class.sh::TVector.42"* %4 to i64*
  %19 = bitcast %"class.sh::TIntermNode"*** %11 to i64*
  %20 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %21 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %20, i64 8) #11
  %22 = bitcast i8* %21 to %"class.sh::TIntermNode"**
  %23 = getelementptr inbounds i8, i8* %21, i64 8
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast i8* %21 to i64*
  store i64 %16, i64* %25, align 8
  %26 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %27 = ptrtoint %"class.sh::TIntermNode"** %26 to i64
  %28 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %29 = bitcast %"class.sh::TIntermNode"** %28 to i8*
  %30 = icmp eq %"class.sh::TIntermNode"** %28, %26
  br i1 %30, label %204, label %31

31:                                               ; preds = %3
  %32 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 -1
  %33 = ptrtoint %"class.sh::TIntermNode"** %32 to i64
  %34 = sub i64 %33, %27
  %35 = lshr i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = icmp ult i64 %36, 4
  br i1 %37, label %134, label %38

38:                                               ; preds = %31
  %39 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 -1
  %40 = ptrtoint %"class.sh::TIntermNode"** %39 to i64
  %41 = sub i64 %40, %27
  %42 = lshr i64 %41, 3
  %43 = and i64 %41, -8
  %44 = xor i64 %43, -8
  %45 = getelementptr i8, i8* %21, i64 %44
  %46 = xor i64 %42, -1
  %47 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %46
  %48 = bitcast %"class.sh::TIntermNode"** %47 to i8*
  %49 = icmp ult i8* %45, %29
  %50 = icmp ugt i8* %21, %48
  %51 = and i1 %49, %50
  br i1 %51, label %134, label %52

52:                                               ; preds = %38
  %53 = and i64 %36, 4611686018427387900
  %54 = sub nsw i64 0, %53
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, i64 %54
  %56 = sub nsw i64 0, %53
  %57 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %56
  %58 = add nsw i64 %53, -4
  %59 = lshr exact i64 %58, 2
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %58, 0
  br i1 %62, label %109, label %63

63:                                               ; preds = %52
  %64 = sub nuw nsw i64 %60, %61
  %65 = getelementptr i8, i8* %21, i64 -8
  %66 = bitcast i8* %65 to %"class.sh::TIntermNode"**
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 -1
  %68 = getelementptr i8, i8* %21, i64 -8
  %69 = bitcast i8* %68 to %"class.sh::TIntermNode"**
  %70 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 -1
  br label %71

71:                                               ; preds = %71, %63
  %72 = phi i64 [ 0, %63 ], [ %106, %71 ]
  %73 = phi i64 [ %64, %63 ], [ %107, %71 ]
  %74 = sub i64 0, %72
  %75 = sub i64 0, %72
  %76 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 %74
  %77 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 %75
  %78 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %77, i64 -1
  %79 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !61
  %81 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %77, i64 -2
  %82 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 -1
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !61
  %85 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %76, i64 -1
  %86 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %86, align 8, !alias.scope !64, !noalias !61
  %87 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %76, i64 -2
  %88 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 -1
  %89 = bitcast %"class.sh::TIntermNode"** %88 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %89, align 8, !alias.scope !64, !noalias !61
  %90 = sub nuw nsw i64 -4, %72
  %91 = sub nuw nsw i64 -4, %72
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %69, i64 %90
  %93 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %70, i64 %91
  %94 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -1
  %95 = bitcast %"class.sh::TIntermNode"** %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8, !alias.scope !61
  %97 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -2
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 -1
  %99 = bitcast %"class.sh::TIntermNode"** %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8, !alias.scope !61
  %101 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %102, align 8, !alias.scope !64, !noalias !61
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -2
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %105, align 8, !alias.scope !64, !noalias !61
  %106 = add i64 %72, 8
  %107 = add i64 %73, -2
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %71, !llvm.loop !66

109:                                              ; preds = %71, %52
  %110 = phi i64 [ 0, %52 ], [ %106, %71 ]
  %111 = icmp eq i64 %61, 0
  br i1 %111, label %132, label %112

112:                                              ; preds = %109
  %113 = sub i64 0, %110
  %114 = getelementptr i8, i8* %21, i64 -8
  %115 = bitcast i8* %114 to %"class.sh::TIntermNode"**
  %116 = sub i64 0, %110
  %117 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 -1
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 %113
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 %116
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !61
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -2
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 -1
  %125 = bitcast %"class.sh::TIntermNode"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !61
  %127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %128, align 8, !alias.scope !64, !noalias !61
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -2
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %129, i64 -1
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %131, align 8, !alias.scope !64, !noalias !61
  br label %132

132:                                              ; preds = %109, %112
  %133 = icmp eq i64 %36, %53
  br i1 %133, label %204, label %134

134:                                              ; preds = %132, %38, %31
  %135 = phi %"class.sh::TIntermNode"** [ %22, %38 ], [ %22, %31 ], [ %55, %132 ]
  %136 = phi %"class.sh::TIntermNode"** [ %28, %38 ], [ %28, %31 ], [ %57, %132 ]
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -1
  %138 = ptrtoint %"class.sh::TIntermNode"** %137 to i64
  %139 = sub i64 %138, %27
  %140 = lshr i64 %139, 3
  %141 = add nuw nsw i64 %140, 1
  %142 = and i64 %141, 7
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %155, label %144

144:                                              ; preds = %134, %144
  %145 = phi %"class.sh::TIntermNode"** [ %148, %144 ], [ %135, %134 ]
  %146 = phi %"class.sh::TIntermNode"** [ %149, %144 ], [ %136, %134 ]
  %147 = phi i64 [ %153, %144 ], [ %142, %134 ]
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 -1
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.sh::TIntermNode"** %148 to i64*
  store i64 %151, i64* %152, align 8
  %153 = add i64 %147, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %144, !llvm.loop !67

155:                                              ; preds = %144, %134
  %156 = phi %"class.sh::TIntermNode"** [ undef, %134 ], [ %148, %144 ]
  %157 = phi %"class.sh::TIntermNode"** [ %135, %134 ], [ %148, %144 ]
  %158 = phi %"class.sh::TIntermNode"** [ %136, %134 ], [ %149, %144 ]
  %159 = icmp ult i64 %139, 56
  br i1 %159, label %204, label %160

160:                                              ; preds = %155, %160
  %161 = phi %"class.sh::TIntermNode"** [ %198, %160 ], [ %157, %155 ]
  %162 = phi %"class.sh::TIntermNode"** [ %199, %160 ], [ %158, %155 ]
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -1
  %165 = bitcast %"class.sh::TIntermNode"** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  store i64 %166, i64* %167, align 8
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -2
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -2
  %170 = bitcast %"class.sh::TIntermNode"** %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  store i64 %171, i64* %172, align 8
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -3
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -3
  %175 = bitcast %"class.sh::TIntermNode"** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  store i64 %176, i64* %177, align 8
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -4
  %179 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -4
  %180 = bitcast %"class.sh::TIntermNode"** %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  store i64 %181, i64* %182, align 8
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -5
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -5
  %185 = bitcast %"class.sh::TIntermNode"** %184 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  store i64 %186, i64* %187, align 8
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -6
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -6
  %190 = bitcast %"class.sh::TIntermNode"** %189 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  store i64 %191, i64* %192, align 8
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -7
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -7
  %195 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  store i64 %196, i64* %197, align 8
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -8
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -8
  %200 = bitcast %"class.sh::TIntermNode"** %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  store i64 %201, i64* %202, align 8
  %203 = icmp eq %"class.sh::TIntermNode"** %199, %26
  br i1 %203, label %204, label %160, !llvm.loop !68

204:                                              ; preds = %155, %160, %132, %3
  %205 = phi %"class.sh::TIntermNode"** [ %22, %3 ], [ %55, %132 ], [ %156, %155 ], [ %198, %160 ]
  %206 = ptrtoint %"class.sh::TIntermNode"** %205 to i64
  store i64 %206, i64* %18, align 8
  store i64 %24, i64* %17, align 8
  store i64 %24, i64* %19, align 8
  %207 = getelementptr inbounds %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap"* %0, i64 0, i32 0, i32 0, i64 %12, i32 0, i64 1
  %208 = load float, float* %207, align 4
  %209 = fmul float %208, %1
  %210 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float %209) #11
  %211 = ptrtoint %"class.sh::TIntermConstantUnion"* %210 to i64
  %212 = ptrtoint i8* %23 to i64
  %213 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %214 = bitcast %"class.sh::TVector.42"* %4 to i64*
  %215 = sub i64 %212, %206
  %216 = ashr exact i64 %215, 3
  %217 = add nsw i64 %216, 1
  %218 = icmp ugt i64 %217, 2305843009213693951
  br i1 %218, label %219, label %221

219:                                              ; preds = %204
  %220 = bitcast %"class.sh::TVector.42"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %220) #12
  unreachable

221:                                              ; preds = %204
  %222 = ptrtoint i8* %23 to i64
  %223 = bitcast %"class.sh::TIntermNode"*** %11 to i64*
  %224 = sub i64 %222, %206
  %225 = ashr exact i64 %224, 3
  %226 = icmp ult i64 %225, 1152921504606846975
  br i1 %226, label %227, label %232

227:                                              ; preds = %221
  %228 = ashr exact i64 %224, 2
  %229 = icmp ult i64 %228, %217
  %230 = select i1 %229, i64 %217, i64 %228
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %238, label %232

232:                                              ; preds = %227, %221
  %233 = phi i64 [ %230, %227 ], [ 2305843009213693951, %221 ]
  %234 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #11
  %235 = shl i64 %233, 3
  %236 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %234, i64 %235) #11
  %237 = bitcast i8* %236 to %"class.sh::TIntermNode"**
  br label %238

238:                                              ; preds = %232, %227
  %239 = phi i64 [ %233, %232 ], [ 0, %227 ]
  %240 = phi %"class.sh::TIntermNode"** [ %237, %232 ], [ null, %227 ]
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 %216
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 %239
  %243 = ptrtoint %"class.sh::TIntermNode"** %242 to i64
  %244 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  store i64 %211, i64* %244, align 8
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 1
  %246 = ptrtoint %"class.sh::TIntermNode"** %245 to i64
  %247 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %248 = ptrtoint %"class.sh::TIntermNode"** %247 to i64
  %249 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %250 = icmp eq %"class.sh::TIntermNode"** %249, %247
  br i1 %250, label %420, label %251

251:                                              ; preds = %238
  %252 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %253 = ptrtoint %"class.sh::TIntermNode"** %252 to i64
  %254 = sub i64 %253, %248
  %255 = lshr i64 %254, 3
  %256 = add nuw nsw i64 %255, 1
  %257 = icmp ult i64 %256, 4
  br i1 %257, label %350, label %258

258:                                              ; preds = %251
  %259 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %260 = ptrtoint %"class.sh::TIntermNode"** %259 to i64
  %261 = sub i64 %260, %248
  %262 = lshr i64 %261, 3
  %263 = xor i64 %262, -1
  %264 = add nsw i64 %216, %263
  %265 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 %264
  %266 = xor i64 %262, -1
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 %266
  %268 = icmp ult %"class.sh::TIntermNode"** %265, %249
  %269 = icmp ult %"class.sh::TIntermNode"** %267, %241
  %270 = and i1 %268, %269
  br i1 %270, label %350, label %271

271:                                              ; preds = %258
  %272 = and i64 %256, 4611686018427387900
  %273 = sub nsw i64 0, %272
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 %273
  %275 = sub nsw i64 0, %272
  %276 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 %275
  %277 = add nsw i64 %272, -4
  %278 = lshr exact i64 %277, 2
  %279 = add nuw nsw i64 %278, 1
  %280 = and i64 %279, 1
  %281 = icmp eq i64 %277, 0
  br i1 %281, label %328, label %282

282:                                              ; preds = %271
  %283 = sub nuw nsw i64 %279, %280
  %284 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -1
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %286 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -1
  %287 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  br label %288

288:                                              ; preds = %288, %282
  %289 = phi i64 [ 0, %282 ], [ %323, %288 ]
  %290 = phi i64 [ %283, %282 ], [ %324, %288 ]
  %291 = sub i64 0, %289
  %292 = sub i64 0, %289
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %284, i64 %291
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %285, i64 %292
  %295 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %294, i64 -1
  %296 = bitcast %"class.sh::TIntermNode"** %295 to <2 x i64>*
  %297 = load <2 x i64>, <2 x i64>* %296, align 8, !alias.scope !69
  %298 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %294, i64 -2
  %299 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %298, i64 -1
  %300 = bitcast %"class.sh::TIntermNode"** %299 to <2 x i64>*
  %301 = load <2 x i64>, <2 x i64>* %300, align 8, !alias.scope !69
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 -1
  %303 = bitcast %"class.sh::TIntermNode"** %302 to <2 x i64>*
  store <2 x i64> %297, <2 x i64>* %303, align 8, !alias.scope !72, !noalias !69
  %304 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 -2
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %306 = bitcast %"class.sh::TIntermNode"** %305 to <2 x i64>*
  store <2 x i64> %301, <2 x i64>* %306, align 8, !alias.scope !72, !noalias !69
  %307 = sub nuw nsw i64 -4, %289
  %308 = sub nuw nsw i64 -4, %289
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 %307
  %310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 %308
  %311 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 -1
  %312 = bitcast %"class.sh::TIntermNode"** %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 8, !alias.scope !69
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 -2
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = bitcast %"class.sh::TIntermNode"** %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8, !alias.scope !69
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 -1
  %319 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  store <2 x i64> %313, <2 x i64>* %319, align 8, !alias.scope !72, !noalias !69
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %309, i64 -2
  %321 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %320, i64 -1
  %322 = bitcast %"class.sh::TIntermNode"** %321 to <2 x i64>*
  store <2 x i64> %317, <2 x i64>* %322, align 8, !alias.scope !72, !noalias !69
  %323 = add i64 %289, 8
  %324 = add i64 %290, -2
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %326, label %288, !llvm.loop !74

326:                                              ; preds = %288
  %327 = sub nuw nsw i64 -8, %289
  br label %328

328:                                              ; preds = %326, %271
  %329 = phi i64 [ 0, %271 ], [ %327, %326 ]
  %330 = icmp eq i64 %280, 0
  br i1 %330, label %348, label %331

331:                                              ; preds = %328
  %332 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -1
  %333 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 %329
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %333, i64 %329
  %336 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %337 = bitcast %"class.sh::TIntermNode"** %336 to <2 x i64>*
  %338 = load <2 x i64>, <2 x i64>* %337, align 8, !alias.scope !69
  %339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -2
  %340 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %341 = bitcast %"class.sh::TIntermNode"** %340 to <2 x i64>*
  %342 = load <2 x i64>, <2 x i64>* %341, align 8, !alias.scope !69
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %334, i64 -1
  %344 = bitcast %"class.sh::TIntermNode"** %343 to <2 x i64>*
  store <2 x i64> %338, <2 x i64>* %344, align 8, !alias.scope !72, !noalias !69
  %345 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %334, i64 -2
  %346 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 -1
  %347 = bitcast %"class.sh::TIntermNode"** %346 to <2 x i64>*
  store <2 x i64> %342, <2 x i64>* %347, align 8, !alias.scope !72, !noalias !69
  br label %348

348:                                              ; preds = %328, %331
  %349 = icmp eq i64 %256, %272
  br i1 %349, label %420, label %350

350:                                              ; preds = %348, %258, %251
  %351 = phi %"class.sh::TIntermNode"** [ %241, %258 ], [ %241, %251 ], [ %274, %348 ]
  %352 = phi %"class.sh::TIntermNode"** [ %249, %258 ], [ %249, %251 ], [ %276, %348 ]
  %353 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %352, i64 -1
  %354 = ptrtoint %"class.sh::TIntermNode"** %353 to i64
  %355 = sub i64 %354, %248
  %356 = lshr i64 %355, 3
  %357 = add nuw nsw i64 %356, 1
  %358 = and i64 %357, 7
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %371, label %360

360:                                              ; preds = %350, %360
  %361 = phi %"class.sh::TIntermNode"** [ %364, %360 ], [ %351, %350 ]
  %362 = phi %"class.sh::TIntermNode"** [ %365, %360 ], [ %352, %350 ]
  %363 = phi i64 [ %369, %360 ], [ %358, %350 ]
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %361, i64 -1
  %365 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %362, i64 -1
  %366 = bitcast %"class.sh::TIntermNode"** %365 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = bitcast %"class.sh::TIntermNode"** %364 to i64*
  store i64 %367, i64* %368, align 8
  %369 = add i64 %363, -1
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %360, !llvm.loop !75

371:                                              ; preds = %360, %350
  %372 = phi %"class.sh::TIntermNode"** [ undef, %350 ], [ %364, %360 ]
  %373 = phi %"class.sh::TIntermNode"** [ %351, %350 ], [ %364, %360 ]
  %374 = phi %"class.sh::TIntermNode"** [ %352, %350 ], [ %365, %360 ]
  %375 = icmp ult i64 %355, 56
  br i1 %375, label %420, label %376

376:                                              ; preds = %371, %376
  %377 = phi %"class.sh::TIntermNode"** [ %414, %376 ], [ %373, %371 ]
  %378 = phi %"class.sh::TIntermNode"** [ %415, %376 ], [ %374, %371 ]
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -1
  %380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -1
  %381 = bitcast %"class.sh::TIntermNode"** %380 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  store i64 %382, i64* %383, align 8
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -2
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -2
  %386 = bitcast %"class.sh::TIntermNode"** %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %"class.sh::TIntermNode"** %384 to i64*
  store i64 %387, i64* %388, align 8
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -3
  %390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -3
  %391 = bitcast %"class.sh::TIntermNode"** %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = bitcast %"class.sh::TIntermNode"** %389 to i64*
  store i64 %392, i64* %393, align 8
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -4
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -4
  %396 = bitcast %"class.sh::TIntermNode"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -5
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -5
  %401 = bitcast %"class.sh::TIntermNode"** %400 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.sh::TIntermNode"** %399 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -6
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -6
  %406 = bitcast %"class.sh::TIntermNode"** %405 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.sh::TIntermNode"** %404 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -7
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -7
  %411 = bitcast %"class.sh::TIntermNode"** %410 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.sh::TIntermNode"** %409 to i64*
  store i64 %412, i64* %413, align 8
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 -8
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 -8
  %416 = bitcast %"class.sh::TIntermNode"** %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.sh::TIntermNode"** %414 to i64*
  store i64 %417, i64* %418, align 8
  %419 = icmp eq %"class.sh::TIntermNode"** %415, %247
  br i1 %419, label %420, label %376, !llvm.loop !76

420:                                              ; preds = %371, %376, %348, %238
  %421 = phi %"class.sh::TIntermNode"** [ %241, %238 ], [ %274, %348 ], [ %372, %371 ], [ %414, %376 ]
  %422 = ptrtoint %"class.sh::TIntermNode"** %421 to i64
  store i64 %422, i64* %214, align 8
  store i64 %246, i64* %213, align 8
  store i64 %243, i64* %223, align 8
  %423 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184) %7, %"class.sh::TVector.42"* nonnull %4) #11
  %424 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %425 = icmp eq %"class.sh::TIntermNode"** %424, null
  br i1 %425, label %429, label %426

426:                                              ; preds = %420
  %427 = ptrtoint %"class.sh::TIntermNode"** %424 to i64
  %428 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  store i64 %427, i64* %428, align 8
  br label %429

429:                                              ; preds = %420, %426
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #11
  ret %"class.sh::TIntermAggregate"* %423
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #5

declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #8

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #5

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #5

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #5

declare void @_ZNSt3__18ios_base5imbueERKNS_6localeE(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*, %"class.std::__1::locale"* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) unnamed_addr #8

; Function Attrs: nounwind
declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16localeaSERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) local_unnamed_addr #8

declare dereferenceable(24) %"class.std::__1::basic_string.22"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string.22"*, i8*, i64) local_unnamed_addr #5

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string.22"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN2sh16InitializeStreamINSt3__119basic_ostringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v: argument 0"}
!4 = distinct !{!4, !"_ZN2sh16InitializeStreamINSt3__119basic_ostringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !17}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !17}
!27 = distinct !{!27, !19}
!28 = distinct !{!28, !17}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !17}
!35 = distinct !{!35, !19}
!36 = distinct !{!36, !17}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !17}
!43 = distinct !{!43, !19}
!44 = distinct !{!44, !17}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !17}
!51 = distinct !{!51, !19}
!52 = distinct !{!52, !17}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !17}
!59 = distinct !{!59, !19}
!60 = distinct !{!60, !17}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = distinct !{!66, !17}
!67 = distinct !{!67, !19}
!68 = distinct !{!68, !17}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !17}
!75 = distinct !{!75, !19}
!76 = distinct !{!76, !17}
