; ModuleID = '../../third_party/skia/src/effects/imagefilters/SkBlurImageFilter.cpp'
source_filename = "../../third_party/skia/src/effects/imagefilters/SkBlurImageFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%"class.SkImageFilter_Base::CropRect" = type { %struct.SkRect, i32 }
%class.SkSTArray.253 = type { %class.SkAlignedSTStorage.254, %class.SkTArray.255 }
%class.SkAlignedSTStorage.254 = type { [16 x i8] }
%class.SkTArray.255 = type { %class.sk_sp*, i64 }
%class.sk_sp = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.SkImageFilters::CropRect" = type { %struct.SkRect }
%class.SkImageFilter_Base = type <{ %class.SkImageFilter.base, [4 x i8], %class.SkAutoSTArray, i8, [3 x i8], %"class.SkImageFilter_Base::CropRect", i32, [4 x i8] }>
%class.SkImageFilter.base = type { %class.SkFlattenable.base }
%class.SkAutoSTArray = type { i32, %class.sk_sp*, [16 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.sk_sp.15 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.2*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.15*, %class.SkReadBuffer*)* }
%class.sk_sp.2 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkDeserialProcs = type { void (%class.sk_sp.8*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.13*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.2*, i8*, i64, i8*)*, i8* }
%class.sk_sp.8 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.9", [7 x i8] }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%class.sk_sp.13 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.14, i32, i32 }
%class.sk_sp.14 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%"class.SkImageFilter_Base::Common" = type { %"class.SkImageFilter_Base::CropRect", %class.SkSTArray.253 }
%"class.(anonymous namespace)::SkBlurImageFilter" = type { %class.SkImageFilter_Base.base, %struct.SkSize, i32 }
%class.SkImageFilter_Base.base = type <{ %class.SkImageFilter.base, [4 x i8], %class.SkAutoSTArray, i8, [3 x i8], %"class.SkImageFilter_Base::CropRect", i32 }>
%struct.SkSize = type { float, float }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.16*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.16 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.17, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.17 = type { %"struct.std::__1::atomic" }
%class.sk_sp.18 = type { %class.SkSpecialImage* }
%class.SkSpecialImage = type { %class.SkRefCnt.base, %class.SkSurfaceProps, %struct.SkIRect, i32 }
%class.SkSurfaceProps = type { i32, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.skif::Context" = type { %"class.skif::Mapping", %"class.skif::LayerSpace", %class.SkImageFilterCache*, i32, %class.SkColorSpace*, %"class.skif::FilterResult" }
%"class.skif::Mapping" = type { %class.SkMatrix, %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%"class.skif::LayerSpace" = type { %struct.SkIRect }
%class.SkImageFilterCache = type opaque
%"class.skif::FilterResult" = type { %class.sk_sp.18, %"class.skif::LayerSpace.19" }
%"class.skif::LayerSpace.19" = type { %struct.SkIPoint }
%struct.SkIPoint = type { i32, i32 }
%class.GrSurfaceProxyView = type <{ %class.sk_sp.91, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.91 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.92, %class.sk_sp.93, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.129" }
%class.SkNVRefCnt.92 = type { %"struct.std::__1::atomic" }
%class.sk_sp.93 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.94 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.16, i8* }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.94 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.95, void (i8*)*, i8* }
%class.SkNVRefCnt.95 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.96, i32, [4 x i8] }
%union.anon.96 = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.93, i32, i8, [3 x i8] }>
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.126, %class.sk_sp.128, %class.sk_sp.128 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.106, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.117, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.98 }
%class.SkTHashTable.98 = type { i32, i32, %class.SkAutoTArray.99 }
%class.SkAutoTArray.99 = type { %"class.std::__1::unique_ptr.100" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.106 = type { %class.SkTHashTable.107 }
%class.SkTHashTable.107 = type { i32, i32, %class.SkAutoTArray.108 }
%class.SkAutoTArray.108 = type { %"class.std::__1::unique_ptr.109" }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.115, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.115 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.116, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.116 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.117 = type { %class.SkTHashTable.118 }
%class.SkTHashTable.118 = type { i32, i32, %class.SkAutoTArray.119 }
%class.SkAutoTArray.119 = type { %"class.std::__1::unique_ptr.120" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.GrSingleOwner = type { i8 }
%class.sk_sp.126 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.127, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.127 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.128 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.129" = type { %"struct.std::__1::__atomic_base.130" }
%"struct.std::__1::__atomic_base.130" = type { %"struct.std::__1::__atomic_base.131" }
%"struct.std::__1::__atomic_base.131" = type { %"struct.std::__1::__cxx_atomic_impl.132" }
%"struct.std::__1::__cxx_atomic_impl.132" = type { %"struct.std::__1::__cxx_atomic_base_impl.133" }
%"struct.std::__1::__cxx_atomic_base_impl.133" = type { i64 }
%class.GrSwizzle = type { i16 }
%class.SkBitmap = type { %class.sk_sp.246, %class.SkPixmap, %class.sk_sp.247 }
%class.sk_sp.246 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.247 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%class.SkSTArenaAlloc = type { %"struct.std::__1::array.248", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array.248" = type { [1024 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%struct.SkPoint = type { float, float }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.21", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.202" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.20 }
%class.sk_sp.20 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap.32, %class.SkTHashMap.42, %class.SkTArray.53, %class.SkTArray.28, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.24"*, i64 }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.28, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.27 }
%class.sk_sp.27 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap.32 = type { %class.SkTHashTable.33 }
%class.SkTHashTable.33 = type { i32, i32, %class.SkAutoTArray.34 }
%class.SkAutoTArray.34 = type { %"class.std::__1::unique_ptr.35" }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.38" }
%"struct.std::__1::pair.38" = type { i32, i32 }
%class.SkTHashMap.42 = type { %class.SkTHashTable.43 }
%class.SkTHashTable.43 = type { i32, i32, %class.SkAutoTArray.44 }
%class.SkAutoTArray.44 = type { %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.48" }
%"struct.std::__1::pair.48" = type { i32, %class.SkTArray.49* }
%class.SkTArray.49 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.53 = type { %"class.std::__1::unique_ptr.54"*, i64 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.49, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%class.SkTArray.28 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.72 }
%class.SkFibBlockSizes.72 = type { i32 }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type { %class.GrRecordingContext*, %"struct.GrPathRendererChain::Options", %class.sk_sp.79, %class.SkTArray.88, %class.GrOpsTask*, %class.SkSTArray.167, %class.SkSTArray.170, %"class.std::__1::unique_ptr.172", %class.sk_sp.188, %class.GrTokenTracker, i8, i8, %class.SkTArray.189, %class.GrHashMapWithCache }
%"struct.GrPathRendererChain::Options" = type { i8, i32 }
%class.sk_sp.79 = type { %"class.GrBufferAllocPool::CpuBufferCache"* }
%"class.GrBufferAllocPool::CpuBufferCache" = type <{ %class.GrNonAtomicRef, [4 x i8], %"class.std::__1::unique_ptr.80", i32, [4 x i8] }>
%class.GrNonAtomicRef = type { i32 }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.GrBufferAllocPool::CpuBufferCache::Buffer"* }
%"struct.GrBufferAllocPool::CpuBufferCache::Buffer" = type <{ %class.sk_sp.83, i8, [7 x i8] }>
%class.sk_sp.83 = type { %class.GrCpuBuffer* }
%class.GrCpuBuffer = type { %class.GrBuffer, %class.GrNonAtomicRef.84, i8*, i64 }
%class.GrNonAtomicRef.84 = type { i32 }
%class.SkTArray.88 = type { %class.sk_sp.89*, i64 }
%class.sk_sp.89 = type { %class.GrRenderTask* }
%class.GrRenderTask = type { %class.SkRefCnt.base, %class.GrRenderTask*, %class.GrRenderTask*, %class.SkSTArray, %class.SkTArray.134, i32, i32, %class.SkSTArray.141, %class.SkSTArray.141, %class.GrTextureResolveRenderTask* }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.90 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.90 = type { %class.sk_sp.91*, i64 }
%class.SkTArray.134 = type { %class.GrTextureProxy**, i64 }
%class.GrTextureProxy = type { i32 (...)**, i8, i32, i8, i8, %class.GrUniqueKey, %class.GrProxyProvider*, %"class.std::__1::unique_ptr.135", %class.GrSurfaceProxy }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %class.GrDeferredProxyUploader* }
%class.GrDeferredProxyUploader = type opaque
%class.SkSTArray.141 = type { %class.SkAlignedSTStorage.142, %class.SkTArray.143 }
%class.SkAlignedSTStorage.142 = type { [8 x i8] }
%class.SkTArray.143 = type { %class.GrRenderTask**, i64 }
%class.GrTextureResolveRenderTask = type opaque
%class.GrOpsTask = type { %class.GrRenderTask, %class.GrAuditTrail*, i8, %class.GrSwizzle, i32, i32, %"struct.std::__1::array", i32, i8, i32, %struct.SkIRect, i32, i32, %class.SkSTArray.144, %class.sk_sp.164, %class.SkTArray.166, %struct.SkRect, %struct.SkIRect }
%"struct.std::__1::array" = type { [4 x float] }
%class.SkSTArray.144 = type { %class.SkAlignedSTStorage.145, %class.SkTArray.146 }
%class.SkAlignedSTStorage.145 = type { [2000 x i8] }
%class.SkTArray.146 = type { %"class.GrOpsTask::OpChain"*, i64 }
%"class.GrOpsTask::OpChain" = type { %"class.GrOpsTask::OpChain::List", %"class.GrProcessorSet::Analysis", [4 x i8], %"class.GrXferProcessor::DstProxyView", %class.GrAppliedClip*, %struct.SkRect }
%"class.GrOpsTask::OpChain::List" = type { %"class.std::__1::unique_ptr.147", %class.GrOp* }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %class.GrOp* }
%class.GrOp = type { i32 (...)**, %"class.std::__1::unique_ptr.147", %class.GrOp*, i16, i16, i32, %struct.SkRect }
%"class.GrProcessorSet::Analysis" = type { i16, [2 x i8] }
%"class.GrXferProcessor::DstProxyView" = type { %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8] }
%class.GrAppliedClip = type { %class.GrAppliedHardClip, %"class.std::__1::unique_ptr.155" }
%class.GrAppliedHardClip = type <{ %class.GrScissorState, %class.GrWindowRectsState, i32, [4 x i8] }>
%class.GrScissorState = type { %struct.SkISize, %struct.SkIRect }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.153 }
%union.anon.153 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef.154, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef.154 = type { i32 }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.158, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray.158 = type { %class.SkAlignedSTStorage.159, %class.SkTArray.160 }
%class.SkAlignedSTStorage.159 = type { [8 x i8] }
%class.SkTArray.160 = type { %"class.std::__1::unique_ptr.155"*, i64 }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.sk_sp.164 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.165, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.165 = type { %"struct.std::__1::atomic" }
%class.SkTArray.166 = type { %class.GrSurfaceProxy**, i64 }
%class.SkSTArray.167 = type { %class.SkAlignedSTStorage.168, %class.SkTArray.169 }
%class.SkAlignedSTStorage.168 = type { [32 x i8] }
%class.SkTArray.169 = type { i32*, i64 }
%class.SkSTArray.170 = type { %class.SkAlignedSTStorage.171, %class.SkTArray.88 }
%class.SkAlignedSTStorage.171 = type { [32 x i8] }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %class.GrPathRendererChain* }
%class.GrPathRendererChain = type { %class.SkSTArray.175, %"class.std::__1::unique_ptr.179", %class.GrPathRenderer* }
%class.SkSTArray.175 = type { %class.SkAlignedSTStorage.176, %class.SkTArray.177 }
%class.SkAlignedSTStorage.176 = type { [64 x i8] }
%class.SkTArray.177 = type { %class.sk_sp.178*, i64 }
%class.sk_sp.178 = type { %class.GrPathRenderer* }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %class.GrCoverageCountingPathRenderer* }
%class.GrCoverageCountingPathRenderer = type opaque
%class.GrPathRenderer = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.188 = type { %class.GrSoftwarePathRenderer* }
%class.GrSoftwarePathRenderer = type opaque
%class.GrTokenTracker = type { %class.GrDeferredUploadToken, %class.GrDeferredUploadToken }
%class.GrDeferredUploadToken = type { i64 }
%class.SkTArray.189 = type { %class.GrOnFlushCallbackObject**, i64 }
%class.GrOnFlushCallbackObject = type opaque
%class.GrHashMapWithCache = type { %class.SkTHashMap.190, i32, %class.GrRenderTask** }
%class.SkTHashMap.190 = type { %class.SkTHashTable.191 }
%class.SkTHashTable.191 = type { i32, i32, %class.SkAutoTArray.192 }
%class.SkAutoTArray.192 = type { %"class.std::__1::unique_ptr.193" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %class.GrProxyProvider* }
%class.GrSurfaceDrawContext = type { %class.GrSurfaceFillContext.base, %class.SkSurfaceProps, i8, i8, i32, %class.SkGlyphRunListPainter }
%class.GrSurfaceFillContext.base = type <{ %class.GrSurfaceContext, %class.GrSurfaceProxyView, %class.sk_sp.212, i8 }>
%class.GrSurfaceContext = type { i32 (...)**, %class.GrRecordingContext*, %class.GrSurfaceProxyView, %class.GrColorInfo }
%class.GrColorInfo = type { %class.sk_sp.14, %class.sk_sp.211, i32, i32 }
%class.sk_sp.211 = type { %class.GrColorSpaceXform* }
%class.GrColorSpaceXform = type { %class.SkRefCnt.base, %struct.SkColorSpaceXformSteps }
%struct.SkColorSpaceXformSteps = type { %"struct.SkColorSpaceXformSteps::Flags", %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] }
%"struct.SkColorSpaceXformSteps::Flags" = type { i8, i8, i8, i8, i8 }
%class.sk_sp.212 = type { %class.GrOpsTask* }
%class.SkGlyphRunListPainter = type { %class.SkSurfaceProps, %class.SkSurfaceProps, i32, i32, %class.SkStrikeForGPUCacheInterface*, %class.SkDrawableGlyphBuffer, %class.SkSourceGlyphBuffer }
%class.SkStrikeForGPUCacheInterface = type { i32 (...)** }
%class.SkDrawableGlyphBuffer = type { i64, i64, i64, %class.SkAutoTArray.213, %class.SkAutoTMalloc }
%class.SkAutoTArray.213 = type { %"class.std::__1::unique_ptr.214" }
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %class.SkGlyphVariant* }
%class.SkGlyphVariant = type { %union.anon.217 }
%union.anon.217 = type { %class.SkGlyph* }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.218, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp.218 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.219, %struct.SkRect, [4 x i8], %class.SkTDArray.220, %class.SkTDArray.221, %class.SkTDArray.222, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.219 = type { %"struct.std::__1::atomic" }
%class.SkTDArray.220 = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.221 = type { i8*, i32, i32 }
%class.SkTDArray.222 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.223 }
%class.SkTDArray.223 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%struct.SkPackedGlyphID = type { i32 }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.227" }
%"class.std::__1::unique_ptr.227" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %struct.SkPoint* }
%class.SkSourceGlyphBuffer = type { %class.SkZip, i64, i32, i32, %class.SkZip.232, %class.SkSTArray.237, %class.SkSTArray.240 }
%class.SkZip = type { %"class.std::__1::tuple", i64 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.231" }
%"class.std::__1::__tuple_leaf" = type { i16* }
%"class.std::__1::__tuple_leaf.231" = type { %struct.SkPoint* }
%class.SkZip.232 = type { %"class.std::__1::tuple.233", i64 }
%"class.std::__1::tuple.233" = type { %"struct.std::__1::__tuple_impl.234" }
%"struct.std::__1::__tuple_impl.234" = type { %"class.std::__1::__tuple_leaf.235", %"class.std::__1::__tuple_leaf.236" }
%"class.std::__1::__tuple_leaf.235" = type { i16* }
%"class.std::__1::__tuple_leaf.236" = type { %struct.SkPoint* }
%class.SkSTArray.237 = type { %class.SkAlignedSTStorage.238, %class.SkTArray.239 }
%class.SkAlignedSTStorage.238 = type { [8 x i8] }
%class.SkTArray.239 = type { i16*, i64 }
%class.SkSTArray.240 = type { %class.SkAlignedSTStorage.241, %class.SkTArray.242 }
%class.SkAlignedSTStorage.241 = type { [32 x i8] }
%class.SkTArray.242 = type { %struct.SkPoint*, i64 }
%"class.(anonymous namespace)::SkNx" = type { <2 x i64> }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK13SkImageFilter18getFlattenableTypeEv = comdat any

$_ZNK18SkImageFilter_Base19onIsColorFilterNodeEPP13SkColorFilter = comdat any

$_ZNK18SkImageFilter_Base21onCanHandleComplexCTMEv = comdat any

$_ZNK18SkImageFilter_Base23affectsTransparentBlackEv = comdat any

@.str = private unnamed_addr constant [18 x i8] c"SkBlurImageFilter\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"SkBlurImageFilterImpl\00", align 1
@_ZN4skifL11kNoCropRectE = internal unnamed_addr constant %struct.SkRect { float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000 }, align 4
@_ZTVN12_GLOBAL__N_117SkBlurImageFilterE = internal unnamed_addr constant { [19 x i8*] } { [19 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkImageFilter_Base*)* @_ZN18SkImageFilter_BaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::SkBlurImageFilter"*)* @_ZN12_GLOBAL__N_117SkBlurImageFilterD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.15*, %class.SkReadBuffer*)* (%"class.(anonymous namespace)::SkBlurImageFilter"*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter10getFactoryEv to i8*), i8* bitcast (i8* (%"class.(anonymous namespace)::SkBlurImageFilter"*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter11getTypeNameEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::SkBlurImageFilter"*, %class.SkWriteBuffer*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkImageFilter*)* @_ZNK13SkImageFilter18getFlattenableTypeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.(anonymous namespace)::SkBlurImageFilter"*, %struct.SkRect*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter17computeFastBoundsERK6SkRect to i8*), i8* bitcast (void (%class.sk_sp.18*, %"class.(anonymous namespace)::SkBlurImageFilter"*, %"class.skif::Context"*, %struct.SkIPoint*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter13onFilterImageERKN4skif7ContextEP8SkIPoint to i8*), i8* bitcast ({ i64, i64 } (%class.SkImageFilter_Base*, %struct.SkIRect*, %class.SkMatrix*, i32, %struct.SkIRect*)* @_ZNK18SkImageFilter_Base14onFilterBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS1_ to i8*), i8* bitcast ({ i64, i64 } (%"class.(anonymous namespace)::SkBlurImageFilter"*, %struct.SkIRect*, %class.SkMatrix*, i32, %struct.SkIRect*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter18onFilterNodeBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS2_ to i8*), i8* bitcast (i1 (%class.SkImageFilter_Base*, %class.SkColorFilter**)* @_ZNK18SkImageFilter_Base19onIsColorFilterNodeEPP13SkColorFilter to i8*), i8* bitcast (i1 (%class.SkImageFilter_Base*)* @_ZNK18SkImageFilter_Base21onCanHandleComplexCTMEv to i8*), i8* bitcast (i1 (%class.SkImageFilter_Base*)* @_ZNK18SkImageFilter_Base23affectsTransparentBlackEv to i8*), i8* bitcast (void ()* @_ZNK18SkImageFilter_Base13onFilterImageERKN4skif7ContextE to i8*), i8* bitcast ({ i64, i64 } (%class.SkImageFilter_Base*, %"class.skif::Mapping"*, %"class.skif::LayerSpace"*, %"class.skif::LayerSpace"*, i1)* @_ZNK18SkImageFilter_Base21onGetInputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEES8_NS_13VisitChildrenE to i8*), i8* bitcast ({ i64, i64 } (%class.SkImageFilter_Base*, %"class.skif::Mapping"*, %"class.skif::LayerSpace"*)* @_ZNK18SkImageFilter_Base22onGetOutputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEE to i8*)] }, align 8
@__const._ZN12_GLOBAL__N_117SkBlurImageFilter10CreateProcER12SkReadBuffer.common = private unnamed_addr constant { %"class.SkImageFilter_Base::CropRect", [4 x i8], %class.SkSTArray.253 } { %"class.SkImageFilter_Base::CropRect" { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA", %class.SkSTArray.253 { %class.SkAlignedSTStorage.254 { [16 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }, %class.SkTArray.255 { %class.sk_sp* inttoptr (i64 -6148914691236517206 to %class.sk_sp*), i64 -6148914691236517206 } } }, align 8
@switch.table._ZNK12_GLOBAL__N_117SkBlurImageFilter13onFilterImageERKN4skif7ContextEP8SkIPoint = private unnamed_addr constant [21 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 6, i32 8, i32 9, i32 10, i32 0, i32 0, i32 11, i32 15, i32 14, i32 16, i32 7, i32 13, i32 19, i32 17, i32 18, i32 20], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkImageFilters4BlurEff10SkTileMode5sk_spI13SkImageFilterERKNS_8CropRectE(%class.sk_sp* noalias nocapture sret, float, float, i32, %class.sk_sp* nocapture, %"struct.SkImageFilters::CropRect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %7 = alloca %class.sk_sp, align 8
  %8 = fcmp olt float %1, 0x3F30000000000000
  %9 = fcmp olt float %2, 0x3F30000000000000
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %36

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %5, i64 0, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = fcmp une float %13, 0xFFF0000000000000
  br i1 %14, label %29, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds float, float* %12, i64 1
  %17 = load float, float* %16, align 4
  %18 = fcmp une float %17, 0xFFF0000000000000
  br i1 %18, label %29, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds float, float* %12, i64 2
  %21 = load float, float* %20, align 4
  %22 = fcmp une float %21, 0x7FF0000000000000
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds float, float* %12, i64 3
  %25 = load float, float* %24, align 4
  %26 = fcmp oeq float %25, 0x7FF0000000000000
  %27 = icmp eq %"struct.SkImageFilters::CropRect"* %5, null
  %28 = or i1 %27, %26
  br i1 %28, label %31, label %36

29:                                               ; preds = %11, %15, %19
  %30 = icmp eq %"struct.SkImageFilters::CropRect"* %5, null
  br i1 %30, label %31, label %36

31:                                               ; preds = %23, %29
  %32 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %33 = bitcast %class.sk_sp* %4 to i64*
  %34 = load i64, i64* %33, align 8
  store %class.SkImageFilter* null, %class.SkImageFilter** %32, align 8
  %35 = bitcast %class.sk_sp* %0 to i64*
  store i64 %34, i64* %35, align 8
  br label %86

36:                                               ; preds = %23, %29, %6
  %37 = tail call i8* @_Znwm(i64 88) #15
  %38 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %7, i64 0, i32 0
  %39 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %40 = load %class.SkImageFilter*, %class.SkImageFilter** %39, align 8
  %41 = icmp eq %class.SkImageFilter* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %40, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw add i32* %43, i32 1 monotonic
  br label %45

45:                                               ; preds = %36, %42
  store %class.SkImageFilter* %40, %class.SkImageFilter** %38, align 8
  %46 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %5, i64 0, i32 0
  %47 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %5, i64 0, i32 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = fcmp une float %48, 0xFFF0000000000000
  br i1 %49, label %62, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds float, float* %47, i64 1
  %52 = load float, float* %51, align 4
  %53 = fcmp une float %52, 0xFFF0000000000000
  br i1 %53, label %62, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds float, float* %47, i64 2
  %56 = load float, float* %55, align 4
  %57 = fcmp une float %56, 0x7FF0000000000000
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds float, float* %47, i64 3
  %60 = load float, float* %59, align 4
  %61 = fcmp une float %60, 0x7FF0000000000000
  br i1 %61, label %62, label %63

62:                                               ; preds = %58, %54, %50, %45
  br label %63

63:                                               ; preds = %58, %62
  %64 = phi %struct.SkRect* [ %46, %62 ], [ null, %58 ]
  %65 = bitcast i8* %37 to %class.SkImageFilter_Base*
  call void @_ZN18SkImageFilter_BaseC2EPK5sk_spI13SkImageFilterEiPK6SkRect(%class.SkImageFilter_Base* nonnull %65, %class.sk_sp* nonnull %7, i32 1, %struct.SkRect* %64) #16
  %66 = bitcast i8* %37 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN12_GLOBAL__N_117SkBlurImageFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %67 = getelementptr inbounds i8, i8* %37, i64 76
  %68 = bitcast i8* %67 to float*
  store float %1, float* %68, align 4
  %69 = getelementptr inbounds i8, i8* %37, i64 80
  %70 = bitcast i8* %69 to float*
  store float %2, float* %70, align 4
  %71 = getelementptr inbounds i8, i8* %37, i64 84
  %72 = bitcast i8* %71 to i32*
  store i32 %3, i32* %72, align 4
  %73 = bitcast %class.sk_sp* %0 to i8**
  store i8* %37, i8** %73, align 8
  %74 = load %class.SkImageFilter*, %class.SkImageFilter** %38, align 8
  %75 = icmp eq %class.SkImageFilter* %74, null
  br i1 %75, label %86, label %76

76:                                               ; preds = %63
  %77 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %74, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %86

80:                                               ; preds = %76
  %81 = bitcast %class.SkImageFilter* %74 to %class.SkRefCntBase*
  %82 = bitcast %class.SkImageFilter* %74 to void (%class.SkRefCntBase*)***
  %83 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %82, align 8
  %84 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %83, i64 2
  %85 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %84, align 8
  call void %85(%class.SkRefCntBase* nonnull %81) #16
  br label %86

86:                                               ; preds = %80, %76, %63, %31
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z36SkRegisterBlurImageFilterFlattenablev() local_unnamed_addr #0 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.15*, %class.SkReadBuffer*)* nonnull @_ZN12_GLOBAL__N_117SkBlurImageFilter10CreateProcER12SkReadBuffer) #16
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), void (%class.sk_sp.15*, %class.SkReadBuffer*)* nonnull @_ZN12_GLOBAL__N_117SkBlurImageFilter10CreateProcER12SkReadBuffer) #16
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.15*, %class.SkReadBuffer*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_117SkBlurImageFilter10CreateProcER12SkReadBuffer(%class.sk_sp.15* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca %class.sk_sp, align 8
  %4 = alloca %"class.SkImageFilter_Base::Common", align 8
  %5 = alloca %"struct.SkImageFilters::CropRect", align 4
  %6 = bitcast %"class.SkImageFilter_Base::Common"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 bitcast ({ %"class.SkImageFilter_Base::CropRect", [4 x i8], %class.SkSTArray.253 }* @__const._ZN12_GLOBAL__N_117SkBlurImageFilter10CreateProcER12SkReadBuffer.common to i8*), i64 40, i1 false)
  %7 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %4, i64 0, i32 0, i32 1
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %4, i64 0, i32 1, i32 0, i32 0, i64 16
  %9 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %4, i64 0, i32 1, i32 0, i32 0, i64 0
  %10 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %4, i64 0, i32 1, i32 0, i32 0, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = bitcast i8* %8 to i8**
  store i8* %9, i8** %12, align 8
  store i64 17179869184, i64* %11, align 8
  %13 = call zeroext i1 @_ZN18SkImageFilter_Base6Common9unflattenER12SkReadBufferi(%"class.SkImageFilter_Base::Common"* nonnull %4, %class.SkReadBuffer* dereferenceable(136) %1, i32 1) #16
  br i1 %13, label %16, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %15, align 8
  br label %123

16:                                               ; preds = %2
  %17 = call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #16
  %18 = call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #16
  %19 = call i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer* %1) #16
  %20 = icmp ugt i32 %19, 3
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #16
  br label %22

22:                                               ; preds = %16, %21
  %23 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 13
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = select i1 %25, i32 %19, i32 0
  %27 = bitcast i8* %8 to %class.sk_sp**
  %28 = load %class.sk_sp*, %class.sk_sp** %27, align 8, !noalias !3
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %28, i64 0, i32 0
  %30 = load %class.SkImageFilter*, %class.SkImageFilter** %29, align 8, !noalias !3
  %31 = icmp eq %class.SkImageFilter* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %22
  %33 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %30, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 1 monotonic, !noalias !3
  br label %35

35:                                               ; preds = %22, %32
  %36 = ptrtoint %class.SkImageFilter* %30 to i64
  %37 = bitcast %"struct.SkImageFilters::CropRect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #16
  %38 = load i32, i32* %7, align 8
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i8* bitcast (%struct.SkRect* @_ZN4skifL11kNoCropRectE to i8*), i8* %6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %37, i8* align 4 %40, i64 16, i1 false) #16
  %41 = bitcast %class.sk_sp* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = fcmp olt float %17, 0x3F30000000000000
  %43 = fcmp olt float %18, 0x3F30000000000000
  %44 = and i1 %42, %43
  br i1 %44, label %45, label %63

45:                                               ; preds = %35
  %46 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %5, i64 0, i32 0, i32 0
  %47 = load float, float* %46, align 4, !noalias !6
  %48 = fcmp une float %47, 0xFFF0000000000000
  br i1 %48, label %63, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds float, float* %46, i64 1
  %51 = load float, float* %50, align 4, !noalias !6
  %52 = fcmp une float %51, 0xFFF0000000000000
  br i1 %52, label %63, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds float, float* %46, i64 2
  %55 = load float, float* %54, align 4, !noalias !6
  %56 = fcmp une float %55, 0x7FF0000000000000
  br i1 %56, label %63, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds float, float* %46, i64 3
  %59 = load float, float* %58, align 4, !noalias !6
  %60 = fcmp oeq float %59, 0x7FF0000000000000
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  %62 = bitcast %class.sk_sp.15* %0 to i64*
  store i64 %36, i64* %62, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #16
  br label %123

63:                                               ; preds = %45, %49, %53, %57, %35
  %64 = call i8* @_Znwm(i64 88) #15, !noalias !6
  %65 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  br i1 %31, label %69, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %30, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 1 monotonic, !noalias !6
  br label %69

69:                                               ; preds = %66, %63
  store %class.SkImageFilter* %30, %class.SkImageFilter** %65, align 8, !noalias !6
  %70 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %5, i64 0, i32 0
  %71 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %5, i64 0, i32 0, i32 0
  %72 = load float, float* %71, align 4, !noalias !6
  %73 = fcmp une float %72, 0xFFF0000000000000
  br i1 %73, label %86, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds float, float* %71, i64 1
  %76 = load float, float* %75, align 4, !noalias !6
  %77 = fcmp une float %76, 0xFFF0000000000000
  br i1 %77, label %86, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds float, float* %71, i64 2
  %80 = load float, float* %79, align 4, !noalias !6
  %81 = fcmp une float %80, 0x7FF0000000000000
  br i1 %81, label %86, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds float, float* %71, i64 3
  %84 = load float, float* %83, align 4, !noalias !6
  %85 = fcmp une float %84, 0x7FF0000000000000
  br i1 %85, label %86, label %87

86:                                               ; preds = %82, %78, %74, %69
  br label %87

87:                                               ; preds = %86, %82
  %88 = phi %struct.SkRect* [ %70, %86 ], [ null, %82 ]
  %89 = bitcast i8* %64 to %class.SkImageFilter_Base*
  call void @_ZN18SkImageFilter_BaseC2EPK5sk_spI13SkImageFilterEiPK6SkRect(%class.SkImageFilter_Base* nonnull %89, %class.sk_sp* nonnull %3, i32 1, %struct.SkRect* %88) #16, !noalias !6
  %90 = bitcast i8* %64 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN12_GLOBAL__N_117SkBlurImageFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %90, align 8, !noalias !6
  %91 = getelementptr inbounds i8, i8* %64, i64 76
  %92 = bitcast i8* %91 to float*
  store float %17, float* %92, align 4, !noalias !6
  %93 = getelementptr inbounds i8, i8* %64, i64 80
  %94 = bitcast i8* %93 to float*
  store float %18, float* %94, align 4, !noalias !6
  %95 = getelementptr inbounds i8, i8* %64, i64 84
  %96 = bitcast i8* %95 to i32*
  store i32 %26, i32* %96, align 4, !noalias !6
  %97 = ptrtoint i8* %64 to i64
  %98 = load %class.SkImageFilter*, %class.SkImageFilter** %65, align 8, !noalias !6
  %99 = icmp eq %class.SkImageFilter* %98, null
  br i1 %99, label %110, label %100

100:                                              ; preds = %87
  %101 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %98, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = atomicrmw add i32* %101, i32 -1 acq_rel, !noalias !6
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %104, label %110

104:                                              ; preds = %100
  %105 = bitcast %class.SkImageFilter* %98 to %class.SkRefCntBase*
  %106 = bitcast %class.SkImageFilter* %98 to void (%class.SkRefCntBase*)***
  %107 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %106, align 8, !noalias !6
  %108 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %107, i64 2
  %109 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %108, align 8, !noalias !6
  call void %109(%class.SkRefCntBase* nonnull %105) #16, !noalias !6
  br label %110

110:                                              ; preds = %104, %100, %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  %111 = bitcast %class.sk_sp.15* %0 to i64*
  store i64 %97, i64* %111, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #16
  %112 = icmp eq %class.SkImageFilter* %30, null
  br i1 %112, label %123, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %30, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = atomicrmw add i32* %114, i32 -1 acq_rel
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = bitcast %class.SkImageFilter* %30 to %class.SkRefCntBase*
  %119 = bitcast %class.SkImageFilter* %30 to void (%class.SkRefCntBase*)***
  %120 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %119, align 8
  %121 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %120, i64 2
  %122 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %121, align 8
  call void %122(%class.SkRefCntBase* nonnull %118) #16
  br label %123

123:                                              ; preds = %61, %117, %113, %110, %14
  %124 = load i64, i64* %11, align 8
  %125 = and i64 %124, 4294967294
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %129, label %127

127:                                              ; preds = %123
  %128 = bitcast i8* %8 to %class.sk_sp**
  br label %133

129:                                              ; preds = %149, %123
  %130 = phi i64 [ %124, %123 ], [ %151, %149 ]
  %131 = and i64 %130, 1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %157, label %155

133:                                              ; preds = %149, %127
  %134 = phi i64 [ 0, %127 ], [ %150, %149 ]
  %135 = load %class.sk_sp*, %class.sk_sp** %128, align 8
  %136 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %135, i64 %134, i32 0
  %137 = load %class.SkImageFilter*, %class.SkImageFilter** %136, align 8
  %138 = icmp eq %class.SkImageFilter* %137, null
  br i1 %138, label %149, label %139

139:                                              ; preds = %133
  %140 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %137, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = atomicrmw add i32* %140, i32 -1 acq_rel
  %142 = icmp eq i32 %141, 1
  br i1 %142, label %143, label %149

143:                                              ; preds = %139
  %144 = bitcast %class.SkImageFilter* %137 to %class.SkRefCntBase*
  %145 = bitcast %class.SkImageFilter* %137 to void (%class.SkRefCntBase*)***
  %146 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %145, align 8
  %147 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %146, i64 2
  %148 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %147, align 8
  call void %148(%class.SkRefCntBase* nonnull %144) #16
  br label %149

149:                                              ; preds = %143, %139, %133
  %150 = add nuw nsw i64 %134, 1
  %151 = load i64, i64* %11, align 8
  %152 = lshr i64 %151, 1
  %153 = and i64 %152, 2147483647
  %154 = icmp ult i64 %150, %153
  br i1 %154, label %133, label %129

155:                                              ; preds = %129
  %156 = load i8*, i8** %12, align 8
  call void @_Z7sk_freePv(i8* %156) #16
  br label %157

157:                                              ; preds = %129, %155
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN18SkImageFilter_BaseC2EPK5sk_spI13SkImageFilterEiPK6SkRect(%class.SkImageFilter_Base*, %class.sk_sp*, i32, %struct.SkRect*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN18SkImageFilter_BaseD2Ev(%class.SkImageFilter_Base*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_117SkBlurImageFilterD0Ev(%"class.(anonymous namespace)::SkBlurImageFilter"*) unnamed_addr #5 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::SkBlurImageFilter"* %0 to %class.SkImageFilter_Base*
  tail call void @_ZN18SkImageFilter_BaseD2Ev(%class.SkImageFilter_Base* %2) #16
  %3 = bitcast %"class.(anonymous namespace)::SkBlurImageFilter"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #16
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal nonnull void (%class.sk_sp.15*, %class.SkReadBuffer*)* @_ZNK12_GLOBAL__N_117SkBlurImageFilter10getFactoryEv(%"class.(anonymous namespace)::SkBlurImageFilter"* nocapture readnone) unnamed_addr #6 align 2 {
  ret void (%class.sk_sp.15*, %class.SkReadBuffer*)* @_ZN12_GLOBAL__N_117SkBlurImageFilter10CreateProcER12SkReadBuffer
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZNK12_GLOBAL__N_117SkBlurImageFilter11getTypeNameEv(%"class.(anonymous namespace)::SkBlurImageFilter"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_117SkBlurImageFilter7flattenER13SkWriteBuffer(%"class.(anonymous namespace)::SkBlurImageFilter"*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.(anonymous namespace)::SkBlurImageFilter"* %0 to %class.SkImageFilter_Base*
  tail call void @_ZNK18SkImageFilter_Base7flattenER13SkWriteBuffer(%class.SkImageFilter_Base* %3, %class.SkWriteBuffer* dereferenceable(56) %1) #16
  %4 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %0, i64 0, i32 1, i32 0
  %5 = load float, float* %4, align 4
  %6 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %7 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %6, align 8
  %8 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %7, i64 5
  %9 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %8, align 8
  tail call void %9(%class.SkWriteBuffer* %1, float %5) #16
  %10 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %0, i64 0, i32 1, i32 1
  %11 = load float, float* %10, align 4
  %12 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %6, align 8
  %13 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %12, i64 5
  %14 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %13, align 8
  tail call void %14(%class.SkWriteBuffer* %1, float %11) #16
  %15 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %18 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %17, align 8
  %19 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %18, i64 7
  %20 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %19, align 8
  tail call void %20(%class.SkWriteBuffer* %1, i32 %16) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK13SkImageFilter18getFlattenableTypeEv(%class.SkImageFilter*) unnamed_addr #0 comdat align 2 {
  ret i32 3
}

; Function Attrs: nounwind ssp uwtable
define internal { <2 x float>, <2 x float> } @_ZNK12_GLOBAL__N_117SkBlurImageFilter17computeFastBoundsERK6SkRect(%"class.(anonymous namespace)::SkBlurImageFilter"*, %struct.SkRect* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.(anonymous namespace)::SkBlurImageFilter"* %0 to %class.SkImageFilter*
  %4 = tail call %class.SkImageFilter* @_ZNK13SkImageFilter8getInputEi(%class.SkImageFilter* %3, i32 0) #16
  %5 = icmp eq %class.SkImageFilter* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  %7 = tail call %class.SkImageFilter* @_ZNK13SkImageFilter8getInputEi(%class.SkImageFilter* %3, i32 0) #16
  %8 = bitcast %class.SkImageFilter* %7 to { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)***
  %9 = load { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)**, { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)*** %8, align 8
  %10 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)*, { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)** %9, i64 7
  %11 = load { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)*, { <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)** %10, align 8
  %12 = tail call { <2 x float>, <2 x float> } %11(%class.SkImageFilter* %7, %struct.SkRect* dereferenceable(16) %1) #16
  %13 = extractvalue { <2 x float>, <2 x float> } %12, 0
  %14 = extractvalue { <2 x float>, <2 x float> } %12, 1
  br label %21

15:                                               ; preds = %2
  %16 = bitcast %struct.SkRect* %1 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  br label %21

21:                                               ; preds = %15, %6
  %22 = phi <2 x float> [ %20, %15 ], [ %14, %6 ]
  %23 = phi <2 x float> [ %17, %15 ], [ %13, %6 ]
  %24 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %0, i64 0, i32 1, i32 0
  %25 = bitcast float* %24 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fmul <2 x float> %26, <float 3.000000e+00, float 3.000000e+00>
  %28 = fsub <2 x float> %23, %27
  %29 = fadd <2 x float> %22, %27
  %30 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %28, 0
  %31 = insertvalue { <2 x float>, <2 x float> } %30, <2 x float> %29, 1
  ret { <2 x float>, <2 x float> } %31
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_117SkBlurImageFilter13onFilterImageERKN4skif7ContextEP8SkIPoint(%class.sk_sp.18* noalias nocapture sret, %"class.(anonymous namespace)::SkBlurImageFilter"*, %"class.skif::Context"* dereferenceable(136), %struct.SkIPoint* nocapture) unnamed_addr #7 align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca %class.GrSurfaceProxyView, align 8
  %8 = alloca %class.GrSurfaceProxyView, align 8
  %9 = alloca %class.sk_sp.14, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %class.GrSurfaceProxyView, align 8
  %12 = alloca %class.sk_sp.14, align 8
  %13 = alloca %struct.SkIRect, align 8
  %14 = alloca <2 x float>, align 8
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca { i64, i64 }, align 8
  %20 = alloca %class.SkBitmap, align 8
  %21 = alloca %class.SkBitmap, align 8
  %22 = alloca %struct.SkImageInfo, align 8
  %23 = alloca %class.SkBitmap, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca %class.SkBitmap, align 8
  %27 = alloca %class.SkBitmap, align 8
  %28 = alloca %struct.SkImageInfo, align 8
  %29 = alloca %class.SkBitmap, align 8
  %30 = alloca %class.SkSTArenaAlloc, align 8
  %31 = alloca { i64, i64 }, align 8
  %32 = alloca %"class.skif::FilterResult", align 8
  %33 = alloca <2 x i64>, align 16
  %34 = bitcast <2 x i64>* %33 to { i64, i64 }*
  %35 = bitcast <2 x i64>* %33 to %struct.SkIRect*
  %36 = alloca %struct.SkIRect, align 4
  %37 = alloca %"class.skif::Context", align 8
  %38 = alloca <2 x float>, align 8
  %39 = alloca %class.sk_sp.18, align 8
  %40 = alloca %class.sk_sp.18, align 8
  %41 = alloca float, align 4
  %42 = alloca float, align 4
  %43 = alloca float, align 4
  %44 = alloca float, align 4
  %45 = alloca %class.sk_sp.18, align 8
  %46 = bitcast %"class.(anonymous namespace)::SkBlurImageFilter"* %1 to %class.SkImageFilter_Base*
  %47 = bitcast %"class.skif::FilterResult"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #16, !noalias !9
  call void @_ZNK18SkImageFilter_Base11filterInputILN4skif5UsageE0EEENS1_12FilterResultIXT_EEEiRKNS1_7ContextE(%"class.skif::FilterResult"* nonnull sret %32, %class.SkImageFilter_Base* %46, i32 0, %"class.skif::Context"* dereferenceable(136) %2) #16, !noalias !9
  %48 = getelementptr inbounds %"class.skif::FilterResult", %"class.skif::FilterResult"* %32, i64 0, i32 0, i32 0
  %49 = load %class.SkSpecialImage*, %class.SkSpecialImage** %48, align 8, !noalias !12
  %50 = icmp eq %class.SkSpecialImage* %49, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #16, !noalias !9
  %52 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %52, align 8
  br label %1172

53:                                               ; preds = %4
  %54 = getelementptr inbounds %"class.skif::FilterResult", %"class.skif::FilterResult"* %32, i64 0, i32 1, i32 0
  %55 = bitcast %struct.SkIPoint* %54 to i64*
  %56 = load i64, i64* %55, align 8, !noalias !12
  %57 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %49, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw add i32* %57, i32 1 monotonic, !noalias !12
  %59 = ptrtoint %class.SkSpecialImage* %49 to i64
  %60 = atomicrmw add i32* %57, i32 -1 acq_rel, !noalias !9
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %53
  %63 = bitcast %class.SkSpecialImage* %49 to %class.SkRefCntBase*
  %64 = bitcast %class.SkSpecialImage* %49 to void (%class.SkRefCntBase*)***
  %65 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %64, align 8, !noalias !9
  %66 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %65, i64 2
  %67 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %66, align 8, !noalias !9
  call void %67(%class.SkRefCntBase* nonnull %63) #16, !noalias !9
  br label %68

68:                                               ; preds = %53, %62
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #16, !noalias !9
  %69 = bitcast <2 x i64>* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #16
  %70 = bitcast <2 x i64>* %33 to i32*
  %71 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %35, i64 0, i32 1
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i64 0, i32 1
  %73 = bitcast i64* %72 to i32*
  %74 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %35, i64 0, i32 3
  %75 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %49, i64 0, i32 2, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %49, i64 0, i32 2, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = sub i32 %76, %78
  %80 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %49, i64 0, i32 2, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %49, i64 0, i32 2, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = sub i32 %81, %83
  %85 = shl i64 %56, 32
  %86 = ashr exact i64 %85, 32
  %87 = sext i32 %79 to i64
  %88 = add nsw i64 %86, %87
  %89 = icmp slt i64 %88, 2147483647
  %90 = select i1 %89, i64 %88, i64 2147483647
  %91 = icmp sgt i64 %90, -2147483647
  %92 = select i1 %91, i64 %90, i64 -2147483647
  %93 = ashr i64 %56, 32
  %94 = sext i32 %84 to i64
  %95 = add nsw i64 %93, %94
  %96 = icmp slt i64 %95, 2147483647
  %97 = select i1 %96, i64 %95, i64 2147483647
  %98 = icmp sgt i64 %97, -2147483647
  %99 = select i1 %98, i64 %97, i64 -2147483647
  %100 = shl nsw i64 %99, 32
  %101 = and i64 %92, 4294967295
  %102 = or i64 %100, %101
  %103 = getelementptr inbounds <2 x i64>, <2 x i64>* %33, i64 0, i64 0
  store i64 %56, i64* %103, align 16
  store i64 %102, i64* %72, align 8
  %104 = bitcast %struct.SkIRect* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #16
  %105 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %36, i64 0, i32 0
  %106 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %36, i64 0, i32 1
  %107 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %36, i64 0, i32 2
  %108 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %36, i64 0, i32 3
  %109 = bitcast %"class.skif::Context"* %37 to i8*
  %110 = bitcast %struct.SkIRect* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %110, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %109) #16
  call void @_ZNK18SkImageFilter_Base10mapContextERKN4skif7ContextE(%"class.skif::Context"* nonnull sret %37, %class.SkImageFilter_Base* %46, %"class.skif::Context"* dereferenceable(136) %2) #16
  %111 = call zeroext i1 @_ZNK18SkImageFilter_Base13applyCropRectERKN4skif7ContextERK7SkIRectPS4_(%class.SkImageFilter_Base* %46, %"class.skif::Context"* nonnull dereferenceable(136) %37, %struct.SkIRect* nonnull dereferenceable(16) %35, %struct.SkIRect* nonnull %36) #16
  %112 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %37, i64 0, i32 5, i32 0, i32 0
  %113 = load %class.SkSpecialImage*, %class.SkSpecialImage** %112, align 8
  %114 = icmp eq %class.SkSpecialImage* %113, null
  br i1 %114, label %125, label %115

115:                                              ; preds = %68
  %116 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %113, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = atomicrmw add i32* %116, i32 -1 acq_rel
  %118 = icmp eq i32 %117, 1
  br i1 %118, label %119, label %125

119:                                              ; preds = %115
  %120 = bitcast %class.SkSpecialImage* %113 to %class.SkRefCntBase*
  %121 = bitcast %class.SkSpecialImage* %113 to void (%class.SkRefCntBase*)***
  %122 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %121, align 8
  %123 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %122, i64 2
  %124 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %123, align 8
  call void %124(%class.SkRefCntBase* nonnull %120) #16
  br label %125

125:                                              ; preds = %68, %115, %119
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %109) #16
  br i1 %111, label %128, label %126

126:                                              ; preds = %125
  %127 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %127, align 8
  br label %1158

128:                                              ; preds = %125
  %129 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %35, %struct.SkIRect* nonnull dereferenceable(16) %35, %struct.SkIRect* nonnull dereferenceable(16) %36) #16
  br i1 %129, label %132, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %131, align 8
  br label %1158

132:                                              ; preds = %128
  %133 = load i32, i32* %105, align 4
  %134 = load i32, i32* %106, align 4
  %135 = load i32, i32* %70, align 16
  %136 = sext i32 %135 to i64
  %137 = sub i64 0, %85
  %138 = ashr exact i64 %137, 32
  %139 = add nsw i64 %138, %136
  %140 = icmp slt i64 %139, 2147483647
  %141 = select i1 %140, i64 %139, i64 2147483647
  %142 = icmp sgt i64 %141, -2147483647
  %143 = select i1 %142, i64 %141, i64 -2147483647
  %144 = trunc i64 %143 to i32
  store i32 %144, i32* %70, align 16
  %145 = load i32, i32* %71, align 4
  %146 = sext i32 %145 to i64
  %147 = and i64 %56, -4294967296
  %148 = sub i64 0, %147
  %149 = ashr exact i64 %148, 32
  %150 = add nsw i64 %149, %146
  %151 = icmp slt i64 %150, 2147483647
  %152 = select i1 %151, i64 %150, i64 2147483647
  %153 = icmp sgt i64 %152, -2147483647
  %154 = select i1 %153, i64 %152, i64 -2147483647
  %155 = trunc i64 %154 to i32
  store i32 %155, i32* %71, align 4
  %156 = load i32, i32* %73, align 8
  %157 = sext i32 %156 to i64
  %158 = add nsw i64 %138, %157
  %159 = icmp slt i64 %158, 2147483647
  %160 = select i1 %159, i64 %158, i64 2147483647
  %161 = icmp sgt i64 %160, -2147483647
  %162 = select i1 %161, i64 %160, i64 -2147483647
  %163 = trunc i64 %162 to i32
  store i32 %163, i32* %73, align 8
  %164 = load i32, i32* %74, align 4
  %165 = sext i32 %164 to i64
  %166 = add nsw i64 %149, %165
  %167 = icmp slt i64 %166, 2147483647
  %168 = select i1 %167, i64 %166, i64 2147483647
  %169 = icmp sgt i64 %168, -2147483647
  %170 = select i1 %169, i64 %168, i64 -2147483647
  %171 = trunc i64 %170 to i32
  store i32 %171, i32* %74, align 4
  %172 = sext i32 %133 to i64
  %173 = add nsw i64 %138, %172
  %174 = icmp slt i64 %173, 2147483647
  %175 = select i1 %174, i64 %173, i64 2147483647
  %176 = icmp sgt i64 %175, -2147483647
  %177 = select i1 %176, i64 %175, i64 -2147483647
  %178 = trunc i64 %177 to i32
  store i32 %178, i32* %105, align 4
  %179 = sext i32 %134 to i64
  %180 = add nsw i64 %149, %179
  %181 = icmp slt i64 %180, 2147483647
  %182 = select i1 %181, i64 %180, i64 2147483647
  %183 = icmp sgt i64 %182, -2147483647
  %184 = select i1 %183, i64 %182, i64 -2147483647
  %185 = trunc i64 %184 to i32
  store i32 %185, i32* %106, align 4
  %186 = load i32, i32* %107, align 4
  %187 = sext i32 %186 to i64
  %188 = add nsw i64 %138, %187
  %189 = icmp slt i64 %188, 2147483647
  %190 = select i1 %189, i64 %188, i64 2147483647
  %191 = icmp sgt i64 %190, -2147483647
  %192 = select i1 %191, i64 %190, i64 -2147483647
  %193 = trunc i64 %192 to i32
  store i32 %193, i32* %107, align 4
  %194 = load i32, i32* %108, align 4
  %195 = sext i32 %194 to i64
  %196 = add nsw i64 %149, %195
  %197 = icmp slt i64 %196, 2147483647
  %198 = select i1 %197, i64 %196, i64 2147483647
  %199 = icmp sgt i64 %198, -2147483647
  %200 = select i1 %199, i64 %198, i64 -2147483647
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %108, align 4
  %202 = bitcast <2 x float>* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202)
  %203 = getelementptr inbounds <2 x float>, <2 x float>* %38, i64 0, i64 0
  %204 = getelementptr inbounds <2 x float>, <2 x float>* %38, i64 0, i64 1
  %205 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 0, i32 1
  %206 = bitcast <2 x float>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206)
  %207 = bitcast <2 x float>* %14 to %struct.SkPoint*
  %208 = getelementptr inbounds <2 x float>, <2 x float>* %14, i64 0, i64 0
  %209 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %207, i64 0, i32 1
  %210 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %1, i64 0, i32 1, i32 0
  %211 = bitcast float* %210 to i64*
  %212 = load i64, i64* %211, align 4
  %213 = bitcast <2 x float>* %14 to i64*
  store i64 %212, i64* %213, align 8
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %205, %struct.SkPoint* nonnull %207, %struct.SkPoint* nonnull %207, i32 1) #16
  %214 = bitcast float* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %214)
  %215 = load float, float* %208, align 8
  %216 = call float @llvm.fabs.f32(float %215) #16
  store float %216, float* %15, align 4
  %217 = bitcast float* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %217)
  store float 5.320000e+02, float* %16, align 4
  %218 = fcmp ogt float %216, 5.320000e+02
  %219 = select i1 %218, float* %16, float* %15
  %220 = bitcast float* %219 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = bitcast <2 x float>* %14 to i32*
  store i32 %221, i32* %222, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %217)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %214)
  %223 = bitcast float* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223)
  %224 = load float, float* %209, align 4
  %225 = call float @llvm.fabs.f32(float %224) #16
  store float %225, float* %17, align 4
  %226 = bitcast float* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %226)
  store float 5.320000e+02, float* %18, align 4
  %227 = fcmp ogt float %225, 5.320000e+02
  %228 = select i1 %227, float* %18, float* %17
  %229 = bitcast float* %228 to i32*
  %230 = load i32, i32* %229, align 4
  %231 = bitcast float* %209 to i32*
  store i32 %230, i32* %231, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %226)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223)
  %232 = bitcast <2 x float>* %14 to i64*
  %233 = load i64, i64* %232, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206)
  %234 = bitcast <2 x float>* %38 to i64*
  store i64 %233, i64* %234, align 8
  %235 = trunc i64 %233 to i32
  %236 = bitcast i32 %235 to float
  %237 = fcmp olt float %236, 0.000000e+00
  %238 = lshr i64 %233, 32
  %239 = trunc i64 %238 to i32
  %240 = bitcast i32 %239 to float
  %241 = fcmp olt float %240, 0.000000e+00
  %242 = or i1 %237, %241
  br i1 %242, label %243, label %245

243:                                              ; preds = %132
  %244 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %244, align 8
  br label %1156

245:                                              ; preds = %132
  %246 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 5, i32 0, i32 0
  %247 = load %class.SkSpecialImage*, %class.SkSpecialImage** %246, align 8
  %248 = call zeroext i1 @_ZNK14SkSpecialImage15isTextureBackedEv(%class.SkSpecialImage* %247) #16
  br i1 %248, label %249, label %563

249:                                              ; preds = %245
  %250 = bitcast %class.sk_sp.18* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %250) #16
  %251 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 3
  %252 = load i32, i32* %251, align 8
  %253 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 4
  %254 = load %class.SkColorSpace*, %class.SkColorSpace** %253, align 8
  %255 = load %class.SkSpecialImage*, %class.SkSpecialImage** %246, align 8
  %256 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %255, i64 0, i32 1
  call void @_ZN18SkImageFilter_Base17ImageToColorSpaceEP14SkSpecialImage11SkColorTypeP12SkColorSpaceRK14SkSurfaceProps(%class.sk_sp.18* nonnull sret %39, %class.SkSpecialImage* nonnull %49, i32 %252, %class.SkColorSpace* %254, %class.SkSurfaceProps* dereferenceable(8) %256) #16
  %257 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %39, i64 0, i32 0
  %258 = bitcast %class.sk_sp.18* %39 to i64*
  %259 = load i64, i64* %258, align 8
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %257, align 8
  %260 = atomicrmw add i32* %57, i32 -1 acq_rel
  %261 = icmp eq i32 %260, 1
  br i1 %261, label %262, label %268

262:                                              ; preds = %249
  %263 = bitcast %class.SkSpecialImage* %49 to %class.SkRefCntBase*
  %264 = bitcast %class.SkSpecialImage* %49 to void (%class.SkRefCntBase*)***
  %265 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %264, align 8
  %266 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %265, i64 2
  %267 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %266, align 8
  call void %267(%class.SkRefCntBase* nonnull %263) #16
  br label %268

268:                                              ; preds = %249, %262
  %269 = load %class.SkSpecialImage*, %class.SkSpecialImage** %257, align 8
  %270 = icmp eq %class.SkSpecialImage* %269, null
  br i1 %270, label %281, label %271

271:                                              ; preds = %268
  %272 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %269, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = atomicrmw add i32* %272, i32 -1 acq_rel
  %274 = icmp eq i32 %273, 1
  br i1 %274, label %275, label %281

275:                                              ; preds = %271
  %276 = bitcast %class.SkSpecialImage* %269 to %class.SkRefCntBase*
  %277 = bitcast %class.SkSpecialImage* %269 to void (%class.SkRefCntBase*)***
  %278 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %277, align 8
  %279 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %278, i64 2
  %280 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %279, align 8
  call void %280(%class.SkRefCntBase* nonnull %276) #16
  br label %281

281:                                              ; preds = %268, %271, %275
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %250) #16
  %282 = bitcast %class.sk_sp.18* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %282) #16
  %283 = load <2 x float>, <2 x float>* %38, align 8
  %284 = load <2 x i64>, <2 x i64>* %33, align 16
  %285 = bitcast %struct.SkIRect* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %285)
  %286 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %286)
  %287 = bitcast %class.GrSurfaceProxyView* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %287)
  %288 = bitcast %class.sk_sp.14* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %288)
  %289 = bitcast %class.GrSurfaceProxyView* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %289)
  %290 = bitcast %class.sk_sp.14* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %290)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %285, i8* nonnull align 4 %104, i64 16, i1 false)
  %291 = bitcast <2 x i64>* %5 to %struct.SkIRect*
  %292 = bitcast { i64, i64 }* %10 to %struct.SkIRect*
  %293 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store <2 x i64> %284, <2 x i64>* %5, align 16, !noalias !15
  %294 = extractelement <2 x float> %283, i32 0
  %295 = fcmp ole float %294, 0x3F9EB851E0000000
  %296 = extractelement <2 x float> %283, i32 1
  %297 = fcmp ole float %296, 0x3F9EB851E0000000
  %298 = and i1 %295, %297
  br i1 %298, label %299, label %310

299:                                              ; preds = %281
  %300 = extractelement <2 x i64> %284, i32 0
  %301 = lshr i64 %300, 32
  %302 = trunc i64 %301 to i32
  %303 = trunc i64 %300 to i32
  %304 = lshr i64 %56, 32
  %305 = trunc i64 %304 to i32
  %306 = trunc i64 %56 to i32
  %307 = add nsw i32 %303, %306
  %308 = add nsw i32 %302, %305
  %309 = inttoptr i64 %259 to %class.SkSpecialImage*
  call void @_ZNK14SkSpecialImage10makeSubsetERK7SkIRect(%class.sk_sp.18* nonnull sret %40, %class.SkSpecialImage* %309, %struct.SkIRect* nonnull dereferenceable(16) %291) #16
  br label %560

310:                                              ; preds = %281
  %311 = load %class.SkSpecialImage*, %class.SkSpecialImage** %246, align 8, !noalias !15
  %312 = call %class.GrRecordingContext* @_ZNK14SkSpecialImage10getContextEv(%class.SkSpecialImage* %311) #16
  %313 = bitcast %class.GrSurfaceProxyView* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %313) #16, !noalias !15
  %314 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %7, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %313, i8 -86, i64 16, i1 false) #16, !noalias !15
  %315 = inttoptr i64 %259 to %class.SkSpecialImage*
  call void @_ZNK14SkSpecialImage4viewEP18GrRecordingContext(%class.GrSurfaceProxyView* nonnull sret %7, %class.SkSpecialImage* %315, %class.GrRecordingContext* %312) #16
  %316 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %314, align 8, !noalias !15
  %317 = icmp eq %class.GrSurfaceProxy* %316, null
  br i1 %317, label %318, label %320

318:                                              ; preds = %310
  %319 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %40, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %319, align 8, !alias.scope !15
  br label %559

320:                                              ; preds = %310
  %321 = ptrtoint %class.GrSurfaceProxy* %316 to i64
  %322 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %7, i64 0, i32 2, i32 0
  %323 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %7, i64 0, i32 1
  %324 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %315, i64 0, i32 2, i32 0
  %325 = load i32, i32* %324, align 4
  %326 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %315, i64 0, i32 2, i32 1
  %327 = load i32, i32* %326, align 4
  %328 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %13, i64 0, i32 0
  %329 = load i32, i32* %328, align 8, !noalias !15
  %330 = sext i32 %329 to i64
  %331 = sext i32 %325 to i64
  %332 = add nsw i64 %330, %331
  %333 = icmp slt i64 %332, 2147483647
  %334 = select i1 %333, i64 %332, i64 2147483647
  %335 = icmp sgt i64 %334, -2147483647
  %336 = select i1 %335, i64 %334, i64 -2147483647
  %337 = trunc i64 %336 to i32
  store i32 %337, i32* %328, align 8, !noalias !15
  %338 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %13, i64 0, i32 1
  %339 = load i32, i32* %338, align 4, !noalias !15
  %340 = sext i32 %339 to i64
  %341 = sext i32 %327 to i64
  %342 = add nsw i64 %340, %341
  %343 = icmp slt i64 %342, 2147483647
  %344 = select i1 %343, i64 %342, i64 2147483647
  %345 = icmp sgt i64 %344, -2147483647
  %346 = select i1 %345, i64 %344, i64 -2147483647
  %347 = trunc i64 %346 to i32
  store i32 %347, i32* %338, align 4, !noalias !15
  %348 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %13, i64 0, i32 2
  %349 = load i32, i32* %348, align 8, !noalias !15
  %350 = sext i32 %349 to i64
  %351 = add nsw i64 %350, %331
  %352 = icmp slt i64 %351, 2147483647
  %353 = select i1 %352, i64 %351, i64 2147483647
  %354 = icmp sgt i64 %353, -2147483647
  %355 = select i1 %354, i64 %353, i64 -2147483647
  %356 = trunc i64 %355 to i32
  store i32 %356, i32* %348, align 8, !noalias !15
  %357 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %13, i64 0, i32 3
  %358 = load i32, i32* %357, align 4, !noalias !15
  %359 = sext i32 %358 to i64
  %360 = add nsw i64 %359, %341
  %361 = icmp slt i64 %360, 2147483647
  %362 = select i1 %361, i64 %360, i64 2147483647
  %363 = icmp sgt i64 %362, -2147483647
  %364 = select i1 %363, i64 %362, i64 -2147483647
  %365 = trunc i64 %364 to i32
  store i32 %365, i32* %357, align 4, !noalias !15
  %366 = bitcast <2 x i64>* %5 to i32*
  %367 = load i32, i32* %366, align 16, !noalias !15
  %368 = sext i32 %367 to i64
  %369 = add nsw i64 %368, %331
  %370 = icmp slt i64 %369, 2147483647
  %371 = select i1 %370, i64 %369, i64 2147483647
  %372 = icmp sgt i64 %371, -2147483647
  %373 = select i1 %372, i64 %371, i64 -2147483647
  %374 = trunc i64 %373 to i32
  store i32 %374, i32* %366, align 16, !noalias !15
  %375 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %291, i64 0, i32 1
  %376 = load i32, i32* %375, align 4, !noalias !15
  %377 = sext i32 %376 to i64
  %378 = add nsw i64 %377, %341
  %379 = icmp slt i64 %378, 2147483647
  %380 = select i1 %379, i64 %378, i64 2147483647
  %381 = icmp sgt i64 %380, -2147483647
  %382 = select i1 %381, i64 %380, i64 -2147483647
  %383 = trunc i64 %382 to i32
  store i32 %383, i32* %375, align 4, !noalias !15
  %384 = bitcast i64* %293 to i32*
  %385 = load i32, i32* %384, align 8, !noalias !15
  %386 = sext i32 %385 to i64
  %387 = add nsw i64 %386, %331
  %388 = icmp slt i64 %387, 2147483647
  %389 = select i1 %388, i64 %387, i64 2147483647
  %390 = icmp sgt i64 %389, -2147483647
  %391 = select i1 %390, i64 %389, i64 -2147483647
  %392 = trunc i64 %391 to i32
  store i32 %392, i32* %384, align 8, !noalias !15
  %393 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %291, i64 0, i32 3
  %394 = load i32, i32* %393, align 4, !noalias !15
  %395 = sext i32 %394 to i64
  %396 = add nsw i64 %395, %341
  %397 = icmp slt i64 %396, 2147483647
  %398 = select i1 %397, i64 %396, i64 2147483647
  %399 = icmp sgt i64 %398, -2147483647
  %400 = select i1 %399, i64 %398, i64 -2147483647
  %401 = trunc i64 %400 to i32
  store i32 %401, i32* %393, align 4, !noalias !15
  store %class.GrSurfaceProxy* null, %class.GrSurfaceProxy** %314, align 8, !noalias !15
  %402 = bitcast %class.GrSurfaceProxyView* %8 to i64*
  store i64 %321, i64* %402, align 8, !noalias !15
  %403 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %8, i64 0, i32 1
  %404 = load i32, i32* %323, align 8, !noalias !15
  store i32 %404, i32* %403, align 8, !noalias !15
  %405 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %8, i64 0, i32 2, i32 0
  %406 = load i16, i16* %322, align 4, !noalias !15
  store i16 %406, i16* %405, align 4, !noalias !15
  %407 = inttoptr i64 %259 to i32 (%class.SkSpecialImage*)***
  %408 = load i32 (%class.SkSpecialImage*)**, i32 (%class.SkSpecialImage*)*** %407, align 8
  %409 = getelementptr inbounds i32 (%class.SkSpecialImage*)*, i32 (%class.SkSpecialImage*)** %408, i64 4
  %410 = load i32 (%class.SkSpecialImage*)*, i32 (%class.SkSpecialImage*)** %409, align 8
  %411 = call i32 %410(%class.SkSpecialImage* %315) #16
  %412 = icmp ult i32 %411, 21
  br i1 %412, label %414, label %413

413:                                              ; preds = %320
  call void @llvm.trap() #16
  unreachable

414:                                              ; preds = %320
  %415 = sext i32 %411 to i64
  %416 = getelementptr inbounds [21 x i32], [21 x i32]* @switch.table._ZNK12_GLOBAL__N_117SkBlurImageFilter13onFilterImageERKN4skif7ContextEP8SkIPoint, i64 0, i64 %415
  %417 = load i32, i32* %416, align 4
  %418 = load i32 (%class.SkSpecialImage*)**, i32 (%class.SkSpecialImage*)*** %407, align 8
  %419 = getelementptr inbounds i32 (%class.SkSpecialImage*)*, i32 (%class.SkSpecialImage*)** %418, i64 3
  %420 = load i32 (%class.SkSpecialImage*)*, i32 (%class.SkSpecialImage*)** %419, align 8
  %421 = call i32 %420(%class.SkSpecialImage* %315) #16
  %422 = load %class.SkColorSpace*, %class.SkColorSpace** %253, align 8, !noalias !15
  %423 = icmp eq %class.SkColorSpace* %422, null
  br i1 %423, label %430, label %424

424:                                              ; preds = %414
  %425 = call %class.SkColorSpace* @_ZNK14SkSpecialImage13getColorSpaceEv(%class.SkSpecialImage* %315) #16
  %426 = icmp eq %class.SkColorSpace* %425, null
  br i1 %426, label %443, label %427

427:                                              ; preds = %424
  %428 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %425, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %429 = atomicrmw add i32* %428, i32 1 monotonic, !noalias !18
  br label %443

430:                                              ; preds = %414
  %431 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %9, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %431, align 8, !noalias !15
  %432 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %1, i64 0, i32 2
  %433 = load i32, i32* %432, align 4, !noalias !15
  %434 = call %class.GrSurfaceDrawContext* @_ZN14SkGpuBlurUtils12GaussianBlurEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaType5sk_spI12SkColorSpaceE7SkIRectS8_ff10SkTileMode12SkBackingFit(%class.GrRecordingContext* %312, %class.GrSurfaceProxyView* nonnull %8, i32 %417, i32 %421, %class.sk_sp.14* nonnull %9, %struct.SkIRect* nonnull byval(%struct.SkIRect) align 8 %13, %struct.SkIRect* nonnull byval(%struct.SkIRect) align 8 %291, float %294, float %296, i32 %433, i32 0) #16
  %435 = load %class.SkColorSpace*, %class.SkColorSpace** %431, align 8, !noalias !15
  %436 = icmp eq %class.SkColorSpace* %435, null
  br i1 %436, label %456, label %437

437:                                              ; preds = %430
  %438 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %435, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %439 = atomicrmw add i32* %438, i32 -1 acq_rel
  %440 = icmp eq i32 %439, 1
  br i1 %440, label %441, label %456

441:                                              ; preds = %437
  %442 = bitcast %class.SkColorSpace* %435 to i8*
  call void @_ZdlPv(i8* %442) #15
  br label %456

443:                                              ; preds = %427, %424
  %444 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %9, i64 0, i32 0
  store %class.SkColorSpace* %425, %class.SkColorSpace** %444, align 8, !alias.scope !18, !noalias !15
  %445 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %1, i64 0, i32 2
  %446 = load i32, i32* %445, align 4, !noalias !15
  %447 = call %class.GrSurfaceDrawContext* @_ZN14SkGpuBlurUtils12GaussianBlurEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaType5sk_spI12SkColorSpaceE7SkIRectS8_ff10SkTileMode12SkBackingFit(%class.GrRecordingContext* %312, %class.GrSurfaceProxyView* nonnull %8, i32 %417, i32 %421, %class.sk_sp.14* nonnull %9, %struct.SkIRect* nonnull byval(%struct.SkIRect) align 8 %13, %struct.SkIRect* nonnull byval(%struct.SkIRect) align 8 %291, float %294, float %296, i32 %446, i32 0) #16
  %448 = load %class.SkColorSpace*, %class.SkColorSpace** %444, align 8, !noalias !15
  %449 = icmp eq %class.SkColorSpace* %448, null
  br i1 %449, label %456, label %450

450:                                              ; preds = %443
  %451 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %448, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %452 = atomicrmw add i32* %451, i32 -1 acq_rel
  %453 = icmp eq i32 %452, 1
  br i1 %453, label %454, label %456

454:                                              ; preds = %450
  %455 = bitcast %class.SkColorSpace* %448 to i8*
  call void @_ZdlPv(i8* %455) #15
  br label %456

456:                                              ; preds = %454, %450, %443, %441, %437, %430
  %457 = phi %class.GrSurfaceDrawContext* [ %447, %454 ], [ %447, %450 ], [ %447, %443 ], [ %434, %441 ], [ %434, %437 ], [ %434, %430 ]
  %458 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %8, i64 0, i32 0, i32 0
  %459 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %458, align 8, !noalias !15
  %460 = icmp eq %class.GrSurfaceProxy* %459, null
  br i1 %460, label %473, label %461

461:                                              ; preds = %456
  %462 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %459, i64 0, i32 1
  %463 = getelementptr inbounds %class.SkNVRefCnt.92, %class.SkNVRefCnt.92* %462, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %464 = atomicrmw add i32* %463, i32 -1 acq_rel
  %465 = icmp eq i32 %464, 1
  br i1 %465, label %466, label %473

466:                                              ; preds = %461
  %467 = getelementptr inbounds %class.SkNVRefCnt.92, %class.SkNVRefCnt.92* %462, i64 -2
  %468 = bitcast %class.SkNVRefCnt.92* %467 to %class.GrSurfaceProxy*
  %469 = bitcast %class.SkNVRefCnt.92* %467 to void (%class.GrSurfaceProxy*)***
  %470 = load void (%class.GrSurfaceProxy*)**, void (%class.GrSurfaceProxy*)*** %469, align 8
  %471 = getelementptr inbounds void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %470, i64 1
  %472 = load void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %471, align 8
  call void %472(%class.GrSurfaceProxy* nonnull %468) #16
  br label %473

473:                                              ; preds = %466, %461, %456
  %474 = icmp eq %class.GrSurfaceDrawContext* %457, null
  br i1 %474, label %475, label %477

475:                                              ; preds = %473
  %476 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %40, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %476, align 8, !alias.scope !15
  br label %544

477:                                              ; preds = %473
  %478 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %478) #16, !noalias !15
  %479 = load i32, i32* %348, align 8, !noalias !15
  %480 = load i32, i32* %328, align 8, !noalias !15
  %481 = sub i32 %479, %480
  %482 = load i32, i32* %357, align 4, !noalias !15
  %483 = load i32, i32* %338, align 4, !noalias !15
  %484 = sub i32 %482, %483
  %485 = zext i32 %484 to i64
  %486 = shl nuw i64 %485, 32
  %487 = zext i32 %481 to i64
  %488 = or i64 %486, %487
  %489 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  store i64 0, i64* %489, align 8, !noalias !15
  %490 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  store i64 %488, i64* %490, align 8, !noalias !15
  %491 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %11, i64 0, i32 0, i32 0
  %492 = getelementptr inbounds %class.GrSurfaceDrawContext, %class.GrSurfaceDrawContext* %457, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %493 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %492, align 8, !noalias !21
  %494 = icmp eq %class.GrSurfaceProxy* %493, null
  br i1 %494, label %498, label %495

495:                                              ; preds = %477
  %496 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %493, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %497 = atomicrmw add i32* %496, i32 1 monotonic, !noalias !21
  br label %498

498:                                              ; preds = %495, %477
  store %class.GrSurfaceProxy* %493, %class.GrSurfaceProxy** %491, align 8, !alias.scope !21, !noalias !15
  %499 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %11, i64 0, i32 1
  %500 = getelementptr inbounds %class.GrSurfaceDrawContext, %class.GrSurfaceDrawContext* %457, i64 0, i32 0, i32 0, i32 2, i32 1
  %501 = load i32, i32* %500, align 8, !noalias !21
  store i32 %501, i32* %499, align 8, !alias.scope !21, !noalias !15
  %502 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %11, i64 0, i32 2, i32 0
  %503 = getelementptr inbounds %class.GrSurfaceDrawContext, %class.GrSurfaceDrawContext* %457, i64 0, i32 0, i32 0, i32 2, i32 2, i32 0
  %504 = load i16, i16* %503, align 2, !noalias !21
  store i16 %504, i16* %502, align 4, !alias.scope !21, !noalias !15
  %505 = getelementptr inbounds %class.GrSurfaceDrawContext, %class.GrSurfaceDrawContext* %457, i64 0, i32 0, i32 0, i32 3, i32 2
  %506 = load i32, i32* %505, align 8
  %507 = call %class.SkColorSpace* @_ZNK14SkSpecialImage13getColorSpaceEv(%class.SkSpecialImage* %315) #16
  %508 = icmp eq %class.SkColorSpace* %507, null
  br i1 %508, label %512, label %509

509:                                              ; preds = %498
  %510 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %507, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %511 = atomicrmw add i32* %510, i32 1 monotonic, !noalias !24
  br label %512

512:                                              ; preds = %509, %498
  %513 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %12, i64 0, i32 0
  store %class.SkColorSpace* %507, %class.SkColorSpace** %513, align 8, !alias.scope !24, !noalias !15
  %514 = load %class.SkSpecialImage*, %class.SkSpecialImage** %246, align 8, !noalias !15
  %515 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %514, i64 0, i32 1
  call void @_ZN14SkSpecialImage19MakeDeferredFromGpuEP18GrRecordingContextRK7SkIRectj18GrSurfaceProxyView11GrColorType5sk_spI12SkColorSpaceERK14SkSurfaceProps11SkAlphaType(%class.sk_sp.18* nonnull sret %40, %class.GrRecordingContext* %312, %struct.SkIRect* nonnull dereferenceable(16) %292, i32 0, %class.GrSurfaceProxyView* nonnull %11, i32 %506, %class.sk_sp.14* nonnull %12, %class.SkSurfaceProps* dereferenceable(8) %515, i32 2) #16
  %516 = load %class.SkColorSpace*, %class.SkColorSpace** %513, align 8, !noalias !15
  %517 = icmp eq %class.SkColorSpace* %516, null
  br i1 %517, label %524, label %518

518:                                              ; preds = %512
  %519 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %516, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %520 = atomicrmw add i32* %519, i32 -1 acq_rel
  %521 = icmp eq i32 %520, 1
  br i1 %521, label %522, label %524

522:                                              ; preds = %518
  %523 = bitcast %class.SkColorSpace* %516 to i8*
  call void @_ZdlPv(i8* %523) #15
  br label %524

524:                                              ; preds = %522, %518, %512
  %525 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %491, align 8, !noalias !15
  %526 = icmp eq %class.GrSurfaceProxy* %525, null
  br i1 %526, label %539, label %527

527:                                              ; preds = %524
  %528 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %525, i64 0, i32 1
  %529 = getelementptr inbounds %class.SkNVRefCnt.92, %class.SkNVRefCnt.92* %528, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %530 = atomicrmw add i32* %529, i32 -1 acq_rel
  %531 = icmp eq i32 %530, 1
  br i1 %531, label %532, label %539

532:                                              ; preds = %527
  %533 = getelementptr inbounds %class.SkNVRefCnt.92, %class.SkNVRefCnt.92* %528, i64 -2
  %534 = bitcast %class.SkNVRefCnt.92* %533 to %class.GrSurfaceProxy*
  %535 = bitcast %class.SkNVRefCnt.92* %533 to void (%class.GrSurfaceProxy*)***
  %536 = load void (%class.GrSurfaceProxy*)**, void (%class.GrSurfaceProxy*)*** %535, align 8
  %537 = getelementptr inbounds void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %536, i64 1
  %538 = load void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %537, align 8
  call void %538(%class.GrSurfaceProxy* nonnull %534) #16
  br label %539

539:                                              ; preds = %532, %527, %524
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %478) #16, !noalias !15
  %540 = bitcast %class.GrSurfaceDrawContext* %457 to void (%class.GrSurfaceDrawContext*)***
  %541 = load void (%class.GrSurfaceDrawContext*)**, void (%class.GrSurfaceDrawContext*)*** %540, align 8
  %542 = getelementptr inbounds void (%class.GrSurfaceDrawContext*)*, void (%class.GrSurfaceDrawContext*)** %541, i64 1
  %543 = load void (%class.GrSurfaceDrawContext*)*, void (%class.GrSurfaceDrawContext*)** %542, align 8
  call void %543(%class.GrSurfaceDrawContext* nonnull %457) #16
  br label %544

544:                                              ; preds = %539, %475
  %545 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %314, align 8, !noalias !15
  %546 = icmp eq %class.GrSurfaceProxy* %545, null
  br i1 %546, label %559, label %547

547:                                              ; preds = %544
  %548 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %545, i64 0, i32 1
  %549 = getelementptr inbounds %class.SkNVRefCnt.92, %class.SkNVRefCnt.92* %548, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %550 = atomicrmw add i32* %549, i32 -1 acq_rel
  %551 = icmp eq i32 %550, 1
  br i1 %551, label %552, label %559

552:                                              ; preds = %547
  %553 = getelementptr inbounds %class.SkNVRefCnt.92, %class.SkNVRefCnt.92* %548, i64 -2
  %554 = bitcast %class.SkNVRefCnt.92* %553 to %class.GrSurfaceProxy*
  %555 = bitcast %class.SkNVRefCnt.92* %553 to void (%class.GrSurfaceProxy*)***
  %556 = load void (%class.GrSurfaceProxy*)**, void (%class.GrSurfaceProxy*)*** %555, align 8
  %557 = getelementptr inbounds void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %556, i64 1
  %558 = load void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %557, align 8
  call void %558(%class.GrSurfaceProxy* nonnull %554) #16
  br label %559

559:                                              ; preds = %552, %547, %544, %318
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %313) #16, !noalias !15
  br label %560

560:                                              ; preds = %559, %299
  %561 = phi i32 [ %308, %299 ], [ %134, %559 ]
  %562 = phi i32 [ %307, %299 ], [ %133, %559 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %285)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %286)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %287)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %288)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %289)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %290)
  br label %1139

563:                                              ; preds = %245
  %564 = bitcast float* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %564)
  store float 0.000000e+00, float* %41, align 4
  %565 = bitcast float* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %565)
  store float 1.350000e+02, float* %42, align 4
  %566 = fcmp ogt float %236, 1.350000e+02
  %567 = select i1 %566, float* %42, float* %203
  %568 = load float, float* %567, align 4
  %569 = fcmp ogt float %568, 0.000000e+00
  %570 = select i1 %569, float* %567, float* %41
  %571 = bitcast float* %570 to i32*
  %572 = load i32, i32* %571, align 4
  %573 = bitcast <2 x float>* %38 to i32*
  store i32 %572, i32* %573, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %565)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %564)
  %574 = bitcast float* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %574)
  store float 0.000000e+00, float* %43, align 4
  %575 = bitcast float* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %575)
  store float 1.350000e+02, float* %44, align 4
  %576 = fcmp ogt float %240, 1.350000e+02
  %577 = select i1 %576, float* %44, float* %204
  %578 = load float, float* %577, align 4
  %579 = fcmp ogt float %578, 0.000000e+00
  %580 = select i1 %579, float* %577, float* %43
  %581 = bitcast float* %580 to i32*
  %582 = load i32, i32* %581, align 4
  %583 = bitcast float* %204 to i32*
  store i32 %582, i32* %583, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %575)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %574)
  %584 = bitcast %class.sk_sp.18* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %584) #16
  %585 = load <2 x float>, <2 x float>* %38, align 8
  %586 = load i64, i64* %103, align 16
  %587 = load i64, i64* %72, align 8
  %588 = load i32, i32* %105, align 4
  %589 = load i32, i32* %106, align 4
  %590 = load i32, i32* %107, align 4
  %591 = load i32, i32* %108, align 4
  %592 = bitcast { i64, i64 }* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %592)
  %593 = bitcast { i64, i64 }* %25 to %struct.SkIRect*
  %594 = bitcast { i64, i64 }* %31 to %struct.SkIRect*
  %595 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i64 0, i32 0
  store i64 %586, i64* %595, align 8, !noalias !27
  %596 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i64 0, i32 1
  store i64 %587, i64* %596, align 8, !noalias !27
  %597 = extractelement <2 x float> %585, i32 0
  %598 = fpext float %597 to double
  %599 = fcmp ogt double %598, 1.360000e+02
  %600 = select i1 %599, double 1.360000e+02, double %598
  %601 = fcmp ogt double %600, 0.000000e+00
  %602 = select i1 %601, double %600, double 0.000000e+00
  %603 = fmul double %602, 3.000000e+00
  %604 = fmul double %603, 0x40040D931FF62705
  %605 = fmul double %604, 2.500000e-01
  %606 = fadd double %605, 5.000000e-01
  %607 = call double @llvm.floor.f64(double %606) #16
  %608 = fptosi double %607 to i32
  %609 = icmp sgt i32 %608, 1
  %610 = select i1 %609, i32 %608, i32 1
  %611 = extractelement <2 x float> %585, i32 1
  %612 = fpext float %611 to double
  %613 = fcmp ogt double %612, 1.360000e+02
  %614 = select i1 %613, double 1.360000e+02, double %612
  %615 = fcmp ogt double %614, 0.000000e+00
  %616 = select i1 %615, double %614, double 0.000000e+00
  %617 = fmul double %616, 3.000000e+00
  %618 = fmul double %617, 0x40040D931FF62705
  %619 = fmul double %618, 2.500000e-01
  %620 = fadd double %619, 5.000000e-01
  %621 = call double @llvm.floor.f64(double %620) #16
  %622 = fptosi double %621 to i32
  %623 = icmp sgt i32 %622, 1
  %624 = select i1 %623, i32 %622, i32 1
  %625 = icmp slt i32 %610, 2
  %626 = icmp slt i32 %624, 2
  %627 = and i1 %625, %626
  br i1 %627, label %628, label %886

628:                                              ; preds = %563
  %629 = bitcast { i64, i64 }* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %629) #16, !noalias !27
  %630 = bitcast { i64, i64 }* %19 to %struct.SkIRect*
  %631 = bitcast { i64, i64 }* %24 to %struct.SkIRect*
  %632 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i64 0, i32 0
  store i64 %586, i64* %632, align 8, !noalias !30
  %633 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i64 0, i32 1
  store i64 %587, i64* %633, align 8, !noalias !30
  %634 = bitcast %class.SkBitmap* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %634) #16, !noalias !30
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %634, i8 -86, i64 56, i1 false) #16, !noalias !30
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %20) #16, !noalias !33
  %635 = call zeroext i1 @_ZNK14SkSpecialImage11getROPixelsEP8SkBitmap(%class.SkSpecialImage* nonnull %49, %class.SkBitmap* nonnull %20) #16, !noalias !33
  br i1 %635, label %638, label %636

636:                                              ; preds = %628
  %637 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %45, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %637, align 8, !alias.scope !30
  br label %885

638:                                              ; preds = %628
  %639 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 0, i32 1
  %640 = load i32, i32* %639, align 8, !noalias !30
  %641 = icmp eq i32 %640, 6
  br i1 %641, label %644, label %642

642:                                              ; preds = %638
  %643 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %45, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %643, align 8, !alias.scope !30
  br label %885

644:                                              ; preds = %638
  %645 = bitcast %class.SkBitmap* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %645) #16, !noalias !30
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %645, i8 -86, i64 56, i1 false) #16, !noalias !30
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %21) #16, !noalias !33
  %646 = call zeroext i1 @_ZNK8SkBitmap13extractSubsetEPS_RK7SkIRect(%class.SkBitmap* nonnull %20, %class.SkBitmap* nonnull %21, %struct.SkIRect* nonnull dereferenceable(16) %630) #16, !noalias !33
  %647 = sub nsw i32 0, %588
  %648 = sub nsw i32 0, %589
  %649 = bitcast { i64, i64 }* %19 to i32*
  %650 = load i32, i32* %649, align 8, !noalias !30
  %651 = sext i32 %650 to i64
  %652 = sext i32 %647 to i64
  %653 = add nsw i64 %651, %652
  %654 = icmp slt i64 %653, 2147483647
  %655 = select i1 %654, i64 %653, i64 2147483647
  %656 = icmp sgt i64 %655, -2147483647
  %657 = select i1 %656, i64 %655, i64 -2147483647
  %658 = trunc i64 %657 to i32
  store i32 %658, i32* %649, align 8, !noalias !30
  %659 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %630, i64 0, i32 1
  %660 = load i32, i32* %659, align 4, !noalias !30
  %661 = sext i32 %660 to i64
  %662 = sext i32 %648 to i64
  %663 = add nsw i64 %661, %662
  %664 = icmp slt i64 %663, 2147483647
  %665 = select i1 %664, i64 %663, i64 2147483647
  %666 = icmp sgt i64 %665, -2147483647
  %667 = select i1 %666, i64 %665, i64 -2147483647
  %668 = trunc i64 %667 to i32
  store i32 %668, i32* %659, align 4, !noalias !30
  %669 = bitcast i64* %633 to i32*
  %670 = load i32, i32* %669, align 8, !noalias !30
  %671 = sext i32 %670 to i64
  %672 = add nsw i64 %671, %652
  %673 = icmp slt i64 %672, 2147483647
  %674 = select i1 %673, i64 %672, i64 2147483647
  %675 = icmp sgt i64 %674, -2147483647
  %676 = select i1 %675, i64 %674, i64 -2147483647
  %677 = trunc i64 %676 to i32
  store i32 %677, i32* %669, align 8, !noalias !30
  %678 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %630, i64 0, i32 3
  %679 = load i32, i32* %678, align 4, !noalias !30
  %680 = sext i32 %679 to i64
  %681 = add nsw i64 %680, %662
  %682 = icmp slt i64 %681, 2147483647
  %683 = select i1 %682, i64 %681, i64 2147483647
  %684 = icmp sgt i64 %683, -2147483647
  %685 = select i1 %684, i64 %683, i64 -2147483647
  %686 = trunc i64 %685 to i32
  store i32 %686, i32* %678, align 4, !noalias !30
  %687 = sext i32 %588 to i64
  %688 = add nsw i64 %687, %652
  %689 = icmp slt i64 %688, 2147483647
  %690 = select i1 %689, i64 %688, i64 2147483647
  %691 = icmp sgt i64 %690, -2147483647
  %692 = select i1 %691, i64 %690, i64 -2147483647
  %693 = trunc i64 %692 to i32
  %694 = sext i32 %589 to i64
  %695 = add nsw i64 %694, %662
  %696 = icmp slt i64 %695, 2147483647
  %697 = select i1 %696, i64 %695, i64 2147483647
  %698 = icmp sgt i64 %697, -2147483647
  %699 = select i1 %698, i64 %697, i64 -2147483647
  %700 = sext i32 %590 to i64
  %701 = add nsw i64 %700, %652
  %702 = icmp slt i64 %701, 2147483647
  %703 = select i1 %702, i64 %701, i64 2147483647
  %704 = icmp sgt i64 %703, -2147483647
  %705 = select i1 %704, i64 %703, i64 -2147483647
  %706 = trunc i64 %705 to i32
  %707 = sext i32 %591 to i64
  %708 = add nsw i64 %707, %662
  %709 = icmp slt i64 %708, 2147483647
  %710 = select i1 %709, i64 %708, i64 2147483647
  %711 = icmp sgt i64 %710, -2147483647
  %712 = select i1 %711, i64 %710, i64 -2147483647
  %713 = trunc i64 %712 to i32
  %714 = sub i32 %677, %658
  %715 = sub i32 %706, %693
  %716 = sub nsw i64 %712, %699
  %717 = bitcast %struct.SkImageInfo* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %717) #16, !noalias !30
  %718 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 0, i32 0, i32 0
  %719 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 0, i32 1
  %720 = load i32, i32* %639, align 8, !noalias !30
  %721 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 0, i32 2
  %722 = load i32, i32* %721, align 4, !noalias !30
  %723 = zext i32 %720 to i64
  %724 = zext i32 %722 to i64
  %725 = shl nuw i64 %724, 32
  %726 = or i64 %725, %723
  %727 = shl i64 %716, 32
  %728 = zext i32 %715 to i64
  %729 = or i64 %727, %728
  %730 = bitcast %struct.SkImageInfo* %22 to i64*
  store i64 0, i64* %730, align 8, !alias.scope !34, !noalias !30
  %731 = bitcast i32* %719 to i64*
  store i64 %726, i64* %731, align 8, !alias.scope !34, !noalias !30
  %732 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 1
  %733 = bitcast %struct.SkISize* %732 to i64*
  store i64 %729, i64* %733, align 8, !alias.scope !34, !noalias !30
  %734 = bitcast %class.SkBitmap* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %734) #16, !noalias !30
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %734, i8 -86, i64 56, i1 false) #16, !noalias !30
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %23) #16, !noalias !33
  %735 = sext i32 %715 to i64
  %736 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 0
  %737 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %736) #16, !noalias !33
  %738 = sext i32 %737 to i64
  %739 = mul nsw i64 %738, %735
  %740 = icmp ult i64 %739, 2147483648
  %741 = select i1 %740, i64 %739, i64 0
  %742 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap* nonnull %23, %struct.SkImageInfo* nonnull dereferenceable(24) %22, i64 %741) #16, !noalias !33
  br i1 %742, label %745, label %743

743:                                              ; preds = %644
  %744 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %45, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %744, align 8, !alias.scope !30
  br label %875

745:                                              ; preds = %644
  %746 = shl nsw i64 %735, 2
  %747 = load i32, i32* %659, align 4, !noalias !30
  %748 = icmp sgt i32 %747, 0
  br i1 %748, label %749, label %755

749:                                              ; preds = %745
  %750 = icmp eq i32 %715, 0
  %751 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 0
  %752 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 1
  br label %770

753:                                              ; preds = %779
  %754 = trunc i64 %781 to i32
  br label %755

755:                                              ; preds = %753, %745
  %756 = phi i32 [ 0, %745 ], [ %754, %753 ]
  %757 = load i32, i32* %678, align 4, !noalias !30
  %758 = icmp slt i32 %756, %757
  br i1 %758, label %759, label %786

759:                                              ; preds = %755
  %760 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 0
  %761 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 1
  %762 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %21, i64 0, i32 1, i32 0
  %763 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %21, i64 0, i32 1, i32 1
  %764 = sext i32 %714 to i64
  %765 = shl nsw i64 %764, 2
  %766 = zext i32 %756 to i64
  %767 = add i32 %658, %706
  %768 = xor i32 %677, -1
  %769 = add i32 %767, %768
  br label %810

770:                                              ; preds = %779, %749
  %771 = phi i32 [ %747, %749 ], [ %780, %779 ]
  %772 = phi i64 [ 0, %749 ], [ %781, %779 ]
  br i1 %750, label %779, label %773

773:                                              ; preds = %770
  %774 = load i8*, i8** %751, align 8, !noalias !30
  %775 = load i64, i64* %752, align 8, !noalias !30
  %776 = mul i64 %775, %772
  %777 = getelementptr inbounds i8, i8* %774, i64 %776
  call void @llvm.memset.p0i8.i64(i8* align 1 %777, i8 0, i64 %746, i1 false) #16
  %778 = load i32, i32* %659, align 4, !noalias !30
  br label %779

779:                                              ; preds = %773, %770
  %780 = phi i32 [ %771, %770 ], [ %778, %773 ]
  %781 = add nuw nsw i64 %772, 1
  %782 = sext i32 %780 to i64
  %783 = icmp slt i64 %781, %782
  br i1 %783, label %770, label %753

784:                                              ; preds = %852
  %785 = trunc i64 %853 to i32
  br label %786

786:                                              ; preds = %784, %755
  %787 = phi i32 [ %756, %755 ], [ %785, %784 ]
  %788 = icmp slt i32 %787, %713
  br i1 %788, label %789, label %869

789:                                              ; preds = %786
  %790 = icmp eq i32 %715, 0
  %791 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 0
  %792 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 1
  %793 = zext i32 %787 to i64
  %794 = sub i32 %713, %787
  %795 = xor i32 %787, -1
  %796 = and i32 %794, 1
  %797 = icmp eq i32 %796, 0
  br i1 %797, label %806, label %798

798:                                              ; preds = %789
  br i1 %790, label %804, label %799

799:                                              ; preds = %798
  %800 = load i8*, i8** %791, align 8, !noalias !30
  %801 = load i64, i64* %792, align 8, !noalias !30
  %802 = mul i64 %801, %793
  %803 = getelementptr inbounds i8, i8* %800, i64 %802
  call void @llvm.memset.p0i8.i64(i8* align 1 %803, i8 0, i64 %746, i1 false) #16
  br label %804

804:                                              ; preds = %799, %798
  %805 = add nuw nsw i64 %793, 1
  br label %806

806:                                              ; preds = %789, %804
  %807 = phi i64 [ %793, %789 ], [ %805, %804 ]
  %808 = sub i32 0, %713
  %809 = icmp eq i32 %795, %808
  br i1 %809, label %869, label %857

810:                                              ; preds = %852, %759
  %811 = phi i64 [ %766, %759 ], [ %853, %852 ]
  %812 = load i8*, i8** %760, align 8, !noalias !30
  %813 = load i64, i64* %761, align 8, !noalias !30
  %814 = mul i64 %813, %811
  %815 = getelementptr inbounds i8, i8* %812, i64 %814
  %816 = bitcast i8* %815 to i32*
  %817 = load i32, i32* %649, align 8, !noalias !30
  %818 = icmp sgt i32 %817, 0
  br i1 %818, label %819, label %826

819:                                              ; preds = %810, %819
  %820 = phi i32* [ %822, %819 ], [ %816, %810 ]
  %821 = phi i32 [ %823, %819 ], [ 0, %810 ]
  %822 = getelementptr inbounds i32, i32* %820, i64 1
  store i32 0, i32* %820, align 4
  %823 = add nuw nsw i32 %821, 1
  %824 = load i32, i32* %649, align 8, !noalias !30
  %825 = icmp slt i32 %823, %824
  br i1 %825, label %819, label %826

826:                                              ; preds = %819, %810
  %827 = phi i32 [ 0, %810 ], [ %823, %819 ]
  %828 = phi i32* [ %816, %810 ], [ %822, %819 ]
  %829 = phi i32 [ %817, %810 ], [ %824, %819 ]
  %830 = bitcast i32* %828 to i8*
  %831 = sub nsw i32 %827, %829
  %832 = load i32, i32* %659, align 4, !noalias !30
  %833 = trunc i64 %811 to i32
  %834 = sub nsw i32 %833, %832
  %835 = load i8*, i8** %762, align 8, !noalias !30
  %836 = sext i32 %834 to i64
  %837 = load i64, i64* %763, align 8, !noalias !30
  %838 = mul i64 %837, %836
  %839 = getelementptr inbounds i8, i8* %835, i64 %838
  %840 = shl i32 %831, 2
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i8, i8* %839, i64 %841
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %830, i8* align 4 %842, i64 %765, i1 false) #16
  %843 = add nsw i32 %827, %714
  %844 = icmp slt i32 %843, %706
  br i1 %844, label %845, label %852

845:                                              ; preds = %826
  %846 = getelementptr inbounds i32, i32* %828, i64 %764
  %847 = bitcast i32* %846 to i8*
  %848 = sub i32 %769, %827
  %849 = zext i32 %848 to i64
  %850 = shl nuw nsw i64 %849, 2
  %851 = add nuw nsw i64 %850, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %847, i8 0, i64 %851, i1 false) #16
  br label %852

852:                                              ; preds = %845, %826
  %853 = add nuw nsw i64 %811, 1
  %854 = load i32, i32* %678, align 4, !noalias !30
  %855 = trunc i64 %853 to i32
  %856 = icmp sgt i32 %854, %855
  br i1 %856, label %810, label %784

857:                                              ; preds = %806, %1173
  %858 = phi i64 [ %1174, %1173 ], [ %807, %806 ]
  br i1 %790, label %1173, label %859

859:                                              ; preds = %857
  %860 = load i8*, i8** %791, align 8, !noalias !30
  %861 = load i64, i64* %792, align 8, !noalias !30
  %862 = mul i64 %861, %858
  %863 = getelementptr inbounds i8, i8* %860, i64 %862
  call void @llvm.memset.p0i8.i64(i8* align 1 %863, i8 0, i64 %746, i1 false) #16
  %864 = add nuw nsw i64 %858, 1
  %865 = load i8*, i8** %791, align 8, !noalias !30
  %866 = load i64, i64* %792, align 8, !noalias !30
  %867 = mul i64 %866, %864
  %868 = getelementptr inbounds i8, i8* %865, i64 %867
  call void @llvm.memset.p0i8.i64(i8* align 1 %868, i8 0, i64 %746, i1 false) #16
  br label %1173

869:                                              ; preds = %806, %1173, %786
  %870 = bitcast { i64, i64 }* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %870) #16, !noalias !30
  %871 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i64 0, i32 0
  store i64 0, i64* %871, align 8, !noalias !30
  %872 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i64 0, i32 1
  store i64 %729, i64* %872, align 8, !noalias !30
  %873 = load %class.SkSpecialImage*, %class.SkSpecialImage** %246, align 8, !noalias !30
  %874 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %873, i64 0, i32 1
  call void @_ZN14SkSpecialImage14MakeFromRasterERK7SkIRectRK8SkBitmapRK14SkSurfaceProps(%class.sk_sp.18* nonnull sret %45, %struct.SkIRect* nonnull dereferenceable(16) %631, %class.SkBitmap* nonnull dereferenceable(56) %23, %class.SkSurfaceProps* dereferenceable(8) %874) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %870) #16, !noalias !30
  br label %875

875:                                              ; preds = %869, %743
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %23) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %734) #16, !noalias !30
  %876 = load %class.SkColorSpace*, %class.SkColorSpace** %718, align 8, !noalias !30
  %877 = icmp eq %class.SkColorSpace* %876, null
  br i1 %877, label %884, label %878

878:                                              ; preds = %875
  %879 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %876, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %880 = atomicrmw add i32* %879, i32 -1 acq_rel
  %881 = icmp eq i32 %880, 1
  br i1 %881, label %882, label %884

882:                                              ; preds = %878
  %883 = bitcast %class.SkColorSpace* %876 to i8*
  call void @_ZdlPv(i8* %883) #15
  br label %884

884:                                              ; preds = %882, %878, %875
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %717) #16, !noalias !30
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %21) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %645) #16, !noalias !30
  br label %885

885:                                              ; preds = %884, %642, %636
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %20) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %634) #16, !noalias !30
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %629) #16, !noalias !27
  br label %1138

886:                                              ; preds = %563
  %887 = bitcast %class.SkBitmap* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %887) #16, !noalias !27
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %887, i8 -86, i64 56, i1 false) #16, !noalias !27
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %26) #16
  %888 = call zeroext i1 @_ZNK14SkSpecialImage11getROPixelsEP8SkBitmap(%class.SkSpecialImage* nonnull %49, %class.SkBitmap* nonnull %26) #16
  br i1 %888, label %891, label %889

889:                                              ; preds = %886
  %890 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %45, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %890, align 8, !alias.scope !27
  br label %1137

891:                                              ; preds = %886
  %892 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %26, i64 0, i32 1, i32 2, i32 0, i32 1
  %893 = load i32, i32* %892, align 8, !noalias !27
  %894 = icmp eq i32 %893, 6
  br i1 %894, label %897, label %895

895:                                              ; preds = %891
  %896 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %45, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %896, align 8, !alias.scope !27
  br label %1137

897:                                              ; preds = %891
  %898 = bitcast %class.SkBitmap* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %898) #16, !noalias !27
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %898, i8 -86, i64 56, i1 false) #16, !noalias !27
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %27) #16
  %899 = call zeroext i1 @_ZNK8SkBitmap13extractSubsetEPS_RK7SkIRect(%class.SkBitmap* nonnull %26, %class.SkBitmap* nonnull %27, %struct.SkIRect* nonnull dereferenceable(16) %593) #16
  %900 = sub nsw i32 0, %588
  %901 = sub nsw i32 0, %589
  %902 = bitcast { i64, i64 }* %25 to i32*
  %903 = load i32, i32* %902, align 8, !noalias !27
  %904 = sext i32 %903 to i64
  %905 = sext i32 %900 to i64
  %906 = add nsw i64 %904, %905
  %907 = icmp slt i64 %906, 2147483647
  %908 = select i1 %907, i64 %906, i64 2147483647
  %909 = icmp sgt i64 %908, -2147483647
  %910 = select i1 %909, i64 %908, i64 -2147483647
  %911 = trunc i64 %910 to i32
  store i32 %911, i32* %902, align 8, !noalias !27
  %912 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %593, i64 0, i32 1
  %913 = load i32, i32* %912, align 4, !noalias !27
  %914 = sext i32 %913 to i64
  %915 = sext i32 %901 to i64
  %916 = add nsw i64 %914, %915
  %917 = icmp slt i64 %916, 2147483647
  %918 = select i1 %917, i64 %916, i64 2147483647
  %919 = icmp sgt i64 %918, -2147483647
  %920 = select i1 %919, i64 %918, i64 -2147483647
  %921 = trunc i64 %920 to i32
  store i32 %921, i32* %912, align 4, !noalias !27
  %922 = bitcast i64* %596 to i32*
  %923 = load i32, i32* %922, align 8, !noalias !27
  %924 = sext i32 %923 to i64
  %925 = add nsw i64 %924, %905
  %926 = icmp slt i64 %925, 2147483647
  %927 = select i1 %926, i64 %925, i64 2147483647
  %928 = icmp sgt i64 %927, -2147483647
  %929 = select i1 %928, i64 %927, i64 -2147483647
  %930 = trunc i64 %929 to i32
  store i32 %930, i32* %922, align 8, !noalias !27
  %931 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %593, i64 0, i32 3
  %932 = load i32, i32* %931, align 4, !noalias !27
  %933 = sext i32 %932 to i64
  %934 = add nsw i64 %933, %915
  %935 = icmp slt i64 %934, 2147483647
  %936 = select i1 %935, i64 %934, i64 2147483647
  %937 = icmp sgt i64 %936, -2147483647
  %938 = select i1 %937, i64 %936, i64 -2147483647
  %939 = trunc i64 %938 to i32
  store i32 %939, i32* %931, align 4, !noalias !27
  %940 = sext i32 %588 to i64
  %941 = add nsw i64 %940, %905
  %942 = icmp slt i64 %941, 2147483647
  %943 = select i1 %942, i64 %941, i64 2147483647
  %944 = icmp sgt i64 %943, -2147483647
  %945 = select i1 %944, i64 %943, i64 -2147483647
  %946 = trunc i64 %945 to i32
  %947 = sext i32 %589 to i64
  %948 = add nsw i64 %947, %915
  %949 = icmp slt i64 %948, 2147483647
  %950 = select i1 %949, i64 %948, i64 2147483647
  %951 = icmp sgt i64 %950, -2147483647
  %952 = select i1 %951, i64 %950, i64 -2147483647
  %953 = trunc i64 %952 to i32
  %954 = sext i32 %590 to i64
  %955 = add nsw i64 %954, %905
  %956 = icmp slt i64 %955, 2147483647
  %957 = select i1 %956, i64 %955, i64 2147483647
  %958 = icmp sgt i64 %957, -2147483647
  %959 = select i1 %958, i64 %957, i64 -2147483647
  %960 = trunc i64 %959 to i32
  %961 = sext i32 %591 to i64
  %962 = add nsw i64 %961, %915
  %963 = icmp slt i64 %962, 2147483647
  %964 = select i1 %963, i64 %962, i64 2147483647
  %965 = icmp sgt i64 %964, -2147483647
  %966 = select i1 %965, i64 %964, i64 -2147483647
  %967 = trunc i64 %966 to i32
  %968 = sub i32 %930, %911
  %969 = sub i32 %939, %921
  %970 = sub i32 %960, %946
  %971 = sub nsw i64 %966, %952
  %972 = bitcast %struct.SkImageInfo* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %972) #16, !noalias !27
  %973 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %28, i64 0, i32 0, i32 0, i32 0
  %974 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %28, i64 0, i32 0, i32 1
  %975 = shl i64 %971, 32
  %976 = zext i32 %970 to i64
  %977 = or i64 %975, %976
  %978 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %26, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %972, i8 -86, i64 24, i1 false) #16, !noalias !27
  %979 = load %class.SkColorSpace*, %class.SkColorSpace** %978, align 8, !noalias !37
  %980 = icmp eq %class.SkColorSpace* %979, null
  br i1 %980, label %984, label %981

981:                                              ; preds = %897
  %982 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %979, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %983 = atomicrmw add i32* %982, i32 1 monotonic, !noalias !42
  br label %984

984:                                              ; preds = %981, %897
  store %class.SkColorSpace* %979, %class.SkColorSpace** %973, align 8, !alias.scope !42, !noalias !27
  %985 = bitcast i32* %892 to i64*
  %986 = bitcast i32* %974 to i64*
  %987 = load i64, i64* %985, align 8, !noalias !37
  store i64 %987, i64* %986, align 8, !alias.scope !42, !noalias !27
  %988 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %28, i64 0, i32 1
  %989 = bitcast %struct.SkISize* %988 to i64*
  store i64 %977, i64* %989, align 8, !alias.scope !42, !noalias !27
  %990 = bitcast %class.SkBitmap* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %990) #16, !noalias !27
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %990, i8 -86, i64 56, i1 false) #16, !noalias !27
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %29) #16
  %991 = sext i32 %970 to i64
  %992 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %28, i64 0, i32 0
  %993 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %992) #16
  %994 = sext i32 %993 to i64
  %995 = mul nsw i64 %994, %991
  %996 = icmp ult i64 %995, 2147483648
  %997 = select i1 %996, i64 %995, i64 0
  %998 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap* nonnull %29, %struct.SkImageInfo* nonnull dereferenceable(24) %28, i64 %997) #16
  br i1 %998, label %1001, label %999

999:                                              ; preds = %984
  %1000 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %45, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %1000, align 8, !alias.scope !27
  br label %1127

1001:                                             ; preds = %984
  %1002 = and i32 %610, 1
  %1003 = icmp eq i32 %1002, 0
  %1004 = mul i32 %610, 3
  %1005 = select i1 %1003, i32 -2, i32 -3
  %1006 = add i32 %1005, %1004
  %1007 = and i32 %624, 1
  %1008 = icmp eq i32 %1007, 0
  %1009 = mul i32 %624, 3
  %1010 = select i1 %1008, i32 -2, i32 -3
  %1011 = add i32 %1010, %1009
  %1012 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %30, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %1012) #16, !noalias !27
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1012, i8 -86, i64 1056, i1 false) #16, !noalias !27
  %1013 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %30, i64 0, i32 0, i32 0, i64 1024
  %1014 = bitcast i8* %1013 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %1014, i8* nonnull %1012, i64 1024, i64 1024) #16
  %1015 = icmp slt i32 %1006, %1011
  %1016 = select i1 %1015, i32 %1011, i32 %1006
  %1017 = sext i32 %1016 to i64
  %1018 = icmp sgt i32 %1016, -1
  br i1 %1018, label %1020, label %1019

1019:                                             ; preds = %1001
  call void @abort() #17
  unreachable

1020:                                             ; preds = %1001
  %1021 = icmp ult i32 %1016, 268435456
  br i1 %1021, label %1023, label %1022

1022:                                             ; preds = %1020
  call void @abort() #17
  unreachable

1023:                                             ; preds = %1020
  %1024 = shl nsw i64 %1017, 4
  %1025 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %30, i64 0, i32 0, i32 0, i64 1032
  %1026 = bitcast i8* %1025 to i8**
  %1027 = bitcast i8* %1025 to i64*
  %1028 = load i64, i64* %1027, align 8, !noalias !27
  %1029 = sub i64 0, %1028
  %1030 = and i64 %1029, 15
  %1031 = and i64 %1024, 4294967280
  %1032 = or i64 %1030, %1031
  %1033 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %30, i64 0, i32 0, i32 0, i64 1040
  %1034 = bitcast i8* %1033 to i64*
  %1035 = load i64, i64* %1034, align 8, !noalias !27
  %1036 = sub i64 %1035, %1028
  %1037 = icmp ugt i64 %1032, %1036
  br i1 %1037, label %1038, label %1043

1038:                                             ; preds = %1023
  %1039 = trunc i64 %1024 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %1014, i32 %1039, i32 16) #16
  %1040 = load i64, i64* %1027, align 8, !noalias !27
  %1041 = sub i64 0, %1040
  %1042 = and i64 %1041, 15
  br label %1043

1043:                                             ; preds = %1038, %1023
  %1044 = phi i64 [ %1040, %1038 ], [ %1028, %1023 ]
  %1045 = phi i64 [ %1042, %1038 ], [ %1030, %1023 ]
  %1046 = inttoptr i64 %1044 to i8*
  %1047 = getelementptr inbounds i8, i8* %1046, i64 %1045
  %1048 = getelementptr inbounds i8, i8* %1047, i64 %1031
  store i8* %1048, i8** %1026, align 8, !noalias !27
  %1049 = bitcast i8* %1047 to %"class.(anonymous namespace)::SkNx"*
  %1050 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %27, i64 0, i32 1, i32 0
  %1051 = bitcast i8** %1050 to i32**
  %1052 = load i32*, i32** %1051, align 8, !noalias !27
  %1053 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %27, i64 0, i32 1, i32 1
  %1054 = load i64, i64* %1053, align 8, !noalias !27
  %1055 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %27, i64 0, i32 1, i32 2, i32 0
  %1056 = call i32 @_ZNK11SkColorInfo13shiftPerPixelEv(%class.SkColorInfo* %1055) #16
  %1057 = zext i32 %1056 to i64
  %1058 = lshr i64 %1054, %1057
  %1059 = trunc i64 %1058 to i32
  %1060 = load i32, i32* %902, align 8, !noalias !27
  %1061 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %29, i64 0, i32 1, i32 0
  %1062 = load i8*, i8** %1061, align 8, !noalias !27
  %1063 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %29, i64 0, i32 1, i32 1
  %1064 = shl i32 %1060, 2
  %1065 = sext i32 %1064 to i64
  %1066 = getelementptr inbounds i8, i8* %1062, i64 %1065
  %1067 = icmp slt i32 %608, 2
  %1068 = icmp slt i32 %622, 2
  %1069 = or i1 %1067, %1068
  br i1 %1069, label %1070, label %1071

1070:                                             ; preds = %1043
  call void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap* nonnull %29, i32 0) #16
  br label %1071

1071:                                             ; preds = %1070, %1043
  br i1 %609, label %1072, label %1106

1072:                                             ; preds = %1071
  %1073 = load i32, i32* %912, align 4, !noalias !27
  %1074 = sub nsw i32 %1073, %953
  %1075 = bitcast i8** %1061 to i32**
  %1076 = load i32*, i32** %1075, align 8, !noalias !27
  %1077 = icmp sgt i32 %1074, 0
  br i1 %1077, label %1078, label %1088

1078:                                             ; preds = %1072
  %1079 = sext i32 %1074 to i64
  %1080 = load i64, i64* %1063, align 8, !noalias !27
  %1081 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %29, i64 0, i32 1, i32 2, i32 0
  %1082 = call i32 @_ZNK11SkColorInfo13shiftPerPixelEv(%class.SkColorInfo* %1081) #16
  %1083 = zext i32 %1082 to i64
  %1084 = lshr i64 %1080, %1083
  %1085 = shl i64 %1084, 32
  %1086 = ashr exact i64 %1085, 32
  %1087 = mul nsw i64 %1086, %1079
  br label %1088

1088:                                             ; preds = %1078, %1072
  %1089 = phi i64 [ %1087, %1078 ], [ 0, %1072 ]
  %1090 = getelementptr inbounds i32, i32* %1076, i64 %1089
  %1091 = load i64, i64* %1063, align 8, !noalias !27
  %1092 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %29, i64 0, i32 1, i32 2, i32 0
  %1093 = call i32 @_ZNK11SkColorInfo13shiftPerPixelEv(%class.SkColorInfo* %1092) #16
  %1094 = zext i32 %1093 to i64
  %1095 = lshr i64 %1091, %1094
  %1096 = trunc i64 %1095 to i32
  %1097 = load i8*, i8** %1061, align 8, !noalias !27
  %1098 = load i32, i32* %902, align 8, !noalias !27
  %1099 = load i32, i32* %922, align 8, !noalias !27
  %1100 = load i32*, i32** %1051, align 8, !noalias !27
  %1101 = load i64, i64* %1053, align 8, !noalias !27
  %1102 = call i32 @_ZNK11SkColorInfo13shiftPerPixelEv(%class.SkColorInfo* %1055) #16
  %1103 = zext i32 %1102 to i64
  %1104 = lshr i64 %1101, %1103
  %1105 = trunc i64 %1104 to i32
  call fastcc void @_ZL18blur_one_directionPN12_GLOBAL__N_14SkNxILi4EjEEiiiiPKjiiiPjii(%"class.(anonymous namespace)::SkNx"* %1049, i32 %610, i32 %1098, i32 %1099, i32 %960, i32* %1100, i32 1, i32 %1105, i32 %969, i32* %1090, i32 1, i32 %1096) #16
  br label %1106

1106:                                             ; preds = %1088, %1071
  %1107 = phi i32* [ %1090, %1088 ], [ %1052, %1071 ]
  %1108 = phi i32 [ %1096, %1088 ], [ %1059, %1071 ]
  %1109 = phi i32 [ %970, %1088 ], [ %968, %1071 ]
  %1110 = phi i8* [ %1097, %1088 ], [ %1066, %1071 ]
  br i1 %623, label %1111, label %1121

1111:                                             ; preds = %1106
  %1112 = bitcast i8* %1110 to i32*
  %1113 = load i32, i32* %912, align 4, !noalias !27
  %1114 = load i32, i32* %931, align 4, !noalias !27
  %1115 = load i64, i64* %1063, align 8, !noalias !27
  %1116 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %29, i64 0, i32 1, i32 2, i32 0
  %1117 = call i32 @_ZNK11SkColorInfo13shiftPerPixelEv(%class.SkColorInfo* %1116) #16
  %1118 = zext i32 %1117 to i64
  %1119 = lshr i64 %1115, %1118
  %1120 = trunc i64 %1119 to i32
  call fastcc void @_ZL18blur_one_directionPN12_GLOBAL__N_14SkNxILi4EjEEiiiiPKjiiiPjii(%"class.(anonymous namespace)::SkNx"* %1049, i32 %624, i32 %1113, i32 %1114, i32 %967, i32* %1107, i32 %1108, i32 1, i32 %1109, i32* %1112, i32 %1120, i32 1) #16
  br label %1121

1121:                                             ; preds = %1111, %1106
  %1122 = bitcast { i64, i64 }* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1122) #16, !noalias !27
  %1123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i64 0, i32 0
  store i64 0, i64* %1123, align 8, !noalias !27
  %1124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i64 0, i32 1
  store i64 %977, i64* %1124, align 8, !noalias !27
  %1125 = load %class.SkSpecialImage*, %class.SkSpecialImage** %246, align 8, !noalias !27
  %1126 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %1125, i64 0, i32 1
  call void @_ZN14SkSpecialImage14MakeFromRasterERK7SkIRectRK8SkBitmapRK14SkSurfaceProps(%class.sk_sp.18* nonnull sret %45, %struct.SkIRect* nonnull dereferenceable(16) %594, %class.SkBitmap* nonnull dereferenceable(56) %29, %class.SkSurfaceProps* dereferenceable(8) %1126) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1122) #16, !noalias !27
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %1014) #16
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %1012) #16, !noalias !27
  br label %1127

1127:                                             ; preds = %1121, %999
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %29) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %990) #16, !noalias !27
  %1128 = load %class.SkColorSpace*, %class.SkColorSpace** %973, align 8, !noalias !27
  %1129 = icmp eq %class.SkColorSpace* %1128, null
  br i1 %1129, label %1136, label %1130

1130:                                             ; preds = %1127
  %1131 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %1128, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1132 = atomicrmw add i32* %1131, i32 -1 acq_rel
  %1133 = icmp eq i32 %1132, 1
  br i1 %1133, label %1134, label %1136

1134:                                             ; preds = %1130
  %1135 = bitcast %class.SkColorSpace* %1128 to i8*
  call void @_ZdlPv(i8* %1135) #15
  br label %1136

1136:                                             ; preds = %1134, %1130, %1127
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %972) #16, !noalias !27
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %27) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %898) #16, !noalias !27
  br label %1137

1137:                                             ; preds = %1136, %895, %889
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %26) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %887) #16, !noalias !27
  br label %1138

1138:                                             ; preds = %1137, %885
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %592)
  br label %1139

1139:                                             ; preds = %1138, %560
  %1140 = phi %class.sk_sp.18* [ %45, %1138 ], [ %40, %560 ]
  %1141 = phi i8* [ %584, %1138 ], [ %282, %560 ]
  %1142 = phi i64 [ %59, %1138 ], [ %259, %560 ]
  %1143 = phi i32 [ %134, %1138 ], [ %561, %560 ]
  %1144 = phi i32 [ %133, %1138 ], [ %562, %560 ]
  %1145 = bitcast %class.sk_sp.18* %1140 to i64*
  %1146 = load i64, i64* %1145, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1141) #16
  %1147 = icmp eq i64 %1146, 0
  br i1 %1147, label %1154, label %1148

1148:                                             ; preds = %1139
  %1149 = bitcast %struct.SkIPoint* %3 to i64*
  %1150 = zext i32 %1143 to i64
  %1151 = shl nuw i64 %1150, 32
  %1152 = zext i32 %1144 to i64
  %1153 = or i64 %1151, %1152
  store i64 %1153, i64* %1149, align 4
  br label %1154

1154:                                             ; preds = %1139, %1148
  %1155 = bitcast %class.sk_sp.18* %0 to i64*
  store i64 %1146, i64* %1155, align 8
  br label %1156

1156:                                             ; preds = %1154, %243
  %1157 = phi i64 [ %59, %243 ], [ %1142, %1154 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202)
  br label %1158

1158:                                             ; preds = %126, %130, %1156
  %1159 = phi i64 [ %1157, %1156 ], [ %59, %130 ], [ %59, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #16
  %1160 = icmp eq i64 %1159, 0
  br i1 %1160, label %1172, label %1161

1161:                                             ; preds = %1158
  %1162 = inttoptr i64 %1159 to %class.SkSpecialImage*
  %1163 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %1162, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1164 = atomicrmw add i32* %1163, i32 -1 acq_rel
  %1165 = icmp eq i32 %1164, 1
  br i1 %1165, label %1166, label %1172

1166:                                             ; preds = %1161
  %1167 = inttoptr i64 %1159 to %class.SkRefCntBase*
  %1168 = inttoptr i64 %1159 to void (%class.SkRefCntBase*)***
  %1169 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %1168, align 8
  %1170 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %1169, i64 2
  %1171 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %1170, align 8
  call void %1171(%class.SkRefCntBase* nonnull %1167) #16
  br label %1172

1172:                                             ; preds = %51, %1158, %1161, %1166
  ret void

1173:                                             ; preds = %857, %859
  %1174 = add nuw nsw i64 %858, 2
  %1175 = trunc i64 %1174 to i32
  %1176 = icmp sgt i32 %713, %1175
  br i1 %1176, label %857, label %869
}

declare { i64, i64 } @_ZNK18SkImageFilter_Base14onFilterBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS1_(%class.SkImageFilter_Base*, %struct.SkIRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), i32, %struct.SkIRect*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal { i64, i64 } @_ZNK12_GLOBAL__N_117SkBlurImageFilter18onFilterNodeBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS2_(%"class.(anonymous namespace)::SkBlurImageFilter"* nocapture readonly, %struct.SkIRect* nocapture readonly dereferenceable(16), %class.SkMatrix* dereferenceable(40), i32, %struct.SkIRect* nocapture readnone) unnamed_addr #7 align 2 {
  %6 = alloca <2 x float>, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %13 = getelementptr inbounds <2 x float>, <2 x float>* %6, i64 0, i64 0
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %12, i64 0, i32 1
  %15 = getelementptr inbounds %"class.(anonymous namespace)::SkBlurImageFilter", %"class.(anonymous namespace)::SkBlurImageFilter"* %0, i64 0, i32 1, i32 0
  %16 = bitcast float* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = bitcast <2 x float>* %6 to i64*
  store i64 %17, i64* %18, align 8
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %2, %struct.SkPoint* nonnull %12, %struct.SkPoint* nonnull %12, i32 1) #16
  %19 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19)
  %20 = load float, float* %13, align 8
  %21 = call float @llvm.fabs.f32(float %20) #16
  store float %21, float* %7, align 4
  %22 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 5.320000e+02, float* %8, align 4
  %23 = fcmp ogt float %21, 5.320000e+02
  %24 = select i1 %23, float* %8, float* %7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast <2 x float>* %6 to i32*
  store i32 %26, i32* %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19)
  %28 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28)
  %29 = load float, float* %14, align 4
  %30 = call float @llvm.fabs.f32(float %29) #16
  store float %30, float* %9, align 4
  %31 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31)
  store float 5.320000e+02, float* %10, align 4
  %32 = fcmp ogt float %30, 5.320000e+02
  %33 = select i1 %32, float* %10, float* %9
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = bitcast float* %14 to i32*
  store i32 %35, i32* %36, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28)
  %37 = load <2 x float>, <2 x float>* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  %38 = extractelement <2 x float> %37, i32 0
  %39 = fmul float %38, 3.000000e+00
  %40 = call float @llvm.ceil.f32(float %39)
  %41 = fcmp olt float %40, 0x41DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x41DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC1DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC1DFFFFFE0000000
  %45 = fptosi float %44 to i32
  %46 = extractelement <2 x float> %37, i32 1
  %47 = fmul float %46, 3.000000e+00
  %48 = call float @llvm.ceil.f32(float %47)
  %49 = fcmp olt float %48, 0x41DFFFFFE0000000
  %50 = select i1 %49, float %48, float 0x41DFFFFFE0000000
  %51 = fcmp ogt float %50, 0xC1DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0xC1DFFFFFE0000000
  %53 = fptosi float %52 to i32
  %54 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = sext i32 %45 to i64
  %58 = sub nsw i64 %56, %57
  %59 = icmp slt i64 %58, 2147483647
  %60 = select i1 %59, i64 %58, i64 2147483647
  %61 = icmp sgt i64 %60, -2147483647
  %62 = select i1 %61, i64 %60, i64 -2147483647
  %63 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = sext i32 %53 to i64
  %67 = sub nsw i64 %65, %66
  %68 = icmp slt i64 %67, 2147483647
  %69 = select i1 %68, i64 %67, i64 2147483647
  %70 = icmp sgt i64 %69, -2147483647
  %71 = select i1 %70, i64 %69, i64 -2147483647
  %72 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = add nsw i64 %57, %74
  %76 = icmp slt i64 %75, 2147483647
  %77 = select i1 %76, i64 %75, i64 2147483647
  %78 = icmp sgt i64 %77, -2147483647
  %79 = select i1 %78, i64 %77, i64 -2147483647
  %80 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %81 to i64
  %83 = add nsw i64 %66, %82
  %84 = icmp slt i64 %83, 2147483647
  %85 = select i1 %84, i64 %83, i64 2147483647
  %86 = icmp sgt i64 %85, -2147483647
  %87 = select i1 %86, i64 %85, i64 -2147483647
  %88 = shl nsw i64 %71, 32
  %89 = and i64 %62, 4294967295
  %90 = or i64 %88, %89
  %91 = insertvalue { i64, i64 } undef, i64 %90, 0
  %92 = shl nsw i64 %87, 32
  %93 = and i64 %79, 4294967295
  %94 = or i64 %92, %93
  %95 = insertvalue { i64, i64 } %91, i64 %94, 1
  ret { i64, i64 } %95
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK18SkImageFilter_Base19onIsColorFilterNodeEPP13SkColorFilter(%class.SkImageFilter_Base*, %class.SkColorFilter**) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK18SkImageFilter_Base21onCanHandleComplexCTMEv(%class.SkImageFilter_Base*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK18SkImageFilter_Base23affectsTransparentBlackEv(%class.SkImageFilter_Base*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK18SkImageFilter_Base13onFilterImageERKN4skif7ContextE() unnamed_addr

declare { i64, i64 } @_ZNK18SkImageFilter_Base21onGetInputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEES8_NS_13VisitChildrenE(%class.SkImageFilter_Base*, %"class.skif::Mapping"* dereferenceable(80), %"class.skif::LayerSpace"* dereferenceable(16), %"class.skif::LayerSpace"* dereferenceable(16), i1 zeroext) unnamed_addr #2

declare { i64, i64 } @_ZNK18SkImageFilter_Base22onGetOutputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEE(%class.SkImageFilter_Base*, %"class.skif::Mapping"* dereferenceable(80), %"class.skif::LayerSpace"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZNK18SkImageFilter_Base7flattenER13SkWriteBuffer(%class.SkImageFilter_Base*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #2

declare %class.SkImageFilter* @_ZNK13SkImageFilter8getInputEi(%class.SkImageFilter*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare zeroext i1 @_ZNK18SkImageFilter_Base13applyCropRectERKN4skif7ContextERK7SkIRectPS4_(%class.SkImageFilter_Base*, %"class.skif::Context"* dereferenceable(136), %struct.SkIRect* dereferenceable(16), %struct.SkIRect*) local_unnamed_addr #2

declare void @_ZNK18SkImageFilter_Base10mapContextERKN4skif7ContextE(%"class.skif::Context"* sret, %class.SkImageFilter_Base*, %"class.skif::Context"* dereferenceable(136)) local_unnamed_addr #2

declare void @_ZN18SkImageFilter_Base17ImageToColorSpaceEP14SkSpecialImage11SkColorTypeP12SkColorSpaceRK14SkSurfaceProps(%class.sk_sp.18* sret, %class.SkSpecialImage*, i32, %class.SkColorSpace*, %class.SkSurfaceProps* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK18SkImageFilter_Base11filterInputILN4skif5UsageE0EEENS1_12FilterResultIXT_EEEiRKNS1_7ContextE(%"class.skif::FilterResult"* sret, %class.SkImageFilter_Base*, i32, %"class.skif::Context"* dereferenceable(136)) local_unnamed_addr #2

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

declare void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK14SkSpecialImage15isTextureBackedEv(%class.SkSpecialImage*) local_unnamed_addr #2

declare void @_ZNK14SkSpecialImage10makeSubsetERK7SkIRect(%class.sk_sp.18* sret, %class.SkSpecialImage*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNK14SkSpecialImage4viewEP18GrRecordingContext(%class.GrSurfaceProxyView* sret, %class.SkSpecialImage*, %class.GrRecordingContext*) local_unnamed_addr #2

declare %class.GrSurfaceDrawContext* @_ZN14SkGpuBlurUtils12GaussianBlurEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaType5sk_spI12SkColorSpaceE7SkIRectS8_ff10SkTileMode12SkBackingFit(%class.GrRecordingContext*, %class.GrSurfaceProxyView*, i32, i32, %class.sk_sp.14*, %struct.SkIRect* byval(%struct.SkIRect) align 8, %struct.SkIRect* byval(%struct.SkIRect) align 8, float, float, i32, i32) local_unnamed_addr #2

declare %class.SkColorSpace* @_ZNK14SkSpecialImage13getColorSpaceEv(%class.SkSpecialImage*) local_unnamed_addr #2

declare void @_ZN14SkSpecialImage19MakeDeferredFromGpuEP18GrRecordingContextRK7SkIRectj18GrSurfaceProxyView11GrColorType5sk_spI12SkColorSpaceERK14SkSurfaceProps11SkAlphaType(%class.sk_sp.18* sret, %class.GrRecordingContext*, %struct.SkIRect* dereferenceable(16), i32, %class.GrSurfaceProxyView*, i32, %class.sk_sp.14*, %class.SkSurfaceProps* dereferenceable(8), i32) local_unnamed_addr #2

declare %class.GrRecordingContext* @_ZNK14SkSpecialImage10getContextEv(%class.SkSpecialImage*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare zeroext i1 @_ZNK14SkSpecialImage11getROPixelsEP8SkBitmap(%class.SkSpecialImage*, %class.SkBitmap*) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkBitmap13extractSubsetEPS_RK7SkIRect(%class.SkBitmap*, %class.SkBitmap*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL18blur_one_directionPN12_GLOBAL__N_14SkNxILi4EjEEiiiiPKjiiiPjii(%"class.(anonymous namespace)::SkNx"*, i32, i32, i32, i32, i32* nocapture readonly, i32, i32, i32, i32* nocapture, i32, i32) unnamed_addr #11 {
  %13 = alloca [2 x %"class.(anonymous namespace)::SkNx"]*, align 8
  %14 = alloca %"class.(anonymous namespace)::SkNx"*, align 8
  %15 = alloca [2 x %"class.(anonymous namespace)::SkNx"]*, align 8
  %16 = alloca %"class.(anonymous namespace)::SkNx"*, align 8
  %17 = alloca i32, align 4
  %18 = alloca [2 x %"class.(anonymous namespace)::SkNx"]*, align 8
  %19 = alloca %"class.(anonymous namespace)::SkNx"*, align 8
  %20 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %21 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %22 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %23 = add nsw i32 %1, -1
  %24 = and i32 %1, 1
  %25 = icmp ne i32 %24, 0
  %26 = select i1 %25, i32 %23, i32 %1
  %27 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #16
  %28 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %13 to %"class.(anonymous namespace)::SkNx"**
  store %"class.(anonymous namespace)::SkNx"* %0, %"class.(anonymous namespace)::SkNx"** %28, align 8
  %29 = bitcast %"class.(anonymous namespace)::SkNx"** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #16
  %30 = sext i32 %23 to i64
  %31 = getelementptr inbounds %"class.(anonymous namespace)::SkNx", %"class.(anonymous namespace)::SkNx"* %0, i64 %30
  %32 = getelementptr inbounds %"class.(anonymous namespace)::SkNx", %"class.(anonymous namespace)::SkNx"* %31, i64 %30
  store %"class.(anonymous namespace)::SkNx"* %32, %"class.(anonymous namespace)::SkNx"** %14, align 8
  %33 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #16
  %34 = ptrtoint %"class.(anonymous namespace)::SkNx"* %32 to i64
  %35 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %15 to i64*
  store i64 %34, i64* %35, align 8
  %36 = bitcast %"class.(anonymous namespace)::SkNx"** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #16
  %37 = sext i32 %26 to i64
  %38 = getelementptr inbounds %"class.(anonymous namespace)::SkNx", %"class.(anonymous namespace)::SkNx"* %32, i64 %37
  store %"class.(anonymous namespace)::SkNx"* %38, %"class.(anonymous namespace)::SkNx"** %16, align 8
  %39 = mul nsw i32 %1, %1
  %40 = mul nsw i32 %39, %1
  %41 = select i1 %25, i32 0, i32 %39
  %42 = add nsw i32 %41, %40
  %43 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #16
  %44 = sitofp i32 %42 to double
  %45 = fdiv double 1.000000e+00, %44
  %46 = fmul double %45, 0x41F0000000000000
  %47 = tail call double @llvm.round.f64(double %46)
  %48 = fptoui double %47 to i32
  store i32 %48, i32* %17, align 4
  %49 = add nsw i32 %42, 1
  %50 = sdiv i32 %49, 2
  %51 = icmp eq i32 %24, 0
  %52 = ptrtoint %"class.(anonymous namespace)::SkNx"* %0 to i64
  %53 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to [2 x %"class.(anonymous namespace)::SkNx"]*
  %54 = ptrtoint %"class.(anonymous namespace)::SkNx"* %38 to i64
  br i1 %51, label %58, label %55

55:                                               ; preds = %12
  %56 = sdiv i32 %23, 2
  %57 = mul nsw i32 %56, 3
  br label %62

58:                                               ; preds = %12
  %59 = sdiv i32 %1, 2
  %60 = mul nsw i32 %59, 3
  %61 = add nsw i32 %60, -1
  br label %62

62:                                               ; preds = %55, %58
  %63 = phi i32 [ %57, %55 ], [ %61, %58 ]
  %64 = sub i32 %2, %63
  %65 = sub nsw i32 %3, %63
  %66 = icmp sgt i32 %8, 0
  br i1 %66, label %67, label %98

67:                                               ; preds = %62
  %68 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %18 to i8*
  %69 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %13 to i64*
  %70 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]** %18 to i64*
  %71 = bitcast %"class.(anonymous namespace)::SkNx"** %19 to i8*
  %72 = bitcast %"class.(anonymous namespace)::SkNx"** %14 to i64*
  %73 = bitcast %"class.(anonymous namespace)::SkNx"** %19 to i64*
  %74 = bitcast %"class.(anonymous namespace)::SkNx"* %20 to i8*
  %75 = bitcast %"class.(anonymous namespace)::SkNx"* %20 to <4 x i32>*
  %76 = bitcast %"class.(anonymous namespace)::SkNx"* %21 to i8*
  %77 = bitcast %"class.(anonymous namespace)::SkNx"* %21 to <4 x i32>*
  %78 = bitcast %"class.(anonymous namespace)::SkNx"* %22 to i8*
  %79 = insertelement <4 x i32> undef, i32 %50, i32 0
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> zeroinitializer
  %81 = bitcast %"class.(anonymous namespace)::SkNx"* %22 to <4 x i32>*
  %82 = bitcast %"class.(anonymous namespace)::SkNx"** %16 to i64*
  %83 = icmp sgt i32 %64, 0
  %84 = sext i32 %10 to i64
  %85 = bitcast %"class.(anonymous namespace)::SkNx"** %19 to <4 x i32>**
  %86 = sext i32 %6 to i64
  %87 = icmp slt i32 %65, %4
  %88 = select i1 %87, i32 %65, i32 %4
  %89 = sext i32 %7 to i64
  %90 = sext i32 %11 to i64
  %91 = icmp slt i32 %64, 0
  %92 = xor i32 %63, -1
  %93 = add i32 %92, %2
  %94 = and i32 %64, 7
  %95 = icmp ult i32 %93, 7
  %96 = sub i32 %64, %94
  %97 = icmp eq i32 %94, 0
  br label %99

98:                                               ; preds = %343, %62
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #16
  ret void

99:                                               ; preds = %346, %67
  %100 = phi i64 [ %54, %67 ], [ %352, %346 ]
  %101 = phi [2 x %"class.(anonymous namespace)::SkNx"]* [ %53, %67 ], [ %351, %346 ]
  %102 = phi i64 [ %34, %67 ], [ %350, %346 ]
  %103 = phi i64 [ %52, %67 ], [ %349, %346 ]
  %104 = phi i32* [ %5, %67 ], [ %348, %346 ]
  %105 = phi i32 [ 0, %67 ], [ %344, %346 ]
  %106 = phi i32* [ %9, %67 ], [ %347, %346 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #16
  store i64 %103, i64* %70, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #16
  store i64 %102, i64* %73, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %74) #16
  store <4 x i32> zeroinitializer, <4 x i32>* %75, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #16
  store <4 x i32> zeroinitializer, <4 x i32>* %77, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #16
  store <4 x i32> %80, <4 x i32>* %81, align 16
  %107 = ptrtoint [2 x %"class.(anonymous namespace)::SkNx"]* %101 to i64
  %108 = sub i64 %100, %107
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %99
  %111 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 0, i64 %108, i1 false) #16
  br label %112

112:                                              ; preds = %99, %110
  br i1 %83, label %113, label %114

113:                                              ; preds = %112
  br i1 %95, label %185, label %115

114:                                              ; preds = %112
  br i1 %91, label %136, label %195

115:                                              ; preds = %113, %115
  %116 = phi i32* [ %132, %115 ], [ %106, %113 ]
  %117 = phi i32 [ %134, %115 ], [ %96, %113 ]
  store i32 0, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %116, i64 %84
  %119 = bitcast i32* %118 to i8*
  tail call void @llvm.prefetch(i8* %119, i32 0, i32 3, i32 1)
  store i32 0, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %118, i64 %84
  %121 = bitcast i32* %120 to i8*
  tail call void @llvm.prefetch(i8* %121, i32 0, i32 3, i32 1)
  store i32 0, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %120, i64 %84
  %123 = bitcast i32* %122 to i8*
  tail call void @llvm.prefetch(i8* %123, i32 0, i32 3, i32 1)
  store i32 0, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %122, i64 %84
  %125 = bitcast i32* %124 to i8*
  tail call void @llvm.prefetch(i8* %125, i32 0, i32 3, i32 1)
  store i32 0, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %124, i64 %84
  %127 = bitcast i32* %126 to i8*
  tail call void @llvm.prefetch(i8* %127, i32 0, i32 3, i32 1)
  store i32 0, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %126, i64 %84
  %129 = bitcast i32* %128 to i8*
  tail call void @llvm.prefetch(i8* %129, i32 0, i32 3, i32 1)
  store i32 0, i32* %128, align 4
  %130 = getelementptr inbounds i32, i32* %128, i64 %84
  %131 = bitcast i32* %130 to i8*
  tail call void @llvm.prefetch(i8* %131, i32 0, i32 3, i32 1)
  store i32 0, i32* %130, align 4
  %132 = getelementptr inbounds i32, i32* %130, i64 %84
  %133 = bitcast i32* %132 to i8*
  tail call void @llvm.prefetch(i8* %133, i32 0, i32 3, i32 1)
  %134 = add i32 %117, -8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %185, label %115

136:                                              ; preds = %114, %148
  %137 = phi i32* [ %182, %148 ], [ %104, %114 ]
  %138 = phi i32 [ %183, %148 ], [ %64, %114 ]
  %139 = icmp slt i32 %138, %65
  br i1 %139, label %140, label %148

140:                                              ; preds = %136
  %141 = load i32, i32* %137, align 4
  %142 = insertelement <4 x i32> undef, i32 %141, i32 0
  %143 = bitcast <4 x i32> %142 to <16 x i8>
  %144 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = bitcast <16 x i8> %144 to <8 x i16>
  %146 = shufflevector <8 x i16> %145, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  br label %148

148:                                              ; preds = %136, %140
  %149 = phi <2 x i64> [ %147, %140 ], [ zeroinitializer, %136 ]
  %150 = load <4 x i32>, <4 x i32>* %75, align 16
  %151 = bitcast <2 x i64> %149 to <4 x i32>
  %152 = add <4 x i32> %150, %151
  store <4 x i32> %152, <4 x i32>* %75, align 16
  %153 = load <4 x i32>, <4 x i32>* %77, align 16
  %154 = add <4 x i32> %153, %152
  store <4 x i32> %154, <4 x i32>* %77, align 16
  %155 = load <4 x i32>, <4 x i32>* %81, align 16
  %156 = add <4 x i32> %155, %154
  %157 = load <4 x i32>*, <4 x i32>** %85, align 8
  %158 = load <4 x i32>, <4 x i32>* %157, align 16
  %159 = sub <4 x i32> %156, %158
  store <4 x i32> %159, <4 x i32>* %81, align 16
  %160 = bitcast <4 x i32>* %157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %160, i8* nonnull align 16 %76, i64 16, i1 false) #16
  %161 = getelementptr inbounds <4 x i32>, <4 x i32>* %157, i64 1
  %162 = bitcast <4 x i32>* %161 to %"class.(anonymous namespace)::SkNx"*
  %163 = load %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"** %16, align 8
  %164 = icmp ugt %"class.(anonymous namespace)::SkNx"* %163, %162
  %165 = load %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"** %14, align 8
  %166 = select i1 %164, %"class.(anonymous namespace)::SkNx"* %162, %"class.(anonymous namespace)::SkNx"* %165
  store %"class.(anonymous namespace)::SkNx"* %166, %"class.(anonymous namespace)::SkNx"** %19, align 8
  %167 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %18, align 8
  %168 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %167, i64 0, i64 1
  %169 = bitcast %"class.(anonymous namespace)::SkNx"* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 16
  %171 = sub <4 x i32> %154, %170
  store <4 x i32> %171, <4 x i32>* %77, align 16
  %172 = bitcast %"class.(anonymous namespace)::SkNx"* %168 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %172, i8* nonnull align 16 %74, i64 16, i1 false) #16
  %173 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]* %167 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 16
  %175 = sub <4 x i32> %152, %174
  store <4 x i32> %175, <4 x i32>* %75, align 16
  %176 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %167, i64 0, i64 0, i32 0
  store <2 x i64> %149, <2 x i64>* %176, align 16
  %177 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %167, i64 1
  %178 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %15, align 8
  %179 = icmp ult [2 x %"class.(anonymous namespace)::SkNx"]* %177, %178
  %180 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %13, align 8
  %181 = select i1 %179, [2 x %"class.(anonymous namespace)::SkNx"]* %177, [2 x %"class.(anonymous namespace)::SkNx"]* %180
  store [2 x %"class.(anonymous namespace)::SkNx"]* %181, [2 x %"class.(anonymous namespace)::SkNx"]** %18, align 8
  %182 = getelementptr inbounds i32, i32* %137, i64 %86
  %183 = add nsw i32 %138, 1
  %184 = icmp slt i32 %183, 0
  br i1 %184, label %136, label %195

185:                                              ; preds = %115, %113
  %186 = phi i32* [ undef, %113 ], [ %132, %115 ]
  %187 = phi i32* [ %106, %113 ], [ %132, %115 ]
  br i1 %97, label %195, label %188

188:                                              ; preds = %185, %188
  %189 = phi i32* [ %191, %188 ], [ %187, %185 ]
  %190 = phi i32 [ %193, %188 ], [ %94, %185 ]
  store i32 0, i32* %189, align 4
  %191 = getelementptr inbounds i32, i32* %189, i64 %84
  %192 = bitcast i32* %191 to i8*
  tail call void @llvm.prefetch(i8* %192, i32 0, i32 3, i32 1)
  %193 = add i32 %190, -1
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %188, !llvm.loop !43

195:                                              ; preds = %148, %185, %188, %114
  %196 = phi i32* [ %106, %114 ], [ %186, %185 ], [ %191, %188 ], [ %106, %148 ]
  %197 = phi i32 [ 0, %114 ], [ %64, %188 ], [ %64, %185 ], [ 0, %148 ]
  %198 = phi i32* [ %104, %114 ], [ %104, %188 ], [ %104, %185 ], [ %182, %148 ]
  %199 = icmp slt i32 %197, %88
  br i1 %199, label %204, label %200

200:                                              ; preds = %204, %195
  %201 = phi i32 [ %197, %195 ], [ %88, %204 ]
  %202 = phi i32* [ %196, %195 ], [ %275, %204 ]
  %203 = icmp slt i32 %201, %4
  br i1 %203, label %279, label %343

204:                                              ; preds = %195, %204
  %205 = phi i32* [ %275, %204 ], [ %196, %195 ]
  %206 = phi i32* [ %274, %204 ], [ %198, %195 ]
  %207 = phi i32 [ %277, %204 ], [ %197, %195 ]
  %208 = load i32, i32* %206, align 4
  %209 = insertelement <4 x i32> undef, i32 %208, i32 0
  %210 = bitcast <4 x i32> %209 to <16 x i8>
  %211 = shufflevector <16 x i8> %210, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %212 = bitcast <16 x i8> %211 to <8 x i16>
  %213 = shufflevector <8 x i16> %212, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %214 = load <4 x i32>, <4 x i32>* %75, align 16
  %215 = bitcast <8 x i16> %213 to <4 x i32>
  %216 = add <4 x i32> %214, %215
  store <4 x i32> %216, <4 x i32>* %75, align 16
  %217 = load <4 x i32>, <4 x i32>* %77, align 16
  %218 = add <4 x i32> %216, %217
  store <4 x i32> %218, <4 x i32>* %77, align 16
  %219 = load <4 x i32>, <4 x i32>* %81, align 16
  %220 = add <4 x i32> %218, %219
  %221 = load i32, i32* %17, align 4
  %222 = insertelement <4 x i32> undef, i32 %221, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast <4 x i32> %223 to <2 x i64>
  %225 = bitcast <4 x i32> %220 to <2 x i64>
  %226 = and <2 x i64> %224, <i64 4294967295, i64 4294967295>
  %227 = and <2 x i64> %225, <i64 4294967295, i64 4294967295>
  %228 = mul nuw <2 x i64> %226, %227
  %229 = bitcast <4 x i32> %223 to <16 x i8>
  %230 = shufflevector <16 x i8> %229, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %231 = bitcast <16 x i8> %230 to <2 x i64>
  %232 = bitcast <4 x i32> %220 to <16 x i8>
  %233 = shufflevector <16 x i8> %232, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %234 = bitcast <16 x i8> %233 to <2 x i64>
  %235 = and <2 x i64> %231, <i64 4294967295, i64 4294967295>
  %236 = and <2 x i64> %234, <i64 4294967295, i64 4294967295>
  %237 = mul nuw <2 x i64> %235, %236
  %238 = bitcast <2 x i64> %228 to <4 x i32>
  %239 = bitcast <2 x i64> %237 to <4 x i32>
  %240 = shufflevector <4 x i32> %238, <4 x i32> %239, <4 x i32> <i32 1, i32 5, i32 undef, i32 undef>
  %241 = shufflevector <4 x i32> %240, <4 x i32> %238, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %242 = shufflevector <4 x i32> %241, <4 x i32> %239, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %243 = load <4 x i32>*, <4 x i32>** %85, align 8
  %244 = load <4 x i32>, <4 x i32>* %243, align 16
  %245 = sub <4 x i32> %220, %244
  store <4 x i32> %245, <4 x i32>* %81, align 16
  %246 = bitcast <4 x i32>* %243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %246, i8* nonnull align 16 %76, i64 16, i1 false) #16
  %247 = getelementptr inbounds <4 x i32>, <4 x i32>* %243, i64 1
  %248 = bitcast <4 x i32>* %247 to %"class.(anonymous namespace)::SkNx"*
  %249 = load %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"** %16, align 8
  %250 = icmp ugt %"class.(anonymous namespace)::SkNx"* %249, %248
  %251 = load %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"** %14, align 8
  %252 = select i1 %250, %"class.(anonymous namespace)::SkNx"* %248, %"class.(anonymous namespace)::SkNx"* %251
  store %"class.(anonymous namespace)::SkNx"* %252, %"class.(anonymous namespace)::SkNx"** %19, align 8
  %253 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %18, align 8
  %254 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %253, i64 0, i64 1
  %255 = bitcast %"class.(anonymous namespace)::SkNx"* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 16
  %257 = sub <4 x i32> %218, %256
  store <4 x i32> %257, <4 x i32>* %77, align 16
  %258 = bitcast %"class.(anonymous namespace)::SkNx"* %254 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %258, i8* nonnull align 16 %74, i64 16, i1 false) #16
  %259 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]* %253 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 16
  %261 = sub <4 x i32> %216, %260
  store <4 x i32> %261, <4 x i32>* %75, align 16
  %262 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]* %253 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %262, align 16
  %263 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %253, i64 1
  %264 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %15, align 8
  %265 = icmp ult [2 x %"class.(anonymous namespace)::SkNx"]* %263, %264
  %266 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %13, align 8
  %267 = select i1 %265, [2 x %"class.(anonymous namespace)::SkNx"]* %263, [2 x %"class.(anonymous namespace)::SkNx"]* %266
  store [2 x %"class.(anonymous namespace)::SkNx"]* %267, [2 x %"class.(anonymous namespace)::SkNx"]** %18, align 8
  %268 = bitcast <4 x i32> %242 to <8 x i16>
  %269 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %268, <8 x i16> undef) #16
  %270 = bitcast <16 x i8> %269 to <8 x i16>
  %271 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %270, <8 x i16> undef) #16
  %272 = bitcast <16 x i8> %271 to <4 x i32>
  %273 = extractelement <4 x i32> %272, i32 0
  store i32 %273, i32* %205, align 4
  %274 = getelementptr inbounds i32, i32* %206, i64 %86
  %275 = getelementptr inbounds i32, i32* %205, i64 %84
  %276 = bitcast i32* %275 to i8*
  tail call void @llvm.prefetch(i8* %276, i32 0, i32 3, i32 1)
  %277 = add nuw nsw i32 %207, 1
  %278 = icmp slt i32 %277, %88
  br i1 %278, label %204, label %200

279:                                              ; preds = %200, %279
  %280 = phi i32* [ %339, %279 ], [ %202, %200 ]
  %281 = phi i32 [ %341, %279 ], [ %201, %200 ]
  %282 = load <4 x i32>, <4 x i32>* %75, align 16
  %283 = load <4 x i32>, <4 x i32>* %77, align 16
  %284 = add <4 x i32> %283, %282
  store <4 x i32> %284, <4 x i32>* %77, align 16
  %285 = load <4 x i32>, <4 x i32>* %81, align 16
  %286 = add <4 x i32> %285, %284
  %287 = load i32, i32* %17, align 4
  %288 = insertelement <4 x i32> undef, i32 %287, i32 0
  %289 = shufflevector <4 x i32> %288, <4 x i32> undef, <4 x i32> zeroinitializer
  %290 = bitcast <4 x i32> %289 to <2 x i64>
  %291 = bitcast <4 x i32> %286 to <2 x i64>
  %292 = and <2 x i64> %290, <i64 4294967295, i64 4294967295>
  %293 = and <2 x i64> %291, <i64 4294967295, i64 4294967295>
  %294 = mul nuw <2 x i64> %292, %293
  %295 = bitcast <4 x i32> %289 to <16 x i8>
  %296 = shufflevector <16 x i8> %295, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %297 = bitcast <16 x i8> %296 to <2 x i64>
  %298 = bitcast <4 x i32> %286 to <16 x i8>
  %299 = shufflevector <16 x i8> %298, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %300 = bitcast <16 x i8> %299 to <2 x i64>
  %301 = and <2 x i64> %297, <i64 4294967295, i64 4294967295>
  %302 = and <2 x i64> %300, <i64 4294967295, i64 4294967295>
  %303 = mul nuw <2 x i64> %301, %302
  %304 = bitcast <2 x i64> %294 to <4 x i32>
  %305 = bitcast <2 x i64> %303 to <4 x i32>
  %306 = shufflevector <4 x i32> %304, <4 x i32> %305, <4 x i32> <i32 1, i32 5, i32 undef, i32 undef>
  %307 = shufflevector <4 x i32> %306, <4 x i32> %304, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %308 = shufflevector <4 x i32> %307, <4 x i32> %305, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %309 = load <4 x i32>*, <4 x i32>** %85, align 8
  %310 = load <4 x i32>, <4 x i32>* %309, align 16
  %311 = sub <4 x i32> %286, %310
  store <4 x i32> %311, <4 x i32>* %81, align 16
  %312 = bitcast <4 x i32>* %309 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %312, i8* nonnull align 16 %76, i64 16, i1 false) #16
  %313 = getelementptr inbounds <4 x i32>, <4 x i32>* %309, i64 1
  %314 = bitcast <4 x i32>* %313 to %"class.(anonymous namespace)::SkNx"*
  %315 = load %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"** %16, align 8
  %316 = icmp ugt %"class.(anonymous namespace)::SkNx"* %315, %314
  %317 = load %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"** %14, align 8
  %318 = select i1 %316, %"class.(anonymous namespace)::SkNx"* %314, %"class.(anonymous namespace)::SkNx"* %317
  store %"class.(anonymous namespace)::SkNx"* %318, %"class.(anonymous namespace)::SkNx"** %19, align 8
  %319 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %18, align 8
  %320 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %319, i64 0, i64 1
  %321 = bitcast %"class.(anonymous namespace)::SkNx"* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 16
  %323 = sub <4 x i32> %284, %322
  store <4 x i32> %323, <4 x i32>* %77, align 16
  %324 = bitcast %"class.(anonymous namespace)::SkNx"* %320 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %324, i8* nonnull align 16 %74, i64 16, i1 false) #16
  %325 = bitcast [2 x %"class.(anonymous namespace)::SkNx"]* %319 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 16
  %327 = sub <4 x i32> %282, %326
  store <4 x i32> %327, <4 x i32>* %75, align 16
  store <4 x i32> zeroinitializer, <4 x i32>* %325, align 16
  %328 = getelementptr inbounds [2 x %"class.(anonymous namespace)::SkNx"], [2 x %"class.(anonymous namespace)::SkNx"]* %319, i64 1
  %329 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %15, align 8
  %330 = icmp ult [2 x %"class.(anonymous namespace)::SkNx"]* %328, %329
  %331 = load [2 x %"class.(anonymous namespace)::SkNx"]*, [2 x %"class.(anonymous namespace)::SkNx"]** %13, align 8
  %332 = select i1 %330, [2 x %"class.(anonymous namespace)::SkNx"]* %328, [2 x %"class.(anonymous namespace)::SkNx"]* %331
  store [2 x %"class.(anonymous namespace)::SkNx"]* %332, [2 x %"class.(anonymous namespace)::SkNx"]** %18, align 8
  %333 = bitcast <4 x i32> %308 to <8 x i16>
  %334 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %333, <8 x i16> undef) #16
  %335 = bitcast <16 x i8> %334 to <8 x i16>
  %336 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %335, <8 x i16> undef) #16
  %337 = bitcast <16 x i8> %336 to <4 x i32>
  %338 = extractelement <4 x i32> %337, i32 0
  store i32 %338, i32* %280, align 4
  %339 = getelementptr inbounds i32, i32* %280, i64 %84
  %340 = bitcast i32* %339 to i8*
  tail call void @llvm.prefetch(i8* %340, i32 0, i32 3, i32 1)
  %341 = add nuw nsw i32 %281, 1
  %342 = icmp slt i32 %341, %4
  br i1 %342, label %279, label %343

343:                                              ; preds = %279, %200
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %74) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #16
  %344 = add nuw nsw i32 %105, 1
  %345 = icmp eq i32 %344, %8
  br i1 %345, label %98, label %346

346:                                              ; preds = %343
  %347 = getelementptr inbounds i32, i32* %106, i64 %90
  %348 = getelementptr inbounds i32, i32* %104, i64 %89
  %349 = load i64, i64* %69, align 8
  %350 = load i64, i64* %72, align 8
  %351 = inttoptr i64 %349 to [2 x %"class.(anonymous namespace)::SkNx"]*
  %352 = load i64, i64* %82, align 8
  br label %99
}

declare void @_ZN14SkSpecialImage14MakeFromRasterERK7SkIRectRK8SkBitmapRK14SkSurfaceProps(%class.sk_sp.18* sret, %struct.SkIRect* dereferenceable(16), %class.SkBitmap* dereferenceable(56), %class.SkSurfaceProps* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #9

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #2

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

declare i32 @_ZNK11SkColorInfo13shiftPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #9

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #13

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #14

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

declare zeroext i1 @_ZN18SkImageFilter_Base6Common9unflattenER12SkReadBufferi(%"class.SkImageFilter_Base::Common"*, %class.SkReadBuffer* dereferenceable(136), i32) local_unnamed_addr #2

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { inaccessiblemem_or_argmemonly nounwind }
attributes #14 = { nounwind readnone }
attributes #15 = { builtin nounwind }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN18SkImageFilter_Base6Common8getInputEi: argument 0"}
!5 = distinct !{!5, !"_ZN18SkImageFilter_Base6Common8getInputEi"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN14SkImageFilters4BlurEff10SkTileMode5sk_spI13SkImageFilterERKNS_8CropRectE: argument 0"}
!8 = distinct !{!8, !"_ZN14SkImageFilters4BlurEff10SkTileMode5sk_spI13SkImageFilterERKNS_8CropRectE"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK18SkImageFilter_Base11filterInputEiRKN4skif7ContextEP8SkIPoint: argument 0"}
!11 = distinct !{!11, !"_ZNK18SkImageFilter_Base11filterInputEiRKN4skif7ContextEP8SkIPoint"}
!12 = !{!13, !10}
!13 = distinct !{!13, !14, !"_ZNK4skif12FilterResultILNS_5UsageE0EE14imageAndOffsetEP8SkIPoint: argument 0"}
!14 = distinct !{!14, !"_ZNK4skif12FilterResultILNS_5UsageE0EE14imageAndOffsetEP8SkIPoint"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNK12_GLOBAL__N_117SkBlurImageFilter9gpuFilterERKN4skif7ContextE7SkPointRK5sk_spI14SkSpecialImageE7SkIRectSB_8SkIPointPSC_: argument 0"}
!17 = distinct !{!17, !"_ZNK12_GLOBAL__N_117SkBlurImageFilter9gpuFilterERKN4skif7ContextE7SkPointRK5sk_spI14SkSpecialImageE7SkIRectSB_8SkIPointPSC_"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!20 = distinct !{!20, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN16GrSurfaceContext15readSurfaceViewEv: argument 0"}
!23 = distinct !{!23, !"_ZN16GrSurfaceContext15readSurfaceViewEv"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!26 = distinct !{!26, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZL8cpu_blurRKN4skif7ContextE7SkPointRK5sk_spI14SkSpecialImageE7SkIRectS9_: argument 0"}
!29 = distinct !{!29, !"_ZL8cpu_blurRKN4skif7ContextE7SkPointRK5sk_spI14SkSpecialImageE7SkIRectS9_"}
!30 = !{!31, !28}
!31 = distinct !{!31, !32, !"_ZL22copy_image_with_boundsRKN4skif7ContextERK5sk_spI14SkSpecialImageE7SkIRectS8_: argument 0"}
!32 = distinct !{!32, !"_ZL22copy_image_with_boundsRKN4skif7ContextERK5sk_spI14SkSpecialImageE7SkIRectS8_"}
!33 = !{!31}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!36 = distinct !{!36, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!37 = !{!38, !40, !28}
!38 = distinct !{!38, !39, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!39 = distinct !{!39, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!40 = distinct !{!40, !41, !"_ZNK11SkImageInfo6makeWHEii: argument 0"}
!41 = distinct !{!41, !"_ZNK11SkImageInfo6makeWHEii"}
!42 = !{!38, !40}
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.unroll.disable"}
