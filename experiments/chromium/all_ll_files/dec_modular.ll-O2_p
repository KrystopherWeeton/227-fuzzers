; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_modular.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_modular.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.77", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { i32*, i32*, %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { i32* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.258" }
%"struct.std::__1::__atomic_base.258" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::ModularFrameDecoder" = type { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, %"class.std::__1::vector.31", %"struct.jxl::ANSCode", %"class.std::__1::vector.66", %"struct.jxl::GroupHeader" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.17", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.14" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.13", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane.13" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.26" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.19", i32, i32, i8, i8, [6 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.21" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.jxl::Transform"* }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.33" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.jxl::PropertyDecisionNode"* }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.38", %"class.std::__1::vector.52", %"class.std::__1::vector.59", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.47" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.40" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.42" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.54" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i32*, i32*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { i8*, i8*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.17" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.77", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.84", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.91", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.93" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::ModularStreamId" = type { i32, i64, i64, i64 }
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.230", %"class.std::__1::vector.238", %"class.std::__1::vector.169", float, float, %"class.jxl::Image3", %"class.std::__1::vector.230", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function", %"class.std::__1::vector.245", %"class.std::__1::vector.251", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.259", %"class.std::__1::vector.265", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.279", %"class.std::__1::vector.279", %"class.std::__1::vector.279", [4 x %"class.std::__1::vector.279"], %"class.std::__1::vector.230", %"class.std::__1::vector.279", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.13", %"class.jxl::Plane.98", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.77", %"class.jxl::Plane.98", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.165], i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.98", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.99", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.103" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101", %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.101" = type { float* }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.117" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.106, %"struct.jxl::DctQuantWeightParams", %union.anon.116 }>
%union.anon.106 = type { %"struct.std::__1::array.113", [4 x i8] }
%"struct.std::__1::array.113" = type { [3 x %"struct.std::__1::array.114"] }
%"struct.std::__1::array.114" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.105"] }
%"struct.std::__1::array.105" = type { [17 x float] }
%union.anon.116 = type { i8 }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.122", %"class.jxl::Plane.122", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.122" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.123", %"class.std::__1::vector.137", %"class.std::__1::vector.137" }
%"class.std::__1::vector.123" = type { %"class.std::__1::__vector_base.124" }
%"class.std::__1::__vector_base.124" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.132" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.125", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.127" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.137" = type { %"class.std::__1::__vector_base.138" }
%"class.std::__1::__vector_base.138" = type { i64*, i64*, %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.144", %"class.std::__1::vector.158" }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.153" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.146", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.146" = type { %"class.std::__1::__vector_base.147" }
%"class.std::__1::__vector_base.147" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.148" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.158" = type { %"class.std::__1::__vector_base.159" }
%"class.std::__1::__vector_base.159" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.160" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane.98" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.59"], %"class.std::__1::vector.77", %"class.std::__1::vector.66", i64, i64 }
%struct.anon.165 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.166", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.230", i64 }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.169", %"class.std::__1::vector.176", %"class.std::__1::vector.169", %"class.std::__1::vector.183", %"class.std::__1::vector.191", %"class.std::__1::vector.200", %"class.std::__1::vector.214", %"class.std::__1::vector.66", %"class.std::__1::vector.169", %"class.std::__1::vector.66", i32, i8, %"class.std::__1::vector.66" }
%"class.std::__1::vector.176" = type { %"class.std::__1::__vector_base.177" }
%"class.std::__1::__vector_base.177" = type { i32*, i32*, %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { i32* }
%"class.std::__1::vector.183" = type { %"class.std::__1::__vector_base.184" }
%"class.std::__1::__vector_base.184" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.186" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.185", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.185" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.195" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.193", %"struct.std::__1::array.194", i32, i8, [3 x i8] }>
%"struct.std::__1::array.193" = type { [17 x i32] }
%"struct.std::__1::array.194" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.209" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.202" }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { i16*, i16*, %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { i16* }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.224" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.216", i32, %"class.std::__1::vector.77", %"class.std::__1::vector.217" }
%"struct.std::__1::array.216" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.217" = type { %"class.std::__1::__vector_base.218" }
%"class.std::__1::__vector_base.218" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.219" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.238" = type { %"class.std::__1::__vector_base.239" }
%"class.std::__1::__vector_base.239" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.240" }
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.241" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.std::__1::vector.66"*, %"class.std::__1::vector.66"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.std::__1::vector.66"* }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector.245" = type { %"class.std::__1::__vector_base.246" }
%"class.std::__1::__vector_base.246" = type { float*, float*, %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"class.std::__1::vector.245"*, %"class.std::__1::vector.245"*, %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"class.std::__1::vector.245"* }
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::vector.265" = type { %"class.std::__1::__vector_base.266" }
%"class.std::__1::__vector_base.266" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.267" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.268" }
%"struct.std::__1::__compressed_pair_elem.268" = type { %"class.jxl::FilterPipeline"* }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane" }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.272" }
%"class.std::__1::unique_ptr.272" = type { %"class.std::__1::__compressed_pair.273" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"struct.std::__1::atomic.275"* }
%"struct.std::__1::atomic.275" = type opaque
%"class.std::__1::vector.230" = type { %"class.std::__1::__vector_base.231" }
%"class.std::__1::__vector_base.231" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.279" = type { %"class.std::__1::__vector_base.280" }
%"class.std::__1::__vector_base.280" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.jxl::Image3"* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"class.jxl::Image"*, i32*, %"class.jxl::Image3"*, i32*, i64*, float* }
%"class.jxl::ThreadPool::RunCallState.297" = type { i32 (i64)*, %class.anon.286* }
%class.anon.286 = type { %"class.jxl::Image"*, i32*, %"class.jxl::Image3"*, i32*, i64*, i32*, i32* }
%"class.jxl::ThreadPool::RunCallState.298" = type { i32 (i64)*, %class.anon.287* }
%class.anon.287 = type { %"class.jxl::Image"*, i32*, i8*, i64*, float*, %"class.jxl::Image3"*, i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::Visitor" = type { i32 (...)** }

$_ZN3jxl7Channel6resizeEi = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_ = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_modular.cc\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"exp_bits == 8\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"exp >= 0\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"!fp\00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"ModularIntToFloat\00", align 1
@.str.26 = private unnamed_addr constant [32 x i8] c"ModularIntToFloat_losslessfloat\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"fp || bits < 32\00", align 1
@__const._ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_.options = private unnamed_addr constant %"struct.jxl::ModularOptions" <{ i64 -6148914691236517206, float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.std::__1::vector.77" { %"class.std::__1::__vector_base.78" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.79" { %"struct.std::__1::__compressed_pair_elem.80" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@.ref.tmp = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 15, i32 9, i32 10, i32 11, i32 12, i32 13], align 4
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.34 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@.str.38 = private unnamed_addr constant [51 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_modular.h\00", align 1
@.str.39 = private unnamed_addr constant [39 x i8] c"quant_table_id < DequantMatrices::kNum\00", align 1
@.str.40 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.41 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@_ZN3jxlL31MultiplySumHighwayDispatchTableE = internal unnamed_addr constant [12 x void (i64, i32*, i32*, float, float*)*] [void (i64, i32*, i32*, float, float*)* @_ZN3hwy13FunctionCacheIvJmPKiS2_fPfEE13ChooseAndCallIXadL_ZN3jxlL31MultiplySumHighwayDispatchTableEEEEEvmS2_S2_fS3_, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* @_ZN3jxl6N_AVX311MultiplySumEmPKiS2_fPf, void (i64, i32*, i32*, float, float*)* @_ZN3jxl6N_AVX211MultiplySumEmPKiS2_fPf, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* @_ZN3jxl6N_SSE411MultiplySumEmPKiS2_fPf, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* null, void (i64, i32*, i32*, float, float*)* @_ZN3jxl8N_SCALAR11MultiplySumEmPKiS2_fPf], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL33RgbFromSingleHighwayDispatchTableE = internal unnamed_addr constant [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*] [void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3hwy13FunctionCacheIvJmPKifPN3jxl6Image3IfEEmmEE13ChooseAndCallIXadL_ZNS3_L33RgbFromSingleHighwayDispatchTableEEEEEvmS2_fS6_mm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl6N_AVX313RgbFromSingleEmPKifPNS_6Image3IfEEmm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl6N_AVX213RgbFromSingleEmPKifPNS_6Image3IfEEmm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl6N_SSE413RgbFromSingleEmPKifPNS_6Image3IfEEmm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl8N_SCALAR13RgbFromSingleEmPKifPNS_6Image3IfEEmm], align 16
@_ZN3jxlL36SingleFromSingleHighwayDispatchTableE = internal unnamed_addr constant [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*] [void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3hwy13FunctionCacheIvJmPKifPN3jxl6Image3IfEEmmEE13ChooseAndCallIXadL_ZNS3_L36SingleFromSingleHighwayDispatchTableEEEEEvmS2_fS6_mm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl6N_AVX316SingleFromSingleEmPKifPNS_6Image3IfEEmm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl6N_AVX216SingleFromSingleEmPKifPNS_6Image3IfEEmm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl6N_SSE416SingleFromSingleEmPKifPNS_6Image3IfEEmm, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* null, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)* @_ZN3jxl8N_SCALAR16SingleFromSingleEmPKifPNS_6Image3IfEEmm], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE411MultiplySumEmPKiS2_fPf(i64, i32* noalias nocapture readonly, i32* noalias nocapture readonly, float, float* noalias nocapture) #0 {
  %6 = insertelement <4 x float> undef, float %3, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %5, %10
  %11 = phi i64 [ %23, %10 ], [ 0, %5 ]
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = bitcast i32* %12 to <4 x i32>*
  %14 = load <4 x i32>, <4 x i32>* %13, align 16, !alias.scope !2
  %15 = getelementptr inbounds i32, i32* %2, i64 %11
  %16 = bitcast i32* %15 to <4 x i32>*
  %17 = load <4 x i32>, <4 x i32>* %16, align 16, !alias.scope !5
  %18 = add <4 x i32> %17, %14
  %19 = sitofp <4 x i32> %18 to <4 x float>
  %20 = fmul <4 x float> %7, %19
  %21 = getelementptr inbounds float, float* %4, i64 %11
  %22 = bitcast float* %21 to <4 x float>*
  store <4 x float> %20, <4 x float>* %22, align 16, !alias.scope !8
  %23 = add i64 %11, 4
  %24 = icmp ult i64 %23, %0
  br i1 %24, label %10, label %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE413RgbFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #2 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #12
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #12
  %39 = bitcast i8* %35 to float*
  %40 = insertelement <4 x float> undef, float %2, i32 0
  %41 = shufflevector <4 x float> %40, <4 x float> undef, <4 x i32> zeroinitializer
  %42 = icmp eq i64 %0, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %44, %6
  ret void

44:                                               ; preds = %6, %44
  %45 = phi i64 [ %57, %44 ], [ 0, %6 ]
  %46 = getelementptr inbounds i32, i32* %1, i64 %45
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 16, !alias.scope !11
  %49 = sitofp <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %41, %49
  %51 = getelementptr inbounds float, float* %19, i64 %45
  %52 = bitcast float* %51 to <4 x float>*
  store <4 x float> %50, <4 x float>* %52, align 16, !alias.scope !14
  %53 = getelementptr inbounds float, float* %29, i64 %45
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %50, <4 x float>* %54, align 16, !alias.scope !17
  %55 = getelementptr inbounds float, float* %39, i64 %45
  %56 = bitcast float* %55 to <4 x float>*
  store <4 x float> %50, <4 x float>* %56, align 16, !alias.scope !20
  %57 = add i64 %45, 4
  %58 = icmp ult i64 %57, %0
  br i1 %58, label %44, label %43
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE416SingleFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #2 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 %4, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = insertelement <4 x float> undef, float %2, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = icmp eq i64 %0, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %24, %6
  ret void

24:                                               ; preds = %6, %24
  %25 = phi i64 [ %33, %24 ], [ 0, %6 ]
  %26 = getelementptr inbounds i32, i32* %1, i64 %25
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16, !alias.scope !23
  %29 = sitofp <4 x i32> %28 to <4 x float>
  %30 = fmul <4 x float> %21, %29
  %31 = getelementptr inbounds float, float* %19, i64 %25
  %32 = bitcast float* %31 to <4 x float>*
  store <4 x float> %30, <4 x float>* %32, align 16, !alias.scope !26
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %0
  br i1 %34, label %24, label %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX211MultiplySumEmPKiS2_fPf(i64, i32* noalias nocapture readonly, i32* noalias nocapture readonly, float, float* noalias nocapture) #3 {
  %6 = insertelement <8 x float> undef, float %3, i32 0
  %7 = shufflevector <8 x float> %6, <8 x float> undef, <8 x i32> zeroinitializer
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %5, %10
  %11 = phi i64 [ %23, %10 ], [ 0, %5 ]
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = bitcast i32* %12 to <8 x i32>*
  %14 = load <8 x i32>, <8 x i32>* %13, align 32, !alias.scope !29, !noalias !32
  %15 = getelementptr inbounds i32, i32* %2, i64 %11
  %16 = bitcast i32* %15 to <8 x i32>*
  %17 = load <8 x i32>, <8 x i32>* %16, align 32, !alias.scope !34, !noalias !37
  %18 = add <8 x i32> %17, %14
  %19 = sitofp <8 x i32> %18 to <8 x float>
  %20 = fmul <8 x float> %7, %19
  %21 = getelementptr inbounds float, float* %4, i64 %11
  %22 = bitcast float* %21 to <8 x float>*
  store <8 x float> %20, <8 x float>* %22, align 32, !alias.scope !39
  %23 = add i64 %11, 8
  %24 = icmp ult i64 %23, %0
  br i1 %24, label %10, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX213RgbFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #3 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #12
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #12
  %39 = bitcast i8* %35 to float*
  %40 = insertelement <8 x float> undef, float %2, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = icmp eq i64 %0, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %44, %6
  ret void

44:                                               ; preds = %6, %44
  %45 = phi i64 [ %57, %44 ], [ 0, %6 ]
  %46 = getelementptr inbounds i32, i32* %1, i64 %45
  %47 = bitcast i32* %46 to <8 x i32>*
  %48 = load <8 x i32>, <8 x i32>* %47, align 32, !alias.scope !42, !noalias !45
  %49 = sitofp <8 x i32> %48 to <8 x float>
  %50 = fmul <8 x float> %41, %49
  %51 = getelementptr inbounds float, float* %19, i64 %45
  %52 = bitcast float* %51 to <8 x float>*
  store <8 x float> %50, <8 x float>* %52, align 32, !alias.scope !47
  %53 = getelementptr inbounds float, float* %29, i64 %45
  %54 = bitcast float* %53 to <8 x float>*
  store <8 x float> %50, <8 x float>* %54, align 32, !alias.scope !50
  %55 = getelementptr inbounds float, float* %39, i64 %45
  %56 = bitcast float* %55 to <8 x float>*
  store <8 x float> %50, <8 x float>* %56, align 32, !alias.scope !53
  %57 = add i64 %45, 8
  %58 = icmp ult i64 %57, %0
  br i1 %58, label %44, label %43
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX216SingleFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #3 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 %4, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = insertelement <8 x float> undef, float %2, i32 0
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <8 x i32> zeroinitializer
  %22 = icmp eq i64 %0, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %24, %6
  ret void

24:                                               ; preds = %6, %24
  %25 = phi i64 [ %33, %24 ], [ 0, %6 ]
  %26 = getelementptr inbounds i32, i32* %1, i64 %25
  %27 = bitcast i32* %26 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 32, !alias.scope !56, !noalias !59
  %29 = sitofp <8 x i32> %28 to <8 x float>
  %30 = fmul <8 x float> %21, %29
  %31 = getelementptr inbounds float, float* %19, i64 %25
  %32 = bitcast float* %31 to <8 x float>*
  store <8 x float> %30, <8 x float>* %32, align 32, !alias.scope !61
  %33 = add i64 %25, 8
  %34 = icmp ult i64 %33, %0
  br i1 %34, label %24, label %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX311MultiplySumEmPKiS2_fPf(i64, i32* noalias nocapture readonly, i32* noalias nocapture readonly, float, float* noalias nocapture) #4 {
  %6 = insertelement <16 x float> undef, float %3, i32 0
  %7 = shufflevector <16 x float> %6, <16 x float> undef, <16 x i32> zeroinitializer
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %5, %10
  %11 = phi i64 [ %23, %10 ], [ 0, %5 ]
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = bitcast i32* %12 to <16 x i32>*
  %14 = load <16 x i32>, <16 x i32>* %13, align 64, !alias.scope !64, !noalias !67
  %15 = getelementptr inbounds i32, i32* %2, i64 %11
  %16 = bitcast i32* %15 to <16 x i32>*
  %17 = load <16 x i32>, <16 x i32>* %16, align 64, !alias.scope !69, !noalias !72
  %18 = add <16 x i32> %17, %14
  %19 = sitofp <16 x i32> %18 to <16 x float>
  %20 = fmul <16 x float> %7, %19
  %21 = getelementptr inbounds float, float* %4, i64 %11
  %22 = bitcast float* %21 to <16 x float>*
  store <16 x float> %20, <16 x float>* %22, align 64, !alias.scope !74
  %23 = add i64 %11, 16
  %24 = icmp ult i64 %23, %0
  br i1 %24, label %10, label %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX313RgbFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #4 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #12
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #12
  %39 = bitcast i8* %35 to float*
  %40 = insertelement <16 x float> undef, float %2, i32 0
  %41 = shufflevector <16 x float> %40, <16 x float> undef, <16 x i32> zeroinitializer
  %42 = icmp eq i64 %0, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %44, %6
  ret void

44:                                               ; preds = %6, %44
  %45 = phi i64 [ %57, %44 ], [ 0, %6 ]
  %46 = getelementptr inbounds i32, i32* %1, i64 %45
  %47 = bitcast i32* %46 to <16 x i32>*
  %48 = load <16 x i32>, <16 x i32>* %47, align 64, !alias.scope !77, !noalias !80
  %49 = sitofp <16 x i32> %48 to <16 x float>
  %50 = fmul <16 x float> %41, %49
  %51 = getelementptr inbounds float, float* %19, i64 %45
  %52 = bitcast float* %51 to <16 x float>*
  store <16 x float> %50, <16 x float>* %52, align 64, !alias.scope !82
  %53 = getelementptr inbounds float, float* %29, i64 %45
  %54 = bitcast float* %53 to <16 x float>*
  store <16 x float> %50, <16 x float>* %54, align 64, !alias.scope !85
  %55 = getelementptr inbounds float, float* %39, i64 %45
  %56 = bitcast float* %55 to <16 x float>*
  store <16 x float> %50, <16 x float>* %56, align 64, !alias.scope !88
  %57 = add i64 %45, 16
  %58 = icmp ult i64 %57, %0
  br i1 %58, label %44, label %43
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX316SingleFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #4 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 %4, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = insertelement <16 x float> undef, float %2, i32 0
  %21 = shufflevector <16 x float> %20, <16 x float> undef, <16 x i32> zeroinitializer
  %22 = icmp eq i64 %0, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %24, %6
  ret void

24:                                               ; preds = %6, %24
  %25 = phi i64 [ %33, %24 ], [ 0, %6 ]
  %26 = getelementptr inbounds i32, i32* %1, i64 %25
  %27 = bitcast i32* %26 to <16 x i32>*
  %28 = load <16 x i32>, <16 x i32>* %27, align 64, !alias.scope !91, !noalias !94
  %29 = sitofp <16 x i32> %28 to <16 x float>
  %30 = fmul <16 x float> %21, %29
  %31 = getelementptr inbounds float, float* %19, i64 %25
  %32 = bitcast float* %31 to <16 x float>*
  store <16 x float> %30, <16 x float>* %32, align 64, !alias.scope !96
  %33 = add i64 %25, 16
  %34 = icmp ult i64 %33, %0
  br i1 %34, label %24, label %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR11MultiplySumEmPKiS2_fPf(i64, i32* noalias nocapture readonly, i32* noalias nocapture readonly, float, float* noalias nocapture) #5 {
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %103, label %7

7:                                                ; preds = %5
  %8 = icmp ult i64 %0, 8
  br i1 %8, label %9, label %11

9:                                                ; preds = %101, %7
  %10 = phi i64 [ 0, %7 ], [ %12, %101 ]
  br label %104

11:                                               ; preds = %7
  %12 = and i64 %0, -8
  %13 = insertelement <4 x float> undef, float %3, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %3, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = add i64 %12, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %75, label %22

22:                                               ; preds = %11
  %23 = sub nuw nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %72, %24 ]
  %26 = phi i64 [ %23, %22 ], [ %73, %24 ]
  %27 = getelementptr inbounds i32, i32* %1, i64 %25
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !alias.scope !99
  %30 = getelementptr inbounds i32, i32* %27, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !alias.scope !99
  %33 = getelementptr inbounds i32, i32* %2, i64 %25
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4, !alias.scope !102
  %36 = getelementptr inbounds i32, i32* %33, i64 4
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4, !alias.scope !102
  %39 = add <4 x i32> %35, %29
  %40 = add <4 x i32> %38, %32
  %41 = sitofp <4 x i32> %39 to <4 x float>
  %42 = sitofp <4 x i32> %40 to <4 x float>
  %43 = fmul <4 x float> %14, %41
  %44 = fmul <4 x float> %16, %42
  %45 = getelementptr inbounds float, float* %4, i64 %25
  %46 = bitcast float* %45 to <4 x float>*
  store <4 x float> %43, <4 x float>* %46, align 4, !alias.scope !105
  %47 = getelementptr inbounds float, float* %45, i64 4
  %48 = bitcast float* %47 to <4 x float>*
  store <4 x float> %44, <4 x float>* %48, align 4, !alias.scope !105
  %49 = or i64 %25, 8
  %50 = getelementptr inbounds i32, i32* %1, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4, !alias.scope !99
  %53 = getelementptr inbounds i32, i32* %50, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4, !alias.scope !99
  %56 = getelementptr inbounds i32, i32* %2, i64 %49
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !102
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !102
  %62 = add <4 x i32> %58, %52
  %63 = add <4 x i32> %61, %55
  %64 = sitofp <4 x i32> %62 to <4 x float>
  %65 = sitofp <4 x i32> %63 to <4 x float>
  %66 = fmul <4 x float> %14, %64
  %67 = fmul <4 x float> %16, %65
  %68 = getelementptr inbounds float, float* %4, i64 %49
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %66, <4 x float>* %69, align 4, !alias.scope !105
  %70 = getelementptr inbounds float, float* %68, i64 4
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %67, <4 x float>* %71, align 4, !alias.scope !105
  %72 = add i64 %25, 16
  %73 = add i64 %26, -2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %24, !llvm.loop !108

75:                                               ; preds = %24, %11
  %76 = phi i64 [ 0, %11 ], [ %72, %24 ]
  %77 = icmp eq i64 %20, 0
  br i1 %77, label %101, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds i32, i32* %1, i64 %76
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !99
  %82 = getelementptr inbounds i32, i32* %79, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !99
  %85 = getelementptr inbounds i32, i32* %2, i64 %76
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !alias.scope !102
  %88 = getelementptr inbounds i32, i32* %85, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !102
  %91 = add <4 x i32> %87, %81
  %92 = add <4 x i32> %90, %84
  %93 = sitofp <4 x i32> %91 to <4 x float>
  %94 = sitofp <4 x i32> %92 to <4 x float>
  %95 = fmul <4 x float> %14, %93
  %96 = fmul <4 x float> %16, %94
  %97 = getelementptr inbounds float, float* %4, i64 %76
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %95, <4 x float>* %98, align 4, !alias.scope !105
  %99 = getelementptr inbounds float, float* %97, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %96, <4 x float>* %100, align 4, !alias.scope !105
  br label %101

101:                                              ; preds = %75, %78
  %102 = icmp eq i64 %12, %0
  br i1 %102, label %103, label %9

103:                                              ; preds = %104, %101, %5
  ret void

104:                                              ; preds = %9, %104
  %105 = phi i64 [ %114, %104 ], [ %10, %9 ]
  %106 = getelementptr inbounds i32, i32* %1, i64 %105
  %107 = load i32, i32* %106, align 4, !alias.scope !99
  %108 = getelementptr inbounds i32, i32* %2, i64 %105
  %109 = load i32, i32* %108, align 4, !alias.scope !102
  %110 = add i32 %109, %107
  %111 = sitofp i32 %110 to float
  %112 = fmul float %111, %3
  %113 = getelementptr inbounds float, float* %4, i64 %105
  store float %112, float* %113, align 4, !alias.scope !105
  %114 = add nuw i64 %105, 1
  %115 = icmp eq i64 %114, %0
  br i1 %115, label %103, label %104, !llvm.loop !110
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR13RgbFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #6 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = getelementptr inbounds i8, i8* %21, i64 %9
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #12
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = getelementptr inbounds i8, i8* %31, i64 %9
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #12
  %39 = bitcast i8* %35 to float*
  %40 = icmp eq i64 %0, 0
  br i1 %40, label %170, label %41

41:                                               ; preds = %6
  %42 = icmp ult i64 %0, 8
  br i1 %42, label %43, label %61

43:                                               ; preds = %168, %61, %41
  %44 = phi i64 [ 0, %61 ], [ 0, %41 ], [ %79, %168 ]
  %45 = xor i64 %44, -1
  %46 = and i64 %0, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %57, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i32, i32* %1, i64 %44
  %50 = load i32, i32* %49, align 4, !alias.scope !112
  %51 = sitofp i32 %50 to float
  %52 = fmul float %51, %2
  %53 = getelementptr inbounds float, float* %19, i64 %44
  store float %52, float* %53, align 32, !alias.scope !115
  %54 = getelementptr inbounds float, float* %29, i64 %44
  store float %52, float* %54, align 32, !alias.scope !118
  %55 = getelementptr inbounds float, float* %39, i64 %44
  store float %52, float* %55, align 32, !alias.scope !121
  %56 = or i64 %44, 1
  br label %57

57:                                               ; preds = %43, %48
  %58 = phi i64 [ %44, %43 ], [ %56, %48 ]
  %59 = sub i64 0, %0
  %60 = icmp eq i64 %45, %59
  br i1 %60, label %170, label %171

61:                                               ; preds = %41
  %62 = shl i64 %0, 2
  %63 = add i64 %9, %62
  %64 = getelementptr i8, i8* %11, i64 %63
  %65 = getelementptr i8, i8* %21, i64 %63
  %66 = getelementptr i8, i8* %31, i64 %63
  %67 = icmp ult i8* %15, %65
  %68 = icmp ult i8* %25, %64
  %69 = and i1 %67, %68
  %70 = icmp ult i8* %15, %66
  %71 = icmp ult i8* %35, %64
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult i8* %25, %66
  %75 = icmp ult i8* %35, %65
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  br i1 %77, label %43, label %78

78:                                               ; preds = %61
  %79 = and i64 %0, -8
  %80 = insertelement <4 x float> undef, float %2, i32 0
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <4 x i32> zeroinitializer
  %82 = insertelement <4 x float> undef, float %2, i32 0
  %83 = shufflevector <4 x float> %82, <4 x float> undef, <4 x i32> zeroinitializer
  %84 = add i64 %79, -8
  %85 = lshr exact i64 %84, 3
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 1
  %88 = icmp eq i64 %84, 0
  br i1 %88, label %142, label %89

89:                                               ; preds = %78
  %90 = sub nuw nsw i64 %86, %87
  br label %91

91:                                               ; preds = %91, %89
  %92 = phi i64 [ 0, %89 ], [ %139, %91 ]
  %93 = phi i64 [ %90, %89 ], [ %140, %91 ]
  %94 = getelementptr inbounds i32, i32* %1, i64 %92
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !124
  %97 = getelementptr inbounds i32, i32* %94, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !124
  %100 = sitofp <4 x i32> %96 to <4 x float>
  %101 = sitofp <4 x i32> %99 to <4 x float>
  %102 = fmul <4 x float> %81, %100
  %103 = fmul <4 x float> %83, %101
  %104 = getelementptr inbounds float, float* %19, i64 %92
  %105 = bitcast float* %104 to <4 x float>*
  store <4 x float> %102, <4 x float>* %105, align 64, !alias.scope !127, !noalias !129
  %106 = getelementptr inbounds float, float* %104, i64 4
  %107 = bitcast float* %106 to <4 x float>*
  store <4 x float> %103, <4 x float>* %107, align 16, !alias.scope !127, !noalias !129
  %108 = getelementptr inbounds float, float* %29, i64 %92
  %109 = bitcast float* %108 to <4 x float>*
  store <4 x float> %102, <4 x float>* %109, align 64, !alias.scope !132, !noalias !133
  %110 = getelementptr inbounds float, float* %108, i64 4
  %111 = bitcast float* %110 to <4 x float>*
  store <4 x float> %103, <4 x float>* %111, align 16, !alias.scope !132, !noalias !133
  %112 = getelementptr inbounds float, float* %39, i64 %92
  %113 = bitcast float* %112 to <4 x float>*
  store <4 x float> %102, <4 x float>* %113, align 64, !alias.scope !134
  %114 = getelementptr inbounds float, float* %112, i64 4
  %115 = bitcast float* %114 to <4 x float>*
  store <4 x float> %103, <4 x float>* %115, align 16, !alias.scope !134
  %116 = or i64 %92, 8
  %117 = getelementptr inbounds i32, i32* %1, i64 %116
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !124
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !124
  %123 = sitofp <4 x i32> %119 to <4 x float>
  %124 = sitofp <4 x i32> %122 to <4 x float>
  %125 = fmul <4 x float> %81, %123
  %126 = fmul <4 x float> %83, %124
  %127 = getelementptr inbounds float, float* %19, i64 %116
  %128 = bitcast float* %127 to <4 x float>*
  store <4 x float> %125, <4 x float>* %128, align 32, !alias.scope !127, !noalias !129
  %129 = getelementptr inbounds float, float* %127, i64 4
  %130 = bitcast float* %129 to <4 x float>*
  store <4 x float> %126, <4 x float>* %130, align 16, !alias.scope !127, !noalias !129
  %131 = getelementptr inbounds float, float* %29, i64 %116
  %132 = bitcast float* %131 to <4 x float>*
  store <4 x float> %125, <4 x float>* %132, align 32, !alias.scope !132, !noalias !133
  %133 = getelementptr inbounds float, float* %131, i64 4
  %134 = bitcast float* %133 to <4 x float>*
  store <4 x float> %126, <4 x float>* %134, align 16, !alias.scope !132, !noalias !133
  %135 = getelementptr inbounds float, float* %39, i64 %116
  %136 = bitcast float* %135 to <4 x float>*
  store <4 x float> %125, <4 x float>* %136, align 32, !alias.scope !134
  %137 = getelementptr inbounds float, float* %135, i64 4
  %138 = bitcast float* %137 to <4 x float>*
  store <4 x float> %126, <4 x float>* %138, align 16, !alias.scope !134
  %139 = add i64 %92, 16
  %140 = add i64 %93, -2
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %91, !llvm.loop !135

142:                                              ; preds = %91, %78
  %143 = phi i64 [ 0, %78 ], [ %139, %91 ]
  %144 = icmp eq i64 %87, 0
  br i1 %144, label %168, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds i32, i32* %1, i64 %143
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 4, !alias.scope !124
  %149 = getelementptr inbounds i32, i32* %146, i64 4
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !alias.scope !124
  %152 = sitofp <4 x i32> %148 to <4 x float>
  %153 = sitofp <4 x i32> %151 to <4 x float>
  %154 = fmul <4 x float> %81, %152
  %155 = fmul <4 x float> %83, %153
  %156 = getelementptr inbounds float, float* %19, i64 %143
  %157 = bitcast float* %156 to <4 x float>*
  store <4 x float> %154, <4 x float>* %157, align 32, !alias.scope !127, !noalias !129
  %158 = getelementptr inbounds float, float* %156, i64 4
  %159 = bitcast float* %158 to <4 x float>*
  store <4 x float> %155, <4 x float>* %159, align 16, !alias.scope !127, !noalias !129
  %160 = getelementptr inbounds float, float* %29, i64 %143
  %161 = bitcast float* %160 to <4 x float>*
  store <4 x float> %154, <4 x float>* %161, align 32, !alias.scope !132, !noalias !133
  %162 = getelementptr inbounds float, float* %160, i64 4
  %163 = bitcast float* %162 to <4 x float>*
  store <4 x float> %155, <4 x float>* %163, align 16, !alias.scope !132, !noalias !133
  %164 = getelementptr inbounds float, float* %39, i64 %143
  %165 = bitcast float* %164 to <4 x float>*
  store <4 x float> %154, <4 x float>* %165, align 32, !alias.scope !134
  %166 = getelementptr inbounds float, float* %164, i64 4
  %167 = bitcast float* %166 to <4 x float>*
  store <4 x float> %155, <4 x float>* %167, align 16, !alias.scope !134
  br label %168

168:                                              ; preds = %142, %145
  %169 = icmp eq i64 %79, %0
  br i1 %169, label %170, label %43

170:                                              ; preds = %57, %171, %168, %6
  ret void

171:                                              ; preds = %57, %171
  %172 = phi i64 [ %188, %171 ], [ %58, %57 ]
  %173 = getelementptr inbounds i32, i32* %1, i64 %172
  %174 = load i32, i32* %173, align 4, !alias.scope !112
  %175 = sitofp i32 %174 to float
  %176 = fmul float %175, %2
  %177 = getelementptr inbounds float, float* %19, i64 %172
  store float %176, float* %177, align 4, !alias.scope !115
  %178 = getelementptr inbounds float, float* %29, i64 %172
  store float %176, float* %178, align 4, !alias.scope !118
  %179 = getelementptr inbounds float, float* %39, i64 %172
  store float %176, float* %179, align 4, !alias.scope !121
  %180 = add nuw i64 %172, 1
  %181 = getelementptr inbounds i32, i32* %1, i64 %180
  %182 = load i32, i32* %181, align 4, !alias.scope !112
  %183 = sitofp i32 %182 to float
  %184 = fmul float %183, %2
  %185 = getelementptr inbounds float, float* %19, i64 %180
  store float %184, float* %185, align 4, !alias.scope !115
  %186 = getelementptr inbounds float, float* %29, i64 %180
  store float %184, float* %186, align 4, !alias.scope !118
  %187 = getelementptr inbounds float, float* %39, i64 %180
  store float %184, float* %187, align 4, !alias.scope !121
  %188 = add nuw i64 %172, 2
  %189 = icmp eq i64 %188, %0
  br i1 %189, label %170, label %171, !llvm.loop !136
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR16SingleFromSingleEmPKifPNS_6Image3IfEEmm(i64, i32* noalias nocapture readonly, float, %"class.jxl::Image3"* nocapture readonly, i64, i64) #6 {
  %7 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %5
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 %4, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #12
  %15 = getelementptr inbounds i8, i8* %11, i64 %9
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = icmp eq i64 %0, 0
  br i1 %20, label %93, label %21

21:                                               ; preds = %6
  %22 = icmp ult i64 %0, 8
  br i1 %22, label %23, label %25

23:                                               ; preds = %91, %21
  %24 = phi i64 [ 0, %21 ], [ %26, %91 ]
  br label %94

25:                                               ; preds = %21
  %26 = and i64 %0, -8
  %27 = insertelement <4 x float> undef, float %2, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = insertelement <4 x float> undef, float %2, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = add i64 %26, -8
  %32 = lshr exact i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %31, 0
  br i1 %35, label %73, label %36

36:                                               ; preds = %25
  %37 = sub nuw nsw i64 %33, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %70, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %71, %38 ]
  %41 = getelementptr inbounds i32, i32* %1, i64 %39
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !alias.scope !137
  %44 = getelementptr inbounds i32, i32* %41, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !alias.scope !137
  %47 = sitofp <4 x i32> %43 to <4 x float>
  %48 = sitofp <4 x i32> %46 to <4 x float>
  %49 = fmul <4 x float> %28, %47
  %50 = fmul <4 x float> %30, %48
  %51 = getelementptr inbounds float, float* %19, i64 %39
  %52 = bitcast float* %51 to <4 x float>*
  store <4 x float> %49, <4 x float>* %52, align 64, !alias.scope !140
  %53 = getelementptr inbounds float, float* %51, i64 4
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %50, <4 x float>* %54, align 16, !alias.scope !140
  %55 = or i64 %39, 8
  %56 = getelementptr inbounds i32, i32* %1, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !137
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !137
  %62 = sitofp <4 x i32> %58 to <4 x float>
  %63 = sitofp <4 x i32> %61 to <4 x float>
  %64 = fmul <4 x float> %28, %62
  %65 = fmul <4 x float> %30, %63
  %66 = getelementptr inbounds float, float* %19, i64 %55
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 32, !alias.scope !140
  %68 = getelementptr inbounds float, float* %66, i64 4
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 16, !alias.scope !140
  %70 = add i64 %39, 16
  %71 = add i64 %40, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %38, !llvm.loop !143

73:                                               ; preds = %38, %25
  %74 = phi i64 [ 0, %25 ], [ %70, %38 ]
  %75 = icmp eq i64 %34, 0
  br i1 %75, label %91, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds i32, i32* %1, i64 %74
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !137
  %80 = getelementptr inbounds i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !137
  %83 = sitofp <4 x i32> %79 to <4 x float>
  %84 = sitofp <4 x i32> %82 to <4 x float>
  %85 = fmul <4 x float> %28, %83
  %86 = fmul <4 x float> %30, %84
  %87 = getelementptr inbounds float, float* %19, i64 %74
  %88 = bitcast float* %87 to <4 x float>*
  store <4 x float> %85, <4 x float>* %88, align 32, !alias.scope !140
  %89 = getelementptr inbounds float, float* %87, i64 4
  %90 = bitcast float* %89 to <4 x float>*
  store <4 x float> %86, <4 x float>* %90, align 16, !alias.scope !140
  br label %91

91:                                               ; preds = %73, %76
  %92 = icmp eq i64 %26, %0
  br i1 %92, label %93, label %23

93:                                               ; preds = %94, %91, %6
  ret void

94:                                               ; preds = %23, %94
  %95 = phi i64 [ %101, %94 ], [ %24, %23 ]
  %96 = getelementptr inbounds i32, i32* %1, i64 %95
  %97 = load i32, i32* %96, align 4, !alias.scope !137
  %98 = sitofp i32 %97 to float
  %99 = fmul float %98, %2
  %100 = getelementptr inbounds float, float* %19, i64 %95
  store float %99, float* %100, align 4, !alias.scope !140
  %101 = add nuw i64 %95, 1
  %102 = icmp eq i64 %101, %0
  br i1 %102, label %93, label %94, !llvm.loop !144
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12int_to_floatEPKiPfmii(i32* noalias nocapture readonly, float* noalias nocapture, i64, i32, i32) local_unnamed_addr #6 {
  %6 = icmp eq i32 %3, 32
  br i1 %6, label %7, label %16

7:                                                ; preds = %5
  %8 = icmp eq i32 %4, 8
  br i1 %8, label %12, label %9

9:                                                ; preds = %7
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i32 113, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #12
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

12:                                               ; preds = %7
  %13 = bitcast float* %1 to i8*
  %14 = bitcast i32* %0 to i8*
  %15 = shl i64 %2, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 %15, i1 false)
  br label %82

16:                                               ; preds = %5
  %17 = add nsw i32 %3, -1
  %18 = xor i32 %4, -1
  %19 = add i32 %18, %3
  %20 = sub nsw i32 23, %19
  %21 = icmp eq i64 %2, 0
  br i1 %21, label %82, label %22

22:                                               ; preds = %16
  %23 = add nsw i32 %4, -1
  %24 = shl nsw i32 -1, %23
  %25 = shl nsw i32 -1, %17
  %26 = xor i32 %25, -1
  %27 = shl nsw i32 -1, %19
  %28 = xor i32 %27, -1
  %29 = icmp slt i32 %4, 8
  %30 = add nsw i32 %24, 128
  br label %31

31:                                               ; preds = %79, %22
  %32 = phi i64 [ 0, %22 ], [ %80, %79 ]
  %33 = getelementptr inbounds i32, i32* %0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = lshr i32 %34, %17
  %36 = and i32 %34, %26
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %31
  %39 = icmp eq i32 %35, 0
  %40 = select i1 %39, float 0.000000e+00, float -0.000000e+00
  %41 = getelementptr inbounds float, float* %1, i64 %32
  store float %40, float* %41, align 4
  br label %79

42:                                               ; preds = %31
  %43 = lshr i32 %36, %19
  %44 = and i32 %36, %28
  %45 = shl i32 %44, %20
  %46 = icmp eq i32 %43, 0
  %47 = and i1 %29, %46
  br i1 %47, label %48, label %63

48:                                               ; preds = %42
  %49 = and i32 %45, 8388608
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %58

51:                                               ; preds = %48, %51
  %52 = phi i32 [ %54, %51 ], [ %45, %48 ]
  %53 = phi i32 [ %55, %51 ], [ 0, %48 ]
  %54 = shl i32 %52, 1
  %55 = add nsw i32 %53, -1
  %56 = and i32 %52, 4194304
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %51, label %58

58:                                               ; preds = %51, %48
  %59 = phi i32 [ 0, %48 ], [ %55, %51 ]
  %60 = phi i32 [ %45, %48 ], [ %54, %51 ]
  %61 = add nsw i32 %59, 1
  %62 = and i32 %60, 8388607
  br label %63

63:                                               ; preds = %58, %42
  %64 = phi i32 [ %61, %58 ], [ %43, %42 ]
  %65 = phi i32 [ %62, %58 ], [ %45, %42 ]
  %66 = add i32 %30, %64
  %67 = icmp sgt i32 %66, -1
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i32 148, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)) #12
  %70 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

71:                                               ; preds = %63
  %72 = icmp eq i32 %35, 0
  %73 = select i1 %72, i32 0, i32 -2147483648
  %74 = shl i32 %66, 23
  %75 = or i32 %65, %73
  %76 = or i32 %75, %74
  %77 = getelementptr inbounds float, float* %1, i64 %32
  %78 = bitcast float* %77 to i32*
  store i32 %76, i32* %78, align 4
  br label %79

79:                                               ; preds = %71, %38
  %80 = add nuw i64 %32, 1
  %81 = icmp eq i64 %80, %2
  br i1 %81, label %82, label %31

82:                                               ; preds = %79, %16, %12
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #7

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameDecoder16DecodeGlobalInfoEPNS_9BitReaderERKNS_11FrameHeaderEb(%"class.jxl::ModularFrameDecoder"*, %"class.jxl::BitReader"*, %"struct.jxl::FrameHeader"* nocapture readonly dereferenceable(576), i1 zeroext) local_unnamed_addr #6 align 2 {
  %5 = alloca %"class.jxl::Image", align 8
  %6 = alloca %"struct.jxl::ModularOptions", align 8
  %7 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 1
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 25
  %12 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %12, i64 0, i32 0, i32 7, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %21

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 1
  %20 = select i1 %19, i64 1, i64 3
  br label %21

21:                                               ; preds = %16, %4
  %22 = phi i64 [ 3, %4 ], [ %20, %16 ]
  %23 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ugt i8* %24, %26
  br i1 %27, label %28, label %33, !prof !145

28:                                               ; preds = %21
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #12
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  br label %46

33:                                               ; preds = %21
  %34 = bitcast i8* %24 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %35, %37
  %39 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = or i64 %40, %38
  store i64 %41, i64* %39, align 8
  %42 = sub i64 63, %37
  %43 = lshr i64 %42, 3
  %44 = getelementptr inbounds i8, i8* %24, i64 %43
  store i8* %44, i8** %23, align 8
  %45 = or i64 %37, 56
  store i64 %45, i64* %36, align 8
  br label %46

46:                                               ; preds = %28, %33
  %47 = phi i64 [ %32, %28 ], [ %45, %33 ]
  %48 = phi i64 [ %30, %28 ], [ %41, %33 ]
  %49 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %50 = and i64 %48, 1
  %51 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %52 = add i64 %47, -1
  store i64 %52, i64* %51, align 8
  %53 = lshr i64 %48, 1
  store i64 %53, i64* %49, align 8
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %80, label %55

55:                                               ; preds = %46
  %56 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = mul i64 %57, %22
  %61 = mul i64 %60, %59
  %62 = add i64 %61, 1024
  %63 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 4
  %64 = tail call i32 @_ZN3jxl10DecodeTreeEPNS_9BitReaderEPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEEm(%"class.jxl::BitReader"* %1, %"class.std::__1::vector.31"* %63, i64 %62) #12
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %309

66:                                               ; preds = %55
  %67 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 4, i32 0, i32 1
  %68 = bitcast %"struct.jxl::PropertyDecisionNode"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.31"* %63 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = sdiv exact i64 %72, 40
  %74 = add nsw i64 %73, 1
  %75 = lshr i64 %74, 1
  %76 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 5
  %77 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 6
  %78 = tail call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %1, i64 %75, %"struct.jxl::ANSCode"* %76, %"class.std::__1::vector.66"* %77, i1 zeroext false) #12
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %309

80:                                               ; preds = %66, %46
  %81 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 2
  store i8 %10, i8* %81, align 8
  %82 = select i1 %9, i64 %22, i64 0
  %83 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %12, i64 0, i32 0, i32 17
  %84 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %12, i64 0, i32 0, i32 17, i32 0, i32 1
  %85 = bitcast %"struct.jxl::ExtraChannelInfo"** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.std::__1::vector.91"* %83 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %86, %88
  %90 = sdiv exact i64 %89, 96
  %91 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %12, i64 0, i32 0, i32 3, i32 1
  %92 = load i8, i8* %91, align 8, !range !146
  %93 = icmp eq i8 %92, 0
  %94 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %12, i64 0, i32 0, i32 3, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = icmp ult i32 %95, 32
  %97 = xor i1 %9, true
  %98 = or i1 %96, %97
  br i1 %98, label %108, label %99

99:                                               ; preds = %80
  %100 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 5
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %108, label %103

103:                                              ; preds = %99
  %104 = icmp eq i32 %95, 32
  %105 = and i1 %93, %104
  %106 = icmp ugt i32 %95, 32
  %107 = or i1 %106, %105
  br i1 %107, label %309, label %108

108:                                              ; preds = %103, %80, %99
  %109 = shl nsw i32 -1, %95
  %110 = xor i32 %109, -1
  %111 = select i1 %93, i32 %110, i32 1
  %112 = bitcast %"class.jxl::Image"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %112) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 -86, i64 104, i1 false)
  %113 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = add nsw i64 %90, %82
  %118 = trunc i64 %117 to i32
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %5, i64 %114, i64 %116, i32 %111, i32 %118) #12
  %119 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 5
  %120 = load i32, i32* %119, align 8
  %121 = icmp ne i32 %120, 2
  %122 = or i1 %121, %97
  br i1 %122, label %176, label %123

123:                                              ; preds = %108
  %124 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 7, i32 2
  %125 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %5, i64 0, i32 0, i32 0, i32 0
  %126 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 7, i32 3
  br label %127

127:                                              ; preds = %123, %127
  %128 = phi i64 [ 0, %123 ], [ %174, %127 ]
  %129 = load i8, i8* %124, align 4
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 7, i32 1, i64 %128
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = sub nsw i32 %130, %136
  %138 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %125, align 8
  %139 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %138, i64 %128, i32 3
  store i32 %137, i32* %139, align 8
  %140 = load i8, i8* %126, align 1
  %141 = zext i8 %140 to i32
  %142 = load i32, i32* %131, align 4
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = sub nsw i32 %141, %146
  %148 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %125, align 8
  %149 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %148, i64 %128, i32 4
  store i32 %147, i32* %149, align 4
  %150 = load i64, i64* %113, align 8
  %151 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %125, align 8
  %152 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %128
  %153 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %128, i32 3
  %154 = load i32, i32* %153, align 8
  %155 = shl i32 1, %154
  %156 = sext i32 %155 to i64
  %157 = add i64 %150, -1
  %158 = add i64 %157, %156
  %159 = udiv i64 %158, %156
  %160 = load i64, i64* %115, align 8
  %161 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %128, i32 4
  %162 = load i32, i32* %161, align 4
  %163 = shl i32 1, %162
  %164 = sext i32 %163 to i64
  %165 = add i64 %160, -1
  %166 = add i64 %165, %164
  %167 = udiv i64 %166, %164
  %168 = shl i64 %159, 32
  %169 = ashr exact i64 %168, 32
  %170 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %128, i32 1
  store i64 %169, i64* %170, align 8
  %171 = shl i64 %167, 32
  %172 = ashr exact i64 %171, 32
  %173 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %128, i32 2
  store i64 %172, i64* %173, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %152, i32 0) #12
  %174 = add nuw nsw i64 %128, 1
  %175 = icmp ult i64 %174, %82
  br i1 %175, label %127, label %176

176:                                              ; preds = %127, %108
  %177 = icmp eq i64 %89, 0
  br i1 %177, label %184, label %178

178:                                              ; preds = %176
  %179 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 16, i32 0, i32 0
  %180 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %5, i64 0, i32 0, i32 0, i32 0
  %181 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 2
  %182 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 3
  %183 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %2, i64 0, i32 15
  br label %214

184:                                              ; preds = %214, %176
  %185 = bitcast %"struct.jxl::ModularOptions"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %185) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %185, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_.options to i8*), i64 88, i1 false)
  %186 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 0
  %187 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 1
  store float 5.000000e-01, float* %187, align 8
  %188 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 2
  %189 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 3
  store i32 0, i32* %188, align 4
  %190 = call i8* @_Znwm(i64 32) #18
  %191 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 3, i32 0, i32 1
  %192 = bitcast %"class.std::__1::vector.77"* %189 to i8**
  store i8* %190, i8** %192, align 8
  %193 = getelementptr inbounds i8, i8* %190, i64 32
  %194 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %195 = bitcast i32** %194 to i8**
  store i8* %193, i8** %195, align 8
  %196 = bitcast i32** %191 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %190, i8* align 4 bitcast ([8 x i32]* @.ref.tmp to i8*), i64 32, i1 false) #12
  %197 = ptrtoint i8* %193 to i64
  store i64 %197, i64* %196, align 8
  %198 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 4
  store float 9.600000e+01, float* %198, align 8
  %199 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 6
  store i64 32, i64* %199, align 8
  %200 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 7
  store i32 -1, i32* %200, align 8
  %201 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 8
  store i32 0, i32* %201, align 4
  %202 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 9
  store float 0x3FF028F5C0000000, float* %202, align 8
  %203 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 10
  store i32 2, i32* %203, align 4
  %204 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 11
  store i8 0, i8* %204, align 8
  %205 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 13
  store i32 0, i32* %205, align 4
  %206 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 14
  store i8 0, i8* %206, align 8
  %207 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 16
  %208 = load i64, i64* %207, align 8
  store i64 %208, i64* %186, align 8
  %209 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 7
  %210 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 4
  %211 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 5
  %212 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 6
  %213 = call i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"* %1, %"class.jxl::Image"* nonnull dereferenceable(104) %5, %"struct.jxl::GroupHeader"* %209, i64 0, %"struct.jxl::ModularOptions"* nonnull %6, i32 -2, %"class.std::__1::vector.31"* %210, %"struct.jxl::ANSCode"* %211, %"class.std::__1::vector.66"* %212, i1 zeroext %3) #12
  br i1 %3, label %261, label %259

214:                                              ; preds = %178, %214
  %215 = phi i64 [ %82, %178 ], [ %257, %214 ]
  %216 = phi i64 [ 0, %178 ], [ %256, %214 ]
  %217 = load i32*, i32** %179, align 8
  %218 = getelementptr inbounds i32, i32* %217, i64 %216
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  %221 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %180, align 8
  %222 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %221, i64 %215
  %223 = load i64, i64* %181, align 8
  %224 = add nsw i64 %220, -1
  %225 = add i64 %224, %223
  %226 = udiv i64 %225, %220
  %227 = load i64, i64* %182, align 8
  %228 = add i64 %224, %227
  %229 = udiv i64 %228, %220
  %230 = shl i64 %226, 32
  %231 = ashr exact i64 %230, 32
  %232 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %221, i64 %215, i32 1
  store i64 %231, i64* %232, align 8
  %233 = shl i64 %229, 32
  %234 = ashr exact i64 %233, 32
  %235 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %221, i64 %215, i32 2
  store i64 %234, i64* %235, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %222, i32 0) #12
  %236 = call i64 @llvm.ctlz.i64(i64 %220, i1 true) #12, !range !147
  %237 = xor i64 %236, 63
  %238 = call i64 @llvm.ctpop.i64(i64 %220) #12, !range !147
  %239 = icmp ugt i64 %238, 1
  %240 = zext i1 %239 to i64
  %241 = load i32, i32* %183, align 4
  %242 = call i32 @llvm.ctlz.i32(i32 %241, i1 true) #12, !range !148
  %243 = xor i32 %242, 31
  %244 = zext i32 %243 to i64
  %245 = call i32 @llvm.ctpop.i32(i32 %241) #12, !range !148
  %246 = icmp ugt i32 %245, 1
  %247 = add nuw nsw i64 %237, %240
  %248 = sub nsw i64 %247, %244
  %249 = zext i1 %246 to i64
  %250 = sub nsw i64 %248, %249
  %251 = trunc i64 %250 to i32
  %252 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %180, align 8
  %253 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %252, i64 %215, i32 4
  store i32 %251, i32* %253, align 4
  %254 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %180, align 8
  %255 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %254, i64 %215, i32 3
  store i32 %251, i32* %255, align 8
  %256 = add nuw i64 %216, 1
  %257 = add i64 %215, 1
  %258 = icmp ult i64 %256, %90
  br i1 %258, label %214, label %184

259:                                              ; preds = %184
  %260 = icmp eq i32 %213, 0
  br i1 %260, label %263, label %300

261:                                              ; preds = %184
  %262 = icmp sgt i32 %213, 0
  br i1 %262, label %300, label %263

263:                                              ; preds = %259, %261
  %264 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 3
  store i8 0, i8* %264, align 1
  %265 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %5, i64 0, i32 0, i32 0, i32 1
  %266 = bitcast %"class.jxl::Channel"** %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = bitcast %"class.jxl::Image"* %5 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = icmp eq i64 %267, %269
  br i1 %270, label %273, label %271

271:                                              ; preds = %263
  %272 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %5, i64 0, i32 8
  br label %276

273:                                              ; preds = %293, %263
  %274 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0
  %275 = call dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* %274, %"class.jxl::Image"* nonnull dereferenceable(104) %5) #12
  br label %300

276:                                              ; preds = %271, %293
  %277 = phi i64 [ %269, %271 ], [ %296, %293 ]
  %278 = phi i64 [ 0, %271 ], [ %294, %293 ]
  %279 = inttoptr i64 %277 to %"class.jxl::Channel"*
  %280 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %279, i64 %278
  %281 = load i64, i64* %272, align 8
  %282 = icmp ult i64 %278, %281
  br i1 %282, label %293, label %283

283:                                              ; preds = %276
  %284 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %279, i64 %278, i32 1
  %285 = load i64, i64* %284, align 8
  %286 = load i64, i64* %207, align 8
  %287 = icmp ult i64 %285, %286
  br i1 %287, label %288, label %293

288:                                              ; preds = %283
  %289 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %279, i64 %278, i32 2
  %290 = load i64, i64* %289, align 8
  %291 = icmp ult i64 %290, %286
  br i1 %291, label %292, label %293

292:                                              ; preds = %288
  store i8 1, i8* %264, align 1
  br label %293

293:                                              ; preds = %276, %292, %288, %283
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %280, i32 0)
  %294 = add nuw i64 %278, 1
  %295 = load i64, i64* %266, align 8
  %296 = load i64, i64* %268, align 8
  %297 = sub i64 %295, %296
  %298 = ashr exact i64 %297, 6
  %299 = icmp ult i64 %294, %298
  br i1 %299, label %276, label %273

300:                                              ; preds = %261, %259, %273
  %301 = phi i32 [ %213, %273 ], [ %213, %259 ], [ 1, %261 ]
  %302 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %6, i64 0, i32 3, i32 0, i32 0
  %303 = load i32*, i32** %302, align 8
  %304 = icmp eq i32* %303, null
  br i1 %304, label %308, label %305

305:                                              ; preds = %300
  %306 = ptrtoint i32* %303 to i64
  store i64 %306, i64* %196, align 8
  %307 = bitcast i32* %303 to i8*
  call void @_ZdlPv(i8* %307) #18
  br label %308

308:                                              ; preds = %300, %305
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %185) #12
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %112) #12
  br label %309

309:                                              ; preds = %103, %66, %55, %308
  %310 = phi i32 [ %301, %308 ], [ %64, %55 ], [ %78, %66 ], [ 1, %103 ]
  ret i32 %310
}

declare i32 @_ZN3jxl10DecodeTreeEPNS_9BitReaderEPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEEm(%"class.jxl::BitReader"*, %"class.std::__1::vector.31"*, i64) local_unnamed_addr #7

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.66"*, i1 zeroext) local_unnamed_addr #7

declare void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"*, i64, i64, i32, i32) unnamed_addr #7

declare i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"*, %"class.jxl::Image"* dereferenceable(104), %"struct.jxl::GroupHeader"*, i64, %"struct.jxl::ModularOptions"*, i32, %"class.std::__1::vector.31"*, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.66"*, i1 zeroext) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"*, i32) local_unnamed_addr #6 comdat align 2 {
  %3 = alloca %"class.jxl::Plane.13", align 8
  %4 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, %6
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, %16
  br i1 %19, label %190, label %20

20:                                               ; preds = %10, %13
  %21 = phi i64 [ %12, %10 ], [ %18, %13 ]
  %22 = bitcast %"class.jxl::Plane.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.jxl::Plane.13", %"class.jxl::Plane.13"* %3, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.jxl::Plane.13", %"class.jxl::Plane.13"* %3, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.jxl::Plane.13", %"class.jxl::Plane.13"* %3, i64 0, i32 0, i32 4
  %26 = getelementptr inbounds %"class.jxl::Plane.13", %"class.jxl::Plane.13"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"class.jxl::Plane.13", %"class.jxl::Plane.13"* %3, i64 0, i32 0
  %29 = bitcast %"class.jxl::Plane.13"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %28, i64 %8, i64 %21, i64 4) #12
  %30 = load i32, i32* %4, align 8
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %31, label %35, label %36

35:                                               ; preds = %20
  br i1 %34, label %123, label %37

36:                                               ; preds = %20
  br i1 %34, label %91, label %37

37:                                               ; preds = %35, %36
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 4
  br label %41

41:                                               ; preds = %37, %86
  %42 = phi i64 [ 0, %37 ], [ %87, %86 ]
  %43 = load i64, i64* %27, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %91

45:                                               ; preds = %41
  %46 = load i8*, i8** %39, align 8
  %47 = load i64, i64* %40, align 8
  %48 = mul i64 %47, %42
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = and i64 %50, 63
  %52 = icmp eq i64 %51, 0
  call void @llvm.assume(i1 %52) #12
  %53 = bitcast i8* %49 to i32*
  %54 = load i8*, i8** %26, align 8
  %55 = load i64, i64* %25, align 8
  %56 = mul i64 %55, %42
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  call void @llvm.assume(i1 %60) #12
  %61 = bitcast i8* %57 to i32*
  %62 = load i32, i32* %4, align 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %76, label %64

64:                                               ; preds = %45, %68
  %65 = phi i64 [ %72, %68 ], [ 0, %45 ]
  %66 = load i64, i64* %7, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = getelementptr inbounds i32, i32* %53, i64 %65
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds i32, i32* %61, i64 %65
  store i32 %70, i32* %71, align 4
  %72 = add nuw nsw i64 %65, 1
  %73 = load i32, i32* %4, align 8
  %74 = zext i32 %73 to i64
  %75 = icmp ult i64 %72, %74
  br i1 %75, label %64, label %76

76:                                               ; preds = %64, %68, %45
  %77 = phi i64 [ 0, %45 ], [ %72, %68 ], [ %65, %64 ]
  %78 = load i64, i64* %7, align 8
  %79 = icmp ult i64 %77, %78
  br i1 %79, label %80, label %86

80:                                               ; preds = %76, %80
  %81 = phi i64 [ %83, %80 ], [ %77, %76 ]
  %82 = getelementptr inbounds i32, i32* %61, i64 %81
  store i32 %1, i32* %82, align 4
  %83 = add nuw i64 %81, 1
  %84 = load i64, i64* %7, align 8
  %85 = icmp ult i64 %83, %84
  br i1 %85, label %80, label %86

86:                                               ; preds = %80, %76
  %87 = add nuw nsw i64 %42, 1
  %88 = load i32, i32* %38, align 4
  %89 = zext i32 %88 to i64
  %90 = icmp ult i64 %87, %89
  br i1 %90, label %41, label %91

91:                                               ; preds = %41, %86, %36
  %92 = phi i64 [ 0, %36 ], [ %87, %86 ], [ %42, %41 ]
  %93 = load i64, i64* %27, align 8
  %94 = icmp ult i64 %92, %93
  br i1 %94, label %95, label %173

95:                                               ; preds = %91
  %96 = load i64, i64* %7, align 8
  br label %97

97:                                               ; preds = %95, %112
  %98 = phi i64 [ %113, %112 ], [ %93, %95 ]
  %99 = phi i64 [ %114, %112 ], [ %96, %95 ]
  %100 = phi i64 [ %115, %112 ], [ %92, %95 ]
  %101 = load i8*, i8** %26, align 8
  %102 = load i64, i64* %25, align 8
  %103 = mul i64 %102, %100
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  call void @llvm.assume(i1 %107) #12
  %108 = bitcast i8* %104 to i32*
  %109 = icmp eq i64 %99, 0
  br i1 %109, label %112, label %117

110:                                              ; preds = %117
  %111 = load i64, i64* %27, align 8
  br label %112

112:                                              ; preds = %110, %97
  %113 = phi i64 [ %111, %110 ], [ %98, %97 ]
  %114 = phi i64 [ %121, %110 ], [ 0, %97 ]
  %115 = add nuw i64 %100, 1
  %116 = icmp ult i64 %115, %113
  br i1 %116, label %97, label %173

117:                                              ; preds = %97, %117
  %118 = phi i64 [ %120, %117 ], [ 0, %97 ]
  %119 = getelementptr inbounds i32, i32* %108, i64 %118
  store i32 %1, i32* %119, align 4
  %120 = add nuw i64 %118, 1
  %121 = load i64, i64* %7, align 8
  %122 = icmp ult i64 %120, %121
  br i1 %122, label %117, label %110

123:                                              ; preds = %35
  %124 = load i64, i64* %7, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %173, label %126

126:                                              ; preds = %123
  %127 = load i64, i64* %27, align 8
  %128 = icmp ne i64 %127, 0
  %129 = icmp eq i32 %1, 0
  %130 = and i1 %129, %128
  br i1 %130, label %131, label %138

131:                                              ; preds = %126
  %132 = load i64, i64* %25, align 8
  %133 = load i8*, i8** %26, align 8
  %134 = ptrtoint i8* %133 to i64
  %135 = and i64 %134, 63
  %136 = icmp eq i64 %135, 0
  call void @llvm.assume(i1 %136) #12
  %137 = mul i64 %132, %127
  call void @llvm.memset.p0i8.i64(i8* align 64 %133, i8 0, i64 %137, i1 false)
  br label %173

138:                                              ; preds = %126
  %139 = icmp eq i64 %127, 0
  br i1 %139, label %173, label %140

140:                                              ; preds = %138
  %141 = load i32, i32* %24, align 4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %173, label %143

143:                                              ; preds = %140
  %144 = load i32, i32* %23, align 8
  br label %145

145:                                              ; preds = %160, %143
  %146 = phi i32 [ %141, %143 ], [ %161, %160 ]
  %147 = phi i32 [ %144, %143 ], [ %162, %160 ]
  %148 = phi i64 [ 0, %143 ], [ %163, %160 ]
  %149 = load i8*, i8** %26, align 8
  %150 = load i64, i64* %25, align 8
  %151 = mul i64 %150, %148
  %152 = getelementptr inbounds i8, i8* %149, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  call void @llvm.assume(i1 %155) #12
  %156 = bitcast i8* %152 to i32*
  %157 = icmp eq i32 %147, 0
  br i1 %157, label %160, label %166

158:                                              ; preds = %166
  %159 = load i32, i32* %24, align 4
  br label %160

160:                                              ; preds = %158, %145
  %161 = phi i32 [ %159, %158 ], [ %146, %145 ]
  %162 = phi i32 [ %170, %158 ], [ 0, %145 ]
  %163 = add nuw nsw i64 %148, 1
  %164 = zext i32 %161 to i64
  %165 = icmp ult i64 %163, %164
  br i1 %165, label %145, label %173

166:                                              ; preds = %145, %166
  %167 = phi i64 [ %169, %166 ], [ 0, %145 ]
  %168 = getelementptr inbounds i32, i32* %156, i64 %167
  store i32 %1, i32* %168, align 4
  %169 = add nuw nsw i64 %167, 1
  %170 = load i32, i32* %23, align 8
  %171 = zext i32 %170 to i64
  %172 = icmp ult i64 %169, %171
  br i1 %172, label %166, label %158

173:                                              ; preds = %112, %160, %91, %123, %140, %138, %131
  %174 = bitcast %"class.jxl::Channel"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %174, i8* nonnull align 8 %22, i64 24, i1 false) #12
  %175 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 5
  %176 = getelementptr inbounds %"class.jxl::Plane.13", %"class.jxl::Plane.13"* %3, i64 0, i32 0, i32 5
  %177 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %176, i64 0, i32 0, i32 0, i32 0
  %178 = bitcast %"class.std::__1::unique_ptr"* %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i8* null, i8** %177, align 8
  %180 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %175, i64 0, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = bitcast %"class.std::__1::unique_ptr"* %175 to i64*
  store i64 %179, i64* %182, align 8
  %183 = icmp eq i8* %181, null
  br i1 %183, label %184, label %185

184:                                              ; preds = %173
  store i8* null, i8** %26, align 8
  br label %189

185:                                              ; preds = %173
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #12
  %186 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %185
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %186) #12
  br label %189

189:                                              ; preds = %184, %185, %188
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #12
  br label %190

190:                                              ; preds = %13, %189
  ret void
}

; Function Attrs: nounwind
declare dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"*, %"class.jxl::Image"* dereferenceable(104)) local_unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"*) unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameDecoder11DecodeGroupERKNS_4RectEPNS_9BitReaderEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameDecoder"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::BitReader"*, i32, i32, %"struct.jxl::ModularStreamId"* nocapture readonly dereferenceable(32), i1 zeroext) local_unnamed_addr #6 align 2 {
  %8 = alloca %"class.jxl::Image", align 8
  %9 = alloca %"class.jxl::Channel", align 8
  %10 = alloca %"struct.jxl::ModularOptions", align 8
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %"class.jxl::Image"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 104, i1 false)
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %8, i64 %12, i64 %14, i32 %16, i32 0) #12
  %18 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 8
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %21 = bitcast %"class.jxl::Channel"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.jxl::ModularFrameDecoder"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 6
  %27 = icmp ult i64 %19, %26
  %28 = inttoptr i64 %24 to %"class.jxl::Channel"*
  br i1 %27, label %29, label %44

29:                                               ; preds = %7
  %30 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 16
  %31 = load i64, i64* %30, align 8
  br label %32

32:                                               ; preds = %29, %41
  %33 = phi i64 [ %19, %29 ], [ %42, %41 ]
  %34 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %28, i64 %33, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, %31
  br i1 %36, label %44, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %28, i64 %33, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %31
  br i1 %40, label %44, label %41

41:                                               ; preds = %37
  %42 = add nuw i64 %33, 1
  %43 = icmp ult i64 %42, %26
  br i1 %43, label %32, label %44

44:                                               ; preds = %41, %32, %37, %7
  %45 = phi i64 [ %19, %7 ], [ %33, %37 ], [ %33, %32 ], [ %42, %41 ]
  %46 = icmp ult i64 %45, %26
  br i1 %46, label %47, label %140

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %50 = bitcast %"class.jxl::Channel"* %9 to i8*
  %51 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0
  %52 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 1
  %53 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 2
  %54 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 3
  %55 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 4
  %56 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %58 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 0
  %59 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = bitcast %"class.std::__1::unique_ptr"* %59 to i64*
  %62 = bitcast i64* %52 to i8*
  %63 = bitcast %"class.jxl::Channel"** %56 to i64*
  %64 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = bitcast i32* %54 to i8*
  br label %66

66:                                               ; preds = %47, %131
  %67 = phi %"class.jxl::Channel"* [ %28, %47 ], [ %132, %131 ]
  %68 = phi i64 [ %24, %47 ], [ %133, %131 ]
  %69 = phi i64 [ %22, %47 ], [ %134, %131 ]
  %70 = phi %"class.jxl::Channel"* [ %28, %47 ], [ %139, %131 ]
  %71 = phi i64 [ %45, %47 ], [ %135, %131 ]
  %72 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %70, i64 %71, i32 3
  %73 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %70, i64 %71, i32 4
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %72, align 4
  %76 = icmp slt i32 %74, %75
  %77 = select i1 %76, i32 %74, i32 %75
  %78 = icmp sgt i32 %77, %4
  %79 = icmp slt i32 %77, %3
  %80 = or i1 %78, %79
  br i1 %80, label %131, label %81

81:                                               ; preds = %66
  %82 = load i64, i64* %48, align 8
  %83 = zext i32 %75 to i64
  %84 = lshr i64 %82, %83
  %85 = load i64, i64* %49, align 8
  %86 = zext i32 %74 to i64
  %87 = lshr i64 %85, %86
  %88 = load i64, i64* %11, align 8
  %89 = lshr i64 %88, %83
  %90 = load i64, i64* %13, align 8
  %91 = lshr i64 %90, %86
  %92 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %70, i64 %71, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %70, i64 %71, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %89, %84
  %97 = icmp ugt i64 %96, %93
  %98 = call i64 @llvm.usub.sat.i64(i64 %93, i64 %84) #12
  %99 = select i1 %97, i64 %98, i64 %89
  %100 = add i64 %91, %87
  %101 = icmp ugt i64 %100, %95
  %102 = call i64 @llvm.usub.sat.i64(i64 %95, i64 %87) #12
  %103 = select i1 %101, i64 %102, i64 %91
  %104 = icmp eq i64 %99, 0
  %105 = icmp eq i64 %103, 0
  %106 = or i1 %104, %105
  br i1 %106, label %131, label %107

107:                                              ; preds = %81
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %50) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 64, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %51, i64 %99, i64 %103, i64 4) #12
  store i64 %99, i64* %52, align 8
  store i64 %103, i64* %53, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 16, i1 false)
  %108 = load i32, i32* %72, align 8
  store i32 %108, i32* %54, align 8
  %109 = load i32, i32* %73, align 4
  store i32 %109, i32* %55, align 4
  %110 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %56, align 8
  %111 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %57, align 8
  %112 = icmp ult %"class.jxl::Channel"* %110, %111
  br i1 %112, label %113, label %122

113:                                              ; preds = %107
  %114 = bitcast %"class.jxl::Channel"* %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* nonnull align 8 %50, i64 24, i1 false) #12
  %115 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %110, i64 0, i32 0, i32 0, i32 5
  %116 = load i64, i64* %61, align 8
  store i8* null, i8** %60, align 8
  %117 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %116, i64* %117, align 8
  %118 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %110, i64 0, i32 1
  %119 = bitcast i64* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %62, i64 32, i1 false) #12
  %120 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %110, i64 1
  %121 = ptrtoint %"class.jxl::Channel"* %120 to i64
  store i64 %121, i64* %63, align 8
  br label %123

122:                                              ; preds = %107
  call void @_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector"* nonnull %58, %"class.jxl::Channel"* nonnull dereferenceable(64) %9) #12
  br label %123

123:                                              ; preds = %113, %122
  %124 = load i8*, i8** %64, align 8
  store i8* null, i8** %64, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %127, label %126

126:                                              ; preds = %123
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %124) #12
  br label %127

127:                                              ; preds = %123, %126
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %50) #12
  %128 = load i64, i64* %21, align 8
  %129 = load i64, i64* %23, align 8
  %130 = inttoptr i64 %129 to %"class.jxl::Channel"*
  br label %131

131:                                              ; preds = %127, %81, %66
  %132 = phi %"class.jxl::Channel"* [ %130, %127 ], [ %67, %81 ], [ %67, %66 ]
  %133 = phi i64 [ %129, %127 ], [ %68, %81 ], [ %68, %66 ]
  %134 = phi i64 [ %128, %127 ], [ %69, %81 ], [ %69, %66 ]
  %135 = add nuw i64 %71, 1
  %136 = sub i64 %134, %133
  %137 = ashr exact i64 %136, 6
  %138 = icmp ult i64 %135, %137
  %139 = inttoptr i64 %133 to %"class.jxl::Channel"*
  br i1 %138, label %66, label %140

140:                                              ; preds = %131, %44
  %141 = phi %"class.jxl::Channel"* [ %28, %44 ], [ %132, %131 ]
  %142 = phi i64 [ %24, %44 ], [ %133, %131 ]
  %143 = phi i64 [ %22, %44 ], [ %134, %131 ]
  %144 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 0, i32 0, i32 1
  %145 = bitcast %"class.jxl::Channel"** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %"class.jxl::Image"* %8 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = sub i64 %146, %148
  %150 = ashr exact i64 %149, 6
  %151 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 6
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 7
  store i64 %150, i64* %152, align 8
  br i1 %6, label %153, label %293

153:                                              ; preds = %140
  %154 = sub i64 %143, %142
  %155 = ashr exact i64 %154, 6
  %156 = icmp ult i64 %45, %155
  br i1 %156, label %157, label %595

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %159 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  br label %160

160:                                              ; preds = %157, %285
  %161 = phi i64 [ %142, %157 ], [ %286, %285 ]
  %162 = phi i64 [ %143, %157 ], [ %287, %285 ]
  %163 = phi %"class.jxl::Channel"* [ %141, %157 ], [ %292, %285 ]
  %164 = phi i64 [ %45, %157 ], [ %288, %285 ]
  %165 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %163, i64 %164, i32 3
  %166 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %163, i64 %164, i32 4
  %167 = load i32, i32* %166, align 4
  %168 = load i32, i32* %165, align 4
  %169 = icmp slt i32 %167, %168
  %170 = select i1 %169, i32 %167, i32 %168
  %171 = icmp sgt i32 %170, %4
  %172 = icmp slt i32 %170, %3
  %173 = or i1 %171, %172
  br i1 %173, label %285, label %174

174:                                              ; preds = %160
  %175 = load i64, i64* %158, align 8
  %176 = zext i32 %168 to i64
  %177 = lshr i64 %175, %176
  %178 = load i64, i64* %159, align 8
  %179 = zext i32 %167 to i64
  %180 = lshr i64 %178, %179
  %181 = load i64, i64* %11, align 8
  %182 = lshr i64 %181, %176
  %183 = load i64, i64* %13, align 8
  %184 = lshr i64 %183, %179
  %185 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %163, i64 %164, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %163, i64 %164, i32 2
  %188 = load i64, i64* %187, align 8
  %189 = add i64 %182, %177
  %190 = icmp ugt i64 %189, %186
  %191 = call i64 @llvm.usub.sat.i64(i64 %186, i64 %177) #12
  %192 = select i1 %190, i64 %191, i64 %182
  %193 = add i64 %184, %180
  %194 = icmp ugt i64 %193, %188
  %195 = call i64 @llvm.usub.sat.i64(i64 %188, i64 %180) #12
  %196 = select i1 %194, i64 %195, i64 %184
  %197 = icmp eq i64 %192, 0
  %198 = icmp eq i64 %196, 0
  %199 = or i1 %197, %198
  br i1 %199, label %285, label %200

200:                                              ; preds = %174
  %201 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %163, i64 %164, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %202 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %163, i64 %164, i32 0, i32 0, i32 4
  %203 = shl i64 %192, 2
  %204 = add i64 %196, -1
  %205 = and i64 %196, 3
  %206 = icmp ult i64 %204, 3
  br i1 %206, label %209, label %207

207:                                              ; preds = %200
  %208 = sub i64 %196, %205
  br label %232

209:                                              ; preds = %232, %200
  %210 = phi i64 [ 0, %200 ], [ %282, %232 ]
  %211 = icmp eq i64 %205, 0
  br i1 %211, label %229, label %212

212:                                              ; preds = %209, %212
  %213 = phi i64 [ %226, %212 ], [ %210, %209 ]
  %214 = phi i64 [ %227, %212 ], [ %205, %209 ]
  %215 = add i64 %213, %180
  %216 = load i8*, i8** %201, align 8
  %217 = load i64, i64* %202, align 8
  %218 = mul i64 %217, %215
  %219 = getelementptr inbounds i8, i8* %216, i64 %218
  %220 = ptrtoint i8* %219 to i64
  %221 = and i64 %220, 63
  %222 = icmp eq i64 %221, 0
  call void @llvm.assume(i1 %222) #12
  %223 = bitcast i8* %219 to i32*
  %224 = getelementptr inbounds i32, i32* %223, i64 %177
  %225 = bitcast i32* %224 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %225, i8 0, i64 %203, i1 false)
  %226 = add nuw i64 %213, 1
  %227 = add i64 %214, -1
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %212, !llvm.loop !149

229:                                              ; preds = %212, %209
  %230 = load i64, i64* %21, align 8
  %231 = load i64, i64* %23, align 8
  br label %285

232:                                              ; preds = %232, %207
  %233 = phi i64 [ 0, %207 ], [ %282, %232 ]
  %234 = phi i64 [ %208, %207 ], [ %283, %232 ]
  %235 = add i64 %233, %180
  %236 = load i8*, i8** %201, align 8
  %237 = load i64, i64* %202, align 8
  %238 = mul i64 %237, %235
  %239 = getelementptr inbounds i8, i8* %236, i64 %238
  %240 = ptrtoint i8* %239 to i64
  %241 = and i64 %240, 63
  %242 = icmp eq i64 %241, 0
  call void @llvm.assume(i1 %242) #12
  %243 = bitcast i8* %239 to i32*
  %244 = getelementptr inbounds i32, i32* %243, i64 %177
  %245 = bitcast i32* %244 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %245, i8 0, i64 %203, i1 false)
  %246 = or i64 %233, 1
  %247 = add i64 %246, %180
  %248 = load i8*, i8** %201, align 8
  %249 = load i64, i64* %202, align 8
  %250 = mul i64 %249, %247
  %251 = getelementptr inbounds i8, i8* %248, i64 %250
  %252 = ptrtoint i8* %251 to i64
  %253 = and i64 %252, 63
  %254 = icmp eq i64 %253, 0
  call void @llvm.assume(i1 %254) #12
  %255 = bitcast i8* %251 to i32*
  %256 = getelementptr inbounds i32, i32* %255, i64 %177
  %257 = bitcast i32* %256 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %257, i8 0, i64 %203, i1 false)
  %258 = or i64 %233, 2
  %259 = add i64 %258, %180
  %260 = load i8*, i8** %201, align 8
  %261 = load i64, i64* %202, align 8
  %262 = mul i64 %261, %259
  %263 = getelementptr inbounds i8, i8* %260, i64 %262
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #12
  %267 = bitcast i8* %263 to i32*
  %268 = getelementptr inbounds i32, i32* %267, i64 %177
  %269 = bitcast i32* %268 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %269, i8 0, i64 %203, i1 false)
  %270 = or i64 %233, 3
  %271 = add i64 %270, %180
  %272 = load i8*, i8** %201, align 8
  %273 = load i64, i64* %202, align 8
  %274 = mul i64 %273, %271
  %275 = getelementptr inbounds i8, i8* %272, i64 %274
  %276 = ptrtoint i8* %275 to i64
  %277 = and i64 %276, 63
  %278 = icmp eq i64 %277, 0
  call void @llvm.assume(i1 %278) #12
  %279 = bitcast i8* %275 to i32*
  %280 = getelementptr inbounds i32, i32* %279, i64 %177
  %281 = bitcast i32* %280 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %281, i8 0, i64 %203, i1 false)
  %282 = add nuw i64 %233, 4
  %283 = add i64 %234, -4
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %209, label %232

285:                                              ; preds = %229, %174, %160
  %286 = phi i64 [ %161, %160 ], [ %231, %229 ], [ %161, %174 ]
  %287 = phi i64 [ %162, %160 ], [ %230, %229 ], [ %162, %174 ]
  %288 = add nuw i64 %164, 1
  %289 = sub i64 %287, %286
  %290 = ashr exact i64 %289, 6
  %291 = icmp ult i64 %288, %290
  %292 = inttoptr i64 %286 to %"class.jxl::Channel"*
  br i1 %291, label %160, label %595

293:                                              ; preds = %140
  %294 = bitcast %"struct.jxl::ModularOptions"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %294) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %294, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_.options to i8*), i64 88, i1 false)
  %295 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 0
  store i64 16777215, i64* %295, align 8
  %296 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 1
  store float 5.000000e-01, float* %296, align 8
  %297 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 2
  %298 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3
  store i32 0, i32* %297, align 4
  %299 = call i8* @_Znwm(i64 32) #18
  %300 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3, i32 0, i32 1
  %301 = bitcast %"class.std::__1::vector.77"* %298 to i8**
  store i8* %299, i8** %301, align 8
  %302 = getelementptr inbounds i8, i8* %299, i64 32
  %303 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %304 = bitcast i32** %303 to i8**
  store i8* %302, i8** %304, align 8
  %305 = bitcast i32** %300 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %299, i8* align 4 bitcast ([8 x i32]* @.ref.tmp to i8*), i64 32, i1 false) #12
  %306 = ptrtoint i8* %302 to i64
  store i64 %306, i64* %305, align 8
  %307 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 4
  store float 9.600000e+01, float* %307, align 8
  %308 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 6
  store i64 32, i64* %308, align 8
  %309 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 7
  store i32 -1, i32* %309, align 8
  %310 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 8
  store i32 0, i32* %310, align 4
  %311 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 9
  store float 0x3FF028F5C0000000, float* %311, align 8
  %312 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 10
  store i32 2, i32* %312, align 4
  %313 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 11
  store i8 0, i8* %313, align 8
  %314 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 13
  store i32 0, i32* %314, align 4
  %315 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 14
  store i8 0, i8* %315, align 8
  %316 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 0
  %317 = load i32, i32* %316, align 8
  switch i32 %317, label %359 [
    i32 5, label %345
    i32 1, label %318
    i32 2, label %322
    i32 3, label %329
    i32 4, label %337
  ]

318:                                              ; preds = %293
  %319 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %320 = load i64, i64* %319, align 8
  %321 = add i64 %320, 1
  br label %359

322:                                              ; preds = %293
  %323 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 15
  %324 = load i64, i64* %323, align 8
  %325 = add i64 %324, 1
  %326 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %327 = load i64, i64* %326, align 8
  %328 = add i64 %325, %327
  br label %359

329:                                              ; preds = %293
  %330 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 15
  %331 = load i64, i64* %330, align 8
  %332 = shl i64 %331, 1
  %333 = or i64 %332, 1
  %334 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %335 = load i64, i64* %334, align 8
  %336 = add i64 %333, %335
  br label %359

337:                                              ; preds = %293
  %338 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 15
  %339 = load i64, i64* %338, align 8
  %340 = mul i64 %339, 3
  %341 = add i64 %340, 1
  %342 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 1
  %343 = load i64, i64* %342, align 8
  %344 = add i64 %341, %343
  br label %359

345:                                              ; preds = %293
  %346 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 15
  %347 = load i64, i64* %346, align 8
  %348 = mul i64 %347, 3
  %349 = add i64 %348, 18
  %350 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 14
  %351 = load i64, i64* %350, align 8
  %352 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 3
  %353 = load i64, i64* %352, align 8
  %354 = mul i64 %353, %351
  %355 = add i64 %349, %354
  %356 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %357 = load i64, i64* %356, align 8
  %358 = add i64 %355, %357
  br label %359

359:                                              ; preds = %293, %318, %322, %329, %337, %345
  %360 = phi i64 [ %358, %345 ], [ %344, %337 ], [ %336, %329 ], [ %328, %322 ], [ %321, %318 ], [ 0, %293 ]
  %361 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 4
  %362 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 5
  %363 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 6
  %364 = call i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"* %2, %"class.jxl::Image"* nonnull dereferenceable(104) %8, %"struct.jxl::GroupHeader"* null, i64 %360, %"struct.jxl::ModularOptions"* nonnull %10, i32 -1, %"class.std::__1::vector.31"* %361, %"struct.jxl::ANSCode"* %362, %"class.std::__1::vector.66"* %363, i1 zeroext false) #12
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %366, label %586

366:                                              ; preds = %359
  %367 = load i64, i64* %21, align 8
  %368 = load i64, i64* %23, align 8
  %369 = sub i64 %367, %368
  %370 = ashr exact i64 %369, 6
  %371 = icmp ult i64 %45, %370
  br i1 %371, label %372, label %586

372:                                              ; preds = %366
  %373 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %374 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %375 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 0, i32 0, i32 0
  br label %376

376:                                              ; preds = %372, %578
  %377 = phi i64 [ %368, %372 ], [ %582, %578 ]
  %378 = phi i32 [ 0, %372 ], [ %579, %578 ]
  %379 = phi i64 [ %45, %372 ], [ %580, %578 ]
  %380 = inttoptr i64 %377 to %"class.jxl::Channel"*
  %381 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %380, i64 %379, i32 3
  %382 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %380, i64 %379, i32 4
  %383 = load i32, i32* %382, align 4
  %384 = load i32, i32* %381, align 4
  %385 = icmp slt i32 %383, %384
  %386 = select i1 %385, i32 %383, i32 %384
  %387 = icmp sgt i32 %386, %4
  %388 = icmp slt i32 %386, %3
  %389 = or i1 %387, %388
  br i1 %389, label %578, label %390

390:                                              ; preds = %376
  %391 = load i64, i64* %373, align 8
  %392 = zext i32 %384 to i64
  %393 = lshr i64 %391, %392
  %394 = load i64, i64* %374, align 8
  %395 = zext i32 %383 to i64
  %396 = lshr i64 %394, %395
  %397 = load i64, i64* %11, align 8
  %398 = lshr i64 %397, %392
  %399 = load i64, i64* %13, align 8
  %400 = lshr i64 %399, %395
  %401 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %380, i64 %379, i32 1
  %402 = load i64, i64* %401, align 8
  %403 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %380, i64 %379, i32 2
  %404 = load i64, i64* %403, align 8
  %405 = add i64 %398, %393
  %406 = icmp ugt i64 %405, %402
  %407 = call i64 @llvm.usub.sat.i64(i64 %402, i64 %393) #12
  %408 = select i1 %406, i64 %407, i64 %398
  %409 = add i64 %400, %396
  %410 = icmp ugt i64 %409, %404
  %411 = call i64 @llvm.usub.sat.i64(i64 %404, i64 %396) #12
  %412 = select i1 %410, i64 %411, i64 %400
  %413 = icmp eq i64 %408, 0
  %414 = icmp eq i64 %412, 0
  %415 = or i1 %413, %414
  br i1 %415, label %578, label %416

416:                                              ; preds = %390
  %417 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %380, i64 %379, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %418 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %380, i64 %379, i32 0, i32 0, i32 4
  %419 = sext i32 %378 to i64
  %420 = shl nsw i64 %393, 2
  %421 = shl i64 %408, 2
  %422 = add i64 %421, %420
  %423 = add i64 %408, -8
  %424 = lshr i64 %423, 3
  %425 = add nuw nsw i64 %424, 1
  %426 = icmp ult i64 %408, 8
  %427 = and i64 %408, -8
  %428 = and i64 %425, 3
  %429 = icmp ult i64 %423, 24
  %430 = sub nsw i64 %425, %428
  %431 = icmp eq i64 %428, 0
  %432 = icmp eq i64 %408, %427
  %433 = and i64 %408, 3
  %434 = icmp eq i64 %433, 0
  br label %437

435:                                              ; preds = %556
  %436 = add nsw i32 %378, 1
  br label %578

437:                                              ; preds = %416, %556
  %438 = phi i64 [ 0, %416 ], [ %557, %556 ]
  %439 = add i64 %438, %396
  %440 = load i8*, i8** %417, align 8
  %441 = load i64, i64* %418, align 8
  %442 = mul i64 %441, %439
  %443 = getelementptr inbounds i8, i8* %440, i64 %442
  %444 = ptrtoint i8* %443 to i64
  %445 = and i64 %444, 63
  %446 = icmp eq i64 %445, 0
  call void @llvm.assume(i1 %446) #12
  %447 = bitcast i8* %443 to i32*
  %448 = getelementptr inbounds i32, i32* %447, i64 %393
  %449 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %375, align 8
  %450 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %449, i64 %419, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %451 = load i8*, i8** %450, align 8
  %452 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %449, i64 %419, i32 0, i32 0, i32 4
  %453 = load i64, i64* %452, align 8
  %454 = mul i64 %453, %438
  %455 = getelementptr inbounds i8, i8* %451, i64 %454
  %456 = ptrtoint i8* %455 to i64
  %457 = and i64 %456, 63
  %458 = icmp eq i64 %457, 0
  call void @llvm.assume(i1 %458) #12
  %459 = bitcast i8* %455 to i32*
  br i1 %426, label %460, label %476

460:                                              ; preds = %555, %476, %437
  %461 = phi i64 [ 0, %476 ], [ 0, %437 ], [ %427, %555 ]
  %462 = xor i64 %461, -1
  %463 = add i64 %408, %462
  br i1 %434, label %473, label %464

464:                                              ; preds = %460, %464
  %465 = phi i64 [ %470, %464 ], [ %461, %460 ]
  %466 = phi i64 [ %471, %464 ], [ %433, %460 ]
  %467 = getelementptr inbounds i32, i32* %459, i64 %465
  %468 = load i32, i32* %467, align 4
  %469 = getelementptr inbounds i32, i32* %448, i64 %465
  store i32 %468, i32* %469, align 4
  %470 = add nuw i64 %465, 1
  %471 = add i64 %466, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %464, !llvm.loop !151

473:                                              ; preds = %464, %460
  %474 = phi i64 [ %461, %460 ], [ %470, %464 ]
  %475 = icmp ult i64 %463, 3
  br i1 %475, label %556, label %559

476:                                              ; preds = %437
  %477 = getelementptr i8, i8* %440, i64 %420
  %478 = getelementptr i8, i8* %477, i64 %442
  %479 = getelementptr i8, i8* %440, i64 %422
  %480 = getelementptr i8, i8* %479, i64 %442
  %481 = getelementptr i8, i8* %451, i64 %421
  %482 = mul i64 %453, %438
  %483 = getelementptr i8, i8* %481, i64 %482
  %484 = icmp ult i8* %478, %483
  %485 = icmp ult i8* %455, %480
  %486 = and i1 %484, %485
  br i1 %486, label %460, label %487

487:                                              ; preds = %476
  br i1 %429, label %537, label %488

488:                                              ; preds = %487, %488
  %489 = phi i64 [ %534, %488 ], [ 0, %487 ]
  %490 = phi i64 [ %535, %488 ], [ %430, %487 ]
  %491 = getelementptr inbounds i32, i32* %459, i64 %489
  %492 = bitcast i32* %491 to <4 x i32>*
  %493 = load <4 x i32>, <4 x i32>* %492, align 64, !alias.scope !152
  %494 = getelementptr inbounds i32, i32* %491, i64 4
  %495 = bitcast i32* %494 to <4 x i32>*
  %496 = load <4 x i32>, <4 x i32>* %495, align 16, !alias.scope !152
  %497 = getelementptr inbounds i32, i32* %448, i64 %489
  %498 = bitcast i32* %497 to <4 x i32>*
  store <4 x i32> %493, <4 x i32>* %498, align 4, !alias.scope !155, !noalias !152
  %499 = getelementptr inbounds i32, i32* %497, i64 4
  %500 = bitcast i32* %499 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %500, align 4, !alias.scope !155, !noalias !152
  %501 = or i64 %489, 8
  %502 = getelementptr inbounds i32, i32* %459, i64 %501
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 32, !alias.scope !152
  %505 = getelementptr inbounds i32, i32* %502, i64 4
  %506 = bitcast i32* %505 to <4 x i32>*
  %507 = load <4 x i32>, <4 x i32>* %506, align 16, !alias.scope !152
  %508 = getelementptr inbounds i32, i32* %448, i64 %501
  %509 = bitcast i32* %508 to <4 x i32>*
  store <4 x i32> %504, <4 x i32>* %509, align 4, !alias.scope !155, !noalias !152
  %510 = getelementptr inbounds i32, i32* %508, i64 4
  %511 = bitcast i32* %510 to <4 x i32>*
  store <4 x i32> %507, <4 x i32>* %511, align 4, !alias.scope !155, !noalias !152
  %512 = or i64 %489, 16
  %513 = getelementptr inbounds i32, i32* %459, i64 %512
  %514 = bitcast i32* %513 to <4 x i32>*
  %515 = load <4 x i32>, <4 x i32>* %514, align 64, !alias.scope !152
  %516 = getelementptr inbounds i32, i32* %513, i64 4
  %517 = bitcast i32* %516 to <4 x i32>*
  %518 = load <4 x i32>, <4 x i32>* %517, align 16, !alias.scope !152
  %519 = getelementptr inbounds i32, i32* %448, i64 %512
  %520 = bitcast i32* %519 to <4 x i32>*
  store <4 x i32> %515, <4 x i32>* %520, align 4, !alias.scope !155, !noalias !152
  %521 = getelementptr inbounds i32, i32* %519, i64 4
  %522 = bitcast i32* %521 to <4 x i32>*
  store <4 x i32> %518, <4 x i32>* %522, align 4, !alias.scope !155, !noalias !152
  %523 = or i64 %489, 24
  %524 = getelementptr inbounds i32, i32* %459, i64 %523
  %525 = bitcast i32* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 32, !alias.scope !152
  %527 = getelementptr inbounds i32, i32* %524, i64 4
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 16, !alias.scope !152
  %530 = getelementptr inbounds i32, i32* %448, i64 %523
  %531 = bitcast i32* %530 to <4 x i32>*
  store <4 x i32> %526, <4 x i32>* %531, align 4, !alias.scope !155, !noalias !152
  %532 = getelementptr inbounds i32, i32* %530, i64 4
  %533 = bitcast i32* %532 to <4 x i32>*
  store <4 x i32> %529, <4 x i32>* %533, align 4, !alias.scope !155, !noalias !152
  %534 = add i64 %489, 32
  %535 = add i64 %490, -4
  %536 = icmp eq i64 %535, 0
  br i1 %536, label %537, label %488, !llvm.loop !157

537:                                              ; preds = %488, %487
  %538 = phi i64 [ 0, %487 ], [ %534, %488 ]
  br i1 %431, label %555, label %539

539:                                              ; preds = %537, %539
  %540 = phi i64 [ %552, %539 ], [ %538, %537 ]
  %541 = phi i64 [ %553, %539 ], [ %428, %537 ]
  %542 = getelementptr inbounds i32, i32* %459, i64 %540
  %543 = bitcast i32* %542 to <4 x i32>*
  %544 = load <4 x i32>, <4 x i32>* %543, align 32, !alias.scope !152
  %545 = getelementptr inbounds i32, i32* %542, i64 4
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 16, !alias.scope !152
  %548 = getelementptr inbounds i32, i32* %448, i64 %540
  %549 = bitcast i32* %548 to <4 x i32>*
  store <4 x i32> %544, <4 x i32>* %549, align 4, !alias.scope !155, !noalias !152
  %550 = getelementptr inbounds i32, i32* %548, i64 4
  %551 = bitcast i32* %550 to <4 x i32>*
  store <4 x i32> %547, <4 x i32>* %551, align 4, !alias.scope !155, !noalias !152
  %552 = add i64 %540, 8
  %553 = add i64 %541, -1
  %554 = icmp eq i64 %553, 0
  br i1 %554, label %555, label %539, !llvm.loop !158

555:                                              ; preds = %539, %537
  br i1 %432, label %556, label %460

556:                                              ; preds = %473, %559, %555
  %557 = add nuw i64 %438, 1
  %558 = icmp eq i64 %557, %412
  br i1 %558, label %435, label %437

559:                                              ; preds = %473, %559
  %560 = phi i64 [ %576, %559 ], [ %474, %473 ]
  %561 = getelementptr inbounds i32, i32* %459, i64 %560
  %562 = load i32, i32* %561, align 4
  %563 = getelementptr inbounds i32, i32* %448, i64 %560
  store i32 %562, i32* %563, align 4
  %564 = add nuw i64 %560, 1
  %565 = getelementptr inbounds i32, i32* %459, i64 %564
  %566 = load i32, i32* %565, align 4
  %567 = getelementptr inbounds i32, i32* %448, i64 %564
  store i32 %566, i32* %567, align 4
  %568 = add nuw i64 %560, 2
  %569 = getelementptr inbounds i32, i32* %459, i64 %568
  %570 = load i32, i32* %569, align 4
  %571 = getelementptr inbounds i32, i32* %448, i64 %568
  store i32 %570, i32* %571, align 4
  %572 = add nuw i64 %560, 3
  %573 = getelementptr inbounds i32, i32* %459, i64 %572
  %574 = load i32, i32* %573, align 4
  %575 = getelementptr inbounds i32, i32* %448, i64 %572
  store i32 %574, i32* %575, align 4
  %576 = add nuw i64 %560, 4
  %577 = icmp eq i64 %576, %408
  br i1 %577, label %556, label %559, !llvm.loop !159

578:                                              ; preds = %435, %390, %376
  %579 = phi i32 [ %378, %376 ], [ %436, %435 ], [ %378, %390 ]
  %580 = add nuw i64 %379, 1
  %581 = load i64, i64* %21, align 8
  %582 = load i64, i64* %23, align 8
  %583 = sub i64 %581, %582
  %584 = ashr exact i64 %583, 6
  %585 = icmp ult i64 %580, %584
  br i1 %585, label %376, label %586

586:                                              ; preds = %578, %366, %359
  %587 = phi i32 [ 1, %359 ], [ 0, %366 ], [ 0, %578 ]
  %588 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3, i32 0, i32 0
  %589 = load i32*, i32** %588, align 8
  %590 = icmp eq i32* %589, null
  br i1 %590, label %594, label %591

591:                                              ; preds = %586
  %592 = ptrtoint i32* %589 to i64
  store i64 %592, i64* %305, align 8
  %593 = bitcast i32* %589 to i8*
  call void @_ZdlPv(i8* %593) #18
  br label %594

594:                                              ; preds = %586, %591
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %294) #12
  br label %595

595:                                              ; preds = %285, %153, %594
  %596 = phi i32 [ %587, %594 ], [ 0, %153 ], [ 0, %285 ]
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %17) #12
  ret i32 %596
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameDecoder14DecodeVarDCTDCEmPNS_9BitReaderEPNS_18PassesDecoderStateE(%"class.jxl::ModularFrameDecoder"*, i64, %"class.jxl::BitReader"*, %"struct.jxl::PassesDecoderState"*) local_unnamed_addr #6 align 2 {
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = alloca %"class.jxl::Image", align 8
  %7 = alloca %"struct.jxl::ModularOptions", align 8
  %8 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  %9 = bitcast %"class.jxl::Rect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 1
  %15 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 12
  %17 = load i64, i64* %16, align 8, !noalias !160
  %18 = urem i64 %1, %17
  %19 = udiv i64 %1, %17
  %20 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 16
  %21 = load i64, i64* %20, align 8, !noalias !160
  %22 = mul i64 %21, %18
  %23 = mul i64 %21, %19
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 8
  %25 = load i64, i64* %24, align 8, !noalias !160
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %15, i64 0, i32 2, i32 9
  %27 = load i64, i64* %26, align 8, !noalias !160
  store i64 %22, i64* %10, align 8, !alias.scope !160
  store i64 %23, i64* %11, align 8, !alias.scope !160
  %28 = add i64 %22, %21
  %29 = icmp ugt i64 %28, %25
  %30 = tail call i64 @llvm.usub.sat.i64(i64 %25, i64 %22) #12
  %31 = select i1 %29, i64 %30, i64 %21
  store i64 %31, i64* %12, align 8, !alias.scope !160
  %32 = add i64 %23, %21
  %33 = icmp ugt i64 %32, %27
  %34 = tail call i64 @llvm.usub.sat.i64(i64 %27, i64 %23) #12
  %35 = select i1 %33, i64 %34, i64 %21
  store i64 %35, i64* %13, align 8, !alias.scope !160
  %36 = bitcast %"class.jxl::Image"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %36) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 104, i1 false)
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %6, i64 %31, i64 %35, i32 131072, i32 3) #12
  %37 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %6, i64 0, i32 4
  store i32 -131072, i32* %37, align 8
  %38 = add i64 %1, 1
  %39 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ugt i8* %40, %42
  br i1 %43, label %44, label %47, !prof !145

44:                                               ; preds = %4
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #12
  %45 = load i8*, i8** %39, align 8
  %46 = load i8*, i8** %41, align 8
  br label %60

47:                                               ; preds = %4
  %48 = bitcast i8* %40 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = shl i64 %49, %51
  %53 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = or i64 %54, %52
  store i64 %55, i64* %53, align 8
  %56 = sub i64 63, %51
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds i8, i8* %40, i64 %57
  store i8* %58, i8** %39, align 8
  %59 = or i64 %51, 56
  store i64 %59, i64* %50, align 8
  br label %60

60:                                               ; preds = %44, %47
  %61 = phi i8* [ %46, %44 ], [ %42, %47 ]
  %62 = phi i8* [ %45, %44 ], [ %58, %47 ]
  %63 = icmp ugt i8* %62, %61
  br i1 %63, label %64, label %69, !prof !145

64:                                               ; preds = %60
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #12
  %65 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %68 = load i64, i64* %67, align 8
  br label %82

69:                                               ; preds = %60
  %70 = bitcast i8* %62 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = shl i64 %71, %73
  %75 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = or i64 %76, %74
  store i64 %77, i64* %75, align 8
  %78 = sub i64 63, %73
  %79 = lshr i64 %78, 3
  %80 = getelementptr inbounds i8, i8* %62, i64 %79
  store i8* %80, i8** %39, align 8
  %81 = or i64 %73, 56
  store i64 %81, i64* %72, align 8
  br label %82

82:                                               ; preds = %64, %69
  %83 = phi i64 [ %68, %64 ], [ %81, %69 ]
  %84 = phi i64 [ %66, %64 ], [ %77, %69 ]
  %85 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %86 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %87 = add i64 %83, -2
  store i64 %87, i64* %86, align 8
  %88 = lshr i64 %84, 2
  store i64 %88, i64* %85, align 8
  %89 = bitcast %"struct.jxl::ModularOptions"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %89) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %89, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_.options to i8*), i64 88, i1 false)
  %90 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 0
  store i64 16777215, i64* %90, align 8
  %91 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 1
  store float 5.000000e-01, float* %91, align 8
  %92 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 2
  %93 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 3
  store i32 0, i32* %92, align 4
  %94 = call i8* @_Znwm(i64 32) #18
  %95 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 3, i32 0, i32 1
  %96 = bitcast %"class.std::__1::vector.77"* %93 to i8**
  store i8* %94, i8** %96, align 8
  %97 = getelementptr inbounds i8, i8* %94, i64 32
  %98 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %99 = bitcast i32** %98 to i8**
  store i8* %97, i8** %99, align 8
  %100 = bitcast i32** %95 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %94, i8* align 4 bitcast ([8 x i32]* @.ref.tmp to i8*), i64 32, i1 false) #12
  %101 = ptrtoint i8* %97 to i64
  store i64 %101, i64* %100, align 8
  %102 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 4
  store float 9.600000e+01, float* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 6
  store i64 32, i64* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 7
  store i32 -1, i32* %104, align 8
  %105 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 8
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 9
  store float 0x3FF028F5C0000000, float* %106, align 8
  %107 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 10
  store i32 2, i32* %107, align 4
  %108 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 11
  store i8 0, i8* %108, align 8
  %109 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 13
  store i32 0, i32* %109, align 4
  %110 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 14
  store i8 0, i8* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %6, i64 0, i32 0, i32 0, i32 0
  %112 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %111, align 8
  %113 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %112, i64 1
  %114 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %115 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %114, i64 0, i32 1, i32 7, i32 2
  %116 = load i8, i8* %115, align 4
  %117 = zext i8 %116 to i64
  %118 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %114, i64 0, i32 1, i32 7, i32 1, i64 0
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i64
  %124 = sub nsw i64 %117, %123
  %125 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %112, i64 1, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = lshr i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %129 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %128, i64 0, i32 1, i32 7, i32 3
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %128, i64 0, i32 1, i32 7, i32 1, i64 0
  %133 = load i32, i32* %132, align 4
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = sub nsw i64 %131, %137
  %139 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %112, i64 1, i32 2
  %140 = load i64, i64* %139, align 8
  %141 = lshr i64 %140, %138
  store i64 %141, i64* %139, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %113, i32 0)
  %142 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %111, align 8
  %143 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %144 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %143, i64 0, i32 1, i32 7, i32 2
  %145 = load i8, i8* %144, align 4
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %143, i64 0, i32 1, i32 7, i32 1, i64 1
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = sub nsw i64 %146, %152
  %154 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 0, i32 1
  %155 = load i64, i64* %154, align 8
  %156 = lshr i64 %155, %153
  store i64 %156, i64* %154, align 8
  %157 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %158 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %157, i64 0, i32 1, i32 7, i32 3
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %157, i64 0, i32 1, i32 7, i32 1, i64 1
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = sub nsw i64 %160, %166
  %168 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 0, i32 2
  %169 = load i64, i64* %168, align 8
  %170 = lshr i64 %169, %167
  store i64 %170, i64* %168, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %142, i32 0)
  %171 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %111, align 8
  %172 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %171, i64 2
  %173 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %174 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %173, i64 0, i32 1, i32 7, i32 2
  %175 = load i8, i8* %174, align 4
  %176 = zext i8 %175 to i64
  %177 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %173, i64 0, i32 1, i32 7, i32 1, i64 2
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i64
  %183 = sub nsw i64 %176, %182
  %184 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %171, i64 2, i32 1
  %185 = load i64, i64* %184, align 8
  %186 = lshr i64 %185, %183
  store i64 %186, i64* %184, align 8
  %187 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %188 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %187, i64 0, i32 1, i32 7, i32 3
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i64
  %191 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %187, i64 0, i32 1, i32 7, i32 1, i64 2
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %193
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i64
  %197 = sub nsw i64 %190, %196
  %198 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %171, i64 2, i32 2
  %199 = load i64, i64* %198, align 8
  %200 = lshr i64 %199, %197
  store i64 %200, i64* %198, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %172, i32 0)
  %201 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 4
  %202 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 5
  %203 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 6
  %204 = call i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"* %2, %"class.jxl::Image"* nonnull dereferenceable(104) %6, %"struct.jxl::GroupHeader"* null, i64 %38, %"struct.jxl::ModularOptions"* nonnull %7, i32 0, %"class.std::__1::vector.31"* %201, %"struct.jxl::ANSCode"* %202, %"class.std::__1::vector.66"* %203, i1 zeroext false) #12
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %223

206:                                              ; preds = %82
  %207 = trunc i64 %84 to i32
  %208 = and i32 %207, 3
  %209 = shl i32 1, %208
  %210 = sitofp i32 %209 to float
  %211 = fdiv float 1.000000e+00, %210
  %212 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 13
  %213 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 12
  %214 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %14, align 8
  %215 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %214, i64 0, i32 5, i32 0, i64 0
  %216 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %214, i64 0, i32 8, i32 2, i64 0
  %217 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %8, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %217, align 8
  %218 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %8, i64 0, i32 1
  %219 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %214, i64 0, i32 1, i32 7, i32 1
  %220 = bitcast [3 x i32]* %218 to i8*
  %221 = bitcast [3 x i32]* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %221, i64 14, i1 false) #12
  %222 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %214, i64 0, i32 15
  call void @_ZN3jxl9DequantDCERKNS_4RectEPNS_6Image3IfEEPNS_5PlaneIhEERKNS_5ImageEPKffSD_NS_22YCbCrChromaSubsamplingERKNS_11BlockCtxMapE(%"class.jxl::Rect"* nonnull dereferenceable(32) %5, %"class.jxl::Image3"* %212, %"class.jxl::Plane.98"* %213, %"class.jxl::Image"* nonnull dereferenceable(104) %6, float* %215, float %211, float* %216, %"struct.jxl::YCbCrChromaSubsampling"* nonnull %8, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %222) #12
  br label %223

223:                                              ; preds = %82, %206
  %224 = phi i32 [ 0, %206 ], [ 1, %82 ]
  %225 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %7, i64 0, i32 3, i32 0, i32 0
  %226 = load i32*, i32** %225, align 8
  %227 = icmp eq i32* %226, null
  br i1 %227, label %231, label %228

228:                                              ; preds = %223
  %229 = ptrtoint i32* %226 to i64
  store i64 %229, i64* %100, align 8
  %230 = bitcast i32* %226 to i8*
  call void @_ZdlPv(i8* %230) #18
  br label %231

231:                                              ; preds = %223, %228
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %89) #12
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %36) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12
  ret i32 %224
}

declare void @_ZN3jxl9DequantDCERKNS_4RectEPNS_6Image3IfEEPNS_5PlaneIhEERKNS_5ImageEPKffSD_NS_22YCbCrChromaSubsamplingERKNS_11BlockCtxMapE(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"*, %"class.jxl::Plane.98"*, %"class.jxl::Image"* dereferenceable(104), float*, float, float*, %"struct.jxl::YCbCrChromaSubsampling"*, %"struct.jxl::BlockCtxMap"* dereferenceable(136)) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #6 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameDecoder16DecodeAcMetadataEmPNS_9BitReaderEPNS_18PassesDecoderStateE(%"class.jxl::ModularFrameDecoder"*, i64, %"class.jxl::BitReader"*, %"struct.jxl::PassesDecoderState"*) local_unnamed_addr #6 align 2 {
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = alloca %"class.jxl::Image", align 8
  %7 = alloca %"class.jxl::Channel", align 8
  %8 = alloca %"class.jxl::Channel", align 8
  %9 = alloca %"class.jxl::Channel", align 8
  %10 = alloca %"struct.jxl::ModularOptions", align 8
  %11 = bitcast %"class.jxl::Rect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %14 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  %16 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 1
  %17 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %17, i64 0, i32 2, i32 12
  %19 = load i64, i64* %18, align 8, !noalias !163
  %20 = urem i64 %1, %19
  %21 = udiv i64 %1, %19
  %22 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %17, i64 0, i32 2, i32 16
  %23 = load i64, i64* %22, align 8, !noalias !163
  %24 = mul i64 %23, %20
  %25 = mul i64 %23, %21
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %17, i64 0, i32 2, i32 8
  %27 = load i64, i64* %26, align 8, !noalias !163
  %28 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %17, i64 0, i32 2, i32 9
  %29 = load i64, i64* %28, align 8, !noalias !163
  store i64 %24, i64* %12, align 8, !alias.scope !163
  store i64 %25, i64* %13, align 8, !alias.scope !163
  %30 = add i64 %24, %23
  %31 = icmp ugt i64 %30, %27
  %32 = tail call i64 @llvm.usub.sat.i64(i64 %27, i64 %24) #12
  %33 = select i1 %31, i64 %32, i64 %23
  store i64 %33, i64* %14, align 8, !alias.scope !163
  %34 = add i64 %25, %23
  %35 = icmp ugt i64 %34, %29
  %36 = tail call i64 @llvm.usub.sat.i64(i64 %29, i64 %25) #12
  %37 = select i1 %35, i64 %36, i64 %23
  store i64 %37, i64* %15, align 8, !alias.scope !163
  %38 = mul i64 %33, %37
  %39 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ugt i8* %40, %42
  br i1 %43, label %44, label %47, !prof !145

44:                                               ; preds = %4
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #12
  %45 = load i8*, i8** %39, align 8
  %46 = load i8*, i8** %41, align 8
  br label %60

47:                                               ; preds = %4
  %48 = bitcast i8* %40 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = shl i64 %49, %51
  %53 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = or i64 %54, %52
  store i64 %55, i64* %53, align 8
  %56 = sub i64 63, %51
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds i8, i8* %40, i64 %57
  store i8* %58, i8** %39, align 8
  %59 = or i64 %51, 56
  store i64 %59, i64* %50, align 8
  br label %60

60:                                               ; preds = %44, %47
  %61 = phi i8* [ %46, %44 ], [ %42, %47 ]
  %62 = phi i8* [ %45, %44 ], [ %58, %47 ]
  %63 = tail call i64 @llvm.ctlz.i64(i64 %38, i1 true) #12, !range !147
  %64 = xor i64 %63, 63
  %65 = tail call i64 @llvm.ctpop.i64(i64 %38) #12, !range !147
  %66 = icmp ugt i64 %65, 1
  %67 = zext i1 %66 to i64
  %68 = add nuw nsw i64 %64, %67
  %69 = icmp ugt i8* %62, %61
  br i1 %69, label %70, label %75, !prof !145

70:                                               ; preds = %60
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #12
  %71 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %74 = load i64, i64* %73, align 8
  br label %88

75:                                               ; preds = %60
  %76 = bitcast i8* %62 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = shl i64 %77, %79
  %81 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = or i64 %82, %80
  store i64 %83, i64* %81, align 8
  %84 = sub i64 63, %79
  %85 = lshr i64 %84, 3
  %86 = getelementptr inbounds i8, i8* %62, i64 %85
  store i8* %86, i8** %39, align 8
  %87 = or i64 %79, 56
  store i64 %87, i64* %78, align 8
  br label %88

88:                                               ; preds = %70, %75
  %89 = phi i64 [ %74, %70 ], [ %87, %75 ]
  %90 = phi i64 [ %72, %70 ], [ %83, %75 ]
  %91 = shl nsw i64 -1, %68
  %92 = xor i64 %91, -1
  %93 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %94 = and i64 %90, %92
  %95 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %96 = sub i64 %89, %68
  store i64 %96, i64* %95, align 8
  %97 = lshr i64 %90, %68
  store i64 %97, i64* %93, align 8
  %98 = add i64 %94, 1
  %99 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 15
  %100 = load i64, i64* %99, align 8
  %101 = shl i64 %100, 1
  %102 = or i64 %101, 1
  %103 = add i64 %102, %1
  %104 = bitcast %"class.jxl::Image"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %104) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 -86, i64 104, i1 false)
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %6, i64 %33, i64 %37, i32 255, i32 4) #12
  %105 = lshr i64 %24, 3
  %106 = lshr i64 %25, 3
  %107 = add i64 %33, 7
  %108 = lshr i64 %107, 3
  %109 = add i64 %37, 7
  %110 = lshr i64 %109, 3
  %111 = bitcast %"class.jxl::Channel"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %111) #12
  %112 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %112, i64 %108, i64 %110, i64 4) #12
  %113 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 1
  store i64 %108, i64* %113, align 8
  %114 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 2
  store i64 %110, i64* %114, align 8
  %115 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 3
  %116 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 4
  %117 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 5
  %118 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 6
  %119 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 0, i32 0>, <4 x i32>* %119, align 8
  %120 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %6, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %120, align 8
  %122 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 1
  store i64 %108, i64* %122, align 8
  %123 = load i64, i64* %114, align 8
  %124 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 2
  store i64 %123, i64* %124, align 8
  %125 = load i32, i32* %115, align 8
  %126 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 3
  store i32 %125, i32* %126, align 8
  %127 = load i32, i32* %116, align 4
  %128 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 4
  store i32 %127, i32* %128, align 4
  %129 = load i32, i32* %117, align 8
  %130 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 5
  store i32 %129, i32* %130, align 8
  %131 = load i32, i32* %118, align 4
  %132 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 6
  store i32 %131, i32* %132, align 4
  %133 = bitcast %"class.jxl::Channel"* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* nonnull align 8 %111, i64 24, i1 false) #12
  %134 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %121, i64 0, i32 0, i32 0, i32 5
  %135 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0, i32 5
  %136 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %135, i64 0, i32 0, i32 0, i32 0
  %137 = bitcast %"class.std::__1::unique_ptr"* %135 to i64*
  %138 = load i64, i64* %137, align 8
  store i8* null, i8** %136, align 8
  %139 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %134, i64 0, i32 0, i32 0, i32 0
  %140 = load i8*, i8** %139, align 8
  %141 = bitcast %"class.std::__1::unique_ptr"* %134 to i64*
  store i64 %138, i64* %141, align 8
  %142 = icmp eq i8* %140, null
  br i1 %142, label %144, label %143

143:                                              ; preds = %88
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %140) #12
  br label %144

144:                                              ; preds = %88, %143
  %145 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  store i8* null, i8** %145, align 8
  %147 = icmp eq i8* %146, null
  br i1 %147, label %149, label %148

148:                                              ; preds = %144
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %146) #12
  br label %149

149:                                              ; preds = %144, %148
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %111) #12
  %150 = bitcast %"class.jxl::Channel"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %150) #12
  %151 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %151, i64 %108, i64 %110, i64 4) #12
  %152 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 1
  store i64 %108, i64* %152, align 8
  %153 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 2
  store i64 %110, i64* %153, align 8
  %154 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 3
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 0, i32 0>, <4 x i32>* %155, align 8
  %156 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %120, align 8
  %157 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %156, i64 1
  %158 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %156, i64 1, i32 1
  store i64 %108, i64* %158, align 8
  %159 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %156, i64 1, i32 2
  store i64 %110, i64* %159, align 8
  %160 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %156, i64 1, i32 3
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 0, i32 0>, <4 x i32>* %161, align 8
  %162 = bitcast %"class.jxl::Channel"* %157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* nonnull align 8 %150, i64 24, i1 false) #12
  %163 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %156, i64 1, i32 0, i32 0, i32 5
  %164 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5
  %165 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %164, i64 0, i32 0, i32 0, i32 0
  %166 = bitcast %"class.std::__1::unique_ptr"* %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i8* null, i8** %165, align 8
  %168 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %163, i64 0, i32 0, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  %170 = bitcast %"class.std::__1::unique_ptr"* %163 to i64*
  store i64 %167, i64* %170, align 8
  %171 = icmp eq i8* %169, null
  br i1 %171, label %172, label %174

172:                                              ; preds = %149
  %173 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %173, align 8
  br label %180

174:                                              ; preds = %149
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %169) #12
  %175 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %177, align 8
  %178 = icmp eq i8* %176, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %174
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %176) #12
  br label %180

180:                                              ; preds = %172, %174, %179
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %150) #12
  %181 = bitcast %"class.jxl::Channel"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %181) #12
  %182 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %182, i64 %98, i64 2, i64 4) #12
  %183 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 1
  store i64 %98, i64* %183, align 8
  %184 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 2
  store i64 2, i64* %184, align 8
  %185 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 3
  %186 = bitcast i32* %185 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 16, i1 false)
  %187 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %120, align 8
  %188 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %187, i64 2
  %189 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %187, i64 2, i32 1
  store i64 %98, i64* %189, align 8
  %190 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %187, i64 2, i32 2
  store i64 2, i64* %190, align 8
  %191 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %187, i64 2, i32 3
  %192 = bitcast %"class.jxl::Channel"* %188 to i8*
  %193 = bitcast i32* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %193, i8 0, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* nonnull align 8 %181, i64 24, i1 false) #12
  %194 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %187, i64 2, i32 0, i32 0, i32 5
  %195 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5
  %196 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %195, i64 0, i32 0, i32 0, i32 0
  %197 = bitcast %"class.std::__1::unique_ptr"* %195 to i64*
  %198 = load i64, i64* %197, align 8
  store i8* null, i8** %196, align 8
  %199 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %194, i64 0, i32 0, i32 0, i32 0
  %200 = load i8*, i8** %199, align 8
  %201 = bitcast %"class.std::__1::unique_ptr"* %194 to i64*
  store i64 %198, i64* %201, align 8
  %202 = icmp eq i8* %200, null
  br i1 %202, label %203, label %205

203:                                              ; preds = %180
  %204 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %204, align 8
  br label %211

205:                                              ; preds = %180
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %200) #12
  %206 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %208, align 8
  %209 = icmp eq i8* %207, null
  br i1 %209, label %211, label %210

210:                                              ; preds = %205
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %207) #12
  br label %211

211:                                              ; preds = %203, %205, %210
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %181) #12
  %212 = bitcast %"struct.jxl::ModularOptions"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %212) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %212, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_.options to i8*), i64 88, i1 false)
  %213 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 0
  store i64 16777215, i64* %213, align 8
  %214 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 1
  store float 5.000000e-01, float* %214, align 8
  %215 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 2
  %216 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3
  store i32 0, i32* %215, align 4
  %217 = call i8* @_Znwm(i64 32) #18
  %218 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3, i32 0, i32 1
  %219 = bitcast %"class.std::__1::vector.77"* %216 to i8**
  store i8* %217, i8** %219, align 8
  %220 = getelementptr inbounds i8, i8* %217, i64 32
  %221 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %222 = bitcast i32** %221 to i8**
  store i8* %220, i8** %222, align 8
  %223 = bitcast i32** %218 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %217, i8* align 4 bitcast ([8 x i32]* @.ref.tmp to i8*), i64 32, i1 false) #12
  %224 = ptrtoint i8* %220 to i64
  store i64 %224, i64* %223, align 8
  %225 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 4
  store float 9.600000e+01, float* %225, align 8
  %226 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 6
  store i64 32, i64* %226, align 8
  %227 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 7
  store i32 -1, i32* %227, align 8
  %228 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 8
  store i32 0, i32* %228, align 4
  %229 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 9
  store float 0x3FF028F5C0000000, float* %229, align 8
  %230 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 10
  store i32 2, i32* %230, align 4
  %231 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 11
  store i8 0, i8* %231, align 8
  %232 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 13
  store i32 0, i32* %232, align 4
  %233 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 14
  store i8 0, i8* %233, align 8
  %234 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 4
  %235 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 5
  %236 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 6
  %237 = call i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"* %2, %"class.jxl::Image"* nonnull dereferenceable(104) %6, %"struct.jxl::GroupHeader"* null, i64 %103, %"struct.jxl::ModularOptions"* nonnull %10, i32 -1, %"class.std::__1::vector.31"* %234, %"struct.jxl::ANSCode"* %235, %"class.std::__1::vector.66"* %236, i1 zeroext false) #12
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %677

239:                                              ; preds = %211
  %240 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %120, align 8
  %241 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %240, i64 0, i32 0, i32 0, i32 0
  %242 = load i32, i32* %241, align 8
  %243 = zext i32 %242 to i64
  %244 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %240, i64 0, i32 0, i32 0, i32 1
  %245 = load i32, i32* %244, align 4
  %246 = zext i32 %245 to i64
  %247 = icmp eq i64 %108, %243
  %248 = icmp eq i64 %110, %246
  %249 = and i1 %247, %248
  br i1 %249, label %250, label %270

250:                                              ; preds = %239
  %251 = icmp eq i32 %245, 0
  br i1 %251, label %348, label %252

252:                                              ; preds = %250
  %253 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %240, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %254 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %240, i64 0, i32 0, i32 0, i32 4
  %255 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %256 = load i8*, i8** %255, align 8, !alias.scope !166
  %257 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 8, i32 0, i32 0, i32 4
  %258 = load i64, i64* %257, align 8, !alias.scope !166
  %259 = icmp ugt i64 %108, 1
  %260 = select i1 %259, i64 %108, i64 1
  %261 = icmp ugt i64 %108, 1
  %262 = select i1 %261, i64 %108, i64 1
  %263 = add nuw nsw i64 %262, %105
  %264 = mul i64 %258, %106
  %265 = add i64 %263, %264
  %266 = shl nuw nsw i64 %262, 2
  %267 = icmp ult i64 %260, 8
  %268 = and i64 %260, 2305843009213693944
  %269 = icmp eq i64 %260, %268
  br label %273

270:                                              ; preds = %239
  %271 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.40, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.41, i64 0, i64 0)) #12, !noalias !166
  %272 = call zeroext i1 @_ZN3jxl5AbortEv() #17, !noalias !166
  unreachable

273:                                              ; preds = %330, %252
  %274 = phi i64 [ %108, %252 ], [ %331, %330 ]
  %275 = phi i64 [ 0, %252 ], [ %332, %330 ]
  %276 = mul i64 %258, %275
  %277 = load i8*, i8** %253, align 8, !noalias !166
  %278 = load i64, i64* %254, align 8, !noalias !166
  %279 = mul i64 %278, %275
  %280 = getelementptr inbounds i8, i8* %277, i64 %279
  %281 = ptrtoint i8* %280 to i64
  %282 = and i64 %281, 63
  %283 = icmp eq i64 %282, 0
  call void @llvm.assume(i1 %283) #12, !noalias !166
  %284 = bitcast i8* %280 to i32*
  %285 = add i64 %275, %106
  %286 = mul i64 %285, %258
  %287 = getelementptr inbounds i8, i8* %256, i64 %286
  %288 = ptrtoint i8* %287 to i64
  %289 = and i64 %288, 63
  %290 = icmp eq i64 %289, 0
  call void @llvm.assume(i1 %290) #12, !noalias !166
  %291 = getelementptr inbounds i8, i8* %287, i64 %105
  %292 = icmp eq i64 %274, 0
  br i1 %292, label %330, label %293

293:                                              ; preds = %273
  br i1 %267, label %294, label %296

294:                                              ; preds = %329, %296, %293
  %295 = phi i64 [ 0, %296 ], [ 0, %293 ], [ %268, %329 ]
  br label %334

296:                                              ; preds = %293
  %297 = add i64 %265, %276
  %298 = getelementptr i8, i8* %256, i64 %297
  %299 = getelementptr i8, i8* %277, i64 %266
  %300 = mul i64 %278, %275
  %301 = getelementptr i8, i8* %299, i64 %300
  %302 = icmp ult i8* %291, %301
  %303 = icmp ult i8* %280, %298
  %304 = and i1 %302, %303
  br i1 %304, label %294, label %305

305:                                              ; preds = %296, %305
  %306 = phi i64 [ %327, %305 ], [ 0, %296 ]
  %307 = getelementptr inbounds i32, i32* %284, i64 %306
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 32, !alias.scope !169, !noalias !166
  %310 = getelementptr inbounds i32, i32* %307, i64 4
  %311 = bitcast i32* %310 to <4 x i32>*
  %312 = load <4 x i32>, <4 x i32>* %311, align 16, !alias.scope !169, !noalias !166
  %313 = icmp sgt <4 x i32> %309, <i32 -128, i32 -128, i32 -128, i32 -128>
  %314 = icmp sgt <4 x i32> %312, <i32 -128, i32 -128, i32 -128, i32 -128>
  %315 = select <4 x i1> %313, <4 x i32> %309, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %316 = select <4 x i1> %314, <4 x i32> %312, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %317 = icmp slt <4 x i32> %315, <i32 127, i32 127, i32 127, i32 127>
  %318 = icmp slt <4 x i32> %316, <i32 127, i32 127, i32 127, i32 127>
  %319 = select <4 x i1> %317, <4 x i32> %315, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %320 = select <4 x i1> %318, <4 x i32> %316, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %321 = trunc <4 x i32> %319 to <4 x i8>
  %322 = trunc <4 x i32> %320 to <4 x i8>
  %323 = getelementptr inbounds i8, i8* %291, i64 %306
  %324 = bitcast i8* %323 to <4 x i8>*
  store <4 x i8> %321, <4 x i8>* %324, align 1, !alias.scope !172, !noalias !174
  %325 = getelementptr inbounds i8, i8* %323, i64 4
  %326 = bitcast i8* %325 to <4 x i8>*
  store <4 x i8> %322, <4 x i8>* %326, align 1, !alias.scope !172, !noalias !174
  %327 = add i64 %306, 8
  %328 = icmp eq i64 %327, %268
  br i1 %328, label %329, label %305, !llvm.loop !175

329:                                              ; preds = %305
  br i1 %269, label %330, label %294

330:                                              ; preds = %334, %329, %273
  %331 = phi i64 [ 0, %273 ], [ %108, %329 ], [ %108, %334 ]
  %332 = add nuw i64 %275, 1
  %333 = icmp ult i64 %332, %110
  br i1 %333, label %273, label %346

334:                                              ; preds = %294, %334
  %335 = phi i64 [ %344, %334 ], [ %295, %294 ]
  %336 = getelementptr inbounds i32, i32* %284, i64 %335
  %337 = load i32, i32* %336, align 4, !noalias !166
  %338 = icmp sgt i32 %337, -128
  %339 = select i1 %338, i32 %337, i32 -128
  %340 = icmp slt i32 %339, 127
  %341 = select i1 %340, i32 %339, i32 127
  %342 = trunc i32 %341 to i8
  %343 = getelementptr inbounds i8, i8* %291, i64 %335
  store i8 %342, i8* %343, align 1, !noalias !166
  %344 = add nuw nsw i64 %335, 1
  %345 = icmp ult i64 %344, %108
  br i1 %345, label %334, label %330, !llvm.loop !176

346:                                              ; preds = %330
  %347 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %120, align 8
  br label %348

348:                                              ; preds = %346, %250
  %349 = phi %"class.jxl::Channel"* [ %347, %346 ], [ %240, %250 ]
  %350 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %349, i64 1, i32 0, i32 0, i32 0
  %351 = load i32, i32* %350, align 8
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %349, i64 1, i32 0, i32 0, i32 1
  %354 = load i32, i32* %353, align 4
  %355 = zext i32 %354 to i64
  %356 = icmp eq i64 %108, %352
  %357 = icmp eq i64 %110, %355
  %358 = and i1 %356, %357
  br i1 %358, label %359, label %379

359:                                              ; preds = %348
  %360 = icmp eq i32 %354, 0
  br i1 %360, label %455, label %361

361:                                              ; preds = %359
  %362 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %349, i64 1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %363 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %349, i64 1, i32 0, i32 0, i32 4
  %364 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %365 = load i8*, i8** %364, align 8, !alias.scope !177
  %366 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 8, i32 1, i32 0, i32 4
  %367 = load i64, i64* %366, align 8, !alias.scope !177
  %368 = icmp ugt i64 %108, 1
  %369 = select i1 %368, i64 %108, i64 1
  %370 = icmp ugt i64 %108, 1
  %371 = select i1 %370, i64 %108, i64 1
  %372 = add nuw nsw i64 %371, %105
  %373 = mul i64 %367, %106
  %374 = add i64 %372, %373
  %375 = shl nuw nsw i64 %371, 2
  %376 = icmp ult i64 %369, 8
  %377 = and i64 %369, 2305843009213693944
  %378 = icmp eq i64 %369, %377
  br label %382

379:                                              ; preds = %348
  %380 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.40, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.41, i64 0, i64 0)) #12, !noalias !177
  %381 = call zeroext i1 @_ZN3jxl5AbortEv() #17, !noalias !177
  unreachable

382:                                              ; preds = %439, %361
  %383 = phi i64 [ %108, %361 ], [ %440, %439 ]
  %384 = phi i64 [ 0, %361 ], [ %441, %439 ]
  %385 = mul i64 %367, %384
  %386 = load i8*, i8** %362, align 8, !noalias !177
  %387 = load i64, i64* %363, align 8, !noalias !177
  %388 = mul i64 %387, %384
  %389 = getelementptr inbounds i8, i8* %386, i64 %388
  %390 = ptrtoint i8* %389 to i64
  %391 = and i64 %390, 63
  %392 = icmp eq i64 %391, 0
  call void @llvm.assume(i1 %392) #12, !noalias !177
  %393 = bitcast i8* %389 to i32*
  %394 = add i64 %384, %106
  %395 = mul i64 %394, %367
  %396 = getelementptr inbounds i8, i8* %365, i64 %395
  %397 = ptrtoint i8* %396 to i64
  %398 = and i64 %397, 63
  %399 = icmp eq i64 %398, 0
  call void @llvm.assume(i1 %399) #12, !noalias !177
  %400 = getelementptr inbounds i8, i8* %396, i64 %105
  %401 = icmp eq i64 %383, 0
  br i1 %401, label %439, label %402

402:                                              ; preds = %382
  br i1 %376, label %403, label %405

403:                                              ; preds = %438, %405, %402
  %404 = phi i64 [ 0, %405 ], [ 0, %402 ], [ %377, %438 ]
  br label %443

405:                                              ; preds = %402
  %406 = add i64 %374, %385
  %407 = getelementptr i8, i8* %365, i64 %406
  %408 = getelementptr i8, i8* %386, i64 %375
  %409 = mul i64 %387, %384
  %410 = getelementptr i8, i8* %408, i64 %409
  %411 = icmp ult i8* %400, %410
  %412 = icmp ult i8* %389, %407
  %413 = and i1 %411, %412
  br i1 %413, label %403, label %414

414:                                              ; preds = %405, %414
  %415 = phi i64 [ %436, %414 ], [ 0, %405 ]
  %416 = getelementptr inbounds i32, i32* %393, i64 %415
  %417 = bitcast i32* %416 to <4 x i32>*
  %418 = load <4 x i32>, <4 x i32>* %417, align 32, !alias.scope !180, !noalias !177
  %419 = getelementptr inbounds i32, i32* %416, i64 4
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 16, !alias.scope !180, !noalias !177
  %422 = icmp sgt <4 x i32> %418, <i32 -128, i32 -128, i32 -128, i32 -128>
  %423 = icmp sgt <4 x i32> %421, <i32 -128, i32 -128, i32 -128, i32 -128>
  %424 = select <4 x i1> %422, <4 x i32> %418, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %425 = select <4 x i1> %423, <4 x i32> %421, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %426 = icmp slt <4 x i32> %424, <i32 127, i32 127, i32 127, i32 127>
  %427 = icmp slt <4 x i32> %425, <i32 127, i32 127, i32 127, i32 127>
  %428 = select <4 x i1> %426, <4 x i32> %424, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %429 = select <4 x i1> %427, <4 x i32> %425, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %430 = trunc <4 x i32> %428 to <4 x i8>
  %431 = trunc <4 x i32> %429 to <4 x i8>
  %432 = getelementptr inbounds i8, i8* %400, i64 %415
  %433 = bitcast i8* %432 to <4 x i8>*
  store <4 x i8> %430, <4 x i8>* %433, align 1, !alias.scope !183, !noalias !185
  %434 = getelementptr inbounds i8, i8* %432, i64 4
  %435 = bitcast i8* %434 to <4 x i8>*
  store <4 x i8> %431, <4 x i8>* %435, align 1, !alias.scope !183, !noalias !185
  %436 = add i64 %415, 8
  %437 = icmp eq i64 %436, %377
  br i1 %437, label %438, label %414, !llvm.loop !186

438:                                              ; preds = %414
  br i1 %378, label %439, label %403

439:                                              ; preds = %443, %438, %382
  %440 = phi i64 [ 0, %382 ], [ %108, %438 ], [ %108, %443 ]
  %441 = add nuw i64 %384, 1
  %442 = icmp ult i64 %441, %110
  br i1 %442, label %382, label %455

443:                                              ; preds = %403, %443
  %444 = phi i64 [ %453, %443 ], [ %404, %403 ]
  %445 = getelementptr inbounds i32, i32* %393, i64 %444
  %446 = load i32, i32* %445, align 4, !noalias !177
  %447 = icmp sgt i32 %446, -128
  %448 = select i1 %447, i32 %446, i32 -128
  %449 = icmp slt i32 %448, 127
  %450 = select i1 %449, i32 %448, i32 127
  %451 = trunc i32 %450 to i8
  %452 = getelementptr inbounds i8, i8* %400, i64 %444
  store i8 %451, i8* %452, align 1, !noalias !177
  %453 = add nuw nsw i64 %444, 1
  %454 = icmp ult i64 %453, %108
  br i1 %454, label %443, label %439, !llvm.loop !187

455:                                              ; preds = %439, %359
  %456 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %16, align 8
  %457 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %456, i64 0, i32 1, i32 7, i32 1, i64 1
  %458 = load i32, i32* %457, align 4
  %459 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %456, i64 0, i32 1, i32 7, i32 1, i64 0
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %460, %458
  br i1 %461, label %462, label %466

462:                                              ; preds = %455
  %463 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %456, i64 0, i32 1, i32 7, i32 1, i64 2
  %464 = load i32, i32* %463, align 4
  %465 = icmp eq i32 %464, %458
  br label %466

466:                                              ; preds = %455, %462
  %467 = phi i1 [ false, %455 ], [ %465, %462 ]
  %468 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %469 = load i32, i32* %468, align 8
  %470 = zext i32 %469 to i64
  %471 = load i64, i64* %12, align 8
  %472 = load i64, i64* %14, align 8
  %473 = add i64 %472, %471
  %474 = icmp ult i64 %473, %470
  %475 = select i1 %474, i64 %473, i64 %470
  %476 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 3, i32 0, i32 0, i32 1
  %477 = load i32, i32* %476, align 4
  %478 = zext i32 %477 to i64
  %479 = load i64, i64* %13, align 8
  %480 = load i64, i64* %15, align 8
  %481 = add i64 %480, %479
  %482 = icmp ult i64 %481, %478
  %483 = select i1 %482, i64 %481, i64 %478
  %484 = icmp eq i64 %480, 0
  br i1 %484, label %668, label %485

485:                                              ; preds = %466
  %486 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %487 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 6, i32 0, i32 4
  %488 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %489 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 7, i32 0, i32 4
  %490 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 3, i32 1
  %491 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 3, i32 2
  br label %492

492:                                              ; preds = %665, %485
  %493 = phi i64 [ %480, %485 ], [ %659, %665 ]
  %494 = phi i64 [ %472, %485 ], [ %660, %665 ]
  %495 = phi i64 [ %471, %485 ], [ %667, %665 ]
  %496 = phi i64 [ %479, %485 ], [ %666, %665 ]
  %497 = phi i64 [ 0, %485 ], [ %662, %665 ]
  %498 = phi i32 [ 0, %485 ], [ %661, %665 ]
  %499 = phi i64 [ 0, %485 ], [ %663, %665 ]
  %500 = add i64 %496, %499
  %501 = load i8*, i8** %486, align 8
  %502 = load i64, i64* %487, align 8
  %503 = mul i64 %502, %500
  %504 = getelementptr inbounds i8, i8* %501, i64 %503
  %505 = ptrtoint i8* %504 to i64
  %506 = and i64 %505, 63
  %507 = icmp eq i64 %506, 0
  call void @llvm.assume(i1 %507) #12
  %508 = bitcast i8* %504 to i32*
  %509 = getelementptr inbounds i32, i32* %508, i64 %495
  %510 = load i8*, i8** %488, align 8
  %511 = load i64, i64* %489, align 8
  %512 = mul i64 %511, %500
  %513 = getelementptr inbounds i8, i8* %510, i64 %512
  %514 = ptrtoint i8* %513 to i64
  %515 = and i64 %514, 63
  %516 = icmp eq i64 %515, 0
  call void @llvm.assume(i1 %516) #12
  %517 = getelementptr inbounds i8, i8* %513, i64 %495
  %518 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %120, align 8
  %519 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %518, i64 2, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %520 = load i8*, i8** %519, align 8
  %521 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %518, i64 2, i32 0, i32 0, i32 4
  %522 = ptrtoint i8* %520 to i64
  %523 = and i64 %522, 63
  %524 = icmp eq i64 %523, 0
  call void @llvm.assume(i1 %524) #12
  %525 = bitcast i8* %520 to i32*
  %526 = load i64, i64* %521, align 8
  %527 = getelementptr inbounds i8, i8* %520, i64 %526
  %528 = ptrtoint i8* %527 to i64
  %529 = and i64 %528, 63
  %530 = icmp eq i64 %529, 0
  call void @llvm.assume(i1 %530) #12
  %531 = bitcast i8* %527 to i32*
  %532 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %518, i64 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %533 = load i8*, i8** %532, align 8
  %534 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %518, i64 3, i32 0, i32 0, i32 4
  %535 = load i64, i64* %534, align 8
  %536 = mul i64 %535, %499
  %537 = getelementptr inbounds i8, i8* %533, i64 %536
  %538 = ptrtoint i8* %537 to i64
  %539 = and i64 %538, 63
  %540 = icmp eq i64 %539, 0
  call void @llvm.assume(i1 %540) #12
  %541 = bitcast i8* %537 to i32*
  %542 = icmp eq i64 %494, 0
  br i1 %542, label %658, label %543

543:                                              ; preds = %492
  %544 = add i64 %500, 32
  %545 = and i64 %544, -32
  %546 = load i32, i32* %541, align 64
  %547 = icmp ugt i32 %546, 7
  br i1 %547, label %677, label %548

548:                                              ; preds = %543, %650
  %549 = phi i32 [ %654, %650 ], [ %546, %543 ]
  %550 = phi i64 [ %652, %650 ], [ %495, %543 ]
  %551 = phi i64 [ %647, %650 ], [ 0, %543 ]
  %552 = phi i32 [ %645, %650 ], [ %498, %543 ]
  %553 = phi i64 [ %646, %650 ], [ %497, %543 ]
  %554 = trunc i32 %549 to i8
  %555 = getelementptr inbounds i8, i8* %517, i64 %551
  store i8 %554, i8* %555, align 1
  %556 = load i8*, i8** %490, align 8
  %557 = load i64, i64* %491, align 8
  %558 = mul i64 %557, %500
  %559 = add i64 %558, %550
  %560 = getelementptr inbounds i8, i8* %556, i64 %559
  %561 = load i8, i8* %560, align 1
  %562 = icmp eq i8 %561, -1
  br i1 %562, label %563, label %644

563:                                              ; preds = %548
  %564 = icmp ult i64 %553, %98
  br i1 %564, label %565, label %677

565:                                              ; preds = %563
  %566 = getelementptr inbounds i32, i32* %525, i64 %553
  %567 = load i32, i32* %566, align 4
  %568 = icmp ult i32 %567, 27
  br i1 %568, label %569, label %677

569:                                              ; preds = %565
  %570 = shl i32 1, %567
  %571 = or i32 %570, %552
  %572 = and i32 %567, 255
  %573 = zext i32 %572 to i64
  %574 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %573
  %575 = load i8, i8* %574, align 1
  %576 = zext i8 %575 to i64
  %577 = lshr i64 133959344, %573
  %578 = and i64 %577, 1
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %580, label %585

580:                                              ; preds = %569
  %581 = lshr i64 133959024, %573
  %582 = and i64 %581, 1
  %583 = icmp eq i64 %582, 0
  %584 = or i1 %467, %583
  br i1 %584, label %586, label %677

585:                                              ; preds = %569
  br i1 %467, label %586, label %677

586:                                              ; preds = %580, %585
  %587 = add i64 %550, 32
  %588 = and i64 %587, -32
  %589 = add i64 %550, %576
  %590 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %573
  %591 = load i8, i8* %590, align 1
  %592 = zext i8 %591 to i64
  %593 = add i64 %500, %592
  %594 = icmp ugt i64 %589, %588
  %595 = icmp ugt i64 %589, %475
  %596 = or i1 %594, %595
  br i1 %596, label %677, label %597

597:                                              ; preds = %586
  %598 = icmp ugt i64 %593, %545
  %599 = icmp ugt i64 %593, %483
  %600 = or i1 %598, %599
  br i1 %600, label %677, label %601

601:                                              ; preds = %597
  %602 = zext i32 %567 to i64
  %603 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %602
  %604 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %602
  %605 = shl i32 %567, 1
  br label %606

606:                                              ; preds = %629, %601
  %607 = phi i64 [ 0, %601 ], [ %630, %629 ]
  %608 = add i64 %607, %500
  br label %609

609:                                              ; preds = %619, %606
  %610 = phi i64 [ 0, %606 ], [ %625, %619 ]
  %611 = load i64, i64* %491, align 8
  %612 = mul i64 %611, %608
  %613 = add i64 %610, %550
  %614 = add i64 %613, %612
  %615 = load i8*, i8** %490, align 8
  %616 = getelementptr inbounds i8, i8* %615, i64 %614
  %617 = load i8, i8* %616, align 1
  %618 = icmp eq i8 %617, -1
  br i1 %618, label %619, label %677

619:                                              ; preds = %609
  %620 = or i64 %610, %607
  %621 = icmp eq i64 %620, 0
  %622 = zext i1 %621 to i32
  %623 = or i32 %605, %622
  %624 = trunc i32 %623 to i8
  store i8 %624, i8* %616, align 1
  %625 = add nuw nsw i64 %610, 1
  %626 = load i8, i8* %604, align 1
  %627 = zext i8 %626 to i64
  %628 = icmp ult i64 %625, %627
  br i1 %628, label %609, label %629

629:                                              ; preds = %619
  %630 = add nuw nsw i64 %607, 1
  %631 = load i8, i8* %603, align 1
  %632 = zext i8 %631 to i64
  %633 = icmp ult i64 %630, %632
  br i1 %633, label %606, label %634

634:                                              ; preds = %629
  %635 = getelementptr inbounds i32, i32* %531, i64 %553
  %636 = load i32, i32* %635, align 4
  %637 = icmp slt i32 %636, 255
  %638 = select i1 %637, i32 %636, i32 255
  %639 = icmp sgt i32 %638, 0
  %640 = select i1 %639, i32 %638, i32 0
  %641 = add nuw nsw i32 %640, 1
  %642 = getelementptr inbounds i32, i32* %509, i64 %551
  store i32 %641, i32* %642, align 4
  %643 = add i64 %553, 1
  br label %644

644:                                              ; preds = %548, %634
  %645 = phi i32 [ %552, %548 ], [ %571, %634 ]
  %646 = phi i64 [ %553, %548 ], [ %643, %634 ]
  %647 = add nuw i64 %551, 1
  %648 = load i64, i64* %14, align 8
  %649 = icmp ult i64 %647, %648
  br i1 %649, label %650, label %656

650:                                              ; preds = %644
  %651 = load i64, i64* %12, align 8
  %652 = add i64 %651, %647
  %653 = getelementptr inbounds i32, i32* %541, i64 %647
  %654 = load i32, i32* %653, align 4
  %655 = icmp ugt i32 %654, 7
  br i1 %655, label %677, label %548

656:                                              ; preds = %644
  %657 = load i64, i64* %15, align 8
  br label %658

658:                                              ; preds = %656, %492
  %659 = phi i64 [ %493, %492 ], [ %657, %656 ]
  %660 = phi i64 [ 0, %492 ], [ %648, %656 ]
  %661 = phi i32 [ %498, %492 ], [ %645, %656 ]
  %662 = phi i64 [ %497, %492 ], [ %646, %656 ]
  %663 = add nuw i64 %499, 1
  %664 = icmp ult i64 %663, %659
  br i1 %664, label %665, label %668

665:                                              ; preds = %658
  %666 = load i64, i64* %13, align 8
  %667 = load i64, i64* %12, align 8
  br label %492

668:                                              ; preds = %658, %466
  %669 = phi i32 [ 0, %466 ], [ %661, %658 ]
  %670 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  %671 = atomicrmw or i32* %670, i32 %669 seq_cst
  %672 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %16, align 8
  %673 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %672, i64 0, i32 1, i32 26, i32 11
  %674 = load i32, i32* %673, align 4
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %677, label %676

676:                                              ; preds = %668
  call void @_ZN3jxl12ComputeSigmaERKNS_4RectEPNS_18PassesDecoderStateE(%"class.jxl::Rect"* nonnull dereferenceable(32) %5, %"struct.jxl::PassesDecoderState"* %3) #12
  br label %677

677:                                              ; preds = %543, %650, %563, %565, %580, %585, %586, %597, %609, %676, %668, %211
  %678 = phi i32 [ 1, %211 ], [ 0, %668 ], [ 0, %676 ], [ 1, %609 ], [ 1, %597 ], [ 1, %586 ], [ 1, %585 ], [ 1, %580 ], [ 1, %565 ], [ 1, %563 ], [ 1, %650 ], [ 1, %543 ]
  %679 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %10, i64 0, i32 3, i32 0, i32 0
  %680 = load i32*, i32** %679, align 8
  %681 = icmp eq i32* %680, null
  br i1 %681, label %685, label %682

682:                                              ; preds = %677
  %683 = ptrtoint i32* %680 to i64
  store i64 %683, i64* %223, align 8
  %684 = bitcast i32* %680 to i8*
  call void @_ZdlPv(i8* %684) #18
  br label %685

685:                                              ; preds = %677, %682
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %212) #12
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %104) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret i32 %678
}

declare void @_ZN3jxl12ComputeSigmaERKNS_4RectEPNS_18PassesDecoderStateE(%"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::PassesDecoderState"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_11ImageBundleE(%"class.jxl::ModularFrameDecoder"*, %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.jxl::ImageBundle"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.297", align 8
  %10 = alloca %"class.jxl::ThreadPool::RunCallState.297", align 8
  %11 = alloca double, align 8
  %12 = alloca %"class.jxl::ThreadPool", align 8
  %13 = alloca %"class.jxl::ThreadPool::RunCallState.298", align 8
  %14 = alloca %"class.jxl::ThreadPool::RunCallState.298", align 8
  %15 = alloca double, align 8
  %16 = alloca %"class.jxl::ThreadPool", align 8
  %17 = alloca i32, align 4
  %18 = alloca i8, align 1
  %19 = alloca float, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca %class.anon, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca %class.anon.286, align 8
  %26 = alloca %class.anon.287, align 8
  %27 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0
  %28 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 1
  %33 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %32, align 8
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %33, i64 0, i32 1, i32 25
  %35 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %34, align 8
  %36 = mul i64 %31, %29
  %37 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 16
  %38 = load i64, i64* %37, align 8
  %39 = mul i64 %38, %38
  %40 = icmp ult i64 %36, %39
  %41 = select i1 %40, %"class.jxl::ThreadPool"* null, %"class.jxl::ThreadPool"* %2
  %42 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 7, i32 2
  tail call void @_ZN3jxl5Image15undo_transformsERKNS_8weighted6HeaderEiPNS_10ThreadPoolE(%"class.jxl::Image"* %27, %"struct.jxl::weighted::Header"* dereferenceable(56) %42, i32 -1, %"class.jxl::ThreadPool"* %41) #12
  %43 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 9
  %44 = load i8, i8* %43, align 8, !range !146
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %457

46:                                               ; preds = %4
  %47 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 10
  %48 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #12
  store i32 0, i32* %17, align 4
  %49 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 2
  %50 = load i8, i8* %49, align 8, !range !146
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %256, label %52

52:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18) #12
  store i8 -86, i8* %18, align 1
  %53 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %35, i64 0, i32 0, i32 7, i32 9
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %61

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %33, i64 0, i32 1, i32 5
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 1
  %60 = zext i1 %59 to i8
  br label %61

61:                                               ; preds = %52, %56
  %62 = phi i8 [ 0, %52 ], [ %60, %56 ]
  store i8 %62, i8* %18, align 1
  %63 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %35, i64 0, i32 0, i32 3, i32 1
  %64 = load i8, i8* %63, align 8, !range !146
  %65 = icmp ne i8 %64, 0
  %66 = bitcast float* %19 to i8*
  %67 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 5
  %68 = bitcast i32* %20 to i8*
  %69 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %33, i64 0, i32 1, i32 5
  %70 = bitcast float* %19 to i32*
  %71 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %72 = bitcast i64* %21 to i8*
  %73 = add i64 %29, -1
  %74 = add i64 %31, -1
  %75 = bitcast %class.anon.287* %26 to i8*
  %76 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 0
  %77 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 1
  %78 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 2
  %79 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 3
  %80 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 4
  %81 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 5
  %82 = getelementptr inbounds %class.anon.287, %class.anon.287* %26, i64 0, i32 6
  %83 = bitcast double* %15 to i8*
  %84 = icmp eq %"class.jxl::ThreadPool"* %41, null
  %85 = bitcast %"class.jxl::ThreadPool::RunCallState.298"* %14 to i8*
  %86 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %14, i64 0, i32 0
  %87 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %14, i64 0, i32 1
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %41, i64 0, i32 0
  %89 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %41, i64 0, i32 1
  %90 = bitcast %"class.jxl::ThreadPool"* %16 to i8*
  %91 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 0
  %92 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 1
  %93 = bitcast i8** %92 to %"class.jxl::ThreadPool"**
  %94 = bitcast %"class.jxl::ThreadPool::RunCallState.298"* %13 to i8*
  %95 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %13, i64 0, i32 0
  %96 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.298", %"class.jxl::ThreadPool::RunCallState.298"* %13, i64 0, i32 1
  %97 = bitcast i32* %23 to i8*
  %98 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %35, i64 0, i32 0, i32 3, i32 3
  %99 = bitcast i32* %24 to i8*
  %100 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %35, i64 0, i32 0, i32 3, i32 4
  %101 = bitcast %class.anon.286* %25 to i8*
  %102 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 0
  %103 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 1
  %104 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 2
  %105 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 3
  %106 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 4
  %107 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 5
  %108 = getelementptr inbounds %class.anon.286, %class.anon.286* %25, i64 0, i32 6
  %109 = bitcast double* %11 to i8*
  %110 = bitcast %"class.jxl::ThreadPool::RunCallState.297"* %10 to i8*
  %111 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %10, i64 0, i32 0
  %112 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %10, i64 0, i32 1
  %113 = bitcast %"class.jxl::ThreadPool"* %12 to i8*
  %114 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 0
  %115 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 1
  %116 = bitcast i8** %115 to %"class.jxl::ThreadPool"**
  %117 = bitcast %"class.jxl::ThreadPool::RunCallState.297"* %9 to i8*
  %118 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %9, i64 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.297", %"class.jxl::ThreadPool::RunCallState.297"* %9, i64 0, i32 1
  %120 = bitcast %class.anon* %22 to i8*
  %121 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 0
  %122 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 1
  %123 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 2
  %124 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 3
  %125 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 4
  %126 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 5
  %127 = bitcast double* %7 to i8*
  %128 = bitcast %"class.jxl::ThreadPool::RunCallState"* %6 to i8*
  %129 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 0
  %130 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 1
  %131 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  %132 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %133 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  %134 = bitcast i8** %133 to %"class.jxl::ThreadPool"**
  %135 = bitcast %"class.jxl::ThreadPool::RunCallState"* %5 to i8*
  %136 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 0
  %137 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 1
  br label %138

138:                                              ; preds = %61, %249
  %139 = phi i8 [ %62, %61 ], [ 0, %249 ]
  %140 = phi i32 [ 0, %61 ], [ %251, %249 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #12
  %141 = load i32, i32* %67, align 4
  %142 = sitofp i32 %141 to float
  %143 = fdiv float 1.000000e+00, %142
  store float %143, float* %19, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #12
  store i32 %140, i32* %20, align 4
  %144 = load i32, i32* %69, align 8
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %155

146:                                              ; preds = %138
  %147 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %32, align 8
  %148 = sext i32 %140 to i64
  %149 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %147, i64 0, i32 4, i32 3, i64 %148
  %150 = bitcast float* %149 to i32*
  %151 = load i32, i32* %150, align 4
  store i32 %151, i32* %70, align 4
  %152 = icmp slt i32 %140, 2
  br i1 %152, label %153, label %158

153:                                              ; preds = %146
  %154 = sub nsw i32 1, %140
  store i32 %154, i32* %20, align 4
  br label %158

155:                                              ; preds = %138
  %156 = icmp eq i8 %139, 0
  br i1 %156, label %158, label %157

157:                                              ; preds = %155
  store i32 0, i32* %20, align 4
  br label %158

158:                                              ; preds = %155, %157, %146, %153
  %159 = phi i32 [ %140, %155 ], [ 0, %157 ], [ 2, %146 ], [ %154, %153 ]
  %160 = sext i32 %159 to i64
  %161 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %71, align 8
  %162 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %161, i64 %160, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %255, label %165

165:                                              ; preds = %158
  %166 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %161, i64 %160, i32 2
  %167 = load i64, i64* %166, align 8
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %255, label %169

169:                                              ; preds = %165
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #12
  store i64 -6148914691236517206, i64* %21, align 8
  %170 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %161, i64 %160, i32 3
  %171 = load i32, i32* %170, align 8
  %172 = shl i32 1, %171
  %173 = sext i32 %172 to i64
  %174 = add i64 %73, %173
  %175 = udiv i64 %174, %173
  store i64 %175, i64* %21, align 8
  %176 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %161, i64 %160, i32 4
  %177 = load i32, i32* %176, align 4
  %178 = shl i32 1, %177
  %179 = sext i32 %178 to i64
  %180 = add i64 %74, %179
  %181 = udiv i64 %180, %179
  %182 = load i64, i64* %166, align 8
  %183 = icmp eq i64 %181, %182
  br i1 %183, label %184, label %248

184:                                              ; preds = %169
  %185 = load i64, i64* %162, align 8
  %186 = icmp eq i64 %175, %185
  br i1 %186, label %187, label %248

187:                                              ; preds = %184
  %188 = icmp eq i32 %140, 2
  %189 = and i1 %188, %145
  br i1 %189, label %190, label %210

190:                                              ; preds = %187
  br i1 %65, label %191, label %194

191:                                              ; preds = %190
  %192 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i32 486, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0)) #12
  %193 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

194:                                              ; preds = %190
  %195 = trunc i64 %181 to i32
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %120) #12
  store %"class.jxl::Image"* %27, %"class.jxl::Image"** %121, align 8
  store i32* %20, i32** %122, align 8
  store %"class.jxl::Image3"* %47, %"class.jxl::Image3"** %123, align 8
  store i32* %17, i32** %124, align 8
  store i64* %21, i64** %125, align 8
  store float* %19, float** %126, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0), double* nonnull %7) #12
  br i1 %84, label %196, label %200

196:                                              ; preds = %194
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131) #12
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %132, align 8
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %134, align 8
  %197 = icmp eq i32 %195, 0
  br i1 %197, label %206, label %198

198:                                              ; preds = %196
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %135) #12
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %136, align 8
  store %class.anon* %22, %class.anon** %137, align 8
  %199 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %131, i8* nonnull %135, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %195) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %135) #12
  br label %206

200:                                              ; preds = %194
  %201 = icmp eq i32 %195, 0
  br i1 %201, label %208, label %202

202:                                              ; preds = %200
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %128) #12
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %129, align 8
  store %class.anon* %22, %class.anon** %130, align 8
  %203 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %204 = load i8*, i8** %89, align 8
  %205 = call i32 %203(i8* %204, i8* nonnull %128, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %195) #12
  br label %206

206:                                              ; preds = %196, %198, %202
  %207 = phi i8* [ %128, %202 ], [ %131, %198 ], [ %131, %196 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %207) #12
  br label %208

208:                                              ; preds = %206, %200
  %209 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0), double %209) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %120) #12
  br label %245

210:                                              ; preds = %187
  br i1 %65, label %211, label %229

211:                                              ; preds = %210
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %97) #12
  %212 = load i32, i32* %98, align 4
  store i32 %212, i32* %23, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %99) #12
  %213 = load i32, i32* %100, align 8
  store i32 %213, i32* %24, align 4
  %214 = trunc i64 %181 to i32
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %101) #12
  store %"class.jxl::Image"* %27, %"class.jxl::Image"** %102, align 8
  store i32* %20, i32** %103, align 8
  store %"class.jxl::Image3"* %47, %"class.jxl::Image3"** %104, align 8
  store i32* %17, i32** %105, align 8
  store i64* %21, i64** %106, align 8
  store i32* %23, i32** %107, align 8
  store i32* %24, i32** %108, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %11, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.26, i64 0, i64 0), double* nonnull %11) #12
  br i1 %84, label %215, label %219

215:                                              ; preds = %211
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %113) #12
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %114, align 8
  store %"class.jxl::ThreadPool"* %12, %"class.jxl::ThreadPool"** %116, align 8
  %216 = icmp eq i32 %214, 0
  br i1 %216, label %225, label %217

217:                                              ; preds = %215
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %117) #12
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %118, align 8
  store %class.anon.286* %25, %class.anon.286** %119, align 8
  %218 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %113, i8* nonnull %117, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %214) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %117) #12
  br label %225

219:                                              ; preds = %211
  %220 = icmp eq i32 %214, 0
  br i1 %220, label %227, label %221

221:                                              ; preds = %219
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %110) #12
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %111, align 8
  store %class.anon.286* %25, %class.anon.286** %112, align 8
  %222 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %223 = load i8*, i8** %89, align 8
  %224 = call i32 %222(i8* %223, i8* nonnull %110, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %214) #12
  br label %225

225:                                              ; preds = %215, %217, %221
  %226 = phi i8* [ %110, %221 ], [ %113, %217 ], [ %113, %215 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %226) #12
  br label %227

227:                                              ; preds = %225, %219
  %228 = load double, double* %11, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.26, i64 0, i64 0), double %228) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %101) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %99) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %97) #12
  br label %245

229:                                              ; preds = %210
  %230 = trunc i64 %181 to i32
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %75) #12
  store %"class.jxl::Image"* %27, %"class.jxl::Image"** %76, align 8
  store i32* %20, i32** %77, align 8
  store i8* %18, i8** %78, align 8
  store i64* %21, i64** %79, align 8
  store float* %19, float** %80, align 8
  store %"class.jxl::Image3"* %47, %"class.jxl::Image3"** %81, align 8
  store i32* %17, i32** %82, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0), double* nonnull %15) #12
  br i1 %84, label %231, label %235

231:                                              ; preds = %229
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #12
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %91, align 8
  store %"class.jxl::ThreadPool"* %16, %"class.jxl::ThreadPool"** %93, align 8
  %232 = icmp eq i32 %230, 0
  br i1 %232, label %241, label %233

233:                                              ; preds = %231
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94) #12
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %95, align 8
  store %class.anon.287* %26, %class.anon.287** %96, align 8
  %234 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %90, i8* nonnull %94, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %230) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94) #12
  br label %241

235:                                              ; preds = %229
  %236 = icmp eq i32 %230, 0
  br i1 %236, label %243, label %237

237:                                              ; preds = %235
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85) #12
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %86, align 8
  store %class.anon.287* %26, %class.anon.287** %87, align 8
  %238 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %239 = load i8*, i8** %89, align 8
  %240 = call i32 %238(i8* %239, i8* nonnull %85, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %230) #12
  br label %241

241:                                              ; preds = %231, %233, %237
  %242 = phi i8* [ %85, %237 ], [ %90, %233 ], [ %90, %231 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %242) #12
  br label %243

243:                                              ; preds = %241, %235
  %244 = load double, double* %15, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0), double %244) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %75) #12
  br label %245

245:                                              ; preds = %227, %243, %208
  %246 = load i8, i8* %18, align 1, !range !146
  %247 = icmp eq i8 %246, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #12
  br i1 %247, label %249, label %253

248:                                              ; preds = %184, %169
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #12
  br label %255

249:                                              ; preds = %245
  %250 = load i32, i32* %17, align 4
  %251 = add nsw i32 %250, 1
  store i32 %251, i32* %17, align 4
  %252 = icmp slt i32 %251, 3
  br i1 %252, label %138, label %254

253:                                              ; preds = %245
  store i32 1, i32* %17, align 4
  br label %254

254:                                              ; preds = %249, %253
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #12
  br label %256

255:                                              ; preds = %158, %165, %248
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #12
  br label %455

256:                                              ; preds = %254, %46
  %257 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 11
  %258 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 11, i32 0, i32 1
  %259 = bitcast %"class.jxl::Plane"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.std::__1::vector.230"* %257 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = icmp eq i64 %260, %262
  br i1 %263, label %455, label %264

264:                                              ; preds = %256
  %265 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 9
  %266 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %33, i64 0, i32 1, i32 16, i32 0, i32 0
  %267 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 2
  %268 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 1, i32 3
  %269 = getelementptr inbounds %"class.std::__1::vector.230", %"class.std::__1::vector.230"* %257, i64 0, i32 0, i32 0
  %270 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %271

271:                                              ; preds = %264, %320
  %272 = phi i64 [ %262, %264 ], [ %321, %320 ]
  %273 = phi i64 [ %260, %264 ], [ %322, %320 ]
  %274 = phi i64 [ 0, %264 ], [ %323, %320 ]
  %275 = inttoptr i64 %272 to %"class.jxl::Plane"*
  %276 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %265, align 8
  %277 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %276, i64 0, i32 17, i32 0, i32 0
  %278 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %277, align 8
  %279 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %278, i64 %274, i32 3, i32 3
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %278, i64 %274, i32 3, i32 4
  %282 = load i32, i32* %281, align 8
  %283 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %278, i64 %274, i32 3, i32 1
  %284 = load i8, i8* %283, align 8, !range !146
  %285 = icmp ne i8 %284, 0
  %286 = icmp slt i32 %280, 32
  %287 = or i1 %286, %285
  br i1 %287, label %291, label %288

288:                                              ; preds = %271
  %289 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i32 543, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0)) #12
  %290 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

291:                                              ; preds = %271
  br i1 %285, label %297, label %292

292:                                              ; preds = %291
  %293 = shl nsw i32 -1, %280
  %294 = xor i32 %293, -1
  %295 = uitofp i32 %294 to float
  %296 = fdiv float 1.000000e+00, %295
  br label %297

297:                                              ; preds = %291, %292
  %298 = phi float [ %296, %292 ], [ 0.000000e+00, %291 ]
  %299 = load i32*, i32** %266, align 8
  %300 = getelementptr inbounds i32, i32* %299, i64 %274
  %301 = load i32, i32* %300, align 4
  %302 = zext i32 %301 to i64
  %303 = load i64, i64* %267, align 8
  %304 = add nsw i64 %302, -1
  %305 = add i64 %304, %303
  %306 = udiv i64 %305, %302
  %307 = load i64, i64* %268, align 8
  %308 = add i64 %304, %307
  %309 = udiv i64 %308, %302
  %310 = icmp ult i64 %308, %302
  br i1 %310, label %320, label %311

311:                                              ; preds = %297
  %312 = icmp ult i64 %305, %302
  %313 = insertelement <4 x float> undef, float %298, i32 0
  %314 = shufflevector <4 x float> %313, <4 x float> undef, <4 x i32> zeroinitializer
  %315 = insertelement <4 x float> undef, float %298, i32 0
  %316 = shufflevector <4 x float> %315, <4 x float> undef, <4 x i32> zeroinitializer
  br label %329

317:                                              ; preds = %450
  %318 = load i64, i64* %259, align 8
  %319 = load i64, i64* %261, align 8
  br label %320

320:                                              ; preds = %317, %297
  %321 = phi i64 [ %319, %317 ], [ %272, %297 ]
  %322 = phi i64 [ %318, %317 ], [ %273, %297 ]
  %323 = add nuw i64 %274, 1
  %324 = load i32, i32* %17, align 4
  %325 = add nsw i32 %324, 1
  store i32 %325, i32* %17, align 4
  %326 = sub i64 %322, %321
  %327 = ashr exact i64 %326, 5
  %328 = icmp ult i64 %323, %327
  br i1 %328, label %271, label %455

329:                                              ; preds = %453, %311
  %330 = phi %"class.jxl::Plane"* [ %275, %311 ], [ %454, %453 ]
  %331 = phi i64 [ 0, %311 ], [ %451, %453 ]
  %332 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %330, i64 %274, i32 0, i32 5, i32 0, i32 0, i32 0
  %333 = load i8*, i8** %332, align 8
  %334 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %330, i64 %274, i32 0, i32 4
  %335 = load i64, i64* %334, align 8
  %336 = mul i64 %335, %331
  %337 = getelementptr inbounds i8, i8* %333, i64 %336
  %338 = ptrtoint i8* %337 to i64
  %339 = and i64 %338, 63
  %340 = icmp eq i64 %339, 0
  call void @llvm.assume(i1 %340) #12
  %341 = bitcast i8* %337 to float*
  %342 = load i32, i32* %17, align 4
  %343 = sext i32 %342 to i64
  %344 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %270, align 8
  %345 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %344, i64 %343, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %346 = load i8*, i8** %345, align 8
  %347 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %344, i64 %343, i32 0, i32 0, i32 4
  %348 = load i64, i64* %347, align 8
  %349 = mul i64 %348, %331
  %350 = getelementptr inbounds i8, i8* %346, i64 %349
  %351 = ptrtoint i8* %350 to i64
  %352 = and i64 %351, 63
  %353 = icmp eq i64 %352, 0
  call void @llvm.assume(i1 %353) #12
  %354 = bitcast i8* %350 to i32*
  br i1 %285, label %440, label %355

355:                                              ; preds = %329
  br i1 %312, label %450, label %356

356:                                              ; preds = %355
  %357 = udiv i64 %305, %302
  %358 = icmp ugt i64 %357, 1
  %359 = select i1 %358, i64 %357, i64 1
  %360 = icmp ult i64 %359, 8
  br i1 %360, label %361, label %363

361:                                              ; preds = %438, %363, %356
  %362 = phi i64 [ 0, %363 ], [ 0, %356 ], [ %377, %438 ]
  br label %441

363:                                              ; preds = %356
  %364 = udiv i64 %305, %302
  %365 = icmp ugt i64 %364, 1
  %366 = select i1 %365, i64 %364, i64 1
  %367 = shl i64 %366, 2
  %368 = getelementptr i8, i8* %333, i64 %367
  %369 = getelementptr i8, i8* %368, i64 %336
  %370 = getelementptr i8, i8* %346, i64 %367
  %371 = mul i64 %348, %331
  %372 = getelementptr i8, i8* %370, i64 %371
  %373 = icmp ult i8* %337, %372
  %374 = icmp ult i8* %350, %369
  %375 = and i1 %373, %374
  br i1 %375, label %361, label %376

376:                                              ; preds = %363
  %377 = and i64 %359, -8
  %378 = add i64 %377, -8
  %379 = lshr exact i64 %378, 3
  %380 = add nuw nsw i64 %379, 1
  %381 = and i64 %380, 1
  %382 = icmp eq i64 %378, 0
  br i1 %382, label %420, label %383

383:                                              ; preds = %376
  %384 = sub nuw nsw i64 %380, %381
  br label %385

385:                                              ; preds = %385, %383
  %386 = phi i64 [ 0, %383 ], [ %417, %385 ]
  %387 = phi i64 [ %384, %383 ], [ %418, %385 ]
  %388 = getelementptr inbounds i32, i32* %354, i64 %386
  %389 = bitcast i32* %388 to <4 x i32>*
  %390 = load <4 x i32>, <4 x i32>* %389, align 64, !alias.scope !188
  %391 = getelementptr inbounds i32, i32* %388, i64 4
  %392 = bitcast i32* %391 to <4 x i32>*
  %393 = load <4 x i32>, <4 x i32>* %392, align 16, !alias.scope !188
  %394 = sitofp <4 x i32> %390 to <4 x float>
  %395 = sitofp <4 x i32> %393 to <4 x float>
  %396 = fmul <4 x float> %314, %394
  %397 = fmul <4 x float> %316, %395
  %398 = getelementptr inbounds float, float* %341, i64 %386
  %399 = bitcast float* %398 to <4 x float>*
  store <4 x float> %396, <4 x float>* %399, align 64, !alias.scope !191, !noalias !188
  %400 = getelementptr inbounds float, float* %398, i64 4
  %401 = bitcast float* %400 to <4 x float>*
  store <4 x float> %397, <4 x float>* %401, align 16, !alias.scope !191, !noalias !188
  %402 = or i64 %386, 8
  %403 = getelementptr inbounds i32, i32* %354, i64 %402
  %404 = bitcast i32* %403 to <4 x i32>*
  %405 = load <4 x i32>, <4 x i32>* %404, align 32, !alias.scope !188
  %406 = getelementptr inbounds i32, i32* %403, i64 4
  %407 = bitcast i32* %406 to <4 x i32>*
  %408 = load <4 x i32>, <4 x i32>* %407, align 16, !alias.scope !188
  %409 = sitofp <4 x i32> %405 to <4 x float>
  %410 = sitofp <4 x i32> %408 to <4 x float>
  %411 = fmul <4 x float> %314, %409
  %412 = fmul <4 x float> %316, %410
  %413 = getelementptr inbounds float, float* %341, i64 %402
  %414 = bitcast float* %413 to <4 x float>*
  store <4 x float> %411, <4 x float>* %414, align 32, !alias.scope !191, !noalias !188
  %415 = getelementptr inbounds float, float* %413, i64 4
  %416 = bitcast float* %415 to <4 x float>*
  store <4 x float> %412, <4 x float>* %416, align 16, !alias.scope !191, !noalias !188
  %417 = add i64 %386, 16
  %418 = add i64 %387, -2
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %420, label %385, !llvm.loop !193

420:                                              ; preds = %385, %376
  %421 = phi i64 [ 0, %376 ], [ %417, %385 ]
  %422 = icmp eq i64 %381, 0
  br i1 %422, label %438, label %423

423:                                              ; preds = %420
  %424 = getelementptr inbounds i32, i32* %354, i64 %421
  %425 = bitcast i32* %424 to <4 x i32>*
  %426 = load <4 x i32>, <4 x i32>* %425, align 32, !alias.scope !188
  %427 = getelementptr inbounds i32, i32* %424, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  %429 = load <4 x i32>, <4 x i32>* %428, align 16, !alias.scope !188
  %430 = sitofp <4 x i32> %426 to <4 x float>
  %431 = sitofp <4 x i32> %429 to <4 x float>
  %432 = fmul <4 x float> %314, %430
  %433 = fmul <4 x float> %316, %431
  %434 = getelementptr inbounds float, float* %341, i64 %421
  %435 = bitcast float* %434 to <4 x float>*
  store <4 x float> %432, <4 x float>* %435, align 32, !alias.scope !191, !noalias !188
  %436 = getelementptr inbounds float, float* %434, i64 4
  %437 = bitcast float* %436 to <4 x float>*
  store <4 x float> %433, <4 x float>* %437, align 16, !alias.scope !191, !noalias !188
  br label %438

438:                                              ; preds = %420, %423
  %439 = icmp eq i64 %359, %377
  br i1 %439, label %450, label %361

440:                                              ; preds = %329
  call void @_ZN3jxl12int_to_floatEPKiPfmii(i32* %354, float* %341, i64 %306, i32 %280, i32 %282)
  br label %450

441:                                              ; preds = %361, %441
  %442 = phi i64 [ %448, %441 ], [ %362, %361 ]
  %443 = getelementptr inbounds i32, i32* %354, i64 %442
  %444 = load i32, i32* %443, align 4
  %445 = sitofp i32 %444 to float
  %446 = fmul float %298, %445
  %447 = getelementptr inbounds float, float* %341, i64 %442
  store float %446, float* %447, align 4
  %448 = add nuw i64 %442, 1
  %449 = icmp ult i64 %448, %306
  br i1 %449, label %441, label %450, !llvm.loop !194

450:                                              ; preds = %441, %438, %355, %440
  %451 = add nuw i64 %331, 1
  %452 = icmp ult i64 %451, %309
  br i1 %452, label %453, label %317

453:                                              ; preds = %450
  %454 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %269, align 8
  br label %329

455:                                              ; preds = %320, %256, %255
  %456 = phi i32 [ 1, %255 ], [ 0, %256 ], [ 0, %320 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #12
  br label %457

457:                                              ; preds = %4, %455
  %458 = phi i32 [ %456, %455 ], [ 1, %4 ]
  ret i32 %458
}

declare void @_ZN3jxl5Image15undo_transformsERKNS_8weighted6HeaderEiPNS_10ThreadPoolE(%"class.jxl::Image"*, %"struct.jxl::weighted::Header"* dereferenceable(56), i32, %"class.jxl::ThreadPool"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_(i64, i64, %"class.jxl::BitReader"*, %"class.jxl::QuantEncoding"*, i64, %"class.jxl::ModularFrameDecoder"*) local_unnamed_addr #6 align 2 {
  %7 = alloca %"class.jxl::Image", align 8
  %8 = alloca %"struct.jxl::ModularOptions", align 8
  %9 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %3, i64 0, i32 0, i32 3
  %10 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %3, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %11 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %2, float* %10) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %133

13:                                               ; preds = %6
  %14 = load float, float* %10, align 8
  %15 = fcmp olt float %14, 0x3E45798EE0000000
  br i1 %15, label %133, label %16

16:                                               ; preds = %13
  %17 = bitcast %"class.jxl::Image"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 104, i1 false)
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %7, i64 %0, i64 %1, i32 255, i32 3) #12
  %18 = bitcast %"struct.jxl::ModularOptions"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %18) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_.options to i8*), i64 88, i1 false)
  %19 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 0
  store i64 16777215, i64* %19, align 8
  %20 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 1
  store float 5.000000e-01, float* %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 2
  %22 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 3
  store i32 0, i32* %21, align 4
  %23 = call i8* @_Znwm(i64 32) #18
  %24 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 3, i32 0, i32 1
  %25 = bitcast %"class.std::__1::vector.77"* %22 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds i8, i8* %23, i64 32
  %27 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = bitcast i32** %24 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 bitcast ([8 x i32]* @.ref.tmp to i8*), i64 32, i1 false) #12
  %30 = ptrtoint i8* %26 to i64
  store i64 %30, i64* %29, align 8
  %31 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 4
  store float 9.600000e+01, float* %31, align 8
  %32 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 6
  store i64 32, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 7
  store i32 -1, i32* %33, align 8
  %34 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 8
  store i32 0, i32* %34, align 4
  %35 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 9
  store float 0x3FF028F5C0000000, float* %35, align 8
  %36 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 10
  store i32 2, i32* %36, align 4
  %37 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 11
  store i8 0, i8* %37, align 8
  %38 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 13
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 14
  store i8 0, i8* %39, align 8
  %40 = icmp eq %"class.jxl::ModularFrameDecoder"* %5, null
  br i1 %40, label %57, label %41

41:                                               ; preds = %16
  %42 = icmp ult i64 %4, 17
  br i1 %42, label %46, label %43

43:                                               ; preds = %41
  %44 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.39, i64 0, i64 0)) #12, !noalias !195
  %45 = call zeroext i1 @_ZN3jxl5AbortEv() #17, !noalias !195
  unreachable

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %5, i64 0, i32 1, i32 15
  %48 = load i64, i64* %47, align 8
  %49 = mul i64 %48, 3
  %50 = add nuw nsw i64 %4, 1
  %51 = add i64 %50, %49
  %52 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %5, i64 0, i32 4
  %53 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %5, i64 0, i32 5
  %54 = getelementptr inbounds %"class.jxl::ModularFrameDecoder", %"class.jxl::ModularFrameDecoder"* %5, i64 0, i32 6
  %55 = call i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"* %2, %"class.jxl::Image"* nonnull dereferenceable(104) %7, %"struct.jxl::GroupHeader"* null, i64 %51, %"struct.jxl::ModularOptions"* nonnull %8, i32 -1, %"class.std::__1::vector.31"* %52, %"struct.jxl::ANSCode"* %53, %"class.std::__1::vector.66"* %54, i1 zeroext false) #12
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %124

57:                                               ; preds = %16
  %58 = call i32 @_ZN3jxl24ModularGenericDecompressEPNS_9BitReaderERNS_5ImageEPNS_11GroupHeaderEmPNS_14ModularOptionsEiPKNSt3__16vectorINS_20PropertyDecisionNodeENS8_9allocatorISA_EEEEPKNS_7ANSCodeEPKNS9_IhNSB_IhEEEEb(%"class.jxl::BitReader"* %2, %"class.jxl::Image"* nonnull dereferenceable(104) %7, %"struct.jxl::GroupHeader"* null, i64 0, %"struct.jxl::ModularOptions"* nonnull %8, i32 -1, %"class.std::__1::vector.31"* null, %"struct.jxl::ANSCode"* null, %"class.std::__1::vector.66"* null, i1 zeroext false) #12
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %124

60:                                               ; preds = %57, %46
  %61 = bitcast %union.anon.106* %9 to %"class.std::__1::vector.59"**
  %62 = load %"class.std::__1::vector.59"*, %"class.std::__1::vector.59"** %61, align 8
  %63 = icmp eq %"class.std::__1::vector.59"* %62, null
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = call i8* @_Znwm(i64 24) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #12
  %66 = bitcast %union.anon.106* %9 to i8**
  store i8* %65, i8** %66, align 8
  %67 = bitcast i8* %65 to %"class.std::__1::vector.59"*
  br label %68

68:                                               ; preds = %60, %64
  %69 = phi %"class.std::__1::vector.59"* [ %62, %60 ], [ %67, %64 ]
  %70 = mul i64 %1, %0
  %71 = mul i64 %70, 3
  %72 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %69, i64 0, i32 0, i32 1
  %73 = bitcast i32** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.std::__1::vector.59"* %69 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %74, %76
  %78 = ashr exact i64 %77, 2
  %79 = icmp ugt i64 %71, %78
  %80 = inttoptr i64 %76 to i32*
  br i1 %79, label %81, label %83

81:                                               ; preds = %68
  %82 = sub i64 %71, %78
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.59"* nonnull %69, i64 %82) #12
  br label %87

83:                                               ; preds = %68
  %84 = icmp ult i64 %71, %78
  br i1 %84, label %85, label %87

85:                                               ; preds = %83
  %86 = getelementptr inbounds i32, i32* %80, i64 %71
  store i32* %86, i32** %72, align 8
  br label %87

87:                                               ; preds = %81, %83, %85
  %88 = icmp eq i64 %1, 0
  %89 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %7, i64 0, i32 0, i32 0, i32 0
  %90 = icmp eq i64 %0, 0
  br i1 %88, label %124, label %91

91:                                               ; preds = %87, %120
  %92 = phi i64 [ %121, %120 ], [ 0, %87 ]
  %93 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %89, align 8
  %94 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %93, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %93, i64 0, i32 0, i32 0, i32 4
  %97 = load i64, i64* %96, align 8
  %98 = mul i64 %97, %92
  %99 = getelementptr inbounds i8, i8* %95, i64 %98
  %100 = ptrtoint i8* %99 to i64
  %101 = and i64 %100, 63
  %102 = icmp eq i64 %101, 0
  call void @llvm.assume(i1 %102) #12
  %103 = bitcast i8* %99 to i32*
  br i1 %90, label %120, label %104

104:                                              ; preds = %91
  %105 = mul i64 %92, %0
  br label %108

106:                                              ; preds = %108
  %107 = icmp eq i64 %119, %0
  br i1 %107, label %120, label %108

108:                                              ; preds = %106, %104
  %109 = phi i64 [ 0, %104 ], [ %119, %106 ]
  %110 = getelementptr inbounds i32, i32* %103, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = load %"class.std::__1::vector.59"*, %"class.std::__1::vector.59"** %61, align 8
  %113 = add i64 %109, %105
  %114 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %112, i64 0, i32 0, i32 0
  %115 = load i32*, i32** %114, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 %113
  store i32 %111, i32* %116, align 4
  %117 = load i32, i32* %110, align 4
  %118 = icmp slt i32 %117, 1
  %119 = add nuw i64 %109, 1
  br i1 %118, label %124, label %106

120:                                              ; preds = %106, %91
  %121 = add nuw i64 %92, 1
  %122 = icmp eq i64 %121, %1
  br i1 %122, label %123, label %91

123:                                              ; preds = %120
  br i1 %88, label %124, label %135

124:                                              ; preds = %108, %151, %201, %187, %87, %123, %168, %57, %46
  %125 = phi i32 [ %55, %46 ], [ %58, %57 ], [ 0, %168 ], [ 0, %123 ], [ 0, %87 ], [ 1, %187 ], [ 0, %201 ], [ 1, %151 ], [ 1, %108 ]
  %126 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %8, i64 0, i32 3, i32 0, i32 0
  %127 = load i32*, i32** %126, align 8
  %128 = icmp eq i32* %127, null
  br i1 %128, label %132, label %129

129:                                              ; preds = %124
  %130 = ptrtoint i32* %127 to i64
  store i64 %130, i64* %29, align 8
  %131 = bitcast i32* %127 to i8*
  call void @_ZdlPv(i8* %131) #18
  br label %132

132:                                              ; preds = %124, %129
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %18) #12
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %17) #12
  br label %133

133:                                              ; preds = %13, %6, %132
  %134 = phi i32 [ %125, %132 ], [ %11, %6 ], [ 1, %13 ]
  ret i32 %134

135:                                              ; preds = %123, %165
  %136 = phi i64 [ %166, %165 ], [ 0, %123 ]
  %137 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %89, align 8
  %138 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %137, i64 1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %137, i64 1, i32 0, i32 0, i32 4
  %141 = load i64, i64* %140, align 8
  %142 = mul i64 %141, %136
  %143 = getelementptr inbounds i8, i8* %139, i64 %142
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  call void @llvm.assume(i1 %146) #12
  %147 = bitcast i8* %143 to i32*
  br i1 %90, label %165, label %148

148:                                              ; preds = %135
  %149 = add i64 %136, %1
  %150 = mul i64 %149, %0
  br label %151

151:                                              ; preds = %163, %148
  %152 = phi i64 [ 0, %148 ], [ %162, %163 ]
  %153 = getelementptr inbounds i32, i32* %147, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = load %"class.std::__1::vector.59"*, %"class.std::__1::vector.59"** %61, align 8
  %156 = add i64 %152, %150
  %157 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %155, i64 0, i32 0, i32 0
  %158 = load i32*, i32** %157, align 8
  %159 = getelementptr inbounds i32, i32* %158, i64 %156
  store i32 %154, i32* %159, align 4
  %160 = load i32, i32* %153, align 4
  %161 = icmp slt i32 %160, 1
  %162 = add nuw i64 %152, 1
  br i1 %161, label %124, label %163

163:                                              ; preds = %151
  %164 = icmp eq i64 %162, %0
  br i1 %164, label %165, label %151

165:                                              ; preds = %163, %135
  %166 = add nuw i64 %136, 1
  %167 = icmp eq i64 %166, %1
  br i1 %167, label %168, label %135

168:                                              ; preds = %165
  br i1 %88, label %124, label %169

169:                                              ; preds = %168
  %170 = shl i64 %1, 1
  br label %171

171:                                              ; preds = %201, %169
  %172 = phi i64 [ 0, %169 ], [ %202, %201 ]
  %173 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %89, align 8
  %174 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %173, i64 2, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %175 = load i8*, i8** %174, align 8
  %176 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %173, i64 2, i32 0, i32 0, i32 4
  %177 = load i64, i64* %176, align 8
  %178 = mul i64 %177, %172
  %179 = getelementptr inbounds i8, i8* %175, i64 %178
  %180 = ptrtoint i8* %179 to i64
  %181 = and i64 %180, 63
  %182 = icmp eq i64 %181, 0
  call void @llvm.assume(i1 %182) #12
  %183 = bitcast i8* %179 to i32*
  br i1 %90, label %201, label %184

184:                                              ; preds = %171
  %185 = add i64 %172, %170
  %186 = mul i64 %185, %0
  br label %187

187:                                              ; preds = %199, %184
  %188 = phi i64 [ 0, %184 ], [ %198, %199 ]
  %189 = getelementptr inbounds i32, i32* %183, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = load %"class.std::__1::vector.59"*, %"class.std::__1::vector.59"** %61, align 8
  %192 = add i64 %188, %186
  %193 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %191, i64 0, i32 0, i32 0
  %194 = load i32*, i32** %193, align 8
  %195 = getelementptr inbounds i32, i32* %194, i64 %192
  store i32 %190, i32* %195, align 4
  %196 = load i32, i32* %189, align 4
  %197 = icmp slt i32 %196, 1
  %198 = add nuw i64 %188, 1
  br i1 %197, label %124, label %199

199:                                              ; preds = %187
  %200 = icmp eq i64 %198, %0
  br i1 %200, label %201, label %187

201:                                              ; preds = %199, %171
  %202 = add nuw i64 %172, 1
  %203 = icmp eq i64 %202, %1
  br i1 %203, label %124, label %171
}

declare i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"*, float*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #7

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #14 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #15 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #6 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #6 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #12
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #12
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #16

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.59"*, i64) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #17
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #18
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #18
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #16

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector"*, %"class.jxl::Channel"* dereferenceable(64)) local_unnamed_addr #15 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Channel"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #17
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Channel"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #17
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #18
  %33 = bitcast i8* %32 to %"class.jxl::Channel"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Channel"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Channel"* %38 to i64
  %40 = bitcast %"class.jxl::Channel"* %37 to i8*
  %41 = bitcast %"class.jxl::Channel"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9, i32 0, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1, i64 0, i32 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9, i32 1
  %49 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1, i64 0, i32 1
  %50 = bitcast i64* %48 to i8*
  %51 = bitcast i64* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 32, i1 false) #12
  %52 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 1
  %53 = ptrtoint %"class.jxl::Channel"* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %55 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %54, align 8
  %56 = ptrtoint %"class.jxl::Channel"* %55 to i64
  %57 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %3, align 8
  %58 = icmp eq %"class.jxl::Channel"* %57, %55
  br i1 %58, label %121, label %59

59:                                               ; preds = %34
  %60 = getelementptr %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 0, i32 0, i32 0
  %61 = ptrtoint i32* %60 to i64
  %62 = sub i64 %61, %56
  %63 = and i64 %62, 64
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1
  %67 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1
  %68 = bitcast %"class.jxl::Channel"* %66 to i8*
  %69 = bitcast %"class.jxl::Channel"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false) #12
  %70 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1, i32 0, i32 0, i32 5
  %71 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 0, i32 0, i32 5
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i8* null, i8** %72, align 8
  %75 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1, i32 1
  %77 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 1
  %78 = bitcast i64* %76 to i8*
  %79 = bitcast i64* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 32, i1 false) #12
  br label %80

80:                                               ; preds = %65, %59
  %81 = phi %"class.jxl::Channel"* [ undef, %59 ], [ %66, %65 ]
  %82 = phi %"class.jxl::Channel"* [ %37, %59 ], [ %66, %65 ]
  %83 = phi %"class.jxl::Channel"* [ %57, %59 ], [ %67, %65 ]
  %84 = icmp ult i64 %62, 64
  br i1 %84, label %117, label %85

85:                                               ; preds = %80, %85
  %86 = phi %"class.jxl::Channel"* [ %102, %85 ], [ %82, %80 ]
  %87 = phi %"class.jxl::Channel"* [ %103, %85 ], [ %83, %80 ]
  %88 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1
  %89 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1
  %90 = bitcast %"class.jxl::Channel"* %88 to i8*
  %91 = bitcast %"class.jxl::Channel"* %89 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 24, i1 false) #12
  %92 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1, i32 0, i32 0, i32 5
  %93 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1, i32 0, i32 0, i32 5
  %94 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i8* null, i8** %94, align 8
  %97 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  store i64 %96, i64* %97, align 8
  %98 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1, i32 1
  %99 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1, i32 1
  %100 = bitcast i64* %98 to i8*
  %101 = bitcast i64* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 32, i1 false) #12
  %102 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2
  %103 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2
  %104 = bitcast %"class.jxl::Channel"* %102 to i8*
  %105 = bitcast %"class.jxl::Channel"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #12
  %106 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2, i32 0, i32 0, i32 5
  %107 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2, i32 0, i32 0, i32 5
  %108 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %107, i64 0, i32 0, i32 0, i32 0
  %109 = bitcast %"class.std::__1::unique_ptr"* %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i8* null, i8** %108, align 8
  %111 = bitcast %"class.std::__1::unique_ptr"* %106 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2, i32 1
  %113 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2, i32 1
  %114 = bitcast i64* %112 to i8*
  %115 = bitcast i64* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 32, i1 false) #12
  %116 = icmp eq %"class.jxl::Channel"* %103, %55
  br i1 %116, label %117, label %85

117:                                              ; preds = %85, %80
  %118 = phi %"class.jxl::Channel"* [ %81, %80 ], [ %102, %85 ]
  %119 = load i64, i64* %6, align 8
  %120 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %3, align 8
  br label %121

121:                                              ; preds = %34, %117
  %122 = phi %"class.jxl::Channel"* [ %120, %117 ], [ %55, %34 ]
  %123 = phi %"class.jxl::Channel"* [ %118, %117 ], [ %37, %34 ]
  %124 = phi i64 [ %119, %117 ], [ %56, %34 ]
  %125 = ptrtoint %"class.jxl::Channel"* %123 to i64
  store i64 %125, i64* %6, align 8
  store i64 %53, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %126 = inttoptr i64 %124 to %"class.jxl::Channel"*
  %127 = icmp eq %"class.jxl::Channel"* %122, %126
  br i1 %127, label %137, label %128

128:                                              ; preds = %121, %135
  %129 = phi %"class.jxl::Channel"* [ %130, %135 ], [ %122, %121 ]
  %130 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %129, i64 -1
  %131 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %129, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  store i8* null, i8** %131, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %128
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %132) #12
  br label %135

135:                                              ; preds = %134, %128
  %136 = icmp eq %"class.jxl::Channel"* %130, %126
  br i1 %136, label %137, label %128

137:                                              ; preds = %135, %121
  %138 = icmp eq i64 %124, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %137
  %140 = inttoptr i64 %124 to i8*
  tail call void @_ZdlPv(i8* %140) #18
  br label %141

141:                                              ; preds = %137, %139
  ret void
}

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #7

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #7

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #6 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image"*, %"class.jxl::Image"** %8, align 8
  %10 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %9, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %14, align 8
  %16 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 %13, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 %13, i32 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %7
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = bitcast i8* %21 to i32*
  %26 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 0, i32 0, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %7
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = bitcast i8* %31 to i32*
  %36 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 2
  %37 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %36, align 8
  %38 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 3
  %39 = load i32*, i32** %38, align 8
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %7
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 %41, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #12
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #12
  %54 = bitcast i8* %50 to float*
  %55 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %56 = and i32 %55, 2225
  %57 = tail call i32 @llvm.cttz.i32(i32 %56, i1 true) #12, !range !148
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds [12 x void (i64, i32*, i32*, float, float*)*], [12 x void (i64, i32*, i32*, float, float*)*]* @_ZN3jxlL31MultiplySumHighwayDispatchTableE, i64 0, i64 %58
  %60 = load void (i64, i32*, i32*, float, float*)*, void (i64, i32*, i32*, float, float*)** %59, align 8
  %61 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 4
  %62 = load i64*, i64** %61, align 8
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 5
  %65 = load float*, float** %64, align 8
  %66 = load float, float* %65, align 4
  tail call void %60(i64 %63, i32* %25, i32* %35, float %66, float* %54) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJmPKiS2_fPfEE13ChooseAndCallIXadL_ZN3jxlL31MultiplySumHighwayDispatchTableEEEEEvmS2_S2_fS3_(i64, i32*, i32*, float, float*) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %6 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %7 = and i32 %6, 2225
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #12, !range !148
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [12 x void (i64, i32*, i32*, float, float*)*], [12 x void (i64, i32*, i32*, float, float*)*]* @_ZN3jxlL31MultiplySumHighwayDispatchTableE, i64 0, i64 %9
  %11 = load void (i64, i32*, i32*, float, float*)*, void (i64, i32*, i32*, float, float*)** %10, align 8
  tail call void %11(i64 %0, i32* %1, i32* %2, float %3, float* %4) #12
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #16

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.286**
  %6 = load %class.anon.286*, %class.anon.286** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image"*, %"class.jxl::Image"** %8, align 8
  %10 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %9, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %14, align 8
  %16 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 %13, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 %13, i32 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %7
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = bitcast i8* %21 to i32*
  %26 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 2
  %27 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %26, align 8
  %28 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 3
  %29 = load i32*, i32** %28, align 8
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %27, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = mul i64 %33, %7
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %27, i64 0, i32 0, i64 %31, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #12
  %40 = getelementptr inbounds i8, i8* %36, i64 %34
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #12
  %44 = bitcast i8* %40 to float*
  %45 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 4
  %46 = load i64*, i64** %45, align 8
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 5
  %49 = load i32*, i32** %48, align 8
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %class.anon.286, %class.anon.286* %6, i64 0, i32 6
  %52 = load i32*, i32** %51, align 8
  %53 = load i32, i32* %52, align 4
  tail call void @_ZN3jxl12int_to_floatEPKiPfmii(i32* %25, float* %44, i64 %47, i32 %50, i32 %53) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPS0_PNS_11ImageBundleEE3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.287**
  %6 = load %class.anon.287*, %class.anon.287** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image"*, %"class.jxl::Image"** %8, align 8
  %10 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %9, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %14, align 8
  %16 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 %13, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %15, i64 %13, i32 0, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %7
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #12
  %25 = bitcast i8* %21 to i32*
  %26 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = load i8, i8* %27, align 1, !range !146
  %29 = icmp eq i8 %28, 0
  %30 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %31 = and i32 %30, 2225
  %32 = tail call i32 @llvm.cttz.i32(i32 %31, i1 true) #12, !range !148
  %33 = zext i32 %32 to i64
  br i1 %29, label %49, label %34

34:                                               ; preds = %3
  %35 = getelementptr inbounds [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*], [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*]* @_ZN3jxlL33RgbFromSingleHighwayDispatchTableE, i64 0, i64 %33
  %36 = load void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)** %35, align 8
  %37 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 3
  %38 = load i64*, i64** %37, align 8
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 4
  %41 = load float*, float** %40, align 8
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 5
  %44 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %43, align 8
  %45 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 6
  %46 = load i32*, i32** %45, align 8
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  tail call void %36(i64 %39, i32* %25, float %42, %"class.jxl::Image3"* %44, i64 %48, i64 %7) #12
  br label %64

49:                                               ; preds = %3
  %50 = getelementptr inbounds [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*], [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*]* @_ZN3jxlL36SingleFromSingleHighwayDispatchTableE, i64 0, i64 %33
  %51 = load void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)** %50, align 8
  %52 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 3
  %53 = load i64*, i64** %52, align 8
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 4
  %56 = load float*, float** %55, align 8
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 5
  %59 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %58, align 8
  %60 = getelementptr inbounds %class.anon.287, %class.anon.287* %6, i64 0, i32 6
  %61 = load i32*, i32** %60, align 8
  %62 = load i32, i32* %61, align 4
  %63 = sext i32 %62 to i64
  tail call void %51(i64 %54, i32* %25, float %57, %"class.jxl::Image3"* %59, i64 %63, i64 %7) #12
  br label %64

64:                                               ; preds = %34, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJmPKifPN3jxl6Image3IfEEmmEE13ChooseAndCallIXadL_ZNS3_L33RgbFromSingleHighwayDispatchTableEEEEEvmS2_fS6_mm(i64, i32*, float, %"class.jxl::Image3"*, i64, i64) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %8 = and i32 %7, 2225
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #12, !range !148
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*], [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*]* @_ZN3jxlL33RgbFromSingleHighwayDispatchTableE, i64 0, i64 %10
  %12 = load void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)** %11, align 8
  tail call void %12(i64 %0, i32* %1, float %2, %"class.jxl::Image3"* %3, i64 %4, i64 %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJmPKifPN3jxl6Image3IfEEmmEE13ChooseAndCallIXadL_ZNS3_L36SingleFromSingleHighwayDispatchTableEEEEEvmS2_fS6_mm(i64, i32*, float, %"class.jxl::Image3"*, i64, i64) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %8 = and i32 %7, 2225
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #12, !range !148
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*], [12 x void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*]* @_ZN3jxlL36SingleFromSingleHighwayDispatchTableE, i64 0, i64 %10
  %12 = load void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)*, void (i64, i32*, float, %"class.jxl::Image3"*, i64, i64)** %11, align 8
  tail call void %12(i64 %0, i32* %1, float %2, %"class.jxl::Image3"* %3, i64 %4, i64 %5) #12
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #16

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #16

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #16

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone speculatable }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!22 = distinct !{!22, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!25 = distinct !{!25, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!28 = distinct !{!28, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!31 = distinct !{!31, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!32 = !{!33}
!33 = distinct !{!33, !31, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!36 = distinct !{!36, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!37 = !{!38}
!38 = distinct !{!38, !36, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!41 = distinct !{!41, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!44 = distinct !{!44, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!45 = !{!46}
!46 = distinct !{!46, !44, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!49 = distinct !{!49, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!52 = distinct !{!52, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!55 = distinct !{!55, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!58 = distinct !{!58, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!59 = !{!60}
!60 = distinct !{!60, !58, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!63 = distinct !{!63, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!66 = distinct !{!66, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!67 = !{!68}
!68 = distinct !{!68, !66, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!71 = distinct !{!71, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!72 = !{!73}
!73 = distinct !{!73, !71, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!76 = distinct !{!76, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!79 = distinct !{!79, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!80 = !{!81}
!81 = distinct !{!81, !79, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!84 = distinct !{!84, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!85 = !{!86}
!86 = distinct !{!86, !87, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!87 = distinct !{!87, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!90 = distinct !{!90, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!93 = distinct !{!93, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!94 = !{!95}
!95 = distinct !{!95, !93, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!98 = distinct !{!98, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!101 = distinct !{!101, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!102 = !{!103}
!103 = distinct !{!103, !104, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!104 = distinct !{!104, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!107 = distinct !{!107, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!108 = distinct !{!108, !109}
!109 = !{!"llvm.loop.isvectorized", i32 1}
!110 = distinct !{!110, !111, !109}
!111 = !{!"llvm.loop.unroll.runtime.disable"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!114 = distinct !{!114, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!117 = distinct !{!117, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!120 = distinct !{!120, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!123 = distinct !{!123, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!124 = !{!113, !125}
!125 = distinct !{!125, !126}
!126 = distinct !{!126, !"LVerDomain"}
!127 = !{!116, !128}
!128 = distinct !{!128, !126}
!129 = !{!130, !131}
!130 = distinct !{!130, !126}
!131 = distinct !{!131, !126}
!132 = !{!119, !130}
!133 = !{!131}
!134 = !{!122, !131}
!135 = distinct !{!135, !109}
!136 = distinct !{!136, !109}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!139 = distinct !{!139, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!140 = !{!141}
!141 = distinct !{!141, !142, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!142 = distinct !{!142, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!143 = distinct !{!143, !109}
!144 = distinct !{!144, !111, !109}
!145 = !{!"branch_weights", i32 1, i32 2000}
!146 = !{i8 0, i8 2}
!147 = !{i64 0, i64 65}
!148 = !{i32 0, i32 33}
!149 = distinct !{!149, !150}
!150 = !{!"llvm.loop.unroll.disable"}
!151 = distinct !{!151, !150}
!152 = !{!153}
!153 = distinct !{!153, !154}
!154 = distinct !{!154, !"LVerDomain"}
!155 = !{!156}
!156 = distinct !{!156, !154}
!157 = distinct !{!157, !109}
!158 = distinct !{!158, !150}
!159 = distinct !{!159, !109}
!160 = !{!161}
!161 = distinct !{!161, !162, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm: argument 0"}
!162 = distinct !{!162, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm"}
!163 = !{!164}
!164 = distinct !{!164, !165, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm: argument 0"}
!165 = distinct !{!165, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm"}
!166 = !{!167}
!167 = distinct !{!167, !168, !"_ZN3jxl20ConvertPlaneAndClampIiaEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE: argument 0"}
!168 = distinct !{!168, !"_ZN3jxl20ConvertPlaneAndClampIiaEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE"}
!169 = !{!170}
!170 = distinct !{!170, !171}
!171 = distinct !{!171, !"LVerDomain"}
!172 = !{!173}
!173 = distinct !{!173, !171}
!174 = !{!167, !170}
!175 = distinct !{!175, !109}
!176 = distinct !{!176, !109}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN3jxl20ConvertPlaneAndClampIiaEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE: argument 0"}
!179 = distinct !{!179, !"_ZN3jxl20ConvertPlaneAndClampIiaEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE"}
!180 = !{!181}
!181 = distinct !{!181, !182}
!182 = distinct !{!182, !"LVerDomain"}
!183 = !{!184}
!184 = distinct !{!184, !182}
!185 = !{!178, !181}
!186 = distinct !{!186, !109}
!187 = distinct !{!187, !109}
!188 = !{!189}
!189 = distinct !{!189, !190}
!190 = distinct !{!190, !"LVerDomain"}
!191 = !{!192}
!192 = distinct !{!192, !190}
!193 = distinct !{!193, !109}
!194 = distinct !{!194, !109}
!195 = !{!196}
!196 = distinct !{!196, !197, !"_ZN3jxl15ModularStreamId10QuantTableEm: argument 0"}
!197 = distinct !{!197, !"_ZN3jxl15ModularStreamId10QuantTableEm"}
