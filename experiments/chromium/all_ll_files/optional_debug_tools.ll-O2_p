; ModuleID = '../../third_party/tflite/src/tensorflow/lite/optional_debug_tools.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/optional_debug_tools.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%"class.tflite::impl::Interpreter" = type { %struct.TfLiteContext*, %"class.tflite::ErrorReporter"*, %"class.std::__1::vector.1", %"class.std::__1::unique_ptr.11", %"class.tflite::Profiler"*, i8, [4 x %struct.TfLiteExternalContext*], %"class.std::__1::unique_ptr.15", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", %"class.std::__1::unique_ptr" }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.tflite::Profiler"* }
%"class.tflite::Profiler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.tflite::ExternalCpuBackendContext"* }
%"class.tflite::ExternalCpuBackendContext" = type { %struct.TfLiteExternalContext, %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.tflite::TfLiteInternalBackendContext"* }
%"class.tflite::TfLiteInternalBackendContext" = type { i32 (...)** }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"*, %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.tflite::impl::Subgraph"* }
%"class.tflite::impl::Subgraph" = type { i32 (...)**, %"class.std::__1::vector.32", i32, %struct.TfLiteContext, %struct.TfLiteExternalContext**, %"class.std::__1::vector.39", i8, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.tflite::ErrorReporter"*, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector.46", i8, %"class.std::__1::unique_ptr.53", %"class.std::__1::vector.57", i8, i8, %"class.std::__1::unique_ptr.64", i8, %"class.std::__1::unique_ptr.70", %"class.std::__1::vector.27"*, i8, i1 (i8*)*, i8*, %"class.std::__1::unordered_map"* }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %struct.TfLiteTensor*, %struct.TfLiteTensor*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %struct.TfLiteTensor* }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.41" }
%"struct.std::__1::pair" = type { %struct.TfLiteNode, %struct.TfLiteRegistration }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %struct.TfLiteDelegate**, %struct.TfLiteDelegate**, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %struct.TfLiteDelegate** }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %struct.TfLiteIntArray* }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %struct.TfLiteDelegateParams*, %struct.TfLiteDelegateParams*, %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.TfLiteDelegateParams* }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.tflite::MemoryPlanner"* }
%"class.tflite::MemoryPlanner" = type { i32 (...)** }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.tflite::impl::Subgraph::SubgraphAwareProfiler"* }
%"class.tflite::impl::Subgraph::SubgraphAwareProfiler" = type { %"class.tflite::Profiler", %"class.tflite::Profiler"*, i64 }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.std::__1::unique_ptr.29"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.76", %"class.std::__1::__compressed_pair.85", %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.92", [4 x i8] }>
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78", %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { i64 }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { float }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %struct.TfLiteDelegate* }
%"struct.std::__1::__compressed_pair_elem.5" = type { void (%struct.TfLiteDelegate*)* }

$_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names = comdat any

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"kTfLiteNoType\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat32\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"kTfLiteInt32\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"kTfLiteUInt8\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"kTfLiteInt8\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"kTfLiteInt64\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"kTfLiteString\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"kTfLiteBool\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"kTfLiteInt16\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"kTfLiteComplex64\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat16\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat64\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"(invalid)\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"kTfLiteMemNone\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"kTfLiteMmapRo\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"kTfLiteDynamic\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"kTfLiteArenaRw\00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"kTfLiteArenaRwPersistent\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"kTfLitePersistentRo\00", align 1
@.str.23 = private unnamed_addr constant [43 x i8] c"Interpreter has %zu tensors and %zu nodes\0A\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"Inputs:\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Outputs:\00", align 1
@.str.26 = private unnamed_addr constant [52 x i8] c"Tensor %3zu %-20s %10s %15s %10zu bytes (%4.1f MB) \00", align 1
@.str.27 = private unnamed_addr constant [35 x i8] c"Node %3zu Operator Custom Name %s\0A\00", align 1
@.str.28 = private unnamed_addr constant [40 x i8] c"Node %3zu Operator Builtin Code %3d %s\0A\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"  Inputs:\00", align 1
@.str.30 = private unnamed_addr constant [11 x i8] c"  Outputs:\00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c"  Intermediates:\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"  Temporaries:\00", align 1
@_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names = linkonce_odr hidden local_unnamed_addr constant [128 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.159, i32 0, i32 0), i8* null], comdat, align 16
@.str.33 = private unnamed_addr constant [4 x i8] c"ADD\00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c"AVERAGE_POOL_2D\00", align 1
@.str.35 = private unnamed_addr constant [14 x i8] c"CONCATENATION\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"CONV_2D\00", align 1
@.str.37 = private unnamed_addr constant [18 x i8] c"DEPTHWISE_CONV_2D\00", align 1
@.str.38 = private unnamed_addr constant [15 x i8] c"DEPTH_TO_SPACE\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"DEQUANTIZE\00", align 1
@.str.40 = private unnamed_addr constant [17 x i8] c"EMBEDDING_LOOKUP\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"FLOOR\00", align 1
@.str.42 = private unnamed_addr constant [16 x i8] c"FULLY_CONNECTED\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"HASHTABLE_LOOKUP\00", align 1
@.str.44 = private unnamed_addr constant [17 x i8] c"L2_NORMALIZATION\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"L2_POOL_2D\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"LOCAL_RESPONSE_NORMALIZATION\00", align 1
@.str.47 = private unnamed_addr constant [9 x i8] c"LOGISTIC\00", align 1
@.str.48 = private unnamed_addr constant [15 x i8] c"LSH_PROJECTION\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"LSTM\00", align 1
@.str.50 = private unnamed_addr constant [12 x i8] c"MAX_POOL_2D\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"MUL\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"RELU\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"RELU_N1_TO_1\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"RELU6\00", align 1
@.str.55 = private unnamed_addr constant [8 x i8] c"RESHAPE\00", align 1
@.str.56 = private unnamed_addr constant [16 x i8] c"RESIZE_BILINEAR\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"RNN\00", align 1
@.str.58 = private unnamed_addr constant [8 x i8] c"SOFTMAX\00", align 1
@.str.59 = private unnamed_addr constant [15 x i8] c"SPACE_TO_DEPTH\00", align 1
@.str.60 = private unnamed_addr constant [5 x i8] c"SVDF\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"TANH\00", align 1
@.str.62 = private unnamed_addr constant [18 x i8] c"CONCAT_EMBEDDINGS\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"SKIP_GRAM\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c"CALL\00", align 1
@.str.65 = private unnamed_addr constant [7 x i8] c"CUSTOM\00", align 1
@.str.66 = private unnamed_addr constant [24 x i8] c"EMBEDDING_LOOKUP_SPARSE\00", align 1
@.str.67 = private unnamed_addr constant [4 x i8] c"PAD\00", align 1
@.str.68 = private unnamed_addr constant [28 x i8] c"UNIDIRECTIONAL_SEQUENCE_RNN\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"GATHER\00", align 1
@.str.70 = private unnamed_addr constant [18 x i8] c"BATCH_TO_SPACE_ND\00", align 1
@.str.71 = private unnamed_addr constant [18 x i8] c"SPACE_TO_BATCH_ND\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"TRANSPOSE\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"MEAN\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"SUB\00", align 1
@.str.75 = private unnamed_addr constant [4 x i8] c"DIV\00", align 1
@.str.76 = private unnamed_addr constant [8 x i8] c"SQUEEZE\00", align 1
@.str.77 = private unnamed_addr constant [29 x i8] c"UNIDIRECTIONAL_SEQUENCE_LSTM\00", align 1
@.str.78 = private unnamed_addr constant [14 x i8] c"STRIDED_SLICE\00", align 1
@.str.79 = private unnamed_addr constant [27 x i8] c"BIDIRECTIONAL_SEQUENCE_RNN\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"EXP\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"TOPK_V2\00", align 1
@.str.82 = private unnamed_addr constant [6 x i8] c"SPLIT\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"LOG_SOFTMAX\00", align 1
@.str.84 = private unnamed_addr constant [9 x i8] c"DELEGATE\00", align 1
@.str.85 = private unnamed_addr constant [28 x i8] c"BIDIRECTIONAL_SEQUENCE_LSTM\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"CAST\00", align 1
@.str.87 = private unnamed_addr constant [6 x i8] c"PRELU\00", align 1
@.str.88 = private unnamed_addr constant [8 x i8] c"MAXIMUM\00", align 1
@.str.89 = private unnamed_addr constant [8 x i8] c"ARG_MAX\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"MINIMUM\00", align 1
@.str.91 = private unnamed_addr constant [5 x i8] c"LESS\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"NEG\00", align 1
@.str.93 = private unnamed_addr constant [6 x i8] c"PADV2\00", align 1
@.str.94 = private unnamed_addr constant [8 x i8] c"GREATER\00", align 1
@.str.95 = private unnamed_addr constant [14 x i8] c"GREATER_EQUAL\00", align 1
@.str.96 = private unnamed_addr constant [11 x i8] c"LESS_EQUAL\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"SELECT\00", align 1
@.str.98 = private unnamed_addr constant [6 x i8] c"SLICE\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"SIN\00", align 1
@.str.100 = private unnamed_addr constant [15 x i8] c"TRANSPOSE_CONV\00", align 1
@.str.101 = private unnamed_addr constant [16 x i8] c"SPARSE_TO_DENSE\00", align 1
@.str.102 = private unnamed_addr constant [5 x i8] c"TILE\00", align 1
@.str.103 = private unnamed_addr constant [12 x i8] c"EXPAND_DIMS\00", align 1
@.str.104 = private unnamed_addr constant [6 x i8] c"EQUAL\00", align 1
@.str.105 = private unnamed_addr constant [10 x i8] c"NOT_EQUAL\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"LOG\00", align 1
@.str.107 = private unnamed_addr constant [4 x i8] c"SUM\00", align 1
@.str.108 = private unnamed_addr constant [5 x i8] c"SQRT\00", align 1
@.str.109 = private unnamed_addr constant [6 x i8] c"RSQRT\00", align 1
@.str.110 = private unnamed_addr constant [6 x i8] c"SHAPE\00", align 1
@.str.111 = private unnamed_addr constant [4 x i8] c"POW\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"ARG_MIN\00", align 1
@.str.113 = private unnamed_addr constant [11 x i8] c"FAKE_QUANT\00", align 1
@.str.114 = private unnamed_addr constant [12 x i8] c"REDUCE_PROD\00", align 1
@.str.115 = private unnamed_addr constant [11 x i8] c"REDUCE_MAX\00", align 1
@.str.116 = private unnamed_addr constant [5 x i8] c"PACK\00", align 1
@.str.117 = private unnamed_addr constant [11 x i8] c"LOGICAL_OR\00", align 1
@.str.118 = private unnamed_addr constant [8 x i8] c"ONE_HOT\00", align 1
@.str.119 = private unnamed_addr constant [12 x i8] c"LOGICAL_AND\00", align 1
@.str.120 = private unnamed_addr constant [12 x i8] c"LOGICAL_NOT\00", align 1
@.str.121 = private unnamed_addr constant [7 x i8] c"UNPACK\00", align 1
@.str.122 = private unnamed_addr constant [11 x i8] c"REDUCE_MIN\00", align 1
@.str.123 = private unnamed_addr constant [10 x i8] c"FLOOR_DIV\00", align 1
@.str.124 = private unnamed_addr constant [11 x i8] c"REDUCE_ANY\00", align 1
@.str.125 = private unnamed_addr constant [7 x i8] c"SQUARE\00", align 1
@.str.126 = private unnamed_addr constant [11 x i8] c"ZEROS_LIKE\00", align 1
@.str.127 = private unnamed_addr constant [5 x i8] c"FILL\00", align 1
@.str.128 = private unnamed_addr constant [10 x i8] c"FLOOR_MOD\00", align 1
@.str.129 = private unnamed_addr constant [6 x i8] c"RANGE\00", align 1
@.str.130 = private unnamed_addr constant [24 x i8] c"RESIZE_NEAREST_NEIGHBOR\00", align 1
@.str.131 = private unnamed_addr constant [11 x i8] c"LEAKY_RELU\00", align 1
@.str.132 = private unnamed_addr constant [19 x i8] c"SQUARED_DIFFERENCE\00", align 1
@.str.133 = private unnamed_addr constant [11 x i8] c"MIRROR_PAD\00", align 1
@.str.134 = private unnamed_addr constant [4 x i8] c"ABS\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"SPLIT_V\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c"UNIQUE\00", align 1
@.str.137 = private unnamed_addr constant [5 x i8] c"CEIL\00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"REVERSE_V2\00", align 1
@.str.139 = private unnamed_addr constant [6 x i8] c"ADD_N\00", align 1
@.str.140 = private unnamed_addr constant [10 x i8] c"GATHER_ND\00", align 1
@.str.141 = private unnamed_addr constant [4 x i8] c"COS\00", align 1
@.str.142 = private unnamed_addr constant [6 x i8] c"WHERE\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"RANK\00", align 1
@.str.144 = private unnamed_addr constant [4 x i8] c"ELU\00", align 1
@.str.145 = private unnamed_addr constant [17 x i8] c"REVERSE_SEQUENCE\00", align 1
@.str.146 = private unnamed_addr constant [12 x i8] c"MATRIX_DIAG\00", align 1
@.str.147 = private unnamed_addr constant [9 x i8] c"QUANTIZE\00", align 1
@.str.148 = private unnamed_addr constant [16 x i8] c"MATRIX_SET_DIAG\00", align 1
@.str.149 = private unnamed_addr constant [6 x i8] c"ROUND\00", align 1
@.str.150 = private unnamed_addr constant [11 x i8] c"HARD_SWISH\00", align 1
@.str.151 = private unnamed_addr constant [3 x i8] c"IF\00", align 1
@.str.152 = private unnamed_addr constant [6 x i8] c"WHILE\00", align 1
@.str.153 = private unnamed_addr constant [23 x i8] c"NON_MAX_SUPPRESSION_V4\00", align 1
@.str.154 = private unnamed_addr constant [23 x i8] c"NON_MAX_SUPPRESSION_V5\00", align 1
@.str.155 = private unnamed_addr constant [11 x i8] c"SCATTER_ND\00", align 1
@.str.156 = private unnamed_addr constant [10 x i8] c"SELECT_V2\00", align 1
@.str.157 = private unnamed_addr constant [8 x i8] c"DENSIFY\00", align 1
@.str.158 = private unnamed_addr constant [12 x i8] c"SEGMENT_SUM\00", align 1
@.str.159 = private unnamed_addr constant [13 x i8] c"BATCH_MATMUL\00", align 1
@str = private unnamed_addr constant [8 x i8] c" (null)\00", align 1
@switch.table._ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE = private unnamed_addr constant [12 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)], align 8
@switch.table._ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE.160 = private unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite14PrintIntVectorERKNSt3__16vectorIiNS0_9allocatorIiEEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %3, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %9, %1
  %8 = tail call i32 @putchar(i32 10)
  ret void

9:                                                ; preds = %1, %9
  %10 = phi i32* [ %13, %9 ], [ %3, %1 ]
  %11 = load i32, i32* %10, align 4
  %12 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %11)
  %13 = getelementptr inbounds i32, i32* %10, i64 1
  %14 = icmp eq i32* %13, %5
  br i1 %14, label %7, label %9
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6tflite20PrintTfLiteIntVectorEPK14TfLiteIntArray(%struct.TfLiteIntArray* readonly) local_unnamed_addr #2 {
  %2 = icmp eq %struct.TfLiteIntArray* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %11, label %9

7:                                                ; preds = %1
  %8 = tail call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i64 0, i64 0))
  br label %20

9:                                                ; preds = %11, %3
  %10 = tail call i32 @putchar(i32 10)
  br label %20

11:                                               ; preds = %3, %11
  %12 = phi i64 [ %16, %11 ], [ 0, %3 ]
  %13 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %0, i64 0, i32 1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %14)
  %16 = add nuw nsw i64 %12, 1
  %17 = load i32, i32* %4, align 4
  %18 = sext i32 %17 to i64
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %11, label %9

20:                                               ; preds = %9, %7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN6tflite14TensorTypeNameE10TfLiteType(i32) local_unnamed_addr #3 {
  %2 = icmp ult i32 %0, 12
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [12 x i8*], [12 x i8*]* @switch.table._ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN6tflite13AllocTypeNameE20TfLiteAllocationType(i32) local_unnamed_addr #3 {
  %2 = icmp ult i32 %0, 6
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* @switch.table._ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE.160, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0)
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE(%"class.tflite::impl::Interpreter"* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %"class.tflite::impl::Interpreter", %"class.tflite::impl::Interpreter"* %0, i64 0, i32 0
  %3 = load %struct.TfLiteContext*, %struct.TfLiteContext** %2, align 8
  %4 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.tflite::impl::Interpreter", %"class.tflite::impl::Interpreter"* %0, i64 0, i32 8, i32 0, i32 0
  %7 = load %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.tflite::impl::Subgraph"*, %"class.tflite::impl::Subgraph"** %8, align 8
  %10 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %9, i64 0, i32 5
  %11 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %9, i64 0, i32 5, i32 0, i32 1
  %12 = bitcast %"struct.std::__1::pair"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector.39"* %10 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = sdiv exact i64 %16, 136
  %18 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.23, i64 0, i64 0), i64 %5, i64 %17)
  %19 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i64 0, i64 0))
  %20 = load %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"** %6, align 8
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.tflite::impl::Subgraph"*, %"class.tflite::impl::Subgraph"** %21, align 8
  %23 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %22, i64 0, i32 7, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %22, i64 0, i32 7, i32 0, i32 1
  %26 = load i32*, i32** %25, align 8
  %27 = icmp eq i32* %24, %26
  br i1 %27, label %34, label %28

28:                                               ; preds = %1, %28
  %29 = phi i32* [ %32, %28 ], [ %24, %1 ]
  %30 = load i32, i32* %29, align 4
  %31 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %30) #5
  %32 = getelementptr inbounds i32, i32* %29, i64 1
  %33 = icmp eq i32* %32, %26
  br i1 %33, label %34, label %28

34:                                               ; preds = %28, %1
  %35 = tail call i32 @putchar(i32 10) #5
  %36 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i64 0, i64 0))
  %37 = load %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"** %6, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.tflite::impl::Subgraph"*, %"class.tflite::impl::Subgraph"** %38, align 8
  %40 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %39, i64 0, i32 8, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %39, i64 0, i32 8, i32 0, i32 1
  %43 = load i32*, i32** %42, align 8
  %44 = icmp eq i32* %41, %43
  br i1 %44, label %51, label %45

45:                                               ; preds = %34, %45
  %46 = phi i32* [ %49, %45 ], [ %41, %34 ]
  %47 = load i32, i32* %46, align 4
  %48 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %47) #5
  %49 = getelementptr inbounds i32, i32* %46, i64 1
  %50 = icmp eq i32* %49, %43
  br i1 %50, label %51, label %45

51:                                               ; preds = %45, %34
  %52 = tail call i32 @putchar(i32 10) #5
  %53 = tail call i32 @putchar(i32 10)
  %54 = load %struct.TfLiteContext*, %struct.TfLiteContext** %2, align 8
  %55 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %54, i64 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %73

58:                                               ; preds = %138, %51
  %59 = tail call i32 @putchar(i32 10)
  %60 = load %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"** %6, align 8
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29"* %60, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.tflite::impl::Subgraph"*, %"class.tflite::impl::Subgraph"** %61, align 8
  %63 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %62, i64 0, i32 5
  %64 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %62, i64 0, i32 5, i32 0, i32 1
  %65 = bitcast %"struct.std::__1::pair"** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::vector.39"* %63 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = sub i64 %66, %68
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %144, label %71

71:                                               ; preds = %58
  %72 = sdiv exact i64 %69, 136
  br label %145

73:                                               ; preds = %51, %138
  %74 = phi i64 [ %139, %138 ], [ 0, %51 ]
  %75 = trunc i64 %74 to i32
  %76 = load %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"** %6, align 8
  %77 = getelementptr inbounds %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.tflite::impl::Subgraph"*, %"class.tflite::impl::Subgraph"** %77, align 8
  %79 = icmp slt i32 %75, 0
  br i1 %79, label %90, label %80

80:                                               ; preds = %73
  %81 = shl i64 %74, 32
  %82 = ashr exact i64 %81, 32
  %83 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %78, i64 0, i32 3, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = icmp ugt i64 %84, %82
  br i1 %85, label %86, label %90

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %78, i64 0, i32 3, i32 2
  %88 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %87, align 8
  %89 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %88, i64 %82
  br label %90

90:                                               ; preds = %73, %80, %86
  %91 = phi %struct.TfLiteTensor* [ %89, %86 ], [ null, %80 ], [ null, %73 ]
  %92 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %91, i64 0, i32 7
  %93 = load i8*, i8** %92, align 8
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %91, i64 0, i32 0
  %95 = load i32, i32* %94, align 8
  %96 = icmp ult i32 %95, 12
  br i1 %96, label %97, label %101

97:                                               ; preds = %90
  %98 = sext i32 %95 to i64
  %99 = getelementptr inbounds [12 x i8*], [12 x i8*]* @switch.table._ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE, i64 0, i64 %98
  %100 = load i8*, i8** %99, align 8
  br label %101

101:                                              ; preds = %90, %97
  %102 = phi i8* [ %100, %97 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0), %90 ]
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %91, i64 0, i32 4
  %104 = load i32, i32* %103, align 8
  %105 = icmp ult i32 %104, 6
  br i1 %105, label %106, label %110

106:                                              ; preds = %101
  %107 = sext i32 %104 to i64
  %108 = getelementptr inbounds [6 x i8*], [6 x i8*]* @switch.table._ZN6tflite21PrintInterpreterStateEPNS_4impl11InterpreterE.160, i64 0, i64 %107
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %101, %106
  %111 = phi i8* [ %109, %106 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0), %101 ]
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %91, i64 0, i32 5
  %113 = load i64, i64* %112, align 8
  %114 = uitofp i64 %113 to float
  %115 = fmul float %114, 0x3EB0000000000000
  %116 = fpext float %115 to double
  %117 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.26, i64 0, i64 0), i64 %74, i8* %93, i8* %102, i8* nonnull %111, i64 %113, double %116)
  %118 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %91, i64 0, i32 2
  %119 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %118, align 8
  %120 = icmp eq %struct.TfLiteIntArray* %119, null
  br i1 %120, label %125, label %121

121:                                              ; preds = %110
  %122 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %119, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = icmp sgt i32 %123, 0
  br i1 %124, label %129, label %127

125:                                              ; preds = %110
  %126 = tail call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i64 0, i64 0)) #5
  br label %138

127:                                              ; preds = %129, %121
  %128 = tail call i32 @putchar(i32 10) #5
  br label %138

129:                                              ; preds = %121, %129
  %130 = phi i64 [ %134, %129 ], [ 0, %121 ]
  %131 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %119, i64 0, i32 1, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %132) #5
  %134 = add nuw nsw i64 %130, 1
  %135 = load i32, i32* %122, align 4
  %136 = sext i32 %135 to i64
  %137 = icmp slt i64 %134, %136
  br i1 %137, label %129, label %127

138:                                              ; preds = %125, %127
  %139 = add nuw i64 %74, 1
  %140 = load %struct.TfLiteContext*, %struct.TfLiteContext** %2, align 8
  %141 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %140, i64 0, i32 0
  %142 = load i64, i64* %141, align 8
  %143 = icmp ult i64 %139, %142
  br i1 %143, label %73, label %58

144:                                              ; preds = %274, %58
  ret void

145:                                              ; preds = %71, %274
  %146 = phi i64 [ %286, %274 ], [ %72, %71 ]
  %147 = phi i64 [ %284, %274 ], [ %68, %71 ]
  %148 = phi i64 [ %275, %274 ], [ 0, %71 ]
  %149 = trunc i64 %148 to i32
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %158, label %151

151:                                              ; preds = %145
  %152 = shl i64 %148, 32
  %153 = ashr exact i64 %152, 32
  %154 = icmp ugt i64 %146, %153
  br i1 %154, label %155, label %158

155:                                              ; preds = %151
  %156 = inttoptr i64 %147 to %"struct.std::__1::pair"*
  %157 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %156, i64 %153
  br label %158

158:                                              ; preds = %145, %151, %155
  %159 = phi %"struct.std::__1::pair"* [ %157, %155 ], [ null, %151 ], [ null, %145 ]
  %160 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %159, i64 0, i32 1, i32 6
  %161 = load i8*, i8** %160, align 8
  %162 = icmp eq i8* %161, null
  br i1 %162, label %165, label %163

163:                                              ; preds = %158
  %164 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.27, i64 0, i64 0), i64 %148, i8* nonnull %161)
  br label %172

165:                                              ; preds = %158
  %166 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %159, i64 0, i32 1, i32 5
  %167 = load i32, i32* %166, align 8
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [128 x i8*], [128 x i8*]* @_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names, i64 0, i64 %168
  %170 = load i8*, i8** %169, align 8
  %171 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.28, i64 0, i64 0), i64 %148, i32 %167, i8* %170)
  br label %172

172:                                              ; preds = %165, %163
  %173 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i64 0, i64 0))
  %174 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %159, i64 0, i32 0, i32 0
  %175 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %174, align 8
  %176 = icmp eq %struct.TfLiteIntArray* %175, null
  br i1 %176, label %181, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %175, i64 0, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %185, label %183

181:                                              ; preds = %172
  %182 = tail call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i64 0, i64 0)) #5
  br label %194

183:                                              ; preds = %185, %177
  %184 = tail call i32 @putchar(i32 10) #5
  br label %194

185:                                              ; preds = %177, %185
  %186 = phi i64 [ %190, %185 ], [ 0, %177 ]
  %187 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %175, i64 0, i32 1, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %188) #5
  %190 = add nuw nsw i64 %186, 1
  %191 = load i32, i32* %178, align 4
  %192 = sext i32 %191 to i64
  %193 = icmp slt i64 %190, %192
  br i1 %193, label %185, label %183

194:                                              ; preds = %181, %183
  %195 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0))
  %196 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %159, i64 0, i32 0, i32 1
  %197 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %196, align 8
  %198 = icmp eq %struct.TfLiteIntArray* %197, null
  br i1 %198, label %203, label %199

199:                                              ; preds = %194
  %200 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %197, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %207, label %205

203:                                              ; preds = %194
  %204 = tail call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i64 0, i64 0)) #5
  br label %216

205:                                              ; preds = %207, %199
  %206 = tail call i32 @putchar(i32 10) #5
  br label %216

207:                                              ; preds = %199, %207
  %208 = phi i64 [ %212, %207 ], [ 0, %199 ]
  %209 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %197, i64 0, i32 1, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %210) #5
  %212 = add nuw nsw i64 %208, 1
  %213 = load i32, i32* %200, align 4
  %214 = sext i32 %213 to i64
  %215 = icmp slt i64 %212, %214
  br i1 %215, label %207, label %205

216:                                              ; preds = %203, %205
  %217 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %159, i64 0, i32 0, i32 2
  %218 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %217, align 8
  %219 = icmp eq %struct.TfLiteIntArray* %218, null
  br i1 %219, label %245, label %220

220:                                              ; preds = %216
  %221 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %218, i64 0, i32 0
  %222 = load i32, i32* %221, align 4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %245, label %224

224:                                              ; preds = %220
  %225 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.31, i64 0, i64 0))
  %226 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %217, align 8
  %227 = icmp eq %struct.TfLiteIntArray* %226, null
  br i1 %227, label %232, label %228

228:                                              ; preds = %224
  %229 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %226, i64 0, i32 0
  %230 = load i32, i32* %229, align 4
  %231 = icmp sgt i32 %230, 0
  br i1 %231, label %236, label %234

232:                                              ; preds = %224
  %233 = tail call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i64 0, i64 0)) #5
  br label %245

234:                                              ; preds = %236, %228
  %235 = tail call i32 @putchar(i32 10) #5
  br label %245

236:                                              ; preds = %228, %236
  %237 = phi i64 [ %241, %236 ], [ 0, %228 ]
  %238 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %226, i64 0, i32 1, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %239) #5
  %241 = add nuw nsw i64 %237, 1
  %242 = load i32, i32* %229, align 4
  %243 = sext i32 %242 to i64
  %244 = icmp slt i64 %241, %243
  br i1 %244, label %236, label %234

245:                                              ; preds = %234, %232, %220, %216
  %246 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %159, i64 0, i32 0, i32 3
  %247 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %246, align 8
  %248 = icmp eq %struct.TfLiteIntArray* %247, null
  br i1 %248, label %274, label %249

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %247, i64 0, i32 0
  %251 = load i32, i32* %250, align 4
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %274, label %253

253:                                              ; preds = %249
  %254 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0))
  %255 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %246, align 8
  %256 = icmp eq %struct.TfLiteIntArray* %255, null
  br i1 %256, label %261, label %257

257:                                              ; preds = %253
  %258 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %255, i64 0, i32 0
  %259 = load i32, i32* %258, align 4
  %260 = icmp sgt i32 %259, 0
  br i1 %260, label %265, label %263

261:                                              ; preds = %253
  %262 = tail call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i64 0, i64 0)) #5
  br label %274

263:                                              ; preds = %265, %257
  %264 = tail call i32 @putchar(i32 10) #5
  br label %274

265:                                              ; preds = %257, %265
  %266 = phi i64 [ %270, %265 ], [ 0, %257 ]
  %267 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %255, i64 0, i32 1, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %268) #5
  %270 = add nuw nsw i64 %266, 1
  %271 = load i32, i32* %258, align 4
  %272 = sext i32 %271 to i64
  %273 = icmp slt i64 %270, %272
  br i1 %273, label %265, label %263

274:                                              ; preds = %263, %261, %249, %245
  %275 = add nuw i64 %148, 1
  %276 = load %"class.std::__1::unique_ptr.29"*, %"class.std::__1::unique_ptr.29"** %6, align 8
  %277 = getelementptr inbounds %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29"* %276, i64 0, i32 0, i32 0, i32 0
  %278 = load %"class.tflite::impl::Subgraph"*, %"class.tflite::impl::Subgraph"** %277, align 8
  %279 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %278, i64 0, i32 5
  %280 = getelementptr inbounds %"class.tflite::impl::Subgraph", %"class.tflite::impl::Subgraph"* %278, i64 0, i32 5, i32 0, i32 1
  %281 = bitcast %"struct.std::__1::pair"** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"class.std::__1::vector.39"* %279 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = sub i64 %282, %284
  %286 = sdiv exact i64 %285, 136
  %287 = icmp ult i64 %275, %286
  br i1 %287, label %145, label %144
}

; Function Attrs: nofree nounwind
declare i32 @putchar(i32) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
